=== Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatWithFlowableOfFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatWithFlowableOfFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 909419.414 ops/s
# Warmup Iteration   2: 1330696.900 ops/s
# Warmup Iteration   3: 1272921.375 ops/s
# Warmup Iteration   4: 1440756.919 ops/s
# Warmup Iteration   5: 1442301.061 ops/s
# Warmup Iteration   6: 1436001.303 ops/s
# Warmup Iteration   7: 1444070.624 ops/s
# Warmup Iteration   8: 1438058.883 ops/s
# Warmup Iteration   9: 1432963.761 ops/s
# Warmup Iteration  10: 1434946.767 ops/s
# Warmup Iteration  11: 1439728.550 ops/s
# Warmup Iteration  12: 1441545.923 ops/s
# Warmup Iteration  13: 1434807.250 ops/s
# Warmup Iteration  14: 1423918.791 ops/s
# Warmup Iteration  15: 1428644.179 ops/s
# Warmup Iteration  16: 1420513.493 ops/s
# Warmup Iteration  17: 1442594.215 ops/s
# Warmup Iteration  18: 1451897.220 ops/s
# Warmup Iteration  19: 1458278.460 ops/s
# Warmup Iteration  20: 1457555.540 ops/s
# Warmup Iteration  21: 1445951.428 ops/s
# Warmup Iteration  22: 1455810.749 ops/s
# Warmup Iteration  23: 1448092.978 ops/s
# Warmup Iteration  24: 1452079.586 ops/s
# Warmup Iteration  25: 1447377.578 ops/s
# Warmup Iteration  26: 1455353.150 ops/s
# Warmup Iteration  27: 1451333.811 ops/s
# Warmup Iteration  28: 1441364.904 ops/s
# Warmup Iteration  29: 1446324.467 ops/s
# Warmup Iteration  30: 1445614.872 ops/s
Iteration   1: 1429589.134 ops/s
Iteration   2: 1451215.338 ops/s
Iteration   3: 1453389.868 ops/s
Iteration   4: 1444943.704 ops/s
Iteration   5: 1449842.736 ops/s
Iteration   6: 1445137.702 ops/s
Iteration   7: 1461301.373 ops/s
Iteration   8: 1453505.932 ops/s
Iteration   9: 1445517.097 ops/s
Iteration  10: 1449629.390 ops/s
Iteration  11: 1455513.969 ops/s
Iteration  12: 1450413.204 ops/s
Iteration  13: 1441343.280 ops/s
Iteration  14: 1442581.759 ops/s
Iteration  15: 1446253.583 ops/s
Iteration  16: 1456450.797 ops/s
Iteration  17: 1447267.127 ops/s
Iteration  18: 1455728.873 ops/s
Iteration  19: 1448086.002 ops/s
Iteration  20: 1446873.788 ops/s
Iteration  21: 1449853.729 ops/s
Iteration  22: 1441886.833 ops/s
Iteration  23: 1448947.488 ops/s
Iteration  24: 1448014.155 ops/s
Iteration  25: 1448802.421 ops/s
Iteration  26: 1431043.271 ops/s
Iteration  27: 1450346.749 ops/s
Iteration  28: 1443974.021 ops/s
Iteration  29: 1444977.365 ops/s
Iteration  30: 1451562.164 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatWithFlowableOfFlowable":
  1447799.762 ±(99.9%) 4403.056 ops/s [Average]
  (min, avg, max) = (1429589.134, 1447799.762, 1461301.373), stdev = 6590.287
  CI (99.9%): [1443396.706, 1452202.818] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FlowableConcatTests._Benchmark.benchmark_concatWithFlowableOfFlowable  thrpt   30  1447799.762 ± 4403.056  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1146543.073 ops/s
# Warmup Iteration   2: 1729178.727 ops/s
# Warmup Iteration   3: 1695140.007 ops/s
# Warmup Iteration   4: 1869534.399 ops/s
# Warmup Iteration   5: 1883740.688 ops/s
# Warmup Iteration   6: 1886951.711 ops/s
# Warmup Iteration   7: 1891930.751 ops/s
# Warmup Iteration   8: 1889882.440 ops/s
# Warmup Iteration   9: 1845494.502 ops/s
# Warmup Iteration  10: 1879199.003 ops/s
# Warmup Iteration  11: 1878300.481 ops/s
# Warmup Iteration  12: 1881193.619 ops/s
# Warmup Iteration  13: 1871494.523 ops/s
# Warmup Iteration  14: 1877311.266 ops/s
# Warmup Iteration  15: 1874229.624 ops/s
# Warmup Iteration  16: 1883027.563 ops/s
# Warmup Iteration  17: 1906841.629 ops/s
# Warmup Iteration  18: 1886860.562 ops/s
# Warmup Iteration  19: 1884633.986 ops/s
# Warmup Iteration  20: 1904786.068 ops/s
# Warmup Iteration  21: 1886456.220 ops/s
# Warmup Iteration  22: 1916716.813 ops/s
# Warmup Iteration  23: 1876197.290 ops/s
# Warmup Iteration  24: 1904369.336 ops/s
# Warmup Iteration  25: 1873616.024 ops/s
# Warmup Iteration  26: 1905912.469 ops/s
# Warmup Iteration  27: 1900079.777 ops/s
# Warmup Iteration  28: 1894510.782 ops/s
# Warmup Iteration  29: 1897576.730 ops/s
# Warmup Iteration  30: 1911978.810 ops/s
Iteration   1: 1905100.296 ops/s
Iteration   2: 1901930.360 ops/s
Iteration   3: 1905008.184 ops/s
Iteration   4: 1897762.210 ops/s
Iteration   5: 1904813.347 ops/s
Iteration   6: 1906612.369 ops/s
Iteration   7: 1916276.222 ops/s
Iteration   8: 1866284.712 ops/s
Iteration   9: 1878716.361 ops/s
Iteration  10: 1909458.449 ops/s
Iteration  11: 1913783.305 ops/s
Iteration  12: 1909376.270 ops/s
Iteration  13: 1881541.323 ops/s
Iteration  14: 1896330.655 ops/s
Iteration  15: 1907283.600 ops/s
Iteration  16: 1902495.784 ops/s
Iteration  17: 1907812.916 ops/s
Iteration  18: 1905886.270 ops/s
Iteration  19: 1875064.717 ops/s
Iteration  20: 1907808.965 ops/s
Iteration  21: 1916617.819 ops/s
Iteration  22: 1914820.099 ops/s
Iteration  23: 1888514.454 ops/s
Iteration  24: 1905391.480 ops/s
Iteration  25: 1905234.439 ops/s
Iteration  26: 1914272.952 ops/s
Iteration  27: 1906745.697 ops/s
Iteration  28: 1903056.906 ops/s
Iteration  29: 1897798.363 ops/s
Iteration  30: 1910681.511 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance":
  1902082.668 ±(99.9%) 8296.785 ops/s [Average]
  (min, avg, max) = (1866284.712, 1902082.668, 1916617.819), stdev = 12418.238
  CI (99.9%): [1893785.883, 1910379.453] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
FlowableConcatTests._Benchmark.benchmark_concatCovariance  thrpt   30  1902082.668 ± 8296.785  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1112749.031 ops/s
# Warmup Iteration   2: 1607726.082 ops/s
# Warmup Iteration   3: 1674737.238 ops/s
# Warmup Iteration   4: 1823730.334 ops/s
# Warmup Iteration   5: 1806240.313 ops/s
# Warmup Iteration   6: 1802484.779 ops/s
# Warmup Iteration   7: 1816416.873 ops/s
# Warmup Iteration   8: 1797935.469 ops/s
# Warmup Iteration   9: 1807523.912 ops/s
# Warmup Iteration  10: 1807902.660 ops/s
# Warmup Iteration  11: 1812564.497 ops/s
# Warmup Iteration  12: 1767589.734 ops/s
# Warmup Iteration  13: 1800384.498 ops/s
# Warmup Iteration  14: 1798545.986 ops/s
# Warmup Iteration  15: 1782799.402 ops/s
# Warmup Iteration  16: 1725264.035 ops/s
# Warmup Iteration  17: 1830977.593 ops/s
# Warmup Iteration  18: 1838484.098 ops/s
# Warmup Iteration  19: 1834562.419 ops/s
# Warmup Iteration  20: 1834744.282 ops/s
# Warmup Iteration  21: 1826486.713 ops/s
# Warmup Iteration  22: 1825174.877 ops/s
# Warmup Iteration  23: 1828473.742 ops/s
# Warmup Iteration  24: 1821657.864 ops/s
# Warmup Iteration  25: 1818081.481 ops/s
# Warmup Iteration  26: 1802026.654 ops/s
# Warmup Iteration  27: 1804862.462 ops/s
# Warmup Iteration  28: 1813277.405 ops/s
# Warmup Iteration  29: 1834266.434 ops/s
# Warmup Iteration  30: 1807475.431 ops/s
Iteration   1: 1826275.088 ops/s
Iteration   2: 1775797.990 ops/s
Iteration   3: 1832564.465 ops/s
Iteration   4: 1813667.978 ops/s
Iteration   5: 1814988.263 ops/s
Iteration   6: 1817788.987 ops/s
Iteration   7: 1813330.739 ops/s
Iteration   8: 1806677.580 ops/s
Iteration   9: 1822214.317 ops/s
Iteration  10: 1829867.061 ops/s
Iteration  11: 1815496.819 ops/s
Iteration  12: 1819896.317 ops/s
Iteration  13: 1818398.721 ops/s
Iteration  14: 1833516.692 ops/s
Iteration  15: 1838575.264 ops/s
Iteration  16: 1826925.369 ops/s
Iteration  17: 1819022.774 ops/s
Iteration  18: 1823777.869 ops/s
Iteration  19: 1787321.016 ops/s
Iteration  20: 1831540.615 ops/s
Iteration  21: 1810648.130 ops/s
Iteration  22: 1823779.685 ops/s
Iteration  23: 1818006.571 ops/s
Iteration  24: 1820111.161 ops/s
Iteration  25: 1826195.253 ops/s
Iteration  26: 1819249.952 ops/s
Iteration  27: 1817279.458 ops/s
Iteration  28: 1802306.331 ops/s
Iteration  29: 1818927.821 ops/s
Iteration  30: 1811047.524 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatCovariance2":
  1817839.860 ±(99.9%) 8565.661 ops/s [Average]
  (min, avg, max) = (1775797.990, 1817839.860, 1838575.264), stdev = 12820.679
  CI (99.9%): [1809274.200, 1826405.521] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FlowableConcatTests._Benchmark.benchmark_concatCovariance2  thrpt   30  1817839.860 ± 8565.661  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatWithIterableOfFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatWithIterableOfFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 793099.815 ops/s
# Warmup Iteration   2: 1209122.854 ops/s
# Warmup Iteration   3: 1225645.719 ops/s
# Warmup Iteration   4: 1384080.027 ops/s
# Warmup Iteration   5: 1380349.516 ops/s
# Warmup Iteration   6: 1362355.632 ops/s
# Warmup Iteration   7: 1387457.257 ops/s
# Warmup Iteration   8: 1376148.202 ops/s
# Warmup Iteration   9: 1381261.863 ops/s
# Warmup Iteration  10: 1381959.753 ops/s
# Warmup Iteration  11: 1376910.185 ops/s
# Warmup Iteration  12: 1380603.673 ops/s
# Warmup Iteration  13: 1366618.052 ops/s
# Warmup Iteration  14: 1371946.724 ops/s
# Warmup Iteration  15: 1376023.684 ops/s
# Warmup Iteration  16: 1378398.479 ops/s
# Warmup Iteration  17: 1391349.825 ops/s
# Warmup Iteration  18: 1368747.563 ops/s
# Warmup Iteration  19: 1374356.595 ops/s
# Warmup Iteration  20: 1393878.781 ops/s
# Warmup Iteration  21: 1373915.359 ops/s
# Warmup Iteration  22: 1390619.651 ops/s
# Warmup Iteration  23: 1393036.271 ops/s
# Warmup Iteration  24: 1389586.522 ops/s
# Warmup Iteration  25: 1389368.229 ops/s
# Warmup Iteration  26: 1369897.689 ops/s
# Warmup Iteration  27: 1396671.480 ops/s
# Warmup Iteration  28: 1377910.556 ops/s
# Warmup Iteration  29: 1396665.083 ops/s
# Warmup Iteration  30: 1390970.559 ops/s
Iteration   1: 1392518.532 ops/s
Iteration   2: 1393780.903 ops/s
Iteration   3: 1391420.016 ops/s
Iteration   4: 1379559.651 ops/s
Iteration   5: 1388860.358 ops/s
Iteration   6: 1372273.566 ops/s
Iteration   7: 1398014.594 ops/s
Iteration   8: 1385129.077 ops/s
Iteration   9: 1378914.127 ops/s
Iteration  10: 1388572.403 ops/s
Iteration  11: 1387441.071 ops/s
Iteration  12: 1394444.892 ops/s
Iteration  13: 1384136.206 ops/s
Iteration  14: 1393300.233 ops/s
Iteration  15: 1384215.997 ops/s
Iteration  16: 1370542.184 ops/s
Iteration  17: 1402235.053 ops/s
Iteration  18: 1383046.046 ops/s
Iteration  19: 1387501.703 ops/s
Iteration  20: 1384558.170 ops/s
Iteration  21: 1387751.127 ops/s
Iteration  22: 1390810.014 ops/s
Iteration  23: 1401291.971 ops/s
Iteration  24: 1389754.607 ops/s
Iteration  25: 1393964.567 ops/s
Iteration  26: 1389325.422 ops/s
Iteration  27: 1391824.432 ops/s
Iteration  28: 1385268.440 ops/s
Iteration  29: 1378607.145 ops/s
Iteration  30: 1380245.876 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableConcatTests._Benchmark.benchmark_concatWithIterableOfFlowable":
  1387643.613 ±(99.9%) 4979.896 ops/s [Average]
  (min, avg, max) = (1370542.184, 1387643.613, 1402235.053), stdev = 7453.675
  CI (99.9%): [1382663.716, 1392623.509] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FlowableConcatTests._Benchmark.benchmark_concatWithIterableOfFlowable  thrpt   30  1387643.613 ± 4979.896  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableStartWithTest._Benchmark.benchmark_maybeEmptyNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableStartWithTest._Benchmark.benchmark_maybeEmptyNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2460314.747 ops/s
# Warmup Iteration   2: 3153419.935 ops/s
# Warmup Iteration   3: 3836705.370 ops/s
# Warmup Iteration   4: 3873679.980 ops/s
# Warmup Iteration   5: 3848078.142 ops/s
# Warmup Iteration   6: 3852416.376 ops/s
# Warmup Iteration   7: 3858847.544 ops/s
# Warmup Iteration   8: 3823997.351 ops/s
# Warmup Iteration   9: 3801993.912 ops/s
# Warmup Iteration  10: 3777801.755 ops/s
# Warmup Iteration  11: 3838187.890 ops/s
# Warmup Iteration  12: 3828529.069 ops/s
# Warmup Iteration  13: 3826887.168 ops/s
# Warmup Iteration  14: 3839551.044 ops/s
# Warmup Iteration  15: 3829271.410 ops/s
# Warmup Iteration  16: 3812925.573 ops/s
# Warmup Iteration  17: 3829723.399 ops/s
# Warmup Iteration  18: 3808879.107 ops/s
# Warmup Iteration  19: 3843072.544 ops/s
# Warmup Iteration  20: 3781315.109 ops/s
# Warmup Iteration  21: 3809532.259 ops/s
# Warmup Iteration  22: 3849534.976 ops/s
# Warmup Iteration  23: 3855776.874 ops/s
# Warmup Iteration  24: 3823949.881 ops/s
# Warmup Iteration  25: 3826580.663 ops/s
# Warmup Iteration  26: 3829933.360 ops/s
# Warmup Iteration  27: 3835083.083 ops/s
# Warmup Iteration  28: 3822204.670 ops/s
# Warmup Iteration  29: 3837373.453 ops/s
# Warmup Iteration  30: 3820021.052 ops/s
Iteration   1: 3821206.237 ops/s
Iteration   2: 3768734.290 ops/s
Iteration   3: 3834071.198 ops/s
Iteration   4: 3820210.547 ops/s
Iteration   5: 3793088.846 ops/s
Iteration   6: 3831124.992 ops/s
Iteration   7: 3811723.950 ops/s
Iteration   8: 3794522.631 ops/s
Iteration   9: 3812024.935 ops/s
Iteration  10: 3783827.880 ops/s
Iteration  11: 3844223.886 ops/s
Iteration  12: 3765874.966 ops/s
Iteration  13: 3802703.584 ops/s
Iteration  14: 3820463.325 ops/s
Iteration  15: 3819608.311 ops/s
Iteration  16: 3839779.811 ops/s
Iteration  17: 3751510.170 ops/s
Iteration  18: 3840223.612 ops/s
Iteration  19: 3811779.549 ops/s
Iteration  20: 3769093.754 ops/s
Iteration  21: 3828781.026 ops/s
Iteration  22: 3819632.005 ops/s
Iteration  23: 3793804.181 ops/s
Iteration  24: 3795976.116 ops/s
Iteration  25: 3837103.495 ops/s
Iteration  26: 3783723.262 ops/s
Iteration  27: 3834856.617 ops/s
Iteration  28: 3811672.803 ops/s
Iteration  29: 3826584.252 ops/s
Iteration  30: 3813807.918 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableStartWithTest._Benchmark.benchmark_maybeEmptyNormal":
  3809391.272 ±(99.9%) 16494.532 ops/s [Average]
  (min, avg, max) = (3751510.170, 3809391.272, 3844223.886), stdev = 24688.240
  CI (99.9%): [3792896.740, 3825885.803] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompletableStartWithTest._Benchmark.benchmark_maybeEmptyNormal  thrpt   30  3809391.272 ± 16494.532  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_emptyCompletableComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_emptyCompletableComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2361821.075 ops/s
# Warmup Iteration   2: 3102530.929 ops/s
# Warmup Iteration   3: 3772187.968 ops/s
# Warmup Iteration   4: 3805345.365 ops/s
# Warmup Iteration   5: 3725641.598 ops/s
# Warmup Iteration   6: 3768105.833 ops/s
# Warmup Iteration   7: 3809145.784 ops/s
# Warmup Iteration   8: 3815283.266 ops/s
# Warmup Iteration   9: 3800749.618 ops/s
# Warmup Iteration  10: 3793192.630 ops/s
# Warmup Iteration  11: 3793646.573 ops/s
# Warmup Iteration  12: 3800410.512 ops/s
# Warmup Iteration  13: 3779855.447 ops/s
# Warmup Iteration  14: 3736206.226 ops/s
# Warmup Iteration  15: 3808237.936 ops/s
# Warmup Iteration  16: 3704896.902 ops/s
# Warmup Iteration  17: 3752464.537 ops/s
# Warmup Iteration  18: 3728431.032 ops/s
# Warmup Iteration  19: 3713653.425 ops/s
# Warmup Iteration  20: 3768306.634 ops/s
# Warmup Iteration  21: 3771218.309 ops/s
# Warmup Iteration  22: 3736892.399 ops/s
# Warmup Iteration  23: 3708475.027 ops/s
# Warmup Iteration  24: 3770197.512 ops/s
# Warmup Iteration  25: 3748667.010 ops/s
# Warmup Iteration  26: 3733198.415 ops/s
# Warmup Iteration  27: 3776614.242 ops/s
# Warmup Iteration  28: 3757596.820 ops/s
# Warmup Iteration  29: 3712613.104 ops/s
# Warmup Iteration  30: 3749391.714 ops/s
Iteration   1: 3781125.865 ops/s
Iteration   2: 3758008.679 ops/s
Iteration   3: 3634428.880 ops/s
Iteration   4: 3765810.769 ops/s
Iteration   5: 3751496.635 ops/s
Iteration   6: 3785891.301 ops/s
Iteration   7: 3759862.289 ops/s
Iteration   8: 3753355.089 ops/s
Iteration   9: 3773808.346 ops/s
Iteration  10: 3773587.820 ops/s
Iteration  11: 3729022.289 ops/s
Iteration  12: 3750120.216 ops/s
Iteration  13: 3762091.701 ops/s
Iteration  14: 3772324.914 ops/s
Iteration  15: 3761316.904 ops/s
Iteration  16: 3781675.688 ops/s
Iteration  17: 3765329.647 ops/s
Iteration  18: 3643744.996 ops/s
Iteration  19: 3742523.359 ops/s
Iteration  20: 3770302.552 ops/s
Iteration  21: 3806841.665 ops/s
Iteration  22: 3768333.761 ops/s
Iteration  23: 3757562.999 ops/s
Iteration  24: 3776061.169 ops/s
Iteration  25: 3732010.411 ops/s
Iteration  26: 3760692.211 ops/s
Iteration  27: 3761370.772 ops/s
Iteration  28: 3740672.209 ops/s
Iteration  29: 3733775.701 ops/s
Iteration  30: 3755040.357 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_emptyCompletableComplete":
  3753606.307 ±(99.9%) 23613.969 ops/s [Average]
  (min, avg, max) = (3634428.880, 3753606.307, 3806841.665), stdev = 35344.280
  CI (99.9%): [3729992.337, 3777220.276] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
MaybeStartWithTest._Benchmark.benchmark_emptyCompletableComplete  thrpt   30  3753606.307 ± 23613.969  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_noCancelPrevious$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_noCancelPrevious

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 770138.032 ops/s
# Warmup Iteration   2: 1097745.100 ops/s
# Warmup Iteration   3: 1065602.098 ops/s
# Warmup Iteration   4: 1187336.272 ops/s
# Warmup Iteration   5: 1202363.265 ops/s
# Warmup Iteration   6: 1203985.115 ops/s
# Warmup Iteration   7: 1201424.326 ops/s
# Warmup Iteration   8: 1189466.286 ops/s
# Warmup Iteration   9: 1184396.786 ops/s
# Warmup Iteration  10: 1192897.533 ops/s
# Warmup Iteration  11: 1185707.563 ops/s
# Warmup Iteration  12: 1176521.129 ops/s
# Warmup Iteration  13: 1184426.733 ops/s
# Warmup Iteration  14: 1201131.682 ops/s
# Warmup Iteration  15: 1198487.310 ops/s
# Warmup Iteration  16: 1199946.741 ops/s
# Warmup Iteration  17: 1169843.332 ops/s
# Warmup Iteration  18: 1178145.514 ops/s
# Warmup Iteration  19: 1148565.807 ops/s
# Warmup Iteration  20: 1175612.311 ops/s
# Warmup Iteration  21: 1169236.849 ops/s
# Warmup Iteration  22: 1180708.376 ops/s
# Warmup Iteration  23: 1170647.821 ops/s
# Warmup Iteration  24: 1179744.374 ops/s
# Warmup Iteration  25: 1179500.111 ops/s
# Warmup Iteration  26: 1183769.972 ops/s
# Warmup Iteration  27: 1166132.790 ops/s
# Warmup Iteration  28: 1172192.705 ops/s
# Warmup Iteration  29: 1175145.147 ops/s
# Warmup Iteration  30: 1171125.370 ops/s
Iteration   1: 1166490.299 ops/s
Iteration   2: 1186406.175 ops/s
Iteration   3: 1167443.604 ops/s
Iteration   4: 1182793.715 ops/s
Iteration   5: 1169205.051 ops/s
Iteration   6: 1182088.190 ops/s
Iteration   7: 1181723.762 ops/s
Iteration   8: 1178317.011 ops/s
Iteration   9: 1166879.470 ops/s
Iteration  10: 1178931.897 ops/s
Iteration  11: 1179177.360 ops/s
Iteration  12: 1178945.819 ops/s
Iteration  13: 1177282.094 ops/s
Iteration  14: 1176598.021 ops/s
Iteration  15: 1159013.616 ops/s
Iteration  16: 1188126.751 ops/s
Iteration  17: 1153611.103 ops/s
Iteration  18: 1178845.890 ops/s
Iteration  19: 1178677.772 ops/s
Iteration  20: 1180253.785 ops/s
Iteration  21: 1186665.569 ops/s
Iteration  22: 1179881.631 ops/s
Iteration  23: 1177404.552 ops/s
Iteration  24: 1176149.363 ops/s
Iteration  25: 1181110.304 ops/s
Iteration  26: 1186468.245 ops/s
Iteration  27: 1170247.065 ops/s
Iteration  28: 1177676.309 ops/s
Iteration  29: 1172850.813 ops/s
Iteration  30: 1155489.004 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_noCancelPrevious":
  1175825.141 ±(99.9%) 5890.636 ops/s [Average]
  (min, avg, max) = (1153611.103, 1175825.141, 1188126.751), stdev = 8816.828
  CI (99.9%): [1169934.505, 1181715.778] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
FlowableConcatMapTest._Benchmark.benchmark_noCancelPrevious  thrpt   30  1175825.141 ± 5890.636  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusionWithConcatMap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusionWithConcatMap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 683544.852 ops/s
# Warmup Iteration   2: 922345.488 ops/s
# Warmup Iteration   3: 1039415.672 ops/s
# Warmup Iteration   4: 993669.145 ops/s
# Warmup Iteration   5: 1052287.481 ops/s
# Warmup Iteration   6: 1063003.150 ops/s
# Warmup Iteration   7: 1054016.308 ops/s
# Warmup Iteration   8: 1057414.224 ops/s
# Warmup Iteration   9: 1041603.444 ops/s
# Warmup Iteration  10: 1042555.489 ops/s
# Warmup Iteration  11: 1044189.962 ops/s
# Warmup Iteration  12: 1048157.603 ops/s
# Warmup Iteration  13: 1031309.314 ops/s
# Warmup Iteration  14: 1056027.888 ops/s
# Warmup Iteration  15: 1053285.568 ops/s
# Warmup Iteration  16: 1046671.115 ops/s
# Warmup Iteration  17: 1061137.204 ops/s
# Warmup Iteration  18: 1069670.500 ops/s
# Warmup Iteration  19: 1035276.834 ops/s
# Warmup Iteration  20: 1062833.037 ops/s
# Warmup Iteration  21: 1061104.838 ops/s
# Warmup Iteration  22: 1061428.152 ops/s
# Warmup Iteration  23: 1063400.019 ops/s
# Warmup Iteration  24: 1057773.351 ops/s
# Warmup Iteration  25: 1073948.312 ops/s
# Warmup Iteration  26: 1067684.779 ops/s
# Warmup Iteration  27: 1067149.635 ops/s
# Warmup Iteration  28: 1065105.053 ops/s
# Warmup Iteration  29: 1065244.725 ops/s
# Warmup Iteration  30: 1052978.162 ops/s
Iteration   1: 1063935.060 ops/s
Iteration   2: 1068897.320 ops/s
Iteration   3: 1056820.947 ops/s
Iteration   4: 1057882.700 ops/s
Iteration   5: 1069297.191 ops/s
Iteration   6: 1063884.526 ops/s
Iteration   7: 1061014.584 ops/s
Iteration   8: 1062476.660 ops/s
Iteration   9: 1042093.360 ops/s
Iteration  10: 1054580.540 ops/s
Iteration  11: 1059562.246 ops/s
Iteration  12: 1054426.424 ops/s
Iteration  13: 1061487.844 ops/s
Iteration  14: 1067182.848 ops/s
Iteration  15: 1069607.914 ops/s
Iteration  16: 1066809.083 ops/s
Iteration  17: 1054575.131 ops/s
Iteration  18: 1050250.204 ops/s
Iteration  19: 1059162.579 ops/s
Iteration  20: 1052940.664 ops/s
Iteration  21: 1049101.272 ops/s
Iteration  22: 1066724.757 ops/s
Iteration  23: 1067016.530 ops/s
Iteration  24: 1063574.217 ops/s
Iteration  25: 1055475.431 ops/s
Iteration  26: 1063695.881 ops/s
Iteration  27: 1061505.773 ops/s
Iteration  28: 1057037.530 ops/s
Iteration  29: 1067385.473 ops/s
Iteration  30: 1064218.735 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromIterableTest._Benchmark.benchmark_fusionWithConcatMap":
  1060420.781 ±(99.9%) 4481.708 ops/s [Average]
  (min, avg, max) = (1042093.360, 1060420.781, 1069607.914), stdev = 6708.011
  CI (99.9%): [1055939.072, 1064902.489] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FlowableFromIterableTest._Benchmark.benchmark_fusionWithConcatMap  thrpt   30  1060420.781 ± 4481.708  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilFalseEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilFalseEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3102327.169 ops/s
# Warmup Iteration   2: 4588752.622 ops/s
# Warmup Iteration   3: 5253269.307 ops/s
# Warmup Iteration   4: 5178063.523 ops/s
# Warmup Iteration   5: 5185384.709 ops/s
# Warmup Iteration   6: 5142375.452 ops/s
# Warmup Iteration   7: 5265977.826 ops/s
# Warmup Iteration   8: 5130641.534 ops/s
# Warmup Iteration   9: 5227935.936 ops/s
# Warmup Iteration  10: 5245444.015 ops/s
# Warmup Iteration  11: 5216965.008 ops/s
# Warmup Iteration  12: 5225765.109 ops/s
# Warmup Iteration  13: 5170273.370 ops/s
# Warmup Iteration  14: 5268916.204 ops/s
# Warmup Iteration  15: 5243319.693 ops/s
# Warmup Iteration  16: 5185924.335 ops/s
# Warmup Iteration  17: 5196054.323 ops/s
# Warmup Iteration  18: 5159100.523 ops/s
# Warmup Iteration  19: 5198014.975 ops/s
# Warmup Iteration  20: 5217392.672 ops/s
# Warmup Iteration  21: 5230147.731 ops/s
# Warmup Iteration  22: 5191813.453 ops/s
# Warmup Iteration  23: 5056776.301 ops/s
# Warmup Iteration  24: 5228909.171 ops/s
# Warmup Iteration  25: 5192784.114 ops/s
# Warmup Iteration  26: 5158156.127 ops/s
# Warmup Iteration  27: 5200858.668 ops/s
# Warmup Iteration  28: 5239129.908 ops/s
# Warmup Iteration  29: 5256311.336 ops/s
# Warmup Iteration  30: 5197449.199 ops/s
Iteration   1: 5229201.347 ops/s
Iteration   2: 5063705.595 ops/s
Iteration   3: 5246611.997 ops/s
Iteration   4: 5215018.477 ops/s
Iteration   5: 5258641.534 ops/s
Iteration   6: 5122670.050 ops/s
Iteration   7: 5220254.776 ops/s
Iteration   8: 5224075.830 ops/s
Iteration   9: 5248640.535 ops/s
Iteration  10: 5266809.006 ops/s
Iteration  11: 5235336.889 ops/s
Iteration  12: 5235393.956 ops/s
Iteration  13: 5251752.147 ops/s
Iteration  14: 5227252.447 ops/s
Iteration  15: 5222426.999 ops/s
Iteration  16: 5202030.970 ops/s
Iteration  17: 5152038.267 ops/s
Iteration  18: 5198879.910 ops/s
Iteration  19: 5253514.021 ops/s
Iteration  20: 5218707.514 ops/s
Iteration  21: 5255756.061 ops/s
Iteration  22: 5261056.038 ops/s
Iteration  23: 5183837.186 ops/s
Iteration  24: 5252089.281 ops/s
Iteration  25: 5200899.794 ops/s
Iteration  26: 5222208.408 ops/s
Iteration  27: 5212696.747 ops/s
Iteration  28: 5232334.464 ops/s
Iteration  29: 5113734.703 ops/s
Iteration  30: 5223659.896 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilFalseEmpty":
  5215041.161 ±(99.9%) 31321.593 ops/s [Average]
  (min, avg, max) = (5063705.595, 5215041.161, 5266809.006), stdev = 46880.690
  CI (99.9%): [5183719.568, 5246362.755] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeRetryTest._Benchmark.benchmark_untilFalseEmpty  thrpt   30  5215041.161 ± 31321.593  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilTrueEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilTrueEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2986172.463 ops/s
# Warmup Iteration   2: 4578107.811 ops/s
# Warmup Iteration   3: 5358130.294 ops/s
# Warmup Iteration   4: 5207581.008 ops/s
# Warmup Iteration   5: 5252065.701 ops/s
# Warmup Iteration   6: 5307964.048 ops/s
# Warmup Iteration   7: 5302478.005 ops/s
# Warmup Iteration   8: 5296240.018 ops/s
# Warmup Iteration   9: 5304743.864 ops/s
# Warmup Iteration  10: 5295350.153 ops/s
# Warmup Iteration  11: 5318016.062 ops/s
# Warmup Iteration  12: 5296595.749 ops/s
# Warmup Iteration  13: 5321520.553 ops/s
# Warmup Iteration  14: 5299182.286 ops/s
# Warmup Iteration  15: 5249405.430 ops/s
# Warmup Iteration  16: 5291550.047 ops/s
# Warmup Iteration  17: 5312291.420 ops/s
# Warmup Iteration  18: 5305476.521 ops/s
# Warmup Iteration  19: 5305555.760 ops/s
# Warmup Iteration  20: 5331747.934 ops/s
# Warmup Iteration  21: 5341316.561 ops/s
# Warmup Iteration  22: 5317179.183 ops/s
# Warmup Iteration  23: 5313867.280 ops/s
# Warmup Iteration  24: 5328528.371 ops/s
# Warmup Iteration  25: 5312858.772 ops/s
# Warmup Iteration  26: 5304969.883 ops/s
# Warmup Iteration  27: 5307824.147 ops/s
# Warmup Iteration  28: 5315242.629 ops/s
# Warmup Iteration  29: 5336842.743 ops/s
# Warmup Iteration  30: 5220512.984 ops/s
Iteration   1: 5308955.579 ops/s
Iteration   2: 5308947.422 ops/s
Iteration   3: 5330121.293 ops/s
Iteration   4: 5324770.094 ops/s
Iteration   5: 5268466.618 ops/s
Iteration   6: 5310041.374 ops/s
Iteration   7: 5324218.615 ops/s
Iteration   8: 5323769.811 ops/s
Iteration   9: 5227366.433 ops/s
Iteration  10: 5329531.302 ops/s
Iteration  11: 5337791.644 ops/s
Iteration  12: 5330118.306 ops/s
Iteration  13: 5321396.250 ops/s
Iteration  14: 5290792.715 ops/s
Iteration  15: 5215073.842 ops/s
Iteration  16: 5342303.818 ops/s
Iteration  17: 5341246.740 ops/s
Iteration  18: 5296509.138 ops/s
Iteration  19: 5270483.481 ops/s
Iteration  20: 5282921.006 ops/s
Iteration  21: 5299960.564 ops/s
Iteration  22: 5277618.123 ops/s
Iteration  23: 5287959.542 ops/s
Iteration  24: 5316293.491 ops/s
Iteration  25: 5279350.339 ops/s
Iteration  26: 5306325.076 ops/s
Iteration  27: 5301873.317 ops/s
Iteration  28: 5281050.404 ops/s
Iteration  29: 5338014.716 ops/s
Iteration  30: 5315992.606 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilTrueEmpty":
  5302975.455 ±(99.9%) 20762.945 ops/s [Average]
  (min, avg, max) = (5215073.842, 5302975.455, 5342303.818), stdev = 31077.001
  CI (99.9%): [5282212.510, 5323738.401] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MaybeRetryTest._Benchmark.benchmark_untilTrueEmpty  thrpt   30  5302975.455 ± 20762.945  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2200284.887 ops/s
# Warmup Iteration   2: 3296035.262 ops/s
# Warmup Iteration   3: 3783155.476 ops/s
# Warmup Iteration   4: 3834486.322 ops/s
# Warmup Iteration   5: 3750445.941 ops/s
# Warmup Iteration   6: 3810702.213 ops/s
# Warmup Iteration   7: 3845332.654 ops/s
# Warmup Iteration   8: 3809447.280 ops/s
# Warmup Iteration   9: 3770393.901 ops/s
# Warmup Iteration  10: 3828620.347 ops/s
# Warmup Iteration  11: 3821638.051 ops/s
# Warmup Iteration  12: 3780913.877 ops/s
# Warmup Iteration  13: 3836076.368 ops/s
# Warmup Iteration  14: 3818707.966 ops/s
# Warmup Iteration  15: 3775580.417 ops/s
# Warmup Iteration  16: 3764821.232 ops/s
# Warmup Iteration  17: 3832519.642 ops/s
# Warmup Iteration  18: 3807881.151 ops/s
# Warmup Iteration  19: 3809324.180 ops/s
# Warmup Iteration  20: 3764709.020 ops/s
# Warmup Iteration  21: 3807228.541 ops/s
# Warmup Iteration  22: 3827577.846 ops/s
# Warmup Iteration  23: 3850068.551 ops/s
# Warmup Iteration  24: 3827557.945 ops/s
# Warmup Iteration  25: 3828395.772 ops/s
# Warmup Iteration  26: 3847197.307 ops/s
# Warmup Iteration  27: 3824111.974 ops/s
# Warmup Iteration  28: 3809363.577 ops/s
# Warmup Iteration  29: 3812444.954 ops/s
# Warmup Iteration  30: 3838957.983 ops/s
Iteration   1: 3806628.825 ops/s
Iteration   2: 3772315.640 ops/s
Iteration   3: 3808381.103 ops/s
Iteration   4: 3801642.199 ops/s
Iteration   5: 3790001.777 ops/s
Iteration   6: 3833351.600 ops/s
Iteration   7: 3823303.891 ops/s
Iteration   8: 3836262.926 ops/s
Iteration   9: 3817876.557 ops/s
Iteration  10: 3836744.346 ops/s
Iteration  11: 3856264.070 ops/s
Iteration  12: 3819585.088 ops/s
Iteration  13: 3804378.132 ops/s
Iteration  14: 3829426.568 ops/s
Iteration  15: 3806027.268 ops/s
Iteration  16: 3781686.537 ops/s
Iteration  17: 3809950.220 ops/s
Iteration  18: 3806137.977 ops/s
Iteration  19: 3813059.743 ops/s
Iteration  20: 3804086.631 ops/s
Iteration  21: 3828024.400 ops/s
Iteration  22: 3804856.074 ops/s
Iteration  23: 3814083.691 ops/s
Iteration  24: 3815969.886 ops/s
Iteration  25: 3812865.156 ops/s
Iteration  26: 3801652.943 ops/s
Iteration  27: 3827463.492 ops/s
Iteration  28: 3795133.257 ops/s
Iteration  29: 3815613.090 ops/s
Iteration  30: 3826247.545 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorFlowable":
  3813300.688 ±(99.9%) 11496.866 ops/s [Average]
  (min, avg, max) = (3772315.640, 3813300.688, 3856264.070), stdev = 17207.970
  CI (99.9%): [3801803.821, 3824797.554] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorFlowable  thrpt   30  3813300.688 ± 11496.866  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justFlowableJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justFlowableJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1804992.297 ops/s
# Warmup Iteration   2: 2379432.998 ops/s
# Warmup Iteration   3: 2890576.609 ops/s
# Warmup Iteration   4: 2897897.517 ops/s
# Warmup Iteration   5: 2901336.435 ops/s
# Warmup Iteration   6: 2900026.257 ops/s
# Warmup Iteration   7: 2889178.930 ops/s
# Warmup Iteration   8: 2874826.409 ops/s
# Warmup Iteration   9: 2816345.621 ops/s
# Warmup Iteration  10: 2837803.710 ops/s
# Warmup Iteration  11: 2877024.356 ops/s
# Warmup Iteration  12: 2883031.909 ops/s
# Warmup Iteration  13: 2876294.252 ops/s
# Warmup Iteration  14: 2877801.831 ops/s
# Warmup Iteration  15: 2867993.341 ops/s
# Warmup Iteration  16: 2884583.133 ops/s
# Warmup Iteration  17: 2858278.337 ops/s
# Warmup Iteration  18: 2838615.669 ops/s
# Warmup Iteration  19: 2878067.584 ops/s
# Warmup Iteration  20: 2858681.726 ops/s
# Warmup Iteration  21: 2867894.250 ops/s
# Warmup Iteration  22: 2897304.512 ops/s
# Warmup Iteration  23: 2888761.806 ops/s
# Warmup Iteration  24: 2840925.331 ops/s
# Warmup Iteration  25: 2888337.967 ops/s
# Warmup Iteration  26: 2886646.919 ops/s
# Warmup Iteration  27: 2872739.897 ops/s
# Warmup Iteration  28: 2853397.314 ops/s
# Warmup Iteration  29: 2859303.466 ops/s
# Warmup Iteration  30: 2842368.199 ops/s
Iteration   1: 2888506.122 ops/s
Iteration   2: 2857707.768 ops/s
Iteration   3: 2881889.231 ops/s
Iteration   4: 2884413.932 ops/s
Iteration   5: 2811199.249 ops/s
Iteration   6: 2885021.204 ops/s
Iteration   7: 2879516.833 ops/s
Iteration   8: 2885544.675 ops/s
Iteration   9: 2809285.016 ops/s
Iteration  10: 2892251.303 ops/s
Iteration  11: 2881410.958 ops/s
Iteration  12: 2866089.152 ops/s
Iteration  13: 2832761.851 ops/s
Iteration  14: 2888547.035 ops/s
Iteration  15: 2882212.570 ops/s
Iteration  16: 2815519.920 ops/s
Iteration  17: 2867511.280 ops/s
Iteration  18: 2835754.515 ops/s
Iteration  19: 2842247.914 ops/s
Iteration  20: 2888778.423 ops/s
Iteration  21: 2884036.755 ops/s
Iteration  22: 2887866.499 ops/s
Iteration  23: 2893546.876 ops/s
Iteration  24: 2866066.639 ops/s
Iteration  25: 2847872.047 ops/s
Iteration  26: 2894481.426 ops/s
Iteration  27: 2885066.565 ops/s
Iteration  28: 2859486.411 ops/s
Iteration  29: 2887946.241 ops/s
Iteration  30: 2893013.084 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justFlowableJust":
  2869185.050 ±(99.9%) 17404.171 ops/s [Average]
  (min, avg, max) = (2809285.016, 2869185.050, 2894481.426), stdev = 26049.745
  CI (99.9%): [2851780.879, 2886589.220] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MaybeStartWithTest._Benchmark.benchmark_justFlowableJust  thrpt   30  2869185.050 ± 17404.171  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justMaybeJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justMaybeJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1910236.450 ops/s
# Warmup Iteration   2: 2468195.732 ops/s
# Warmup Iteration   3: 2982717.362 ops/s
# Warmup Iteration   4: 2982268.959 ops/s
# Warmup Iteration   5: 2965062.849 ops/s
# Warmup Iteration   6: 2910402.032 ops/s
# Warmup Iteration   7: 2929049.895 ops/s
# Warmup Iteration   8: 2966609.982 ops/s
# Warmup Iteration   9: 2969557.244 ops/s
# Warmup Iteration  10: 2969082.486 ops/s
# Warmup Iteration  11: 2953515.438 ops/s
# Warmup Iteration  12: 2966114.261 ops/s
# Warmup Iteration  13: 2950725.539 ops/s
# Warmup Iteration  14: 2959946.373 ops/s
# Warmup Iteration  15: 2949733.248 ops/s
# Warmup Iteration  16: 2936576.956 ops/s
# Warmup Iteration  17: 2963261.878 ops/s
# Warmup Iteration  18: 2959391.279 ops/s
# Warmup Iteration  19: 2947431.014 ops/s
# Warmup Iteration  20: 2954971.729 ops/s
# Warmup Iteration  21: 2972446.045 ops/s
# Warmup Iteration  22: 2952271.277 ops/s
# Warmup Iteration  23: 2968248.090 ops/s
# Warmup Iteration  24: 2957212.787 ops/s
# Warmup Iteration  25: 2939983.259 ops/s
# Warmup Iteration  26: 2971521.275 ops/s
# Warmup Iteration  27: 2961000.282 ops/s
# Warmup Iteration  28: 2937864.049 ops/s
# Warmup Iteration  29: 2957548.128 ops/s
# Warmup Iteration  30: 2967249.426 ops/s
Iteration   1: 2951817.627 ops/s
Iteration   2: 2965746.788 ops/s
Iteration   3: 2955687.261 ops/s
Iteration   4: 2957412.353 ops/s
Iteration   5: 2944644.715 ops/s
Iteration   6: 2942860.698 ops/s
Iteration   7: 2920416.487 ops/s
Iteration   8: 2952056.545 ops/s
Iteration   9: 2976679.352 ops/s
Iteration  10: 2954620.467 ops/s
Iteration  11: 2860680.129 ops/s
Iteration  12: 2953244.259 ops/s
Iteration  13: 2957624.284 ops/s
Iteration  14: 2969936.012 ops/s
Iteration  15: 2935823.943 ops/s
Iteration  16: 2930744.456 ops/s
Iteration  17: 2864290.484 ops/s
Iteration  18: 2942941.164 ops/s
Iteration  19: 2951561.019 ops/s
Iteration  20: 2948269.972 ops/s
Iteration  21: 2976369.124 ops/s
Iteration  22: 2960847.807 ops/s
Iteration  23: 2972094.475 ops/s
Iteration  24: 2966961.877 ops/s
Iteration  25: 2941141.415 ops/s
Iteration  26: 2950010.801 ops/s
Iteration  27: 2894387.331 ops/s
Iteration  28: 2915334.386 ops/s
Iteration  29: 2946959.855 ops/s
Iteration  30: 2948425.408 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justMaybeJust":
  2943653.016 ±(99.9%) 18902.391 ops/s [Average]
  (min, avg, max) = (2860680.129, 2943653.016, 2976679.352), stdev = 28292.211
  CI (99.9%): [2924750.626, 2962555.407] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MaybeStartWithTest._Benchmark.benchmark_justMaybeJust  thrpt   30  2943653.016 ± 18902.391  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justMaybeJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justMaybeJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2184657.028 ops/s
# Warmup Iteration   2: 3028105.169 ops/s
# Warmup Iteration   3: 3516503.084 ops/s
# Warmup Iteration   4: 3547049.947 ops/s
# Warmup Iteration   5: 3571326.232 ops/s
# Warmup Iteration   6: 3554836.052 ops/s
# Warmup Iteration   7: 3465532.897 ops/s
# Warmup Iteration   8: 3533037.984 ops/s
# Warmup Iteration   9: 3466472.918 ops/s
# Warmup Iteration  10: 3561779.049 ops/s
# Warmup Iteration  11: 3548858.065 ops/s
# Warmup Iteration  12: 3553030.053 ops/s
# Warmup Iteration  13: 3539444.010 ops/s
# Warmup Iteration  14: 3529425.472 ops/s
# Warmup Iteration  15: 3527663.032 ops/s
# Warmup Iteration  16: 3541980.833 ops/s
# Warmup Iteration  17: 3524524.352 ops/s
# Warmup Iteration  18: 3501649.892 ops/s
# Warmup Iteration  19: 3548278.300 ops/s
# Warmup Iteration  20: 3567022.691 ops/s
# Warmup Iteration  21: 3529733.059 ops/s
# Warmup Iteration  22: 3549851.522 ops/s
# Warmup Iteration  23: 3554063.404 ops/s
# Warmup Iteration  24: 3487300.448 ops/s
# Warmup Iteration  25: 3564550.396 ops/s
# Warmup Iteration  26: 3553943.805 ops/s
# Warmup Iteration  27: 3573669.167 ops/s
# Warmup Iteration  28: 3546582.832 ops/s
# Warmup Iteration  29: 3532720.669 ops/s
# Warmup Iteration  30: 3566458.052 ops/s
Iteration   1: 3540771.161 ops/s
Iteration   2: 3566095.819 ops/s
Iteration   3: 3558646.994 ops/s
Iteration   4: 3571500.486 ops/s
Iteration   5: 3556564.808 ops/s
Iteration   6: 3540819.827 ops/s
Iteration   7: 3529124.037 ops/s
Iteration   8: 3541483.283 ops/s
Iteration   9: 3557647.493 ops/s
Iteration  10: 3558558.794 ops/s
Iteration  11: 3552360.246 ops/s
Iteration  12: 3554551.436 ops/s
Iteration  13: 3487419.896 ops/s
Iteration  14: 3534502.751 ops/s
Iteration  15: 3506424.603 ops/s
Iteration  16: 3530965.913 ops/s
Iteration  17: 3560557.845 ops/s
Iteration  18: 3550459.846 ops/s
Iteration  19: 3559867.233 ops/s
Iteration  20: 3550723.737 ops/s
Iteration  21: 3512430.739 ops/s
Iteration  22: 3558351.868 ops/s
Iteration  23: 3481051.213 ops/s
Iteration  24: 3554986.234 ops/s
Iteration  25: 3559684.166 ops/s
Iteration  26: 3545937.454 ops/s
Iteration  27: 3565661.305 ops/s
Iteration  28: 3570532.299 ops/s
Iteration  29: 3539504.835 ops/s
Iteration  30: 3550434.661 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableStartWithTest._Benchmark.benchmark_justMaybeJust":
  3544920.700 ±(99.9%) 15029.665 ops/s [Average]
  (min, avg, max) = (3481051.213, 3544920.700, 3571500.486), stdev = 22495.696
  CI (99.9%): [3529891.035, 3559950.364] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableStartWithTest._Benchmark.benchmark_justMaybeJust  thrpt   30  3544920.700 ± 15029.665  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justMaybeEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justMaybeEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2108996.872 ops/s
# Warmup Iteration   2: 2712376.077 ops/s
# Warmup Iteration   3: 3308784.113 ops/s
# Warmup Iteration   4: 3361138.245 ops/s
# Warmup Iteration   5: 3363208.914 ops/s
# Warmup Iteration   6: 3305435.152 ops/s
# Warmup Iteration   7: 3252413.952 ops/s
# Warmup Iteration   8: 3311835.630 ops/s
# Warmup Iteration   9: 3326907.032 ops/s
# Warmup Iteration  10: 3311333.503 ops/s
# Warmup Iteration  11: 3329573.166 ops/s
# Warmup Iteration  12: 3321288.139 ops/s
# Warmup Iteration  13: 3320089.135 ops/s
# Warmup Iteration  14: 3341507.707 ops/s
# Warmup Iteration  15: 3309749.726 ops/s
# Warmup Iteration  16: 3344618.962 ops/s
# Warmup Iteration  17: 3353606.030 ops/s
# Warmup Iteration  18: 3348029.993 ops/s
# Warmup Iteration  19: 3332230.285 ops/s
# Warmup Iteration  20: 3319202.855 ops/s
# Warmup Iteration  21: 3324251.621 ops/s
# Warmup Iteration  22: 3348431.452 ops/s
# Warmup Iteration  23: 3338616.724 ops/s
# Warmup Iteration  24: 3338331.448 ops/s
# Warmup Iteration  25: 3342838.978 ops/s
# Warmup Iteration  26: 3320561.040 ops/s
# Warmup Iteration  27: 3341867.498 ops/s
# Warmup Iteration  28: 3294693.170 ops/s
# Warmup Iteration  29: 3340426.225 ops/s
# Warmup Iteration  30: 3310849.336 ops/s
Iteration   1: 3327577.216 ops/s
Iteration   2: 3347691.359 ops/s
Iteration   3: 3288510.118 ops/s
Iteration   4: 3330289.185 ops/s
Iteration   5: 3357036.468 ops/s
Iteration   6: 3349565.604 ops/s
Iteration   7: 3343246.880 ops/s
Iteration   8: 3278203.311 ops/s
Iteration   9: 3324283.183 ops/s
Iteration  10: 3293867.938 ops/s
Iteration  11: 3276735.197 ops/s
Iteration  12: 3313740.135 ops/s
Iteration  13: 3349858.699 ops/s
Iteration  14: 3320223.324 ops/s
Iteration  15: 3321156.607 ops/s
Iteration  16: 3293732.849 ops/s
Iteration  17: 3326600.726 ops/s
Iteration  18: 3345240.538 ops/s
Iteration  19: 3291567.854 ops/s
Iteration  20: 3341954.557 ops/s
Iteration  21: 3352144.642 ops/s
Iteration  22: 3328200.152 ops/s
Iteration  23: 3338492.702 ops/s
Iteration  24: 3340234.379 ops/s
Iteration  25: 3314241.355 ops/s
Iteration  26: 3320558.963 ops/s
Iteration  27: 3318803.698 ops/s
Iteration  28: 3352704.992 ops/s
Iteration  29: 3321892.492 ops/s
Iteration  30: 3337134.933 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justMaybeEmpty":
  3324849.669 ±(99.9%) 15280.295 ops/s [Average]
  (min, avg, max) = (3276735.197, 3324849.669, 3357036.468), stdev = 22870.828
  CI (99.9%): [3309569.373, 3340129.964] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justMaybeEmpty  thrpt   30  3324849.669 ± 15280.295  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5546597.503 ops/s
# Warmup Iteration   2: 7743798.947 ops/s
# Warmup Iteration   3: 8733744.215 ops/s
# Warmup Iteration   4: 8831343.382 ops/s
# Warmup Iteration   5: 8649480.039 ops/s
# Warmup Iteration   6: 8771774.627 ops/s
# Warmup Iteration   7: 8670943.218 ops/s
# Warmup Iteration   8: 8760511.448 ops/s
# Warmup Iteration   9: 8795589.483 ops/s
# Warmup Iteration  10: 8757970.862 ops/s
# Warmup Iteration  11: 8689896.388 ops/s
# Warmup Iteration  12: 8773587.741 ops/s
# Warmup Iteration  13: 8480451.539 ops/s
# Warmup Iteration  14: 8779422.048 ops/s
# Warmup Iteration  15: 8765742.739 ops/s
# Warmup Iteration  16: 8692530.590 ops/s
# Warmup Iteration  17: 8831662.368 ops/s
# Warmup Iteration  18: 8707297.450 ops/s
# Warmup Iteration  19: 8863813.112 ops/s
# Warmup Iteration  20: 8871519.019 ops/s
# Warmup Iteration  21: 8668005.134 ops/s
# Warmup Iteration  22: 8866963.438 ops/s
# Warmup Iteration  23: 8835437.247 ops/s
# Warmup Iteration  24: 8819993.277 ops/s
# Warmup Iteration  25: 8793317.804 ops/s
# Warmup Iteration  26: 8830953.199 ops/s
# Warmup Iteration  27: 8810187.005 ops/s
# Warmup Iteration  28: 8738448.993 ops/s
# Warmup Iteration  29: 8838594.899 ops/s
# Warmup Iteration  30: 8825696.017 ops/s
Iteration   1: 8668820.881 ops/s
Iteration   2: 8776250.153 ops/s
Iteration   3: 8780579.044 ops/s
Iteration   4: 8815963.067 ops/s
Iteration   5: 8784460.810 ops/s
Iteration   6: 8802106.548 ops/s
Iteration   7: 8833413.805 ops/s
Iteration   8: 8798005.512 ops/s
Iteration   9: 8826126.640 ops/s
Iteration  10: 8773190.576 ops/s
Iteration  11: 8816643.496 ops/s
Iteration  12: 8769335.890 ops/s
Iteration  13: 8799432.297 ops/s
Iteration  14: 8833100.177 ops/s
Iteration  15: 8843949.541 ops/s
Iteration  16: 8849577.925 ops/s
Iteration  17: 8731652.490 ops/s
Iteration  18: 8794489.830 ops/s
Iteration  19: 8839854.869 ops/s
Iteration  20: 8826701.383 ops/s
Iteration  21: 8793428.427 ops/s
Iteration  22: 8816824.217 ops/s
Iteration  23: 8800103.239 ops/s
Iteration  24: 8870821.576 ops/s
Iteration  25: 8742505.642 ops/s
Iteration  26: 8814614.684 ops/s
Iteration  27: 8848771.518 ops/s
Iteration  28: 8809808.304 ops/s
Iteration  29: 8814256.429 ops/s
Iteration  30: 8853030.049 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_empty":
  8804260.634 ±(99.9%) 27374.487 ops/s [Average]
  (min, avg, max) = (8668820.881, 8804260.634, 8870821.576), stdev = 40972.847
  CI (99.9%): [8776886.147, 8831635.121] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FlowableFromMaybeTest._Benchmark.benchmark_empty  thrpt   30  8804260.634 ± 27374.487  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithNotMatchingRetryAmount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithNotMatchingRetryAmount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229147.745 ops/s
# Warmup Iteration   2: 298801.992 ops/s
# Warmup Iteration   3: 284292.181 ops/s
# Warmup Iteration   4: 320700.073 ops/s
# Warmup Iteration   5: 322500.337 ops/s
# Warmup Iteration   6: 320715.891 ops/s
# Warmup Iteration   7: 322037.115 ops/s
# Warmup Iteration   8: 318108.901 ops/s
# Warmup Iteration   9: 321298.924 ops/s
# Warmup Iteration  10: 320520.339 ops/s
# Warmup Iteration  11: 321328.390 ops/s
# Warmup Iteration  12: 321719.538 ops/s
# Warmup Iteration  13: 320102.614 ops/s
# Warmup Iteration  14: 321284.721 ops/s
# Warmup Iteration  15: 316683.797 ops/s
# Warmup Iteration  16: 322086.301 ops/s
# Warmup Iteration  17: 331784.437 ops/s
# Warmup Iteration  18: 333308.650 ops/s
# Warmup Iteration  19: 334131.339 ops/s
# Warmup Iteration  20: 331275.853 ops/s
# Warmup Iteration  21: 333123.942 ops/s
# Warmup Iteration  22: 332932.004 ops/s
# Warmup Iteration  23: 333828.214 ops/s
# Warmup Iteration  24: 331253.832 ops/s
# Warmup Iteration  25: 330933.824 ops/s
# Warmup Iteration  26: 328261.513 ops/s
# Warmup Iteration  27: 328024.427 ops/s
# Warmup Iteration  28: 329956.494 ops/s
# Warmup Iteration  29: 326559.998 ops/s
# Warmup Iteration  30: 333947.635 ops/s
Iteration   1: 332048.129 ops/s
Iteration   2: 332491.102 ops/s
Iteration   3: 331236.641 ops/s
Iteration   4: 331040.844 ops/s
Iteration   5: 333635.039 ops/s
Iteration   6: 324956.261 ops/s
Iteration   7: 333998.090 ops/s
Iteration   8: 332394.791 ops/s
Iteration   9: 333576.624 ops/s
Iteration  10: 333867.500 ops/s
Iteration  11: 326212.363 ops/s
Iteration  12: 331670.472 ops/s
Iteration  13: 329568.120 ops/s
Iteration  14: 329931.083 ops/s
Iteration  15: 331828.766 ops/s
Iteration  16: 332577.187 ops/s
Iteration  17: 330566.412 ops/s
Iteration  18: 331208.260 ops/s
Iteration  19: 328359.103 ops/s
Iteration  20: 329593.515 ops/s
Iteration  21: 330733.983 ops/s
Iteration  22: 332616.492 ops/s
Iteration  23: 330239.028 ops/s
Iteration  24: 331668.494 ops/s
Iteration  25: 333058.133 ops/s
Iteration  26: 330364.887 ops/s
Iteration  27: 331785.635 ops/s
Iteration  28: 331238.383 ops/s
Iteration  29: 329328.207 ops/s
Iteration  30: 325271.547 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithNotMatchingRetryAmount":
  330902.170 ±(99.9%) 1549.148 ops/s [Average]
  (min, avg, max) = (324956.261, 330902.170, 333998.090), stdev = 2318.691
  CI (99.9%): [329353.022, 332451.317] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithNotMatchingRetryAmount  thrpt   30  330902.170 ± 1549.148  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilFalseError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilFalseError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 450566.260 ops/s
# Warmup Iteration   2: 604901.532 ops/s
# Warmup Iteration   3: 648658.901 ops/s
# Warmup Iteration   4: 593682.642 ops/s
# Warmup Iteration   5: 671428.997 ops/s
# Warmup Iteration   6: 663795.077 ops/s
# Warmup Iteration   7: 675038.318 ops/s
# Warmup Iteration   8: 676121.457 ops/s
# Warmup Iteration   9: 671914.213 ops/s
# Warmup Iteration  10: 670023.240 ops/s
# Warmup Iteration  11: 671141.894 ops/s
# Warmup Iteration  12: 666476.933 ops/s
# Warmup Iteration  13: 670797.776 ops/s
# Warmup Iteration  14: 670094.327 ops/s
# Warmup Iteration  15: 673316.671 ops/s
# Warmup Iteration  16: 668355.658 ops/s
# Warmup Iteration  17: 697062.922 ops/s
# Warmup Iteration  18: 695032.852 ops/s
# Warmup Iteration  19: 692312.913 ops/s
# Warmup Iteration  20: 688231.433 ops/s
# Warmup Iteration  21: 692251.213 ops/s
# Warmup Iteration  22: 682521.799 ops/s
# Warmup Iteration  23: 695391.199 ops/s
# Warmup Iteration  24: 687792.283 ops/s
# Warmup Iteration  25: 696728.636 ops/s
# Warmup Iteration  26: 695953.186 ops/s
# Warmup Iteration  27: 692031.033 ops/s
# Warmup Iteration  28: 694251.753 ops/s
# Warmup Iteration  29: 691824.191 ops/s
# Warmup Iteration  30: 683274.570 ops/s
Iteration   1: 692075.916 ops/s
Iteration   2: 694860.489 ops/s
Iteration   3: 698492.335 ops/s
Iteration   4: 693390.251 ops/s
Iteration   5: 694182.378 ops/s
Iteration   6: 691249.452 ops/s
Iteration   7: 685741.916 ops/s
Iteration   8: 689147.490 ops/s
Iteration   9: 694056.927 ops/s
Iteration  10: 692497.491 ops/s
Iteration  11: 687814.156 ops/s
Iteration  12: 691816.821 ops/s
Iteration  13: 695267.935 ops/s
Iteration  14: 695453.829 ops/s
Iteration  15: 697753.278 ops/s
Iteration  16: 696347.803 ops/s
Iteration  17: 695188.705 ops/s
Iteration  18: 684260.365 ops/s
Iteration  19: 683315.478 ops/s
Iteration  20: 695998.249 ops/s
Iteration  21: 692501.105 ops/s
Iteration  22: 693673.532 ops/s
Iteration  23: 694194.784 ops/s
Iteration  24: 688166.433 ops/s
Iteration  25: 688527.263 ops/s
Iteration  26: 691264.249 ops/s
Iteration  27: 695297.854 ops/s
Iteration  28: 690627.553 ops/s
Iteration  29: 696340.346 ops/s
Iteration  30: 687278.746 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilFalseError":
  692226.104 ±(99.9%) 2633.407 ops/s [Average]
  (min, avg, max) = (683315.478, 692226.104, 698492.335), stdev = 3941.559
  CI (99.9%): [689592.698, 694859.511] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeRetryTest._Benchmark.benchmark_untilFalseError  thrpt   30  692226.104 ± 2633.407  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayErrorIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayErrorIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1613675.243 ops/s
# Warmup Iteration   2: 2272786.890 ops/s
# Warmup Iteration   3: 2760251.349 ops/s
# Warmup Iteration   4: 2804779.728 ops/s
# Warmup Iteration   5: 2790218.810 ops/s
# Warmup Iteration   6: 2771655.562 ops/s
# Warmup Iteration   7: 2771593.628 ops/s
# Warmup Iteration   8: 2754951.167 ops/s
# Warmup Iteration   9: 2789501.132 ops/s
# Warmup Iteration  10: 2732163.125 ops/s
# Warmup Iteration  11: 2792402.674 ops/s
# Warmup Iteration  12: 2776129.123 ops/s
# Warmup Iteration  13: 2779354.544 ops/s
# Warmup Iteration  14: 2791787.040 ops/s
# Warmup Iteration  15: 2783172.143 ops/s
# Warmup Iteration  16: 2779710.509 ops/s
# Warmup Iteration  17: 2797010.596 ops/s
# Warmup Iteration  18: 2782340.555 ops/s
# Warmup Iteration  19: 2784459.725 ops/s
# Warmup Iteration  20: 2760869.406 ops/s
# Warmup Iteration  21: 2767065.300 ops/s
# Warmup Iteration  22: 2772602.386 ops/s
# Warmup Iteration  23: 2792172.259 ops/s
# Warmup Iteration  24: 2778381.053 ops/s
# Warmup Iteration  25: 2770572.346 ops/s
# Warmup Iteration  26: 2800152.845 ops/s
# Warmup Iteration  27: 2809465.787 ops/s
# Warmup Iteration  28: 2767454.929 ops/s
# Warmup Iteration  29: 2783565.524 ops/s
# Warmup Iteration  30: 2776595.404 ops/s
Iteration   1: 2771825.900 ops/s
Iteration   2: 2798167.358 ops/s
Iteration   3: 2759965.228 ops/s
Iteration   4: 2799824.637 ops/s
Iteration   5: 2782261.677 ops/s
Iteration   6: 2797372.681 ops/s
Iteration   7: 2781610.237 ops/s
Iteration   8: 2795258.517 ops/s
Iteration   9: 2789927.972 ops/s
Iteration  10: 2764984.424 ops/s
Iteration  11: 2784296.649 ops/s
Iteration  12: 2779553.685 ops/s
Iteration  13: 2794494.718 ops/s
Iteration  14: 2778779.246 ops/s
Iteration  15: 2772175.558 ops/s
Iteration  16: 2794259.762 ops/s
Iteration  17: 2794046.050 ops/s
Iteration  18: 2756763.569 ops/s
Iteration  19: 2801882.367 ops/s
Iteration  20: 2792792.527 ops/s
Iteration  21: 2799171.074 ops/s
Iteration  22: 2788132.697 ops/s
Iteration  23: 2796111.750 ops/s
Iteration  24: 2779899.425 ops/s
Iteration  25: 2767240.049 ops/s
Iteration  26: 2779593.870 ops/s
Iteration  27: 2779352.480 ops/s
Iteration  28: 2772134.945 ops/s
Iteration  29: 2781710.427 ops/s
Iteration  30: 2802000.475 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayErrorIterable":
  2784519.665 ±(99.9%) 8527.931 ops/s [Average]
  (min, avg, max) = (2756763.569, 2784519.665, 2802000.475), stdev = 12764.207
  CI (99.9%): [2775991.734, 2793047.596] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayErrorIterable  thrpt   30  2784519.665 ± 8527.931  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1581591.900 ops/s
# Warmup Iteration   2: 2232706.287 ops/s
# Warmup Iteration   3: 2692912.903 ops/s
# Warmup Iteration   4: 2729104.298 ops/s
# Warmup Iteration   5: 2736319.717 ops/s
# Warmup Iteration   6: 2716188.867 ops/s
# Warmup Iteration   7: 2705557.176 ops/s
# Warmup Iteration   8: 2725989.939 ops/s
# Warmup Iteration   9: 2728718.237 ops/s
# Warmup Iteration  10: 2731379.231 ops/s
# Warmup Iteration  11: 2716960.173 ops/s
# Warmup Iteration  12: 2735417.619 ops/s
# Warmup Iteration  13: 2736822.281 ops/s
# Warmup Iteration  14: 2710661.042 ops/s
# Warmup Iteration  15: 2730775.011 ops/s
# Warmup Iteration  16: 2712046.305 ops/s
# Warmup Iteration  17: 2729879.441 ops/s
# Warmup Iteration  18: 2706634.529 ops/s
# Warmup Iteration  19: 2729531.318 ops/s
# Warmup Iteration  20: 2709570.980 ops/s
# Warmup Iteration  21: 2720763.749 ops/s
# Warmup Iteration  22: 2737759.708 ops/s
# Warmup Iteration  23: 2726271.964 ops/s
# Warmup Iteration  24: 2713825.033 ops/s
# Warmup Iteration  25: 2733849.996 ops/s
# Warmup Iteration  26: 2749466.213 ops/s
# Warmup Iteration  27: 2731953.451 ops/s
# Warmup Iteration  28: 2687516.822 ops/s
# Warmup Iteration  29: 2751618.061 ops/s
# Warmup Iteration  30: 2727257.057 ops/s
Iteration   1: 2717456.286 ops/s
Iteration   2: 2746750.216 ops/s
Iteration   3: 2711332.482 ops/s
Iteration   4: 2716974.079 ops/s
Iteration   5: 2652309.366 ops/s
Iteration   6: 2725898.201 ops/s
Iteration   7: 2720682.975 ops/s
Iteration   8: 2732578.441 ops/s
Iteration   9: 2699248.495 ops/s
Iteration  10: 2732105.066 ops/s
Iteration  11: 2721109.093 ops/s
Iteration  12: 2734465.556 ops/s
Iteration  13: 2723187.371 ops/s
Iteration  14: 2723441.663 ops/s
Iteration  15: 2718256.905 ops/s
Iteration  16: 2736579.830 ops/s
Iteration  17: 2742267.696 ops/s
Iteration  18: 2734289.122 ops/s
Iteration  19: 2757472.788 ops/s
Iteration  20: 2716357.968 ops/s
Iteration  21: 2750264.047 ops/s
Iteration  22: 2730127.263 ops/s
Iteration  23: 2736417.854 ops/s
Iteration  24: 2680138.797 ops/s
Iteration  25: 2729012.701 ops/s
Iteration  26: 2724628.315 ops/s
Iteration  27: 2743079.194 ops/s
Iteration  28: 2726944.028 ops/s
Iteration  29: 2728942.377 ops/s
Iteration  30: 2709025.622 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable":
  2724044.793 ±(99.9%) 13622.897 ops/s [Average]
  (min, avg, max) = (2652309.366, 2724044.793, 2757472.788), stdev = 20390.113
  CI (99.9%): [2710421.896, 2737667.691] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable  thrpt   30  2724044.793 ± 13622.897  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 646481.546 ops/s
# Warmup Iteration   2: 801953.692 ops/s
# Warmup Iteration   3: 926910.580 ops/s
# Warmup Iteration   4: 928386.997 ops/s
# Warmup Iteration   5: 925638.279 ops/s
# Warmup Iteration   6: 926803.144 ops/s
# Warmup Iteration   7: 925805.970 ops/s
# Warmup Iteration   8: 925243.389 ops/s
# Warmup Iteration   9: 923556.259 ops/s
# Warmup Iteration  10: 931383.925 ops/s
# Warmup Iteration  11: 925058.176 ops/s
# Warmup Iteration  12: 920536.458 ops/s
# Warmup Iteration  13: 917439.084 ops/s
# Warmup Iteration  14: 911540.067 ops/s
# Warmup Iteration  15: 925534.859 ops/s
# Warmup Iteration  16: 904994.064 ops/s
# Warmup Iteration  17: 966036.937 ops/s
# Warmup Iteration  18: 973625.442 ops/s
# Warmup Iteration  19: 981770.115 ops/s
# Warmup Iteration  20: 968132.003 ops/s
# Warmup Iteration  21: 982109.258 ops/s
# Warmup Iteration  22: 978631.155 ops/s
# Warmup Iteration  23: 971964.846 ops/s
# Warmup Iteration  24: 984332.272 ops/s
# Warmup Iteration  25: 977525.631 ops/s
# Warmup Iteration  26: 975257.721 ops/s
# Warmup Iteration  27: 975096.366 ops/s
# Warmup Iteration  28: 975000.920 ops/s
# Warmup Iteration  29: 976570.465 ops/s
# Warmup Iteration  30: 966221.080 ops/s
Iteration   1: 967877.376 ops/s
Iteration   2: 978141.399 ops/s
Iteration   3: 985329.386 ops/s
Iteration   4: 976496.055 ops/s
Iteration   5: 961261.899 ops/s
Iteration   6: 977239.392 ops/s
Iteration   7: 987078.423 ops/s
Iteration   8: 965909.244 ops/s
Iteration   9: 975219.257 ops/s
Iteration  10: 978268.498 ops/s
Iteration  11: 975313.494 ops/s
Iteration  12: 971783.883 ops/s
Iteration  13: 965593.977 ops/s
Iteration  14: 973193.985 ops/s
Iteration  15: 979052.803 ops/s
Iteration  16: 978451.227 ops/s
Iteration  17: 980005.872 ops/s
Iteration  18: 979604.691 ops/s
Iteration  19: 982252.246 ops/s
Iteration  20: 973832.726 ops/s
Iteration  21: 976899.141 ops/s
Iteration  22: 971485.491 ops/s
Iteration  23: 979792.428 ops/s
Iteration  24: 973622.314 ops/s
Iteration  25: 973285.361 ops/s
Iteration  26: 976008.649 ops/s
Iteration  27: 977354.792 ops/s
Iteration  28: 975656.135 ops/s
Iteration  29: 963909.806 ops/s
Iteration  30: 980318.456 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatUntilError":
  975341.280 ±(99.9%) 3985.224 ops/s [Average]
  (min, avg, max) = (961261.899, 975341.280, 987078.423), stdev = 5964.896
  CI (99.9%): [971356.056, 979326.504] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableRepeatTest._Benchmark.benchmark_repeatUntilError  thrpt   30  975341.280 ± 3985.224  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_sourceFlowableRetry0$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_sourceFlowableRetry0

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 596581.827 ops/s
# Warmup Iteration   2: 674522.271 ops/s
# Warmup Iteration   3: 767232.188 ops/s
# Warmup Iteration   4: 769175.396 ops/s
# Warmup Iteration   5: 768508.944 ops/s
# Warmup Iteration   6: 778331.225 ops/s
# Warmup Iteration   7: 767613.609 ops/s
# Warmup Iteration   8: 765078.199 ops/s
# Warmup Iteration   9: 768469.105 ops/s
# Warmup Iteration  10: 767821.719 ops/s
# Warmup Iteration  11: 769668.243 ops/s
# Warmup Iteration  12: 769160.749 ops/s
# Warmup Iteration  13: 767291.678 ops/s
# Warmup Iteration  14: 770802.728 ops/s
# Warmup Iteration  15: 761964.977 ops/s
# Warmup Iteration  16: 766564.245 ops/s
# Warmup Iteration  17: 791704.807 ops/s
# Warmup Iteration  18: 803426.528 ops/s
# Warmup Iteration  19: 802798.705 ops/s
# Warmup Iteration  20: 795005.409 ops/s
# Warmup Iteration  21: 804845.228 ops/s
# Warmup Iteration  22: 802792.155 ops/s
# Warmup Iteration  23: 799723.425 ops/s
# Warmup Iteration  24: 799865.109 ops/s
# Warmup Iteration  25: 801519.361 ops/s
# Warmup Iteration  26: 800545.324 ops/s
# Warmup Iteration  27: 800057.477 ops/s
# Warmup Iteration  28: 802545.284 ops/s
# Warmup Iteration  29: 802243.038 ops/s
# Warmup Iteration  30: 806637.570 ops/s
Iteration   1: 797443.839 ops/s
Iteration   2: 810751.545 ops/s
Iteration   3: 800193.434 ops/s
Iteration   4: 802032.232 ops/s
Iteration   5: 798225.201 ops/s
Iteration   6: 792815.291 ops/s
Iteration   7: 799117.577 ops/s
Iteration   8: 803166.213 ops/s
Iteration   9: 802984.936 ops/s
Iteration  10: 801882.590 ops/s
Iteration  11: 792594.790 ops/s
Iteration  12: 801843.893 ops/s
Iteration  13: 798945.270 ops/s
Iteration  14: 804183.490 ops/s
Iteration  15: 803055.641 ops/s
Iteration  16: 795843.073 ops/s
Iteration  17: 799704.180 ops/s
Iteration  18: 797621.145 ops/s
Iteration  19: 805383.890 ops/s
Iteration  20: 796128.094 ops/s
Iteration  21: 801586.452 ops/s
Iteration  22: 801066.627 ops/s
Iteration  23: 788298.168 ops/s
Iteration  24: 799248.642 ops/s
Iteration  25: 798039.208 ops/s
Iteration  26: 802678.316 ops/s
Iteration  27: 801620.502 ops/s
Iteration  28: 802343.500 ops/s
Iteration  29: 798756.858 ops/s
Iteration  30: 801141.403 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_sourceFlowableRetry0":
  799956.533 ±(99.9%) 2830.750 ops/s [Average]
  (min, avg, max) = (788298.168, 799956.533, 810751.545), stdev = 4236.934
  CI (99.9%): [797125.783, 802787.283] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableRetryTest._Benchmark.benchmark_sourceFlowableRetry0  thrpt   30  799956.533 ± 2830.750  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_sourceFlowableRetry1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_sourceFlowableRetry1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 303925.137 ops/s
# Warmup Iteration   2: 382163.957 ops/s
# Warmup Iteration   3: 378847.929 ops/s
# Warmup Iteration   4: 405956.442 ops/s
# Warmup Iteration   5: 405099.651 ops/s
# Warmup Iteration   6: 405356.389 ops/s
# Warmup Iteration   7: 404866.897 ops/s
# Warmup Iteration   8: 405052.442 ops/s
# Warmup Iteration   9: 406842.929 ops/s
# Warmup Iteration  10: 406899.531 ops/s
# Warmup Iteration  11: 406644.988 ops/s
# Warmup Iteration  12: 401324.314 ops/s
# Warmup Iteration  13: 396052.222 ops/s
# Warmup Iteration  14: 404067.507 ops/s
# Warmup Iteration  15: 404284.155 ops/s
# Warmup Iteration  16: 403255.428 ops/s
# Warmup Iteration  17: 413803.539 ops/s
# Warmup Iteration  18: 417416.745 ops/s
# Warmup Iteration  19: 420330.700 ops/s
# Warmup Iteration  20: 423628.291 ops/s
# Warmup Iteration  21: 423359.230 ops/s
# Warmup Iteration  22: 423128.617 ops/s
# Warmup Iteration  23: 423981.530 ops/s
# Warmup Iteration  24: 424649.820 ops/s
# Warmup Iteration  25: 423586.851 ops/s
# Warmup Iteration  26: 424886.148 ops/s
# Warmup Iteration  27: 422282.806 ops/s
# Warmup Iteration  28: 425428.100 ops/s
# Warmup Iteration  29: 424731.834 ops/s
# Warmup Iteration  30: 416046.552 ops/s
Iteration   1: 423288.740 ops/s
Iteration   2: 421806.369 ops/s
Iteration   3: 424421.248 ops/s
Iteration   4: 423513.114 ops/s
Iteration   5: 422821.181 ops/s
Iteration   6: 425436.047 ops/s
Iteration   7: 422769.968 ops/s
Iteration   8: 415265.290 ops/s
Iteration   9: 426171.124 ops/s
Iteration  10: 423835.988 ops/s
Iteration  11: 421807.867 ops/s
Iteration  12: 426675.233 ops/s
Iteration  13: 422637.728 ops/s
Iteration  14: 424524.743 ops/s
Iteration  15: 424833.688 ops/s
Iteration  16: 423715.115 ops/s
Iteration  17: 421396.239 ops/s
Iteration  18: 423112.592 ops/s
Iteration  19: 425750.871 ops/s
Iteration  20: 424864.856 ops/s
Iteration  21: 423387.687 ops/s
Iteration  22: 422561.225 ops/s
Iteration  23: 421590.940 ops/s
Iteration  24: 422090.429 ops/s
Iteration  25: 417468.322 ops/s
Iteration  26: 424931.709 ops/s
Iteration  27: 422537.754 ops/s
Iteration  28: 424636.773 ops/s
Iteration  29: 421878.221 ops/s
Iteration  30: 417025.204 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_sourceFlowableRetry1":
  422891.876 ±(99.9%) 1720.285 ops/s [Average]
  (min, avg, max) = (415265.290, 422891.876, 426675.233), stdev = 2574.841
  CI (99.9%): [421171.591, 424612.160] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableRetryTest._Benchmark.benchmark_sourceFlowableRetry1  thrpt   30  422891.876 ± 1720.285  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_unsubscribesFromUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_unsubscribesFromUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2563615.370 ops/s
# Warmup Iteration   2: 3121100.796 ops/s
# Warmup Iteration   3: 3852731.322 ops/s
# Warmup Iteration   4: 3852288.794 ops/s
# Warmup Iteration   5: 3884707.924 ops/s
# Warmup Iteration   6: 3817493.445 ops/s
# Warmup Iteration   7: 3854748.426 ops/s
# Warmup Iteration   8: 3808679.116 ops/s
# Warmup Iteration   9: 3828750.677 ops/s
# Warmup Iteration  10: 3833470.114 ops/s
# Warmup Iteration  11: 3831690.621 ops/s
# Warmup Iteration  12: 3842639.212 ops/s
# Warmup Iteration  13: 3833587.715 ops/s
# Warmup Iteration  14: 3829435.364 ops/s
# Warmup Iteration  15: 3854954.342 ops/s
# Warmup Iteration  16: 3835411.897 ops/s
# Warmup Iteration  17: 3833147.591 ops/s
# Warmup Iteration  18: 3770267.654 ops/s
# Warmup Iteration  19: 3858007.845 ops/s
# Warmup Iteration  20: 3798415.662 ops/s
# Warmup Iteration  21: 3844353.067 ops/s
# Warmup Iteration  22: 3822046.860 ops/s
# Warmup Iteration  23: 3848326.740 ops/s
# Warmup Iteration  24: 3802218.410 ops/s
# Warmup Iteration  25: 3859903.659 ops/s
# Warmup Iteration  26: 3818872.691 ops/s
# Warmup Iteration  27: 3781244.814 ops/s
# Warmup Iteration  28: 3786060.658 ops/s
# Warmup Iteration  29: 3779975.612 ops/s
# Warmup Iteration  30: 3823070.368 ops/s
Iteration   1: 3837872.265 ops/s
Iteration   2: 3840552.609 ops/s
Iteration   3: 3830628.278 ops/s
Iteration   4: 3818613.144 ops/s
Iteration   5: 3839953.957 ops/s
Iteration   6: 3803065.514 ops/s
Iteration   7: 3820457.568 ops/s
Iteration   8: 3803380.637 ops/s
Iteration   9: 3794979.258 ops/s
Iteration  10: 3819096.609 ops/s
Iteration  11: 3827693.210 ops/s
Iteration  12: 3835482.963 ops/s
Iteration  13: 3835249.229 ops/s
Iteration  14: 3818985.000 ops/s
Iteration  15: 3814478.350 ops/s
Iteration  16: 3789120.000 ops/s
Iteration  17: 3805994.317 ops/s
Iteration  18: 3841723.679 ops/s
Iteration  19: 3833483.945 ops/s
Iteration  20: 3816535.356 ops/s
Iteration  21: 3786437.726 ops/s
Iteration  22: 3848269.850 ops/s
Iteration  23: 3819614.646 ops/s
Iteration  24: 3831158.862 ops/s
Iteration  25: 3827947.675 ops/s
Iteration  26: 3835274.398 ops/s
Iteration  27: 3834976.374 ops/s
Iteration  28: 3766625.153 ops/s
Iteration  29: 3830078.760 ops/s
Iteration  30: 3834035.005 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_unsubscribesFromUpstream":
  3821392.144 ±(99.9%) 12703.049 ops/s [Average]
  (min, avg, max) = (3766625.153, 3821392.144, 3848269.850), stdev = 19013.327
  CI (99.9%): [3808689.096, 3834095.193] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableTakeLastOneTest._Benchmark.benchmark_unsubscribesFromUpstream  thrpt   30  3821392.144 ± 12703.049  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2363965.791 ops/s
# Warmup Iteration   2: 4208071.934 ops/s
# Warmup Iteration   3: 4575495.149 ops/s
# Warmup Iteration   4: 4620967.609 ops/s
# Warmup Iteration   5: 4577061.143 ops/s
# Warmup Iteration   6: 4568223.450 ops/s
# Warmup Iteration   7: 4609811.361 ops/s
# Warmup Iteration   8: 4566130.692 ops/s
# Warmup Iteration   9: 4578362.145 ops/s
# Warmup Iteration  10: 4601195.133 ops/s
# Warmup Iteration  11: 4550678.225 ops/s
# Warmup Iteration  12: 4582592.916 ops/s
# Warmup Iteration  13: 4591168.415 ops/s
# Warmup Iteration  14: 4539029.683 ops/s
# Warmup Iteration  15: 4568205.759 ops/s
# Warmup Iteration  16: 4592130.098 ops/s
# Warmup Iteration  17: 4514713.689 ops/s
# Warmup Iteration  18: 4514123.999 ops/s
# Warmup Iteration  19: 4528352.350 ops/s
# Warmup Iteration  20: 4535862.700 ops/s
# Warmup Iteration  21: 4555239.400 ops/s
# Warmup Iteration  22: 4499840.888 ops/s
# Warmup Iteration  23: 4503532.737 ops/s
# Warmup Iteration  24: 4497706.409 ops/s
# Warmup Iteration  25: 4563463.505 ops/s
# Warmup Iteration  26: 4479334.262 ops/s
# Warmup Iteration  27: 4503093.879 ops/s
# Warmup Iteration  28: 4544861.333 ops/s
# Warmup Iteration  29: 4547932.306 ops/s
# Warmup Iteration  30: 4511437.865 ops/s
Iteration   1: 4558875.820 ops/s
Iteration   2: 4471169.763 ops/s
Iteration   3: 4480254.174 ops/s
Iteration   4: 4524780.846 ops/s
Iteration   5: 4508458.995 ops/s
Iteration   6: 4504766.761 ops/s
Iteration   7: 4540181.040 ops/s
Iteration   8: 4574139.381 ops/s
Iteration   9: 4524634.271 ops/s
Iteration  10: 4536827.273 ops/s
Iteration  11: 4532464.611 ops/s
Iteration  12: 4524982.402 ops/s
Iteration  13: 4504302.092 ops/s
Iteration  14: 4535013.159 ops/s
Iteration  15: 4498337.792 ops/s
Iteration  16: 4543153.035 ops/s
Iteration  17: 4537323.169 ops/s
Iteration  18: 4411899.159 ops/s
Iteration  19: 4523624.860 ops/s
Iteration  20: 4537841.533 ops/s
Iteration  21: 4466308.901 ops/s
Iteration  22: 4539110.637 ops/s
Iteration  23: 4542946.810 ops/s
Iteration  24: 4494704.171 ops/s
Iteration  25: 4490549.838 ops/s
Iteration  26: 4487801.598 ops/s
Iteration  27: 4534289.297 ops/s
Iteration  28: 4529976.341 ops/s
Iteration  29: 4522970.330 ops/s
Iteration  30: 4518313.746 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError":
  4516666.727 ±(99.9%) 21410.438 ops/s [Average]
  (min, avg, max) = (4411899.159, 4516666.727, 4574139.381), stdev = 32046.139
  CI (99.9%): [4495256.289, 4538077.165] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayError  thrpt   30  4516666.727 ± 21410.438  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2286500.160 ops/s
# Warmup Iteration   2: 4179350.327 ops/s
# Warmup Iteration   3: 4589311.201 ops/s
# Warmup Iteration   4: 4578372.586 ops/s
# Warmup Iteration   5: 4559532.823 ops/s
# Warmup Iteration   6: 4569552.632 ops/s
# Warmup Iteration   7: 4548419.195 ops/s
# Warmup Iteration   8: 4558564.335 ops/s
# Warmup Iteration   9: 4570284.653 ops/s
# Warmup Iteration  10: 4607483.916 ops/s
# Warmup Iteration  11: 4591339.800 ops/s
# Warmup Iteration  12: 4556289.338 ops/s
# Warmup Iteration  13: 4544928.141 ops/s
# Warmup Iteration  14: 4585477.324 ops/s
# Warmup Iteration  15: 4607429.063 ops/s
# Warmup Iteration  16: 4551781.731 ops/s
# Warmup Iteration  17: 4535720.366 ops/s
# Warmup Iteration  18: 4457492.071 ops/s
# Warmup Iteration  19: 4420454.800 ops/s
# Warmup Iteration  20: 4474489.997 ops/s
# Warmup Iteration  21: 4531084.977 ops/s
# Warmup Iteration  22: 4517589.741 ops/s
# Warmup Iteration  23: 4497818.369 ops/s
# Warmup Iteration  24: 4489673.310 ops/s
# Warmup Iteration  25: 4517929.127 ops/s
# Warmup Iteration  26: 4530146.522 ops/s
# Warmup Iteration  27: 4518747.360 ops/s
# Warmup Iteration  28: 4521318.343 ops/s
# Warmup Iteration  29: 4514310.877 ops/s
# Warmup Iteration  30: 4509336.381 ops/s
Iteration   1: 4517662.662 ops/s
Iteration   2: 4520683.116 ops/s
Iteration   3: 4502237.836 ops/s
Iteration   4: 4515966.598 ops/s
Iteration   5: 4533334.679 ops/s
Iteration   6: 4530486.036 ops/s
Iteration   7: 4536392.268 ops/s
Iteration   8: 4506884.753 ops/s
Iteration   9: 4479655.062 ops/s
Iteration  10: 4504434.970 ops/s
Iteration  11: 4516111.457 ops/s
Iteration  12: 4504246.824 ops/s
Iteration  13: 4515517.795 ops/s
Iteration  14: 4507702.507 ops/s
Iteration  15: 4357437.294 ops/s
Iteration  16: 4479846.994 ops/s
Iteration  17: 4487872.884 ops/s
Iteration  18: 4509504.166 ops/s
Iteration  19: 4480437.901 ops/s
Iteration  20: 4515939.949 ops/s
Iteration  21: 4506278.061 ops/s
Iteration  22: 4497062.061 ops/s
Iteration  23: 4504773.116 ops/s
Iteration  24: 4524365.156 ops/s
Iteration  25: 4476474.006 ops/s
Iteration  26: 4526329.390 ops/s
Iteration  27: 4497558.632 ops/s
Iteration  28: 4533734.207 ops/s
Iteration  29: 4548683.693 ops/s
Iteration  30: 4456313.357 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscription":
  4503130.914 ±(99.9%) 22899.253 ops/s [Average]
  (min, avg, max) = (4357437.294, 4503130.914, 4548683.693), stdev = 34274.526
  CI (99.9%): [4480231.661, 4526030.167] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_noSubsequentSubscription  thrpt   30  4503130.914 ± 22899.253  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_bipredicateThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_bipredicateThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 138898.489 ops/s
# Warmup Iteration   2: 221791.424 ops/s
# Warmup Iteration   3: 220091.633 ops/s
# Warmup Iteration   4: 209745.542 ops/s
# Warmup Iteration   5: 237412.306 ops/s
# Warmup Iteration   6: 239213.867 ops/s
# Warmup Iteration   7: 238746.701 ops/s
# Warmup Iteration   8: 240404.603 ops/s
# Warmup Iteration   9: 235443.506 ops/s
# Warmup Iteration  10: 239955.472 ops/s
# Warmup Iteration  11: 235033.148 ops/s
# Warmup Iteration  12: 238489.204 ops/s
# Warmup Iteration  13: 238100.812 ops/s
# Warmup Iteration  14: 236961.008 ops/s
# Warmup Iteration  15: 237483.790 ops/s
# Warmup Iteration  16: 239370.187 ops/s
# Warmup Iteration  17: 260219.662 ops/s
# Warmup Iteration  18: 262298.953 ops/s
# Warmup Iteration  19: 259930.447 ops/s
# Warmup Iteration  20: 260234.908 ops/s
# Warmup Iteration  21: 258936.972 ops/s
# Warmup Iteration  22: 255305.224 ops/s
# Warmup Iteration  23: 259310.434 ops/s
# Warmup Iteration  24: 261452.026 ops/s
# Warmup Iteration  25: 260149.477 ops/s
# Warmup Iteration  26: 258424.429 ops/s
# Warmup Iteration  27: 258484.692 ops/s
# Warmup Iteration  28: 260491.484 ops/s
# Warmup Iteration  29: 258488.301 ops/s
# Warmup Iteration  30: 260125.876 ops/s
Iteration   1: 261301.275 ops/s
Iteration   2: 258229.591 ops/s
Iteration   3: 262663.527 ops/s
Iteration   4: 258139.531 ops/s
Iteration   5: 260081.111 ops/s
Iteration   6: 260475.691 ops/s
Iteration   7: 256929.905 ops/s
Iteration   8: 260956.465 ops/s
Iteration   9: 255208.723 ops/s
Iteration  10: 257516.177 ops/s
Iteration  11: 260770.789 ops/s
Iteration  12: 259063.117 ops/s
Iteration  13: 259992.265 ops/s
Iteration  14: 255388.884 ops/s
Iteration  15: 258636.781 ops/s
Iteration  16: 260370.559 ops/s
Iteration  17: 260716.139 ops/s
Iteration  18: 259768.162 ops/s
Iteration  19: 257577.030 ops/s
Iteration  20: 260932.606 ops/s
Iteration  21: 259661.980 ops/s
Iteration  22: 257592.446 ops/s
Iteration  23: 261448.832 ops/s
Iteration  24: 261535.415 ops/s
Iteration  25: 261145.288 ops/s
Iteration  26: 261056.521 ops/s
Iteration  27: 256085.001 ops/s
Iteration  28: 260189.465 ops/s
Iteration  29: 256536.797 ops/s
Iteration  30: 259889.213 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_bipredicateThrows":
  259328.643 ±(99.9%) 1323.273 ops/s [Average]
  (min, avg, max) = (255208.723, 259328.643, 262663.527), stdev = 1980.614
  CI (99.9%): [258005.369, 260651.916] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableRetryWithPredicateTest._Benchmark.benchmark_bipredicateThrows  thrpt   30  259328.643 ± 1323.273  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_selectorFallbackTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_selectorFallbackTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1630954.954 ops/s
# Warmup Iteration   2: 2401164.450 ops/s
# Warmup Iteration   3: 2877508.962 ops/s
# Warmup Iteration   4: 2885403.848 ops/s
# Warmup Iteration   5: 2873644.063 ops/s
# Warmup Iteration   6: 2911756.144 ops/s
# Warmup Iteration   7: 2885297.400 ops/s
# Warmup Iteration   8: 2877461.176 ops/s
# Warmup Iteration   9: 2818309.486 ops/s
# Warmup Iteration  10: 2838898.635 ops/s
# Warmup Iteration  11: 2901851.556 ops/s
# Warmup Iteration  12: 2895430.247 ops/s
# Warmup Iteration  13: 2851339.496 ops/s
# Warmup Iteration  14: 2901012.563 ops/s
# Warmup Iteration  15: 2887342.815 ops/s
# Warmup Iteration  16: 2902351.204 ops/s
# Warmup Iteration  17: 2910819.317 ops/s
# Warmup Iteration  18: 2916059.993 ops/s
# Warmup Iteration  19: 2841820.480 ops/s
# Warmup Iteration  20: 2868186.367 ops/s
# Warmup Iteration  21: 2902516.895 ops/s
# Warmup Iteration  22: 2894012.640 ops/s
# Warmup Iteration  23: 2882090.213 ops/s
# Warmup Iteration  24: 2877128.345 ops/s
# Warmup Iteration  25: 2906578.245 ops/s
# Warmup Iteration  26: 2864152.904 ops/s
# Warmup Iteration  27: 2896133.446 ops/s
# Warmup Iteration  28: 2894096.464 ops/s
# Warmup Iteration  29: 2917923.982 ops/s
# Warmup Iteration  30: 2884397.472 ops/s
Iteration   1: 2919272.693 ops/s
Iteration   2: 2903160.586 ops/s
Iteration   3: 2901309.717 ops/s
Iteration   4: 2896961.345 ops/s
Iteration   5: 2883268.370 ops/s
Iteration   6: 2888259.108 ops/s
Iteration   7: 2898434.800 ops/s
Iteration   8: 2896637.452 ops/s
Iteration   9: 2833958.803 ops/s
Iteration  10: 2914268.187 ops/s
Iteration  11: 2893731.071 ops/s
Iteration  12: 2891713.509 ops/s
Iteration  13: 2899598.640 ops/s
Iteration  14: 2886059.783 ops/s
Iteration  15: 2857006.189 ops/s
Iteration  16: 2872030.328 ops/s
Iteration  17: 2884675.869 ops/s
Iteration  18: 2857143.308 ops/s
Iteration  19: 2785634.422 ops/s
Iteration  20: 2870058.347 ops/s
Iteration  21: 2865841.172 ops/s
Iteration  22: 2878527.172 ops/s
Iteration  23: 2882912.402 ops/s
Iteration  24: 2894171.314 ops/s
Iteration  25: 2881523.011 ops/s
Iteration  26: 2857921.682 ops/s
Iteration  27: 2858328.239 ops/s
Iteration  28: 2871479.333 ops/s
Iteration  29: 2870730.987 ops/s
Iteration  30: 2874462.450 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_selectorFallbackTake":
  2878969.343 ±(99.9%) 17202.510 ops/s [Average]
  (min, avg, max) = (2785634.422, 2878969.343, 2919272.693), stdev = 25747.908
  CI (99.9%): [2861766.833, 2896171.852] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_selectorFallbackTake  thrpt   30  2878969.343 ± 17202.510  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableValueAndError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableValueAndError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 524948.678 ops/s
# Warmup Iteration   2: 709449.218 ops/s
# Warmup Iteration   3: 748056.948 ops/s
# Warmup Iteration   4: 774690.760 ops/s
# Warmup Iteration   5: 805564.027 ops/s
# Warmup Iteration   6: 808104.193 ops/s
# Warmup Iteration   7: 809659.151 ops/s
# Warmup Iteration   8: 809607.376 ops/s
# Warmup Iteration   9: 812661.218 ops/s
# Warmup Iteration  10: 813694.978 ops/s
# Warmup Iteration  11: 816766.094 ops/s
# Warmup Iteration  12: 812028.636 ops/s
# Warmup Iteration  13: 816303.826 ops/s
# Warmup Iteration  14: 809976.957 ops/s
# Warmup Iteration  15: 799322.628 ops/s
# Warmup Iteration  16: 795895.408 ops/s
# Warmup Iteration  17: 843040.725 ops/s
# Warmup Iteration  18: 845866.552 ops/s
# Warmup Iteration  19: 836602.352 ops/s
# Warmup Iteration  20: 831459.988 ops/s
# Warmup Iteration  21: 844824.358 ops/s
# Warmup Iteration  22: 829928.509 ops/s
# Warmup Iteration  23: 842667.850 ops/s
# Warmup Iteration  24: 827252.190 ops/s
# Warmup Iteration  25: 828284.127 ops/s
# Warmup Iteration  26: 830363.084 ops/s
# Warmup Iteration  27: 836195.364 ops/s
# Warmup Iteration  28: 832416.651 ops/s
# Warmup Iteration  29: 837141.897 ops/s
# Warmup Iteration  30: 842729.016 ops/s
Iteration   1: 839053.093 ops/s
Iteration   2: 848079.744 ops/s
Iteration   3: 839595.669 ops/s
Iteration   4: 845575.660 ops/s
Iteration   5: 837822.678 ops/s
Iteration   6: 839536.423 ops/s
Iteration   7: 835415.843 ops/s
Iteration   8: 838535.411 ops/s
Iteration   9: 829752.902 ops/s
Iteration  10: 839790.377 ops/s
Iteration  11: 847385.160 ops/s
Iteration  12: 846983.648 ops/s
Iteration  13: 843778.661 ops/s
Iteration  14: 837514.887 ops/s
Iteration  15: 835403.863 ops/s
Iteration  16: 836101.260 ops/s
Iteration  17: 838495.962 ops/s
Iteration  18: 836347.781 ops/s
Iteration  19: 840918.592 ops/s
Iteration  20: 839563.359 ops/s
Iteration  21: 843407.465 ops/s
Iteration  22: 843027.900 ops/s
Iteration  23: 839724.811 ops/s
Iteration  24: 838923.713 ops/s
Iteration  25: 832148.143 ops/s
Iteration  26: 846680.648 ops/s
Iteration  27: 837038.221 ops/s
Iteration  28: 846293.416 ops/s
Iteration  29: 839141.655 ops/s
Iteration  30: 832340.927 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableValueAndError":
  839812.596 ±(99.9%) 3144.363 ops/s [Average]
  (min, avg, max) = (829752.902, 839812.596, 848079.744), stdev = 4706.335
  CI (99.9%): [836668.233, 842956.959] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_fromFlowableValueAndError  thrpt   30  839812.596 ± 3144.363  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableValueAndError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableValueAndError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 553824.464 ops/s
# Warmup Iteration   2: 727480.731 ops/s
# Warmup Iteration   3: 749566.020 ops/s
# Warmup Iteration   4: 791462.812 ops/s
# Warmup Iteration   5: 824187.723 ops/s
# Warmup Iteration   6: 814977.277 ops/s
# Warmup Iteration   7: 828957.645 ops/s
# Warmup Iteration   8: 816976.741 ops/s
# Warmup Iteration   9: 805648.548 ops/s
# Warmup Iteration  10: 818995.699 ops/s
# Warmup Iteration  11: 825862.192 ops/s
# Warmup Iteration  12: 823800.871 ops/s
# Warmup Iteration  13: 828921.824 ops/s
# Warmup Iteration  14: 818131.333 ops/s
# Warmup Iteration  15: 821362.131 ops/s
# Warmup Iteration  16: 809485.239 ops/s
# Warmup Iteration  17: 868312.021 ops/s
# Warmup Iteration  18: 858497.871 ops/s
# Warmup Iteration  19: 873341.866 ops/s
# Warmup Iteration  20: 875390.240 ops/s
# Warmup Iteration  21: 863633.644 ops/s
# Warmup Iteration  22: 862414.557 ops/s
# Warmup Iteration  23: 853205.735 ops/s
# Warmup Iteration  24: 867640.225 ops/s
# Warmup Iteration  25: 867931.946 ops/s
# Warmup Iteration  26: 870994.642 ops/s
# Warmup Iteration  27: 854072.181 ops/s
# Warmup Iteration  28: 867302.525 ops/s
# Warmup Iteration  29: 857848.979 ops/s
# Warmup Iteration  30: 867850.676 ops/s
Iteration   1: 863367.497 ops/s
Iteration   2: 867621.571 ops/s
Iteration   3: 872320.867 ops/s
Iteration   4: 867683.946 ops/s
Iteration   5: 859246.101 ops/s
Iteration   6: 856959.079 ops/s
Iteration   7: 868553.476 ops/s
Iteration   8: 864776.517 ops/s
Iteration   9: 868362.807 ops/s
Iteration  10: 872154.384 ops/s
Iteration  11: 872879.632 ops/s
Iteration  12: 862564.931 ops/s
Iteration  13: 869409.640 ops/s
Iteration  14: 867662.604 ops/s
Iteration  15: 872084.027 ops/s
Iteration  16: 875777.818 ops/s
Iteration  17: 868175.475 ops/s
Iteration  18: 851879.441 ops/s
Iteration  19: 866134.043 ops/s
Iteration  20: 854024.687 ops/s
Iteration  21: 865907.525 ops/s
Iteration  22: 868337.651 ops/s
Iteration  23: 869732.057 ops/s
Iteration  24: 863331.282 ops/s
Iteration  25: 868371.140 ops/s
Iteration  26: 872053.871 ops/s
Iteration  27: 871154.934 ops/s
Iteration  28: 873491.640 ops/s
Iteration  29: 877008.101 ops/s
Iteration  30: 869826.690 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableValueAndError":
  867361.781 ±(99.9%) 3955.624 ops/s [Average]
  (min, avg, max) = (851879.441, 867361.781, 877008.101), stdev = 5920.592
  CI (99.9%): [863406.157, 871317.405] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_fromObservableValueAndError  thrpt   30  867361.781 ± 3955.624  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_arrayDelayErrorMultipleNullErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_arrayDelayErrorMultipleNullErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 210578.258 ops/s
# Warmup Iteration   2: 268398.401 ops/s
# Warmup Iteration   3: 277312.593 ops/s
# Warmup Iteration   4: 259302.936 ops/s
# Warmup Iteration   5: 289671.065 ops/s
# Warmup Iteration   6: 290577.161 ops/s
# Warmup Iteration   7: 290803.961 ops/s
# Warmup Iteration   8: 290657.833 ops/s
# Warmup Iteration   9: 290821.315 ops/s
# Warmup Iteration  10: 290270.913 ops/s
# Warmup Iteration  11: 287952.374 ops/s
# Warmup Iteration  12: 291844.663 ops/s
# Warmup Iteration  13: 289093.482 ops/s
# Warmup Iteration  14: 287312.221 ops/s
# Warmup Iteration  15: 289813.852 ops/s
# Warmup Iteration  16: 289340.894 ops/s
# Warmup Iteration  17: 302589.854 ops/s
# Warmup Iteration  18: 299808.071 ops/s
# Warmup Iteration  19: 303530.647 ops/s
# Warmup Iteration  20: 301079.769 ops/s
# Warmup Iteration  21: 301929.426 ops/s
# Warmup Iteration  22: 304380.325 ops/s
# Warmup Iteration  23: 302089.820 ops/s
# Warmup Iteration  24: 298408.720 ops/s
# Warmup Iteration  25: 300463.442 ops/s
# Warmup Iteration  26: 303745.540 ops/s
# Warmup Iteration  27: 301628.288 ops/s
# Warmup Iteration  28: 296363.836 ops/s
# Warmup Iteration  29: 302714.232 ops/s
# Warmup Iteration  30: 300620.689 ops/s
Iteration   1: 303401.897 ops/s
Iteration   2: 301013.449 ops/s
Iteration   3: 301800.526 ops/s
Iteration   4: 304708.023 ops/s
Iteration   5: 303639.953 ops/s
Iteration   6: 304287.576 ops/s
Iteration   7: 304054.012 ops/s
Iteration   8: 301455.037 ops/s
Iteration   9: 302508.095 ops/s
Iteration  10: 303913.391 ops/s
Iteration  11: 303864.112 ops/s
Iteration  12: 295741.325 ops/s
Iteration  13: 303768.356 ops/s
Iteration  14: 304162.979 ops/s
Iteration  15: 304549.785 ops/s
Iteration  16: 301485.335 ops/s
Iteration  17: 303527.021 ops/s
Iteration  18: 302238.199 ops/s
Iteration  19: 302947.241 ops/s
Iteration  20: 301517.643 ops/s
Iteration  21: 300258.433 ops/s
Iteration  22: 298948.368 ops/s
Iteration  23: 303647.943 ops/s
Iteration  24: 302781.042 ops/s
Iteration  25: 302534.866 ops/s
Iteration  26: 298455.298 ops/s
Iteration  27: 303225.501 ops/s
Iteration  28: 299274.553 ops/s
Iteration  29: 301707.818 ops/s
Iteration  30: 298988.026 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_arrayDelayErrorMultipleNullErrors":
  302146.860 ±(99.9%) 1432.771 ops/s [Average]
  (min, avg, max) = (295741.325, 302146.860, 304708.023), stdev = 2144.505
  CI (99.9%): [300714.089, 303579.631] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_arrayDelayErrorMultipleNullErrors  thrpt   30  302146.860 ± 1432.771  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSourceOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSourceOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126362.760 ops/s
# Warmup Iteration   2: 190159.834 ops/s
# Warmup Iteration   3: 195570.534 ops/s
# Warmup Iteration   4: 218494.205 ops/s
# Warmup Iteration   5: 221362.470 ops/s
# Warmup Iteration   6: 223640.448 ops/s
# Warmup Iteration   7: 221163.551 ops/s
# Warmup Iteration   8: 221007.465 ops/s
# Warmup Iteration   9: 215992.150 ops/s
# Warmup Iteration  10: 217746.169 ops/s
# Warmup Iteration  11: 220055.420 ops/s
# Warmup Iteration  12: 218689.187 ops/s
# Warmup Iteration  13: 219912.800 ops/s
# Warmup Iteration  14: 218954.461 ops/s
# Warmup Iteration  15: 220056.656 ops/s
# Warmup Iteration  16: 216767.114 ops/s
# Warmup Iteration  17: 224828.706 ops/s
# Warmup Iteration  18: 228101.259 ops/s
# Warmup Iteration  19: 228340.745 ops/s
# Warmup Iteration  20: 228628.699 ops/s
# Warmup Iteration  21: 229169.900 ops/s
# Warmup Iteration  22: 226132.488 ops/s
# Warmup Iteration  23: 229628.490 ops/s
# Warmup Iteration  24: 228533.271 ops/s
# Warmup Iteration  25: 227890.447 ops/s
# Warmup Iteration  26: 228708.002 ops/s
# Warmup Iteration  27: 227478.269 ops/s
# Warmup Iteration  28: 229663.743 ops/s
# Warmup Iteration  29: 228748.560 ops/s
# Warmup Iteration  30: 229124.375 ops/s
Iteration   1: 229416.280 ops/s
Iteration   2: 228281.676 ops/s
Iteration   3: 228477.266 ops/s
Iteration   4: 228974.995 ops/s
Iteration   5: 229648.541 ops/s
Iteration   6: 228867.346 ops/s
Iteration   7: 226271.690 ops/s
Iteration   8: 228050.204 ops/s
Iteration   9: 230271.574 ops/s
Iteration  10: 229055.593 ops/s
Iteration  11: 227875.602 ops/s
Iteration  12: 226607.729 ops/s
Iteration  13: 227855.186 ops/s
Iteration  14: 227880.020 ops/s
Iteration  15: 229347.227 ops/s
Iteration  16: 229465.204 ops/s
Iteration  17: 229088.826 ops/s
Iteration  18: 228347.547 ops/s
Iteration  19: 228646.010 ops/s
Iteration  20: 227547.761 ops/s
Iteration  21: 230150.059 ops/s
Iteration  22: 227048.460 ops/s
Iteration  23: 228230.300 ops/s
Iteration  24: 227689.435 ops/s
Iteration  25: 227580.267 ops/s
Iteration  26: 228854.310 ops/s
Iteration  27: 228815.629 ops/s
Iteration  28: 228555.717 ops/s
Iteration  29: 228688.488 ops/s
Iteration  30: 228696.031 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSourceOther":
  228476.166 ±(99.9%) 627.616 ops/s [Average]
  (min, avg, max) = (226271.690, 228476.166, 230271.574), stdev = 939.387
  CI (99.9%): [227848.549, 229103.782] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSourceOther  thrpt   30  228476.166 ± 627.616  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_onErrorAvailableUntilReset$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_onErrorAvailableUntilReset

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 191102.824 ops/s
# Warmup Iteration   2: 364653.019 ops/s
# Warmup Iteration   3: 358216.541 ops/s
# Warmup Iteration   4: 401066.358 ops/s
# Warmup Iteration   5: 402194.455 ops/s
# Warmup Iteration   6: 403141.058 ops/s
# Warmup Iteration   7: 400820.828 ops/s
# Warmup Iteration   8: 404691.705 ops/s
# Warmup Iteration   9: 397645.493 ops/s
# Warmup Iteration  10: 398992.105 ops/s
# Warmup Iteration  11: 399845.012 ops/s
# Warmup Iteration  12: 400269.332 ops/s
# Warmup Iteration  13: 400798.955 ops/s
# Warmup Iteration  14: 399669.242 ops/s
# Warmup Iteration  15: 403326.025 ops/s
# Warmup Iteration  16: 400116.685 ops/s
# Warmup Iteration  17: 407171.662 ops/s
# Warmup Iteration  18: 409901.004 ops/s
# Warmup Iteration  19: 406817.357 ops/s
# Warmup Iteration  20: 406217.345 ops/s
# Warmup Iteration  21: 409200.900 ops/s
# Warmup Iteration  22: 405531.050 ops/s
# Warmup Iteration  23: 410002.540 ops/s
# Warmup Iteration  24: 409001.627 ops/s
# Warmup Iteration  25: 408188.664 ops/s
# Warmup Iteration  26: 405908.879 ops/s
# Warmup Iteration  27: 404315.160 ops/s
# Warmup Iteration  28: 408501.934 ops/s
# Warmup Iteration  29: 406507.325 ops/s
# Warmup Iteration  30: 408670.893 ops/s
Iteration   1: 409569.356 ops/s
Iteration   2: 408107.029 ops/s
Iteration   3: 410766.470 ops/s
Iteration   4: 409038.839 ops/s
Iteration   5: 408941.594 ops/s
Iteration   6: 407377.526 ops/s
Iteration   7: 405657.934 ops/s
Iteration   8: 407652.097 ops/s
Iteration   9: 406479.069 ops/s
Iteration  10: 410033.850 ops/s
Iteration  11: 410263.974 ops/s
Iteration  12: 407017.535 ops/s
Iteration  13: 411569.975 ops/s
Iteration  14: 408890.166 ops/s
Iteration  15: 408573.312 ops/s
Iteration  16: 408861.947 ops/s
Iteration  17: 409843.438 ops/s
Iteration  18: 408666.119 ops/s
Iteration  19: 410195.810 ops/s
Iteration  20: 412054.315 ops/s
Iteration  21: 407705.641 ops/s
Iteration  22: 407701.522 ops/s
Iteration  23: 405781.136 ops/s
Iteration  24: 403616.655 ops/s
Iteration  25: 406881.814 ops/s
Iteration  26: 409903.144 ops/s
Iteration  27: 411429.999 ops/s
Iteration  28: 408868.208 ops/s
Iteration  29: 407992.486 ops/s
Iteration  30: 400220.043 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_onErrorAvailableUntilReset":
  408322.033 ±(99.9%) 1615.035 ops/s [Average]
  (min, avg, max) = (400220.043, 408322.033, 412054.315), stdev = 2417.309
  CI (99.9%): [406706.998, 409937.069] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_onErrorAvailableUntilReset  thrpt   30  408322.033 ± 1615.035  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 574958.124 ops/s
# Warmup Iteration   2: 739049.651 ops/s
# Warmup Iteration   3: 729251.178 ops/s
# Warmup Iteration   4: 835753.240 ops/s
# Warmup Iteration   5: 900616.354 ops/s
# Warmup Iteration   6: 903353.173 ops/s
# Warmup Iteration   7: 904358.929 ops/s
# Warmup Iteration   8: 899738.637 ops/s
# Warmup Iteration   9: 894721.753 ops/s
# Warmup Iteration  10: 900700.488 ops/s
# Warmup Iteration  11: 888945.118 ops/s
# Warmup Iteration  12: 895746.439 ops/s
# Warmup Iteration  13: 896398.956 ops/s
# Warmup Iteration  14: 900422.737 ops/s
# Warmup Iteration  15: 895457.603 ops/s
# Warmup Iteration  16: 895253.330 ops/s
# Warmup Iteration  17: 891066.789 ops/s
# Warmup Iteration  18: 901299.011 ops/s
# Warmup Iteration  19: 902189.744 ops/s
# Warmup Iteration  20: 900098.497 ops/s
# Warmup Iteration  21: 898669.240 ops/s
# Warmup Iteration  22: 905992.684 ops/s
# Warmup Iteration  23: 896552.662 ops/s
# Warmup Iteration  24: 895633.553 ops/s
# Warmup Iteration  25: 905347.832 ops/s
# Warmup Iteration  26: 886225.623 ops/s
# Warmup Iteration  27: 903121.281 ops/s
# Warmup Iteration  28: 897622.934 ops/s
# Warmup Iteration  29: 904215.356 ops/s
# Warmup Iteration  30: 893611.068 ops/s
Iteration   1: 900095.111 ops/s
Iteration   2: 894190.043 ops/s
Iteration   3: 891138.324 ops/s
Iteration   4: 900718.133 ops/s
Iteration   5: 902402.184 ops/s
Iteration   6: 904980.440 ops/s
Iteration   7: 903172.698 ops/s
Iteration   8: 900149.649 ops/s
Iteration   9: 912320.955 ops/s
Iteration  10: 896063.570 ops/s
Iteration  11: 899340.648 ops/s
Iteration  12: 906114.181 ops/s
Iteration  13: 901156.946 ops/s
Iteration  14: 901720.266 ops/s
Iteration  15: 899322.293 ops/s
Iteration  16: 902439.832 ops/s
Iteration  17: 901446.488 ops/s
Iteration  18: 900449.325 ops/s
Iteration  19: 895684.392 ops/s
Iteration  20: 901156.438 ops/s
Iteration  21: 904709.377 ops/s
Iteration  22: 902481.951 ops/s
Iteration  23: 892171.586 ops/s
Iteration  24: 900146.800 ops/s
Iteration  25: 897149.014 ops/s
Iteration  26: 904712.815 ops/s
Iteration  27: 907663.737 ops/s
Iteration  28: 906737.352 ops/s
Iteration  29: 902371.900 ops/s
Iteration  30: 899978.528 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_normal":
  901072.833 ±(99.9%) 3005.262 ops/s [Average]
  (min, avg, max) = (891138.324, 901072.833, 912320.955), stdev = 4498.135
  CI (99.9%): [898067.570, 904078.095] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_normal  thrpt   30  901072.833 ± 3005.262  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_normalDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_normalDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 565306.376 ops/s
# Warmup Iteration   2: 720320.263 ops/s
# Warmup Iteration   3: 707810.950 ops/s
# Warmup Iteration   4: 812041.806 ops/s
# Warmup Iteration   5: 898351.165 ops/s
# Warmup Iteration   6: 899500.479 ops/s
# Warmup Iteration   7: 896775.658 ops/s
# Warmup Iteration   8: 901924.032 ops/s
# Warmup Iteration   9: 899351.157 ops/s
# Warmup Iteration  10: 899602.570 ops/s
# Warmup Iteration  11: 889908.610 ops/s
# Warmup Iteration  12: 890024.442 ops/s
# Warmup Iteration  13: 887735.910 ops/s
# Warmup Iteration  14: 894667.500 ops/s
# Warmup Iteration  15: 895307.218 ops/s
# Warmup Iteration  16: 894372.776 ops/s
# Warmup Iteration  17: 884776.882 ops/s
# Warmup Iteration  18: 892412.459 ops/s
# Warmup Iteration  19: 897501.613 ops/s
# Warmup Iteration  20: 886624.293 ops/s
# Warmup Iteration  21: 888838.163 ops/s
# Warmup Iteration  22: 887718.840 ops/s
# Warmup Iteration  23: 891811.692 ops/s
# Warmup Iteration  24: 889462.485 ops/s
# Warmup Iteration  25: 891113.345 ops/s
# Warmup Iteration  26: 887998.686 ops/s
# Warmup Iteration  27: 891352.644 ops/s
# Warmup Iteration  28: 889535.799 ops/s
# Warmup Iteration  29: 892335.886 ops/s
# Warmup Iteration  30: 886493.641 ops/s
Iteration   1: 876037.659 ops/s
Iteration   2: 888974.545 ops/s
Iteration   3: 888403.841 ops/s
Iteration   4: 888054.807 ops/s
Iteration   5: 889551.624 ops/s
Iteration   6: 893723.931 ops/s
Iteration   7: 887249.809 ops/s
Iteration   8: 887258.955 ops/s
Iteration   9: 892660.264 ops/s
Iteration  10: 891153.780 ops/s
Iteration  11: 895913.723 ops/s
Iteration  12: 888189.260 ops/s
Iteration  13: 843118.227 ops/s
Iteration  14: 889957.928 ops/s
Iteration  15: 869035.484 ops/s
Iteration  16: 888136.928 ops/s
Iteration  17: 895482.890 ops/s
Iteration  18: 875209.386 ops/s
Iteration  19: 890379.923 ops/s
Iteration  20: 894402.655 ops/s
Iteration  21: 891437.160 ops/s
Iteration  22: 866431.104 ops/s
Iteration  23: 889063.692 ops/s
Iteration  24: 890897.082 ops/s
Iteration  25: 883103.358 ops/s
Iteration  26: 889986.627 ops/s
Iteration  27: 899752.689 ops/s
Iteration  28: 887062.089 ops/s
Iteration  29: 893527.980 ops/s
Iteration  30: 886768.348 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_normalDelayError":
  886364.192 ±(99.9%) 7365.182 ops/s [Average]
  (min, avg, max) = (843118.227, 886364.192, 899752.689), stdev = 11023.858
  CI (99.9%): [878999.010, 893729.373] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_normalDelayError  thrpt   30  886364.192 ± 7365.182  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_innerSuccessCompletesAfterMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_innerSuccessCompletesAfterMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1639987.225 ops/s
# Warmup Iteration   2: 2581411.229 ops/s
# Warmup Iteration   3: 2999622.782 ops/s
# Warmup Iteration   4: 2993888.916 ops/s
# Warmup Iteration   5: 2982883.598 ops/s
# Warmup Iteration   6: 2999918.227 ops/s
# Warmup Iteration   7: 2998690.802 ops/s
# Warmup Iteration   8: 2920478.640 ops/s
# Warmup Iteration   9: 2990012.302 ops/s
# Warmup Iteration  10: 2941218.989 ops/s
# Warmup Iteration  11: 2976696.041 ops/s
# Warmup Iteration  12: 2970705.415 ops/s
# Warmup Iteration  13: 2987847.263 ops/s
# Warmup Iteration  14: 2971757.789 ops/s
# Warmup Iteration  15: 2997065.595 ops/s
# Warmup Iteration  16: 2966571.234 ops/s
# Warmup Iteration  17: 3008991.952 ops/s
# Warmup Iteration  18: 2986580.547 ops/s
# Warmup Iteration  19: 3005996.519 ops/s
# Warmup Iteration  20: 2981179.481 ops/s
# Warmup Iteration  21: 3004487.313 ops/s
# Warmup Iteration  22: 2984196.189 ops/s
# Warmup Iteration  23: 2964314.395 ops/s
# Warmup Iteration  24: 2985310.402 ops/s
# Warmup Iteration  25: 2972653.845 ops/s
# Warmup Iteration  26: 3002768.922 ops/s
# Warmup Iteration  27: 2998375.952 ops/s
# Warmup Iteration  28: 3012521.231 ops/s
# Warmup Iteration  29: 2991958.830 ops/s
# Warmup Iteration  30: 2993832.863 ops/s
Iteration   1: 2994621.668 ops/s
Iteration   2: 2997212.469 ops/s
Iteration   3: 2995868.759 ops/s
Iteration   4: 3013849.813 ops/s
Iteration   5: 2994361.787 ops/s
Iteration   6: 2987148.753 ops/s
Iteration   7: 2978297.674 ops/s
Iteration   8: 3002531.913 ops/s
Iteration   9: 2976833.578 ops/s
Iteration  10: 2958992.601 ops/s
Iteration  11: 2999040.273 ops/s
Iteration  12: 2972635.585 ops/s
Iteration  13: 3014109.247 ops/s
Iteration  14: 3008982.772 ops/s
Iteration  15: 2997415.693 ops/s
Iteration  16: 2996600.709 ops/s
Iteration  17: 2986724.791 ops/s
Iteration  18: 2996305.666 ops/s
Iteration  19: 3015631.601 ops/s
Iteration  20: 3014194.724 ops/s
Iteration  21: 2998798.732 ops/s
Iteration  22: 2985391.203 ops/s
Iteration  23: 3002538.430 ops/s
Iteration  24: 3007389.433 ops/s
Iteration  25: 2982929.853 ops/s
Iteration  26: 2967773.340 ops/s
Iteration  27: 3018868.501 ops/s
Iteration  28: 3015340.432 ops/s
Iteration  29: 2986763.232 ops/s
Iteration  30: 2972477.283 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_innerSuccessCompletesAfterMain":
  2994654.350 ±(99.9%) 10449.741 ops/s [Average]
  (min, avg, max) = (2958992.601, 2994654.350, 3018868.501), stdev = 15640.682
  CI (99.9%): [2984204.609, 3005104.092] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_innerSuccessCompletesAfterMain  thrpt   30  2994654.350 ± 10449.741  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_middleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_middleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 312773.424 ops/s
# Warmup Iteration   2: 482016.558 ops/s
# Warmup Iteration   3: 481646.142 ops/s
# Warmup Iteration   4: 459406.066 ops/s
# Warmup Iteration   5: 522211.941 ops/s
# Warmup Iteration   6: 521345.617 ops/s
# Warmup Iteration   7: 523133.699 ops/s
# Warmup Iteration   8: 524466.904 ops/s
# Warmup Iteration   9: 523880.046 ops/s
# Warmup Iteration  10: 524902.557 ops/s
# Warmup Iteration  11: 521769.061 ops/s
# Warmup Iteration  12: 521840.419 ops/s
# Warmup Iteration  13: 519945.201 ops/s
# Warmup Iteration  14: 520971.969 ops/s
# Warmup Iteration  15: 521495.632 ops/s
# Warmup Iteration  16: 524014.125 ops/s
# Warmup Iteration  17: 531873.475 ops/s
# Warmup Iteration  18: 535774.202 ops/s
# Warmup Iteration  19: 535379.271 ops/s
# Warmup Iteration  20: 533453.886 ops/s
# Warmup Iteration  21: 532256.483 ops/s
# Warmup Iteration  22: 537124.195 ops/s
# Warmup Iteration  23: 538883.822 ops/s
# Warmup Iteration  24: 532877.468 ops/s
# Warmup Iteration  25: 519793.494 ops/s
# Warmup Iteration  26: 536344.255 ops/s
# Warmup Iteration  27: 533374.972 ops/s
# Warmup Iteration  28: 526306.261 ops/s
# Warmup Iteration  29: 533292.231 ops/s
# Warmup Iteration  30: 537754.221 ops/s
Iteration   1: 538185.668 ops/s
Iteration   2: 534139.231 ops/s
Iteration   3: 533455.710 ops/s
Iteration   4: 528463.793 ops/s
Iteration   5: 536604.521 ops/s
Iteration   6: 533987.610 ops/s
Iteration   7: 538163.558 ops/s
Iteration   8: 535820.137 ops/s
Iteration   9: 534744.655 ops/s
Iteration  10: 534006.043 ops/s
Iteration  11: 531433.935 ops/s
Iteration  12: 536974.871 ops/s
Iteration  13: 530566.894 ops/s
Iteration  14: 535053.052 ops/s
Iteration  15: 537981.342 ops/s
Iteration  16: 536728.602 ops/s
Iteration  17: 536418.024 ops/s
Iteration  18: 532500.786 ops/s
Iteration  19: 533266.611 ops/s
Iteration  20: 534486.815 ops/s
Iteration  21: 536245.154 ops/s
Iteration  22: 534924.316 ops/s
Iteration  23: 536950.626 ops/s
Iteration  24: 535750.667 ops/s
Iteration  25: 532320.214 ops/s
Iteration  26: 535617.980 ops/s
Iteration  27: 533205.341 ops/s
Iteration  28: 531812.192 ops/s
Iteration  29: 536864.991 ops/s
Iteration  30: 536280.073 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_middleError":
  534765.114 ±(99.9%) 1575.853 ops/s [Average]
  (min, avg, max) = (528463.793, 534765.114, 538185.668), stdev = 2358.662
  CI (99.9%): [533189.261, 536340.966] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_middleError  thrpt   30  534765.114 ± 1575.853  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1561960.524 ops/s
# Warmup Iteration   2: 1889036.875 ops/s
# Warmup Iteration   3: 2352354.701 ops/s
# Warmup Iteration   4: 2430685.999 ops/s
# Warmup Iteration   5: 2638971.094 ops/s
# Warmup Iteration   6: 2639731.686 ops/s
# Warmup Iteration   7: 2610112.483 ops/s
# Warmup Iteration   8: 2649874.667 ops/s
# Warmup Iteration   9: 2639216.063 ops/s
# Warmup Iteration  10: 2609670.311 ops/s
# Warmup Iteration  11: 2618596.804 ops/s
# Warmup Iteration  12: 2639341.622 ops/s
# Warmup Iteration  13: 2612592.758 ops/s
# Warmup Iteration  14: 2595599.356 ops/s
# Warmup Iteration  15: 2621318.818 ops/s
# Warmup Iteration  16: 2590358.288 ops/s
# Warmup Iteration  17: 2622066.278 ops/s
# Warmup Iteration  18: 2636006.982 ops/s
# Warmup Iteration  19: 2607350.025 ops/s
# Warmup Iteration  20: 2630833.499 ops/s
# Warmup Iteration  21: 2627559.592 ops/s
# Warmup Iteration  22: 2618059.128 ops/s
# Warmup Iteration  23: 2565510.100 ops/s
# Warmup Iteration  24: 2616858.883 ops/s
# Warmup Iteration  25: 2636055.431 ops/s
# Warmup Iteration  26: 2640931.410 ops/s
# Warmup Iteration  27: 2637339.002 ops/s
# Warmup Iteration  28: 2613260.523 ops/s
# Warmup Iteration  29: 2612325.041 ops/s
# Warmup Iteration  30: 2624380.913 ops/s
Iteration   1: 2635546.161 ops/s
Iteration   2: 2642223.409 ops/s
Iteration   3: 2618904.241 ops/s
Iteration   4: 2642134.742 ops/s
Iteration   5: 2618004.112 ops/s
Iteration   6: 2633895.482 ops/s
Iteration   7: 2625276.778 ops/s
Iteration   8: 2621558.104 ops/s
Iteration   9: 2625914.990 ops/s
Iteration  10: 2632607.145 ops/s
Iteration  11: 2627514.148 ops/s
Iteration  12: 2613555.647 ops/s
Iteration  13: 2641926.805 ops/s
Iteration  14: 2627351.304 ops/s
Iteration  15: 2639673.628 ops/s
Iteration  16: 2624652.267 ops/s
Iteration  17: 2612703.515 ops/s
Iteration  18: 2631462.264 ops/s
Iteration  19: 2609911.203 ops/s
Iteration  20: 2598344.234 ops/s
Iteration  21: 2637913.968 ops/s
Iteration  22: 2631271.308 ops/s
Iteration  23: 2615018.712 ops/s
Iteration  24: 2644167.994 ops/s
Iteration  25: 2617988.032 ops/s
Iteration  26: 2636729.285 ops/s
Iteration  27: 2607830.854 ops/s
Iteration  28: 2603060.740 ops/s
Iteration  29: 2644849.506 ops/s
Iteration  30: 2630707.812 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_take":
  2626423.280 ±(99.9%) 8519.124 ops/s [Average]
  (min, avg, max) = (2598344.234, 2626423.280, 2644849.506), stdev = 12751.025
  CI (99.9%): [2617904.155, 2634942.404] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_take  thrpt   30  2626423.280 ± 8519.124  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_badInnerSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_badInnerSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107612.654 ops/s
# Warmup Iteration   2: 160421.252 ops/s
# Warmup Iteration   3: 191399.669 ops/s
# Warmup Iteration   4: 194251.314 ops/s
# Warmup Iteration   5: 192974.379 ops/s
# Warmup Iteration   6: 194080.702 ops/s
# Warmup Iteration   7: 193893.341 ops/s
# Warmup Iteration   8: 194476.844 ops/s
# Warmup Iteration   9: 194437.229 ops/s
# Warmup Iteration  10: 193252.492 ops/s
# Warmup Iteration  11: 192098.875 ops/s
# Warmup Iteration  12: 192212.702 ops/s
# Warmup Iteration  13: 191673.413 ops/s
# Warmup Iteration  14: 192273.475 ops/s
# Warmup Iteration  15: 192454.484 ops/s
# Warmup Iteration  16: 194096.285 ops/s
# Warmup Iteration  17: 198744.956 ops/s
# Warmup Iteration  18: 200231.084 ops/s
# Warmup Iteration  19: 200353.908 ops/s
# Warmup Iteration  20: 196490.950 ops/s
# Warmup Iteration  21: 200114.453 ops/s
# Warmup Iteration  22: 197034.781 ops/s
# Warmup Iteration  23: 199248.839 ops/s
# Warmup Iteration  24: 199163.406 ops/s
# Warmup Iteration  25: 199687.359 ops/s
# Warmup Iteration  26: 200476.378 ops/s
# Warmup Iteration  27: 196874.325 ops/s
# Warmup Iteration  28: 200186.384 ops/s
# Warmup Iteration  29: 200115.012 ops/s
# Warmup Iteration  30: 198050.710 ops/s
Iteration   1: 199783.227 ops/s
Iteration   2: 198857.820 ops/s
Iteration   3: 201242.182 ops/s
Iteration   4: 199883.835 ops/s
Iteration   5: 199974.623 ops/s
Iteration   6: 200274.510 ops/s
Iteration   7: 201404.039 ops/s
Iteration   8: 198796.655 ops/s
Iteration   9: 199647.783 ops/s
Iteration  10: 198341.484 ops/s
Iteration  11: 199975.319 ops/s
Iteration  12: 201535.537 ops/s
Iteration  13: 199594.446 ops/s
Iteration  14: 199796.019 ops/s
Iteration  15: 199756.534 ops/s
Iteration  16: 200424.811 ops/s
Iteration  17: 199326.250 ops/s
Iteration  18: 199482.320 ops/s
Iteration  19: 199507.699 ops/s
Iteration  20: 200133.136 ops/s
Iteration  21: 199935.096 ops/s
Iteration  22: 200745.957 ops/s
Iteration  23: 201546.040 ops/s
Iteration  24: 198308.688 ops/s
Iteration  25: 199460.180 ops/s
Iteration  26: 200751.421 ops/s
Iteration  27: 198373.327 ops/s
Iteration  28: 200962.969 ops/s
Iteration  29: 200540.912 ops/s
Iteration  30: 199088.515 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_badInnerSource":
  199915.044 ±(99.9%) 610.475 ops/s [Average]
  (min, avg, max) = (198308.688, 199915.044, 201546.040), stdev = 913.731
  CI (99.9%): [199304.569, 200525.520] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_badInnerSource  thrpt   30  199915.044 ± 610.475  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_singleSourcesInIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_singleSourcesInIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2859930.264 ops/s
# Warmup Iteration   2: 4039825.955 ops/s
# Warmup Iteration   3: 4621482.132 ops/s
# Warmup Iteration   4: 4960921.917 ops/s
# Warmup Iteration   5: 5807965.283 ops/s
# Warmup Iteration   6: 5767311.055 ops/s
# Warmup Iteration   7: 5812803.928 ops/s
# Warmup Iteration   8: 5597450.837 ops/s
# Warmup Iteration   9: 5795676.729 ops/s
# Warmup Iteration  10: 5801732.688 ops/s
# Warmup Iteration  11: 5747939.503 ops/s
# Warmup Iteration  12: 5776638.339 ops/s
# Warmup Iteration  13: 5760681.238 ops/s
# Warmup Iteration  14: 5768270.188 ops/s
# Warmup Iteration  15: 5758298.747 ops/s
# Warmup Iteration  16: 5772144.063 ops/s
# Warmup Iteration  17: 5799559.958 ops/s
# Warmup Iteration  18: 5799710.236 ops/s
# Warmup Iteration  19: 5782943.048 ops/s
# Warmup Iteration  20: 5768338.451 ops/s
# Warmup Iteration  21: 5800458.417 ops/s
# Warmup Iteration  22: 5709579.971 ops/s
# Warmup Iteration  23: 5775645.664 ops/s
# Warmup Iteration  24: 5775441.845 ops/s
# Warmup Iteration  25: 5795410.874 ops/s
# Warmup Iteration  26: 5777768.242 ops/s
# Warmup Iteration  27: 5763353.149 ops/s
# Warmup Iteration  28: 5801316.360 ops/s
# Warmup Iteration  29: 5791208.460 ops/s
# Warmup Iteration  30: 5774548.155 ops/s
Iteration   1: 5830513.636 ops/s
Iteration   2: 5803865.533 ops/s
Iteration   3: 5675740.145 ops/s
Iteration   4: 5690282.859 ops/s
Iteration   5: 5778541.003 ops/s
Iteration   6: 5769469.272 ops/s
Iteration   7: 5807708.115 ops/s
Iteration   8: 5840905.055 ops/s
Iteration   9: 5785635.771 ops/s
Iteration  10: 5786342.687 ops/s
Iteration  11: 5771891.249 ops/s
Iteration  12: 5787526.752 ops/s
Iteration  13: 5770953.345 ops/s
Iteration  14: 5817945.315 ops/s
Iteration  15: 5763441.033 ops/s
Iteration  16: 5784744.869 ops/s
Iteration  17: 5829195.020 ops/s
Iteration  18: 5791999.140 ops/s
Iteration  19: 5795326.010 ops/s
Iteration  20: 5804498.932 ops/s
Iteration  21: 5722531.447 ops/s
Iteration  22: 5813328.599 ops/s
Iteration  23: 5822598.503 ops/s
Iteration  24: 5799106.105 ops/s
Iteration  25: 5768315.090 ops/s
Iteration  26: 5847438.401 ops/s
Iteration  27: 5835158.712 ops/s
Iteration  28: 5784284.754 ops/s
Iteration  29: 5768597.652 ops/s
Iteration  30: 5771969.279 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_singleSourcesInIterable":
  5787328.476 ±(99.9%) 26307.846 ops/s [Average]
  (min, avg, max) = (5675740.145, 5787328.476, 5847438.401), stdev = 39376.348
  CI (99.9%): [5761020.630, 5813636.322] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SingleAmbTest._Benchmark.benchmark_singleSourcesInIterable  thrpt   30  5787328.476 ± 26307.846  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSequenceEqualTest._Benchmark.benchmark_bothComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSequenceEqualTest._Benchmark.benchmark_bothComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2453710.187 ops/s
# Warmup Iteration   2: 3500239.567 ops/s
# Warmup Iteration   3: 3915320.345 ops/s
# Warmup Iteration   4: 4159263.819 ops/s
# Warmup Iteration   5: 4339199.199 ops/s
# Warmup Iteration   6: 4336474.253 ops/s
# Warmup Iteration   7: 4339445.353 ops/s
# Warmup Iteration   8: 4369095.738 ops/s
# Warmup Iteration   9: 4329058.033 ops/s
# Warmup Iteration  10: 4351158.478 ops/s
# Warmup Iteration  11: 4340635.785 ops/s
# Warmup Iteration  12: 4336024.014 ops/s
# Warmup Iteration  13: 4355571.542 ops/s
# Warmup Iteration  14: 4355328.332 ops/s
# Warmup Iteration  15: 4357877.935 ops/s
# Warmup Iteration  16: 4331667.355 ops/s
# Warmup Iteration  17: 4342715.177 ops/s
# Warmup Iteration  18: 4364682.941 ops/s
# Warmup Iteration  19: 4376218.560 ops/s
# Warmup Iteration  20: 4265029.093 ops/s
# Warmup Iteration  21: 4310892.429 ops/s
# Warmup Iteration  22: 4374511.105 ops/s
# Warmup Iteration  23: 4400574.724 ops/s
# Warmup Iteration  24: 4415925.032 ops/s
# Warmup Iteration  25: 4397475.180 ops/s
# Warmup Iteration  26: 4371632.125 ops/s
# Warmup Iteration  27: 4338321.345 ops/s
# Warmup Iteration  28: 4342475.387 ops/s
# Warmup Iteration  29: 4352833.966 ops/s
# Warmup Iteration  30: 4374557.376 ops/s
Iteration   1: 4342781.672 ops/s
Iteration   2: 4390651.774 ops/s
Iteration   3: 4324915.988 ops/s
Iteration   4: 4323156.850 ops/s
Iteration   5: 4322397.050 ops/s
Iteration   6: 4257641.756 ops/s
Iteration   7: 4381757.061 ops/s
Iteration   8: 4280527.091 ops/s
Iteration   9: 4343835.163 ops/s
Iteration  10: 4360272.565 ops/s
Iteration  11: 4396658.144 ops/s
Iteration  12: 4350340.294 ops/s
Iteration  13: 4335141.096 ops/s
Iteration  14: 4330395.463 ops/s
Iteration  15: 4345222.238 ops/s
Iteration  16: 4337179.356 ops/s
Iteration  17: 4350905.482 ops/s
Iteration  18: 4325082.365 ops/s
Iteration  19: 4333648.774 ops/s
Iteration  20: 4289831.899 ops/s
Iteration  21: 4372635.504 ops/s
Iteration  22: 4383340.646 ops/s
Iteration  23: 4356611.577 ops/s
Iteration  24: 4375454.279 ops/s
Iteration  25: 4374332.369 ops/s
Iteration  26: 4361807.293 ops/s
Iteration  27: 4383394.948 ops/s
Iteration  28: 4332384.065 ops/s
Iteration  29: 4329891.486 ops/s
Iteration  30: 4389766.198 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableSequenceEqualTest._Benchmark.benchmark_bothComplete":
  4346065.348 ±(99.9%) 22123.167 ops/s [Average]
  (min, avg, max) = (4257641.756, 4346065.348, 4396658.144), stdev = 33112.918
  CI (99.9%): [4323942.181, 4368188.516] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompletableSequenceEqualTest._Benchmark.benchmark_bothComplete  thrpt   30  4346065.348 ± 22123.167  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambArrayOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambArrayOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 635345.039 ops/s
# Warmup Iteration   2: 775260.909 ops/s
# Warmup Iteration   3: 770524.534 ops/s
# Warmup Iteration   4: 853832.206 ops/s
# Warmup Iteration   5: 890994.669 ops/s
# Warmup Iteration   6: 896281.330 ops/s
# Warmup Iteration   7: 880230.230 ops/s
# Warmup Iteration   8: 876003.155 ops/s
# Warmup Iteration   9: 876984.706 ops/s
# Warmup Iteration  10: 895084.253 ops/s
# Warmup Iteration  11: 894097.905 ops/s
# Warmup Iteration  12: 883611.683 ops/s
# Warmup Iteration  13: 883744.796 ops/s
# Warmup Iteration  14: 888133.067 ops/s
# Warmup Iteration  15: 883193.430 ops/s
# Warmup Iteration  16: 877872.606 ops/s
# Warmup Iteration  17: 932782.718 ops/s
# Warmup Iteration  18: 937952.855 ops/s
# Warmup Iteration  19: 946345.702 ops/s
# Warmup Iteration  20: 937111.111 ops/s
# Warmup Iteration  21: 938555.169 ops/s
# Warmup Iteration  22: 940293.391 ops/s
# Warmup Iteration  23: 940253.581 ops/s
# Warmup Iteration  24: 932796.704 ops/s
# Warmup Iteration  25: 931358.117 ops/s
# Warmup Iteration  26: 945570.528 ops/s
# Warmup Iteration  27: 929222.997 ops/s
# Warmup Iteration  28: 936262.965 ops/s
# Warmup Iteration  29: 941288.855 ops/s
# Warmup Iteration  30: 946081.733 ops/s
Iteration   1: 936261.111 ops/s
Iteration   2: 934988.993 ops/s
Iteration   3: 930968.465 ops/s
Iteration   4: 940255.325 ops/s
Iteration   5: 941160.920 ops/s
Iteration   6: 946598.845 ops/s
Iteration   7: 939185.449 ops/s
Iteration   8: 937427.111 ops/s
Iteration   9: 941194.380 ops/s
Iteration  10: 938892.461 ops/s
Iteration  11: 922752.403 ops/s
Iteration  12: 945944.714 ops/s
Iteration  13: 927247.300 ops/s
Iteration  14: 943609.806 ops/s
Iteration  15: 938626.641 ops/s
Iteration  16: 944219.477 ops/s
Iteration  17: 941870.635 ops/s
Iteration  18: 941446.622 ops/s
Iteration  19: 940872.774 ops/s
Iteration  20: 944640.754 ops/s
Iteration  21: 936583.930 ops/s
Iteration  22: 937633.332 ops/s
Iteration  23: 935338.658 ops/s
Iteration  24: 947109.664 ops/s
Iteration  25: 942905.078 ops/s
Iteration  26: 933738.696 ops/s
Iteration  27: 943089.746 ops/s
Iteration  28: 932378.015 ops/s
Iteration  29: 948642.002 ops/s
Iteration  30: 943609.644 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambArrayOrder":
  939306.432 ±(99.9%) 3942.329 ops/s [Average]
  (min, avg, max) = (922752.403, 939306.432, 948642.002), stdev = 5900.693
  CI (99.9%): [935364.102, 943248.761] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
SingleAmbTest._Benchmark.benchmark_ambArrayOrder  thrpt   30  939306.432 ± 3942.329  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_firstErrorOtherSucceed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_firstErrorOtherSucceed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 651742.992 ops/s
# Warmup Iteration   2: 789852.980 ops/s
# Warmup Iteration   3: 804605.915 ops/s
# Warmup Iteration   4: 858703.335 ops/s
# Warmup Iteration   5: 898142.239 ops/s
# Warmup Iteration   6: 902578.762 ops/s
# Warmup Iteration   7: 902667.871 ops/s
# Warmup Iteration   8: 901319.797 ops/s
# Warmup Iteration   9: 899031.953 ops/s
# Warmup Iteration  10: 900754.018 ops/s
# Warmup Iteration  11: 896303.561 ops/s
# Warmup Iteration  12: 891188.466 ops/s
# Warmup Iteration  13: 900699.936 ops/s
# Warmup Iteration  14: 892982.746 ops/s
# Warmup Iteration  15: 885590.415 ops/s
# Warmup Iteration  16: 888411.097 ops/s
# Warmup Iteration  17: 942322.917 ops/s
# Warmup Iteration  18: 940160.654 ops/s
# Warmup Iteration  19: 944918.210 ops/s
# Warmup Iteration  20: 942932.666 ops/s
# Warmup Iteration  21: 940214.180 ops/s
# Warmup Iteration  22: 945285.453 ops/s
# Warmup Iteration  23: 938482.800 ops/s
# Warmup Iteration  24: 942290.612 ops/s
# Warmup Iteration  25: 945435.578 ops/s
# Warmup Iteration  26: 939165.328 ops/s
# Warmup Iteration  27: 930547.360 ops/s
# Warmup Iteration  28: 940249.604 ops/s
# Warmup Iteration  29: 944278.346 ops/s
# Warmup Iteration  30: 925126.362 ops/s
Iteration   1: 943616.248 ops/s
Iteration   2: 927647.321 ops/s
Iteration   3: 946024.659 ops/s
Iteration   4: 943106.426 ops/s
Iteration   5: 939985.550 ops/s
Iteration   6: 937720.517 ops/s
Iteration   7: 918925.256 ops/s
Iteration   8: 918649.226 ops/s
Iteration   9: 947323.221 ops/s
Iteration  10: 935040.795 ops/s
Iteration  11: 948716.888 ops/s
Iteration  12: 930080.781 ops/s
Iteration  13: 940444.955 ops/s
Iteration  14: 940334.444 ops/s
Iteration  15: 944301.717 ops/s
Iteration  16: 926001.922 ops/s
Iteration  17: 940160.337 ops/s
Iteration  18: 941783.097 ops/s
Iteration  19: 944245.282 ops/s
Iteration  20: 942417.744 ops/s
Iteration  21: 942768.775 ops/s
Iteration  22: 943790.838 ops/s
Iteration  23: 943016.698 ops/s
Iteration  24: 944364.944 ops/s
Iteration  25: 945680.296 ops/s
Iteration  26: 937186.952 ops/s
Iteration  27: 943934.704 ops/s
Iteration  28: 936242.912 ops/s
Iteration  29: 950621.694 ops/s
Iteration  30: 944444.495 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_firstErrorOtherSucceed":
  939619.290 ±(99.9%) 5349.844 ops/s [Average]
  (min, avg, max) = (918649.226, 939619.290, 950621.694), stdev = 8007.396
  CI (99.9%): [934269.445, 944969.134] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SingleEqualsTest._Benchmark.benchmark_firstErrorOtherSucceed  thrpt   30  939619.290 ± 5349.844  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_firstSucceedOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_firstSucceedOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 613024.382 ops/s
# Warmup Iteration   2: 767304.016 ops/s
# Warmup Iteration   3: 860071.218 ops/s
# Warmup Iteration   4: 846669.175 ops/s
# Warmup Iteration   5: 880642.993 ops/s
# Warmup Iteration   6: 877869.309 ops/s
# Warmup Iteration   7: 881866.858 ops/s
# Warmup Iteration   8: 877117.222 ops/s
# Warmup Iteration   9: 874905.722 ops/s
# Warmup Iteration  10: 874016.957 ops/s
# Warmup Iteration  11: 872401.930 ops/s
# Warmup Iteration  12: 875532.358 ops/s
# Warmup Iteration  13: 873383.587 ops/s
# Warmup Iteration  14: 873938.904 ops/s
# Warmup Iteration  15: 879920.420 ops/s
# Warmup Iteration  16: 877992.387 ops/s
# Warmup Iteration  17: 921242.620 ops/s
# Warmup Iteration  18: 920714.950 ops/s
# Warmup Iteration  19: 929028.343 ops/s
# Warmup Iteration  20: 923969.129 ops/s
# Warmup Iteration  21: 921726.081 ops/s
# Warmup Iteration  22: 924557.942 ops/s
# Warmup Iteration  23: 924018.915 ops/s
# Warmup Iteration  24: 926144.696 ops/s
# Warmup Iteration  25: 915399.682 ops/s
# Warmup Iteration  26: 918311.588 ops/s
# Warmup Iteration  27: 922686.952 ops/s
# Warmup Iteration  28: 928979.239 ops/s
# Warmup Iteration  29: 925822.182 ops/s
# Warmup Iteration  30: 925149.060 ops/s
Iteration   1: 908623.219 ops/s
Iteration   2: 921797.544 ops/s
Iteration   3: 920496.607 ops/s
Iteration   4: 923009.922 ops/s
Iteration   5: 924261.363 ops/s
Iteration   6: 908195.536 ops/s
Iteration   7: 924029.791 ops/s
Iteration   8: 923428.971 ops/s
Iteration   9: 924994.956 ops/s
Iteration  10: 924404.630 ops/s
Iteration  11: 918913.889 ops/s
Iteration  12: 924012.973 ops/s
Iteration  13: 928384.473 ops/s
Iteration  14: 906162.307 ops/s
Iteration  15: 912086.298 ops/s
Iteration  16: 916927.854 ops/s
Iteration  17: 911011.273 ops/s
Iteration  18: 902439.377 ops/s
Iteration  19: 915641.592 ops/s
Iteration  20: 921893.063 ops/s
Iteration  21: 928909.263 ops/s
Iteration  22: 928300.067 ops/s
Iteration  23: 919699.762 ops/s
Iteration  24: 928347.424 ops/s
Iteration  25: 910708.366 ops/s
Iteration  26: 920811.075 ops/s
Iteration  27: 926488.788 ops/s
Iteration  28: 927025.020 ops/s
Iteration  29: 922545.401 ops/s
Iteration  30: 931035.273 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleEqualsTest._Benchmark.benchmark_firstSucceedOtherError":
  920152.869 ±(99.9%) 5052.893 ops/s [Average]
  (min, avg, max) = (902439.377, 920152.869, 931035.273), stdev = 7562.933
  CI (99.9%): [915099.976, 925205.762] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SingleEqualsTest._Benchmark.benchmark_firstSucceedOtherError  thrpt   30  920152.869 ± 5052.893  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_mapperReturnsNullObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_mapperReturnsNullObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 544564.805 ops/s
# Warmup Iteration   2: 673221.779 ops/s
# Warmup Iteration   3: 713396.252 ops/s
# Warmup Iteration   4: 760778.061 ops/s
# Warmup Iteration   5: 773118.943 ops/s
# Warmup Iteration   6: 774369.392 ops/s
# Warmup Iteration   7: 769964.517 ops/s
# Warmup Iteration   8: 771290.404 ops/s
# Warmup Iteration   9: 764950.612 ops/s
# Warmup Iteration  10: 769362.159 ops/s
# Warmup Iteration  11: 769297.515 ops/s
# Warmup Iteration  12: 763792.208 ops/s
# Warmup Iteration  13: 748786.561 ops/s
# Warmup Iteration  14: 763518.966 ops/s
# Warmup Iteration  15: 755191.575 ops/s
# Warmup Iteration  16: 766042.617 ops/s
# Warmup Iteration  17: 792946.345 ops/s
# Warmup Iteration  18: 803716.153 ops/s
# Warmup Iteration  19: 802386.625 ops/s
# Warmup Iteration  20: 798539.317 ops/s
# Warmup Iteration  21: 786113.177 ops/s
# Warmup Iteration  22: 805041.667 ops/s
# Warmup Iteration  23: 793713.455 ops/s
# Warmup Iteration  24: 797276.855 ops/s
# Warmup Iteration  25: 797342.648 ops/s
# Warmup Iteration  26: 799616.203 ops/s
# Warmup Iteration  27: 795581.862 ops/s
# Warmup Iteration  28: 798849.043 ops/s
# Warmup Iteration  29: 802326.605 ops/s
# Warmup Iteration  30: 799914.575 ops/s
Iteration   1: 796407.481 ops/s
Iteration   2: 798490.198 ops/s
Iteration   3: 802961.513 ops/s
Iteration   4: 798991.438 ops/s
Iteration   5: 807938.799 ops/s
Iteration   6: 800060.346 ops/s
Iteration   7: 798230.120 ops/s
Iteration   8: 792029.105 ops/s
Iteration   9: 789753.433 ops/s
Iteration  10: 798003.867 ops/s
Iteration  11: 789976.419 ops/s
Iteration  12: 806100.571 ops/s
Iteration  13: 802518.944 ops/s
Iteration  14: 802989.507 ops/s
Iteration  15: 785744.893 ops/s
Iteration  16: 803390.622 ops/s
Iteration  17: 802470.405 ops/s
Iteration  18: 801892.220 ops/s
Iteration  19: 798486.074 ops/s
Iteration  20: 787602.278 ops/s
Iteration  21: 799713.307 ops/s
Iteration  22: 800452.630 ops/s
Iteration  23: 794285.444 ops/s
Iteration  24: 805610.149 ops/s
Iteration  25: 798628.906 ops/s
Iteration  26: 802093.263 ops/s
Iteration  27: 792729.701 ops/s
Iteration  28: 799123.725 ops/s
Iteration  29: 796579.961 ops/s
Iteration  30: 795963.506 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_mapperReturnsNullObservable":
  798307.294 ±(99.9%) 3645.364 ops/s [Average]
  (min, avg, max) = (785744.893, 798307.294, 807938.799), stdev = 5456.210
  CI (99.9%): [794661.930, 801952.659] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_mapperReturnsNullObservable  thrpt   30  798307.294 ± 3645.364  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_mapperThrowsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_mapperThrowsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 565126.745 ops/s
# Warmup Iteration   2: 679174.117 ops/s
# Warmup Iteration   3: 745967.057 ops/s
# Warmup Iteration   4: 777595.975 ops/s
# Warmup Iteration   5: 779529.764 ops/s
# Warmup Iteration   6: 782280.689 ops/s
# Warmup Iteration   7: 769898.680 ops/s
# Warmup Iteration   8: 780567.717 ops/s
# Warmup Iteration   9: 780029.628 ops/s
# Warmup Iteration  10: 778868.142 ops/s
# Warmup Iteration  11: 778742.273 ops/s
# Warmup Iteration  12: 780007.142 ops/s
# Warmup Iteration  13: 775696.891 ops/s
# Warmup Iteration  14: 775815.963 ops/s
# Warmup Iteration  15: 771963.705 ops/s
# Warmup Iteration  16: 780223.107 ops/s
# Warmup Iteration  17: 813787.847 ops/s
# Warmup Iteration  18: 812057.265 ops/s
# Warmup Iteration  19: 818329.369 ops/s
# Warmup Iteration  20: 809904.568 ops/s
# Warmup Iteration  21: 805451.128 ops/s
# Warmup Iteration  22: 807229.325 ops/s
# Warmup Iteration  23: 805559.714 ops/s
# Warmup Iteration  24: 814547.915 ops/s
# Warmup Iteration  25: 815033.310 ops/s
# Warmup Iteration  26: 798749.925 ops/s
# Warmup Iteration  27: 801702.023 ops/s
# Warmup Iteration  28: 811430.678 ops/s
# Warmup Iteration  29: 807125.838 ops/s
# Warmup Iteration  30: 815375.360 ops/s
Iteration   1: 819848.353 ops/s
Iteration   2: 815531.192 ops/s
Iteration   3: 812028.682 ops/s
Iteration   4: 800834.516 ops/s
Iteration   5: 808143.430 ops/s
Iteration   6: 808445.091 ops/s
Iteration   7: 807921.682 ops/s
Iteration   8: 813235.389 ops/s
Iteration   9: 817054.180 ops/s
Iteration  10: 815385.343 ops/s
Iteration  11: 817869.350 ops/s
Iteration  12: 814693.246 ops/s
Iteration  13: 809797.665 ops/s
Iteration  14: 813840.049 ops/s
Iteration  15: 813365.820 ops/s
Iteration  16: 812475.818 ops/s
Iteration  17: 814813.796 ops/s
Iteration  18: 815257.888 ops/s
Iteration  19: 814524.635 ops/s
Iteration  20: 809210.660 ops/s
Iteration  21: 814349.668 ops/s
Iteration  22: 806354.313 ops/s
Iteration  23: 796806.877 ops/s
Iteration  24: 796326.536 ops/s
Iteration  25: 810611.857 ops/s
Iteration  26: 816272.267 ops/s
Iteration  27: 812800.883 ops/s
Iteration  28: 812138.207 ops/s
Iteration  29: 813207.830 ops/s
Iteration  30: 810541.781 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_mapperThrowsObservable":
  811456.233 ±(99.9%) 3712.778 ops/s [Average]
  (min, avg, max) = (796326.536, 811456.233, 819848.353), stdev = 5557.112
  CI (99.9%): [807743.455, 815169.012] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_mapperThrowsObservable  thrpt   30  811456.233 ± 3712.778  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124417.890 ops/s
# Warmup Iteration   2: 188078.239 ops/s
# Warmup Iteration   3: 221069.708 ops/s
# Warmup Iteration   4: 206163.204 ops/s
# Warmup Iteration   5: 224714.061 ops/s
# Warmup Iteration   6: 226178.528 ops/s
# Warmup Iteration   7: 225654.904 ops/s
# Warmup Iteration   8: 224589.054 ops/s
# Warmup Iteration   9: 222022.900 ops/s
# Warmup Iteration  10: 226109.829 ops/s
# Warmup Iteration  11: 224888.592 ops/s
# Warmup Iteration  12: 225797.198 ops/s
# Warmup Iteration  13: 224561.948 ops/s
# Warmup Iteration  14: 224656.119 ops/s
# Warmup Iteration  15: 224523.059 ops/s
# Warmup Iteration  16: 224262.043 ops/s
# Warmup Iteration  17: 233131.650 ops/s
# Warmup Iteration  18: 233429.143 ops/s
# Warmup Iteration  19: 227690.636 ops/s
# Warmup Iteration  20: 233325.284 ops/s
# Warmup Iteration  21: 229437.518 ops/s
# Warmup Iteration  22: 232233.735 ops/s
# Warmup Iteration  23: 231679.037 ops/s
# Warmup Iteration  24: 232835.424 ops/s
# Warmup Iteration  25: 233199.450 ops/s
# Warmup Iteration  26: 229473.235 ops/s
# Warmup Iteration  27: 232780.696 ops/s
# Warmup Iteration  28: 232984.512 ops/s
# Warmup Iteration  29: 232420.380 ops/s
# Warmup Iteration  30: 227603.217 ops/s
Iteration   1: 228616.945 ops/s
Iteration   2: 232009.656 ops/s
Iteration   3: 231460.696 ops/s
Iteration   4: 233743.746 ops/s
Iteration   5: 233384.015 ops/s
Iteration   6: 232885.287 ops/s
Iteration   7: 231605.480 ops/s
Iteration   8: 232885.350 ops/s
Iteration   9: 233420.713 ops/s
Iteration  10: 232065.744 ops/s
Iteration  11: 228689.075 ops/s
Iteration  12: 229537.158 ops/s
Iteration  13: 234113.157 ops/s
Iteration  14: 229827.897 ops/s
Iteration  15: 227719.308 ops/s
Iteration  16: 230299.288 ops/s
Iteration  17: 229201.027 ops/s
Iteration  18: 230890.751 ops/s
Iteration  19: 233208.875 ops/s
Iteration  20: 230482.679 ops/s
Iteration  21: 226446.372 ops/s
Iteration  22: 234083.459 ops/s
Iteration  23: 233086.037 ops/s
Iteration  24: 230933.237 ops/s
Iteration  25: 234272.167 ops/s
Iteration  26: 231862.628 ops/s
Iteration  27: 229903.219 ops/s
Iteration  28: 231792.112 ops/s
Iteration  29: 231647.664 ops/s
Iteration  30: 232267.235 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_badSource":
  231411.366 ±(99.9%) 1345.511 ops/s [Average]
  (min, avg, max) = (226446.372, 231411.366, 234272.167), stdev = 2013.897
  CI (99.9%): [230065.855, 232756.877] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_badSource  thrpt   30  231411.366 ± 1345.511  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 413715.874 ops/s
# Warmup Iteration   2: 626711.650 ops/s
# Warmup Iteration   3: 610938.206 ops/s
# Warmup Iteration   4: 666368.436 ops/s
# Warmup Iteration   5: 680813.635 ops/s
# Warmup Iteration   6: 676420.210 ops/s
# Warmup Iteration   7: 675667.444 ops/s
# Warmup Iteration   8: 673501.859 ops/s
# Warmup Iteration   9: 676166.386 ops/s
# Warmup Iteration  10: 678050.841 ops/s
# Warmup Iteration  11: 674439.091 ops/s
# Warmup Iteration  12: 668051.833 ops/s
# Warmup Iteration  13: 673389.150 ops/s
# Warmup Iteration  14: 673798.165 ops/s
# Warmup Iteration  15: 674549.064 ops/s
# Warmup Iteration  16: 669115.378 ops/s
# Warmup Iteration  17: 695241.341 ops/s
# Warmup Iteration  18: 694813.357 ops/s
# Warmup Iteration  19: 694964.800 ops/s
# Warmup Iteration  20: 698006.652 ops/s
# Warmup Iteration  21: 694640.085 ops/s
# Warmup Iteration  22: 694913.570 ops/s
# Warmup Iteration  23: 696221.033 ops/s
# Warmup Iteration  24: 699706.861 ops/s
# Warmup Iteration  25: 702520.509 ops/s
# Warmup Iteration  26: 700482.071 ops/s
# Warmup Iteration  27: 701119.104 ops/s
# Warmup Iteration  28: 688086.259 ops/s
# Warmup Iteration  29: 696533.134 ops/s
# Warmup Iteration  30: 701922.803 ops/s
Iteration   1: 695274.091 ops/s
Iteration   2: 700165.737 ops/s
Iteration   3: 695721.034 ops/s
Iteration   4: 701644.877 ops/s
Iteration   5: 698817.070 ops/s
Iteration   6: 696589.093 ops/s
Iteration   7: 694075.647 ops/s
Iteration   8: 695404.790 ops/s
Iteration   9: 698288.596 ops/s
Iteration  10: 680227.067 ops/s
Iteration  11: 699860.026 ops/s
Iteration  12: 686364.193 ops/s
Iteration  13: 697025.375 ops/s
Iteration  14: 694151.219 ops/s
Iteration  15: 697192.696 ops/s
Iteration  16: 691732.757 ops/s
Iteration  17: 689413.047 ops/s
Iteration  18: 703677.794 ops/s
Iteration  19: 694947.164 ops/s
Iteration  20: 698583.844 ops/s
Iteration  21: 685894.723 ops/s
Iteration  22: 696415.649 ops/s
Iteration  23: 698692.829 ops/s
Iteration  24: 701680.251 ops/s
Iteration  25: 695953.285 ops/s
Iteration  26: 699251.715 ops/s
Iteration  27: 699468.142 ops/s
Iteration  28: 698495.078 ops/s
Iteration  29: 699681.392 ops/s
Iteration  30: 698021.236 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe":
  696090.347 ±(99.9%) 3389.021 ops/s [Average]
  (min, avg, max) = (680227.067, 696090.347, 703677.794), stdev = 5072.528
  CI (99.9%): [692701.326, 699479.369] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  696090.347 ± 3389.021  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1039786.355 ops/s
# Warmup Iteration   2: 1931756.849 ops/s
# Warmup Iteration   3: 2214492.433 ops/s
# Warmup Iteration   4: 2215946.708 ops/s
# Warmup Iteration   5: 2144244.380 ops/s
# Warmup Iteration   6: 2196447.620 ops/s
# Warmup Iteration   7: 2214593.288 ops/s
# Warmup Iteration   8: 2230225.871 ops/s
# Warmup Iteration   9: 2216301.556 ops/s
# Warmup Iteration  10: 2224511.513 ops/s
# Warmup Iteration  11: 2226040.469 ops/s
# Warmup Iteration  12: 2215475.059 ops/s
# Warmup Iteration  13: 2214071.923 ops/s
# Warmup Iteration  14: 2205550.073 ops/s
# Warmup Iteration  15: 2160380.402 ops/s
# Warmup Iteration  16: 2217729.924 ops/s
# Warmup Iteration  17: 2202932.490 ops/s
# Warmup Iteration  18: 2219735.566 ops/s
# Warmup Iteration  19: 2178174.658 ops/s
# Warmup Iteration  20: 2235636.854 ops/s
# Warmup Iteration  21: 2218083.598 ops/s
# Warmup Iteration  22: 2219216.057 ops/s
# Warmup Iteration  23: 2219365.518 ops/s
# Warmup Iteration  24: 2200685.931 ops/s
# Warmup Iteration  25: 2218490.951 ops/s
# Warmup Iteration  26: 2214829.690 ops/s
# Warmup Iteration  27: 2214811.669 ops/s
# Warmup Iteration  28: 2237427.025 ops/s
# Warmup Iteration  29: 2207468.121 ops/s
# Warmup Iteration  30: 2219333.555 ops/s
Iteration   1: 2209990.770 ops/s
Iteration   2: 2205634.260 ops/s
Iteration   3: 2229699.467 ops/s
Iteration   4: 2194992.570 ops/s
Iteration   5: 2240479.054 ops/s
Iteration   6: 2208023.083 ops/s
Iteration   7: 2221930.269 ops/s
Iteration   8: 2225834.201 ops/s
Iteration   9: 2217929.681 ops/s
Iteration  10: 2218101.813 ops/s
Iteration  11: 2231269.309 ops/s
Iteration  12: 2215789.610 ops/s
Iteration  13: 2227237.113 ops/s
Iteration  14: 2229672.557 ops/s
Iteration  15: 2222521.734 ops/s
Iteration  16: 2201712.134 ops/s
Iteration  17: 2195000.182 ops/s
Iteration  18: 2172841.419 ops/s
Iteration  19: 2215019.536 ops/s
Iteration  20: 2224116.531 ops/s
Iteration  21: 2206425.772 ops/s
Iteration  22: 2202619.665 ops/s
Iteration  23: 2235595.155 ops/s
Iteration  24: 2172176.645 ops/s
Iteration  25: 2217086.365 ops/s
Iteration  26: 2170502.674 ops/s
Iteration  27: 2226756.578 ops/s
Iteration  28: 2204752.623 ops/s
Iteration  29: 2228557.984 ops/s
Iteration  30: 2222656.058 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPath":
  2213164.160 ±(99.9%) 12148.471 ops/s [Average]
  (min, avg, max) = (2170502.674, 2213164.160, 2240479.054), stdev = 18183.261
  CI (99.9%): [2201015.689, 2225312.631] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPath  thrpt   30  2213164.160 ± 12148.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPathCreateQueue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPathCreateQueue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 975039.215 ops/s
# Warmup Iteration   2: 1739258.425 ops/s
# Warmup Iteration   3: 2026220.717 ops/s
# Warmup Iteration   4: 2045585.665 ops/s
# Warmup Iteration   5: 2051421.691 ops/s
# Warmup Iteration   6: 2029744.121 ops/s
# Warmup Iteration   7: 2050914.153 ops/s
# Warmup Iteration   8: 2052147.333 ops/s
# Warmup Iteration   9: 2037687.792 ops/s
# Warmup Iteration  10: 2037042.957 ops/s
# Warmup Iteration  11: 2000993.958 ops/s
# Warmup Iteration  12: 2040281.316 ops/s
# Warmup Iteration  13: 2055370.917 ops/s
# Warmup Iteration  14: 2035988.541 ops/s
# Warmup Iteration  15: 2036026.384 ops/s
# Warmup Iteration  16: 2058907.309 ops/s
# Warmup Iteration  17: 2038645.788 ops/s
# Warmup Iteration  18: 2046494.920 ops/s
# Warmup Iteration  19: 2051783.811 ops/s
# Warmup Iteration  20: 2051566.810 ops/s
# Warmup Iteration  21: 2031318.516 ops/s
# Warmup Iteration  22: 2031577.075 ops/s
# Warmup Iteration  23: 2039037.604 ops/s
# Warmup Iteration  24: 2049723.814 ops/s
# Warmup Iteration  25: 2041125.126 ops/s
# Warmup Iteration  26: 2057420.312 ops/s
# Warmup Iteration  27: 2027570.421 ops/s
# Warmup Iteration  28: 2046635.689 ops/s
# Warmup Iteration  29: 2045551.914 ops/s
# Warmup Iteration  30: 2039109.586 ops/s
Iteration   1: 2032978.579 ops/s
Iteration   2: 2045339.817 ops/s
Iteration   3: 2024878.290 ops/s
Iteration   4: 2036963.772 ops/s
Iteration   5: 2054105.813 ops/s
Iteration   6: 2057627.846 ops/s
Iteration   7: 2035336.925 ops/s
Iteration   8: 2013377.782 ops/s
Iteration   9: 2050200.911 ops/s
Iteration  10: 2018049.204 ops/s
Iteration  11: 2043380.324 ops/s
Iteration  12: 2023797.100 ops/s
Iteration  13: 2056686.843 ops/s
Iteration  14: 2038054.672 ops/s
Iteration  15: 2046568.786 ops/s
Iteration  16: 2043736.863 ops/s
Iteration  17: 2035322.894 ops/s
Iteration  18: 2041582.130 ops/s
Iteration  19: 2007360.466 ops/s
Iteration  20: 2042161.226 ops/s
Iteration  21: 2052267.946 ops/s
Iteration  22: 2046756.383 ops/s
Iteration  23: 2046779.607 ops/s
Iteration  24: 2042232.770 ops/s
Iteration  25: 1989854.649 ops/s
Iteration  26: 2024876.480 ops/s
Iteration  27: 2041834.181 ops/s
Iteration  28: 2037866.859 ops/s
Iteration  29: 2052481.599 ops/s
Iteration  30: 2029057.092 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPathCreateQueue":
  2037050.594 ±(99.9%) 10277.497 ops/s [Average]
  (min, avg, max) = (1989854.649, 2037050.594, 2057627.846), stdev = 15382.875
  CI (99.9%): [2026773.097, 2047328.091] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_onNextSlowPathCreateQueue  thrpt   30  2037050.594 ± 10277.497  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onErrorOtherOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onErrorOtherOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157702.589 ops/s
# Warmup Iteration   2: 221621.521 ops/s
# Warmup Iteration   3: 243883.978 ops/s
# Warmup Iteration   4: 244679.891 ops/s
# Warmup Iteration   5: 246087.563 ops/s
# Warmup Iteration   6: 246281.344 ops/s
# Warmup Iteration   7: 247445.288 ops/s
# Warmup Iteration   8: 245740.467 ops/s
# Warmup Iteration   9: 246046.677 ops/s
# Warmup Iteration  10: 243884.433 ops/s
# Warmup Iteration  11: 246043.179 ops/s
# Warmup Iteration  12: 244231.582 ops/s
# Warmup Iteration  13: 245903.854 ops/s
# Warmup Iteration  14: 245465.161 ops/s
# Warmup Iteration  15: 246166.734 ops/s
# Warmup Iteration  16: 243363.225 ops/s
# Warmup Iteration  17: 255807.248 ops/s
# Warmup Iteration  18: 256231.289 ops/s
# Warmup Iteration  19: 257447.631 ops/s
# Warmup Iteration  20: 256646.834 ops/s
# Warmup Iteration  21: 257130.459 ops/s
# Warmup Iteration  22: 255715.182 ops/s
# Warmup Iteration  23: 256806.036 ops/s
# Warmup Iteration  24: 253800.353 ops/s
# Warmup Iteration  25: 254397.910 ops/s
# Warmup Iteration  26: 255238.317 ops/s
# Warmup Iteration  27: 255168.340 ops/s
# Warmup Iteration  28: 255606.215 ops/s
# Warmup Iteration  29: 256321.117 ops/s
# Warmup Iteration  30: 257761.628 ops/s
Iteration   1: 251492.821 ops/s
Iteration   2: 255965.299 ops/s
Iteration   3: 253125.947 ops/s
Iteration   4: 256637.704 ops/s
Iteration   5: 258289.144 ops/s
Iteration   6: 255742.137 ops/s
Iteration   7: 254569.893 ops/s
Iteration   8: 256030.478 ops/s
Iteration   9: 253356.815 ops/s
Iteration  10: 257134.004 ops/s
Iteration  11: 254170.650 ops/s
Iteration  12: 256431.029 ops/s
Iteration  13: 259792.677 ops/s
Iteration  14: 249756.305 ops/s
Iteration  15: 254354.984 ops/s
Iteration  16: 253657.308 ops/s
Iteration  17: 256716.784 ops/s
Iteration  18: 252536.934 ops/s
Iteration  19: 256380.079 ops/s
Iteration  20: 256983.487 ops/s
Iteration  21: 256361.046 ops/s
Iteration  22: 256625.400 ops/s
Iteration  23: 257042.799 ops/s
Iteration  24: 256124.867 ops/s
Iteration  25: 254175.226 ops/s
Iteration  26: 256416.202 ops/s
Iteration  27: 254850.827 ops/s
Iteration  28: 255859.241 ops/s
Iteration  29: 252046.524 ops/s
Iteration  30: 255868.108 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onErrorOtherOverflow":
  255283.157 ±(99.9%) 1414.674 ops/s [Average]
  (min, avg, max) = (249756.305, 255283.157, 259792.677), stdev = 2117.418
  CI (99.9%): [253868.483, 256697.832] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_onErrorOtherOverflow  thrpt   30  255283.157 ± 1414.674  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43394236.789 ops/s
# Warmup Iteration   2: 72614552.213 ops/s
# Warmup Iteration   3: 68857494.370 ops/s
# Warmup Iteration   4: 68969175.529 ops/s
# Warmup Iteration   5: 69343379.760 ops/s
# Warmup Iteration   6: 69235845.910 ops/s
# Warmup Iteration   7: 68774623.282 ops/s
# Warmup Iteration   8: 69088168.860 ops/s
# Warmup Iteration   9: 69183547.460 ops/s
# Warmup Iteration  10: 68847653.421 ops/s
# Warmup Iteration  11: 68032036.587 ops/s
# Warmup Iteration  12: 68430383.346 ops/s
# Warmup Iteration  13: 68987358.674 ops/s
# Warmup Iteration  14: 68764879.669 ops/s
# Warmup Iteration  15: 68975722.452 ops/s
# Warmup Iteration  16: 69270772.120 ops/s
# Warmup Iteration  17: 68859494.255 ops/s
# Warmup Iteration  18: 69176434.497 ops/s
# Warmup Iteration  19: 68781110.453 ops/s
# Warmup Iteration  20: 68589726.481 ops/s
# Warmup Iteration  21: 68860930.726 ops/s
# Warmup Iteration  22: 68913122.786 ops/s
# Warmup Iteration  23: 68558789.179 ops/s
# Warmup Iteration  24: 67758395.964 ops/s
# Warmup Iteration  25: 68787992.673 ops/s
# Warmup Iteration  26: 68662633.001 ops/s
# Warmup Iteration  27: 68771267.793 ops/s
# Warmup Iteration  28: 69075248.788 ops/s
# Warmup Iteration  29: 68347645.381 ops/s
# Warmup Iteration  30: 68842883.898 ops/s
Iteration   1: 68434983.273 ops/s
Iteration   2: 68636527.398 ops/s
Iteration   3: 69007941.166 ops/s
Iteration   4: 69154637.753 ops/s
Iteration   5: 69184533.127 ops/s
Iteration   6: 68734817.096 ops/s
Iteration   7: 68551933.769 ops/s
Iteration   8: 68753578.982 ops/s
Iteration   9: 69311304.268 ops/s
Iteration  10: 68890458.897 ops/s
Iteration  11: 69005981.759 ops/s
Iteration  12: 69070258.308 ops/s
Iteration  13: 68819763.082 ops/s
Iteration  14: 69152199.248 ops/s
Iteration  15: 68967471.452 ops/s
Iteration  16: 68832263.984 ops/s
Iteration  17: 69356935.026 ops/s
Iteration  18: 68744916.154 ops/s
Iteration  19: 67710668.259 ops/s
Iteration  20: 68673564.763 ops/s
Iteration  21: 69086541.824 ops/s
Iteration  22: 68333525.031 ops/s
Iteration  23: 68824645.951 ops/s
Iteration  24: 68151270.582 ops/s
Iteration  25: 69312221.384 ops/s
Iteration  26: 67956714.399 ops/s
Iteration  27: 69160142.353 ops/s
Iteration  28: 69194402.618 ops/s
Iteration  29: 68968662.356 ops/s
Iteration  30: 68279552.952 ops/s


Result "io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withCompletable":
  68808747.240 ±(99.9%) 273961.584 ops/s [Average]
  (min, avg, max) = (67710668.259, 68808747.240, 69356935.026), stdev = 410052.833
  CI (99.9%): [68534785.656, 69082708.825] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score        Error  Units
SubscribeWithTest._Benchmark.benchmark_withCompletable  thrpt   30  68808747.240 ± 273961.584  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_noArgComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_noArgComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22854615.030 ops/s
# Warmup Iteration   2: 27007740.452 ops/s
# Warmup Iteration   3: 30485029.318 ops/s
# Warmup Iteration   4: 30465331.850 ops/s
# Warmup Iteration   5: 29880533.798 ops/s
# Warmup Iteration   6: 30450193.773 ops/s
# Warmup Iteration   7: 30194468.628 ops/s
# Warmup Iteration   8: 30221488.553 ops/s
# Warmup Iteration   9: 30277730.574 ops/s
# Warmup Iteration  10: 30302983.923 ops/s
# Warmup Iteration  11: 29883276.553 ops/s
# Warmup Iteration  12: 29514480.075 ops/s
# Warmup Iteration  13: 30366003.580 ops/s
# Warmup Iteration  14: 30387006.222 ops/s
# Warmup Iteration  15: 29933304.659 ops/s
# Warmup Iteration  16: 29736289.327 ops/s
# Warmup Iteration  17: 29852417.222 ops/s
# Warmup Iteration  18: 30468784.085 ops/s
# Warmup Iteration  19: 30297857.246 ops/s
# Warmup Iteration  20: 30239515.416 ops/s
# Warmup Iteration  21: 30127190.049 ops/s
# Warmup Iteration  22: 30462005.749 ops/s
# Warmup Iteration  23: 30128086.343 ops/s
# Warmup Iteration  24: 30134954.531 ops/s
# Warmup Iteration  25: 30453913.810 ops/s
# Warmup Iteration  26: 30008124.863 ops/s
# Warmup Iteration  27: 30107909.606 ops/s
# Warmup Iteration  28: 30172383.120 ops/s
# Warmup Iteration  29: 30318222.233 ops/s
# Warmup Iteration  30: 29964628.805 ops/s
Iteration   1: 29852174.683 ops/s
Iteration   2: 29651687.272 ops/s
Iteration   3: 30104310.287 ops/s
Iteration   4: 30317842.024 ops/s
Iteration   5: 30175107.673 ops/s
Iteration   6: 29863924.625 ops/s
Iteration   7: 30431209.238 ops/s
Iteration   8: 30199654.010 ops/s
Iteration   9: 30374919.513 ops/s
Iteration  10: 29909858.709 ops/s
Iteration  11: 30324273.130 ops/s
Iteration  12: 30284685.529 ops/s
Iteration  13: 30234958.301 ops/s
Iteration  14: 29906820.202 ops/s
Iteration  15: 30227644.194 ops/s
Iteration  16: 30399985.368 ops/s
Iteration  17: 29512658.193 ops/s
Iteration  18: 29766941.458 ops/s
Iteration  19: 30504898.057 ops/s
Iteration  20: 29811212.181 ops/s
Iteration  21: 30133155.860 ops/s
Iteration  22: 30358202.252 ops/s
Iteration  23: 30381841.851 ops/s
Iteration  24: 30195663.928 ops/s
Iteration  25: 30065848.022 ops/s
Iteration  26: 30002733.719 ops/s
Iteration  27: 30146963.723 ops/s
Iteration  28: 30057258.368 ops/s
Iteration  29: 30386601.795 ops/s
Iteration  30: 30030664.882 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_noArgComplete":
  30120456.635 ±(99.9%) 166334.864 ops/s [Average]
  (min, avg, max) = (29512658.193, 30120456.635, 30504898.057), stdev = 248962.214
  CI (99.9%): [29954121.770, 30286791.499] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
CompletableBlockingSubscribeTest._Benchmark.benchmark_noArgComplete  thrpt   30  30120456.635 ± 166334.864  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14593797.138 ops/s
# Warmup Iteration   2: 20633438.078 ops/s
# Warmup Iteration   3: 22844026.672 ops/s
# Warmup Iteration   4: 22681160.690 ops/s
# Warmup Iteration   5: 22370387.516 ops/s
# Warmup Iteration   6: 22722338.603 ops/s
# Warmup Iteration   7: 22722169.047 ops/s
# Warmup Iteration   8: 22791041.759 ops/s
# Warmup Iteration   9: 22887285.407 ops/s
# Warmup Iteration  10: 22785480.249 ops/s
# Warmup Iteration  11: 22794807.316 ops/s
# Warmup Iteration  12: 22735105.064 ops/s
# Warmup Iteration  13: 22869901.824 ops/s
# Warmup Iteration  14: 22683655.364 ops/s
# Warmup Iteration  15: 22835121.657 ops/s
# Warmup Iteration  16: 22777112.878 ops/s
# Warmup Iteration  17: 22635203.972 ops/s
# Warmup Iteration  18: 22643919.934 ops/s
# Warmup Iteration  19: 22810430.696 ops/s
# Warmup Iteration  20: 22321113.446 ops/s
# Warmup Iteration  21: 22675503.821 ops/s
# Warmup Iteration  22: 22833860.446 ops/s
# Warmup Iteration  23: 22881287.311 ops/s
# Warmup Iteration  24: 22961046.114 ops/s
# Warmup Iteration  25: 22897300.206 ops/s
# Warmup Iteration  26: 22761238.299 ops/s
# Warmup Iteration  27: 22756861.645 ops/s
# Warmup Iteration  28: 22667919.921 ops/s
# Warmup Iteration  29: 22794995.771 ops/s
# Warmup Iteration  30: 22477548.590 ops/s
Iteration   1: 22666181.627 ops/s
Iteration   2: 22799292.132 ops/s
Iteration   3: 22669057.273 ops/s
Iteration   4: 22801492.532 ops/s
Iteration   5: 22857010.761 ops/s
Iteration   6: 22761690.351 ops/s
Iteration   7: 22486912.420 ops/s
Iteration   8: 22760302.578 ops/s
Iteration   9: 22641266.310 ops/s
Iteration  10: 22829070.835 ops/s
Iteration  11: 22782752.745 ops/s
Iteration  12: 22824205.121 ops/s
Iteration  13: 22894900.117 ops/s
Iteration  14: 22581400.258 ops/s
Iteration  15: 22768985.925 ops/s
Iteration  16: 22754006.695 ops/s
Iteration  17: 22735760.159 ops/s
Iteration  18: 22651602.604 ops/s
Iteration  19: 22916338.744 ops/s
Iteration  20: 22659738.393 ops/s
Iteration  21: 22711748.687 ops/s
Iteration  22: 22522305.960 ops/s
Iteration  23: 22791613.486 ops/s
Iteration  24: 22645636.970 ops/s
Iteration  25: 22648225.174 ops/s
Iteration  26: 22800994.006 ops/s
Iteration  27: 22734094.429 ops/s
Iteration  28: 22778669.646 ops/s
Iteration  29: 22591357.041 ops/s
Iteration  30: 22924622.559 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withEmpty":
  22733041.185 ±(99.9%) 73053.173 ops/s [Average]
  (min, avg, max) = (22486912.420, 22733041.185, 22924622.559), stdev = 109342.558
  CI (99.9%): [22659988.012, 22806094.358] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_withEmpty  thrpt   30  22733041.185 ± 73053.173  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14233010.127 ops/s
# Warmup Iteration   2: 19659702.567 ops/s
# Warmup Iteration   3: 22378656.731 ops/s
# Warmup Iteration   4: 22226232.237 ops/s
# Warmup Iteration   5: 22307337.760 ops/s
# Warmup Iteration   6: 22095647.070 ops/s
# Warmup Iteration   7: 22453050.563 ops/s
# Warmup Iteration   8: 22160271.228 ops/s
# Warmup Iteration   9: 21903458.483 ops/s
# Warmup Iteration  10: 22080654.616 ops/s
# Warmup Iteration  11: 22020231.161 ops/s
# Warmup Iteration  12: 22459414.056 ops/s
# Warmup Iteration  13: 22302923.746 ops/s
# Warmup Iteration  14: 22213516.645 ops/s
# Warmup Iteration  15: 22120493.577 ops/s
# Warmup Iteration  16: 22339258.588 ops/s
# Warmup Iteration  17: 22237879.303 ops/s
# Warmup Iteration  18: 22277991.652 ops/s
# Warmup Iteration  19: 21757931.617 ops/s
# Warmup Iteration  20: 22241443.326 ops/s
# Warmup Iteration  21: 22123425.736 ops/s
# Warmup Iteration  22: 22270658.668 ops/s
# Warmup Iteration  23: 22232273.997 ops/s
# Warmup Iteration  24: 22303641.302 ops/s
# Warmup Iteration  25: 22130221.071 ops/s
# Warmup Iteration  26: 22045662.354 ops/s
# Warmup Iteration  27: 22213592.550 ops/s
# Warmup Iteration  28: 22406009.528 ops/s
# Warmup Iteration  29: 22440567.489 ops/s
# Warmup Iteration  30: 22347226.690 ops/s
Iteration   1: 22250421.487 ops/s
Iteration   2: 22212851.950 ops/s
Iteration   3: 22409228.104 ops/s
Iteration   4: 22169732.048 ops/s
Iteration   5: 22266215.935 ops/s
Iteration   6: 22214515.338 ops/s
Iteration   7: 22326298.968 ops/s
Iteration   8: 22019093.142 ops/s
Iteration   9: 22312197.261 ops/s
Iteration  10: 22042333.366 ops/s
Iteration  11: 22241080.481 ops/s
Iteration  12: 22179513.234 ops/s
Iteration  13: 22313365.499 ops/s
Iteration  14: 22306321.352 ops/s
Iteration  15: 22298094.127 ops/s
Iteration  16: 22368142.150 ops/s
Iteration  17: 22270450.420 ops/s
Iteration  18: 22243454.434 ops/s
Iteration  19: 22193668.869 ops/s
Iteration  20: 22420645.572 ops/s
Iteration  21: 22094107.214 ops/s
Iteration  22: 22346232.110 ops/s
Iteration  23: 22350873.233 ops/s
Iteration  24: 22034979.017 ops/s
Iteration  25: 21979473.082 ops/s
Iteration  26: 22336067.947 ops/s
Iteration  27: 22298788.699 ops/s
Iteration  28: 22166319.572 ops/s
Iteration  29: 22448987.075 ops/s
Iteration  30: 22326778.881 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withEmpty":
  22248007.686 ±(99.9%) 81109.954 ops/s [Average]
  (min, avg, max) = (21979473.082, 22248007.686, 22448987.075), stdev = 121401.570
  CI (99.9%): [22166897.732, 22329117.640] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_withEmpty  thrpt   30  22248007.686 ± 81109.954  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withNonEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withNonEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10260094.388 ops/s
# Warmup Iteration   2: 17062662.691 ops/s
# Warmup Iteration   3: 17668299.334 ops/s
# Warmup Iteration   4: 17651620.697 ops/s
# Warmup Iteration   5: 17428135.726 ops/s
# Warmup Iteration   6: 17604146.823 ops/s
# Warmup Iteration   7: 17735371.727 ops/s
# Warmup Iteration   8: 17711062.225 ops/s
# Warmup Iteration   9: 17599550.212 ops/s
# Warmup Iteration  10: 17631602.106 ops/s
# Warmup Iteration  11: 17860357.792 ops/s
# Warmup Iteration  12: 17703396.983 ops/s
# Warmup Iteration  13: 17656066.042 ops/s
# Warmup Iteration  14: 17709004.520 ops/s
# Warmup Iteration  15: 17741448.710 ops/s
# Warmup Iteration  16: 17606593.485 ops/s
# Warmup Iteration  17: 17686492.672 ops/s
# Warmup Iteration  18: 17580429.547 ops/s
# Warmup Iteration  19: 17673583.699 ops/s
# Warmup Iteration  20: 17642626.528 ops/s
# Warmup Iteration  21: 17752023.031 ops/s
# Warmup Iteration  22: 17563036.346 ops/s
# Warmup Iteration  23: 17679506.024 ops/s
# Warmup Iteration  24: 17759947.608 ops/s
# Warmup Iteration  25: 17685440.143 ops/s
# Warmup Iteration  26: 17706375.871 ops/s
# Warmup Iteration  27: 17700205.686 ops/s
# Warmup Iteration  28: 17744681.619 ops/s
# Warmup Iteration  29: 17607285.688 ops/s
# Warmup Iteration  30: 17727669.831 ops/s
Iteration   1: 17674275.009 ops/s
Iteration   2: 17683736.840 ops/s
Iteration   3: 17709483.716 ops/s
Iteration   4: 17626415.570 ops/s
Iteration   5: 17293360.596 ops/s
Iteration   6: 17824976.538 ops/s
Iteration   7: 17823593.810 ops/s
Iteration   8: 17790859.191 ops/s
Iteration   9: 17780941.755 ops/s
Iteration  10: 17741533.491 ops/s
Iteration  11: 17506506.153 ops/s
Iteration  12: 17695884.436 ops/s
Iteration  13: 17452814.529 ops/s
Iteration  14: 17594119.007 ops/s
Iteration  15: 17665033.303 ops/s
Iteration  16: 17636468.603 ops/s
Iteration  17: 17186148.440 ops/s
Iteration  18: 17595423.482 ops/s
Iteration  19: 17439277.894 ops/s
Iteration  20: 17731522.174 ops/s
Iteration  21: 17724062.917 ops/s
Iteration  22: 17498229.025 ops/s
Iteration  23: 17618176.773 ops/s
Iteration  24: 17594664.112 ops/s
Iteration  25: 17724894.781 ops/s
Iteration  26: 17773691.959 ops/s
Iteration  27: 17619536.750 ops/s
Iteration  28: 17750911.529 ops/s
Iteration  29: 17687091.201 ops/s
Iteration  30: 17664434.168 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withNonEmpty":
  17636935.592 ±(99.9%) 98825.379 ops/s [Average]
  (min, avg, max) = (17186148.440, 17636935.592, 17824976.538), stdev = 147917.186
  CI (99.9%): [17538110.213, 17735760.970] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_withNonEmpty  thrpt   30  17636935.592 ± 98825.379  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_complete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_complete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12067595.239 ops/s
# Warmup Iteration   2: 16208967.122 ops/s
# Warmup Iteration   3: 17955139.236 ops/s
# Warmup Iteration   4: 18315886.688 ops/s
# Warmup Iteration   5: 18325164.035 ops/s
# Warmup Iteration   6: 18247683.865 ops/s
# Warmup Iteration   7: 18117847.987 ops/s
# Warmup Iteration   8: 18231324.794 ops/s
# Warmup Iteration   9: 18136255.730 ops/s
# Warmup Iteration  10: 18259445.134 ops/s
# Warmup Iteration  11: 18322364.651 ops/s
# Warmup Iteration  12: 17733784.114 ops/s
# Warmup Iteration  13: 18424739.759 ops/s
# Warmup Iteration  14: 18308879.023 ops/s
# Warmup Iteration  15: 18262583.122 ops/s
# Warmup Iteration  16: 18247442.708 ops/s
# Warmup Iteration  17: 18244807.084 ops/s
# Warmup Iteration  18: 18217750.949 ops/s
# Warmup Iteration  19: 18412154.407 ops/s
# Warmup Iteration  20: 18376204.734 ops/s
# Warmup Iteration  21: 18090685.286 ops/s
# Warmup Iteration  22: 17843705.461 ops/s
# Warmup Iteration  23: 18247912.340 ops/s
# Warmup Iteration  24: 18105637.651 ops/s
# Warmup Iteration  25: 18072047.196 ops/s
# Warmup Iteration  26: 18311072.546 ops/s
# Warmup Iteration  27: 18080960.070 ops/s
# Warmup Iteration  28: 18197632.521 ops/s
# Warmup Iteration  29: 18167883.021 ops/s
# Warmup Iteration  30: 18229310.055 ops/s
Iteration   1: 17857734.821 ops/s
Iteration   2: 18066481.683 ops/s
Iteration   3: 18254681.810 ops/s
Iteration   4: 18197581.577 ops/s
Iteration   5: 18177338.715 ops/s
Iteration   6: 18284941.918 ops/s
Iteration   7: 18241708.329 ops/s
Iteration   8: 18140618.566 ops/s
Iteration   9: 18296212.780 ops/s
Iteration  10: 18357490.232 ops/s
Iteration  11: 17873717.424 ops/s
Iteration  12: 18206098.178 ops/s
Iteration  13: 18290134.116 ops/s
Iteration  14: 18127437.317 ops/s
Iteration  15: 18317457.588 ops/s
Iteration  16: 18301966.171 ops/s
Iteration  17: 17948143.441 ops/s
Iteration  18: 17877618.315 ops/s
Iteration  19: 18218868.672 ops/s
Iteration  20: 18342170.357 ops/s
Iteration  21: 18265345.987 ops/s
Iteration  22: 18242571.968 ops/s
Iteration  23: 18236911.191 ops/s
Iteration  24: 18245548.450 ops/s
Iteration  25: 18230681.310 ops/s
Iteration  26: 18163730.360 ops/s
Iteration  27: 17848175.430 ops/s
Iteration  28: 18211614.352 ops/s
Iteration  29: 18222060.069 ops/s
Iteration  30: 18253530.068 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_complete":
  18176619.040 ±(99.9%) 99227.340 ops/s [Average]
  (min, avg, max) = (17848175.430, 18176619.040, 18357490.232), stdev = 148518.823
  CI (99.9%): [18077391.700, 18275846.380] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
CompletableToCompletionStageTest._Benchmark.benchmark_complete  thrpt   30  18176619.040 ± 99227.340  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatLongPredicateInvalid$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatLongPredicateInvalid

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 810788.382 ops/s
# Warmup Iteration   2: 893573.599 ops/s
# Warmup Iteration   3: 958914.511 ops/s
# Warmup Iteration   4: 881225.864 ops/s
# Warmup Iteration   5: 1004616.300 ops/s
# Warmup Iteration   6: 1002326.641 ops/s
# Warmup Iteration   7: 1007069.777 ops/s
# Warmup Iteration   8: 1000953.295 ops/s
# Warmup Iteration   9: 1008319.143 ops/s
# Warmup Iteration  10: 1007660.825 ops/s
# Warmup Iteration  11: 1005368.221 ops/s
# Warmup Iteration  12: 986535.225 ops/s
# Warmup Iteration  13: 996528.202 ops/s
# Warmup Iteration  14: 1005502.476 ops/s
# Warmup Iteration  15: 993674.179 ops/s
# Warmup Iteration  16: 998101.614 ops/s
# Warmup Iteration  17: 1046414.427 ops/s
# Warmup Iteration  18: 1062749.378 ops/s
# Warmup Iteration  19: 1035167.858 ops/s
# Warmup Iteration  20: 1047615.198 ops/s
# Warmup Iteration  21: 1054142.425 ops/s
# Warmup Iteration  22: 1060522.314 ops/s
# Warmup Iteration  23: 1053631.098 ops/s
# Warmup Iteration  24: 1045847.702 ops/s
# Warmup Iteration  25: 1030258.688 ops/s
# Warmup Iteration  26: 1057045.140 ops/s
# Warmup Iteration  27: 1056022.756 ops/s
# Warmup Iteration  28: 1037109.506 ops/s
# Warmup Iteration  29: 1034406.194 ops/s
# Warmup Iteration  30: 1058675.576 ops/s
Iteration   1: 1060650.795 ops/s
Iteration   2: 1053829.708 ops/s
Iteration   3: 1053339.453 ops/s
Iteration   4: 1045129.091 ops/s
Iteration   5: 1042229.751 ops/s
Iteration   6: 1025944.553 ops/s
Iteration   7: 1042913.841 ops/s
Iteration   8: 1051110.066 ops/s
Iteration   9: 1055164.630 ops/s
Iteration  10: 1058099.711 ops/s
Iteration  11: 1053614.294 ops/s
Iteration  12: 1051103.810 ops/s
Iteration  13: 1018049.743 ops/s
Iteration  14: 1062530.670 ops/s
Iteration  15: 1054258.114 ops/s
Iteration  16: 1056779.198 ops/s
Iteration  17: 1052238.293 ops/s
Iteration  18: 1056681.217 ops/s
Iteration  19: 1058748.776 ops/s
Iteration  20: 1056466.518 ops/s
Iteration  21: 1056222.051 ops/s
Iteration  22: 1055131.121 ops/s
Iteration  23: 1062445.567 ops/s
Iteration  24: 1050063.748 ops/s
Iteration  25: 1056629.262 ops/s
Iteration  26: 1051842.776 ops/s
Iteration  27: 1071464.472 ops/s
Iteration  28: 1056211.914 ops/s
Iteration  29: 1051369.945 ops/s
Iteration  30: 1059510.044 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatLongPredicateInvalid":
  1052659.104 ±(99.9%) 6814.286 ops/s [Average]
  (min, avg, max) = (1018049.743, 1052659.104, 1071464.472), stdev = 10199.303
  CI (99.9%): [1045844.818, 1059473.390] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
FlowableRepeatTest._Benchmark.benchmark_repeatLongPredicateInvalid  thrpt   30  1052659.104 ± 6814.286  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_invalidPrefetch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_invalidPrefetch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 792126.338 ops/s
# Warmup Iteration   2: 929811.520 ops/s
# Warmup Iteration   3: 876568.269 ops/s
# Warmup Iteration   4: 986285.514 ops/s
# Warmup Iteration   5: 988877.915 ops/s
# Warmup Iteration   6: 979583.138 ops/s
# Warmup Iteration   7: 978856.713 ops/s
# Warmup Iteration   8: 991964.115 ops/s
# Warmup Iteration   9: 978958.137 ops/s
# Warmup Iteration  10: 975631.038 ops/s
# Warmup Iteration  11: 978175.209 ops/s
# Warmup Iteration  12: 986174.297 ops/s
# Warmup Iteration  13: 962140.966 ops/s
# Warmup Iteration  14: 978394.530 ops/s
# Warmup Iteration  15: 985820.445 ops/s
# Warmup Iteration  16: 975315.909 ops/s
# Warmup Iteration  17: 1027559.625 ops/s
# Warmup Iteration  18: 1027939.599 ops/s
# Warmup Iteration  19: 1033931.737 ops/s
# Warmup Iteration  20: 1035608.169 ops/s
# Warmup Iteration  21: 1036657.230 ops/s
# Warmup Iteration  22: 1021480.953 ops/s
# Warmup Iteration  23: 1023338.171 ops/s
# Warmup Iteration  24: 1037615.974 ops/s
# Warmup Iteration  25: 1010170.088 ops/s
# Warmup Iteration  26: 1043196.820 ops/s
# Warmup Iteration  27: 1034790.579 ops/s
# Warmup Iteration  28: 1034919.754 ops/s
# Warmup Iteration  29: 1035773.599 ops/s
# Warmup Iteration  30: 1026161.870 ops/s
Iteration   1: 1027877.987 ops/s
Iteration   2: 1034821.054 ops/s
Iteration   3: 1041998.122 ops/s
Iteration   4: 1036868.833 ops/s
Iteration   5: 1033623.962 ops/s
Iteration   6: 1032325.575 ops/s
Iteration   7: 1029214.876 ops/s
Iteration   8: 1037876.814 ops/s
Iteration   9: 1029407.746 ops/s
Iteration  10: 1028754.519 ops/s
Iteration  11: 1028210.894 ops/s
Iteration  12: 1040597.897 ops/s
Iteration  13: 1029936.737 ops/s
Iteration  14: 1032459.927 ops/s
Iteration  15: 1023757.892 ops/s
Iteration  16: 1036820.516 ops/s
Iteration  17: 1012497.843 ops/s
Iteration  18: 1038441.696 ops/s
Iteration  19: 1035288.368 ops/s
Iteration  20: 1033654.053 ops/s
Iteration  21: 1022961.281 ops/s
Iteration  22: 1041576.799 ops/s
Iteration  23: 1039822.492 ops/s
Iteration  24: 1048064.969 ops/s
Iteration  25: 1046457.825 ops/s
Iteration  26: 1023627.793 ops/s
Iteration  27: 1029567.485 ops/s
Iteration  28: 1042889.363 ops/s
Iteration  29: 1019187.529 ops/s
Iteration  30: 1034822.952 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_invalidPrefetch":
  1033113.793 ±(99.9%) 5352.708 ops/s [Average]
  (min, avg, max) = (1012497.843, 1033113.793, 1048064.969), stdev = 8011.681
  CI (99.9%): [1027761.086, 1038466.501] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
CompletableConcatTest._Benchmark.benchmark_invalidPrefetch  thrpt   30  1033113.793 ± 5352.708  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingleTest._Benchmark.benchmark_source$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingleTest._Benchmark.benchmark_source

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 37937384.165 ops/s
# Warmup Iteration   2: 58802198.345 ops/s
# Warmup Iteration   3: 56422989.627 ops/s
# Warmup Iteration   4: 56782758.008 ops/s
# Warmup Iteration   5: 56252566.351 ops/s
# Warmup Iteration   6: 56593626.381 ops/s
# Warmup Iteration   7: 55975573.513 ops/s
# Warmup Iteration   8: 56514357.151 ops/s
# Warmup Iteration   9: 56482492.997 ops/s
# Warmup Iteration  10: 56578880.712 ops/s
# Warmup Iteration  11: 56535027.094 ops/s
# Warmup Iteration  12: 56498424.430 ops/s
# Warmup Iteration  13: 56681094.904 ops/s
# Warmup Iteration  14: 55366397.639 ops/s
# Warmup Iteration  15: 55939928.714 ops/s
# Warmup Iteration  16: 56413360.934 ops/s
# Warmup Iteration  17: 55829879.028 ops/s
# Warmup Iteration  18: 56618845.660 ops/s
# Warmup Iteration  19: 56500429.147 ops/s
# Warmup Iteration  20: 56559751.159 ops/s
# Warmup Iteration  21: 55732927.958 ops/s
# Warmup Iteration  22: 56403573.166 ops/s
# Warmup Iteration  23: 56729290.808 ops/s
# Warmup Iteration  24: 56571142.516 ops/s
# Warmup Iteration  25: 56091663.584 ops/s
# Warmup Iteration  26: 56398697.902 ops/s
# Warmup Iteration  27: 56121481.408 ops/s
# Warmup Iteration  28: 56538863.352 ops/s
# Warmup Iteration  29: 56491743.232 ops/s
# Warmup Iteration  30: 56537004.439 ops/s
Iteration   1: 56546901.538 ops/s
Iteration   2: 56460331.397 ops/s
Iteration   3: 56393814.418 ops/s
Iteration   4: 56394266.488 ops/s
Iteration   5: 56085863.053 ops/s
Iteration   6: 56697653.972 ops/s
Iteration   7: 56674157.378 ops/s
Iteration   8: 56671129.706 ops/s
Iteration   9: 55855341.321 ops/s
Iteration  10: 56212602.223 ops/s
Iteration  11: 56608972.676 ops/s
Iteration  12: 56537882.512 ops/s
Iteration  13: 56544328.339 ops/s
Iteration  14: 56656056.110 ops/s
Iteration  15: 55293858.443 ops/s
Iteration  16: 55670690.103 ops/s
Iteration  17: 56290170.536 ops/s
Iteration  18: 56732175.551 ops/s
Iteration  19: 56380257.064 ops/s
Iteration  20: 56803887.119 ops/s
Iteration  21: 56311194.288 ops/s
Iteration  22: 56132367.340 ops/s
Iteration  23: 56238315.576 ops/s
Iteration  24: 56167730.828 ops/s
Iteration  25: 56736387.147 ops/s
Iteration  26: 56866313.190 ops/s
Iteration  27: 56395733.291 ops/s
Iteration  28: 56422696.727 ops/s
Iteration  29: 56596266.423 ops/s
Iteration  30: 56154330.906 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptySingleTest._Benchmark.benchmark_source":
  56384389.189 ±(99.9%) 230966.985 ops/s [Average]
  (min, avg, max) = (55293858.443, 56384389.189, 56866313.190), stdev = 345700.536
  CI (99.9%): [56153422.204, 56615356.174] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
MaybeIsEmptySingleTest._Benchmark.benchmark_source  thrpt   30  56384389.189 ± 230966.985  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservableTest._Benchmark.benchmark_source$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservableTest._Benchmark.benchmark_source

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18615503.306 ops/s
# Warmup Iteration   2: 23130779.278 ops/s
# Warmup Iteration   3: 26054945.857 ops/s
# Warmup Iteration   4: 26232863.541 ops/s
# Warmup Iteration   5: 25763650.817 ops/s
# Warmup Iteration   6: 26184932.181 ops/s
# Warmup Iteration   7: 25883877.124 ops/s
# Warmup Iteration   8: 26152809.653 ops/s
# Warmup Iteration   9: 26208772.233 ops/s
# Warmup Iteration  10: 26059707.313 ops/s
# Warmup Iteration  11: 26162136.284 ops/s
# Warmup Iteration  12: 26253876.042 ops/s
# Warmup Iteration  13: 26284314.656 ops/s
# Warmup Iteration  14: 26163459.127 ops/s
# Warmup Iteration  15: 26429229.513 ops/s
# Warmup Iteration  16: 26096335.515 ops/s
# Warmup Iteration  17: 26163365.950 ops/s
# Warmup Iteration  18: 26190931.539 ops/s
# Warmup Iteration  19: 25447118.224 ops/s
# Warmup Iteration  20: 26215080.218 ops/s
# Warmup Iteration  21: 26323756.427 ops/s
# Warmup Iteration  22: 26358103.157 ops/s
# Warmup Iteration  23: 26140584.856 ops/s
# Warmup Iteration  24: 26284253.769 ops/s
# Warmup Iteration  25: 26261445.248 ops/s
# Warmup Iteration  26: 26442643.179 ops/s
# Warmup Iteration  27: 26380213.604 ops/s
# Warmup Iteration  28: 26328872.510 ops/s
# Warmup Iteration  29: 26403240.338 ops/s
# Warmup Iteration  30: 26268876.857 ops/s
Iteration   1: 26306161.093 ops/s
Iteration   2: 26228332.299 ops/s
Iteration   3: 26211046.712 ops/s
Iteration   4: 26247051.996 ops/s
Iteration   5: 26309875.889 ops/s
Iteration   6: 26273280.228 ops/s
Iteration   7: 26451926.084 ops/s
Iteration   8: 26377610.199 ops/s
Iteration   9: 26211009.069 ops/s
Iteration  10: 26457543.062 ops/s
Iteration  11: 26213446.614 ops/s
Iteration  12: 26366669.705 ops/s
Iteration  13: 26214715.103 ops/s
Iteration  14: 26454680.029 ops/s
Iteration  15: 26077055.154 ops/s
Iteration  16: 26261850.330 ops/s
Iteration  17: 26343693.025 ops/s
Iteration  18: 26398987.741 ops/s
Iteration  19: 26159475.251 ops/s
Iteration  20: 26346311.703 ops/s
Iteration  21: 26039495.136 ops/s
Iteration  22: 26379476.900 ops/s
Iteration  23: 26328016.737 ops/s
Iteration  24: 26303342.651 ops/s
Iteration  25: 26192831.695 ops/s
Iteration  26: 25877353.380 ops/s
Iteration  27: 26097664.573 ops/s
Iteration  28: 26048726.300 ops/s
Iteration  29: 26268835.654 ops/s
Iteration  30: 26314868.739 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservableTest._Benchmark.benchmark_source":
  26258711.102 ±(99.9%) 89950.363 ops/s [Average]
  (min, avg, max) = (25877353.380, 26258711.102, 26457543.062), stdev = 134633.479
  CI (99.9%): [26168760.739, 26348661.465] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
MaybeToObservableTest._Benchmark.benchmark_source  thrpt   30  26258711.102 ± 89950.363  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithCovariantObjects$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithCovariantObjects

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27459591.737 ops/s
# Warmup Iteration   2: 44789382.360 ops/s
# Warmup Iteration   3: 44518218.303 ops/s
# Warmup Iteration   4: 44945986.667 ops/s
# Warmup Iteration   5: 44235387.273 ops/s
# Warmup Iteration   6: 44408307.210 ops/s
# Warmup Iteration   7: 44552804.310 ops/s
# Warmup Iteration   8: 43807154.973 ops/s
# Warmup Iteration   9: 44767573.776 ops/s
# Warmup Iteration  10: 44371224.522 ops/s
# Warmup Iteration  11: 44903004.791 ops/s
# Warmup Iteration  12: 44305232.242 ops/s
# Warmup Iteration  13: 44587988.388 ops/s
# Warmup Iteration  14: 44597799.187 ops/s
# Warmup Iteration  15: 44859345.406 ops/s
# Warmup Iteration  16: 43283702.325 ops/s
# Warmup Iteration  17: 44606019.794 ops/s
# Warmup Iteration  18: 44708620.705 ops/s
# Warmup Iteration  19: 44541001.923 ops/s
# Warmup Iteration  20: 44410743.677 ops/s
# Warmup Iteration  21: 44465048.779 ops/s
# Warmup Iteration  22: 43977747.725 ops/s
# Warmup Iteration  23: 44601693.022 ops/s
# Warmup Iteration  24: 44699127.029 ops/s
# Warmup Iteration  25: 44964032.825 ops/s
# Warmup Iteration  26: 44705265.810 ops/s
# Warmup Iteration  27: 44687183.761 ops/s
# Warmup Iteration  28: 44852545.965 ops/s
# Warmup Iteration  29: 44488369.365 ops/s
# Warmup Iteration  30: 44823219.903 ops/s
Iteration   1: 44686562.745 ops/s
Iteration   2: 44798849.315 ops/s
Iteration   3: 44734688.663 ops/s
Iteration   4: 43473027.371 ops/s
Iteration   5: 44689619.757 ops/s
Iteration   6: 44626527.438 ops/s
Iteration   7: 44885987.291 ops/s
Iteration   8: 44718834.775 ops/s
Iteration   9: 44881399.322 ops/s
Iteration  10: 44666368.805 ops/s
Iteration  11: 44125859.483 ops/s
Iteration  12: 44032525.444 ops/s
Iteration  13: 44314019.539 ops/s
Iteration  14: 44773894.155 ops/s
Iteration  15: 43929688.016 ops/s
Iteration  16: 44681125.500 ops/s
Iteration  17: 44427618.212 ops/s
Iteration  18: 44586941.402 ops/s
Iteration  19: 44364516.055 ops/s
Iteration  20: 44644670.849 ops/s
Iteration  21: 44620674.178 ops/s
Iteration  22: 44731666.698 ops/s
Iteration  23: 44703068.614 ops/s
Iteration  24: 44401068.019 ops/s
Iteration  25: 44645481.208 ops/s
Iteration  26: 44542449.035 ops/s
Iteration  27: 44856472.465 ops/s
Iteration  28: 44484000.617 ops/s
Iteration  29: 44632034.761 ops/s
Iteration  30: 44517545.882 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithCovariantObjects":
  44539239.520 ±(99.9%) 206680.457 ops/s [Average]
  (min, avg, max) = (43473027.371, 44539239.520, 44885987.291), stdev = 309349.602
  CI (99.9%): [44332559.063, 44745919.977] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
FlowableReduceTests._Benchmark.benchmark_reduceWithCovariantObjects  thrpt   30  44539239.520 ± 206680.457  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceCovariance$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceCovariance

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27342219.612 ops/s
# Warmup Iteration   2: 44105099.803 ops/s
# Warmup Iteration   3: 44148535.641 ops/s
# Warmup Iteration   4: 44326637.527 ops/s
# Warmup Iteration   5: 44242265.877 ops/s
# Warmup Iteration   6: 43954326.298 ops/s
# Warmup Iteration   7: 44111916.639 ops/s
# Warmup Iteration   8: 44262363.181 ops/s
# Warmup Iteration   9: 44288436.000 ops/s
# Warmup Iteration  10: 44172599.045 ops/s
# Warmup Iteration  11: 44309563.396 ops/s
# Warmup Iteration  12: 44047997.077 ops/s
# Warmup Iteration  13: 44039004.918 ops/s
# Warmup Iteration  14: 43920221.628 ops/s
# Warmup Iteration  15: 44288421.473 ops/s
# Warmup Iteration  16: 43819041.954 ops/s
# Warmup Iteration  17: 44406143.753 ops/s
# Warmup Iteration  18: 43236209.128 ops/s
# Warmup Iteration  19: 44243451.025 ops/s
# Warmup Iteration  20: 43784097.205 ops/s
# Warmup Iteration  21: 43358998.619 ops/s
# Warmup Iteration  22: 44020031.008 ops/s
# Warmup Iteration  23: 44133571.614 ops/s
# Warmup Iteration  24: 44142640.754 ops/s
# Warmup Iteration  25: 44137768.621 ops/s
# Warmup Iteration  26: 44323804.358 ops/s
# Warmup Iteration  27: 44180574.885 ops/s
# Warmup Iteration  28: 44423554.782 ops/s
# Warmup Iteration  29: 43704920.278 ops/s
# Warmup Iteration  30: 43740273.765 ops/s
Iteration   1: 43215122.618 ops/s
Iteration   2: 44491321.050 ops/s
Iteration   3: 44197115.172 ops/s
Iteration   4: 44417202.702 ops/s
Iteration   5: 43590731.266 ops/s
Iteration   6: 43866514.207 ops/s
Iteration   7: 43512385.258 ops/s
Iteration   8: 44444261.534 ops/s
Iteration   9: 44314477.013 ops/s
Iteration  10: 44237883.807 ops/s
Iteration  11: 43416458.860 ops/s
Iteration  12: 43801856.153 ops/s
Iteration  13: 44333990.258 ops/s
Iteration  14: 44501008.578 ops/s
Iteration  15: 44323683.812 ops/s
Iteration  16: 44170760.881 ops/s
Iteration  17: 44020309.858 ops/s
Iteration  18: 44290123.450 ops/s
Iteration  19: 44318833.470 ops/s
Iteration  20: 43883386.904 ops/s
Iteration  21: 44167860.351 ops/s
Iteration  22: 44126095.687 ops/s
Iteration  23: 44371304.318 ops/s
Iteration  24: 44335073.546 ops/s
Iteration  25: 44584567.603 ops/s
Iteration  26: 44433069.479 ops/s
Iteration  27: 44202921.127 ops/s
Iteration  28: 44487615.691 ops/s
Iteration  29: 43829375.732 ops/s
Iteration  30: 44760162.884 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceCovariance":
  44154849.109 ±(99.9%) 245399.946 ops/s [Average]
  (min, avg, max) = (43215122.618, 44154849.109, 44760162.884), stdev = 367303.114
  CI (99.9%): [43909449.163, 44400249.054] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
FlowableReduceTests._Benchmark.benchmark_reduceCovariance  thrpt   30  44154849.109 ± 245399.946  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withNonEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withNonEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7171979.317 ops/s
# Warmup Iteration   2: 9765018.416 ops/s
# Warmup Iteration   3: 11235218.919 ops/s
# Warmup Iteration   4: 11243598.238 ops/s
# Warmup Iteration   5: 11226230.220 ops/s
# Warmup Iteration   6: 11149457.785 ops/s
# Warmup Iteration   7: 11156425.802 ops/s
# Warmup Iteration   8: 11126652.091 ops/s
# Warmup Iteration   9: 11216375.345 ops/s
# Warmup Iteration  10: 11135193.306 ops/s
# Warmup Iteration  11: 11097742.946 ops/s
# Warmup Iteration  12: 11186938.971 ops/s
# Warmup Iteration  13: 11163435.674 ops/s
# Warmup Iteration  14: 11073928.914 ops/s
# Warmup Iteration  15: 11225820.770 ops/s
# Warmup Iteration  16: 10972513.348 ops/s
# Warmup Iteration  17: 10975361.241 ops/s
# Warmup Iteration  18: 11077662.071 ops/s
# Warmup Iteration  19: 11123128.065 ops/s
# Warmup Iteration  20: 11179045.885 ops/s
# Warmup Iteration  21: 11059130.424 ops/s
# Warmup Iteration  22: 11136356.371 ops/s
# Warmup Iteration  23: 11126354.324 ops/s
# Warmup Iteration  24: 11165877.381 ops/s
# Warmup Iteration  25: 11228114.814 ops/s
# Warmup Iteration  26: 11226228.696 ops/s
# Warmup Iteration  27: 11164542.750 ops/s
# Warmup Iteration  28: 11154476.460 ops/s
# Warmup Iteration  29: 11154671.463 ops/s
# Warmup Iteration  30: 11160604.574 ops/s
Iteration   1: 11081476.286 ops/s
Iteration   2: 11199025.367 ops/s
Iteration   3: 11125955.527 ops/s
Iteration   4: 11075561.383 ops/s
Iteration   5: 11148689.258 ops/s
Iteration   6: 11040090.987 ops/s
Iteration   7: 11165908.887 ops/s
Iteration   8: 11137778.109 ops/s
Iteration   9: 11001731.726 ops/s
Iteration  10: 11127005.550 ops/s
Iteration  11: 11169768.121 ops/s
Iteration  12: 11155677.987 ops/s
Iteration  13: 11122133.294 ops/s
Iteration  14: 11138760.136 ops/s
Iteration  15: 11122498.209 ops/s
Iteration  16: 11062516.897 ops/s
Iteration  17: 11066880.668 ops/s
Iteration  18: 11122051.134 ops/s
Iteration  19: 10917552.965 ops/s
Iteration  20: 11206880.855 ops/s
Iteration  21: 11034697.894 ops/s
Iteration  22: 11060256.132 ops/s
Iteration  23: 11201011.642 ops/s
Iteration  24: 10942144.832 ops/s
Iteration  25: 11090146.459 ops/s
Iteration  26: 11202045.042 ops/s
Iteration  27: 11131222.682 ops/s
Iteration  28: 11189239.849 ops/s
Iteration  29: 11126574.547 ops/s
Iteration  30: 11253314.564 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_withNonEmpty":
  11113953.233 ±(99.9%) 51226.675 ops/s [Average]
  (min, avg, max) = (10917552.965, 11113953.233, 11253314.564), stdev = 76673.681
  CI (99.9%): [11062726.558, 11165179.908] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_withNonEmpty  thrpt   30  11113953.233 ± 51226.675  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withCompletableDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withCompletableDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7102617.501 ops/s
# Warmup Iteration   2: 9467960.254 ops/s
# Warmup Iteration   3: 10529655.048 ops/s
# Warmup Iteration   4: 10806826.777 ops/s
# Warmup Iteration   5: 10724139.988 ops/s
# Warmup Iteration   6: 10620181.455 ops/s
# Warmup Iteration   7: 10715448.326 ops/s
# Warmup Iteration   8: 10822208.889 ops/s
# Warmup Iteration   9: 10740234.583 ops/s
# Warmup Iteration  10: 10751958.280 ops/s
# Warmup Iteration  11: 10638596.972 ops/s
# Warmup Iteration  12: 10780890.181 ops/s
# Warmup Iteration  13: 10741563.772 ops/s
# Warmup Iteration  14: 10739743.968 ops/s
# Warmup Iteration  15: 10720552.185 ops/s
# Warmup Iteration  16: 10758294.562 ops/s
# Warmup Iteration  17: 10726329.050 ops/s
# Warmup Iteration  18: 10630682.630 ops/s
# Warmup Iteration  19: 10678412.379 ops/s
# Warmup Iteration  20: 10661594.152 ops/s
# Warmup Iteration  21: 10744306.824 ops/s
# Warmup Iteration  22: 10734507.232 ops/s
# Warmup Iteration  23: 10785487.179 ops/s
# Warmup Iteration  24: 10610854.011 ops/s
# Warmup Iteration  25: 10736914.242 ops/s
# Warmup Iteration  26: 10784439.336 ops/s
# Warmup Iteration  27: 10696997.245 ops/s
# Warmup Iteration  28: 10687846.025 ops/s
# Warmup Iteration  29: 10668477.584 ops/s
# Warmup Iteration  30: 10764016.261 ops/s
Iteration   1: 10764428.196 ops/s
Iteration   2: 10696090.277 ops/s
Iteration   3: 10685952.310 ops/s
Iteration   4: 10716346.331 ops/s
Iteration   5: 10698037.818 ops/s
Iteration   6: 10729506.384 ops/s
Iteration   7: 10683599.187 ops/s
Iteration   8: 10733881.764 ops/s
Iteration   9: 10758442.876 ops/s
Iteration  10: 10528837.856 ops/s
Iteration  11: 10671921.699 ops/s
Iteration  12: 10703193.172 ops/s
Iteration  13: 10668708.087 ops/s
Iteration  14: 10749522.778 ops/s
Iteration  15: 10415477.915 ops/s
Iteration  16: 10757314.988 ops/s
Iteration  17: 10744266.199 ops/s
Iteration  18: 10735803.910 ops/s
Iteration  19: 10732274.932 ops/s
Iteration  20: 10707628.119 ops/s
Iteration  21: 10774964.987 ops/s
Iteration  22: 10561952.046 ops/s
Iteration  23: 10722890.833 ops/s
Iteration  24: 10715414.173 ops/s
Iteration  25: 10620780.463 ops/s
Iteration  26: 10784092.059 ops/s
Iteration  27: 10744226.041 ops/s
Iteration  28: 10489022.004 ops/s
Iteration  29: 10697493.210 ops/s
Iteration  30: 10362689.658 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withCompletableDispose":
  10678492.009 ±(99.9%) 69918.764 ops/s [Average]
  (min, avg, max) = (10362689.658, 10678492.009, 10784092.059), stdev = 104651.122
  CI (99.9%): [10608573.245, 10748410.773] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_withCompletableDispose  thrpt   30  10678492.009 ± 69918.764  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9487965.333 ops/s
# Warmup Iteration   2: 12634287.485 ops/s
# Warmup Iteration   3: 14495768.132 ops/s
# Warmup Iteration   4: 14325670.007 ops/s
# Warmup Iteration   5: 14340974.718 ops/s
# Warmup Iteration   6: 14274340.369 ops/s
# Warmup Iteration   7: 14497949.756 ops/s
# Warmup Iteration   8: 14381677.172 ops/s
# Warmup Iteration   9: 14350446.397 ops/s
# Warmup Iteration  10: 14377158.264 ops/s
# Warmup Iteration  11: 14317200.571 ops/s
# Warmup Iteration  12: 14449512.066 ops/s
# Warmup Iteration  13: 14288975.381 ops/s
# Warmup Iteration  14: 14360966.866 ops/s
# Warmup Iteration  15: 14362481.951 ops/s
# Warmup Iteration  16: 14057412.965 ops/s
# Warmup Iteration  17: 14459727.037 ops/s
# Warmup Iteration  18: 14493803.275 ops/s
# Warmup Iteration  19: 14448004.892 ops/s
# Warmup Iteration  20: 14437267.289 ops/s
# Warmup Iteration  21: 14423014.264 ops/s
# Warmup Iteration  22: 14335184.749 ops/s
# Warmup Iteration  23: 14399279.988 ops/s
# Warmup Iteration  24: 14224378.719 ops/s
# Warmup Iteration  25: 14398457.822 ops/s
# Warmup Iteration  26: 14372577.799 ops/s
# Warmup Iteration  27: 14181251.430 ops/s
# Warmup Iteration  28: 14479608.076 ops/s
# Warmup Iteration  29: 14492097.780 ops/s
# Warmup Iteration  30: 14513435.918 ops/s
Iteration   1: 14362908.258 ops/s
Iteration   2: 14429482.069 ops/s
Iteration   3: 14032202.368 ops/s
Iteration   4: 14162971.089 ops/s
Iteration   5: 14418444.638 ops/s
Iteration   6: 14426337.543 ops/s
Iteration   7: 14350372.426 ops/s
Iteration   8: 14509999.537 ops/s
Iteration   9: 14397426.232 ops/s
Iteration  10: 14459839.383 ops/s
Iteration  11: 14443252.442 ops/s
Iteration  12: 14418610.180 ops/s
Iteration  13: 14427987.931 ops/s
Iteration  14: 14424233.171 ops/s
Iteration  15: 14342287.858 ops/s
Iteration  16: 14378562.019 ops/s
Iteration  17: 14402654.014 ops/s
Iteration  18: 14277443.707 ops/s
Iteration  19: 14311878.782 ops/s
Iteration  20: 14374226.758 ops/s
Iteration  21: 14432270.010 ops/s
Iteration  22: 14242223.095 ops/s
Iteration  23: 14487995.761 ops/s
Iteration  24: 14458221.765 ops/s
Iteration  25: 14484230.012 ops/s
Iteration  26: 14377645.505 ops/s
Iteration  27: 14258742.574 ops/s
Iteration  28: 14417579.546 ops/s
Iteration  29: 14426080.364 ops/s
Iteration  30: 14324818.866 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapCompletableTest._Benchmark.benchmark_dispose":
  14375364.263 ±(99.9%) 67586.793 ops/s [Average]
  (min, avg, max) = (14032202.368, 14375364.263, 14509999.537), stdev = 101160.737
  CI (99.9%): [14307777.471, 14442951.056] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
MaybeFlatMapCompletableTest._Benchmark.benchmark_dispose  thrpt   30  14375364.263 ± 67586.793  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapCompletableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapCompletableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9241196.391 ops/s
# Warmup Iteration   2: 12724835.163 ops/s
# Warmup Iteration   3: 13868850.194 ops/s
# Warmup Iteration   4: 13841335.880 ops/s
# Warmup Iteration   5: 13813881.016 ops/s
# Warmup Iteration   6: 13837181.239 ops/s
# Warmup Iteration   7: 13850988.352 ops/s
# Warmup Iteration   8: 13803969.712 ops/s
# Warmup Iteration   9: 13752940.007 ops/s
# Warmup Iteration  10: 13907786.395 ops/s
# Warmup Iteration  11: 13769897.012 ops/s
# Warmup Iteration  12: 13802514.404 ops/s
# Warmup Iteration  13: 13878710.672 ops/s
# Warmup Iteration  14: 13775346.645 ops/s
# Warmup Iteration  15: 13612217.689 ops/s
# Warmup Iteration  16: 13841452.801 ops/s
# Warmup Iteration  17: 14018348.500 ops/s
# Warmup Iteration  18: 13958105.386 ops/s
# Warmup Iteration  19: 14052032.331 ops/s
# Warmup Iteration  20: 14039333.135 ops/s
# Warmup Iteration  21: 14015309.658 ops/s
# Warmup Iteration  22: 13993979.788 ops/s
# Warmup Iteration  23: 13924138.777 ops/s
# Warmup Iteration  24: 14046463.019 ops/s
# Warmup Iteration  25: 13903015.405 ops/s
# Warmup Iteration  26: 13936224.352 ops/s
# Warmup Iteration  27: 14002791.000 ops/s
# Warmup Iteration  28: 14019290.082 ops/s
# Warmup Iteration  29: 14048875.749 ops/s
# Warmup Iteration  30: 13951445.567 ops/s
Iteration   1: 13622682.292 ops/s
Iteration   2: 14049729.673 ops/s
Iteration   3: 14065943.511 ops/s
Iteration   4: 14083362.005 ops/s
Iteration   5: 13942423.988 ops/s
Iteration   6: 13756866.962 ops/s
Iteration   7: 14066182.070 ops/s
Iteration   8: 14060732.939 ops/s
Iteration   9: 14043498.244 ops/s
Iteration  10: 13742404.349 ops/s
Iteration  11: 13831368.622 ops/s
Iteration  12: 13972155.565 ops/s
Iteration  13: 14107227.652 ops/s
Iteration  14: 13982186.095 ops/s
Iteration  15: 13925974.177 ops/s
Iteration  16: 14058601.039 ops/s
Iteration  17: 14003753.470 ops/s
Iteration  18: 14061830.940 ops/s
Iteration  19: 14052934.003 ops/s
Iteration  20: 14049252.331 ops/s
Iteration  21: 13654341.844 ops/s
Iteration  22: 13865722.926 ops/s
Iteration  23: 13789512.049 ops/s
Iteration  24: 13906124.979 ops/s
Iteration  25: 14103329.583 ops/s
Iteration  26: 13926274.043 ops/s
Iteration  27: 14107108.164 ops/s
Iteration  28: 14021695.911 ops/s
Iteration  29: 13969084.336 ops/s
Iteration  30: 14126440.768 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapCompletableTest._Benchmark.benchmark_dispose":
  13964958.151 ±(99.9%) 92233.147 ops/s [Average]
  (min, avg, max) = (13622682.292, 13964958.151, 14126440.768), stdev = 138050.243
  CI (99.9%): [13872725.004, 14057191.298] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
MaybeConcatMapCompletableTest._Benchmark.benchmark_dispose  thrpt   30  13964958.151 ± 92233.147  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8664596.754 ops/s
# Warmup Iteration   2: 12624603.050 ops/s
# Warmup Iteration   3: 14385049.512 ops/s
# Warmup Iteration   4: 14305435.893 ops/s
# Warmup Iteration   5: 14214142.943 ops/s
# Warmup Iteration   6: 14338321.893 ops/s
# Warmup Iteration   7: 14337186.552 ops/s
# Warmup Iteration   8: 14057829.347 ops/s
# Warmup Iteration   9: 14374213.243 ops/s
# Warmup Iteration  10: 14283098.688 ops/s
# Warmup Iteration  11: 14319480.946 ops/s
# Warmup Iteration  12: 14378156.842 ops/s
# Warmup Iteration  13: 14485850.361 ops/s
# Warmup Iteration  14: 14312433.656 ops/s
# Warmup Iteration  15: 14342448.253 ops/s
# Warmup Iteration  16: 14285853.094 ops/s
# Warmup Iteration  17: 14422457.616 ops/s
# Warmup Iteration  18: 14374082.672 ops/s
# Warmup Iteration  19: 14443571.761 ops/s
# Warmup Iteration  20: 14334524.120 ops/s
# Warmup Iteration  21: 14561355.073 ops/s
# Warmup Iteration  22: 14462477.380 ops/s
# Warmup Iteration  23: 14547332.426 ops/s
# Warmup Iteration  24: 14368357.928 ops/s
# Warmup Iteration  25: 14142096.584 ops/s
# Warmup Iteration  26: 14522036.643 ops/s
# Warmup Iteration  27: 14434880.128 ops/s
# Warmup Iteration  28: 14377873.588 ops/s
# Warmup Iteration  29: 14447021.696 ops/s
# Warmup Iteration  30: 14489209.587 ops/s
Iteration   1: 14574801.947 ops/s
Iteration   2: 14200466.290 ops/s
Iteration   3: 14242485.918 ops/s
Iteration   4: 14500893.005 ops/s
Iteration   5: 14526659.494 ops/s
Iteration   6: 14459058.350 ops/s
Iteration   7: 14369594.709 ops/s
Iteration   8: 14504395.828 ops/s
Iteration   9: 14524852.981 ops/s
Iteration  10: 14281224.752 ops/s
Iteration  11: 14484669.443 ops/s
Iteration  12: 14495158.577 ops/s
Iteration  13: 14444720.353 ops/s
Iteration  14: 14429228.983 ops/s
Iteration  15: 14492334.295 ops/s
Iteration  16: 14302112.234 ops/s
Iteration  17: 14434441.322 ops/s
Iteration  18: 14420728.397 ops/s
Iteration  19: 14532286.064 ops/s
Iteration  20: 14409111.974 ops/s
Iteration  21: 14413572.404 ops/s
Iteration  22: 14478887.220 ops/s
Iteration  23: 14512160.757 ops/s
Iteration  24: 14380619.180 ops/s
Iteration  25: 14470256.428 ops/s
Iteration  26: 14439007.737 ops/s
Iteration  27: 14532331.197 ops/s
Iteration  28: 14200199.525 ops/s
Iteration  29: 14270588.587 ops/s
Iteration  30: 14448776.371 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapCompletableTest._Benchmark.benchmark_dispose":
  14425854.144 ±(99.9%) 68530.751 ops/s [Average]
  (min, avg, max) = (14200199.525, 14425854.144, 14574801.947), stdev = 102573.610
  CI (99.9%): [14357323.393, 14494384.895] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
SingleConcatMapCompletableTest._Benchmark.benchmark_dispose  thrpt   30  14425854.144 ± 68530.751  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withCompletableDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withCompletableDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6870158.084 ops/s
# Warmup Iteration   2: 9962096.126 ops/s
# Warmup Iteration   3: 10852637.690 ops/s
# Warmup Iteration   4: 10819250.917 ops/s
# Warmup Iteration   5: 10712114.166 ops/s
# Warmup Iteration   6: 10743947.790 ops/s
# Warmup Iteration   7: 10588049.082 ops/s
# Warmup Iteration   8: 10707596.376 ops/s
# Warmup Iteration   9: 10758376.199 ops/s
# Warmup Iteration  10: 10845097.384 ops/s
# Warmup Iteration  11: 10747055.027 ops/s
# Warmup Iteration  12: 10830478.737 ops/s
# Warmup Iteration  13: 10763945.936 ops/s
# Warmup Iteration  14: 10753452.823 ops/s
# Warmup Iteration  15: 10743360.483 ops/s
# Warmup Iteration  16: 10725705.421 ops/s
# Warmup Iteration  17: 10763494.644 ops/s
# Warmup Iteration  18: 10692842.273 ops/s
# Warmup Iteration  19: 10827720.609 ops/s
# Warmup Iteration  20: 10828016.336 ops/s
# Warmup Iteration  21: 10747615.301 ops/s
# Warmup Iteration  22: 10618724.081 ops/s
# Warmup Iteration  23: 10774663.602 ops/s
# Warmup Iteration  24: 10783036.738 ops/s
# Warmup Iteration  25: 10701681.439 ops/s
# Warmup Iteration  26: 10683484.798 ops/s
# Warmup Iteration  27: 10562204.086 ops/s
# Warmup Iteration  28: 10727934.629 ops/s
# Warmup Iteration  29: 10778371.427 ops/s
# Warmup Iteration  30: 10348232.230 ops/s
Iteration   1: 10807007.830 ops/s
Iteration   2: 10601741.800 ops/s
Iteration   3: 10788616.375 ops/s
Iteration   4: 10734489.273 ops/s
Iteration   5: 10710032.784 ops/s
Iteration   6: 10796968.891 ops/s
Iteration   7: 10676534.843 ops/s
Iteration   8: 10786149.361 ops/s
Iteration   9: 10749490.912 ops/s
Iteration  10: 10787425.172 ops/s
Iteration  11: 10846947.017 ops/s
Iteration  12: 10746570.172 ops/s
Iteration  13: 10672654.114 ops/s
Iteration  14: 10836461.795 ops/s
Iteration  15: 10702696.221 ops/s
Iteration  16: 10814601.540 ops/s
Iteration  17: 10794274.903 ops/s
Iteration  18: 10830044.357 ops/s
Iteration  19: 10789182.648 ops/s
Iteration  20: 10814348.516 ops/s
Iteration  21: 10780436.913 ops/s
Iteration  22: 10775285.685 ops/s
Iteration  23: 10794825.547 ops/s
Iteration  24: 10711766.066 ops/s
Iteration  25: 10708769.321 ops/s
Iteration  26: 10780879.439 ops/s
Iteration  27: 10778647.529 ops/s
Iteration  28: 10833152.754 ops/s
Iteration  29: 10772792.272 ops/s
Iteration  30: 10730885.727 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withCompletableDispose":
  10765122.659 ±(99.9%) 37557.802 ops/s [Average]
  (min, avg, max) = (10601741.800, 10765122.659, 10846947.017), stdev = 56214.755
  CI (99.9%): [10727564.857, 10802680.461] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score       Error  Units
SingleDelayTest._Benchmark.benchmark_withCompletableDispose  thrpt   30  10765122.659 ± 37557.802  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_source$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_source

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27569132.163 ops/s
# Warmup Iteration   2: 45462552.828 ops/s
# Warmup Iteration   3: 46748253.010 ops/s
# Warmup Iteration   4: 46498374.910 ops/s
# Warmup Iteration   5: 46808183.599 ops/s
# Warmup Iteration   6: 46224342.155 ops/s
# Warmup Iteration   7: 46702194.477 ops/s
# Warmup Iteration   8: 45964208.552 ops/s
# Warmup Iteration   9: 46531065.813 ops/s
# Warmup Iteration  10: 46121912.676 ops/s
# Warmup Iteration  11: 46159193.907 ops/s
# Warmup Iteration  12: 46063871.112 ops/s
# Warmup Iteration  13: 46525831.915 ops/s
# Warmup Iteration  14: 46526224.637 ops/s
# Warmup Iteration  15: 46328540.041 ops/s
# Warmup Iteration  16: 46676942.387 ops/s
# Warmup Iteration  17: 46668341.669 ops/s
# Warmup Iteration  18: 46499506.669 ops/s
# Warmup Iteration  19: 46768931.720 ops/s
# Warmup Iteration  20: 46679140.756 ops/s
# Warmup Iteration  21: 46649877.392 ops/s
# Warmup Iteration  22: 45858767.021 ops/s
# Warmup Iteration  23: 46407182.276 ops/s
# Warmup Iteration  24: 46506509.100 ops/s
# Warmup Iteration  25: 46588353.294 ops/s
# Warmup Iteration  26: 46290624.100 ops/s
# Warmup Iteration  27: 46186484.100 ops/s
# Warmup Iteration  28: 46423264.816 ops/s
# Warmup Iteration  29: 46259367.005 ops/s
# Warmup Iteration  30: 46629863.347 ops/s
Iteration   1: 46487688.160 ops/s
Iteration   2: 46563069.097 ops/s
Iteration   3: 46428222.794 ops/s
Iteration   4: 46514339.914 ops/s
Iteration   5: 46755288.404 ops/s
Iteration   6: 46346040.960 ops/s
Iteration   7: 46593408.224 ops/s
Iteration   8: 46475602.165 ops/s
Iteration   9: 46365129.781 ops/s
Iteration  10: 46695397.481 ops/s
Iteration  11: 46502200.413 ops/s
Iteration  12: 46163562.178 ops/s
Iteration  13: 46418098.836 ops/s
Iteration  14: 46208052.838 ops/s
Iteration  15: 46764121.431 ops/s
Iteration  16: 46406622.947 ops/s
Iteration  17: 46360339.751 ops/s
Iteration  18: 46296728.862 ops/s
Iteration  19: 46760276.722 ops/s
Iteration  20: 46553247.216 ops/s
Iteration  21: 46543822.047 ops/s
Iteration  22: 46475531.056 ops/s
Iteration  23: 46700979.343 ops/s
Iteration  24: 45976803.612 ops/s
Iteration  25: 46624647.021 ops/s
Iteration  26: 46020746.638 ops/s
Iteration  27: 46216485.449 ops/s
Iteration  28: 46140505.176 ops/s
Iteration  29: 46058289.277 ops/s
Iteration  30: 46476407.205 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeToCompletableTest._Benchmark.benchmark_source":
  46429721.833 ±(99.9%) 146693.963 ops/s [Average]
  (min, avg, max) = (45976803.612, 46429721.833, 46764121.431), stdev = 219564.635
  CI (99.9%): [46283027.870, 46576415.797] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
MaybeToCompletableTest._Benchmark.benchmark_source  thrpt   30  46429721.833 ± 146693.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithCovariantObjectsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithCovariantObjectsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21311452.880 ops/s
# Warmup Iteration   2: 35408917.783 ops/s
# Warmup Iteration   3: 35832866.977 ops/s
# Warmup Iteration   4: 35813925.104 ops/s
# Warmup Iteration   5: 35659349.557 ops/s
# Warmup Iteration   6: 35084628.756 ops/s
# Warmup Iteration   7: 35514287.389 ops/s
# Warmup Iteration   8: 34888841.144 ops/s
# Warmup Iteration   9: 35862136.665 ops/s
# Warmup Iteration  10: 35819225.831 ops/s
# Warmup Iteration  11: 35477795.568 ops/s
# Warmup Iteration  12: 35636650.236 ops/s
# Warmup Iteration  13: 35930299.095 ops/s
# Warmup Iteration  14: 35937087.621 ops/s
# Warmup Iteration  15: 35762046.136 ops/s
# Warmup Iteration  16: 35843380.907 ops/s
# Warmup Iteration  17: 35756245.833 ops/s
# Warmup Iteration  18: 35957682.908 ops/s
# Warmup Iteration  19: 36005556.974 ops/s
# Warmup Iteration  20: 35775567.955 ops/s
# Warmup Iteration  21: 35884729.295 ops/s
# Warmup Iteration  22: 36005136.985 ops/s
# Warmup Iteration  23: 35806565.270 ops/s
# Warmup Iteration  24: 35799615.256 ops/s
# Warmup Iteration  25: 35719667.260 ops/s
# Warmup Iteration  26: 35871976.358 ops/s
# Warmup Iteration  27: 35639348.864 ops/s
# Warmup Iteration  28: 35570693.519 ops/s
# Warmup Iteration  29: 35358963.661 ops/s
# Warmup Iteration  30: 35519639.349 ops/s
Iteration   1: 35565234.985 ops/s
Iteration   2: 35898072.890 ops/s
Iteration   3: 35980361.554 ops/s
Iteration   4: 35897505.033 ops/s
Iteration   5: 35793953.990 ops/s
Iteration   6: 35490845.469 ops/s
Iteration   7: 35367281.061 ops/s
Iteration   8: 35159771.952 ops/s
Iteration   9: 34842588.183 ops/s
Iteration  10: 35602203.891 ops/s
Iteration  11: 35704223.738 ops/s
Iteration  12: 35732715.421 ops/s
Iteration  13: 36081683.670 ops/s
Iteration  14: 35862744.934 ops/s
Iteration  15: 35680859.198 ops/s
Iteration  16: 35252059.966 ops/s
Iteration  17: 35717671.124 ops/s
Iteration  18: 35877316.475 ops/s
Iteration  19: 36023672.587 ops/s
Iteration  20: 35926373.870 ops/s
Iteration  21: 35883449.315 ops/s
Iteration  22: 35088184.993 ops/s
Iteration  23: 36067246.264 ops/s
Iteration  24: 35457466.789 ops/s
Iteration  25: 35719901.887 ops/s
Iteration  26: 35683395.049 ops/s
Iteration  27: 35231866.024 ops/s
Iteration  28: 35381014.257 ops/s
Iteration  29: 35711117.068 ops/s
Iteration  30: 36148640.624 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithCovariantObjectsFlowable":
  35660980.742 ±(99.9%) 215454.387 ops/s [Average]
  (min, avg, max) = (34842588.183, 35660980.742, 36148640.624), stdev = 322482.007
  CI (99.9%): [35445526.355, 35876435.129] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score        Error  Units
FlowableReduceTests._Benchmark.benchmark_reduceWithCovariantObjectsFlowable  thrpt   30  35660980.742 ± 215454.387  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10014755.581 ops/s
# Warmup Iteration   2: 14577002.199 ops/s
# Warmup Iteration   3: 16100541.007 ops/s
# Warmup Iteration   4: 15560740.921 ops/s
# Warmup Iteration   5: 16148315.007 ops/s
# Warmup Iteration   6: 16316614.377 ops/s
# Warmup Iteration   7: 16187185.613 ops/s
# Warmup Iteration   8: 16200696.979 ops/s
# Warmup Iteration   9: 16313369.034 ops/s
# Warmup Iteration  10: 16145378.282 ops/s
# Warmup Iteration  11: 16216825.017 ops/s
# Warmup Iteration  12: 16227483.428 ops/s
# Warmup Iteration  13: 16211007.215 ops/s
# Warmup Iteration  14: 16282541.014 ops/s
# Warmup Iteration  15: 16266766.000 ops/s
# Warmup Iteration  16: 16209252.207 ops/s
# Warmup Iteration  17: 16179875.029 ops/s
# Warmup Iteration  18: 15927829.346 ops/s
# Warmup Iteration  19: 16175380.462 ops/s
# Warmup Iteration  20: 16147969.600 ops/s
# Warmup Iteration  21: 16090465.844 ops/s
# Warmup Iteration  22: 16183187.976 ops/s
# Warmup Iteration  23: 16129832.859 ops/s
# Warmup Iteration  24: 16122434.463 ops/s
# Warmup Iteration  25: 16038328.513 ops/s
# Warmup Iteration  26: 16167097.934 ops/s
# Warmup Iteration  27: 16210982.479 ops/s
# Warmup Iteration  28: 16132912.164 ops/s
# Warmup Iteration  29: 16092961.742 ops/s
# Warmup Iteration  30: 16094812.975 ops/s
Iteration   1: 16204790.087 ops/s
Iteration   2: 16227729.768 ops/s
Iteration   3: 16157104.168 ops/s
Iteration   4: 16246221.240 ops/s
Iteration   5: 16029276.043 ops/s
Iteration   6: 16121955.153 ops/s
Iteration   7: 16057220.909 ops/s
Iteration   8: 16163629.053 ops/s
Iteration   9: 16104277.920 ops/s
Iteration  10: 16229188.534 ops/s
Iteration  11: 16058318.700 ops/s
Iteration  12: 16130175.145 ops/s
Iteration  13: 16097814.917 ops/s
Iteration  14: 16241159.949 ops/s
Iteration  15: 16191934.472 ops/s
Iteration  16: 16207990.803 ops/s
Iteration  17: 16138593.644 ops/s
Iteration  18: 16220793.567 ops/s
Iteration  19: 16149827.601 ops/s
Iteration  20: 16080412.508 ops/s
Iteration  21: 16151539.539 ops/s
Iteration  22: 16083854.931 ops/s
Iteration  23: 15978789.434 ops/s
Iteration  24: 15931242.906 ops/s
Iteration  25: 16168453.260 ops/s
Iteration  26: 16082740.376 ops/s
Iteration  27: 16213287.108 ops/s
Iteration  28: 16080754.411 ops/s
Iteration  29: 16118375.197 ops/s
Iteration  30: 16220964.348 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_dispose":
  16136280.523 ±(99.9%) 52841.617 ops/s [Average]
  (min, avg, max) = (15931242.906, 16136280.523, 16246221.240), stdev = 79090.851
  CI (99.9%): [16083438.906, 16189122.140] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CompletableFromPublisherTest._Benchmark.benchmark_dispose  thrpt   30  16136280.523 ± 52841.617  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_source$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_source

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 34998624.937 ops/s
# Warmup Iteration   2: 59504123.021 ops/s
# Warmup Iteration   3: 55836778.864 ops/s
# Warmup Iteration   4: 55521639.437 ops/s
# Warmup Iteration   5: 55625980.530 ops/s
# Warmup Iteration   6: 54773816.012 ops/s
# Warmup Iteration   7: 55607512.635 ops/s
# Warmup Iteration   8: 54930581.696 ops/s
# Warmup Iteration   9: 55643966.643 ops/s
# Warmup Iteration  10: 54912557.828 ops/s
# Warmup Iteration  11: 55717234.809 ops/s
# Warmup Iteration  12: 55930998.818 ops/s
# Warmup Iteration  13: 55700946.452 ops/s
# Warmup Iteration  14: 55641369.610 ops/s
# Warmup Iteration  15: 55828867.431 ops/s
# Warmup Iteration  16: 55962934.572 ops/s
# Warmup Iteration  17: 56058718.245 ops/s
# Warmup Iteration  18: 55797344.774 ops/s
# Warmup Iteration  19: 55865758.773 ops/s
# Warmup Iteration  20: 55786750.810 ops/s
# Warmup Iteration  21: 55721888.691 ops/s
# Warmup Iteration  22: 55927847.332 ops/s
# Warmup Iteration  23: 55633127.397 ops/s
# Warmup Iteration  24: 55692889.367 ops/s
# Warmup Iteration  25: 55348373.160 ops/s
# Warmup Iteration  26: 55856492.563 ops/s
# Warmup Iteration  27: 55967962.707 ops/s
# Warmup Iteration  28: 55279305.082 ops/s
# Warmup Iteration  29: 55425998.064 ops/s
# Warmup Iteration  30: 56225827.878 ops/s
Iteration   1: 55674727.981 ops/s
Iteration   2: 55746838.767 ops/s
Iteration   3: 54608421.488 ops/s
Iteration   4: 55580539.998 ops/s
Iteration   5: 55729834.788 ops/s
Iteration   6: 55600153.494 ops/s
Iteration   7: 55863326.708 ops/s
Iteration   8: 55964802.434 ops/s
Iteration   9: 55199538.593 ops/s
Iteration  10: 55165513.094 ops/s
Iteration  11: 55529243.360 ops/s
Iteration  12: 56071207.927 ops/s
Iteration  13: 55509327.726 ops/s
Iteration  14: 55604421.643 ops/s
Iteration  15: 55695579.303 ops/s
Iteration  16: 55868739.532 ops/s
Iteration  17: 56252711.581 ops/s
Iteration  18: 55807802.535 ops/s
Iteration  19: 55891798.372 ops/s
Iteration  20: 55272416.561 ops/s
Iteration  21: 56122346.858 ops/s
Iteration  22: 55834714.265 ops/s
Iteration  23: 55970660.342 ops/s
Iteration  24: 54999636.430 ops/s
Iteration  25: 55871452.498 ops/s
Iteration  26: 55783956.873 ops/s
Iteration  27: 55765301.533 ops/s
Iteration  28: 55957791.010 ops/s
Iteration  29: 55205856.249 ops/s
Iteration  30: 55785803.027 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_source":
  55664482.166 ±(99.9%) 239007.301 ops/s [Average]
  (min, avg, max) = (54608421.488, 55664482.166, 56252711.581), stdev = 357734.903
  CI (99.9%): [55425474.865, 55903489.467] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_source  thrpt   30  55664482.166 ± 239007.301  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_invalidPrefetch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_invalidPrefetch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 800909.838 ops/s
# Warmup Iteration   2: 913672.823 ops/s
# Warmup Iteration   3: 890535.026 ops/s
# Warmup Iteration   4: 983952.913 ops/s
# Warmup Iteration   5: 980850.575 ops/s
# Warmup Iteration   6: 976200.656 ops/s
# Warmup Iteration   7: 968893.656 ops/s
# Warmup Iteration   8: 976836.296 ops/s
# Warmup Iteration   9: 974057.060 ops/s
# Warmup Iteration  10: 975957.358 ops/s
# Warmup Iteration  11: 984378.091 ops/s
# Warmup Iteration  12: 985974.147 ops/s
# Warmup Iteration  13: 987118.239 ops/s
# Warmup Iteration  14: 974129.046 ops/s
# Warmup Iteration  15: 984950.778 ops/s
# Warmup Iteration  16: 974427.105 ops/s
# Warmup Iteration  17: 1040280.715 ops/s
# Warmup Iteration  18: 1036107.825 ops/s
# Warmup Iteration  19: 1032241.735 ops/s
# Warmup Iteration  20: 1042349.224 ops/s
# Warmup Iteration  21: 1036441.821 ops/s
# Warmup Iteration  22: 1033696.509 ops/s
# Warmup Iteration  23: 1029686.666 ops/s
# Warmup Iteration  24: 1036682.652 ops/s
# Warmup Iteration  25: 1016623.383 ops/s
# Warmup Iteration  26: 1037229.604 ops/s
# Warmup Iteration  27: 1001488.224 ops/s
# Warmup Iteration  28: 1033636.116 ops/s
# Warmup Iteration  29: 1040552.522 ops/s
# Warmup Iteration  30: 1039413.611 ops/s
Iteration   1: 1039936.562 ops/s
Iteration   2: 1040821.651 ops/s
Iteration   3: 1031256.789 ops/s
Iteration   4: 1038871.773 ops/s
Iteration   5: 1042208.537 ops/s
Iteration   6: 1034340.204 ops/s
Iteration   7: 1037997.506 ops/s
Iteration   8: 1019202.048 ops/s
Iteration   9: 1037958.623 ops/s
Iteration  10: 1036957.948 ops/s
Iteration  11: 1040837.671 ops/s
Iteration  12: 1037236.324 ops/s
Iteration  13: 1038070.797 ops/s
Iteration  14: 1031767.407 ops/s
Iteration  15: 1029584.912 ops/s
Iteration  16: 1017975.724 ops/s
Iteration  17: 1022731.172 ops/s
Iteration  18: 1029688.582 ops/s
Iteration  19: 1036379.067 ops/s
Iteration  20: 1025678.329 ops/s
Iteration  21: 1031580.636 ops/s
Iteration  22: 1044317.944 ops/s
Iteration  23: 1036327.156 ops/s
Iteration  24: 1029547.730 ops/s
Iteration  25: 1036448.735 ops/s
Iteration  26: 1042935.204 ops/s
Iteration  27: 1033007.842 ops/s
Iteration  28: 1038918.441 ops/s
Iteration  29: 1031989.811 ops/s
Iteration  30: 1031581.946 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_invalidPrefetch":
  1034205.236 ±(99.9%) 4425.915 ops/s [Average]
  (min, avg, max) = (1017975.724, 1034205.236, 1044317.944), stdev = 6624.502
  CI (99.9%): [1029779.321, 1038631.151] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_invalidPrefetch  thrpt   30  1034205.236 ± 4425.915  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_fromCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_fromCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6866905.477 ops/s
# Warmup Iteration   2: 9354647.098 ops/s
# Warmup Iteration   3: 10655973.788 ops/s
# Warmup Iteration   4: 10581205.655 ops/s
# Warmup Iteration   5: 10558354.981 ops/s
# Warmup Iteration   6: 10652835.325 ops/s
# Warmup Iteration   7: 10366574.799 ops/s
# Warmup Iteration   8: 10661090.992 ops/s
# Warmup Iteration   9: 10588750.920 ops/s
# Warmup Iteration  10: 10566177.363 ops/s
# Warmup Iteration  11: 10556812.290 ops/s
# Warmup Iteration  12: 10601796.040 ops/s
# Warmup Iteration  13: 10364033.508 ops/s
# Warmup Iteration  14: 10436859.142 ops/s
# Warmup Iteration  15: 10555171.069 ops/s
# Warmup Iteration  16: 10539570.811 ops/s
# Warmup Iteration  17: 10602137.792 ops/s
# Warmup Iteration  18: 10592437.317 ops/s
# Warmup Iteration  19: 10624668.806 ops/s
# Warmup Iteration  20: 10372054.951 ops/s
# Warmup Iteration  21: 10469697.847 ops/s
# Warmup Iteration  22: 10576164.856 ops/s
# Warmup Iteration  23: 10565193.410 ops/s
# Warmup Iteration  24: 10631233.776 ops/s
# Warmup Iteration  25: 10592394.700 ops/s
# Warmup Iteration  26: 10575466.660 ops/s
# Warmup Iteration  27: 10595034.112 ops/s
# Warmup Iteration  28: 10610437.613 ops/s
# Warmup Iteration  29: 10641442.443 ops/s
# Warmup Iteration  30: 10575469.706 ops/s
Iteration   1: 10570071.959 ops/s
Iteration   2: 10481467.562 ops/s
Iteration   3: 10586065.020 ops/s
Iteration   4: 10439038.520 ops/s
Iteration   5: 10620340.899 ops/s
Iteration   6: 10534969.331 ops/s
Iteration   7: 10591475.151 ops/s
Iteration   8: 10479926.680 ops/s
Iteration   9: 10548632.737 ops/s
Iteration  10: 10613421.622 ops/s
Iteration  11: 10618197.587 ops/s
Iteration  12: 10511101.129 ops/s
Iteration  13: 10562734.138 ops/s
Iteration  14: 10403262.098 ops/s
Iteration  15: 10691213.179 ops/s
Iteration  16: 10548249.264 ops/s
Iteration  17: 10526005.425 ops/s
Iteration  18: 10597342.311 ops/s
Iteration  19: 10608197.195 ops/s
Iteration  20: 10641876.740 ops/s
Iteration  21: 10597909.661 ops/s
Iteration  22: 10610910.489 ops/s
Iteration  23: 10579269.904 ops/s
Iteration  24: 10556407.766 ops/s
Iteration  25: 10537710.422 ops/s
Iteration  26: 10483003.728 ops/s
Iteration  27: 10558713.884 ops/s
Iteration  28: 10613602.452 ops/s
Iteration  29: 10619124.760 ops/s
Iteration  30: 10657065.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_fromCompletable":
  10566243.587 ±(99.9%) 43152.400 ops/s [Average]
  (min, avg, max) = (10403262.098, 10566243.587, 10691213.179), stdev = 64588.486
  CI (99.9%): [10523091.186, 10609395.987] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
MaybeFromCompletableTest._Benchmark.benchmark_fromCompletable  thrpt   30  10566243.587 ± 43152.400  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingleTest._Benchmark.benchmark_fromSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingleTest._Benchmark.benchmark_fromSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7679184.827 ops/s
# Warmup Iteration   2: 11036430.464 ops/s
# Warmup Iteration   3: 12138794.662 ops/s
# Warmup Iteration   4: 12056144.106 ops/s
# Warmup Iteration   5: 12049671.872 ops/s
# Warmup Iteration   6: 12154023.745 ops/s
# Warmup Iteration   7: 12115172.442 ops/s
# Warmup Iteration   8: 12060150.842 ops/s
# Warmup Iteration   9: 12147386.697 ops/s
# Warmup Iteration  10: 11981051.057 ops/s
# Warmup Iteration  11: 12059905.270 ops/s
# Warmup Iteration  12: 11987147.148 ops/s
# Warmup Iteration  13: 11849194.783 ops/s
# Warmup Iteration  14: 12059651.742 ops/s
# Warmup Iteration  15: 12089904.466 ops/s
# Warmup Iteration  16: 11956961.391 ops/s
# Warmup Iteration  17: 12226943.647 ops/s
# Warmup Iteration  18: 12161045.768 ops/s
# Warmup Iteration  19: 12144554.623 ops/s
# Warmup Iteration  20: 12188113.618 ops/s
# Warmup Iteration  21: 12013940.246 ops/s
# Warmup Iteration  22: 12166658.483 ops/s
# Warmup Iteration  23: 12179978.129 ops/s
# Warmup Iteration  24: 12112299.908 ops/s
# Warmup Iteration  25: 12163414.649 ops/s
# Warmup Iteration  26: 12082556.237 ops/s
# Warmup Iteration  27: 11980415.925 ops/s
# Warmup Iteration  28: 12118352.169 ops/s
# Warmup Iteration  29: 12147414.313 ops/s
# Warmup Iteration  30: 12215553.586 ops/s
Iteration   1: 12001923.449 ops/s
Iteration   2: 12130809.859 ops/s
Iteration   3: 12164469.210 ops/s
Iteration   4: 12073349.136 ops/s
Iteration   5: 12196172.661 ops/s
Iteration   6: 11890532.552 ops/s
Iteration   7: 12133225.115 ops/s
Iteration   8: 12028272.492 ops/s
Iteration   9: 12122659.260 ops/s
Iteration  10: 12101281.009 ops/s
Iteration  11: 12155675.064 ops/s
Iteration  12: 12187469.486 ops/s
Iteration  13: 12153262.960 ops/s
Iteration  14: 12189191.426 ops/s
Iteration  15: 12190959.679 ops/s
Iteration  16: 12217311.337 ops/s
Iteration  17: 12144929.450 ops/s
Iteration  18: 12219944.320 ops/s
Iteration  19: 12088526.820 ops/s
Iteration  20: 12120267.346 ops/s
Iteration  21: 12101122.295 ops/s
Iteration  22: 12114304.537 ops/s
Iteration  23: 12051204.483 ops/s
Iteration  24: 12214988.955 ops/s
Iteration  25: 12151710.362 ops/s
Iteration  26: 12153493.110 ops/s
Iteration  27: 12058652.301 ops/s
Iteration  28: 11974137.044 ops/s
Iteration  29: 12130603.518 ops/s
Iteration  30: 12167318.447 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromSingleTest._Benchmark.benchmark_fromSingle":
  12120925.590 ±(99.9%) 50712.013 ops/s [Average]
  (min, avg, max) = (11890532.552, 12120925.590, 12219944.320), stdev = 75903.360
  CI (99.9%): [12070213.576, 12171637.603] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CompletableFromSingleTest._Benchmark.benchmark_fromSingle  thrpt   30  12120925.590 ± 50712.013  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_observerComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_observerComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7777299.592 ops/s
# Warmup Iteration   2: 10951868.618 ops/s
# Warmup Iteration   3: 12048930.347 ops/s
# Warmup Iteration   4: 12036561.977 ops/s
# Warmup Iteration   5: 12021249.197 ops/s
# Warmup Iteration   6: 11780871.180 ops/s
# Warmup Iteration   7: 11967393.063 ops/s
# Warmup Iteration   8: 11821999.132 ops/s
# Warmup Iteration   9: 12015086.150 ops/s
# Warmup Iteration  10: 12046705.707 ops/s
# Warmup Iteration  11: 11985418.523 ops/s
# Warmup Iteration  12: 12072149.735 ops/s
# Warmup Iteration  13: 11870010.182 ops/s
# Warmup Iteration  14: 11940716.178 ops/s
# Warmup Iteration  15: 11986423.145 ops/s
# Warmup Iteration  16: 11950427.626 ops/s
# Warmup Iteration  17: 12026137.546 ops/s
# Warmup Iteration  18: 12031827.658 ops/s
# Warmup Iteration  19: 11945819.490 ops/s
# Warmup Iteration  20: 11712832.855 ops/s
# Warmup Iteration  21: 12120075.169 ops/s
# Warmup Iteration  22: 12070065.831 ops/s
# Warmup Iteration  23: 11985783.670 ops/s
# Warmup Iteration  24: 12022396.786 ops/s
# Warmup Iteration  25: 12011344.406 ops/s
# Warmup Iteration  26: 12009591.158 ops/s
# Warmup Iteration  27: 12062728.618 ops/s
# Warmup Iteration  28: 12024078.529 ops/s
# Warmup Iteration  29: 11975343.888 ops/s
# Warmup Iteration  30: 11955826.887 ops/s
Iteration   1: 12004809.058 ops/s
Iteration   2: 11982707.462 ops/s
Iteration   3: 12027371.713 ops/s
Iteration   4: 12079366.260 ops/s
Iteration   5: 11969275.481 ops/s
Iteration   6: 12000718.095 ops/s
Iteration   7: 11733564.676 ops/s
Iteration   8: 12075890.599 ops/s
Iteration   9: 12049374.704 ops/s
Iteration  10: 12025224.419 ops/s
Iteration  11: 12002859.097 ops/s
Iteration  12: 12011770.412 ops/s
Iteration  13: 12079431.170 ops/s
Iteration  14: 12009367.865 ops/s
Iteration  15: 12010714.884 ops/s
Iteration  16: 11888397.278 ops/s
Iteration  17: 12035824.345 ops/s
Iteration  18: 12038333.036 ops/s
Iteration  19: 11929573.354 ops/s
Iteration  20: 12098725.108 ops/s
Iteration  21: 12009481.103 ops/s
Iteration  22: 12044350.008 ops/s
Iteration  23: 11834406.542 ops/s
Iteration  24: 12042690.677 ops/s
Iteration  25: 11978964.460 ops/s
Iteration  26: 11883288.177 ops/s
Iteration  27: 12026370.353 ops/s
Iteration  28: 12066639.823 ops/s
Iteration  29: 11805789.844 ops/s
Iteration  30: 12028092.028 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_observerComplete":
  11992445.734 ±(99.9%) 57124.690 ops/s [Average]
  (min, avg, max) = (11733564.676, 11992445.734, 12098725.108), stdev = 85501.554
  CI (99.9%): [11935321.044, 12049570.425] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt         Score       Error  Units
CompletableBlockingSubscribeTest._Benchmark.benchmark_observerComplete  thrpt   30  11992445.734 ± 57124.690  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 758983.719 ops/s
# Warmup Iteration   2: 876948.072 ops/s
# Warmup Iteration   3: 803722.822 ops/s
# Warmup Iteration   4: 941843.336 ops/s
# Warmup Iteration   5: 948971.870 ops/s
# Warmup Iteration   6: 950810.058 ops/s
# Warmup Iteration   7: 949399.765 ops/s
# Warmup Iteration   8: 944243.272 ops/s
# Warmup Iteration   9: 945302.153 ops/s
# Warmup Iteration  10: 947573.612 ops/s
# Warmup Iteration  11: 948462.335 ops/s
# Warmup Iteration  12: 949930.619 ops/s
# Warmup Iteration  13: 945848.042 ops/s
# Warmup Iteration  14: 945087.650 ops/s
# Warmup Iteration  15: 929505.340 ops/s
# Warmup Iteration  16: 941301.912 ops/s
# Warmup Iteration  17: 988871.654 ops/s
# Warmup Iteration  18: 983159.237 ops/s
# Warmup Iteration  19: 981986.375 ops/s
# Warmup Iteration  20: 994752.776 ops/s
# Warmup Iteration  21: 996119.685 ops/s
# Warmup Iteration  22: 998410.828 ops/s
# Warmup Iteration  23: 984828.115 ops/s
# Warmup Iteration  24: 983259.049 ops/s
# Warmup Iteration  25: 994425.077 ops/s
# Warmup Iteration  26: 995815.167 ops/s
# Warmup Iteration  27: 980262.010 ops/s
# Warmup Iteration  28: 993757.959 ops/s
# Warmup Iteration  29: 994394.752 ops/s
# Warmup Iteration  30: 991187.511 ops/s
Iteration   1: 995665.202 ops/s
Iteration   2: 993575.011 ops/s
Iteration   3: 993934.968 ops/s
Iteration   4: 995273.955 ops/s
Iteration   5: 996414.727 ops/s
Iteration   6: 993149.827 ops/s
Iteration   7: 977840.697 ops/s
Iteration   8: 993326.759 ops/s
Iteration   9: 997100.297 ops/s
Iteration  10: 989424.017 ops/s
Iteration  11: 997035.450 ops/s
Iteration  12: 993017.717 ops/s
Iteration  13: 972579.062 ops/s
Iteration  14: 988016.184 ops/s
Iteration  15: 998165.770 ops/s
Iteration  16: 992199.500 ops/s
Iteration  17: 996637.418 ops/s
Iteration  18: 998263.708 ops/s
Iteration  19: 991608.702 ops/s
Iteration  20: 995413.234 ops/s
Iteration  21: 987508.917 ops/s
Iteration  22: 994160.457 ops/s
Iteration  23: 993793.785 ops/s
Iteration  24: 991129.827 ops/s
Iteration  25: 981251.778 ops/s
Iteration  26: 986529.043 ops/s
Iteration  27: 994815.920 ops/s
Iteration  28: 991434.941 ops/s
Iteration  29: 995175.861 ops/s
Iteration  30: 992067.280 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_zipIterableOneIsNull":
  991883.667 ±(99.9%) 3939.581 ops/s [Average]
  (min, avg, max) = (972579.062, 991883.667, 998263.708), stdev = 5896.580
  CI (99.9%): [987944.086, 995823.248] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
MaybeZipIterableTest._Benchmark.benchmark_zipIterableOneIsNull  thrpt   30  991883.667 ± 3939.581  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5263746.894 ops/s
# Warmup Iteration   2: 7287997.342 ops/s
# Warmup Iteration   3: 8194620.635 ops/s
# Warmup Iteration   4: 8250109.906 ops/s
# Warmup Iteration   5: 8311758.666 ops/s
# Warmup Iteration   6: 8258320.396 ops/s
# Warmup Iteration   7: 8198060.689 ops/s
# Warmup Iteration   8: 8263998.514 ops/s
# Warmup Iteration   9: 8253003.924 ops/s
# Warmup Iteration  10: 8272933.427 ops/s
# Warmup Iteration  11: 8280236.108 ops/s
# Warmup Iteration  12: 8212917.794 ops/s
# Warmup Iteration  13: 8239500.838 ops/s
# Warmup Iteration  14: 8253472.305 ops/s
# Warmup Iteration  15: 8246599.933 ops/s
# Warmup Iteration  16: 8288801.147 ops/s
# Warmup Iteration  17: 8338989.517 ops/s
# Warmup Iteration  18: 8267999.400 ops/s
# Warmup Iteration  19: 8321373.653 ops/s
# Warmup Iteration  20: 8274651.468 ops/s
# Warmup Iteration  21: 8221987.137 ops/s
# Warmup Iteration  22: 8225996.438 ops/s
# Warmup Iteration  23: 8351920.168 ops/s
# Warmup Iteration  24: 8274659.527 ops/s
# Warmup Iteration  25: 8260196.481 ops/s
# Warmup Iteration  26: 8378710.858 ops/s
# Warmup Iteration  27: 8298687.191 ops/s
# Warmup Iteration  28: 8377059.617 ops/s
# Warmup Iteration  29: 8334698.502 ops/s
# Warmup Iteration  30: 8311136.518 ops/s
Iteration   1: 8343949.229 ops/s
Iteration   2: 8384827.818 ops/s
Iteration   3: 8316310.545 ops/s
Iteration   4: 8249283.410 ops/s
Iteration   5: 8339503.713 ops/s
Iteration   6: 8320295.972 ops/s
Iteration   7: 8334969.399 ops/s
Iteration   8: 8184211.091 ops/s
Iteration   9: 8322071.614 ops/s
Iteration  10: 8357769.001 ops/s
Iteration  11: 8378004.377 ops/s
Iteration  12: 8313552.144 ops/s
Iteration  13: 8323807.291 ops/s
Iteration  14: 8355670.175 ops/s
Iteration  15: 8234567.216 ops/s
Iteration  16: 8298198.009 ops/s
Iteration  17: 8282556.452 ops/s
Iteration  18: 8368175.603 ops/s
Iteration  19: 8307295.846 ops/s
Iteration  20: 8316411.628 ops/s
Iteration  21: 8335521.951 ops/s
Iteration  22: 8330798.120 ops/s
Iteration  23: 8358748.075 ops/s
Iteration  24: 8334688.463 ops/s
Iteration  25: 8381653.645 ops/s
Iteration  26: 8348806.832 ops/s
Iteration  27: 8227464.810 ops/s
Iteration  28: 8305932.300 ops/s
Iteration  29: 8286012.238 ops/s
Iteration  30: 8361582.093 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteValue":
  8320087.969 ±(99.9%) 31625.550 ops/s [Average]
  (min, avg, max) = (8184211.091, 8320087.969, 8384827.818), stdev = 47335.638
  CI (99.9%): [8288462.418, 8351713.519] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
CompletableAndThenTest._Benchmark.benchmark_andThenMaybeCompleteValue  thrpt   30  8320087.969 ± 31625.550  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithObjects$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithObjects

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20256390.955 ops/s
# Warmup Iteration   2: 32651697.843 ops/s
# Warmup Iteration   3: 33231911.106 ops/s
# Warmup Iteration   4: 33923030.003 ops/s
# Warmup Iteration   5: 33811176.930 ops/s
# Warmup Iteration   6: 33822205.727 ops/s
# Warmup Iteration   7: 33822255.776 ops/s
# Warmup Iteration   8: 33508104.707 ops/s
# Warmup Iteration   9: 33892288.941 ops/s
# Warmup Iteration  10: 33937348.022 ops/s
# Warmup Iteration  11: 34000222.237 ops/s
# Warmup Iteration  12: 33784105.512 ops/s
# Warmup Iteration  13: 34051619.268 ops/s
# Warmup Iteration  14: 34182568.524 ops/s
# Warmup Iteration  15: 34248511.896 ops/s
# Warmup Iteration  16: 33761711.485 ops/s
# Warmup Iteration  17: 33793556.707 ops/s
# Warmup Iteration  18: 33915473.943 ops/s
# Warmup Iteration  19: 34085767.528 ops/s
# Warmup Iteration  20: 34134614.302 ops/s
# Warmup Iteration  21: 34022710.722 ops/s
# Warmup Iteration  22: 33998771.380 ops/s
# Warmup Iteration  23: 33690049.644 ops/s
# Warmup Iteration  24: 34138187.990 ops/s
# Warmup Iteration  25: 33865134.588 ops/s
# Warmup Iteration  26: 34076584.526 ops/s
# Warmup Iteration  27: 33890097.998 ops/s
# Warmup Iteration  28: 33733397.605 ops/s
# Warmup Iteration  29: 33894824.332 ops/s
# Warmup Iteration  30: 33673190.558 ops/s
Iteration   1: 34005160.076 ops/s
Iteration   2: 33776094.133 ops/s
Iteration   3: 33843684.129 ops/s
Iteration   4: 34121271.015 ops/s
Iteration   5: 34105760.359 ops/s
Iteration   6: 34227913.602 ops/s
Iteration   7: 33851213.154 ops/s
Iteration   8: 34159207.499 ops/s
Iteration   9: 34080678.442 ops/s
Iteration  10: 33965617.194 ops/s
Iteration  11: 33993300.763 ops/s
Iteration  12: 33623863.600 ops/s
Iteration  13: 33879607.542 ops/s
Iteration  14: 34070885.249 ops/s
Iteration  15: 34221717.900 ops/s
Iteration  16: 33197010.906 ops/s
Iteration  17: 33789928.366 ops/s
Iteration  18: 33544980.619 ops/s
Iteration  19: 34104719.973 ops/s
Iteration  20: 33962419.925 ops/s
Iteration  21: 33995805.673 ops/s
Iteration  22: 33882795.482 ops/s
Iteration  23: 33075566.667 ops/s
Iteration  24: 34088900.893 ops/s
Iteration  25: 33669561.404 ops/s
Iteration  26: 33627999.204 ops/s
Iteration  27: 34143547.499 ops/s
Iteration  28: 33931811.652 ops/s
Iteration  29: 33999903.127 ops/s
Iteration  30: 33758778.956 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceWithObjects":
  33889990.167 ±(99.9%) 182774.087 ops/s [Average]
  (min, avg, max) = (33075566.667, 33889990.167, 34227913.602), stdev = 273567.670
  CI (99.9%): [33707216.080, 34072764.254] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score        Error  Units
FlowableReduceTests._Benchmark.benchmark_reduceWithObjects  thrpt   30  33889990.167 ± 182774.087  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_flowableTransformerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_flowableTransformerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 863818.864 ops/s
# Warmup Iteration   2: 951166.421 ops/s
# Warmup Iteration   3: 929710.011 ops/s
# Warmup Iteration   4: 1007104.198 ops/s
# Warmup Iteration   5: 1004294.401 ops/s
# Warmup Iteration   6: 1004899.911 ops/s
# Warmup Iteration   7: 1005583.033 ops/s
# Warmup Iteration   8: 1012263.108 ops/s
# Warmup Iteration   9: 973532.850 ops/s
# Warmup Iteration  10: 980036.526 ops/s
# Warmup Iteration  11: 996581.252 ops/s
# Warmup Iteration  12: 1008872.816 ops/s
# Warmup Iteration  13: 986950.454 ops/s
# Warmup Iteration  14: 999263.407 ops/s
# Warmup Iteration  15: 1001481.780 ops/s
# Warmup Iteration  16: 983390.146 ops/s
# Warmup Iteration  17: 1044152.348 ops/s
# Warmup Iteration  18: 1065280.249 ops/s
# Warmup Iteration  19: 1056712.929 ops/s
# Warmup Iteration  20: 1060926.055 ops/s
# Warmup Iteration  21: 1055248.120 ops/s
# Warmup Iteration  22: 1045769.379 ops/s
# Warmup Iteration  23: 1050055.754 ops/s
# Warmup Iteration  24: 1070619.796 ops/s
# Warmup Iteration  25: 1037802.311 ops/s
# Warmup Iteration  26: 1058338.401 ops/s
# Warmup Iteration  27: 1054241.360 ops/s
# Warmup Iteration  28: 1055858.606 ops/s
# Warmup Iteration  29: 1056584.997 ops/s
# Warmup Iteration  30: 1058980.195 ops/s
Iteration   1: 1059072.376 ops/s
Iteration   2: 1055046.742 ops/s
Iteration   3: 1058485.154 ops/s
Iteration   4: 1052893.573 ops/s
Iteration   5: 1061087.032 ops/s
Iteration   6: 1047023.952 ops/s
Iteration   7: 1058648.199 ops/s
Iteration   8: 1053826.278 ops/s
Iteration   9: 1059262.869 ops/s
Iteration  10: 1055308.613 ops/s
Iteration  11: 1050853.533 ops/s
Iteration  12: 1060227.805 ops/s
Iteration  13: 1055443.606 ops/s
Iteration  14: 1044991.502 ops/s
Iteration  15: 1053704.335 ops/s
Iteration  16: 1057993.119 ops/s
Iteration  17: 1046156.592 ops/s
Iteration  18: 1064480.552 ops/s
Iteration  19: 1065389.936 ops/s
Iteration  20: 1058385.670 ops/s
Iteration  21: 1050820.613 ops/s
Iteration  22: 1060538.874 ops/s
Iteration  23: 1062429.614 ops/s
Iteration  24: 1055757.035 ops/s
Iteration  25: 1047684.160 ops/s
Iteration  26: 1062247.543 ops/s
Iteration  27: 1041863.364 ops/s
Iteration  28: 1058545.615 ops/s
Iteration  29: 1058706.326 ops/s
Iteration  30: 1059854.132 ops/s


Result "io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_flowableTransformerThrows":
  1055890.957 ±(99.9%) 3959.255 ops/s [Average]
  (min, avg, max) = (1041863.364, 1055890.957, 1065389.936), stdev = 5926.027
  CI (99.9%): [1051931.702, 1059850.212] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
TransformerTest._Benchmark.benchmark_flowableTransformerThrows  thrpt   30  1055890.957 ± 3959.255  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeJustTest._Benchmark.benchmark_scalarSupplier$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeJustTest._Benchmark.benchmark_scalarSupplier

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8337762.018 ops/s
# Warmup Iteration   2: 13864579.522 ops/s
# Warmup Iteration   3: 14192377.114 ops/s
# Warmup Iteration   4: 14269802.073 ops/s
# Warmup Iteration   5: 14148781.139 ops/s
# Warmup Iteration   6: 14123577.433 ops/s
# Warmup Iteration   7: 14128117.250 ops/s
# Warmup Iteration   8: 14167764.312 ops/s
# Warmup Iteration   9: 13915566.116 ops/s
# Warmup Iteration  10: 14161729.392 ops/s
# Warmup Iteration  11: 14118635.523 ops/s
# Warmup Iteration  12: 14073984.898 ops/s
# Warmup Iteration  13: 14174525.560 ops/s
# Warmup Iteration  14: 14049765.843 ops/s
# Warmup Iteration  15: 14170171.885 ops/s
# Warmup Iteration  16: 14176213.145 ops/s
# Warmup Iteration  17: 14014923.113 ops/s
# Warmup Iteration  18: 14154858.248 ops/s
# Warmup Iteration  19: 13962050.940 ops/s
# Warmup Iteration  20: 13862444.145 ops/s
# Warmup Iteration  21: 14151326.866 ops/s
# Warmup Iteration  22: 14182460.208 ops/s
# Warmup Iteration  23: 13963288.263 ops/s
# Warmup Iteration  24: 13903009.241 ops/s
# Warmup Iteration  25: 14182069.717 ops/s
# Warmup Iteration  26: 14113837.404 ops/s
# Warmup Iteration  27: 13916277.485 ops/s
# Warmup Iteration  28: 13972565.546 ops/s
# Warmup Iteration  29: 14147344.963 ops/s
# Warmup Iteration  30: 14088105.090 ops/s
Iteration   1: 14125004.693 ops/s
Iteration   2: 14089664.852 ops/s
Iteration   3: 14211063.344 ops/s
Iteration   4: 14176175.374 ops/s
Iteration   5: 14136314.841 ops/s
Iteration   6: 14135597.537 ops/s
Iteration   7: 14125655.472 ops/s
Iteration   8: 14214061.318 ops/s
Iteration   9: 14217524.958 ops/s
Iteration  10: 14079078.063 ops/s
Iteration  11: 14192419.957 ops/s
Iteration  12: 14057370.052 ops/s
Iteration  13: 14156300.969 ops/s
Iteration  14: 14204776.787 ops/s
Iteration  15: 14098471.384 ops/s
Iteration  16: 14106497.599 ops/s
Iteration  17: 14126702.675 ops/s
Iteration  18: 14156813.797 ops/s
Iteration  19: 14115790.188 ops/s
Iteration  20: 14027615.589 ops/s
Iteration  21: 14177558.111 ops/s
Iteration  22: 14151530.064 ops/s
Iteration  23: 14209966.980 ops/s
Iteration  24: 13945767.348 ops/s
Iteration  25: 14163126.766 ops/s
Iteration  26: 13997244.412 ops/s
Iteration  27: 13950670.412 ops/s
Iteration  28: 13851618.061 ops/s
Iteration  29: 14136205.678 ops/s
Iteration  30: 14116863.280 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeJustTest._Benchmark.benchmark_scalarSupplier":
  14115115.019 ±(99.9%) 58348.197 ops/s [Average]
  (min, avg, max) = (13851618.061, 14115115.019, 14217524.958), stdev = 87332.841
  CI (99.9%): [14056766.822, 14173463.215] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score       Error  Units
MaybeJustTest._Benchmark.benchmark_scalarSupplier  thrpt   30  14115115.019 ± 58348.197  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_source$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_source

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44879035.594 ops/s
# Warmup Iteration   2: 73268119.781 ops/s
# Warmup Iteration   3: 80286275.546 ops/s
# Warmup Iteration   4: 79989225.617 ops/s
# Warmup Iteration   5: 79668014.944 ops/s
# Warmup Iteration   6: 78692400.092 ops/s
# Warmup Iteration   7: 80551487.708 ops/s
# Warmup Iteration   8: 79580741.173 ops/s
# Warmup Iteration   9: 80421776.255 ops/s
# Warmup Iteration  10: 80185148.339 ops/s
# Warmup Iteration  11: 80443193.247 ops/s
# Warmup Iteration  12: 80279340.624 ops/s
# Warmup Iteration  13: 79838685.426 ops/s
# Warmup Iteration  14: 79026425.973 ops/s
# Warmup Iteration  15: 80201956.021 ops/s
# Warmup Iteration  16: 80061140.864 ops/s
# Warmup Iteration  17: 80084389.998 ops/s
# Warmup Iteration  18: 80671845.946 ops/s
# Warmup Iteration  19: 80129988.481 ops/s
# Warmup Iteration  20: 81107990.720 ops/s
# Warmup Iteration  21: 80015322.518 ops/s
# Warmup Iteration  22: 79143873.926 ops/s
# Warmup Iteration  23: 79700319.518 ops/s
# Warmup Iteration  24: 79688673.121 ops/s
# Warmup Iteration  25: 79505864.510 ops/s
# Warmup Iteration  26: 79755363.738 ops/s
# Warmup Iteration  27: 80401857.170 ops/s
# Warmup Iteration  28: 80418726.384 ops/s
# Warmup Iteration  29: 80254444.542 ops/s
# Warmup Iteration  30: 80075437.621 ops/s
Iteration   1: 79631357.052 ops/s
Iteration   2: 80043966.761 ops/s
Iteration   3: 80445903.124 ops/s
Iteration   4: 79684274.692 ops/s
Iteration   5: 78480726.604 ops/s
Iteration   6: 80232875.804 ops/s
Iteration   7: 80006433.020 ops/s
Iteration   8: 80428420.492 ops/s
Iteration   9: 80615967.755 ops/s
Iteration  10: 79187935.441 ops/s
Iteration  11: 80171006.429 ops/s
Iteration  12: 80255287.392 ops/s
Iteration  13: 80742130.316 ops/s
Iteration  14: 80399714.664 ops/s
Iteration  15: 80516434.607 ops/s
Iteration  16: 80080675.502 ops/s
Iteration  17: 80370041.794 ops/s
Iteration  18: 80100147.034 ops/s
Iteration  19: 80162624.759 ops/s
Iteration  20: 81170403.530 ops/s
Iteration  21: 80380853.272 ops/s
Iteration  22: 80277619.860 ops/s
Iteration  23: 80214391.432 ops/s
Iteration  24: 80309730.610 ops/s
Iteration  25: 79744624.362 ops/s
Iteration  26: 80656477.312 ops/s
Iteration  27: 79755728.529 ops/s
Iteration  28: 80158097.277 ops/s
Iteration  29: 80057624.236 ops/s
Iteration  30: 80412071.807 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_source":
  80156451.516 ±(99.9%) 328862.328 ops/s [Average]
  (min, avg, max) = (78480726.604, 80156451.516, 81170403.530), stdev = 492225.689
  CI (99.9%): [79827589.187, 80485313.844] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
MaybeFromCompletableTest._Benchmark.benchmark_source  thrpt   30  80156451.516 ± 328862.328  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6665927.168 ops/s
# Warmup Iteration   2: 10707381.887 ops/s
# Warmup Iteration   3: 11420144.340 ops/s
# Warmup Iteration   4: 11179005.103 ops/s
# Warmup Iteration   5: 11284700.861 ops/s
# Warmup Iteration   6: 11407715.295 ops/s
# Warmup Iteration   7: 11437913.977 ops/s
# Warmup Iteration   8: 11449611.000 ops/s
# Warmup Iteration   9: 11387412.679 ops/s
# Warmup Iteration  10: 11451371.259 ops/s
# Warmup Iteration  11: 11421099.838 ops/s
# Warmup Iteration  12: 11502379.655 ops/s
# Warmup Iteration  13: 11410754.407 ops/s
# Warmup Iteration  14: 11401760.174 ops/s
# Warmup Iteration  15: 11414975.121 ops/s
# Warmup Iteration  16: 11450746.090 ops/s
# Warmup Iteration  17: 11412646.210 ops/s
# Warmup Iteration  18: 11504687.189 ops/s
# Warmup Iteration  19: 11534367.397 ops/s
# Warmup Iteration  20: 11526472.298 ops/s
# Warmup Iteration  21: 11498371.586 ops/s
# Warmup Iteration  22: 11361854.256 ops/s
# Warmup Iteration  23: 11482388.970 ops/s
# Warmup Iteration  24: 11507754.090 ops/s
# Warmup Iteration  25: 11429169.330 ops/s
# Warmup Iteration  26: 11462390.029 ops/s
# Warmup Iteration  27: 11457167.556 ops/s
# Warmup Iteration  28: 11456806.233 ops/s
# Warmup Iteration  29: 11429413.034 ops/s
# Warmup Iteration  30: 11498482.506 ops/s
Iteration   1: 11451302.573 ops/s
Iteration   2: 11484884.771 ops/s
Iteration   3: 11417855.710 ops/s
Iteration   4: 11528375.917 ops/s
Iteration   5: 11479572.098 ops/s
Iteration   6: 11594197.643 ops/s
Iteration   7: 11578922.575 ops/s
Iteration   8: 11512427.290 ops/s
Iteration   9: 11329898.850 ops/s
Iteration  10: 11452411.359 ops/s
Iteration  11: 11356525.250 ops/s
Iteration  12: 11394947.278 ops/s
Iteration  13: 11449621.715 ops/s
Iteration  14: 11480041.872 ops/s
Iteration  15: 11535361.263 ops/s
Iteration  16: 11609355.776 ops/s
Iteration  17: 11490507.871 ops/s
Iteration  18: 11539047.917 ops/s
Iteration  19: 11516256.780 ops/s
Iteration  20: 11556184.941 ops/s
Iteration  21: 11563890.918 ops/s
Iteration  22: 11559509.702 ops/s
Iteration  23: 11541753.882 ops/s
Iteration  24: 11547209.382 ops/s
Iteration  25: 11291089.621 ops/s
Iteration  26: 11500725.402 ops/s
Iteration  27: 11537675.864 ops/s
Iteration  28: 11514769.171 ops/s
Iteration  29: 11512525.317 ops/s
Iteration  30: 11460216.164 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnEmpty":
  11492902.162 ±(99.9%) 50690.024 ops/s [Average]
  (min, avg, max) = (11291089.621, 11492902.162, 11609355.776), stdev = 75870.448
  CI (99.9%): [11442212.138, 11543592.187] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnEmpty  thrpt   30  11492902.162 ± 50690.024  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_normalReturn$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_normalReturn

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7700802.924 ops/s
# Warmup Iteration   2: 10811115.385 ops/s
# Warmup Iteration   3: 11806929.482 ops/s
# Warmup Iteration   4: 11702175.154 ops/s
# Warmup Iteration   5: 11599083.799 ops/s
# Warmup Iteration   6: 11791837.405 ops/s
# Warmup Iteration   7: 11718151.815 ops/s
# Warmup Iteration   8: 11722219.781 ops/s
# Warmup Iteration   9: 11476311.656 ops/s
# Warmup Iteration  10: 11728908.714 ops/s
# Warmup Iteration  11: 11606443.322 ops/s
# Warmup Iteration  12: 11488995.922 ops/s
# Warmup Iteration  13: 11598512.305 ops/s
# Warmup Iteration  14: 11770737.832 ops/s
# Warmup Iteration  15: 11732989.447 ops/s
# Warmup Iteration  16: 11684581.615 ops/s
# Warmup Iteration  17: 11805633.274 ops/s
# Warmup Iteration  18: 11824234.235 ops/s
# Warmup Iteration  19: 11794042.714 ops/s
# Warmup Iteration  20: 11751200.420 ops/s
# Warmup Iteration  21: 11806818.030 ops/s
# Warmup Iteration  22: 11731729.123 ops/s
# Warmup Iteration  23: 11827154.492 ops/s
# Warmup Iteration  24: 11746363.170 ops/s
# Warmup Iteration  25: 11814183.420 ops/s
# Warmup Iteration  26: 11592589.096 ops/s
# Warmup Iteration  27: 11727528.247 ops/s
# Warmup Iteration  28: 11812770.181 ops/s
# Warmup Iteration  29: 11874295.826 ops/s
# Warmup Iteration  30: 11848521.278 ops/s
Iteration   1: 11751831.638 ops/s
Iteration   2: 11832877.461 ops/s
Iteration   3: 11728587.334 ops/s
Iteration   4: 11837010.290 ops/s
Iteration   5: 11764547.440 ops/s
Iteration   6: 11839189.026 ops/s
Iteration   7: 11806042.094 ops/s
Iteration   8: 11768514.471 ops/s
Iteration   9: 11744213.835 ops/s
Iteration  10: 11823770.507 ops/s
Iteration  11: 11808273.796 ops/s
Iteration  12: 11742552.862 ops/s
Iteration  13: 11686646.287 ops/s
Iteration  14: 11758085.633 ops/s
Iteration  15: 11801802.647 ops/s
Iteration  16: 11781868.350 ops/s
Iteration  17: 11899135.965 ops/s
Iteration  18: 11800317.247 ops/s
Iteration  19: 11838175.510 ops/s
Iteration  20: 11856266.545 ops/s
Iteration  21: 11796267.956 ops/s
Iteration  22: 11822843.000 ops/s
Iteration  23: 11862125.260 ops/s
Iteration  24: 11522821.789 ops/s
Iteration  25: 11807024.453 ops/s
Iteration  26: 11744003.984 ops/s
Iteration  27: 11799856.662 ops/s
Iteration  28: 11767832.031 ops/s
Iteration  29: 11708750.056 ops/s
Iteration  30: 11733774.635 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_normalReturn":
  11781166.959 ±(99.9%) 46028.235 ops/s [Average]
  (min, avg, max) = (11522821.789, 11781166.959, 11899135.965), stdev = 68892.901
  CI (99.9%): [11735138.724, 11827195.194] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
CompletableOnErrorXTest._Benchmark.benchmark_normalReturn  thrpt   30  11781166.959 ± 46028.235  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_upstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_upstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44927976.066 ops/s
# Warmup Iteration   2: 72107728.883 ops/s
# Warmup Iteration   3: 79298469.695 ops/s
# Warmup Iteration   4: 78801320.638 ops/s
# Warmup Iteration   5: 78565057.418 ops/s
# Warmup Iteration   6: 78556636.681 ops/s
# Warmup Iteration   7: 78928225.340 ops/s
# Warmup Iteration   8: 78927135.141 ops/s
# Warmup Iteration   9: 78957063.562 ops/s
# Warmup Iteration  10: 78145290.773 ops/s
# Warmup Iteration  11: 78628197.441 ops/s
# Warmup Iteration  12: 79158105.404 ops/s
# Warmup Iteration  13: 78779653.395 ops/s
# Warmup Iteration  14: 77449415.785 ops/s
# Warmup Iteration  15: 78526382.574 ops/s
# Warmup Iteration  16: 78682377.858 ops/s
# Warmup Iteration  17: 79001765.852 ops/s
# Warmup Iteration  18: 78685963.736 ops/s
# Warmup Iteration  19: 79528762.778 ops/s
# Warmup Iteration  20: 77830237.395 ops/s
# Warmup Iteration  21: 78539474.883 ops/s
# Warmup Iteration  22: 78787883.929 ops/s
# Warmup Iteration  23: 77305246.751 ops/s
# Warmup Iteration  24: 77948254.390 ops/s
# Warmup Iteration  25: 78616779.842 ops/s
# Warmup Iteration  26: 78479467.451 ops/s
# Warmup Iteration  27: 78551655.572 ops/s
# Warmup Iteration  28: 78123572.318 ops/s
# Warmup Iteration  29: 78903887.146 ops/s
# Warmup Iteration  30: 78491794.451 ops/s
Iteration   1: 78738659.011 ops/s
Iteration   2: 77091162.131 ops/s
Iteration   3: 78334831.432 ops/s
Iteration   4: 78726825.953 ops/s
Iteration   5: 78168055.240 ops/s
Iteration   6: 79117432.955 ops/s
Iteration   7: 77973985.465 ops/s
Iteration   8: 79002453.102 ops/s
Iteration   9: 78069002.518 ops/s
Iteration  10: 78448045.869 ops/s
Iteration  11: 78119960.930 ops/s
Iteration  12: 78254607.626 ops/s
Iteration  13: 77439954.930 ops/s
Iteration  14: 78168282.324 ops/s
Iteration  15: 78486831.416 ops/s
Iteration  16: 77467903.900 ops/s
Iteration  17: 79310667.839 ops/s
Iteration  18: 78389266.765 ops/s
Iteration  19: 78837815.052 ops/s
Iteration  20: 78230558.343 ops/s
Iteration  21: 79078554.403 ops/s
Iteration  22: 78747500.802 ops/s
Iteration  23: 78337594.090 ops/s
Iteration  24: 78871174.800 ops/s
Iteration  25: 77145328.587 ops/s
Iteration  26: 78693654.232 ops/s
Iteration  27: 78644418.080 ops/s
Iteration  28: 78378566.725 ops/s
Iteration  29: 78563029.666 ops/s
Iteration  30: 78779667.971 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_upstream":
  78387193.072 ±(99.9%) 369253.910 ops/s [Average]
  (min, avg, max) = (77091162.131, 78387193.072, 79310667.839), stdev = 552681.911
  CI (99.9%): [78017939.162, 78756446.982] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
FlowableFromCompletableTest._Benchmark.benchmark_upstream  thrpt   30  78387193.072 ± 369253.910  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_hidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_hidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19571352.325 ops/s
# Warmup Iteration   2: 23674849.009 ops/s
# Warmup Iteration   3: 26444237.532 ops/s
# Warmup Iteration   4: 25928024.419 ops/s
# Warmup Iteration   5: 26138243.751 ops/s
# Warmup Iteration   6: 26649803.935 ops/s
# Warmup Iteration   7: 26578563.906 ops/s
# Warmup Iteration   8: 26355145.461 ops/s
# Warmup Iteration   9: 26350818.883 ops/s
# Warmup Iteration  10: 26536655.142 ops/s
# Warmup Iteration  11: 26277483.206 ops/s
# Warmup Iteration  12: 26174554.083 ops/s
# Warmup Iteration  13: 26306924.762 ops/s
# Warmup Iteration  14: 26743881.820 ops/s
# Warmup Iteration  15: 26623619.667 ops/s
# Warmup Iteration  16: 26569257.985 ops/s
# Warmup Iteration  17: 26532246.927 ops/s
# Warmup Iteration  18: 26553900.357 ops/s
# Warmup Iteration  19: 26104640.652 ops/s
# Warmup Iteration  20: 26474846.725 ops/s
# Warmup Iteration  21: 26484698.541 ops/s
# Warmup Iteration  22: 26517959.413 ops/s
# Warmup Iteration  23: 25985120.527 ops/s
# Warmup Iteration  24: 26408157.915 ops/s
# Warmup Iteration  25: 26538609.239 ops/s
# Warmup Iteration  26: 26153758.094 ops/s
# Warmup Iteration  27: 26469153.299 ops/s
# Warmup Iteration  28: 26339290.356 ops/s
# Warmup Iteration  29: 26461796.631 ops/s
# Warmup Iteration  30: 26007794.280 ops/s
Iteration   1: 26452698.582 ops/s
Iteration   2: 26399884.811 ops/s
Iteration   3: 25965102.713 ops/s
Iteration   4: 26432137.022 ops/s
Iteration   5: 26291153.992 ops/s
Iteration   6: 26599452.668 ops/s
Iteration   7: 26363228.336 ops/s
Iteration   8: 26394246.488 ops/s
Iteration   9: 26485959.701 ops/s
Iteration  10: 26463285.391 ops/s
Iteration  11: 26382847.459 ops/s
Iteration  12: 26410118.434 ops/s
Iteration  13: 26486102.600 ops/s
Iteration  14: 26305066.531 ops/s
Iteration  15: 26231354.969 ops/s
Iteration  16: 26490839.626 ops/s
Iteration  17: 26512923.325 ops/s
Iteration  18: 26578877.289 ops/s
Iteration  19: 26575472.301 ops/s
Iteration  20: 26526618.625 ops/s
Iteration  21: 26354979.029 ops/s
Iteration  22: 26462777.720 ops/s
Iteration  23: 26407540.880 ops/s
Iteration  24: 26446099.219 ops/s
Iteration  25: 26416992.100 ops/s
Iteration  26: 26291398.149 ops/s
Iteration  27: 26538782.551 ops/s
Iteration  28: 26414483.957 ops/s
Iteration  29: 26171889.841 ops/s
Iteration  30: 26168247.778 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_hidden":
  26400685.403 ±(99.9%) 91831.365 ops/s [Average]
  (min, avg, max) = (25965102.713, 26400685.403, 26599452.668), stdev = 137448.874
  CI (99.9%): [26308854.038, 26492516.768] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score       Error  Units
MaybeHideTest._Benchmark.benchmark_hidden  thrpt   30  26400685.403 ± 91831.365  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_singleTransformerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_singleTransformerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 896149.828 ops/s
# Warmup Iteration   2: 968825.900 ops/s
# Warmup Iteration   3: 941951.149 ops/s
# Warmup Iteration   4: 1007615.834 ops/s
# Warmup Iteration   5: 1010243.619 ops/s
# Warmup Iteration   6: 1017872.773 ops/s
# Warmup Iteration   7: 1008353.510 ops/s
# Warmup Iteration   8: 1012097.261 ops/s
# Warmup Iteration   9: 1008103.378 ops/s
# Warmup Iteration  10: 1005431.830 ops/s
# Warmup Iteration  11: 1009614.604 ops/s
# Warmup Iteration  12: 1004800.319 ops/s
# Warmup Iteration  13: 1010847.554 ops/s
# Warmup Iteration  14: 1009198.143 ops/s
# Warmup Iteration  15: 1007791.707 ops/s
# Warmup Iteration  16: 1007280.636 ops/s
# Warmup Iteration  17: 1066602.518 ops/s
# Warmup Iteration  18: 1072444.319 ops/s
# Warmup Iteration  19: 1064506.400 ops/s
# Warmup Iteration  20: 1069655.454 ops/s
# Warmup Iteration  21: 1067608.090 ops/s
# Warmup Iteration  22: 1054369.225 ops/s
# Warmup Iteration  23: 1059431.822 ops/s
# Warmup Iteration  24: 1060236.384 ops/s
# Warmup Iteration  25: 1061875.027 ops/s
# Warmup Iteration  26: 1060492.387 ops/s
# Warmup Iteration  27: 1066459.004 ops/s
# Warmup Iteration  28: 1064016.401 ops/s
# Warmup Iteration  29: 1071541.589 ops/s
# Warmup Iteration  30: 1063119.183 ops/s
Iteration   1: 1073884.935 ops/s
Iteration   2: 1061021.857 ops/s
Iteration   3: 1069802.434 ops/s
Iteration   4: 1055494.859 ops/s
Iteration   5: 1059164.172 ops/s
Iteration   6: 1067446.532 ops/s
Iteration   7: 1063457.784 ops/s
Iteration   8: 1065775.302 ops/s
Iteration   9: 1062511.492 ops/s
Iteration  10: 1053582.758 ops/s
Iteration  11: 1060305.347 ops/s
Iteration  12: 1066592.790 ops/s
Iteration  13: 1070720.255 ops/s
Iteration  14: 1067030.999 ops/s
Iteration  15: 1062354.864 ops/s
Iteration  16: 1062312.461 ops/s
Iteration  17: 1061543.665 ops/s
Iteration  18: 1067004.595 ops/s
Iteration  19: 1067053.216 ops/s
Iteration  20: 1064313.391 ops/s
Iteration  21: 1054460.535 ops/s
Iteration  22: 1052511.338 ops/s
Iteration  23: 1060395.696 ops/s
Iteration  24: 1056977.646 ops/s
Iteration  25: 1061936.522 ops/s
Iteration  26: 1066456.511 ops/s
Iteration  27: 1047270.946 ops/s
Iteration  28: 1067372.206 ops/s
Iteration  29: 1065430.957 ops/s
Iteration  30: 1065298.993 ops/s


Result "io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_singleTransformerThrows":
  1062649.502 ±(99.9%) 3928.448 ops/s [Average]
  (min, avg, max) = (1047270.946, 1062649.502, 1073884.935), stdev = 5879.916
  CI (99.9%): [1058721.054, 1066577.950] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
TransformerTest._Benchmark.benchmark_singleTransformerThrows  thrpt   30  1062649.502 ± 3928.448  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_maybeTransformerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_maybeTransformerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 894058.456 ops/s
# Warmup Iteration   2: 960501.561 ops/s
# Warmup Iteration   3: 927538.771 ops/s
# Warmup Iteration   4: 1007541.340 ops/s
# Warmup Iteration   5: 1018708.153 ops/s
# Warmup Iteration   6: 1014995.448 ops/s
# Warmup Iteration   7: 1004332.611 ops/s
# Warmup Iteration   8: 1011936.308 ops/s
# Warmup Iteration   9: 1010518.250 ops/s
# Warmup Iteration  10: 999903.687 ops/s
# Warmup Iteration  11: 1008667.536 ops/s
# Warmup Iteration  12: 1005361.011 ops/s
# Warmup Iteration  13: 1006732.821 ops/s
# Warmup Iteration  14: 1006450.183 ops/s
# Warmup Iteration  15: 1007054.682 ops/s
# Warmup Iteration  16: 985964.976 ops/s
# Warmup Iteration  17: 1055740.915 ops/s
# Warmup Iteration  18: 1044975.671 ops/s
# Warmup Iteration  19: 1065992.897 ops/s
# Warmup Iteration  20: 1066991.283 ops/s
# Warmup Iteration  21: 1058500.745 ops/s
# Warmup Iteration  22: 1067361.363 ops/s
# Warmup Iteration  23: 1066216.188 ops/s
# Warmup Iteration  24: 1066251.277 ops/s
# Warmup Iteration  25: 1066025.152 ops/s
# Warmup Iteration  26: 1057243.555 ops/s
# Warmup Iteration  27: 1055924.022 ops/s
# Warmup Iteration  28: 1060596.676 ops/s
# Warmup Iteration  29: 1061362.244 ops/s
# Warmup Iteration  30: 1067107.794 ops/s
Iteration   1: 1060132.234 ops/s
Iteration   2: 1058197.631 ops/s
Iteration   3: 1059597.636 ops/s
Iteration   4: 1070825.124 ops/s
Iteration   5: 1062428.117 ops/s
Iteration   6: 1046224.217 ops/s
Iteration   7: 1066942.290 ops/s
Iteration   8: 1057916.699 ops/s
Iteration   9: 1057168.377 ops/s
Iteration  10: 1052904.106 ops/s
Iteration  11: 1062888.951 ops/s
Iteration  12: 1062896.245 ops/s
Iteration  13: 1064029.541 ops/s
Iteration  14: 1064707.154 ops/s
Iteration  15: 1057610.790 ops/s
Iteration  16: 1070724.747 ops/s
Iteration  17: 1072961.841 ops/s
Iteration  18: 1070996.109 ops/s
Iteration  19: 1062442.420 ops/s
Iteration  20: 1058348.559 ops/s
Iteration  21: 1065643.769 ops/s
Iteration  22: 1056027.897 ops/s
Iteration  23: 1061469.455 ops/s
Iteration  24: 1064035.076 ops/s
Iteration  25: 1068240.623 ops/s
Iteration  26: 1059798.468 ops/s
Iteration  27: 1057068.856 ops/s
Iteration  28: 1055338.009 ops/s
Iteration  29: 1061641.186 ops/s
Iteration  30: 1066300.461 ops/s


Result "io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_maybeTransformerThrows":
  1061850.220 ±(99.9%) 3932.490 ops/s [Average]
  (min, avg, max) = (1046224.217, 1061850.220, 1072961.841), stdev = 5885.966
  CI (99.9%): [1057917.730, 1065782.709] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score      Error  Units
TransformerTest._Benchmark.benchmark_maybeTransformerThrows  thrpt   30  1061850.220 ± 3932.490  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStageTest._Benchmark.benchmark_dispose2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStageTest._Benchmark.benchmark_dispose2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7367695.668 ops/s
# Warmup Iteration   2: 9950783.538 ops/s
# Warmup Iteration   3: 10962688.503 ops/s
# Warmup Iteration   4: 10995501.641 ops/s
# Warmup Iteration   5: 10921325.826 ops/s
# Warmup Iteration   6: 11038154.606 ops/s
# Warmup Iteration   7: 11085162.497 ops/s
# Warmup Iteration   8: 11013435.310 ops/s
# Warmup Iteration   9: 11003890.097 ops/s
# Warmup Iteration  10: 10982320.976 ops/s
# Warmup Iteration  11: 11001873.541 ops/s
# Warmup Iteration  12: 10902825.492 ops/s
# Warmup Iteration  13: 11031153.043 ops/s
# Warmup Iteration  14: 11054772.536 ops/s
# Warmup Iteration  15: 10870590.880 ops/s
# Warmup Iteration  16: 11049674.801 ops/s
# Warmup Iteration  17: 11247710.770 ops/s
# Warmup Iteration  18: 11297244.538 ops/s
# Warmup Iteration  19: 11179064.035 ops/s
# Warmup Iteration  20: 11312225.702 ops/s
# Warmup Iteration  21: 11150732.417 ops/s
# Warmup Iteration  22: 11158397.507 ops/s
# Warmup Iteration  23: 11268002.738 ops/s
# Warmup Iteration  24: 11264846.163 ops/s
# Warmup Iteration  25: 11271129.941 ops/s
# Warmup Iteration  26: 11210889.145 ops/s
# Warmup Iteration  27: 11215463.698 ops/s
# Warmup Iteration  28: 11206797.135 ops/s
# Warmup Iteration  29: 11159415.346 ops/s
# Warmup Iteration  30: 11139420.716 ops/s
Iteration   1: 11189046.330 ops/s
Iteration   2: 11183206.047 ops/s
Iteration   3: 11166522.280 ops/s
Iteration   4: 11146151.192 ops/s
Iteration   5: 11229917.292 ops/s
Iteration   6: 11265313.134 ops/s
Iteration   7: 11175622.769 ops/s
Iteration   8: 11015666.808 ops/s
Iteration   9: 11198402.220 ops/s
Iteration  10: 11024057.766 ops/s
Iteration  11: 11195176.325 ops/s
Iteration  12: 11162686.644 ops/s
Iteration  13: 11032446.922 ops/s
Iteration  14: 11112125.859 ops/s
Iteration  15: 11027721.449 ops/s
Iteration  16: 11113121.139 ops/s
Iteration  17: 11256741.045 ops/s
Iteration  18: 11246820.078 ops/s
Iteration  19: 11254045.083 ops/s
Iteration  20: 11158105.314 ops/s
Iteration  21: 11077846.687 ops/s
Iteration  22: 11223392.424 ops/s
Iteration  23: 11210564.939 ops/s
Iteration  24: 11245600.457 ops/s
Iteration  25: 11229137.205 ops/s
Iteration  26: 11183856.109 ops/s
Iteration  27: 11246482.739 ops/s
Iteration  28: 11169731.746 ops/s
Iteration  29: 11217554.126 ops/s
Iteration  30: 11284626.386 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStageTest._Benchmark.benchmark_dispose2":
  11174722.951 ±(99.9%) 51121.812 ops/s [Average]
  (min, avg, max) = (11015666.808, 11174722.951, 11284626.386), stdev = 76516.727
  CI (99.9%): [11123601.139, 11225844.762] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score       Error  Units
CompletableFromCompletionStageTest._Benchmark.benchmark_dispose2  thrpt   30  11174722.951 ± 51121.812  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_singleGenericsSignatureTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_singleGenericsSignatureTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33557314.127 ops/s
# Warmup Iteration   2: 52011260.822 ops/s
# Warmup Iteration   3: 50790848.404 ops/s
# Warmup Iteration   4: 50888770.642 ops/s
# Warmup Iteration   5: 51156335.349 ops/s
# Warmup Iteration   6: 51211455.973 ops/s
# Warmup Iteration   7: 49760963.115 ops/s
# Warmup Iteration   8: 50573044.261 ops/s
# Warmup Iteration   9: 51153815.456 ops/s
# Warmup Iteration  10: 51186187.000 ops/s
# Warmup Iteration  11: 49868846.938 ops/s
# Warmup Iteration  12: 50355410.632 ops/s
# Warmup Iteration  13: 50418421.281 ops/s
# Warmup Iteration  14: 50892969.588 ops/s
# Warmup Iteration  15: 51321974.052 ops/s
# Warmup Iteration  16: 51158557.506 ops/s
# Warmup Iteration  17: 51323064.944 ops/s
# Warmup Iteration  18: 51002499.802 ops/s
# Warmup Iteration  19: 51030381.448 ops/s
# Warmup Iteration  20: 50857992.012 ops/s
# Warmup Iteration  21: 49784787.235 ops/s
# Warmup Iteration  22: 50668674.306 ops/s
# Warmup Iteration  23: 50734912.150 ops/s
# Warmup Iteration  24: 50861234.099 ops/s
# Warmup Iteration  25: 51242206.752 ops/s
# Warmup Iteration  26: 51190469.155 ops/s
# Warmup Iteration  27: 51081086.507 ops/s
# Warmup Iteration  28: 50913691.333 ops/s
# Warmup Iteration  29: 51162668.330 ops/s
# Warmup Iteration  30: 50916186.111 ops/s
Iteration   1: 50957447.799 ops/s
Iteration   2: 51057287.504 ops/s
Iteration   3: 50886020.505 ops/s
Iteration   4: 50866411.292 ops/s
Iteration   5: 51071560.453 ops/s
Iteration   6: 51302014.534 ops/s
Iteration   7: 50519265.183 ops/s
Iteration   8: 50732928.736 ops/s
Iteration   9: 49861352.327 ops/s
Iteration  10: 50564731.360 ops/s
Iteration  11: 51302792.907 ops/s
Iteration  12: 51172746.140 ops/s
Iteration  13: 51404244.930 ops/s
Iteration  14: 51230935.673 ops/s
Iteration  15: 51297211.347 ops/s
Iteration  16: 51130338.884 ops/s
Iteration  17: 51311273.607 ops/s
Iteration  18: 51118487.289 ops/s
Iteration  19: 50867673.656 ops/s
Iteration  20: 49852544.047 ops/s
Iteration  21: 50480957.584 ops/s
Iteration  22: 50723537.266 ops/s
Iteration  23: 51193166.155 ops/s
Iteration  24: 51315567.031 ops/s
Iteration  25: 50755298.666 ops/s
Iteration  26: 51062971.093 ops/s
Iteration  27: 50734736.821 ops/s
Iteration  28: 50864148.147 ops/s
Iteration  29: 51348765.894 ops/s
Iteration  30: 51150781.927 ops/s


Result "io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_singleGenericsSignatureTest":
  50937906.625 ±(99.9%) 262405.452 ops/s [Average]
  (min, avg, max) = (49852544.047, 50937906.625, 51404244.930), stdev = 392756.157
  CI (99.9%): [50675501.173, 51200312.077] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ConverterTest._Benchmark.benchmark_singleGenericsSignatureTest  thrpt   30  50937906.625 ± 262405.452  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_observableGenericsSignatureTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_observableGenericsSignatureTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32301193.563 ops/s
# Warmup Iteration   2: 52178497.536 ops/s
# Warmup Iteration   3: 52024453.322 ops/s
# Warmup Iteration   4: 52262778.579 ops/s
# Warmup Iteration   5: 52457902.873 ops/s
# Warmup Iteration   6: 51245438.172 ops/s
# Warmup Iteration   7: 51805233.387 ops/s
# Warmup Iteration   8: 52224902.511 ops/s
# Warmup Iteration   9: 52354286.050 ops/s
# Warmup Iteration  10: 52456217.175 ops/s
# Warmup Iteration  11: 52517779.017 ops/s
# Warmup Iteration  12: 52550954.666 ops/s
# Warmup Iteration  13: 52189172.785 ops/s
# Warmup Iteration  14: 52433701.818 ops/s
# Warmup Iteration  15: 52133340.102 ops/s
# Warmup Iteration  16: 52529521.726 ops/s
# Warmup Iteration  17: 51863531.019 ops/s
# Warmup Iteration  18: 52291251.658 ops/s
# Warmup Iteration  19: 52355370.475 ops/s
# Warmup Iteration  20: 52271112.778 ops/s
# Warmup Iteration  21: 52268035.377 ops/s
# Warmup Iteration  22: 52369523.376 ops/s
# Warmup Iteration  23: 52021503.262 ops/s
# Warmup Iteration  24: 52334946.252 ops/s
# Warmup Iteration  25: 52286977.871 ops/s
# Warmup Iteration  26: 51981413.575 ops/s
# Warmup Iteration  27: 52668196.268 ops/s
# Warmup Iteration  28: 52342573.962 ops/s
# Warmup Iteration  29: 52108811.145 ops/s
# Warmup Iteration  30: 52591957.219 ops/s
Iteration   1: 52396085.231 ops/s
Iteration   2: 52185043.081 ops/s
Iteration   3: 51942897.109 ops/s
Iteration   4: 51732887.346 ops/s
Iteration   5: 52130047.335 ops/s
Iteration   6: 51071641.581 ops/s
Iteration   7: 52482291.457 ops/s
Iteration   8: 51966728.240 ops/s
Iteration   9: 52450983.960 ops/s
Iteration  10: 52604356.528 ops/s
Iteration  11: 52192784.071 ops/s
Iteration  12: 51805717.082 ops/s
Iteration  13: 51761741.721 ops/s
Iteration  14: 52602450.815 ops/s
Iteration  15: 52190074.722 ops/s
Iteration  16: 52279762.904 ops/s
Iteration  17: 52419774.933 ops/s
Iteration  18: 51962075.322 ops/s
Iteration  19: 51139161.553 ops/s
Iteration  20: 51983677.848 ops/s
Iteration  21: 52409958.393 ops/s
Iteration  22: 52260700.771 ops/s
Iteration  23: 51686806.640 ops/s
Iteration  24: 52669016.571 ops/s
Iteration  25: 51875488.168 ops/s
Iteration  26: 52262740.414 ops/s
Iteration  27: 52483908.444 ops/s
Iteration  28: 52400244.890 ops/s
Iteration  29: 51470233.313 ops/s
Iteration  30: 52710966.260 ops/s


Result "io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_observableGenericsSignatureTest":
  52117674.890 ±(99.9%) 280347.527 ops/s [Average]
  (min, avg, max) = (51071641.581, 52117674.890, 52710966.260), stdev = 419611.013
  CI (99.9%): [51837327.363, 52398022.417] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
ConverterTest._Benchmark.benchmark_observableGenericsSignatureTest  thrpt   30  52117674.890 ± 280347.527  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_maybeGenericsSignatureTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_maybeGenericsSignatureTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33149640.066 ops/s
# Warmup Iteration   2: 51751078.607 ops/s
# Warmup Iteration   3: 52426774.819 ops/s
# Warmup Iteration   4: 52116136.726 ops/s
# Warmup Iteration   5: 52292930.188 ops/s
# Warmup Iteration   6: 52238035.070 ops/s
# Warmup Iteration   7: 52527406.640 ops/s
# Warmup Iteration   8: 52480005.575 ops/s
# Warmup Iteration   9: 52573765.518 ops/s
# Warmup Iteration  10: 52556923.945 ops/s
# Warmup Iteration  11: 52464399.265 ops/s
# Warmup Iteration  12: 52152192.919 ops/s
# Warmup Iteration  13: 52532660.262 ops/s
# Warmup Iteration  14: 52082475.396 ops/s
# Warmup Iteration  15: 52301719.561 ops/s
# Warmup Iteration  16: 52804961.549 ops/s
# Warmup Iteration  17: 52177978.302 ops/s
# Warmup Iteration  18: 52425940.875 ops/s
# Warmup Iteration  19: 52702368.351 ops/s
# Warmup Iteration  20: 51992834.575 ops/s
# Warmup Iteration  21: 52772811.448 ops/s
# Warmup Iteration  22: 52482796.010 ops/s
# Warmup Iteration  23: 52345265.938 ops/s
# Warmup Iteration  24: 52519425.365 ops/s
# Warmup Iteration  25: 52382981.515 ops/s
# Warmup Iteration  26: 52865603.103 ops/s
# Warmup Iteration  27: 52659835.432 ops/s
# Warmup Iteration  28: 52834333.949 ops/s
# Warmup Iteration  29: 51879767.671 ops/s
# Warmup Iteration  30: 52525484.561 ops/s
Iteration   1: 52602761.862 ops/s
Iteration   2: 52570999.337 ops/s
Iteration   3: 52047158.083 ops/s
Iteration   4: 53015558.288 ops/s
Iteration   5: 52145488.442 ops/s
Iteration   6: 53011102.479 ops/s
Iteration   7: 52644042.459 ops/s
Iteration   8: 52578797.634 ops/s
Iteration   9: 52722117.599 ops/s
Iteration  10: 52598387.984 ops/s
Iteration  11: 52621350.448 ops/s
Iteration  12: 52178593.590 ops/s
Iteration  13: 52645678.197 ops/s
Iteration  14: 52628909.099 ops/s
Iteration  15: 51511602.667 ops/s
Iteration  16: 52778065.657 ops/s
Iteration  17: 52522228.838 ops/s
Iteration  18: 52713817.584 ops/s
Iteration  19: 52691630.192 ops/s
Iteration  20: 52419071.778 ops/s
Iteration  21: 52678301.260 ops/s
Iteration  22: 52412986.712 ops/s
Iteration  23: 51843852.086 ops/s
Iteration  24: 51627103.144 ops/s
Iteration  25: 52926271.362 ops/s
Iteration  26: 52661185.113 ops/s
Iteration  27: 51869087.684 ops/s
Iteration  28: 52497097.412 ops/s
Iteration  29: 52764468.898 ops/s
Iteration  30: 52761905.409 ops/s


Result "io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_maybeGenericsSignatureTest":
  52489654.043 ±(99.9%) 255221.099 ops/s [Average]
  (min, avg, max) = (51511602.667, 52489654.043, 53015558.288), stdev = 382002.955
  CI (99.9%): [52234432.944, 52744875.143] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ConverterTest._Benchmark.benchmark_maybeGenericsSignatureTest  thrpt   30  52489654.043 ± 255221.099  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onCompleteThrows2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onCompleteThrows2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 833824.729 ops/s
# Warmup Iteration   2: 896178.536 ops/s
# Warmup Iteration   3: 906365.134 ops/s
# Warmup Iteration   4: 972660.797 ops/s
# Warmup Iteration   5: 971730.027 ops/s
# Warmup Iteration   6: 965159.522 ops/s
# Warmup Iteration   7: 957084.340 ops/s
# Warmup Iteration   8: 975011.654 ops/s
# Warmup Iteration   9: 966125.419 ops/s
# Warmup Iteration  10: 973711.686 ops/s
# Warmup Iteration  11: 971687.486 ops/s
# Warmup Iteration  12: 970313.509 ops/s
# Warmup Iteration  13: 972477.183 ops/s
# Warmup Iteration  14: 968336.676 ops/s
# Warmup Iteration  15: 964451.095 ops/s
# Warmup Iteration  16: 953438.868 ops/s
# Warmup Iteration  17: 1017246.160 ops/s
# Warmup Iteration  18: 1014446.461 ops/s
# Warmup Iteration  19: 1009173.303 ops/s
# Warmup Iteration  20: 1015927.405 ops/s
# Warmup Iteration  21: 999028.013 ops/s
# Warmup Iteration  22: 1017090.743 ops/s
# Warmup Iteration  23: 1007173.181 ops/s
# Warmup Iteration  24: 1013860.902 ops/s
# Warmup Iteration  25: 1017785.731 ops/s
# Warmup Iteration  26: 1021173.419 ops/s
# Warmup Iteration  27: 1017365.930 ops/s
# Warmup Iteration  28: 1027362.041 ops/s
# Warmup Iteration  29: 1015337.784 ops/s
# Warmup Iteration  30: 1018931.167 ops/s
Iteration   1: 1020016.688 ops/s
Iteration   2: 1010538.497 ops/s
Iteration   3: 1019093.430 ops/s
Iteration   4: 1013583.288 ops/s
Iteration   5: 1002806.162 ops/s
Iteration   6: 1001421.203 ops/s
Iteration   7: 1014403.454 ops/s
Iteration   8: 1012762.339 ops/s
Iteration   9: 1021503.701 ops/s
Iteration  10: 1017678.210 ops/s
Iteration  11: 1016265.451 ops/s
Iteration  12: 1021888.917 ops/s
Iteration  13: 1020400.717 ops/s
Iteration  14: 1018691.995 ops/s
Iteration  15: 1001229.319 ops/s
Iteration  16: 1015169.181 ops/s
Iteration  17: 1018756.620 ops/s
Iteration  18: 1013219.058 ops/s
Iteration  19: 1017118.498 ops/s
Iteration  20: 1021340.452 ops/s
Iteration  21: 1015676.400 ops/s
Iteration  22: 1013285.028 ops/s
Iteration  23: 1019604.600 ops/s
Iteration  24: 986981.476 ops/s
Iteration  25: 1019609.504 ops/s
Iteration  26: 1027700.627 ops/s
Iteration  27: 1014012.104 ops/s
Iteration  28: 1026111.522 ops/s
Iteration  29: 1012896.742 ops/s
Iteration  30: 1009232.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_onCompleteThrows2":
  1014766.582 ±(99.9%) 5475.664 ops/s [Average]
  (min, avg, max) = (986981.476, 1014766.582, 1027700.627), stdev = 8195.716
  CI (99.9%): [1009290.919, 1020242.246] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
CompletableCreateTest._Benchmark.benchmark_onCompleteThrows2  thrpt   30  1014766.582 ± 5475.664  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_observableConverterThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_observableConverterThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 874895.195 ops/s
# Warmup Iteration   2: 970949.971 ops/s
# Warmup Iteration   3: 943422.879 ops/s
# Warmup Iteration   4: 1008677.024 ops/s
# Warmup Iteration   5: 1008932.498 ops/s
# Warmup Iteration   6: 1013712.121 ops/s
# Warmup Iteration   7: 1003408.389 ops/s
# Warmup Iteration   8: 1014117.875 ops/s
# Warmup Iteration   9: 1014671.078 ops/s
# Warmup Iteration  10: 1009348.961 ops/s
# Warmup Iteration  11: 1011934.384 ops/s
# Warmup Iteration  12: 1009357.986 ops/s
# Warmup Iteration  13: 1007510.060 ops/s
# Warmup Iteration  14: 1003835.178 ops/s
# Warmup Iteration  15: 999224.542 ops/s
# Warmup Iteration  16: 1007032.349 ops/s
# Warmup Iteration  17: 1061430.896 ops/s
# Warmup Iteration  18: 1067024.908 ops/s
# Warmup Iteration  19: 1064399.514 ops/s
# Warmup Iteration  20: 1068166.582 ops/s
# Warmup Iteration  21: 1058759.471 ops/s
# Warmup Iteration  22: 1057516.136 ops/s
# Warmup Iteration  23: 1065219.337 ops/s
# Warmup Iteration  24: 1062077.680 ops/s
# Warmup Iteration  25: 1065168.131 ops/s
# Warmup Iteration  26: 1072792.771 ops/s
# Warmup Iteration  27: 1068030.346 ops/s
# Warmup Iteration  28: 1070821.735 ops/s
# Warmup Iteration  29: 1062684.295 ops/s
# Warmup Iteration  30: 1051591.695 ops/s
Iteration   1: 1064839.245 ops/s
Iteration   2: 1052045.750 ops/s
Iteration   3: 1060068.942 ops/s
Iteration   4: 1070873.876 ops/s
Iteration   5: 1073610.754 ops/s
Iteration   6: 1048331.115 ops/s
Iteration   7: 1065035.360 ops/s
Iteration   8: 1069455.364 ops/s
Iteration   9: 1065028.259 ops/s
Iteration  10: 1072614.727 ops/s
Iteration  11: 1068802.974 ops/s
Iteration  12: 1071060.045 ops/s
Iteration  13: 1070547.646 ops/s
Iteration  14: 1064570.392 ops/s
Iteration  15: 1069899.967 ops/s
Iteration  16: 1064135.057 ops/s
Iteration  17: 1062258.751 ops/s
Iteration  18: 1063938.145 ops/s
Iteration  19: 1059983.521 ops/s
Iteration  20: 1042634.913 ops/s
Iteration  21: 1064226.783 ops/s
Iteration  22: 1063515.510 ops/s
Iteration  23: 1060839.659 ops/s
Iteration  24: 1064650.888 ops/s
Iteration  25: 1062534.259 ops/s
Iteration  26: 1065855.121 ops/s
Iteration  27: 1064807.730 ops/s
Iteration  28: 1070103.149 ops/s
Iteration  29: 1067490.682 ops/s
Iteration  30: 1062782.414 ops/s


Result "io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_observableConverterThrows":
  1064218.033 ±(99.9%) 4547.127 ops/s [Average]
  (min, avg, max) = (1042634.913, 1064218.033, 1073610.754), stdev = 6805.926
  CI (99.9%): [1059670.907, 1068765.160] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
ConverterTest._Benchmark.benchmark_observableConverterThrows  thrpt   30  1064218.033 ± 4547.127  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_maybeConverterThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_maybeConverterThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 887201.092 ops/s
# Warmup Iteration   2: 928113.026 ops/s
# Warmup Iteration   3: 1000812.581 ops/s
# Warmup Iteration   4: 998693.244 ops/s
# Warmup Iteration   5: 1001988.090 ops/s
# Warmup Iteration   6: 1001042.194 ops/s
# Warmup Iteration   7: 1007149.848 ops/s
# Warmup Iteration   8: 992145.300 ops/s
# Warmup Iteration   9: 988116.647 ops/s
# Warmup Iteration  10: 991871.261 ops/s
# Warmup Iteration  11: 995412.098 ops/s
# Warmup Iteration  12: 995657.094 ops/s
# Warmup Iteration  13: 996575.426 ops/s
# Warmup Iteration  14: 997537.340 ops/s
# Warmup Iteration  15: 991731.571 ops/s
# Warmup Iteration  16: 1000262.470 ops/s
# Warmup Iteration  17: 1056880.998 ops/s
# Warmup Iteration  18: 1052722.875 ops/s
# Warmup Iteration  19: 1056864.439 ops/s
# Warmup Iteration  20: 1050219.728 ops/s
# Warmup Iteration  21: 1059821.766 ops/s
# Warmup Iteration  22: 1059905.320 ops/s
# Warmup Iteration  23: 1055200.294 ops/s
# Warmup Iteration  24: 1055119.162 ops/s
# Warmup Iteration  25: 1036778.948 ops/s
# Warmup Iteration  26: 1055826.320 ops/s
# Warmup Iteration  27: 1052289.304 ops/s
# Warmup Iteration  28: 1055544.727 ops/s
# Warmup Iteration  29: 1055085.572 ops/s
# Warmup Iteration  30: 1058679.916 ops/s
Iteration   1: 1038400.160 ops/s
Iteration   2: 1063165.444 ops/s
Iteration   3: 1057370.032 ops/s
Iteration   4: 1049072.677 ops/s
Iteration   5: 1055866.871 ops/s
Iteration   6: 1061751.200 ops/s
Iteration   7: 1044371.572 ops/s
Iteration   8: 1054966.279 ops/s
Iteration   9: 1049187.036 ops/s
Iteration  10: 1035185.247 ops/s
Iteration  11: 1055154.162 ops/s
Iteration  12: 1048397.346 ops/s
Iteration  13: 1052605.204 ops/s
Iteration  14: 1051035.381 ops/s
Iteration  15: 1050387.432 ops/s
Iteration  16: 1057510.831 ops/s
Iteration  17: 1044908.185 ops/s
Iteration  18: 1055668.649 ops/s
Iteration  19: 1056198.766 ops/s
Iteration  20: 1051087.192 ops/s
Iteration  21: 1056589.725 ops/s
Iteration  22: 1047106.361 ops/s
Iteration  23: 1047991.709 ops/s
Iteration  24: 1051028.215 ops/s
Iteration  25: 1051584.574 ops/s
Iteration  26: 1056668.846 ops/s
Iteration  27: 1044852.643 ops/s
Iteration  28: 1048893.243 ops/s
Iteration  29: 1045836.703 ops/s
Iteration  30: 1056761.699 ops/s


Result "io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_maybeConverterThrows":
  1051320.113 ±(99.9%) 4199.285 ops/s [Average]
  (min, avg, max) = (1035185.247, 1051320.113, 1063165.444), stdev = 6285.293
  CI (99.9%): [1047120.828, 1055519.398] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score      Error  Units
ConverterTest._Benchmark.benchmark_maybeConverterThrows  thrpt   30  1051320.113 ± 4199.285  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_skipLastWithNegativeCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_skipLastWithNegativeCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 779988.314 ops/s
# Warmup Iteration   2: 920342.793 ops/s
# Warmup Iteration   3: 932091.021 ops/s
# Warmup Iteration   4: 985840.628 ops/s
# Warmup Iteration   5: 991386.762 ops/s
# Warmup Iteration   6: 990994.418 ops/s
# Warmup Iteration   7: 989961.213 ops/s
# Warmup Iteration   8: 980060.865 ops/s
# Warmup Iteration   9: 977430.078 ops/s
# Warmup Iteration  10: 962789.577 ops/s
# Warmup Iteration  11: 987009.512 ops/s
# Warmup Iteration  12: 986812.583 ops/s
# Warmup Iteration  13: 976150.936 ops/s
# Warmup Iteration  14: 988425.155 ops/s
# Warmup Iteration  15: 971185.669 ops/s
# Warmup Iteration  16: 983140.344 ops/s
# Warmup Iteration  17: 1044323.562 ops/s
# Warmup Iteration  18: 1030645.287 ops/s
# Warmup Iteration  19: 1039468.895 ops/s
# Warmup Iteration  20: 1051299.312 ops/s
# Warmup Iteration  21: 1045355.435 ops/s
# Warmup Iteration  22: 1019950.151 ops/s
# Warmup Iteration  23: 1051186.868 ops/s
# Warmup Iteration  24: 1034242.408 ops/s
# Warmup Iteration  25: 1051154.994 ops/s
# Warmup Iteration  26: 1047760.867 ops/s
# Warmup Iteration  27: 1044551.554 ops/s
# Warmup Iteration  28: 1032553.851 ops/s
# Warmup Iteration  29: 1049219.042 ops/s
# Warmup Iteration  30: 1051679.640 ops/s
Iteration   1: 1050325.457 ops/s
Iteration   2: 1042560.940 ops/s
Iteration   3: 1051079.231 ops/s
Iteration   4: 1052288.878 ops/s
Iteration   5: 1048994.185 ops/s
Iteration   6: 1047935.746 ops/s
Iteration   7: 1037252.330 ops/s
Iteration   8: 1051344.860 ops/s
Iteration   9: 1045539.239 ops/s
Iteration  10: 1043359.978 ops/s
Iteration  11: 1039830.242 ops/s
Iteration  12: 1046259.183 ops/s
Iteration  13: 1050374.249 ops/s
Iteration  14: 1049771.117 ops/s
Iteration  15: 1043794.819 ops/s
Iteration  16: 1042974.798 ops/s
Iteration  17: 1043201.631 ops/s
Iteration  18: 1021371.989 ops/s
Iteration  19: 1040425.619 ops/s
Iteration  20: 1044861.841 ops/s
Iteration  21: 1047074.018 ops/s
Iteration  22: 1030749.823 ops/s
Iteration  23: 1044332.605 ops/s
Iteration  24: 1044444.526 ops/s
Iteration  25: 1040522.559 ops/s
Iteration  26: 1053913.111 ops/s
Iteration  27: 1047453.656 ops/s
Iteration  28: 1045545.916 ops/s
Iteration  29: 1051838.548 ops/s
Iteration  30: 1051353.980 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_skipLastWithNegativeCount":
  1045025.836 ±(99.9%) 4509.664 ops/s [Average]
  (min, avg, max) = (1021371.989, 1045025.836, 1053913.111), stdev = 6749.853
  CI (99.9%): [1040516.172, 1049535.499] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
ObservableSkipLastTest._Benchmark.benchmark_skipLastWithNegativeCount  thrpt   30  1045025.836 ± 4509.664  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarMapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarMapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 668198.742 ops/s
# Warmup Iteration   2: 785310.860 ops/s
# Warmup Iteration   3: 815342.921 ops/s
# Warmup Iteration   4: 870927.570 ops/s
# Warmup Iteration   5: 876942.760 ops/s
# Warmup Iteration   6: 874573.371 ops/s
# Warmup Iteration   7: 869650.356 ops/s
# Warmup Iteration   8: 873525.097 ops/s
# Warmup Iteration   9: 874833.281 ops/s
# Warmup Iteration  10: 866882.819 ops/s
# Warmup Iteration  11: 874610.535 ops/s
# Warmup Iteration  12: 863011.204 ops/s
# Warmup Iteration  13: 869764.173 ops/s
# Warmup Iteration  14: 865735.722 ops/s
# Warmup Iteration  15: 870536.708 ops/s
# Warmup Iteration  16: 867621.554 ops/s
# Warmup Iteration  17: 913331.477 ops/s
# Warmup Iteration  18: 912453.250 ops/s
# Warmup Iteration  19: 921974.635 ops/s
# Warmup Iteration  20: 906723.580 ops/s
# Warmup Iteration  21: 911754.439 ops/s
# Warmup Iteration  22: 895177.244 ops/s
# Warmup Iteration  23: 906200.592 ops/s
# Warmup Iteration  24: 910958.371 ops/s
# Warmup Iteration  25: 917062.007 ops/s
# Warmup Iteration  26: 910663.764 ops/s
# Warmup Iteration  27: 919147.476 ops/s
# Warmup Iteration  28: 921264.451 ops/s
# Warmup Iteration  29: 895857.332 ops/s
# Warmup Iteration  30: 910219.369 ops/s
Iteration   1: 909733.813 ops/s
Iteration   2: 910757.575 ops/s
Iteration   3: 916298.037 ops/s
Iteration   4: 915041.206 ops/s
Iteration   5: 916561.514 ops/s
Iteration   6: 916437.000 ops/s
Iteration   7: 912556.720 ops/s
Iteration   8: 904037.045 ops/s
Iteration   9: 910659.660 ops/s
Iteration  10: 916653.936 ops/s
Iteration  11: 909933.647 ops/s
Iteration  12: 917598.441 ops/s
Iteration  13: 912122.484 ops/s
Iteration  14: 914692.870 ops/s
Iteration  15: 909910.249 ops/s
Iteration  16: 917248.286 ops/s
Iteration  17: 897672.013 ops/s
Iteration  18: 915672.124 ops/s
Iteration  19: 912282.563 ops/s
Iteration  20: 913454.497 ops/s
Iteration  21: 908764.672 ops/s
Iteration  22: 914240.223 ops/s
Iteration  23: 914621.719 ops/s
Iteration  24: 906457.941 ops/s
Iteration  25: 919158.758 ops/s
Iteration  26: 909953.507 ops/s
Iteration  27: 913502.170 ops/s
Iteration  28: 897547.705 ops/s
Iteration  29: 915343.700 ops/s
Iteration  30: 919414.932 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarMapperCrash":
  912277.634 ±(99.9%) 3598.573 ops/s [Average]
  (min, avg, max) = (897547.705, 912277.634, 919414.932), stdev = 5386.175
  CI (99.9%): [908679.060, 915876.207] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_scalarMapperCrash  thrpt   30  912277.634 ± 3598.573  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_hasSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_hasSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43483967.715 ops/s
# Warmup Iteration   2: 69934723.061 ops/s
# Warmup Iteration   3: 67674038.733 ops/s
# Warmup Iteration   4: 67932914.423 ops/s
# Warmup Iteration   5: 66793841.605 ops/s
# Warmup Iteration   6: 67259865.265 ops/s
# Warmup Iteration   7: 67540286.830 ops/s
# Warmup Iteration   8: 67448249.951 ops/s
# Warmup Iteration   9: 67482840.764 ops/s
# Warmup Iteration  10: 67768746.643 ops/s
# Warmup Iteration  11: 66972564.950 ops/s
# Warmup Iteration  12: 67260254.162 ops/s
# Warmup Iteration  13: 67669711.799 ops/s
# Warmup Iteration  14: 67229050.851 ops/s
# Warmup Iteration  15: 67634475.454 ops/s
# Warmup Iteration  16: 66413129.912 ops/s
# Warmup Iteration  17: 68118355.252 ops/s
# Warmup Iteration  18: 68629034.040 ops/s
# Warmup Iteration  19: 68047818.029 ops/s
# Warmup Iteration  20: 68336758.868 ops/s
# Warmup Iteration  21: 68267812.867 ops/s
# Warmup Iteration  22: 67120597.148 ops/s
# Warmup Iteration  23: 67170871.981 ops/s
# Warmup Iteration  24: 67503994.607 ops/s
# Warmup Iteration  25: 66674354.235 ops/s
# Warmup Iteration  26: 68344808.236 ops/s
# Warmup Iteration  27: 68379023.940 ops/s
# Warmup Iteration  28: 67463889.545 ops/s
# Warmup Iteration  29: 68002029.372 ops/s
# Warmup Iteration  30: 68286986.153 ops/s
Iteration   1: 68134334.525 ops/s
Iteration   2: 68236625.206 ops/s
Iteration   3: 68131405.525 ops/s
Iteration   4: 67921612.871 ops/s
Iteration   5: 68359341.887 ops/s
Iteration   6: 68511428.960 ops/s
Iteration   7: 68196492.513 ops/s
Iteration   8: 68070029.588 ops/s
Iteration   9: 68185344.357 ops/s
Iteration  10: 67964349.067 ops/s
Iteration  11: 67472378.378 ops/s
Iteration  12: 68035780.438 ops/s
Iteration  13: 67460143.851 ops/s
Iteration  14: 67816842.289 ops/s
Iteration  15: 68155513.814 ops/s
Iteration  16: 68204834.378 ops/s
Iteration  17: 67052160.956 ops/s
Iteration  18: 68322527.985 ops/s
Iteration  19: 68244179.670 ops/s
Iteration  20: 68195677.858 ops/s
Iteration  21: 67576373.709 ops/s
Iteration  22: 66698801.165 ops/s
Iteration  23: 68158819.049 ops/s
Iteration  24: 68373189.220 ops/s
Iteration  25: 67937485.661 ops/s
Iteration  26: 68147625.152 ops/s
Iteration  27: 67339583.999 ops/s
Iteration  28: 67739233.395 ops/s
Iteration  29: 67969430.398 ops/s
Iteration  30: 68243347.260 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_hasSource":
  67961829.771 ±(99.9%) 275240.015 ops/s [Average]
  (min, avg, max) = (66698801.165, 67961829.771, 68511428.960), stdev = 411966.328
  CI (99.9%): [67686589.756, 68237069.785] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
MaybeContainsTest._Benchmark.benchmark_hasSource  thrpt   30  67961829.771 ± 275240.015  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_upstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_upstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44646617.010 ops/s
# Warmup Iteration   2: 73312321.075 ops/s
# Warmup Iteration   3: 78822830.017 ops/s
# Warmup Iteration   4: 78610520.223 ops/s
# Warmup Iteration   5: 78703606.437 ops/s
# Warmup Iteration   6: 78563068.401 ops/s
# Warmup Iteration   7: 79315775.502 ops/s
# Warmup Iteration   8: 78841407.781 ops/s
# Warmup Iteration   9: 79156059.506 ops/s
# Warmup Iteration  10: 77549627.279 ops/s
# Warmup Iteration  11: 78487467.972 ops/s
# Warmup Iteration  12: 78650454.823 ops/s
# Warmup Iteration  13: 77370906.166 ops/s
# Warmup Iteration  14: 78418868.339 ops/s
# Warmup Iteration  15: 78619618.400 ops/s
# Warmup Iteration  16: 77782704.279 ops/s
# Warmup Iteration  17: 78609531.592 ops/s
# Warmup Iteration  18: 79065096.559 ops/s
# Warmup Iteration  19: 79207274.289 ops/s
# Warmup Iteration  20: 78622945.539 ops/s
# Warmup Iteration  21: 78221010.361 ops/s
# Warmup Iteration  22: 78686154.207 ops/s
# Warmup Iteration  23: 79123985.030 ops/s
# Warmup Iteration  24: 79033924.565 ops/s
# Warmup Iteration  25: 79190125.763 ops/s
# Warmup Iteration  26: 79140271.018 ops/s
# Warmup Iteration  27: 78972962.167 ops/s
# Warmup Iteration  28: 78666750.538 ops/s
# Warmup Iteration  29: 77978562.077 ops/s
# Warmup Iteration  30: 78880060.814 ops/s
Iteration   1: 78403002.482 ops/s
Iteration   2: 78874429.355 ops/s
Iteration   3: 78562555.787 ops/s
Iteration   4: 78873186.751 ops/s
Iteration   5: 78870017.985 ops/s
Iteration   6: 78648287.250 ops/s
Iteration   7: 78128216.769 ops/s
Iteration   8: 78578942.280 ops/s
Iteration   9: 78759229.636 ops/s
Iteration  10: 79093316.473 ops/s
Iteration  11: 78954134.337 ops/s
Iteration  12: 78237816.127 ops/s
Iteration  13: 79068270.907 ops/s
Iteration  14: 78428182.085 ops/s
Iteration  15: 78676188.464 ops/s
Iteration  16: 78670656.931 ops/s
Iteration  17: 79095766.802 ops/s
Iteration  18: 78237368.521 ops/s
Iteration  19: 77895623.932 ops/s
Iteration  20: 78232517.998 ops/s
Iteration  21: 78853508.995 ops/s
Iteration  22: 79471943.136 ops/s
Iteration  23: 78427156.700 ops/s
Iteration  24: 78670265.418 ops/s
Iteration  25: 79164918.512 ops/s
Iteration  26: 78506939.819 ops/s
Iteration  27: 77776014.865 ops/s
Iteration  28: 79328269.838 ops/s
Iteration  29: 78657598.280 ops/s
Iteration  30: 78352551.626 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCompletableTest._Benchmark.benchmark_upstream":
  78649895.935 ±(99.9%) 268054.214 ops/s [Average]
  (min, avg, max) = (77776014.865, 78649895.935, 79471943.136), stdev = 401210.959
  CI (99.9%): [78381841.721, 78917950.149] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
ObservableFromCompletableTest._Benchmark.benchmark_upstream  thrpt   30  78649895.935 ± 268054.214  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUnsafeTest._Benchmark.benchmark_unsafeCreateThrowsNPE$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUnsafeTest._Benchmark.benchmark_unsafeCreateThrowsNPE

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 792243.119 ops/s
# Warmup Iteration   2: 861432.157 ops/s
# Warmup Iteration   3: 842289.524 ops/s
# Warmup Iteration   4: 921210.364 ops/s
# Warmup Iteration   5: 924131.802 ops/s
# Warmup Iteration   6: 926693.301 ops/s
# Warmup Iteration   7: 919616.022 ops/s
# Warmup Iteration   8: 927777.961 ops/s
# Warmup Iteration   9: 919775.973 ops/s
# Warmup Iteration  10: 917272.255 ops/s
# Warmup Iteration  11: 926082.353 ops/s
# Warmup Iteration  12: 921808.518 ops/s
# Warmup Iteration  13: 916220.152 ops/s
# Warmup Iteration  14: 915878.100 ops/s
# Warmup Iteration  15: 913350.890 ops/s
# Warmup Iteration  16: 915223.921 ops/s
# Warmup Iteration  17: 969087.876 ops/s
# Warmup Iteration  18: 973621.074 ops/s
# Warmup Iteration  19: 962301.948 ops/s
# Warmup Iteration  20: 968270.437 ops/s
# Warmup Iteration  21: 967974.029 ops/s
# Warmup Iteration  22: 973097.240 ops/s
# Warmup Iteration  23: 964054.937 ops/s
# Warmup Iteration  24: 963083.252 ops/s
# Warmup Iteration  25: 967062.471 ops/s
# Warmup Iteration  26: 961203.805 ops/s
# Warmup Iteration  27: 957849.219 ops/s
# Warmup Iteration  28: 965640.255 ops/s
# Warmup Iteration  29: 965253.729 ops/s
# Warmup Iteration  30: 959446.889 ops/s
Iteration   1: 967566.917 ops/s
Iteration   2: 970945.375 ops/s
Iteration   3: 963842.329 ops/s
Iteration   4: 963835.279 ops/s
Iteration   5: 967773.618 ops/s
Iteration   6: 957456.362 ops/s
Iteration   7: 969265.936 ops/s
Iteration   8: 964105.977 ops/s
Iteration   9: 964998.310 ops/s
Iteration  10: 964132.671 ops/s
Iteration  11: 950507.230 ops/s
Iteration  12: 969313.172 ops/s
Iteration  13: 966121.709 ops/s
Iteration  14: 960220.153 ops/s
Iteration  15: 964744.891 ops/s
Iteration  16: 959601.382 ops/s
Iteration  17: 956931.007 ops/s
Iteration  18: 962124.495 ops/s
Iteration  19: 972098.303 ops/s
Iteration  20: 949971.941 ops/s
Iteration  21: 965060.360 ops/s
Iteration  22: 958646.709 ops/s
Iteration  23: 970726.967 ops/s
Iteration  24: 964954.940 ops/s
Iteration  25: 960085.558 ops/s
Iteration  26: 965240.000 ops/s
Iteration  27: 960824.947 ops/s
Iteration  28: 944293.704 ops/s
Iteration  29: 978466.853 ops/s
Iteration  30: 966385.543 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUnsafeTest._Benchmark.benchmark_unsafeCreateThrowsNPE":
  963341.421 ±(99.9%) 4650.148 ops/s [Average]
  (min, avg, max) = (944293.704, 963341.421, 978466.853), stdev = 6960.123
  CI (99.9%): [958691.274, 967991.569] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
CompletableUnsafeTest._Benchmark.benchmark_unsafeCreateThrowsNPE  thrpt   30  963341.421 ± 4650.148  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_doOnDisposeCalled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_doOnDisposeCalled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5719661.616 ops/s
# Warmup Iteration   2: 7513712.354 ops/s
# Warmup Iteration   3: 8432178.082 ops/s
# Warmup Iteration   4: 8515786.932 ops/s
# Warmup Iteration   5: 8498302.176 ops/s
# Warmup Iteration   6: 8542000.952 ops/s
# Warmup Iteration   7: 8539612.002 ops/s
# Warmup Iteration   8: 8510701.468 ops/s
# Warmup Iteration   9: 8464540.653 ops/s
# Warmup Iteration  10: 8522352.909 ops/s
# Warmup Iteration  11: 8542314.188 ops/s
# Warmup Iteration  12: 8510933.505 ops/s
# Warmup Iteration  13: 8524879.076 ops/s
# Warmup Iteration  14: 8556520.747 ops/s
# Warmup Iteration  15: 8499036.883 ops/s
# Warmup Iteration  16: 8495000.241 ops/s
# Warmup Iteration  17: 8575192.994 ops/s
# Warmup Iteration  18: 8509047.075 ops/s
# Warmup Iteration  19: 8518182.020 ops/s
# Warmup Iteration  20: 8494876.697 ops/s
# Warmup Iteration  21: 8559329.537 ops/s
# Warmup Iteration  22: 8560573.561 ops/s
# Warmup Iteration  23: 8534381.517 ops/s
# Warmup Iteration  24: 8569414.240 ops/s
# Warmup Iteration  25: 8454812.008 ops/s
# Warmup Iteration  26: 8568048.617 ops/s
# Warmup Iteration  27: 8458068.019 ops/s
# Warmup Iteration  28: 8504666.874 ops/s
# Warmup Iteration  29: 8572416.096 ops/s
# Warmup Iteration  30: 8466322.019 ops/s
Iteration   1: 8480165.296 ops/s
Iteration   2: 8467379.342 ops/s
Iteration   3: 8532188.578 ops/s
Iteration   4: 8499227.066 ops/s
Iteration   5: 8371567.578 ops/s
Iteration   6: 8504449.209 ops/s
Iteration   7: 8473423.417 ops/s
Iteration   8: 8544863.742 ops/s
Iteration   9: 8485338.028 ops/s
Iteration  10: 8439605.202 ops/s
Iteration  11: 8543318.491 ops/s
Iteration  12: 8497430.102 ops/s
Iteration  13: 8315718.307 ops/s
Iteration  14: 8400915.567 ops/s
Iteration  15: 8498845.594 ops/s
Iteration  16: 8517799.458 ops/s
Iteration  17: 8511003.358 ops/s
Iteration  18: 8474836.350 ops/s
Iteration  19: 8545850.168 ops/s
Iteration  20: 8527183.361 ops/s
Iteration  21: 8512461.400 ops/s
Iteration  22: 8507066.934 ops/s
Iteration  23: 8538943.579 ops/s
Iteration  24: 8497372.921 ops/s
Iteration  25: 8462744.681 ops/s
Iteration  26: 8465535.089 ops/s
Iteration  27: 8409213.475 ops/s
Iteration  28: 8483385.224 ops/s
Iteration  29: 8429273.922 ops/s
Iteration  30: 8553319.882 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDoOnTest._Benchmark.benchmark_doOnDisposeCalled":
  8483014.177 ±(99.9%) 36631.270 ops/s [Average]
  (min, avg, max) = (8315718.307, 8483014.177, 8553319.882), stdev = 54827.964
  CI (99.9%): [8446382.908, 8519645.447] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
CompletableDoOnTest._Benchmark.benchmark_doOnDisposeCalled  thrpt   30  8483014.177 ± 36631.270  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeNegative$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeNegative

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 792509.756 ops/s
# Warmup Iteration   2: 848885.185 ops/s
# Warmup Iteration   3: 943445.041 ops/s
# Warmup Iteration   4: 950025.510 ops/s
# Warmup Iteration   5: 959770.948 ops/s
# Warmup Iteration   6: 962408.344 ops/s
# Warmup Iteration   7: 960320.532 ops/s
# Warmup Iteration   8: 959087.609 ops/s
# Warmup Iteration   9: 960438.610 ops/s
# Warmup Iteration  10: 964906.276 ops/s
# Warmup Iteration  11: 952108.391 ops/s
# Warmup Iteration  12: 955795.545 ops/s
# Warmup Iteration  13: 959453.891 ops/s
# Warmup Iteration  14: 960141.882 ops/s
# Warmup Iteration  15: 951652.506 ops/s
# Warmup Iteration  16: 957071.592 ops/s
# Warmup Iteration  17: 1007814.339 ops/s
# Warmup Iteration  18: 1010928.937 ops/s
# Warmup Iteration  19: 1015155.402 ops/s
# Warmup Iteration  20: 993399.490 ops/s
# Warmup Iteration  21: 1014802.729 ops/s
# Warmup Iteration  22: 1021018.062 ops/s
# Warmup Iteration  23: 1015298.605 ops/s
# Warmup Iteration  24: 1010547.074 ops/s
# Warmup Iteration  25: 1016935.552 ops/s
# Warmup Iteration  26: 1016512.493 ops/s
# Warmup Iteration  27: 999980.901 ops/s
# Warmup Iteration  28: 1007896.588 ops/s
# Warmup Iteration  29: 1014569.179 ops/s
# Warmup Iteration  30: 1010073.149 ops/s
Iteration   1: 987898.597 ops/s
Iteration   2: 1011270.893 ops/s
Iteration   3: 1010715.001 ops/s
Iteration   4: 994123.423 ops/s
Iteration   5: 999537.156 ops/s
Iteration   6: 1011221.546 ops/s
Iteration   7: 1007215.911 ops/s
Iteration   8: 1025907.261 ops/s
Iteration   9: 1011671.981 ops/s
Iteration  10: 1012709.732 ops/s
Iteration  11: 993918.799 ops/s
Iteration  12: 1001142.917 ops/s
Iteration  13: 1012093.473 ops/s
Iteration  14: 1006519.698 ops/s
Iteration  15: 1012560.685 ops/s
Iteration  16: 1017247.573 ops/s
Iteration  17: 1015646.225 ops/s
Iteration  18: 1011861.186 ops/s
Iteration  19: 1000779.496 ops/s
Iteration  20: 1012797.294 ops/s
Iteration  21: 1015745.760 ops/s
Iteration  22: 1019013.895 ops/s
Iteration  23: 1010166.091 ops/s
Iteration  24: 1015981.323 ops/s
Iteration  25: 1019499.149 ops/s
Iteration  26: 1007099.560 ops/s
Iteration  27: 1011647.690 ops/s
Iteration  28: 1010417.305 ops/s
Iteration  29: 1014197.451 ops/s
Iteration  30: 1007376.787 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_takeNegative":
  1009599.462 ±(99.9%) 5459.820 ops/s [Average]
  (min, avg, max) = (987898.597, 1009599.462, 1025907.261), stdev = 8172.002
  CI (99.9%): [1004139.642, 1015059.282] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
ObservableTakeTest._Benchmark.benchmark_takeNegative  thrpt   30  1009599.462 ± 5459.820  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7165246.805 ops/s
# Warmup Iteration   2: 9629961.883 ops/s
# Warmup Iteration   3: 11238273.183 ops/s
# Warmup Iteration   4: 10999396.093 ops/s
# Warmup Iteration   5: 11008038.134 ops/s
# Warmup Iteration   6: 11270084.288 ops/s
# Warmup Iteration   7: 11159428.877 ops/s
# Warmup Iteration   8: 11146399.137 ops/s
# Warmup Iteration   9: 11084562.758 ops/s
# Warmup Iteration  10: 11113689.045 ops/s
# Warmup Iteration  11: 11203548.686 ops/s
# Warmup Iteration  12: 11184342.828 ops/s
# Warmup Iteration  13: 11212291.269 ops/s
# Warmup Iteration  14: 11261509.116 ops/s
# Warmup Iteration  15: 11139334.017 ops/s
# Warmup Iteration  16: 11027966.546 ops/s
# Warmup Iteration  17: 11131645.572 ops/s
# Warmup Iteration  18: 11183079.834 ops/s
# Warmup Iteration  19: 11208916.777 ops/s
# Warmup Iteration  20: 11203838.935 ops/s
# Warmup Iteration  21: 11180674.781 ops/s
# Warmup Iteration  22: 11222455.169 ops/s
# Warmup Iteration  23: 11253581.376 ops/s
# Warmup Iteration  24: 11250955.940 ops/s
# Warmup Iteration  25: 11130347.263 ops/s
# Warmup Iteration  26: 11089714.114 ops/s
# Warmup Iteration  27: 11049334.348 ops/s
# Warmup Iteration  28: 11229195.647 ops/s
# Warmup Iteration  29: 11184289.066 ops/s
# Warmup Iteration  30: 11067137.193 ops/s
Iteration   1: 11204176.621 ops/s
Iteration   2: 10985805.240 ops/s
Iteration   3: 11021379.653 ops/s
Iteration   4: 11167700.873 ops/s
Iteration   5: 11252387.610 ops/s
Iteration   6: 11251504.051 ops/s
Iteration   7: 11209730.064 ops/s
Iteration   8: 11262233.734 ops/s
Iteration   9: 11071408.584 ops/s
Iteration  10: 11190316.799 ops/s
Iteration  11: 11233142.463 ops/s
Iteration  12: 11231383.146 ops/s
Iteration  13: 11157249.164 ops/s
Iteration  14: 11157007.864 ops/s
Iteration  15: 11227022.391 ops/s
Iteration  16: 11255618.873 ops/s
Iteration  17: 11217652.425 ops/s
Iteration  18: 11194709.118 ops/s
Iteration  19: 11169190.726 ops/s
Iteration  20: 11251062.091 ops/s
Iteration  21: 11148438.794 ops/s
Iteration  22: 11267861.741 ops/s
Iteration  23: 11217551.585 ops/s
Iteration  24: 11189642.040 ops/s
Iteration  25: 11153237.793 ops/s
Iteration  26: 11088470.477 ops/s
Iteration  27: 11198563.324 ops/s
Iteration  28: 11191473.404 ops/s
Iteration  29: 11191267.337 ops/s
Iteration  30: 11182017.499 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_isDisposed":
  11184640.183 ±(99.9%) 45418.817 ops/s [Average]
  (min, avg, max) = (10985805.240, 11184640.183, 11267861.741), stdev = 67980.752
  CI (99.9%): [11139221.366, 11230058.999] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score       Error  Units
CompletableUsingTest._Benchmark.benchmark_isDisposed  thrpt   30  11184640.183 ± 45418.817  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_unsafeWithFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_unsafeWithFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 883851.123 ops/s
# Warmup Iteration   2: 991175.309 ops/s
# Warmup Iteration   3: 965258.924 ops/s
# Warmup Iteration   4: 1026587.288 ops/s
# Warmup Iteration   5: 1037436.871 ops/s
# Warmup Iteration   6: 1030240.239 ops/s
# Warmup Iteration   7: 1032419.287 ops/s
# Warmup Iteration   8: 1025471.349 ops/s
# Warmup Iteration   9: 1031957.756 ops/s
# Warmup Iteration  10: 1019200.015 ops/s
# Warmup Iteration  11: 1030739.686 ops/s
# Warmup Iteration  12: 1028096.773 ops/s
# Warmup Iteration  13: 1028117.840 ops/s
# Warmup Iteration  14: 1036225.736 ops/s
# Warmup Iteration  15: 1019781.622 ops/s
# Warmup Iteration  16: 1025490.921 ops/s
# Warmup Iteration  17: 1095506.001 ops/s
# Warmup Iteration  18: 1092547.605 ops/s
# Warmup Iteration  19: 1074024.143 ops/s
# Warmup Iteration  20: 1083937.674 ops/s
# Warmup Iteration  21: 1082186.470 ops/s
# Warmup Iteration  22: 1100102.236 ops/s
# Warmup Iteration  23: 1098763.471 ops/s
# Warmup Iteration  24: 1087054.497 ops/s
# Warmup Iteration  25: 1097221.324 ops/s
# Warmup Iteration  26: 1087452.878 ops/s
# Warmup Iteration  27: 1097054.776 ops/s
# Warmup Iteration  28: 1055958.200 ops/s
# Warmup Iteration  29: 1078031.207 ops/s
# Warmup Iteration  30: 1076034.204 ops/s
Iteration   1: 1098263.647 ops/s
Iteration   2: 1094072.360 ops/s
Iteration   3: 1089279.334 ops/s
Iteration   4: 1086026.525 ops/s
Iteration   5: 1085993.205 ops/s
Iteration   6: 1071450.749 ops/s
Iteration   7: 1089685.235 ops/s
Iteration   8: 1084632.948 ops/s
Iteration   9: 1096087.921 ops/s
Iteration  10: 1088095.952 ops/s
Iteration  11: 1102067.261 ops/s
Iteration  12: 1082400.735 ops/s
Iteration  13: 1080749.004 ops/s
Iteration  14: 1052743.995 ops/s
Iteration  15: 1096645.778 ops/s
Iteration  16: 1074276.213 ops/s
Iteration  17: 1086392.885 ops/s
Iteration  18: 1098715.681 ops/s
Iteration  19: 1094530.225 ops/s
Iteration  20: 1088467.727 ops/s
Iteration  21: 1095634.671 ops/s
Iteration  22: 1093033.224 ops/s
Iteration  23: 1104492.965 ops/s
Iteration  24: 1102392.175 ops/s
Iteration  25: 1098474.816 ops/s
Iteration  26: 1089999.218 ops/s
Iteration  27: 1092539.573 ops/s
Iteration  28: 1097677.274 ops/s
Iteration  29: 1099594.107 ops/s
Iteration  30: 1099689.764 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_unsafeWithFlowable":
  1090470.172 ±(99.9%) 7161.693 ops/s [Average]
  (min, avg, max) = (1052743.995, 1090470.172, 1104492.965), stdev = 10719.286
  CI (99.9%): [1083308.479, 1097631.866] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score      Error  Units
FlowableCreateTest._Benchmark.benchmark_unsafeWithFlowable  thrpt   30  1090470.172 ± 7161.693  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 694112.847 ops/s
# Warmup Iteration   2: 797894.220 ops/s
# Warmup Iteration   3: 897833.796 ops/s
# Warmup Iteration   4: 904989.470 ops/s
# Warmup Iteration   5: 909562.946 ops/s
# Warmup Iteration   6: 908748.058 ops/s
# Warmup Iteration   7: 912562.132 ops/s
# Warmup Iteration   8: 907869.900 ops/s
# Warmup Iteration   9: 911464.341 ops/s
# Warmup Iteration  10: 909506.023 ops/s
# Warmup Iteration  11: 901362.586 ops/s
# Warmup Iteration  12: 909718.148 ops/s
# Warmup Iteration  13: 912513.402 ops/s
# Warmup Iteration  14: 910977.105 ops/s
# Warmup Iteration  15: 905358.994 ops/s
# Warmup Iteration  16: 909201.471 ops/s
# Warmup Iteration  17: 959616.315 ops/s
# Warmup Iteration  18: 966432.898 ops/s
# Warmup Iteration  19: 956405.757 ops/s
# Warmup Iteration  20: 966056.579 ops/s
# Warmup Iteration  21: 965128.890 ops/s
# Warmup Iteration  22: 955940.868 ops/s
# Warmup Iteration  23: 953789.300 ops/s
# Warmup Iteration  24: 963939.636 ops/s
# Warmup Iteration  25: 956087.239 ops/s
# Warmup Iteration  26: 966894.954 ops/s
# Warmup Iteration  27: 955415.757 ops/s
# Warmup Iteration  28: 968689.310 ops/s
# Warmup Iteration  29: 964332.144 ops/s
# Warmup Iteration  30: 962996.557 ops/s
Iteration   1: 965322.578 ops/s
Iteration   2: 958818.676 ops/s
Iteration   3: 947717.604 ops/s
Iteration   4: 960075.658 ops/s
Iteration   5: 956757.515 ops/s
Iteration   6: 963923.104 ops/s
Iteration   7: 962997.271 ops/s
Iteration   8: 963951.187 ops/s
Iteration   9: 961016.102 ops/s
Iteration  10: 960560.685 ops/s
Iteration  11: 959107.424 ops/s
Iteration  12: 966571.494 ops/s
Iteration  13: 950036.627 ops/s
Iteration  14: 963452.208 ops/s
Iteration  15: 961750.612 ops/s
Iteration  16: 966309.944 ops/s
Iteration  17: 962219.939 ops/s
Iteration  18: 956459.968 ops/s
Iteration  19: 959156.399 ops/s
Iteration  20: 961142.009 ops/s
Iteration  21: 956812.642 ops/s
Iteration  22: 958457.649 ops/s
Iteration  23: 961725.599 ops/s
Iteration  24: 963945.379 ops/s
Iteration  25: 963329.844 ops/s
Iteration  26: 938374.328 ops/s
Iteration  27: 959739.305 ops/s
Iteration  28: 961444.245 ops/s
Iteration  29: 967656.216 ops/s
Iteration  30: 960518.259 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_error":
  959978.349 ±(99.9%) 3963.933 ops/s [Average]
  (min, avg, max) = (938374.328, 959978.349, 967656.216), stdev = 5933.029
  CI (99.9%): [956014.416, 963942.282] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
CompletableMaterializeTest._Benchmark.benchmark_error  thrpt   30  959978.349 ± 3963.933  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_emitterHasToString$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_emitterHasToString

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 481663.302 ops/s
# Warmup Iteration   2: 992842.891 ops/s
# Warmup Iteration   3: 1063073.233 ops/s
# Warmup Iteration   4: 1160257.045 ops/s
# Warmup Iteration   5: 1160565.997 ops/s
# Warmup Iteration   6: 1160956.633 ops/s
# Warmup Iteration   7: 1157508.657 ops/s
# Warmup Iteration   8: 1155979.251 ops/s
# Warmup Iteration   9: 1162374.425 ops/s
# Warmup Iteration  10: 1152045.429 ops/s
# Warmup Iteration  11: 1159602.779 ops/s
# Warmup Iteration  12: 1151575.442 ops/s
# Warmup Iteration  13: 1145081.332 ops/s
# Warmup Iteration  14: 1155688.703 ops/s
# Warmup Iteration  15: 1146577.916 ops/s
# Warmup Iteration  16: 1157708.645 ops/s
# Warmup Iteration  17: 1142649.017 ops/s
# Warmup Iteration  18: 1149384.251 ops/s
# Warmup Iteration  19: 1151140.768 ops/s
# Warmup Iteration  20: 1150736.076 ops/s
# Warmup Iteration  21: 1157171.278 ops/s
# Warmup Iteration  22: 1151925.417 ops/s
# Warmup Iteration  23: 1153786.092 ops/s
# Warmup Iteration  24: 1162465.543 ops/s
# Warmup Iteration  25: 1155876.826 ops/s
# Warmup Iteration  26: 1135872.852 ops/s
# Warmup Iteration  27: 1148250.333 ops/s
# Warmup Iteration  28: 1155373.744 ops/s
# Warmup Iteration  29: 1152174.655 ops/s
# Warmup Iteration  30: 1153465.050 ops/s
Iteration   1: 1154204.549 ops/s
Iteration   2: 1161031.239 ops/s
Iteration   3: 1157661.967 ops/s
Iteration   4: 1146668.494 ops/s
Iteration   5: 1154135.867 ops/s
Iteration   6: 1134563.699 ops/s
Iteration   7: 1154149.282 ops/s
Iteration   8: 1150889.107 ops/s
Iteration   9: 1151649.845 ops/s
Iteration  10: 1150577.851 ops/s
Iteration  11: 1156918.411 ops/s
Iteration  12: 1158697.585 ops/s
Iteration  13: 1160451.407 ops/s
Iteration  14: 1153434.192 ops/s
Iteration  15: 1155451.742 ops/s
Iteration  16: 1146195.784 ops/s
Iteration  17: 1154185.280 ops/s
Iteration  18: 1144849.891 ops/s
Iteration  19: 1156643.354 ops/s
Iteration  20: 1163756.311 ops/s
Iteration  21: 1155459.746 ops/s
Iteration  22: 1160629.339 ops/s
Iteration  23: 1133258.671 ops/s
Iteration  24: 1152289.644 ops/s
Iteration  25: 1133148.363 ops/s
Iteration  26: 1159055.329 ops/s
Iteration  27: 1158728.736 ops/s
Iteration  28: 1154190.086 ops/s
Iteration  29: 1151931.272 ops/s
Iteration  30: 1151619.360 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_emitterHasToString":
  1152547.547 ±(99.9%) 5192.170 ops/s [Average]
  (min, avg, max) = (1133148.363, 1152547.547, 1163756.311), stdev = 7771.397
  CI (99.9%): [1147355.376, 1157739.717] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
CompletableCreateTest._Benchmark.benchmark_emitterHasToString  thrpt   30  1152547.547 ± 5192.170  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3256415.682 ops/s
# Warmup Iteration   2: 4603975.470 ops/s
# Warmup Iteration   3: 5200032.125 ops/s
# Warmup Iteration   4: 5247765.958 ops/s
# Warmup Iteration   5: 5213526.658 ops/s
# Warmup Iteration   6: 5232877.819 ops/s
# Warmup Iteration   7: 5229816.412 ops/s
# Warmup Iteration   8: 5214316.963 ops/s
# Warmup Iteration   9: 5219374.307 ops/s
# Warmup Iteration  10: 5162114.250 ops/s
# Warmup Iteration  11: 5172755.100 ops/s
# Warmup Iteration  12: 5236250.668 ops/s
# Warmup Iteration  13: 5256351.851 ops/s
# Warmup Iteration  14: 5210061.519 ops/s
# Warmup Iteration  15: 5162831.216 ops/s
# Warmup Iteration  16: 5234852.259 ops/s
# Warmup Iteration  17: 5223263.311 ops/s
# Warmup Iteration  18: 5218665.032 ops/s
# Warmup Iteration  19: 5173945.293 ops/s
# Warmup Iteration  20: 5212949.847 ops/s
# Warmup Iteration  21: 5234262.174 ops/s
# Warmup Iteration  22: 5187679.624 ops/s
# Warmup Iteration  23: 5233400.120 ops/s
# Warmup Iteration  24: 5229180.852 ops/s
# Warmup Iteration  25: 5172105.967 ops/s
# Warmup Iteration  26: 5215555.020 ops/s
# Warmup Iteration  27: 5110742.122 ops/s
# Warmup Iteration  28: 5232636.935 ops/s
# Warmup Iteration  29: 5201903.921 ops/s
# Warmup Iteration  30: 5150680.089 ops/s
Iteration   1: 5199685.906 ops/s
Iteration   2: 5203082.079 ops/s
Iteration   3: 5240068.579 ops/s
Iteration   4: 5174188.448 ops/s
Iteration   5: 5193630.578 ops/s
Iteration   6: 5218485.741 ops/s
Iteration   7: 5251428.417 ops/s
Iteration   8: 5237822.391 ops/s
Iteration   9: 5191301.847 ops/s
Iteration  10: 5237275.183 ops/s
Iteration  11: 5217977.533 ops/s
Iteration  12: 5210476.489 ops/s
Iteration  13: 5222310.319 ops/s
Iteration  14: 5204811.433 ops/s
Iteration  15: 5225351.513 ops/s
Iteration  16: 5225196.867 ops/s
Iteration  17: 5223638.001 ops/s
Iteration  18: 5240778.261 ops/s
Iteration  19: 5228444.280 ops/s
Iteration  20: 5207876.343 ops/s
Iteration  21: 5074650.652 ops/s
Iteration  22: 5210046.293 ops/s
Iteration  23: 5226353.021 ops/s
Iteration  24: 5211753.952 ops/s
Iteration  25: 5210864.311 ops/s
Iteration  26: 5213854.369 ops/s
Iteration  27: 5222642.215 ops/s
Iteration  28: 5250193.581 ops/s
Iteration  29: 5205311.113 ops/s
Iteration  30: 5185652.832 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_simple":
  5212171.752 ±(99.9%) 21238.709 ops/s [Average]
  (min, avg, max) = (5074650.652, 5212171.752, 5251428.417), stdev = 31789.103
  CI (99.9%): [5190933.042, 5233410.461] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
FlowableCountTest._Benchmark.benchmark_simple  thrpt   30  5212171.752 ± 21238.709  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_toFutureList$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_toFutureList

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4544944.597 ops/s
# Warmup Iteration   2: 5806073.291 ops/s
# Warmup Iteration   3: 6962477.436 ops/s
# Warmup Iteration   4: 6940485.884 ops/s
# Warmup Iteration   5: 6820130.553 ops/s
# Warmup Iteration   6: 6928846.962 ops/s
# Warmup Iteration   7: 6837758.837 ops/s
# Warmup Iteration   8: 6839895.045 ops/s
# Warmup Iteration   9: 6875481.259 ops/s
# Warmup Iteration  10: 6954047.828 ops/s
# Warmup Iteration  11: 6864587.603 ops/s
# Warmup Iteration  12: 6880270.871 ops/s
# Warmup Iteration  13: 6918010.204 ops/s
# Warmup Iteration  14: 6881591.711 ops/s
# Warmup Iteration  15: 6845700.057 ops/s
# Warmup Iteration  16: 6915013.721 ops/s
# Warmup Iteration  17: 6847497.736 ops/s
# Warmup Iteration  18: 6947914.253 ops/s
# Warmup Iteration  19: 6891996.508 ops/s
# Warmup Iteration  20: 6907692.207 ops/s
# Warmup Iteration  21: 6905530.049 ops/s
# Warmup Iteration  22: 6905919.514 ops/s
# Warmup Iteration  23: 6923161.182 ops/s
# Warmup Iteration  24: 6771121.988 ops/s
# Warmup Iteration  25: 6884230.642 ops/s
# Warmup Iteration  26: 6928836.062 ops/s
# Warmup Iteration  27: 6893160.655 ops/s
# Warmup Iteration  28: 6876578.010 ops/s
# Warmup Iteration  29: 6892390.684 ops/s
# Warmup Iteration  30: 6877058.866 ops/s
Iteration   1: 6822534.111 ops/s
Iteration   2: 6871149.460 ops/s
Iteration   3: 6942612.774 ops/s
Iteration   4: 6897733.205 ops/s
Iteration   5: 6916410.133 ops/s
Iteration   6: 6927649.293 ops/s
Iteration   7: 6917293.518 ops/s
Iteration   8: 6872793.451 ops/s
Iteration   9: 6810852.053 ops/s
Iteration  10: 6908133.090 ops/s
Iteration  11: 6872731.782 ops/s
Iteration  12: 6883457.455 ops/s
Iteration  13: 6912949.497 ops/s
Iteration  14: 6861966.847 ops/s
Iteration  15: 6917562.879 ops/s
Iteration  16: 6874062.360 ops/s
Iteration  17: 6908192.426 ops/s
Iteration  18: 6884120.486 ops/s
Iteration  19: 6843530.772 ops/s
Iteration  20: 6781556.040 ops/s
Iteration  21: 6896316.358 ops/s
Iteration  22: 6902757.586 ops/s
Iteration  23: 6722164.471 ops/s
Iteration  24: 6832296.016 ops/s
Iteration  25: 6857752.584 ops/s
Iteration  26: 6922639.690 ops/s
Iteration  27: 6778834.405 ops/s
Iteration  28: 6887319.441 ops/s
Iteration  29: 6878737.605 ops/s
Iteration  30: 6874918.392 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_toFutureList":
  6872700.939 ±(99.9%) 33286.622 ops/s [Average]
  (min, avg, max) = (6722164.471, 6872700.939, 6942612.774), stdev = 49821.853
  CI (99.9%): [6839414.317, 6905987.562] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
BlockingFlowableToFutureTest._Benchmark.benchmark_toFutureList  thrpt   30  6872700.939 ± 33286.622  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecutionHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecutionHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2234148.896 ops/s
# Warmup Iteration   2: 3947713.795 ops/s
# Warmup Iteration   3: 4532398.555 ops/s
# Warmup Iteration   4: 4590727.583 ops/s
# Warmup Iteration   5: 4570471.529 ops/s
# Warmup Iteration   6: 4556620.224 ops/s
# Warmup Iteration   7: 4576950.280 ops/s
# Warmup Iteration   8: 4554887.286 ops/s
# Warmup Iteration   9: 4570515.620 ops/s
# Warmup Iteration  10: 4569350.901 ops/s
# Warmup Iteration  11: 4595934.770 ops/s
# Warmup Iteration  12: 4586601.092 ops/s
# Warmup Iteration  13: 4568296.243 ops/s
# Warmup Iteration  14: 4578556.998 ops/s
# Warmup Iteration  15: 4595351.973 ops/s
# Warmup Iteration  16: 4598813.845 ops/s
# Warmup Iteration  17: 4610150.277 ops/s
# Warmup Iteration  18: 4591482.594 ops/s
# Warmup Iteration  19: 4518888.218 ops/s
# Warmup Iteration  20: 4503138.020 ops/s
# Warmup Iteration  21: 4610224.177 ops/s
# Warmup Iteration  22: 4607816.531 ops/s
# Warmup Iteration  23: 4542764.776 ops/s
# Warmup Iteration  24: 4569020.056 ops/s
# Warmup Iteration  25: 4575417.301 ops/s
# Warmup Iteration  26: 4595125.742 ops/s
# Warmup Iteration  27: 4569213.087 ops/s
# Warmup Iteration  28: 4581762.719 ops/s
# Warmup Iteration  29: 4557005.107 ops/s
# Warmup Iteration  30: 4568679.577 ops/s
Iteration   1: 4589549.010 ops/s
Iteration   2: 4566181.179 ops/s
Iteration   3: 4443701.624 ops/s
Iteration   4: 4550579.447 ops/s
Iteration   5: 4561561.370 ops/s
Iteration   6: 4595316.140 ops/s
Iteration   7: 4581817.805 ops/s
Iteration   8: 4592576.561 ops/s
Iteration   9: 4578605.261 ops/s
Iteration  10: 4606953.159 ops/s
Iteration  11: 4418443.650 ops/s
Iteration  12: 4582101.182 ops/s
Iteration  13: 4596047.481 ops/s
Iteration  14: 4605908.505 ops/s
Iteration  15: 4592571.364 ops/s
Iteration  16: 4596694.949 ops/s
Iteration  17: 4573084.228 ops/s
Iteration  18: 4583641.460 ops/s
Iteration  19: 4545994.508 ops/s
Iteration  20: 4608098.903 ops/s
Iteration  21: 4547400.835 ops/s
Iteration  22: 4575184.198 ops/s
Iteration  23: 4570221.122 ops/s
Iteration  24: 4553423.889 ops/s
Iteration  25: 4547036.926 ops/s
Iteration  26: 4568410.061 ops/s
Iteration  27: 4479258.004 ops/s
Iteration  28: 4559095.721 ops/s
Iteration  29: 4595901.649 ops/s
Iteration  30: 4555088.291 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecutionHidden":
  4564014.950 ±(99.9%) 29767.765 ops/s [Average]
  (min, avg, max) = (4418443.650, 4564014.950, 4608098.903), stdev = 44554.993
  CI (99.9%): [4534247.184, 4593782.715] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecutionHidden  thrpt   30  4564014.950 ± 29767.765  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecutionHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecutionHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2307997.547 ops/s
# Warmup Iteration   2: 4133890.287 ops/s
# Warmup Iteration   3: 4748665.223 ops/s
# Warmup Iteration   4: 4692023.565 ops/s
# Warmup Iteration   5: 4742675.704 ops/s
# Warmup Iteration   6: 4777004.934 ops/s
# Warmup Iteration   7: 4752901.102 ops/s
# Warmup Iteration   8: 4798505.661 ops/s
# Warmup Iteration   9: 4802097.387 ops/s
# Warmup Iteration  10: 4780927.474 ops/s
# Warmup Iteration  11: 4774895.830 ops/s
# Warmup Iteration  12: 4776627.137 ops/s
# Warmup Iteration  13: 4757097.760 ops/s
# Warmup Iteration  14: 4751652.218 ops/s
# Warmup Iteration  15: 4770859.977 ops/s
# Warmup Iteration  16: 4755738.545 ops/s
# Warmup Iteration  17: 4796046.905 ops/s
# Warmup Iteration  18: 4785407.122 ops/s
# Warmup Iteration  19: 4817907.790 ops/s
# Warmup Iteration  20: 4738960.758 ops/s
# Warmup Iteration  21: 4776852.945 ops/s
# Warmup Iteration  22: 4793202.155 ops/s
# Warmup Iteration  23: 4656982.290 ops/s
# Warmup Iteration  24: 4785995.327 ops/s
# Warmup Iteration  25: 4748845.899 ops/s
# Warmup Iteration  26: 4772739.833 ops/s
# Warmup Iteration  27: 4759363.522 ops/s
# Warmup Iteration  28: 4788773.762 ops/s
# Warmup Iteration  29: 4760749.246 ops/s
# Warmup Iteration  30: 4810378.339 ops/s
Iteration   1: 4825186.219 ops/s
Iteration   2: 4769632.178 ops/s
Iteration   3: 4812414.032 ops/s
Iteration   4: 4792583.977 ops/s
Iteration   5: 4792776.264 ops/s
Iteration   6: 4791129.913 ops/s
Iteration   7: 4729221.468 ops/s
Iteration   8: 4791487.611 ops/s
Iteration   9: 4781638.078 ops/s
Iteration  10: 4779672.406 ops/s
Iteration  11: 4788945.807 ops/s
Iteration  12: 4758495.103 ops/s
Iteration  13: 4779276.207 ops/s
Iteration  14: 4675825.707 ops/s
Iteration  15: 4797314.399 ops/s
Iteration  16: 4785029.367 ops/s
Iteration  17: 4731915.232 ops/s
Iteration  18: 4773740.213 ops/s
Iteration  19: 4804053.810 ops/s
Iteration  20: 4770317.480 ops/s
Iteration  21: 4793624.465 ops/s
Iteration  22: 4739676.135 ops/s
Iteration  23: 4785052.119 ops/s
Iteration  24: 4776166.250 ops/s
Iteration  25: 4775087.072 ops/s
Iteration  26: 4806973.223 ops/s
Iteration  27: 4806147.631 ops/s
Iteration  28: 4796417.596 ops/s
Iteration  29: 4760642.498 ops/s
Iteration  30: 4746717.602 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecutionHidden":
  4777238.669 ±(99.9%) 19971.513 ops/s [Average]
  (min, avg, max) = (4675825.707, 4777238.669, 4825186.219), stdev = 29892.423
  CI (99.9%): [4757267.156, 4797210.182] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecutionHidden  thrpt   30  4777238.669 ± 19971.513  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_listWithBlockingFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_listWithBlockingFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4091183.513 ops/s
# Warmup Iteration   2: 5949760.721 ops/s
# Warmup Iteration   3: 6738377.433 ops/s
# Warmup Iteration   4: 6797438.406 ops/s
# Warmup Iteration   5: 6822491.521 ops/s
# Warmup Iteration   6: 6878140.373 ops/s
# Warmup Iteration   7: 6924571.284 ops/s
# Warmup Iteration   8: 6903204.986 ops/s
# Warmup Iteration   9: 6891474.875 ops/s
# Warmup Iteration  10: 6888133.689 ops/s
# Warmup Iteration  11: 6867348.392 ops/s
# Warmup Iteration  12: 6892039.419 ops/s
# Warmup Iteration  13: 6839125.908 ops/s
# Warmup Iteration  14: 6822749.655 ops/s
# Warmup Iteration  15: 6864481.662 ops/s
# Warmup Iteration  16: 6831886.637 ops/s
# Warmup Iteration  17: 6905237.126 ops/s
# Warmup Iteration  18: 6879314.923 ops/s
# Warmup Iteration  19: 6867391.106 ops/s
# Warmup Iteration  20: 6911322.142 ops/s
# Warmup Iteration  21: 6869710.205 ops/s
# Warmup Iteration  22: 6879641.822 ops/s
# Warmup Iteration  23: 6925690.832 ops/s
# Warmup Iteration  24: 6887727.070 ops/s
# Warmup Iteration  25: 6834277.065 ops/s
# Warmup Iteration  26: 6778065.349 ops/s
# Warmup Iteration  27: 6889516.758 ops/s
# Warmup Iteration  28: 6775317.128 ops/s
# Warmup Iteration  29: 6831255.989 ops/s
# Warmup Iteration  30: 6888876.309 ops/s
Iteration   1: 6833605.316 ops/s
Iteration   2: 6900424.344 ops/s
Iteration   3: 6874296.627 ops/s
Iteration   4: 6827010.344 ops/s
Iteration   5: 6888163.473 ops/s
Iteration   6: 6863664.945 ops/s
Iteration   7: 6853203.732 ops/s
Iteration   8: 6809229.420 ops/s
Iteration   9: 6895610.689 ops/s
Iteration  10: 6885515.399 ops/s
Iteration  11: 6847189.676 ops/s
Iteration  12: 6750877.696 ops/s
Iteration  13: 6867303.284 ops/s
Iteration  14: 6859304.367 ops/s
Iteration  15: 6878584.617 ops/s
Iteration  16: 6879893.297 ops/s
Iteration  17: 6897328.793 ops/s
Iteration  18: 6827126.427 ops/s
Iteration  19: 6850483.002 ops/s
Iteration  20: 6858287.523 ops/s
Iteration  21: 6933182.423 ops/s
Iteration  22: 6889047.883 ops/s
Iteration  23: 6861809.172 ops/s
Iteration  24: 6880082.332 ops/s
Iteration  25: 6914603.157 ops/s
Iteration  26: 6683750.146 ops/s
Iteration  27: 6913237.751 ops/s
Iteration  28: 6815812.258 ops/s
Iteration  29: 6892321.895 ops/s
Iteration  30: 6829402.012 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_listWithBlockingFirst":
  6858678.400 ±(99.9%) 33238.052 ops/s [Average]
  (min, avg, max) = (6683750.146, 6858678.400, 6933182.423), stdev = 49749.155
  CI (99.9%): [6825440.349, 6891916.452] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableToListTest._Benchmark.benchmark_listWithBlockingFirst  thrpt   30  6858678.400 ± 33238.052  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_seedFactory$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_seedFactory

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1482868.352 ops/s
# Warmup Iteration   2: 1877707.854 ops/s
# Warmup Iteration   3: 2324745.463 ops/s
# Warmup Iteration   4: 2318457.575 ops/s
# Warmup Iteration   5: 2333910.032 ops/s
# Warmup Iteration   6: 2320706.807 ops/s
# Warmup Iteration   7: 2323164.778 ops/s
# Warmup Iteration   8: 2326677.838 ops/s
# Warmup Iteration   9: 2299877.519 ops/s
# Warmup Iteration  10: 2320388.944 ops/s
# Warmup Iteration  11: 2309467.192 ops/s
# Warmup Iteration  12: 2327493.544 ops/s
# Warmup Iteration  13: 2326274.507 ops/s
# Warmup Iteration  14: 2316735.143 ops/s
# Warmup Iteration  15: 2341879.734 ops/s
# Warmup Iteration  16: 2318411.303 ops/s
# Warmup Iteration  17: 2336689.496 ops/s
# Warmup Iteration  18: 2281590.619 ops/s
# Warmup Iteration  19: 2327495.085 ops/s
# Warmup Iteration  20: 2331728.092 ops/s
# Warmup Iteration  21: 2319832.974 ops/s
# Warmup Iteration  22: 2308525.051 ops/s
# Warmup Iteration  23: 2324317.360 ops/s
# Warmup Iteration  24: 2313714.323 ops/s
# Warmup Iteration  25: 2331082.815 ops/s
# Warmup Iteration  26: 2314753.615 ops/s
# Warmup Iteration  27: 2292309.948 ops/s
# Warmup Iteration  28: 2305320.877 ops/s
# Warmup Iteration  29: 2324015.244 ops/s
# Warmup Iteration  30: 2313187.718 ops/s
Iteration   1: 2296731.378 ops/s
Iteration   2: 2328678.116 ops/s
Iteration   3: 2308633.960 ops/s
Iteration   4: 2325829.043 ops/s
Iteration   5: 2321457.221 ops/s
Iteration   6: 2316433.079 ops/s
Iteration   7: 2318776.080 ops/s
Iteration   8: 2313136.142 ops/s
Iteration   9: 2326335.366 ops/s
Iteration  10: 2276721.791 ops/s
Iteration  11: 2312128.746 ops/s
Iteration  12: 2248409.988 ops/s
Iteration  13: 2295165.188 ops/s
Iteration  14: 2320087.821 ops/s
Iteration  15: 2302345.669 ops/s
Iteration  16: 2304735.422 ops/s
Iteration  17: 2318585.381 ops/s
Iteration  18: 2330025.598 ops/s
Iteration  19: 2304572.762 ops/s
Iteration  20: 2292356.322 ops/s
Iteration  21: 2285331.703 ops/s
Iteration  22: 2321999.462 ops/s
Iteration  23: 2316339.982 ops/s
Iteration  24: 2335187.768 ops/s
Iteration  25: 2332947.883 ops/s
Iteration  26: 2291242.585 ops/s
Iteration  27: 2294835.869 ops/s
Iteration  28: 2316335.313 ops/s
Iteration  29: 2316926.315 ops/s
Iteration  30: 2311248.449 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_seedFactory":
  2309451.347 ±(99.9%) 12436.779 ops/s [Average]
  (min, avg, max) = (2248409.988, 2309451.347, 2335187.768), stdev = 18614.787
  CI (99.9%): [2297014.567, 2321888.126] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FlowableScanTest._Benchmark.benchmark_seedFactory  thrpt   30  2309451.347 ± 12436.779  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_simpleFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_simpleFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2633775.643 ops/s
# Warmup Iteration   2: 3400164.594 ops/s
# Warmup Iteration   3: 4102034.135 ops/s
# Warmup Iteration   4: 4140652.171 ops/s
# Warmup Iteration   5: 4103252.570 ops/s
# Warmup Iteration   6: 4088960.499 ops/s
# Warmup Iteration   7: 4118342.077 ops/s
# Warmup Iteration   8: 4111413.856 ops/s
# Warmup Iteration   9: 4079336.754 ops/s
# Warmup Iteration  10: 4105172.614 ops/s
# Warmup Iteration  11: 4111779.720 ops/s
# Warmup Iteration  12: 4093453.656 ops/s
# Warmup Iteration  13: 4122513.690 ops/s
# Warmup Iteration  14: 4106186.959 ops/s
# Warmup Iteration  15: 4108198.627 ops/s
# Warmup Iteration  16: 4105658.210 ops/s
# Warmup Iteration  17: 4097504.849 ops/s
# Warmup Iteration  18: 4109579.523 ops/s
# Warmup Iteration  19: 4087113.586 ops/s
# Warmup Iteration  20: 4130867.979 ops/s
# Warmup Iteration  21: 4033019.463 ops/s
# Warmup Iteration  22: 4110518.848 ops/s
# Warmup Iteration  23: 4096764.427 ops/s
# Warmup Iteration  24: 4099271.361 ops/s
# Warmup Iteration  25: 4031077.291 ops/s
# Warmup Iteration  26: 4068800.522 ops/s
# Warmup Iteration  27: 4108467.877 ops/s
# Warmup Iteration  28: 4061001.359 ops/s
# Warmup Iteration  29: 4086854.780 ops/s
# Warmup Iteration  30: 4129698.208 ops/s
Iteration   1: 4053821.276 ops/s
Iteration   2: 4115866.274 ops/s
Iteration   3: 4125789.095 ops/s
Iteration   4: 4146740.780 ops/s
Iteration   5: 4108372.703 ops/s
Iteration   6: 4102637.088 ops/s
Iteration   7: 4046605.142 ops/s
Iteration   8: 4103790.512 ops/s
Iteration   9: 4104109.227 ops/s
Iteration  10: 4125894.162 ops/s
Iteration  11: 4019996.647 ops/s
Iteration  12: 4103496.882 ops/s
Iteration  13: 4131935.124 ops/s
Iteration  14: 4119096.311 ops/s
Iteration  15: 4114809.346 ops/s
Iteration  16: 4095445.586 ops/s
Iteration  17: 4124505.851 ops/s
Iteration  18: 4118883.515 ops/s
Iteration  19: 4121145.638 ops/s
Iteration  20: 4120017.791 ops/s
Iteration  21: 3999288.783 ops/s
Iteration  22: 4139225.881 ops/s
Iteration  23: 4104279.996 ops/s
Iteration  24: 4128800.424 ops/s
Iteration  25: 4077426.564 ops/s
Iteration  26: 4096793.516 ops/s
Iteration  27: 4120881.298 ops/s
Iteration  28: 4108053.550 ops/s
Iteration  29: 4134653.486 ops/s
Iteration  30: 4087680.769 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCountTest._Benchmark.benchmark_simpleFlowable":
  4103334.774 ±(99.9%) 22631.346 ops/s [Average]
  (min, avg, max) = (3999288.783, 4103334.774, 4146740.780), stdev = 33873.536
  CI (99.9%): [4080703.428, 4125966.120] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableCountTest._Benchmark.benchmark_simpleFlowable  thrpt   30  4103334.774 ± 22631.346  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWith1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWith1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2333699.516 ops/s
# Warmup Iteration   2: 3505475.696 ops/s
# Warmup Iteration   3: 4103889.342 ops/s
# Warmup Iteration   4: 4049645.837 ops/s
# Warmup Iteration   5: 4045931.020 ops/s
# Warmup Iteration   6: 4077317.728 ops/s
# Warmup Iteration   7: 4049624.110 ops/s
# Warmup Iteration   8: 4011404.871 ops/s
# Warmup Iteration   9: 4049469.393 ops/s
# Warmup Iteration  10: 4082364.962 ops/s
# Warmup Iteration  11: 4065485.121 ops/s
# Warmup Iteration  12: 4058317.950 ops/s
# Warmup Iteration  13: 4038044.623 ops/s
# Warmup Iteration  14: 4051348.631 ops/s
# Warmup Iteration  15: 4081724.055 ops/s
# Warmup Iteration  16: 4048329.136 ops/s
# Warmup Iteration  17: 4051354.081 ops/s
# Warmup Iteration  18: 4049944.280 ops/s
# Warmup Iteration  19: 4051837.857 ops/s
# Warmup Iteration  20: 4082522.206 ops/s
# Warmup Iteration  21: 4042775.429 ops/s
# Warmup Iteration  22: 4097929.265 ops/s
# Warmup Iteration  23: 4070696.903 ops/s
# Warmup Iteration  24: 4062209.959 ops/s
# Warmup Iteration  25: 4077112.749 ops/s
# Warmup Iteration  26: 3980147.058 ops/s
# Warmup Iteration  27: 4056823.848 ops/s
# Warmup Iteration  28: 4049964.302 ops/s
# Warmup Iteration  29: 4056846.932 ops/s
# Warmup Iteration  30: 3989772.917 ops/s
Iteration   1: 4071207.170 ops/s
Iteration   2: 4072507.791 ops/s
Iteration   3: 4057564.825 ops/s
Iteration   4: 4045818.483 ops/s
Iteration   5: 4074983.955 ops/s
Iteration   6: 4049925.106 ops/s
Iteration   7: 4050217.130 ops/s
Iteration   8: 4051869.540 ops/s
Iteration   9: 4086606.301 ops/s
Iteration  10: 4045850.252 ops/s
Iteration  11: 4033894.591 ops/s
Iteration  12: 4073599.465 ops/s
Iteration  13: 4051862.339 ops/s
Iteration  14: 3999956.107 ops/s
Iteration  15: 4051140.354 ops/s
Iteration  16: 4027486.297 ops/s
Iteration  17: 4046276.058 ops/s
Iteration  18: 4072380.242 ops/s
Iteration  19: 4058325.036 ops/s
Iteration  20: 4043429.066 ops/s
Iteration  21: 4040281.138 ops/s
Iteration  22: 4064745.792 ops/s
Iteration  23: 4064101.454 ops/s
Iteration  24: 4047085.068 ops/s
Iteration  25: 4030062.761 ops/s
Iteration  26: 4043482.920 ops/s
Iteration  27: 4065513.454 ops/s
Iteration  28: 4035666.265 ops/s
Iteration  29: 4055731.143 ops/s
Iteration  30: 4072685.221 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableStartWithTests._Benchmark.benchmark_startWith1":
  4052808.511 ±(99.9%) 11894.623 ops/s [Average]
  (min, avg, max) = (3999956.107, 4052808.511, 4086606.301), stdev = 17803.313
  CI (99.9%): [4040913.888, 4064703.134] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableStartWithTests._Benchmark.benchmark_startWith1  thrpt   30  4052808.511 ± 11894.623  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_capacityHint$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_capacityHint

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1636191.518 ops/s
# Warmup Iteration   2: 2379781.684 ops/s
# Warmup Iteration   3: 2888800.247 ops/s
# Warmup Iteration   4: 2904613.711 ops/s
# Warmup Iteration   5: 2922600.132 ops/s
# Warmup Iteration   6: 2829481.753 ops/s
# Warmup Iteration   7: 2897663.925 ops/s
# Warmup Iteration   8: 2894148.106 ops/s
# Warmup Iteration   9: 2879060.400 ops/s
# Warmup Iteration  10: 2891408.718 ops/s
# Warmup Iteration  11: 2900528.905 ops/s
# Warmup Iteration  12: 2907837.059 ops/s
# Warmup Iteration  13: 2898179.464 ops/s
# Warmup Iteration  14: 2901274.743 ops/s
# Warmup Iteration  15: 2903815.900 ops/s
# Warmup Iteration  16: 2908378.531 ops/s
# Warmup Iteration  17: 2897979.407 ops/s
# Warmup Iteration  18: 2895771.018 ops/s
# Warmup Iteration  19: 2858769.388 ops/s
# Warmup Iteration  20: 2834106.559 ops/s
# Warmup Iteration  21: 2848949.781 ops/s
# Warmup Iteration  22: 2878288.564 ops/s
# Warmup Iteration  23: 2872439.807 ops/s
# Warmup Iteration  24: 2810916.008 ops/s
# Warmup Iteration  25: 2887869.711 ops/s
# Warmup Iteration  26: 2907086.516 ops/s
# Warmup Iteration  27: 2887091.215 ops/s
# Warmup Iteration  28: 2885591.402 ops/s
# Warmup Iteration  29: 2887413.754 ops/s
# Warmup Iteration  30: 2901290.880 ops/s
Iteration   1: 2914568.859 ops/s
Iteration   2: 2906306.771 ops/s
Iteration   3: 2879627.385 ops/s
Iteration   4: 2857254.658 ops/s
Iteration   5: 2912372.314 ops/s
Iteration   6: 2885667.692 ops/s
Iteration   7: 2871960.917 ops/s
Iteration   8: 2888024.900 ops/s
Iteration   9: 2908558.453 ops/s
Iteration  10: 2896415.607 ops/s
Iteration  11: 2883147.576 ops/s
Iteration  12: 2896979.364 ops/s
Iteration  13: 2899069.076 ops/s
Iteration  14: 2905449.224 ops/s
Iteration  15: 2884585.899 ops/s
Iteration  16: 2892213.637 ops/s
Iteration  17: 2898489.326 ops/s
Iteration  18: 2909354.477 ops/s
Iteration  19: 2907852.404 ops/s
Iteration  20: 2878514.003 ops/s
Iteration  21: 2891521.245 ops/s
Iteration  22: 2875796.504 ops/s
Iteration  23: 2905804.605 ops/s
Iteration  24: 2889797.364 ops/s
Iteration  25: 2879078.522 ops/s
Iteration  26: 2893668.671 ops/s
Iteration  27: 2887270.773 ops/s
Iteration  28: 2886566.996 ops/s
Iteration  29: 2876611.723 ops/s
Iteration  30: 2897292.789 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_capacityHint":
  2891994.058 ±(99.9%) 9075.170 ops/s [Average]
  (min, avg, max) = (2857254.658, 2891994.058, 2914568.859), stdev = 13583.288
  CI (99.9%): [2882918.888, 2901069.228] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score      Error  Units
FlowableToListTest._Benchmark.benchmark_capacityHint  thrpt   30  2891994.058 ± 9075.170  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_toFuture$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_toFuture

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10801709.368 ops/s
# Warmup Iteration   2: 11831706.801 ops/s
# Warmup Iteration   3: 14366905.785 ops/s
# Warmup Iteration   4: 14489436.401 ops/s
# Warmup Iteration   5: 14490376.445 ops/s
# Warmup Iteration   6: 14247054.666 ops/s
# Warmup Iteration   7: 14491047.124 ops/s
# Warmup Iteration   8: 14431920.847 ops/s
# Warmup Iteration   9: 14306420.892 ops/s
# Warmup Iteration  10: 14374331.649 ops/s
# Warmup Iteration  11: 14406016.872 ops/s
# Warmup Iteration  12: 14363878.954 ops/s
# Warmup Iteration  13: 14357991.528 ops/s
# Warmup Iteration  14: 14471693.013 ops/s
# Warmup Iteration  15: 14292515.340 ops/s
# Warmup Iteration  16: 14453876.242 ops/s
# Warmup Iteration  17: 14410350.923 ops/s
# Warmup Iteration  18: 14452278.710 ops/s
# Warmup Iteration  19: 14393848.946 ops/s
# Warmup Iteration  20: 14273702.725 ops/s
# Warmup Iteration  21: 14397301.359 ops/s
# Warmup Iteration  22: 14367528.922 ops/s
# Warmup Iteration  23: 14422816.817 ops/s
# Warmup Iteration  24: 14428392.283 ops/s
# Warmup Iteration  25: 14379696.809 ops/s
# Warmup Iteration  26: 14431737.251 ops/s
# Warmup Iteration  27: 14411857.306 ops/s
# Warmup Iteration  28: 14452148.825 ops/s
# Warmup Iteration  29: 14442384.002 ops/s
# Warmup Iteration  30: 14369296.234 ops/s
Iteration   1: 14515674.420 ops/s
Iteration   2: 14493769.978 ops/s
Iteration   3: 14528868.863 ops/s
Iteration   4: 14390496.527 ops/s
Iteration   5: 14421619.859 ops/s
Iteration   6: 14213770.564 ops/s
Iteration   7: 14572234.211 ops/s
Iteration   8: 14371024.198 ops/s
Iteration   9: 14421895.106 ops/s
Iteration  10: 14475637.188 ops/s
Iteration  11: 14465030.312 ops/s
Iteration  12: 14273943.714 ops/s
Iteration  13: 14389225.953 ops/s
Iteration  14: 14430849.252 ops/s
Iteration  15: 14381411.553 ops/s
Iteration  16: 14418695.732 ops/s
Iteration  17: 14501724.014 ops/s
Iteration  18: 14379666.981 ops/s
Iteration  19: 14419086.192 ops/s
Iteration  20: 14356767.467 ops/s
Iteration  21: 14357803.048 ops/s
Iteration  22: 14483829.820 ops/s
Iteration  23: 14240215.365 ops/s
Iteration  24: 14364859.742 ops/s
Iteration  25: 14410644.190 ops/s
Iteration  26: 14427577.441 ops/s
Iteration  27: 14355588.426 ops/s
Iteration  28: 14459961.513 ops/s
Iteration  29: 14384833.795 ops/s
Iteration  30: 14446341.344 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_toFuture":
  14411768.226 ±(99.9%) 53483.457 ops/s [Average]
  (min, avg, max) = (14213770.564, 14411768.226, 14572234.211), stdev = 80051.527
  CI (99.9%): [14358284.768, 14465251.683] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
BlockingFlowableToFutureTest._Benchmark.benchmark_toFuture  thrpt   30  14411768.226 ± 53483.457  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 56.993 ops/s
# Warmup Iteration   2: 310323.324 ops/s
# Warmup Iteration   3: 795785.856 ops/s
# Warmup Iteration   4: 1041014.904 ops/s
# Warmup Iteration   5: 1068124.394 ops/s
# Warmup Iteration   6: 1071178.832 ops/s
# Warmup Iteration   7: 1072865.759 ops/s
# Warmup Iteration   8: 1064949.736 ops/s
# Warmup Iteration   9: 1070588.716 ops/s
# Warmup Iteration  10: 1070570.317 ops/s
# Warmup Iteration  11: 1073685.435 ops/s
# Warmup Iteration  12: 1072351.375 ops/s
# Warmup Iteration  13: 1069448.774 ops/s
# Warmup Iteration  14: 1058697.064 ops/s
# Warmup Iteration  15: 1070843.274 ops/s
# Warmup Iteration  16: 1055764.175 ops/s
# Warmup Iteration  17: 1065653.783 ops/s
# Warmup Iteration  18: 1073165.731 ops/s
# Warmup Iteration  19: 1062658.271 ops/s
# Warmup Iteration  20: 1066586.285 ops/s
# Warmup Iteration  21: 1074514.468 ops/s
# Warmup Iteration  22: 1065590.092 ops/s
# Warmup Iteration  23: 1069398.188 ops/s
# Warmup Iteration  24: 1054808.890 ops/s
# Warmup Iteration  25: 1074100.189 ops/s
# Warmup Iteration  26: 1068526.986 ops/s
# Warmup Iteration  27: 1058518.475 ops/s
# Warmup Iteration  28: 1067548.067 ops/s
# Warmup Iteration  29: 1068856.274 ops/s
# Warmup Iteration  30: 1075391.347 ops/s
Iteration   1: 1071384.773 ops/s
Iteration   2: 1070002.642 ops/s
Iteration   3: 1063460.979 ops/s
Iteration   4: 1069686.087 ops/s
Iteration   5: 1071241.906 ops/s
Iteration   6: 1064879.170 ops/s
Iteration   7: 1070350.842 ops/s
Iteration   8: 1076669.735 ops/s
Iteration   9: 1072243.250 ops/s
Iteration  10: 1067731.162 ops/s
Iteration  11: 1078581.970 ops/s
Iteration  12: 1070342.588 ops/s
Iteration  13: 1048098.389 ops/s
Iteration  14: 1059535.642 ops/s
Iteration  15: 1058087.398 ops/s
Iteration  16: 1069190.598 ops/s
Iteration  17: 1062323.807 ops/s
Iteration  18: 1068158.003 ops/s
Iteration  19: 1066044.063 ops/s
Iteration  20: 1070246.653 ops/s
Iteration  21: 1065665.110 ops/s
Iteration  22: 1076570.987 ops/s
Iteration  23: 1057126.270 ops/s
Iteration  24: 1061120.288 ops/s
Iteration  25: 1077221.500 ops/s
Iteration  26: 1069648.096 ops/s
Iteration  27: 1065968.477 ops/s
Iteration  28: 1068234.091 ops/s
Iteration  29: 1076222.729 ops/s
Iteration  30: 1069217.093 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayError":
  1067841.810 ±(99.9%) 4453.708 ops/s [Average]
  (min, avg, max) = (1048098.389, 1067841.810, 1078581.970), stdev = 6666.102
  CI (99.9%): [1063388.102, 1072295.518] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayError  thrpt   30  1067841.810 ± 4453.708  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_withFollowingFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_withFollowingFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2563640.404 ops/s
# Warmup Iteration   2: 3741641.215 ops/s
# Warmup Iteration   3: 4306889.183 ops/s
# Warmup Iteration   4: 4354316.658 ops/s
# Warmup Iteration   5: 4346391.467 ops/s
# Warmup Iteration   6: 4335010.799 ops/s
# Warmup Iteration   7: 4299139.285 ops/s
# Warmup Iteration   8: 4357350.003 ops/s
# Warmup Iteration   9: 4353261.609 ops/s
# Warmup Iteration  10: 4329693.156 ops/s
# Warmup Iteration  11: 4323420.682 ops/s
# Warmup Iteration  12: 4321731.985 ops/s
# Warmup Iteration  13: 4346443.120 ops/s
# Warmup Iteration  14: 4305724.620 ops/s
# Warmup Iteration  15: 4303297.898 ops/s
# Warmup Iteration  16: 4256762.337 ops/s
# Warmup Iteration  17: 4237469.265 ops/s
# Warmup Iteration  18: 4315926.892 ops/s
# Warmup Iteration  19: 4345731.921 ops/s
# Warmup Iteration  20: 4326799.316 ops/s
# Warmup Iteration  21: 4340305.136 ops/s
# Warmup Iteration  22: 4339601.848 ops/s
# Warmup Iteration  23: 4346899.695 ops/s
# Warmup Iteration  24: 4322052.385 ops/s
# Warmup Iteration  25: 4342979.663 ops/s
# Warmup Iteration  26: 4296446.134 ops/s
# Warmup Iteration  27: 4350938.152 ops/s
# Warmup Iteration  28: 4371408.755 ops/s
# Warmup Iteration  29: 4320789.391 ops/s
# Warmup Iteration  30: 4340726.830 ops/s
Iteration   1: 4314715.523 ops/s
Iteration   2: 4311610.013 ops/s
Iteration   3: 4309646.862 ops/s
Iteration   4: 4337058.710 ops/s
Iteration   5: 4315151.057 ops/s
Iteration   6: 4343914.969 ops/s
Iteration   7: 4341074.441 ops/s
Iteration   8: 4356831.095 ops/s
Iteration   9: 4331841.163 ops/s
Iteration  10: 4333950.564 ops/s
Iteration  11: 4347330.580 ops/s
Iteration  12: 4338311.696 ops/s
Iteration  13: 4273337.156 ops/s
Iteration  14: 4319758.349 ops/s
Iteration  15: 4321392.567 ops/s
Iteration  16: 4346397.274 ops/s
Iteration  17: 4324201.295 ops/s
Iteration  18: 4316152.353 ops/s
Iteration  19: 4359216.029 ops/s
Iteration  20: 4312450.318 ops/s
Iteration  21: 4324065.262 ops/s
Iteration  22: 4328433.189 ops/s
Iteration  23: 4337053.996 ops/s
Iteration  24: 4335649.170 ops/s
Iteration  25: 4329433.605 ops/s
Iteration  26: 4302225.151 ops/s
Iteration  27: 4340058.191 ops/s
Iteration  28: 4332097.383 ops/s
Iteration  29: 4342659.972 ops/s
Iteration  30: 4332284.164 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSortedListTest._Benchmark.benchmark_withFollowingFirst":
  4328610.070 ±(99.9%) 11658.635 ops/s [Average]
  (min, avg, max) = (4273337.156, 4328610.070, 4359216.029), stdev = 17450.097
  CI (99.9%): [4316951.435, 4340268.705] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableToSortedListTest._Benchmark.benchmark_withFollowingFirst  thrpt   30  4328610.070 ± 11658.635  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalarEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalarEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3100795.893 ops/s
# Warmup Iteration   2: 5481904.558 ops/s
# Warmup Iteration   3: 5989129.588 ops/s
# Warmup Iteration   4: 5963406.068 ops/s
# Warmup Iteration   5: 5922725.190 ops/s
# Warmup Iteration   6: 5951725.078 ops/s
# Warmup Iteration   7: 5919572.874 ops/s
# Warmup Iteration   8: 5871703.889 ops/s
# Warmup Iteration   9: 5963565.881 ops/s
# Warmup Iteration  10: 5910442.016 ops/s
# Warmup Iteration  11: 5954266.371 ops/s
# Warmup Iteration  12: 5938542.092 ops/s
# Warmup Iteration  13: 5927144.671 ops/s
# Warmup Iteration  14: 5815366.749 ops/s
# Warmup Iteration  15: 5837366.270 ops/s
# Warmup Iteration  16: 5932888.455 ops/s
# Warmup Iteration  17: 5978294.674 ops/s
# Warmup Iteration  18: 5941524.595 ops/s
# Warmup Iteration  19: 5933050.444 ops/s
# Warmup Iteration  20: 5953614.374 ops/s
# Warmup Iteration  21: 5964834.986 ops/s
# Warmup Iteration  22: 5992594.896 ops/s
# Warmup Iteration  23: 5972423.678 ops/s
# Warmup Iteration  24: 5935896.119 ops/s
# Warmup Iteration  25: 5859998.963 ops/s
# Warmup Iteration  26: 5956504.255 ops/s
# Warmup Iteration  27: 5951849.337 ops/s
# Warmup Iteration  28: 5967691.750 ops/s
# Warmup Iteration  29: 5909782.817 ops/s
# Warmup Iteration  30: 5957071.386 ops/s
Iteration   1: 5941867.932 ops/s
Iteration   2: 5942240.676 ops/s
Iteration   3: 5812028.119 ops/s
Iteration   4: 5953519.403 ops/s
Iteration   5: 5934282.760 ops/s
Iteration   6: 5940681.988 ops/s
Iteration   7: 5909850.589 ops/s
Iteration   8: 5967723.676 ops/s
Iteration   9: 5949363.976 ops/s
Iteration  10: 5911807.144 ops/s
Iteration  11: 5941767.340 ops/s
Iteration  12: 5910697.189 ops/s
Iteration  13: 5935193.080 ops/s
Iteration  14: 5953590.138 ops/s
Iteration  15: 5925929.203 ops/s
Iteration  16: 5978875.182 ops/s
Iteration  17: 5933290.823 ops/s
Iteration  18: 5921926.232 ops/s
Iteration  19: 5931449.817 ops/s
Iteration  20: 5951683.745 ops/s
Iteration  21: 5924494.781 ops/s
Iteration  22: 5926759.368 ops/s
Iteration  23: 5910339.763 ops/s
Iteration  24: 5819464.204 ops/s
Iteration  25: 5893717.598 ops/s
Iteration  26: 5898312.366 ops/s
Iteration  27: 5960174.233 ops/s
Iteration  28: 5928077.698 ops/s
Iteration  29: 5915704.047 ops/s
Iteration  30: 5923858.590 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalarEmpty":
  5924955.722 ±(99.9%) 23811.455 ops/s [Average]
  (min, avg, max) = (5812028.119, 5924955.722, 5978875.182), stdev = 35639.868
  CI (99.9%): [5901144.267, 5948767.177] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableFlatMapTest._Benchmark.benchmark_mergeScalarEmpty  thrpt   30  5924955.722 ± 23811.455  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalar2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalar2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2960901.851 ops/s
# Warmup Iteration   2: 4835895.914 ops/s
# Warmup Iteration   3: 5541026.436 ops/s
# Warmup Iteration   4: 5595509.272 ops/s
# Warmup Iteration   5: 5560750.614 ops/s
# Warmup Iteration   6: 5523080.614 ops/s
# Warmup Iteration   7: 5561862.662 ops/s
# Warmup Iteration   8: 5520952.717 ops/s
# Warmup Iteration   9: 5561178.107 ops/s
# Warmup Iteration  10: 5536226.397 ops/s
# Warmup Iteration  11: 5581560.158 ops/s
# Warmup Iteration  12: 5580097.950 ops/s
# Warmup Iteration  13: 5535356.957 ops/s
# Warmup Iteration  14: 5582484.697 ops/s
# Warmup Iteration  15: 5537593.852 ops/s
# Warmup Iteration  16: 5541153.275 ops/s
# Warmup Iteration  17: 5589561.206 ops/s
# Warmup Iteration  18: 5543891.139 ops/s
# Warmup Iteration  19: 5549960.101 ops/s
# Warmup Iteration  20: 5535757.363 ops/s
# Warmup Iteration  21: 5584077.557 ops/s
# Warmup Iteration  22: 5490475.403 ops/s
# Warmup Iteration  23: 5544989.171 ops/s
# Warmup Iteration  24: 5539285.974 ops/s
# Warmup Iteration  25: 5535118.419 ops/s
# Warmup Iteration  26: 5575913.830 ops/s
# Warmup Iteration  27: 5545145.887 ops/s
# Warmup Iteration  28: 5541616.628 ops/s
# Warmup Iteration  29: 5552504.768 ops/s
# Warmup Iteration  30: 5527042.457 ops/s
Iteration   1: 5562791.809 ops/s
Iteration   2: 5606983.687 ops/s
Iteration   3: 5546171.051 ops/s
Iteration   4: 5563853.283 ops/s
Iteration   5: 5619870.833 ops/s
Iteration   6: 5587008.782 ops/s
Iteration   7: 5520670.299 ops/s
Iteration   8: 5519226.531 ops/s
Iteration   9: 5535350.705 ops/s
Iteration  10: 5590413.800 ops/s
Iteration  11: 5509601.248 ops/s
Iteration  12: 5554299.254 ops/s
Iteration  13: 5529591.602 ops/s
Iteration  14: 5524512.108 ops/s
Iteration  15: 5581400.120 ops/s
Iteration  16: 5545878.695 ops/s
Iteration  17: 5567725.389 ops/s
Iteration  18: 5473191.619 ops/s
Iteration  19: 5571825.638 ops/s
Iteration  20: 5471657.049 ops/s
Iteration  21: 5601232.045 ops/s
Iteration  22: 5497838.851 ops/s
Iteration  23: 5521508.550 ops/s
Iteration  24: 5567776.594 ops/s
Iteration  25: 5578961.911 ops/s
Iteration  26: 5570492.468 ops/s
Iteration  27: 5590445.929 ops/s
Iteration  28: 5553432.340 ops/s
Iteration  29: 5492713.040 ops/s
Iteration  30: 5529341.515 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_mergeScalar2":
  5549525.558 ±(99.9%) 25772.443 ops/s [Average]
  (min, avg, max) = (5471657.049, 5549525.558, 5619870.833), stdev = 38574.982
  CI (99.9%): [5523753.115, 5575298.001] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableFlatMapTest._Benchmark.benchmark_mergeScalar2  thrpt   30  5549525.558 ± 25772.443  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingleTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingleTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5744142.464 ops/s
# Warmup Iteration   2: 8089672.760 ops/s
# Warmup Iteration   3: 9303493.662 ops/s
# Warmup Iteration   4: 9233821.094 ops/s
# Warmup Iteration   5: 9152871.111 ops/s
# Warmup Iteration   6: 9223327.695 ops/s
# Warmup Iteration   7: 9205468.515 ops/s
# Warmup Iteration   8: 9090850.651 ops/s
# Warmup Iteration   9: 9094626.945 ops/s
# Warmup Iteration  10: 9208988.445 ops/s
# Warmup Iteration  11: 9184777.505 ops/s
# Warmup Iteration  12: 9266975.158 ops/s
# Warmup Iteration  13: 9236365.993 ops/s
# Warmup Iteration  14: 9209818.761 ops/s
# Warmup Iteration  15: 9103155.416 ops/s
# Warmup Iteration  16: 9190773.640 ops/s
# Warmup Iteration  17: 9134297.244 ops/s
# Warmup Iteration  18: 9026436.672 ops/s
# Warmup Iteration  19: 9189528.346 ops/s
# Warmup Iteration  20: 9249584.854 ops/s
# Warmup Iteration  21: 9065440.511 ops/s
# Warmup Iteration  22: 9246678.719 ops/s
# Warmup Iteration  23: 9217327.485 ops/s
# Warmup Iteration  24: 9287335.877 ops/s
# Warmup Iteration  25: 9216074.181 ops/s
# Warmup Iteration  26: 9283154.153 ops/s
# Warmup Iteration  27: 9211129.042 ops/s
# Warmup Iteration  28: 9229651.764 ops/s
# Warmup Iteration  29: 9157363.506 ops/s
# Warmup Iteration  30: 9190483.503 ops/s
Iteration   1: 9204607.400 ops/s
Iteration   2: 9195740.524 ops/s
Iteration   3: 9216350.867 ops/s
Iteration   4: 9135936.909 ops/s
Iteration   5: 9222430.421 ops/s
Iteration   6: 9129327.692 ops/s
Iteration   7: 9210344.271 ops/s
Iteration   8: 9187569.243 ops/s
Iteration   9: 9136482.602 ops/s
Iteration  10: 9186250.485 ops/s
Iteration  11: 9122325.659 ops/s
Iteration  12: 9234603.167 ops/s
Iteration  13: 9285759.505 ops/s
Iteration  14: 9143947.921 ops/s
Iteration  15: 9058318.095 ops/s
Iteration  16: 9056411.139 ops/s
Iteration  17: 9131646.697 ops/s
Iteration  18: 9176732.543 ops/s
Iteration  19: 9235446.480 ops/s
Iteration  20: 9216705.099 ops/s
Iteration  21: 9179974.488 ops/s
Iteration  22: 9233151.177 ops/s
Iteration  23: 9135193.264 ops/s
Iteration  24: 9150867.520 ops/s
Iteration  25: 9213176.465 ops/s
Iteration  26: 9253234.045 ops/s
Iteration  27: 9186399.240 ops/s
Iteration  28: 9237413.783 ops/s
Iteration  29: 9217524.415 ops/s
Iteration  30: 9243331.906 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReduceWithSingleTest._Benchmark.benchmark_disposed":
  9184573.434 ±(99.9%) 36659.800 ops/s [Average]
  (min, avg, max) = (9056411.139, 9184573.434, 9285759.505), stdev = 54870.667
  CI (99.9%): [9147913.634, 9221233.234] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableReduceWithSingleTest._Benchmark.benchmark_disposed  thrpt   30  9184573.434 ± 36659.800  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_synchronousError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_synchronousError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87000.014 ops/s
# Warmup Iteration   2: 387635.486 ops/s
# Warmup Iteration   3: 448311.399 ops/s
# Warmup Iteration   4: 528433.317 ops/s
# Warmup Iteration   5: 529493.894 ops/s
# Warmup Iteration   6: 538928.111 ops/s
# Warmup Iteration   7: 536896.448 ops/s
# Warmup Iteration   8: 533770.954 ops/s
# Warmup Iteration   9: 530488.363 ops/s
# Warmup Iteration  10: 529859.698 ops/s
# Warmup Iteration  11: 527059.935 ops/s
# Warmup Iteration  12: 522679.625 ops/s
# Warmup Iteration  13: 537287.600 ops/s
# Warmup Iteration  14: 532105.096 ops/s
# Warmup Iteration  15: 530497.122 ops/s
# Warmup Iteration  16: 531846.764 ops/s
# Warmup Iteration  17: 535278.357 ops/s
# Warmup Iteration  18: 530524.788 ops/s
# Warmup Iteration  19: 534735.740 ops/s
# Warmup Iteration  20: 533054.079 ops/s
# Warmup Iteration  21: 534188.139 ops/s
# Warmup Iteration  22: 532863.563 ops/s
# Warmup Iteration  23: 535634.869 ops/s
# Warmup Iteration  24: 521522.112 ops/s
# Warmup Iteration  25: 534728.560 ops/s
# Warmup Iteration  26: 532618.687 ops/s
# Warmup Iteration  27: 536144.839 ops/s
# Warmup Iteration  28: 536054.737 ops/s
# Warmup Iteration  29: 534713.206 ops/s
# Warmup Iteration  30: 535327.028 ops/s
Iteration   1: 530884.733 ops/s
Iteration   2: 532755.228 ops/s
Iteration   3: 535608.683 ops/s
Iteration   4: 534968.404 ops/s
Iteration   5: 533141.410 ops/s
Iteration   6: 540228.497 ops/s
Iteration   7: 532361.585 ops/s
Iteration   8: 536533.747 ops/s
Iteration   9: 531907.189 ops/s
Iteration  10: 531761.013 ops/s
Iteration  11: 531750.657 ops/s
Iteration  12: 536535.348 ops/s
Iteration  13: 527211.249 ops/s
Iteration  14: 533586.460 ops/s
Iteration  15: 540445.452 ops/s
Iteration  16: 536543.494 ops/s
Iteration  17: 534885.478 ops/s
Iteration  18: 521959.635 ops/s
Iteration  19: 538618.668 ops/s
Iteration  20: 540991.939 ops/s
Iteration  21: 538880.862 ops/s
Iteration  22: 537092.721 ops/s
Iteration  23: 531209.452 ops/s
Iteration  24: 525624.961 ops/s
Iteration  25: 536579.239 ops/s
Iteration  26: 525694.070 ops/s
Iteration  27: 534986.675 ops/s
Iteration  28: 534400.324 ops/s
Iteration  29: 531718.783 ops/s
Iteration  30: 532862.698 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_synchronousError":
  533724.289 ±(99.9%) 3005.481 ops/s [Average]
  (min, avg, max) = (521959.635, 533724.289, 540991.939), stdev = 4498.463
  CI (99.9%): [530718.807, 536729.770] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_synchronousError  thrpt   30  533724.289 ± 3005.481  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94374.331 ops/s
# Warmup Iteration   2: 752365.361 ops/s
# Warmup Iteration   3: 1102740.105 ops/s
# Warmup Iteration   4: 1191606.437 ops/s
# Warmup Iteration   5: 1199793.473 ops/s
# Warmup Iteration   6: 1198913.588 ops/s
# Warmup Iteration   7: 1185411.397 ops/s
# Warmup Iteration   8: 1180255.121 ops/s
# Warmup Iteration   9: 1196391.680 ops/s
# Warmup Iteration  10: 1199409.311 ops/s
# Warmup Iteration  11: 1179471.554 ops/s
# Warmup Iteration  12: 1194626.402 ops/s
# Warmup Iteration  13: 1189867.703 ops/s
# Warmup Iteration  14: 1185120.354 ops/s
# Warmup Iteration  15: 1179952.728 ops/s
# Warmup Iteration  16: 1192857.903 ops/s
# Warmup Iteration  17: 1188091.730 ops/s
# Warmup Iteration  18: 1177691.111 ops/s
# Warmup Iteration  19: 1183922.880 ops/s
# Warmup Iteration  20: 1181650.932 ops/s
# Warmup Iteration  21: 1180031.406 ops/s
# Warmup Iteration  22: 1177242.865 ops/s
# Warmup Iteration  23: 1182784.633 ops/s
# Warmup Iteration  24: 1190009.533 ops/s
# Warmup Iteration  25: 1179477.502 ops/s
# Warmup Iteration  26: 1188442.306 ops/s
# Warmup Iteration  27: 1185237.250 ops/s
# Warmup Iteration  28: 1184176.780 ops/s
# Warmup Iteration  29: 1188622.015 ops/s
# Warmup Iteration  30: 1181978.950 ops/s
Iteration   1: 1170693.592 ops/s
Iteration   2: 1193681.728 ops/s
Iteration   3: 1183066.882 ops/s
Iteration   4: 1186503.788 ops/s
Iteration   5: 1187192.840 ops/s
Iteration   6: 1191706.291 ops/s
Iteration   7: 1174882.456 ops/s
Iteration   8: 1152887.601 ops/s
Iteration   9: 1184367.757 ops/s
Iteration  10: 1190633.839 ops/s
Iteration  11: 1185777.286 ops/s
Iteration  12: 1179192.750 ops/s
Iteration  13: 1184408.457 ops/s
Iteration  14: 1188899.252 ops/s
Iteration  15: 1183557.216 ops/s
Iteration  16: 1186829.931 ops/s
Iteration  17: 1178002.044 ops/s
Iteration  18: 1191956.806 ops/s
Iteration  19: 1183642.759 ops/s
Iteration  20: 1189907.905 ops/s
Iteration  21: 1186878.650 ops/s
Iteration  22: 1190161.448 ops/s
Iteration  23: 1156163.717 ops/s
Iteration  24: 1186677.992 ops/s
Iteration  25: 1187121.350 ops/s
Iteration  26: 1186754.635 ops/s
Iteration  27: 1191499.767 ops/s
Iteration  28: 1188242.791 ops/s
Iteration  29: 1175174.987 ops/s
Iteration  30: 1177255.188 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError":
  1183124.057 ±(99.9%) 6393.820 ops/s [Average]
  (min, avg, max) = (1152887.601, 1183124.057, 1193681.728), stdev = 9569.969
  CI (99.9%): [1176730.237, 1189517.877] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError  thrpt   30  1183124.057 ± 6393.820  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_withEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_withEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2684566.786 ops/s
# Warmup Iteration   2: 4006072.139 ops/s
# Warmup Iteration   3: 4593954.345 ops/s
# Warmup Iteration   4: 4534286.206 ops/s
# Warmup Iteration   5: 4568179.157 ops/s
# Warmup Iteration   6: 4582344.487 ops/s
# Warmup Iteration   7: 4604149.099 ops/s
# Warmup Iteration   8: 4575295.464 ops/s
# Warmup Iteration   9: 4612265.201 ops/s
# Warmup Iteration  10: 4596836.432 ops/s
# Warmup Iteration  11: 4605495.966 ops/s
# Warmup Iteration  12: 4620672.877 ops/s
# Warmup Iteration  13: 4566591.644 ops/s
# Warmup Iteration  14: 4627475.586 ops/s
# Warmup Iteration  15: 4619450.975 ops/s
# Warmup Iteration  16: 4539996.599 ops/s
# Warmup Iteration  17: 4602196.774 ops/s
# Warmup Iteration  18: 4529103.412 ops/s
# Warmup Iteration  19: 4595935.933 ops/s
# Warmup Iteration  20: 4587255.250 ops/s
# Warmup Iteration  21: 4582064.546 ops/s
# Warmup Iteration  22: 4610400.992 ops/s
# Warmup Iteration  23: 4577115.258 ops/s
# Warmup Iteration  24: 4545996.280 ops/s
# Warmup Iteration  25: 4567668.157 ops/s
# Warmup Iteration  26: 4541866.629 ops/s
# Warmup Iteration  27: 4594221.912 ops/s
# Warmup Iteration  28: 4600299.358 ops/s
# Warmup Iteration  29: 4579486.819 ops/s
# Warmup Iteration  30: 4580638.816 ops/s
Iteration   1: 4597571.969 ops/s
Iteration   2: 4617560.464 ops/s
Iteration   3: 4578979.976 ops/s
Iteration   4: 4615649.575 ops/s
Iteration   5: 4596752.704 ops/s
Iteration   6: 4533140.579 ops/s
Iteration   7: 4627673.464 ops/s
Iteration   8: 4603884.153 ops/s
Iteration   9: 4597807.308 ops/s
Iteration  10: 4525592.761 ops/s
Iteration  11: 4617368.873 ops/s
Iteration  12: 4588740.439 ops/s
Iteration  13: 4598330.564 ops/s
Iteration  14: 4556212.462 ops/s
Iteration  15: 4613778.459 ops/s
Iteration  16: 4571847.876 ops/s
Iteration  17: 4588512.099 ops/s
Iteration  18: 4589780.493 ops/s
Iteration  19: 4564573.663 ops/s
Iteration  20: 4568285.316 ops/s
Iteration  21: 4488535.491 ops/s
Iteration  22: 4579093.383 ops/s
Iteration  23: 4600076.661 ops/s
Iteration  24: 4596903.525 ops/s
Iteration  25: 4617215.319 ops/s
Iteration  26: 4612142.904 ops/s
Iteration  27: 4586530.584 ops/s
Iteration  28: 4583262.465 ops/s
Iteration  29: 4526014.061 ops/s
Iteration  30: 4580908.211 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_withEmpty":
  4584090.860 ±(99.9%) 21364.463 ops/s [Average]
  (min, avg, max) = (4488535.491, 4584090.860, 4627673.464), stdev = 31977.325
  CI (99.9%): [4562726.397, 4605455.323] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_withEmpty  thrpt   30  4584090.860 ± 21364.463  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableError1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableError1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 438589.918 ops/s
# Warmup Iteration   2: 667009.327 ops/s
# Warmup Iteration   3: 665700.245 ops/s
# Warmup Iteration   4: 720440.849 ops/s
# Warmup Iteration   5: 722981.329 ops/s
# Warmup Iteration   6: 722413.486 ops/s
# Warmup Iteration   7: 724565.732 ops/s
# Warmup Iteration   8: 721779.250 ops/s
# Warmup Iteration   9: 714614.858 ops/s
# Warmup Iteration  10: 723225.826 ops/s
# Warmup Iteration  11: 722372.264 ops/s
# Warmup Iteration  12: 722269.063 ops/s
# Warmup Iteration  13: 716119.222 ops/s
# Warmup Iteration  14: 722761.221 ops/s
# Warmup Iteration  15: 706452.282 ops/s
# Warmup Iteration  16: 719175.197 ops/s
# Warmup Iteration  17: 747053.323 ops/s
# Warmup Iteration  18: 752558.670 ops/s
# Warmup Iteration  19: 747464.475 ops/s
# Warmup Iteration  20: 745133.052 ops/s
# Warmup Iteration  21: 754989.543 ops/s
# Warmup Iteration  22: 752615.993 ops/s
# Warmup Iteration  23: 754045.060 ops/s
# Warmup Iteration  24: 753689.737 ops/s
# Warmup Iteration  25: 749772.864 ops/s
# Warmup Iteration  26: 752038.570 ops/s
# Warmup Iteration  27: 748846.036 ops/s
# Warmup Iteration  28: 749966.171 ops/s
# Warmup Iteration  29: 748990.085 ops/s
# Warmup Iteration  30: 750157.643 ops/s
Iteration   1: 738555.956 ops/s
Iteration   2: 746878.670 ops/s
Iteration   3: 745967.238 ops/s
Iteration   4: 751147.800 ops/s
Iteration   5: 753517.216 ops/s
Iteration   6: 751322.590 ops/s
Iteration   7: 748768.420 ops/s
Iteration   8: 748536.248 ops/s
Iteration   9: 748214.241 ops/s
Iteration  10: 738609.144 ops/s
Iteration  11: 744753.299 ops/s
Iteration  12: 749436.837 ops/s
Iteration  13: 751647.706 ops/s
Iteration  14: 745149.649 ops/s
Iteration  15: 749102.397 ops/s
Iteration  16: 745952.015 ops/s
Iteration  17: 750628.804 ops/s
Iteration  18: 741004.982 ops/s
Iteration  19: 742875.181 ops/s
Iteration  20: 755506.526 ops/s
Iteration  21: 752125.071 ops/s
Iteration  22: 746888.618 ops/s
Iteration  23: 748782.936 ops/s
Iteration  24: 752792.307 ops/s
Iteration  25: 750323.547 ops/s
Iteration  26: 752459.291 ops/s
Iteration  27: 752334.842 ops/s
Iteration  28: 747144.309 ops/s
Iteration  29: 751299.020 ops/s
Iteration  30: 748370.307 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToXTest._Benchmark.benchmark_toFlowableError1":
  748336.506 ±(99.9%) 2794.197 ops/s [Average]
  (min, avg, max) = (738555.956, 748336.506, 755506.526), stdev = 4182.223
  CI (99.9%): [745542.308, 751130.703] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableToXTest._Benchmark.benchmark_toFlowableError1  thrpt   30  748336.506 ± 2794.197  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_nonFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_nonFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2435993.822 ops/s
# Warmup Iteration   2: 3307243.623 ops/s
# Warmup Iteration   3: 3779861.191 ops/s
# Warmup Iteration   4: 3814705.162 ops/s
# Warmup Iteration   5: 3807553.523 ops/s
# Warmup Iteration   6: 3832673.380 ops/s
# Warmup Iteration   7: 3806801.700 ops/s
# Warmup Iteration   8: 3787203.211 ops/s
# Warmup Iteration   9: 3790868.683 ops/s
# Warmup Iteration  10: 3808400.395 ops/s
# Warmup Iteration  11: 3781730.063 ops/s
# Warmup Iteration  12: 3793808.234 ops/s
# Warmup Iteration  13: 3816256.232 ops/s
# Warmup Iteration  14: 3787406.575 ops/s
# Warmup Iteration  15: 3800522.995 ops/s
# Warmup Iteration  16: 3817049.886 ops/s
# Warmup Iteration  17: 3836951.459 ops/s
# Warmup Iteration  18: 3808885.917 ops/s
# Warmup Iteration  19: 3856465.076 ops/s
# Warmup Iteration  20: 3817191.017 ops/s
# Warmup Iteration  21: 3819883.034 ops/s
# Warmup Iteration  22: 3819975.798 ops/s
# Warmup Iteration  23: 3832805.993 ops/s
# Warmup Iteration  24: 3859767.728 ops/s
# Warmup Iteration  25: 3834568.683 ops/s
# Warmup Iteration  26: 3835008.403 ops/s
# Warmup Iteration  27: 3840687.830 ops/s
# Warmup Iteration  28: 3800719.035 ops/s
# Warmup Iteration  29: 3802453.102 ops/s
# Warmup Iteration  30: 3811533.780 ops/s
Iteration   1: 3839090.977 ops/s
Iteration   2: 3838760.068 ops/s
Iteration   3: 3831569.538 ops/s
Iteration   4: 3795281.814 ops/s
Iteration   5: 3831491.920 ops/s
Iteration   6: 3827043.385 ops/s
Iteration   7: 3816995.369 ops/s
Iteration   8: 3846158.559 ops/s
Iteration   9: 3835898.843 ops/s
Iteration  10: 3843681.164 ops/s
Iteration  11: 3834568.313 ops/s
Iteration  12: 3840237.360 ops/s
Iteration  13: 3836097.202 ops/s
Iteration  14: 3803124.355 ops/s
Iteration  15: 3829111.093 ops/s
Iteration  16: 3837790.139 ops/s
Iteration  17: 3844829.878 ops/s
Iteration  18: 3840228.166 ops/s
Iteration  19: 3829665.042 ops/s
Iteration  20: 3829654.869 ops/s
Iteration  21: 3827645.057 ops/s
Iteration  22: 3843939.280 ops/s
Iteration  23: 3822857.557 ops/s
Iteration  24: 3814397.028 ops/s
Iteration  25: 3830990.471 ops/s
Iteration  26: 3837201.159 ops/s
Iteration  27: 3847592.915 ops/s
Iteration  28: 3830982.637 ops/s
Iteration  29: 3829322.164 ops/s
Iteration  30: 3848692.610 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_nonFused":
  3832163.298 ±(99.9%) 8200.401 ops/s [Average]
  (min, avg, max) = (3795281.814, 3832163.298, 3848692.610), stdev = 12273.975
  CI (99.9%): [3823962.897, 3840363.699] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_nonFused  thrpt   30  3832163.298 ± 8200.401  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 586453.496 ops/s
# Warmup Iteration   2: 713140.076 ops/s
# Warmup Iteration   3: 772712.635 ops/s
# Warmup Iteration   4: 756064.771 ops/s
# Warmup Iteration   5: 821444.773 ops/s
# Warmup Iteration   6: 815925.041 ops/s
# Warmup Iteration   7: 825909.455 ops/s
# Warmup Iteration   8: 801903.800 ops/s
# Warmup Iteration   9: 819212.590 ops/s
# Warmup Iteration  10: 819552.576 ops/s
# Warmup Iteration  11: 822435.979 ops/s
# Warmup Iteration  12: 817167.317 ops/s
# Warmup Iteration  13: 818149.170 ops/s
# Warmup Iteration  14: 821112.382 ops/s
# Warmup Iteration  15: 815819.127 ops/s
# Warmup Iteration  16: 812994.286 ops/s
# Warmup Iteration  17: 859354.979 ops/s
# Warmup Iteration  18: 856589.583 ops/s
# Warmup Iteration  19: 857272.064 ops/s
# Warmup Iteration  20: 853331.472 ops/s
# Warmup Iteration  21: 858837.841 ops/s
# Warmup Iteration  22: 860045.566 ops/s
# Warmup Iteration  23: 856280.177 ops/s
# Warmup Iteration  24: 856212.333 ops/s
# Warmup Iteration  25: 855145.139 ops/s
# Warmup Iteration  26: 860445.937 ops/s
# Warmup Iteration  27: 862525.215 ops/s
# Warmup Iteration  28: 848119.700 ops/s
# Warmup Iteration  29: 856092.765 ops/s
# Warmup Iteration  30: 850189.482 ops/s
Iteration   1: 857574.477 ops/s
Iteration   2: 859039.618 ops/s
Iteration   3: 859325.193 ops/s
Iteration   4: 856187.178 ops/s
Iteration   5: 858744.870 ops/s
Iteration   6: 862697.479 ops/s
Iteration   7: 856268.267 ops/s
Iteration   8: 858992.021 ops/s
Iteration   9: 860900.237 ops/s
Iteration  10: 863156.543 ops/s
Iteration  11: 855843.235 ops/s
Iteration  12: 855153.067 ops/s
Iteration  13: 855993.492 ops/s
Iteration  14: 856452.887 ops/s
Iteration  15: 856401.280 ops/s
Iteration  16: 858490.098 ops/s
Iteration  17: 855906.450 ops/s
Iteration  18: 861221.497 ops/s
Iteration  19: 839292.881 ops/s
Iteration  20: 860364.578 ops/s
Iteration  21: 862332.603 ops/s
Iteration  22: 852676.215 ops/s
Iteration  23: 850786.391 ops/s
Iteration  24: 862251.963 ops/s
Iteration  25: 857328.304 ops/s
Iteration  26: 857478.034 ops/s
Iteration  27: 849280.849 ops/s
Iteration  28: 858946.977 ops/s
Iteration  29: 862552.708 ops/s
Iteration  30: 854978.680 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_otherError":
  857220.602 ±(99.9%) 3203.426 ops/s [Average]
  (min, avg, max) = (839292.881, 857220.602, 863156.543), stdev = 4794.738
  CI (99.9%): [854017.176, 860424.029] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableConcatWithCompletableTest._Benchmark.benchmark_otherError  thrpt   30  857220.602 ± 3203.426  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 737542.476 ops/s
# Warmup Iteration   2: 857101.863 ops/s
# Warmup Iteration   3: 900854.909 ops/s
# Warmup Iteration   4: 842065.607 ops/s
# Warmup Iteration   5: 953023.437 ops/s
# Warmup Iteration   6: 955954.632 ops/s
# Warmup Iteration   7: 954422.183 ops/s
# Warmup Iteration   8: 955142.801 ops/s
# Warmup Iteration   9: 958210.597 ops/s
# Warmup Iteration  10: 948985.679 ops/s
# Warmup Iteration  11: 951668.964 ops/s
# Warmup Iteration  12: 952934.266 ops/s
# Warmup Iteration  13: 951226.615 ops/s
# Warmup Iteration  14: 945390.271 ops/s
# Warmup Iteration  15: 939476.092 ops/s
# Warmup Iteration  16: 953422.851 ops/s
# Warmup Iteration  17: 1010872.668 ops/s
# Warmup Iteration  18: 1004944.007 ops/s
# Warmup Iteration  19: 1006207.501 ops/s
# Warmup Iteration  20: 1013852.920 ops/s
# Warmup Iteration  21: 994382.975 ops/s
# Warmup Iteration  22: 1004561.430 ops/s
# Warmup Iteration  23: 1008316.876 ops/s
# Warmup Iteration  24: 1012780.569 ops/s
# Warmup Iteration  25: 1006509.192 ops/s
# Warmup Iteration  26: 1004662.489 ops/s
# Warmup Iteration  27: 1000520.770 ops/s
# Warmup Iteration  28: 1005586.067 ops/s
# Warmup Iteration  29: 1009858.930 ops/s
# Warmup Iteration  30: 1003748.739 ops/s
Iteration   1: 1001621.455 ops/s
Iteration   2: 1003280.315 ops/s
Iteration   3: 1004253.201 ops/s
Iteration   4: 999457.486 ops/s
Iteration   5: 998751.056 ops/s
Iteration   6: 1009162.390 ops/s
Iteration   7: 1014483.924 ops/s
Iteration   8: 996422.422 ops/s
Iteration   9: 1009415.654 ops/s
Iteration  10: 1005055.449 ops/s
Iteration  11: 1009538.991 ops/s
Iteration  12: 1011937.970 ops/s
Iteration  13: 1005839.819 ops/s
Iteration  14: 1001573.174 ops/s
Iteration  15: 1001573.444 ops/s
Iteration  16: 1019489.919 ops/s
Iteration  17: 1002700.311 ops/s
Iteration  18: 1008015.518 ops/s
Iteration  19: 1004079.245 ops/s
Iteration  20: 995367.680 ops/s
Iteration  21: 1002286.945 ops/s
Iteration  22: 1014512.266 ops/s
Iteration  23: 1004032.087 ops/s
Iteration  24: 1000686.600 ops/s
Iteration  25: 1010584.829 ops/s
Iteration  26: 1002249.797 ops/s
Iteration  27: 1005425.447 ops/s
Iteration  28: 1001924.673 ops/s
Iteration  29: 1004517.154 ops/s
Iteration  30: 988438.667 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableDoOnTest._Benchmark.benchmark_doOnError":
  1004555.930 ±(99.9%) 4171.100 ops/s [Average]
  (min, avg, max) = (988438.667, 1004555.930, 1019489.919), stdev = 6243.106
  CI (99.9%): [1000384.830, 1008727.029] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score      Error  Units
FlowableDoOnTest._Benchmark.benchmark_doOnError  thrpt   30  1004555.930 ± 4171.100  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeToEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeToEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2295499.304 ops/s
# Warmup Iteration   2: 3842702.141 ops/s
# Warmup Iteration   3: 4409696.951 ops/s
# Warmup Iteration   4: 4417779.870 ops/s
# Warmup Iteration   5: 4412676.808 ops/s
# Warmup Iteration   6: 4400788.636 ops/s
# Warmup Iteration   7: 4433856.773 ops/s
# Warmup Iteration   8: 4428002.476 ops/s
# Warmup Iteration   9: 4405340.658 ops/s
# Warmup Iteration  10: 4430624.907 ops/s
# Warmup Iteration  11: 4373164.018 ops/s
# Warmup Iteration  12: 4405387.798 ops/s
# Warmup Iteration  13: 4411868.446 ops/s
# Warmup Iteration  14: 4399519.785 ops/s
# Warmup Iteration  15: 4392660.032 ops/s
# Warmup Iteration  16: 4425963.971 ops/s
# Warmup Iteration  17: 4406540.148 ops/s
# Warmup Iteration  18: 4308215.146 ops/s
# Warmup Iteration  19: 4400508.636 ops/s
# Warmup Iteration  20: 4377991.500 ops/s
# Warmup Iteration  21: 4431106.414 ops/s
# Warmup Iteration  22: 4423676.219 ops/s
# Warmup Iteration  23: 4435710.203 ops/s
# Warmup Iteration  24: 4430425.645 ops/s
# Warmup Iteration  25: 4458705.018 ops/s
# Warmup Iteration  26: 4447847.216 ops/s
# Warmup Iteration  27: 4443438.336 ops/s
# Warmup Iteration  28: 4408272.928 ops/s
# Warmup Iteration  29: 4397601.673 ops/s
# Warmup Iteration  30: 4403941.025 ops/s
Iteration   1: 4402939.828 ops/s
Iteration   2: 4367931.000 ops/s
Iteration   3: 4392887.286 ops/s
Iteration   4: 4426345.247 ops/s
Iteration   5: 4340213.846 ops/s
Iteration   6: 4404231.253 ops/s
Iteration   7: 4385919.017 ops/s
Iteration   8: 4410062.879 ops/s
Iteration   9: 4416980.893 ops/s
Iteration  10: 4396476.137 ops/s
Iteration  11: 4374933.957 ops/s
Iteration  12: 4429032.738 ops/s
Iteration  13: 4410607.659 ops/s
Iteration  14: 4402338.493 ops/s
Iteration  15: 4403947.320 ops/s
Iteration  16: 4401675.521 ops/s
Iteration  17: 4392365.977 ops/s
Iteration  18: 4383750.149 ops/s
Iteration  19: 4391602.450 ops/s
Iteration  20: 4348010.217 ops/s
Iteration  21: 4434439.740 ops/s
Iteration  22: 4399005.189 ops/s
Iteration  23: 4429459.314 ops/s
Iteration  24: 4430814.500 ops/s
Iteration  25: 4402947.202 ops/s
Iteration  26: 4435674.400 ops/s
Iteration  27: 4413290.541 ops/s
Iteration  28: 4282857.529 ops/s
Iteration  29: 4403651.955 ops/s
Iteration  30: 4401454.794 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeToEmpty":
  4397194.901 ±(99.9%) 20996.738 ops/s [Average]
  (min, avg, max) = (4282857.529, 4397194.901, 4435674.400), stdev = 31426.931
  CI (99.9%): [4376198.163, 4418191.639] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_rangeToEmpty  thrpt   30  4397194.901 ± 20996.738  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2108646.631 ops/s
# Warmup Iteration   2: 2744453.397 ops/s
# Warmup Iteration   3: 3319021.741 ops/s
# Warmup Iteration   4: 3284681.287 ops/s
# Warmup Iteration   5: 3334736.343 ops/s
# Warmup Iteration   6: 3324480.985 ops/s
# Warmup Iteration   7: 3251936.437 ops/s
# Warmup Iteration   8: 3302206.285 ops/s
# Warmup Iteration   9: 3337907.544 ops/s
# Warmup Iteration  10: 3323924.299 ops/s
# Warmup Iteration  11: 3267139.617 ops/s
# Warmup Iteration  12: 3317902.450 ops/s
# Warmup Iteration  13: 3311041.304 ops/s
# Warmup Iteration  14: 3323406.155 ops/s
# Warmup Iteration  15: 3345569.925 ops/s
# Warmup Iteration  16: 3320485.301 ops/s
# Warmup Iteration  17: 3327874.814 ops/s
# Warmup Iteration  18: 3301157.272 ops/s
# Warmup Iteration  19: 3311164.837 ops/s
# Warmup Iteration  20: 3332538.019 ops/s
# Warmup Iteration  21: 3326557.561 ops/s
# Warmup Iteration  22: 3323417.798 ops/s
# Warmup Iteration  23: 3330289.703 ops/s
# Warmup Iteration  24: 3314237.856 ops/s
# Warmup Iteration  25: 3355315.313 ops/s
# Warmup Iteration  26: 3337278.923 ops/s
# Warmup Iteration  27: 3330471.855 ops/s
# Warmup Iteration  28: 3302923.650 ops/s
# Warmup Iteration  29: 3335248.968 ops/s
# Warmup Iteration  30: 3345700.362 ops/s
Iteration   1: 3339233.542 ops/s
Iteration   2: 3342991.644 ops/s
Iteration   3: 3347069.423 ops/s
Iteration   4: 3332101.807 ops/s
Iteration   5: 3245752.353 ops/s
Iteration   6: 3327222.552 ops/s
Iteration   7: 3325728.632 ops/s
Iteration   8: 3343892.456 ops/s
Iteration   9: 3306366.848 ops/s
Iteration  10: 3327663.379 ops/s
Iteration  11: 3359960.821 ops/s
Iteration  12: 3274002.487 ops/s
Iteration  13: 3295034.311 ops/s
Iteration  14: 3328698.896 ops/s
Iteration  15: 3329329.246 ops/s
Iteration  16: 3341613.658 ops/s
Iteration  17: 3314755.014 ops/s
Iteration  18: 3348233.597 ops/s
Iteration  19: 3264944.101 ops/s
Iteration  20: 3351018.298 ops/s
Iteration  21: 3321003.481 ops/s
Iteration  22: 3317907.926 ops/s
Iteration  23: 3343333.774 ops/s
Iteration  24: 3280487.742 ops/s
Iteration  25: 3354521.165 ops/s
Iteration  26: 3311539.374 ops/s
Iteration  27: 3332023.957 ops/s
Iteration  28: 3331613.113 ops/s
Iteration  29: 3322762.052 ops/s
Iteration  30: 3336434.469 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_take":
  3323241.337 ±(99.9%) 18229.995 ops/s [Average]
  (min, avg, max) = (3245752.353, 3323241.337, 3359960.821), stdev = 27285.801
  CI (99.9%): [3305011.342, 3341471.333] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_take  thrpt   30  3323241.337 ± 18229.995  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1664999.772 ops/s
# Warmup Iteration   2: 2111966.701 ops/s
# Warmup Iteration   3: 2591809.683 ops/s
# Warmup Iteration   4: 2633877.530 ops/s
# Warmup Iteration   5: 2616143.164 ops/s
# Warmup Iteration   6: 2628388.376 ops/s
# Warmup Iteration   7: 2612275.245 ops/s
# Warmup Iteration   8: 2607391.260 ops/s
# Warmup Iteration   9: 2617886.284 ops/s
# Warmup Iteration  10: 2601994.253 ops/s
# Warmup Iteration  11: 2595433.654 ops/s
# Warmup Iteration  12: 2608049.554 ops/s
# Warmup Iteration  13: 2589740.601 ops/s
# Warmup Iteration  14: 2603182.081 ops/s
# Warmup Iteration  15: 2492345.033 ops/s
# Warmup Iteration  16: 2615924.967 ops/s
# Warmup Iteration  17: 2585007.551 ops/s
# Warmup Iteration  18: 2554682.722 ops/s
# Warmup Iteration  19: 2601092.383 ops/s
# Warmup Iteration  20: 2610992.533 ops/s
# Warmup Iteration  21: 2595236.239 ops/s
# Warmup Iteration  22: 2580126.001 ops/s
# Warmup Iteration  23: 2573388.958 ops/s
# Warmup Iteration  24: 2580648.464 ops/s
# Warmup Iteration  25: 2599281.018 ops/s
# Warmup Iteration  26: 2595472.892 ops/s
# Warmup Iteration  27: 2573062.683 ops/s
# Warmup Iteration  28: 2599327.348 ops/s
# Warmup Iteration  29: 2608354.070 ops/s
# Warmup Iteration  30: 2583370.510 ops/s
Iteration   1: 2560293.783 ops/s
Iteration   2: 2585816.969 ops/s
Iteration   3: 2594406.312 ops/s
Iteration   4: 2600581.291 ops/s
Iteration   5: 2577835.202 ops/s
Iteration   6: 2578664.449 ops/s
Iteration   7: 2553079.099 ops/s
Iteration   8: 2597222.817 ops/s
Iteration   9: 2586542.462 ops/s
Iteration  10: 2607934.436 ops/s
Iteration  11: 2601337.288 ops/s
Iteration  12: 2584464.360 ops/s
Iteration  13: 2557496.019 ops/s
Iteration  14: 2565497.620 ops/s
Iteration  15: 2546700.776 ops/s
Iteration  16: 2588164.063 ops/s
Iteration  17: 2569432.866 ops/s
Iteration  18: 2551414.868 ops/s
Iteration  19: 2598001.514 ops/s
Iteration  20: 2594378.340 ops/s
Iteration  21: 2599863.234 ops/s
Iteration  22: 2589803.689 ops/s
Iteration  23: 2558412.645 ops/s
Iteration  24: 2595196.117 ops/s
Iteration  25: 2601750.347 ops/s
Iteration  26: 2602878.476 ops/s
Iteration  27: 2579749.153 ops/s
Iteration  28: 2606959.550 ops/s
Iteration  29: 2585717.119 ops/s
Iteration  30: 2598941.569 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_normal":
  2583951.214 ±(99.9%) 12133.936 ops/s [Average]
  (min, avg, max) = (2546700.776, 2583951.214, 2607934.436), stdev = 18161.506
  CI (99.9%): [2571817.278, 2596085.151] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableMergeWithCompletableTest._Benchmark.benchmark_normal  thrpt   30  2583951.214 ± 12133.936  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrashToFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrashToFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 495317.867 ops/s
# Warmup Iteration   2: 671881.564 ops/s
# Warmup Iteration   3: 644121.975 ops/s
# Warmup Iteration   4: 719608.375 ops/s
# Warmup Iteration   5: 729330.744 ops/s
# Warmup Iteration   6: 728520.674 ops/s
# Warmup Iteration   7: 724256.499 ops/s
# Warmup Iteration   8: 725947.099 ops/s
# Warmup Iteration   9: 721101.447 ops/s
# Warmup Iteration  10: 730724.960 ops/s
# Warmup Iteration  11: 716026.245 ops/s
# Warmup Iteration  12: 721505.147 ops/s
# Warmup Iteration  13: 713282.215 ops/s
# Warmup Iteration  14: 715083.279 ops/s
# Warmup Iteration  15: 718228.598 ops/s
# Warmup Iteration  16: 708637.923 ops/s
# Warmup Iteration  17: 754873.266 ops/s
# Warmup Iteration  18: 756926.404 ops/s
# Warmup Iteration  19: 752927.311 ops/s
# Warmup Iteration  20: 750996.373 ops/s
# Warmup Iteration  21: 755720.203 ops/s
# Warmup Iteration  22: 753940.861 ops/s
# Warmup Iteration  23: 745610.543 ops/s
# Warmup Iteration  24: 751780.174 ops/s
# Warmup Iteration  25: 751158.019 ops/s
# Warmup Iteration  26: 745672.647 ops/s
# Warmup Iteration  27: 755766.322 ops/s
# Warmup Iteration  28: 750667.865 ops/s
# Warmup Iteration  29: 757101.162 ops/s
# Warmup Iteration  30: 754320.194 ops/s
Iteration   1: 757208.584 ops/s
Iteration   2: 748185.262 ops/s
Iteration   3: 753474.625 ops/s
Iteration   4: 753209.180 ops/s
Iteration   5: 743040.203 ops/s
Iteration   6: 752362.146 ops/s
Iteration   7: 743280.840 ops/s
Iteration   8: 750037.500 ops/s
Iteration   9: 749564.494 ops/s
Iteration  10: 753234.694 ops/s
Iteration  11: 745339.677 ops/s
Iteration  12: 756965.975 ops/s
Iteration  13: 750982.513 ops/s
Iteration  14: 754986.610 ops/s
Iteration  15: 756533.331 ops/s
Iteration  16: 753024.289 ops/s
Iteration  17: 755397.327 ops/s
Iteration  18: 748882.446 ops/s
Iteration  19: 741011.954 ops/s
Iteration  20: 742507.362 ops/s
Iteration  21: 755781.844 ops/s
Iteration  22: 755828.379 ops/s
Iteration  23: 754049.217 ops/s
Iteration  24: 754038.094 ops/s
Iteration  25: 754263.930 ops/s
Iteration  26: 758101.553 ops/s
Iteration  27: 761223.082 ops/s
Iteration  28: 743188.286 ops/s
Iteration  29: 748237.722 ops/s
Iteration  30: 751835.239 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrashToFlowable":
  751525.879 ±(99.9%) 3499.348 ops/s [Average]
  (min, avg, max) = (741011.954, 751525.879, 761223.082), stdev = 5237.659
  CI (99.9%): [748026.531, 755025.226] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorFinisherCrashToFlowable  thrpt   30  751525.879 ± 3499.348  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2175813.003 ops/s
# Warmup Iteration   2: 2820391.492 ops/s
# Warmup Iteration   3: 3347443.328 ops/s
# Warmup Iteration   4: 3353543.181 ops/s
# Warmup Iteration   5: 3337496.753 ops/s
# Warmup Iteration   6: 3361111.495 ops/s
# Warmup Iteration   7: 3274528.769 ops/s
# Warmup Iteration   8: 3335074.077 ops/s
# Warmup Iteration   9: 3336648.900 ops/s
# Warmup Iteration  10: 3325480.516 ops/s
# Warmup Iteration  11: 3317937.501 ops/s
# Warmup Iteration  12: 3337308.201 ops/s
# Warmup Iteration  13: 3312441.350 ops/s
# Warmup Iteration  14: 3324010.168 ops/s
# Warmup Iteration  15: 3311580.097 ops/s
# Warmup Iteration  16: 3356236.253 ops/s
# Warmup Iteration  17: 3337991.962 ops/s
# Warmup Iteration  18: 3344346.749 ops/s
# Warmup Iteration  19: 3333959.372 ops/s
# Warmup Iteration  20: 3341724.114 ops/s
# Warmup Iteration  21: 3333167.463 ops/s
# Warmup Iteration  22: 3335336.712 ops/s
# Warmup Iteration  23: 3331084.035 ops/s
# Warmup Iteration  24: 3336720.647 ops/s
# Warmup Iteration  25: 3289429.194 ops/s
# Warmup Iteration  26: 3319593.541 ops/s
# Warmup Iteration  27: 3346040.974 ops/s
# Warmup Iteration  28: 3340321.831 ops/s
# Warmup Iteration  29: 3345937.653 ops/s
# Warmup Iteration  30: 3343515.018 ops/s
Iteration   1: 3339546.844 ops/s
Iteration   2: 3332487.402 ops/s
Iteration   3: 3345724.420 ops/s
Iteration   4: 3333329.274 ops/s
Iteration   5: 3337045.908 ops/s
Iteration   6: 3356312.640 ops/s
Iteration   7: 3333558.848 ops/s
Iteration   8: 3352225.165 ops/s
Iteration   9: 3323532.689 ops/s
Iteration  10: 3344149.252 ops/s
Iteration  11: 3335119.190 ops/s
Iteration  12: 3344187.235 ops/s
Iteration  13: 3270980.644 ops/s
Iteration  14: 3322345.853 ops/s
Iteration  15: 3307304.469 ops/s
Iteration  16: 3352993.791 ops/s
Iteration  17: 3338854.749 ops/s
Iteration  18: 3357292.560 ops/s
Iteration  19: 3337300.450 ops/s
Iteration  20: 3337271.772 ops/s
Iteration  21: 3335996.673 ops/s
Iteration  22: 3327487.624 ops/s
Iteration  23: 3339087.185 ops/s
Iteration  24: 3323917.897 ops/s
Iteration  25: 3343309.988 ops/s
Iteration  26: 3305304.603 ops/s
Iteration  27: 3357245.339 ops/s
Iteration  28: 3313919.832 ops/s
Iteration  29: 3339792.929 ops/s
Iteration  30: 3329065.391 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_normal":
  3333889.687 ±(99.9%) 11888.013 ops/s [Average]
  (min, avg, max) = (3270980.644, 3333889.687, 3357292.560), stdev = 17793.419
  CI (99.9%): [3322001.674, 3345777.700] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_normal  thrpt   30  3333889.687 ± 11888.013  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_moreValuesRemainingThanRequested$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_moreValuesRemainingThanRequested

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2077643.272 ops/s
# Warmup Iteration   2: 3407425.453 ops/s
# Warmup Iteration   3: 3819773.316 ops/s
# Warmup Iteration   4: 3789009.759 ops/s
# Warmup Iteration   5: 3786292.485 ops/s
# Warmup Iteration   6: 3773917.910 ops/s
# Warmup Iteration   7: 3782533.308 ops/s
# Warmup Iteration   8: 3811414.989 ops/s
# Warmup Iteration   9: 3770759.916 ops/s
# Warmup Iteration  10: 3776892.079 ops/s
# Warmup Iteration  11: 3708318.275 ops/s
# Warmup Iteration  12: 3788661.455 ops/s
# Warmup Iteration  13: 3722526.808 ops/s
# Warmup Iteration  14: 3778763.936 ops/s
# Warmup Iteration  15: 3747389.124 ops/s
# Warmup Iteration  16: 3809765.004 ops/s
# Warmup Iteration  17: 3739314.773 ops/s
# Warmup Iteration  18: 3756636.921 ops/s
# Warmup Iteration  19: 3737844.060 ops/s
# Warmup Iteration  20: 3727051.470 ops/s
# Warmup Iteration  21: 3752761.799 ops/s
# Warmup Iteration  22: 3759231.147 ops/s
# Warmup Iteration  23: 3745923.111 ops/s
# Warmup Iteration  24: 3761165.140 ops/s
# Warmup Iteration  25: 3778099.506 ops/s
# Warmup Iteration  26: 3768954.154 ops/s
# Warmup Iteration  27: 3792546.457 ops/s
# Warmup Iteration  28: 3753780.330 ops/s
# Warmup Iteration  29: 3754973.680 ops/s
# Warmup Iteration  30: 3756459.017 ops/s
Iteration   1: 3740982.637 ops/s
Iteration   2: 3781339.495 ops/s
Iteration   3: 3791671.652 ops/s
Iteration   4: 3753019.555 ops/s
Iteration   5: 3751049.027 ops/s
Iteration   6: 3752394.178 ops/s
Iteration   7: 3793274.286 ops/s
Iteration   8: 3771994.137 ops/s
Iteration   9: 3766828.884 ops/s
Iteration  10: 3741463.951 ops/s
Iteration  11: 3726061.380 ops/s
Iteration  12: 3766951.597 ops/s
Iteration  13: 3738488.997 ops/s
Iteration  14: 3745566.449 ops/s
Iteration  15: 3778011.337 ops/s
Iteration  16: 3780183.902 ops/s
Iteration  17: 3779819.860 ops/s
Iteration  18: 3793598.857 ops/s
Iteration  19: 3741011.836 ops/s
Iteration  20: 3767298.111 ops/s
Iteration  21: 3643188.095 ops/s
Iteration  22: 3763674.352 ops/s
Iteration  23: 3767415.781 ops/s
Iteration  24: 3783513.217 ops/s
Iteration  25: 3759502.986 ops/s
Iteration  26: 3754244.451 ops/s
Iteration  27: 3776372.303 ops/s
Iteration  28: 3772244.382 ops/s
Iteration  29: 3762547.583 ops/s
Iteration  30: 3766712.741 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_moreValuesRemainingThanRequested":
  3760347.534 ±(99.9%) 18795.924 ops/s [Average]
  (min, avg, max) = (3643188.095, 3760347.534, 3793598.857), stdev = 28132.856
  CI (99.9%): [3741551.610, 3779143.458] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableTakeLastTest._Benchmark.benchmark_moreValuesRemainingThanRequested  thrpt   30  3760347.534 ± 18795.924  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_withError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_withError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 529111.795 ops/s
# Warmup Iteration   2: 699607.300 ops/s
# Warmup Iteration   3: 821738.814 ops/s
# Warmup Iteration   4: 814640.121 ops/s
# Warmup Iteration   5: 817114.388 ops/s
# Warmup Iteration   6: 819304.541 ops/s
# Warmup Iteration   7: 816537.173 ops/s
# Warmup Iteration   8: 812422.294 ops/s
# Warmup Iteration   9: 814722.014 ops/s
# Warmup Iteration  10: 816204.164 ops/s
# Warmup Iteration  11: 806453.800 ops/s
# Warmup Iteration  12: 813086.436 ops/s
# Warmup Iteration  13: 809967.390 ops/s
# Warmup Iteration  14: 811288.501 ops/s
# Warmup Iteration  15: 810887.185 ops/s
# Warmup Iteration  16: 810278.158 ops/s
# Warmup Iteration  17: 852625.038 ops/s
# Warmup Iteration  18: 856030.464 ops/s
# Warmup Iteration  19: 853338.947 ops/s
# Warmup Iteration  20: 846070.912 ops/s
# Warmup Iteration  21: 843195.750 ops/s
# Warmup Iteration  22: 851975.008 ops/s
# Warmup Iteration  23: 851860.086 ops/s
# Warmup Iteration  24: 855127.732 ops/s
# Warmup Iteration  25: 860951.197 ops/s
# Warmup Iteration  26: 859711.941 ops/s
# Warmup Iteration  27: 853135.711 ops/s
# Warmup Iteration  28: 852685.674 ops/s
# Warmup Iteration  29: 853645.928 ops/s
# Warmup Iteration  30: 853607.346 ops/s
Iteration   1: 857780.150 ops/s
Iteration   2: 853636.684 ops/s
Iteration   3: 852946.793 ops/s
Iteration   4: 855374.512 ops/s
Iteration   5: 846636.798 ops/s
Iteration   6: 839539.467 ops/s
Iteration   7: 854158.457 ops/s
Iteration   8: 855551.620 ops/s
Iteration   9: 862682.475 ops/s
Iteration  10: 857875.219 ops/s
Iteration  11: 854617.236 ops/s
Iteration  12: 854125.860 ops/s
Iteration  13: 853370.867 ops/s
Iteration  14: 845819.406 ops/s
Iteration  15: 837508.649 ops/s
Iteration  16: 858031.622 ops/s
Iteration  17: 852167.103 ops/s
Iteration  18: 858927.919 ops/s
Iteration  19: 860309.484 ops/s
Iteration  20: 855205.576 ops/s
Iteration  21: 846142.569 ops/s
Iteration  22: 853587.309 ops/s
Iteration  23: 858092.886 ops/s
Iteration  24: 855726.801 ops/s
Iteration  25: 856558.451 ops/s
Iteration  26: 862203.483 ops/s
Iteration  27: 856992.409 ops/s
Iteration  28: 862528.460 ops/s
Iteration  29: 847692.351 ops/s
Iteration  30: 854409.949 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_withError":
  854006.685 ±(99.9%) 4068.794 ops/s [Average]
  (min, avg, max) = (837508.649, 854006.685, 862682.475), stdev = 6089.979
  CI (99.9%): [849937.892, 858075.479] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_withError  thrpt   30  854006.685 ± 4068.794  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_arrayDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_arrayDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 167991.758 ops/s
# Warmup Iteration   2: 234390.662 ops/s
# Warmup Iteration   3: 231675.167 ops/s
# Warmup Iteration   4: 250762.786 ops/s
# Warmup Iteration   5: 251981.631 ops/s
# Warmup Iteration   6: 250963.178 ops/s
# Warmup Iteration   7: 251182.875 ops/s
# Warmup Iteration   8: 246094.299 ops/s
# Warmup Iteration   9: 251815.165 ops/s
# Warmup Iteration  10: 249865.033 ops/s
# Warmup Iteration  11: 247426.978 ops/s
# Warmup Iteration  12: 247526.735 ops/s
# Warmup Iteration  13: 243688.281 ops/s
# Warmup Iteration  14: 248005.926 ops/s
# Warmup Iteration  15: 249209.439 ops/s
# Warmup Iteration  16: 248284.370 ops/s
# Warmup Iteration  17: 260722.961 ops/s
# Warmup Iteration  18: 262060.515 ops/s
# Warmup Iteration  19: 258239.839 ops/s
# Warmup Iteration  20: 261178.043 ops/s
# Warmup Iteration  21: 262673.384 ops/s
# Warmup Iteration  22: 260266.730 ops/s
# Warmup Iteration  23: 259112.562 ops/s
# Warmup Iteration  24: 255928.762 ops/s
# Warmup Iteration  25: 260366.895 ops/s
# Warmup Iteration  26: 261782.723 ops/s
# Warmup Iteration  27: 260625.672 ops/s
# Warmup Iteration  28: 259988.095 ops/s
# Warmup Iteration  29: 256708.399 ops/s
# Warmup Iteration  30: 260328.947 ops/s
Iteration   1: 257639.485 ops/s
Iteration   2: 262130.409 ops/s
Iteration   3: 253649.755 ops/s
Iteration   4: 260803.294 ops/s
Iteration   5: 262075.183 ops/s
Iteration   6: 259555.074 ops/s
Iteration   7: 260273.098 ops/s
Iteration   8: 260913.111 ops/s
Iteration   9: 256110.834 ops/s
Iteration  10: 261093.587 ops/s
Iteration  11: 263148.088 ops/s
Iteration  12: 260942.475 ops/s
Iteration  13: 256827.391 ops/s
Iteration  14: 259834.776 ops/s
Iteration  15: 257296.741 ops/s
Iteration  16: 261857.715 ops/s
Iteration  17: 262577.511 ops/s
Iteration  18: 260387.105 ops/s
Iteration  19: 258280.363 ops/s
Iteration  20: 260617.848 ops/s
Iteration  21: 262685.144 ops/s
Iteration  22: 258833.426 ops/s
Iteration  23: 259770.520 ops/s
Iteration  24: 261977.948 ops/s
Iteration  25: 259886.069 ops/s
Iteration  26: 263734.118 ops/s
Iteration  27: 261039.185 ops/s
Iteration  28: 259106.517 ops/s
Iteration  29: 260876.579 ops/s
Iteration  30: 261368.167 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_arrayDelayError":
  260176.384 ±(99.9%) 1492.275 ops/s [Average]
  (min, avg, max) = (253649.755, 260176.384, 263734.118), stdev = 2233.568
  CI (99.9%): [258684.109, 261668.659] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_arrayDelayError  thrpt   30  260176.384 ± 1492.275  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_distinctUntilChangedFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_distinctUntilChangedFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4385023.286 ops/s
# Warmup Iteration   2: 7303073.695 ops/s
# Warmup Iteration   3: 7985066.620 ops/s
# Warmup Iteration   4: 8012081.372 ops/s
# Warmup Iteration   5: 7990107.194 ops/s
# Warmup Iteration   6: 7971016.544 ops/s
# Warmup Iteration   7: 7998076.980 ops/s
# Warmup Iteration   8: 7919182.260 ops/s
# Warmup Iteration   9: 7982940.270 ops/s
# Warmup Iteration  10: 7951866.541 ops/s
# Warmup Iteration  11: 7945142.085 ops/s
# Warmup Iteration  12: 7921497.615 ops/s
# Warmup Iteration  13: 7936748.454 ops/s
# Warmup Iteration  14: 7990039.621 ops/s
# Warmup Iteration  15: 7962902.409 ops/s
# Warmup Iteration  16: 7977536.907 ops/s
# Warmup Iteration  17: 8008916.818 ops/s
# Warmup Iteration  18: 8016202.622 ops/s
# Warmup Iteration  19: 7884846.940 ops/s
# Warmup Iteration  20: 8070075.687 ops/s
# Warmup Iteration  21: 7953063.557 ops/s
# Warmup Iteration  22: 8031868.135 ops/s
# Warmup Iteration  23: 8017544.403 ops/s
# Warmup Iteration  24: 7973958.331 ops/s
# Warmup Iteration  25: 7980114.183 ops/s
# Warmup Iteration  26: 8043958.258 ops/s
# Warmup Iteration  27: 7982675.278 ops/s
# Warmup Iteration  28: 8038663.974 ops/s
# Warmup Iteration  29: 7991987.920 ops/s
# Warmup Iteration  30: 8024938.942 ops/s
Iteration   1: 7951695.176 ops/s
Iteration   2: 8075802.368 ops/s
Iteration   3: 7918633.269 ops/s
Iteration   4: 7999757.615 ops/s
Iteration   5: 7986731.802 ops/s
Iteration   6: 8005898.689 ops/s
Iteration   7: 8063460.099 ops/s
Iteration   8: 7988966.157 ops/s
Iteration   9: 7976179.722 ops/s
Iteration  10: 8026022.092 ops/s
Iteration  11: 7994617.743 ops/s
Iteration  12: 8001640.991 ops/s
Iteration  13: 8043201.184 ops/s
Iteration  14: 8058753.547 ops/s
Iteration  15: 8032774.704 ops/s
Iteration  16: 7991974.158 ops/s
Iteration  17: 8005860.741 ops/s
Iteration  18: 8010296.640 ops/s
Iteration  19: 8008762.014 ops/s
Iteration  20: 7980994.772 ops/s
Iteration  21: 8004574.939 ops/s
Iteration  22: 7967185.274 ops/s
Iteration  23: 8039356.139 ops/s
Iteration  24: 7949797.510 ops/s
Iteration  25: 8017835.670 ops/s
Iteration  26: 8041371.669 ops/s
Iteration  27: 7869817.971 ops/s
Iteration  28: 7959178.100 ops/s
Iteration  29: 8003385.384 ops/s
Iteration  30: 8003644.250 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_distinctUntilChangedFunctionReturnsNull":
  7999272.346 ±(99.9%) 28613.298 ops/s [Average]
  (min, avg, max) = (7869817.971, 7999272.346, 8075802.368), stdev = 42827.040
  CI (99.9%): [7970659.049, 8027885.644] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
ObservableNullTests._Benchmark.benchmark_distinctUntilChangedFunctionReturnsNull  thrpt   30  7999272.346 ± 28613.298  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 394752.230 ops/s
# Warmup Iteration   2: 517141.645 ops/s
# Warmup Iteration   3: 543508.670 ops/s
# Warmup Iteration   4: 600594.597 ops/s
# Warmup Iteration   5: 617671.929 ops/s
# Warmup Iteration   6: 622195.397 ops/s
# Warmup Iteration   7: 620982.224 ops/s
# Warmup Iteration   8: 622539.532 ops/s
# Warmup Iteration   9: 616284.146 ops/s
# Warmup Iteration  10: 618952.825 ops/s
# Warmup Iteration  11: 613407.211 ops/s
# Warmup Iteration  12: 616967.475 ops/s
# Warmup Iteration  13: 616601.600 ops/s
# Warmup Iteration  14: 614731.588 ops/s
# Warmup Iteration  15: 617359.666 ops/s
# Warmup Iteration  16: 617008.233 ops/s
# Warmup Iteration  17: 636516.409 ops/s
# Warmup Iteration  18: 636574.465 ops/s
# Warmup Iteration  19: 640488.714 ops/s
# Warmup Iteration  20: 632696.775 ops/s
# Warmup Iteration  21: 642537.825 ops/s
# Warmup Iteration  22: 639521.990 ops/s
# Warmup Iteration  23: 634206.924 ops/s
# Warmup Iteration  24: 638243.931 ops/s
# Warmup Iteration  25: 640331.712 ops/s
# Warmup Iteration  26: 635117.977 ops/s
# Warmup Iteration  27: 636832.029 ops/s
# Warmup Iteration  28: 636737.065 ops/s
# Warmup Iteration  29: 634590.013 ops/s
# Warmup Iteration  30: 627590.192 ops/s
Iteration   1: 645303.428 ops/s
Iteration   2: 639917.329 ops/s
Iteration   3: 638468.275 ops/s
Iteration   4: 637720.109 ops/s
Iteration   5: 639970.098 ops/s
Iteration   6: 639813.293 ops/s
Iteration   7: 644389.746 ops/s
Iteration   8: 639012.192 ops/s
Iteration   9: 637456.722 ops/s
Iteration  10: 634504.975 ops/s
Iteration  11: 635494.668 ops/s
Iteration  12: 637216.808 ops/s
Iteration  13: 638308.181 ops/s
Iteration  14: 636390.935 ops/s
Iteration  15: 638440.006 ops/s
Iteration  16: 638037.424 ops/s
Iteration  17: 635134.573 ops/s
Iteration  18: 637501.528 ops/s
Iteration  19: 630351.061 ops/s
Iteration  20: 637187.505 ops/s
Iteration  21: 640072.166 ops/s
Iteration  22: 631168.606 ops/s
Iteration  23: 634041.445 ops/s
Iteration  24: 634972.135 ops/s
Iteration  25: 633127.421 ops/s
Iteration  26: 636822.046 ops/s
Iteration  27: 639168.906 ops/s
Iteration  28: 639668.699 ops/s
Iteration  29: 634828.039 ops/s
Iteration  30: 629378.660 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_badRequest":
  637128.899 ±(99.9%) 2363.590 ops/s [Average]
  (min, avg, max) = (629378.660, 637128.899, 645303.428), stdev = 3537.710
  CI (99.9%): [634765.310, 639492.489] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_badRequest  thrpt   30  637128.899 ± 2363.590  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_mainErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_mainErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 430583.872 ops/s
# Warmup Iteration   2: 598029.664 ops/s
# Warmup Iteration   3: 673914.386 ops/s
# Warmup Iteration   4: 643995.584 ops/s
# Warmup Iteration   5: 702065.393 ops/s
# Warmup Iteration   6: 703048.154 ops/s
# Warmup Iteration   7: 697446.287 ops/s
# Warmup Iteration   8: 700055.477 ops/s
# Warmup Iteration   9: 694674.389 ops/s
# Warmup Iteration  10: 696511.414 ops/s
# Warmup Iteration  11: 696826.458 ops/s
# Warmup Iteration  12: 698118.075 ops/s
# Warmup Iteration  13: 678153.292 ops/s
# Warmup Iteration  14: 687068.205 ops/s
# Warmup Iteration  15: 698542.217 ops/s
# Warmup Iteration  16: 699097.590 ops/s
# Warmup Iteration  17: 705089.039 ops/s
# Warmup Iteration  18: 725385.333 ops/s
# Warmup Iteration  19: 720629.156 ops/s
# Warmup Iteration  20: 722820.312 ops/s
# Warmup Iteration  21: 731042.480 ops/s
# Warmup Iteration  22: 724089.615 ops/s
# Warmup Iteration  23: 725612.395 ops/s
# Warmup Iteration  24: 727037.605 ops/s
# Warmup Iteration  25: 725184.648 ops/s
# Warmup Iteration  26: 725914.327 ops/s
# Warmup Iteration  27: 725172.437 ops/s
# Warmup Iteration  28: 725259.912 ops/s
# Warmup Iteration  29: 721506.366 ops/s
# Warmup Iteration  30: 713433.473 ops/s
Iteration   1: 725794.503 ops/s
Iteration   2: 718582.045 ops/s
Iteration   3: 729939.698 ops/s
Iteration   4: 726905.365 ops/s
Iteration   5: 715115.424 ops/s
Iteration   6: 726072.327 ops/s
Iteration   7: 726497.453 ops/s
Iteration   8: 720743.044 ops/s
Iteration   9: 717850.105 ops/s
Iteration  10: 730083.489 ops/s
Iteration  11: 716128.430 ops/s
Iteration  12: 728099.639 ops/s
Iteration  13: 716375.255 ops/s
Iteration  14: 723550.623 ops/s
Iteration  15: 726880.821 ops/s
Iteration  16: 720707.711 ops/s
Iteration  17: 723873.355 ops/s
Iteration  18: 723934.710 ops/s
Iteration  19: 729947.622 ops/s
Iteration  20: 724288.545 ops/s
Iteration  21: 721019.618 ops/s
Iteration  22: 719977.022 ops/s
Iteration  23: 727075.859 ops/s
Iteration  24: 722298.390 ops/s
Iteration  25: 721566.064 ops/s
Iteration  26: 718697.331 ops/s
Iteration  27: 725470.401 ops/s
Iteration  28: 728087.380 ops/s
Iteration  29: 723700.988 ops/s
Iteration  30: 717974.420 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_mainErrors":
  723241.255 ±(99.9%) 2915.894 ops/s [Average]
  (min, avg, max) = (715115.424, 723241.255, 730083.489), stdev = 4364.374
  CI (99.9%): [720325.360, 726157.149] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_mainErrors  thrpt   30  723241.255 ± 2915.894  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_singleCollectionSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_singleCollectionSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 487893.515 ops/s
# Warmup Iteration   2: 685564.621 ops/s
# Warmup Iteration   3: 655250.251 ops/s
# Warmup Iteration   4: 738888.403 ops/s
# Warmup Iteration   5: 729536.084 ops/s
# Warmup Iteration   6: 740988.438 ops/s
# Warmup Iteration   7: 736297.797 ops/s
# Warmup Iteration   8: 729786.731 ops/s
# Warmup Iteration   9: 732407.763 ops/s
# Warmup Iteration  10: 739498.671 ops/s
# Warmup Iteration  11: 740028.582 ops/s
# Warmup Iteration  12: 739986.916 ops/s
# Warmup Iteration  13: 728822.688 ops/s
# Warmup Iteration  14: 735098.834 ops/s
# Warmup Iteration  15: 736898.746 ops/s
# Warmup Iteration  16: 735120.538 ops/s
# Warmup Iteration  17: 767879.749 ops/s
# Warmup Iteration  18: 763909.082 ops/s
# Warmup Iteration  19: 766618.127 ops/s
# Warmup Iteration  20: 770293.817 ops/s
# Warmup Iteration  21: 767757.754 ops/s
# Warmup Iteration  22: 767680.743 ops/s
# Warmup Iteration  23: 764193.633 ops/s
# Warmup Iteration  24: 762528.957 ops/s
# Warmup Iteration  25: 769758.646 ops/s
# Warmup Iteration  26: 760444.964 ops/s
# Warmup Iteration  27: 757695.658 ops/s
# Warmup Iteration  28: 765532.089 ops/s
# Warmup Iteration  29: 773351.577 ops/s
# Warmup Iteration  30: 751737.141 ops/s
Iteration   1: 766700.056 ops/s
Iteration   2: 759194.716 ops/s
Iteration   3: 768814.030 ops/s
Iteration   4: 773025.407 ops/s
Iteration   5: 767764.238 ops/s
Iteration   6: 767040.607 ops/s
Iteration   7: 766188.703 ops/s
Iteration   8: 766095.495 ops/s
Iteration   9: 756772.256 ops/s
Iteration  10: 767031.992 ops/s
Iteration  11: 762811.311 ops/s
Iteration  12: 764216.168 ops/s
Iteration  13: 772480.260 ops/s
Iteration  14: 767178.830 ops/s
Iteration  15: 766265.839 ops/s
Iteration  16: 770570.238 ops/s
Iteration  17: 768003.288 ops/s
Iteration  18: 755201.695 ops/s
Iteration  19: 760962.540 ops/s
Iteration  20: 770688.534 ops/s
Iteration  21: 753307.333 ops/s
Iteration  22: 750119.503 ops/s
Iteration  23: 772494.993 ops/s
Iteration  24: 767836.227 ops/s
Iteration  25: 759737.126 ops/s
Iteration  26: 761405.655 ops/s
Iteration  27: 763806.341 ops/s
Iteration  28: 769356.308 ops/s
Iteration  29: 770273.077 ops/s
Iteration  30: 770659.455 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_singleCollectionSupplierReturnsNull":
  765200.074 ±(99.9%) 3915.895 ops/s [Average]
  (min, avg, max) = (750119.503, 765200.074, 773025.407), stdev = 5861.128
  CI (99.9%): [761284.179, 769115.969] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableToListTest._Benchmark.benchmark_singleCollectionSupplierReturnsNull  thrpt   30  765200.074 ± 3915.895  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_unsafeChildOnNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_unsafeChildOnNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130790.829 ops/s
# Warmup Iteration   2: 176474.352 ops/s
# Warmup Iteration   3: 176898.592 ops/s
# Warmup Iteration   4: 191605.842 ops/s
# Warmup Iteration   5: 193025.735 ops/s
# Warmup Iteration   6: 193811.078 ops/s
# Warmup Iteration   7: 191777.178 ops/s
# Warmup Iteration   8: 189711.672 ops/s
# Warmup Iteration   9: 192763.539 ops/s
# Warmup Iteration  10: 192751.614 ops/s
# Warmup Iteration  11: 192768.212 ops/s
# Warmup Iteration  12: 190659.872 ops/s
# Warmup Iteration  13: 191851.907 ops/s
# Warmup Iteration  14: 189664.542 ops/s
# Warmup Iteration  15: 191182.178 ops/s
# Warmup Iteration  16: 191940.896 ops/s
# Warmup Iteration  17: 192353.827 ops/s
# Warmup Iteration  18: 193825.761 ops/s
# Warmup Iteration  19: 193331.930 ops/s
# Warmup Iteration  20: 192626.406 ops/s
# Warmup Iteration  21: 192186.020 ops/s
# Warmup Iteration  22: 191290.105 ops/s
# Warmup Iteration  23: 192079.191 ops/s
# Warmup Iteration  24: 192961.960 ops/s
# Warmup Iteration  25: 192394.833 ops/s
# Warmup Iteration  26: 193464.609 ops/s
# Warmup Iteration  27: 193211.079 ops/s
# Warmup Iteration  28: 193049.885 ops/s
# Warmup Iteration  29: 192258.620 ops/s
# Warmup Iteration  30: 193879.318 ops/s
Iteration   1: 193262.905 ops/s
Iteration   2: 191849.831 ops/s
Iteration   3: 194086.553 ops/s
Iteration   4: 189531.167 ops/s
Iteration   5: 192758.350 ops/s
Iteration   6: 193146.254 ops/s
Iteration   7: 191487.945 ops/s
Iteration   8: 192390.939 ops/s
Iteration   9: 193199.651 ops/s
Iteration  10: 191625.946 ops/s
Iteration  11: 190561.342 ops/s
Iteration  12: 192721.397 ops/s
Iteration  13: 192830.153 ops/s
Iteration  14: 191813.369 ops/s
Iteration  15: 192826.958 ops/s
Iteration  16: 193369.598 ops/s
Iteration  17: 192132.966 ops/s
Iteration  18: 192416.732 ops/s
Iteration  19: 193137.334 ops/s
Iteration  20: 191666.325 ops/s
Iteration  21: 192891.470 ops/s
Iteration  22: 192511.000 ops/s
Iteration  23: 191732.481 ops/s
Iteration  24: 189739.494 ops/s
Iteration  25: 193012.327 ops/s
Iteration  26: 192648.393 ops/s
Iteration  27: 190631.442 ops/s
Iteration  28: 193140.846 ops/s
Iteration  29: 191168.609 ops/s
Iteration  30: 193032.680 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_unsafeChildOnNextThrows":
  192244.149 ±(99.9%) 726.030 ops/s [Average]
  (min, avg, max) = (189531.167, 192244.149, 194086.553), stdev = 1086.688
  CI (99.9%): [191518.119, 192970.179] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
FlowableReplayTest._Benchmark.benchmark_unsafeChildOnNextThrows  thrpt   30  192244.149 ± 726.030  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_timeInfo$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_timeInfo

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2490375.653 ops/s
# Warmup Iteration   2: 4011177.881 ops/s
# Warmup Iteration   3: 4446893.786 ops/s
# Warmup Iteration   4: 4414361.803 ops/s
# Warmup Iteration   5: 4415257.236 ops/s
# Warmup Iteration   6: 4399332.981 ops/s
# Warmup Iteration   7: 4419300.785 ops/s
# Warmup Iteration   8: 4411116.631 ops/s
# Warmup Iteration   9: 4443419.477 ops/s
# Warmup Iteration  10: 4418730.021 ops/s
# Warmup Iteration  11: 4375184.281 ops/s
# Warmup Iteration  12: 4387309.988 ops/s
# Warmup Iteration  13: 4392614.564 ops/s
# Warmup Iteration  14: 4416785.659 ops/s
# Warmup Iteration  15: 4320743.205 ops/s
# Warmup Iteration  16: 4368218.189 ops/s
# Warmup Iteration  17: 4416587.905 ops/s
# Warmup Iteration  18: 4393627.369 ops/s
# Warmup Iteration  19: 4424422.153 ops/s
# Warmup Iteration  20: 4419653.798 ops/s
# Warmup Iteration  21: 4409987.648 ops/s
# Warmup Iteration  22: 4387278.785 ops/s
# Warmup Iteration  23: 4399989.231 ops/s
# Warmup Iteration  24: 4401456.957 ops/s
# Warmup Iteration  25: 4338742.940 ops/s
# Warmup Iteration  26: 4358984.514 ops/s
# Warmup Iteration  27: 4376715.128 ops/s
# Warmup Iteration  28: 4396606.195 ops/s
# Warmup Iteration  29: 4401850.443 ops/s
# Warmup Iteration  30: 4397959.094 ops/s
Iteration   1: 4393951.190 ops/s
Iteration   2: 4407951.873 ops/s
Iteration   3: 4349244.691 ops/s
Iteration   4: 4397983.547 ops/s
Iteration   5: 4383104.716 ops/s
Iteration   6: 4398221.154 ops/s
Iteration   7: 4433153.535 ops/s
Iteration   8: 4409776.925 ops/s
Iteration   9: 4411439.065 ops/s
Iteration  10: 4402586.746 ops/s
Iteration  11: 4417911.624 ops/s
Iteration  12: 4359838.660 ops/s
Iteration  13: 4438288.703 ops/s
Iteration  14: 4377781.277 ops/s
Iteration  15: 4391969.939 ops/s
Iteration  16: 4398076.024 ops/s
Iteration  17: 4259373.554 ops/s
Iteration  18: 4337884.059 ops/s
Iteration  19: 4376436.444 ops/s
Iteration  20: 4331397.122 ops/s
Iteration  21: 4462258.876 ops/s
Iteration  22: 4388806.731 ops/s
Iteration  23: 4328135.981 ops/s
Iteration  24: 4418875.306 ops/s
Iteration  25: 4412550.560 ops/s
Iteration  26: 4403294.884 ops/s
Iteration  27: 4422332.778 ops/s
Iteration  28: 4403099.200 ops/s
Iteration  29: 4427095.072 ops/s
Iteration  30: 4446709.477 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimestampTest._Benchmark.benchmark_timeInfo":
  4392984.324 ±(99.9%) 27405.983 ops/s [Average]
  (min, avg, max) = (4259373.554, 4392984.324, 4462258.876), stdev = 41019.988
  CI (99.9%): [4365578.341, 4420390.307] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
SingleTimestampTest._Benchmark.benchmark_timeInfo  thrpt   30  4392984.324 ± 27405.983  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_timeInfo$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_timeInfo

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2966583.017 ops/s
# Warmup Iteration   2: 3900281.383 ops/s
# Warmup Iteration   3: 4455082.172 ops/s
# Warmup Iteration   4: 4435872.207 ops/s
# Warmup Iteration   5: 4429732.808 ops/s
# Warmup Iteration   6: 4402566.168 ops/s
# Warmup Iteration   7: 4434802.522 ops/s
# Warmup Iteration   8: 4422900.138 ops/s
# Warmup Iteration   9: 4432902.394 ops/s
# Warmup Iteration  10: 4433149.088 ops/s
# Warmup Iteration  11: 4450956.791 ops/s
# Warmup Iteration  12: 4452671.935 ops/s
# Warmup Iteration  13: 4390272.987 ops/s
# Warmup Iteration  14: 4452646.405 ops/s
# Warmup Iteration  15: 4386285.838 ops/s
# Warmup Iteration  16: 4444684.730 ops/s
# Warmup Iteration  17: 4460454.200 ops/s
# Warmup Iteration  18: 4419453.663 ops/s
# Warmup Iteration  19: 4437746.653 ops/s
# Warmup Iteration  20: 4440856.942 ops/s
# Warmup Iteration  21: 4450565.270 ops/s
# Warmup Iteration  22: 4444319.963 ops/s
# Warmup Iteration  23: 4445268.340 ops/s
# Warmup Iteration  24: 4421369.830 ops/s
# Warmup Iteration  25: 4409823.271 ops/s
# Warmup Iteration  26: 4402667.432 ops/s
# Warmup Iteration  27: 4460178.392 ops/s
# Warmup Iteration  28: 4421179.230 ops/s
# Warmup Iteration  29: 4432845.777 ops/s
# Warmup Iteration  30: 4430857.027 ops/s
Iteration   1: 4357804.438 ops/s
Iteration   2: 4407760.254 ops/s
Iteration   3: 4441367.192 ops/s
Iteration   4: 4413421.570 ops/s
Iteration   5: 4371972.740 ops/s
Iteration   6: 4370871.842 ops/s
Iteration   7: 4441960.647 ops/s
Iteration   8: 4362763.783 ops/s
Iteration   9: 4444457.935 ops/s
Iteration  10: 4434306.671 ops/s
Iteration  11: 4431414.486 ops/s
Iteration  12: 4425832.024 ops/s
Iteration  13: 4430815.678 ops/s
Iteration  14: 4353629.381 ops/s
Iteration  15: 4397614.191 ops/s
Iteration  16: 4457289.480 ops/s
Iteration  17: 4446516.211 ops/s
Iteration  18: 4422541.774 ops/s
Iteration  19: 4442324.921 ops/s
Iteration  20: 4416719.610 ops/s
Iteration  21: 4427437.210 ops/s
Iteration  22: 4377395.427 ops/s
Iteration  23: 4297682.820 ops/s
Iteration  24: 4459255.079 ops/s
Iteration  25: 4401109.841 ops/s
Iteration  26: 4425719.563 ops/s
Iteration  27: 4427172.043 ops/s
Iteration  28: 4446848.168 ops/s
Iteration  29: 4426647.709 ops/s
Iteration  30: 4435521.558 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeIntervalTest._Benchmark.benchmark_timeInfo":
  4413205.808 ±(99.9%) 24822.692 ops/s [Average]
  (min, avg, max) = (4297682.820, 4413205.808, 4459255.079), stdev = 37153.440
  CI (99.9%): [4388383.116, 4438028.500] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SingleTimeIntervalTest._Benchmark.benchmark_timeInfo  thrpt   30  4413205.808 ± 24822.692  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_onSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_onSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 501435.012 ops/s
# Warmup Iteration   2: 636748.866 ops/s
# Warmup Iteration   3: 628888.929 ops/s
# Warmup Iteration   4: 685311.220 ops/s
# Warmup Iteration   5: 685622.854 ops/s
# Warmup Iteration   6: 693940.343 ops/s
# Warmup Iteration   7: 689664.735 ops/s
# Warmup Iteration   8: 681992.149 ops/s
# Warmup Iteration   9: 693400.765 ops/s
# Warmup Iteration  10: 693623.629 ops/s
# Warmup Iteration  11: 693583.742 ops/s
# Warmup Iteration  12: 694814.714 ops/s
# Warmup Iteration  13: 689973.653 ops/s
# Warmup Iteration  14: 672423.434 ops/s
# Warmup Iteration  15: 677980.900 ops/s
# Warmup Iteration  16: 688229.323 ops/s
# Warmup Iteration  17: 723955.044 ops/s
# Warmup Iteration  18: 711454.811 ops/s
# Warmup Iteration  19: 721399.876 ops/s
# Warmup Iteration  20: 716459.547 ops/s
# Warmup Iteration  21: 726113.074 ops/s
# Warmup Iteration  22: 725001.016 ops/s
# Warmup Iteration  23: 717239.828 ops/s
# Warmup Iteration  24: 716069.433 ops/s
# Warmup Iteration  25: 720951.193 ops/s
# Warmup Iteration  26: 716451.370 ops/s
# Warmup Iteration  27: 716986.800 ops/s
# Warmup Iteration  28: 722384.709 ops/s
# Warmup Iteration  29: 725305.724 ops/s
# Warmup Iteration  30: 716717.097 ops/s
Iteration   1: 718874.870 ops/s
Iteration   2: 719648.152 ops/s
Iteration   3: 702893.742 ops/s
Iteration   4: 725694.151 ops/s
Iteration   5: 723944.486 ops/s
Iteration   6: 719680.398 ops/s
Iteration   7: 722758.681 ops/s
Iteration   8: 720479.365 ops/s
Iteration   9: 725136.284 ops/s
Iteration  10: 722519.097 ops/s
Iteration  11: 718551.338 ops/s
Iteration  12: 715394.348 ops/s
Iteration  13: 707184.595 ops/s
Iteration  14: 719430.859 ops/s
Iteration  15: 722071.021 ops/s
Iteration  16: 706166.797 ops/s
Iteration  17: 716840.004 ops/s
Iteration  18: 719275.701 ops/s
Iteration  19: 720202.111 ops/s
Iteration  20: 718856.071 ops/s
Iteration  21: 716807.648 ops/s
Iteration  22: 723310.541 ops/s
Iteration  23: 719207.753 ops/s
Iteration  24: 718641.922 ops/s
Iteration  25: 723361.013 ops/s
Iteration  26: 720064.545 ops/s
Iteration  27: 718653.132 ops/s
Iteration  28: 721900.659 ops/s
Iteration  29: 718864.177 ops/s
Iteration  30: 722749.171 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_onSubscribe":
  718972.088 ±(99.9%) 3499.308 ops/s [Average]
  (min, avg, max) = (702893.742, 718972.088, 725694.151), stdev = 5237.599
  CI (99.9%): [715472.780, 722471.395] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_onSubscribe  thrpt   30  718972.088 ± 3499.308  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingLastNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingLastNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11918576.647 ops/s
# Warmup Iteration   2: 15722245.656 ops/s
# Warmup Iteration   3: 17769613.325 ops/s
# Warmup Iteration   4: 17703004.670 ops/s
# Warmup Iteration   5: 17811626.055 ops/s
# Warmup Iteration   6: 17897158.267 ops/s
# Warmup Iteration   7: 17529907.036 ops/s
# Warmup Iteration   8: 17908529.267 ops/s
# Warmup Iteration   9: 17845432.650 ops/s
# Warmup Iteration  10: 17923132.345 ops/s
# Warmup Iteration  11: 17950105.294 ops/s
# Warmup Iteration  12: 17832344.050 ops/s
# Warmup Iteration  13: 17580422.801 ops/s
# Warmup Iteration  14: 17960884.776 ops/s
# Warmup Iteration  15: 17491811.060 ops/s
# Warmup Iteration  16: 17802632.781 ops/s
# Warmup Iteration  17: 17845198.615 ops/s
# Warmup Iteration  18: 17624083.682 ops/s
# Warmup Iteration  19: 17844595.738 ops/s
# Warmup Iteration  20: 17417413.519 ops/s
# Warmup Iteration  21: 17317634.635 ops/s
# Warmup Iteration  22: 17768007.831 ops/s
# Warmup Iteration  23: 17863635.932 ops/s
# Warmup Iteration  24: 17743726.388 ops/s
# Warmup Iteration  25: 17675550.094 ops/s
# Warmup Iteration  26: 17738397.489 ops/s
# Warmup Iteration  27: 17764805.433 ops/s
# Warmup Iteration  28: 17720181.836 ops/s
# Warmup Iteration  29: 17776002.458 ops/s
# Warmup Iteration  30: 17697994.554 ops/s
Iteration   1: 17741888.527 ops/s
Iteration   2: 17552380.462 ops/s
Iteration   3: 17780892.966 ops/s
Iteration   4: 17843159.633 ops/s
Iteration   5: 17672581.273 ops/s
Iteration   6: 17665426.093 ops/s
Iteration   7: 17504047.526 ops/s
Iteration   8: 17735688.857 ops/s
Iteration   9: 17803840.362 ops/s
Iteration  10: 17831279.832 ops/s
Iteration  11: 17771009.795 ops/s
Iteration  12: 17709377.022 ops/s
Iteration  13: 17813744.192 ops/s
Iteration  14: 17657913.932 ops/s
Iteration  15: 17786906.149 ops/s
Iteration  16: 17743478.029 ops/s
Iteration  17: 17769897.119 ops/s
Iteration  18: 17694480.575 ops/s
Iteration  19: 17550661.530 ops/s
Iteration  20: 17407550.444 ops/s
Iteration  21: 17818016.966 ops/s
Iteration  22: 17756161.447 ops/s
Iteration  23: 17479095.039 ops/s
Iteration  24: 17847822.646 ops/s
Iteration  25: 17764828.206 ops/s
Iteration  26: 17862049.601 ops/s
Iteration  27: 17757814.784 ops/s
Iteration  28: 17717787.887 ops/s
Iteration  29: 17911239.462 ops/s
Iteration  30: 17767269.584 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingLastNormal":
  17723942.998 ±(99.9%) 80024.689 ops/s [Average]
  (min, avg, max) = (17407550.444, 17723942.998, 17911239.462), stdev = 119777.197
  CI (99.9%): [17643918.309, 17803967.687] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingLastNormal  thrpt   30  17723942.998 ± 80024.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirstNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirstNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10308339.191 ops/s
# Warmup Iteration   2: 13428530.638 ops/s
# Warmup Iteration   3: 15424463.939 ops/s
# Warmup Iteration   4: 15478069.453 ops/s
# Warmup Iteration   5: 15381687.430 ops/s
# Warmup Iteration   6: 15470609.022 ops/s
# Warmup Iteration   7: 15440433.014 ops/s
# Warmup Iteration   8: 15378876.638 ops/s
# Warmup Iteration   9: 15389457.189 ops/s
# Warmup Iteration  10: 15433600.111 ops/s
# Warmup Iteration  11: 15313724.288 ops/s
# Warmup Iteration  12: 15227101.122 ops/s
# Warmup Iteration  13: 15439714.856 ops/s
# Warmup Iteration  14: 15374039.435 ops/s
# Warmup Iteration  15: 15402682.279 ops/s
# Warmup Iteration  16: 15386148.551 ops/s
# Warmup Iteration  17: 15274551.463 ops/s
# Warmup Iteration  18: 15263736.297 ops/s
# Warmup Iteration  19: 15438310.148 ops/s
# Warmup Iteration  20: 15383354.150 ops/s
# Warmup Iteration  21: 15206985.333 ops/s
# Warmup Iteration  22: 15342475.071 ops/s
# Warmup Iteration  23: 15272613.401 ops/s
# Warmup Iteration  24: 15334992.029 ops/s
# Warmup Iteration  25: 15322745.393 ops/s
# Warmup Iteration  26: 15373557.317 ops/s
# Warmup Iteration  27: 15320139.577 ops/s
# Warmup Iteration  28: 15369337.046 ops/s
# Warmup Iteration  29: 15373313.533 ops/s
# Warmup Iteration  30: 15212284.629 ops/s
Iteration   1: 15419856.605 ops/s
Iteration   2: 15334493.978 ops/s
Iteration   3: 15382784.476 ops/s
Iteration   4: 15361281.634 ops/s
Iteration   5: 15272537.536 ops/s
Iteration   6: 15151722.056 ops/s
Iteration   7: 15336218.653 ops/s
Iteration   8: 15279537.624 ops/s
Iteration   9: 15315623.745 ops/s
Iteration  10: 15366585.775 ops/s
Iteration  11: 15445003.264 ops/s
Iteration  12: 15287842.133 ops/s
Iteration  13: 15327534.756 ops/s
Iteration  14: 15256983.345 ops/s
Iteration  15: 15258211.402 ops/s
Iteration  16: 15338809.449 ops/s
Iteration  17: 15441918.895 ops/s
Iteration  18: 15400347.928 ops/s
Iteration  19: 15175792.364 ops/s
Iteration  20: 15400784.107 ops/s
Iteration  21: 15334971.177 ops/s
Iteration  22: 15377858.119 ops/s
Iteration  23: 15350547.445 ops/s
Iteration  24: 15414482.455 ops/s
Iteration  25: 15422973.246 ops/s
Iteration  26: 15411042.186 ops/s
Iteration  27: 15358428.636 ops/s
Iteration  28: 15284615.424 ops/s
Iteration  29: 15384193.525 ops/s
Iteration  30: 15302944.350 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingFirstNormal":
  15339864.210 ±(99.9%) 48308.401 ops/s [Average]
  (min, avg, max) = (15151722.056, 15339864.210, 15445003.264), stdev = 72305.746
  CI (99.9%): [15291555.809, 15388172.610] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingFirstNormal  thrpt   30  15339864.210 ± 48308.401  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToStringObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToStringObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4756202.548 ops/s
# Warmup Iteration   2: 6957100.219 ops/s
# Warmup Iteration   3: 7818735.309 ops/s
# Warmup Iteration   4: 7776238.031 ops/s
# Warmup Iteration   5: 7750904.168 ops/s
# Warmup Iteration   6: 7815698.257 ops/s
# Warmup Iteration   7: 7800417.200 ops/s
# Warmup Iteration   8: 7833177.262 ops/s
# Warmup Iteration   9: 7817118.389 ops/s
# Warmup Iteration  10: 7795627.230 ops/s
# Warmup Iteration  11: 7782154.164 ops/s
# Warmup Iteration  12: 7794082.227 ops/s
# Warmup Iteration  13: 7790407.185 ops/s
# Warmup Iteration  14: 7589153.073 ops/s
# Warmup Iteration  15: 7778675.453 ops/s
# Warmup Iteration  16: 7781392.248 ops/s
# Warmup Iteration  17: 7837548.107 ops/s
# Warmup Iteration  18: 7800285.697 ops/s
# Warmup Iteration  19: 7797485.150 ops/s
# Warmup Iteration  20: 7793891.094 ops/s
# Warmup Iteration  21: 7788848.535 ops/s
# Warmup Iteration  22: 7805585.266 ops/s
# Warmup Iteration  23: 7722469.289 ops/s
# Warmup Iteration  24: 7705021.066 ops/s
# Warmup Iteration  25: 7815454.232 ops/s
# Warmup Iteration  26: 7773708.574 ops/s
# Warmup Iteration  27: 7768236.794 ops/s
# Warmup Iteration  28: 7796479.428 ops/s
# Warmup Iteration  29: 7801943.391 ops/s
# Warmup Iteration  30: 7775615.600 ops/s
Iteration   1: 7747775.247 ops/s
Iteration   2: 7737646.289 ops/s
Iteration   3: 7786690.885 ops/s
Iteration   4: 7816760.773 ops/s
Iteration   5: 7724776.258 ops/s
Iteration   6: 7842387.867 ops/s
Iteration   7: 7866350.886 ops/s
Iteration   8: 7803273.567 ops/s
Iteration   9: 7846578.325 ops/s
Iteration  10: 7783259.808 ops/s
Iteration  11: 7771002.502 ops/s
Iteration  12: 7710437.883 ops/s
Iteration  13: 7814218.972 ops/s
Iteration  14: 7808289.837 ops/s
Iteration  15: 7786355.011 ops/s
Iteration  16: 7816785.215 ops/s
Iteration  17: 7840955.644 ops/s
Iteration  18: 7700432.092 ops/s
Iteration  19: 7782034.950 ops/s
Iteration  20: 7801527.087 ops/s
Iteration  21: 7834283.834 ops/s
Iteration  22: 7828774.568 ops/s
Iteration  23: 7743892.083 ops/s
Iteration  24: 7781321.766 ops/s
Iteration  25: 7653398.220 ops/s
Iteration  26: 7730645.578 ops/s
Iteration  27: 7788271.098 ops/s
Iteration  28: 7819770.991 ops/s
Iteration  29: 7810758.881 ops/s
Iteration  30: 7799114.236 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToStringObservable":
  7785925.678 ±(99.9%) 32686.915 ops/s [Average]
  (min, avg, max) = (7653398.220, 7785925.678, 7866350.886), stdev = 48924.240
  CI (99.9%): [7753238.763, 7818612.594] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableCollectTest._Benchmark.benchmark_collectToStringObservable  thrpt   30  7785925.678 ± 32686.915  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToListObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToListObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3638379.673 ops/s
# Warmup Iteration   2: 5115108.355 ops/s
# Warmup Iteration   3: 5857627.355 ops/s
# Warmup Iteration   4: 5824553.035 ops/s
# Warmup Iteration   5: 5865345.798 ops/s
# Warmup Iteration   6: 5824144.224 ops/s
# Warmup Iteration   7: 5856120.571 ops/s
# Warmup Iteration   8: 5830446.084 ops/s
# Warmup Iteration   9: 5828151.325 ops/s
# Warmup Iteration  10: 5857791.163 ops/s
# Warmup Iteration  11: 5864427.592 ops/s
# Warmup Iteration  12: 5832385.853 ops/s
# Warmup Iteration  13: 5822798.496 ops/s
# Warmup Iteration  14: 5763409.692 ops/s
# Warmup Iteration  15: 5850677.156 ops/s
# Warmup Iteration  16: 5735796.544 ops/s
# Warmup Iteration  17: 5822733.374 ops/s
# Warmup Iteration  18: 5858120.008 ops/s
# Warmup Iteration  19: 5744755.020 ops/s
# Warmup Iteration  20: 5849368.163 ops/s
# Warmup Iteration  21: 5867151.774 ops/s
# Warmup Iteration  22: 5862894.880 ops/s
# Warmup Iteration  23: 5802180.176 ops/s
# Warmup Iteration  24: 5857338.128 ops/s
# Warmup Iteration  25: 5749508.135 ops/s
# Warmup Iteration  26: 5772136.896 ops/s
# Warmup Iteration  27: 5827879.974 ops/s
# Warmup Iteration  28: 5858968.117 ops/s
# Warmup Iteration  29: 5846232.051 ops/s
# Warmup Iteration  30: 5830966.530 ops/s
Iteration   1: 5893470.275 ops/s
Iteration   2: 5868848.542 ops/s
Iteration   3: 5847389.977 ops/s
Iteration   4: 5813469.927 ops/s
Iteration   5: 5853849.195 ops/s
Iteration   6: 5804525.614 ops/s
Iteration   7: 5852845.120 ops/s
Iteration   8: 5855357.260 ops/s
Iteration   9: 5837840.430 ops/s
Iteration  10: 5853716.681 ops/s
Iteration  11: 5837954.228 ops/s
Iteration  12: 5848411.236 ops/s
Iteration  13: 5820234.933 ops/s
Iteration  14: 5756249.649 ops/s
Iteration  15: 5853774.805 ops/s
Iteration  16: 5841316.055 ops/s
Iteration  17: 5793357.650 ops/s
Iteration  18: 5854688.937 ops/s
Iteration  19: 5814071.670 ops/s
Iteration  20: 5826674.103 ops/s
Iteration  21: 5693879.995 ops/s
Iteration  22: 5830884.810 ops/s
Iteration  23: 5826556.314 ops/s
Iteration  24: 5815129.918 ops/s
Iteration  25: 5831503.412 ops/s
Iteration  26: 5856363.412 ops/s
Iteration  27: 5840147.429 ops/s
Iteration  28: 5836444.699 ops/s
Iteration  29: 5823050.648 ops/s
Iteration  30: 5811184.921 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToListObservable":
  5829773.062 ±(99.9%) 24175.854 ops/s [Average]
  (min, avg, max) = (5693879.995, 5829773.062, 5893470.275), stdev = 36185.283
  CI (99.9%): [5805597.208, 5853948.915] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableCollectTest._Benchmark.benchmark_collectToListObservable  thrpt   30  5829773.062 ± 24175.854  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_followingFirstObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_followingFirstObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7638867.585 ops/s
# Warmup Iteration   2: 9683191.870 ops/s
# Warmup Iteration   3: 10939706.825 ops/s
# Warmup Iteration   4: 10986299.784 ops/s
# Warmup Iteration   5: 11023416.192 ops/s
# Warmup Iteration   6: 10921053.077 ops/s
# Warmup Iteration   7: 11033012.739 ops/s
# Warmup Iteration   8: 10931625.076 ops/s
# Warmup Iteration   9: 10946180.939 ops/s
# Warmup Iteration  10: 10937474.716 ops/s
# Warmup Iteration  11: 10949935.444 ops/s
# Warmup Iteration  12: 10800155.010 ops/s
# Warmup Iteration  13: 10990645.277 ops/s
# Warmup Iteration  14: 11042630.273 ops/s
# Warmup Iteration  15: 11044540.941 ops/s
# Warmup Iteration  16: 11033967.555 ops/s
# Warmup Iteration  17: 10801588.051 ops/s
# Warmup Iteration  18: 11017996.891 ops/s
# Warmup Iteration  19: 11010180.801 ops/s
# Warmup Iteration  20: 10826562.111 ops/s
# Warmup Iteration  21: 10970033.499 ops/s
# Warmup Iteration  22: 10802893.106 ops/s
# Warmup Iteration  23: 11033771.527 ops/s
# Warmup Iteration  24: 11033808.759 ops/s
# Warmup Iteration  25: 10969843.586 ops/s
# Warmup Iteration  26: 10972902.359 ops/s
# Warmup Iteration  27: 11066936.840 ops/s
# Warmup Iteration  28: 11062928.180 ops/s
# Warmup Iteration  29: 10898995.132 ops/s
# Warmup Iteration  30: 10999138.763 ops/s
Iteration   1: 10978878.399 ops/s
Iteration   2: 11058888.734 ops/s
Iteration   3: 11020080.761 ops/s
Iteration   4: 11066544.260 ops/s
Iteration   5: 10993702.244 ops/s
Iteration   6: 11015230.735 ops/s
Iteration   7: 10980808.770 ops/s
Iteration   8: 11066182.556 ops/s
Iteration   9: 10914516.396 ops/s
Iteration  10: 10895205.088 ops/s
Iteration  11: 11006941.813 ops/s
Iteration  12: 10987723.447 ops/s
Iteration  13: 11038520.615 ops/s
Iteration  14: 11067693.649 ops/s
Iteration  15: 11059533.824 ops/s
Iteration  16: 11124270.261 ops/s
Iteration  17: 10932983.272 ops/s
Iteration  18: 10999237.066 ops/s
Iteration  19: 10969305.037 ops/s
Iteration  20: 10863268.120 ops/s
Iteration  21: 11088350.356 ops/s
Iteration  22: 10999296.281 ops/s
Iteration  23: 10985955.145 ops/s
Iteration  24: 10977263.718 ops/s
Iteration  25: 11025360.345 ops/s
Iteration  26: 11018890.316 ops/s
Iteration  27: 10952653.790 ops/s
Iteration  28: 10872877.761 ops/s
Iteration  29: 10968500.009 ops/s
Iteration  30: 10960751.013 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_followingFirstObservable":
  10996313.793 ±(99.9%) 41424.544 ops/s [Average]
  (min, avg, max) = (10863268.120, 10996313.793, 11124270.261), stdev = 62002.311
  CI (99.9%): [10954889.249, 11037738.336] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score       Error  Units
ObservableAllTest._Benchmark.benchmark_followingFirstObservable  thrpt   30  10996313.793 ± 41424.544  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_exceptionWithMoreThanOneElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_exceptionWithMoreThanOneElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 368440.873 ops/s
# Warmup Iteration   2: 420911.372 ops/s
# Warmup Iteration   3: 418536.090 ops/s
# Warmup Iteration   4: 448271.034 ops/s
# Warmup Iteration   5: 451702.027 ops/s
# Warmup Iteration   6: 452282.406 ops/s
# Warmup Iteration   7: 451823.832 ops/s
# Warmup Iteration   8: 450602.969 ops/s
# Warmup Iteration   9: 454711.915 ops/s
# Warmup Iteration  10: 453484.713 ops/s
# Warmup Iteration  11: 449041.431 ops/s
# Warmup Iteration  12: 447472.670 ops/s
# Warmup Iteration  13: 446781.757 ops/s
# Warmup Iteration  14: 451122.032 ops/s
# Warmup Iteration  15: 448945.656 ops/s
# Warmup Iteration  16: 450474.188 ops/s
# Warmup Iteration  17: 474995.731 ops/s
# Warmup Iteration  18: 477683.747 ops/s
# Warmup Iteration  19: 474244.561 ops/s
# Warmup Iteration  20: 474886.330 ops/s
# Warmup Iteration  21: 474817.793 ops/s
# Warmup Iteration  22: 472593.085 ops/s
# Warmup Iteration  23: 474881.082 ops/s
# Warmup Iteration  24: 477141.400 ops/s
# Warmup Iteration  25: 475779.709 ops/s
# Warmup Iteration  26: 470948.433 ops/s
# Warmup Iteration  27: 470995.709 ops/s
# Warmup Iteration  28: 474143.979 ops/s
# Warmup Iteration  29: 474472.668 ops/s
# Warmup Iteration  30: 474965.044 ops/s
Iteration   1: 476578.205 ops/s
Iteration   2: 472817.909 ops/s
Iteration   3: 448703.394 ops/s
Iteration   4: 474959.887 ops/s
Iteration   5: 475255.524 ops/s
Iteration   6: 476998.085 ops/s
Iteration   7: 474953.621 ops/s
Iteration   8: 474067.572 ops/s
Iteration   9: 475287.792 ops/s
Iteration  10: 476649.274 ops/s
Iteration  11: 477254.466 ops/s
Iteration  12: 475087.945 ops/s
Iteration  13: 471794.087 ops/s
Iteration  14: 473748.428 ops/s
Iteration  15: 471531.891 ops/s
Iteration  16: 477927.497 ops/s
Iteration  17: 476897.470 ops/s
Iteration  18: 474858.314 ops/s
Iteration  19: 473956.252 ops/s
Iteration  20: 474324.510 ops/s
Iteration  21: 474083.140 ops/s
Iteration  22: 474064.017 ops/s
Iteration  23: 472567.878 ops/s
Iteration  24: 475982.821 ops/s
Iteration  25: 474212.947 ops/s
Iteration  26: 473941.188 ops/s
Iteration  27: 475911.027 ops/s
Iteration  28: 475457.854 ops/s
Iteration  29: 477737.483 ops/s
Iteration  30: 468769.180 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_exceptionWithMoreThanOneElement":
  473879.322 ±(99.9%) 3440.918 ops/s [Average]
  (min, avg, max) = (448703.394, 473879.322, 477927.497), stdev = 5150.205
  CI (99.9%): [470438.404, 477320.240] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
BlockingObservableToFutureTest._Benchmark.benchmark_exceptionWithMoreThanOneElement  thrpt   30  473879.322 ± 3440.918  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_toFuture$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_toFuture

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8958959.585 ops/s
# Warmup Iteration   2: 11613879.092 ops/s
# Warmup Iteration   3: 13151518.019 ops/s
# Warmup Iteration   4: 13297880.826 ops/s
# Warmup Iteration   5: 13383974.774 ops/s
# Warmup Iteration   6: 13247668.688 ops/s
# Warmup Iteration   7: 13208750.635 ops/s
# Warmup Iteration   8: 13279420.069 ops/s
# Warmup Iteration   9: 13285757.469 ops/s
# Warmup Iteration  10: 13098875.964 ops/s
# Warmup Iteration  11: 13308067.673 ops/s
# Warmup Iteration  12: 13220679.749 ops/s
# Warmup Iteration  13: 13257538.310 ops/s
# Warmup Iteration  14: 13248828.078 ops/s
# Warmup Iteration  15: 13284937.282 ops/s
# Warmup Iteration  16: 13070899.962 ops/s
# Warmup Iteration  17: 13367530.857 ops/s
# Warmup Iteration  18: 13370593.198 ops/s
# Warmup Iteration  19: 13137074.448 ops/s
# Warmup Iteration  20: 13349772.080 ops/s
# Warmup Iteration  21: 13326570.820 ops/s
# Warmup Iteration  22: 13388871.682 ops/s
# Warmup Iteration  23: 13249816.640 ops/s
# Warmup Iteration  24: 13263172.894 ops/s
# Warmup Iteration  25: 13256092.155 ops/s
# Warmup Iteration  26: 12996931.985 ops/s
# Warmup Iteration  27: 13342734.724 ops/s
# Warmup Iteration  28: 13095309.038 ops/s
# Warmup Iteration  29: 13271466.651 ops/s
# Warmup Iteration  30: 13402802.552 ops/s
Iteration   1: 13168346.522 ops/s
Iteration   2: 13334032.001 ops/s
Iteration   3: 13138391.351 ops/s
Iteration   4: 13376765.902 ops/s
Iteration   5: 13349132.718 ops/s
Iteration   6: 13347821.299 ops/s
Iteration   7: 13204165.072 ops/s
Iteration   8: 13290952.979 ops/s
Iteration   9: 13264390.240 ops/s
Iteration  10: 13347809.459 ops/s
Iteration  11: 13237877.856 ops/s
Iteration  12: 13264298.432 ops/s
Iteration  13: 13018798.167 ops/s
Iteration  14: 13261843.579 ops/s
Iteration  15: 13255683.683 ops/s
Iteration  16: 13280355.173 ops/s
Iteration  17: 13315949.639 ops/s
Iteration  18: 13306682.599 ops/s
Iteration  19: 13189562.617 ops/s
Iteration  20: 13152177.086 ops/s
Iteration  21: 13160025.276 ops/s
Iteration  22: 13356940.837 ops/s
Iteration  23: 13282773.511 ops/s
Iteration  24: 13328569.315 ops/s
Iteration  25: 13393720.060 ops/s
Iteration  26: 13373679.526 ops/s
Iteration  27: 13325150.241 ops/s
Iteration  28: 13212780.781 ops/s
Iteration  29: 13201259.946 ops/s
Iteration  30: 13305802.795 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_toFuture":
  13268191.289 ±(99.9%) 57688.776 ops/s [Average]
  (min, avg, max) = (13018798.167, 13268191.289, 13393720.060), stdev = 86345.851
  CI (99.9%): [13210502.513, 13325880.065] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score       Error  Units
BlockingObservableToFutureTest._Benchmark.benchmark_toFuture  thrpt   30  13268191.289 ± 57688.776  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_withFollowingFirstObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_withFollowingFirstObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7100700.778 ops/s
# Warmup Iteration   2: 9418500.127 ops/s
# Warmup Iteration   3: 10870786.694 ops/s
# Warmup Iteration   4: 10795267.429 ops/s
# Warmup Iteration   5: 10850865.901 ops/s
# Warmup Iteration   6: 10790093.726 ops/s
# Warmup Iteration   7: 10789119.477 ops/s
# Warmup Iteration   8: 10758164.868 ops/s
# Warmup Iteration   9: 10795234.786 ops/s
# Warmup Iteration  10: 10833861.598 ops/s
# Warmup Iteration  11: 10806801.263 ops/s
# Warmup Iteration  12: 10859409.998 ops/s
# Warmup Iteration  13: 10797759.140 ops/s
# Warmup Iteration  14: 10718768.437 ops/s
# Warmup Iteration  15: 10728504.819 ops/s
# Warmup Iteration  16: 10762906.345 ops/s
# Warmup Iteration  17: 10824830.699 ops/s
# Warmup Iteration  18: 10812665.786 ops/s
# Warmup Iteration  19: 10795656.462 ops/s
# Warmup Iteration  20: 10657507.306 ops/s
# Warmup Iteration  21: 10832768.428 ops/s
# Warmup Iteration  22: 10855688.419 ops/s
# Warmup Iteration  23: 10845865.213 ops/s
# Warmup Iteration  24: 10914833.387 ops/s
# Warmup Iteration  25: 10850732.200 ops/s
# Warmup Iteration  26: 10894744.539 ops/s
# Warmup Iteration  27: 10858552.136 ops/s
# Warmup Iteration  28: 10633706.798 ops/s
# Warmup Iteration  29: 10485084.350 ops/s
# Warmup Iteration  30: 10755416.059 ops/s
Iteration   1: 10892991.026 ops/s
Iteration   2: 10848935.148 ops/s
Iteration   3: 10782539.594 ops/s
Iteration   4: 10788781.613 ops/s
Iteration   5: 10775053.083 ops/s
Iteration   6: 10876493.591 ops/s
Iteration   7: 10819532.614 ops/s
Iteration   8: 10827510.593 ops/s
Iteration   9: 10862959.533 ops/s
Iteration  10: 10899318.950 ops/s
Iteration  11: 10844065.828 ops/s
Iteration  12: 10766608.687 ops/s
Iteration  13: 10870182.259 ops/s
Iteration  14: 10841869.045 ops/s
Iteration  15: 10853064.555 ops/s
Iteration  16: 10765310.549 ops/s
Iteration  17: 10941538.259 ops/s
Iteration  18: 10757317.854 ops/s
Iteration  19: 10740834.994 ops/s
Iteration  20: 10766724.014 ops/s
Iteration  21: 10889517.410 ops/s
Iteration  22: 10917159.380 ops/s
Iteration  23: 10848023.473 ops/s
Iteration  24: 10757303.259 ops/s
Iteration  25: 10795064.591 ops/s
Iteration  26: 10863976.604 ops/s
Iteration  27: 10857056.811 ops/s
Iteration  28: 10819708.733 ops/s
Iteration  29: 10868669.698 ops/s
Iteration  30: 10816984.723 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_withFollowingFirstObservable":
  10831836.549 ±(99.9%) 35387.432 ops/s [Average]
  (min, avg, max) = (10740834.994, 10831836.549, 10941538.259), stdev = 52966.246
  CI (99.9%): [10796449.117, 10867223.981] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score       Error  Units
ObservableAnyTest._Benchmark.benchmark_withFollowingFirstObservable  thrpt   30  10831836.549 ± 35387.432  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingLastEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingLastEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 861421.563 ops/s
# Warmup Iteration   2: 942800.078 ops/s
# Warmup Iteration   3: 932899.618 ops/s
# Warmup Iteration   4: 1007734.139 ops/s
# Warmup Iteration   5: 1005459.766 ops/s
# Warmup Iteration   6: 1011276.609 ops/s
# Warmup Iteration   7: 1014399.611 ops/s
# Warmup Iteration   8: 1003277.803 ops/s
# Warmup Iteration   9: 1016572.929 ops/s
# Warmup Iteration  10: 1006942.958 ops/s
# Warmup Iteration  11: 1013182.205 ops/s
# Warmup Iteration  12: 1012222.636 ops/s
# Warmup Iteration  13: 1010140.733 ops/s
# Warmup Iteration  14: 1000050.859 ops/s
# Warmup Iteration  15: 1007216.321 ops/s
# Warmup Iteration  16: 1014025.551 ops/s
# Warmup Iteration  17: 1074833.667 ops/s
# Warmup Iteration  18: 1068043.522 ops/s
# Warmup Iteration  19: 1067094.501 ops/s
# Warmup Iteration  20: 1075205.043 ops/s
# Warmup Iteration  21: 1072571.745 ops/s
# Warmup Iteration  22: 1067057.067 ops/s
# Warmup Iteration  23: 1067042.298 ops/s
# Warmup Iteration  24: 1067742.727 ops/s
# Warmup Iteration  25: 1063437.563 ops/s
# Warmup Iteration  26: 1062955.543 ops/s
# Warmup Iteration  27: 1066774.892 ops/s
# Warmup Iteration  28: 1063117.014 ops/s
# Warmup Iteration  29: 1074061.419 ops/s
# Warmup Iteration  30: 1053203.323 ops/s
Iteration   1: 1066465.354 ops/s
Iteration   2: 1065356.707 ops/s
Iteration   3: 1069977.174 ops/s
Iteration   4: 1058569.201 ops/s
Iteration   5: 1050902.105 ops/s
Iteration   6: 1072826.430 ops/s
Iteration   7: 1065203.162 ops/s
Iteration   8: 1070744.013 ops/s
Iteration   9: 1067032.053 ops/s
Iteration  10: 1062205.066 ops/s
Iteration  11: 1064869.265 ops/s
Iteration  12: 1070959.484 ops/s
Iteration  13: 1066631.148 ops/s
Iteration  14: 1065719.955 ops/s
Iteration  15: 1069393.773 ops/s
Iteration  16: 1067159.945 ops/s
Iteration  17: 1055849.044 ops/s
Iteration  18: 1066702.517 ops/s
Iteration  19: 1069477.110 ops/s
Iteration  20: 1060339.602 ops/s
Iteration  21: 1069013.720 ops/s
Iteration  22: 1069270.693 ops/s
Iteration  23: 1056721.092 ops/s
Iteration  24: 1077021.476 ops/s
Iteration  25: 1072882.737 ops/s
Iteration  26: 1076566.107 ops/s
Iteration  27: 1074231.560 ops/s
Iteration  28: 1068549.154 ops/s
Iteration  29: 1079529.677 ops/s
Iteration  30: 1073133.463 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_blockingLastEmpty":
  1067443.426 ±(99.9%) 4304.474 ops/s [Average]
  (min, avg, max) = (1050902.105, 1067443.426, 1079529.677), stdev = 6442.735
  CI (99.9%): [1063138.952, 1071747.901] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score      Error  Units
ObservableBlockingTest._Benchmark.benchmark_blockingLastEmpty  thrpt   30  1067443.426 ± 4304.474  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromArrayOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromArrayOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 710616.757 ops/s
# Warmup Iteration   2: 823309.612 ops/s
# Warmup Iteration   3: 851145.459 ops/s
# Warmup Iteration   4: 793265.251 ops/s
# Warmup Iteration   5: 902889.497 ops/s
# Warmup Iteration   6: 891195.252 ops/s
# Warmup Iteration   7: 905788.771 ops/s
# Warmup Iteration   8: 901050.811 ops/s
# Warmup Iteration   9: 902100.304 ops/s
# Warmup Iteration  10: 900243.136 ops/s
# Warmup Iteration  11: 903162.897 ops/s
# Warmup Iteration  12: 899614.842 ops/s
# Warmup Iteration  13: 902517.057 ops/s
# Warmup Iteration  14: 904868.589 ops/s
# Warmup Iteration  15: 901308.924 ops/s
# Warmup Iteration  16: 902593.039 ops/s
# Warmup Iteration  17: 947858.065 ops/s
# Warmup Iteration  18: 951204.263 ops/s
# Warmup Iteration  19: 949257.486 ops/s
# Warmup Iteration  20: 944817.297 ops/s
# Warmup Iteration  21: 940646.067 ops/s
# Warmup Iteration  22: 939173.956 ops/s
# Warmup Iteration  23: 944806.890 ops/s
# Warmup Iteration  24: 942441.385 ops/s
# Warmup Iteration  25: 949968.979 ops/s
# Warmup Iteration  26: 938278.817 ops/s
# Warmup Iteration  27: 940292.395 ops/s
# Warmup Iteration  28: 913510.154 ops/s
# Warmup Iteration  29: 949137.839 ops/s
# Warmup Iteration  30: 945076.434 ops/s
Iteration   1: 938154.134 ops/s
Iteration   2: 943570.582 ops/s
Iteration   3: 947513.431 ops/s
Iteration   4: 944227.408 ops/s
Iteration   5: 950226.341 ops/s
Iteration   6: 937233.322 ops/s
Iteration   7: 945619.210 ops/s
Iteration   8: 943850.032 ops/s
Iteration   9: 942768.747 ops/s
Iteration  10: 946063.458 ops/s
Iteration  11: 948583.821 ops/s
Iteration  12: 946709.095 ops/s
Iteration  13: 930309.794 ops/s
Iteration  14: 949145.364 ops/s
Iteration  15: 938564.292 ops/s
Iteration  16: 946817.227 ops/s
Iteration  17: 936716.174 ops/s
Iteration  18: 936004.004 ops/s
Iteration  19: 940912.131 ops/s
Iteration  20: 945878.343 ops/s
Iteration  21: 943173.438 ops/s
Iteration  22: 941867.546 ops/s
Iteration  23: 938545.523 ops/s
Iteration  24: 941815.113 ops/s
Iteration  25: 945420.289 ops/s
Iteration  26: 931119.700 ops/s
Iteration  27: 938984.690 ops/s
Iteration  28: 928579.597 ops/s
Iteration  29: 945220.058 ops/s
Iteration  30: 938549.172 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromArrayOneIsNull":
  941738.068 ±(99.9%) 3717.492 ops/s [Average]
  (min, avg, max) = (928579.597, 941738.068, 950226.341), stdev = 5564.168
  CI (99.9%): [938020.576, 945455.560] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_fromArrayOneIsNull  thrpt   30  941738.068 ± 3717.492  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.ExceptionsTest._Benchmark.benchmark_stackOverflowErrorIsThrown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.ExceptionsTest._Benchmark.benchmark_stackOverflowErrorIsThrown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 777379.776 ops/s
# Warmup Iteration   2: 867147.912 ops/s
# Warmup Iteration   3: 867371.535 ops/s
# Warmup Iteration   4: 931863.949 ops/s
# Warmup Iteration   5: 943664.374 ops/s
# Warmup Iteration   6: 931693.788 ops/s
# Warmup Iteration   7: 938821.505 ops/s
# Warmup Iteration   8: 935568.350 ops/s
# Warmup Iteration   9: 931285.621 ops/s
# Warmup Iteration  10: 940243.542 ops/s
# Warmup Iteration  11: 930140.018 ops/s
# Warmup Iteration  12: 937989.350 ops/s
# Warmup Iteration  13: 940903.075 ops/s
# Warmup Iteration  14: 931617.202 ops/s
# Warmup Iteration  15: 917866.146 ops/s
# Warmup Iteration  16: 933419.781 ops/s
# Warmup Iteration  17: 990473.294 ops/s
# Warmup Iteration  18: 986067.507 ops/s
# Warmup Iteration  19: 984351.462 ops/s
# Warmup Iteration  20: 986359.667 ops/s
# Warmup Iteration  21: 976266.057 ops/s
# Warmup Iteration  22: 981205.313 ops/s
# Warmup Iteration  23: 990578.690 ops/s
# Warmup Iteration  24: 971805.606 ops/s
# Warmup Iteration  25: 985256.385 ops/s
# Warmup Iteration  26: 986272.475 ops/s
# Warmup Iteration  27: 987147.642 ops/s
# Warmup Iteration  28: 991758.703 ops/s
# Warmup Iteration  29: 980070.352 ops/s
# Warmup Iteration  30: 985008.181 ops/s
Iteration   1: 978375.054 ops/s
Iteration   2: 991282.419 ops/s
Iteration   3: 988672.363 ops/s
Iteration   4: 980900.948 ops/s
Iteration   5: 981095.489 ops/s
Iteration   6: 996537.115 ops/s
Iteration   7: 996403.452 ops/s
Iteration   8: 984014.764 ops/s
Iteration   9: 991834.711 ops/s
Iteration  10: 985321.666 ops/s
Iteration  11: 984003.894 ops/s
Iteration  12: 991380.205 ops/s
Iteration  13: 991897.235 ops/s
Iteration  14: 991694.963 ops/s
Iteration  15: 987296.883 ops/s
Iteration  16: 984863.623 ops/s
Iteration  17: 978524.159 ops/s
Iteration  18: 985961.500 ops/s
Iteration  19: 984580.162 ops/s
Iteration  20: 986779.671 ops/s
Iteration  21: 985294.662 ops/s
Iteration  22: 990072.458 ops/s
Iteration  23: 982040.711 ops/s
Iteration  24: 991786.791 ops/s
Iteration  25: 969573.861 ops/s
Iteration  26: 991629.530 ops/s
Iteration  27: 973516.307 ops/s
Iteration  28: 985566.629 ops/s
Iteration  29: 986411.027 ops/s
Iteration  30: 988181.984 ops/s


Result "io.reactivex.rxjava3.exceptions.ExceptionsTest._Benchmark.benchmark_stackOverflowErrorIsThrown":
  986183.141 ±(99.9%) 4096.574 ops/s [Average]
  (min, avg, max) = (969573.861, 986183.141, 996537.115), stdev = 6131.559
  CI (99.9%): [982086.567, 990279.715] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ExceptionsTest._Benchmark.benchmark_stackOverflowErrorIsThrown  thrpt   30  986183.141 ± 4096.574  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_deferFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_deferFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 751956.959 ops/s
# Warmup Iteration   2: 860564.751 ops/s
# Warmup Iteration   3: 791476.428 ops/s
# Warmup Iteration   4: 926765.590 ops/s
# Warmup Iteration   5: 931559.054 ops/s
# Warmup Iteration   6: 927351.136 ops/s
# Warmup Iteration   7: 923355.222 ops/s
# Warmup Iteration   8: 925118.217 ops/s
# Warmup Iteration   9: 919492.905 ops/s
# Warmup Iteration  10: 929823.003 ops/s
# Warmup Iteration  11: 933035.320 ops/s
# Warmup Iteration  12: 928571.425 ops/s
# Warmup Iteration  13: 930504.595 ops/s
# Warmup Iteration  14: 932192.031 ops/s
# Warmup Iteration  15: 910455.039 ops/s
# Warmup Iteration  16: 930341.566 ops/s
# Warmup Iteration  17: 986701.979 ops/s
# Warmup Iteration  18: 985085.970 ops/s
# Warmup Iteration  19: 983623.330 ops/s
# Warmup Iteration  20: 978922.695 ops/s
# Warmup Iteration  21: 977614.616 ops/s
# Warmup Iteration  22: 962806.269 ops/s
# Warmup Iteration  23: 978969.511 ops/s
# Warmup Iteration  24: 982273.585 ops/s
# Warmup Iteration  25: 982715.070 ops/s
# Warmup Iteration  26: 973674.641 ops/s
# Warmup Iteration  27: 985001.221 ops/s
# Warmup Iteration  28: 978494.661 ops/s
# Warmup Iteration  29: 975340.695 ops/s
# Warmup Iteration  30: 982012.387 ops/s
Iteration   1: 983218.996 ops/s
Iteration   2: 977641.822 ops/s
Iteration   3: 985535.798 ops/s
Iteration   4: 976583.931 ops/s
Iteration   5: 980787.395 ops/s
Iteration   6: 978027.433 ops/s
Iteration   7: 983651.944 ops/s
Iteration   8: 971495.468 ops/s
Iteration   9: 968030.329 ops/s
Iteration  10: 971565.886 ops/s
Iteration  11: 983178.144 ops/s
Iteration  12: 980652.311 ops/s
Iteration  13: 978429.929 ops/s
Iteration  14: 981084.046 ops/s
Iteration  15: 975165.623 ops/s
Iteration  16: 982251.664 ops/s
Iteration  17: 973758.682 ops/s
Iteration  18: 973813.391 ops/s
Iteration  19: 965279.341 ops/s
Iteration  20: 978280.984 ops/s
Iteration  21: 981091.254 ops/s
Iteration  22: 981214.735 ops/s
Iteration  23: 971225.440 ops/s
Iteration  24: 977583.729 ops/s
Iteration  25: 980856.440 ops/s
Iteration  26: 979324.848 ops/s
Iteration  27: 979798.813 ops/s
Iteration  28: 973841.651 ops/s
Iteration  29: 974140.302 ops/s
Iteration  30: 982270.846 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_deferFunctionReturnsNull":
  977659.372 ±(99.9%) 3287.378 ops/s [Average]
  (min, avg, max) = (965279.341, 977659.372, 985535.798), stdev = 4920.392
  CI (99.9%): [974371.995, 980946.750] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_deferFunctionReturnsNull  thrpt   30  977659.372 ± 3287.378  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromCallableReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromCallableReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 694169.873 ops/s
# Warmup Iteration   2: 785298.898 ops/s
# Warmup Iteration   3: 866608.431 ops/s
# Warmup Iteration   4: 779918.818 ops/s
# Warmup Iteration   5: 881561.122 ops/s
# Warmup Iteration   6: 883330.657 ops/s
# Warmup Iteration   7: 879565.578 ops/s
# Warmup Iteration   8: 883839.249 ops/s
# Warmup Iteration   9: 882867.225 ops/s
# Warmup Iteration  10: 880770.297 ops/s
# Warmup Iteration  11: 879301.178 ops/s
# Warmup Iteration  12: 876757.032 ops/s
# Warmup Iteration  13: 883998.431 ops/s
# Warmup Iteration  14: 876710.264 ops/s
# Warmup Iteration  15: 884803.510 ops/s
# Warmup Iteration  16: 872243.594 ops/s
# Warmup Iteration  17: 937132.084 ops/s
# Warmup Iteration  18: 924972.087 ops/s
# Warmup Iteration  19: 930014.754 ops/s
# Warmup Iteration  20: 931813.730 ops/s
# Warmup Iteration  21: 932973.940 ops/s
# Warmup Iteration  22: 932922.170 ops/s
# Warmup Iteration  23: 931048.455 ops/s
# Warmup Iteration  24: 931763.309 ops/s
# Warmup Iteration  25: 915718.209 ops/s
# Warmup Iteration  26: 928642.822 ops/s
# Warmup Iteration  27: 901930.826 ops/s
# Warmup Iteration  28: 932213.856 ops/s
# Warmup Iteration  29: 918374.219 ops/s
# Warmup Iteration  30: 927579.640 ops/s
Iteration   1: 931675.772 ops/s
Iteration   2: 923460.617 ops/s
Iteration   3: 935331.722 ops/s
Iteration   4: 926355.522 ops/s
Iteration   5: 927017.309 ops/s
Iteration   6: 923979.644 ops/s
Iteration   7: 925683.792 ops/s
Iteration   8: 932371.165 ops/s
Iteration   9: 927814.646 ops/s
Iteration  10: 934897.342 ops/s
Iteration  11: 919566.816 ops/s
Iteration  12: 924917.012 ops/s
Iteration  13: 929438.926 ops/s
Iteration  14: 933003.376 ops/s
Iteration  15: 932482.588 ops/s
Iteration  16: 917983.188 ops/s
Iteration  17: 919812.135 ops/s
Iteration  18: 929202.311 ops/s
Iteration  19: 928139.482 ops/s
Iteration  20: 929725.915 ops/s
Iteration  21: 939382.169 ops/s
Iteration  22: 912632.105 ops/s
Iteration  23: 927824.188 ops/s
Iteration  24: 925082.129 ops/s
Iteration  25: 921842.281 ops/s
Iteration  26: 931728.024 ops/s
Iteration  27: 931022.040 ops/s
Iteration  28: 927451.489 ops/s
Iteration  29: 916017.627 ops/s
Iteration  30: 913733.608 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromCallableReturnsNull":
  926652.498 ±(99.9%) 4311.308 ops/s [Average]
  (min, avg, max) = (912632.105, 926652.498, 939382.169), stdev = 6452.964
  CI (99.9%): [922341.190, 930963.806] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_fromCallableReturnsNull  thrpt   30  926652.498 ± 4311.308  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndex$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndex

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 804760.776 ops/s
# Warmup Iteration   2: 878912.830 ops/s
# Warmup Iteration   3: 988194.922 ops/s
# Warmup Iteration   4: 984505.036 ops/s
# Warmup Iteration   5: 993810.830 ops/s
# Warmup Iteration   6: 995089.815 ops/s
# Warmup Iteration   7: 993725.410 ops/s
# Warmup Iteration   8: 984896.345 ops/s
# Warmup Iteration   9: 992121.225 ops/s
# Warmup Iteration  10: 994408.234 ops/s
# Warmup Iteration  11: 985106.624 ops/s
# Warmup Iteration  12: 986701.421 ops/s
# Warmup Iteration  13: 987360.167 ops/s
# Warmup Iteration  14: 986508.238 ops/s
# Warmup Iteration  15: 977200.259 ops/s
# Warmup Iteration  16: 984160.682 ops/s
# Warmup Iteration  17: 1043693.229 ops/s
# Warmup Iteration  18: 1049804.491 ops/s
# Warmup Iteration  19: 1048135.580 ops/s
# Warmup Iteration  20: 1046415.285 ops/s
# Warmup Iteration  21: 1048112.270 ops/s
# Warmup Iteration  22: 1052835.939 ops/s
# Warmup Iteration  23: 1044692.939 ops/s
# Warmup Iteration  24: 1046773.062 ops/s
# Warmup Iteration  25: 1049699.088 ops/s
# Warmup Iteration  26: 1052940.401 ops/s
# Warmup Iteration  27: 1045182.440 ops/s
# Warmup Iteration  28: 1049352.362 ops/s
# Warmup Iteration  29: 1029909.174 ops/s
# Warmup Iteration  30: 1042598.844 ops/s
Iteration   1: 1046984.433 ops/s
Iteration   2: 1050795.032 ops/s
Iteration   3: 1025411.289 ops/s
Iteration   4: 1037091.035 ops/s
Iteration   5: 1048757.640 ops/s
Iteration   6: 1053323.119 ops/s
Iteration   7: 1052597.341 ops/s
Iteration   8: 1030702.683 ops/s
Iteration   9: 1033203.606 ops/s
Iteration  10: 1041729.565 ops/s
Iteration  11: 1045822.979 ops/s
Iteration  12: 1050208.479 ops/s
Iteration  13: 1047919.006 ops/s
Iteration  14: 1043667.842 ops/s
Iteration  15: 1044277.265 ops/s
Iteration  16: 1045612.465 ops/s
Iteration  17: 1054284.333 ops/s
Iteration  18: 1045705.202 ops/s
Iteration  19: 1046460.614 ops/s
Iteration  20: 1047314.126 ops/s
Iteration  21: 1045967.396 ops/s
Iteration  22: 1029170.699 ops/s
Iteration  23: 1045276.731 ops/s
Iteration  24: 1040213.774 ops/s
Iteration  25: 1052437.870 ops/s
Iteration  26: 1047242.729 ops/s
Iteration  27: 1048160.880 ops/s
Iteration  28: 1044029.138 ops/s
Iteration  29: 1046067.508 ops/s
Iteration  30: 1045083.852 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndex":
  1044517.288 ±(99.9%) 4727.983 ops/s [Average]
  (min, avg, max) = (1025411.289, 1044517.288, 1054284.333), stdev = 7076.623
  CI (99.9%): [1039789.304, 1049245.271] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score      Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndex  thrpt   30  1044517.288 ± 4727.983  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndex$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndex

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 797645.406 ops/s
# Warmup Iteration   2: 882354.415 ops/s
# Warmup Iteration   3: 973496.864 ops/s
# Warmup Iteration   4: 893882.508 ops/s
# Warmup Iteration   5: 978892.761 ops/s
# Warmup Iteration   6: 988289.208 ops/s
# Warmup Iteration   7: 999043.900 ops/s
# Warmup Iteration   8: 983658.758 ops/s
# Warmup Iteration   9: 986161.649 ops/s
# Warmup Iteration  10: 996429.834 ops/s
# Warmup Iteration  11: 983246.869 ops/s
# Warmup Iteration  12: 996134.302 ops/s
# Warmup Iteration  13: 997088.934 ops/s
# Warmup Iteration  14: 994824.079 ops/s
# Warmup Iteration  15: 995685.346 ops/s
# Warmup Iteration  16: 991016.399 ops/s
# Warmup Iteration  17: 1052243.219 ops/s
# Warmup Iteration  18: 1052119.522 ops/s
# Warmup Iteration  19: 1048397.258 ops/s
# Warmup Iteration  20: 1053187.859 ops/s
# Warmup Iteration  21: 1048420.107 ops/s
# Warmup Iteration  22: 1051464.707 ops/s
# Warmup Iteration  23: 1047376.506 ops/s
# Warmup Iteration  24: 1052974.904 ops/s
# Warmup Iteration  25: 1053560.754 ops/s
# Warmup Iteration  26: 1044343.637 ops/s
# Warmup Iteration  27: 1031695.289 ops/s
# Warmup Iteration  28: 1050523.154 ops/s
# Warmup Iteration  29: 1013934.892 ops/s
# Warmup Iteration  30: 1039915.442 ops/s
Iteration   1: 1056626.672 ops/s
Iteration   2: 1046896.167 ops/s
Iteration   3: 1054440.318 ops/s
Iteration   4: 1033322.869 ops/s
Iteration   5: 1051702.047 ops/s
Iteration   6: 1047500.069 ops/s
Iteration   7: 1055029.774 ops/s
Iteration   8: 1046704.309 ops/s
Iteration   9: 1054566.672 ops/s
Iteration  10: 1049256.946 ops/s
Iteration  11: 1053928.170 ops/s
Iteration  12: 1053531.664 ops/s
Iteration  13: 1055291.584 ops/s
Iteration  14: 1055910.861 ops/s
Iteration  15: 1060252.568 ops/s
Iteration  16: 1049968.212 ops/s
Iteration  17: 1053382.894 ops/s
Iteration  18: 1047512.071 ops/s
Iteration  19: 1049854.310 ops/s
Iteration  20: 1053296.669 ops/s
Iteration  21: 1052916.140 ops/s
Iteration  22: 1057606.773 ops/s
Iteration  23: 1054414.373 ops/s
Iteration  24: 1053983.928 ops/s
Iteration  25: 1050042.843 ops/s
Iteration  26: 1055251.100 ops/s
Iteration  27: 1046404.302 ops/s
Iteration  28: 1046489.340 ops/s
Iteration  29: 1047751.814 ops/s
Iteration  30: 1044049.502 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndex":
  1051262.832 ±(99.9%) 3486.570 ops/s [Average]
  (min, avg, max) = (1033322.869, 1051262.832, 1060252.568), stdev = 5218.534
  CI (99.9%): [1047776.262, 1054749.402] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndex  thrpt   30  1051262.832 ± 3486.570  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndexFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndexFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 795129.292 ops/s
# Warmup Iteration   2: 879895.787 ops/s
# Warmup Iteration   3: 981234.872 ops/s
# Warmup Iteration   4: 897036.958 ops/s
# Warmup Iteration   5: 995826.860 ops/s
# Warmup Iteration   6: 1002551.083 ops/s
# Warmup Iteration   7: 1000797.679 ops/s
# Warmup Iteration   8: 996555.807 ops/s
# Warmup Iteration   9: 995283.068 ops/s
# Warmup Iteration  10: 1003861.323 ops/s
# Warmup Iteration  11: 997664.111 ops/s
# Warmup Iteration  12: 995980.542 ops/s
# Warmup Iteration  13: 1004503.202 ops/s
# Warmup Iteration  14: 989376.883 ops/s
# Warmup Iteration  15: 960461.482 ops/s
# Warmup Iteration  16: 992914.345 ops/s
# Warmup Iteration  17: 1068447.879 ops/s
# Warmup Iteration  18: 1057519.575 ops/s
# Warmup Iteration  19: 1052515.420 ops/s
# Warmup Iteration  20: 1054915.181 ops/s
# Warmup Iteration  21: 1043002.041 ops/s
# Warmup Iteration  22: 1051585.291 ops/s
# Warmup Iteration  23: 1064547.807 ops/s
# Warmup Iteration  24: 1064740.218 ops/s
# Warmup Iteration  25: 1063246.506 ops/s
# Warmup Iteration  26: 1056377.075 ops/s
# Warmup Iteration  27: 1059920.505 ops/s
# Warmup Iteration  28: 1057540.546 ops/s
# Warmup Iteration  29: 1043725.906 ops/s
# Warmup Iteration  30: 1063733.782 ops/s
Iteration   1: 1065930.468 ops/s
Iteration   2: 1054485.526 ops/s
Iteration   3: 1023753.606 ops/s
Iteration   4: 1056714.767 ops/s
Iteration   5: 1060714.358 ops/s
Iteration   6: 1056732.953 ops/s
Iteration   7: 1060122.991 ops/s
Iteration   8: 1058004.419 ops/s
Iteration   9: 1055849.413 ops/s
Iteration  10: 1063056.252 ops/s
Iteration  11: 1058804.735 ops/s
Iteration  12: 1061052.098 ops/s
Iteration  13: 1056456.634 ops/s
Iteration  14: 1061653.912 ops/s
Iteration  15: 1058419.467 ops/s
Iteration  16: 1056757.632 ops/s
Iteration  17: 1064230.611 ops/s
Iteration  18: 1042129.253 ops/s
Iteration  19: 1057676.859 ops/s
Iteration  20: 1065059.841 ops/s
Iteration  21: 1067219.351 ops/s
Iteration  22: 1057388.676 ops/s
Iteration  23: 1055242.035 ops/s
Iteration  24: 1049096.686 ops/s
Iteration  25: 1060574.916 ops/s
Iteration  26: 1060671.532 ops/s
Iteration  27: 1052010.257 ops/s
Iteration  28: 1063997.147 ops/s
Iteration  29: 1054855.974 ops/s
Iteration  30: 1065879.225 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndexFlowable":
  1057484.720 ±(99.9%) 5525.165 ops/s [Average]
  (min, avg, max) = (1023753.606, 1057484.720, 1067219.351), stdev = 8269.807
  CI (99.9%): [1051959.555, 1063009.885] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score      Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithMinusIndexFlowable  thrpt   30  1057484.720 ± 5525.165  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndexFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndexFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 798591.797 ops/s
# Warmup Iteration   2: 876179.642 ops/s
# Warmup Iteration   3: 978488.468 ops/s
# Warmup Iteration   4: 900142.032 ops/s
# Warmup Iteration   5: 993384.655 ops/s
# Warmup Iteration   6: 1000216.194 ops/s
# Warmup Iteration   7: 1004165.066 ops/s
# Warmup Iteration   8: 997490.064 ops/s
# Warmup Iteration   9: 978829.780 ops/s
# Warmup Iteration  10: 996062.693 ops/s
# Warmup Iteration  11: 993416.192 ops/s
# Warmup Iteration  12: 1000961.887 ops/s
# Warmup Iteration  13: 1000873.146 ops/s
# Warmup Iteration  14: 1002223.441 ops/s
# Warmup Iteration  15: 995272.835 ops/s
# Warmup Iteration  16: 976743.991 ops/s
# Warmup Iteration  17: 1038369.744 ops/s
# Warmup Iteration  18: 1050590.129 ops/s
# Warmup Iteration  19: 1058030.789 ops/s
# Warmup Iteration  20: 1048416.162 ops/s
# Warmup Iteration  21: 1051575.249 ops/s
# Warmup Iteration  22: 1055854.810 ops/s
# Warmup Iteration  23: 1060034.879 ops/s
# Warmup Iteration  24: 1039169.259 ops/s
# Warmup Iteration  25: 1058880.361 ops/s
# Warmup Iteration  26: 1049375.802 ops/s
# Warmup Iteration  27: 1056791.531 ops/s
# Warmup Iteration  28: 1047505.617 ops/s
# Warmup Iteration  29: 1051804.259 ops/s
# Warmup Iteration  30: 1049154.012 ops/s
Iteration   1: 1049674.361 ops/s
Iteration   2: 1039996.633 ops/s
Iteration   3: 1053008.034 ops/s
Iteration   4: 1056113.162 ops/s
Iteration   5: 1057633.880 ops/s
Iteration   6: 1043894.308 ops/s
Iteration   7: 1048030.118 ops/s
Iteration   8: 1058115.880 ops/s
Iteration   9: 1052510.445 ops/s
Iteration  10: 1047420.639 ops/s
Iteration  11: 1040260.010 ops/s
Iteration  12: 1026531.257 ops/s
Iteration  13: 1054349.206 ops/s
Iteration  14: 1051245.407 ops/s
Iteration  15: 1052261.313 ops/s
Iteration  16: 1045325.119 ops/s
Iteration  17: 1042617.708 ops/s
Iteration  18: 1039744.773 ops/s
Iteration  19: 1041825.267 ops/s
Iteration  20: 1030921.614 ops/s
Iteration  21: 1046246.619 ops/s
Iteration  22: 1042469.354 ops/s
Iteration  23: 1047431.458 ops/s
Iteration  24: 1048726.883 ops/s
Iteration  25: 1046493.751 ops/s
Iteration  26: 1051176.601 ops/s
Iteration  27: 1047024.247 ops/s
Iteration  28: 1051187.296 ops/s
Iteration  29: 1062125.322 ops/s
Iteration  30: 1047155.029 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndexFlowable":
  1047383.857 ±(99.9%) 5056.584 ops/s [Average]
  (min, avg, max) = (1026531.257, 1047383.857, 1062125.322), stdev = 7568.458
  CI (99.9%): [1042327.272, 1052440.441] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score      Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtWithMinusIndexFlowable  thrpt   30  1047383.857 ± 5056.584  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromFutureTimedReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromFutureTimedReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 624129.076 ops/s
# Warmup Iteration   2: 704117.975 ops/s
# Warmup Iteration   3: 743556.769 ops/s
# Warmup Iteration   4: 759384.313 ops/s
# Warmup Iteration   5: 761953.460 ops/s
# Warmup Iteration   6: 763459.327 ops/s
# Warmup Iteration   7: 754124.711 ops/s
# Warmup Iteration   8: 760835.181 ops/s
# Warmup Iteration   9: 766743.786 ops/s
# Warmup Iteration  10: 776335.457 ops/s
# Warmup Iteration  11: 781448.174 ops/s
# Warmup Iteration  12: 763619.074 ops/s
# Warmup Iteration  13: 779594.203 ops/s
# Warmup Iteration  14: 777414.350 ops/s
# Warmup Iteration  15: 776303.761 ops/s
# Warmup Iteration  16: 772709.738 ops/s
# Warmup Iteration  17: 816713.625 ops/s
# Warmup Iteration  18: 796686.694 ops/s
# Warmup Iteration  19: 806062.992 ops/s
# Warmup Iteration  20: 805494.312 ops/s
# Warmup Iteration  21: 810495.398 ops/s
# Warmup Iteration  22: 817372.923 ops/s
# Warmup Iteration  23: 816373.711 ops/s
# Warmup Iteration  24: 812779.625 ops/s
# Warmup Iteration  25: 813888.254 ops/s
# Warmup Iteration  26: 810323.534 ops/s
# Warmup Iteration  27: 809644.871 ops/s
# Warmup Iteration  28: 810870.014 ops/s
# Warmup Iteration  29: 815802.435 ops/s
# Warmup Iteration  30: 813853.479 ops/s
Iteration   1: 811113.932 ops/s
Iteration   2: 813599.026 ops/s
Iteration   3: 813605.104 ops/s
Iteration   4: 818881.075 ops/s
Iteration   5: 813759.086 ops/s
Iteration   6: 819542.703 ops/s
Iteration   7: 805715.728 ops/s
Iteration   8: 805536.172 ops/s
Iteration   9: 812160.091 ops/s
Iteration  10: 811438.618 ops/s
Iteration  11: 816235.992 ops/s
Iteration  12: 815118.199 ops/s
Iteration  13: 815473.794 ops/s
Iteration  14: 815671.384 ops/s
Iteration  15: 818991.290 ops/s
Iteration  16: 815541.571 ops/s
Iteration  17: 814453.959 ops/s
Iteration  18: 817123.751 ops/s
Iteration  19: 815111.200 ops/s
Iteration  20: 805237.639 ops/s
Iteration  21: 816673.487 ops/s
Iteration  22: 811635.629 ops/s
Iteration  23: 788838.011 ops/s
Iteration  24: 819286.176 ops/s
Iteration  25: 805914.986 ops/s
Iteration  26: 816443.398 ops/s
Iteration  27: 807821.343 ops/s
Iteration  28: 808134.665 ops/s
Iteration  29: 808614.522 ops/s
Iteration  30: 810533.136 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromFutureTimedReturnsNull":
  812273.522 ±(99.9%) 4132.084 ops/s [Average]
  (min, avg, max) = (788838.011, 812273.522, 819542.703), stdev = 6184.709
  CI (99.9%): [808141.438, 816405.606] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_fromFutureTimedReturnsNull  thrpt   30  812273.522 ± 4132.084  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperToJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperToJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6127060.932 ops/s
# Warmup Iteration   2: 8652148.820 ops/s
# Warmup Iteration   3: 9908090.665 ops/s
# Warmup Iteration   4: 9900925.910 ops/s
# Warmup Iteration   5: 9940483.316 ops/s
# Warmup Iteration   6: 9817387.790 ops/s
# Warmup Iteration   7: 9930539.430 ops/s
# Warmup Iteration   8: 9930730.308 ops/s
# Warmup Iteration   9: 9948891.971 ops/s
# Warmup Iteration  10: 9824830.480 ops/s
# Warmup Iteration  11: 9880075.139 ops/s
# Warmup Iteration  12: 9900180.501 ops/s
# Warmup Iteration  13: 9969682.426 ops/s
# Warmup Iteration  14: 9988262.610 ops/s
# Warmup Iteration  15: 9982775.106 ops/s
# Warmup Iteration  16: 9773438.534 ops/s
# Warmup Iteration  17: 9949493.635 ops/s
# Warmup Iteration  18: 9926002.603 ops/s
# Warmup Iteration  19: 9893568.743 ops/s
# Warmup Iteration  20: 9920975.108 ops/s
# Warmup Iteration  21: 9923838.306 ops/s
# Warmup Iteration  22: 9905635.601 ops/s
# Warmup Iteration  23: 9937103.375 ops/s
# Warmup Iteration  24: 9905453.697 ops/s
# Warmup Iteration  25: 9606102.425 ops/s
# Warmup Iteration  26: 9939653.264 ops/s
# Warmup Iteration  27: 9898881.998 ops/s
# Warmup Iteration  28: 9888522.006 ops/s
# Warmup Iteration  29: 9738170.326 ops/s
# Warmup Iteration  30: 9970636.921 ops/s
Iteration   1: 9903111.557 ops/s
Iteration   2: 9893118.118 ops/s
Iteration   3: 9870182.059 ops/s
Iteration   4: 9880955.353 ops/s
Iteration   5: 9979058.091 ops/s
Iteration   6: 9842442.882 ops/s
Iteration   7: 9971011.677 ops/s
Iteration   8: 9804741.743 ops/s
Iteration   9: 9902552.818 ops/s
Iteration  10: 9950898.042 ops/s
Iteration  11: 9909123.373 ops/s
Iteration  12: 9866705.626 ops/s
Iteration  13: 9875170.487 ops/s
Iteration  14: 9947312.473 ops/s
Iteration  15: 9918608.516 ops/s
Iteration  16: 9900272.911 ops/s
Iteration  17: 9858449.431 ops/s
Iteration  18: 9872260.438 ops/s
Iteration  19: 9882610.071 ops/s
Iteration  20: 9925464.325 ops/s
Iteration  21: 9997208.529 ops/s
Iteration  22: 9908497.869 ops/s
Iteration  23: 9924737.542 ops/s
Iteration  24: 9945474.195 ops/s
Iteration  25: 9959358.336 ops/s
Iteration  26: 9853042.986 ops/s
Iteration  27: 9807641.541 ops/s
Iteration  28: 9910008.516 ops/s
Iteration  29: 9832006.202 ops/s
Iteration  30: 9890305.736 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_mapperToJust":
  9899411.048 ±(99.9%) 32039.778 ops/s [Average]
  (min, avg, max) = (9804741.743, 9899411.048, 9997208.529), stdev = 47955.635
  CI (99.9%): [9867371.270, 9931450.826] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObservableScalarXMapTest._Benchmark.benchmark_mapperToJust  thrpt   30  9899411.048 ± 32039.778  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipIterableFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipIterableFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 304420.156 ops/s
# Warmup Iteration   2: 469725.260 ops/s
# Warmup Iteration   3: 502792.485 ops/s
# Warmup Iteration   4: 541458.721 ops/s
# Warmup Iteration   5: 542035.155 ops/s
# Warmup Iteration   6: 539000.822 ops/s
# Warmup Iteration   7: 541883.662 ops/s
# Warmup Iteration   8: 533015.974 ops/s
# Warmup Iteration   9: 536697.910 ops/s
# Warmup Iteration  10: 539939.929 ops/s
# Warmup Iteration  11: 530451.357 ops/s
# Warmup Iteration  12: 530767.226 ops/s
# Warmup Iteration  13: 527468.537 ops/s
# Warmup Iteration  14: 535405.717 ops/s
# Warmup Iteration  15: 535716.097 ops/s
# Warmup Iteration  16: 535698.398 ops/s
# Warmup Iteration  17: 554232.924 ops/s
# Warmup Iteration  18: 550641.042 ops/s
# Warmup Iteration  19: 550281.006 ops/s
# Warmup Iteration  20: 556318.876 ops/s
# Warmup Iteration  21: 552607.061 ops/s
# Warmup Iteration  22: 554405.515 ops/s
# Warmup Iteration  23: 552577.572 ops/s
# Warmup Iteration  24: 548011.593 ops/s
# Warmup Iteration  25: 538112.501 ops/s
# Warmup Iteration  26: 557681.660 ops/s
# Warmup Iteration  27: 545945.014 ops/s
# Warmup Iteration  28: 556138.805 ops/s
# Warmup Iteration  29: 551232.472 ops/s
# Warmup Iteration  30: 547879.959 ops/s
Iteration   1: 553428.886 ops/s
Iteration   2: 554737.583 ops/s
Iteration   3: 541357.277 ops/s
Iteration   4: 552337.330 ops/s
Iteration   5: 554432.325 ops/s
Iteration   6: 542795.228 ops/s
Iteration   7: 547295.900 ops/s
Iteration   8: 546941.077 ops/s
Iteration   9: 542325.990 ops/s
Iteration  10: 554429.707 ops/s
Iteration  11: 552271.326 ops/s
Iteration  12: 545042.244 ops/s
Iteration  13: 546589.780 ops/s
Iteration  14: 552983.977 ops/s
Iteration  15: 554704.173 ops/s
Iteration  16: 552871.934 ops/s
Iteration  17: 537311.217 ops/s
Iteration  18: 554453.756 ops/s
Iteration  19: 549871.250 ops/s
Iteration  20: 556231.063 ops/s
Iteration  21: 547256.578 ops/s
Iteration  22: 549902.635 ops/s
Iteration  23: 547195.527 ops/s
Iteration  24: 555190.339 ops/s
Iteration  25: 553751.945 ops/s
Iteration  26: 550514.217 ops/s
Iteration  27: 552099.698 ops/s
Iteration  28: 552956.037 ops/s
Iteration  29: 551727.000 ops/s
Iteration  30: 551159.375 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipIterableFunctionReturnsNull":
  550138.846 ±(99.9%) 3175.223 ops/s [Average]
  (min, avg, max) = (537311.217, 550138.846, 556231.063), stdev = 4752.525
  CI (99.9%): [546963.623, 553314.069] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_zipIterableFunctionReturnsNull  thrpt   30  550138.846 ± 3175.223  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_whileCompleteThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_whileCompleteThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 260339.281 ops/s
# Warmup Iteration   2: 318162.000 ops/s
# Warmup Iteration   3: 304327.269 ops/s
# Warmup Iteration   4: 337227.496 ops/s
# Warmup Iteration   5: 344599.856 ops/s
# Warmup Iteration   6: 344453.066 ops/s
# Warmup Iteration   7: 343885.430 ops/s
# Warmup Iteration   8: 342717.969 ops/s
# Warmup Iteration   9: 340308.215 ops/s
# Warmup Iteration  10: 341427.129 ops/s
# Warmup Iteration  11: 339168.617 ops/s
# Warmup Iteration  12: 341198.173 ops/s
# Warmup Iteration  13: 339229.858 ops/s
# Warmup Iteration  14: 339782.829 ops/s
# Warmup Iteration  15: 341769.810 ops/s
# Warmup Iteration  16: 339969.457 ops/s
# Warmup Iteration  17: 355735.996 ops/s
# Warmup Iteration  18: 355129.284 ops/s
# Warmup Iteration  19: 359064.016 ops/s
# Warmup Iteration  20: 357769.881 ops/s
# Warmup Iteration  21: 356798.965 ops/s
# Warmup Iteration  22: 354744.368 ops/s
# Warmup Iteration  23: 354979.417 ops/s
# Warmup Iteration  24: 357294.440 ops/s
# Warmup Iteration  25: 355473.766 ops/s
# Warmup Iteration  26: 351637.629 ops/s
# Warmup Iteration  27: 355198.517 ops/s
# Warmup Iteration  28: 354313.256 ops/s
# Warmup Iteration  29: 346929.801 ops/s
# Warmup Iteration  30: 354024.334 ops/s
Iteration   1: 355466.962 ops/s
Iteration   2: 355498.572 ops/s
Iteration   3: 352957.066 ops/s
Iteration   4: 353027.900 ops/s
Iteration   5: 352406.707 ops/s
Iteration   6: 356553.393 ops/s
Iteration   7: 355756.981 ops/s
Iteration   8: 355858.412 ops/s
Iteration   9: 354198.932 ops/s
Iteration  10: 355121.073 ops/s
Iteration  11: 355891.848 ops/s
Iteration  12: 345584.887 ops/s
Iteration  13: 353886.823 ops/s
Iteration  14: 355307.926 ops/s
Iteration  15: 355137.117 ops/s
Iteration  16: 354204.810 ops/s
Iteration  17: 356256.787 ops/s
Iteration  18: 355712.648 ops/s
Iteration  19: 354774.932 ops/s
Iteration  20: 355637.775 ops/s
Iteration  21: 355289.398 ops/s
Iteration  22: 356630.574 ops/s
Iteration  23: 355511.624 ops/s
Iteration  24: 352365.040 ops/s
Iteration  25: 356338.937 ops/s
Iteration  26: 355493.066 ops/s
Iteration  27: 357302.943 ops/s
Iteration  28: 356630.172 ops/s
Iteration  29: 357236.705 ops/s
Iteration  30: 356042.591 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_whileCompleteThrows":
  354936.087 ±(99.9%) 1465.417 ops/s [Average]
  (min, avg, max) = (345584.887, 354936.087, 357302.943), stdev = 2193.367
  CI (99.9%): [353470.670, 356401.504] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableForEachTest._Benchmark.benchmark_whileCompleteThrows  thrpt   30  354936.087 ± 1465.417  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_methodTestNoCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_methodTestNoCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5263299.485 ops/s
# Warmup Iteration   2: 7801761.283 ops/s
# Warmup Iteration   3: 8465258.477 ops/s
# Warmup Iteration   4: 8414062.757 ops/s
# Warmup Iteration   5: 8466199.603 ops/s
# Warmup Iteration   6: 8380784.548 ops/s
# Warmup Iteration   7: 8479643.414 ops/s
# Warmup Iteration   8: 8439785.097 ops/s
# Warmup Iteration   9: 8402808.286 ops/s
# Warmup Iteration  10: 8412855.681 ops/s
# Warmup Iteration  11: 8445140.504 ops/s
# Warmup Iteration  12: 8478887.883 ops/s
# Warmup Iteration  13: 8421166.953 ops/s
# Warmup Iteration  14: 8476034.355 ops/s
# Warmup Iteration  15: 8369367.210 ops/s
# Warmup Iteration  16: 8400042.444 ops/s
# Warmup Iteration  17: 8430507.513 ops/s
# Warmup Iteration  18: 8448923.124 ops/s
# Warmup Iteration  19: 8459216.439 ops/s
# Warmup Iteration  20: 8441196.351 ops/s
# Warmup Iteration  21: 8445736.593 ops/s
# Warmup Iteration  22: 8433580.015 ops/s
# Warmup Iteration  23: 8404572.861 ops/s
# Warmup Iteration  24: 8390658.081 ops/s
# Warmup Iteration  25: 8456683.482 ops/s
# Warmup Iteration  26: 8457978.344 ops/s
# Warmup Iteration  27: 8497366.649 ops/s
# Warmup Iteration  28: 8474592.049 ops/s
# Warmup Iteration  29: 8409412.845 ops/s
# Warmup Iteration  30: 8500425.793 ops/s
Iteration   1: 8445575.247 ops/s
Iteration   2: 8425467.908 ops/s
Iteration   3: 8451616.732 ops/s
Iteration   4: 8403471.116 ops/s
Iteration   5: 8317715.004 ops/s
Iteration   6: 8469986.617 ops/s
Iteration   7: 8425616.742 ops/s
Iteration   8: 8417122.817 ops/s
Iteration   9: 8381308.106 ops/s
Iteration  10: 8434314.327 ops/s
Iteration  11: 8449903.806 ops/s
Iteration  12: 8460455.702 ops/s
Iteration  13: 8411478.117 ops/s
Iteration  14: 8377430.872 ops/s
Iteration  15: 8420069.156 ops/s
Iteration  16: 8434471.096 ops/s
Iteration  17: 8465044.340 ops/s
Iteration  18: 8504650.589 ops/s
Iteration  19: 8377890.336 ops/s
Iteration  20: 8375164.431 ops/s
Iteration  21: 8438132.232 ops/s
Iteration  22: 8469300.895 ops/s
Iteration  23: 8436588.209 ops/s
Iteration  24: 8441555.377 ops/s
Iteration  25: 8438185.379 ops/s
Iteration  26: 8436985.628 ops/s
Iteration  27: 8432097.916 ops/s
Iteration  28: 8386266.139 ops/s
Iteration  29: 8446802.961 ops/s
Iteration  30: 8469705.934 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_methodTestNoCancel":
  8428145.791 ±(99.9%) 25079.608 ops/s [Average]
  (min, avg, max) = (8317715.004, 8428145.791, 8504650.589), stdev = 37537.979
  CI (99.9%): [8403066.183, 8453225.399] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableSubscriberTest._Benchmark.benchmark_methodTestNoCancel  thrpt   30  8428145.791 ± 25079.608  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_mostRecent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_mostRecent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5702644.211 ops/s
# Warmup Iteration   2: 6839558.675 ops/s
# Warmup Iteration   3: 8012194.980 ops/s
# Warmup Iteration   4: 8373113.998 ops/s
# Warmup Iteration   5: 8365636.952 ops/s
# Warmup Iteration   6: 8284851.663 ops/s
# Warmup Iteration   7: 8378080.432 ops/s
# Warmup Iteration   8: 8295026.271 ops/s
# Warmup Iteration   9: 8277933.149 ops/s
# Warmup Iteration  10: 8326578.430 ops/s
# Warmup Iteration  11: 8262874.800 ops/s
# Warmup Iteration  12: 8349607.514 ops/s
# Warmup Iteration  13: 8277652.959 ops/s
# Warmup Iteration  14: 8307153.298 ops/s
# Warmup Iteration  15: 8091457.691 ops/s
# Warmup Iteration  16: 8282788.832 ops/s
# Warmup Iteration  17: 8301677.561 ops/s
# Warmup Iteration  18: 8323037.808 ops/s
# Warmup Iteration  19: 8383082.617 ops/s
# Warmup Iteration  20: 8314518.352 ops/s
# Warmup Iteration  21: 8290044.302 ops/s
# Warmup Iteration  22: 8339163.691 ops/s
# Warmup Iteration  23: 8303600.500 ops/s
# Warmup Iteration  24: 8279628.963 ops/s
# Warmup Iteration  25: 8254452.308 ops/s
# Warmup Iteration  26: 8323289.011 ops/s
# Warmup Iteration  27: 8287731.072 ops/s
# Warmup Iteration  28: 8314893.194 ops/s
# Warmup Iteration  29: 8341766.972 ops/s
# Warmup Iteration  30: 8337708.058 ops/s
Iteration   1: 8301512.698 ops/s
Iteration   2: 8307179.770 ops/s
Iteration   3: 8336914.418 ops/s
Iteration   4: 8281916.205 ops/s
Iteration   5: 8350407.688 ops/s
Iteration   6: 8251376.753 ops/s
Iteration   7: 8350945.001 ops/s
Iteration   8: 8282742.343 ops/s
Iteration   9: 8204445.015 ops/s
Iteration  10: 8199629.342 ops/s
Iteration  11: 8279887.549 ops/s
Iteration  12: 8338764.020 ops/s
Iteration  13: 8328944.619 ops/s
Iteration  14: 8224893.243 ops/s
Iteration  15: 8269786.533 ops/s
Iteration  16: 8315467.924 ops/s
Iteration  17: 8307845.487 ops/s
Iteration  18: 8333965.869 ops/s
Iteration  19: 8240985.670 ops/s
Iteration  20: 8363323.474 ops/s
Iteration  21: 8350046.366 ops/s
Iteration  22: 8328868.427 ops/s
Iteration  23: 8382137.594 ops/s
Iteration  24: 8367789.223 ops/s
Iteration  25: 8316792.070 ops/s
Iteration  26: 8287237.323 ops/s
Iteration  27: 8316111.452 ops/s
Iteration  28: 8311215.406 ops/s
Iteration  29: 8299563.778 ops/s
Iteration  30: 8294113.549 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_mostRecent":
  8304160.294 ±(99.9%) 30896.686 ops/s [Average]
  (min, avg, max) = (8199629.342, 8304160.294, 8382137.594), stdev = 46244.708
  CI (99.9%): [8273263.608, 8335056.979] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
BlockingFlowableMostRecentTest._Benchmark.benchmark_mostRecent  thrpt   30  8304160.294 ± 30896.686  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onNextThrowsCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onNextThrowsCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 495102.719 ops/s
# Warmup Iteration   2: 666974.629 ops/s
# Warmup Iteration   3: 764310.563 ops/s
# Warmup Iteration   4: 764194.875 ops/s
# Warmup Iteration   5: 763172.907 ops/s
# Warmup Iteration   6: 765088.663 ops/s
# Warmup Iteration   7: 768233.681 ops/s
# Warmup Iteration   8: 768427.019 ops/s
# Warmup Iteration   9: 768720.463 ops/s
# Warmup Iteration  10: 765516.992 ops/s
# Warmup Iteration  11: 761217.462 ops/s
# Warmup Iteration  12: 756733.403 ops/s
# Warmup Iteration  13: 759303.178 ops/s
# Warmup Iteration  14: 763485.986 ops/s
# Warmup Iteration  15: 761815.758 ops/s
# Warmup Iteration  16: 764279.577 ops/s
# Warmup Iteration  17: 803327.953 ops/s
# Warmup Iteration  18: 795926.571 ops/s
# Warmup Iteration  19: 795727.758 ops/s
# Warmup Iteration  20: 801298.065 ops/s
# Warmup Iteration  21: 793891.564 ops/s
# Warmup Iteration  22: 796049.410 ops/s
# Warmup Iteration  23: 790255.962 ops/s
# Warmup Iteration  24: 793258.892 ops/s
# Warmup Iteration  25: 796003.699 ops/s
# Warmup Iteration  26: 793774.603 ops/s
# Warmup Iteration  27: 796619.176 ops/s
# Warmup Iteration  28: 803327.338 ops/s
# Warmup Iteration  29: 793286.763 ops/s
# Warmup Iteration  30: 786845.257 ops/s
Iteration   1: 798598.459 ops/s
Iteration   2: 794551.146 ops/s
Iteration   3: 793175.411 ops/s
Iteration   4: 802279.170 ops/s
Iteration   5: 799700.252 ops/s
Iteration   6: 781017.114 ops/s
Iteration   7: 794856.172 ops/s
Iteration   8: 795013.798 ops/s
Iteration   9: 798164.418 ops/s
Iteration  10: 808166.900 ops/s
Iteration  11: 787185.132 ops/s
Iteration  12: 799950.690 ops/s
Iteration  13: 800855.275 ops/s
Iteration  14: 793817.045 ops/s
Iteration  15: 799815.963 ops/s
Iteration  16: 800268.845 ops/s
Iteration  17: 801759.909 ops/s
Iteration  18: 798076.326 ops/s
Iteration  19: 793192.495 ops/s
Iteration  20: 799410.872 ops/s
Iteration  21: 804018.557 ops/s
Iteration  22: 796985.094 ops/s
Iteration  23: 790190.935 ops/s
Iteration  24: 804921.552 ops/s
Iteration  25: 801682.564 ops/s
Iteration  26: 798994.176 ops/s
Iteration  27: 799236.579 ops/s
Iteration  28: 799829.672 ops/s
Iteration  29: 807846.183 ops/s
Iteration  30: 798108.027 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onNextThrowsCancelsUpstream":
  798055.624 ±(99.9%) 3771.031 ops/s [Average]
  (min, avg, max) = (781017.114, 798055.624, 808166.900), stdev = 5644.302
  CI (99.9%): [794284.594, 801826.655] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
BoundedSubscriberTest._Benchmark.benchmark_onNextThrowsCancelsUpstream  thrpt   30  798055.624 ± 3771.031  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_forEachWhile$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_forEachWhile

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3837391.848 ops/s
# Warmup Iteration   2: 4376710.782 ops/s
# Warmup Iteration   3: 5403543.759 ops/s
# Warmup Iteration   4: 5419555.911 ops/s
# Warmup Iteration   5: 5435076.831 ops/s
# Warmup Iteration   6: 5434688.875 ops/s
# Warmup Iteration   7: 5416774.688 ops/s
# Warmup Iteration   8: 5363443.569 ops/s
# Warmup Iteration   9: 5422189.058 ops/s
# Warmup Iteration  10: 5421053.832 ops/s
# Warmup Iteration  11: 5413056.758 ops/s
# Warmup Iteration  12: 5403289.106 ops/s
# Warmup Iteration  13: 5400622.530 ops/s
# Warmup Iteration  14: 5380187.445 ops/s
# Warmup Iteration  15: 5403737.995 ops/s
# Warmup Iteration  16: 5422757.819 ops/s
# Warmup Iteration  17: 5393070.091 ops/s
# Warmup Iteration  18: 5376960.280 ops/s
# Warmup Iteration  19: 5390234.143 ops/s
# Warmup Iteration  20: 5294530.069 ops/s
# Warmup Iteration  21: 5393922.182 ops/s
# Warmup Iteration  22: 5377571.602 ops/s
# Warmup Iteration  23: 5353088.280 ops/s
# Warmup Iteration  24: 5393100.140 ops/s
# Warmup Iteration  25: 5353434.649 ops/s
# Warmup Iteration  26: 5393489.948 ops/s
# Warmup Iteration  27: 5370810.985 ops/s
# Warmup Iteration  28: 5403634.936 ops/s
# Warmup Iteration  29: 5382710.033 ops/s
# Warmup Iteration  30: 5388831.089 ops/s
Iteration   1: 5301961.934 ops/s
Iteration   2: 5393509.133 ops/s
Iteration   3: 5384109.784 ops/s
Iteration   4: 5339046.678 ops/s
Iteration   5: 5356742.287 ops/s
Iteration   6: 5441059.851 ops/s
Iteration   7: 5395573.074 ops/s
Iteration   8: 5407049.048 ops/s
Iteration   9: 5292063.530 ops/s
Iteration  10: 5427116.073 ops/s
Iteration  11: 5396011.065 ops/s
Iteration  12: 5388732.325 ops/s
Iteration  13: 5389785.852 ops/s
Iteration  14: 5408286.508 ops/s
Iteration  15: 5369831.188 ops/s
Iteration  16: 5432873.478 ops/s
Iteration  17: 5366049.869 ops/s
Iteration  18: 5367142.106 ops/s
Iteration  19: 5419843.879 ops/s
Iteration  20: 5315917.816 ops/s
Iteration  21: 5403811.856 ops/s
Iteration  22: 5402429.746 ops/s
Iteration  23: 5384007.053 ops/s
Iteration  24: 5392066.749 ops/s
Iteration  25: 5376644.402 ops/s
Iteration  26: 5389434.662 ops/s
Iteration  27: 5378505.145 ops/s
Iteration  28: 5370970.900 ops/s
Iteration  29: 5377808.804 ops/s
Iteration  30: 5401455.688 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_forEachWhile":
  5382328.016 ±(99.9%) 23231.234 ops/s [Average]
  (min, avg, max) = (5292063.530, 5382328.016, 5441059.851), stdev = 34771.420
  CI (99.9%): [5359096.782, 5405559.250] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableSubscriberTest._Benchmark.benchmark_forEachWhile  thrpt   30  5382328.016 ± 23231.234  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3701044.811 ops/s
# Warmup Iteration   2: 5224132.911 ops/s
# Warmup Iteration   3: 5872148.684 ops/s
# Warmup Iteration   4: 5932020.248 ops/s
# Warmup Iteration   5: 5907952.264 ops/s
# Warmup Iteration   6: 5890079.580 ops/s
# Warmup Iteration   7: 5796915.537 ops/s
# Warmup Iteration   8: 5904082.387 ops/s
# Warmup Iteration   9: 5904786.691 ops/s
# Warmup Iteration  10: 5892726.283 ops/s
# Warmup Iteration  11: 5905038.328 ops/s
# Warmup Iteration  12: 5902177.769 ops/s
# Warmup Iteration  13: 5934589.948 ops/s
# Warmup Iteration  14: 5881488.427 ops/s
# Warmup Iteration  15: 5906877.482 ops/s
# Warmup Iteration  16: 5899753.832 ops/s
# Warmup Iteration  17: 5908467.447 ops/s
# Warmup Iteration  18: 5876258.361 ops/s
# Warmup Iteration  19: 5912984.765 ops/s
# Warmup Iteration  20: 5811945.315 ops/s
# Warmup Iteration  21: 5882866.989 ops/s
# Warmup Iteration  22: 5869198.761 ops/s
# Warmup Iteration  23: 5825407.023 ops/s
# Warmup Iteration  24: 5885411.431 ops/s
# Warmup Iteration  25: 5864116.730 ops/s
# Warmup Iteration  26: 5888967.593 ops/s
# Warmup Iteration  27: 5893469.870 ops/s
# Warmup Iteration  28: 5814421.521 ops/s
# Warmup Iteration  29: 5886592.918 ops/s
# Warmup Iteration  30: 5878980.833 ops/s
Iteration   1: 5912692.922 ops/s
Iteration   2: 5901252.416 ops/s
Iteration   3: 5880213.548 ops/s
Iteration   4: 5890647.460 ops/s
Iteration   5: 5903679.507 ops/s
Iteration   6: 5899775.838 ops/s
Iteration   7: 5883997.974 ops/s
Iteration   8: 5903421.586 ops/s
Iteration   9: 5888350.429 ops/s
Iteration  10: 5869942.872 ops/s
Iteration  11: 5775776.645 ops/s
Iteration  12: 5893967.506 ops/s
Iteration  13: 5880747.455 ops/s
Iteration  14: 5856794.137 ops/s
Iteration  15: 5870927.444 ops/s
Iteration  16: 5887690.376 ops/s
Iteration  17: 5831089.525 ops/s
Iteration  18: 5890677.473 ops/s
Iteration  19: 5743643.197 ops/s
Iteration  20: 5914316.717 ops/s
Iteration  21: 5748662.548 ops/s
Iteration  22: 5901029.490 ops/s
Iteration  23: 5876282.863 ops/s
Iteration  24: 5719141.696 ops/s
Iteration  25: 5893714.856 ops/s
Iteration  26: 5890432.871 ops/s
Iteration  27: 5871567.906 ops/s
Iteration  28: 5890577.137 ops/s
Iteration  29: 5904605.361 ops/s
Iteration  30: 5879422.764 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromPublisherTest._Benchmark.benchmark_dispose":
  5868501.417 ±(99.9%) 34657.689 ops/s [Average]
  (min, avg, max) = (5719141.696, 5868501.417, 5914316.717), stdev = 51874.002
  CI (99.9%): [5833843.728, 5903159.107] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SingleFromPublisherTest._Benchmark.benchmark_dispose  thrpt   30  5868501.417 ± 34657.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_mostRecentWithException$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_mostRecentWithException

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 745563.157 ops/s
# Warmup Iteration   2: 898043.134 ops/s
# Warmup Iteration   3: 882087.653 ops/s
# Warmup Iteration   4: 962385.420 ops/s
# Warmup Iteration   5: 957398.779 ops/s
# Warmup Iteration   6: 962156.466 ops/s
# Warmup Iteration   7: 961308.188 ops/s
# Warmup Iteration   8: 959649.931 ops/s
# Warmup Iteration   9: 962138.894 ops/s
# Warmup Iteration  10: 949332.806 ops/s
# Warmup Iteration  11: 957417.922 ops/s
# Warmup Iteration  12: 953113.265 ops/s
# Warmup Iteration  13: 956080.717 ops/s
# Warmup Iteration  14: 957029.743 ops/s
# Warmup Iteration  15: 953445.112 ops/s
# Warmup Iteration  16: 953306.946 ops/s
# Warmup Iteration  17: 995411.350 ops/s
# Warmup Iteration  18: 1012876.322 ops/s
# Warmup Iteration  19: 1005039.982 ops/s
# Warmup Iteration  20: 1017242.798 ops/s
# Warmup Iteration  21: 1012119.688 ops/s
# Warmup Iteration  22: 1012780.552 ops/s
# Warmup Iteration  23: 1018504.480 ops/s
# Warmup Iteration  24: 1023059.565 ops/s
# Warmup Iteration  25: 1011589.633 ops/s
# Warmup Iteration  26: 1017505.856 ops/s
# Warmup Iteration  27: 1003601.103 ops/s
# Warmup Iteration  28: 1012068.250 ops/s
# Warmup Iteration  29: 1020195.561 ops/s
# Warmup Iteration  30: 1014281.903 ops/s
Iteration   1: 1011632.747 ops/s
Iteration   2: 1013544.889 ops/s
Iteration   3: 1011522.693 ops/s
Iteration   4: 1012385.834 ops/s
Iteration   5: 1007655.562 ops/s
Iteration   6: 996600.952 ops/s
Iteration   7: 1018513.992 ops/s
Iteration   8: 1015926.301 ops/s
Iteration   9: 994219.632 ops/s
Iteration  10: 1009710.574 ops/s
Iteration  11: 1013477.236 ops/s
Iteration  12: 1014231.473 ops/s
Iteration  13: 1011173.135 ops/s
Iteration  14: 1014627.319 ops/s
Iteration  15: 1018177.753 ops/s
Iteration  16: 1021606.649 ops/s
Iteration  17: 1014603.240 ops/s
Iteration  18: 1012904.607 ops/s
Iteration  19: 997646.727 ops/s
Iteration  20: 1017388.693 ops/s
Iteration  21: 997938.181 ops/s
Iteration  22: 1014342.330 ops/s
Iteration  23: 1009380.753 ops/s
Iteration  24: 1015877.070 ops/s
Iteration  25: 1011400.149 ops/s
Iteration  26: 1016609.382 ops/s
Iteration  27: 1010317.207 ops/s
Iteration  28: 990719.252 ops/s
Iteration  29: 1013294.042 ops/s
Iteration  30: 1017932.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableMostRecentTest._Benchmark.benchmark_mostRecentWithException":
  1010845.367 ±(99.9%) 5153.245 ops/s [Average]
  (min, avg, max) = (990719.252, 1010845.367, 1021606.649), stdev = 7713.136
  CI (99.9%): [1005692.122, 1015998.613] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
BlockingFlowableMostRecentTest._Benchmark.benchmark_mostRecentWithException  thrpt   30  1010845.367 ± 5153.245  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAwaitTest._Benchmark.benchmark_awaitInterrupted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAwaitTest._Benchmark.benchmark_awaitInterrupted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 357030.140 ops/s
# Warmup Iteration   2: 416905.952 ops/s
# Warmup Iteration   3: 391555.342 ops/s
# Warmup Iteration   4: 448462.721 ops/s
# Warmup Iteration   5: 449594.585 ops/s
# Warmup Iteration   6: 451073.345 ops/s
# Warmup Iteration   7: 448716.747 ops/s
# Warmup Iteration   8: 451315.083 ops/s
# Warmup Iteration   9: 444832.220 ops/s
# Warmup Iteration  10: 450566.658 ops/s
# Warmup Iteration  11: 448275.927 ops/s
# Warmup Iteration  12: 442530.244 ops/s
# Warmup Iteration  13: 440423.233 ops/s
# Warmup Iteration  14: 448117.586 ops/s
# Warmup Iteration  15: 449715.719 ops/s
# Warmup Iteration  16: 450778.683 ops/s
# Warmup Iteration  17: 469887.812 ops/s
# Warmup Iteration  18: 472450.385 ops/s
# Warmup Iteration  19: 473671.261 ops/s
# Warmup Iteration  20: 477081.726 ops/s
# Warmup Iteration  21: 470514.565 ops/s
# Warmup Iteration  22: 469708.665 ops/s
# Warmup Iteration  23: 470740.778 ops/s
# Warmup Iteration  24: 471145.733 ops/s
# Warmup Iteration  25: 472451.110 ops/s
# Warmup Iteration  26: 470424.442 ops/s
# Warmup Iteration  27: 473340.749 ops/s
# Warmup Iteration  28: 467998.179 ops/s
# Warmup Iteration  29: 471492.402 ops/s
# Warmup Iteration  30: 473175.327 ops/s
Iteration   1: 473585.706 ops/s
Iteration   2: 468910.906 ops/s
Iteration   3: 475798.213 ops/s
Iteration   4: 471476.859 ops/s
Iteration   5: 471934.945 ops/s
Iteration   6: 467836.215 ops/s
Iteration   7: 474199.152 ops/s
Iteration   8: 468925.886 ops/s
Iteration   9: 468583.559 ops/s
Iteration  10: 467733.612 ops/s
Iteration  11: 474113.403 ops/s
Iteration  12: 469334.485 ops/s
Iteration  13: 475305.131 ops/s
Iteration  14: 470119.636 ops/s
Iteration  15: 468783.543 ops/s
Iteration  16: 473399.656 ops/s
Iteration  17: 471547.674 ops/s
Iteration  18: 472567.623 ops/s
Iteration  19: 476749.858 ops/s
Iteration  20: 469359.024 ops/s
Iteration  21: 472827.364 ops/s
Iteration  22: 471616.874 ops/s
Iteration  23: 473696.281 ops/s
Iteration  24: 476577.640 ops/s
Iteration  25: 477093.051 ops/s
Iteration  26: 473500.768 ops/s
Iteration  27: 466397.456 ops/s
Iteration  28: 471879.040 ops/s
Iteration  29: 473871.152 ops/s
Iteration  30: 469909.177 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAwaitTest._Benchmark.benchmark_awaitInterrupted":
  471921.130 ±(99.9%) 1956.153 ops/s [Average]
  (min, avg, max) = (466397.456, 471921.130, 477093.051), stdev = 2927.878
  CI (99.9%): [469964.977, 473877.283] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
CompletableAwaitTest._Benchmark.benchmark_awaitInterrupted  thrpt   30  471921.130 ± 1956.153  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_singleRequestNotForgottenWhenNoData$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_singleRequestNotForgottenWhenNoData

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1789776.751 ops/s
# Warmup Iteration   2: 2614860.235 ops/s
# Warmup Iteration   3: 3058200.402 ops/s
# Warmup Iteration   4: 3163366.377 ops/s
# Warmup Iteration   5: 3374611.717 ops/s
# Warmup Iteration   6: 3269446.163 ops/s
# Warmup Iteration   7: 3333758.623 ops/s
# Warmup Iteration   8: 3382298.913 ops/s
# Warmup Iteration   9: 3348170.229 ops/s
# Warmup Iteration  10: 3376433.495 ops/s
# Warmup Iteration  11: 3335005.733 ops/s
# Warmup Iteration  12: 3369699.042 ops/s
# Warmup Iteration  13: 3374504.038 ops/s
# Warmup Iteration  14: 3322913.475 ops/s
# Warmup Iteration  15: 3366470.215 ops/s
# Warmup Iteration  16: 3357836.543 ops/s
# Warmup Iteration  17: 3377784.815 ops/s
# Warmup Iteration  18: 3387864.920 ops/s
# Warmup Iteration  19: 3380999.580 ops/s
# Warmup Iteration  20: 3389443.825 ops/s
# Warmup Iteration  21: 3386818.002 ops/s
# Warmup Iteration  22: 3351223.970 ops/s
# Warmup Iteration  23: 3397052.152 ops/s
# Warmup Iteration  24: 3392153.413 ops/s
# Warmup Iteration  25: 3360856.440 ops/s
# Warmup Iteration  26: 3378861.024 ops/s
# Warmup Iteration  27: 3386638.451 ops/s
# Warmup Iteration  28: 3384914.665 ops/s
# Warmup Iteration  29: 3307617.485 ops/s
# Warmup Iteration  30: 3313691.720 ops/s
Iteration   1: 3374981.211 ops/s
Iteration   2: 3376682.434 ops/s
Iteration   3: 3376851.441 ops/s
Iteration   4: 3379237.976 ops/s
Iteration   5: 3425906.630 ops/s
Iteration   6: 3309331.348 ops/s
Iteration   7: 3368024.801 ops/s
Iteration   8: 3386214.764 ops/s
Iteration   9: 3374496.634 ops/s
Iteration  10: 3379483.082 ops/s
Iteration  11: 3374295.945 ops/s
Iteration  12: 3385909.094 ops/s
Iteration  13: 3364275.817 ops/s
Iteration  14: 3379886.408 ops/s
Iteration  15: 3404507.590 ops/s
Iteration  16: 3386816.484 ops/s
Iteration  17: 3380136.106 ops/s
Iteration  18: 3367860.377 ops/s
Iteration  19: 3338164.237 ops/s
Iteration  20: 3375737.596 ops/s
Iteration  21: 3349763.864 ops/s
Iteration  22: 3350548.839 ops/s
Iteration  23: 3388979.122 ops/s
Iteration  24: 3377088.145 ops/s
Iteration  25: 3360867.278 ops/s
Iteration  26: 3370375.565 ops/s
Iteration  27: 3364825.213 ops/s
Iteration  28: 3343059.142 ops/s
Iteration  29: 3319074.372 ops/s
Iteration  30: 3328509.411 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_singleRequestNotForgottenWhenNoData":
  3368729.697 ±(99.9%) 16040.109 ops/s [Average]
  (min, avg, max) = (3309331.348, 3368729.697, 3425906.630), stdev = 24008.082
  CI (99.9%): [3352689.589, 3384769.806] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_singleRequestNotForgottenWhenNoData  thrpt   30  3368729.697 ± 16040.109  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_synchronousDrop$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_synchronousDrop

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1069327.905 ops/s
# Warmup Iteration   2: 1500766.826 ops/s
# Warmup Iteration   3: 1445005.161 ops/s
# Warmup Iteration   4: 1639984.337 ops/s
# Warmup Iteration   5: 1641010.245 ops/s
# Warmup Iteration   6: 1633065.839 ops/s
# Warmup Iteration   7: 1647594.342 ops/s
# Warmup Iteration   8: 1632797.470 ops/s
# Warmup Iteration   9: 1624868.145 ops/s
# Warmup Iteration  10: 1630069.933 ops/s
# Warmup Iteration  11: 1634622.100 ops/s
# Warmup Iteration  12: 1601601.838 ops/s
# Warmup Iteration  13: 1618400.881 ops/s
# Warmup Iteration  14: 1630501.856 ops/s
# Warmup Iteration  15: 1639276.087 ops/s
# Warmup Iteration  16: 1605725.997 ops/s
# Warmup Iteration  17: 1630801.123 ops/s
# Warmup Iteration  18: 1628967.575 ops/s
# Warmup Iteration  19: 1643697.110 ops/s
# Warmup Iteration  20: 1629662.485 ops/s
# Warmup Iteration  21: 1631618.206 ops/s
# Warmup Iteration  22: 1617492.016 ops/s
# Warmup Iteration  23: 1630028.634 ops/s
# Warmup Iteration  24: 1632658.562 ops/s
# Warmup Iteration  25: 1625779.223 ops/s
# Warmup Iteration  26: 1637191.723 ops/s
# Warmup Iteration  27: 1633459.040 ops/s
# Warmup Iteration  28: 1617025.678 ops/s
# Warmup Iteration  29: 1630103.605 ops/s
# Warmup Iteration  30: 1621654.716 ops/s
Iteration   1: 1640795.100 ops/s
Iteration   2: 1634632.763 ops/s
Iteration   3: 1612078.584 ops/s
Iteration   4: 1634941.259 ops/s
Iteration   5: 1629216.179 ops/s
Iteration   6: 1627438.248 ops/s
Iteration   7: 1628955.615 ops/s
Iteration   8: 1620928.651 ops/s
Iteration   9: 1633769.674 ops/s
Iteration  10: 1637625.246 ops/s
Iteration  11: 1627991.886 ops/s
Iteration  12: 1620981.416 ops/s
Iteration  13: 1626879.967 ops/s
Iteration  14: 1636568.360 ops/s
Iteration  15: 1617164.149 ops/s
Iteration  16: 1632333.178 ops/s
Iteration  17: 1632592.147 ops/s
Iteration  18: 1620003.807 ops/s
Iteration  19: 1621355.997 ops/s
Iteration  20: 1615689.011 ops/s
Iteration  21: 1629717.867 ops/s
Iteration  22: 1642578.482 ops/s
Iteration  23: 1636771.757 ops/s
Iteration  24: 1625263.645 ops/s
Iteration  25: 1631753.506 ops/s
Iteration  26: 1621583.388 ops/s
Iteration  27: 1632441.036 ops/s
Iteration  28: 1625795.231 ops/s
Iteration  29: 1637360.779 ops/s
Iteration  30: 1628332.145 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_synchronousDrop":
  1628784.636 ±(99.9%) 5082.000 ops/s [Average]
  (min, avg, max) = (1612078.584, 1628784.636, 1642578.482), stdev = 7606.499
  CI (99.9%): [1623702.636, 1633866.636] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FlowableOnBackpressureLatestTest._Benchmark.benchmark_synchronousDrop  thrpt   30  1628784.636 ± 5082.000  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_justWithOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_justWithOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2651179.993 ops/s
# Warmup Iteration   2: 4518670.245 ops/s
# Warmup Iteration   3: 4863770.849 ops/s
# Warmup Iteration   4: 4857199.715 ops/s
# Warmup Iteration   5: 4884697.324 ops/s
# Warmup Iteration   6: 4866391.027 ops/s
# Warmup Iteration   7: 4854841.322 ops/s
# Warmup Iteration   8: 4898935.981 ops/s
# Warmup Iteration   9: 4821030.990 ops/s
# Warmup Iteration  10: 4873661.919 ops/s
# Warmup Iteration  11: 4889154.468 ops/s
# Warmup Iteration  12: 4856364.604 ops/s
# Warmup Iteration  13: 4798119.250 ops/s
# Warmup Iteration  14: 4845082.390 ops/s
# Warmup Iteration  15: 4826603.400 ops/s
# Warmup Iteration  16: 4814410.797 ops/s
# Warmup Iteration  17: 4733935.114 ops/s
# Warmup Iteration  18: 4869353.969 ops/s
# Warmup Iteration  19: 4854626.018 ops/s
# Warmup Iteration  20: 4885242.047 ops/s
# Warmup Iteration  21: 4851037.670 ops/s
# Warmup Iteration  22: 4891481.101 ops/s
# Warmup Iteration  23: 4858159.694 ops/s
# Warmup Iteration  24: 4857803.447 ops/s
# Warmup Iteration  25: 4885271.593 ops/s
# Warmup Iteration  26: 4867398.430 ops/s
# Warmup Iteration  27: 4876494.888 ops/s
# Warmup Iteration  28: 4862410.805 ops/s
# Warmup Iteration  29: 4896124.546 ops/s
# Warmup Iteration  30: 4905218.133 ops/s
Iteration   1: 4888170.084 ops/s
Iteration   2: 4876559.316 ops/s
Iteration   3: 4838004.733 ops/s
Iteration   4: 4864961.751 ops/s
Iteration   5: 4819786.805 ops/s
Iteration   6: 4902218.087 ops/s
Iteration   7: 4881855.460 ops/s
Iteration   8: 4867162.488 ops/s
Iteration   9: 4852021.955 ops/s
Iteration  10: 4881663.976 ops/s
Iteration  11: 4884281.387 ops/s
Iteration  12: 4921439.437 ops/s
Iteration  13: 4859837.847 ops/s
Iteration  14: 4878125.988 ops/s
Iteration  15: 4889511.417 ops/s
Iteration  16: 4856663.093 ops/s
Iteration  17: 4877812.555 ops/s
Iteration  18: 4865891.195 ops/s
Iteration  19: 4899282.182 ops/s
Iteration  20: 4902639.724 ops/s
Iteration  21: 4892777.040 ops/s
Iteration  22: 4904471.816 ops/s
Iteration  23: 4875367.402 ops/s
Iteration  24: 4900411.087 ops/s
Iteration  25: 4798177.111 ops/s
Iteration  26: 4891872.712 ops/s
Iteration  27: 4871961.680 ops/s
Iteration  28: 4877277.186 ops/s
Iteration  29: 4819084.882 ops/s
Iteration  30: 4879284.277 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_justWithOnNext":
  4873952.489 ±(99.9%) 18289.630 ops/s [Average]
  (min, avg, max) = (4798177.111, 4873952.489, 4921439.437), stdev = 27375.059
  CI (99.9%): [4855662.859, 4892242.119] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_justWithOnNext  thrpt   30  4873952.489 ± 18289.630  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_unsubscribeFromRetry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_unsubscribeFromRetry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2811550.071 ops/s
# Warmup Iteration   2: 3734439.017 ops/s
# Warmup Iteration   3: 4341277.200 ops/s
# Warmup Iteration   4: 4332816.448 ops/s
# Warmup Iteration   5: 4293359.763 ops/s
# Warmup Iteration   6: 4324235.807 ops/s
# Warmup Iteration   7: 4322445.437 ops/s
# Warmup Iteration   8: 4257645.195 ops/s
# Warmup Iteration   9: 4332027.910 ops/s
# Warmup Iteration  10: 4278421.476 ops/s
# Warmup Iteration  11: 4294687.133 ops/s
# Warmup Iteration  12: 4282515.030 ops/s
# Warmup Iteration  13: 4279177.156 ops/s
# Warmup Iteration  14: 4307777.299 ops/s
# Warmup Iteration  15: 4219591.108 ops/s
# Warmup Iteration  16: 4212050.305 ops/s
# Warmup Iteration  17: 4287765.852 ops/s
# Warmup Iteration  18: 4280627.736 ops/s
# Warmup Iteration  19: 4210499.481 ops/s
# Warmup Iteration  20: 4269274.532 ops/s
# Warmup Iteration  21: 4287029.887 ops/s
# Warmup Iteration  22: 4320879.599 ops/s
# Warmup Iteration  23: 4211448.524 ops/s
# Warmup Iteration  24: 4276782.250 ops/s
# Warmup Iteration  25: 4284846.381 ops/s
# Warmup Iteration  26: 4241807.307 ops/s
# Warmup Iteration  27: 4282217.351 ops/s
# Warmup Iteration  28: 4287540.072 ops/s
# Warmup Iteration  29: 4291035.779 ops/s
# Warmup Iteration  30: 4251072.306 ops/s
Iteration   1: 4246129.921 ops/s
Iteration   2: 4307473.368 ops/s
Iteration   3: 4286373.231 ops/s
Iteration   4: 4281598.873 ops/s
Iteration   5: 4264041.078 ops/s
Iteration   6: 4262887.958 ops/s
Iteration   7: 4289059.684 ops/s
Iteration   8: 4269019.261 ops/s
Iteration   9: 4258912.244 ops/s
Iteration  10: 4282112.562 ops/s
Iteration  11: 4306686.441 ops/s
Iteration  12: 4289088.527 ops/s
Iteration  13: 4296623.657 ops/s
Iteration  14: 4285033.027 ops/s
Iteration  15: 4277729.366 ops/s
Iteration  16: 4243101.514 ops/s
Iteration  17: 4271576.093 ops/s
Iteration  18: 4276072.194 ops/s
Iteration  19: 4283589.544 ops/s
Iteration  20: 4311230.755 ops/s
Iteration  21: 4208297.582 ops/s
Iteration  22: 4290537.702 ops/s
Iteration  23: 4267812.438 ops/s
Iteration  24: 4259575.649 ops/s
Iteration  25: 4310515.331 ops/s
Iteration  26: 4273578.409 ops/s
Iteration  27: 4243283.925 ops/s
Iteration  28: 4258673.752 ops/s
Iteration  29: 4267322.818 ops/s
Iteration  30: 4285515.681 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_unsubscribeFromRetry":
  4275115.086 ±(99.9%) 15068.070 ops/s [Average]
  (min, avg, max) = (4208297.582, 4275115.086, 4311230.755), stdev = 22553.179
  CI (99.9%): [4260047.017, 4290183.156] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableRetryWithPredicateTest._Benchmark.benchmark_unsubscribeFromRetry  thrpt   30  4275115.086 ± 15068.070  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilFires$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilFires

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1797691.862 ops/s
# Warmup Iteration   2: 2251856.678 ops/s
# Warmup Iteration   3: 2725587.345 ops/s
# Warmup Iteration   4: 2727557.424 ops/s
# Warmup Iteration   5: 2737647.126 ops/s
# Warmup Iteration   6: 2735866.174 ops/s
# Warmup Iteration   7: 2737898.622 ops/s
# Warmup Iteration   8: 2752327.432 ops/s
# Warmup Iteration   9: 2730548.040 ops/s
# Warmup Iteration  10: 2728462.705 ops/s
# Warmup Iteration  11: 2737492.687 ops/s
# Warmup Iteration  12: 2681637.986 ops/s
# Warmup Iteration  13: 2721098.925 ops/s
# Warmup Iteration  14: 2726359.812 ops/s
# Warmup Iteration  15: 2723878.466 ops/s
# Warmup Iteration  16: 2729188.570 ops/s
# Warmup Iteration  17: 2729373.434 ops/s
# Warmup Iteration  18: 2687828.416 ops/s
# Warmup Iteration  19: 2725319.952 ops/s
# Warmup Iteration  20: 2746775.918 ops/s
# Warmup Iteration  21: 2741551.419 ops/s
# Warmup Iteration  22: 2719103.624 ops/s
# Warmup Iteration  23: 2744577.226 ops/s
# Warmup Iteration  24: 2729789.486 ops/s
# Warmup Iteration  25: 2679465.648 ops/s
# Warmup Iteration  26: 2739600.149 ops/s
# Warmup Iteration  27: 2675868.208 ops/s
# Warmup Iteration  28: 2736553.465 ops/s
# Warmup Iteration  29: 2755787.421 ops/s
# Warmup Iteration  30: 2737292.338 ops/s
Iteration   1: 2756440.167 ops/s
Iteration   2: 2727991.496 ops/s
Iteration   3: 2735606.100 ops/s
Iteration   4: 2710375.453 ops/s
Iteration   5: 2741997.448 ops/s
Iteration   6: 2722558.203 ops/s
Iteration   7: 2730420.949 ops/s
Iteration   8: 2731326.830 ops/s
Iteration   9: 2725055.288 ops/s
Iteration  10: 2752796.150 ops/s
Iteration  11: 2720085.258 ops/s
Iteration  12: 2712295.542 ops/s
Iteration  13: 2733844.779 ops/s
Iteration  14: 2729513.720 ops/s
Iteration  15: 2727753.041 ops/s
Iteration  16: 2731193.851 ops/s
Iteration  17: 2707698.036 ops/s
Iteration  18: 2727858.500 ops/s
Iteration  19: 2740122.369 ops/s
Iteration  20: 2735485.392 ops/s
Iteration  21: 2734622.763 ops/s
Iteration  22: 2723113.319 ops/s
Iteration  23: 2737626.427 ops/s
Iteration  24: 2718503.645 ops/s
Iteration  25: 2750169.358 ops/s
Iteration  26: 2726476.625 ops/s
Iteration  27: 2719569.294 ops/s
Iteration  28: 2730246.101 ops/s
Iteration  29: 2720415.518 ops/s
Iteration  30: 2755972.855 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilFires":
  2730571.149 ±(99.9%) 8300.957 ops/s [Average]
  (min, avg, max) = (2707698.036, 2730571.149, 2756440.167), stdev = 12424.482
  CI (99.9%): [2722270.193, 2738872.106] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_untilFires  thrpt   30  2730571.149 ± 8300.957  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_fallbackComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_fallbackComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2151875.005 ops/s
# Warmup Iteration   2: 3215489.861 ops/s
# Warmup Iteration   3: 3801161.433 ops/s
# Warmup Iteration   4: 3728465.529 ops/s
# Warmup Iteration   5: 3775952.882 ops/s
# Warmup Iteration   6: 3778459.494 ops/s
# Warmup Iteration   7: 3763561.973 ops/s
# Warmup Iteration   8: 3749031.491 ops/s
# Warmup Iteration   9: 3752515.821 ops/s
# Warmup Iteration  10: 3765615.945 ops/s
# Warmup Iteration  11: 3739204.608 ops/s
# Warmup Iteration  12: 3739607.443 ops/s
# Warmup Iteration  13: 3738125.072 ops/s
# Warmup Iteration  14: 3752208.357 ops/s
# Warmup Iteration  15: 3752600.145 ops/s
# Warmup Iteration  16: 3777691.379 ops/s
# Warmup Iteration  17: 3715980.585 ops/s
# Warmup Iteration  18: 3757589.493 ops/s
# Warmup Iteration  19: 3737274.224 ops/s
# Warmup Iteration  20: 3708421.224 ops/s
# Warmup Iteration  21: 3745541.602 ops/s
# Warmup Iteration  22: 3761270.500 ops/s
# Warmup Iteration  23: 3738554.457 ops/s
# Warmup Iteration  24: 3774161.913 ops/s
# Warmup Iteration  25: 3755118.374 ops/s
# Warmup Iteration  26: 3728201.209 ops/s
# Warmup Iteration  27: 3790426.922 ops/s
# Warmup Iteration  28: 3756570.572 ops/s
# Warmup Iteration  29: 3734152.714 ops/s
# Warmup Iteration  30: 3775054.347 ops/s
Iteration   1: 3668073.437 ops/s
Iteration   2: 3733781.611 ops/s
Iteration   3: 3770058.747 ops/s
Iteration   4: 3752308.572 ops/s
Iteration   5: 3706333.814 ops/s
Iteration   6: 3738994.392 ops/s
Iteration   7: 3766153.331 ops/s
Iteration   8: 3768358.120 ops/s
Iteration   9: 3685980.414 ops/s
Iteration  10: 3765907.681 ops/s
Iteration  11: 3746009.342 ops/s
Iteration  12: 3741176.225 ops/s
Iteration  13: 3698696.383 ops/s
Iteration  14: 3694859.950 ops/s
Iteration  15: 3745460.371 ops/s
Iteration  16: 3747718.803 ops/s
Iteration  17: 3744884.134 ops/s
Iteration  18: 3763663.561 ops/s
Iteration  19: 3783973.006 ops/s
Iteration  20: 3759983.391 ops/s
Iteration  21: 3749086.756 ops/s
Iteration  22: 3764665.593 ops/s
Iteration  23: 3750902.203 ops/s
Iteration  24: 3772282.913 ops/s
Iteration  25: 3756240.507 ops/s
Iteration  26: 3766291.979 ops/s
Iteration  27: 3709197.334 ops/s
Iteration  28: 3751871.395 ops/s
Iteration  29: 3765869.357 ops/s
Iteration  30: 3766381.561 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_fallbackComplete":
  3744505.496 ±(99.9%) 19187.806 ops/s [Average]
  (min, avg, max) = (3668073.437, 3744505.496, 3783973.006), stdev = 28719.407
  CI (99.9%): [3725317.690, 3763693.302] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MaybeTimeoutPublisherTest._Benchmark.benchmark_fallbackComplete  thrpt   30  3744505.496 ± 19187.806  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1773245.970 ops/s
# Warmup Iteration   2: 2224168.677 ops/s
# Warmup Iteration   3: 2690807.096 ops/s
# Warmup Iteration   4: 2710178.661 ops/s
# Warmup Iteration   5: 2710435.978 ops/s
# Warmup Iteration   6: 2729843.908 ops/s
# Warmup Iteration   7: 2705289.605 ops/s
# Warmup Iteration   8: 2707440.897 ops/s
# Warmup Iteration   9: 2686415.594 ops/s
# Warmup Iteration  10: 2704847.861 ops/s
# Warmup Iteration  11: 2709753.042 ops/s
# Warmup Iteration  12: 2694125.898 ops/s
# Warmup Iteration  13: 2721175.594 ops/s
# Warmup Iteration  14: 2694688.114 ops/s
# Warmup Iteration  15: 2695081.611 ops/s
# Warmup Iteration  16: 2693625.870 ops/s
# Warmup Iteration  17: 2693606.981 ops/s
# Warmup Iteration  18: 2726347.722 ops/s
# Warmup Iteration  19: 2704306.843 ops/s
# Warmup Iteration  20: 2717159.884 ops/s
# Warmup Iteration  21: 2712932.224 ops/s
# Warmup Iteration  22: 2707087.401 ops/s
# Warmup Iteration  23: 2707218.652 ops/s
# Warmup Iteration  24: 2686924.453 ops/s
# Warmup Iteration  25: 2698706.328 ops/s
# Warmup Iteration  26: 2692552.484 ops/s
# Warmup Iteration  27: 2649242.893 ops/s
# Warmup Iteration  28: 2701912.908 ops/s
# Warmup Iteration  29: 2664610.066 ops/s
# Warmup Iteration  30: 2704533.893 ops/s
Iteration   1: 2701753.600 ops/s
Iteration   2: 2677147.948 ops/s
Iteration   3: 2698542.449 ops/s
Iteration   4: 2702392.313 ops/s
Iteration   5: 2698587.103 ops/s
Iteration   6: 2696727.900 ops/s
Iteration   7: 2692849.515 ops/s
Iteration   8: 2726702.586 ops/s
Iteration   9: 2694871.104 ops/s
Iteration  10: 2689159.855 ops/s
Iteration  11: 2713828.706 ops/s
Iteration  12: 2706668.235 ops/s
Iteration  13: 2668062.111 ops/s
Iteration  14: 2705653.399 ops/s
Iteration  15: 2667836.471 ops/s
Iteration  16: 2690122.193 ops/s
Iteration  17: 2717992.077 ops/s
Iteration  18: 2714649.019 ops/s
Iteration  19: 2671755.872 ops/s
Iteration  20: 2667052.114 ops/s
Iteration  21: 2664255.107 ops/s
Iteration  22: 2704247.199 ops/s
Iteration  23: 2702968.525 ops/s
Iteration  24: 2714652.750 ops/s
Iteration  25: 2664781.317 ops/s
Iteration  26: 2680759.554 ops/s
Iteration  27: 2696283.155 ops/s
Iteration  28: 2692049.697 ops/s
Iteration  29: 2709440.917 ops/s
Iteration  30: 2710425.406 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess":
  2694740.607 ±(99.9%) 11684.552 ops/s [Average]
  (min, avg, max) = (2664255.107, 2694740.607, 2726702.586), stdev = 17488.889
  CI (99.9%): [2683056.055, 2706425.158] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess  thrpt   30  2694740.607 ± 11684.552  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_mainCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_mainCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1816707.040 ops/s
# Warmup Iteration   2: 2421276.509 ops/s
# Warmup Iteration   3: 2897492.180 ops/s
# Warmup Iteration   4: 2933831.437 ops/s
# Warmup Iteration   5: 2900351.499 ops/s
# Warmup Iteration   6: 2935128.607 ops/s
# Warmup Iteration   7: 2916752.710 ops/s
# Warmup Iteration   8: 2899014.719 ops/s
# Warmup Iteration   9: 2892270.863 ops/s
# Warmup Iteration  10: 2864242.823 ops/s
# Warmup Iteration  11: 2910904.461 ops/s
# Warmup Iteration  12: 2929276.034 ops/s
# Warmup Iteration  13: 2908146.584 ops/s
# Warmup Iteration  14: 2912032.743 ops/s
# Warmup Iteration  15: 2919605.897 ops/s
# Warmup Iteration  16: 2893995.703 ops/s
# Warmup Iteration  17: 2885715.533 ops/s
# Warmup Iteration  18: 2922787.968 ops/s
# Warmup Iteration  19: 2903733.836 ops/s
# Warmup Iteration  20: 2924241.872 ops/s
# Warmup Iteration  21: 2882615.124 ops/s
# Warmup Iteration  22: 2906614.424 ops/s
# Warmup Iteration  23: 2919032.678 ops/s
# Warmup Iteration  24: 2923891.248 ops/s
# Warmup Iteration  25: 2915106.805 ops/s
# Warmup Iteration  26: 2929011.106 ops/s
# Warmup Iteration  27: 2918262.613 ops/s
# Warmup Iteration  28: 2914944.714 ops/s
# Warmup Iteration  29: 2913877.441 ops/s
# Warmup Iteration  30: 2912798.517 ops/s
Iteration   1: 2932817.623 ops/s
Iteration   2: 2909104.956 ops/s
Iteration   3: 2913830.231 ops/s
Iteration   4: 2891728.766 ops/s
Iteration   5: 2893433.174 ops/s
Iteration   6: 2897471.431 ops/s
Iteration   7: 2913275.289 ops/s
Iteration   8: 2931363.634 ops/s
Iteration   9: 2865624.290 ops/s
Iteration  10: 2928337.952 ops/s
Iteration  11: 2887528.486 ops/s
Iteration  12: 2916050.169 ops/s
Iteration  13: 2903962.431 ops/s
Iteration  14: 2891658.940 ops/s
Iteration  15: 2920935.211 ops/s
Iteration  16: 2908595.397 ops/s
Iteration  17: 2907868.451 ops/s
Iteration  18: 2928750.022 ops/s
Iteration  19: 2886021.810 ops/s
Iteration  20: 2895792.903 ops/s
Iteration  21: 2929013.161 ops/s
Iteration  22: 2923463.225 ops/s
Iteration  23: 2908118.520 ops/s
Iteration  24: 2867324.597 ops/s
Iteration  25: 2897180.567 ops/s
Iteration  26: 2881265.564 ops/s
Iteration  27: 2907355.361 ops/s
Iteration  28: 2921470.260 ops/s
Iteration  29: 2902143.205 ops/s
Iteration  30: 2915487.232 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_mainCompletes":
  2905899.095 ±(99.9%) 11981.306 ops/s [Average]
  (min, avg, max) = (2865624.290, 2905899.095, 2932817.623), stdev = 17933.056
  CI (99.9%): [2893917.789, 2917880.401] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_mainCompletes  thrpt   30  2905899.095 ± 11981.306  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_fallbackComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_fallbackComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2192528.921 ops/s
# Warmup Iteration   2: 3313364.900 ops/s
# Warmup Iteration   3: 3718266.048 ops/s
# Warmup Iteration   4: 3760723.628 ops/s
# Warmup Iteration   5: 3749687.222 ops/s
# Warmup Iteration   6: 3677772.746 ops/s
# Warmup Iteration   7: 3658074.054 ops/s
# Warmup Iteration   8: 3743434.777 ops/s
# Warmup Iteration   9: 3751532.454 ops/s
# Warmup Iteration  10: 3745051.005 ops/s
# Warmup Iteration  11: 3728981.669 ops/s
# Warmup Iteration  12: 3711118.737 ops/s
# Warmup Iteration  13: 3730390.365 ops/s
# Warmup Iteration  14: 3742066.418 ops/s
# Warmup Iteration  15: 3660588.713 ops/s
# Warmup Iteration  16: 3742143.658 ops/s
# Warmup Iteration  17: 3721072.409 ops/s
# Warmup Iteration  18: 3757065.090 ops/s
# Warmup Iteration  19: 3758375.932 ops/s
# Warmup Iteration  20: 3725977.122 ops/s
# Warmup Iteration  21: 3704417.631 ops/s
# Warmup Iteration  22: 3714629.556 ops/s
# Warmup Iteration  23: 3729670.096 ops/s
# Warmup Iteration  24: 3741388.390 ops/s
# Warmup Iteration  25: 3763415.581 ops/s
# Warmup Iteration  26: 3763223.753 ops/s
# Warmup Iteration  27: 3733320.086 ops/s
# Warmup Iteration  28: 3671956.344 ops/s
# Warmup Iteration  29: 3739816.249 ops/s
# Warmup Iteration  30: 3730150.170 ops/s
Iteration   1: 3733888.945 ops/s
Iteration   2: 3738381.456 ops/s
Iteration   3: 3716741.961 ops/s
Iteration   4: 3727641.336 ops/s
Iteration   5: 3738579.624 ops/s
Iteration   6: 3751785.996 ops/s
Iteration   7: 3725139.191 ops/s
Iteration   8: 3726049.623 ops/s
Iteration   9: 3750271.106 ops/s
Iteration  10: 3677787.914 ops/s
Iteration  11: 3691893.815 ops/s
Iteration  12: 3743546.796 ops/s
Iteration  13: 3726980.533 ops/s
Iteration  14: 3725610.895 ops/s
Iteration  15: 3755797.918 ops/s
Iteration  16: 3739658.003 ops/s
Iteration  17: 3711339.070 ops/s
Iteration  18: 3735911.659 ops/s
Iteration  19: 3706043.026 ops/s
Iteration  20: 3740979.704 ops/s
Iteration  21: 3703360.290 ops/s
Iteration  22: 3778648.418 ops/s
Iteration  23: 3754274.622 ops/s
Iteration  24: 3766364.065 ops/s
Iteration  25: 3743245.042 ops/s
Iteration  26: 3738744.785 ops/s
Iteration  27: 3743957.814 ops/s
Iteration  28: 3751080.619 ops/s
Iteration  29: 3746239.558 ops/s
Iteration  30: 3762156.242 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_fallbackComplete":
  3735070.001 ±(99.9%) 14625.691 ops/s [Average]
  (min, avg, max) = (3677787.914, 3735070.001, 3778648.418), stdev = 21891.048
  CI (99.9%): [3720444.310, 3749695.692] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeTimeoutTest._Benchmark.benchmark_fallbackComplete  thrpt   30  3735070.001 ± 14625.691  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambCancelsOthers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambCancelsOthers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1271166.883 ops/s
# Warmup Iteration   2: 2037141.428 ops/s
# Warmup Iteration   3: 2188520.142 ops/s
# Warmup Iteration   4: 2197955.851 ops/s
# Warmup Iteration   5: 2160947.523 ops/s
# Warmup Iteration   6: 2180049.667 ops/s
# Warmup Iteration   7: 2188460.433 ops/s
# Warmup Iteration   8: 2131613.637 ops/s
# Warmup Iteration   9: 2185489.259 ops/s
# Warmup Iteration  10: 2150254.718 ops/s
# Warmup Iteration  11: 2191719.703 ops/s
# Warmup Iteration  12: 2199689.243 ops/s
# Warmup Iteration  13: 2197167.678 ops/s
# Warmup Iteration  14: 2205369.483 ops/s
# Warmup Iteration  15: 2181579.785 ops/s
# Warmup Iteration  16: 2185794.401 ops/s
# Warmup Iteration  17: 1961981.617 ops/s
# Warmup Iteration  18: 1657173.977 ops/s
# Warmup Iteration  19: 1632391.104 ops/s
# Warmup Iteration  20: 1637418.427 ops/s
# Warmup Iteration  21: 1592149.680 ops/s
# Warmup Iteration  22: 1578715.724 ops/s
# Warmup Iteration  23: 1695004.633 ops/s
# Warmup Iteration  24: 1596671.859 ops/s
# Warmup Iteration  25: 1593254.419 ops/s
# Warmup Iteration  26: 1630796.369 ops/s
# Warmup Iteration  27: 1670021.365 ops/s
# Warmup Iteration  28: 1606053.329 ops/s
# Warmup Iteration  29: 1687803.440 ops/s
# Warmup Iteration  30: 1601528.693 ops/s
Iteration   1: 1654612.015 ops/s
Iteration   2: 1600050.302 ops/s
Iteration   3: 1665996.361 ops/s
Iteration   4: 1658627.939 ops/s
Iteration   5: 1634965.127 ops/s
Iteration   6: 1640910.519 ops/s
Iteration   7: 1623802.465 ops/s
Iteration   8: 1629654.001 ops/s
Iteration   9: 1660308.093 ops/s
Iteration  10: 1579374.205 ops/s
Iteration  11: 1599580.968 ops/s
Iteration  12: 1645562.818 ops/s
Iteration  13: 1592917.940 ops/s
Iteration  14: 1625297.939 ops/s
Iteration  15: 1697037.538 ops/s
Iteration  16: 1578865.284 ops/s
Iteration  17: 1672347.347 ops/s
Iteration  18: 1636401.303 ops/s
Iteration  19: 1648746.467 ops/s
Iteration  20: 1623443.108 ops/s
Iteration  21: 1635189.657 ops/s
Iteration  22: 1649649.848 ops/s
Iteration  23: 1617096.486 ops/s
Iteration  24: 1683250.913 ops/s
Iteration  25: 1598146.058 ops/s
Iteration  26: 1656659.075 ops/s
Iteration  27: 1613077.623 ops/s
Iteration  28: 1599995.637 ops/s
Iteration  29: 1696962.488 ops/s
Iteration  30: 1613332.846 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambCancelsOthers":
  1634395.412 ±(99.9%) 21378.676 ops/s [Average]
  (min, avg, max) = (1578865.284, 1634395.412, 1697037.538), stdev = 31998.598
  CI (99.9%): [1613016.736, 1655774.088] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_ambCancelsOthers  thrpt   30  1634395.412 ± 21378.676  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147939.350 ops/s
# Warmup Iteration   2: 325811.235 ops/s
# Warmup Iteration   3: 333608.422 ops/s
# Warmup Iteration   4: 343638.256 ops/s
# Warmup Iteration   5: 359511.804 ops/s
# Warmup Iteration   6: 344381.033 ops/s
# Warmup Iteration   7: 341611.759 ops/s
# Warmup Iteration   8: 369493.236 ops/s
# Warmup Iteration   9: 368589.720 ops/s
# Warmup Iteration  10: 374370.539 ops/s
# Warmup Iteration  11: 365026.039 ops/s
# Warmup Iteration  12: 364114.514 ops/s
# Warmup Iteration  13: 382049.438 ops/s
# Warmup Iteration  14: 359904.539 ops/s
# Warmup Iteration  15: 381369.246 ops/s
# Warmup Iteration  16: 364943.786 ops/s
# Warmup Iteration  17: 397048.865 ops/s
# Warmup Iteration  18: 387876.772 ops/s
# Warmup Iteration  19: 386960.880 ops/s
# Warmup Iteration  20: 401120.663 ops/s
# Warmup Iteration  21: 385178.797 ops/s
# Warmup Iteration  22: 403667.843 ops/s
# Warmup Iteration  23: 402586.571 ops/s
# Warmup Iteration  24: 380848.190 ops/s
# Warmup Iteration  25: 410380.506 ops/s
# Warmup Iteration  26: 383026.453 ops/s
# Warmup Iteration  27: 398414.037 ops/s
# Warmup Iteration  28: 385478.182 ops/s
# Warmup Iteration  29: 387075.715 ops/s
# Warmup Iteration  30: 410582.748 ops/s
Iteration   1: 403521.101 ops/s
Iteration   2: 374704.783 ops/s
Iteration   3: 404602.165 ops/s
Iteration   4: 377684.672 ops/s
Iteration   5: 391523.261 ops/s
Iteration   6: 388746.154 ops/s
Iteration   7: 402553.583 ops/s
Iteration   8: 383377.479 ops/s
Iteration   9: 391243.486 ops/s
Iteration  10: 407287.966 ops/s
Iteration  11: 379475.555 ops/s
Iteration  12: 394426.721 ops/s
Iteration  13: 386679.832 ops/s
Iteration  14: 389155.102 ops/s
Iteration  15: 383564.213 ops/s
Iteration  16: 378834.696 ops/s
Iteration  17: 394375.217 ops/s
Iteration  18: 393196.021 ops/s
Iteration  19: 375935.648 ops/s
Iteration  20: 401456.956 ops/s
Iteration  21: 381283.176 ops/s
Iteration  22: 390958.375 ops/s
Iteration  23: 385670.096 ops/s
Iteration  24: 401493.894 ops/s
Iteration  25: 281472.256 ops/s
Iteration  26: 394180.039 ops/s
Iteration  27: 403133.246 ops/s
Iteration  28: 387211.661 ops/s
Iteration  29: 377484.105 ops/s
Iteration  30: 397415.941 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels":
  386754.913 ±(99.9%) 14707.648 ops/s [Average]
  (min, avg, max) = (281472.256, 386754.913, 407287.966), stdev = 22013.717
  CI (99.9%): [372047.265, 401462.562] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                      Mode  Cnt       Score       Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels  thrpt   30  386754.913 ± 14707.648  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85346.672 ops/s
# Warmup Iteration   2: 203251.614 ops/s
# Warmup Iteration   3: 555800.632 ops/s
# Warmup Iteration   4: 544815.318 ops/s
# Warmup Iteration   5: 566887.818 ops/s
# Warmup Iteration   6: 572210.603 ops/s
# Warmup Iteration   7: 561451.329 ops/s
# Warmup Iteration   8: 540991.828 ops/s
# Warmup Iteration   9: 594838.715 ops/s
# Warmup Iteration  10: 558013.606 ops/s
# Warmup Iteration  11: 580835.090 ops/s
# Warmup Iteration  12: 552956.282 ops/s
# Warmup Iteration  13: 569800.453 ops/s
# Warmup Iteration  14: 563981.476 ops/s
# Warmup Iteration  15: 568290.275 ops/s
# Warmup Iteration  16: 594447.638 ops/s
# Warmup Iteration  17: 566229.749 ops/s
# Warmup Iteration  18: 595984.247 ops/s
# Warmup Iteration  19: 611029.753 ops/s
# Warmup Iteration  20: 586239.480 ops/s
# Warmup Iteration  21: 614404.398 ops/s
# Warmup Iteration  22: 582536.947 ops/s
# Warmup Iteration  23: 617690.959 ops/s
# Warmup Iteration  24: 597830.355 ops/s
# Warmup Iteration  25: 592732.819 ops/s
# Warmup Iteration  26: 610396.565 ops/s
# Warmup Iteration  27: 564709.010 ops/s
# Warmup Iteration  28: 589669.566 ops/s
# Warmup Iteration  29: 605006.970 ops/s
# Warmup Iteration  30: 595859.936 ops/s
Iteration   1: 605654.403 ops/s
Iteration   2: 613444.749 ops/s
Iteration   3: 616583.183 ops/s
Iteration   4: 576964.368 ops/s
Iteration   5: 586084.716 ops/s
Iteration   6: 611569.044 ops/s
Iteration   7: 588082.199 ops/s
Iteration   8: 594460.826 ops/s
Iteration   9: 597504.001 ops/s
Iteration  10: 613099.576 ops/s
Iteration  11: 596692.937 ops/s
Iteration  12: 594334.460 ops/s
Iteration  13: 620928.740 ops/s
Iteration  14: 617306.530 ops/s
Iteration  15: 595527.970 ops/s
Iteration  16: 591588.115 ops/s
Iteration  17: 613787.591 ops/s
Iteration  18: 579246.639 ops/s
Iteration  19: 586060.664 ops/s
Iteration  20: 609724.727 ops/s
Iteration  21: 590258.192 ops/s
Iteration  22: 605604.245 ops/s
Iteration  23: 588688.691 ops/s
Iteration  24: 600290.878 ops/s
Iteration  25: 613357.619 ops/s
Iteration  26: 592282.162 ops/s
Iteration  27: 608808.710 ops/s
Iteration  28: 590030.808 ops/s
Iteration  29: 593818.049 ops/s
Iteration  30: 628618.012 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperThrows":
  600680.093 ±(99.9%) 8764.008 ops/s [Average]
  (min, avg, max) = (576964.368, 600680.093, 628618.012), stdev = 13117.555
  CI (99.9%): [591916.086, 609444.101] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperThrows  thrpt   30  600680.093 ± 8764.008  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 168088.354 ops/s
# Warmup Iteration   2: 1115479.465 ops/s
# Warmup Iteration   3: 1790065.323 ops/s
# Warmup Iteration   4: 1978004.226 ops/s
# Warmup Iteration   5: 1969663.859 ops/s
# Warmup Iteration   6: 2013582.948 ops/s
# Warmup Iteration   7: 1985075.634 ops/s
# Warmup Iteration   8: 1941964.835 ops/s
# Warmup Iteration   9: 1991453.330 ops/s
# Warmup Iteration  10: 1967173.195 ops/s
# Warmup Iteration  11: 2028361.487 ops/s
# Warmup Iteration  12: 1978402.842 ops/s
# Warmup Iteration  13: 1948551.662 ops/s
# Warmup Iteration  14: 2043568.567 ops/s
# Warmup Iteration  15: 1973243.820 ops/s
# Warmup Iteration  16: 2010938.995 ops/s
# Warmup Iteration  17: 1997607.610 ops/s
# Warmup Iteration  18: 2044039.907 ops/s
# Warmup Iteration  19: 1985048.588 ops/s
# Warmup Iteration  20: 2032939.467 ops/s
# Warmup Iteration  21: 1943736.621 ops/s
# Warmup Iteration  22: 1940249.340 ops/s
# Warmup Iteration  23: 2035987.966 ops/s
# Warmup Iteration  24: 1954540.471 ops/s
# Warmup Iteration  25: 1971348.854 ops/s
# Warmup Iteration  26: 2049471.877 ops/s
# Warmup Iteration  27: 1955367.838 ops/s
# Warmup Iteration  28: 2073356.131 ops/s
# Warmup Iteration  29: 1992751.590 ops/s
# Warmup Iteration  30: 1982936.466 ops/s
Iteration   1: 2083436.019 ops/s
Iteration   2: 1990506.849 ops/s
Iteration   3: 1971571.562 ops/s
Iteration   4: 2050643.535 ops/s
Iteration   5: 1936814.988 ops/s
Iteration   6: 2006494.935 ops/s
Iteration   7: 1984743.334 ops/s
Iteration   8: 1923139.235 ops/s
Iteration   9: 2038469.290 ops/s
Iteration  10: 1987756.152 ops/s
Iteration  11: 2046420.999 ops/s
Iteration  12: 1968760.782 ops/s
Iteration  13: 2032439.738 ops/s
Iteration  14: 1957804.093 ops/s
Iteration  15: 1970440.741 ops/s
Iteration  16: 2043893.683 ops/s
Iteration  17: 1951844.117 ops/s
Iteration  18: 2042213.529 ops/s
Iteration  19: 1800595.850 ops/s
Iteration  20: 1801988.935 ops/s
Iteration  21: 2066968.681 ops/s
Iteration  22: 1943364.808 ops/s
Iteration  23: 2067950.173 ops/s
Iteration  24: 1945242.108 ops/s
Iteration  25: 2017487.155 ops/s
Iteration  26: 2085554.753 ops/s
Iteration  27: 1970053.819 ops/s
Iteration  28: 1977442.609 ops/s
Iteration  29: 1952724.088 ops/s
Iteration  30: 2036337.379 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambIterable":
  1988436.798 ±(99.9%) 46079.572 ops/s [Average]
  (min, avg, max) = (1800595.850, 1988436.798, 2085554.753), stdev = 68969.739
  CI (99.9%): [1942357.226, 2034516.370] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_ambIterable  thrpt   30  1988436.798 ± 46079.572  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambIterable2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambIterable2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 268302.405 ops/s
# Warmup Iteration   2: 851963.642 ops/s
# Warmup Iteration   3: 1445532.441 ops/s
# Warmup Iteration   4: 1772356.111 ops/s
# Warmup Iteration   5: 1794227.694 ops/s
# Warmup Iteration   6: 1779544.637 ops/s
# Warmup Iteration   7: 1806968.220 ops/s
# Warmup Iteration   8: 1816019.503 ops/s
# Warmup Iteration   9: 1811725.012 ops/s
# Warmup Iteration  10: 1766927.302 ops/s
# Warmup Iteration  11: 1824770.625 ops/s
# Warmup Iteration  12: 1789929.779 ops/s
# Warmup Iteration  13: 1813085.319 ops/s
# Warmup Iteration  14: 1863098.907 ops/s
# Warmup Iteration  15: 1804146.557 ops/s
# Warmup Iteration  16: 1837612.977 ops/s
# Warmup Iteration  17: 1764789.667 ops/s
# Warmup Iteration  18: 1838663.617 ops/s
# Warmup Iteration  19: 1853083.625 ops/s
# Warmup Iteration  20: 1786697.443 ops/s
# Warmup Iteration  21: 1845085.222 ops/s
# Warmup Iteration  22: 1846492.253 ops/s
# Warmup Iteration  23: 1733221.763 ops/s
# Warmup Iteration  24: 1794279.128 ops/s
# Warmup Iteration  25: 1827473.754 ops/s
# Warmup Iteration  26: 1872836.634 ops/s
# Warmup Iteration  27: 1759633.134 ops/s
# Warmup Iteration  28: 1797668.970 ops/s
# Warmup Iteration  29: 1822238.299 ops/s
# Warmup Iteration  30: 1776811.587 ops/s
Iteration   1: 1863683.298 ops/s
Iteration   2: 1772730.585 ops/s
Iteration   3: 1870448.164 ops/s
Iteration   4: 1894393.379 ops/s
Iteration   5: 1735256.393 ops/s
Iteration   6: 1833987.754 ops/s
Iteration   7: 1806139.706 ops/s
Iteration   8: 1847982.004 ops/s
Iteration   9: 1873339.335 ops/s
Iteration  10: 1813306.242 ops/s
Iteration  11: 1851620.730 ops/s
Iteration  12: 1757240.749 ops/s
Iteration  13: 1845528.844 ops/s
Iteration  14: 1866488.916 ops/s
Iteration  15: 1722281.873 ops/s
Iteration  16: 1879092.780 ops/s
Iteration  17: 1822105.483 ops/s
Iteration  18: 1790587.128 ops/s
Iteration  19: 1797681.294 ops/s
Iteration  20: 1831946.039 ops/s
Iteration  21: 1760222.027 ops/s
Iteration  22: 1881295.068 ops/s
Iteration  23: 1812963.657 ops/s
Iteration  24: 1790522.354 ops/s
Iteration  25: 1856701.888 ops/s
Iteration  26: 1792868.360 ops/s
Iteration  27: 1867689.341 ops/s
Iteration  28: 1817910.020 ops/s
Iteration  29: 1780630.340 ops/s
Iteration  30: 1798317.187 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_ambIterable2":
  1821165.365 ±(99.9%) 30479.969 ops/s [Average]
  (min, avg, max) = (1722281.873, 1821165.365, 1894393.379), stdev = 45620.986
  CI (99.9%): [1790685.396, 1851645.333] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_ambIterable2  thrpt   30  1821165.365 ± 30479.969  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainSuccessSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainSuccessSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 326995.769 ops/s
# Warmup Iteration   2: 1199723.071 ops/s
# Warmup Iteration   3: 1916427.343 ops/s
# Warmup Iteration   4: 2422045.566 ops/s
# Warmup Iteration   5: 2537209.784 ops/s
# Warmup Iteration   6: 2457413.083 ops/s
# Warmup Iteration   7: 2508839.363 ops/s
# Warmup Iteration   8: 2552371.909 ops/s
# Warmup Iteration   9: 2469650.461 ops/s
# Warmup Iteration  10: 2507571.227 ops/s
# Warmup Iteration  11: 2321276.426 ops/s
# Warmup Iteration  12: 2546774.774 ops/s
# Warmup Iteration  13: 2473114.880 ops/s
# Warmup Iteration  14: 2487742.638 ops/s
# Warmup Iteration  15: 2518406.916 ops/s
# Warmup Iteration  16: 2483416.608 ops/s
# Warmup Iteration  17: 2545758.761 ops/s
# Warmup Iteration  18: 2446035.160 ops/s
# Warmup Iteration  19: 2567240.943 ops/s
# Warmup Iteration  20: 2475155.990 ops/s
# Warmup Iteration  21: 2504690.032 ops/s
# Warmup Iteration  22: 2510379.122 ops/s
# Warmup Iteration  23: 2475241.419 ops/s
# Warmup Iteration  24: 2444958.376 ops/s
# Warmup Iteration  25: 2593815.580 ops/s
# Warmup Iteration  26: 2484809.672 ops/s
# Warmup Iteration  27: 2486844.043 ops/s
# Warmup Iteration  28: 2466210.155 ops/s
# Warmup Iteration  29: 2483080.336 ops/s
# Warmup Iteration  30: 2530111.745 ops/s
Iteration   1: 2568454.382 ops/s
Iteration   2: 2463574.352 ops/s
Iteration   3: 2573859.512 ops/s
Iteration   4: 2514715.925 ops/s
Iteration   5: 2492296.128 ops/s
Iteration   6: 2557098.229 ops/s
Iteration   7: 2554663.283 ops/s
Iteration   8: 2453237.907 ops/s
Iteration   9: 2523991.229 ops/s
Iteration  10: 2531157.933 ops/s
Iteration  11: 2536468.777 ops/s
Iteration  12: 2490481.183 ops/s
Iteration  13: 2330423.136 ops/s
Iteration  14: 2075827.429 ops/s
Iteration  15: 2551310.246 ops/s
Iteration  16: 2451631.521 ops/s
Iteration  17: 2515907.668 ops/s
Iteration  18: 2596376.221 ops/s
Iteration  19: 2425178.468 ops/s
Iteration  20: 2477455.966 ops/s
Iteration  21: 2566733.017 ops/s
Iteration  22: 2474127.851 ops/s
Iteration  23: 2546638.766 ops/s
Iteration  24: 2463178.062 ops/s
Iteration  25: 2560108.464 ops/s
Iteration  26: 2500022.072 ops/s
Iteration  27: 2477600.646 ops/s
Iteration  28: 2551622.513 ops/s
Iteration  29: 2485168.909 ops/s
Iteration  30: 2578558.260 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainSuccessSingle":
  2496262.269 ±(99.9%) 64924.334 ops/s [Average]
  (min, avg, max) = (2075827.429, 2496262.269, 2596376.221), stdev = 97175.695
  CI (99.9%): [2431337.934, 2561186.603] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_mainSuccessSingle  thrpt   30  2496262.269 ± 64924.334  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_fallbackError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_fallbackError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65233.343 ops/s
# Warmup Iteration   2: 181212.142 ops/s
# Warmup Iteration   3: 559447.101 ops/s
# Warmup Iteration   4: 570714.436 ops/s
# Warmup Iteration   5: 569449.091 ops/s
# Warmup Iteration   6: 547201.551 ops/s
# Warmup Iteration   7: 596314.675 ops/s
# Warmup Iteration   8: 577492.316 ops/s
# Warmup Iteration   9: 558029.836 ops/s
# Warmup Iteration  10: 605643.109 ops/s
# Warmup Iteration  11: 611590.547 ops/s
# Warmup Iteration  12: 583568.546 ops/s
# Warmup Iteration  13: 606505.956 ops/s
# Warmup Iteration  14: 590097.370 ops/s
# Warmup Iteration  15: 604265.970 ops/s
# Warmup Iteration  16: 584231.480 ops/s
# Warmup Iteration  17: 599515.611 ops/s
# Warmup Iteration  18: 654068.294 ops/s
# Warmup Iteration  19: 608320.698 ops/s
# Warmup Iteration  20: 635876.159 ops/s
# Warmup Iteration  21: 610148.838 ops/s
# Warmup Iteration  22: 631140.584 ops/s
# Warmup Iteration  23: 612451.800 ops/s
# Warmup Iteration  24: 636128.378 ops/s
# Warmup Iteration  25: 634759.591 ops/s
# Warmup Iteration  26: 598880.730 ops/s
# Warmup Iteration  27: 650469.358 ops/s
# Warmup Iteration  28: 606941.927 ops/s
# Warmup Iteration  29: 592994.123 ops/s
# Warmup Iteration  30: 643173.891 ops/s
Iteration   1: 636211.547 ops/s
Iteration   2: 614061.652 ops/s
Iteration   3: 623989.401 ops/s
Iteration   4: 625434.547 ops/s
Iteration   5: 636000.761 ops/s
Iteration   6: 632142.057 ops/s
Iteration   7: 596204.684 ops/s
Iteration   8: 596665.228 ops/s
Iteration   9: 617349.453 ops/s
Iteration  10: 640968.283 ops/s
Iteration  11: 617859.673 ops/s
Iteration  12: 621655.362 ops/s
Iteration  13: 632518.204 ops/s
Iteration  14: 601543.704 ops/s
Iteration  15: 617087.442 ops/s
Iteration  16: 624861.934 ops/s
Iteration  17: 609834.159 ops/s
Iteration  18: 642471.932 ops/s
Iteration  19: 612291.769 ops/s
Iteration  20: 630006.932 ops/s
Iteration  21: 617084.474 ops/s
Iteration  22: 641013.629 ops/s
Iteration  23: 615278.141 ops/s
Iteration  24: 621773.279 ops/s
Iteration  25: 616481.200 ops/s
Iteration  26: 612252.503 ops/s
Iteration  27: 612690.515 ops/s
Iteration  28: 637463.327 ops/s
Iteration  29: 599074.170 ops/s
Iteration  30: 606839.821 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_fallbackError":
  620303.659 ±(99.9%) 8880.612 ops/s [Average]
  (min, avg, max) = (596204.684, 620303.659, 642471.932), stdev = 13292.083
  CI (99.9%): [611423.047, 629184.272] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeTimeoutTest._Benchmark.benchmark_fallbackError  thrpt   30  620303.659 ± 8880.612  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_normalEmitLast$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_normalEmitLast

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83278.262 ops/s
# Warmup Iteration   2: 444683.027 ops/s
# Warmup Iteration   3: 558355.756 ops/s
# Warmup Iteration   4: 574342.416 ops/s
# Warmup Iteration   5: 531208.231 ops/s
# Warmup Iteration   6: 607485.839 ops/s
# Warmup Iteration   7: 614710.451 ops/s
# Warmup Iteration   8: 635051.332 ops/s
# Warmup Iteration   9: 604031.867 ops/s
# Warmup Iteration  10: 651173.483 ops/s
# Warmup Iteration  11: 623967.302 ops/s
# Warmup Iteration  12: 602272.698 ops/s
# Warmup Iteration  13: 644634.864 ops/s
# Warmup Iteration  14: 597058.155 ops/s
# Warmup Iteration  15: 639324.612 ops/s
# Warmup Iteration  16: 629213.048 ops/s
# Warmup Iteration  17: 602554.055 ops/s
# Warmup Iteration  18: 632391.854 ops/s
# Warmup Iteration  19: 592101.564 ops/s
# Warmup Iteration  20: 613357.784 ops/s
# Warmup Iteration  21: 579196.137 ops/s
# Warmup Iteration  22: 595212.092 ops/s
# Warmup Iteration  23: 630257.446 ops/s
# Warmup Iteration  24: 597383.699 ops/s
# Warmup Iteration  25: 625684.268 ops/s
# Warmup Iteration  26: 601057.898 ops/s
# Warmup Iteration  27: 607744.477 ops/s
# Warmup Iteration  28: 615597.881 ops/s
# Warmup Iteration  29: 602293.913 ops/s
# Warmup Iteration  30: 605015.668 ops/s
Iteration   1: 600552.991 ops/s
Iteration   2: 632688.030 ops/s
Iteration   3: 592397.251 ops/s
Iteration   4: 609992.701 ops/s
Iteration   5: 614409.860 ops/s
Iteration   6: 609639.437 ops/s
Iteration   7: 598813.775 ops/s
Iteration   8: 628776.783 ops/s
Iteration   9: 463232.974 ops/s
Iteration  10: 627861.117 ops/s
Iteration  11: 594818.111 ops/s
Iteration  12: 613976.453 ops/s
Iteration  13: 607971.380 ops/s
Iteration  14: 592961.697 ops/s
Iteration  15: 617988.746 ops/s
Iteration  16: 586396.026 ops/s
Iteration  17: 623003.704 ops/s
Iteration  18: 601081.419 ops/s
Iteration  19: 606703.961 ops/s
Iteration  20: 619848.800 ops/s
Iteration  21: 604201.216 ops/s
Iteration  22: 620502.214 ops/s
Iteration  23: 601646.537 ops/s
Iteration  24: 593194.599 ops/s
Iteration  25: 624405.237 ops/s
Iteration  26: 602438.581 ops/s
Iteration  27: 611845.005 ops/s
Iteration  28: 608348.236 ops/s
Iteration  29: 620521.518 ops/s
Iteration  30: 602639.336 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_normalEmitLast":
  604428.590 ±(99.9%) 19533.710 ops/s [Average]
  (min, avg, max) = (463232.974, 604428.590, 632688.030), stdev = 29237.140
  CI (99.9%): [584894.880, 623962.300] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableThrottleLatestTest._Benchmark.benchmark_normalEmitLast  thrpt   30  604428.590 ± 19533.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalMissing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalMissing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 337434.649 ops/s
# Warmup Iteration   2: 1149719.259 ops/s
# Warmup Iteration   3: 1843740.059 ops/s
# Warmup Iteration   4: 2034503.295 ops/s
# Warmup Iteration   5: 1839991.205 ops/s
# Warmup Iteration   6: 1978353.756 ops/s
# Warmup Iteration   7: 2051700.534 ops/s
# Warmup Iteration   8: 2100978.974 ops/s
# Warmup Iteration   9: 2039663.567 ops/s
# Warmup Iteration  10: 2098046.787 ops/s
# Warmup Iteration  11: 2065812.552 ops/s
# Warmup Iteration  12: 1995996.735 ops/s
# Warmup Iteration  13: 2056228.680 ops/s
# Warmup Iteration  14: 1993338.850 ops/s
# Warmup Iteration  15: 2044170.535 ops/s
# Warmup Iteration  16: 2120726.636 ops/s
# Warmup Iteration  17: 1945334.123 ops/s
# Warmup Iteration  18: 2054291.281 ops/s
# Warmup Iteration  19: 2043683.846 ops/s
# Warmup Iteration  20: 2074291.122 ops/s
# Warmup Iteration  21: 2098298.430 ops/s
# Warmup Iteration  22: 2060266.463 ops/s
# Warmup Iteration  23: 2082377.997 ops/s
# Warmup Iteration  24: 2017714.461 ops/s
# Warmup Iteration  25: 2071038.774 ops/s
# Warmup Iteration  26: 2113493.052 ops/s
# Warmup Iteration  27: 2067284.931 ops/s
# Warmup Iteration  28: 2025892.529 ops/s
# Warmup Iteration  29: 2084832.831 ops/s
# Warmup Iteration  30: 2148679.203 ops/s
Iteration   1: 2012579.192 ops/s
Iteration   2: 2127231.268 ops/s
Iteration   3: 2089421.829 ops/s
Iteration   4: 2016117.862 ops/s
Iteration   5: 2040494.768 ops/s
Iteration   6: 2029966.655 ops/s
Iteration   7: 2036877.747 ops/s
Iteration   8: 2005304.598 ops/s
Iteration   9: 2022000.027 ops/s
Iteration  10: 2076445.179 ops/s
Iteration  11: 2063652.625 ops/s
Iteration  12: 2043442.739 ops/s
Iteration  13: 2010912.744 ops/s
Iteration  14: 2099759.155 ops/s
Iteration  15: 2120083.518 ops/s
Iteration  16: 1990937.749 ops/s
Iteration  17: 2089021.601 ops/s
Iteration  18: 2089838.579 ops/s
Iteration  19: 2032338.558 ops/s
Iteration  20: 2118545.727 ops/s
Iteration  21: 2010438.096 ops/s
Iteration  22: 2086360.440 ops/s
Iteration  23: 2099337.790 ops/s
Iteration  24: 2028727.463 ops/s
Iteration  25: 2014353.980 ops/s
Iteration  26: 1980902.016 ops/s
Iteration  27: 2104284.737 ops/s
Iteration  28: 1969191.402 ops/s
Iteration  29: 2122354.375 ops/s
Iteration  30: 2048655.731 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalMissing":
  2052652.605 ±(99.9%) 30713.982 ops/s [Average]
  (min, avg, max) = (1969191.402, 2052652.605, 2127231.268), stdev = 45971.245
  CI (99.9%): [2021938.623, 2083366.587] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_normalMissing  thrpt   30  2052652.605 ± 30713.982  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 266201.129 ops/s
# Warmup Iteration   2: 865253.943 ops/s
# Warmup Iteration   3: 1537248.131 ops/s
# Warmup Iteration   4: 1735893.994 ops/s
# Warmup Iteration   5: 1744094.965 ops/s
# Warmup Iteration   6: 1746310.772 ops/s
# Warmup Iteration   7: 1734439.461 ops/s
# Warmup Iteration   8: 1697647.532 ops/s
# Warmup Iteration   9: 1764951.673 ops/s
# Warmup Iteration  10: 1688743.997 ops/s
# Warmup Iteration  11: 1700648.964 ops/s
# Warmup Iteration  12: 1784932.711 ops/s
# Warmup Iteration  13: 1721809.760 ops/s
# Warmup Iteration  14: 1756005.241 ops/s
# Warmup Iteration  15: 1774708.852 ops/s
# Warmup Iteration  16: 1701843.503 ops/s
# Warmup Iteration  17: 1787934.287 ops/s
# Warmup Iteration  18: 1683565.693 ops/s
# Warmup Iteration  19: 1674095.228 ops/s
# Warmup Iteration  20: 1715698.638 ops/s
# Warmup Iteration  21: 1717552.321 ops/s
# Warmup Iteration  22: 1656290.054 ops/s
# Warmup Iteration  23: 1779602.181 ops/s
# Warmup Iteration  24: 1699967.295 ops/s
# Warmup Iteration  25: 1674721.794 ops/s
# Warmup Iteration  26: 1757156.010 ops/s
# Warmup Iteration  27: 1718311.599 ops/s
# Warmup Iteration  28: 1707509.884 ops/s
# Warmup Iteration  29: 1697160.919 ops/s
# Warmup Iteration  30: 1728663.695 ops/s
Iteration   1: 1777416.553 ops/s
Iteration   2: 1713175.803 ops/s
Iteration   3: 1406289.813 ops/s
Iteration   4: 1765147.604 ops/s
Iteration   5: 1696411.411 ops/s
Iteration   6: 1787456.928 ops/s
Iteration   7: 1655589.951 ops/s
Iteration   8: 1765357.699 ops/s
Iteration   9: 1725476.300 ops/s
Iteration  10: 1711681.401 ops/s
Iteration  11: 1795175.208 ops/s
Iteration  12: 1703228.791 ops/s
Iteration  13: 1788604.691 ops/s
Iteration  14: 1723325.395 ops/s
Iteration  15: 1728364.112 ops/s
Iteration  16: 1806475.926 ops/s
Iteration  17: 1688405.708 ops/s
Iteration  18: 1795014.223 ops/s
Iteration  19: 1686219.491 ops/s
Iteration  20: 1744307.163 ops/s
Iteration  21: 1744713.645 ops/s
Iteration  22: 1691906.297 ops/s
Iteration  23: 1802299.155 ops/s
Iteration  24: 1690719.244 ops/s
Iteration  25: 1746998.777 ops/s
Iteration  26: 1789387.022 ops/s
Iteration  27: 1674687.356 ops/s
Iteration  28: 1736212.540 ops/s
Iteration  29: 1746056.443 ops/s
Iteration  30: 1749659.806 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSize":
  1727858.815 ±(99.9%) 49371.058 ops/s [Average]
  (min, avg, max) = (1406289.813, 1727858.815, 1806475.926), stdev = 73896.280
  CI (99.9%): [1678487.757, 1777229.873] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSize  thrpt   30  1727858.815 ± 49371.058  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100968.950 ops/s
# Warmup Iteration   2: 489752.480 ops/s
# Warmup Iteration   3: 537418.919 ops/s
# Warmup Iteration   4: 539062.186 ops/s
# Warmup Iteration   5: 500622.955 ops/s
# Warmup Iteration   6: 582200.635 ops/s
# Warmup Iteration   7: 609088.986 ops/s
# Warmup Iteration   8: 569849.217 ops/s
# Warmup Iteration   9: 576903.988 ops/s
# Warmup Iteration  10: 610100.205 ops/s
# Warmup Iteration  11: 572823.176 ops/s
# Warmup Iteration  12: 593757.608 ops/s
# Warmup Iteration  13: 574964.487 ops/s
# Warmup Iteration  14: 602316.817 ops/s
# Warmup Iteration  15: 584745.762 ops/s
# Warmup Iteration  16: 591294.629 ops/s
# Warmup Iteration  17: 622515.311 ops/s
# Warmup Iteration  18: 609772.562 ops/s
# Warmup Iteration  19: 628883.993 ops/s
# Warmup Iteration  20: 593800.347 ops/s
# Warmup Iteration  21: 637440.714 ops/s
# Warmup Iteration  22: 611636.574 ops/s
# Warmup Iteration  23: 606633.923 ops/s
# Warmup Iteration  24: 621851.764 ops/s
# Warmup Iteration  25: 615889.094 ops/s
# Warmup Iteration  26: 616117.598 ops/s
# Warmup Iteration  27: 642878.305 ops/s
# Warmup Iteration  28: 587215.703 ops/s
# Warmup Iteration  29: 623214.492 ops/s
# Warmup Iteration  30: 619431.888 ops/s
Iteration   1: 597141.398 ops/s
Iteration   2: 637840.289 ops/s
Iteration   3: 632309.780 ops/s
Iteration   4: 601360.122 ops/s
Iteration   5: 637140.731 ops/s
Iteration   6: 613327.402 ops/s
Iteration   7: 601951.412 ops/s
Iteration   8: 621592.229 ops/s
Iteration   9: 635831.366 ops/s
Iteration  10: 607854.053 ops/s
Iteration  11: 597088.890 ops/s
Iteration  12: 636168.097 ops/s
Iteration  13: 611597.782 ops/s
Iteration  14: 607689.766 ops/s
Iteration  15: 604932.232 ops/s
Iteration  16: 624602.863 ops/s
Iteration  17: 615918.735 ops/s
Iteration  18: 635198.366 ops/s
Iteration  19: 608767.312 ops/s
Iteration  20: 613608.185 ops/s
Iteration  21: 647576.610 ops/s
Iteration  22: 600683.806 ops/s
Iteration  23: 643762.038 ops/s
Iteration  24: 621906.263 ops/s
Iteration  25: 604367.895 ops/s
Iteration  26: 622932.930 ops/s
Iteration  27: 613328.994 ops/s
Iteration  28: 631973.898 ops/s
Iteration  29: 594732.843 ops/s
Iteration  30: 621225.685 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext":
  618147.066 ±(99.9%) 10197.190 ops/s [Average]
  (min, avg, max) = (594732.843, 618147.066, 647576.610), stdev = 15262.675
  CI (99.9%): [607949.875, 628344.256] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext  thrpt   30  618147.066 ± 10197.190  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182953.456 ops/s
# Warmup Iteration   2: 781718.180 ops/s
# Warmup Iteration   3: 1525970.398 ops/s
# Warmup Iteration   4: 1683891.707 ops/s
# Warmup Iteration   5: 1740937.450 ops/s
# Warmup Iteration   6: 1679697.397 ops/s
# Warmup Iteration   7: 1751534.012 ops/s
# Warmup Iteration   8: 1744243.502 ops/s
# Warmup Iteration   9: 1765756.792 ops/s
# Warmup Iteration  10: 1708565.452 ops/s
# Warmup Iteration  11: 1701473.307 ops/s
# Warmup Iteration  12: 1772126.628 ops/s
# Warmup Iteration  13: 1729080.752 ops/s
# Warmup Iteration  14: 1746137.907 ops/s
# Warmup Iteration  15: 1724802.479 ops/s
# Warmup Iteration  16: 1765362.777 ops/s
# Warmup Iteration  17: 1818229.997 ops/s
# Warmup Iteration  18: 1678958.104 ops/s
# Warmup Iteration  19: 1751047.492 ops/s
# Warmup Iteration  20: 1789358.277 ops/s
# Warmup Iteration  21: 1824512.041 ops/s
# Warmup Iteration  22: 1700794.698 ops/s
# Warmup Iteration  23: 1781472.624 ops/s
# Warmup Iteration  24: 1664389.472 ops/s
# Warmup Iteration  25: 1780394.870 ops/s
# Warmup Iteration  26: 1724012.472 ops/s
# Warmup Iteration  27: 1716900.353 ops/s
# Warmup Iteration  28: 1458492.746 ops/s
# Warmup Iteration  29: 1757895.030 ops/s
# Warmup Iteration  30: 1806221.425 ops/s
Iteration   1: 1680228.256 ops/s
Iteration   2: 1768835.684 ops/s
Iteration   3: 1703804.947 ops/s
Iteration   4: 1733148.547 ops/s
Iteration   5: 1760021.368 ops/s
Iteration   6: 1628415.900 ops/s
Iteration   7: 1770571.767 ops/s
Iteration   8: 1709302.516 ops/s
Iteration   9: 1755068.087 ops/s
Iteration  10: 1724859.765 ops/s
Iteration  11: 1737307.925 ops/s
Iteration  12: 1740135.970 ops/s
Iteration  13: 1740882.024 ops/s
Iteration  14: 1764803.449 ops/s
Iteration  15: 1705347.225 ops/s
Iteration  16: 1812452.684 ops/s
Iteration  17: 1711896.501 ops/s
Iteration  18: 1703990.990 ops/s
Iteration  19: 1781557.379 ops/s
Iteration  20: 1705749.295 ops/s
Iteration  21: 1780022.242 ops/s
Iteration  22: 1703331.791 ops/s
Iteration  23: 1756542.879 ops/s
Iteration  24: 1728946.115 ops/s
Iteration  25: 1711677.621 ops/s
Iteration  26: 1762894.359 ops/s
Iteration  27: 1674317.356 ops/s
Iteration  28: 1789171.293 ops/s
Iteration  29: 1668043.161 ops/s
Iteration  30: 1773046.418 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSkip":
  1732879.117 ±(99.9%) 27506.601 ops/s [Average]
  (min, avg, max) = (1628415.900, 1732879.117, 1812452.684), stdev = 41170.589
  CI (99.9%): [1705372.516, 1760385.718] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentSkip  thrpt   30  1732879.117 ± 27506.601  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_sourceThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_sourceThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 91328.878 ops/s
# Warmup Iteration   2: 327514.805 ops/s
# Warmup Iteration   3: 488198.630 ops/s
# Warmup Iteration   4: 505675.489 ops/s
# Warmup Iteration   5: 449910.937 ops/s
# Warmup Iteration   6: 569595.767 ops/s
# Warmup Iteration   7: 535638.497 ops/s
# Warmup Iteration   8: 584986.857 ops/s
# Warmup Iteration   9: 539776.100 ops/s
# Warmup Iteration  10: 564568.073 ops/s
# Warmup Iteration  11: 567318.424 ops/s
# Warmup Iteration  12: 556651.384 ops/s
# Warmup Iteration  13: 565912.568 ops/s
# Warmup Iteration  14: 556823.582 ops/s
# Warmup Iteration  15: 558608.560 ops/s
# Warmup Iteration  16: 573420.080 ops/s
# Warmup Iteration  17: 567052.959 ops/s
# Warmup Iteration  18: 596009.900 ops/s
# Warmup Iteration  19: 569045.969 ops/s
# Warmup Iteration  20: 575885.683 ops/s
# Warmup Iteration  21: 610642.080 ops/s
# Warmup Iteration  22: 571713.642 ops/s
# Warmup Iteration  23: 591783.002 ops/s
# Warmup Iteration  24: 585335.283 ops/s
# Warmup Iteration  25: 603690.486 ops/s
# Warmup Iteration  26: 568592.817 ops/s
# Warmup Iteration  27: 597948.367 ops/s
# Warmup Iteration  28: 571353.307 ops/s
# Warmup Iteration  29: 596447.022 ops/s
# Warmup Iteration  30: 568719.525 ops/s
Iteration   1: 581071.132 ops/s
Iteration   2: 580260.200 ops/s
Iteration   3: 571980.147 ops/s
Iteration   4: 598827.849 ops/s
Iteration   5: 568955.237 ops/s
Iteration   6: 578096.941 ops/s
Iteration   7: 580919.093 ops/s
Iteration   8: 580085.398 ops/s
Iteration   9: 603475.203 ops/s
Iteration  10: 568742.852 ops/s
Iteration  11: 574784.664 ops/s
Iteration  12: 611620.334 ops/s
Iteration  13: 597914.274 ops/s
Iteration  14: 571085.502 ops/s
Iteration  15: 588024.619 ops/s
Iteration  16: 581979.343 ops/s
Iteration  17: 592865.719 ops/s
Iteration  18: 577612.483 ops/s
Iteration  19: 584603.447 ops/s
Iteration  20: 584618.847 ops/s
Iteration  21: 568720.415 ops/s
Iteration  22: 602780.078 ops/s
Iteration  23: 574475.167 ops/s
Iteration  24: 599482.594 ops/s
Iteration  25: 563978.105 ops/s
Iteration  26: 591997.331 ops/s
Iteration  27: 576131.429 ops/s
Iteration  28: 576741.542 ops/s
Iteration  29: 605795.413 ops/s
Iteration  30: 567299.181 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_sourceThrows":
  583497.485 ±(99.9%) 8663.294 ops/s [Average]
  (min, avg, max) = (563978.105, 583497.485, 611620.334), stdev = 12966.812
  CI (99.9%): [574834.190, 592160.779] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_sourceThrows  thrpt   30  583497.485 ± 8663.294  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_otherThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_otherThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83877.688 ops/s
# Warmup Iteration   2: 317632.367 ops/s
# Warmup Iteration   3: 491451.664 ops/s
# Warmup Iteration   4: 502183.906 ops/s
# Warmup Iteration   5: 534878.770 ops/s
# Warmup Iteration   6: 498596.774 ops/s
# Warmup Iteration   7: 547184.846 ops/s
# Warmup Iteration   8: 558939.590 ops/s
# Warmup Iteration   9: 553526.767 ops/s
# Warmup Iteration  10: 565150.908 ops/s
# Warmup Iteration  11: 542906.422 ops/s
# Warmup Iteration  12: 560408.882 ops/s
# Warmup Iteration  13: 582697.432 ops/s
# Warmup Iteration  14: 559106.121 ops/s
# Warmup Iteration  15: 559421.818 ops/s
# Warmup Iteration  16: 543689.986 ops/s
# Warmup Iteration  17: 583746.643 ops/s
# Warmup Iteration  18: 572625.248 ops/s
# Warmup Iteration  19: 571940.881 ops/s
# Warmup Iteration  20: 589836.042 ops/s
# Warmup Iteration  21: 564186.694 ops/s
# Warmup Iteration  22: 576994.786 ops/s
# Warmup Iteration  23: 435996.870 ops/s
# Warmup Iteration  24: 558296.264 ops/s
# Warmup Iteration  25: 585368.929 ops/s
# Warmup Iteration  26: 556722.556 ops/s
# Warmup Iteration  27: 572035.727 ops/s
# Warmup Iteration  28: 598508.614 ops/s
# Warmup Iteration  29: 560982.869 ops/s
# Warmup Iteration  30: 614139.579 ops/s
Iteration   1: 585120.778 ops/s
Iteration   2: 549305.530 ops/s
Iteration   3: 616000.595 ops/s
Iteration   4: 564463.430 ops/s
Iteration   5: 583702.342 ops/s
Iteration   6: 563924.842 ops/s
Iteration   7: 613666.825 ops/s
Iteration   8: 568359.378 ops/s
Iteration   9: 592949.506 ops/s
Iteration  10: 586118.799 ops/s
Iteration  11: 573817.411 ops/s
Iteration  12: 603149.460 ops/s
Iteration  13: 560098.595 ops/s
Iteration  14: 575776.469 ops/s
Iteration  15: 573535.907 ops/s
Iteration  16: 581252.782 ops/s
Iteration  17: 586365.405 ops/s
Iteration  18: 564955.611 ops/s
Iteration  19: 583281.558 ops/s
Iteration  20: 568589.921 ops/s
Iteration  21: 576753.219 ops/s
Iteration  22: 572121.589 ops/s
Iteration  23: 587109.072 ops/s
Iteration  24: 595372.234 ops/s
Iteration  25: 570938.280 ops/s
Iteration  26: 592167.628 ops/s
Iteration  27: 585736.821 ops/s
Iteration  28: 574221.760 ops/s
Iteration  29: 588490.606 ops/s
Iteration  30: 562626.434 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_otherThrows":
  579999.093 ±(99.9%) 10171.135 ops/s [Average]
  (min, avg, max) = (549305.530, 579999.093, 616000.595), stdev = 15223.677
  CI (99.9%): [569827.958, 590170.227] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_otherThrows  thrpt   30  579999.093 ± 10171.135  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 47461.917 ops/s
# Warmup Iteration   2: 420078.328 ops/s
# Warmup Iteration   3: 478326.953 ops/s
# Warmup Iteration   4: 480965.119 ops/s
# Warmup Iteration   5: 499712.093 ops/s
# Warmup Iteration   6: 495871.214 ops/s
# Warmup Iteration   7: 500486.395 ops/s
# Warmup Iteration   8: 480858.874 ops/s
# Warmup Iteration   9: 475303.662 ops/s
# Warmup Iteration  10: 517639.532 ops/s
# Warmup Iteration  11: 490054.734 ops/s
# Warmup Iteration  12: 507718.678 ops/s
# Warmup Iteration  13: 501387.895 ops/s
# Warmup Iteration  14: 503685.235 ops/s
# Warmup Iteration  15: 523538.179 ops/s
# Warmup Iteration  16: 485971.768 ops/s
# Warmup Iteration  17: 531378.244 ops/s
# Warmup Iteration  18: 514262.855 ops/s
# Warmup Iteration  19: 529482.661 ops/s
# Warmup Iteration  20: 536421.021 ops/s
# Warmup Iteration  21: 533226.342 ops/s
# Warmup Iteration  22: 509128.098 ops/s
# Warmup Iteration  23: 516188.110 ops/s
# Warmup Iteration  24: 513444.645 ops/s
# Warmup Iteration  25: 538009.903 ops/s
# Warmup Iteration  26: 505863.200 ops/s
# Warmup Iteration  27: 523053.335 ops/s
# Warmup Iteration  28: 510539.266 ops/s
# Warmup Iteration  29: 544136.411 ops/s
# Warmup Iteration  30: 518407.441 ops/s
Iteration   1: 528420.336 ops/s
Iteration   2: 509311.687 ops/s
Iteration   3: 538363.911 ops/s
Iteration   4: 522332.581 ops/s
Iteration   5: 527574.644 ops/s
Iteration   6: 540023.506 ops/s
Iteration   7: 528035.171 ops/s
Iteration   8: 534625.642 ops/s
Iteration   9: 516297.899 ops/s
Iteration  10: 528123.131 ops/s
Iteration  11: 525229.542 ops/s
Iteration  12: 521428.227 ops/s
Iteration  13: 551278.382 ops/s
Iteration  14: 528936.209 ops/s
Iteration  15: 514004.983 ops/s
Iteration  16: 530120.324 ops/s
Iteration  17: 514313.288 ops/s
Iteration  18: 525407.551 ops/s
Iteration  19: 555732.737 ops/s
Iteration  20: 498128.627 ops/s
Iteration  21: 551739.191 ops/s
Iteration  22: 520521.369 ops/s
Iteration  23: 557946.410 ops/s
Iteration  24: 512687.206 ops/s
Iteration  25: 535285.769 ops/s
Iteration  26: 515300.669 ops/s
Iteration  27: 529650.989 ops/s
Iteration  28: 526300.006 ops/s
Iteration  29: 523625.225 ops/s
Iteration  30: 538012.432 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalError":
  528291.921 ±(99.9%) 9243.951 ops/s [Average]
  (min, avg, max) = (498128.627, 528291.921, 557946.410), stdev = 13835.911
  CI (99.9%): [519047.971, 537535.872] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableFromSourceTest._Benchmark.benchmark_normalError  thrpt   30  528291.921 ± 9243.951  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 193985.748 ops/s
# Warmup Iteration   2: 934767.656 ops/s
# Warmup Iteration   3: 1570547.978 ops/s
# Warmup Iteration   4: 1753598.866 ops/s
# Warmup Iteration   5: 1641778.659 ops/s
# Warmup Iteration   6: 1554344.730 ops/s
# Warmup Iteration   7: 1609578.272 ops/s
# Warmup Iteration   8: 1700546.097 ops/s
# Warmup Iteration   9: 1773315.331 ops/s
# Warmup Iteration  10: 1675269.685 ops/s
# Warmup Iteration  11: 1708704.969 ops/s
# Warmup Iteration  12: 1691976.669 ops/s
# Warmup Iteration  13: 1743461.096 ops/s
# Warmup Iteration  14: 1671043.030 ops/s
# Warmup Iteration  15: 1736960.489 ops/s
# Warmup Iteration  16: 1712126.250 ops/s
# Warmup Iteration  17: 1710584.330 ops/s
# Warmup Iteration  18: 1449059.242 ops/s
# Warmup Iteration  19: 1693253.107 ops/s
# Warmup Iteration  20: 1773121.934 ops/s
# Warmup Iteration  21: 1811638.926 ops/s
# Warmup Iteration  22: 1682188.225 ops/s
# Warmup Iteration  23: 1752570.694 ops/s
# Warmup Iteration  24: 1750030.913 ops/s
# Warmup Iteration  25: 1672567.276 ops/s
# Warmup Iteration  26: 1741040.001 ops/s
# Warmup Iteration  27: 1689580.135 ops/s
# Warmup Iteration  28: 1723079.766 ops/s
# Warmup Iteration  29: 1724057.681 ops/s
# Warmup Iteration  30: 1746223.517 ops/s
Iteration   1: 1778444.119 ops/s
Iteration   2: 1715273.987 ops/s
Iteration   3: 1798642.186 ops/s
Iteration   4: 1736492.488 ops/s
Iteration   5: 1700221.027 ops/s
Iteration   6: 1738827.078 ops/s
Iteration   7: 1791628.461 ops/s
Iteration   8: 1670850.882 ops/s
Iteration   9: 1767964.025 ops/s
Iteration  10: 1745585.080 ops/s
Iteration  11: 1724619.928 ops/s
Iteration  12: 1787304.767 ops/s
Iteration  13: 1722212.163 ops/s
Iteration  14: 1723715.473 ops/s
Iteration  15: 1749317.012 ops/s
Iteration  16: 1725444.854 ops/s
Iteration  17: 1719672.195 ops/s
Iteration  18: 1774970.255 ops/s
Iteration  19: 1685076.442 ops/s
Iteration  20: 1699041.917 ops/s
Iteration  21: 1824444.792 ops/s
Iteration  22: 1697753.223 ops/s
Iteration  23: 1784159.513 ops/s
Iteration  24: 1725525.160 ops/s
Iteration  25: 1708168.698 ops/s
Iteration  26: 1779226.382 ops/s
Iteration  27: 1719657.866 ops/s
Iteration  28: 1795852.019 ops/s
Iteration  29: 1723772.298 ops/s
Iteration  30: 1769898.421 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalLatest":
  1742792.090 ±(99.9%) 25772.567 ops/s [Average]
  (min, avg, max) = (1670850.882, 1742792.090, 1824444.792), stdev = 38575.168
  CI (99.9%): [1717019.523, 1768564.657] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_normalLatest  thrpt   30  1742792.090 ± 25772.567  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_middleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_middleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51525.694 ops/s
# Warmup Iteration   2: 326613.746 ops/s
# Warmup Iteration   3: 466536.065 ops/s
# Warmup Iteration   4: 456057.953 ops/s
# Warmup Iteration   5: 454790.694 ops/s
# Warmup Iteration   6: 528922.330 ops/s
# Warmup Iteration   7: 504552.185 ops/s
# Warmup Iteration   8: 519846.929 ops/s
# Warmup Iteration   9: 521967.043 ops/s
# Warmup Iteration  10: 504713.672 ops/s
# Warmup Iteration  11: 508840.782 ops/s
# Warmup Iteration  12: 533421.282 ops/s
# Warmup Iteration  13: 497882.621 ops/s
# Warmup Iteration  14: 511749.549 ops/s
# Warmup Iteration  15: 503604.102 ops/s
# Warmup Iteration  16: 516853.026 ops/s
# Warmup Iteration  17: 549651.535 ops/s
# Warmup Iteration  18: 522724.612 ops/s
# Warmup Iteration  19: 531646.277 ops/s
# Warmup Iteration  20: 548236.361 ops/s
# Warmup Iteration  21: 529550.584 ops/s
# Warmup Iteration  22: 550269.342 ops/s
# Warmup Iteration  23: 525817.156 ops/s
# Warmup Iteration  24: 526883.486 ops/s
# Warmup Iteration  25: 546689.719 ops/s
# Warmup Iteration  26: 524302.589 ops/s
# Warmup Iteration  27: 533881.323 ops/s
# Warmup Iteration  28: 547402.131 ops/s
# Warmup Iteration  29: 528818.943 ops/s
# Warmup Iteration  30: 569577.391 ops/s
Iteration   1: 521533.146 ops/s
Iteration   2: 537451.088 ops/s
Iteration   3: 553354.492 ops/s
Iteration   4: 528052.365 ops/s
Iteration   5: 545894.862 ops/s
Iteration   6: 536654.549 ops/s
Iteration   7: 534951.677 ops/s
Iteration   8: 556040.170 ops/s
Iteration   9: 527347.028 ops/s
Iteration  10: 534425.151 ops/s
Iteration  11: 530394.902 ops/s
Iteration  12: 563363.486 ops/s
Iteration  13: 561174.223 ops/s
Iteration  14: 539085.630 ops/s
Iteration  15: 521908.076 ops/s
Iteration  16: 551426.120 ops/s
Iteration  17: 532541.645 ops/s
Iteration  18: 529415.988 ops/s
Iteration  19: 552045.102 ops/s
Iteration  20: 516840.138 ops/s
Iteration  21: 551097.687 ops/s
Iteration  22: 518887.673 ops/s
Iteration  23: 535654.104 ops/s
Iteration  24: 531147.773 ops/s
Iteration  25: 533110.175 ops/s
Iteration  26: 552019.487 ops/s
Iteration  27: 529236.634 ops/s
Iteration  28: 558922.376 ops/s
Iteration  29: 521694.560 ops/s
Iteration  30: 536638.485 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_middleError":
  538076.960 ±(99.9%) 8903.552 ops/s [Average]
  (min, avg, max) = (516840.138, 538076.960, 563363.486), stdev = 13326.418
  CI (99.9%): [529173.408, 546980.511] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
MaybeZipIterableTest._Benchmark.benchmark_middleError  thrpt   30  538076.960 ± 8903.552  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 52424.630 ops/s
# Warmup Iteration   2: 311916.471 ops/s
# Warmup Iteration   3: 454008.331 ops/s
# Warmup Iteration   4: 515756.417 ops/s
# Warmup Iteration   5: 518199.332 ops/s
# Warmup Iteration   6: 508735.754 ops/s
# Warmup Iteration   7: 522869.936 ops/s
# Warmup Iteration   8: 497534.753 ops/s
# Warmup Iteration   9: 518609.973 ops/s
# Warmup Iteration  10: 513857.191 ops/s
# Warmup Iteration  11: 501380.739 ops/s
# Warmup Iteration  12: 427003.873 ops/s
# Warmup Iteration  13: 523711.266 ops/s
# Warmup Iteration  14: 502707.407 ops/s
# Warmup Iteration  15: 518747.850 ops/s
# Warmup Iteration  16: 528596.354 ops/s
# Warmup Iteration  17: 541070.810 ops/s
# Warmup Iteration  18: 564272.523 ops/s
# Warmup Iteration  19: 536236.454 ops/s
# Warmup Iteration  20: 559687.917 ops/s
# Warmup Iteration  21: 545739.924 ops/s
# Warmup Iteration  22: 546927.152 ops/s
# Warmup Iteration  23: 551344.750 ops/s
# Warmup Iteration  24: 520158.096 ops/s
# Warmup Iteration  25: 513474.469 ops/s
# Warmup Iteration  26: 569328.363 ops/s
# Warmup Iteration  27: 530007.436 ops/s
# Warmup Iteration  28: 570418.063 ops/s
# Warmup Iteration  29: 566077.828 ops/s
# Warmup Iteration  30: 527553.976 ops/s
Iteration   1: 559020.629 ops/s
Iteration   2: 539114.270 ops/s
Iteration   3: 552688.626 ops/s
Iteration   4: 561739.124 ops/s
Iteration   5: 546945.763 ops/s
Iteration   6: 541637.367 ops/s
Iteration   7: 546810.456 ops/s
Iteration   8: 541936.199 ops/s
Iteration   9: 540581.345 ops/s
Iteration  10: 537600.448 ops/s
Iteration  11: 554746.590 ops/s
Iteration  12: 538133.013 ops/s
Iteration  13: 564549.808 ops/s
Iteration  14: 555956.257 ops/s
Iteration  15: 558332.839 ops/s
Iteration  16: 554549.646 ops/s
Iteration  17: 573765.947 ops/s
Iteration  18: 563011.590 ops/s
Iteration  19: 530472.062 ops/s
Iteration  20: 564982.595 ops/s
Iteration  21: 533033.470 ops/s
Iteration  22: 562684.450 ops/s
Iteration  23: 541550.393 ops/s
Iteration  24: 533517.582 ops/s
Iteration  25: 549793.318 ops/s
Iteration  26: 520805.161 ops/s
Iteration  27: 561501.468 ops/s
Iteration  28: 546910.456 ops/s
Iteration  29: 558582.725 ops/s
Iteration  30: 537502.446 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorLatest":
  549081.868 ±(99.9%) 8389.824 ops/s [Average]
  (min, avg, max) = (520805.161, 549081.868, 573765.947), stdev = 12557.495
  CI (99.9%): [540692.044, 557471.692] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableFromSourceTest._Benchmark.benchmark_errorLatest  thrpt   30  549081.868 ± 8389.824  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 131563.692 ops/s
# Warmup Iteration   2: 449270.350 ops/s
# Warmup Iteration   3: 884178.297 ops/s
# Warmup Iteration   4: 1276254.347 ops/s
# Warmup Iteration   5: 1651734.770 ops/s
# Warmup Iteration   6: 1629133.314 ops/s
# Warmup Iteration   7: 1712938.169 ops/s
# Warmup Iteration   8: 1644551.757 ops/s
# Warmup Iteration   9: 1674230.107 ops/s
# Warmup Iteration  10: 1713869.130 ops/s
# Warmup Iteration  11: 1685222.903 ops/s
# Warmup Iteration  12: 1695903.887 ops/s
# Warmup Iteration  13: 1676421.345 ops/s
# Warmup Iteration  14: 1693966.141 ops/s
# Warmup Iteration  15: 1624273.557 ops/s
# Warmup Iteration  16: 1700956.003 ops/s
# Warmup Iteration  17: 1688253.074 ops/s
# Warmup Iteration  18: 1694241.673 ops/s
# Warmup Iteration  19: 1697566.781 ops/s
# Warmup Iteration  20: 1653176.864 ops/s
# Warmup Iteration  21: 1725262.375 ops/s
# Warmup Iteration  22: 1678986.904 ops/s
# Warmup Iteration  23: 1641607.697 ops/s
# Warmup Iteration  24: 1727735.367 ops/s
# Warmup Iteration  25: 1621125.953 ops/s
# Warmup Iteration  26: 1729795.026 ops/s
# Warmup Iteration  27: 1660890.524 ops/s
# Warmup Iteration  28: 1676908.536 ops/s
# Warmup Iteration  29: 1750478.109 ops/s
# Warmup Iteration  30: 1630367.528 ops/s
Iteration   1: 1760944.192 ops/s
Iteration   2: 1633258.067 ops/s
Iteration   3: 1741608.932 ops/s
Iteration   4: 1662032.575 ops/s
Iteration   5: 1656871.644 ops/s
Iteration   6: 1748904.071 ops/s
Iteration   7: 1646469.012 ops/s
Iteration   8: 1737873.852 ops/s
Iteration   9: 1671880.442 ops/s
Iteration  10: 1730562.877 ops/s
Iteration  11: 1706230.991 ops/s
Iteration  12: 1642199.096 ops/s
Iteration  13: 1764849.706 ops/s
Iteration  14: 1659633.595 ops/s
Iteration  15: 1709500.650 ops/s
Iteration  16: 1664461.683 ops/s
Iteration  17: 1691032.186 ops/s
Iteration  18: 1657902.960 ops/s
Iteration  19: 1700748.265 ops/s
Iteration  20: 1761512.210 ops/s
Iteration  21: 1627950.519 ops/s
Iteration  22: 1734837.852 ops/s
Iteration  23: 1728726.040 ops/s
Iteration  24: 1614715.977 ops/s
Iteration  25: 1749501.721 ops/s
Iteration  26: 1665856.522 ops/s
Iteration  27: 1673893.538 ops/s
Iteration  28: 1712196.157 ops/s
Iteration  29: 1663954.789 ops/s
Iteration  30: 1697184.930 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancel":
  1693909.835 ±(99.9%) 29611.676 ops/s [Average]
  (min, avg, max) = (1614715.977, 1693909.835, 1764849.706), stdev = 44321.365
  CI (99.9%): [1664298.159, 1723521.510] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancel  thrpt   30  1693909.835 ± 29611.676  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeNoNeedForReset$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeNoNeedForReset

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81366.188 ops/s
# Warmup Iteration   2: 206949.832 ops/s
# Warmup Iteration   3: 677718.879 ops/s
# Warmup Iteration   4: 633622.492 ops/s
# Warmup Iteration   5: 684184.764 ops/s
# Warmup Iteration   6: 762301.234 ops/s
# Warmup Iteration   7: 516544.232 ops/s
# Warmup Iteration   8: 771121.981 ops/s
# Warmup Iteration   9: 775316.089 ops/s
# Warmup Iteration  10: 742818.633 ops/s
# Warmup Iteration  11: 738812.345 ops/s
# Warmup Iteration  12: 767801.231 ops/s
# Warmup Iteration  13: 725955.904 ops/s
# Warmup Iteration  14: 753378.706 ops/s
# Warmup Iteration  15: 747402.589 ops/s
# Warmup Iteration  16: 755479.974 ops/s
# Warmup Iteration  17: 760231.894 ops/s
# Warmup Iteration  18: 739746.075 ops/s
# Warmup Iteration  19: 765146.542 ops/s
# Warmup Iteration  20: 751765.407 ops/s
# Warmup Iteration  21: 790189.780 ops/s
# Warmup Iteration  22: 724464.545 ops/s
# Warmup Iteration  23: 753003.564 ops/s
# Warmup Iteration  24: 783136.257 ops/s
# Warmup Iteration  25: 740893.048 ops/s
# Warmup Iteration  26: 749645.772 ops/s
# Warmup Iteration  27: 762881.097 ops/s
# Warmup Iteration  28: 767516.230 ops/s
# Warmup Iteration  29: 760290.362 ops/s
# Warmup Iteration  30: 751414.682 ops/s
Iteration   1: 778174.813 ops/s
Iteration   2: 771025.239 ops/s
Iteration   3: 745793.567 ops/s
Iteration   4: 769229.451 ops/s
Iteration   5: 748017.144 ops/s
Iteration   6: 764280.044 ops/s
Iteration   7: 741252.693 ops/s
Iteration   8: 745695.953 ops/s
Iteration   9: 780828.471 ops/s
Iteration  10: 757155.681 ops/s
Iteration  11: 791676.926 ops/s
Iteration  12: 756097.616 ops/s
Iteration  13: 762346.126 ops/s
Iteration  14: 734280.431 ops/s
Iteration  15: 760733.058 ops/s
Iteration  16: 743309.667 ops/s
Iteration  17: 774219.916 ops/s
Iteration  18: 729239.265 ops/s
Iteration  19: 763227.344 ops/s
Iteration  20: 753028.309 ops/s
Iteration  21: 737909.941 ops/s
Iteration  22: 776106.397 ops/s
Iteration  23: 724464.415 ops/s
Iteration  24: 778865.507 ops/s
Iteration  25: 736588.513 ops/s
Iteration  26: 753146.870 ops/s
Iteration  27: 779545.085 ops/s
Iteration  28: 744275.476 ops/s
Iteration  29: 765819.807 ops/s
Iteration  30: 747109.543 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeNoNeedForReset":
  757114.776 ±(99.9%) 11513.174 ops/s [Average]
  (min, avg, max) = (724464.415, 757114.776, 791676.926), stdev = 17232.378
  CI (99.9%): [745601.602, 768627.949] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_disposeNoNeedForReset  thrpt   30  757114.776 ± 11513.174  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_deferredRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_deferredRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 144033.614 ops/s
# Warmup Iteration   2: 688045.140 ops/s
# Warmup Iteration   3: 1165710.330 ops/s
# Warmup Iteration   4: 1313393.984 ops/s
# Warmup Iteration   5: 1339503.402 ops/s
# Warmup Iteration   6: 1287287.760 ops/s
# Warmup Iteration   7: 1329264.055 ops/s
# Warmup Iteration   8: 1320969.957 ops/s
# Warmup Iteration   9: 1304463.591 ops/s
# Warmup Iteration  10: 1312484.257 ops/s
# Warmup Iteration  11: 1208770.576 ops/s
# Warmup Iteration  12: 1293430.602 ops/s
# Warmup Iteration  13: 1308647.613 ops/s
# Warmup Iteration  14: 1391858.873 ops/s
# Warmup Iteration  15: 1302826.583 ops/s
# Warmup Iteration  16: 1366885.068 ops/s
# Warmup Iteration  17: 1263894.367 ops/s
# Warmup Iteration  18: 1333425.083 ops/s
# Warmup Iteration  19: 1381145.849 ops/s
# Warmup Iteration  20: 1324963.954 ops/s
# Warmup Iteration  21: 1352582.273 ops/s
# Warmup Iteration  22: 1303816.519 ops/s
# Warmup Iteration  23: 1352651.640 ops/s
# Warmup Iteration  24: 1382653.198 ops/s
# Warmup Iteration  25: 1295867.995 ops/s
# Warmup Iteration  26: 1373690.200 ops/s
# Warmup Iteration  27: 1301414.499 ops/s
# Warmup Iteration  28: 1346269.220 ops/s
# Warmup Iteration  29: 1336558.964 ops/s
# Warmup Iteration  30: 1357992.050 ops/s
Iteration   1: 1340515.427 ops/s
Iteration   2: 1316564.385 ops/s
Iteration   3: 1377873.409 ops/s
Iteration   4: 1362091.808 ops/s
Iteration   5: 1328028.824 ops/s
Iteration   6: 1339143.603 ops/s
Iteration   7: 1294878.110 ops/s
Iteration   8: 1335127.148 ops/s
Iteration   9: 1283517.652 ops/s
Iteration  10: 1309977.659 ops/s
Iteration  11: 1390926.224 ops/s
Iteration  12: 1284490.489 ops/s
Iteration  13: 1402585.439 ops/s
Iteration  14: 1355642.167 ops/s
Iteration  15: 1362081.489 ops/s
Iteration  16: 1281242.435 ops/s
Iteration  17: 1358917.622 ops/s
Iteration  18: 1311629.191 ops/s
Iteration  19: 1329024.953 ops/s
Iteration  20: 1369455.940 ops/s
Iteration  21: 1327868.829 ops/s
Iteration  22: 1358995.609 ops/s
Iteration  23: 1310898.431 ops/s
Iteration  24: 1352991.997 ops/s
Iteration  25: 1335934.033 ops/s
Iteration  26: 1370382.686 ops/s
Iteration  27: 1326030.823 ops/s
Iteration  28: 1331779.594 ops/s
Iteration  29: 1407475.820 ops/s
Iteration  30: 1319060.471 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_deferredRequest":
  1339171.076 ±(99.9%) 22328.856 ops/s [Average]
  (min, avg, max) = (1281242.435, 1339171.076, 1407475.820), stdev = 33420.783
  CI (99.9%): [1316842.219, 1361499.932] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_deferredRequest  thrpt   30  1339171.076 ± 22328.856  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNextCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNextCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105416.576 ops/s
# Warmup Iteration   2: 352480.045 ops/s
# Warmup Iteration   3: 437579.604 ops/s
# Warmup Iteration   4: 1282844.668 ops/s
# Warmup Iteration   5: 1425907.935 ops/s
# Warmup Iteration   6: 1619114.263 ops/s
# Warmup Iteration   7: 1651565.663 ops/s
# Warmup Iteration   8: 1632020.535 ops/s
# Warmup Iteration   9: 1687221.594 ops/s
# Warmup Iteration  10: 1677300.403 ops/s
# Warmup Iteration  11: 1661152.753 ops/s
# Warmup Iteration  12: 1604175.348 ops/s
# Warmup Iteration  13: 1641406.521 ops/s
# Warmup Iteration  14: 1665494.363 ops/s
# Warmup Iteration  15: 1574284.912 ops/s
# Warmup Iteration  16: 1637922.358 ops/s
# Warmup Iteration  17: 1597214.117 ops/s
# Warmup Iteration  18: 1621211.358 ops/s
# Warmup Iteration  19: 1639263.701 ops/s
# Warmup Iteration  20: 1589458.117 ops/s
# Warmup Iteration  21: 1715999.844 ops/s
# Warmup Iteration  22: 1651837.907 ops/s
# Warmup Iteration  23: 1588325.391 ops/s
# Warmup Iteration  24: 1596669.485 ops/s
# Warmup Iteration  25: 1636766.032 ops/s
# Warmup Iteration  26: 1602350.805 ops/s
# Warmup Iteration  27: 1603597.945 ops/s
# Warmup Iteration  28: 1684735.904 ops/s
# Warmup Iteration  29: 1663591.713 ops/s
# Warmup Iteration  30: 1597812.541 ops/s
Iteration   1: 1687313.867 ops/s
Iteration   2: 1565786.132 ops/s
Iteration   3: 1678698.612 ops/s
Iteration   4: 1608827.886 ops/s
Iteration   5: 1634384.410 ops/s
Iteration   6: 1667066.368 ops/s
Iteration   7: 1602691.597 ops/s
Iteration   8: 1663087.685 ops/s
Iteration   9: 1587551.435 ops/s
Iteration  10: 1638834.489 ops/s
Iteration  11: 1665768.895 ops/s
Iteration  12: 1554397.240 ops/s
Iteration  13: 1664644.071 ops/s
Iteration  14: 1585190.458 ops/s
Iteration  15: 1577200.041 ops/s
Iteration  16: 1635317.477 ops/s
Iteration  17: 1634849.012 ops/s
Iteration  18: 1592568.128 ops/s
Iteration  19: 1675303.121 ops/s
Iteration  20: 1583015.587 ops/s
Iteration  21: 1668352.915 ops/s
Iteration  22: 1635924.623 ops/s
Iteration  23: 1666827.768 ops/s
Iteration  24: 1631805.125 ops/s
Iteration  25: 1629255.603 ops/s
Iteration  26: 1670156.604 ops/s
Iteration  27: 1597272.137 ops/s
Iteration  28: 1683130.263 ops/s
Iteration  29: 1601805.702 ops/s
Iteration  30: 1670212.487 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNextCancel":
  1631907.991 ±(99.9%) 26236.567 ops/s [Average]
  (min, avg, max) = (1554397.240, 1631907.991, 1687313.867), stdev = 39269.662
  CI (99.9%): [1605671.424, 1658144.559] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_reentrantOnNextCancel  thrpt   30  1631907.991 ± 26236.567  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelBuffer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelBuffer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22482.744 ops/s
# Warmup Iteration   2: 65223.893 ops/s
# Warmup Iteration   3: 146831.181 ops/s
# Warmup Iteration   4: 225687.402 ops/s
# Warmup Iteration   5: 217516.655 ops/s
# Warmup Iteration   6: 214017.679 ops/s
# Warmup Iteration   7: 222608.324 ops/s
# Warmup Iteration   8: 205644.846 ops/s
# Warmup Iteration   9: 237789.769 ops/s
# Warmup Iteration  10: 221342.262 ops/s
# Warmup Iteration  11: 234644.333 ops/s
# Warmup Iteration  12: 232576.712 ops/s
# Warmup Iteration  13: 230763.443 ops/s
# Warmup Iteration  14: 237553.970 ops/s
# Warmup Iteration  15: 241514.143 ops/s
# Warmup Iteration  16: 224161.469 ops/s
# Warmup Iteration  17: 246108.103 ops/s
# Warmup Iteration  18: 240778.066 ops/s
# Warmup Iteration  19: 240097.229 ops/s
# Warmup Iteration  20: 243430.413 ops/s
# Warmup Iteration  21: 238282.464 ops/s
# Warmup Iteration  22: 242861.375 ops/s
# Warmup Iteration  23: 252425.913 ops/s
# Warmup Iteration  24: 232837.290 ops/s
# Warmup Iteration  25: 248773.811 ops/s
# Warmup Iteration  26: 236178.561 ops/s
# Warmup Iteration  27: 246905.996 ops/s
# Warmup Iteration  28: 239002.468 ops/s
# Warmup Iteration  29: 236449.071 ops/s
# Warmup Iteration  30: 239928.124 ops/s
Iteration   1: 237248.973 ops/s
Iteration   2: 239959.289 ops/s
Iteration   3: 245363.738 ops/s
Iteration   4: 235597.944 ops/s
Iteration   5: 243808.572 ops/s
Iteration   6: 242938.170 ops/s
Iteration   7: 240424.917 ops/s
Iteration   8: 235295.843 ops/s
Iteration   9: 240640.371 ops/s
Iteration  10: 240151.752 ops/s
Iteration  11: 235947.455 ops/s
Iteration  12: 249116.022 ops/s
Iteration  13: 235448.537 ops/s
Iteration  14: 233951.324 ops/s
Iteration  15: 249220.502 ops/s
Iteration  16: 255269.569 ops/s
Iteration  17: 227845.356 ops/s
Iteration  18: 253296.025 ops/s
Iteration  19: 233604.693 ops/s
Iteration  20: 244627.160 ops/s
Iteration  21: 241481.739 ops/s
Iteration  22: 240251.354 ops/s
Iteration  23: 244300.181 ops/s
Iteration  24: 234181.139 ops/s
Iteration  25: 247857.209 ops/s
Iteration  26: 241546.488 ops/s
Iteration  27: 249911.306 ops/s
Iteration  28: 179958.381 ops/s
Iteration  29: 233288.104 ops/s
Iteration  30: 247603.237 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelBuffer":
  239337.845 ±(99.9%) 8662.492 ops/s [Average]
  (min, avg, max) = (179958.381, 239337.845, 255269.569), stdev = 12965.612
  CI (99.9%): [230675.353, 248000.337] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelBuffer  thrpt   30  239337.845 ± 8662.492  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_requestExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_requestExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 99966.484 ops/s
# Warmup Iteration   2: 561884.616 ops/s
# Warmup Iteration   3: 1011057.628 ops/s
# Warmup Iteration   4: 1185478.031 ops/s
# Warmup Iteration   5: 1249616.933 ops/s
# Warmup Iteration   6: 1311668.338 ops/s
# Warmup Iteration   7: 1231078.869 ops/s
# Warmup Iteration   8: 1292621.942 ops/s
# Warmup Iteration   9: 1248756.683 ops/s
# Warmup Iteration  10: 1243496.888 ops/s
# Warmup Iteration  11: 1288682.841 ops/s
# Warmup Iteration  12: 1260430.800 ops/s
# Warmup Iteration  13: 1211963.722 ops/s
# Warmup Iteration  14: 1319604.591 ops/s
# Warmup Iteration  15: 1235082.976 ops/s
# Warmup Iteration  16: 1285516.241 ops/s
# Warmup Iteration  17: 1264642.388 ops/s
# Warmup Iteration  18: 1289353.577 ops/s
# Warmup Iteration  19: 1273297.479 ops/s
# Warmup Iteration  20: 1264330.198 ops/s
# Warmup Iteration  21: 1310180.878 ops/s
# Warmup Iteration  22: 1236084.612 ops/s
# Warmup Iteration  23: 1319065.495 ops/s
# Warmup Iteration  24: 1243506.639 ops/s
# Warmup Iteration  25: 1293298.541 ops/s
# Warmup Iteration  26: 1248914.539 ops/s
# Warmup Iteration  27: 1318243.991 ops/s
# Warmup Iteration  28: 1227567.741 ops/s
# Warmup Iteration  29: 1242068.156 ops/s
# Warmup Iteration  30: 1322489.101 ops/s
Iteration   1: 1218118.807 ops/s
Iteration   2: 1290524.037 ops/s
Iteration   3: 1236633.735 ops/s
Iteration   4: 1235270.295 ops/s
Iteration   5: 1300300.921 ops/s
Iteration   6: 1309540.309 ops/s
Iteration   7: 1214642.676 ops/s
Iteration   8: 1275100.662 ops/s
Iteration   9: 1331943.688 ops/s
Iteration  10: 1255130.168 ops/s
Iteration  11: 1311978.044 ops/s
Iteration  12: 1235232.681 ops/s
Iteration  13: 1249065.806 ops/s
Iteration  14: 1331622.647 ops/s
Iteration  15: 1205182.863 ops/s
Iteration  16: 1338891.404 ops/s
Iteration  17: 1231090.783 ops/s
Iteration  18: 1262596.835 ops/s
Iteration  19: 1266380.278 ops/s
Iteration  20: 1264452.520 ops/s
Iteration  21: 1309324.403 ops/s
Iteration  22: 1287106.126 ops/s
Iteration  23: 1242509.833 ops/s
Iteration  24: 1301637.365 ops/s
Iteration  25: 1213037.694 ops/s
Iteration  26: 1294490.951 ops/s
Iteration  27: 1258202.450 ops/s
Iteration  28: 1248759.462 ops/s
Iteration  29: 1343132.276 ops/s
Iteration  30: 1224463.977 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_requestExact":
  1269545.457 ±(99.9%) 27259.160 ops/s [Average]
  (min, avg, max) = (1205182.863, 1269545.457, 1343132.276), stdev = 40800.230
  CI (99.9%): [1242286.297, 1296804.616] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_requestExact  thrpt   30  1269545.457 ± 27259.160  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 192424.478 ops/s
# Warmup Iteration   2: 640870.839 ops/s
# Warmup Iteration   3: 994857.399 ops/s
# Warmup Iteration   4: 1386843.624 ops/s
# Warmup Iteration   5: 1511542.975 ops/s
# Warmup Iteration   6: 1435047.394 ops/s
# Warmup Iteration   7: 1468741.575 ops/s
# Warmup Iteration   8: 1552860.795 ops/s
# Warmup Iteration   9: 1438952.866 ops/s
# Warmup Iteration  10: 1541160.494 ops/s
# Warmup Iteration  11: 1411908.573 ops/s
# Warmup Iteration  12: 1531270.251 ops/s
# Warmup Iteration  13: 1473752.995 ops/s
# Warmup Iteration  14: 1394655.917 ops/s
# Warmup Iteration  15: 1327839.898 ops/s
# Warmup Iteration  16: 1414730.736 ops/s
# Warmup Iteration  17: 1558473.269 ops/s
# Warmup Iteration  18: 1455253.460 ops/s
# Warmup Iteration  19: 1521051.579 ops/s
# Warmup Iteration  20: 1531150.606 ops/s
# Warmup Iteration  21: 1500173.181 ops/s
# Warmup Iteration  22: 1497146.334 ops/s
# Warmup Iteration  23: 1466223.154 ops/s
# Warmup Iteration  24: 1528287.793 ops/s
# Warmup Iteration  25: 1464223.862 ops/s
# Warmup Iteration  26: 1513765.709 ops/s
# Warmup Iteration  27: 1454958.489 ops/s
# Warmup Iteration  28: 1495442.567 ops/s
# Warmup Iteration  29: 1522084.501 ops/s
# Warmup Iteration  30: 1463832.595 ops/s
Iteration   1: 1539248.376 ops/s
Iteration   2: 1465676.204 ops/s
Iteration   3: 1480628.445 ops/s
Iteration   4: 1537514.691 ops/s
Iteration   5: 1449477.146 ops/s
Iteration   6: 1567186.193 ops/s
Iteration   7: 1475719.513 ops/s
Iteration   8: 1514696.285 ops/s
Iteration   9: 1497004.502 ops/s
Iteration  10: 1467477.223 ops/s
Iteration  11: 1583270.306 ops/s
Iteration  12: 1541165.061 ops/s
Iteration  13: 1417824.961 ops/s
Iteration  14: 1544082.725 ops/s
Iteration  15: 1504406.750 ops/s
Iteration  16: 1480943.781 ops/s
Iteration  17: 1548332.082 ops/s
Iteration  18: 1496632.391 ops/s
Iteration  19: 1529479.540 ops/s
Iteration  20: 1489201.182 ops/s
Iteration  21: 1511080.324 ops/s
Iteration  22: 1498981.419 ops/s
Iteration  23: 1172828.648 ops/s
Iteration  24: 1529689.044 ops/s
Iteration  25: 1502575.755 ops/s
Iteration  26: 1544734.060 ops/s
Iteration  27: 1561667.362 ops/s
Iteration  28: 1492080.124 ops/s
Iteration  29: 1577359.312 ops/s
Iteration  30: 1478857.639 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteSize":
  1499994.035 ±(99.9%) 48818.009 ops/s [Average]
  (min, avg, max) = (1172828.648, 1499994.035, 1583270.306), stdev = 73068.503
  CI (99.9%): [1451176.026, 1548812.044] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteSize  thrpt   30  1499994.035 ± 48818.009  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapperMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapperMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 57606.986 ops/s
# Warmup Iteration   2: 579269.495 ops/s
# Warmup Iteration   3: 851666.587 ops/s
# Warmup Iteration   4: 1299151.473 ops/s
# Warmup Iteration   5: 1318448.924 ops/s
# Warmup Iteration   6: 1423271.165 ops/s
# Warmup Iteration   7: 1363830.845 ops/s
# Warmup Iteration   8: 1464777.394 ops/s
# Warmup Iteration   9: 1400823.081 ops/s
# Warmup Iteration  10: 1380978.575 ops/s
# Warmup Iteration  11: 1386236.694 ops/s
# Warmup Iteration  12: 1450335.707 ops/s
# Warmup Iteration  13: 1395266.447 ops/s
# Warmup Iteration  14: 1374921.206 ops/s
# Warmup Iteration  15: 1455464.324 ops/s
# Warmup Iteration  16: 1381742.648 ops/s
# Warmup Iteration  17: 1436364.666 ops/s
# Warmup Iteration  18: 1374093.471 ops/s
# Warmup Iteration  19: 1386692.155 ops/s
# Warmup Iteration  20: 1432187.691 ops/s
# Warmup Iteration  21: 1376615.894 ops/s
# Warmup Iteration  22: 1366109.713 ops/s
# Warmup Iteration  23: 1433892.662 ops/s
# Warmup Iteration  24: 1400113.468 ops/s
# Warmup Iteration  25: 1387678.670 ops/s
# Warmup Iteration  26: 1413156.877 ops/s
# Warmup Iteration  27: 1368654.113 ops/s
# Warmup Iteration  28: 1417209.776 ops/s
# Warmup Iteration  29: 1392330.148 ops/s
# Warmup Iteration  30: 1386897.809 ops/s
Iteration   1: 1456944.623 ops/s
Iteration   2: 1347015.607 ops/s
Iteration   3: 1430385.751 ops/s
Iteration   4: 1363655.182 ops/s
Iteration   5: 1398651.051 ops/s
Iteration   6: 1392736.590 ops/s
Iteration   7: 1443140.317 ops/s
Iteration   8: 1411434.484 ops/s
Iteration   9: 1355992.530 ops/s
Iteration  10: 1483606.192 ops/s
Iteration  11: 1376853.716 ops/s
Iteration  12: 1447451.871 ops/s
Iteration  13: 1352322.964 ops/s
Iteration  14: 1426083.812 ops/s
Iteration  15: 1431865.913 ops/s
Iteration  16: 1365784.759 ops/s
Iteration  17: 1451172.674 ops/s
Iteration  18: 1389141.199 ops/s
Iteration  19: 1381962.668 ops/s
Iteration  20: 1434883.291 ops/s
Iteration  21: 1356119.563 ops/s
Iteration  22: 1433651.965 ops/s
Iteration  23: 1360123.125 ops/s
Iteration  24: 1439533.399 ops/s
Iteration  25: 1412240.018 ops/s
Iteration  26: 1395825.215 ops/s
Iteration  27: 1397569.435 ops/s
Iteration  28: 1373685.039 ops/s
Iteration  29: 1442465.546 ops/s
Iteration  30: 1344240.529 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapperMaxConcurrency":
  1403217.968 ±(99.9%) 25772.045 ops/s [Average]
  (min, avg, max) = (1344240.529, 1403217.968, 1483606.192), stdev = 38574.386
  CI (99.9%): [1377445.923, 1428990.012] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableFlatMapTest._Benchmark.benchmark_flatMapBiMapperMaxConcurrency  thrpt   30  1403217.968 ± 25772.045  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeArrayDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeArrayDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.688 ops/s
# Warmup Iteration   2: 39891.803 ops/s
# Warmup Iteration   3: 111297.265 ops/s
# Warmup Iteration   4: 222651.573 ops/s
# Warmup Iteration   5: 216014.576 ops/s
# Warmup Iteration   6: 393619.785 ops/s
# Warmup Iteration   7: 794427.354 ops/s
# Warmup Iteration   8: 859922.042 ops/s
# Warmup Iteration   9: 843253.585 ops/s
# Warmup Iteration  10: 795053.378 ops/s
# Warmup Iteration  11: 797716.820 ops/s
# Warmup Iteration  12: 850195.123 ops/s
# Warmup Iteration  13: 798276.510 ops/s
# Warmup Iteration  14: 830862.047 ops/s
# Warmup Iteration  15: 810758.963 ops/s
# Warmup Iteration  16: 835232.872 ops/s
# Warmup Iteration  17: 809564.534 ops/s
# Warmup Iteration  18: 848230.699 ops/s
# Warmup Iteration  19: 832733.935 ops/s
# Warmup Iteration  20: 789335.187 ops/s
# Warmup Iteration  21: 827496.335 ops/s
# Warmup Iteration  22: 833185.237 ops/s
# Warmup Iteration  23: 810485.292 ops/s
# Warmup Iteration  24: 803276.070 ops/s
# Warmup Iteration  25: 829276.709 ops/s
# Warmup Iteration  26: 832528.562 ops/s
# Warmup Iteration  27: 814359.088 ops/s
# Warmup Iteration  28: 820764.441 ops/s
# Warmup Iteration  29: 862057.030 ops/s
# Warmup Iteration  30: 819845.658 ops/s
Iteration   1: 832462.223 ops/s
Iteration   2: 821042.498 ops/s
Iteration   3: 828990.323 ops/s
Iteration   4: 850098.810 ops/s
Iteration   5: 793948.069 ops/s
Iteration   6: 820238.487 ops/s
Iteration   7: 846024.829 ops/s
Iteration   8: 802150.292 ops/s
Iteration   9: 827380.120 ops/s
Iteration  10: 810151.668 ops/s
Iteration  11: 824856.956 ops/s
Iteration  12: 844180.242 ops/s
Iteration  13: 803212.812 ops/s
Iteration  14: 804566.306 ops/s
Iteration  15: 834088.529 ops/s
Iteration  16: 810315.830 ops/s
Iteration  17: 664755.437 ops/s
Iteration  18: 819742.471 ops/s
Iteration  19: 819724.105 ops/s
Iteration  20: 848853.694 ops/s
Iteration  21: 799319.647 ops/s
Iteration  22: 839055.835 ops/s
Iteration  23: 794552.136 ops/s
Iteration  24: 786657.960 ops/s
Iteration  25: 840796.577 ops/s
Iteration  26: 781370.949 ops/s
Iteration  27: 845690.052 ops/s
Iteration  28: 805573.520 ops/s
Iteration  29: 798709.817 ops/s
Iteration  30: 850812.354 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeArrayDelayError":
  814977.418 ±(99.9%) 23313.795 ops/s [Average]
  (min, avg, max) = (664755.437, 814977.418, 850812.354), stdev = 34894.993
  CI (99.9%): [791663.623, 838291.213] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeArrayDelayError  thrpt   30  814977.418 ± 23313.795  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.796 ops/s
# Warmup Iteration   2: 40168.111 ops/s
# Warmup Iteration   3: 161089.200 ops/s
# Warmup Iteration   4: 266291.378 ops/s
# Warmup Iteration   5: 309131.306 ops/s
# Warmup Iteration   6: 511956.647 ops/s
# Warmup Iteration   7: 667141.657 ops/s
# Warmup Iteration   8: 654444.011 ops/s
# Warmup Iteration   9: 678308.067 ops/s
# Warmup Iteration  10: 731574.880 ops/s
# Warmup Iteration  11: 717436.349 ops/s
# Warmup Iteration  12: 743957.457 ops/s
# Warmup Iteration  13: 740174.247 ops/s
# Warmup Iteration  14: 743823.746 ops/s
# Warmup Iteration  15: 697266.568 ops/s
# Warmup Iteration  16: 746047.098 ops/s
# Warmup Iteration  17: 758712.767 ops/s
# Warmup Iteration  18: 709504.013 ops/s
# Warmup Iteration  19: 733107.161 ops/s
# Warmup Iteration  20: 748178.760 ops/s
# Warmup Iteration  21: 711022.308 ops/s
# Warmup Iteration  22: 755734.627 ops/s
# Warmup Iteration  23: 730834.421 ops/s
# Warmup Iteration  24: 721107.803 ops/s
# Warmup Iteration  25: 749266.181 ops/s
# Warmup Iteration  26: 718060.600 ops/s
# Warmup Iteration  27: 724400.076 ops/s
# Warmup Iteration  28: 746045.926 ops/s
# Warmup Iteration  29: 706277.233 ops/s
# Warmup Iteration  30: 742538.062 ops/s
Iteration   1: 700542.420 ops/s
Iteration   2: 711865.877 ops/s
Iteration   3: 769849.105 ops/s
Iteration   4: 705604.388 ops/s
Iteration   5: 756751.019 ops/s
Iteration   6: 721357.331 ops/s
Iteration   7: 742307.117 ops/s
Iteration   8: 739489.417 ops/s
Iteration   9: 730089.775 ops/s
Iteration  10: 720336.184 ops/s
Iteration  11: 715522.616 ops/s
Iteration  12: 732615.035 ops/s
Iteration  13: 726883.006 ops/s
Iteration  14: 720793.653 ops/s
Iteration  15: 746351.903 ops/s
Iteration  16: 729414.597 ops/s
Iteration  17: 745399.802 ops/s
Iteration  18: 697085.457 ops/s
Iteration  19: 717096.195 ops/s
Iteration  20: 749192.492 ops/s
Iteration  21: 718600.808 ops/s
Iteration  22: 731182.749 ops/s
Iteration  23: 770874.208 ops/s
Iteration  24: 705519.571 ops/s
Iteration  25: 745820.756 ops/s
Iteration  26: 745205.213 ops/s
Iteration  27: 737517.818 ops/s
Iteration  28: 762233.948 ops/s
Iteration  29: 741285.490 ops/s
Iteration  30: 705754.506 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError3":
  731418.082 ±(99.9%) 13346.226 ops/s [Average]
  (min, avg, max) = (697085.457, 731418.082, 770874.208), stdev = 19976.004
  CI (99.9%): [718071.856, 744764.307] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError3  thrpt   30  731418.082 ± 13346.226  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.731 ops/s
# Warmup Iteration   2: 48600.675 ops/s
# Warmup Iteration   3: 123294.780 ops/s
# Warmup Iteration   4: 219657.195 ops/s
# Warmup Iteration   5: 329029.181 ops/s
# Warmup Iteration   6: 415728.828 ops/s
# Warmup Iteration   7: 731244.899 ops/s
# Warmup Iteration   8: 694432.492 ops/s
# Warmup Iteration   9: 749489.496 ops/s
# Warmup Iteration  10: 781794.981 ops/s
# Warmup Iteration  11: 777993.736 ops/s
# Warmup Iteration  12: 811298.012 ops/s
# Warmup Iteration  13: 780593.315 ops/s
# Warmup Iteration  14: 804784.758 ops/s
# Warmup Iteration  15: 774852.954 ops/s
# Warmup Iteration  16: 788639.480 ops/s
# Warmup Iteration  17: 775437.743 ops/s
# Warmup Iteration  18: 807552.062 ops/s
# Warmup Iteration  19: 758739.179 ops/s
# Warmup Iteration  20: 789155.673 ops/s
# Warmup Iteration  21: 776362.310 ops/s
# Warmup Iteration  22: 783147.213 ops/s
# Warmup Iteration  23: 787991.919 ops/s
# Warmup Iteration  24: 784267.122 ops/s
# Warmup Iteration  25: 831162.825 ops/s
# Warmup Iteration  26: 782595.879 ops/s
# Warmup Iteration  27: 811060.414 ops/s
# Warmup Iteration  28: 803680.553 ops/s
# Warmup Iteration  29: 785634.886 ops/s
# Warmup Iteration  30: 818168.128 ops/s
Iteration   1: 786035.918 ops/s
Iteration   2: 790505.187 ops/s
Iteration   3: 789997.038 ops/s
Iteration   4: 788619.353 ops/s
Iteration   5: 812502.506 ops/s
Iteration   6: 790185.507 ops/s
Iteration   7: 816929.714 ops/s
Iteration   8: 800297.456 ops/s
Iteration   9: 774017.714 ops/s
Iteration  10: 805118.430 ops/s
Iteration  11: 612121.621 ops/s
Iteration  12: 793685.599 ops/s
Iteration  13: 792786.332 ops/s
Iteration  14: 791231.956 ops/s
Iteration  15: 801955.301 ops/s
Iteration  16: 804431.427 ops/s
Iteration  17: 812582.069 ops/s
Iteration  18: 776037.715 ops/s
Iteration  19: 800142.707 ops/s
Iteration  20: 796052.432 ops/s
Iteration  21: 785765.621 ops/s
Iteration  22: 792485.495 ops/s
Iteration  23: 791816.605 ops/s
Iteration  24: 803007.177 ops/s
Iteration  25: 809903.162 ops/s
Iteration  26: 824690.115 ops/s
Iteration  27: 812722.825 ops/s
Iteration  28: 779726.605 ops/s
Iteration  29: 802353.951 ops/s
Iteration  30: 810655.793 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorMaxConcurrency":
  791612.111 ±(99.9%) 24062.947 ops/s [Average]
  (min, avg, max) = (612121.621, 791612.111, 824690.115), stdev = 36016.289
  CI (99.9%): [767549.164, 815675.058] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score       Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorMaxConcurrency  thrpt   30  791612.111 ± 24062.947  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_errorInParentObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_errorInParentObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.695 ops/s
# Warmup Iteration   2: 17350.454 ops/s
# Warmup Iteration   3: 67069.052 ops/s
# Warmup Iteration   4: 68932.110 ops/s
# Warmup Iteration   5: 93854.693 ops/s
# Warmup Iteration   6: 106822.726 ops/s
# Warmup Iteration   7: 204379.206 ops/s
# Warmup Iteration   8: 265254.048 ops/s
# Warmup Iteration   9: 281187.165 ops/s
# Warmup Iteration  10: 294367.372 ops/s
# Warmup Iteration  11: 298626.601 ops/s
# Warmup Iteration  12: 312484.796 ops/s
# Warmup Iteration  13: 297410.601 ops/s
# Warmup Iteration  14: 303013.468 ops/s
# Warmup Iteration  15: 304055.043 ops/s
# Warmup Iteration  16: 298499.182 ops/s
# Warmup Iteration  17: 299178.098 ops/s
# Warmup Iteration  18: 302436.759 ops/s
# Warmup Iteration  19: 292253.228 ops/s
# Warmup Iteration  20: 305534.149 ops/s
# Warmup Iteration  21: 300162.500 ops/s
# Warmup Iteration  22: 307530.858 ops/s
# Warmup Iteration  23: 305580.760 ops/s
# Warmup Iteration  24: 296540.255 ops/s
# Warmup Iteration  25: 309173.763 ops/s
# Warmup Iteration  26: 305555.813 ops/s
# Warmup Iteration  27: 301927.161 ops/s
# Warmup Iteration  28: 315796.528 ops/s
# Warmup Iteration  29: 298940.384 ops/s
# Warmup Iteration  30: 310478.197 ops/s
Iteration   1: 296149.673 ops/s
Iteration   2: 307246.897 ops/s
Iteration   3: 303133.241 ops/s
Iteration   4: 295363.788 ops/s
Iteration   5: 319545.093 ops/s
Iteration   6: 297407.875 ops/s
Iteration   7: 312857.510 ops/s
Iteration   8: 306205.895 ops/s
Iteration   9: 292812.247 ops/s
Iteration  10: 307025.287 ops/s
Iteration  11: 293041.873 ops/s
Iteration  12: 302182.509 ops/s
Iteration  13: 303412.640 ops/s
Iteration  14: 302477.358 ops/s
Iteration  15: 288732.527 ops/s
Iteration  16: 316418.225 ops/s
Iteration  17: 296466.910 ops/s
Iteration  18: 301134.561 ops/s
Iteration  19: 306072.406 ops/s
Iteration  20: 307619.404 ops/s
Iteration  21: 298186.788 ops/s
Iteration  22: 302895.199 ops/s
Iteration  23: 311949.525 ops/s
Iteration  24: 297791.660 ops/s
Iteration  25: 310775.925 ops/s
Iteration  26: 287612.382 ops/s
Iteration  27: 299515.189 ops/s
Iteration  28: 303454.644 ops/s
Iteration  29: 304515.350 ops/s
Iteration  30: 307338.057 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_errorInParentObservable":
  302644.688 ±(99.9%) 5075.918 ops/s [Average]
  (min, avg, max) = (287612.382, 302644.688, 319545.093), stdev = 7597.396
  CI (99.9%): [297568.770, 307720.606] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_errorInParentObservable  thrpt   30  302644.688 ± 5075.918  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8463.970 ops/s
# Warmup Iteration   2: 53736.372 ops/s
# Warmup Iteration   3: 109124.369 ops/s
# Warmup Iteration   4: 173398.595 ops/s
# Warmup Iteration   5: 324491.304 ops/s
# Warmup Iteration   6: 396328.270 ops/s
# Warmup Iteration   7: 440640.007 ops/s
# Warmup Iteration   8: 424864.589 ops/s
# Warmup Iteration   9: 429014.909 ops/s
# Warmup Iteration  10: 435761.668 ops/s
# Warmup Iteration  11: 424467.822 ops/s
# Warmup Iteration  12: 430034.516 ops/s
# Warmup Iteration  13: 436211.922 ops/s
# Warmup Iteration  14: 427053.132 ops/s
# Warmup Iteration  15: 435756.130 ops/s
# Warmup Iteration  16: 428774.664 ops/s
# Warmup Iteration  17: 412142.126 ops/s
# Warmup Iteration  18: 445981.467 ops/s
# Warmup Iteration  19: 434120.461 ops/s
# Warmup Iteration  20: 416117.857 ops/s
# Warmup Iteration  21: 443165.444 ops/s
# Warmup Iteration  22: 435395.301 ops/s
# Warmup Iteration  23: 426626.234 ops/s
# Warmup Iteration  24: 430923.151 ops/s
# Warmup Iteration  25: 438412.116 ops/s
# Warmup Iteration  26: 421238.747 ops/s
# Warmup Iteration  27: 429322.035 ops/s
# Warmup Iteration  28: 432153.295 ops/s
# Warmup Iteration  29: 430226.957 ops/s
# Warmup Iteration  30: 438108.097 ops/s
Iteration   1: 431433.707 ops/s
Iteration   2: 435989.081 ops/s
Iteration   3: 419530.197 ops/s
Iteration   4: 436799.909 ops/s
Iteration   5: 337623.300 ops/s
Iteration   6: 435754.731 ops/s
Iteration   7: 432039.751 ops/s
Iteration   8: 433598.274 ops/s
Iteration   9: 428842.343 ops/s
Iteration  10: 440670.504 ops/s
Iteration  11: 418544.141 ops/s
Iteration  12: 444102.594 ops/s
Iteration  13: 421854.858 ops/s
Iteration  14: 428721.975 ops/s
Iteration  15: 434404.894 ops/s
Iteration  16: 427739.094 ops/s
Iteration  17: 432848.954 ops/s
Iteration  18: 440828.027 ops/s
Iteration  19: 424427.362 ops/s
Iteration  20: 434699.278 ops/s
Iteration  21: 417803.022 ops/s
Iteration  22: 437495.382 ops/s
Iteration  23: 424133.976 ops/s
Iteration  24: 433802.332 ops/s
Iteration  25: 438797.926 ops/s
Iteration  26: 420782.324 ops/s
Iteration  27: 436086.624 ops/s
Iteration  28: 449760.566 ops/s
Iteration  29: 420977.174 ops/s
Iteration  30: 425006.417 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant2":
  428169.957 ±(99.9%) 12617.742 ops/s [Average]
  (min, avg, max) = (337623.300, 428169.957, 449760.566), stdev = 18885.643
  CI (99.9%): [415552.216, 440787.699] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant2  thrpt   30  428169.957 ± 12617.742  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenMergeAndTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenMergeAndTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2274.399 ops/s
# Warmup Iteration   2: 28634.570 ops/s
# Warmup Iteration   3: 111708.087 ops/s
# Warmup Iteration   4: 138577.436 ops/s
# Warmup Iteration   5: 149071.786 ops/s
# Warmup Iteration   6: 148869.673 ops/s
# Warmup Iteration   7: 145537.787 ops/s
# Warmup Iteration   8: 146667.332 ops/s
# Warmup Iteration   9: 135126.661 ops/s
# Warmup Iteration  10: 159054.328 ops/s
# Warmup Iteration  11: 153466.465 ops/s
# Warmup Iteration  12: 150380.084 ops/s
# Warmup Iteration  13: 149074.545 ops/s
# Warmup Iteration  14: 148836.398 ops/s
# Warmup Iteration  15: 152943.542 ops/s
# Warmup Iteration  16: 152805.972 ops/s
# Warmup Iteration  17: 158151.010 ops/s
# Warmup Iteration  18: 157872.075 ops/s
# Warmup Iteration  19: 138629.835 ops/s
# Warmup Iteration  20: 158464.057 ops/s
# Warmup Iteration  21: 149542.231 ops/s
# Warmup Iteration  22: 152668.307 ops/s
# Warmup Iteration  23: 150717.199 ops/s
# Warmup Iteration  24: 146371.336 ops/s
# Warmup Iteration  25: 155137.269 ops/s
# Warmup Iteration  26: 150072.423 ops/s
# Warmup Iteration  27: 145676.430 ops/s
# Warmup Iteration  28: 154657.601 ops/s
# Warmup Iteration  29: 149511.526 ops/s
# Warmup Iteration  30: 151614.814 ops/s
Iteration   1: 143967.835 ops/s
Iteration   2: 153353.650 ops/s
Iteration   3: 151770.719 ops/s
Iteration   4: 157489.330 ops/s
Iteration   5: 151774.047 ops/s
Iteration   6: 151084.119 ops/s
Iteration   7: 154682.238 ops/s
Iteration   8: 149924.520 ops/s
Iteration   9: 156635.852 ops/s
Iteration  10: 148216.652 ops/s
Iteration  11: 158438.172 ops/s
Iteration  12: 154974.843 ops/s
Iteration  13: 150367.887 ops/s
Iteration  14: 157632.527 ops/s
Iteration  15: 154650.127 ops/s
Iteration  16: 151425.421 ops/s
Iteration  17: 154635.302 ops/s
Iteration  18: 146197.252 ops/s
Iteration  19: 154145.444 ops/s
Iteration  20: 147624.060 ops/s
Iteration  21: 151383.273 ops/s
Iteration  22: 155868.027 ops/s
Iteration  23: 151073.128 ops/s
Iteration  24: 158479.804 ops/s
Iteration  25: 149036.926 ops/s
Iteration  26: 155950.693 ops/s
Iteration  27: 152746.901 ops/s
Iteration  28: 154361.519 ops/s
Iteration  29: 157156.348 ops/s
Iteration  30: 148913.088 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenMergeAndTake":
  152798.657 ±(99.9%) 2502.414 ops/s [Average]
  (min, avg, max) = (143967.835, 152798.657, 158479.804), stdev = 3745.496
  CI (99.9%): [150296.242, 155301.071] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
ObservableGroupByTest._Benchmark.benchmark_unsubscribeViaTakeOnGroupThenMergeAndTake  thrpt   30  152798.657 ± 2502.414  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combine2Observable2Errors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combine2Observable2Errors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7337.184 ops/s
# Warmup Iteration   2: 67544.595 ops/s
# Warmup Iteration   3: 106970.677 ops/s
# Warmup Iteration   4: 172384.514 ops/s
# Warmup Iteration   5: 255224.395 ops/s
# Warmup Iteration   6: 229078.087 ops/s
# Warmup Iteration   7: 254609.678 ops/s
# Warmup Iteration   8: 263081.292 ops/s
# Warmup Iteration   9: 251072.521 ops/s
# Warmup Iteration  10: 262804.891 ops/s
# Warmup Iteration  11: 263383.682 ops/s
# Warmup Iteration  12: 256345.110 ops/s
# Warmup Iteration  13: 256390.400 ops/s
# Warmup Iteration  14: 256315.272 ops/s
# Warmup Iteration  15: 267424.709 ops/s
# Warmup Iteration  16: 245407.005 ops/s
# Warmup Iteration  17: 271509.358 ops/s
# Warmup Iteration  18: 261837.254 ops/s
# Warmup Iteration  19: 261733.456 ops/s
# Warmup Iteration  20: 274753.028 ops/s
# Warmup Iteration  21: 259404.180 ops/s
# Warmup Iteration  22: 262135.657 ops/s
# Warmup Iteration  23: 267638.237 ops/s
# Warmup Iteration  24: 266187.982 ops/s
# Warmup Iteration  25: 263039.802 ops/s
# Warmup Iteration  26: 274423.013 ops/s
# Warmup Iteration  27: 255102.204 ops/s
# Warmup Iteration  28: 271806.835 ops/s
# Warmup Iteration  29: 217071.348 ops/s
# Warmup Iteration  30: 257807.070 ops/s
Iteration   1: 259044.878 ops/s
Iteration   2: 276401.325 ops/s
Iteration   3: 254946.445 ops/s
Iteration   4: 268980.816 ops/s
Iteration   5: 261342.857 ops/s
Iteration   6: 256909.064 ops/s
Iteration   7: 270385.894 ops/s
Iteration   8: 259699.136 ops/s
Iteration   9: 268765.825 ops/s
Iteration  10: 259154.080 ops/s
Iteration  11: 264098.752 ops/s
Iteration  12: 264227.968 ops/s
Iteration  13: 259960.549 ops/s
Iteration  14: 269335.818 ops/s
Iteration  15: 255829.285 ops/s
Iteration  16: 269347.327 ops/s
Iteration  17: 275130.711 ops/s
Iteration  18: 253925.324 ops/s
Iteration  19: 275928.963 ops/s
Iteration  20: 255550.743 ops/s
Iteration  21: 271090.616 ops/s
Iteration  22: 262459.969 ops/s
Iteration  23: 262721.183 ops/s
Iteration  24: 275314.460 ops/s
Iteration  25: 257444.389 ops/s
Iteration  26: 271123.390 ops/s
Iteration  27: 270781.917 ops/s
Iteration  28: 258927.888 ops/s
Iteration  29: 269571.494 ops/s
Iteration  30: 264253.443 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combine2Observable2Errors":
  264755.150 ±(99.9%) 4623.767 ops/s [Average]
  (min, avg, max) = (253925.324, 264755.150, 276401.325), stdev = 6920.637
  CI (99.9%): [260131.384, 269378.917] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_combine2Observable2Errors  thrpt   30  264755.150 ± 4623.767  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 491593.563 ops/s
# Warmup Iteration   2: 2025917.642 ops/s
# Warmup Iteration   3: 2793043.119 ops/s
# Warmup Iteration   4: 2378928.129 ops/s
# Warmup Iteration   5: 2421730.870 ops/s
# Warmup Iteration   6: 2747550.385 ops/s
# Warmup Iteration   7: 2758838.733 ops/s
# Warmup Iteration   8: 2584303.795 ops/s
# Warmup Iteration   9: 2679459.537 ops/s
# Warmup Iteration  10: 2716422.805 ops/s
# Warmup Iteration  11: 2658039.590 ops/s
# Warmup Iteration  12: 2757841.201 ops/s
# Warmup Iteration  13: 2639559.907 ops/s
# Warmup Iteration  14: 2716862.797 ops/s
# Warmup Iteration  15: 2669593.226 ops/s
# Warmup Iteration  16: 2727748.698 ops/s
# Warmup Iteration  17: 2672029.461 ops/s
# Warmup Iteration  18: 2621495.288 ops/s
# Warmup Iteration  19: 2782469.983 ops/s
# Warmup Iteration  20: 2592408.490 ops/s
# Warmup Iteration  21: 2735745.922 ops/s
# Warmup Iteration  22: 2681693.777 ops/s
# Warmup Iteration  23: 2589898.044 ops/s
# Warmup Iteration  24: 2635875.834 ops/s
# Warmup Iteration  25: 2713583.463 ops/s
# Warmup Iteration  26: 2598018.872 ops/s
# Warmup Iteration  27: 2604070.540 ops/s
# Warmup Iteration  28: 2725714.195 ops/s
# Warmup Iteration  29: 2684681.150 ops/s
# Warmup Iteration  30: 2666518.928 ops/s
Iteration   1: 2719840.686 ops/s
Iteration   2: 2775015.269 ops/s
Iteration   3: 2634347.248 ops/s
Iteration   4: 2630986.561 ops/s
Iteration   5: 2718686.149 ops/s
Iteration   6: 2627568.420 ops/s
Iteration   7: 2682394.300 ops/s
Iteration   8: 2685840.423 ops/s
Iteration   9: 2636648.666 ops/s
Iteration  10: 2795635.463 ops/s
Iteration  11: 2601342.935 ops/s
Iteration  12: 2756154.610 ops/s
Iteration  13: 2649023.295 ops/s
Iteration  14: 2803074.664 ops/s
Iteration  15: 2729799.367 ops/s
Iteration  16: 2523762.697 ops/s
Iteration  17: 2682026.884 ops/s
Iteration  18: 2765852.324 ops/s
Iteration  19: 2619153.267 ops/s
Iteration  20: 2810058.963 ops/s
Iteration  21: 2578104.784 ops/s
Iteration  22: 2709153.223 ops/s
Iteration  23: 2763138.478 ops/s
Iteration  24: 2633017.576 ops/s
Iteration  25: 2660681.565 ops/s
Iteration  26: 2730704.598 ops/s
Iteration  27: 2579310.486 ops/s
Iteration  28: 2744860.396 ops/s
Iteration  29: 2516801.335 ops/s
Iteration  30: 2721914.531 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_cancel":
  2682829.972 ±(99.9%) 53132.125 ops/s [Average]
  (min, avg, max) = (2516801.335, 2682829.972, 2810058.963), stdev = 79525.669
  CI (99.9%): [2629697.847, 2735962.097] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_cancel  thrpt   30  2682829.972 ± 53132.125  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_iterableMapperFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_iterableMapperFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 59904.502 ops/s
# Warmup Iteration   2: 477351.959 ops/s
# Warmup Iteration   3: 516615.551 ops/s
# Warmup Iteration   4: 508202.335 ops/s
# Warmup Iteration   5: 526055.002 ops/s
# Warmup Iteration   6: 532797.826 ops/s
# Warmup Iteration   7: 495145.714 ops/s
# Warmup Iteration   8: 514552.704 ops/s
# Warmup Iteration   9: 537962.919 ops/s
# Warmup Iteration  10: 541350.792 ops/s
# Warmup Iteration  11: 531325.266 ops/s
# Warmup Iteration  12: 491520.749 ops/s
# Warmup Iteration  13: 534733.814 ops/s
# Warmup Iteration  14: 537295.968 ops/s
# Warmup Iteration  15: 499513.838 ops/s
# Warmup Iteration  16: 528961.561 ops/s
# Warmup Iteration  17: 550015.184 ops/s
# Warmup Iteration  18: 539820.081 ops/s
# Warmup Iteration  19: 528828.128 ops/s
# Warmup Iteration  20: 540879.403 ops/s
# Warmup Iteration  21: 531669.006 ops/s
# Warmup Iteration  22: 561139.257 ops/s
# Warmup Iteration  23: 539437.005 ops/s
# Warmup Iteration  24: 424534.923 ops/s
# Warmup Iteration  25: 556661.826 ops/s
# Warmup Iteration  26: 531996.323 ops/s
# Warmup Iteration  27: 549566.148 ops/s
# Warmup Iteration  28: 553241.968 ops/s
# Warmup Iteration  29: 534481.051 ops/s
# Warmup Iteration  30: 532455.603 ops/s
Iteration   1: 563049.797 ops/s
Iteration   2: 528836.670 ops/s
Iteration   3: 542873.036 ops/s
Iteration   4: 559844.465 ops/s
Iteration   5: 539092.295 ops/s
Iteration   6: 550580.636 ops/s
Iteration   7: 538175.346 ops/s
Iteration   8: 543583.290 ops/s
Iteration   9: 548748.778 ops/s
Iteration  10: 538502.640 ops/s
Iteration  11: 559253.825 ops/s
Iteration  12: 529641.155 ops/s
Iteration  13: 556754.485 ops/s
Iteration  14: 567704.904 ops/s
Iteration  15: 546939.020 ops/s
Iteration  16: 544461.206 ops/s
Iteration  17: 546577.421 ops/s
Iteration  18: 545421.121 ops/s
Iteration  19: 540722.999 ops/s
Iteration  20: 562006.850 ops/s
Iteration  21: 541561.356 ops/s
Iteration  22: 565029.426 ops/s
Iteration  23: 537848.296 ops/s
Iteration  24: 547607.099 ops/s
Iteration  25: 542241.500 ops/s
Iteration  26: 560803.895 ops/s
Iteration  27: 533755.604 ops/s
Iteration  28: 544699.897 ops/s
Iteration  29: 546156.605 ops/s
Iteration  30: 536413.440 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_iterableMapperFunctionReturnsNull":
  546962.902 ±(99.9%) 7022.737 ops/s [Average]
  (min, avg, max) = (528836.670, 546962.902, 567704.904), stdev = 10511.302
  CI (99.9%): [539940.165, 553985.638] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_iterableMapperFunctionReturnsNull  thrpt   30  546962.902 ± 7022.737  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 323690.895 ops/s
# Warmup Iteration   2: 604053.446 ops/s
# Warmup Iteration   3: 699959.798 ops/s
# Warmup Iteration   4: 698578.919 ops/s
# Warmup Iteration   5: 677347.866 ops/s
# Warmup Iteration   6: 678884.351 ops/s
# Warmup Iteration   7: 711849.460 ops/s
# Warmup Iteration   8: 677844.480 ops/s
# Warmup Iteration   9: 694674.593 ops/s
# Warmup Iteration  10: 683229.727 ops/s
# Warmup Iteration  11: 686159.021 ops/s
# Warmup Iteration  12: 695393.363 ops/s
# Warmup Iteration  13: 644515.498 ops/s
# Warmup Iteration  14: 704279.904 ops/s
# Warmup Iteration  15: 688940.919 ops/s
# Warmup Iteration  16: 690304.258 ops/s
# Warmup Iteration  17: 729629.776 ops/s
# Warmup Iteration  18: 715629.043 ops/s
# Warmup Iteration  19: 702725.681 ops/s
# Warmup Iteration  20: 738539.647 ops/s
# Warmup Iteration  21: 724312.887 ops/s
# Warmup Iteration  22: 737093.343 ops/s
# Warmup Iteration  23: 761299.928 ops/s
# Warmup Iteration  24: 729182.286 ops/s
# Warmup Iteration  25: 724469.185 ops/s
# Warmup Iteration  26: 753645.965 ops/s
# Warmup Iteration  27: 727168.309 ops/s
# Warmup Iteration  28: 751945.190 ops/s
# Warmup Iteration  29: 758887.687 ops/s
# Warmup Iteration  30: 732019.746 ops/s
Iteration   1: 735958.903 ops/s
Iteration   2: 717909.650 ops/s
Iteration   3: 755834.111 ops/s
Iteration   4: 716907.733 ops/s
Iteration   5: 729428.619 ops/s
Iteration   6: 764300.491 ops/s
Iteration   7: 724350.550 ops/s
Iteration   8: 734547.621 ops/s
Iteration   9: 732824.614 ops/s
Iteration  10: 748595.966 ops/s
Iteration  11: 753890.024 ops/s
Iteration  12: 720370.342 ops/s
Iteration  13: 770200.735 ops/s
Iteration  14: 717792.890 ops/s
Iteration  15: 734624.195 ops/s
Iteration  16: 755063.992 ops/s
Iteration  17: 719254.269 ops/s
Iteration  18: 747042.729 ops/s
Iteration  19: 737367.818 ops/s
Iteration  20: 761262.560 ops/s
Iteration  21: 687067.024 ops/s
Iteration  22: 736187.898 ops/s
Iteration  23: 754420.316 ops/s
Iteration  24: 734833.656 ops/s
Iteration  25: 736010.592 ops/s
Iteration  26: 739466.285 ops/s
Iteration  27: 733082.267 ops/s
Iteration  28: 772772.699 ops/s
Iteration  29: 737808.524 ops/s
Iteration  30: 741522.727 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_mainError":
  738356.660 ±(99.9%) 12209.056 ops/s [Average]
  (min, avg, max) = (687067.024, 738356.660, 772772.699), stdev = 18273.942
  CI (99.9%): [726147.604, 750565.716] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableConcatWithCompletableTest._Benchmark.benchmark_mainError  thrpt   30  738356.660 ± 12209.056  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 829826.036 ops/s
# Warmup Iteration   2: 2244178.920 ops/s
# Warmup Iteration   3: 2842479.535 ops/s
# Warmup Iteration   4: 3253466.310 ops/s
# Warmup Iteration   5: 3098316.799 ops/s
# Warmup Iteration   6: 3253474.145 ops/s
# Warmup Iteration   7: 3135189.058 ops/s
# Warmup Iteration   8: 3191929.568 ops/s
# Warmup Iteration   9: 3134808.734 ops/s
# Warmup Iteration  10: 3171999.580 ops/s
# Warmup Iteration  11: 3240751.581 ops/s
# Warmup Iteration  12: 3139514.616 ops/s
# Warmup Iteration  13: 3314934.969 ops/s
# Warmup Iteration  14: 3126978.340 ops/s
# Warmup Iteration  15: 3304609.892 ops/s
# Warmup Iteration  16: 3256876.642 ops/s
# Warmup Iteration  17: 3225775.259 ops/s
# Warmup Iteration  18: 2580327.254 ops/s
# Warmup Iteration  19: 3272609.661 ops/s
# Warmup Iteration  20: 3193277.241 ops/s
# Warmup Iteration  21: 3166795.338 ops/s
# Warmup Iteration  22: 3247851.673 ops/s
# Warmup Iteration  23: 3092269.499 ops/s
# Warmup Iteration  24: 3355800.741 ops/s
# Warmup Iteration  25: 3239318.473 ops/s
# Warmup Iteration  26: 3147515.984 ops/s
# Warmup Iteration  27: 3219958.661 ops/s
# Warmup Iteration  28: 3302661.131 ops/s
# Warmup Iteration  29: 3314778.028 ops/s
# Warmup Iteration  30: 3136500.533 ops/s
Iteration   1: 3298890.325 ops/s
Iteration   2: 3118158.670 ops/s
Iteration   3: 3273290.101 ops/s
Iteration   4: 3073960.930 ops/s
Iteration   5: 3188023.512 ops/s
Iteration   6: 3216067.545 ops/s
Iteration   7: 3236077.534 ops/s
Iteration   8: 3273623.081 ops/s
Iteration   9: 3115604.324 ops/s
Iteration  10: 3272199.718 ops/s
Iteration  11: 3121390.547 ops/s
Iteration  12: 3241858.042 ops/s
Iteration  13: 3153395.533 ops/s
Iteration  14: 3221555.704 ops/s
Iteration  15: 3220971.498 ops/s
Iteration  16: 3318067.782 ops/s
Iteration  17: 3174211.550 ops/s
Iteration  18: 3178198.416 ops/s
Iteration  19: 3327154.948 ops/s
Iteration  20: 3131006.347 ops/s
Iteration  21: 3321416.991 ops/s
Iteration  22: 3317042.945 ops/s
Iteration  23: 3149452.632 ops/s
Iteration  24: 3124159.139 ops/s
Iteration  25: 3348682.287 ops/s
Iteration  26: 3113219.565 ops/s
Iteration  27: 3254840.289 ops/s
Iteration  28: 3227313.363 ops/s
Iteration  29: 3133188.186 ops/s
Iteration  30: 3270444.324 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete":
  3213782.194 ±(99.9%) 52354.576 ops/s [Average]
  (min, avg, max) = (3073960.930, 3213782.194, 3348682.287), stdev = 78361.871
  CI (99.9%): [3161427.618, 3266136.770] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete  thrpt   30  3213782.194 ± 52354.576  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 288622.726 ops/s
# Warmup Iteration   2: 568786.324 ops/s
# Warmup Iteration   3: 637904.702 ops/s
# Warmup Iteration   4: 706047.841 ops/s
# Warmup Iteration   5: 584059.973 ops/s
# Warmup Iteration   6: 704586.742 ops/s
# Warmup Iteration   7: 709885.708 ops/s
# Warmup Iteration   8: 692604.305 ops/s
# Warmup Iteration   9: 701313.112 ops/s
# Warmup Iteration  10: 676624.751 ops/s
# Warmup Iteration  11: 687283.707 ops/s
# Warmup Iteration  12: 698299.366 ops/s
# Warmup Iteration  13: 707265.523 ops/s
# Warmup Iteration  14: 711809.150 ops/s
# Warmup Iteration  15: 698805.899 ops/s
# Warmup Iteration  16: 690023.053 ops/s
# Warmup Iteration  17: 734667.128 ops/s
# Warmup Iteration  18: 737658.190 ops/s
# Warmup Iteration  19: 732324.489 ops/s
# Warmup Iteration  20: 731804.918 ops/s
# Warmup Iteration  21: 737014.933 ops/s
# Warmup Iteration  22: 720931.694 ops/s
# Warmup Iteration  23: 752215.510 ops/s
# Warmup Iteration  24: 744401.422 ops/s
# Warmup Iteration  25: 752179.601 ops/s
# Warmup Iteration  26: 727158.950 ops/s
# Warmup Iteration  27: 731842.131 ops/s
# Warmup Iteration  28: 756944.365 ops/s
# Warmup Iteration  29: 714239.150 ops/s
# Warmup Iteration  30: 762426.693 ops/s
Iteration   1: 710890.587 ops/s
Iteration   2: 749947.201 ops/s
Iteration   3: 717409.065 ops/s
Iteration   4: 712940.730 ops/s
Iteration   5: 753325.070 ops/s
Iteration   6: 707679.537 ops/s
Iteration   7: 749717.646 ops/s
Iteration   8: 727722.983 ops/s
Iteration   9: 741124.037 ops/s
Iteration  10: 717801.662 ops/s
Iteration  11: 713598.385 ops/s
Iteration  12: 738181.751 ops/s
Iteration  13: 714519.318 ops/s
Iteration  14: 736606.284 ops/s
Iteration  15: 757076.274 ops/s
Iteration  16: 725828.414 ops/s
Iteration  17: 742772.347 ops/s
Iteration  18: 723187.196 ops/s
Iteration  19: 753307.718 ops/s
Iteration  20: 722632.930 ops/s
Iteration  21: 737282.037 ops/s
Iteration  22: 740198.552 ops/s
Iteration  23: 718327.289 ops/s
Iteration  24: 745352.364 ops/s
Iteration  25: 702874.327 ops/s
Iteration  26: 717078.430 ops/s
Iteration  27: 726582.488 ops/s
Iteration  28: 721091.919 ops/s
Iteration  29: 742892.610 ops/s
Iteration  30: 716139.024 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_mainError":
  729469.606 ±(99.9%) 10358.482 ops/s [Average]
  (min, avg, max) = (702874.327, 729469.606, 757076.274), stdev = 15504.090
  CI (99.9%): [719111.123, 739828.088] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableConcatWithMaybeTest._Benchmark.benchmark_mainError  thrpt   30  729469.606 ± 10358.482  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_customFusion$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_customFusion

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1139625.359 ops/s
# Warmup Iteration   2: 5166263.122 ops/s
# Warmup Iteration   3: 6874830.587 ops/s
# Warmup Iteration   4: 6375818.222 ops/s
# Warmup Iteration   5: 6476621.650 ops/s
# Warmup Iteration   6: 6527588.305 ops/s
# Warmup Iteration   7: 6162634.435 ops/s
# Warmup Iteration   8: 6827698.286 ops/s
# Warmup Iteration   9: 6448560.193 ops/s
# Warmup Iteration  10: 6682569.630 ops/s
# Warmup Iteration  11: 6833213.590 ops/s
# Warmup Iteration  12: 6552815.413 ops/s
# Warmup Iteration  13: 5160591.428 ops/s
# Warmup Iteration  14: 6576215.797 ops/s
# Warmup Iteration  15: 6759163.537 ops/s
# Warmup Iteration  16: 6587528.052 ops/s
# Warmup Iteration  17: 6424696.969 ops/s
# Warmup Iteration  18: 6710396.119 ops/s
# Warmup Iteration  19: 6600079.537 ops/s
# Warmup Iteration  20: 6820332.297 ops/s
# Warmup Iteration  21: 6500368.359 ops/s
# Warmup Iteration  22: 6797388.307 ops/s
# Warmup Iteration  23: 6789031.156 ops/s
# Warmup Iteration  24: 6527413.273 ops/s
# Warmup Iteration  25: 6705285.640 ops/s
# Warmup Iteration  26: 6673003.567 ops/s
# Warmup Iteration  27: 6428157.512 ops/s
# Warmup Iteration  28: 6843945.209 ops/s
# Warmup Iteration  29: 6685328.760 ops/s
# Warmup Iteration  30: 6655287.258 ops/s
Iteration   1: 6876376.130 ops/s
Iteration   2: 6561879.219 ops/s
Iteration   3: 6780059.909 ops/s
Iteration   4: 6360544.342 ops/s
Iteration   5: 6583950.270 ops/s
Iteration   6: 6914926.948 ops/s
Iteration   7: 6510548.121 ops/s
Iteration   8: 6884487.209 ops/s
Iteration   9: 6467416.213 ops/s
Iteration  10: 6617768.512 ops/s
Iteration  11: 6838965.391 ops/s
Iteration  12: 6510015.390 ops/s
Iteration  13: 6742768.109 ops/s
Iteration  14: 6793544.435 ops/s
Iteration  15: 6474475.103 ops/s
Iteration  16: 6764754.257 ops/s
Iteration  17: 6553218.613 ops/s
Iteration  18: 6610362.937 ops/s
Iteration  19: 6540115.702 ops/s
Iteration  20: 6822697.528 ops/s
Iteration  21: 6441846.267 ops/s
Iteration  22: 6607348.874 ops/s
Iteration  23: 6525583.756 ops/s
Iteration  24: 6662255.622 ops/s
Iteration  25: 6624435.855 ops/s
Iteration  26: 6660405.376 ops/s
Iteration  27: 6800881.642 ops/s
Iteration  28: 6503534.949 ops/s
Iteration  29: 6681624.854 ops/s
Iteration  30: 6609029.546 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_customFusion":
  6644194.036 ±(99.9%) 98615.975 ops/s [Average]
  (min, avg, max) = (6360544.342, 6644194.036, 6914926.948), stdev = 147603.760
  CI (99.9%): [6545578.061, 6742810.011] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_customFusion  thrpt   30  6644194.036 ± 98615.975  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_customFusionClear$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_customFusionClear

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1995434.461 ops/s
# Warmup Iteration   2: 5525502.309 ops/s
# Warmup Iteration   3: 7874034.734 ops/s
# Warmup Iteration   4: 7590884.597 ops/s
# Warmup Iteration   5: 7957663.974 ops/s
# Warmup Iteration   6: 7550296.990 ops/s
# Warmup Iteration   7: 7625152.053 ops/s
# Warmup Iteration   8: 7925136.187 ops/s
# Warmup Iteration   9: 7421977.128 ops/s
# Warmup Iteration  10: 7724665.960 ops/s
# Warmup Iteration  11: 7906147.892 ops/s
# Warmup Iteration  12: 7623348.483 ops/s
# Warmup Iteration  13: 7729531.139 ops/s
# Warmup Iteration  14: 8040821.419 ops/s
# Warmup Iteration  15: 7418898.583 ops/s
# Warmup Iteration  16: 7913525.740 ops/s
# Warmup Iteration  17: 7877979.368 ops/s
# Warmup Iteration  18: 7490560.739 ops/s
# Warmup Iteration  19: 7833586.967 ops/s
# Warmup Iteration  20: 7535064.308 ops/s
# Warmup Iteration  21: 7777248.271 ops/s
# Warmup Iteration  22: 7546496.071 ops/s
# Warmup Iteration  23: 7962802.559 ops/s
# Warmup Iteration  24: 7615800.263 ops/s
# Warmup Iteration  25: 7679436.913 ops/s
# Warmup Iteration  26: 7532906.603 ops/s
# Warmup Iteration  27: 7909752.916 ops/s
# Warmup Iteration  28: 7653943.432 ops/s
# Warmup Iteration  29: 7496530.378 ops/s
# Warmup Iteration  30: 7910897.552 ops/s
Iteration   1: 7608019.314 ops/s
Iteration   2: 7678071.432 ops/s
Iteration   3: 7823860.470 ops/s
Iteration   4: 7589862.989 ops/s
Iteration   5: 7719957.568 ops/s
Iteration   6: 7570373.557 ops/s
Iteration   7: 7691982.158 ops/s
Iteration   8: 7816270.127 ops/s
Iteration   9: 7653530.474 ops/s
Iteration  10: 7828019.052 ops/s
Iteration  11: 7449209.142 ops/s
Iteration  12: 7803007.448 ops/s
Iteration  13: 7889772.256 ops/s
Iteration  14: 7995249.510 ops/s
Iteration  15: 7650482.914 ops/s
Iteration  16: 7482184.513 ops/s
Iteration  17: 7500760.849 ops/s
Iteration  18: 7902103.785 ops/s
Iteration  19: 7542064.473 ops/s
Iteration  20: 7704873.161 ops/s
Iteration  21: 7843437.819 ops/s
Iteration  22: 7753514.169 ops/s
Iteration  23: 7662515.811 ops/s
Iteration  24: 7930893.584 ops/s
Iteration  25: 7593578.151 ops/s
Iteration  26: 7879211.884 ops/s
Iteration  27: 7477534.069 ops/s
Iteration  28: 7591921.608 ops/s
Iteration  29: 7845359.924 ops/s
Iteration  30: 7689340.156 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_customFusionClear":
  7705565.412 ±(99.9%) 99324.178 ops/s [Average]
  (min, avg, max) = (7449209.142, 7705565.412, 7995249.510), stdev = 148663.765
  CI (99.9%): [7606241.234, 7804889.590] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_customFusionClear  thrpt   30  7705565.412 ± 99324.178  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_noOpConnect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_noOpConnect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1061371.718 ops/s
# Warmup Iteration   2: 3064275.940 ops/s
# Warmup Iteration   3: 4186497.418 ops/s
# Warmup Iteration   4: 4538638.040 ops/s
# Warmup Iteration   5: 4929741.187 ops/s
# Warmup Iteration   6: 4511610.572 ops/s
# Warmup Iteration   7: 4011175.492 ops/s
# Warmup Iteration   8: 4946041.199 ops/s
# Warmup Iteration   9: 4666898.693 ops/s
# Warmup Iteration  10: 4773593.228 ops/s
# Warmup Iteration  11: 4600914.211 ops/s
# Warmup Iteration  12: 4747723.958 ops/s
# Warmup Iteration  13: 4886913.338 ops/s
# Warmup Iteration  14: 4574755.778 ops/s
# Warmup Iteration  15: 4963352.404 ops/s
# Warmup Iteration  16: 4776689.827 ops/s
# Warmup Iteration  17: 4835312.299 ops/s
# Warmup Iteration  18: 4706207.811 ops/s
# Warmup Iteration  19: 4861861.364 ops/s
# Warmup Iteration  20: 4790450.050 ops/s
# Warmup Iteration  21: 4706427.615 ops/s
# Warmup Iteration  22: 4840008.272 ops/s
# Warmup Iteration  23: 4777773.875 ops/s
# Warmup Iteration  24: 4752369.061 ops/s
# Warmup Iteration  25: 4711542.759 ops/s
# Warmup Iteration  26: 4894106.978 ops/s
# Warmup Iteration  27: 4671813.649 ops/s
# Warmup Iteration  28: 4861376.947 ops/s
# Warmup Iteration  29: 4750767.774 ops/s
# Warmup Iteration  30: 4891037.608 ops/s
Iteration   1: 4641821.366 ops/s
Iteration   2: 4918702.887 ops/s
Iteration   3: 4815190.592 ops/s
Iteration   4: 4642276.923 ops/s
Iteration   5: 4859982.385 ops/s
Iteration   6: 4710554.661 ops/s
Iteration   7: 4706807.131 ops/s
Iteration   8: 4919336.270 ops/s
Iteration   9: 4671469.756 ops/s
Iteration  10: 4894668.287 ops/s
Iteration  11: 4689433.209 ops/s
Iteration  12: 4820007.778 ops/s
Iteration  13: 4732909.924 ops/s
Iteration  14: 4758846.891 ops/s
Iteration  15: 4816425.905 ops/s
Iteration  16: 4872645.563 ops/s
Iteration  17: 4597388.276 ops/s
Iteration  18: 4872265.886 ops/s
Iteration  19: 4834119.702 ops/s
Iteration  20: 4752511.615 ops/s
Iteration  21: 4747825.929 ops/s
Iteration  22: 4740691.777 ops/s
Iteration  23: 4862625.089 ops/s
Iteration  24: 4762085.972 ops/s
Iteration  25: 4762358.962 ops/s
Iteration  26: 4892300.949 ops/s
Iteration  27: 4744796.316 ops/s
Iteration  28: 4649790.369 ops/s
Iteration  29: 5024458.755 ops/s
Iteration  30: 4636100.132 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_noOpConnect":
  4778346.642 ±(99.9%) 68921.631 ops/s [Average]
  (min, avg, max) = (4597388.276, 4778346.642, 5024458.755), stdev = 103158.661
  CI (99.9%): [4709425.011, 4847268.273] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableRefCountTest._Benchmark.benchmark_noOpConnect  thrpt   30  4778346.642 ± 68921.631  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_zipperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_zipperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 139850.229 ops/s
# Warmup Iteration   2: 464876.267 ops/s
# Warmup Iteration   3: 524767.466 ops/s
# Warmup Iteration   4: 485063.740 ops/s
# Warmup Iteration   5: 573764.798 ops/s
# Warmup Iteration   6: 500381.767 ops/s
# Warmup Iteration   7: 571011.872 ops/s
# Warmup Iteration   8: 551018.226 ops/s
# Warmup Iteration   9: 562741.550 ops/s
# Warmup Iteration  10: 545785.270 ops/s
# Warmup Iteration  11: 556902.936 ops/s
# Warmup Iteration  12: 556443.361 ops/s
# Warmup Iteration  13: 548887.552 ops/s
# Warmup Iteration  14: 576299.218 ops/s
# Warmup Iteration  15: 535748.082 ops/s
# Warmup Iteration  16: 561207.177 ops/s
# Warmup Iteration  17: 568026.259 ops/s
# Warmup Iteration  18: 589815.786 ops/s
# Warmup Iteration  19: 582097.649 ops/s
# Warmup Iteration  20: 563963.167 ops/s
# Warmup Iteration  21: 587999.194 ops/s
# Warmup Iteration  22: 582474.074 ops/s
# Warmup Iteration  23: 575264.613 ops/s
# Warmup Iteration  24: 582671.961 ops/s
# Warmup Iteration  25: 571358.673 ops/s
# Warmup Iteration  26: 569783.755 ops/s
# Warmup Iteration  27: 590734.043 ops/s
# Warmup Iteration  28: 579543.392 ops/s
# Warmup Iteration  29: 596083.957 ops/s
# Warmup Iteration  30: 559464.197 ops/s
Iteration   1: 602384.223 ops/s
Iteration   2: 596172.519 ops/s
Iteration   3: 562895.008 ops/s
Iteration   4: 600252.514 ops/s
Iteration   5: 592733.291 ops/s
Iteration   6: 571498.205 ops/s
Iteration   7: 587134.656 ops/s
Iteration   8: 566549.409 ops/s
Iteration   9: 581552.403 ops/s
Iteration  10: 597904.815 ops/s
Iteration  11: 557127.004 ops/s
Iteration  12: 586140.780 ops/s
Iteration  13: 576759.084 ops/s
Iteration  14: 583587.315 ops/s
Iteration  15: 574751.045 ops/s
Iteration  16: 561972.982 ops/s
Iteration  17: 579479.253 ops/s
Iteration  18: 558961.184 ops/s
Iteration  19: 580956.963 ops/s
Iteration  20: 589208.802 ops/s
Iteration  21: 556073.799 ops/s
Iteration  22: 606981.750 ops/s
Iteration  23: 571884.994 ops/s
Iteration  24: 574369.433 ops/s
Iteration  25: 600505.258 ops/s
Iteration  26: 552339.581 ops/s
Iteration  27: 595688.789 ops/s
Iteration  28: 577858.848 ops/s
Iteration  29: 571458.171 ops/s
Iteration  30: 602304.456 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_zipperReturnsNull":
  580582.884 ±(99.9%) 10464.655 ops/s [Average]
  (min, avg, max) = (552339.581, 580582.884, 606981.750), stdev = 15663.005
  CI (99.9%): [570118.229, 591047.540] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
MaybeZipArrayTest._Benchmark.benchmark_zipperReturnsNull  thrpt   30  580582.884 ± 10464.655  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_zipperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_zipperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162136.180 ops/s
# Warmup Iteration   2: 388562.645 ops/s
# Warmup Iteration   3: 506571.535 ops/s
# Warmup Iteration   4: 521734.681 ops/s
# Warmup Iteration   5: 562447.538 ops/s
# Warmup Iteration   6: 508614.252 ops/s
# Warmup Iteration   7: 557369.741 ops/s
# Warmup Iteration   8: 521332.865 ops/s
# Warmup Iteration   9: 511766.400 ops/s
# Warmup Iteration  10: 526203.465 ops/s
# Warmup Iteration  11: 533702.864 ops/s
# Warmup Iteration  12: 542816.932 ops/s
# Warmup Iteration  13: 526964.337 ops/s
# Warmup Iteration  14: 556991.571 ops/s
# Warmup Iteration  15: 519713.352 ops/s
# Warmup Iteration  16: 531805.806 ops/s
# Warmup Iteration  17: 572420.692 ops/s
# Warmup Iteration  18: 535511.620 ops/s
# Warmup Iteration  19: 569105.464 ops/s
# Warmup Iteration  20: 568897.371 ops/s
# Warmup Iteration  21: 555065.082 ops/s
# Warmup Iteration  22: 575820.131 ops/s
# Warmup Iteration  23: 550429.189 ops/s
# Warmup Iteration  24: 552073.780 ops/s
# Warmup Iteration  25: 578220.604 ops/s
# Warmup Iteration  26: 549019.579 ops/s
# Warmup Iteration  27: 557474.710 ops/s
# Warmup Iteration  28: 576356.652 ops/s
# Warmup Iteration  29: 544335.908 ops/s
# Warmup Iteration  30: 561244.776 ops/s
Iteration   1: 560796.489 ops/s
Iteration   2: 554900.783 ops/s
Iteration   3: 576014.668 ops/s
Iteration   4: 541181.531 ops/s
Iteration   5: 571897.484 ops/s
Iteration   6: 547337.167 ops/s
Iteration   7: 563542.456 ops/s
Iteration   8: 544666.419 ops/s
Iteration   9: 550070.622 ops/s
Iteration  10: 570639.331 ops/s
Iteration  11: 530013.860 ops/s
Iteration  12: 551109.477 ops/s
Iteration  13: 556400.483 ops/s
Iteration  14: 531114.975 ops/s
Iteration  15: 556833.749 ops/s
Iteration  16: 584650.228 ops/s
Iteration  17: 564063.907 ops/s
Iteration  18: 567551.093 ops/s
Iteration  19: 565743.434 ops/s
Iteration  20: 556181.747 ops/s
Iteration  21: 561932.360 ops/s
Iteration  22: 571472.776 ops/s
Iteration  23: 551483.311 ops/s
Iteration  24: 575707.869 ops/s
Iteration  25: 555945.367 ops/s
Iteration  26: 552583.566 ops/s
Iteration  27: 564004.359 ops/s
Iteration  28: 549722.408 ops/s
Iteration  29: 563346.621 ops/s
Iteration  30: 535154.743 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_zipperThrows":
  557535.443 ±(99.9%) 8822.499 ops/s [Average]
  (min, avg, max) = (530013.860, 557535.443, 584650.228), stdev = 13205.102
  CI (99.9%): [548712.944, 566357.942] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeZipArrayTest._Benchmark.benchmark_zipperThrows  thrpt   30  557535.443 ± 8822.499  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161499.855 ops/s
# Warmup Iteration   2: 592009.460 ops/s
# Warmup Iteration   3: 658928.116 ops/s
# Warmup Iteration   4: 680074.478 ops/s
# Warmup Iteration   5: 596891.721 ops/s
# Warmup Iteration   6: 684014.088 ops/s
# Warmup Iteration   7: 712390.688 ops/s
# Warmup Iteration   8: 683019.448 ops/s
# Warmup Iteration   9: 705573.948 ops/s
# Warmup Iteration  10: 675976.860 ops/s
# Warmup Iteration  11: 702857.844 ops/s
# Warmup Iteration  12: 708683.577 ops/s
# Warmup Iteration  13: 693341.391 ops/s
# Warmup Iteration  14: 729025.298 ops/s
# Warmup Iteration  15: 677851.470 ops/s
# Warmup Iteration  16: 690120.873 ops/s
# Warmup Iteration  17: 737483.989 ops/s
# Warmup Iteration  18: 758959.102 ops/s
# Warmup Iteration  19: 732560.562 ops/s
# Warmup Iteration  20: 757754.939 ops/s
# Warmup Iteration  21: 721187.928 ops/s
# Warmup Iteration  22: 719881.293 ops/s
# Warmup Iteration  23: 757958.283 ops/s
# Warmup Iteration  24: 737034.965 ops/s
# Warmup Iteration  25: 710888.729 ops/s
# Warmup Iteration  26: 743903.153 ops/s
# Warmup Iteration  27: 723444.155 ops/s
# Warmup Iteration  28: 750341.069 ops/s
# Warmup Iteration  29: 768365.197 ops/s
# Warmup Iteration  30: 713672.217 ops/s
Iteration   1: 741761.340 ops/s
Iteration   2: 738589.820 ops/s
Iteration   3: 745377.174 ops/s
Iteration   4: 710068.750 ops/s
Iteration   5: 745334.978 ops/s
Iteration   6: 755330.114 ops/s
Iteration   7: 724389.724 ops/s
Iteration   8: 740817.699 ops/s
Iteration   9: 730803.993 ops/s
Iteration  10: 735045.043 ops/s
Iteration  11: 732800.706 ops/s
Iteration  12: 718530.866 ops/s
Iteration  13: 732426.530 ops/s
Iteration  14: 738372.667 ops/s
Iteration  15: 746976.954 ops/s
Iteration  16: 715612.312 ops/s
Iteration  17: 726661.487 ops/s
Iteration  18: 764006.973 ops/s
Iteration  19: 712099.497 ops/s
Iteration  20: 781309.708 ops/s
Iteration  21: 709446.316 ops/s
Iteration  22: 741411.503 ops/s
Iteration  23: 742685.245 ops/s
Iteration  24: 769298.631 ops/s
Iteration  25: 750041.427 ops/s
Iteration  26: 716780.115 ops/s
Iteration  27: 756272.946 ops/s
Iteration  28: 743960.197 ops/s
Iteration  29: 613319.957 ops/s
Iteration  30: 751772.483 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_normalError":
  734376.838 ±(99.9%) 19204.777 ops/s [Average]
  (min, avg, max) = (613319.957, 734376.838, 781309.708), stdev = 28744.808
  CI (99.9%): [715172.062, 753581.615] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_normalError  thrpt   30  734376.838 ± 19204.777  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2478496.756 ops/s
# Warmup Iteration   2: 4829378.602 ops/s
# Warmup Iteration   3: 5805932.813 ops/s
# Warmup Iteration   4: 6308742.232 ops/s
# Warmup Iteration   5: 6577424.941 ops/s
# Warmup Iteration   6: 6349567.717 ops/s
# Warmup Iteration   7: 6222905.448 ops/s
# Warmup Iteration   8: 6463463.536 ops/s
# Warmup Iteration   9: 6188342.660 ops/s
# Warmup Iteration  10: 6378090.053 ops/s
# Warmup Iteration  11: 6289928.519 ops/s
# Warmup Iteration  12: 6138972.219 ops/s
# Warmup Iteration  13: 6521542.225 ops/s
# Warmup Iteration  14: 6216856.542 ops/s
# Warmup Iteration  15: 6443766.258 ops/s
# Warmup Iteration  16: 6160902.134 ops/s
# Warmup Iteration  17: 6503331.310 ops/s
# Warmup Iteration  18: 6433615.325 ops/s
# Warmup Iteration  19: 6299054.907 ops/s
# Warmup Iteration  20: 6492606.084 ops/s
# Warmup Iteration  21: 6167404.874 ops/s
# Warmup Iteration  22: 6450086.761 ops/s
# Warmup Iteration  23: 6215751.509 ops/s
# Warmup Iteration  24: 6458629.790 ops/s
# Warmup Iteration  25: 6224733.574 ops/s
# Warmup Iteration  26: 6165220.435 ops/s
# Warmup Iteration  27: 6287509.372 ops/s
# Warmup Iteration  28: 6292863.491 ops/s
# Warmup Iteration  29: 6335822.112 ops/s
# Warmup Iteration  30: 6094064.596 ops/s
Iteration   1: 6551538.777 ops/s
Iteration   2: 6520201.047 ops/s
Iteration   3: 6302693.940 ops/s
Iteration   4: 6381997.605 ops/s
Iteration   5: 6158468.912 ops/s
Iteration   6: 6526110.495 ops/s
Iteration   7: 6501385.364 ops/s
Iteration   8: 6182448.477 ops/s
Iteration   9: 6409880.709 ops/s
Iteration  10: 6238792.483 ops/s
Iteration  11: 6357557.547 ops/s
Iteration  12: 6415721.002 ops/s
Iteration  13: 6251836.969 ops/s
Iteration  14: 6492313.289 ops/s
Iteration  15: 6369669.490 ops/s
Iteration  16: 6186154.242 ops/s
Iteration  17: 6504058.661 ops/s
Iteration  18: 6316490.926 ops/s
Iteration  19: 6749180.373 ops/s
Iteration  20: 6132410.270 ops/s
Iteration  21: 6818534.565 ops/s
Iteration  22: 6373489.172 ops/s
Iteration  23: 6353702.557 ops/s
Iteration  24: 6300467.491 ops/s
Iteration  25: 6489858.523 ops/s
Iteration  26: 6461545.070 ops/s
Iteration  27: 6132149.928 ops/s
Iteration  28: 7046315.580 ops/s
Iteration  29: 6560151.424 ops/s
Iteration  30: 6513186.778 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_cancel":
  6419943.722 ±(99.9%) 136552.385 ops/s [Average]
  (min, avg, max) = (6132149.928, 6419943.722, 7046315.580), stdev = 204385.197
  CI (99.9%): [6283391.337, 6556496.107] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score        Error  Units
MaybeToFutureTest._Benchmark.benchmark_cancel  thrpt   30  6419943.722 ± 136552.385  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_cancel2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_cancel2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2664103.872 ops/s
# Warmup Iteration   2: 5840038.319 ops/s
# Warmup Iteration   3: 5471626.481 ops/s
# Warmup Iteration   4: 6740073.734 ops/s
# Warmup Iteration   5: 6504225.587 ops/s
# Warmup Iteration   6: 6397483.679 ops/s
# Warmup Iteration   7: 6676737.909 ops/s
# Warmup Iteration   8: 6793412.364 ops/s
# Warmup Iteration   9: 7144905.802 ops/s
# Warmup Iteration  10: 6083891.627 ops/s
# Warmup Iteration  11: 6419363.789 ops/s
# Warmup Iteration  12: 6254478.803 ops/s
# Warmup Iteration  13: 6435516.936 ops/s
# Warmup Iteration  14: 6494826.684 ops/s
# Warmup Iteration  15: 6125798.452 ops/s
# Warmup Iteration  16: 6250132.815 ops/s
# Warmup Iteration  17: 6507632.876 ops/s
# Warmup Iteration  18: 6212970.036 ops/s
# Warmup Iteration  19: 6443317.746 ops/s
# Warmup Iteration  20: 6278949.031 ops/s
# Warmup Iteration  21: 6457464.169 ops/s
# Warmup Iteration  22: 6479580.173 ops/s
# Warmup Iteration  23: 6175521.838 ops/s
# Warmup Iteration  24: 6203867.039 ops/s
# Warmup Iteration  25: 6407678.842 ops/s
# Warmup Iteration  26: 6175091.091 ops/s
# Warmup Iteration  27: 6467146.592 ops/s
# Warmup Iteration  28: 6192943.391 ops/s
# Warmup Iteration  29: 6526524.333 ops/s
# Warmup Iteration  30: 6571025.299 ops/s
Iteration   1: 6158055.419 ops/s
Iteration   2: 6337145.463 ops/s
Iteration   3: 6205586.379 ops/s
Iteration   4: 6342655.324 ops/s
Iteration   5: 6539386.783 ops/s
Iteration   6: 6109527.806 ops/s
Iteration   7: 6408972.709 ops/s
Iteration   8: 6331069.011 ops/s
Iteration   9: 6301789.570 ops/s
Iteration  10: 6418168.210 ops/s
Iteration  11: 6158197.330 ops/s
Iteration  12: 6418452.528 ops/s
Iteration  13: 6358150.614 ops/s
Iteration  14: 6333658.014 ops/s
Iteration  15: 6534866.328 ops/s
Iteration  16: 6073624.882 ops/s
Iteration  17: 6444553.097 ops/s
Iteration  18: 6507672.315 ops/s
Iteration  19: 6213269.537 ops/s
Iteration  20: 6438771.458 ops/s
Iteration  21: 6386561.227 ops/s
Iteration  22: 6297890.064 ops/s
Iteration  23: 6060194.697 ops/s
Iteration  24: 5718211.720 ops/s
Iteration  25: 6297590.228 ops/s
Iteration  26: 6608510.325 ops/s
Iteration  27: 6169483.057 ops/s
Iteration  28: 6180570.478 ops/s
Iteration  29: 6534179.737 ops/s
Iteration  30: 6255784.706 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeToFutureTest._Benchmark.benchmark_cancel2":
  6304751.634 ±(99.9%) 122479.717 ops/s [Average]
  (min, avg, max) = (5718211.720, 6304751.634, 6608510.325), stdev = 183321.888
  CI (99.9%): [6182271.917, 6427231.351] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
MaybeToFutureTest._Benchmark.benchmark_cancel2  thrpt   30  6304751.634 ± 122479.717  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_retryWhenFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_retryWhenFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 141359.815 ops/s
# Warmup Iteration   2: 324356.125 ops/s
# Warmup Iteration   3: 324320.701 ops/s
# Warmup Iteration   4: 345162.151 ops/s
# Warmup Iteration   5: 361643.215 ops/s
# Warmup Iteration   6: 345425.854 ops/s
# Warmup Iteration   7: 351451.421 ops/s
# Warmup Iteration   8: 348216.935 ops/s
# Warmup Iteration   9: 344583.895 ops/s
# Warmup Iteration  10: 355072.869 ops/s
# Warmup Iteration  11: 347524.196 ops/s
# Warmup Iteration  12: 335528.772 ops/s
# Warmup Iteration  13: 351401.126 ops/s
# Warmup Iteration  14: 356815.543 ops/s
# Warmup Iteration  15: 333017.749 ops/s
# Warmup Iteration  16: 364459.441 ops/s
# Warmup Iteration  17: 365106.473 ops/s
# Warmup Iteration  18: 355216.494 ops/s
# Warmup Iteration  19: 376331.621 ops/s
# Warmup Iteration  20: 370202.922 ops/s
# Warmup Iteration  21: 375163.918 ops/s
# Warmup Iteration  22: 356103.831 ops/s
# Warmup Iteration  23: 373013.102 ops/s
# Warmup Iteration  24: 374362.300 ops/s
# Warmup Iteration  25: 373026.842 ops/s
# Warmup Iteration  26: 372775.486 ops/s
# Warmup Iteration  27: 361218.798 ops/s
# Warmup Iteration  28: 387151.365 ops/s
# Warmup Iteration  29: 362369.533 ops/s
# Warmup Iteration  30: 364830.100 ops/s
Iteration   1: 382981.295 ops/s
Iteration   2: 382757.080 ops/s
Iteration   3: 360423.542 ops/s
Iteration   4: 383106.654 ops/s
Iteration   5: 366758.791 ops/s
Iteration   6: 373364.406 ops/s
Iteration   7: 373251.570 ops/s
Iteration   8: 363589.002 ops/s
Iteration   9: 367858.156 ops/s
Iteration  10: 384454.042 ops/s
Iteration  11: 372643.799 ops/s
Iteration  12: 383658.344 ops/s
Iteration  13: 363368.350 ops/s
Iteration  14: 375482.891 ops/s
Iteration  15: 377177.027 ops/s
Iteration  16: 363758.533 ops/s
Iteration  17: 383925.420 ops/s
Iteration  18: 380782.726 ops/s
Iteration  19: 370953.329 ops/s
Iteration  20: 382092.115 ops/s
Iteration  21: 371523.766 ops/s
Iteration  22: 370326.338 ops/s
Iteration  23: 373563.423 ops/s
Iteration  24: 373753.145 ops/s
Iteration  25: 370136.907 ops/s
Iteration  26: 382482.090 ops/s
Iteration  27: 360809.515 ops/s
Iteration  28: 374732.756 ops/s
Iteration  29: 364706.644 ops/s
Iteration  30: 380928.209 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_retryWhenFunctionReturnsNull":
  373844.995 ±(99.9%) 5104.713 ops/s [Average]
  (min, avg, max) = (360423.542, 373844.995, 384454.042), stdev = 7640.495
  CI (99.9%): [368740.282, 378949.708] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_retryWhenFunctionReturnsNull  thrpt   30  373844.995 ± 5104.713  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concat2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concat2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 335306.781 ops/s
# Warmup Iteration   2: 1676582.612 ops/s
# Warmup Iteration   3: 2087784.434 ops/s
# Warmup Iteration   4: 2104054.829 ops/s
# Warmup Iteration   5: 1948367.673 ops/s
# Warmup Iteration   6: 1996774.024 ops/s
# Warmup Iteration   7: 2185269.487 ops/s
# Warmup Iteration   8: 2260169.367 ops/s
# Warmup Iteration   9: 2064775.464 ops/s
# Warmup Iteration  10: 2219566.534 ops/s
# Warmup Iteration  11: 2094612.849 ops/s
# Warmup Iteration  12: 2122903.333 ops/s
# Warmup Iteration  13: 2184076.132 ops/s
# Warmup Iteration  14: 2086386.943 ops/s
# Warmup Iteration  15: 2223962.643 ops/s
# Warmup Iteration  16: 2181420.608 ops/s
# Warmup Iteration  17: 2126685.611 ops/s
# Warmup Iteration  18: 2213652.750 ops/s
# Warmup Iteration  19: 2094132.228 ops/s
# Warmup Iteration  20: 2248867.499 ops/s
# Warmup Iteration  21: 2124363.075 ops/s
# Warmup Iteration  22: 2119345.024 ops/s
# Warmup Iteration  23: 2171714.749 ops/s
# Warmup Iteration  24: 2105707.041 ops/s
# Warmup Iteration  25: 2096436.073 ops/s
# Warmup Iteration  26: 2184910.433 ops/s
# Warmup Iteration  27: 2076168.080 ops/s
# Warmup Iteration  28: 2178080.597 ops/s
# Warmup Iteration  29: 2148771.896 ops/s
# Warmup Iteration  30: 2163727.981 ops/s
Iteration   1: 2139817.550 ops/s
Iteration   2: 2180048.285 ops/s
Iteration   3: 2197205.591 ops/s
Iteration   4: 2152458.616 ops/s
Iteration   5: 2214137.881 ops/s
Iteration   6: 2067670.852 ops/s
Iteration   7: 2193838.137 ops/s
Iteration   8: 2207589.843 ops/s
Iteration   9: 2123919.856 ops/s
Iteration  10: 2224903.952 ops/s
Iteration  11: 2115260.399 ops/s
Iteration  12: 2237622.574 ops/s
Iteration  13: 2124886.647 ops/s
Iteration  14: 2108015.229 ops/s
Iteration  15: 2227575.988 ops/s
Iteration  16: 2147061.051 ops/s
Iteration  17: 2116657.920 ops/s
Iteration  18: 1540224.728 ops/s
Iteration  19: 2139329.270 ops/s
Iteration  20: 2234218.183 ops/s
Iteration  21: 2135359.237 ops/s
Iteration  22: 2138645.481 ops/s
Iteration  23: 2240020.948 ops/s
Iteration  24: 2137140.468 ops/s
Iteration  25: 2136561.294 ops/s
Iteration  26: 2214685.792 ops/s
Iteration  27: 2111716.083 ops/s
Iteration  28: 2179296.374 ops/s
Iteration  29: 2105863.038 ops/s
Iteration  30: 2211378.527 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concat2":
  2143436.993 ±(99.9%) 82560.413 ops/s [Average]
  (min, avg, max) = (1540224.728, 2143436.993, 2240020.948), stdev = 123572.550
  CI (99.9%): [2060876.580, 2225997.407] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
SingleConcatTest._Benchmark.benchmark_concat2  thrpt   30  2143436.993 ± 82560.413  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatWith$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatWith

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 376287.157 ops/s
# Warmup Iteration   2: 1552594.660 ops/s
# Warmup Iteration   3: 2029967.652 ops/s
# Warmup Iteration   4: 2190570.273 ops/s
# Warmup Iteration   5: 2080484.088 ops/s
# Warmup Iteration   6: 2130583.684 ops/s
# Warmup Iteration   7: 2170971.226 ops/s
# Warmup Iteration   8: 2127806.372 ops/s
# Warmup Iteration   9: 2131301.040 ops/s
# Warmup Iteration  10: 2109061.649 ops/s
# Warmup Iteration  11: 2006100.417 ops/s
# Warmup Iteration  12: 2222256.779 ops/s
# Warmup Iteration  13: 2197143.683 ops/s
# Warmup Iteration  14: 2140633.167 ops/s
# Warmup Iteration  15: 2204813.417 ops/s
# Warmup Iteration  16: 2152769.605 ops/s
# Warmup Iteration  17: 2053642.852 ops/s
# Warmup Iteration  18: 2258907.015 ops/s
# Warmup Iteration  19: 2096864.767 ops/s
# Warmup Iteration  20: 2221862.620 ops/s
# Warmup Iteration  21: 2142431.415 ops/s
# Warmup Iteration  22: 2141401.598 ops/s
# Warmup Iteration  23: 2140304.871 ops/s
# Warmup Iteration  24: 2147665.153 ops/s
# Warmup Iteration  25: 2060514.544 ops/s
# Warmup Iteration  26: 2211602.973 ops/s
# Warmup Iteration  27: 2170178.273 ops/s
# Warmup Iteration  28: 2147710.806 ops/s
# Warmup Iteration  29: 2214974.951 ops/s
# Warmup Iteration  30: 2168503.478 ops/s
Iteration   1: 2188890.083 ops/s
Iteration   2: 2103372.785 ops/s
Iteration   3: 2214371.868 ops/s
Iteration   4: 2165515.062 ops/s
Iteration   5: 2158035.745 ops/s
Iteration   6: 2139503.571 ops/s
Iteration   7: 2136503.695 ops/s
Iteration   8: 2222268.832 ops/s
Iteration   9: 2142807.486 ops/s
Iteration  10: 2212364.911 ops/s
Iteration  11: 2162237.802 ops/s
Iteration  12: 2206413.485 ops/s
Iteration  13: 2163814.273 ops/s
Iteration  14: 2112300.342 ops/s
Iteration  15: 2233624.881 ops/s
Iteration  16: 2235645.805 ops/s
Iteration  17: 2106910.545 ops/s
Iteration  18: 2251087.893 ops/s
Iteration  19: 2116712.015 ops/s
Iteration  20: 2196862.525 ops/s
Iteration  21: 2190685.454 ops/s
Iteration  22: 2115890.058 ops/s
Iteration  23: 2177616.158 ops/s
Iteration  24: 2164122.353 ops/s
Iteration  25: 2174433.749 ops/s
Iteration  26: 2185979.543 ops/s
Iteration  27: 2129393.149 ops/s
Iteration  28: 2274719.515 ops/s
Iteration  29: 2251755.652 ops/s
Iteration  30: 2167523.954 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concatWith":
  2176712.106 ±(99.9%) 31177.559 ops/s [Average]
  (min, avg, max) = (2103372.785, 2176712.106, 2274719.515), stdev = 46665.106
  CI (99.9%): [2145534.548, 2207889.665] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SingleConcatTest._Benchmark.benchmark_concatWith  thrpt   30  2176712.106 ± 31177.559  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concat3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concat3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 241670.900 ops/s
# Warmup Iteration   2: 1400215.581 ops/s
# Warmup Iteration   3: 1576660.939 ops/s
# Warmup Iteration   4: 1591969.995 ops/s
# Warmup Iteration   5: 1825146.875 ops/s
# Warmup Iteration   6: 1864257.611 ops/s
# Warmup Iteration   7: 1816846.980 ops/s
# Warmup Iteration   8: 1747613.717 ops/s
# Warmup Iteration   9: 1900041.471 ops/s
# Warmup Iteration  10: 1850359.453 ops/s
# Warmup Iteration  11: 1812010.774 ops/s
# Warmup Iteration  12: 1815485.992 ops/s
# Warmup Iteration  13: 1784902.783 ops/s
# Warmup Iteration  14: 1852747.882 ops/s
# Warmup Iteration  15: 1865695.273 ops/s
# Warmup Iteration  16: 1771500.316 ops/s
# Warmup Iteration  17: 1804710.791 ops/s
# Warmup Iteration  18: 1844407.757 ops/s
# Warmup Iteration  19: 1760166.501 ops/s
# Warmup Iteration  20: 1868725.888 ops/s
# Warmup Iteration  21: 1828326.263 ops/s
# Warmup Iteration  22: 1751955.453 ops/s
# Warmup Iteration  23: 1886891.311 ops/s
# Warmup Iteration  24: 1814955.597 ops/s
# Warmup Iteration  25: 1790621.218 ops/s
# Warmup Iteration  26: 1819653.745 ops/s
# Warmup Iteration  27: 1786856.886 ops/s
# Warmup Iteration  28: 1774190.961 ops/s
# Warmup Iteration  29: 1830140.164 ops/s
# Warmup Iteration  30: 1778847.041 ops/s
Iteration   1: 1844018.300 ops/s
Iteration   2: 1852587.869 ops/s
Iteration   3: 1761220.911 ops/s
Iteration   4: 1844252.209 ops/s
Iteration   5: 1768478.785 ops/s
Iteration   6: 1815840.259 ops/s
Iteration   7: 1802832.690 ops/s
Iteration   8: 1758579.474 ops/s
Iteration   9: 1804971.654 ops/s
Iteration  10: 1736196.221 ops/s
Iteration  11: 1863801.689 ops/s
Iteration  12: 1374562.249 ops/s
Iteration  13: 1725259.260 ops/s
Iteration  14: 1816419.592 ops/s
Iteration  15: 1779126.942 ops/s
Iteration  16: 1772012.451 ops/s
Iteration  17: 1783585.300 ops/s
Iteration  18: 1815336.736 ops/s
Iteration  19: 1823590.900 ops/s
Iteration  20: 1883410.601 ops/s
Iteration  21: 1845489.238 ops/s
Iteration  22: 1730817.950 ops/s
Iteration  23: 1825348.489 ops/s
Iteration  24: 1812408.695 ops/s
Iteration  25: 1733366.826 ops/s
Iteration  26: 1817433.292 ops/s
Iteration  27: 1768430.675 ops/s
Iteration  28: 1751013.352 ops/s
Iteration  29: 1820450.203 ops/s
Iteration  30: 1747180.592 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concat3":
  1782600.780 ±(99.9%) 58889.740 ops/s [Average]
  (min, avg, max) = (1374562.249, 1782600.780, 1883410.601), stdev = 88143.397
  CI (99.9%): [1723711.041, 1841490.520] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
SingleConcatTest._Benchmark.benchmark_concat3  thrpt   30  1782600.780 ± 58889.740  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concat4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concat4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 313301.427 ops/s
# Warmup Iteration   2: 1219203.408 ops/s
# Warmup Iteration   3: 1374096.283 ops/s
# Warmup Iteration   4: 1565969.147 ops/s
# Warmup Iteration   5: 1481352.071 ops/s
# Warmup Iteration   6: 1535160.051 ops/s
# Warmup Iteration   7: 1472618.677 ops/s
# Warmup Iteration   8: 1472808.729 ops/s
# Warmup Iteration   9: 1401715.956 ops/s
# Warmup Iteration  10: 1578549.487 ops/s
# Warmup Iteration  11: 1454206.238 ops/s
# Warmup Iteration  12: 1547445.219 ops/s
# Warmup Iteration  13: 1510435.780 ops/s
# Warmup Iteration  14: 1552894.152 ops/s
# Warmup Iteration  15: 1488961.032 ops/s
# Warmup Iteration  16: 1495086.502 ops/s
# Warmup Iteration  17: 1518363.960 ops/s
# Warmup Iteration  18: 1507369.353 ops/s
# Warmup Iteration  19: 1571051.170 ops/s
# Warmup Iteration  20: 1517359.057 ops/s
# Warmup Iteration  21: 1574347.097 ops/s
# Warmup Iteration  22: 1541132.054 ops/s
# Warmup Iteration  23: 1494061.686 ops/s
# Warmup Iteration  24: 1597716.945 ops/s
# Warmup Iteration  25: 1461478.157 ops/s
# Warmup Iteration  26: 1512729.079 ops/s
# Warmup Iteration  27: 1572725.733 ops/s
# Warmup Iteration  28: 1590817.329 ops/s
# Warmup Iteration  29: 1498134.128 ops/s
# Warmup Iteration  30: 1528108.942 ops/s
Iteration   1: 1520942.704 ops/s
Iteration   2: 1548163.935 ops/s
Iteration   3: 1530041.813 ops/s
Iteration   4: 1548101.699 ops/s
Iteration   5: 1520047.790 ops/s
Iteration   6: 1525328.799 ops/s
Iteration   7: 1560557.609 ops/s
Iteration   8: 1512560.881 ops/s
Iteration   9: 1552929.603 ops/s
Iteration  10: 1511288.759 ops/s
Iteration  11: 1526631.159 ops/s
Iteration  12: 1578015.525 ops/s
Iteration  13: 1542128.757 ops/s
Iteration  14: 1521700.903 ops/s
Iteration  15: 1519417.130 ops/s
Iteration  16: 1497573.591 ops/s
Iteration  17: 1487741.787 ops/s
Iteration  18: 1562956.260 ops/s
Iteration  19: 1485506.371 ops/s
Iteration  20: 1579813.679 ops/s
Iteration  21: 1515752.106 ops/s
Iteration  22: 1508657.001 ops/s
Iteration  23: 1540967.501 ops/s
Iteration  24: 1589453.428 ops/s
Iteration  25: 1492522.993 ops/s
Iteration  26: 1554380.574 ops/s
Iteration  27: 1585731.105 ops/s
Iteration  28: 1479892.608 ops/s
Iteration  29: 1511110.525 ops/s
Iteration  30: 1557176.609 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_concat4":
  1532236.440 ±(99.9%) 20339.930 ops/s [Average]
  (min, avg, max) = (1479892.608, 1532236.440, 1589453.428), stdev = 30443.852
  CI (99.9%): [1511896.510, 1552576.370] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
SingleConcatTest._Benchmark.benchmark_concat4  thrpt   30  1532236.440 ± 20339.930  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatArrayDelayErrorTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatArrayDelayErrorTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135820.304 ops/s
# Warmup Iteration   2: 433131.383 ops/s
# Warmup Iteration   3: 499862.555 ops/s
# Warmup Iteration   4: 481741.572 ops/s
# Warmup Iteration   5: 443740.817 ops/s
# Warmup Iteration   6: 514644.927 ops/s
# Warmup Iteration   7: 512580.518 ops/s
# Warmup Iteration   8: 532711.550 ops/s
# Warmup Iteration   9: 508887.639 ops/s
# Warmup Iteration  10: 531165.213 ops/s
# Warmup Iteration  11: 517065.982 ops/s
# Warmup Iteration  12: 503677.133 ops/s
# Warmup Iteration  13: 537504.275 ops/s
# Warmup Iteration  14: 509346.266 ops/s
# Warmup Iteration  15: 533880.555 ops/s
# Warmup Iteration  16: 507804.699 ops/s
# Warmup Iteration  17: 547388.938 ops/s
# Warmup Iteration  18: 541066.590 ops/s
# Warmup Iteration  19: 535902.206 ops/s
# Warmup Iteration  20: 553322.629 ops/s
# Warmup Iteration  21: 532944.519 ops/s
# Warmup Iteration  22: 536398.227 ops/s
# Warmup Iteration  23: 535884.069 ops/s
# Warmup Iteration  24: 530327.387 ops/s
# Warmup Iteration  25: 550041.510 ops/s
# Warmup Iteration  26: 521930.841 ops/s
# Warmup Iteration  27: 532585.304 ops/s
# Warmup Iteration  28: 523432.972 ops/s
# Warmup Iteration  29: 535741.279 ops/s
# Warmup Iteration  30: 538017.423 ops/s
Iteration   1: 557697.782 ops/s
Iteration   2: 545914.595 ops/s
Iteration   3: 534477.010 ops/s
Iteration   4: 564642.922 ops/s
Iteration   5: 522458.951 ops/s
Iteration   6: 550712.989 ops/s
Iteration   7: 425503.582 ops/s
Iteration   8: 549343.030 ops/s
Iteration   9: 527890.369 ops/s
Iteration  10: 553075.998 ops/s
Iteration  11: 537149.338 ops/s
Iteration  12: 550531.157 ops/s
Iteration  13: 527465.366 ops/s
Iteration  14: 532636.085 ops/s
Iteration  15: 558541.237 ops/s
Iteration  16: 522242.562 ops/s
Iteration  17: 546413.477 ops/s
Iteration  18: 556032.143 ops/s
Iteration  19: 517777.513 ops/s
Iteration  20: 555712.139 ops/s
Iteration  21: 545172.344 ops/s
Iteration  22: 531122.877 ops/s
Iteration  23: 535831.558 ops/s
Iteration  24: 535239.187 ops/s
Iteration  25: 534096.184 ops/s
Iteration  26: 551714.479 ops/s
Iteration  27: 518396.817 ops/s
Iteration  28: 553180.952 ops/s
Iteration  29: 551300.183 ops/s
Iteration  30: 540203.044 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatArrayDelayErrorTest._Benchmark.benchmark_normal":
  537749.196 ±(99.9%) 16591.867 ops/s [Average]
  (min, avg, max) = (425503.582, 537749.196, 564642.922), stdev = 24833.928
  CI (99.9%): [521157.328, 554341.063] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
SingleConcatArrayDelayErrorTest._Benchmark.benchmark_normal  thrpt   30  537749.196 ± 16591.867  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatDelayErrorTest._Benchmark.benchmark_normalPublisherPrefetch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatDelayErrorTest._Benchmark.benchmark_normalPublisherPrefetch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 99683.041 ops/s
# Warmup Iteration   2: 462253.404 ops/s
# Warmup Iteration   3: 524013.072 ops/s
# Warmup Iteration   4: 473424.577 ops/s
# Warmup Iteration   5: 528671.610 ops/s
# Warmup Iteration   6: 476712.036 ops/s
# Warmup Iteration   7: 520372.723 ops/s
# Warmup Iteration   8: 505474.442 ops/s
# Warmup Iteration   9: 532353.052 ops/s
# Warmup Iteration  10: 468114.459 ops/s
# Warmup Iteration  11: 516333.308 ops/s
# Warmup Iteration  12: 517325.855 ops/s
# Warmup Iteration  13: 531851.202 ops/s
# Warmup Iteration  14: 548557.002 ops/s
# Warmup Iteration  15: 503452.814 ops/s
# Warmup Iteration  16: 532458.362 ops/s
# Warmup Iteration  17: 533538.067 ops/s
# Warmup Iteration  18: 564361.177 ops/s
# Warmup Iteration  19: 548333.546 ops/s
# Warmup Iteration  20: 538130.300 ops/s
# Warmup Iteration  21: 567068.442 ops/s
# Warmup Iteration  22: 539989.797 ops/s
# Warmup Iteration  23: 539143.489 ops/s
# Warmup Iteration  24: 549322.294 ops/s
# Warmup Iteration  25: 532161.112 ops/s
# Warmup Iteration  26: 549032.201 ops/s
# Warmup Iteration  27: 546547.191 ops/s
# Warmup Iteration  28: 544148.094 ops/s
# Warmup Iteration  29: 556644.887 ops/s
# Warmup Iteration  30: 538601.120 ops/s
Iteration   1: 568343.664 ops/s
Iteration   2: 540762.751 ops/s
Iteration   3: 554423.303 ops/s
Iteration   4: 541941.866 ops/s
Iteration   5: 554593.610 ops/s
Iteration   6: 542338.143 ops/s
Iteration   7: 560936.434 ops/s
Iteration   8: 536188.204 ops/s
Iteration   9: 533037.334 ops/s
Iteration  10: 567539.749 ops/s
Iteration  11: 536620.208 ops/s
Iteration  12: 555717.917 ops/s
Iteration  13: 529528.283 ops/s
Iteration  14: 549258.828 ops/s
Iteration  15: 558784.845 ops/s
Iteration  16: 537819.301 ops/s
Iteration  17: 560207.689 ops/s
Iteration  18: 550664.024 ops/s
Iteration  19: 530019.277 ops/s
Iteration  20: 554878.966 ops/s
Iteration  21: 566273.361 ops/s
Iteration  22: 528042.622 ops/s
Iteration  23: 560542.178 ops/s
Iteration  24: 538191.489 ops/s
Iteration  25: 556898.247 ops/s
Iteration  26: 537841.528 ops/s
Iteration  27: 545397.181 ops/s
Iteration  28: 559711.633 ops/s
Iteration  29: 522327.491 ops/s
Iteration  30: 542805.080 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatDelayErrorTest._Benchmark.benchmark_normalPublisherPrefetch":
  547387.840 ±(99.9%) 8593.458 ops/s [Average]
  (min, avg, max) = (522327.491, 547387.840, 568343.664), stdev = 12862.284
  CI (99.9%): [538794.382, 555981.298] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
SingleConcatDelayErrorTest._Benchmark.benchmark_normalPublisherPrefetch  thrpt   30  547387.840 ± 8593.458  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatDelayErrorTest._Benchmark.benchmark_normalPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatDelayErrorTest._Benchmark.benchmark_normalPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77989.666 ops/s
# Warmup Iteration   2: 398388.363 ops/s
# Warmup Iteration   3: 473804.827 ops/s
# Warmup Iteration   4: 453431.198 ops/s
# Warmup Iteration   5: 510237.976 ops/s
# Warmup Iteration   6: 519557.036 ops/s
# Warmup Iteration   7: 505500.885 ops/s
# Warmup Iteration   8: 528915.305 ops/s
# Warmup Iteration   9: 501748.100 ops/s
# Warmup Iteration  10: 505628.097 ops/s
# Warmup Iteration  11: 514137.469 ops/s
# Warmup Iteration  12: 528445.647 ops/s
# Warmup Iteration  13: 503761.814 ops/s
# Warmup Iteration  14: 514652.532 ops/s
# Warmup Iteration  15: 505233.409 ops/s
# Warmup Iteration  16: 527063.714 ops/s
# Warmup Iteration  17: 521411.278 ops/s
# Warmup Iteration  18: 542225.927 ops/s
# Warmup Iteration  19: 518575.723 ops/s
# Warmup Iteration  20: 532174.640 ops/s
# Warmup Iteration  21: 544835.780 ops/s
# Warmup Iteration  22: 522689.415 ops/s
# Warmup Iteration  23: 546990.660 ops/s
# Warmup Iteration  24: 518162.395 ops/s
# Warmup Iteration  25: 536908.597 ops/s
# Warmup Iteration  26: 524785.863 ops/s
# Warmup Iteration  27: 501736.646 ops/s
# Warmup Iteration  28: 551995.143 ops/s
# Warmup Iteration  29: 521250.739 ops/s
# Warmup Iteration  30: 551913.647 ops/s
Iteration   1: 485654.453 ops/s
Iteration   2: 453603.840 ops/s
Iteration   3: 547575.936 ops/s
Iteration   4: 533112.884 ops/s
Iteration   5: 536001.288 ops/s
Iteration   6: 524256.209 ops/s
Iteration   7: 544834.158 ops/s
Iteration   8: 545026.978 ops/s
Iteration   9: 516105.514 ops/s
Iteration  10: 547097.175 ops/s
Iteration  11: 523747.209 ops/s
Iteration  12: 542723.535 ops/s
Iteration  13: 532709.548 ops/s
Iteration  14: 527074.438 ops/s
Iteration  15: 533036.983 ops/s
Iteration  16: 543903.022 ops/s
Iteration  17: 518537.370 ops/s
Iteration  18: 546979.509 ops/s
Iteration  19: 530303.357 ops/s
Iteration  20: 539670.077 ops/s
Iteration  21: 530457.124 ops/s
Iteration  22: 547645.899 ops/s
Iteration  23: 531582.757 ops/s
Iteration  24: 543762.358 ops/s
Iteration  25: 516373.621 ops/s
Iteration  26: 530914.830 ops/s
Iteration  27: 540967.426 ops/s
Iteration  28: 528385.346 ops/s
Iteration  29: 526280.108 ops/s
Iteration  30: 537063.735 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatDelayErrorTest._Benchmark.benchmark_normalPublisher":
  530179.556 ±(99.9%) 12970.693 ops/s [Average]
  (min, avg, max) = (453603.840, 530179.556, 547645.899), stdev = 19413.924
  CI (99.9%): [517208.863, 543150.249] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
SingleConcatDelayErrorTest._Benchmark.benchmark_normalPublisher  thrpt   30  530179.556 ± 12970.693  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 387507.383 ops/s
# Warmup Iteration   2: 1155981.034 ops/s
# Warmup Iteration   3: 1358978.881 ops/s
# Warmup Iteration   4: 1339122.778 ops/s
# Warmup Iteration   5: 1450599.240 ops/s
# Warmup Iteration   6: 1417486.416 ops/s
# Warmup Iteration   7: 1391395.039 ops/s
# Warmup Iteration   8: 1419475.155 ops/s
# Warmup Iteration   9: 1412041.194 ops/s
# Warmup Iteration  10: 1404186.911 ops/s
# Warmup Iteration  11: 1444947.114 ops/s
# Warmup Iteration  12: 1301339.499 ops/s
# Warmup Iteration  13: 1472884.005 ops/s
# Warmup Iteration  14: 1401225.730 ops/s
# Warmup Iteration  15: 1320311.104 ops/s
# Warmup Iteration  16: 1404285.682 ops/s
# Warmup Iteration  17: 1448055.972 ops/s
# Warmup Iteration  18: 1413180.474 ops/s
# Warmup Iteration  19: 1448237.791 ops/s
# Warmup Iteration  20: 1440229.530 ops/s
# Warmup Iteration  21: 1402637.604 ops/s
# Warmup Iteration  22: 1430618.251 ops/s
# Warmup Iteration  23: 1412065.937 ops/s
# Warmup Iteration  24: 1397006.098 ops/s
# Warmup Iteration  25: 1440563.201 ops/s
# Warmup Iteration  26: 1386711.638 ops/s
# Warmup Iteration  27: 1437630.292 ops/s
# Warmup Iteration  28: 1388072.838 ops/s
# Warmup Iteration  29: 1406741.360 ops/s
# Warmup Iteration  30: 1469420.728 ops/s
Iteration   1: 1398202.227 ops/s
Iteration   2: 1383339.648 ops/s
Iteration   3: 1478088.898 ops/s
Iteration   4: 1369458.428 ops/s
Iteration   5: 1376384.201 ops/s
Iteration   6: 1447738.995 ops/s
Iteration   7: 1390640.259 ops/s
Iteration   8: 1463772.526 ops/s
Iteration   9: 1434588.691 ops/s
Iteration  10: 1390664.744 ops/s
Iteration  11: 1446358.276 ops/s
Iteration  12: 1432348.898 ops/s
Iteration  13: 1438119.353 ops/s
Iteration  14: 1431903.598 ops/s
Iteration  15: 1425403.657 ops/s
Iteration  16: 1447958.864 ops/s
Iteration  17: 1355389.233 ops/s
Iteration  18: 1425369.334 ops/s
Iteration  19: 1502782.565 ops/s
Iteration  20: 1366062.154 ops/s
Iteration  21: 1468462.913 ops/s
Iteration  22: 1448040.468 ops/s
Iteration  23: 1386298.129 ops/s
Iteration  24: 1438370.514 ops/s
Iteration  25: 1376906.743 ops/s
Iteration  26: 1384229.012 ops/s
Iteration  27: 1416241.663 ops/s
Iteration  28: 1431349.268 ops/s
Iteration  29: 1394469.188 ops/s
Iteration  30: 1435644.824 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_simple":
  1419486.243 ±(99.9%) 24545.303 ops/s [Average]
  (min, avg, max) = (1355389.233, 1419486.243, 1502782.565), stdev = 36738.256
  CI (99.9%): [1394940.940, 1444031.545] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_simple  thrpt   30  1419486.243 ± 24545.303  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicSyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicSyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 168086.566 ops/s
# Warmup Iteration   2: 1038221.778 ops/s
# Warmup Iteration   3: 1177375.807 ops/s
# Warmup Iteration   4: 1282465.267 ops/s
# Warmup Iteration   5: 1312173.812 ops/s
# Warmup Iteration   6: 1286195.133 ops/s
# Warmup Iteration   7: 1308571.443 ops/s
# Warmup Iteration   8: 1253267.418 ops/s
# Warmup Iteration   9: 1298566.915 ops/s
# Warmup Iteration  10: 1286695.637 ops/s
# Warmup Iteration  11: 1282271.725 ops/s
# Warmup Iteration  12: 1289399.805 ops/s
# Warmup Iteration  13: 1265817.045 ops/s
# Warmup Iteration  14: 1311349.349 ops/s
# Warmup Iteration  15: 1280900.178 ops/s
# Warmup Iteration  16: 1311586.346 ops/s
# Warmup Iteration  17: 1269634.236 ops/s
# Warmup Iteration  18: 1320445.530 ops/s
# Warmup Iteration  19: 1277259.860 ops/s
# Warmup Iteration  20: 1273980.024 ops/s
# Warmup Iteration  21: 1359330.085 ops/s
# Warmup Iteration  22: 1275536.032 ops/s
# Warmup Iteration  23: 1288227.655 ops/s
# Warmup Iteration  24: 1336054.522 ops/s
# Warmup Iteration  25: 1276340.028 ops/s
# Warmup Iteration  26: 1023575.118 ops/s
# Warmup Iteration  27: 1322034.542 ops/s
# Warmup Iteration  28: 1253200.622 ops/s
# Warmup Iteration  29: 1327726.104 ops/s
# Warmup Iteration  30: 1351107.063 ops/s
Iteration   1: 1231148.408 ops/s
Iteration   2: 1303634.941 ops/s
Iteration   3: 1262843.533 ops/s
Iteration   4: 1273274.067 ops/s
Iteration   5: 1289395.908 ops/s
Iteration   6: 1277557.898 ops/s
Iteration   7: 1312856.410 ops/s
Iteration   8: 1276922.698 ops/s
Iteration   9: 1348205.047 ops/s
Iteration  10: 1296183.834 ops/s
Iteration  11: 1314889.942 ops/s
Iteration  12: 1265430.840 ops/s
Iteration  13: 1329595.435 ops/s
Iteration  14: 1283728.648 ops/s
Iteration  15: 1299423.558 ops/s
Iteration  16: 1231582.203 ops/s
Iteration  17: 1340901.804 ops/s
Iteration  18: 1256474.851 ops/s
Iteration  19: 1359216.844 ops/s
Iteration  20: 1290993.543 ops/s
Iteration  21: 1299352.174 ops/s
Iteration  22: 1313902.183 ops/s
Iteration  23: 1273608.671 ops/s
Iteration  24: 1344659.862 ops/s
Iteration  25: 1217853.995 ops/s
Iteration  26: 1312919.608 ops/s
Iteration  27: 1312263.037 ops/s
Iteration  28: 1316861.757 ops/s
Iteration  29: 1337686.717 ops/s
Iteration  30: 1281794.950 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicSyncFused":
  1295172.112 ±(99.9%) 23599.017 ops/s [Average]
  (min, avg, max) = (1217853.995, 1295172.112, 1359216.844), stdev = 35321.900
  CI (99.9%): [1271573.096, 1318771.129] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_basicSyncFused  thrpt   30  1295172.112 ± 23599.017  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 286878.568 ops/s
# Warmup Iteration   2: 1025448.633 ops/s
# Warmup Iteration   3: 1510619.120 ops/s
# Warmup Iteration   4: 1442976.828 ops/s
# Warmup Iteration   5: 1491256.818 ops/s
# Warmup Iteration   6: 1485525.345 ops/s
# Warmup Iteration   7: 1398400.778 ops/s
# Warmup Iteration   8: 1467634.013 ops/s
# Warmup Iteration   9: 1425082.701 ops/s
# Warmup Iteration  10: 1458754.927 ops/s
# Warmup Iteration  11: 1456987.113 ops/s
# Warmup Iteration  12: 1407202.368 ops/s
# Warmup Iteration  13: 1512070.565 ops/s
# Warmup Iteration  14: 1403955.667 ops/s
# Warmup Iteration  15: 1423284.667 ops/s
# Warmup Iteration  16: 1483854.392 ops/s
# Warmup Iteration  17: 1431257.815 ops/s
# Warmup Iteration  18: 1447109.176 ops/s
# Warmup Iteration  19: 1431170.213 ops/s
# Warmup Iteration  20: 1464492.697 ops/s
# Warmup Iteration  21: 1422268.191 ops/s
# Warmup Iteration  22: 1492966.334 ops/s
# Warmup Iteration  23: 1461634.530 ops/s
# Warmup Iteration  24: 1450317.300 ops/s
# Warmup Iteration  25: 1315508.800 ops/s
# Warmup Iteration  26: 1414920.496 ops/s
# Warmup Iteration  27: 1490959.817 ops/s
# Warmup Iteration  28: 1455394.399 ops/s
# Warmup Iteration  29: 1504674.773 ops/s
# Warmup Iteration  30: 1438009.974 ops/s
Iteration   1: 1432137.778 ops/s
Iteration   2: 1520870.653 ops/s
Iteration   3: 1429937.452 ops/s
Iteration   4: 1506994.510 ops/s
Iteration   5: 1431949.429 ops/s
Iteration   6: 1479408.299 ops/s
Iteration   7: 1455292.783 ops/s
Iteration   8: 1456348.121 ops/s
Iteration   9: 1482704.003 ops/s
Iteration  10: 1433572.992 ops/s
Iteration  11: 1476250.668 ops/s
Iteration  12: 1428406.892 ops/s
Iteration  13: 1492786.570 ops/s
Iteration  14: 1460298.955 ops/s
Iteration  15: 1383358.270 ops/s
Iteration  16: 1441752.806 ops/s
Iteration  17: 1503205.089 ops/s
Iteration  18: 1418850.610 ops/s
Iteration  19: 1528412.650 ops/s
Iteration  20: 1418119.749 ops/s
Iteration  21: 1470069.652 ops/s
Iteration  22: 1438942.973 ops/s
Iteration  23: 1495609.830 ops/s
Iteration  24: 1445619.646 ops/s
Iteration  25: 1418346.999 ops/s
Iteration  26: 1486223.126 ops/s
Iteration  27: 1371999.526 ops/s
Iteration  28: 1459982.369 ops/s
Iteration  29: 1429582.087 ops/s
Iteration  30: 1447031.824 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_cancel":
  1454802.210 ±(99.9%) 25125.717 ops/s [Average]
  (min, avg, max) = (1371999.526, 1454802.210, 1528412.650), stdev = 37606.993
  CI (99.9%): [1429676.493, 1479927.927] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_cancel  thrpt   30  1454802.210 ± 25125.717  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatDelayErrorTest._Benchmark.benchmark_normalIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatDelayErrorTest._Benchmark.benchmark_normalIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74791.147 ops/s
# Warmup Iteration   2: 406681.774 ops/s
# Warmup Iteration   3: 498877.438 ops/s
# Warmup Iteration   4: 537091.921 ops/s
# Warmup Iteration   5: 472421.622 ops/s
# Warmup Iteration   6: 530205.460 ops/s
# Warmup Iteration   7: 491840.122 ops/s
# Warmup Iteration   8: 517997.536 ops/s
# Warmup Iteration   9: 538676.997 ops/s
# Warmup Iteration  10: 545799.635 ops/s
# Warmup Iteration  11: 537599.008 ops/s
# Warmup Iteration  12: 542702.002 ops/s
# Warmup Iteration  13: 532044.766 ops/s
# Warmup Iteration  14: 540603.652 ops/s
# Warmup Iteration  15: 559401.678 ops/s
# Warmup Iteration  16: 521902.029 ops/s
# Warmup Iteration  17: 556958.642 ops/s
# Warmup Iteration  18: 575614.128 ops/s
# Warmup Iteration  19: 546870.435 ops/s
# Warmup Iteration  20: 565771.249 ops/s
# Warmup Iteration  21: 454417.139 ops/s
# Warmup Iteration  22: 568820.085 ops/s
# Warmup Iteration  23: 551262.013 ops/s
# Warmup Iteration  24: 547557.116 ops/s
# Warmup Iteration  25: 586433.244 ops/s
# Warmup Iteration  26: 560854.136 ops/s
# Warmup Iteration  27: 563020.866 ops/s
# Warmup Iteration  28: 559297.061 ops/s
# Warmup Iteration  29: 548106.734 ops/s
# Warmup Iteration  30: 555798.379 ops/s
Iteration   1: 571347.388 ops/s
Iteration   2: 542348.618 ops/s
Iteration   3: 551242.382 ops/s
Iteration   4: 565143.428 ops/s
Iteration   5: 552832.811 ops/s
Iteration   6: 568939.103 ops/s
Iteration   7: 551799.564 ops/s
Iteration   8: 563314.473 ops/s
Iteration   9: 572346.075 ops/s
Iteration  10: 554570.063 ops/s
Iteration  11: 559940.067 ops/s
Iteration  12: 557022.157 ops/s
Iteration  13: 572983.748 ops/s
Iteration  14: 548161.014 ops/s
Iteration  15: 548415.442 ops/s
Iteration  16: 580783.730 ops/s
Iteration  17: 546969.752 ops/s
Iteration  18: 580257.236 ops/s
Iteration  19: 574876.315 ops/s
Iteration  20: 553146.442 ops/s
Iteration  21: 566950.690 ops/s
Iteration  22: 557268.386 ops/s
Iteration  23: 554969.825 ops/s
Iteration  24: 549186.222 ops/s
Iteration  25: 559446.358 ops/s
Iteration  26: 573271.233 ops/s
Iteration  27: 549179.413 ops/s
Iteration  28: 572594.873 ops/s
Iteration  29: 558838.196 ops/s
Iteration  30: 568838.353 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatDelayErrorTest._Benchmark.benchmark_normalIterable":
  560899.445 ±(99.9%) 7204.836 ops/s [Average]
  (min, avg, max) = (542348.618, 560899.445, 580783.730), stdev = 10783.860
  CI (99.9%): [553694.609, 568104.281] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
SingleConcatDelayErrorTest._Benchmark.benchmark_normalIterable  thrpt   30  560899.445 ± 7204.836  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148161.030 ops/s
# Warmup Iteration   2: 521459.335 ops/s
# Warmup Iteration   3: 583642.404 ops/s
# Warmup Iteration   4: 571836.473 ops/s
# Warmup Iteration   5: 624629.280 ops/s
# Warmup Iteration   6: 576538.837 ops/s
# Warmup Iteration   7: 619184.028 ops/s
# Warmup Iteration   8: 655739.515 ops/s
# Warmup Iteration   9: 615016.026 ops/s
# Warmup Iteration  10: 651180.454 ops/s
# Warmup Iteration  11: 611455.106 ops/s
# Warmup Iteration  12: 629707.422 ops/s
# Warmup Iteration  13: 656337.079 ops/s
# Warmup Iteration  14: 630524.482 ops/s
# Warmup Iteration  15: 648505.014 ops/s
# Warmup Iteration  16: 643048.978 ops/s
# Warmup Iteration  17: 663449.081 ops/s
# Warmup Iteration  18: 688367.665 ops/s
# Warmup Iteration  19: 642678.636 ops/s
# Warmup Iteration  20: 684927.076 ops/s
# Warmup Iteration  21: 648545.203 ops/s
# Warmup Iteration  22: 681492.749 ops/s
# Warmup Iteration  23: 696502.083 ops/s
# Warmup Iteration  24: 654770.083 ops/s
# Warmup Iteration  25: 659799.086 ops/s
# Warmup Iteration  26: 686079.215 ops/s
# Warmup Iteration  27: 653755.968 ops/s
# Warmup Iteration  28: 676143.192 ops/s
# Warmup Iteration  29: 666777.793 ops/s
# Warmup Iteration  30: 660548.533 ops/s
Iteration   1: 699094.452 ops/s
Iteration   2: 648287.487 ops/s
Iteration   3: 702711.007 ops/s
Iteration   4: 643853.233 ops/s
Iteration   5: 667829.063 ops/s
Iteration   6: 670841.432 ops/s
Iteration   7: 652016.658 ops/s
Iteration   8: 688852.387 ops/s
Iteration   9: 649590.287 ops/s
Iteration  10: 678403.805 ops/s
Iteration  11: 696018.898 ops/s
Iteration  12: 646011.542 ops/s
Iteration  13: 662712.146 ops/s
Iteration  14: 658278.702 ops/s
Iteration  15: 653955.779 ops/s
Iteration  16: 680926.008 ops/s
Iteration  17: 666295.716 ops/s
Iteration  18: 676475.781 ops/s
Iteration  19: 670699.939 ops/s
Iteration  20: 676281.703 ops/s
Iteration  21: 698626.702 ops/s
Iteration  22: 651481.332 ops/s
Iteration  23: 690559.192 ops/s
Iteration  24: 659769.193 ops/s
Iteration  25: 680520.377 ops/s
Iteration  26: 659334.013 ops/s
Iteration  27: 682612.346 ops/s
Iteration  28: 661097.311 ops/s
Iteration  29: 671610.515 ops/s
Iteration  30: 692171.047 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_innerError":
  671230.602 ±(99.9%) 11611.623 ops/s [Average]
  (min, avg, max) = (643853.233, 671230.602, 702711.007), stdev = 17379.733
  CI (99.9%): [659618.978, 682842.225] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_innerError  thrpt   30  671230.602 ± 11611.623  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_limit$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_limit

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 260303.063 ops/s
# Warmup Iteration   2: 991586.311 ops/s
# Warmup Iteration   3: 1622980.803 ops/s
# Warmup Iteration   4: 1550205.845 ops/s
# Warmup Iteration   5: 1609196.109 ops/s
# Warmup Iteration   6: 1508594.756 ops/s
# Warmup Iteration   7: 1437528.886 ops/s
# Warmup Iteration   8: 1563390.753 ops/s
# Warmup Iteration   9: 1454435.786 ops/s
# Warmup Iteration  10: 1599745.021 ops/s
# Warmup Iteration  11: 1614994.808 ops/s
# Warmup Iteration  12: 1643759.350 ops/s
# Warmup Iteration  13: 1601380.903 ops/s
# Warmup Iteration  14: 1558400.010 ops/s
# Warmup Iteration  15: 1569146.630 ops/s
# Warmup Iteration  16: 1334755.845 ops/s
# Warmup Iteration  17: 1638287.784 ops/s
# Warmup Iteration  18: 1594895.883 ops/s
# Warmup Iteration  19: 1593118.044 ops/s
# Warmup Iteration  20: 1640317.521 ops/s
# Warmup Iteration  21: 1590062.154 ops/s
# Warmup Iteration  22: 1641237.800 ops/s
# Warmup Iteration  23: 1641544.576 ops/s
# Warmup Iteration  24: 1539365.839 ops/s
# Warmup Iteration  25: 1610201.426 ops/s
# Warmup Iteration  26: 1559326.019 ops/s
# Warmup Iteration  27: 1586971.470 ops/s
# Warmup Iteration  28: 1673059.938 ops/s
# Warmup Iteration  29: 1587797.052 ops/s
# Warmup Iteration  30: 1653871.724 ops/s
Iteration   1: 1558773.394 ops/s
Iteration   2: 1581133.876 ops/s
Iteration   3: 1610504.005 ops/s
Iteration   4: 1576879.178 ops/s
Iteration   5: 1597889.592 ops/s
Iteration   6: 1618720.961 ops/s
Iteration   7: 1544991.125 ops/s
Iteration   8: 1581507.019 ops/s
Iteration   9: 1592679.413 ops/s
Iteration  10: 1585699.207 ops/s
Iteration  11: 1643961.947 ops/s
Iteration  12: 1591455.318 ops/s
Iteration  13: 1596570.409 ops/s
Iteration  14: 1583196.617 ops/s
Iteration  15: 1576283.020 ops/s
Iteration  16: 1653272.504 ops/s
Iteration  17: 1570232.844 ops/s
Iteration  18: 1648794.376 ops/s
Iteration  19: 1568459.471 ops/s
Iteration  20: 1656565.896 ops/s
Iteration  21: 1578160.351 ops/s
Iteration  22: 1596370.115 ops/s
Iteration  23: 1618024.544 ops/s
Iteration  24: 1608646.371 ops/s
Iteration  25: 1584232.295 ops/s
Iteration  26: 1540207.812 ops/s
Iteration  27: 1605833.110 ops/s
Iteration  28: 1625539.155 ops/s
Iteration  29: 1566091.591 ops/s
Iteration  30: 1625066.321 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_limit":
  1596191.394 ±(99.9%) 20229.103 ops/s [Average]
  (min, avg, max) = (1540207.812, 1596191.394, 1656565.896), stdev = 30277.971
  CI (99.9%): [1575962.292, 1616420.497] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_limit  thrpt   30  1596191.394 ± 20229.103  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_noSubsequentSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_noSubsequentSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 282339.695 ops/s
# Warmup Iteration   2: 1527320.091 ops/s
# Warmup Iteration   3: 1712570.352 ops/s
# Warmup Iteration   4: 2174267.757 ops/s
# Warmup Iteration   5: 2145271.837 ops/s
# Warmup Iteration   6: 2169026.705 ops/s
# Warmup Iteration   7: 2173082.735 ops/s
# Warmup Iteration   8: 2188686.873 ops/s
# Warmup Iteration   9: 2156614.854 ops/s
# Warmup Iteration  10: 2247525.061 ops/s
# Warmup Iteration  11: 2144939.174 ops/s
# Warmup Iteration  12: 2173990.379 ops/s
# Warmup Iteration  13: 2144923.379 ops/s
# Warmup Iteration  14: 2195816.062 ops/s
# Warmup Iteration  15: 2178420.679 ops/s
# Warmup Iteration  16: 2269928.107 ops/s
# Warmup Iteration  17: 2166278.711 ops/s
# Warmup Iteration  18: 2175371.034 ops/s
# Warmup Iteration  19: 2154256.243 ops/s
# Warmup Iteration  20: 2226185.682 ops/s
# Warmup Iteration  21: 2147608.208 ops/s
# Warmup Iteration  22: 2205615.155 ops/s
# Warmup Iteration  23: 2216080.683 ops/s
# Warmup Iteration  24: 2149148.416 ops/s
# Warmup Iteration  25: 2199605.912 ops/s
# Warmup Iteration  26: 2225337.405 ops/s
# Warmup Iteration  27: 2123128.055 ops/s
# Warmup Iteration  28: 2211158.276 ops/s
# Warmup Iteration  29: 2176516.923 ops/s
# Warmup Iteration  30: 2210752.226 ops/s
Iteration   1: 2201405.097 ops/s
Iteration   2: 2215073.943 ops/s
Iteration   3: 2251386.475 ops/s
Iteration   4: 2187845.732 ops/s
Iteration   5: 2235339.245 ops/s
Iteration   6: 2149898.476 ops/s
Iteration   7: 2231197.843 ops/s
Iteration   8: 2181033.465 ops/s
Iteration   9: 2225399.288 ops/s
Iteration  10: 2163775.068 ops/s
Iteration  11: 2167736.704 ops/s
Iteration  12: 2187464.991 ops/s
Iteration  13: 2203159.642 ops/s
Iteration  14: 2172489.967 ops/s
Iteration  15: 2167624.423 ops/s
Iteration  16: 2273545.388 ops/s
Iteration  17: 2223121.084 ops/s
Iteration  18: 2172756.705 ops/s
Iteration  19: 2259599.396 ops/s
Iteration  20: 2164987.962 ops/s
Iteration  21: 2236958.047 ops/s
Iteration  22: 2246815.299 ops/s
Iteration  23: 2129731.419 ops/s
Iteration  24: 2258533.764 ops/s
Iteration  25: 2148356.990 ops/s
Iteration  26: 2254650.916 ops/s
Iteration  27: 2125104.687 ops/s
Iteration  28: 2171273.816 ops/s
Iteration  29: 2198862.305 ops/s
Iteration  30: 2152936.320 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_noSubsequentSubscription":
  2198602.149 ±(99.9%) 27938.400 ops/s [Average]
  (min, avg, max) = (2125104.687, 2198602.149, 2273545.388), stdev = 41816.885
  CI (99.9%): [2170663.749, 2226540.548] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SingleConcatTest._Benchmark.benchmark_noSubsequentSubscription  thrpt   30  2198602.149 ± 27938.400  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 561661.616 ops/s
# Warmup Iteration   2: 3244808.939 ops/s
# Warmup Iteration   3: 4608193.116 ops/s
# Warmup Iteration   4: 4677567.441 ops/s
# Warmup Iteration   5: 4767232.095 ops/s
# Warmup Iteration   6: 4836172.896 ops/s
# Warmup Iteration   7: 4593620.775 ops/s
# Warmup Iteration   8: 4897120.753 ops/s
# Warmup Iteration   9: 4886028.767 ops/s
# Warmup Iteration  10: 4372628.913 ops/s
# Warmup Iteration  11: 3888605.995 ops/s
# Warmup Iteration  12: 4919765.507 ops/s
# Warmup Iteration  13: 4657964.621 ops/s
# Warmup Iteration  14: 4822747.334 ops/s
# Warmup Iteration  15: 4518434.714 ops/s
# Warmup Iteration  16: 4738631.177 ops/s
# Warmup Iteration  17: 4664242.922 ops/s
# Warmup Iteration  18: 4854196.758 ops/s
# Warmup Iteration  19: 4798094.823 ops/s
# Warmup Iteration  20: 4826837.120 ops/s
# Warmup Iteration  21: 4923365.397 ops/s
# Warmup Iteration  22: 4704496.770 ops/s
# Warmup Iteration  23: 4689049.328 ops/s
# Warmup Iteration  24: 4861193.568 ops/s
# Warmup Iteration  25: 4664826.515 ops/s
# Warmup Iteration  26: 4875072.856 ops/s
# Warmup Iteration  27: 4741398.484 ops/s
# Warmup Iteration  28: 4744781.888 ops/s
# Warmup Iteration  29: 4903105.489 ops/s
# Warmup Iteration  30: 4783760.841 ops/s
Iteration   1: 4749197.281 ops/s
Iteration   2: 5029608.182 ops/s
Iteration   3: 4618360.613 ops/s
Iteration   4: 4769648.114 ops/s
Iteration   5: 4847705.422 ops/s
Iteration   6: 4771277.692 ops/s
Iteration   7: 4985907.451 ops/s
Iteration   8: 4642017.971 ops/s
Iteration   9: 4881895.975 ops/s
Iteration  10: 4735674.166 ops/s
Iteration  11: 4822743.572 ops/s
Iteration  12: 4885608.237 ops/s
Iteration  13: 4700556.486 ops/s
Iteration  14: 4755987.863 ops/s
Iteration  15: 4915745.747 ops/s
Iteration  16: 4668378.968 ops/s
Iteration  17: 5012111.536 ops/s
Iteration  18: 4807154.013 ops/s
Iteration  19: 4726524.371 ops/s
Iteration  20: 4972903.459 ops/s
Iteration  21: 4848120.879 ops/s
Iteration  22: 4732251.416 ops/s
Iteration  23: 4983958.211 ops/s
Iteration  24: 4629531.677 ops/s
Iteration  25: 4845159.249 ops/s
Iteration  26: 5028977.078 ops/s
Iteration  27: 4961509.106 ops/s
Iteration  28: 4582249.539 ops/s
Iteration  29: 4897837.653 ops/s
Iteration  30: 4714290.885 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicFusionRejected":
  4817429.760 ±(99.9%) 87638.930 ops/s [Average]
  (min, avg, max) = (4582249.539, 4817429.760, 5029608.182), stdev = 131173.835
  CI (99.9%): [4729790.830, 4905068.690] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_basicFusionRejected  thrpt   30  4817429.760 ± 87638.930  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicNonFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicNonFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106103.106 ops/s
# Warmup Iteration   2: 651010.601 ops/s
# Warmup Iteration   3: 925220.950 ops/s
# Warmup Iteration   4: 852189.192 ops/s
# Warmup Iteration   5: 908627.048 ops/s
# Warmup Iteration   6: 880736.944 ops/s
# Warmup Iteration   7: 854578.399 ops/s
# Warmup Iteration   8: 858343.952 ops/s
# Warmup Iteration   9: 851415.184 ops/s
# Warmup Iteration  10: 915459.680 ops/s
# Warmup Iteration  11: 877248.970 ops/s
# Warmup Iteration  12: 911018.113 ops/s
# Warmup Iteration  13: 901739.542 ops/s
# Warmup Iteration  14: 885243.939 ops/s
# Warmup Iteration  15: 913388.847 ops/s
# Warmup Iteration  16: 869329.016 ops/s
# Warmup Iteration  17: 899206.546 ops/s
# Warmup Iteration  18: 882887.498 ops/s
# Warmup Iteration  19: 915466.007 ops/s
# Warmup Iteration  20: 901506.746 ops/s
# Warmup Iteration  21: 921362.042 ops/s
# Warmup Iteration  22: 913620.628 ops/s
# Warmup Iteration  23: 911476.988 ops/s
# Warmup Iteration  24: 873451.516 ops/s
# Warmup Iteration  25: 927895.624 ops/s
# Warmup Iteration  26: 906993.956 ops/s
# Warmup Iteration  27: 909126.747 ops/s
# Warmup Iteration  28: 937698.223 ops/s
# Warmup Iteration  29: 896967.383 ops/s
# Warmup Iteration  30: 902306.374 ops/s
Iteration   1: 916230.351 ops/s
Iteration   2: 895727.544 ops/s
Iteration   3: 936149.420 ops/s
Iteration   4: 893488.859 ops/s
Iteration   5: 909678.036 ops/s
Iteration   6: 937703.949 ops/s
Iteration   7: 909344.766 ops/s
Iteration   8: 947758.479 ops/s
Iteration   9: 873577.500 ops/s
Iteration  10: 938431.212 ops/s
Iteration  11: 947677.741 ops/s
Iteration  12: 880151.807 ops/s
Iteration  13: 926263.329 ops/s
Iteration  14: 874282.139 ops/s
Iteration  15: 902269.378 ops/s
Iteration  16: 912622.205 ops/s
Iteration  17: 888419.988 ops/s
Iteration  18: 915211.723 ops/s
Iteration  19: 875244.746 ops/s
Iteration  20: 924841.954 ops/s
Iteration  21: 919693.200 ops/s
Iteration  22: 885456.141 ops/s
Iteration  23: 939711.062 ops/s
Iteration  24: 934981.051 ops/s
Iteration  25: 902325.593 ops/s
Iteration  26: 889547.173 ops/s
Iteration  27: 896852.533 ops/s
Iteration  28: 919978.327 ops/s
Iteration  29: 880965.887 ops/s
Iteration  30: 914054.756 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicNonFused":
  909621.362 ±(99.9%) 15282.739 ops/s [Average]
  (min, avg, max) = (873577.500, 909621.362, 947758.479), stdev = 22874.486
  CI (99.9%): [894338.623, 924904.100] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_basicNonFused  thrpt   30  909621.362 ± 15282.739  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_fusedPollCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_fusedPollCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39999.644 ops/s
# Warmup Iteration   2: 173685.888 ops/s
# Warmup Iteration   3: 333761.512 ops/s
# Warmup Iteration   4: 331461.215 ops/s
# Warmup Iteration   5: 315161.406 ops/s
# Warmup Iteration   6: 347374.113 ops/s
# Warmup Iteration   7: 351330.723 ops/s
# Warmup Iteration   8: 357186.817 ops/s
# Warmup Iteration   9: 354985.259 ops/s
# Warmup Iteration  10: 343374.586 ops/s
# Warmup Iteration  11: 348435.710 ops/s
# Warmup Iteration  12: 350030.967 ops/s
# Warmup Iteration  13: 369245.138 ops/s
# Warmup Iteration  14: 347617.589 ops/s
# Warmup Iteration  15: 360181.862 ops/s
# Warmup Iteration  16: 350563.211 ops/s
# Warmup Iteration  17: 377078.011 ops/s
# Warmup Iteration  18: 368405.105 ops/s
# Warmup Iteration  19: 365649.933 ops/s
# Warmup Iteration  20: 374713.946 ops/s
# Warmup Iteration  21: 356887.858 ops/s
# Warmup Iteration  22: 373698.126 ops/s
# Warmup Iteration  23: 380490.322 ops/s
# Warmup Iteration  24: 362693.766 ops/s
# Warmup Iteration  25: 370121.558 ops/s
# Warmup Iteration  26: 374129.320 ops/s
# Warmup Iteration  27: 372491.906 ops/s
# Warmup Iteration  28: 355968.461 ops/s
# Warmup Iteration  29: 373664.808 ops/s
# Warmup Iteration  30: 362572.624 ops/s
Iteration   1: 368765.214 ops/s
Iteration   2: 379693.129 ops/s
Iteration   3: 352731.477 ops/s
Iteration   4: 378318.617 ops/s
Iteration   5: 349209.982 ops/s
Iteration   6: 378963.864 ops/s
Iteration   7: 358232.376 ops/s
Iteration   8: 375435.528 ops/s
Iteration   9: 381958.652 ops/s
Iteration  10: 355536.499 ops/s
Iteration  11: 379713.972 ops/s
Iteration  12: 360951.898 ops/s
Iteration  13: 368670.578 ops/s
Iteration  14: 378723.553 ops/s
Iteration  15: 345339.312 ops/s
Iteration  16: 371531.862 ops/s
Iteration  17: 380294.472 ops/s
Iteration  18: 364772.681 ops/s
Iteration  19: 372789.996 ops/s
Iteration  20: 370308.965 ops/s
Iteration  21: 364816.147 ops/s
Iteration  22: 368105.932 ops/s
Iteration  23: 350641.736 ops/s
Iteration  24: 371810.187 ops/s
Iteration  25: 356066.007 ops/s
Iteration  26: 377298.108 ops/s
Iteration  27: 369989.308 ops/s
Iteration  28: 372041.694 ops/s
Iteration  29: 365104.160 ops/s
Iteration  30: 373873.022 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_fusedPollCrash":
  368056.298 ±(99.9%) 6893.343 ops/s [Average]
  (min, avg, max) = (345339.312, 368056.298, 381958.652), stdev = 10317.633
  CI (99.9%): [361162.954, 374949.641] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_fusedPollCrash  thrpt   30  368056.298 ± 6893.343  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicAsyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicAsyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 62634.376 ops/s
# Warmup Iteration   2: 242295.503 ops/s
# Warmup Iteration   3: 571132.323 ops/s
# Warmup Iteration   4: 675842.921 ops/s
# Warmup Iteration   5: 733490.389 ops/s
# Warmup Iteration   6: 685946.919 ops/s
# Warmup Iteration   7: 689546.813 ops/s
# Warmup Iteration   8: 696249.989 ops/s
# Warmup Iteration   9: 717588.895 ops/s
# Warmup Iteration  10: 664682.331 ops/s
# Warmup Iteration  11: 653747.524 ops/s
# Warmup Iteration  12: 716894.662 ops/s
# Warmup Iteration  13: 698723.648 ops/s
# Warmup Iteration  14: 726154.697 ops/s
# Warmup Iteration  15: 696259.819 ops/s
# Warmup Iteration  16: 697402.055 ops/s
# Warmup Iteration  17: 704363.753 ops/s
# Warmup Iteration  18: 700217.977 ops/s
# Warmup Iteration  19: 725026.914 ops/s
# Warmup Iteration  20: 677050.429 ops/s
# Warmup Iteration  21: 701795.137 ops/s
# Warmup Iteration  22: 711514.460 ops/s
# Warmup Iteration  23: 684863.146 ops/s
# Warmup Iteration  24: 711761.342 ops/s
# Warmup Iteration  25: 704723.111 ops/s
# Warmup Iteration  26: 685434.527 ops/s
# Warmup Iteration  27: 717560.549 ops/s
# Warmup Iteration  28: 699358.068 ops/s
# Warmup Iteration  29: 722653.330 ops/s
# Warmup Iteration  30: 696046.058 ops/s
Iteration   1: 700641.343 ops/s
Iteration   2: 723709.651 ops/s
Iteration   3: 673325.409 ops/s
Iteration   4: 699523.940 ops/s
Iteration   5: 706352.841 ops/s
Iteration   6: 698353.564 ops/s
Iteration   7: 721230.761 ops/s
Iteration   8: 692098.442 ops/s
Iteration   9: 715852.552 ops/s
Iteration  10: 699535.131 ops/s
Iteration  11: 679142.513 ops/s
Iteration  12: 725873.037 ops/s
Iteration  13: 691942.030 ops/s
Iteration  14: 713149.136 ops/s
Iteration  15: 695646.237 ops/s
Iteration  16: 705209.122 ops/s
Iteration  17: 710764.271 ops/s
Iteration  18: 690041.668 ops/s
Iteration  19: 714549.944 ops/s
Iteration  20: 689494.059 ops/s
Iteration  21: 717241.844 ops/s
Iteration  22: 702247.803 ops/s
Iteration  23: 709042.599 ops/s
Iteration  24: 689362.055 ops/s
Iteration  25: 691321.971 ops/s
Iteration  26: 729659.041 ops/s
Iteration  27: 684150.378 ops/s
Iteration  28: 722720.114 ops/s
Iteration  29: 693053.038 ops/s
Iteration  30: 682205.113 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_basicAsyncFused":
  702247.987 ±(99.9%) 9956.618 ops/s [Average]
  (min, avg, max) = (673325.409, 702247.987, 729659.041), stdev = 14902.598
  CI (99.9%): [692291.369, 712204.605] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_basicAsyncFused  thrpt   30  702247.987 ± 9956.618  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 197559.368 ops/s
# Warmup Iteration   2: 1485610.779 ops/s
# Warmup Iteration   3: 1729178.214 ops/s
# Warmup Iteration   4: 2034302.940 ops/s
# Warmup Iteration   5: 2161232.632 ops/s
# Warmup Iteration   6: 2087393.198 ops/s
# Warmup Iteration   7: 2187038.852 ops/s
# Warmup Iteration   8: 2061879.083 ops/s
# Warmup Iteration   9: 2134059.759 ops/s
# Warmup Iteration  10: 2206752.544 ops/s
# Warmup Iteration  11: 2144968.594 ops/s
# Warmup Iteration  12: 2011302.428 ops/s
# Warmup Iteration  13: 2212234.090 ops/s
# Warmup Iteration  14: 2020108.417 ops/s
# Warmup Iteration  15: 2157752.156 ops/s
# Warmup Iteration  16: 2093624.845 ops/s
# Warmup Iteration  17: 2104467.163 ops/s
# Warmup Iteration  18: 2176275.509 ops/s
# Warmup Iteration  19: 2056692.505 ops/s
# Warmup Iteration  20: 2121478.806 ops/s
# Warmup Iteration  21: 2171477.358 ops/s
# Warmup Iteration  22: 2083384.134 ops/s
# Warmup Iteration  23: 2117935.045 ops/s
# Warmup Iteration  24: 2155905.492 ops/s
# Warmup Iteration  25: 2172555.016 ops/s
# Warmup Iteration  26: 2126981.786 ops/s
# Warmup Iteration  27: 2163596.276 ops/s
# Warmup Iteration  28: 2130852.908 ops/s
# Warmup Iteration  29: 2137004.722 ops/s
# Warmup Iteration  30: 2206739.824 ops/s
Iteration   1: 2084989.548 ops/s
Iteration   2: 2077453.170 ops/s
Iteration   3: 2256277.544 ops/s
Iteration   4: 2089102.772 ops/s
Iteration   5: 2145169.571 ops/s
Iteration   6: 2151145.659 ops/s
Iteration   7: 2105683.352 ops/s
Iteration   8: 2147848.097 ops/s
Iteration   9: 2128943.568 ops/s
Iteration  10: 2135300.415 ops/s
Iteration  11: 2098412.838 ops/s
Iteration  12: 2066915.124 ops/s
Iteration  13: 2175315.667 ops/s
Iteration  14: 2092803.297 ops/s
Iteration  15: 2089553.459 ops/s
Iteration  16: 2178683.383 ops/s
Iteration  17: 2080377.756 ops/s
Iteration  18: 2189346.373 ops/s
Iteration  19: 2050207.790 ops/s
Iteration  20: 2230316.961 ops/s
Iteration  21: 2105059.233 ops/s
Iteration  22: 2151657.687 ops/s
Iteration  23: 2180494.649 ops/s
Iteration  24: 2112715.044 ops/s
Iteration  25: 2182684.312 ops/s
Iteration  26: 2098055.021 ops/s
Iteration  27: 2108896.387 ops/s
Iteration  28: 2114265.009 ops/s
Iteration  29: 2175648.088 ops/s
Iteration  30: 2189570.247 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable":
  2133096.401 ±(99.9%) 33435.721 ops/s [Average]
  (min, avg, max) = (2050207.790, 2133096.401, 2256277.544), stdev = 50045.017
  CI (99.9%): [2099660.680, 2166532.122] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
SingleConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable  thrpt   30  2133096.401 ± 33435.721  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 98519.146 ops/s
# Warmup Iteration   2: 510424.322 ops/s
# Warmup Iteration   3: 580784.375 ops/s
# Warmup Iteration   4: 606306.105 ops/s
# Warmup Iteration   5: 585274.830 ops/s
# Warmup Iteration   6: 656256.731 ops/s
# Warmup Iteration   7: 645107.533 ops/s
# Warmup Iteration   8: 644679.384 ops/s
# Warmup Iteration   9: 641340.941 ops/s
# Warmup Iteration  10: 633911.356 ops/s
# Warmup Iteration  11: 659800.368 ops/s
# Warmup Iteration  12: 637364.103 ops/s
# Warmup Iteration  13: 632139.590 ops/s
# Warmup Iteration  14: 640506.984 ops/s
# Warmup Iteration  15: 661821.606 ops/s
# Warmup Iteration  16: 623771.490 ops/s
# Warmup Iteration  17: 687411.758 ops/s
# Warmup Iteration  18: 667760.865 ops/s
# Warmup Iteration  19: 687028.007 ops/s
# Warmup Iteration  20: 676661.462 ops/s
# Warmup Iteration  21: 683612.844 ops/s
# Warmup Iteration  22: 672030.133 ops/s
# Warmup Iteration  23: 679427.837 ops/s
# Warmup Iteration  24: 672271.945 ops/s
# Warmup Iteration  25: 685931.052 ops/s
# Warmup Iteration  26: 678549.983 ops/s
# Warmup Iteration  27: 663989.611 ops/s
# Warmup Iteration  28: 689343.290 ops/s
# Warmup Iteration  29: 673329.826 ops/s
# Warmup Iteration  30: 686917.503 ops/s
Iteration   1: 662877.791 ops/s
Iteration   2: 664308.549 ops/s
Iteration   3: 698008.112 ops/s
Iteration   4: 649893.728 ops/s
Iteration   5: 681704.218 ops/s
Iteration   6: 660576.409 ops/s
Iteration   7: 688812.653 ops/s
Iteration   8: 656589.243 ops/s
Iteration   9: 675912.913 ops/s
Iteration  10: 683485.347 ops/s
Iteration  11: 659061.313 ops/s
Iteration  12: 678143.688 ops/s
Iteration  13: 712283.251 ops/s
Iteration  14: 695002.316 ops/s
Iteration  15: 676680.271 ops/s
Iteration  16: 665767.407 ops/s
Iteration  17: 688256.207 ops/s
Iteration  18: 673422.469 ops/s
Iteration  19: 694754.008 ops/s
Iteration  20: 668206.116 ops/s
Iteration  21: 705218.695 ops/s
Iteration  22: 693100.177 ops/s
Iteration  23: 657080.086 ops/s
Iteration  24: 682567.750 ops/s
Iteration  25: 681994.176 ops/s
Iteration  26: 556283.220 ops/s
Iteration  27: 704193.769 ops/s
Iteration  28: 665404.245 ops/s
Iteration  29: 677014.740 ops/s
Iteration  30: 675617.047 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_mainError":
  674407.330 ±(99.9%) 18289.984 ops/s [Average]
  (min, avg, max) = (556283.220, 674407.330, 712283.251), stdev = 27375.590
  CI (99.9%): [656117.346, 692697.315] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_mainError  thrpt   30  674407.330 ± 18289.984  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30591.189 ops/s
# Warmup Iteration   2: 158827.136 ops/s
# Warmup Iteration   3: 356868.678 ops/s
# Warmup Iteration   4: 468545.363 ops/s
# Warmup Iteration   5: 505743.431 ops/s
# Warmup Iteration   6: 483213.070 ops/s
# Warmup Iteration   7: 489601.213 ops/s
# Warmup Iteration   8: 475068.716 ops/s
# Warmup Iteration   9: 496312.748 ops/s
# Warmup Iteration  10: 485709.470 ops/s
# Warmup Iteration  11: 467347.794 ops/s
# Warmup Iteration  12: 499650.771 ops/s
# Warmup Iteration  13: 511543.438 ops/s
# Warmup Iteration  14: 460385.934 ops/s
# Warmup Iteration  15: 499630.189 ops/s
# Warmup Iteration  16: 477730.340 ops/s
# Warmup Iteration  17: 507137.536 ops/s
# Warmup Iteration  18: 512469.852 ops/s
# Warmup Iteration  19: 506347.267 ops/s
# Warmup Iteration  20: 514382.836 ops/s
# Warmup Iteration  21: 502377.693 ops/s
# Warmup Iteration  22: 516167.877 ops/s
# Warmup Iteration  23: 485412.350 ops/s
# Warmup Iteration  24: 514210.545 ops/s
# Warmup Iteration  25: 504265.572 ops/s
# Warmup Iteration  26: 506138.860 ops/s
# Warmup Iteration  27: 513692.447 ops/s
# Warmup Iteration  28: 498808.965 ops/s
# Warmup Iteration  29: 504721.301 ops/s
# Warmup Iteration  30: 539662.780 ops/s
Iteration   1: 507632.508 ops/s
Iteration   2: 494713.110 ops/s
Iteration   3: 517721.365 ops/s
Iteration   4: 504164.524 ops/s
Iteration   5: 530479.503 ops/s
Iteration   6: 527507.900 ops/s
Iteration   7: 502486.240 ops/s
Iteration   8: 533833.817 ops/s
Iteration   9: 526006.230 ops/s
Iteration  10: 496504.642 ops/s
Iteration  11: 510991.672 ops/s
Iteration  12: 521380.837 ops/s
Iteration  13: 502015.113 ops/s
Iteration  14: 503440.094 ops/s
Iteration  15: 505329.087 ops/s
Iteration  16: 509915.307 ops/s
Iteration  17: 516147.286 ops/s
Iteration  18: 507257.044 ops/s
Iteration  19: 497049.808 ops/s
Iteration  20: 504662.230 ops/s
Iteration  21: 497181.318 ops/s
Iteration  22: 505184.823 ops/s
Iteration  23: 531630.916 ops/s
Iteration  24: 521742.821 ops/s
Iteration  25: 508307.647 ops/s
Iteration  26: 512211.832 ops/s
Iteration  27: 520948.609 ops/s
Iteration  28: 503559.928 ops/s
Iteration  29: 514329.450 ops/s
Iteration  30: 502537.667 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess":
  511229.111 ±(99.9%) 7458.259 ops/s [Average]
  (min, avg, max) = (494713.110, 511229.111, 533833.817), stdev = 11163.172
  CI (99.9%): [503770.852, 518687.370] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_mainBoundaryErrorInnerSuccess  thrpt   30  511229.111 ± 7458.259  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_cancelNoConcurrentClean$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_cancelNoConcurrentClean

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 560745.063 ops/s
# Warmup Iteration   2: 2244577.411 ops/s
# Warmup Iteration   3: 2700942.145 ops/s
# Warmup Iteration   4: 2939891.075 ops/s
# Warmup Iteration   5: 2959987.008 ops/s
# Warmup Iteration   6: 3121445.371 ops/s
# Warmup Iteration   7: 3068196.598 ops/s
# Warmup Iteration   8: 2930395.689 ops/s
# Warmup Iteration   9: 3140980.160 ops/s
# Warmup Iteration  10: 3073081.255 ops/s
# Warmup Iteration  11: 2929871.009 ops/s
# Warmup Iteration  12: 3035715.830 ops/s
# Warmup Iteration  13: 3099766.715 ops/s
# Warmup Iteration  14: 2972031.087 ops/s
# Warmup Iteration  15: 3146965.044 ops/s
# Warmup Iteration  16: 2971683.494 ops/s
# Warmup Iteration  17: 2972893.799 ops/s
# Warmup Iteration  18: 3065348.694 ops/s
# Warmup Iteration  19: 3002759.595 ops/s
# Warmup Iteration  20: 3010078.864 ops/s
# Warmup Iteration  21: 3004567.564 ops/s
# Warmup Iteration  22: 3058198.734 ops/s
# Warmup Iteration  23: 2995150.282 ops/s
# Warmup Iteration  24: 3019106.155 ops/s
# Warmup Iteration  25: 3115241.577 ops/s
# Warmup Iteration  26: 3062293.966 ops/s
# Warmup Iteration  27: 3034371.199 ops/s
# Warmup Iteration  28: 3003429.141 ops/s
# Warmup Iteration  29: 3139270.493 ops/s
# Warmup Iteration  30: 2925058.633 ops/s
Iteration   1: 3069255.647 ops/s
Iteration   2: 2909323.407 ops/s
Iteration   3: 3137560.102 ops/s
Iteration   4: 2960015.958 ops/s
Iteration   5: 3056674.157 ops/s
Iteration   6: 3102293.208 ops/s
Iteration   7: 2977613.440 ops/s
Iteration   8: 3155758.546 ops/s
Iteration   9: 3067011.855 ops/s
Iteration  10: 2964813.828 ops/s
Iteration  11: 3125724.370 ops/s
Iteration  12: 2937961.852 ops/s
Iteration  13: 3093744.190 ops/s
Iteration  14: 3103603.722 ops/s
Iteration  15: 2893753.260 ops/s
Iteration  16: 3056100.937 ops/s
Iteration  17: 3013833.785 ops/s
Iteration  18: 3137707.562 ops/s
Iteration  19: 2970340.604 ops/s
Iteration  20: 2711906.869 ops/s
Iteration  21: 2886848.754 ops/s
Iteration  22: 3113076.319 ops/s
Iteration  23: 2912839.026 ops/s
Iteration  24: 3084667.498 ops/s
Iteration  25: 3034462.689 ops/s
Iteration  26: 2990599.713 ops/s
Iteration  27: 3129547.449 ops/s
Iteration  28: 2959335.483 ops/s
Iteration  29: 3023899.739 ops/s
Iteration  30: 3195968.945 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_cancelNoConcurrentClean":
  3025874.764 ±(99.9%) 69444.354 ops/s [Average]
  (min, avg, max) = (2711906.869, 3025874.764, 3195968.945), stdev = 103941.047
  CI (99.9%): [2956430.410, 3095319.118] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_cancelNoConcurrentClean  thrpt   30  3025874.764 ± 69444.354  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 97497.303 ops/s
# Warmup Iteration   2: 439020.320 ops/s
# Warmup Iteration   3: 550657.825 ops/s
# Warmup Iteration   4: 529901.463 ops/s
# Warmup Iteration   5: 553120.436 ops/s
# Warmup Iteration   6: 562641.504 ops/s
# Warmup Iteration   7: 538724.356 ops/s
# Warmup Iteration   8: 538031.458 ops/s
# Warmup Iteration   9: 539758.417 ops/s
# Warmup Iteration  10: 557042.938 ops/s
# Warmup Iteration  11: 529777.045 ops/s
# Warmup Iteration  12: 513912.956 ops/s
# Warmup Iteration  13: 564149.721 ops/s
# Warmup Iteration  14: 560249.325 ops/s
# Warmup Iteration  15: 535668.793 ops/s
# Warmup Iteration  16: 555787.799 ops/s
# Warmup Iteration  17: 560167.970 ops/s
# Warmup Iteration  18: 577477.060 ops/s
# Warmup Iteration  19: 568466.205 ops/s
# Warmup Iteration  20: 560570.335 ops/s
# Warmup Iteration  21: 559146.951 ops/s
# Warmup Iteration  22: 547464.946 ops/s
# Warmup Iteration  23: 540905.831 ops/s
# Warmup Iteration  24: 596079.133 ops/s
# Warmup Iteration  25: 551131.531 ops/s
# Warmup Iteration  26: 594759.190 ops/s
# Warmup Iteration  27: 561611.896 ops/s
# Warmup Iteration  28: 573602.914 ops/s
# Warmup Iteration  29: 592497.788 ops/s
# Warmup Iteration  30: 555077.397 ops/s
Iteration   1: 583798.033 ops/s
Iteration   2: 568580.028 ops/s
Iteration   3: 564469.641 ops/s
Iteration   4: 591578.396 ops/s
Iteration   5: 560177.167 ops/s
Iteration   6: 590813.438 ops/s
Iteration   7: 572247.100 ops/s
Iteration   8: 579999.717 ops/s
Iteration   9: 539544.023 ops/s
Iteration  10: 581703.557 ops/s
Iteration  11: 559287.585 ops/s
Iteration  12: 573287.291 ops/s
Iteration  13: 591862.465 ops/s
Iteration  14: 558186.804 ops/s
Iteration  15: 569079.807 ops/s
Iteration  16: 566367.617 ops/s
Iteration  17: 581190.989 ops/s
Iteration  18: 599767.246 ops/s
Iteration  19: 552987.216 ops/s
Iteration  20: 584156.480 ops/s
Iteration  21: 565323.675 ops/s
Iteration  22: 577353.561 ops/s
Iteration  23: 586321.803 ops/s
Iteration  24: 554947.321 ops/s
Iteration  25: 581746.313 ops/s
Iteration  26: 559766.148 ops/s
Iteration  27: 552579.253 ops/s
Iteration  28: 562282.658 ops/s
Iteration  29: 565591.946 ops/s
Iteration  30: 588704.103 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_mapperCrash":
  572123.379 ±(99.9%) 9653.904 ops/s [Average]
  (min, avg, max) = (539544.023, 572123.379, 599767.246), stdev = 14449.510
  CI (99.9%): [562469.476, 581777.283] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_mapperCrash  thrpt   30  572123.379 ± 9653.904  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_queueOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_queueOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21459.120 ops/s
# Warmup Iteration   2: 82795.762 ops/s
# Warmup Iteration   3: 154065.058 ops/s
# Warmup Iteration   4: 145576.921 ops/s
# Warmup Iteration   5: 148269.999 ops/s
# Warmup Iteration   6: 171070.912 ops/s
# Warmup Iteration   7: 166295.554 ops/s
# Warmup Iteration   8: 173605.176 ops/s
# Warmup Iteration   9: 161917.402 ops/s
# Warmup Iteration  10: 169762.181 ops/s
# Warmup Iteration  11: 169722.699 ops/s
# Warmup Iteration  12: 166719.472 ops/s
# Warmup Iteration  13: 168701.670 ops/s
# Warmup Iteration  14: 171473.305 ops/s
# Warmup Iteration  15: 164810.357 ops/s
# Warmup Iteration  16: 174420.724 ops/s
# Warmup Iteration  17: 172041.500 ops/s
# Warmup Iteration  18: 180837.114 ops/s
# Warmup Iteration  19: 172301.981 ops/s
# Warmup Iteration  20: 178868.758 ops/s
# Warmup Iteration  21: 174239.538 ops/s
# Warmup Iteration  22: 173816.604 ops/s
# Warmup Iteration  23: 179547.715 ops/s
# Warmup Iteration  24: 169794.448 ops/s
# Warmup Iteration  25: 180915.394 ops/s
# Warmup Iteration  26: 177769.508 ops/s
# Warmup Iteration  27: 169510.535 ops/s
# Warmup Iteration  28: 178706.929 ops/s
# Warmup Iteration  29: 176351.759 ops/s
# Warmup Iteration  30: 175784.015 ops/s
Iteration   1: 177010.098 ops/s
Iteration   2: 171869.299 ops/s
Iteration   3: 176197.173 ops/s
Iteration   4: 177024.396 ops/s
Iteration   5: 170601.919 ops/s
Iteration   6: 172756.022 ops/s
Iteration   7: 175584.806 ops/s
Iteration   8: 176583.051 ops/s
Iteration   9: 177262.020 ops/s
Iteration  10: 170939.192 ops/s
Iteration  11: 178796.995 ops/s
Iteration  12: 170905.864 ops/s
Iteration  13: 174513.151 ops/s
Iteration  14: 179581.334 ops/s
Iteration  15: 139937.569 ops/s
Iteration  16: 169973.998 ops/s
Iteration  17: 176250.756 ops/s
Iteration  18: 172809.412 ops/s
Iteration  19: 164303.387 ops/s
Iteration  20: 178696.651 ops/s
Iteration  21: 163476.436 ops/s
Iteration  22: 176595.088 ops/s
Iteration  23: 180837.556 ops/s
Iteration  24: 167687.694 ops/s
Iteration  25: 178395.750 ops/s
Iteration  26: 174189.975 ops/s
Iteration  27: 175185.230 ops/s
Iteration  28: 179712.737 ops/s
Iteration  29: 167053.915 ops/s
Iteration  30: 179391.280 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_queueOverflow":
  173137.425 ±(99.9%) 5183.138 ops/s [Average]
  (min, avg, max) = (139937.569, 173137.425, 180837.556), stdev = 7757.877
  CI (99.9%): [167954.287, 178320.563] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_queueOverflow  thrpt   30  173137.425 ± 5183.138  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 82830.826 ops/s
# Warmup Iteration   2: 307964.965 ops/s
# Warmup Iteration   3: 473458.253 ops/s
# Warmup Iteration   4: 455836.864 ops/s
# Warmup Iteration   5: 469904.376 ops/s
# Warmup Iteration   6: 468486.142 ops/s
# Warmup Iteration   7: 478785.900 ops/s
# Warmup Iteration   8: 492146.563 ops/s
# Warmup Iteration   9: 480586.247 ops/s
# Warmup Iteration  10: 457919.273 ops/s
# Warmup Iteration  11: 478909.313 ops/s
# Warmup Iteration  12: 478229.156 ops/s
# Warmup Iteration  13: 482145.700 ops/s
# Warmup Iteration  14: 487558.007 ops/s
# Warmup Iteration  15: 466736.941 ops/s
# Warmup Iteration  16: 494036.607 ops/s
# Warmup Iteration  17: 479299.130 ops/s
# Warmup Iteration  18: 502070.799 ops/s
# Warmup Iteration  19: 484492.630 ops/s
# Warmup Iteration  20: 507814.027 ops/s
# Warmup Iteration  21: 499776.503 ops/s
# Warmup Iteration  22: 485555.306 ops/s
# Warmup Iteration  23: 501546.335 ops/s
# Warmup Iteration  24: 501209.408 ops/s
# Warmup Iteration  25: 506840.693 ops/s
# Warmup Iteration  26: 508911.967 ops/s
# Warmup Iteration  27: 479379.208 ops/s
# Warmup Iteration  28: 512320.474 ops/s
# Warmup Iteration  29: 493946.686 ops/s
# Warmup Iteration  30: 494765.007 ops/s
Iteration   1: 498014.559 ops/s
Iteration   2: 490817.250 ops/s
Iteration   3: 509690.046 ops/s
Iteration   4: 485964.696 ops/s
Iteration   5: 496931.069 ops/s
Iteration   6: 489860.355 ops/s
Iteration   7: 491611.432 ops/s
Iteration   8: 519310.686 ops/s
Iteration   9: 484415.950 ops/s
Iteration  10: 511526.214 ops/s
Iteration  11: 492081.527 ops/s
Iteration  12: 507196.964 ops/s
Iteration  13: 492403.485 ops/s
Iteration  14: 486802.246 ops/s
Iteration  15: 526279.880 ops/s
Iteration  16: 508764.904 ops/s
Iteration  17: 491052.598 ops/s
Iteration  18: 509245.342 ops/s
Iteration  19: 502418.119 ops/s
Iteration  20: 505696.145 ops/s
Iteration  21: 495171.646 ops/s
Iteration  22: 508722.355 ops/s
Iteration  23: 493868.222 ops/s
Iteration  24: 505417.269 ops/s
Iteration  25: 514388.383 ops/s
Iteration  26: 488589.814 ops/s
Iteration  27: 506399.319 ops/s
Iteration  28: 496560.433 ops/s
Iteration  29: 512538.545 ops/s
Iteration  30: 491112.763 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe":
  500428.407 ±(99.9%) 7250.208 ops/s [Average]
  (min, avg, max) = (484415.950, 500428.407, 526279.880), stdev = 10851.771
  CI (99.9%): [493178.199, 507678.615] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  500428.407 ± 7250.208  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_innerErrorAfterMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_innerErrorAfterMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19955.070 ops/s
# Warmup Iteration   2: 72749.121 ops/s
# Warmup Iteration   3: 116002.477 ops/s
# Warmup Iteration   4: 162991.616 ops/s
# Warmup Iteration   5: 164184.410 ops/s
# Warmup Iteration   6: 166241.682 ops/s
# Warmup Iteration   7: 169688.304 ops/s
# Warmup Iteration   8: 158591.862 ops/s
# Warmup Iteration   9: 161404.011 ops/s
# Warmup Iteration  10: 175995.274 ops/s
# Warmup Iteration  11: 169667.693 ops/s
# Warmup Iteration  12: 161246.657 ops/s
# Warmup Iteration  13: 168142.133 ops/s
# Warmup Iteration  14: 154478.698 ops/s
# Warmup Iteration  15: 167523.992 ops/s
# Warmup Iteration  16: 177670.858 ops/s
# Warmup Iteration  17: 173172.675 ops/s
# Warmup Iteration  18: 183802.305 ops/s
# Warmup Iteration  19: 171505.807 ops/s
# Warmup Iteration  20: 175435.118 ops/s
# Warmup Iteration  21: 183666.872 ops/s
# Warmup Iteration  22: 178252.597 ops/s
# Warmup Iteration  23: 168167.224 ops/s
# Warmup Iteration  24: 177143.667 ops/s
# Warmup Iteration  25: 171114.499 ops/s
# Warmup Iteration  26: 177380.715 ops/s
# Warmup Iteration  27: 173854.873 ops/s
# Warmup Iteration  28: 170585.939 ops/s
# Warmup Iteration  29: 174104.131 ops/s
# Warmup Iteration  30: 170048.057 ops/s
Iteration   1: 172640.754 ops/s
Iteration   2: 169490.886 ops/s
Iteration   3: 173414.673 ops/s
Iteration   4: 176598.239 ops/s
Iteration   5: 171643.919 ops/s
Iteration   6: 171564.073 ops/s
Iteration   7: 170981.844 ops/s
Iteration   8: 176793.584 ops/s
Iteration   9: 175438.503 ops/s
Iteration  10: 140686.715 ops/s
Iteration  11: 175532.793 ops/s
Iteration  12: 173130.599 ops/s
Iteration  13: 174650.551 ops/s
Iteration  14: 176934.797 ops/s
Iteration  15: 180318.138 ops/s
Iteration  16: 170101.273 ops/s
Iteration  17: 177294.034 ops/s
Iteration  18: 173293.302 ops/s
Iteration  19: 172709.858 ops/s
Iteration  20: 180502.777 ops/s
Iteration  21: 181099.328 ops/s
Iteration  22: 177512.228 ops/s
Iteration  23: 175778.057 ops/s
Iteration  24: 173443.941 ops/s
Iteration  25: 179535.560 ops/s
Iteration  26: 177277.975 ops/s
Iteration  27: 169698.965 ops/s
Iteration  28: 182118.635 ops/s
Iteration  29: 170250.614 ops/s
Iteration  30: 179142.137 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapSingleTest._Benchmark.benchmark_innerErrorAfterMainError":
  173985.958 ±(99.9%) 4844.237 ops/s [Average]
  (min, avg, max) = (140686.715, 173985.958, 182118.635), stdev = 7250.626
  CI (99.9%): [169141.722, 178830.195] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
FlowableConcatMapSingleTest._Benchmark.benchmark_innerErrorAfterMainError  thrpt   30  173985.958 ± 4844.237  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_noSubscriberRetentionOnCompleted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_noSubscriberRetentionOnCompleted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 409620.822 ops/s
# Warmup Iteration   2: 1738647.221 ops/s
# Warmup Iteration   3: 2112596.650 ops/s
# Warmup Iteration   4: 2703305.649 ops/s
# Warmup Iteration   5: 2768776.655 ops/s
# Warmup Iteration   6: 2595678.252 ops/s
# Warmup Iteration   7: 2647697.976 ops/s
# Warmup Iteration   8: 2779818.858 ops/s
# Warmup Iteration   9: 2728349.026 ops/s
# Warmup Iteration  10: 2737659.848 ops/s
# Warmup Iteration  11: 2604279.316 ops/s
# Warmup Iteration  12: 2737699.455 ops/s
# Warmup Iteration  13: 2749300.943 ops/s
# Warmup Iteration  14: 2669916.762 ops/s
# Warmup Iteration  15: 2674755.740 ops/s
# Warmup Iteration  16: 2646709.665 ops/s
# Warmup Iteration  17: 2736298.757 ops/s
# Warmup Iteration  18: 2763500.407 ops/s
# Warmup Iteration  19: 2810629.990 ops/s
# Warmup Iteration  20: 2554552.891 ops/s
# Warmup Iteration  21: 2702883.159 ops/s
# Warmup Iteration  22: 2660421.092 ops/s
# Warmup Iteration  23: 2733918.979 ops/s
# Warmup Iteration  24: 2619173.424 ops/s
# Warmup Iteration  25: 2724775.232 ops/s
# Warmup Iteration  26: 2616445.238 ops/s
# Warmup Iteration  27: 2664960.497 ops/s
# Warmup Iteration  28: 2761803.704 ops/s
# Warmup Iteration  29: 2571857.909 ops/s
# Warmup Iteration  30: 2805637.543 ops/s
Iteration   1: 2609434.228 ops/s
Iteration   2: 2626167.955 ops/s
Iteration   3: 2710028.740 ops/s
Iteration   4: 2589198.402 ops/s
Iteration   5: 2719106.434 ops/s
Iteration   6: 2615373.470 ops/s
Iteration   7: 2530986.310 ops/s
Iteration   8: 2672237.565 ops/s
Iteration   9: 2648680.234 ops/s
Iteration  10: 2768850.806 ops/s
Iteration  11: 2582194.245 ops/s
Iteration  12: 2747394.249 ops/s
Iteration  13: 2689113.199 ops/s
Iteration  14: 2624917.501 ops/s
Iteration  15: 2764514.065 ops/s
Iteration  16: 2644223.544 ops/s
Iteration  17: 2671949.816 ops/s
Iteration  18: 2769771.035 ops/s
Iteration  19: 2597175.736 ops/s
Iteration  20: 2669119.791 ops/s
Iteration  21: 2778834.657 ops/s
Iteration  22: 2614791.176 ops/s
Iteration  23: 2745008.773 ops/s
Iteration  24: 2629961.581 ops/s
Iteration  25: 2774984.535 ops/s
Iteration  26: 2563637.976 ops/s
Iteration  27: 2672369.172 ops/s
Iteration  28: 2689424.698 ops/s
Iteration  29: 2612544.723 ops/s
Iteration  30: 2754488.919 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_noSubscriberRetentionOnCompleted":
  2669549.451 ±(99.9%) 47226.804 ops/s [Average]
  (min, avg, max) = (2530986.310, 2669549.451, 2778834.657), stdev = 70686.863
  CI (99.9%): [2622322.647, 2716776.255] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_noSubscriberRetentionOnCompleted  thrpt   30  2669549.451 ± 47226.804  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPathBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPathBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109924.300 ops/s
# Warmup Iteration   2: 396403.703 ops/s
# Warmup Iteration   3: 1174234.614 ops/s
# Warmup Iteration   4: 1271816.153 ops/s
# Warmup Iteration   5: 1449677.813 ops/s
# Warmup Iteration   6: 1389842.431 ops/s
# Warmup Iteration   7: 1428781.441 ops/s
# Warmup Iteration   8: 1424052.400 ops/s
# Warmup Iteration   9: 1396350.815 ops/s
# Warmup Iteration  10: 1450412.291 ops/s
# Warmup Iteration  11: 1361840.986 ops/s
# Warmup Iteration  12: 1443370.270 ops/s
# Warmup Iteration  13: 1410634.764 ops/s
# Warmup Iteration  14: 1409102.940 ops/s
# Warmup Iteration  15: 1395500.579 ops/s
# Warmup Iteration  16: 1400367.730 ops/s
# Warmup Iteration  17: 1406824.688 ops/s
# Warmup Iteration  18: 1377240.037 ops/s
# Warmup Iteration  19: 1404909.058 ops/s
# Warmup Iteration  20: 1378263.927 ops/s
# Warmup Iteration  21: 1441609.809 ops/s
# Warmup Iteration  22: 1393792.492 ops/s
# Warmup Iteration  23: 1404523.820 ops/s
# Warmup Iteration  24: 1453800.134 ops/s
# Warmup Iteration  25: 1339902.967 ops/s
# Warmup Iteration  26: 1422980.402 ops/s
# Warmup Iteration  27: 1440139.364 ops/s
# Warmup Iteration  28: 1377787.963 ops/s
# Warmup Iteration  29: 1473882.419 ops/s
# Warmup Iteration  30: 1366553.283 ops/s
Iteration   1: 1445681.042 ops/s
Iteration   2: 1385725.619 ops/s
Iteration   3: 1449980.257 ops/s
Iteration   4: 1157828.599 ops/s
Iteration   5: 1384849.519 ops/s
Iteration   6: 1460692.489 ops/s
Iteration   7: 1381685.043 ops/s
Iteration   8: 1429346.188 ops/s
Iteration   9: 1406354.834 ops/s
Iteration  10: 1398613.354 ops/s
Iteration  11: 1409439.793 ops/s
Iteration  12: 1412469.266 ops/s
Iteration  13: 1310548.333 ops/s
Iteration  14: 1410327.909 ops/s
Iteration  15: 1400737.306 ops/s
Iteration  16: 1450525.310 ops/s
Iteration  17: 1399120.637 ops/s
Iteration  18: 1459287.045 ops/s
Iteration  19: 1372048.982 ops/s
Iteration  20: 1449718.055 ops/s
Iteration  21: 1389502.712 ops/s
Iteration  22: 1441561.728 ops/s
Iteration  23: 1412976.066 ops/s
Iteration  24: 1397076.168 ops/s
Iteration  25: 1433319.735 ops/s
Iteration  26: 1407316.473 ops/s
Iteration  27: 1416233.894 ops/s
Iteration  28: 1354447.282 ops/s
Iteration  29: 1441936.876 ops/s
Iteration  30: 1397160.673 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPathBackpressured":
  1402217.040 ±(99.9%) 37915.911 ops/s [Average]
  (min, avg, max) = (1157828.599, 1402217.040, 1460692.489), stdev = 56750.754
  CI (99.9%): [1364301.129, 1440132.950] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPathBackpressured  thrpt   30  1402217.040 ± 37915.911  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_zeroRequested$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_zeroRequested

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 402250.840 ops/s
# Warmup Iteration   2: 1663572.999 ops/s
# Warmup Iteration   3: 2481023.724 ops/s
# Warmup Iteration   4: 2454595.009 ops/s
# Warmup Iteration   5: 2362824.581 ops/s
# Warmup Iteration   6: 2549322.495 ops/s
# Warmup Iteration   7: 2554200.002 ops/s
# Warmup Iteration   8: 2630934.222 ops/s
# Warmup Iteration   9: 2538396.995 ops/s
# Warmup Iteration  10: 2440683.276 ops/s
# Warmup Iteration  11: 2538404.981 ops/s
# Warmup Iteration  12: 2600930.424 ops/s
# Warmup Iteration  13: 2589089.722 ops/s
# Warmup Iteration  14: 2523484.611 ops/s
# Warmup Iteration  15: 2559837.424 ops/s
# Warmup Iteration  16: 2605429.517 ops/s
# Warmup Iteration  17: 2491600.536 ops/s
# Warmup Iteration  18: 2584138.300 ops/s
# Warmup Iteration  19: 2509753.347 ops/s
# Warmup Iteration  20: 2637154.608 ops/s
# Warmup Iteration  21: 2397108.859 ops/s
# Warmup Iteration  22: 2496558.522 ops/s
# Warmup Iteration  23: 2518835.116 ops/s
# Warmup Iteration  24: 2507671.134 ops/s
# Warmup Iteration  25: 2584652.426 ops/s
# Warmup Iteration  26: 2480610.961 ops/s
# Warmup Iteration  27: 2439701.625 ops/s
# Warmup Iteration  28: 2628705.796 ops/s
# Warmup Iteration  29: 2563280.684 ops/s
# Warmup Iteration  30: 2575809.062 ops/s
Iteration   1: 2446378.511 ops/s
Iteration   2: 2488528.312 ops/s
Iteration   3: 2595944.426 ops/s
Iteration   4: 2516824.153 ops/s
Iteration   5: 2506682.131 ops/s
Iteration   6: 2548608.795 ops/s
Iteration   7: 2534711.154 ops/s
Iteration   8: 2465100.480 ops/s
Iteration   9: 2574725.495 ops/s
Iteration  10: 2487565.683 ops/s
Iteration  11: 2454278.208 ops/s
Iteration  12: 2621086.246 ops/s
Iteration  13: 2452453.528 ops/s
Iteration  14: 2484279.461 ops/s
Iteration  15: 2606583.583 ops/s
Iteration  16: 2502181.385 ops/s
Iteration  17: 2541137.132 ops/s
Iteration  18: 2633584.906 ops/s
Iteration  19: 2509715.879 ops/s
Iteration  20: 2605870.090 ops/s
Iteration  21: 2443091.030 ops/s
Iteration  22: 2577559.052 ops/s
Iteration  23: 2553402.304 ops/s
Iteration  24: 2533212.025 ops/s
Iteration  25: 2510529.227 ops/s
Iteration  26: 2579774.552 ops/s
Iteration  27: 2515334.395 ops/s
Iteration  28: 2504670.742 ops/s
Iteration  29: 2582603.231 ops/s
Iteration  30: 2579653.567 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_zeroRequested":
  2531868.989 ±(99.9%) 36629.535 ops/s [Average]
  (min, avg, max) = (2443091.030, 2531868.989, 2633584.906), stdev = 54825.368
  CI (99.9%): [2495239.454, 2568498.525] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_zeroRequested  thrpt   30  2531868.989 ± 36629.535  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_syncFusedCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_syncFusedCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.754 ops/s
# Warmup Iteration   2: 21668.376 ops/s
# Warmup Iteration   3: 126047.724 ops/s
# Warmup Iteration   4: 217886.944 ops/s
# Warmup Iteration   5: 185461.328 ops/s
# Warmup Iteration   6: 499349.682 ops/s
# Warmup Iteration   7: 501096.842 ops/s
# Warmup Iteration   8: 573974.471 ops/s
# Warmup Iteration   9: 543944.751 ops/s
# Warmup Iteration  10: 552515.861 ops/s
# Warmup Iteration  11: 571480.112 ops/s
# Warmup Iteration  12: 555996.381 ops/s
# Warmup Iteration  13: 535139.421 ops/s
# Warmup Iteration  14: 559430.638 ops/s
# Warmup Iteration  15: 547604.344 ops/s
# Warmup Iteration  16: 577043.858 ops/s
# Warmup Iteration  17: 545044.404 ops/s
# Warmup Iteration  18: 565982.524 ops/s
# Warmup Iteration  19: 581745.298 ops/s
# Warmup Iteration  20: 546057.449 ops/s
# Warmup Iteration  21: 557183.987 ops/s
# Warmup Iteration  22: 548458.599 ops/s
# Warmup Iteration  23: 567436.762 ops/s
# Warmup Iteration  24: 535196.649 ops/s
# Warmup Iteration  25: 564594.890 ops/s
# Warmup Iteration  26: 569205.902 ops/s
# Warmup Iteration  27: 539840.046 ops/s
# Warmup Iteration  28: 458847.878 ops/s
# Warmup Iteration  29: 575162.395 ops/s
# Warmup Iteration  30: 507147.959 ops/s
Iteration   1: 538302.723 ops/s
Iteration   2: 567397.685 ops/s
Iteration   3: 552872.456 ops/s
Iteration   4: 549715.977 ops/s
Iteration   5: 543324.594 ops/s
Iteration   6: 537348.737 ops/s
Iteration   7: 573326.420 ops/s
Iteration   8: 538966.113 ops/s
Iteration   9: 560434.763 ops/s
Iteration  10: 555780.468 ops/s
Iteration  11: 573786.121 ops/s
Iteration  12: 555452.838 ops/s
Iteration  13: 558821.405 ops/s
Iteration  14: 559537.642 ops/s
Iteration  15: 556822.911 ops/s
Iteration  16: 561403.976 ops/s
Iteration  17: 548972.841 ops/s
Iteration  18: 549072.891 ops/s
Iteration  19: 559442.932 ops/s
Iteration  20: 564062.273 ops/s
Iteration  21: 579438.003 ops/s
Iteration  22: 530413.879 ops/s
Iteration  23: 584615.751 ops/s
Iteration  24: 590427.982 ops/s
Iteration  25: 546051.376 ops/s
Iteration  26: 564544.959 ops/s
Iteration  27: 587466.631 ops/s
Iteration  28: 547320.786 ops/s
Iteration  29: 572315.808 ops/s
Iteration  30: 546531.634 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_syncFusedCompletable":
  558465.752 ±(99.9%) 10209.060 ops/s [Average]
  (min, avg, max) = (530413.879, 558465.752, 590427.982), stdev = 15280.441
  CI (99.9%): [548256.693, 568674.812] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_syncFusedCompletable  thrpt   30  558465.752 ± 10209.060  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_emptyInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_emptyInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.729 ops/s
# Warmup Iteration   2: 27165.770 ops/s
# Warmup Iteration   3: 93941.991 ops/s
# Warmup Iteration   4: 153207.012 ops/s
# Warmup Iteration   5: 259158.172 ops/s
# Warmup Iteration   6: 409207.860 ops/s
# Warmup Iteration   7: 564987.158 ops/s
# Warmup Iteration   8: 536219.289 ops/s
# Warmup Iteration   9: 552744.287 ops/s
# Warmup Iteration  10: 591614.491 ops/s
# Warmup Iteration  11: 594491.248 ops/s
# Warmup Iteration  12: 620626.673 ops/s
# Warmup Iteration  13: 617370.480 ops/s
# Warmup Iteration  14: 600343.186 ops/s
# Warmup Iteration  15: 610626.861 ops/s
# Warmup Iteration  16: 587518.206 ops/s
# Warmup Iteration  17: 599934.325 ops/s
# Warmup Iteration  18: 603819.687 ops/s
# Warmup Iteration  19: 557502.152 ops/s
# Warmup Iteration  20: 609471.787 ops/s
# Warmup Iteration  21: 591928.670 ops/s
# Warmup Iteration  22: 582771.092 ops/s
# Warmup Iteration  23: 568965.936 ops/s
# Warmup Iteration  24: 595630.545 ops/s
# Warmup Iteration  25: 574797.194 ops/s
# Warmup Iteration  26: 573314.946 ops/s
# Warmup Iteration  27: 611873.474 ops/s
# Warmup Iteration  28: 599069.734 ops/s
# Warmup Iteration  29: 577668.724 ops/s
# Warmup Iteration  30: 594847.107 ops/s
Iteration   1: 596147.229 ops/s
Iteration   2: 592341.805 ops/s
Iteration   3: 578377.408 ops/s
Iteration   4: 580243.097 ops/s
Iteration   5: 596499.959 ops/s
Iteration   6: 574348.441 ops/s
Iteration   7: 584856.680 ops/s
Iteration   8: 562335.582 ops/s
Iteration   9: 587081.686 ops/s
Iteration  10: 607128.855 ops/s
Iteration  11: 572794.748 ops/s
Iteration  12: 592399.912 ops/s
Iteration  13: 593668.923 ops/s
Iteration  14: 593922.404 ops/s
Iteration  15: 569875.197 ops/s
Iteration  16: 604264.303 ops/s
Iteration  17: 570854.432 ops/s
Iteration  18: 607989.366 ops/s
Iteration  19: 608275.695 ops/s
Iteration  20: 574785.580 ops/s
Iteration  21: 596696.981 ops/s
Iteration  22: 615403.833 ops/s
Iteration  23: 574612.575 ops/s
Iteration  24: 617547.421 ops/s
Iteration  25: 575082.877 ops/s
Iteration  26: 599841.069 ops/s
Iteration  27: 601001.326 ops/s
Iteration  28: 578072.736 ops/s
Iteration  29: 606966.132 ops/s
Iteration  30: 585328.756 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_emptyInner":
  589958.167 ±(99.9%) 9946.404 ops/s [Average]
  (min, avg, max) = (562335.582, 589958.167, 617547.421), stdev = 14887.310
  CI (99.9%): [580011.763, 599904.571] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_emptyInner  thrpt   30  589958.167 ± 9946.404  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerNoSubscriptionYet$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerNoSubscriptionYet

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.771 ops/s
# Warmup Iteration   2: 61961.593 ops/s
# Warmup Iteration   3: 187239.997 ops/s
# Warmup Iteration   4: 288990.294 ops/s
# Warmup Iteration   5: 533384.541 ops/s
# Warmup Iteration   6: 781553.092 ops/s
# Warmup Iteration   7: 886812.125 ops/s
# Warmup Iteration   8: 735544.320 ops/s
# Warmup Iteration   9: 825752.556 ops/s
# Warmup Iteration  10: 901402.955 ops/s
# Warmup Iteration  11: 845401.639 ops/s
# Warmup Iteration  12: 885440.320 ops/s
# Warmup Iteration  13: 909905.289 ops/s
# Warmup Iteration  14: 847900.419 ops/s
# Warmup Iteration  15: 864954.516 ops/s
# Warmup Iteration  16: 883046.114 ops/s
# Warmup Iteration  17: 858985.315 ops/s
# Warmup Iteration  18: 871198.117 ops/s
# Warmup Iteration  19: 855077.747 ops/s
# Warmup Iteration  20: 890289.924 ops/s
# Warmup Iteration  21: 856912.545 ops/s
# Warmup Iteration  22: 748713.725 ops/s
# Warmup Iteration  23: 876000.560 ops/s
# Warmup Iteration  24: 835933.387 ops/s
# Warmup Iteration  25: 910908.085 ops/s
# Warmup Iteration  26: 862122.203 ops/s
# Warmup Iteration  27: 908558.517 ops/s
# Warmup Iteration  28: 903363.478 ops/s
# Warmup Iteration  29: 846916.807 ops/s
# Warmup Iteration  30: 899866.327 ops/s
Iteration   1: 844596.909 ops/s
Iteration   2: 873990.222 ops/s
Iteration   3: 885044.803 ops/s
Iteration   4: 846905.138 ops/s
Iteration   5: 893668.457 ops/s
Iteration   6: 841323.300 ops/s
Iteration   7: 860484.535 ops/s
Iteration   8: 892432.555 ops/s
Iteration   9: 861141.914 ops/s
Iteration  10: 876006.014 ops/s
Iteration  11: 862671.486 ops/s
Iteration  12: 893708.333 ops/s
Iteration  13: 866082.100 ops/s
Iteration  14: 844802.178 ops/s
Iteration  15: 858773.472 ops/s
Iteration  16: 871338.416 ops/s
Iteration  17: 857306.683 ops/s
Iteration  18: 884004.064 ops/s
Iteration  19: 872194.342 ops/s
Iteration  20: 888264.981 ops/s
Iteration  21: 869010.085 ops/s
Iteration  22: 897701.499 ops/s
Iteration  23: 899555.581 ops/s
Iteration  24: 851699.335 ops/s
Iteration  25: 910378.989 ops/s
Iteration  26: 875989.996 ops/s
Iteration  27: 889947.168 ops/s
Iteration  28: 856147.592 ops/s
Iteration  29: 865503.147 ops/s
Iteration  30: 886120.444 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerNoSubscriptionYet":
  872559.791 ±(99.9%) 12355.450 ops/s [Average]
  (min, avg, max) = (841323.300, 872559.791, 910378.989), stdev = 18493.057
  CI (99.9%): [860204.342, 884915.241] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_innerNoSubscriptionYet  thrpt   30  872559.791 ± 12355.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapFusedIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapFusedIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.782 ops/s
# Warmup Iteration   2: 42342.834 ops/s
# Warmup Iteration   3: 127912.143 ops/s
# Warmup Iteration   4: 132456.426 ops/s
# Warmup Iteration   5: 188635.317 ops/s
# Warmup Iteration   6: 179100.352 ops/s
# Warmup Iteration   7: 436079.702 ops/s
# Warmup Iteration   8: 664049.515 ops/s
# Warmup Iteration   9: 667125.814 ops/s
# Warmup Iteration  10: 655552.477 ops/s
# Warmup Iteration  11: 640766.171 ops/s
# Warmup Iteration  12: 653371.299 ops/s
# Warmup Iteration  13: 620411.783 ops/s
# Warmup Iteration  14: 693947.644 ops/s
# Warmup Iteration  15: 664103.633 ops/s
# Warmup Iteration  16: 690203.016 ops/s
# Warmup Iteration  17: 645140.869 ops/s
# Warmup Iteration  18: 692596.692 ops/s
# Warmup Iteration  19: 694070.828 ops/s
# Warmup Iteration  20: 679260.034 ops/s
# Warmup Iteration  21: 699431.100 ops/s
# Warmup Iteration  22: 678465.510 ops/s
# Warmup Iteration  23: 698374.665 ops/s
# Warmup Iteration  24: 676055.860 ops/s
# Warmup Iteration  25: 676921.639 ops/s
# Warmup Iteration  26: 676481.855 ops/s
# Warmup Iteration  27: 679866.215 ops/s
# Warmup Iteration  28: 690041.658 ops/s
# Warmup Iteration  29: 700369.351 ops/s
# Warmup Iteration  30: 678309.162 ops/s
Iteration   1: 695394.671 ops/s
Iteration   2: 675359.950 ops/s
Iteration   3: 706784.514 ops/s
Iteration   4: 659210.513 ops/s
Iteration   5: 689527.480 ops/s
Iteration   6: 702593.653 ops/s
Iteration   7: 682145.532 ops/s
Iteration   8: 711931.033 ops/s
Iteration   9: 720434.754 ops/s
Iteration  10: 683955.323 ops/s
Iteration  11: 675629.549 ops/s
Iteration  12: 696383.782 ops/s
Iteration  13: 661030.598 ops/s
Iteration  14: 687741.707 ops/s
Iteration  15: 705819.263 ops/s
Iteration  16: 705452.567 ops/s
Iteration  17: 658774.064 ops/s
Iteration  18: 701778.418 ops/s
Iteration  19: 679916.808 ops/s
Iteration  20: 689348.700 ops/s
Iteration  21: 707782.914 ops/s
Iteration  22: 664462.150 ops/s
Iteration  23: 693825.552 ops/s
Iteration  24: 657674.225 ops/s
Iteration  25: 692907.710 ops/s
Iteration  26: 668290.332 ops/s
Iteration  27: 701559.229 ops/s
Iteration  28: 656856.243 ops/s
Iteration  29: 668975.302 ops/s
Iteration  30: 701568.150 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchMapFusedIterable":
  686770.490 ±(99.9%) 12367.285 ops/s [Average]
  (min, avg, max) = (656856.243, 686770.490, 720434.754), stdev = 18510.771
  CI (99.9%): [674403.205, 699137.774] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchMapFusedIterable  thrpt   30  686770.490 ± 12367.285  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_justInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_justInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.691 ops/s
# Warmup Iteration   2: 35199.083 ops/s
# Warmup Iteration   3: 137758.236 ops/s
# Warmup Iteration   4: 183385.995 ops/s
# Warmup Iteration   5: 136166.305 ops/s
# Warmup Iteration   6: 262281.555 ops/s
# Warmup Iteration   7: 294197.144 ops/s
# Warmup Iteration   8: 537470.163 ops/s
# Warmup Iteration   9: 582954.810 ops/s
# Warmup Iteration  10: 576509.818 ops/s
# Warmup Iteration  11: 532419.884 ops/s
# Warmup Iteration  12: 556120.529 ops/s
# Warmup Iteration  13: 562974.284 ops/s
# Warmup Iteration  14: 562335.971 ops/s
# Warmup Iteration  15: 416055.304 ops/s
# Warmup Iteration  16: 565671.330 ops/s
# Warmup Iteration  17: 556755.166 ops/s
# Warmup Iteration  18: 543165.546 ops/s
# Warmup Iteration  19: 578282.775 ops/s
# Warmup Iteration  20: 555087.634 ops/s
# Warmup Iteration  21: 551927.609 ops/s
# Warmup Iteration  22: 579560.001 ops/s
# Warmup Iteration  23: 549300.809 ops/s
# Warmup Iteration  24: 555723.558 ops/s
# Warmup Iteration  25: 559621.860 ops/s
# Warmup Iteration  26: 549331.389 ops/s
# Warmup Iteration  27: 559133.535 ops/s
# Warmup Iteration  28: 575666.222 ops/s
# Warmup Iteration  29: 558886.927 ops/s
# Warmup Iteration  30: 572973.906 ops/s
Iteration   1: 552475.219 ops/s
Iteration   2: 570520.316 ops/s
Iteration   3: 559603.981 ops/s
Iteration   4: 561922.148 ops/s
Iteration   5: 559198.392 ops/s
Iteration   6: 548761.279 ops/s
Iteration   7: 576922.842 ops/s
Iteration   8: 562725.237 ops/s
Iteration   9: 545575.875 ops/s
Iteration  10: 568836.123 ops/s
Iteration  11: 571419.293 ops/s
Iteration  12: 556899.591 ops/s
Iteration  13: 571762.423 ops/s
Iteration  14: 557300.302 ops/s
Iteration  15: 551207.222 ops/s
Iteration  16: 559256.057 ops/s
Iteration  17: 589120.273 ops/s
Iteration  18: 567392.024 ops/s
Iteration  19: 564598.882 ops/s
Iteration  20: 575326.847 ops/s
Iteration  21: 551959.596 ops/s
Iteration  22: 563087.612 ops/s
Iteration  23: 553536.602 ops/s
Iteration  24: 572314.330 ops/s
Iteration  25: 560649.649 ops/s
Iteration  26: 536184.476 ops/s
Iteration  27: 584189.148 ops/s
Iteration  28: 552690.016 ops/s
Iteration  29: 557455.972 ops/s
Iteration  30: 574789.791 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_justInner":
  562589.384 ±(99.9%) 7745.973 ops/s [Average]
  (min, avg, max) = (536184.476, 562589.384, 589120.273), stdev = 11593.808
  CI (99.9%): [554843.411, 570335.356] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_justInner  thrpt   30  562589.384 ± 7745.973  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_badMainSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_badMainSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.743 ops/s
# Warmup Iteration   2: 16825.057 ops/s
# Warmup Iteration   3: 43832.772 ops/s
# Warmup Iteration   4: 59633.536 ops/s
# Warmup Iteration   5: 57385.760 ops/s
# Warmup Iteration   6: 49793.677 ops/s
# Warmup Iteration   7: 140126.019 ops/s
# Warmup Iteration   8: 149793.022 ops/s
# Warmup Iteration   9: 179443.184 ops/s
# Warmup Iteration  10: 173148.738 ops/s
# Warmup Iteration  11: 177568.069 ops/s
# Warmup Iteration  12: 175133.500 ops/s
# Warmup Iteration  13: 176750.558 ops/s
# Warmup Iteration  14: 177301.455 ops/s
# Warmup Iteration  15: 170797.083 ops/s
# Warmup Iteration  16: 178278.062 ops/s
# Warmup Iteration  17: 177712.392 ops/s
# Warmup Iteration  18: 179157.728 ops/s
# Warmup Iteration  19: 172856.527 ops/s
# Warmup Iteration  20: 174078.997 ops/s
# Warmup Iteration  21: 183434.043 ops/s
# Warmup Iteration  22: 173614.784 ops/s
# Warmup Iteration  23: 179410.438 ops/s
# Warmup Iteration  24: 177071.685 ops/s
# Warmup Iteration  25: 179258.832 ops/s
# Warmup Iteration  26: 184708.010 ops/s
# Warmup Iteration  27: 171124.429 ops/s
# Warmup Iteration  28: 185037.484 ops/s
# Warmup Iteration  29: 168607.899 ops/s
# Warmup Iteration  30: 181387.742 ops/s
Iteration   1: 182871.877 ops/s
Iteration   2: 173929.433 ops/s
Iteration   3: 179732.169 ops/s
Iteration   4: 176690.804 ops/s
Iteration   5: 180230.390 ops/s
Iteration   6: 185261.503 ops/s
Iteration   7: 173932.185 ops/s
Iteration   8: 182073.480 ops/s
Iteration   9: 182316.801 ops/s
Iteration  10: 174802.739 ops/s
Iteration  11: 178444.791 ops/s
Iteration  12: 172736.652 ops/s
Iteration  13: 180956.075 ops/s
Iteration  14: 175189.776 ops/s
Iteration  15: 178266.364 ops/s
Iteration  16: 178936.048 ops/s
Iteration  17: 175900.601 ops/s
Iteration  18: 184022.450 ops/s
Iteration  19: 178487.055 ops/s
Iteration  20: 186331.937 ops/s
Iteration  21: 179057.630 ops/s
Iteration  22: 171257.708 ops/s
Iteration  23: 185780.261 ops/s
Iteration  24: 177739.213 ops/s
Iteration  25: 185323.548 ops/s
Iteration  26: 177317.099 ops/s
Iteration  27: 182838.218 ops/s
Iteration  28: 180241.509 ops/s
Iteration  29: 174824.583 ops/s
Iteration  30: 184993.976 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_badMainSource":
  179349.562 ±(99.9%) 2814.428 ops/s [Average]
  (min, avg, max) = (171257.708, 179349.562, 186331.937), stdev = 4212.504
  CI (99.9%): [176535.134, 182163.991] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_badMainSource  thrpt   30  179349.562 ± 2814.428  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 567824.216 ops/s
# Warmup Iteration   2: 1770686.573 ops/s
# Warmup Iteration   3: 2453820.298 ops/s
# Warmup Iteration   4: 2716780.178 ops/s
# Warmup Iteration   5: 2850089.573 ops/s
# Warmup Iteration   6: 2705337.496 ops/s
# Warmup Iteration   7: 2834547.615 ops/s
# Warmup Iteration   8: 2769512.082 ops/s
# Warmup Iteration   9: 2582093.849 ops/s
# Warmup Iteration  10: 2345401.117 ops/s
# Warmup Iteration  11: 2751191.429 ops/s
# Warmup Iteration  12: 2759918.943 ops/s
# Warmup Iteration  13: 2851888.373 ops/s
# Warmup Iteration  14: 2722528.509 ops/s
# Warmup Iteration  15: 2849390.266 ops/s
# Warmup Iteration  16: 2755910.410 ops/s
# Warmup Iteration  17: 2725324.675 ops/s
# Warmup Iteration  18: 2772180.374 ops/s
# Warmup Iteration  19: 2692173.078 ops/s
# Warmup Iteration  20: 2892688.313 ops/s
# Warmup Iteration  21: 2664504.927 ops/s
# Warmup Iteration  22: 2837309.411 ops/s
# Warmup Iteration  23: 2775053.599 ops/s
# Warmup Iteration  24: 2671659.077 ops/s
# Warmup Iteration  25: 2820186.296 ops/s
# Warmup Iteration  26: 2771640.939 ops/s
# Warmup Iteration  27: 2719689.289 ops/s
# Warmup Iteration  28: 2832912.377 ops/s
# Warmup Iteration  29: 2787826.652 ops/s
# Warmup Iteration  30: 2837359.010 ops/s
Iteration   1: 2743725.030 ops/s
Iteration   2: 2765753.986 ops/s
Iteration   3: 2839342.821 ops/s
Iteration   4: 2741076.915 ops/s
Iteration   5: 2779893.213 ops/s
Iteration   6: 2701563.798 ops/s
Iteration   7: 2828427.353 ops/s
Iteration   8: 2843922.741 ops/s
Iteration   9: 2720525.126 ops/s
Iteration  10: 2872090.427 ops/s
Iteration  11: 2716130.897 ops/s
Iteration  12: 2847676.081 ops/s
Iteration  13: 2692129.029 ops/s
Iteration  14: 2797366.978 ops/s
Iteration  15: 2767159.979 ops/s
Iteration  16: 2724840.560 ops/s
Iteration  17: 2810683.344 ops/s
Iteration  18: 2861722.648 ops/s
Iteration  19: 2711156.727 ops/s
Iteration  20: 2791646.333 ops/s
Iteration  21: 2758392.792 ops/s
Iteration  22: 2771739.650 ops/s
Iteration  23: 2759318.055 ops/s
Iteration  24: 2794824.431 ops/s
Iteration  25: 2887969.463 ops/s
Iteration  26: 2875928.201 ops/s
Iteration  27: 2742509.809 ops/s
Iteration  28: 2858026.791 ops/s
Iteration  29: 2797097.762 ops/s
Iteration  30: 2757608.872 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_take":
  2785341.660 ±(99.9%) 37837.982 ops/s [Average]
  (min, avg, max) = (2692129.029, 2785341.660, 2887969.463), stdev = 56634.114
  CI (99.9%): [2747503.678, 2823179.642] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableMergeWithCompletableTest._Benchmark.benchmark_take  thrpt   30  2785341.660 ± 37837.982  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3058810.765 ops/s
# Warmup Iteration   2: 8949033.322 ops/s
# Warmup Iteration   3: 10189542.298 ops/s
# Warmup Iteration   4: 10122580.407 ops/s
# Warmup Iteration   5: 11398570.115 ops/s
# Warmup Iteration   6: 10696020.097 ops/s
# Warmup Iteration   7: 10892712.253 ops/s
# Warmup Iteration   8: 11416706.807 ops/s
# Warmup Iteration   9: 11170779.139 ops/s
# Warmup Iteration  10: 10661890.452 ops/s
# Warmup Iteration  11: 11242814.169 ops/s
# Warmup Iteration  12: 10990930.075 ops/s
# Warmup Iteration  13: 10974977.781 ops/s
# Warmup Iteration  14: 11066624.531 ops/s
# Warmup Iteration  15: 11424676.308 ops/s
# Warmup Iteration  16: 11302629.485 ops/s
# Warmup Iteration  17: 10916107.163 ops/s
# Warmup Iteration  18: 11119497.302 ops/s
# Warmup Iteration  19: 11578333.910 ops/s
# Warmup Iteration  20: 10971821.774 ops/s
# Warmup Iteration  21: 11246638.432 ops/s
# Warmup Iteration  22: 10885059.519 ops/s
# Warmup Iteration  23: 10871814.283 ops/s
# Warmup Iteration  24: 11226930.319 ops/s
# Warmup Iteration  25: 11069970.111 ops/s
# Warmup Iteration  26: 10754513.625 ops/s
# Warmup Iteration  27: 11096367.751 ops/s
# Warmup Iteration  28: 10984204.117 ops/s
# Warmup Iteration  29: 10714297.569 ops/s
# Warmup Iteration  30: 11064913.473 ops/s
Iteration   1: 11294676.683 ops/s
Iteration   2: 10695614.399 ops/s
Iteration   3: 11061071.246 ops/s
Iteration   4: 10716480.402 ops/s
Iteration   5: 11066667.490 ops/s
Iteration   6: 11175199.910 ops/s
Iteration   7: 10783315.760 ops/s
Iteration   8: 11326723.975 ops/s
Iteration   9: 11398475.409 ops/s
Iteration  10: 10888635.002 ops/s
Iteration  11: 11179168.737 ops/s
Iteration  12: 10710170.843 ops/s
Iteration  13: 11210946.345 ops/s
Iteration  14: 10849559.568 ops/s
Iteration  15: 10911518.737 ops/s
Iteration  16: 11392608.321 ops/s
Iteration  17: 10920441.653 ops/s
Iteration  18: 11277290.126 ops/s
Iteration  19: 10749398.279 ops/s
Iteration  20: 11121505.847 ops/s
Iteration  21: 11388572.207 ops/s
Iteration  22: 10735729.160 ops/s
Iteration  23: 11650689.052 ops/s
Iteration  24: 10769259.247 ops/s
Iteration  25: 10894358.918 ops/s
Iteration  26: 11429300.187 ops/s
Iteration  27: 10837726.668 ops/s
Iteration  28: 11403200.019 ops/s
Iteration  29: 11249204.443 ops/s
Iteration  30: 10705029.585 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_dispose":
  11059751.274 ±(99.9%) 186240.424 ops/s [Average]
  (min, avg, max) = (10695614.399, 11059751.274, 11650689.052), stdev = 278755.920
  CI (99.9%): [10873510.850, 11245991.698] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
CompletableCreateTest._Benchmark.benchmark_dispose  thrpt   30  11059751.274 ± 186240.424  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_completableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_completableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 410596.929 ops/s
# Warmup Iteration   2: 574520.731 ops/s
# Warmup Iteration   3: 677839.489 ops/s
# Warmup Iteration   4: 452219.480 ops/s
# Warmup Iteration   5: 677080.458 ops/s
# Warmup Iteration   6: 578980.099 ops/s
# Warmup Iteration   7: 716748.660 ops/s
# Warmup Iteration   8: 698018.780 ops/s
# Warmup Iteration   9: 699118.841 ops/s
# Warmup Iteration  10: 695195.273 ops/s
# Warmup Iteration  11: 703963.014 ops/s
# Warmup Iteration  12: 684452.787 ops/s
# Warmup Iteration  13: 710702.248 ops/s
# Warmup Iteration  14: 692116.973 ops/s
# Warmup Iteration  15: 697131.599 ops/s
# Warmup Iteration  16: 715213.933 ops/s
# Warmup Iteration  17: 738884.235 ops/s
# Warmup Iteration  18: 740120.473 ops/s
# Warmup Iteration  19: 747830.859 ops/s
# Warmup Iteration  20: 724828.490 ops/s
# Warmup Iteration  21: 760522.397 ops/s
# Warmup Iteration  22: 724588.071 ops/s
# Warmup Iteration  23: 756975.426 ops/s
# Warmup Iteration  24: 749516.648 ops/s
# Warmup Iteration  25: 717453.589 ops/s
# Warmup Iteration  26: 754655.914 ops/s
# Warmup Iteration  27: 726693.445 ops/s
# Warmup Iteration  28: 746370.278 ops/s
# Warmup Iteration  29: 756663.467 ops/s
# Warmup Iteration  30: 720752.810 ops/s
Iteration   1: 756940.852 ops/s
Iteration   2: 713170.053 ops/s
Iteration   3: 739002.678 ops/s
Iteration   4: 744379.589 ops/s
Iteration   5: 734370.954 ops/s
Iteration   6: 734578.987 ops/s
Iteration   7: 730676.286 ops/s
Iteration   8: 767175.184 ops/s
Iteration   9: 741373.157 ops/s
Iteration  10: 727317.463 ops/s
Iteration  11: 780944.648 ops/s
Iteration  12: 726556.372 ops/s
Iteration  13: 767941.155 ops/s
Iteration  14: 752705.249 ops/s
Iteration  15: 717561.225 ops/s
Iteration  16: 745426.505 ops/s
Iteration  17: 736956.371 ops/s
Iteration  18: 735517.909 ops/s
Iteration  19: 754614.128 ops/s
Iteration  20: 685497.362 ops/s
Iteration  21: 749600.496 ops/s
Iteration  22: 757260.103 ops/s
Iteration  23: 730307.330 ops/s
Iteration  24: 764273.099 ops/s
Iteration  25: 733273.814 ops/s
Iteration  26: 732107.088 ops/s
Iteration  27: 735944.034 ops/s
Iteration  28: 720209.324 ops/s
Iteration  29: 762260.499 ops/s
Iteration  30: 772662.768 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_completableFutureCancels":
  741686.823 ±(99.9%) 13412.775 ops/s [Average]
  (min, avg, max) = (685497.362, 741686.823, 780944.648), stdev = 20075.612
  CI (99.9%): [728274.047, 755099.598] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
CompletableToCompletionStageTest._Benchmark.benchmark_completableFutureCancels  thrpt   30  741686.823 ± 13412.775  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2559891.939 ops/s
# Warmup Iteration   2: 4406909.523 ops/s
# Warmup Iteration   3: 5895490.571 ops/s
# Warmup Iteration   4: 6149378.926 ops/s
# Warmup Iteration   5: 6618200.289 ops/s
# Warmup Iteration   6: 6564209.467 ops/s
# Warmup Iteration   7: 6167784.354 ops/s
# Warmup Iteration   8: 6341349.472 ops/s
# Warmup Iteration   9: 6675103.334 ops/s
# Warmup Iteration  10: 6207594.983 ops/s
# Warmup Iteration  11: 6254145.080 ops/s
# Warmup Iteration  12: 6525648.597 ops/s
# Warmup Iteration  13: 6263905.061 ops/s
# Warmup Iteration  14: 6553335.804 ops/s
# Warmup Iteration  15: 6035022.425 ops/s
# Warmup Iteration  16: 6359295.480 ops/s
# Warmup Iteration  17: 6592968.572 ops/s
# Warmup Iteration  18: 6172050.460 ops/s
# Warmup Iteration  19: 6560676.611 ops/s
# Warmup Iteration  20: 6254961.333 ops/s
# Warmup Iteration  21: 6435270.844 ops/s
# Warmup Iteration  22: 6342610.225 ops/s
# Warmup Iteration  23: 6413372.304 ops/s
# Warmup Iteration  24: 6461764.953 ops/s
# Warmup Iteration  25: 6127315.125 ops/s
# Warmup Iteration  26: 6484257.533 ops/s
# Warmup Iteration  27: 6130243.963 ops/s
# Warmup Iteration  28: 6414667.183 ops/s
# Warmup Iteration  29: 6661054.040 ops/s
# Warmup Iteration  30: 6169285.222 ops/s
Iteration   1: 6305137.736 ops/s
Iteration   2: 6574532.991 ops/s
Iteration   3: 6203083.343 ops/s
Iteration   4: 6460859.048 ops/s
Iteration   5: 6221921.932 ops/s
Iteration   6: 6376312.657 ops/s
Iteration   7: 6472679.771 ops/s
Iteration   8: 6325029.679 ops/s
Iteration   9: 6566860.822 ops/s
Iteration  10: 6313725.673 ops/s
Iteration  11: 6442423.255 ops/s
Iteration  12: 6357381.319 ops/s
Iteration  13: 6341411.370 ops/s
Iteration  14: 6649857.057 ops/s
Iteration  15: 6476213.063 ops/s
Iteration  16: 6201558.386 ops/s
Iteration  17: 6342011.995 ops/s
Iteration  18: 6467219.219 ops/s
Iteration  19: 6343038.837 ops/s
Iteration  20: 6504869.916 ops/s
Iteration  21: 6230639.802 ops/s
Iteration  22: 6637124.337 ops/s
Iteration  23: 6200978.357 ops/s
Iteration  24: 6564095.160 ops/s
Iteration  25: 6419106.044 ops/s
Iteration  26: 6372497.480 ops/s
Iteration  27: 6345330.575 ops/s
Iteration  28: 6266932.917 ops/s
Iteration  29: 6564692.748 ops/s
Iteration  30: 6090667.001 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels":
  6387939.750 ±(99.9%) 95207.770 ops/s [Average]
  (min, avg, max) = (6090667.001, 6387939.750, 6649857.057), stdev = 142502.518
  CI (99.9%): [6292731.980, 6483147.519] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
CompletableToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels  thrpt   30  6387939.750 ± 95207.770  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_arrayCancelled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_arrayCancelled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2871284.875 ops/s
# Warmup Iteration   2: 6102872.044 ops/s
# Warmup Iteration   3: 8272633.842 ops/s
# Warmup Iteration   4: 8268752.120 ops/s
# Warmup Iteration   5: 8409600.550 ops/s
# Warmup Iteration   6: 8254632.539 ops/s
# Warmup Iteration   7: 8365087.376 ops/s
# Warmup Iteration   8: 8161047.489 ops/s
# Warmup Iteration   9: 8315255.668 ops/s
# Warmup Iteration  10: 8248437.680 ops/s
# Warmup Iteration  11: 8078698.564 ops/s
# Warmup Iteration  12: 8557074.614 ops/s
# Warmup Iteration  13: 8239845.958 ops/s
# Warmup Iteration  14: 8444872.139 ops/s
# Warmup Iteration  15: 8228692.591 ops/s
# Warmup Iteration  16: 8276573.554 ops/s
# Warmup Iteration  17: 8258755.642 ops/s
# Warmup Iteration  18: 8092627.703 ops/s
# Warmup Iteration  19: 8388953.790 ops/s
# Warmup Iteration  20: 8382095.176 ops/s
# Warmup Iteration  21: 8627229.696 ops/s
# Warmup Iteration  22: 8271128.749 ops/s
# Warmup Iteration  23: 8233954.027 ops/s
# Warmup Iteration  24: 8440002.515 ops/s
# Warmup Iteration  25: 8029214.006 ops/s
# Warmup Iteration  26: 8295677.985 ops/s
# Warmup Iteration  27: 8568559.329 ops/s
# Warmup Iteration  28: 7877118.464 ops/s
# Warmup Iteration  29: 8652421.560 ops/s
# Warmup Iteration  30: 8374814.442 ops/s
Iteration   1: 8322441.011 ops/s
Iteration   2: 8210329.868 ops/s
Iteration   3: 8636443.897 ops/s
Iteration   4: 8093866.275 ops/s
Iteration   5: 8351907.809 ops/s
Iteration   6: 8175442.561 ops/s
Iteration   7: 8233229.742 ops/s
Iteration   8: 8742871.544 ops/s
Iteration   9: 8160867.887 ops/s
Iteration  10: 8551566.987 ops/s
Iteration  11: 8239874.033 ops/s
Iteration  12: 8412355.189 ops/s
Iteration  13: 8653446.911 ops/s
Iteration  14: 8231533.832 ops/s
Iteration  15: 8117666.312 ops/s
Iteration  16: 8581321.633 ops/s
Iteration  17: 8193365.853 ops/s
Iteration  18: 8553040.053 ops/s
Iteration  19: 8205375.917 ops/s
Iteration  20: 8480095.099 ops/s
Iteration  21: 8701284.865 ops/s
Iteration  22: 8161561.938 ops/s
Iteration  23: 8638811.042 ops/s
Iteration  24: 8207709.144 ops/s
Iteration  25: 8575393.512 ops/s
Iteration  26: 8021439.587 ops/s
Iteration  27: 8472386.963 ops/s
Iteration  28: 8133389.891 ops/s
Iteration  29: 8454820.754 ops/s
Iteration  30: 8245648.929 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_arrayCancelled":
  8358649.635 ±(99.9%) 140301.058 ops/s [Average]
  (min, avg, max) = (8021439.587, 8358649.635, 8742871.544), stdev = 209996.035
  CI (99.9%): [8218348.576, 8498950.693] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
CompletableConcatTest._Benchmark.benchmark_arrayCancelled  thrpt   30  8358649.635 ± 140301.058  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_iterableCancelled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_iterableCancelled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2536353.915 ops/s
# Warmup Iteration   2: 5510354.441 ops/s
# Warmup Iteration   3: 7930619.766 ops/s
# Warmup Iteration   4: 7535409.785 ops/s
# Warmup Iteration   5: 7894154.017 ops/s
# Warmup Iteration   6: 7642741.221 ops/s
# Warmup Iteration   7: 7914713.153 ops/s
# Warmup Iteration   8: 7677817.107 ops/s
# Warmup Iteration   9: 7616729.487 ops/s
# Warmup Iteration  10: 7941227.217 ops/s
# Warmup Iteration  11: 7816791.912 ops/s
# Warmup Iteration  12: 7666596.776 ops/s
# Warmup Iteration  13: 7957260.786 ops/s
# Warmup Iteration  14: 7662387.831 ops/s
# Warmup Iteration  15: 7898403.669 ops/s
# Warmup Iteration  16: 7577946.763 ops/s
# Warmup Iteration  17: 7952467.548 ops/s
# Warmup Iteration  18: 8031862.011 ops/s
# Warmup Iteration  19: 7892893.522 ops/s
# Warmup Iteration  20: 7818983.063 ops/s
# Warmup Iteration  21: 7486991.940 ops/s
# Warmup Iteration  22: 7881116.788 ops/s
# Warmup Iteration  23: 7769544.698 ops/s
# Warmup Iteration  24: 7853895.525 ops/s
# Warmup Iteration  25: 8046480.683 ops/s
# Warmup Iteration  26: 7662729.128 ops/s
# Warmup Iteration  27: 7847345.109 ops/s
# Warmup Iteration  28: 7932876.950 ops/s
# Warmup Iteration  29: 7950447.881 ops/s
# Warmup Iteration  30: 7774084.151 ops/s
Iteration   1: 8031555.702 ops/s
Iteration   2: 7868110.629 ops/s
Iteration   3: 7991791.364 ops/s
Iteration   4: 7587600.574 ops/s
Iteration   5: 8076910.984 ops/s
Iteration   6: 7612763.913 ops/s
Iteration   7: 7900892.816 ops/s
Iteration   8: 8057401.320 ops/s
Iteration   9: 7599472.821 ops/s
Iteration  10: 8095557.768 ops/s
Iteration  11: 7536853.965 ops/s
Iteration  12: 8008327.540 ops/s
Iteration  13: 7755422.342 ops/s
Iteration  14: 7776541.908 ops/s
Iteration  15: 8145482.637 ops/s
Iteration  16: 7742210.208 ops/s
Iteration  17: 7656884.849 ops/s
Iteration  18: 7966304.904 ops/s
Iteration  19: 7704221.332 ops/s
Iteration  20: 8108040.328 ops/s
Iteration  21: 7786545.465 ops/s
Iteration  22: 7938683.966 ops/s
Iteration  23: 7703457.235 ops/s
Iteration  24: 7837171.365 ops/s
Iteration  25: 7676901.149 ops/s
Iteration  26: 6056337.598 ops/s
Iteration  27: 7847675.274 ops/s
Iteration  28: 7610984.739 ops/s
Iteration  29: 7952230.335 ops/s
Iteration  30: 7637203.287 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_iterableCancelled":
  7775651.277 ±(99.9%) 248177.242 ops/s [Average]
  (min, avg, max) = (6056337.598, 7775651.277, 8145482.637), stdev = 371460.040
  CI (99.9%): [7527474.036, 8023828.519] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
CompletableConcatTest._Benchmark.benchmark_iterableCancelled  thrpt   30  7775651.277 ± 248177.242  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 916160.024 ops/s
# Warmup Iteration   2: 2086928.730 ops/s
# Warmup Iteration   3: 2486484.646 ops/s
# Warmup Iteration   4: 3009570.002 ops/s
# Warmup Iteration   5: 2801771.333 ops/s
# Warmup Iteration   6: 2975541.934 ops/s
# Warmup Iteration   7: 2785394.675 ops/s
# Warmup Iteration   8: 2946499.927 ops/s
# Warmup Iteration   9: 2920048.728 ops/s
# Warmup Iteration  10: 2898662.460 ops/s
# Warmup Iteration  11: 2947769.956 ops/s
# Warmup Iteration  12: 2891189.179 ops/s
# Warmup Iteration  13: 2944409.069 ops/s
# Warmup Iteration  14: 2964908.250 ops/s
# Warmup Iteration  15: 2865353.640 ops/s
# Warmup Iteration  16: 2972626.694 ops/s
# Warmup Iteration  17: 2869305.022 ops/s
# Warmup Iteration  18: 2881605.502 ops/s
# Warmup Iteration  19: 2954557.567 ops/s
# Warmup Iteration  20: 2946503.280 ops/s
# Warmup Iteration  21: 3043991.647 ops/s
# Warmup Iteration  22: 2876123.819 ops/s
# Warmup Iteration  23: 2859302.433 ops/s
# Warmup Iteration  24: 2933887.425 ops/s
# Warmup Iteration  25: 2891217.384 ops/s
# Warmup Iteration  26: 2846244.511 ops/s
# Warmup Iteration  27: 3040463.819 ops/s
# Warmup Iteration  28: 2829600.165 ops/s
# Warmup Iteration  29: 3043186.634 ops/s
# Warmup Iteration  30: 2920703.352 ops/s
Iteration   1: 2853994.899 ops/s
Iteration   2: 2995781.858 ops/s
Iteration   3: 2830867.204 ops/s
Iteration   4: 2871614.747 ops/s
Iteration   5: 2907430.408 ops/s
Iteration   6: 2862116.131 ops/s
Iteration   7: 2942563.336 ops/s
Iteration   8: 2871235.595 ops/s
Iteration   9: 2960117.146 ops/s
Iteration  10: 2867341.572 ops/s
Iteration  11: 2882106.518 ops/s
Iteration  12: 3000046.752 ops/s
Iteration  13: 2864957.966 ops/s
Iteration  14: 2910748.941 ops/s
Iteration  15: 2832498.244 ops/s
Iteration  16: 2926564.377 ops/s
Iteration  17: 2976760.943 ops/s
Iteration  18: 2861753.386 ops/s
Iteration  19: 2931136.626 ops/s
Iteration  20: 2917858.658 ops/s
Iteration  21: 2915322.561 ops/s
Iteration  22: 2923065.376 ops/s
Iteration  23: 2915486.599 ops/s
Iteration  24: 2981833.424 ops/s
Iteration  25: 2864952.895 ops/s
Iteration  26: 3031123.311 ops/s
Iteration  27: 2820279.824 ops/s
Iteration  28: 3048297.810 ops/s
Iteration  29: 2971863.896 ops/s
Iteration  30: 2847509.660 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_cancel":
  2912907.689 ±(99.9%) 40896.141 ops/s [Average]
  (min, avg, max) = (2820279.824, 2912907.689, 3048297.810), stdev = 61211.423
  CI (99.9%): [2872011.548, 2953803.830] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableMergeWithCompletableTest._Benchmark.benchmark_cancel  thrpt   30  2912907.689 ± 40896.141  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStageTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStageTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1147134.537 ops/s
# Warmup Iteration   2: 4002474.393 ops/s
# Warmup Iteration   3: 4464812.762 ops/s
# Warmup Iteration   4: 5436461.122 ops/s
# Warmup Iteration   5: 5253130.109 ops/s
# Warmup Iteration   6: 5414938.747 ops/s
# Warmup Iteration   7: 5534214.064 ops/s
# Warmup Iteration   8: 5076087.574 ops/s
# Warmup Iteration   9: 5471747.592 ops/s
# Warmup Iteration  10: 5175131.576 ops/s
# Warmup Iteration  11: 5265380.591 ops/s
# Warmup Iteration  12: 5360692.337 ops/s
# Warmup Iteration  13: 5199884.727 ops/s
# Warmup Iteration  14: 5411589.168 ops/s
# Warmup Iteration  15: 5352507.897 ops/s
# Warmup Iteration  16: 5202534.462 ops/s
# Warmup Iteration  17: 5387581.433 ops/s
# Warmup Iteration  18: 5293854.939 ops/s
# Warmup Iteration  19: 5492515.743 ops/s
# Warmup Iteration  20: 5087573.249 ops/s
# Warmup Iteration  21: 5282425.587 ops/s
# Warmup Iteration  22: 5174021.733 ops/s
# Warmup Iteration  23: 5192667.885 ops/s
# Warmup Iteration  24: 5382819.011 ops/s
# Warmup Iteration  25: 5328701.290 ops/s
# Warmup Iteration  26: 5273392.173 ops/s
# Warmup Iteration  27: 5419803.407 ops/s
# Warmup Iteration  28: 5523656.589 ops/s
# Warmup Iteration  29: 5468420.901 ops/s
# Warmup Iteration  30: 5257481.565 ops/s
Iteration   1: 5536409.931 ops/s
Iteration   2: 5360035.118 ops/s
Iteration   3: 5207512.507 ops/s
Iteration   4: 5283601.564 ops/s
Iteration   5: 5283927.695 ops/s
Iteration   6: 5207587.589 ops/s
Iteration   7: 5324457.520 ops/s
Iteration   8: 5291532.492 ops/s
Iteration   9: 5180404.417 ops/s
Iteration  10: 5375686.082 ops/s
Iteration  11: 5173212.411 ops/s
Iteration  12: 5382409.407 ops/s
Iteration  13: 5104369.617 ops/s
Iteration  14: 5366681.408 ops/s
Iteration  15: 5296201.189 ops/s
Iteration  16: 5293673.747 ops/s
Iteration  17: 5327716.534 ops/s
Iteration  18: 5124250.584 ops/s
Iteration  19: 5197179.242 ops/s
Iteration  20: 4606469.828 ops/s
Iteration  21: 5102725.758 ops/s
Iteration  22: 5011193.427 ops/s
Iteration  23: 5514869.184 ops/s
Iteration  24: 5221624.764 ops/s
Iteration  25: 5330701.506 ops/s
Iteration  26: 5315050.916 ops/s
Iteration  27: 5195273.806 ops/s
Iteration  28: 5354797.105 ops/s
Iteration  29: 5324313.626 ops/s
Iteration  30: 5271298.635 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.CompletableFromCompletionStageTest._Benchmark.benchmark_dispose":
  5252172.254 ±(99.9%) 111606.134 ops/s [Average]
  (min, avg, max) = (4606469.828, 5252172.254, 5536409.931), stdev = 167046.821
  CI (99.9%): [5140566.119, 5363778.388] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
CompletableFromCompletionStageTest._Benchmark.benchmark_dispose  thrpt   30  5252172.254 ± 111606.134  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 208854.393 ops/s
# Warmup Iteration   2: 331943.818 ops/s
# Warmup Iteration   3: 370870.377 ops/s
# Warmup Iteration   4: 351678.577 ops/s
# Warmup Iteration   5: 363996.000 ops/s
# Warmup Iteration   6: 358551.084 ops/s
# Warmup Iteration   7: 364995.482 ops/s
# Warmup Iteration   8: 351527.744 ops/s
# Warmup Iteration   9: 352625.067 ops/s
# Warmup Iteration  10: 371446.901 ops/s
# Warmup Iteration  11: 370760.628 ops/s
# Warmup Iteration  12: 368320.883 ops/s
# Warmup Iteration  13: 365598.806 ops/s
# Warmup Iteration  14: 376930.974 ops/s
# Warmup Iteration  15: 359483.039 ops/s
# Warmup Iteration  16: 381236.714 ops/s
# Warmup Iteration  17: 373792.832 ops/s
# Warmup Iteration  18: 393048.801 ops/s
# Warmup Iteration  19: 383157.744 ops/s
# Warmup Iteration  20: 380991.442 ops/s
# Warmup Iteration  21: 392379.767 ops/s
# Warmup Iteration  22: 386610.329 ops/s
# Warmup Iteration  23: 395427.533 ops/s
# Warmup Iteration  24: 382828.101 ops/s
# Warmup Iteration  25: 387325.715 ops/s
# Warmup Iteration  26: 402841.712 ops/s
# Warmup Iteration  27: 380271.718 ops/s
# Warmup Iteration  28: 391205.333 ops/s
# Warmup Iteration  29: 389889.922 ops/s
# Warmup Iteration  30: 389853.306 ops/s
Iteration   1: 379859.576 ops/s
Iteration   2: 389378.423 ops/s
Iteration   3: 388224.778 ops/s
Iteration   4: 382868.110 ops/s
Iteration   5: 401166.663 ops/s
Iteration   6: 384678.131 ops/s
Iteration   7: 378204.500 ops/s
Iteration   8: 404998.522 ops/s
Iteration   9: 381948.734 ops/s
Iteration  10: 397016.454 ops/s
Iteration  11: 404255.851 ops/s
Iteration  12: 367351.806 ops/s
Iteration  13: 401979.030 ops/s
Iteration  14: 377897.813 ops/s
Iteration  15: 390792.714 ops/s
Iteration  16: 396726.008 ops/s
Iteration  17: 366931.856 ops/s
Iteration  18: 394109.453 ops/s
Iteration  19: 386298.257 ops/s
Iteration  20: 384155.527 ops/s
Iteration  21: 398163.241 ops/s
Iteration  22: 377542.979 ops/s
Iteration  23: 401662.948 ops/s
Iteration  24: 379671.845 ops/s
Iteration  25: 393337.106 ops/s
Iteration  26: 391057.390 ops/s
Iteration  27: 389219.231 ops/s
Iteration  28: 388864.419 ops/s
Iteration  29: 379381.311 ops/s
Iteration  30: 404463.283 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels":
  388740.199 ±(99.9%) 7007.523 ops/s [Average]
  (min, avg, max) = (366931.856, 388740.199, 404998.522), stdev = 10488.531
  CI (99.9%): [381732.676, 395747.722] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt       Score      Error  Units
CompletableToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels  thrpt   30  388740.199 ± 7007.523  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableToObservableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableToObservableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65206.682 ops/s
# Warmup Iteration   2: 322389.408 ops/s
# Warmup Iteration   3: 450272.199 ops/s
# Warmup Iteration   4: 521870.762 ops/s
# Warmup Iteration   5: 404052.951 ops/s
# Warmup Iteration   6: 499550.197 ops/s
# Warmup Iteration   7: 506978.215 ops/s
# Warmup Iteration   8: 473315.396 ops/s
# Warmup Iteration   9: 515009.046 ops/s
# Warmup Iteration  10: 494498.251 ops/s
# Warmup Iteration  11: 506962.156 ops/s
# Warmup Iteration  12: 516483.521 ops/s
# Warmup Iteration  13: 506510.706 ops/s
# Warmup Iteration  14: 501626.115 ops/s
# Warmup Iteration  15: 523359.564 ops/s
# Warmup Iteration  16: 506901.057 ops/s
# Warmup Iteration  17: 521372.760 ops/s
# Warmup Iteration  18: 529825.793 ops/s
# Warmup Iteration  19: 519340.569 ops/s
# Warmup Iteration  20: 547926.020 ops/s
# Warmup Iteration  21: 526310.571 ops/s
# Warmup Iteration  22: 548022.233 ops/s
# Warmup Iteration  23: 542374.377 ops/s
# Warmup Iteration  24: 522401.856 ops/s
# Warmup Iteration  25: 540008.929 ops/s
# Warmup Iteration  26: 518786.474 ops/s
# Warmup Iteration  27: 520537.042 ops/s
# Warmup Iteration  28: 558284.742 ops/s
# Warmup Iteration  29: 507669.573 ops/s
# Warmup Iteration  30: 551859.743 ops/s
Iteration   1: 554795.049 ops/s
Iteration   2: 517184.895 ops/s
Iteration   3: 532427.088 ops/s
Iteration   4: 522895.366 ops/s
Iteration   5: 553327.928 ops/s
Iteration   6: 530815.241 ops/s
Iteration   7: 516749.094 ops/s
Iteration   8: 552207.989 ops/s
Iteration   9: 509470.512 ops/s
Iteration  10: 541793.875 ops/s
Iteration  11: 521093.581 ops/s
Iteration  12: 544684.215 ops/s
Iteration  13: 526852.443 ops/s
Iteration  14: 530488.382 ops/s
Iteration  15: 461906.252 ops/s
Iteration  16: 516787.959 ops/s
Iteration  17: 523495.190 ops/s
Iteration  18: 534640.754 ops/s
Iteration  19: 552643.303 ops/s
Iteration  20: 523569.420 ops/s
Iteration  21: 535284.543 ops/s
Iteration  22: 528812.085 ops/s
Iteration  23: 532989.199 ops/s
Iteration  24: 529267.751 ops/s
Iteration  25: 523187.404 ops/s
Iteration  26: 534780.084 ops/s
Iteration  27: 527103.212 ops/s
Iteration  28: 539306.278 ops/s
Iteration  29: 548949.427 ops/s
Iteration  30: 510749.538 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableToObservableTest._Benchmark.benchmark_doubleOnSubscribe":
  529275.269 ±(99.9%) 11939.253 ops/s [Average]
  (min, avg, max) = (461906.252, 529275.269, 554795.049), stdev = 17870.112
  CI (99.9%): [517336.016, 541214.521] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
CompletableToObservableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  529275.269 ± 11939.253  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 360542.419 ops/s
# Warmup Iteration   2: 630858.722 ops/s
# Warmup Iteration   3: 747234.538 ops/s
# Warmup Iteration   4: 684818.594 ops/s
# Warmup Iteration   5: 713633.569 ops/s
# Warmup Iteration   6: 696829.015 ops/s
# Warmup Iteration   7: 737883.902 ops/s
# Warmup Iteration   8: 766069.964 ops/s
# Warmup Iteration   9: 743480.585 ops/s
# Warmup Iteration  10: 785242.745 ops/s
# Warmup Iteration  11: 754405.650 ops/s
# Warmup Iteration  12: 740333.399 ops/s
# Warmup Iteration  13: 752606.900 ops/s
# Warmup Iteration  14: 765370.702 ops/s
# Warmup Iteration  15: 735121.833 ops/s
# Warmup Iteration  16: 751011.143 ops/s
# Warmup Iteration  17: 790697.180 ops/s
# Warmup Iteration  18: 821558.308 ops/s
# Warmup Iteration  19: 781064.719 ops/s
# Warmup Iteration  20: 799031.551 ops/s
# Warmup Iteration  21: 799991.881 ops/s
# Warmup Iteration  22: 792549.388 ops/s
# Warmup Iteration  23: 836255.015 ops/s
# Warmup Iteration  24: 752355.509 ops/s
# Warmup Iteration  25: 814988.852 ops/s
# Warmup Iteration  26: 801015.435 ops/s
# Warmup Iteration  27: 807505.330 ops/s
# Warmup Iteration  28: 794714.323 ops/s
# Warmup Iteration  29: 791587.064 ops/s
# Warmup Iteration  30: 806589.700 ops/s
Iteration   1: 796066.672 ops/s
Iteration   2: 806038.704 ops/s
Iteration   3: 777371.867 ops/s
Iteration   4: 800821.948 ops/s
Iteration   5: 816597.733 ops/s
Iteration   6: 796940.590 ops/s
Iteration   7: 777602.246 ops/s
Iteration   8: 820945.298 ops/s
Iteration   9: 814553.145 ops/s
Iteration  10: 792373.036 ops/s
Iteration  11: 809796.824 ops/s
Iteration  12: 784856.380 ops/s
Iteration  13: 798880.480 ops/s
Iteration  14: 816398.406 ops/s
Iteration  15: 770981.653 ops/s
Iteration  16: 799510.043 ops/s
Iteration  17: 822673.789 ops/s
Iteration  18: 762013.746 ops/s
Iteration  19: 842193.491 ops/s
Iteration  20: 781462.852 ops/s
Iteration  21: 808438.532 ops/s
Iteration  22: 780709.702 ops/s
Iteration  23: 809517.341 ops/s
Iteration  24: 799215.513 ops/s
Iteration  25: 769775.345 ops/s
Iteration  26: 809552.568 ops/s
Iteration  27: 779036.292 ops/s
Iteration  28: 842924.502 ops/s
Iteration  29: 804017.129 ops/s
Iteration  30: 772827.500 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_disposed":
  798803.111 ±(99.9%) 13653.605 ops/s [Average]
  (min, avg, max) = (762013.746, 798803.111, 842924.502), stdev = 20436.075
  CI (99.9%): [785149.506, 812456.716] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
CompletableResumeNextTest._Benchmark.benchmark_disposed  thrpt   30  798803.111 ± 13653.605  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 451534.401 ops/s
# Warmup Iteration   2: 2287634.624 ops/s
# Warmup Iteration   3: 2847891.160 ops/s
# Warmup Iteration   4: 3093639.563 ops/s
# Warmup Iteration   5: 3287864.443 ops/s
# Warmup Iteration   6: 3206298.130 ops/s
# Warmup Iteration   7: 3262750.429 ops/s
# Warmup Iteration   8: 3241990.408 ops/s
# Warmup Iteration   9: 3274022.646 ops/s
# Warmup Iteration  10: 3294398.040 ops/s
# Warmup Iteration  11: 3186930.622 ops/s
# Warmup Iteration  12: 3147567.171 ops/s
# Warmup Iteration  13: 3396822.458 ops/s
# Warmup Iteration  14: 3134640.529 ops/s
# Warmup Iteration  15: 3205670.503 ops/s
# Warmup Iteration  16: 3320402.158 ops/s
# Warmup Iteration  17: 3118161.795 ops/s
# Warmup Iteration  18: 3323655.751 ops/s
# Warmup Iteration  19: 3137446.422 ops/s
# Warmup Iteration  20: 3161249.508 ops/s
# Warmup Iteration  21: 3299855.502 ops/s
# Warmup Iteration  22: 3107153.984 ops/s
# Warmup Iteration  23: 3274694.584 ops/s
# Warmup Iteration  24: 3156586.809 ops/s
# Warmup Iteration  25: 3312392.879 ops/s
# Warmup Iteration  26: 3311943.046 ops/s
# Warmup Iteration  27: 3224538.278 ops/s
# Warmup Iteration  28: 3207431.028 ops/s
# Warmup Iteration  29: 3311645.148 ops/s
# Warmup Iteration  30: 3192208.116 ops/s
Iteration   1: 3267537.194 ops/s
Iteration   2: 3311643.106 ops/s
Iteration   3: 3168233.116 ops/s
Iteration   4: 3202290.593 ops/s
Iteration   5: 3259398.050 ops/s
Iteration   6: 3187427.269 ops/s
Iteration   7: 3263704.232 ops/s
Iteration   8: 3319402.810 ops/s
Iteration   9: 3155091.757 ops/s
Iteration  10: 2484534.243 ops/s
Iteration  11: 3259212.454 ops/s
Iteration  12: 3196048.298 ops/s
Iteration  13: 3298295.259 ops/s
Iteration  14: 3317759.958 ops/s
Iteration  15: 3280104.857 ops/s
Iteration  16: 3186622.894 ops/s
Iteration  17: 3294227.297 ops/s
Iteration  18: 3162840.033 ops/s
Iteration  19: 3347322.633 ops/s
Iteration  20: 3136828.542 ops/s
Iteration  21: 3378265.716 ops/s
Iteration  22: 3245686.689 ops/s
Iteration  23: 3133390.457 ops/s
Iteration  24: 3193947.994 ops/s
Iteration  25: 3172034.459 ops/s
Iteration  26: 3388394.872 ops/s
Iteration  27: 3238313.724 ops/s
Iteration  28: 3186850.815 ops/s
Iteration  29: 3295643.622 ops/s
Iteration  30: 3149405.550 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_dispose":
  3216015.283 ±(99.9%) 104083.306 ops/s [Average]
  (min, avg, max) = (2484534.243, 3216015.283, 3388394.872), stdev = 155787.004
  CI (99.9%): [3111931.977, 3320098.589] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_dispose  thrpt   30  3216015.283 ± 104083.306  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1815508.914 ops/s
# Warmup Iteration   2: 4250459.054 ops/s
# Warmup Iteration   3: 5987547.674 ops/s
# Warmup Iteration   4: 5837673.565 ops/s
# Warmup Iteration   5: 5918487.371 ops/s
# Warmup Iteration   6: 5720667.969 ops/s
# Warmup Iteration   7: 5838653.996 ops/s
# Warmup Iteration   8: 6060683.366 ops/s
# Warmup Iteration   9: 5844962.083 ops/s
# Warmup Iteration  10: 5957231.918 ops/s
# Warmup Iteration  11: 5709392.631 ops/s
# Warmup Iteration  12: 5796249.599 ops/s
# Warmup Iteration  13: 6295343.406 ops/s
# Warmup Iteration  14: 5993679.674 ops/s
# Warmup Iteration  15: 5798559.644 ops/s
# Warmup Iteration  16: 5901327.713 ops/s
# Warmup Iteration  17: 6019479.314 ops/s
# Warmup Iteration  18: 5647077.899 ops/s
# Warmup Iteration  19: 5877737.265 ops/s
# Warmup Iteration  20: 6021905.099 ops/s
# Warmup Iteration  21: 5680999.209 ops/s
# Warmup Iteration  22: 5928603.099 ops/s
# Warmup Iteration  23: 5675210.808 ops/s
# Warmup Iteration  24: 5739317.042 ops/s
# Warmup Iteration  25: 6056815.701 ops/s
# Warmup Iteration  26: 5941221.818 ops/s
# Warmup Iteration  27: 5582848.550 ops/s
# Warmup Iteration  28: 5954237.543 ops/s
# Warmup Iteration  29: 5888488.219 ops/s
# Warmup Iteration  30: 6015472.799 ops/s
Iteration   1: 5740163.972 ops/s
Iteration   2: 5966492.249 ops/s
Iteration   3: 5800057.535 ops/s
Iteration   4: 6038937.689 ops/s
Iteration   5: 5811435.614 ops/s
Iteration   6: 5984611.851 ops/s
Iteration   7: 5772338.144 ops/s
Iteration   8: 6014464.236 ops/s
Iteration   9: 5850953.113 ops/s
Iteration  10: 5738597.235 ops/s
Iteration  11: 5923722.596 ops/s
Iteration  12: 5706157.279 ops/s
Iteration  13: 5950864.439 ops/s
Iteration  14: 5881937.578 ops/s
Iteration  15: 5754071.620 ops/s
Iteration  16: 6060053.155 ops/s
Iteration  17: 5791095.782 ops/s
Iteration  18: 5911870.351 ops/s
Iteration  19: 5818958.517 ops/s
Iteration  20: 5846915.399 ops/s
Iteration  21: 6065226.130 ops/s
Iteration  22: 5778189.848 ops/s
Iteration  23: 5957441.991 ops/s
Iteration  24: 5680098.018 ops/s
Iteration  25: 5882735.478 ops/s
Iteration  26: 6149056.379 ops/s
Iteration  27: 5532014.323 ops/s
Iteration  28: 5974523.698 ops/s
Iteration  29: 5838365.170 ops/s
Iteration  30: 5775744.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_dispose":
  5866569.789 ±(99.9%) 89831.359 ops/s [Average]
  (min, avg, max) = (5532014.323, 5866569.789, 6149056.379), stdev = 134455.360
  CI (99.9%): [5776738.430, 5956401.148] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
CompletableUsingTest._Benchmark.benchmark_dispose  thrpt   30  5866569.789 ± 89831.359  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 457117.336 ops/s
# Warmup Iteration   2: 2247254.378 ops/s
# Warmup Iteration   3: 2369760.451 ops/s
# Warmup Iteration   4: 2958617.843 ops/s
# Warmup Iteration   5: 2925130.530 ops/s
# Warmup Iteration   6: 2993283.794 ops/s
# Warmup Iteration   7: 3167884.101 ops/s
# Warmup Iteration   8: 3001050.052 ops/s
# Warmup Iteration   9: 3028793.748 ops/s
# Warmup Iteration  10: 3108207.491 ops/s
# Warmup Iteration  11: 3019438.902 ops/s
# Warmup Iteration  12: 3019800.453 ops/s
# Warmup Iteration  13: 3021981.211 ops/s
# Warmup Iteration  14: 2969098.881 ops/s
# Warmup Iteration  15: 3174722.491 ops/s
# Warmup Iteration  16: 2988018.347 ops/s
# Warmup Iteration  17: 3066483.911 ops/s
# Warmup Iteration  18: 2946851.998 ops/s
# Warmup Iteration  19: 3146740.302 ops/s
# Warmup Iteration  20: 2976438.524 ops/s
# Warmup Iteration  21: 3066109.185 ops/s
# Warmup Iteration  22: 3101766.343 ops/s
# Warmup Iteration  23: 2962254.400 ops/s
# Warmup Iteration  24: 3072396.347 ops/s
# Warmup Iteration  25: 3037848.006 ops/s
# Warmup Iteration  26: 2975573.331 ops/s
# Warmup Iteration  27: 3112948.209 ops/s
# Warmup Iteration  28: 3019234.014 ops/s
# Warmup Iteration  29: 2985756.127 ops/s
# Warmup Iteration  30: 3130684.252 ops/s
Iteration   1: 3012060.004 ops/s
Iteration   2: 3059305.885 ops/s
Iteration   3: 3120514.992 ops/s
Iteration   4: 2272322.223 ops/s
Iteration   5: 3103004.384 ops/s
Iteration   6: 2931879.805 ops/s
Iteration   7: 3109792.605 ops/s
Iteration   8: 2975197.622 ops/s
Iteration   9: 3143665.734 ops/s
Iteration  10: 3039608.574 ops/s
Iteration  11: 3047071.421 ops/s
Iteration  12: 3093947.894 ops/s
Iteration  13: 3019768.138 ops/s
Iteration  14: 3091515.453 ops/s
Iteration  15: 2984001.753 ops/s
Iteration  16: 2971863.472 ops/s
Iteration  17: 3014845.988 ops/s
Iteration  18: 3028923.145 ops/s
Iteration  19: 3104428.449 ops/s
Iteration  20: 3145048.852 ops/s
Iteration  21: 2981259.767 ops/s
Iteration  22: 3146090.519 ops/s
Iteration  23: 2962211.011 ops/s
Iteration  24: 3088429.750 ops/s
Iteration  25: 3021553.305 ops/s
Iteration  26: 3041204.412 ops/s
Iteration  27: 3088166.604 ops/s
Iteration  28: 2928094.963 ops/s
Iteration  29: 3024220.661 ops/s
Iteration  30: 2965537.037 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_isDisposed":
  3017184.481 ±(99.9%) 103104.988 ops/s [Average]
  (min, avg, max) = (2272322.223, 3017184.481, 3146090.519), stdev = 154322.705
  CI (99.9%): [2914079.492, 3120289.469] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
CompletableTakeUntilTest._Benchmark.benchmark_isDisposed  thrpt   30  3017184.481 ± 103104.988  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_completeAfterCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_completeAfterCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 542236.858 ops/s
# Warmup Iteration   2: 2654510.154 ops/s
# Warmup Iteration   3: 3775069.502 ops/s
# Warmup Iteration   4: 3844670.289 ops/s
# Warmup Iteration   5: 4028254.433 ops/s
# Warmup Iteration   6: 3916943.191 ops/s
# Warmup Iteration   7: 3843286.418 ops/s
# Warmup Iteration   8: 4036478.372 ops/s
# Warmup Iteration   9: 3921831.913 ops/s
# Warmup Iteration  10: 3991886.918 ops/s
# Warmup Iteration  11: 3821635.683 ops/s
# Warmup Iteration  12: 3842964.732 ops/s
# Warmup Iteration  13: 4083179.940 ops/s
# Warmup Iteration  14: 3790735.164 ops/s
# Warmup Iteration  15: 3951727.011 ops/s
# Warmup Iteration  16: 3821539.509 ops/s
# Warmup Iteration  17: 4047717.004 ops/s
# Warmup Iteration  18: 3934698.236 ops/s
# Warmup Iteration  19: 3842940.223 ops/s
# Warmup Iteration  20: 3978197.865 ops/s
# Warmup Iteration  21: 4055882.223 ops/s
# Warmup Iteration  22: 3955758.664 ops/s
# Warmup Iteration  23: 3924338.329 ops/s
# Warmup Iteration  24: 3859037.052 ops/s
# Warmup Iteration  25: 3986141.812 ops/s
# Warmup Iteration  26: 3938323.640 ops/s
# Warmup Iteration  27: 3788594.309 ops/s
# Warmup Iteration  28: 4051062.633 ops/s
# Warmup Iteration  29: 3836148.686 ops/s
# Warmup Iteration  30: 3941954.065 ops/s
Iteration   1: 3824750.586 ops/s
Iteration   2: 4032244.845 ops/s
Iteration   3: 3697158.724 ops/s
Iteration   4: 3964743.612 ops/s
Iteration   5: 3819857.257 ops/s
Iteration   6: 3890614.467 ops/s
Iteration   7: 3907986.289 ops/s
Iteration   8: 3864962.334 ops/s
Iteration   9: 3863703.161 ops/s
Iteration  10: 3923832.517 ops/s
Iteration  11: 3861765.152 ops/s
Iteration  12: 4087191.370 ops/s
Iteration  13: 3768035.248 ops/s
Iteration  14: 3886406.303 ops/s
Iteration  15: 3912436.898 ops/s
Iteration  16: 3842616.387 ops/s
Iteration  17: 3838578.109 ops/s
Iteration  18: 4119622.158 ops/s
Iteration  19: 3818548.280 ops/s
Iteration  20: 3926116.610 ops/s
Iteration  21: 3914802.258 ops/s
Iteration  22: 3818220.848 ops/s
Iteration  23: 3990485.373 ops/s
Iteration  24: 3804903.067 ops/s
Iteration  25: 4035248.269 ops/s
Iteration  26: 3829191.164 ops/s
Iteration  27: 3985373.667 ops/s
Iteration  28: 3884813.320 ops/s
Iteration  29: 3847011.821 ops/s
Iteration  30: 3928579.710 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_completeAfterCancel":
  3896326.660 ±(99.9%) 62432.275 ops/s [Average]
  (min, avg, max) = (3697158.724, 3896326.660, 4119622.158), stdev = 93445.698
  CI (99.9%): [3833894.385, 3958758.936] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
CompletableDisposeOnTest._Benchmark.benchmark_completeAfterCancel  thrpt   30  3896326.660 ± 62432.275  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterableTest._Benchmark.benchmark_cancelAfterHasNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterableTest._Benchmark.benchmark_cancelAfterHasNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1847960.009 ops/s
# Warmup Iteration   2: 4154042.871 ops/s
# Warmup Iteration   3: 4788624.757 ops/s
# Warmup Iteration   4: 5390671.157 ops/s
# Warmup Iteration   5: 5153370.767 ops/s
# Warmup Iteration   6: 5380238.411 ops/s
# Warmup Iteration   7: 5640644.047 ops/s
# Warmup Iteration   8: 5683115.625 ops/s
# Warmup Iteration   9: 5338867.751 ops/s
# Warmup Iteration  10: 5475563.380 ops/s
# Warmup Iteration  11: 5315298.484 ops/s
# Warmup Iteration  12: 5496623.300 ops/s
# Warmup Iteration  13: 5217315.230 ops/s
# Warmup Iteration  14: 5523343.863 ops/s
# Warmup Iteration  15: 5308071.502 ops/s
# Warmup Iteration  16: 5373603.273 ops/s
# Warmup Iteration  17: 5600153.468 ops/s
# Warmup Iteration  18: 5265326.053 ops/s
# Warmup Iteration  19: 5669074.816 ops/s
# Warmup Iteration  20: 5240422.805 ops/s
# Warmup Iteration  21: 5537900.001 ops/s
# Warmup Iteration  22: 5400094.594 ops/s
# Warmup Iteration  23: 5260544.157 ops/s
# Warmup Iteration  24: 5594319.812 ops/s
# Warmup Iteration  25: 5406300.592 ops/s
# Warmup Iteration  26: 5268474.081 ops/s
# Warmup Iteration  27: 5319662.474 ops/s
# Warmup Iteration  28: 4766242.029 ops/s
# Warmup Iteration  29: 4520475.021 ops/s
# Warmup Iteration  30: 5299764.155 ops/s
Iteration   1: 5611617.803 ops/s
Iteration   2: 5163486.854 ops/s
Iteration   3: 5549423.850 ops/s
Iteration   4: 5306410.824 ops/s
Iteration   5: 5392019.470 ops/s
Iteration   6: 5644318.024 ops/s
Iteration   7: 5215542.438 ops/s
Iteration   8: 5434579.103 ops/s
Iteration   9: 5303094.192 ops/s
Iteration  10: 5390137.257 ops/s
Iteration  11: 5586008.303 ops/s
Iteration  12: 5311772.088 ops/s
Iteration  13: 5438916.598 ops/s
Iteration  14: 5273500.211 ops/s
Iteration  15: 5344316.700 ops/s
Iteration  16: 5501789.326 ops/s
Iteration  17: 5279532.441 ops/s
Iteration  18: 5524264.983 ops/s
Iteration  19: 5347759.858 ops/s
Iteration  20: 5407304.816 ops/s
Iteration  21: 5447059.014 ops/s
Iteration  22: 5488124.236 ops/s
Iteration  23: 5414262.079 ops/s
Iteration  24: 5414137.010 ops/s
Iteration  25: 5631250.392 ops/s
Iteration  26: 5235208.140 ops/s
Iteration  27: 5525260.799 ops/s
Iteration  28: 5407391.523 ops/s
Iteration  29: 5227710.954 ops/s
Iteration  30: 5513589.325 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeIterableTest._Benchmark.benchmark_cancelAfterHasNext":
  5410992.954 ±(99.9%) 86676.472 ops/s [Average]
  (min, avg, max) = (5163486.854, 5410992.954, 5644318.024), stdev = 129733.273
  CI (99.9%): [5324316.481, 5497669.426] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
CompletableMergeIterableTest._Benchmark.benchmark_cancelAfterHasNext  thrpt   30  5410992.954 ± 86676.472  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_crossDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_crossDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 433290.335 ops/s
# Warmup Iteration   2: 1701617.813 ops/s
# Warmup Iteration   3: 2212378.365 ops/s
# Warmup Iteration   4: 2579453.283 ops/s
# Warmup Iteration   5: 2457998.817 ops/s
# Warmup Iteration   6: 2447695.471 ops/s
# Warmup Iteration   7: 2636369.548 ops/s
# Warmup Iteration   8: 2454934.836 ops/s
# Warmup Iteration   9: 2541626.249 ops/s
# Warmup Iteration  10: 2470783.862 ops/s
# Warmup Iteration  11: 2473661.367 ops/s
# Warmup Iteration  12: 2542389.674 ops/s
# Warmup Iteration  13: 2443675.945 ops/s
# Warmup Iteration  14: 2521779.528 ops/s
# Warmup Iteration  15: 2510409.159 ops/s
# Warmup Iteration  16: 2486602.771 ops/s
# Warmup Iteration  17: 2676832.676 ops/s
# Warmup Iteration  18: 2457985.127 ops/s
# Warmup Iteration  19: 2629917.837 ops/s
# Warmup Iteration  20: 2461919.583 ops/s
# Warmup Iteration  21: 2635528.503 ops/s
# Warmup Iteration  22: 2452842.870 ops/s
# Warmup Iteration  23: 2551744.222 ops/s
# Warmup Iteration  24: 2582878.745 ops/s
# Warmup Iteration  25: 2562716.414 ops/s
# Warmup Iteration  26: 2521785.689 ops/s
# Warmup Iteration  27: 2560570.087 ops/s
# Warmup Iteration  28: 2525324.193 ops/s
# Warmup Iteration  29: 2544387.239 ops/s
# Warmup Iteration  30: 2479527.836 ops/s
Iteration   1: 2584080.584 ops/s
Iteration   2: 2465599.064 ops/s
Iteration   3: 2489844.058 ops/s
Iteration   4: 2602951.628 ops/s
Iteration   5: 2470015.267 ops/s
Iteration   6: 2553432.291 ops/s
Iteration   7: 2600971.358 ops/s
Iteration   8: 2463152.702 ops/s
Iteration   9: 2638180.769 ops/s
Iteration  10: 2538516.888 ops/s
Iteration  11: 2471201.101 ops/s
Iteration  12: 2612609.653 ops/s
Iteration  13: 2568082.720 ops/s
Iteration  14: 2552705.253 ops/s
Iteration  15: 2549080.073 ops/s
Iteration  16: 2485590.886 ops/s
Iteration  17: 2540443.337 ops/s
Iteration  18: 2632790.503 ops/s
Iteration  19: 2512911.306 ops/s
Iteration  20: 2544249.539 ops/s
Iteration  21: 2650893.691 ops/s
Iteration  22: 2492576.368 ops/s
Iteration  23: 2541306.855 ops/s
Iteration  24: 2529672.577 ops/s
Iteration  25: 2620034.291 ops/s
Iteration  26: 2597692.015 ops/s
Iteration  27: 2474129.676 ops/s
Iteration  28: 2652073.387 ops/s
Iteration  29: 2460397.429 ops/s
Iteration  30: 2536441.762 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_crossDispose":
  2547720.901 ±(99.9%) 40679.350 ops/s [Average]
  (min, avg, max) = (2460397.429, 2547720.901, 2652073.387), stdev = 60886.941
  CI (99.9%): [2507041.551, 2588400.251] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CompletableCacheTest._Benchmark.benchmark_crossDispose  thrpt   30  2547720.901 ± 40679.350  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_cancelDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_cancelDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 391847.476 ops/s
# Warmup Iteration   2: 1266826.227 ops/s
# Warmup Iteration   3: 1967835.423 ops/s
# Warmup Iteration   4: 2550866.399 ops/s
# Warmup Iteration   5: 2515389.632 ops/s
# Warmup Iteration   6: 2454313.929 ops/s
# Warmup Iteration   7: 2398995.597 ops/s
# Warmup Iteration   8: 2332087.000 ops/s
# Warmup Iteration   9: 2517142.864 ops/s
# Warmup Iteration  10: 2391039.590 ops/s
# Warmup Iteration  11: 2405341.504 ops/s
# Warmup Iteration  12: 2487288.939 ops/s
# Warmup Iteration  13: 2406650.456 ops/s
# Warmup Iteration  14: 2532668.649 ops/s
# Warmup Iteration  15: 2508407.978 ops/s
# Warmup Iteration  16: 2444004.069 ops/s
# Warmup Iteration  17: 2406037.202 ops/s
# Warmup Iteration  18: 2528018.423 ops/s
# Warmup Iteration  19: 2476099.242 ops/s
# Warmup Iteration  20: 2322209.635 ops/s
# Warmup Iteration  21: 2517529.760 ops/s
# Warmup Iteration  22: 2348241.088 ops/s
# Warmup Iteration  23: 2064625.626 ops/s
# Warmup Iteration  24: 2282356.704 ops/s
# Warmup Iteration  25: 2396930.824 ops/s
# Warmup Iteration  26: 2475140.615 ops/s
# Warmup Iteration  27: 2521522.400 ops/s
# Warmup Iteration  28: 2343740.002 ops/s
# Warmup Iteration  29: 2455872.384 ops/s
# Warmup Iteration  30: 2491652.397 ops/s
Iteration   1: 2389886.230 ops/s
Iteration   2: 2479158.135 ops/s
Iteration   3: 2395513.591 ops/s
Iteration   4: 2505357.849 ops/s
Iteration   5: 2400203.136 ops/s
Iteration   6: 2518970.960 ops/s
Iteration   7: 2498693.177 ops/s
Iteration   8: 2373763.242 ops/s
Iteration   9: 2458394.110 ops/s
Iteration  10: 2442136.595 ops/s
Iteration  11: 2551759.396 ops/s
Iteration  12: 2572214.419 ops/s
Iteration  13: 2365863.744 ops/s
Iteration  14: 2466257.248 ops/s
Iteration  15: 2534321.808 ops/s
Iteration  16: 2460612.764 ops/s
Iteration  17: 2383664.362 ops/s
Iteration  18: 2508698.305 ops/s
Iteration  19: 2375186.564 ops/s
Iteration  20: 2437297.447 ops/s
Iteration  21: 2503523.236 ops/s
Iteration  22: 2453689.109 ops/s
Iteration  23: 2448384.791 ops/s
Iteration  24: 2417919.984 ops/s
Iteration  25: 2545940.365 ops/s
Iteration  26: 2351952.851 ops/s
Iteration  27: 2552209.909 ops/s
Iteration  28: 2411851.174 ops/s
Iteration  29: 2424774.023 ops/s
Iteration  30: 2556970.179 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_cancelDelayed":
  2459505.623 ±(99.9%) 43601.408 ops/s [Average]
  (min, avg, max) = (2351952.851, 2459505.623, 2572214.419), stdev = 65260.540
  CI (99.9%): [2415904.215, 2503107.032] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
CompletableDisposeOnTest._Benchmark.benchmark_cancelDelayed  thrpt   30  2459505.623 ± 43601.408  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_consumerDisposes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_consumerDisposes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1044101.793 ops/s
# Warmup Iteration   2: 2211696.584 ops/s
# Warmup Iteration   3: 2926105.843 ops/s
# Warmup Iteration   4: 2711228.127 ops/s
# Warmup Iteration   5: 2798274.938 ops/s
# Warmup Iteration   6: 2774180.804 ops/s
# Warmup Iteration   7: 2709765.414 ops/s
# Warmup Iteration   8: 2932838.645 ops/s
# Warmup Iteration   9: 2816751.145 ops/s
# Warmup Iteration  10: 2793486.148 ops/s
# Warmup Iteration  11: 2807587.224 ops/s
# Warmup Iteration  12: 2632522.637 ops/s
# Warmup Iteration  13: 2645836.283 ops/s
# Warmup Iteration  14: 2895936.353 ops/s
# Warmup Iteration  15: 2790200.033 ops/s
# Warmup Iteration  16: 2832799.242 ops/s
# Warmup Iteration  17: 2952750.706 ops/s
# Warmup Iteration  18: 2764784.965 ops/s
# Warmup Iteration  19: 2929070.391 ops/s
# Warmup Iteration  20: 2790365.157 ops/s
# Warmup Iteration  21: 2915146.431 ops/s
# Warmup Iteration  22: 2785933.033 ops/s
# Warmup Iteration  23: 2943956.022 ops/s
# Warmup Iteration  24: 2886394.211 ops/s
# Warmup Iteration  25: 2808750.249 ops/s
# Warmup Iteration  26: 2916540.048 ops/s
# Warmup Iteration  27: 2797739.617 ops/s
# Warmup Iteration  28: 2911039.475 ops/s
# Warmup Iteration  29: 2885967.626 ops/s
# Warmup Iteration  30: 2891900.633 ops/s
Iteration   1: 2820903.528 ops/s
Iteration   2: 2833547.066 ops/s
Iteration   3: 2874008.892 ops/s
Iteration   4: 2789857.395 ops/s
Iteration   5: 2896750.796 ops/s
Iteration   6: 2800342.182 ops/s
Iteration   7: 2760869.699 ops/s
Iteration   8: 2853949.420 ops/s
Iteration   9: 2955473.252 ops/s
Iteration  10: 2782737.346 ops/s
Iteration  11: 2969334.774 ops/s
Iteration  12: 2825784.833 ops/s
Iteration  13: 2808654.789 ops/s
Iteration  14: 2882974.813 ops/s
Iteration  15: 2774033.979 ops/s
Iteration  16: 2824962.391 ops/s
Iteration  17: 2904018.740 ops/s
Iteration  18: 2840607.970 ops/s
Iteration  19: 2825349.508 ops/s
Iteration  20: 2904659.711 ops/s
Iteration  21: 2853131.178 ops/s
Iteration  22: 2866706.802 ops/s
Iteration  23: 2888454.809 ops/s
Iteration  24: 2796123.185 ops/s
Iteration  25: 2914153.823 ops/s
Iteration  26: 2824214.474 ops/s
Iteration  27: 2954969.584 ops/s
Iteration  28: 2905076.088 ops/s
Iteration  29: 2784132.231 ops/s
Iteration  30: 2834013.840 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_consumerDisposes":
  2851659.903 ±(99.9%) 37673.583 ops/s [Average]
  (min, avg, max) = (2760869.699, 2851659.903, 2969334.774), stdev = 56388.050
  CI (99.9%): [2813986.320, 2889333.486] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompletableTakeUntilTest._Benchmark.benchmark_consumerDisposes  thrpt   30  2851659.903 ± 37673.583  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableToFutureTest._Benchmark.benchmark_cancel2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableToFutureTest._Benchmark.benchmark_cancel2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2831396.108 ops/s
# Warmup Iteration   2: 5419450.024 ops/s
# Warmup Iteration   3: 5292406.337 ops/s
# Warmup Iteration   4: 6424205.849 ops/s
# Warmup Iteration   5: 6099971.111 ops/s
# Warmup Iteration   6: 6327385.242 ops/s
# Warmup Iteration   7: 6556363.050 ops/s
# Warmup Iteration   8: 6208129.979 ops/s
# Warmup Iteration   9: 6440149.708 ops/s
# Warmup Iteration  10: 6154740.413 ops/s
# Warmup Iteration  11: 6268216.081 ops/s
# Warmup Iteration  12: 6574586.025 ops/s
# Warmup Iteration  13: 6168983.030 ops/s
# Warmup Iteration  14: 6397597.200 ops/s
# Warmup Iteration  15: 6092995.190 ops/s
# Warmup Iteration  16: 6475438.104 ops/s
# Warmup Iteration  17: 6341778.198 ops/s
# Warmup Iteration  18: 4917120.320 ops/s
# Warmup Iteration  19: 6431881.880 ops/s
# Warmup Iteration  20: 6148307.928 ops/s
# Warmup Iteration  21: 6566697.648 ops/s
# Warmup Iteration  22: 6510850.511 ops/s
# Warmup Iteration  23: 6111716.974 ops/s
# Warmup Iteration  24: 6248307.642 ops/s
# Warmup Iteration  25: 6419843.178 ops/s
# Warmup Iteration  26: 6295816.694 ops/s
# Warmup Iteration  27: 6164106.887 ops/s
# Warmup Iteration  28: 6540266.888 ops/s
# Warmup Iteration  29: 6297177.847 ops/s
# Warmup Iteration  30: 6380059.201 ops/s
Iteration   1: 6577923.086 ops/s
Iteration   2: 6048031.628 ops/s
Iteration   3: 6534899.783 ops/s
Iteration   4: 6213643.620 ops/s
Iteration   5: 6325646.304 ops/s
Iteration   6: 6144781.026 ops/s
Iteration   7: 6170659.434 ops/s
Iteration   8: 6326463.090 ops/s
Iteration   9: 6550493.362 ops/s
Iteration  10: 6235259.269 ops/s
Iteration  11: 6541017.225 ops/s
Iteration  12: 6168374.537 ops/s
Iteration  13: 6521513.104 ops/s
Iteration  14: 6564465.899 ops/s
Iteration  15: 6446074.473 ops/s
Iteration  16: 6235588.150 ops/s
Iteration  17: 6329962.609 ops/s
Iteration  18: 6461100.001 ops/s
Iteration  19: 6156234.003 ops/s
Iteration  20: 6546272.686 ops/s
Iteration  21: 6164431.422 ops/s
Iteration  22: 6357884.200 ops/s
Iteration  23: 6065163.665 ops/s
Iteration  24: 6221428.054 ops/s
Iteration  25: 6405046.817 ops/s
Iteration  26: 6215777.161 ops/s
Iteration  27: 6594462.708 ops/s
Iteration  28: 6406555.178 ops/s
Iteration  29: 6242790.030 ops/s
Iteration  30: 6341773.265 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableToFutureTest._Benchmark.benchmark_cancel2":
  6337123.860 ±(99.9%) 111208.496 ops/s [Average]
  (min, avg, max) = (6048031.628, 6337123.860, 6594462.708), stdev = 166451.654
  CI (99.9%): [6225915.364, 6448332.356] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
CompletableToFutureTest._Benchmark.benchmark_cancel2  thrpt   30  6337123.860 ± 111208.496  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableToFutureTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableToFutureTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2669558.008 ops/s
# Warmup Iteration   2: 3823982.019 ops/s
# Warmup Iteration   3: 4873629.053 ops/s
# Warmup Iteration   4: 5368917.169 ops/s
# Warmup Iteration   5: 5716657.686 ops/s
# Warmup Iteration   6: 5659366.282 ops/s
# Warmup Iteration   7: 5479083.016 ops/s
# Warmup Iteration   8: 5548853.914 ops/s
# Warmup Iteration   9: 5452155.973 ops/s
# Warmup Iteration  10: 5585229.654 ops/s
# Warmup Iteration  11: 5414203.672 ops/s
# Warmup Iteration  12: 5653747.342 ops/s
# Warmup Iteration  13: 5655458.695 ops/s
# Warmup Iteration  14: 5469735.120 ops/s
# Warmup Iteration  15: 5601266.792 ops/s
# Warmup Iteration  16: 5448154.191 ops/s
# Warmup Iteration  17: 5623475.565 ops/s
# Warmup Iteration  18: 5484419.269 ops/s
# Warmup Iteration  19: 5494564.702 ops/s
# Warmup Iteration  20: 5760170.021 ops/s
# Warmup Iteration  21: 5537541.586 ops/s
# Warmup Iteration  22: 5600076.064 ops/s
# Warmup Iteration  23: 5452796.190 ops/s
# Warmup Iteration  24: 5467728.254 ops/s
# Warmup Iteration  25: 5596646.917 ops/s
# Warmup Iteration  26: 5428312.994 ops/s
# Warmup Iteration  27: 5631443.326 ops/s
# Warmup Iteration  28: 5739187.074 ops/s
# Warmup Iteration  29: 5306520.087 ops/s
# Warmup Iteration  30: 5764523.755 ops/s
Iteration   1: 5423834.113 ops/s
Iteration   2: 5591194.996 ops/s
Iteration   3: 5710848.289 ops/s
Iteration   4: 5413646.665 ops/s
Iteration   5: 5716591.833 ops/s
Iteration   6: 5648793.003 ops/s
Iteration   7: 5487258.957 ops/s
Iteration   8: 5546817.340 ops/s
Iteration   9: 5593686.574 ops/s
Iteration  10: 5563036.594 ops/s
Iteration  11: 5675510.921 ops/s
Iteration  12: 5399615.257 ops/s
Iteration  13: 5666201.472 ops/s
Iteration  14: 5722799.585 ops/s
Iteration  15: 5415873.323 ops/s
Iteration  16: 5585442.191 ops/s
Iteration  17: 5522876.572 ops/s
Iteration  18: 5757201.347 ops/s
Iteration  19: 5789606.601 ops/s
Iteration  20: 5380790.453 ops/s
Iteration  21: 5860471.047 ops/s
Iteration  22: 5644274.890 ops/s
Iteration  23: 5513743.623 ops/s
Iteration  24: 5735044.258 ops/s
Iteration  25: 5391963.528 ops/s
Iteration  26: 5689357.280 ops/s
Iteration  27: 5487858.814 ops/s
Iteration  28: 5526328.309 ops/s
Iteration  29: 5654468.703 ops/s
Iteration  30: 5588937.506 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableToFutureTest._Benchmark.benchmark_cancel":
  5590135.802 ±(99.9%) 86851.377 ops/s [Average]
  (min, avg, max) = (5380790.453, 5590135.802, 5860471.047), stdev = 129995.062
  CI (99.9%): [5503284.425, 5676987.178] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
CompletableToFutureTest._Benchmark.benchmark_cancel  thrpt   30  5590135.802 ± 86851.377  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_synchronousDisconnect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_synchronousDisconnect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147889.081 ops/s
# Warmup Iteration   2: 664876.497 ops/s
# Warmup Iteration   3: 898272.985 ops/s
# Warmup Iteration   4: 848592.715 ops/s
# Warmup Iteration   5: 959847.383 ops/s
# Warmup Iteration   6: 982818.119 ops/s
# Warmup Iteration   7: 953968.976 ops/s
# Warmup Iteration   8: 1021099.845 ops/s
# Warmup Iteration   9: 999258.239 ops/s
# Warmup Iteration  10: 964999.420 ops/s
# Warmup Iteration  11: 962383.969 ops/s
# Warmup Iteration  12: 1003860.960 ops/s
# Warmup Iteration  13: 790703.568 ops/s
# Warmup Iteration  14: 947191.983 ops/s
# Warmup Iteration  15: 981324.034 ops/s
# Warmup Iteration  16: 943382.589 ops/s
# Warmup Iteration  17: 984026.690 ops/s
# Warmup Iteration  18: 1009915.764 ops/s
# Warmup Iteration  19: 956539.020 ops/s
# Warmup Iteration  20: 1003818.941 ops/s
# Warmup Iteration  21: 975446.514 ops/s
# Warmup Iteration  22: 1007181.060 ops/s
# Warmup Iteration  23: 980959.532 ops/s
# Warmup Iteration  24: 951346.358 ops/s
# Warmup Iteration  25: 1008183.680 ops/s
# Warmup Iteration  26: 1008944.883 ops/s
# Warmup Iteration  27: 1011101.409 ops/s
# Warmup Iteration  28: 958025.365 ops/s
# Warmup Iteration  29: 995619.013 ops/s
# Warmup Iteration  30: 985406.564 ops/s
Iteration   1: 1011816.980 ops/s
Iteration   2: 1004119.194 ops/s
Iteration   3: 976219.732 ops/s
Iteration   4: 979625.077 ops/s
Iteration   5: 953175.050 ops/s
Iteration   6: 975807.430 ops/s
Iteration   7: 973862.006 ops/s
Iteration   8: 977801.842 ops/s
Iteration   9: 1023204.121 ops/s
Iteration  10: 1029132.096 ops/s
Iteration  11: 943421.082 ops/s
Iteration  12: 1006051.742 ops/s
Iteration  13: 964169.805 ops/s
Iteration  14: 968068.497 ops/s
Iteration  15: 996337.297 ops/s
Iteration  16: 1017210.472 ops/s
Iteration  17: 963484.791 ops/s
Iteration  18: 972409.247 ops/s
Iteration  19: 1013297.746 ops/s
Iteration  20: 960237.737 ops/s
Iteration  21: 1014812.125 ops/s
Iteration  22: 963583.371 ops/s
Iteration  23: 1035759.362 ops/s
Iteration  24: 968142.096 ops/s
Iteration  25: 965476.758 ops/s
Iteration  26: 995044.736 ops/s
Iteration  27: 1008742.367 ops/s
Iteration  28: 970968.988 ops/s
Iteration  29: 971246.997 ops/s
Iteration  30: 988881.213 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_synchronousDisconnect":
  986403.665 ±(99.9%) 16440.849 ops/s [Average]
  (min, avg, max) = (943421.082, 986403.665, 1035759.362), stdev = 24607.891
  CI (99.9%): [969962.816, 1002844.514] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_synchronousDisconnect  thrpt   30  986403.665 ± 16440.849  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 37209.589 ops/s
# Warmup Iteration   2: 177372.870 ops/s
# Warmup Iteration   3: 196258.945 ops/s
# Warmup Iteration   4: 209743.389 ops/s
# Warmup Iteration   5: 216124.387 ops/s
# Warmup Iteration   6: 208198.634 ops/s
# Warmup Iteration   7: 218511.584 ops/s
# Warmup Iteration   8: 204728.096 ops/s
# Warmup Iteration   9: 213489.518 ops/s
# Warmup Iteration  10: 211866.760 ops/s
# Warmup Iteration  11: 202878.088 ops/s
# Warmup Iteration  12: 217335.521 ops/s
# Warmup Iteration  13: 212250.120 ops/s
# Warmup Iteration  14: 218204.546 ops/s
# Warmup Iteration  15: 217497.991 ops/s
# Warmup Iteration  16: 209315.484 ops/s
# Warmup Iteration  17: 216434.992 ops/s
# Warmup Iteration  18: 219706.485 ops/s
# Warmup Iteration  19: 218657.711 ops/s
# Warmup Iteration  20: 229757.361 ops/s
# Warmup Iteration  21: 216461.765 ops/s
# Warmup Iteration  22: 225752.312 ops/s
# Warmup Iteration  23: 218672.783 ops/s
# Warmup Iteration  24: 219478.882 ops/s
# Warmup Iteration  25: 212815.947 ops/s
# Warmup Iteration  26: 219325.577 ops/s
# Warmup Iteration  27: 229534.272 ops/s
# Warmup Iteration  28: 213921.371 ops/s
# Warmup Iteration  29: 224044.143 ops/s
# Warmup Iteration  30: 220129.077 ops/s
Iteration   1: 225881.695 ops/s
Iteration   2: 219247.970 ops/s
Iteration   3: 225615.745 ops/s
Iteration   4: 225415.091 ops/s
Iteration   5: 217326.948 ops/s
Iteration   6: 219917.198 ops/s
Iteration   7: 236804.023 ops/s
Iteration   8: 215122.596 ops/s
Iteration   9: 219511.922 ops/s
Iteration  10: 220971.334 ops/s
Iteration  11: 222312.010 ops/s
Iteration  12: 229656.646 ops/s
Iteration  13: 219161.677 ops/s
Iteration  14: 221363.506 ops/s
Iteration  15: 215930.488 ops/s
Iteration  16: 223228.389 ops/s
Iteration  17: 213332.756 ops/s
Iteration  18: 226693.409 ops/s
Iteration  19: 214298.837 ops/s
Iteration  20: 218367.270 ops/s
Iteration  21: 225473.460 ops/s
Iteration  22: 214741.026 ops/s
Iteration  23: 224486.988 ops/s
Iteration  24: 216209.846 ops/s
Iteration  25: 223676.252 ops/s
Iteration  26: 223234.247 ops/s
Iteration  27: 227655.478 ops/s
Iteration  28: 219545.896 ops/s
Iteration  29: 220722.368 ops/s
Iteration  30: 224682.001 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  221686.236 ±(99.9%) 3454.115 ops/s [Average]
  (min, avg, max) = (213332.756, 221686.236, 236804.023), stdev = 5169.956
  CI (99.9%): [218232.121, 225140.350] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
ObservableSwitchMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  221686.236 ± 3454.115  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_synchronousDisconnect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_synchronousDisconnect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 202857.701 ops/s
# Warmup Iteration   2: 746038.556 ops/s
# Warmup Iteration   3: 984192.510 ops/s
# Warmup Iteration   4: 973243.246 ops/s
# Warmup Iteration   5: 1008812.001 ops/s
# Warmup Iteration   6: 965535.779 ops/s
# Warmup Iteration   7: 852470.848 ops/s
# Warmup Iteration   8: 840601.459 ops/s
# Warmup Iteration   9: 896899.677 ops/s
# Warmup Iteration  10: 989463.351 ops/s
# Warmup Iteration  11: 948074.102 ops/s
# Warmup Iteration  12: 1001180.954 ops/s
# Warmup Iteration  13: 964367.902 ops/s
# Warmup Iteration  14: 879974.815 ops/s
# Warmup Iteration  15: 947693.949 ops/s
# Warmup Iteration  16: 954698.306 ops/s
# Warmup Iteration  17: 1014093.676 ops/s
# Warmup Iteration  18: 972066.104 ops/s
# Warmup Iteration  19: 1027154.887 ops/s
# Warmup Iteration  20: 979345.187 ops/s
# Warmup Iteration  21: 991621.341 ops/s
# Warmup Iteration  22: 1011689.897 ops/s
# Warmup Iteration  23: 998332.021 ops/s
# Warmup Iteration  24: 977320.832 ops/s
# Warmup Iteration  25: 1016668.529 ops/s
# Warmup Iteration  26: 956026.951 ops/s
# Warmup Iteration  27: 1035113.087 ops/s
# Warmup Iteration  28: 961161.034 ops/s
# Warmup Iteration  29: 998273.993 ops/s
# Warmup Iteration  30: 1025263.732 ops/s
Iteration   1: 958728.328 ops/s
Iteration   2: 1016506.133 ops/s
Iteration   3: 971470.928 ops/s
Iteration   4: 981179.750 ops/s
Iteration   5: 994546.582 ops/s
Iteration   6: 980514.275 ops/s
Iteration   7: 1010535.095 ops/s
Iteration   8: 992271.707 ops/s
Iteration   9: 981714.151 ops/s
Iteration  10: 1036042.697 ops/s
Iteration  11: 1022261.476 ops/s
Iteration  12: 970688.823 ops/s
Iteration  13: 1019613.921 ops/s
Iteration  14: 1030562.447 ops/s
Iteration  15: 971100.842 ops/s
Iteration  16: 986389.049 ops/s
Iteration  17: 1007396.360 ops/s
Iteration  18: 979860.436 ops/s
Iteration  19: 995793.261 ops/s
Iteration  20: 985275.583 ops/s
Iteration  21: 950034.156 ops/s
Iteration  22: 1015302.599 ops/s
Iteration  23: 977788.716 ops/s
Iteration  24: 1014050.884 ops/s
Iteration  25: 984562.352 ops/s
Iteration  26: 991903.213 ops/s
Iteration  27: 1037284.237 ops/s
Iteration  28: 1000361.952 ops/s
Iteration  29: 964754.883 ops/s
Iteration  30: 1031285.350 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_synchronousDisconnect":
  995326.006 ±(99.9%) 15901.436 ops/s [Average]
  (min, avg, max) = (950034.156, 995326.006, 1037284.237), stdev = 23800.523
  CI (99.9%): [979424.570, 1011227.443] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_synchronousDisconnect  thrpt   30  995326.006 ± 15901.436  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_withOtherMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_withOtherMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 120631.471 ops/s
# Warmup Iteration   2: 555737.260 ops/s
# Warmup Iteration   3: 700344.501 ops/s
# Warmup Iteration   4: 664068.899 ops/s
# Warmup Iteration   5: 705467.873 ops/s
# Warmup Iteration   6: 638476.181 ops/s
# Warmup Iteration   7: 646597.954 ops/s
# Warmup Iteration   8: 673848.364 ops/s
# Warmup Iteration   9: 678899.277 ops/s
# Warmup Iteration  10: 721126.299 ops/s
# Warmup Iteration  11: 671593.773 ops/s
# Warmup Iteration  12: 689603.955 ops/s
# Warmup Iteration  13: 699854.826 ops/s
# Warmup Iteration  14: 697760.185 ops/s
# Warmup Iteration  15: 692320.750 ops/s
# Warmup Iteration  16: 677403.559 ops/s
# Warmup Iteration  17: 728845.788 ops/s
# Warmup Iteration  18: 723963.925 ops/s
# Warmup Iteration  19: 728660.016 ops/s
# Warmup Iteration  20: 738508.055 ops/s
# Warmup Iteration  21: 702310.358 ops/s
# Warmup Iteration  22: 740633.754 ops/s
# Warmup Iteration  23: 744447.232 ops/s
# Warmup Iteration  24: 688889.448 ops/s
# Warmup Iteration  25: 731302.921 ops/s
# Warmup Iteration  26: 725905.047 ops/s
# Warmup Iteration  27: 717987.915 ops/s
# Warmup Iteration  28: 757895.299 ops/s
# Warmup Iteration  29: 721236.174 ops/s
# Warmup Iteration  30: 752227.633 ops/s
Iteration   1: 709889.684 ops/s
Iteration   2: 741185.638 ops/s
Iteration   3: 731723.441 ops/s
Iteration   4: 733330.310 ops/s
Iteration   5: 744101.755 ops/s
Iteration   6: 722107.906 ops/s
Iteration   7: 763647.056 ops/s
Iteration   8: 712954.409 ops/s
Iteration   9: 756599.177 ops/s
Iteration  10: 703715.224 ops/s
Iteration  11: 754568.263 ops/s
Iteration  12: 690295.182 ops/s
Iteration  13: 753220.652 ops/s
Iteration  14: 732863.404 ops/s
Iteration  15: 713580.460 ops/s
Iteration  16: 742313.766 ops/s
Iteration  17: 760229.775 ops/s
Iteration  18: 727600.305 ops/s
Iteration  19: 716574.472 ops/s
Iteration  20: 755532.694 ops/s
Iteration  21: 718352.081 ops/s
Iteration  22: 725712.036 ops/s
Iteration  23: 756270.610 ops/s
Iteration  24: 727148.274 ops/s
Iteration  25: 768320.562 ops/s
Iteration  26: 747160.939 ops/s
Iteration  27: 720870.083 ops/s
Iteration  28: 747794.756 ops/s
Iteration  29: 727513.425 ops/s
Iteration  30: 737253.080 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_withOtherMainError":
  734747.647 ±(99.9%) 12967.177 ops/s [Average]
  (min, avg, max) = (690295.182, 734747.647, 768320.562), stdev = 19408.661
  CI (99.9%): [721780.470, 747714.824] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_withOtherMainError  thrpt   30  734747.647 ± 12967.177  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182668.104 ops/s
# Warmup Iteration   2: 337370.159 ops/s
# Warmup Iteration   3: 646345.295 ops/s
# Warmup Iteration   4: 1272756.052 ops/s
# Warmup Iteration   5: 1295963.972 ops/s
# Warmup Iteration   6: 1324404.660 ops/s
# Warmup Iteration   7: 1259563.798 ops/s
# Warmup Iteration   8: 1314211.596 ops/s
# Warmup Iteration   9: 1120828.409 ops/s
# Warmup Iteration  10: 1317432.093 ops/s
# Warmup Iteration  11: 1338550.526 ops/s
# Warmup Iteration  12: 1358442.191 ops/s
# Warmup Iteration  13: 1258915.266 ops/s
# Warmup Iteration  14: 1334162.805 ops/s
# Warmup Iteration  15: 1288839.320 ops/s
# Warmup Iteration  16: 1296166.691 ops/s
# Warmup Iteration  17: 1269781.580 ops/s
# Warmup Iteration  18: 1297657.707 ops/s
# Warmup Iteration  19: 1327514.062 ops/s
# Warmup Iteration  20: 1262472.865 ops/s
# Warmup Iteration  21: 1350823.506 ops/s
# Warmup Iteration  22: 1270075.302 ops/s
# Warmup Iteration  23: 1342483.965 ops/s
# Warmup Iteration  24: 1289836.822 ops/s
# Warmup Iteration  25: 1278864.257 ops/s
# Warmup Iteration  26: 1331038.834 ops/s
# Warmup Iteration  27: 1292128.737 ops/s
# Warmup Iteration  28: 1321476.468 ops/s
# Warmup Iteration  29: 1304375.312 ops/s
# Warmup Iteration  30: 1310616.401 ops/s
Iteration   1: 1345042.181 ops/s
Iteration   2: 1274840.459 ops/s
Iteration   3: 1336223.191 ops/s
Iteration   4: 1321505.127 ops/s
Iteration   5: 1311114.915 ops/s
Iteration   6: 1337957.571 ops/s
Iteration   7: 1330099.182 ops/s
Iteration   8: 1279255.433 ops/s
Iteration   9: 1301156.569 ops/s
Iteration  10: 1332576.656 ops/s
Iteration  11: 1250129.652 ops/s
Iteration  12: 1362709.762 ops/s
Iteration  13: 1330998.060 ops/s
Iteration  14: 1259416.726 ops/s
Iteration  15: 1320054.783 ops/s
Iteration  16: 1360331.267 ops/s
Iteration  17: 1269585.382 ops/s
Iteration  18: 1343219.415 ops/s
Iteration  19: 1359235.532 ops/s
Iteration  20: 1253727.037 ops/s
Iteration  21: 1329483.654 ops/s
Iteration  22: 1283709.455 ops/s
Iteration  23: 1359214.282 ops/s
Iteration  24: 1364499.426 ops/s
Iteration  25: 1274716.132 ops/s
Iteration  26: 1340571.623 ops/s
Iteration  27: 1300851.111 ops/s
Iteration  28: 1308760.217 ops/s
Iteration  29: 1284749.388 ops/s
Iteration  30: 1310976.015 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_dispose":
  1314557.007 ±(99.9%) 23234.356 ops/s [Average]
  (min, avg, max) = (1250129.652, 1314557.007, 1364499.426), stdev = 34776.092
  CI (99.9%): [1291322.651, 1337791.362] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
CompletableCacheTest._Benchmark.benchmark_dispose  thrpt   30  1314557.007 ± 23234.356  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_actionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_actionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 79558.743 ops/s
# Warmup Iteration   2: 196768.876 ops/s
# Warmup Iteration   3: 211889.483 ops/s
# Warmup Iteration   4: 211321.577 ops/s
# Warmup Iteration   5: 237088.247 ops/s
# Warmup Iteration   6: 227754.646 ops/s
# Warmup Iteration   7: 242533.965 ops/s
# Warmup Iteration   8: 229675.548 ops/s
# Warmup Iteration   9: 238136.428 ops/s
# Warmup Iteration  10: 241259.637 ops/s
# Warmup Iteration  11: 238123.712 ops/s
# Warmup Iteration  12: 229774.424 ops/s
# Warmup Iteration  13: 243033.055 ops/s
# Warmup Iteration  14: 231108.778 ops/s
# Warmup Iteration  15: 233929.047 ops/s
# Warmup Iteration  16: 239687.949 ops/s
# Warmup Iteration  17: 240631.818 ops/s
# Warmup Iteration  18: 252280.771 ops/s
# Warmup Iteration  19: 234520.557 ops/s
# Warmup Iteration  20: 254165.540 ops/s
# Warmup Iteration  21: 244532.938 ops/s
# Warmup Iteration  22: 244737.774 ops/s
# Warmup Iteration  23: 240836.486 ops/s
# Warmup Iteration  24: 243714.496 ops/s
# Warmup Iteration  25: 244796.281 ops/s
# Warmup Iteration  26: 242473.976 ops/s
# Warmup Iteration  27: 251744.972 ops/s
# Warmup Iteration  28: 242153.464 ops/s
# Warmup Iteration  29: 251337.626 ops/s
# Warmup Iteration  30: 245083.505 ops/s
Iteration   1: 237116.664 ops/s
Iteration   2: 241477.897 ops/s
Iteration   3: 238172.262 ops/s
Iteration   4: 240966.678 ops/s
Iteration   5: 246539.422 ops/s
Iteration   6: 242080.424 ops/s
Iteration   7: 248704.619 ops/s
Iteration   8: 244732.612 ops/s
Iteration   9: 251397.294 ops/s
Iteration  10: 254517.427 ops/s
Iteration  11: 237503.061 ops/s
Iteration  12: 251882.538 ops/s
Iteration  13: 241125.082 ops/s
Iteration  14: 245163.225 ops/s
Iteration  15: 237388.525 ops/s
Iteration  16: 246983.994 ops/s
Iteration  17: 258203.342 ops/s
Iteration  18: 247747.491 ops/s
Iteration  19: 242196.299 ops/s
Iteration  20: 249925.888 ops/s
Iteration  21: 239548.534 ops/s
Iteration  22: 252825.767 ops/s
Iteration  23: 245779.595 ops/s
Iteration  24: 247980.558 ops/s
Iteration  25: 246155.510 ops/s
Iteration  26: 243426.416 ops/s
Iteration  27: 235878.203 ops/s
Iteration  28: 250459.578 ops/s
Iteration  29: 200070.424 ops/s
Iteration  30: 238991.720 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_actionThrows":
  243498.035 ±(99.9%) 6672.472 ops/s [Average]
  (min, avg, max) = (200070.424, 243498.035, 258203.342), stdev = 9987.042
  CI (99.9%): [236825.563, 250170.507] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
CompletableDoFinallyTest._Benchmark.benchmark_actionThrows  thrpt   30  243498.035 ± 6672.472  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1100259.941 ops/s
# Warmup Iteration   2: 2414625.273 ops/s
# Warmup Iteration   3: 2866941.403 ops/s
# Warmup Iteration   4: 2967111.190 ops/s
# Warmup Iteration   5: 3172654.351 ops/s
# Warmup Iteration   6: 2900999.350 ops/s
# Warmup Iteration   7: 3121846.035 ops/s
# Warmup Iteration   8: 3003360.936 ops/s
# Warmup Iteration   9: 2995523.459 ops/s
# Warmup Iteration  10: 3090310.944 ops/s
# Warmup Iteration  11: 3029842.551 ops/s
# Warmup Iteration  12: 2987237.767 ops/s
# Warmup Iteration  13: 3147938.083 ops/s
# Warmup Iteration  14: 3004374.837 ops/s
# Warmup Iteration  15: 3108149.462 ops/s
# Warmup Iteration  16: 2986459.862 ops/s
# Warmup Iteration  17: 3091998.955 ops/s
# Warmup Iteration  18: 3062323.391 ops/s
# Warmup Iteration  19: 3185844.269 ops/s
# Warmup Iteration  20: 2977816.316 ops/s
# Warmup Iteration  21: 3027263.191 ops/s
# Warmup Iteration  22: 3036824.977 ops/s
# Warmup Iteration  23: 3125751.361 ops/s
# Warmup Iteration  24: 2982833.751 ops/s
# Warmup Iteration  25: 3104345.662 ops/s
# Warmup Iteration  26: 3005401.662 ops/s
# Warmup Iteration  27: 3016513.377 ops/s
# Warmup Iteration  28: 3050971.533 ops/s
# Warmup Iteration  29: 3110828.174 ops/s
# Warmup Iteration  30: 3138004.194 ops/s
Iteration   1: 3038720.561 ops/s
Iteration   2: 3077655.980 ops/s
Iteration   3: 2974233.408 ops/s
Iteration   4: 2995809.161 ops/s
Iteration   5: 3069548.480 ops/s
Iteration   6: 3016071.480 ops/s
Iteration   7: 3119906.309 ops/s
Iteration   8: 2976330.211 ops/s
Iteration   9: 3191436.193 ops/s
Iteration  10: 3031082.671 ops/s
Iteration  11: 3066288.040 ops/s
Iteration  12: 3046426.562 ops/s
Iteration  13: 3039073.357 ops/s
Iteration  14: 3099433.490 ops/s
Iteration  15: 3045061.910 ops/s
Iteration  16: 3014740.340 ops/s
Iteration  17: 3106643.600 ops/s
Iteration  18: 3014346.592 ops/s
Iteration  19: 3091724.639 ops/s
Iteration  20: 3172174.498 ops/s
Iteration  21: 2935630.178 ops/s
Iteration  22: 3124905.709 ops/s
Iteration  23: 2973900.220 ops/s
Iteration  24: 3109869.151 ops/s
Iteration  25: 3072601.164 ops/s
Iteration  26: 3049730.961 ops/s
Iteration  27: 3165453.105 ops/s
Iteration  28: 2972145.109 ops/s
Iteration  29: 3044622.029 ops/s
Iteration  30: 3065397.190 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainCompletes":
  3056698.743 ±(99.9%) 41875.179 ops/s [Average]
  (min, avg, max) = (2935630.178, 3056698.743, 3191436.193), stdev = 62676.801
  CI (99.9%): [3014823.564, 3098573.922] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
CompletableTakeUntilTest._Benchmark.benchmark_mainCompletes  thrpt   30  3056698.743 ± 41875.179  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 487041.322 ops/s
# Warmup Iteration   2: 2150954.677 ops/s
# Warmup Iteration   3: 2696628.328 ops/s
# Warmup Iteration   4: 2780551.034 ops/s
# Warmup Iteration   5: 3115218.350 ops/s
# Warmup Iteration   6: 3091840.913 ops/s
# Warmup Iteration   7: 3085975.908 ops/s
# Warmup Iteration   8: 2951891.510 ops/s
# Warmup Iteration   9: 3072115.516 ops/s
# Warmup Iteration  10: 2953424.565 ops/s
# Warmup Iteration  11: 3060923.520 ops/s
# Warmup Iteration  12: 2972556.407 ops/s
# Warmup Iteration  13: 3138188.855 ops/s
# Warmup Iteration  14: 3022230.618 ops/s
# Warmup Iteration  15: 3051074.577 ops/s
# Warmup Iteration  16: 3106541.338 ops/s
# Warmup Iteration  17: 3025034.734 ops/s
# Warmup Iteration  18: 3053819.465 ops/s
# Warmup Iteration  19: 3166942.693 ops/s
# Warmup Iteration  20: 2941434.070 ops/s
# Warmup Iteration  21: 3165124.769 ops/s
# Warmup Iteration  22: 2966333.665 ops/s
# Warmup Iteration  23: 3100859.827 ops/s
# Warmup Iteration  24: 3164552.065 ops/s
# Warmup Iteration  25: 3119946.404 ops/s
# Warmup Iteration  26: 3011847.180 ops/s
# Warmup Iteration  27: 3152377.478 ops/s
# Warmup Iteration  28: 2960746.049 ops/s
# Warmup Iteration  29: 3139706.453 ops/s
# Warmup Iteration  30: 3072756.312 ops/s
Iteration   1: 3014767.532 ops/s
Iteration   2: 3102932.657 ops/s
Iteration   3: 3095063.289 ops/s
Iteration   4: 3146395.813 ops/s
Iteration   5: 3094591.566 ops/s
Iteration   6: 3027464.298 ops/s
Iteration   7: 3175658.367 ops/s
Iteration   8: 3041190.358 ops/s
Iteration   9: 3081547.676 ops/s
Iteration  10: 3015480.163 ops/s
Iteration  11: 3075276.732 ops/s
Iteration  12: 2991190.540 ops/s
Iteration  13: 3073354.223 ops/s
Iteration  14: 3112159.300 ops/s
Iteration  15: 2922410.540 ops/s
Iteration  16: 3098402.815 ops/s
Iteration  17: 3176166.595 ops/s
Iteration  18: 2982032.536 ops/s
Iteration  19: 3044513.506 ops/s
Iteration  20: 3008327.388 ops/s
Iteration  21: 3134472.919 ops/s
Iteration  22: 3026132.604 ops/s
Iteration  23: 2858816.464 ops/s
Iteration  24: 2609164.837 ops/s
Iteration  25: 3160319.279 ops/s
Iteration  26: 2982131.997 ops/s
Iteration  27: 3160221.267 ops/s
Iteration  28: 2994827.516 ops/s
Iteration  29: 2999425.953 ops/s
Iteration  30: 3124141.745 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherCompletes":
  3044286.016 ±(99.9%) 74747.367 ops/s [Average]
  (min, avg, max) = (2609164.837, 3044286.016, 3176166.595), stdev = 111878.348
  CI (99.9%): [2969538.649, 3119033.383] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
CompletableTakeUntilTest._Benchmark.benchmark_otherCompletes  thrpt   30  3044286.016 ± 74747.367  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_crossDisposeOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_crossDisposeOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112622.661 ops/s
# Warmup Iteration   2: 417261.146 ops/s
# Warmup Iteration   3: 581110.326 ops/s
# Warmup Iteration   4: 541965.682 ops/s
# Warmup Iteration   5: 579732.138 ops/s
# Warmup Iteration   6: 551705.898 ops/s
# Warmup Iteration   7: 554999.160 ops/s
# Warmup Iteration   8: 572262.785 ops/s
# Warmup Iteration   9: 548055.340 ops/s
# Warmup Iteration  10: 552270.801 ops/s
# Warmup Iteration  11: 565410.959 ops/s
# Warmup Iteration  12: 575991.381 ops/s
# Warmup Iteration  13: 581409.575 ops/s
# Warmup Iteration  14: 556861.341 ops/s
# Warmup Iteration  15: 566799.245 ops/s
# Warmup Iteration  16: 554409.269 ops/s
# Warmup Iteration  17: 614920.200 ops/s
# Warmup Iteration  18: 616533.637 ops/s
# Warmup Iteration  19: 570500.252 ops/s
# Warmup Iteration  20: 610724.669 ops/s
# Warmup Iteration  21: 568789.391 ops/s
# Warmup Iteration  22: 613730.029 ops/s
# Warmup Iteration  23: 579124.022 ops/s
# Warmup Iteration  24: 589116.344 ops/s
# Warmup Iteration  25: 615025.124 ops/s
# Warmup Iteration  26: 579975.238 ops/s
# Warmup Iteration  27: 606427.403 ops/s
# Warmup Iteration  28: 583948.014 ops/s
# Warmup Iteration  29: 623526.108 ops/s
# Warmup Iteration  30: 578607.405 ops/s
Iteration   1: 589025.272 ops/s
Iteration   2: 595200.862 ops/s
Iteration   3: 595255.973 ops/s
Iteration   4: 607054.507 ops/s
Iteration   5: 579445.197 ops/s
Iteration   6: 606233.502 ops/s
Iteration   7: 612066.811 ops/s
Iteration   8: 587459.529 ops/s
Iteration   9: 597810.401 ops/s
Iteration  10: 577070.962 ops/s
Iteration  11: 614152.900 ops/s
Iteration  12: 604671.124 ops/s
Iteration  13: 565974.310 ops/s
Iteration  14: 599312.332 ops/s
Iteration  15: 625115.210 ops/s
Iteration  16: 600914.062 ops/s
Iteration  17: 587480.971 ops/s
Iteration  18: 610990.665 ops/s
Iteration  19: 592205.159 ops/s
Iteration  20: 613433.777 ops/s
Iteration  21: 616645.152 ops/s
Iteration  22: 572651.630 ops/s
Iteration  23: 593450.209 ops/s
Iteration  24: 579747.762 ops/s
Iteration  25: 593745.207 ops/s
Iteration  26: 601666.288 ops/s
Iteration  27: 615176.876 ops/s
Iteration  28: 593267.116 ops/s
Iteration  29: 586225.851 ops/s
Iteration  30: 616717.520 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_crossDisposeOnError":
  597672.238 ±(99.9%) 9724.290 ops/s [Average]
  (min, avg, max) = (565974.310, 597672.238, 625115.210), stdev = 14554.861
  CI (99.9%): [587947.947, 607396.528] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
CompletableCacheTest._Benchmark.benchmark_crossDisposeOnError  thrpt   30  597672.238 ± 9724.290  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherCompleteLate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherCompleteLate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 331115.955 ops/s
# Warmup Iteration   2: 1147824.617 ops/s
# Warmup Iteration   3: 1592691.988 ops/s
# Warmup Iteration   4: 1668348.320 ops/s
# Warmup Iteration   5: 1550487.627 ops/s
# Warmup Iteration   6: 1754176.270 ops/s
# Warmup Iteration   7: 1839704.549 ops/s
# Warmup Iteration   8: 1760003.874 ops/s
# Warmup Iteration   9: 1836521.641 ops/s
# Warmup Iteration  10: 1727706.146 ops/s
# Warmup Iteration  11: 1775412.407 ops/s
# Warmup Iteration  12: 1832649.638 ops/s
# Warmup Iteration  13: 1746998.211 ops/s
# Warmup Iteration  14: 1840909.167 ops/s
# Warmup Iteration  15: 1774488.013 ops/s
# Warmup Iteration  16: 1848808.057 ops/s
# Warmup Iteration  17: 1795833.205 ops/s
# Warmup Iteration  18: 1833226.150 ops/s
# Warmup Iteration  19: 1918497.963 ops/s
# Warmup Iteration  20: 1838537.861 ops/s
# Warmup Iteration  21: 1840285.953 ops/s
# Warmup Iteration  22: 1800135.506 ops/s
# Warmup Iteration  23: 1917346.269 ops/s
# Warmup Iteration  24: 1849052.729 ops/s
# Warmup Iteration  25: 1800149.011 ops/s
# Warmup Iteration  26: 1932967.809 ops/s
# Warmup Iteration  27: 1863129.030 ops/s
# Warmup Iteration  28: 1784481.234 ops/s
# Warmup Iteration  29: 1885152.693 ops/s
# Warmup Iteration  30: 1844612.659 ops/s
Iteration   1: 1863720.589 ops/s
Iteration   2: 1841449.136 ops/s
Iteration   3: 1850947.503 ops/s
Iteration   4: 1901457.004 ops/s
Iteration   5: 1813576.756 ops/s
Iteration   6: 1876949.104 ops/s
Iteration   7: 1841026.714 ops/s
Iteration   8: 1897143.670 ops/s
Iteration   9: 1863157.998 ops/s
Iteration  10: 1846246.414 ops/s
Iteration  11: 1900627.584 ops/s
Iteration  12: 1840059.907 ops/s
Iteration  13: 1815072.069 ops/s
Iteration  14: 1848184.005 ops/s
Iteration  15: 1831055.860 ops/s
Iteration  16: 1840493.132 ops/s
Iteration  17: 1929120.761 ops/s
Iteration  18: 1417779.046 ops/s
Iteration  19: 1870060.811 ops/s
Iteration  20: 1805622.668 ops/s
Iteration  21: 1869060.254 ops/s
Iteration  22: 1846559.366 ops/s
Iteration  23: 1809884.211 ops/s
Iteration  24: 1831177.129 ops/s
Iteration  25: 1867600.653 ops/s
Iteration  26: 1843544.307 ops/s
Iteration  27: 1804538.319 ops/s
Iteration  28: 1912432.686 ops/s
Iteration  29: 1804319.399 ops/s
Iteration  30: 1877124.746 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherCompleteLate":
  1838666.393 ±(99.9%) 57507.822 ops/s [Average]
  (min, avg, max) = (1417779.046, 1838666.393, 1929120.761), stdev = 86075.007
  CI (99.9%): [1781158.571, 1896174.215] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
CompletableTakeUntilTest._Benchmark.benchmark_otherCompleteLate  thrpt   30  1838666.393 ± 57507.822  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainCompleteLate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainCompleteLate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 458432.453 ops/s
# Warmup Iteration   2: 1628109.811 ops/s
# Warmup Iteration   3: 1791082.504 ops/s
# Warmup Iteration   4: 1883530.346 ops/s
# Warmup Iteration   5: 1945655.656 ops/s
# Warmup Iteration   6: 1953515.490 ops/s
# Warmup Iteration   7: 1949367.163 ops/s
# Warmup Iteration   8: 1970972.272 ops/s
# Warmup Iteration   9: 1843217.860 ops/s
# Warmup Iteration  10: 1869612.787 ops/s
# Warmup Iteration  11: 1841345.033 ops/s
# Warmup Iteration  12: 1910148.819 ops/s
# Warmup Iteration  13: 1978571.018 ops/s
# Warmup Iteration  14: 1987396.380 ops/s
# Warmup Iteration  15: 1929193.791 ops/s
# Warmup Iteration  16: 2004674.710 ops/s
# Warmup Iteration  17: 1902330.894 ops/s
# Warmup Iteration  18: 1986233.140 ops/s
# Warmup Iteration  19: 1902210.238 ops/s
# Warmup Iteration  20: 1986605.266 ops/s
# Warmup Iteration  21: 1946854.844 ops/s
# Warmup Iteration  22: 1914859.526 ops/s
# Warmup Iteration  23: 1938368.780 ops/s
# Warmup Iteration  24: 1917753.892 ops/s
# Warmup Iteration  25: 1951812.004 ops/s
# Warmup Iteration  26: 1871192.642 ops/s
# Warmup Iteration  27: 1980015.638 ops/s
# Warmup Iteration  28: 1881466.837 ops/s
# Warmup Iteration  29: 1996727.307 ops/s
# Warmup Iteration  30: 1910509.195 ops/s
Iteration   1: 1964177.386 ops/s
Iteration   2: 1967012.509 ops/s
Iteration   3: 1897131.256 ops/s
Iteration   4: 1982201.214 ops/s
Iteration   5: 1908873.856 ops/s
Iteration   6: 1962990.051 ops/s
Iteration   7: 2014328.807 ops/s
Iteration   8: 1926183.978 ops/s
Iteration   9: 1993930.175 ops/s
Iteration  10: 1940354.742 ops/s
Iteration  11: 1954995.569 ops/s
Iteration  12: 2026893.612 ops/s
Iteration  13: 1853929.408 ops/s
Iteration  14: 1985999.627 ops/s
Iteration  15: 1983309.750 ops/s
Iteration  16: 1897149.497 ops/s
Iteration  17: 1952560.052 ops/s
Iteration  18: 1959052.259 ops/s
Iteration  19: 1951556.426 ops/s
Iteration  20: 1996562.815 ops/s
Iteration  21: 1953313.016 ops/s
Iteration  22: 1991594.694 ops/s
Iteration  23: 2053869.978 ops/s
Iteration  24: 1906167.129 ops/s
Iteration  25: 1993721.675 ops/s
Iteration  26: 1921921.794 ops/s
Iteration  27: 1954399.906 ops/s
Iteration  28: 1999932.998 ops/s
Iteration  29: 1936606.532 ops/s
Iteration  30: 2021713.547 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_mainCompleteLate":
  1961747.809 ±(99.9%) 29459.103 ops/s [Average]
  (min, avg, max) = (1853929.408, 1961747.809, 2053869.978), stdev = 44093.002
  CI (99.9%): [1932288.706, 1991206.912] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompletableTakeUntilTest._Benchmark.benchmark_mainCompleteLate  thrpt   30  1961747.809 ± 29459.103  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_disposeBeforeTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_disposeBeforeTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 353393.076 ops/s
# Warmup Iteration   2: 1234670.439 ops/s
# Warmup Iteration   3: 1744240.878 ops/s
# Warmup Iteration   4: 2214317.446 ops/s
# Warmup Iteration   5: 2305022.746 ops/s
# Warmup Iteration   6: 2186943.501 ops/s
# Warmup Iteration   7: 2302948.289 ops/s
# Warmup Iteration   8: 2167515.036 ops/s
# Warmup Iteration   9: 2311843.543 ops/s
# Warmup Iteration  10: 2250927.986 ops/s
# Warmup Iteration  11: 2272127.263 ops/s
# Warmup Iteration  12: 2267120.109 ops/s
# Warmup Iteration  13: 2283117.473 ops/s
# Warmup Iteration  14: 2352647.294 ops/s
# Warmup Iteration  15: 2195074.977 ops/s
# Warmup Iteration  16: 2212141.197 ops/s
# Warmup Iteration  17: 2304954.165 ops/s
# Warmup Iteration  18: 2264966.397 ops/s
# Warmup Iteration  19: 2253502.730 ops/s
# Warmup Iteration  20: 2256491.770 ops/s
# Warmup Iteration  21: 2292070.379 ops/s
# Warmup Iteration  22: 2181637.777 ops/s
# Warmup Iteration  23: 2283674.379 ops/s
# Warmup Iteration  24: 2256571.720 ops/s
# Warmup Iteration  25: 2232750.301 ops/s
# Warmup Iteration  26: 2389267.114 ops/s
# Warmup Iteration  27: 2207351.936 ops/s
# Warmup Iteration  28: 2238626.722 ops/s
# Warmup Iteration  29: 2358362.430 ops/s
# Warmup Iteration  30: 2212807.860 ops/s
Iteration   1: 2347123.616 ops/s
Iteration   2: 2158745.690 ops/s
Iteration   3: 2264880.811 ops/s
Iteration   4: 2313990.363 ops/s
Iteration   5: 2187929.782 ops/s
Iteration   6: 2302528.611 ops/s
Iteration   7: 2399100.293 ops/s
Iteration   8: 2322096.843 ops/s
Iteration   9: 2272001.449 ops/s
Iteration  10: 2355037.013 ops/s
Iteration  11: 2264586.685 ops/s
Iteration  12: 2200566.057 ops/s
Iteration  13: 1725163.513 ops/s
Iteration  14: 2180058.000 ops/s
Iteration  15: 2292769.000 ops/s
Iteration  16: 2155562.514 ops/s
Iteration  17: 2250451.924 ops/s
Iteration  18: 2292864.986 ops/s
Iteration  19: 2206073.692 ops/s
Iteration  20: 2300059.493 ops/s
Iteration  21: 2243618.120 ops/s
Iteration  22: 2312928.181 ops/s
Iteration  23: 2345853.220 ops/s
Iteration  24: 2219921.999 ops/s
Iteration  25: 2350874.367 ops/s
Iteration  26: 2212061.527 ops/s
Iteration  27: 2347680.238 ops/s
Iteration  28: 2280013.379 ops/s
Iteration  29: 2295789.799 ops/s
Iteration  30: 2237302.359 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_disposeBeforeTime":
  2254587.784 ±(99.9%) 78997.016 ops/s [Average]
  (min, avg, max) = (1725163.513, 2254587.784, 2399100.293), stdev = 118239.024
  CI (99.9%): [2175590.768, 2333584.800] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
CompletableDelaySubscriptionTest._Benchmark.benchmark_disposeBeforeTime  thrpt   30  2254587.784 ± 78997.016  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithInitialValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithInitialValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.628 ops/s
# Warmup Iteration   2: 28700.358 ops/s
# Warmup Iteration   3: 87830.016 ops/s
# Warmup Iteration   4: 106891.849 ops/s
# Warmup Iteration   5: 146546.625 ops/s
# Warmup Iteration   6: 263649.393 ops/s
# Warmup Iteration   7: 493694.460 ops/s
# Warmup Iteration   8: 485197.621 ops/s
# Warmup Iteration   9: 445106.018 ops/s
# Warmup Iteration  10: 461008.507 ops/s
# Warmup Iteration  11: 483223.745 ops/s
# Warmup Iteration  12: 500850.518 ops/s
# Warmup Iteration  13: 487726.863 ops/s
# Warmup Iteration  14: 505095.915 ops/s
# Warmup Iteration  15: 478239.615 ops/s
# Warmup Iteration  16: 503064.854 ops/s
# Warmup Iteration  17: 486276.756 ops/s
# Warmup Iteration  18: 498856.189 ops/s
# Warmup Iteration  19: 508098.783 ops/s
# Warmup Iteration  20: 490499.333 ops/s
# Warmup Iteration  21: 501143.803 ops/s
# Warmup Iteration  22: 475151.956 ops/s
# Warmup Iteration  23: 513808.163 ops/s
# Warmup Iteration  24: 498907.353 ops/s
# Warmup Iteration  25: 488211.000 ops/s
# Warmup Iteration  26: 491694.809 ops/s
# Warmup Iteration  27: 487665.904 ops/s
# Warmup Iteration  28: 490172.740 ops/s
# Warmup Iteration  29: 505507.134 ops/s
# Warmup Iteration  30: 501285.656 ops/s
Iteration   1: 511633.717 ops/s
Iteration   2: 517395.487 ops/s
Iteration   3: 481736.562 ops/s
Iteration   4: 514603.481 ops/s
Iteration   5: 485817.780 ops/s
Iteration   6: 501932.908 ops/s
Iteration   7: 486187.918 ops/s
Iteration   8: 494666.995 ops/s
Iteration   9: 510911.681 ops/s
Iteration  10: 487667.695 ops/s
Iteration  11: 513168.672 ops/s
Iteration  12: 502744.658 ops/s
Iteration  13: 485500.205 ops/s
Iteration  14: 500191.450 ops/s
Iteration  15: 502111.466 ops/s
Iteration  16: 496397.649 ops/s
Iteration  17: 508251.853 ops/s
Iteration  18: 477571.285 ops/s
Iteration  19: 499696.010 ops/s
Iteration  20: 483274.398 ops/s
Iteration  21: 517896.258 ops/s
Iteration  22: 498887.508 ops/s
Iteration  23: 484138.136 ops/s
Iteration  24: 515721.095 ops/s
Iteration  25: 485962.123 ops/s
Iteration  26: 483148.406 ops/s
Iteration  27: 508839.981 ops/s
Iteration  28: 490754.855 ops/s
Iteration  29: 495608.169 ops/s
Iteration  30: 505222.545 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithInitialValue":
  498254.698 ±(99.9%) 8191.835 ops/s [Average]
  (min, avg, max) = (477571.285, 498254.698, 517896.258), stdev = 12261.155
  CI (99.9%): [490062.863, 506446.534] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableReduceTest._Benchmark.benchmark_backpressureWithInitialValue  thrpt   30  498254.698 ± 8191.835  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithInitialValueObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithInitialValueObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.766 ops/s
# Warmup Iteration   2: 33925.375 ops/s
# Warmup Iteration   3: 104710.174 ops/s
# Warmup Iteration   4: 233111.042 ops/s
# Warmup Iteration   5: 425751.912 ops/s
# Warmup Iteration   6: 481967.676 ops/s
# Warmup Iteration   7: 498784.731 ops/s
# Warmup Iteration   8: 476491.693 ops/s
# Warmup Iteration   9: 491783.115 ops/s
# Warmup Iteration  10: 472708.228 ops/s
# Warmup Iteration  11: 483530.117 ops/s
# Warmup Iteration  12: 495216.096 ops/s
# Warmup Iteration  13: 466306.073 ops/s
# Warmup Iteration  14: 503477.680 ops/s
# Warmup Iteration  15: 467899.621 ops/s
# Warmup Iteration  16: 480869.369 ops/s
# Warmup Iteration  17: 490491.067 ops/s
# Warmup Iteration  18: 469649.600 ops/s
# Warmup Iteration  19: 507548.156 ops/s
# Warmup Iteration  20: 479439.108 ops/s
# Warmup Iteration  21: 490632.139 ops/s
# Warmup Iteration  22: 476088.310 ops/s
# Warmup Iteration  23: 490986.588 ops/s
# Warmup Iteration  24: 473956.522 ops/s
# Warmup Iteration  25: 498906.859 ops/s
# Warmup Iteration  26: 468614.339 ops/s
# Warmup Iteration  27: 494982.869 ops/s
# Warmup Iteration  28: 459231.115 ops/s
# Warmup Iteration  29: 485699.360 ops/s
# Warmup Iteration  30: 475388.481 ops/s
Iteration   1: 492821.898 ops/s
Iteration   2: 487873.599 ops/s
Iteration   3: 483019.144 ops/s
Iteration   4: 495763.040 ops/s
Iteration   5: 479972.831 ops/s
Iteration   6: 482489.547 ops/s
Iteration   7: 389179.709 ops/s
Iteration   8: 488526.461 ops/s
Iteration   9: 475588.655 ops/s
Iteration  10: 487383.750 ops/s
Iteration  11: 484037.504 ops/s
Iteration  12: 478504.808 ops/s
Iteration  13: 471192.177 ops/s
Iteration  14: 482497.014 ops/s
Iteration  15: 470725.446 ops/s
Iteration  16: 494186.985 ops/s
Iteration  17: 469386.825 ops/s
Iteration  18: 512200.548 ops/s
Iteration  19: 464805.766 ops/s
Iteration  20: 492620.314 ops/s
Iteration  21: 468918.996 ops/s
Iteration  22: 491642.840 ops/s
Iteration  23: 487484.745 ops/s
Iteration  24: 476903.499 ops/s
Iteration  25: 480585.712 ops/s
Iteration  26: 498619.751 ops/s
Iteration  27: 471772.983 ops/s
Iteration  28: 483916.933 ops/s
Iteration  29: 470401.536 ops/s
Iteration  30: 473585.870 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithInitialValueObservable":
  479553.630 ±(99.9%) 13417.315 ops/s [Average]
  (min, avg, max) = (389179.709, 479553.630, 512200.548), stdev = 20082.408
  CI (99.9%): [466136.314, 492970.945] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score       Error  Units
ObservableReduceTest._Benchmark.benchmark_backpressureWithInitialValueObservable  thrpt   30  479553.630 ± 13417.315  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_followingFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_followingFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1426913.056 ops/s
# Warmup Iteration   2: 7123637.545 ops/s
# Warmup Iteration   3: 7032116.168 ops/s
# Warmup Iteration   4: 9440826.752 ops/s
# Warmup Iteration   5: 8814527.524 ops/s
# Warmup Iteration   6: 9099038.100 ops/s
# Warmup Iteration   7: 9009478.495 ops/s
# Warmup Iteration   8: 8868794.397 ops/s
# Warmup Iteration   9: 9052545.983 ops/s
# Warmup Iteration  10: 8828173.509 ops/s
# Warmup Iteration  11: 9015463.834 ops/s
# Warmup Iteration  12: 9293097.873 ops/s
# Warmup Iteration  13: 8645471.685 ops/s
# Warmup Iteration  14: 9313279.556 ops/s
# Warmup Iteration  15: 8733253.894 ops/s
# Warmup Iteration  16: 8900999.130 ops/s
# Warmup Iteration  17: 9146358.046 ops/s
# Warmup Iteration  18: 9121265.117 ops/s
# Warmup Iteration  19: 9135020.881 ops/s
# Warmup Iteration  20: 9061136.794 ops/s
# Warmup Iteration  21: 9364391.271 ops/s
# Warmup Iteration  22: 9074418.357 ops/s
# Warmup Iteration  23: 8972383.465 ops/s
# Warmup Iteration  24: 9203378.533 ops/s
# Warmup Iteration  25: 9042362.322 ops/s
# Warmup Iteration  26: 9075750.944 ops/s
# Warmup Iteration  27: 9043151.677 ops/s
# Warmup Iteration  28: 9168109.925 ops/s
# Warmup Iteration  29: 9033940.231 ops/s
# Warmup Iteration  30: 9329210.585 ops/s
Iteration   1: 8992970.196 ops/s
Iteration   2: 9437372.935 ops/s
Iteration   3: 8715304.827 ops/s
Iteration   4: 9131900.342 ops/s
Iteration   5: 9232723.618 ops/s
Iteration   6: 8724314.566 ops/s
Iteration   7: 9306080.662 ops/s
Iteration   8: 8877119.086 ops/s
Iteration   9: 9109504.940 ops/s
Iteration  10: 8887859.749 ops/s
Iteration  11: 9047774.166 ops/s
Iteration  12: 9288046.892 ops/s
Iteration  13: 8788677.956 ops/s
Iteration  14: 8793744.344 ops/s
Iteration  15: 9508222.253 ops/s
Iteration  16: 9243959.485 ops/s
Iteration  17: 8948974.158 ops/s
Iteration  18: 9264144.690 ops/s
Iteration  19: 9076157.878 ops/s
Iteration  20: 9080943.052 ops/s
Iteration  21: 8927822.184 ops/s
Iteration  22: 9064110.035 ops/s
Iteration  23: 8986590.342 ops/s
Iteration  24: 8999546.384 ops/s
Iteration  25: 9211768.696 ops/s
Iteration  26: 9002867.918 ops/s
Iteration  27: 9493601.354 ops/s
Iteration  28: 9190617.131 ops/s
Iteration  29: 9002213.426 ops/s
Iteration  30: 9026110.359 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_followingFirst":
  9078701.454 ±(99.9%) 140226.568 ops/s [Average]
  (min, avg, max) = (8715304.827, 9078701.454, 9508222.253), stdev = 209884.542
  CI (99.9%): [8938474.886, 9218928.022] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
ObservableAllTest._Benchmark.benchmark_followingFirst  thrpt   30  9078701.454 ± 140226.568  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToString$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToString

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 732785.448 ops/s
# Warmup Iteration   2: 4326181.366 ops/s
# Warmup Iteration   3: 5252573.382 ops/s
# Warmup Iteration   4: 6025605.681 ops/s
# Warmup Iteration   5: 5914896.185 ops/s
# Warmup Iteration   6: 5990347.806 ops/s
# Warmup Iteration   7: 6078140.479 ops/s
# Warmup Iteration   8: 5974384.030 ops/s
# Warmup Iteration   9: 6066546.698 ops/s
# Warmup Iteration  10: 5964028.864 ops/s
# Warmup Iteration  11: 5906634.256 ops/s
# Warmup Iteration  12: 5945188.192 ops/s
# Warmup Iteration  13: 6015896.341 ops/s
# Warmup Iteration  14: 6261038.823 ops/s
# Warmup Iteration  15: 6082429.830 ops/s
# Warmup Iteration  16: 5917117.817 ops/s
# Warmup Iteration  17: 5960517.662 ops/s
# Warmup Iteration  18: 5815754.655 ops/s
# Warmup Iteration  19: 5886179.891 ops/s
# Warmup Iteration  20: 6210468.608 ops/s
# Warmup Iteration  21: 5841312.247 ops/s
# Warmup Iteration  22: 6101976.427 ops/s
# Warmup Iteration  23: 5854135.885 ops/s
# Warmup Iteration  24: 5901821.842 ops/s
# Warmup Iteration  25: 6060530.594 ops/s
# Warmup Iteration  26: 5958402.631 ops/s
# Warmup Iteration  27: 5861193.948 ops/s
# Warmup Iteration  28: 6134982.829 ops/s
# Warmup Iteration  29: 5812100.541 ops/s
# Warmup Iteration  30: 6206234.578 ops/s
Iteration   1: 4992744.455 ops/s
Iteration   2: 5533201.890 ops/s
Iteration   3: 6137574.648 ops/s
Iteration   4: 5824891.575 ops/s
Iteration   5: 5872565.055 ops/s
Iteration   6: 6033525.265 ops/s
Iteration   7: 5838776.131 ops/s
Iteration   8: 5916167.891 ops/s
Iteration   9: 5791119.327 ops/s
Iteration  10: 6077423.143 ops/s
Iteration  11: 6004237.308 ops/s
Iteration  12: 5725175.557 ops/s
Iteration  13: 6272114.539 ops/s
Iteration  14: 5884194.423 ops/s
Iteration  15: 5905186.230 ops/s
Iteration  16: 5854819.057 ops/s
Iteration  17: 6090776.800 ops/s
Iteration  18: 5894858.532 ops/s
Iteration  19: 5901239.779 ops/s
Iteration  20: 5808525.135 ops/s
Iteration  21: 6064007.311 ops/s
Iteration  22: 5687498.308 ops/s
Iteration  23: 6011649.685 ops/s
Iteration  24: 6058360.335 ops/s
Iteration  25: 5922596.384 ops/s
Iteration  26: 5804447.317 ops/s
Iteration  27: 6130066.536 ops/s
Iteration  28: 5821863.961 ops/s
Iteration  29: 5996315.223 ops/s
Iteration  30: 5938145.852 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToString":
  5893135.588 ±(99.9%) 151961.866 ops/s [Average]
  (min, avg, max) = (4992744.455, 5893135.588, 6272114.539), stdev = 227449.384
  CI (99.9%): [5741173.723, 6045097.454] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
ObservableCollectTest._Benchmark.benchmark_collectToString  thrpt   30  5893135.588 ± 151961.866  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_withFollowingFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_withFollowingFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3042838.769 ops/s
# Warmup Iteration   2: 6846307.181 ops/s
# Warmup Iteration   3: 8739729.711 ops/s
# Warmup Iteration   4: 9072606.314 ops/s
# Warmup Iteration   5: 9138878.341 ops/s
# Warmup Iteration   6: 8872795.246 ops/s
# Warmup Iteration   7: 8898013.990 ops/s
# Warmup Iteration   8: 9125384.558 ops/s
# Warmup Iteration   9: 8796773.927 ops/s
# Warmup Iteration  10: 9028053.050 ops/s
# Warmup Iteration  11: 8824049.858 ops/s
# Warmup Iteration  12: 9267106.848 ops/s
# Warmup Iteration  13: 9204828.358 ops/s
# Warmup Iteration  14: 8601524.152 ops/s
# Warmup Iteration  15: 9076714.957 ops/s
# Warmup Iteration  16: 8724584.348 ops/s
# Warmup Iteration  17: 9211952.463 ops/s
# Warmup Iteration  18: 9069162.933 ops/s
# Warmup Iteration  19: 9241198.537 ops/s
# Warmup Iteration  20: 8848940.293 ops/s
# Warmup Iteration  21: 8941902.253 ops/s
# Warmup Iteration  22: 9000765.382 ops/s
# Warmup Iteration  23: 9013350.536 ops/s
# Warmup Iteration  24: 8775959.652 ops/s
# Warmup Iteration  25: 9439222.150 ops/s
# Warmup Iteration  26: 8789367.750 ops/s
# Warmup Iteration  27: 8841446.463 ops/s
# Warmup Iteration  28: 8703819.903 ops/s
# Warmup Iteration  29: 9092503.276 ops/s
# Warmup Iteration  30: 8984862.120 ops/s
Iteration   1: 8971042.410 ops/s
Iteration   2: 9165276.509 ops/s
Iteration   3: 9040282.536 ops/s
Iteration   4: 9089854.349 ops/s
Iteration   5: 9322147.370 ops/s
Iteration   6: 9384455.783 ops/s
Iteration   7: 8945572.725 ops/s
Iteration   8: 9094587.667 ops/s
Iteration   9: 8718767.409 ops/s
Iteration  10: 9362772.485 ops/s
Iteration  11: 9283752.162 ops/s
Iteration  12: 8738968.033 ops/s
Iteration  13: 9101635.433 ops/s
Iteration  14: 9089094.935 ops/s
Iteration  15: 8823728.123 ops/s
Iteration  16: 9105693.451 ops/s
Iteration  17: 9185537.812 ops/s
Iteration  18: 9026653.733 ops/s
Iteration  19: 9233126.606 ops/s
Iteration  20: 8594965.246 ops/s
Iteration  21: 9266712.432 ops/s
Iteration  22: 8851332.752 ops/s
Iteration  23: 9183976.952 ops/s
Iteration  24: 8873112.307 ops/s
Iteration  25: 9372230.375 ops/s
Iteration  26: 8802625.151 ops/s
Iteration  27: 8907998.312 ops/s
Iteration  28: 9528873.863 ops/s
Iteration  29: 9300479.889 ops/s
Iteration  30: 8778623.131 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_withFollowingFirst":
  9071462.665 ±(99.9%) 155438.654 ops/s [Average]
  (min, avg, max) = (8594965.246, 9071462.665, 9528873.863), stdev = 232653.277
  CI (99.9%): [8916024.011, 9226901.318] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
ObservableAnyTest._Benchmark.benchmark_withFollowingFirst  thrpt   30  9071462.665 ± 155438.654  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBounds$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBounds

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4338526.144 ops/s
# Warmup Iteration   2: 8072594.338 ops/s
# Warmup Iteration   3: 11596726.487 ops/s
# Warmup Iteration   4: 11266971.129 ops/s
# Warmup Iteration   5: 11642696.504 ops/s
# Warmup Iteration   6: 11520508.976 ops/s
# Warmup Iteration   7: 11189693.752 ops/s
# Warmup Iteration   8: 11923702.923 ops/s
# Warmup Iteration   9: 11619421.166 ops/s
# Warmup Iteration  10: 11093335.557 ops/s
# Warmup Iteration  11: 11619443.819 ops/s
# Warmup Iteration  12: 12067048.417 ops/s
# Warmup Iteration  13: 11219570.960 ops/s
# Warmup Iteration  14: 11658655.290 ops/s
# Warmup Iteration  15: 11352835.190 ops/s
# Warmup Iteration  16: 11560607.697 ops/s
# Warmup Iteration  17: 12113437.491 ops/s
# Warmup Iteration  18: 11388132.553 ops/s
# Warmup Iteration  19: 11902623.042 ops/s
# Warmup Iteration  20: 11388895.205 ops/s
# Warmup Iteration  21: 11830402.831 ops/s
# Warmup Iteration  22: 11349894.981 ops/s
# Warmup Iteration  23: 11779534.395 ops/s
# Warmup Iteration  24: 12050321.901 ops/s
# Warmup Iteration  25: 11000048.842 ops/s
# Warmup Iteration  26: 9186277.514 ops/s
# Warmup Iteration  27: 11485943.808 ops/s
# Warmup Iteration  28: 11735839.158 ops/s
# Warmup Iteration  29: 11751964.112 ops/s
# Warmup Iteration  30: 11264522.956 ops/s
Iteration   1: 11800019.530 ops/s
Iteration   2: 11652656.569 ops/s
Iteration   3: 11445946.232 ops/s
Iteration   4: 11322019.034 ops/s
Iteration   5: 11866515.872 ops/s
Iteration   6: 11455409.778 ops/s
Iteration   7: 11512178.958 ops/s
Iteration   8: 12167573.769 ops/s
Iteration   9: 11350478.388 ops/s
Iteration  10: 11236929.087 ops/s
Iteration  11: 12039218.345 ops/s
Iteration  12: 11060101.815 ops/s
Iteration  13: 11615664.647 ops/s
Iteration  14: 11589340.955 ops/s
Iteration  15: 11470081.901 ops/s
Iteration  16: 11438242.683 ops/s
Iteration  17: 11927861.772 ops/s
Iteration  18: 11378192.520 ops/s
Iteration  19: 11957749.088 ops/s
Iteration  20: 11180836.209 ops/s
Iteration  21: 11898355.364 ops/s
Iteration  22: 11705179.309 ops/s
Iteration  23: 11371210.537 ops/s
Iteration  24: 11665540.700 ops/s
Iteration  25: 12081766.926 ops/s
Iteration  26: 11830224.807 ops/s
Iteration  27: 11545748.645 ops/s
Iteration  28: 11989286.896 ops/s
Iteration  29: 11455643.439 ops/s
Iteration  30: 11850124.688 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBounds":
  11628669.949 ±(99.9%) 192317.033 ops/s [Average]
  (min, avg, max) = (11060101.815, 11628669.949, 12167573.769), stdev = 287851.103
  CI (99.9%): [11436352.916, 11820986.982] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt         Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBounds  thrpt   30  11628669.949 ± 192317.033  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToList$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToList

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 608002.254 ops/s
# Warmup Iteration   2: 3270990.986 ops/s
# Warmup Iteration   3: 3741794.986 ops/s
# Warmup Iteration   4: 4238513.800 ops/s
# Warmup Iteration   5: 4519023.492 ops/s
# Warmup Iteration   6: 4305916.171 ops/s
# Warmup Iteration   7: 4415021.254 ops/s
# Warmup Iteration   8: 4448463.829 ops/s
# Warmup Iteration   9: 4134349.496 ops/s
# Warmup Iteration  10: 4440518.868 ops/s
# Warmup Iteration  11: 4259288.306 ops/s
# Warmup Iteration  12: 4416535.878 ops/s
# Warmup Iteration  13: 4386077.935 ops/s
# Warmup Iteration  14: 4249267.689 ops/s
# Warmup Iteration  15: 4513460.679 ops/s
# Warmup Iteration  16: 4465813.089 ops/s
# Warmup Iteration  17: 4239192.658 ops/s
# Warmup Iteration  18: 4471016.143 ops/s
# Warmup Iteration  19: 4288773.557 ops/s
# Warmup Iteration  20: 4510782.040 ops/s
# Warmup Iteration  21: 4487796.954 ops/s
# Warmup Iteration  22: 4173926.488 ops/s
# Warmup Iteration  23: 4438949.968 ops/s
# Warmup Iteration  24: 4330311.594 ops/s
# Warmup Iteration  25: 4442622.213 ops/s
# Warmup Iteration  26: 4260698.308 ops/s
# Warmup Iteration  27: 4336717.058 ops/s
# Warmup Iteration  28: 4479456.424 ops/s
# Warmup Iteration  29: 4238480.070 ops/s
# Warmup Iteration  30: 4393506.645 ops/s
Iteration   1: 4135470.227 ops/s
Iteration   2: 4411810.261 ops/s
Iteration   3: 4269132.304 ops/s
Iteration   4: 4293451.259 ops/s
Iteration   5: 4346253.994 ops/s
Iteration   6: 4302754.424 ops/s
Iteration   7: 4431043.837 ops/s
Iteration   8: 4244868.672 ops/s
Iteration   9: 4265394.707 ops/s
Iteration  10: 4346184.555 ops/s
Iteration  11: 4162255.902 ops/s
Iteration  12: 4473741.340 ops/s
Iteration  13: 4143336.963 ops/s
Iteration  14: 4460590.321 ops/s
Iteration  15: 4240640.647 ops/s
Iteration  16: 4295598.022 ops/s
Iteration  17: 4332273.407 ops/s
Iteration  18: 4271823.135 ops/s
Iteration  19: 4229239.501 ops/s
Iteration  20: 4393701.773 ops/s
Iteration  21: 4210233.647 ops/s
Iteration  22: 4387584.573 ops/s
Iteration  23: 4472620.721 ops/s
Iteration  24: 4203724.020 ops/s
Iteration  25: 4399975.189 ops/s
Iteration  26: 4250054.949 ops/s
Iteration  27: 4385942.313 ops/s
Iteration  28: 4515889.535 ops/s
Iteration  29: 4304422.502 ops/s
Iteration  30: 4145598.137 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectToList":
  4310853.695 ±(99.9%) 70893.357 ops/s [Average]
  (min, avg, max) = (4135470.227, 4310853.695, 4515889.535), stdev = 106109.848
  CI (99.9%): [4239960.337, 4381747.052] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableCollectTest._Benchmark.benchmark_collectToList  thrpt   30  4310853.695 ± 70893.357  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefault$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefault

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2185243.935 ops/s
# Warmup Iteration   2: 7224512.314 ops/s
# Warmup Iteration   3: 10598167.080 ops/s
# Warmup Iteration   4: 10708825.410 ops/s
# Warmup Iteration   5: 11006300.084 ops/s
# Warmup Iteration   6: 10692582.284 ops/s
# Warmup Iteration   7: 10213341.610 ops/s
# Warmup Iteration   8: 11087219.960 ops/s
# Warmup Iteration   9: 10715476.525 ops/s
# Warmup Iteration  10: 10443768.712 ops/s
# Warmup Iteration  11: 11033238.766 ops/s
# Warmup Iteration  12: 10327732.300 ops/s
# Warmup Iteration  13: 10648295.442 ops/s
# Warmup Iteration  14: 10676063.713 ops/s
# Warmup Iteration  15: 10931404.021 ops/s
# Warmup Iteration  16: 11060192.476 ops/s
# Warmup Iteration  17: 10593904.291 ops/s
# Warmup Iteration  18: 10660768.492 ops/s
# Warmup Iteration  19: 10815684.632 ops/s
# Warmup Iteration  20: 8934792.684 ops/s
# Warmup Iteration  21: 10617599.610 ops/s
# Warmup Iteration  22: 10223775.825 ops/s
# Warmup Iteration  23: 10628780.888 ops/s
# Warmup Iteration  24: 10744629.851 ops/s
# Warmup Iteration  25: 10286810.821 ops/s
# Warmup Iteration  26: 10611033.190 ops/s
# Warmup Iteration  27: 10542795.338 ops/s
# Warmup Iteration  28: 10784554.488 ops/s
# Warmup Iteration  29: 10859995.654 ops/s
# Warmup Iteration  30: 10460977.698 ops/s
Iteration   1: 10680513.357 ops/s
Iteration   2: 10859302.611 ops/s
Iteration   3: 10319475.753 ops/s
Iteration   4: 10696533.822 ops/s
Iteration   5: 10473732.403 ops/s
Iteration   6: 10796972.394 ops/s
Iteration   7: 10921667.410 ops/s
Iteration   8: 10344513.962 ops/s
Iteration   9: 10399817.885 ops/s
Iteration  10: 10945793.150 ops/s
Iteration  11: 10462700.356 ops/s
Iteration  12: 10516094.799 ops/s
Iteration  13: 10390645.243 ops/s
Iteration  14: 10715382.925 ops/s
Iteration  15: 10928312.541 ops/s
Iteration  16: 10529593.266 ops/s
Iteration  17: 10314326.253 ops/s
Iteration  18: 10677839.047 ops/s
Iteration  19: 10503375.249 ops/s
Iteration  20: 10999736.965 ops/s
Iteration  21: 10535647.305 ops/s
Iteration  22: 10494812.367 ops/s
Iteration  23: 11189318.655 ops/s
Iteration  24: 11006070.295 ops/s
Iteration  25: 10508030.932 ops/s
Iteration  26: 10962972.018 ops/s
Iteration  27: 10786474.804 ops/s
Iteration  28: 10390000.723 ops/s
Iteration  29: 10638988.364 ops/s
Iteration  30: 10713756.848 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefault":
  10656746.723 ±(99.9%) 159932.235 ops/s [Average]
  (min, avg, max) = (10314326.253, 10656746.723, 11189318.655), stdev = 239379.058
  CI (99.9%): [10496814.489, 10816678.958] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtOrDefault  thrpt   30  10656746.723 ± 159932.235  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithNoInitialValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithNoInitialValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.747 ops/s
# Warmup Iteration   2: 41030.546 ops/s
# Warmup Iteration   3: 147570.234 ops/s
# Warmup Iteration   4: 197535.836 ops/s
# Warmup Iteration   5: 441198.788 ops/s
# Warmup Iteration   6: 495754.403 ops/s
# Warmup Iteration   7: 500761.385 ops/s
# Warmup Iteration   8: 503306.668 ops/s
# Warmup Iteration   9: 498037.180 ops/s
# Warmup Iteration  10: 507451.962 ops/s
# Warmup Iteration  11: 520834.218 ops/s
# Warmup Iteration  12: 490029.239 ops/s
# Warmup Iteration  13: 519652.066 ops/s
# Warmup Iteration  14: 493875.308 ops/s
# Warmup Iteration  15: 518060.401 ops/s
# Warmup Iteration  16: 492709.013 ops/s
# Warmup Iteration  17: 507782.051 ops/s
# Warmup Iteration  18: 510795.400 ops/s
# Warmup Iteration  19: 486616.687 ops/s
# Warmup Iteration  20: 521293.318 ops/s
# Warmup Iteration  21: 492399.572 ops/s
# Warmup Iteration  22: 521719.738 ops/s
# Warmup Iteration  23: 511736.822 ops/s
# Warmup Iteration  24: 474912.396 ops/s
# Warmup Iteration  25: 514585.164 ops/s
# Warmup Iteration  26: 499681.298 ops/s
# Warmup Iteration  27: 507837.589 ops/s
# Warmup Iteration  28: 511999.024 ops/s
# Warmup Iteration  29: 492359.693 ops/s
# Warmup Iteration  30: 505915.504 ops/s
Iteration   1: 509334.170 ops/s
Iteration   2: 501565.884 ops/s
Iteration   3: 518471.039 ops/s
Iteration   4: 491790.852 ops/s
Iteration   5: 495447.896 ops/s
Iteration   6: 521303.462 ops/s
Iteration   7: 506848.211 ops/s
Iteration   8: 489597.940 ops/s
Iteration   9: 520756.392 ops/s
Iteration  10: 491260.182 ops/s
Iteration  11: 504442.118 ops/s
Iteration  12: 515821.214 ops/s
Iteration  13: 501395.513 ops/s
Iteration  14: 523095.015 ops/s
Iteration  15: 492523.425 ops/s
Iteration  16: 501468.670 ops/s
Iteration  17: 497159.705 ops/s
Iteration  18: 508476.122 ops/s
Iteration  19: 495785.441 ops/s
Iteration  20: 522684.306 ops/s
Iteration  21: 487497.789 ops/s
Iteration  22: 498140.503 ops/s
Iteration  23: 524014.438 ops/s
Iteration  24: 485805.511 ops/s
Iteration  25: 511053.190 ops/s
Iteration  26: 485551.977 ops/s
Iteration  27: 525239.335 ops/s
Iteration  28: 492700.043 ops/s
Iteration  29: 500297.476 ops/s
Iteration  30: 505710.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_backpressureWithNoInitialValue":
  504174.604 ±(99.9%) 8395.984 ops/s [Average]
  (min, avg, max) = (485551.977, 504174.604, 525239.335), stdev = 12566.714
  CI (99.9%): [495778.620, 512570.587] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableReduceTest._Benchmark.benchmark_backpressureWithNoInitialValue  thrpt   30  504174.604 ± 8395.984  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastWithElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastWithElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2856729.223 ops/s
# Warmup Iteration   2: 8725281.239 ops/s
# Warmup Iteration   3: 12561362.542 ops/s
# Warmup Iteration   4: 12023946.474 ops/s
# Warmup Iteration   5: 12275495.327 ops/s
# Warmup Iteration   6: 12366623.915 ops/s
# Warmup Iteration   7: 12291688.893 ops/s
# Warmup Iteration   8: 12271791.404 ops/s
# Warmup Iteration   9: 12043350.084 ops/s
# Warmup Iteration  10: 12520665.513 ops/s
# Warmup Iteration  11: 12484906.269 ops/s
# Warmup Iteration  12: 11901106.857 ops/s
# Warmup Iteration  13: 12782149.671 ops/s
# Warmup Iteration  14: 11836053.889 ops/s
# Warmup Iteration  15: 10472202.968 ops/s
# Warmup Iteration  16: 12602805.801 ops/s
# Warmup Iteration  17: 11924991.082 ops/s
# Warmup Iteration  18: 12420561.999 ops/s
# Warmup Iteration  19: 11607467.029 ops/s
# Warmup Iteration  20: 12557309.373 ops/s
# Warmup Iteration  21: 11479557.455 ops/s
# Warmup Iteration  22: 11690478.428 ops/s
# Warmup Iteration  23: 12756670.227 ops/s
# Warmup Iteration  24: 12528130.272 ops/s
# Warmup Iteration  25: 11918097.660 ops/s
# Warmup Iteration  26: 12382515.686 ops/s
# Warmup Iteration  27: 12759269.789 ops/s
# Warmup Iteration  28: 12017063.707 ops/s
# Warmup Iteration  29: 12426891.944 ops/s
# Warmup Iteration  30: 11916923.778 ops/s
Iteration   1: 12246438.270 ops/s
Iteration   2: 12356394.841 ops/s
Iteration   3: 11945744.297 ops/s
Iteration   4: 12552426.435 ops/s
Iteration   5: 11866220.718 ops/s
Iteration   6: 12408063.706 ops/s
Iteration   7: 11859548.789 ops/s
Iteration   8: 12277811.503 ops/s
Iteration   9: 12320090.155 ops/s
Iteration  10: 11734078.929 ops/s
Iteration  11: 12431880.019 ops/s
Iteration  12: 12297240.111 ops/s
Iteration  13: 12520842.859 ops/s
Iteration  14: 11709079.889 ops/s
Iteration  15: 12104406.414 ops/s
Iteration  16: 12066075.628 ops/s
Iteration  17: 12185623.250 ops/s
Iteration  18: 12540379.285 ops/s
Iteration  19: 11830455.318 ops/s
Iteration  20: 12275388.558 ops/s
Iteration  21: 12823227.663 ops/s
Iteration  22: 11762790.567 ops/s
Iteration  23: 12743626.361 ops/s
Iteration  24: 11907673.636 ops/s
Iteration  25: 11981838.370 ops/s
Iteration  26: 12705956.508 ops/s
Iteration  27: 11888512.776 ops/s
Iteration  28: 12292863.242 ops/s
Iteration  29: 12133068.430 ops/s
Iteration  30: 12339614.161 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastWithElements":
  12203578.690 ±(99.9%) 207955.097 ops/s [Average]
  (min, avg, max) = (11709079.889, 12203578.690, 12823227.663), stdev = 311257.422
  CI (99.9%): [11995623.593, 12411533.786] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
ObservableLastTest._Benchmark.benchmark_lastWithElements  thrpt   30  12203578.690 ± 207955.097  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastMultiSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastMultiSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1733386.651 ops/s
# Warmup Iteration   2: 4794841.265 ops/s
# Warmup Iteration   3: 6875070.906 ops/s
# Warmup Iteration   4: 7019611.046 ops/s
# Warmup Iteration   5: 7382176.267 ops/s
# Warmup Iteration   6: 7168081.489 ops/s
# Warmup Iteration   7: 6867655.296 ops/s
# Warmup Iteration   8: 7513015.961 ops/s
# Warmup Iteration   9: 6970624.422 ops/s
# Warmup Iteration  10: 6912199.453 ops/s
# Warmup Iteration  11: 7281259.492 ops/s
# Warmup Iteration  12: 6988008.374 ops/s
# Warmup Iteration  13: 7143669.630 ops/s
# Warmup Iteration  14: 7211656.066 ops/s
# Warmup Iteration  15: 6798038.120 ops/s
# Warmup Iteration  16: 7254329.435 ops/s
# Warmup Iteration  17: 7045931.760 ops/s
# Warmup Iteration  18: 6892188.960 ops/s
# Warmup Iteration  19: 7128660.030 ops/s
# Warmup Iteration  20: 6917465.910 ops/s
# Warmup Iteration  21: 7245974.762 ops/s
# Warmup Iteration  22: 6806856.332 ops/s
# Warmup Iteration  23: 7029497.566 ops/s
# Warmup Iteration  24: 7087159.119 ops/s
# Warmup Iteration  25: 6766732.965 ops/s
# Warmup Iteration  26: 7258959.176 ops/s
# Warmup Iteration  27: 7110395.315 ops/s
# Warmup Iteration  28: 7077518.970 ops/s
# Warmup Iteration  29: 7336464.987 ops/s
# Warmup Iteration  30: 6799128.591 ops/s
Iteration   1: 7130489.847 ops/s
Iteration   2: 6976262.743 ops/s
Iteration   3: 7027987.839 ops/s
Iteration   4: 7266028.241 ops/s
Iteration   5: 6909037.899 ops/s
Iteration   6: 7261620.972 ops/s
Iteration   7: 7107865.924 ops/s
Iteration   8: 7060459.828 ops/s
Iteration   9: 7312913.397 ops/s
Iteration  10: 6990424.268 ops/s
Iteration  11: 7265004.360 ops/s
Iteration  12: 7187535.100 ops/s
Iteration  13: 6940994.891 ops/s
Iteration  14: 7087518.255 ops/s
Iteration  15: 7378258.120 ops/s
Iteration  16: 6838261.475 ops/s
Iteration  17: 7121463.200 ops/s
Iteration  18: 7357589.636 ops/s
Iteration  19: 6784910.376 ops/s
Iteration  20: 7350194.799 ops/s
Iteration  21: 6927386.204 ops/s
Iteration  22: 7216557.393 ops/s
Iteration  23: 6972022.435 ops/s
Iteration  24: 7035643.002 ops/s
Iteration  25: 7294299.881 ops/s
Iteration  26: 6919840.846 ops/s
Iteration  27: 7414142.356 ops/s
Iteration  28: 6944205.452 ops/s
Iteration  29: 7246157.980 ops/s
Iteration  30: 7068233.780 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastMultiSubscribe":
  7113110.350 ±(99.9%) 116369.214 ops/s [Average]
  (min, avg, max) = (6784910.376, 7113110.350, 7414142.356), stdev = 174175.975
  CI (99.9%): [6996741.136, 7229479.564] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
ObservableLastTest._Benchmark.benchmark_lastMultiSubscribe  thrpt   30  7113110.350 ± 116369.214  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_issue1527$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_issue1527

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2562924.899 ops/s
# Warmup Iteration   2: 6264184.761 ops/s
# Warmup Iteration   3: 8810273.648 ops/s
# Warmup Iteration   4: 8773535.734 ops/s
# Warmup Iteration   5: 9136515.578 ops/s
# Warmup Iteration   6: 8872047.828 ops/s
# Warmup Iteration   7: 9024256.810 ops/s
# Warmup Iteration   8: 9179943.587 ops/s
# Warmup Iteration   9: 7213454.583 ops/s
# Warmup Iteration  10: 9137645.182 ops/s
# Warmup Iteration  11: 8704084.319 ops/s
# Warmup Iteration  12: 9226817.393 ops/s
# Warmup Iteration  13: 8757716.311 ops/s
# Warmup Iteration  14: 8951197.952 ops/s
# Warmup Iteration  15: 9217159.336 ops/s
# Warmup Iteration  16: 8801387.312 ops/s
# Warmup Iteration  17: 8893203.577 ops/s
# Warmup Iteration  18: 8659994.518 ops/s
# Warmup Iteration  19: 9022859.398 ops/s
# Warmup Iteration  20: 9005085.659 ops/s
# Warmup Iteration  21: 9129489.491 ops/s
# Warmup Iteration  22: 8935857.093 ops/s
# Warmup Iteration  23: 8673619.515 ops/s
# Warmup Iteration  24: 8858843.224 ops/s
# Warmup Iteration  25: 9143190.030 ops/s
# Warmup Iteration  26: 9202178.394 ops/s
# Warmup Iteration  27: 8879395.394 ops/s
# Warmup Iteration  28: 9107320.290 ops/s
# Warmup Iteration  29: 8797459.866 ops/s
# Warmup Iteration  30: 9174543.542 ops/s
Iteration   1: 8624226.433 ops/s
Iteration   2: 9007235.920 ops/s
Iteration   3: 8718251.640 ops/s
Iteration   4: 9033409.916 ops/s
Iteration   5: 8936379.367 ops/s
Iteration   6: 8673493.984 ops/s
Iteration   7: 9235870.424 ops/s
Iteration   8: 9011238.498 ops/s
Iteration   9: 9159718.283 ops/s
Iteration  10: 8913696.011 ops/s
Iteration  11: 9250463.378 ops/s
Iteration  12: 8949009.070 ops/s
Iteration  13: 9061136.237 ops/s
Iteration  14: 9067699.398 ops/s
Iteration  15: 8918325.138 ops/s
Iteration  16: 8895151.225 ops/s
Iteration  17: 9183176.187 ops/s
Iteration  18: 8805368.057 ops/s
Iteration  19: 9361196.397 ops/s
Iteration  20: 9157194.409 ops/s
Iteration  21: 8718105.524 ops/s
Iteration  22: 9019179.480 ops/s
Iteration  23: 9024993.079 ops/s
Iteration  24: 8831371.643 ops/s
Iteration  25: 9246163.828 ops/s
Iteration  26: 8996247.034 ops/s
Iteration  27: 8803755.616 ops/s
Iteration  28: 9340948.628 ops/s
Iteration  29: 9306392.635 ops/s
Iteration  30: 8820354.123 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_issue1527":
  9002325.052 ±(99.9%) 135299.764 ops/s [Average]
  (min, avg, max) = (8624226.433, 9002325.052, 9361196.397), stdev = 202510.332
  CI (99.9%): [8867025.288, 9137624.816] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
ObservableSingleTest._Benchmark.benchmark_issue1527  thrpt   30  9002325.052 ± 135299.764  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBounds$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBounds

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3285034.860 ops/s
# Warmup Iteration   2: 9376913.278 ops/s
# Warmup Iteration   3: 12138428.523 ops/s
# Warmup Iteration   4: 12763409.461 ops/s
# Warmup Iteration   5: 13338038.689 ops/s
# Warmup Iteration   6: 12218163.605 ops/s
# Warmup Iteration   7: 12647362.019 ops/s
# Warmup Iteration   8: 13100054.616 ops/s
# Warmup Iteration   9: 12250414.304 ops/s
# Warmup Iteration  10: 12653878.714 ops/s
# Warmup Iteration  11: 12240491.118 ops/s
# Warmup Iteration  12: 12836454.846 ops/s
# Warmup Iteration  13: 12442149.789 ops/s
# Warmup Iteration  14: 12943736.563 ops/s
# Warmup Iteration  15: 12845869.191 ops/s
# Warmup Iteration  16: 12384424.299 ops/s
# Warmup Iteration  17: 12609252.336 ops/s
# Warmup Iteration  18: 12398988.760 ops/s
# Warmup Iteration  19: 12883464.438 ops/s
# Warmup Iteration  20: 12593806.072 ops/s
# Warmup Iteration  21: 12633433.749 ops/s
# Warmup Iteration  22: 12969331.334 ops/s
# Warmup Iteration  23: 12428484.490 ops/s
# Warmup Iteration  24: 12676264.834 ops/s
# Warmup Iteration  25: 12709972.525 ops/s
# Warmup Iteration  26: 13131533.216 ops/s
# Warmup Iteration  27: 12337830.548 ops/s
# Warmup Iteration  28: 12626460.748 ops/s
# Warmup Iteration  29: 12879205.666 ops/s
# Warmup Iteration  30: 12265865.743 ops/s
Iteration   1: 13153057.063 ops/s
Iteration   2: 12046956.073 ops/s
Iteration   3: 12955550.158 ops/s
Iteration   4: 13061021.705 ops/s
Iteration   5: 12549045.600 ops/s
Iteration   6: 12393310.269 ops/s
Iteration   7: 13224170.645 ops/s
Iteration   8: 12346658.566 ops/s
Iteration   9: 12700148.114 ops/s
Iteration  10: 12774064.444 ops/s
Iteration  11: 12711365.185 ops/s
Iteration  12: 13124492.101 ops/s
Iteration  13: 12219884.611 ops/s
Iteration  14: 12685748.435 ops/s
Iteration  15: 12748956.894 ops/s
Iteration  16: 12614342.170 ops/s
Iteration  17: 12926940.369 ops/s
Iteration  18: 12679563.821 ops/s
Iteration  19: 12533829.402 ops/s
Iteration  20: 13043286.820 ops/s
Iteration  21: 12433215.799 ops/s
Iteration  22: 12989221.134 ops/s
Iteration  23: 12581491.776 ops/s
Iteration  24: 12455427.862 ops/s
Iteration  25: 12757446.863 ops/s
Iteration  26: 12492248.031 ops/s
Iteration  27: 12568485.614 ops/s
Iteration  28: 13093036.404 ops/s
Iteration  29: 12180686.801 ops/s
Iteration  30: 13106314.284 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBounds":
  12704998.900 ±(99.9%) 209387.772 ops/s [Average]
  (min, avg, max) = (12046956.073, 12704998.900, 13224170.645), stdev = 313401.784
  CI (99.9%): [12495611.128, 12914386.673] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBounds  thrpt   30  12704998.900 ± 209387.772  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceMaybeCheckDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceMaybeCheckDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.732 ops/s
# Warmup Iteration   2: 26075.210 ops/s
# Warmup Iteration   3: 89317.008 ops/s
# Warmup Iteration   4: 98531.890 ops/s
# Warmup Iteration   5: 228999.094 ops/s
# Warmup Iteration   6: 416857.139 ops/s
# Warmup Iteration   7: 468590.138 ops/s
# Warmup Iteration   8: 505991.061 ops/s
# Warmup Iteration   9: 518670.787 ops/s
# Warmup Iteration  10: 493033.434 ops/s
# Warmup Iteration  11: 494053.170 ops/s
# Warmup Iteration  12: 504069.243 ops/s
# Warmup Iteration  13: 501088.521 ops/s
# Warmup Iteration  14: 518168.794 ops/s
# Warmup Iteration  15: 503167.167 ops/s
# Warmup Iteration  16: 510609.940 ops/s
# Warmup Iteration  17: 513092.722 ops/s
# Warmup Iteration  18: 495334.706 ops/s
# Warmup Iteration  19: 492231.501 ops/s
# Warmup Iteration  20: 533308.707 ops/s
# Warmup Iteration  21: 500794.106 ops/s
# Warmup Iteration  22: 523855.757 ops/s
# Warmup Iteration  23: 512754.520 ops/s
# Warmup Iteration  24: 508103.840 ops/s
# Warmup Iteration  25: 487479.541 ops/s
# Warmup Iteration  26: 523157.227 ops/s
# Warmup Iteration  27: 515627.150 ops/s
# Warmup Iteration  28: 502345.014 ops/s
# Warmup Iteration  29: 524758.598 ops/s
# Warmup Iteration  30: 528550.095 ops/s
Iteration   1: 491341.636 ops/s
Iteration   2: 525538.654 ops/s
Iteration   3: 493035.332 ops/s
Iteration   4: 524290.328 ops/s
Iteration   5: 484101.116 ops/s
Iteration   6: 527534.097 ops/s
Iteration   7: 527678.824 ops/s
Iteration   8: 495197.637 ops/s
Iteration   9: 515396.349 ops/s
Iteration  10: 494714.184 ops/s
Iteration  11: 512425.585 ops/s
Iteration  12: 493851.524 ops/s
Iteration  13: 507108.711 ops/s
Iteration  14: 516844.979 ops/s
Iteration  15: 497105.196 ops/s
Iteration  16: 508117.634 ops/s
Iteration  17: 519802.758 ops/s
Iteration  18: 491043.479 ops/s
Iteration  19: 524042.395 ops/s
Iteration  20: 495530.783 ops/s
Iteration  21: 507556.230 ops/s
Iteration  22: 518012.697 ops/s
Iteration  23: 489359.399 ops/s
Iteration  24: 516110.530 ops/s
Iteration  25: 497219.108 ops/s
Iteration  26: 509065.535 ops/s
Iteration  27: 526285.317 ops/s
Iteration  28: 505868.627 ops/s
Iteration  29: 503327.797 ops/s
Iteration  30: 508541.564 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceMaybeCheckDisposed":
  507534.934 ±(99.9%) 8818.517 ops/s [Average]
  (min, avg, max) = (484101.116, 507534.934, 527678.824), stdev = 13199.142
  CI (99.9%): [498716.416, 516353.451] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableReduceTest._Benchmark.benchmark_reduceMaybeCheckDisposed  thrpt   30  507534.934 ± 8818.517  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBoundsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBoundsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1293735.143 ops/s
# Warmup Iteration   2: 6198152.628 ops/s
# Warmup Iteration   3: 9642091.919 ops/s
# Warmup Iteration   4: 9346870.012 ops/s
# Warmup Iteration   5: 9886187.386 ops/s
# Warmup Iteration   6: 9518316.241 ops/s
# Warmup Iteration   7: 9443897.942 ops/s
# Warmup Iteration   8: 10035002.659 ops/s
# Warmup Iteration   9: 9773078.579 ops/s
# Warmup Iteration  10: 9579031.549 ops/s
# Warmup Iteration  11: 9461770.010 ops/s
# Warmup Iteration  12: 10060679.386 ops/s
# Warmup Iteration  13: 9473471.301 ops/s
# Warmup Iteration  14: 9639518.046 ops/s
# Warmup Iteration  15: 9744733.661 ops/s
# Warmup Iteration  16: 9729223.665 ops/s
# Warmup Iteration  17: 9940239.948 ops/s
# Warmup Iteration  18: 9365649.245 ops/s
# Warmup Iteration  19: 9859637.638 ops/s
# Warmup Iteration  20: 9450687.831 ops/s
# Warmup Iteration  21: 9612606.811 ops/s
# Warmup Iteration  22: 10015514.971 ops/s
# Warmup Iteration  23: 9921179.993 ops/s
# Warmup Iteration  24: 9949293.128 ops/s
# Warmup Iteration  25: 9526925.291 ops/s
# Warmup Iteration  26: 9602690.461 ops/s
# Warmup Iteration  27: 9570848.322 ops/s
# Warmup Iteration  28: 9617561.786 ops/s
# Warmup Iteration  29: 9948623.095 ops/s
# Warmup Iteration  30: 9446160.252 ops/s
Iteration   1: 9824961.179 ops/s
Iteration   2: 9393219.605 ops/s
Iteration   3: 9794502.368 ops/s
Iteration   4: 9923543.780 ops/s
Iteration   5: 9399445.014 ops/s
Iteration   6: 9925634.027 ops/s
Iteration   7: 10113194.902 ops/s
Iteration   8: 9244282.720 ops/s
Iteration   9: 9983494.894 ops/s
Iteration  10: 9703390.486 ops/s
Iteration  11: 9387620.130 ops/s
Iteration  12: 9761216.704 ops/s
Iteration  13: 9458721.498 ops/s
Iteration  14: 9577423.561 ops/s
Iteration  15: 9640841.313 ops/s
Iteration  16: 9616095.254 ops/s
Iteration  17: 9399321.558 ops/s
Iteration  18: 9769027.903 ops/s
Iteration  19: 9573359.208 ops/s
Iteration  20: 9835491.628 ops/s
Iteration  21: 9691133.936 ops/s
Iteration  22: 9382145.644 ops/s
Iteration  23: 9826958.888 ops/s
Iteration  24: 9622954.604 ops/s
Iteration  25: 9641117.974 ops/s
Iteration  26: 9669474.764 ops/s
Iteration  27: 9313032.277 ops/s
Iteration  28: 9748835.524 ops/s
Iteration  29: 9594708.542 ops/s
Iteration  30: 8017895.105 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBoundsObservable":
  9594434.833 ±(99.9%) 244042.684 ops/s [Average]
  (min, avg, max) = (8017895.105, 9594434.833, 10113194.902), stdev = 365271.629
  CI (99.9%): [9350392.149, 9838477.517] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBoundsObservable  thrpt   30  9594434.833 ± 244042.684  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withNonEmptyObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withNonEmptyObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 874244.371 ops/s
# Warmup Iteration   2: 6699689.579 ops/s
# Warmup Iteration   3: 8908489.507 ops/s
# Warmup Iteration   4: 10389077.794 ops/s
# Warmup Iteration   5: 9710407.002 ops/s
# Warmup Iteration   6: 10159912.915 ops/s
# Warmup Iteration   7: 10104133.464 ops/s
# Warmup Iteration   8: 9760502.892 ops/s
# Warmup Iteration   9: 10499759.816 ops/s
# Warmup Iteration  10: 9854463.569 ops/s
# Warmup Iteration  11: 10041715.094 ops/s
# Warmup Iteration  12: 9707590.480 ops/s
# Warmup Iteration  13: 10485766.746 ops/s
# Warmup Iteration  14: 9860110.113 ops/s
# Warmup Iteration  15: 10504994.174 ops/s
# Warmup Iteration  16: 9945867.914 ops/s
# Warmup Iteration  17: 10059283.045 ops/s
# Warmup Iteration  18: 10340054.588 ops/s
# Warmup Iteration  19: 9810115.128 ops/s
# Warmup Iteration  20: 10335188.291 ops/s
# Warmup Iteration  21: 9703062.338 ops/s
# Warmup Iteration  22: 10055709.309 ops/s
# Warmup Iteration  23: 10306356.821 ops/s
# Warmup Iteration  24: 9998412.896 ops/s
# Warmup Iteration  25: 9757294.768 ops/s
# Warmup Iteration  26: 10209272.405 ops/s
# Warmup Iteration  27: 10029478.861 ops/s
# Warmup Iteration  28: 10191096.222 ops/s
# Warmup Iteration  29: 10392629.515 ops/s
# Warmup Iteration  30: 9897300.533 ops/s
Iteration   1: 10264070.249 ops/s
Iteration   2: 10094086.613 ops/s
Iteration   3: 10338044.892 ops/s
Iteration   4: 10347754.323 ops/s
Iteration   5: 9751569.897 ops/s
Iteration   6: 10495345.256 ops/s
Iteration   7: 10410396.692 ops/s
Iteration   8: 9741387.097 ops/s
Iteration   9: 10365277.991 ops/s
Iteration  10: 9803299.859 ops/s
Iteration  11: 10307353.807 ops/s
Iteration  12: 10249796.708 ops/s
Iteration  13: 9898402.150 ops/s
Iteration  14: 10414317.517 ops/s
Iteration  15: 10204425.117 ops/s
Iteration  16: 10540956.175 ops/s
Iteration  17: 9689163.490 ops/s
Iteration  18: 10261090.924 ops/s
Iteration  19: 10301735.851 ops/s
Iteration  20: 9985672.231 ops/s
Iteration  21: 10630577.387 ops/s
Iteration  22: 9883382.482 ops/s
Iteration  23: 10067393.577 ops/s
Iteration  24: 10402330.955 ops/s
Iteration  25: 9978051.357 ops/s
Iteration  26: 10310053.834 ops/s
Iteration  27: 10017108.514 ops/s
Iteration  28: 10051027.350 ops/s
Iteration  29: 9928602.483 ops/s
Iteration  30: 10581012.850 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withNonEmptyObservable":
  10177122.921 ±(99.9%) 177038.303 ops/s [Average]
  (min, avg, max) = (9689163.490, 10177122.921, 10630577.387), stdev = 264982.618
  CI (99.9%): [10000084.618, 10354161.224] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score        Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_withNonEmptyObservable  thrpt   30  10177122.921 ± 177038.303  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_seedDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_seedDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.700 ops/s
# Warmup Iteration   2: 21982.702 ops/s
# Warmup Iteration   3: 100167.428 ops/s
# Warmup Iteration   4: 116998.728 ops/s
# Warmup Iteration   5: 91721.203 ops/s
# Warmup Iteration   6: 335431.783 ops/s
# Warmup Iteration   7: 493792.232 ops/s
# Warmup Iteration   8: 513708.311 ops/s
# Warmup Iteration   9: 499135.601 ops/s
# Warmup Iteration  10: 487485.208 ops/s
# Warmup Iteration  11: 479995.207 ops/s
# Warmup Iteration  12: 494133.793 ops/s
# Warmup Iteration  13: 502659.254 ops/s
# Warmup Iteration  14: 486893.202 ops/s
# Warmup Iteration  15: 490319.688 ops/s
# Warmup Iteration  16: 495759.886 ops/s
# Warmup Iteration  17: 497692.997 ops/s
# Warmup Iteration  18: 510698.705 ops/s
# Warmup Iteration  19: 484068.610 ops/s
# Warmup Iteration  20: 517262.108 ops/s
# Warmup Iteration  21: 494341.002 ops/s
# Warmup Iteration  22: 494233.037 ops/s
# Warmup Iteration  23: 494464.728 ops/s
# Warmup Iteration  24: 493548.018 ops/s
# Warmup Iteration  25: 513825.608 ops/s
# Warmup Iteration  26: 502504.924 ops/s
# Warmup Iteration  27: 508613.650 ops/s
# Warmup Iteration  28: 509645.552 ops/s
# Warmup Iteration  29: 493960.405 ops/s
# Warmup Iteration  30: 495145.587 ops/s
Iteration   1: 505402.314 ops/s
Iteration   2: 496682.329 ops/s
Iteration   3: 499144.332 ops/s
Iteration   4: 511115.011 ops/s
Iteration   5: 508657.549 ops/s
Iteration   6: 495903.416 ops/s
Iteration   7: 499023.407 ops/s
Iteration   8: 495794.322 ops/s
Iteration   9: 500596.878 ops/s
Iteration  10: 514696.511 ops/s
Iteration  11: 495518.241 ops/s
Iteration  12: 495708.332 ops/s
Iteration  13: 519512.463 ops/s
Iteration  14: 503143.029 ops/s
Iteration  15: 490103.065 ops/s
Iteration  16: 515388.393 ops/s
Iteration  17: 494709.556 ops/s
Iteration  18: 495488.995 ops/s
Iteration  19: 488919.457 ops/s
Iteration  20: 503134.532 ops/s
Iteration  21: 492629.775 ops/s
Iteration  22: 497673.134 ops/s
Iteration  23: 493305.168 ops/s
Iteration  24: 406515.840 ops/s
Iteration  25: 507106.408 ops/s
Iteration  26: 491198.319 ops/s
Iteration  27: 511339.093 ops/s
Iteration  28: 493874.682 ops/s
Iteration  29: 522022.676 ops/s
Iteration  30: 482053.751 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_seedDisposed":
  497545.366 ±(99.9%) 13129.981 ops/s [Average]
  (min, avg, max) = (406515.840, 497545.366, 522022.676), stdev = 19652.339
  CI (99.9%): [484415.385, 510675.347] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
ObservableReduceTest._Benchmark.benchmark_seedDisposed  thrpt   30  497545.366 ± 13129.981  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75110.891 ops/s
# Warmup Iteration   2: 519340.687 ops/s
# Warmup Iteration   3: 659608.858 ops/s
# Warmup Iteration   4: 652512.824 ops/s
# Warmup Iteration   5: 682954.990 ops/s
# Warmup Iteration   6: 655263.477 ops/s
# Warmup Iteration   7: 664389.799 ops/s
# Warmup Iteration   8: 670256.438 ops/s
# Warmup Iteration   9: 643859.972 ops/s
# Warmup Iteration  10: 680355.749 ops/s
# Warmup Iteration  11: 652928.139 ops/s
# Warmup Iteration  12: 660067.598 ops/s
# Warmup Iteration  13: 697709.878 ops/s
# Warmup Iteration  14: 648713.029 ops/s
# Warmup Iteration  15: 659119.814 ops/s
# Warmup Iteration  16: 686074.606 ops/s
# Warmup Iteration  17: 700377.837 ops/s
# Warmup Iteration  18: 710644.368 ops/s
# Warmup Iteration  19: 718831.643 ops/s
# Warmup Iteration  20: 685916.027 ops/s
# Warmup Iteration  21: 734591.981 ops/s
# Warmup Iteration  22: 688610.429 ops/s
# Warmup Iteration  23: 712970.672 ops/s
# Warmup Iteration  24: 724226.986 ops/s
# Warmup Iteration  25: 698232.062 ops/s
# Warmup Iteration  26: 699110.761 ops/s
# Warmup Iteration  27: 714728.968 ops/s
# Warmup Iteration  28: 687255.792 ops/s
# Warmup Iteration  29: 713919.573 ops/s
# Warmup Iteration  30: 743194.966 ops/s
Iteration   1: 714763.217 ops/s
Iteration   2: 683769.047 ops/s
Iteration   3: 747038.382 ops/s
Iteration   4: 717366.824 ops/s
Iteration   5: 697164.130 ops/s
Iteration   6: 731935.892 ops/s
Iteration   7: 696587.817 ops/s
Iteration   8: 716247.385 ops/s
Iteration   9: 719132.955 ops/s
Iteration  10: 715696.630 ops/s
Iteration  11: 715652.372 ops/s
Iteration  12: 703492.561 ops/s
Iteration  13: 701174.166 ops/s
Iteration  14: 696340.517 ops/s
Iteration  15: 711476.896 ops/s
Iteration  16: 696675.154 ops/s
Iteration  17: 740763.211 ops/s
Iteration  18: 711596.710 ops/s
Iteration  19: 717538.299 ops/s
Iteration  20: 737885.361 ops/s
Iteration  21: 701031.503 ops/s
Iteration  22: 706538.425 ops/s
Iteration  23: 719962.566 ops/s
Iteration  24: 713147.390 ops/s
Iteration  25: 739503.761 ops/s
Iteration  26: 697611.188 ops/s
Iteration  27: 703302.137 ops/s
Iteration  28: 722030.330 ops/s
Iteration  29: 712122.431 ops/s
Iteration  30: 718746.653 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageObservable":
  713543.130 ±(99.9%) 10032.400 ops/s [Average]
  (min, avg, max) = (683769.047, 713543.130, 747038.382), stdev = 15016.026
  CI (99.9%): [703510.730, 723575.531] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score       Error  Units
ObservableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageObservable  thrpt   30  713543.130 ± 10032.400  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 169600.375 ops/s
# Warmup Iteration   2: 524116.937 ops/s
# Warmup Iteration   3: 609810.791 ops/s
# Warmup Iteration   4: 626034.869 ops/s
# Warmup Iteration   5: 573724.797 ops/s
# Warmup Iteration   6: 686044.442 ops/s
# Warmup Iteration   7: 688480.366 ops/s
# Warmup Iteration   8: 664397.546 ops/s
# Warmup Iteration   9: 685616.418 ops/s
# Warmup Iteration  10: 689864.762 ops/s
# Warmup Iteration  11: 663493.256 ops/s
# Warmup Iteration  12: 674715.490 ops/s
# Warmup Iteration  13: 686485.898 ops/s
# Warmup Iteration  14: 667424.365 ops/s
# Warmup Iteration  15: 695526.232 ops/s
# Warmup Iteration  16: 666762.943 ops/s
# Warmup Iteration  17: 714623.513 ops/s
# Warmup Iteration  18: 757105.205 ops/s
# Warmup Iteration  19: 695337.272 ops/s
# Warmup Iteration  20: 738259.406 ops/s
# Warmup Iteration  21: 711792.010 ops/s
# Warmup Iteration  22: 713573.722 ops/s
# Warmup Iteration  23: 723893.786 ops/s
# Warmup Iteration  24: 700173.058 ops/s
# Warmup Iteration  25: 731906.262 ops/s
# Warmup Iteration  26: 698367.921 ops/s
# Warmup Iteration  27: 696495.870 ops/s
# Warmup Iteration  28: 719326.537 ops/s
# Warmup Iteration  29: 725468.436 ops/s
# Warmup Iteration  30: 728368.900 ops/s
Iteration   1: 719954.380 ops/s
Iteration   2: 720802.200 ops/s
Iteration   3: 726851.372 ops/s
Iteration   4: 738447.067 ops/s
Iteration   5: 727530.451 ops/s
Iteration   6: 696854.739 ops/s
Iteration   7: 745682.075 ops/s
Iteration   8: 719242.484 ops/s
Iteration   9: 745593.892 ops/s
Iteration  10: 737749.335 ops/s
Iteration  11: 713182.752 ops/s
Iteration  12: 741816.535 ops/s
Iteration  13: 699026.731 ops/s
Iteration  14: 739080.379 ops/s
Iteration  15: 736896.624 ops/s
Iteration  16: 709222.150 ops/s
Iteration  17: 720720.712 ops/s
Iteration  18: 675242.332 ops/s
Iteration  19: 653339.234 ops/s
Iteration  20: 742161.634 ops/s
Iteration  21: 692467.171 ops/s
Iteration  22: 720019.140 ops/s
Iteration  23: 689980.128 ops/s
Iteration  24: 723300.030 ops/s
Iteration  25: 704712.053 ops/s
Iteration  26: 738429.209 ops/s
Iteration  27: 713063.338 ops/s
Iteration  28: 703903.091 ops/s
Iteration  29: 729583.179 ops/s
Iteration  30: 720967.852 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage":
  718194.076 ±(99.9%) 14586.412 ops/s [Average]
  (min, avg, max) = (653339.234, 718194.076, 745682.075), stdev = 21832.257
  CI (99.9%): [703607.663, 732780.488] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score       Error  Units
ObservableAnyTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage  thrpt   30  718194.076 ± 14586.412  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMapValueSelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMapValueSelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 821552.156 ops/s
# Warmup Iteration   2: 4542441.250 ops/s
# Warmup Iteration   3: 7262691.652 ops/s
# Warmup Iteration   4: 7449678.615 ops/s
# Warmup Iteration   5: 7710394.480 ops/s
# Warmup Iteration   6: 7309540.357 ops/s
# Warmup Iteration   7: 7118290.082 ops/s
# Warmup Iteration   8: 7260089.544 ops/s
# Warmup Iteration   9: 7132387.107 ops/s
# Warmup Iteration  10: 7350534.044 ops/s
# Warmup Iteration  11: 7551982.807 ops/s
# Warmup Iteration  12: 7240249.251 ops/s
# Warmup Iteration  13: 7679707.585 ops/s
# Warmup Iteration  14: 7200997.961 ops/s
# Warmup Iteration  15: 7428985.822 ops/s
# Warmup Iteration  16: 7600347.777 ops/s
# Warmup Iteration  17: 7359892.472 ops/s
# Warmup Iteration  18: 7674204.286 ops/s
# Warmup Iteration  19: 7733844.439 ops/s
# Warmup Iteration  20: 7437341.440 ops/s
# Warmup Iteration  21: 7691469.506 ops/s
# Warmup Iteration  22: 7551450.019 ops/s
# Warmup Iteration  23: 7396790.275 ops/s
# Warmup Iteration  24: 7413914.194 ops/s
# Warmup Iteration  25: 7815367.026 ops/s
# Warmup Iteration  26: 7459336.657 ops/s
# Warmup Iteration  27: 7578772.911 ops/s
# Warmup Iteration  28: 7523036.953 ops/s
# Warmup Iteration  29: 7601348.276 ops/s
# Warmup Iteration  30: 7775416.587 ops/s
Iteration   1: 7442983.175 ops/s
Iteration   2: 7821324.963 ops/s
Iteration   3: 7228932.506 ops/s
Iteration   4: 7566220.660 ops/s
Iteration   5: 7722863.528 ops/s
Iteration   6: 7346129.915 ops/s
Iteration   7: 7819689.342 ops/s
Iteration   8: 7455978.439 ops/s
Iteration   9: 7435079.762 ops/s
Iteration  10: 7747874.991 ops/s
Iteration  11: 7618693.094 ops/s
Iteration  12: 7331909.619 ops/s
Iteration  13: 7855105.965 ops/s
Iteration  14: 7626309.582 ops/s
Iteration  15: 7556978.135 ops/s
Iteration  16: 7319968.810 ops/s
Iteration  17: 7706900.046 ops/s
Iteration  18: 7495496.202 ops/s
Iteration  19: 7795792.353 ops/s
Iteration  20: 7271720.775 ops/s
Iteration  21: 7571830.701 ops/s
Iteration  22: 7698283.904 ops/s
Iteration  23: 7321604.915 ops/s
Iteration  24: 7546230.874 ops/s
Iteration  25: 7337351.333 ops/s
Iteration  26: 7614715.701 ops/s
Iteration  27: 7507732.019 ops/s
Iteration  28: 7499118.938 ops/s
Iteration  29: 7471401.181 ops/s
Iteration  30: 7717592.802 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMapValueSelectorReturnsNull":
  7548393.808 ±(99.9%) 119387.399 ops/s [Average]
  (min, avg, max) = (7228932.506, 7548393.808, 7855105.965), stdev = 178693.452
  CI (99.9%): [7429006.409, 7667781.207] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score        Error  Units
ObservableNullTests._Benchmark.benchmark_toMapValueSelectorReturnsNull  thrpt   30  7548393.808 ± 119387.399  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMultiMapValueSelectorReturnsNullAllowed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMultiMapValueSelectorReturnsNullAllowed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1039947.674 ops/s
# Warmup Iteration   2: 4750720.681 ops/s
# Warmup Iteration   3: 7572658.556 ops/s
# Warmup Iteration   4: 7204869.096 ops/s
# Warmup Iteration   5: 7502034.095 ops/s
# Warmup Iteration   6: 7274595.271 ops/s
# Warmup Iteration   7: 7463996.322 ops/s
# Warmup Iteration   8: 7468567.830 ops/s
# Warmup Iteration   9: 7248098.811 ops/s
# Warmup Iteration  10: 7499781.783 ops/s
# Warmup Iteration  11: 7133837.558 ops/s
# Warmup Iteration  12: 7741731.551 ops/s
# Warmup Iteration  13: 7294083.536 ops/s
# Warmup Iteration  14: 7460325.549 ops/s
# Warmup Iteration  15: 7835031.580 ops/s
# Warmup Iteration  16: 7312784.000 ops/s
# Warmup Iteration  17: 7462880.648 ops/s
# Warmup Iteration  18: 7586912.179 ops/s
# Warmup Iteration  19: 7346531.218 ops/s
# Warmup Iteration  20: 7658692.881 ops/s
# Warmup Iteration  21: 7335608.108 ops/s
# Warmup Iteration  22: 7696927.142 ops/s
# Warmup Iteration  23: 7363684.482 ops/s
# Warmup Iteration  24: 7277995.775 ops/s
# Warmup Iteration  25: 7580972.541 ops/s
# Warmup Iteration  26: 7446735.544 ops/s
# Warmup Iteration  27: 7711853.601 ops/s
# Warmup Iteration  28: 7425057.601 ops/s
# Warmup Iteration  29: 7328982.411 ops/s
# Warmup Iteration  30: 7637078.226 ops/s
Iteration   1: 7444338.327 ops/s
Iteration   2: 7452916.740 ops/s
Iteration   3: 7748755.388 ops/s
Iteration   4: 7558012.190 ops/s
Iteration   5: 7264652.773 ops/s
Iteration   6: 7623489.783 ops/s
Iteration   7: 7452428.588 ops/s
Iteration   8: 7467521.932 ops/s
Iteration   9: 7592257.563 ops/s
Iteration  10: 7273720.322 ops/s
Iteration  11: 7746505.953 ops/s
Iteration  12: 7322600.895 ops/s
Iteration  13: 5712687.120 ops/s
Iteration  14: 7338635.556 ops/s
Iteration  15: 7497447.766 ops/s
Iteration  16: 7622837.307 ops/s
Iteration  17: 7657061.873 ops/s
Iteration  18: 7251276.923 ops/s
Iteration  19: 7714718.295 ops/s
Iteration  20: 7141967.328 ops/s
Iteration  21: 7477160.307 ops/s
Iteration  22: 7297395.634 ops/s
Iteration  23: 7420436.285 ops/s
Iteration  24: 7776848.612 ops/s
Iteration  25: 7646217.557 ops/s
Iteration  26: 7226326.321 ops/s
Iteration  27: 7578837.776 ops/s
Iteration  28: 7205845.082 ops/s
Iteration  29: 7634269.683 ops/s
Iteration  30: 7328555.030 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_toMultiMapValueSelectorReturnsNullAllowed":
  7415857.497 ±(99.9%) 246309.679 ops/s [Average]
  (min, avg, max) = (5712687.120, 7415857.497, 7776848.612), stdev = 368664.760
  CI (99.9%): [7169547.818, 7662167.176] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score        Error  Units
ObservableNullTests._Benchmark.benchmark_toMultiMapValueSelectorReturnsNullAllowed  thrpt   30  7415857.497 ± 246309.679  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 790731.610 ops/s
# Warmup Iteration   2: 4238820.599 ops/s
# Warmup Iteration   3: 5540629.479 ops/s
# Warmup Iteration   4: 5747790.139 ops/s
# Warmup Iteration   5: 6133376.500 ops/s
# Warmup Iteration   6: 5950156.813 ops/s
# Warmup Iteration   7: 5899010.645 ops/s
# Warmup Iteration   8: 5920229.283 ops/s
# Warmup Iteration   9: 5921515.551 ops/s
# Warmup Iteration  10: 5912443.727 ops/s
# Warmup Iteration  11: 6059385.168 ops/s
# Warmup Iteration  12: 5862089.709 ops/s
# Warmup Iteration  13: 6005450.671 ops/s
# Warmup Iteration  14: 5998961.929 ops/s
# Warmup Iteration  15: 5970333.710 ops/s
# Warmup Iteration  16: 6019387.106 ops/s
# Warmup Iteration  17: 5895474.718 ops/s
# Warmup Iteration  18: 6211929.972 ops/s
# Warmup Iteration  19: 5892635.094 ops/s
# Warmup Iteration  20: 6054356.367 ops/s
# Warmup Iteration  21: 5941476.927 ops/s
# Warmup Iteration  22: 5832315.407 ops/s
# Warmup Iteration  23: 6065081.773 ops/s
# Warmup Iteration  24: 5893607.348 ops/s
# Warmup Iteration  25: 6138553.071 ops/s
# Warmup Iteration  26: 5857102.647 ops/s
# Warmup Iteration  27: 6053476.057 ops/s
# Warmup Iteration  28: 5927328.319 ops/s
# Warmup Iteration  29: 6154886.440 ops/s
# Warmup Iteration  30: 5972824.916 ops/s
Iteration   1: 5976952.226 ops/s
Iteration   2: 6033242.241 ops/s
Iteration   3: 5804145.643 ops/s
Iteration   4: 5901908.068 ops/s
Iteration   5: 6008796.460 ops/s
Iteration   6: 5899111.893 ops/s
Iteration   7: 6201024.888 ops/s
Iteration   8: 5782790.143 ops/s
Iteration   9: 6136976.555 ops/s
Iteration  10: 5921945.199 ops/s
Iteration  11: 5998201.273 ops/s
Iteration  12: 6033457.014 ops/s
Iteration  13: 5987706.028 ops/s
Iteration  14: 5948661.308 ops/s
Iteration  15: 5960669.610 ops/s
Iteration  16: 5770415.295 ops/s
Iteration  17: 5972400.340 ops/s
Iteration  18: 6074712.562 ops/s
Iteration  19: 5820729.780 ops/s
Iteration  20: 6087961.733 ops/s
Iteration  21: 6122639.609 ops/s
Iteration  22: 5733473.730 ops/s
Iteration  23: 6009208.835 ops/s
Iteration  24: 5798931.820 ops/s
Iteration  25: 5941592.549 ops/s
Iteration  26: 6205947.855 ops/s
Iteration  27: 5920253.373 ops/s
Iteration  28: 6200309.895 ops/s
Iteration  29: 5796118.770 ops/s
Iteration  30: 6106175.847 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_dispose":
  5971882.018 ±(99.9%) 89870.426 ops/s [Average]
  (min, avg, max) = (5733473.730, 5971882.018, 6205947.855), stdev = 134513.833
  CI (99.9%): [5882011.592, 6061752.444] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_dispose  thrpt   30  5971882.018 ± 89870.426  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteAfter$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteAfter

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.770 ops/s
# Warmup Iteration   2: 20218.561 ops/s
# Warmup Iteration   3: 100314.782 ops/s
# Warmup Iteration   4: 138343.228 ops/s
# Warmup Iteration   5: 299946.366 ops/s
# Warmup Iteration   6: 497822.877 ops/s
# Warmup Iteration   7: 492280.533 ops/s
# Warmup Iteration   8: 516812.707 ops/s
# Warmup Iteration   9: 550830.326 ops/s
# Warmup Iteration  10: 552014.381 ops/s
# Warmup Iteration  11: 538002.618 ops/s
# Warmup Iteration  12: 539673.914 ops/s
# Warmup Iteration  13: 536691.950 ops/s
# Warmup Iteration  14: 541404.032 ops/s
# Warmup Iteration  15: 542295.233 ops/s
# Warmup Iteration  16: 558069.227 ops/s
# Warmup Iteration  17: 533351.294 ops/s
# Warmup Iteration  18: 552804.242 ops/s
# Warmup Iteration  19: 558247.239 ops/s
# Warmup Iteration  20: 545506.929 ops/s
# Warmup Iteration  21: 557147.313 ops/s
# Warmup Iteration  22: 541332.054 ops/s
# Warmup Iteration  23: 566017.300 ops/s
# Warmup Iteration  24: 542066.492 ops/s
# Warmup Iteration  25: 534613.582 ops/s
# Warmup Iteration  26: 569377.326 ops/s
# Warmup Iteration  27: 546350.032 ops/s
# Warmup Iteration  28: 559257.055 ops/s
# Warmup Iteration  29: 547031.841 ops/s
# Warmup Iteration  30: 546089.605 ops/s
Iteration   1: 541959.528 ops/s
Iteration   2: 533001.723 ops/s
Iteration   3: 559028.896 ops/s
Iteration   4: 539337.553 ops/s
Iteration   5: 555177.062 ops/s
Iteration   6: 542177.739 ops/s
Iteration   7: 438044.774 ops/s
Iteration   8: 534240.674 ops/s
Iteration   9: 572601.403 ops/s
Iteration  10: 547617.618 ops/s
Iteration  11: 559355.068 ops/s
Iteration  12: 545730.268 ops/s
Iteration  13: 533137.882 ops/s
Iteration  14: 569975.979 ops/s
Iteration  15: 540464.581 ops/s
Iteration  16: 524277.543 ops/s
Iteration  17: 552441.931 ops/s
Iteration  18: 539497.546 ops/s
Iteration  19: 533590.913 ops/s
Iteration  20: 540389.189 ops/s
Iteration  21: 567564.197 ops/s
Iteration  22: 523212.682 ops/s
Iteration  23: 545091.970 ops/s
Iteration  24: 556738.347 ops/s
Iteration  25: 542751.549 ops/s
Iteration  26: 557807.472 ops/s
Iteration  27: 533682.980 ops/s
Iteration  28: 557623.616 ops/s
Iteration  29: 526171.334 ops/s
Iteration  30: 563079.690 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteAfter":
  542525.724 ±(99.9%) 15961.372 ops/s [Average]
  (min, avg, max) = (438044.774, 542525.724, 572601.403), stdev = 23890.231
  CI (99.9%): [526564.352, 558487.095] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableDoOnEachTest._Benchmark.benchmark_onCompleteAfter  thrpt   30  542525.724 ± 15961.372  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 720543.049 ops/s
# Warmup Iteration   2: 3977406.653 ops/s
# Warmup Iteration   3: 5225852.426 ops/s
# Warmup Iteration   4: 6365346.975 ops/s
# Warmup Iteration   5: 6198521.485 ops/s
# Warmup Iteration   6: 6149367.047 ops/s
# Warmup Iteration   7: 6385480.830 ops/s
# Warmup Iteration   8: 5973037.609 ops/s
# Warmup Iteration   9: 6458996.817 ops/s
# Warmup Iteration  10: 6088434.951 ops/s
# Warmup Iteration  11: 6236496.832 ops/s
# Warmup Iteration  12: 6513770.264 ops/s
# Warmup Iteration  13: 6222839.542 ops/s
# Warmup Iteration  14: 6042673.602 ops/s
# Warmup Iteration  15: 6478457.639 ops/s
# Warmup Iteration  16: 6197606.778 ops/s
# Warmup Iteration  17: 6446741.449 ops/s
# Warmup Iteration  18: 6261511.427 ops/s
# Warmup Iteration  19: 6275253.426 ops/s
# Warmup Iteration  20: 6353361.227 ops/s
# Warmup Iteration  21: 6272727.874 ops/s
# Warmup Iteration  22: 6289018.488 ops/s
# Warmup Iteration  23: 6260711.465 ops/s
# Warmup Iteration  24: 6419579.069 ops/s
# Warmup Iteration  25: 6153360.143 ops/s
# Warmup Iteration  26: 6370996.966 ops/s
# Warmup Iteration  27: 6538017.350 ops/s
# Warmup Iteration  28: 6253855.766 ops/s
# Warmup Iteration  29: 6481759.513 ops/s
# Warmup Iteration  30: 6220149.129 ops/s
Iteration   1: 6423778.516 ops/s
Iteration   2: 6232624.888 ops/s
Iteration   3: 6199878.925 ops/s
Iteration   4: 6435748.258 ops/s
Iteration   5: 6269278.126 ops/s
Iteration   6: 6285972.380 ops/s
Iteration   7: 6254522.950 ops/s
Iteration   8: 6335756.165 ops/s
Iteration   9: 6232530.172 ops/s
Iteration  10: 6342465.267 ops/s
Iteration  11: 6506299.688 ops/s
Iteration  12: 6274562.892 ops/s
Iteration  13: 6376900.577 ops/s
Iteration  14: 6270997.825 ops/s
Iteration  15: 6289381.189 ops/s
Iteration  16: 6362361.233 ops/s
Iteration  17: 6210484.598 ops/s
Iteration  18: 6462166.158 ops/s
Iteration  19: 6378941.651 ops/s
Iteration  20: 6440971.022 ops/s
Iteration  21: 6188259.803 ops/s
Iteration  22: 6499546.569 ops/s
Iteration  23: 6295882.361 ops/s
Iteration  24: 6245024.083 ops/s
Iteration  25: 6288768.074 ops/s
Iteration  26: 6146416.738 ops/s
Iteration  27: 6597481.379 ops/s
Iteration  28: 6219424.445 ops/s
Iteration  29: 6089540.596 ops/s
Iteration  30: 6532768.184 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_empty":
  6322957.824 ±(99.9%) 81378.008 ops/s [Average]
  (min, avg, max) = (6089540.596, 6322957.824, 6597481.379), stdev = 121802.781
  CI (99.9%): [6241579.815, 6404335.832] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_empty  thrpt   30  6322957.824 ± 81378.008  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_seedDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_seedDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.827 ops/s
# Warmup Iteration   2: 19634.438 ops/s
# Warmup Iteration   3: 49241.230 ops/s
# Warmup Iteration   4: 69659.876 ops/s
# Warmup Iteration   5: 61078.348 ops/s
# Warmup Iteration   6: 89023.888 ops/s
# Warmup Iteration   7: 226447.552 ops/s
# Warmup Iteration   8: 231938.023 ops/s
# Warmup Iteration   9: 231353.055 ops/s
# Warmup Iteration  10: 226211.436 ops/s
# Warmup Iteration  11: 232765.597 ops/s
# Warmup Iteration  12: 241365.214 ops/s
# Warmup Iteration  13: 243758.818 ops/s
# Warmup Iteration  14: 253842.480 ops/s
# Warmup Iteration  15: 219499.653 ops/s
# Warmup Iteration  16: 254360.085 ops/s
# Warmup Iteration  17: 237046.337 ops/s
# Warmup Iteration  18: 254481.958 ops/s
# Warmup Iteration  19: 253027.646 ops/s
# Warmup Iteration  20: 246755.706 ops/s
# Warmup Iteration  21: 246750.829 ops/s
# Warmup Iteration  22: 238097.005 ops/s
# Warmup Iteration  23: 246477.741 ops/s
# Warmup Iteration  24: 253072.530 ops/s
# Warmup Iteration  25: 246271.590 ops/s
# Warmup Iteration  26: 244595.717 ops/s
# Warmup Iteration  27: 250818.784 ops/s
# Warmup Iteration  28: 240119.311 ops/s
# Warmup Iteration  29: 254728.522 ops/s
# Warmup Iteration  30: 249724.415 ops/s
Iteration   1: 193334.982 ops/s
Iteration   2: 255339.061 ops/s
Iteration   3: 231509.327 ops/s
Iteration   4: 259346.732 ops/s
Iteration   5: 236344.940 ops/s
Iteration   6: 247631.688 ops/s
Iteration   7: 242470.802 ops/s
Iteration   8: 244885.194 ops/s
Iteration   9: 253007.934 ops/s
Iteration  10: 239948.542 ops/s
Iteration  11: 234084.042 ops/s
Iteration  12: 242884.793 ops/s
Iteration  13: 244579.325 ops/s
Iteration  14: 247773.730 ops/s
Iteration  15: 245683.885 ops/s
Iteration  16: 234293.869 ops/s
Iteration  17: 250808.285 ops/s
Iteration  18: 242114.968 ops/s
Iteration  19: 244344.811 ops/s
Iteration  20: 252436.287 ops/s
Iteration  21: 239693.820 ops/s
Iteration  22: 250213.980 ops/s
Iteration  23: 239533.227 ops/s
Iteration  24: 239779.304 ops/s
Iteration  25: 250494.884 ops/s
Iteration  26: 227964.125 ops/s
Iteration  27: 246398.292 ops/s
Iteration  28: 252200.483 ops/s
Iteration  29: 235200.887 ops/s
Iteration  30: 251269.631 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_seedDoubleOnSubscribe":
  242519.061 ±(99.9%) 7966.939 ops/s [Average]
  (min, avg, max) = (193334.982, 242519.061, 259346.732), stdev = 11924.540
  CI (99.9%): [234552.122, 250486.000] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableReduceTest._Benchmark.benchmark_seedDoubleOnSubscribe  thrpt   30  242519.061 ± 7966.939  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 121135.154 ops/s
# Warmup Iteration   2: 832862.982 ops/s
# Warmup Iteration   3: 1145805.703 ops/s
# Warmup Iteration   4: 1336406.512 ops/s
# Warmup Iteration   5: 1375527.736 ops/s
# Warmup Iteration   6: 1284924.533 ops/s
# Warmup Iteration   7: 1300560.210 ops/s
# Warmup Iteration   8: 1337848.474 ops/s
# Warmup Iteration   9: 1356801.390 ops/s
# Warmup Iteration  10: 1373160.952 ops/s
# Warmup Iteration  11: 1341438.848 ops/s
# Warmup Iteration  12: 1294535.996 ops/s
# Warmup Iteration  13: 1337598.586 ops/s
# Warmup Iteration  14: 1336026.856 ops/s
# Warmup Iteration  15: 1347308.027 ops/s
# Warmup Iteration  16: 1370741.620 ops/s
# Warmup Iteration  17: 1346116.038 ops/s
# Warmup Iteration  18: 1357742.148 ops/s
# Warmup Iteration  19: 1346863.214 ops/s
# Warmup Iteration  20: 1314140.743 ops/s
# Warmup Iteration  21: 1342246.142 ops/s
# Warmup Iteration  22: 1289575.446 ops/s
# Warmup Iteration  23: 1359397.386 ops/s
# Warmup Iteration  24: 1382030.487 ops/s
# Warmup Iteration  25: 1227299.026 ops/s
# Warmup Iteration  26: 1384820.775 ops/s
# Warmup Iteration  27: 1289855.572 ops/s
# Warmup Iteration  28: 1291481.971 ops/s
# Warmup Iteration  29: 1330824.946 ops/s
# Warmup Iteration  30: 1354725.668 ops/s
Iteration   1: 1383708.364 ops/s
Iteration   2: 1266936.294 ops/s
Iteration   3: 1341985.073 ops/s
Iteration   4: 1323643.855 ops/s
Iteration   5: 1240910.263 ops/s
Iteration   6: 1397598.157 ops/s
Iteration   7: 1274093.224 ops/s
Iteration   8: 1308278.819 ops/s
Iteration   9: 1320469.724 ops/s
Iteration  10: 1331647.711 ops/s
Iteration  11: 1312856.290 ops/s
Iteration  12: 1293389.732 ops/s
Iteration  13: 1347224.197 ops/s
Iteration  14: 1305530.664 ops/s
Iteration  15: 1300619.955 ops/s
Iteration  16: 1351903.040 ops/s
Iteration  17: 1326747.277 ops/s
Iteration  18: 1330464.469 ops/s
Iteration  19: 1361165.390 ops/s
Iteration  20: 1294867.537 ops/s
Iteration  21: 1312390.205 ops/s
Iteration  22: 1287097.152 ops/s
Iteration  23: 1353680.265 ops/s
Iteration  24: 1328169.834 ops/s
Iteration  25: 1355811.286 ops/s
Iteration  26: 1342648.960 ops/s
Iteration  27: 1302107.493 ops/s
Iteration  28: 1330955.650 ops/s
Iteration  29: 1251895.739 ops/s
Iteration  30: 1337458.082 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothJust":
  1320541.823 ±(99.9%) 23904.480 ops/s [Average]
  (min, avg, max) = (1240910.263, 1320541.823, 1397598.157), stdev = 35779.103
  CI (99.9%): [1296637.343, 1344446.304] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_bothJust  thrpt   30  1320541.823 ± 23904.480  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_simpleInequal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_simpleInequal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87691.972 ops/s
# Warmup Iteration   2: 443479.466 ops/s
# Warmup Iteration   3: 887389.358 ops/s
# Warmup Iteration   4: 1266834.477 ops/s
# Warmup Iteration   5: 1243684.367 ops/s
# Warmup Iteration   6: 1229497.362 ops/s
# Warmup Iteration   7: 1225705.188 ops/s
# Warmup Iteration   8: 1297935.562 ops/s
# Warmup Iteration   9: 1198749.491 ops/s
# Warmup Iteration  10: 1266788.510 ops/s
# Warmup Iteration  11: 1263476.262 ops/s
# Warmup Iteration  12: 1253672.708 ops/s
# Warmup Iteration  13: 1240683.844 ops/s
# Warmup Iteration  14: 1300778.217 ops/s
# Warmup Iteration  15: 1248212.476 ops/s
# Warmup Iteration  16: 1310772.962 ops/s
# Warmup Iteration  17: 1264937.717 ops/s
# Warmup Iteration  18: 1232000.234 ops/s
# Warmup Iteration  19: 1275196.659 ops/s
# Warmup Iteration  20: 1289755.180 ops/s
# Warmup Iteration  21: 1276442.767 ops/s
# Warmup Iteration  22: 1263355.915 ops/s
# Warmup Iteration  23: 1235353.513 ops/s
# Warmup Iteration  24: 1228257.157 ops/s
# Warmup Iteration  25: 1274514.117 ops/s
# Warmup Iteration  26: 947564.804 ops/s
# Warmup Iteration  27: 1309746.508 ops/s
# Warmup Iteration  28: 1216342.262 ops/s
# Warmup Iteration  29: 1266554.204 ops/s
# Warmup Iteration  30: 1214927.059 ops/s
Iteration   1: 1242338.402 ops/s
Iteration   2: 1236583.208 ops/s
Iteration   3: 1217861.142 ops/s
Iteration   4: 1250645.344 ops/s
Iteration   5: 1248520.826 ops/s
Iteration   6: 1210130.936 ops/s
Iteration   7: 1301125.414 ops/s
Iteration   8: 1224187.450 ops/s
Iteration   9: 1216713.366 ops/s
Iteration  10: 1258176.814 ops/s
Iteration  11: 1210858.338 ops/s
Iteration  12: 1227785.041 ops/s
Iteration  13: 1272400.738 ops/s
Iteration  14: 1209511.512 ops/s
Iteration  15: 1226213.256 ops/s
Iteration  16: 1238543.318 ops/s
Iteration  17: 1213008.485 ops/s
Iteration  18: 1195389.593 ops/s
Iteration  19: 1277536.860 ops/s
Iteration  20: 1162913.384 ops/s
Iteration  21: 1256435.116 ops/s
Iteration  22: 1201173.691 ops/s
Iteration  23: 1260651.896 ops/s
Iteration  24: 1193208.808 ops/s
Iteration  25: 1254240.489 ops/s
Iteration  26: 1233384.447 ops/s
Iteration  27: 1219544.126 ops/s
Iteration  28: 1236827.859 ops/s
Iteration  29: 1294904.679 ops/s
Iteration  30: 1236763.372 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_simpleInequal":
  1234252.597 ±(99.9%) 20305.447 ops/s [Average]
  (min, avg, max) = (1162913.384, 1234252.597, 1301125.414), stdev = 30392.239
  CI (99.9%): [1213947.150, 1254558.044] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_simpleInequal  thrpt   30  1234252.597 ± 20305.447  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorNoElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorNoElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 219673.852 ops/s
# Warmup Iteration   2: 554624.795 ops/s
# Warmup Iteration   3: 623668.977 ops/s
# Warmup Iteration   4: 553968.951 ops/s
# Warmup Iteration   5: 610311.596 ops/s
# Warmup Iteration   6: 549438.744 ops/s
# Warmup Iteration   7: 618681.564 ops/s
# Warmup Iteration   8: 643271.787 ops/s
# Warmup Iteration   9: 637916.389 ops/s
# Warmup Iteration  10: 658924.257 ops/s
# Warmup Iteration  11: 623608.496 ops/s
# Warmup Iteration  12: 646423.163 ops/s
# Warmup Iteration  13: 628634.151 ops/s
# Warmup Iteration  14: 632794.351 ops/s
# Warmup Iteration  15: 624332.868 ops/s
# Warmup Iteration  16: 633563.068 ops/s
# Warmup Iteration  17: 671031.308 ops/s
# Warmup Iteration  18: 702370.237 ops/s
# Warmup Iteration  19: 654674.925 ops/s
# Warmup Iteration  20: 671292.747 ops/s
# Warmup Iteration  21: 691861.117 ops/s
# Warmup Iteration  22: 649346.249 ops/s
# Warmup Iteration  23: 665138.192 ops/s
# Warmup Iteration  24: 663723.932 ops/s
# Warmup Iteration  25: 661003.397 ops/s
# Warmup Iteration  26: 681255.800 ops/s
# Warmup Iteration  27: 676561.216 ops/s
# Warmup Iteration  28: 657116.422 ops/s
# Warmup Iteration  29: 677321.268 ops/s
# Warmup Iteration  30: 659407.851 ops/s
Iteration   1: 663909.144 ops/s
Iteration   2: 693521.181 ops/s
Iteration   3: 636767.025 ops/s
Iteration   4: 670473.684 ops/s
Iteration   5: 658416.544 ops/s
Iteration   6: 644858.288 ops/s
Iteration   7: 682622.194 ops/s
Iteration   8: 646361.091 ops/s
Iteration   9: 697304.037 ops/s
Iteration  10: 646277.908 ops/s
Iteration  11: 684952.373 ops/s
Iteration  12: 650782.309 ops/s
Iteration  13: 673540.220 ops/s
Iteration  14: 665590.663 ops/s
Iteration  15: 662567.659 ops/s
Iteration  16: 668073.847 ops/s
Iteration  17: 669589.645 ops/s
Iteration  18: 661402.159 ops/s
Iteration  19: 672814.148 ops/s
Iteration  20: 664448.112 ops/s
Iteration  21: 646312.275 ops/s
Iteration  22: 670323.095 ops/s
Iteration  23: 653400.344 ops/s
Iteration  24: 686070.979 ops/s
Iteration  25: 674681.296 ops/s
Iteration  26: 670281.082 ops/s
Iteration  27: 677213.247 ops/s
Iteration  28: 662616.858 ops/s
Iteration  29: 700348.923 ops/s
Iteration  30: 687340.733 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorNoElement":
  668095.369 ±(99.9%) 10830.567 ops/s [Average]
  (min, avg, max) = (636767.025, 668095.369, 700348.923), stdev = 16210.685
  CI (99.9%): [657264.801, 678925.936] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableSingleTest._Benchmark.benchmark_singleOrErrorNoElement  thrpt   30  668095.369 ± 10830.567  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_dispose2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_dispose2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2582055.609 ops/s
# Warmup Iteration   2: 5620052.919 ops/s
# Warmup Iteration   3: 8729114.610 ops/s
# Warmup Iteration   4: 8504154.246 ops/s
# Warmup Iteration   5: 8515584.948 ops/s
# Warmup Iteration   6: 8936390.911 ops/s
# Warmup Iteration   7: 8641539.159 ops/s
# Warmup Iteration   8: 8790768.377 ops/s
# Warmup Iteration   9: 8944096.674 ops/s
# Warmup Iteration  10: 8798196.410 ops/s
# Warmup Iteration  11: 8983491.321 ops/s
# Warmup Iteration  12: 8394420.930 ops/s
# Warmup Iteration  13: 8916397.839 ops/s
# Warmup Iteration  14: 8554614.122 ops/s
# Warmup Iteration  15: 9025597.672 ops/s
# Warmup Iteration  16: 8532478.359 ops/s
# Warmup Iteration  17: 8751224.453 ops/s
# Warmup Iteration  18: 8658475.479 ops/s
# Warmup Iteration  19: 8851451.903 ops/s
# Warmup Iteration  20: 8895658.249 ops/s
# Warmup Iteration  21: 6780491.656 ops/s
# Warmup Iteration  22: 8969802.793 ops/s
# Warmup Iteration  23: 8828155.231 ops/s
# Warmup Iteration  24: 8594635.196 ops/s
# Warmup Iteration  25: 8640808.082 ops/s
# Warmup Iteration  26: 8806810.145 ops/s
# Warmup Iteration  27: 8466251.627 ops/s
# Warmup Iteration  28: 8612520.527 ops/s
# Warmup Iteration  29: 8630022.035 ops/s
# Warmup Iteration  30: 8608566.724 ops/s
Iteration   1: 8948149.973 ops/s
Iteration   2: 8515565.473 ops/s
Iteration   3: 9015332.005 ops/s
Iteration   4: 8870627.465 ops/s
Iteration   5: 8791185.732 ops/s
Iteration   6: 8421458.245 ops/s
Iteration   7: 8755955.298 ops/s
Iteration   8: 8667830.836 ops/s
Iteration   9: 8470218.131 ops/s
Iteration  10: 8852891.478 ops/s
Iteration  11: 8859321.518 ops/s
Iteration  12: 8604348.404 ops/s
Iteration  13: 8473840.025 ops/s
Iteration  14: 8877142.052 ops/s
Iteration  15: 8665804.249 ops/s
Iteration  16: 8669821.741 ops/s
Iteration  17: 8920073.362 ops/s
Iteration  18: 8341366.826 ops/s
Iteration  19: 8987536.324 ops/s
Iteration  20: 8405597.875 ops/s
Iteration  21: 8932997.075 ops/s
Iteration  22: 8806698.345 ops/s
Iteration  23: 8565473.234 ops/s
Iteration  24: 8720123.693 ops/s
Iteration  25: 8905802.982 ops/s
Iteration  26: 8375137.355 ops/s
Iteration  27: 9125641.343 ops/s
Iteration  28: 9013086.350 ops/s
Iteration  29: 8597653.262 ops/s
Iteration  30: 8596553.089 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_dispose2":
  8725107.791 ±(99.9%) 145185.585 ops/s [Average]
  (min, avg, max) = (8341366.826, 8725107.791, 9125641.343), stdev = 217306.965
  CI (99.9%): [8579922.207, 8870293.376] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
SingleFromCompletionStageTest._Benchmark.benchmark_dispose2  thrpt   30  8725107.791 ± 145185.585  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_firstCompletesBeforeSecond$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_firstCompletesBeforeSecond

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 169732.200 ops/s
# Warmup Iteration   2: 899262.139 ops/s
# Warmup Iteration   3: 1180439.237 ops/s
# Warmup Iteration   4: 1395482.997 ops/s
# Warmup Iteration   5: 1465342.982 ops/s
# Warmup Iteration   6: 1337560.222 ops/s
# Warmup Iteration   7: 1428029.503 ops/s
# Warmup Iteration   8: 1414176.846 ops/s
# Warmup Iteration   9: 1412371.384 ops/s
# Warmup Iteration  10: 1470358.759 ops/s
# Warmup Iteration  11: 1380090.896 ops/s
# Warmup Iteration  12: 1441064.177 ops/s
# Warmup Iteration  13: 1439486.742 ops/s
# Warmup Iteration  14: 1438914.486 ops/s
# Warmup Iteration  15: 1441159.272 ops/s
# Warmup Iteration  16: 1378782.453 ops/s
# Warmup Iteration  17: 1412670.991 ops/s
# Warmup Iteration  18: 1452643.058 ops/s
# Warmup Iteration  19: 1475535.197 ops/s
# Warmup Iteration  20: 1463107.097 ops/s
# Warmup Iteration  21: 1410942.317 ops/s
# Warmup Iteration  22: 1368282.405 ops/s
# Warmup Iteration  23: 1375942.531 ops/s
# Warmup Iteration  24: 1301627.636 ops/s
# Warmup Iteration  25: 1396714.362 ops/s
# Warmup Iteration  26: 1434505.860 ops/s
# Warmup Iteration  27: 1379762.761 ops/s
# Warmup Iteration  28: 1278191.367 ops/s
# Warmup Iteration  29: 1455182.369 ops/s
# Warmup Iteration  30: 1372303.001 ops/s
Iteration   1: 1466371.089 ops/s
Iteration   2: 1367180.809 ops/s
Iteration   3: 1407076.022 ops/s
Iteration   4: 1437069.469 ops/s
Iteration   5: 1346548.299 ops/s
Iteration   6: 1423672.539 ops/s
Iteration   7: 1367997.617 ops/s
Iteration   8: 1426621.835 ops/s
Iteration   9: 1433188.740 ops/s
Iteration  10: 1406086.400 ops/s
Iteration  11: 1391894.512 ops/s
Iteration  12: 1352681.301 ops/s
Iteration  13: 1435223.011 ops/s
Iteration  14: 1445772.659 ops/s
Iteration  15: 1369579.352 ops/s
Iteration  16: 1398498.625 ops/s
Iteration  17: 1428947.622 ops/s
Iteration  18: 1457647.611 ops/s
Iteration  19: 1427295.446 ops/s
Iteration  20: 1477300.414 ops/s
Iteration  21: 1398173.791 ops/s
Iteration  22: 1432214.306 ops/s
Iteration  23: 1431645.023 ops/s
Iteration  24: 1398270.785 ops/s
Iteration  25: 1434046.311 ops/s
Iteration  26: 1398895.955 ops/s
Iteration  27: 1443918.275 ops/s
Iteration  28: 1410572.541 ops/s
Iteration  29: 1451399.836 ops/s
Iteration  30: 1365858.111 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_firstCompletesBeforeSecond":
  1414388.277 ±(99.9%) 22703.824 ops/s [Average]
  (min, avg, max) = (1346548.299, 1414388.277, 1477300.414), stdev = 33982.017
  CI (99.9%): [1391684.453, 1437092.101] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_firstCompletesBeforeSecond  thrpt   30  1414388.277 ± 22703.824  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_seedBadSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_seedBadSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.700 ops/s
# Warmup Iteration   2: 17042.282 ops/s
# Warmup Iteration   3: 27567.952 ops/s
# Warmup Iteration   4: 31572.712 ops/s
# Warmup Iteration   5: 49662.566 ops/s
# Warmup Iteration   6: 53585.206 ops/s
# Warmup Iteration   7: 140316.516 ops/s
# Warmup Iteration   8: 144091.089 ops/s
# Warmup Iteration   9: 152708.923 ops/s
# Warmup Iteration  10: 161204.086 ops/s
# Warmup Iteration  11: 152808.223 ops/s
# Warmup Iteration  12: 158966.758 ops/s
# Warmup Iteration  13: 157376.158 ops/s
# Warmup Iteration  14: 136874.444 ops/s
# Warmup Iteration  15: 148437.489 ops/s
# Warmup Iteration  16: 153089.802 ops/s
# Warmup Iteration  17: 160041.625 ops/s
# Warmup Iteration  18: 155117.839 ops/s
# Warmup Iteration  19: 161078.304 ops/s
# Warmup Iteration  20: 149296.819 ops/s
# Warmup Iteration  21: 153450.036 ops/s
# Warmup Iteration  22: 158445.098 ops/s
# Warmup Iteration  23: 149126.939 ops/s
# Warmup Iteration  24: 147382.270 ops/s
# Warmup Iteration  25: 163031.444 ops/s
# Warmup Iteration  26: 155668.247 ops/s
# Warmup Iteration  27: 162231.674 ops/s
# Warmup Iteration  28: 164207.870 ops/s
# Warmup Iteration  29: 153039.090 ops/s
# Warmup Iteration  30: 160001.499 ops/s
Iteration   1: 155530.922 ops/s
Iteration   2: 162902.190 ops/s
Iteration   3: 158230.332 ops/s
Iteration   4: 155948.899 ops/s
Iteration   5: 162060.657 ops/s
Iteration   6: 162361.126 ops/s
Iteration   7: 151643.860 ops/s
Iteration   8: 165171.150 ops/s
Iteration   9: 155396.187 ops/s
Iteration  10: 161013.318 ops/s
Iteration  11: 165752.491 ops/s
Iteration  12: 155844.330 ops/s
Iteration  13: 161003.773 ops/s
Iteration  14: 161138.097 ops/s
Iteration  15: 152179.327 ops/s
Iteration  16: 163989.208 ops/s
Iteration  17: 153428.805 ops/s
Iteration  18: 162279.934 ops/s
Iteration  19: 157349.696 ops/s
Iteration  20: 159067.705 ops/s
Iteration  21: 163587.536 ops/s
Iteration  22: 154427.386 ops/s
Iteration  23: 163045.527 ops/s
Iteration  24: 158959.711 ops/s
Iteration  25: 155254.361 ops/s
Iteration  26: 163234.081 ops/s
Iteration  27: 158237.399 ops/s
Iteration  28: 160531.246 ops/s
Iteration  29: 156319.629 ops/s
Iteration  30: 163228.212 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_seedBadSource":
  159303.903 ±(99.9%) 2668.535 ops/s [Average]
  (min, avg, max) = (151643.860, 159303.903, 165752.491), stdev = 3994.138
  CI (99.9%): [156635.368, 161972.438] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableReduceTest._Benchmark.benchmark_seedBadSource  thrpt   30  159303.903 ± 2668.535  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissions$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissions

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 170352.898 ops/s
# Warmup Iteration   2: 540937.567 ops/s
# Warmup Iteration   3: 725416.330 ops/s
# Warmup Iteration   4: 705053.216 ops/s
# Warmup Iteration   5: 678506.281 ops/s
# Warmup Iteration   6: 682140.723 ops/s
# Warmup Iteration   7: 724501.319 ops/s
# Warmup Iteration   8: 639642.256 ops/s
# Warmup Iteration   9: 681321.881 ops/s
# Warmup Iteration  10: 701378.984 ops/s
# Warmup Iteration  11: 676368.518 ops/s
# Warmup Iteration  12: 657523.255 ops/s
# Warmup Iteration  13: 713112.369 ops/s
# Warmup Iteration  14: 705719.172 ops/s
# Warmup Iteration  15: 692816.776 ops/s
# Warmup Iteration  16: 688000.631 ops/s
# Warmup Iteration  17: 762388.680 ops/s
# Warmup Iteration  18: 722226.877 ops/s
# Warmup Iteration  19: 742946.262 ops/s
# Warmup Iteration  20: 733067.904 ops/s
# Warmup Iteration  21: 732381.435 ops/s
# Warmup Iteration  22: 735605.627 ops/s
# Warmup Iteration  23: 741824.576 ops/s
# Warmup Iteration  24: 754036.784 ops/s
# Warmup Iteration  25: 725014.043 ops/s
# Warmup Iteration  26: 747100.878 ops/s
# Warmup Iteration  27: 753779.923 ops/s
# Warmup Iteration  28: 679336.949 ops/s
# Warmup Iteration  29: 765076.262 ops/s
# Warmup Iteration  30: 713042.063 ops/s
Iteration   1: 687540.075 ops/s
Iteration   2: 756024.037 ops/s
Iteration   3: 745244.936 ops/s
Iteration   4: 753403.444 ops/s
Iteration   5: 714832.694 ops/s
Iteration   6: 753535.061 ops/s
Iteration   7: 756631.381 ops/s
Iteration   8: 736871.401 ops/s
Iteration   9: 760568.974 ops/s
Iteration  10: 727221.752 ops/s
Iteration  11: 742304.728 ops/s
Iteration  12: 777337.457 ops/s
Iteration  13: 743655.626 ops/s
Iteration  14: 700486.294 ops/s
Iteration  15: 735777.678 ops/s
Iteration  16: 770582.004 ops/s
Iteration  17: 718384.260 ops/s
Iteration  18: 746384.438 ops/s
Iteration  19: 708537.529 ops/s
Iteration  20: 738113.319 ops/s
Iteration  21: 733354.862 ops/s
Iteration  22: 741589.704 ops/s
Iteration  23: 757614.661 ops/s
Iteration  24: 764504.853 ops/s
Iteration  25: 723416.989 ops/s
Iteration  26: 750235.488 ops/s
Iteration  27: 752053.236 ops/s
Iteration  28: 720136.761 ops/s
Iteration  29: 748092.880 ops/s
Iteration  30: 734055.208 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissions":
  739949.724 ±(99.9%) 13766.095 ops/s [Average]
  (min, avg, max) = (687540.075, 739949.724, 777337.457), stdev = 20604.445
  CI (99.9%): [726183.629, 753715.820] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                              Mode  Cnt       Score       Error  Units
ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissions  thrpt   30  739949.724 ± 13766.095  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycleTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycleTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1870395.377 ops/s
# Warmup Iteration   2: 4488682.427 ops/s
# Warmup Iteration   3: 4916711.663 ops/s
# Warmup Iteration   4: 5795524.617 ops/s
# Warmup Iteration   5: 5668289.410 ops/s
# Warmup Iteration   6: 5797593.965 ops/s
# Warmup Iteration   7: 5681678.889 ops/s
# Warmup Iteration   8: 5788001.737 ops/s
# Warmup Iteration   9: 4588626.708 ops/s
# Warmup Iteration  10: 5663935.338 ops/s
# Warmup Iteration  11: 5719221.330 ops/s
# Warmup Iteration  12: 5745541.798 ops/s
# Warmup Iteration  13: 5710913.525 ops/s
# Warmup Iteration  14: 5598519.785 ops/s
# Warmup Iteration  15: 5639493.346 ops/s
# Warmup Iteration  16: 5872273.015 ops/s
# Warmup Iteration  17: 5471700.402 ops/s
# Warmup Iteration  18: 5726977.872 ops/s
# Warmup Iteration  19: 5859968.070 ops/s
# Warmup Iteration  20: 5698699.666 ops/s
# Warmup Iteration  21: 5829258.934 ops/s
# Warmup Iteration  22: 5790218.119 ops/s
# Warmup Iteration  23: 5659334.478 ops/s
# Warmup Iteration  24: 5743557.081 ops/s
# Warmup Iteration  25: 5697867.648 ops/s
# Warmup Iteration  26: 5638802.322 ops/s
# Warmup Iteration  27: 5819379.666 ops/s
# Warmup Iteration  28: 5557490.360 ops/s
# Warmup Iteration  29: 5907722.720 ops/s
# Warmup Iteration  30: 5773910.047 ops/s
Iteration   1: 5723786.018 ops/s
Iteration   2: 5518577.965 ops/s
Iteration   3: 5939996.326 ops/s
Iteration   4: 5804701.050 ops/s
Iteration   5: 5798669.182 ops/s
Iteration   6: 5750354.878 ops/s
Iteration   7: 5814335.925 ops/s
Iteration   8: 5646636.967 ops/s
Iteration   9: 5866872.265 ops/s
Iteration  10: 5779478.700 ops/s
Iteration  11: 5544645.777 ops/s
Iteration  12: 5687521.268 ops/s
Iteration  13: 5901927.945 ops/s
Iteration  14: 5440882.426 ops/s
Iteration  15: 5646791.827 ops/s
Iteration  16: 6023892.074 ops/s
Iteration  17: 5617222.592 ops/s
Iteration  18: 5820463.426 ops/s
Iteration  19: 5706195.033 ops/s
Iteration  20: 5637286.869 ops/s
Iteration  21: 5855021.745 ops/s
Iteration  22: 5716093.417 ops/s
Iteration  23: 5496782.666 ops/s
Iteration  24: 5793139.918 ops/s
Iteration  25: 5622447.667 ops/s
Iteration  26: 5748221.852 ops/s
Iteration  27: 5719427.350 ops/s
Iteration  28: 5587377.280 ops/s
Iteration  29: 5994541.806 ops/s
Iteration  30: 5672492.422 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnLifecycleTest._Benchmark.benchmark_isDisposed":
  5729192.821 ±(99.9%) 95076.845 ops/s [Average]
  (min, avg, max) = (5440882.426, 5729192.821, 6023892.074), stdev = 142306.557
  CI (99.9%): [5634115.976, 5824269.667] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SingleDoOnLifecycleTest._Benchmark.benchmark_isDisposed  thrpt   30  5729192.821 ± 95076.845  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 207524.827 ops/s
# Warmup Iteration   2: 604904.822 ops/s
# Warmup Iteration   3: 686915.989 ops/s
# Warmup Iteration   4: 781858.182 ops/s
# Warmup Iteration   5: 837379.554 ops/s
# Warmup Iteration   6: 812025.399 ops/s
# Warmup Iteration   7: 845572.278 ops/s
# Warmup Iteration   8: 811065.729 ops/s
# Warmup Iteration   9: 808007.550 ops/s
# Warmup Iteration  10: 824906.835 ops/s
# Warmup Iteration  11: 800183.993 ops/s
# Warmup Iteration  12: 801471.121 ops/s
# Warmup Iteration  13: 852391.975 ops/s
# Warmup Iteration  14: 791389.530 ops/s
# Warmup Iteration  15: 857084.204 ops/s
# Warmup Iteration  16: 799520.795 ops/s
# Warmup Iteration  17: 778356.667 ops/s
# Warmup Iteration  18: 831649.920 ops/s
# Warmup Iteration  19: 807289.942 ops/s
# Warmup Iteration  20: 801606.979 ops/s
# Warmup Iteration  21: 809491.785 ops/s
# Warmup Iteration  22: 859302.320 ops/s
# Warmup Iteration  23: 774076.939 ops/s
# Warmup Iteration  24: 811924.032 ops/s
# Warmup Iteration  25: 832203.575 ops/s
# Warmup Iteration  26: 812169.620 ops/s
# Warmup Iteration  27: 836109.275 ops/s
# Warmup Iteration  28: 810105.531 ops/s
# Warmup Iteration  29: 844821.289 ops/s
# Warmup Iteration  30: 826345.290 ops/s
Iteration   1: 841473.795 ops/s
Iteration   2: 822571.022 ops/s
Iteration   3: 812063.954 ops/s
Iteration   4: 829502.719 ops/s
Iteration   5: 804528.351 ops/s
Iteration   6: 818499.411 ops/s
Iteration   7: 828588.131 ops/s
Iteration   8: 802129.235 ops/s
Iteration   9: 826569.194 ops/s
Iteration  10: 827574.635 ops/s
Iteration  11: 834544.722 ops/s
Iteration  12: 798011.702 ops/s
Iteration  13: 847407.283 ops/s
Iteration  14: 804303.062 ops/s
Iteration  15: 799543.415 ops/s
Iteration  16: 843798.203 ops/s
Iteration  17: 814713.506 ops/s
Iteration  18: 859523.020 ops/s
Iteration  19: 818784.628 ops/s
Iteration  20: 825982.184 ops/s
Iteration  21: 869905.049 ops/s
Iteration  22: 784330.365 ops/s
Iteration  23: 871316.890 ops/s
Iteration  24: 823195.373 ops/s
Iteration  25: 802064.036 ops/s
Iteration  26: 852273.248 ops/s
Iteration  27: 803459.165 ops/s
Iteration  28: 846889.692 ops/s
Iteration  29: 832341.652 ops/s
Iteration  30: 829058.677 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normal":
  825831.544 ±(99.9%) 14490.472 ops/s [Average]
  (min, avg, max) = (784330.365, 825831.544, 871316.890), stdev = 21688.658
  CI (99.9%): [811341.072, 840322.016] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_normal  thrpt   30  825831.544 ± 14490.472  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 210627.502 ops/s
# Warmup Iteration   2: 612296.170 ops/s
# Warmup Iteration   3: 627055.061 ops/s
# Warmup Iteration   4: 626393.264 ops/s
# Warmup Iteration   5: 730935.291 ops/s
# Warmup Iteration   6: 722565.035 ops/s
# Warmup Iteration   7: 802556.697 ops/s
# Warmup Iteration   8: 795909.487 ops/s
# Warmup Iteration   9: 829539.646 ops/s
# Warmup Iteration  10: 789585.343 ops/s
# Warmup Iteration  11: 793101.067 ops/s
# Warmup Iteration  12: 797285.841 ops/s
# Warmup Iteration  13: 814670.430 ops/s
# Warmup Iteration  14: 772136.859 ops/s
# Warmup Iteration  15: 828841.489 ops/s
# Warmup Iteration  16: 811288.710 ops/s
# Warmup Iteration  17: 788212.935 ops/s
# Warmup Iteration  18: 815178.351 ops/s
# Warmup Iteration  19: 771010.233 ops/s
# Warmup Iteration  20: 780922.969 ops/s
# Warmup Iteration  21: 817767.103 ops/s
# Warmup Iteration  22: 778743.099 ops/s
# Warmup Iteration  23: 818470.910 ops/s
# Warmup Iteration  24: 764672.995 ops/s
# Warmup Iteration  25: 818082.132 ops/s
# Warmup Iteration  26: 822040.193 ops/s
# Warmup Iteration  27: 780252.939 ops/s
# Warmup Iteration  28: 807261.139 ops/s
# Warmup Iteration  29: 828288.417 ops/s
# Warmup Iteration  30: 778256.507 ops/s
Iteration   1: 817836.759 ops/s
Iteration   2: 805852.368 ops/s
Iteration   3: 781739.739 ops/s
Iteration   4: 784639.741 ops/s
Iteration   5: 796845.499 ops/s
Iteration   6: 773160.076 ops/s
Iteration   7: 776182.814 ops/s
Iteration   8: 825146.946 ops/s
Iteration   9: 772470.099 ops/s
Iteration  10: 815062.789 ops/s
Iteration  11: 788281.867 ops/s
Iteration  12: 818804.591 ops/s
Iteration  13: 779823.308 ops/s
Iteration  14: 780625.887 ops/s
Iteration  15: 807326.299 ops/s
Iteration  16: 783432.976 ops/s
Iteration  17: 821013.281 ops/s
Iteration  18: 794015.729 ops/s
Iteration  19: 810326.228 ops/s
Iteration  20: 786062.164 ops/s
Iteration  21: 788934.715 ops/s
Iteration  22: 796916.419 ops/s
Iteration  23: 817064.165 ops/s
Iteration  24: 787261.093 ops/s
Iteration  25: 816000.144 ops/s
Iteration  26: 776257.647 ops/s
Iteration  27: 812182.925 ops/s
Iteration  28: 800824.701 ops/s
Iteration  29: 790301.205 ops/s
Iteration  30: 816089.757 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalDelayError":
  797349.398 ±(99.9%) 11036.041 ops/s [Average]
  (min, avg, max) = (772470.099, 797349.398, 825146.946), stdev = 16518.227
  CI (99.9%): [786313.357, 808385.438] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_normalDelayError  thrpt   30  797349.398 ± 11036.041  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_fusedInternalsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_fusedInternalsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 183768.955 ops/s
# Warmup Iteration   2: 676493.486 ops/s
# Warmup Iteration   3: 724991.540 ops/s
# Warmup Iteration   4: 854689.658 ops/s
# Warmup Iteration   5: 892486.866 ops/s
# Warmup Iteration   6: 881625.020 ops/s
# Warmup Iteration   7: 892812.470 ops/s
# Warmup Iteration   8: 886654.076 ops/s
# Warmup Iteration   9: 869893.695 ops/s
# Warmup Iteration  10: 879399.551 ops/s
# Warmup Iteration  11: 871559.748 ops/s
# Warmup Iteration  12: 898766.362 ops/s
# Warmup Iteration  13: 927198.335 ops/s
# Warmup Iteration  14: 874401.091 ops/s
# Warmup Iteration  15: 891392.159 ops/s
# Warmup Iteration  16: 905910.163 ops/s
# Warmup Iteration  17: 871846.530 ops/s
# Warmup Iteration  18: 926067.925 ops/s
# Warmup Iteration  19: 874485.994 ops/s
# Warmup Iteration  20: 861500.912 ops/s
# Warmup Iteration  21: 915972.978 ops/s
# Warmup Iteration  22: 883501.938 ops/s
# Warmup Iteration  23: 916880.504 ops/s
# Warmup Iteration  24: 889972.531 ops/s
# Warmup Iteration  25: 867626.766 ops/s
# Warmup Iteration  26: 930569.194 ops/s
# Warmup Iteration  27: 857498.061 ops/s
# Warmup Iteration  28: 908658.455 ops/s
# Warmup Iteration  29: 923203.687 ops/s
# Warmup Iteration  30: 853950.439 ops/s
Iteration   1: 905511.520 ops/s
Iteration   2: 857360.274 ops/s
Iteration   3: 914249.137 ops/s
Iteration   4: 925961.387 ops/s
Iteration   5: 851306.788 ops/s
Iteration   6: 923162.561 ops/s
Iteration   7: 870116.756 ops/s
Iteration   8: 920781.951 ops/s
Iteration   9: 912196.690 ops/s
Iteration  10: 850313.003 ops/s
Iteration  11: 912926.358 ops/s
Iteration  12: 883281.255 ops/s
Iteration  13: 931761.096 ops/s
Iteration  14: 915606.620 ops/s
Iteration  15: 901180.608 ops/s
Iteration  16: 866331.651 ops/s
Iteration  17: 925871.009 ops/s
Iteration  18: 889891.995 ops/s
Iteration  19: 882767.834 ops/s
Iteration  20: 852202.687 ops/s
Iteration  21: 909866.048 ops/s
Iteration  22: 939765.360 ops/s
Iteration  23: 881208.081 ops/s
Iteration  24: 934286.033 ops/s
Iteration  25: 863143.789 ops/s
Iteration  26: 920362.708 ops/s
Iteration  27: 890024.599 ops/s
Iteration  28: 905860.491 ops/s
Iteration  29: 872149.644 ops/s
Iteration  30: 793800.944 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_fusedInternalsObservable":
  893441.629 ±(99.9%) 22068.355 ops/s [Average]
  (min, avg, max) = (793800.944, 893441.629, 939765.360), stdev = 33030.877
  CI (99.9%): [871373.274, 915509.984] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_fusedInternalsObservable  thrpt   30  893441.629 ± 22068.355  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 224067.225 ops/s
# Warmup Iteration   2: 609015.665 ops/s
# Warmup Iteration   3: 662497.699 ops/s
# Warmup Iteration   4: 708216.785 ops/s
# Warmup Iteration   5: 802173.700 ops/s
# Warmup Iteration   6: 756174.002 ops/s
# Warmup Iteration   7: 811482.583 ops/s
# Warmup Iteration   8: 842371.507 ops/s
# Warmup Iteration   9: 824130.247 ops/s
# Warmup Iteration  10: 827024.203 ops/s
# Warmup Iteration  11: 848013.725 ops/s
# Warmup Iteration  12: 851916.189 ops/s
# Warmup Iteration  13: 814813.992 ops/s
# Warmup Iteration  14: 847655.507 ops/s
# Warmup Iteration  15: 799154.436 ops/s
# Warmup Iteration  16: 836017.570 ops/s
# Warmup Iteration  17: 842999.918 ops/s
# Warmup Iteration  18: 807527.086 ops/s
# Warmup Iteration  19: 842888.955 ops/s
# Warmup Iteration  20: 828028.030 ops/s
# Warmup Iteration  21: 839600.595 ops/s
# Warmup Iteration  22: 824574.853 ops/s
# Warmup Iteration  23: 814019.514 ops/s
# Warmup Iteration  24: 851393.920 ops/s
# Warmup Iteration  25: 805246.561 ops/s
# Warmup Iteration  26: 828016.921 ops/s
# Warmup Iteration  27: 840365.148 ops/s
# Warmup Iteration  28: 799485.219 ops/s
# Warmup Iteration  29: 823086.321 ops/s
# Warmup Iteration  30: 866639.665 ops/s
Iteration   1: 806053.469 ops/s
Iteration   2: 821830.458 ops/s
Iteration   3: 840652.288 ops/s
Iteration   4: 824983.342 ops/s
Iteration   5: 846436.771 ops/s
Iteration   6: 832221.828 ops/s
Iteration   7: 798890.402 ops/s
Iteration   8: 836556.152 ops/s
Iteration   9: 809528.793 ops/s
Iteration  10: 844118.236 ops/s
Iteration  11: 807305.922 ops/s
Iteration  12: 839797.689 ops/s
Iteration  13: 847305.331 ops/s
Iteration  14: 789299.170 ops/s
Iteration  15: 816645.792 ops/s
Iteration  16: 862102.157 ops/s
Iteration  17: 803042.202 ops/s
Iteration  18: 852336.604 ops/s
Iteration  19: 803794.342 ops/s
Iteration  20: 823827.939 ops/s
Iteration  21: 854745.117 ops/s
Iteration  22: 842333.194 ops/s
Iteration  23: 815792.817 ops/s
Iteration  24: 821989.578 ops/s
Iteration  25: 870935.105 ops/s
Iteration  26: 808950.520 ops/s
Iteration  27: 844807.647 ops/s
Iteration  28: 845813.017 ops/s
Iteration  29: 805623.971 ops/s
Iteration  30: 840300.055 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_normalObservable":
  828600.664 ±(99.9%) 13964.707 ops/s [Average]
  (min, avg, max) = (789299.170, 828600.664, 870935.105), stdev = 20901.718
  CI (99.9%): [814635.957, 842565.371] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_normalObservable  thrpt   30  828600.664 ± 13964.707  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambIterableOrder$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambIterableOrder

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162145.082 ops/s
# Warmup Iteration   2: 524338.132 ops/s
# Warmup Iteration   3: 597911.579 ops/s
# Warmup Iteration   4: 600459.716 ops/s
# Warmup Iteration   5: 650360.144 ops/s
# Warmup Iteration   6: 611010.860 ops/s
# Warmup Iteration   7: 666924.398 ops/s
# Warmup Iteration   8: 685145.003 ops/s
# Warmup Iteration   9: 665232.570 ops/s
# Warmup Iteration  10: 680182.067 ops/s
# Warmup Iteration  11: 670252.849 ops/s
# Warmup Iteration  12: 673368.186 ops/s
# Warmup Iteration  13: 691299.431 ops/s
# Warmup Iteration  14: 658972.253 ops/s
# Warmup Iteration  15: 696329.587 ops/s
# Warmup Iteration  16: 662699.260 ops/s
# Warmup Iteration  17: 741467.576 ops/s
# Warmup Iteration  18: 706213.936 ops/s
# Warmup Iteration  19: 715706.311 ops/s
# Warmup Iteration  20: 728163.988 ops/s
# Warmup Iteration  21: 687316.881 ops/s
# Warmup Iteration  22: 696381.804 ops/s
# Warmup Iteration  23: 720117.305 ops/s
# Warmup Iteration  24: 682597.886 ops/s
# Warmup Iteration  25: 715094.077 ops/s
# Warmup Iteration  26: 724372.381 ops/s
# Warmup Iteration  27: 700133.389 ops/s
# Warmup Iteration  28: 705695.108 ops/s
# Warmup Iteration  29: 734288.345 ops/s
# Warmup Iteration  30: 685454.099 ops/s
Iteration   1: 726912.498 ops/s
Iteration   2: 692827.510 ops/s
Iteration   3: 753258.923 ops/s
Iteration   4: 707566.085 ops/s
Iteration   5: 699762.328 ops/s
Iteration   6: 713184.688 ops/s
Iteration   7: 719434.351 ops/s
Iteration   8: 704746.415 ops/s
Iteration   9: 727074.283 ops/s
Iteration  10: 692670.999 ops/s
Iteration  11: 721814.877 ops/s
Iteration  12: 714516.967 ops/s
Iteration  13: 709739.921 ops/s
Iteration  14: 714719.436 ops/s
Iteration  15: 699005.470 ops/s
Iteration  16: 735657.236 ops/s
Iteration  17: 697553.211 ops/s
Iteration  18: 728628.640 ops/s
Iteration  19: 711668.463 ops/s
Iteration  20: 740001.367 ops/s
Iteration  21: 737831.150 ops/s
Iteration  22: 689940.400 ops/s
Iteration  23: 743126.926 ops/s
Iteration  24: 694019.954 ops/s
Iteration  25: 581281.257 ops/s
Iteration  26: 716348.734 ops/s
Iteration  27: 696236.075 ops/s
Iteration  28: 723632.730 ops/s
Iteration  29: 719568.150 ops/s
Iteration  30: 715844.079 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambIterableOrder":
  710952.437 ±(99.9%) 19718.296 ops/s [Average]
  (min, avg, max) = (581281.257, 710952.437, 753258.923), stdev = 29513.419
  CI (99.9%): [691234.142, 730670.733] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
CompletableAmbTest._Benchmark.benchmark_ambIterableOrder  thrpt   30  710952.437 ± 19718.296  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambFirstDone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambFirstDone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 551112.305 ops/s
# Warmup Iteration   2: 2688094.208 ops/s
# Warmup Iteration   3: 3520558.618 ops/s
# Warmup Iteration   4: 4834650.445 ops/s
# Warmup Iteration   5: 5094855.162 ops/s
# Warmup Iteration   6: 4927606.811 ops/s
# Warmup Iteration   7: 5211452.985 ops/s
# Warmup Iteration   8: 4934029.704 ops/s
# Warmup Iteration   9: 4884563.420 ops/s
# Warmup Iteration  10: 5171112.712 ops/s
# Warmup Iteration  11: 4961861.615 ops/s
# Warmup Iteration  12: 5072712.732 ops/s
# Warmup Iteration  13: 5082027.870 ops/s
# Warmup Iteration  14: 5073928.446 ops/s
# Warmup Iteration  15: 5190284.209 ops/s
# Warmup Iteration  16: 4916307.016 ops/s
# Warmup Iteration  17: 4947496.534 ops/s
# Warmup Iteration  18: 5114919.098 ops/s
# Warmup Iteration  19: 4990776.890 ops/s
# Warmup Iteration  20: 5213062.684 ops/s
# Warmup Iteration  21: 4935929.694 ops/s
# Warmup Iteration  22: 5318201.895 ops/s
# Warmup Iteration  23: 5074253.967 ops/s
# Warmup Iteration  24: 4798083.188 ops/s
# Warmup Iteration  25: 5078375.977 ops/s
# Warmup Iteration  26: 4887361.574 ops/s
# Warmup Iteration  27: 5007792.640 ops/s
# Warmup Iteration  28: 5216123.053 ops/s
# Warmup Iteration  29: 4925101.018 ops/s
# Warmup Iteration  30: 5325302.323 ops/s
Iteration   1: 4873480.108 ops/s
Iteration   2: 5038299.896 ops/s
Iteration   3: 5236688.854 ops/s
Iteration   4: 4880420.116 ops/s
Iteration   5: 5061943.344 ops/s
Iteration   6: 4923243.710 ops/s
Iteration   7: 5228835.306 ops/s
Iteration   8: 5211769.820 ops/s
Iteration   9: 5079913.977 ops/s
Iteration  10: 5051431.733 ops/s
Iteration  11: 4914233.661 ops/s
Iteration  12: 5169986.244 ops/s
Iteration  13: 5015904.798 ops/s
Iteration  14: 4999305.996 ops/s
Iteration  15: 5167410.020 ops/s
Iteration  16: 4905116.126 ops/s
Iteration  17: 5168220.009 ops/s
Iteration  18: 4947220.675 ops/s
Iteration  19: 4940750.884 ops/s
Iteration  20: 5054572.938 ops/s
Iteration  21: 4976438.807 ops/s
Iteration  22: 5021561.209 ops/s
Iteration  23: 5037881.826 ops/s
Iteration  24: 5033693.147 ops/s
Iteration  25: 5235180.679 ops/s
Iteration  26: 5286274.654 ops/s
Iteration  27: 4968763.470 ops/s
Iteration  28: 5094454.368 ops/s
Iteration  29: 5063944.675 ops/s
Iteration  30: 4980895.079 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambFirstDone":
  5052261.204 ±(99.9%) 77293.951 ops/s [Average]
  (min, avg, max) = (4873480.108, 5052261.204, 5286274.654), stdev = 115689.956
  CI (99.9%): [4974967.253, 5129555.155] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
CompletableAmbTest._Benchmark.benchmark_ambFirstDone  thrpt   30  5052261.204 ± 77293.951  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_completableSourcesInIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_completableSourcesInIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 431028.733 ops/s
# Warmup Iteration   2: 2606142.800 ops/s
# Warmup Iteration   3: 3397217.750 ops/s
# Warmup Iteration   4: 4528364.452 ops/s
# Warmup Iteration   5: 4839019.252 ops/s
# Warmup Iteration   6: 4831427.298 ops/s
# Warmup Iteration   7: 4910874.700 ops/s
# Warmup Iteration   8: 4712496.557 ops/s
# Warmup Iteration   9: 4836990.856 ops/s
# Warmup Iteration  10: 4835030.178 ops/s
# Warmup Iteration  11: 4735800.852 ops/s
# Warmup Iteration  12: 4737931.442 ops/s
# Warmup Iteration  13: 5054422.405 ops/s
# Warmup Iteration  14: 4609939.391 ops/s
# Warmup Iteration  15: 4842502.656 ops/s
# Warmup Iteration  16: 4856088.288 ops/s
# Warmup Iteration  17: 4882216.355 ops/s
# Warmup Iteration  18: 5051659.853 ops/s
# Warmup Iteration  19: 4766260.301 ops/s
# Warmup Iteration  20: 4875475.804 ops/s
# Warmup Iteration  21: 4624715.757 ops/s
# Warmup Iteration  22: 4979982.024 ops/s
# Warmup Iteration  23: 5147289.656 ops/s
# Warmup Iteration  24: 4736196.796 ops/s
# Warmup Iteration  25: 4778434.729 ops/s
# Warmup Iteration  26: 4859353.591 ops/s
# Warmup Iteration  27: 4822127.824 ops/s
# Warmup Iteration  28: 4712257.088 ops/s
# Warmup Iteration  29: 4928417.853 ops/s
# Warmup Iteration  30: 4755378.024 ops/s
Iteration   1: 5118155.449 ops/s
Iteration   2: 4997415.191 ops/s
Iteration   3: 4674640.090 ops/s
Iteration   4: 4922910.713 ops/s
Iteration   5: 4826429.480 ops/s
Iteration   6: 4746563.092 ops/s
Iteration   7: 4964603.767 ops/s
Iteration   8: 4881620.182 ops/s
Iteration   9: 4985028.441 ops/s
Iteration  10: 4664530.174 ops/s
Iteration  11: 5004803.422 ops/s
Iteration  12: 4874954.562 ops/s
Iteration  13: 4701094.491 ops/s
Iteration  14: 5029488.723 ops/s
Iteration  15: 4872421.677 ops/s
Iteration  16: 4815647.550 ops/s
Iteration  17: 4863816.841 ops/s
Iteration  18: 5017564.827 ops/s
Iteration  19: 3910407.916 ops/s
Iteration  20: 4875942.691 ops/s
Iteration  21: 4805624.600 ops/s
Iteration  22: 4999122.080 ops/s
Iteration  23: 4776141.637 ops/s
Iteration  24: 4963053.783 ops/s
Iteration  25: 4786946.882 ops/s
Iteration  26: 4932986.102 ops/s
Iteration  27: 4981461.194 ops/s
Iteration  28: 4612473.326 ops/s
Iteration  29: 5109167.045 ops/s
Iteration  30: 4774932.305 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_completableSourcesInIterable":
  4849664.941 ±(99.9%) 146794.405 ops/s [Average]
  (min, avg, max) = (3910407.916, 4849664.941, 5118155.449), stdev = 219714.971
  CI (99.9%): [4702870.536, 4996459.346] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
CompletableAmbTest._Benchmark.benchmark_completableSourcesInIterable  thrpt   30  4849664.941 ± 146794.405  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35390.803 ops/s
# Warmup Iteration   2: 172552.121 ops/s
# Warmup Iteration   3: 205060.373 ops/s
# Warmup Iteration   4: 210670.927 ops/s
# Warmup Iteration   5: 198359.430 ops/s
# Warmup Iteration   6: 215147.193 ops/s
# Warmup Iteration   7: 224419.167 ops/s
# Warmup Iteration   8: 228570.845 ops/s
# Warmup Iteration   9: 220576.557 ops/s
# Warmup Iteration  10: 229594.669 ops/s
# Warmup Iteration  11: 223972.462 ops/s
# Warmup Iteration  12: 215317.828 ops/s
# Warmup Iteration  13: 221377.788 ops/s
# Warmup Iteration  14: 223213.666 ops/s
# Warmup Iteration  15: 219931.706 ops/s
# Warmup Iteration  16: 212146.061 ops/s
# Warmup Iteration  17: 231552.101 ops/s
# Warmup Iteration  18: 227694.657 ops/s
# Warmup Iteration  19: 236145.185 ops/s
# Warmup Iteration  20: 223861.530 ops/s
# Warmup Iteration  21: 228538.038 ops/s
# Warmup Iteration  22: 228668.884 ops/s
# Warmup Iteration  23: 234083.282 ops/s
# Warmup Iteration  24: 232860.071 ops/s
# Warmup Iteration  25: 227930.282 ops/s
# Warmup Iteration  26: 227649.298 ops/s
# Warmup Iteration  27: 237217.123 ops/s
# Warmup Iteration  28: 224949.236 ops/s
# Warmup Iteration  29: 231304.895 ops/s
# Warmup Iteration  30: 229668.341 ops/s
Iteration   1: 233234.569 ops/s
Iteration   2: 227344.873 ops/s
Iteration   3: 235511.042 ops/s
Iteration   4: 225302.832 ops/s
Iteration   5: 227351.160 ops/s
Iteration   6: 236454.346 ops/s
Iteration   7: 223796.313 ops/s
Iteration   8: 228854.432 ops/s
Iteration   9: 241942.571 ops/s
Iteration  10: 223293.838 ops/s
Iteration  11: 232329.813 ops/s
Iteration  12: 224957.078 ops/s
Iteration  13: 233107.325 ops/s
Iteration  14: 231988.694 ops/s
Iteration  15: 227728.104 ops/s
Iteration  16: 236034.110 ops/s
Iteration  17: 220028.594 ops/s
Iteration  18: 240951.663 ops/s
Iteration  19: 229456.170 ops/s
Iteration  20: 235847.247 ops/s
Iteration  21: 229598.846 ops/s
Iteration  22: 221024.760 ops/s
Iteration  23: 233822.580 ops/s
Iteration  24: 230198.597 ops/s
Iteration  25: 225989.722 ops/s
Iteration  26: 235820.983 ops/s
Iteration  27: 224301.030 ops/s
Iteration  28: 237800.298 ops/s
Iteration  29: 227153.588 ops/s
Iteration  30: 220085.393 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_badSource":
  230043.686 ±(99.9%) 3983.474 ops/s [Average]
  (min, avg, max) = (220028.594, 230043.686, 241942.571), stdev = 5962.278
  CI (99.9%): [226060.211, 234027.160] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_badSource  thrpt   30  230043.686 ± 3983.474  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableMainComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableMainComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 442504.640 ops/s
# Warmup Iteration   2: 1477050.812 ops/s
# Warmup Iteration   3: 1594443.519 ops/s
# Warmup Iteration   4: 1887461.936 ops/s
# Warmup Iteration   5: 2033837.446 ops/s
# Warmup Iteration   6: 1994202.993 ops/s
# Warmup Iteration   7: 2002717.882 ops/s
# Warmup Iteration   8: 1955042.604 ops/s
# Warmup Iteration   9: 1980111.175 ops/s
# Warmup Iteration  10: 1975411.957 ops/s
# Warmup Iteration  11: 2007572.976 ops/s
# Warmup Iteration  12: 1991117.521 ops/s
# Warmup Iteration  13: 1958315.371 ops/s
# Warmup Iteration  14: 2061864.700 ops/s
# Warmup Iteration  15: 1944399.686 ops/s
# Warmup Iteration  16: 2068604.128 ops/s
# Warmup Iteration  17: 1949586.163 ops/s
# Warmup Iteration  18: 1936754.598 ops/s
# Warmup Iteration  19: 2104849.356 ops/s
# Warmup Iteration  20: 1988155.525 ops/s
# Warmup Iteration  21: 2062324.086 ops/s
# Warmup Iteration  22: 2034636.763 ops/s
# Warmup Iteration  23: 1876740.404 ops/s
# Warmup Iteration  24: 2068687.062 ops/s
# Warmup Iteration  25: 1938263.453 ops/s
# Warmup Iteration  26: 1955917.552 ops/s
# Warmup Iteration  27: 1973607.876 ops/s
# Warmup Iteration  28: 2002164.558 ops/s
# Warmup Iteration  29: 1931325.550 ops/s
# Warmup Iteration  30: 2048019.023 ops/s
Iteration   1: 1954046.872 ops/s
Iteration   2: 2058983.904 ops/s
Iteration   3: 1965033.781 ops/s
Iteration   4: 1972144.582 ops/s
Iteration   5: 2064498.472 ops/s
Iteration   6: 1911800.030 ops/s
Iteration   7: 2088020.835 ops/s
Iteration   8: 2068709.090 ops/s
Iteration   9: 1931653.164 ops/s
Iteration  10: 2041185.667 ops/s
Iteration  11: 2028825.215 ops/s
Iteration  12: 2022935.538 ops/s
Iteration  13: 1934545.216 ops/s
Iteration  14: 1653900.810 ops/s
Iteration  15: 2041523.325 ops/s
Iteration  16: 1994235.950 ops/s
Iteration  17: 1960457.886 ops/s
Iteration  18: 1987151.883 ops/s
Iteration  19: 2069943.219 ops/s
Iteration  20: 1975439.546 ops/s
Iteration  21: 2064064.103 ops/s
Iteration  22: 1882192.120 ops/s
Iteration  23: 2052239.783 ops/s
Iteration  24: 1953917.752 ops/s
Iteration  25: 2014941.127 ops/s
Iteration  26: 1966140.352 ops/s
Iteration  27: 1939035.206 ops/s
Iteration  28: 2033606.027 ops/s
Iteration  29: 1955947.490 ops/s
Iteration  30: 2026764.933 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableMainComplete":
  1987129.463 ±(99.9%) 55415.852 ops/s [Average]
  (min, avg, max) = (1653900.810, 1987129.463, 2088020.835), stdev = 82943.845
  CI (99.9%): [1931713.611, 2042545.315] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
CompletableAmbTest._Benchmark.benchmark_untilCompletableMainComplete  thrpt   30  1987129.463 ± 55415.852  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableOtherOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableOtherOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 267669.534 ops/s
# Warmup Iteration   2: 1366747.759 ops/s
# Warmup Iteration   3: 1659852.196 ops/s
# Warmup Iteration   4: 1748601.058 ops/s
# Warmup Iteration   5: 1830776.154 ops/s
# Warmup Iteration   6: 2018974.076 ops/s
# Warmup Iteration   7: 1965033.343 ops/s
# Warmup Iteration   8: 2054766.126 ops/s
# Warmup Iteration   9: 1967988.494 ops/s
# Warmup Iteration  10: 2094911.062 ops/s
# Warmup Iteration  11: 1925099.750 ops/s
# Warmup Iteration  12: 2049504.112 ops/s
# Warmup Iteration  13: 2009073.245 ops/s
# Warmup Iteration  14: 2036282.777 ops/s
# Warmup Iteration  15: 2055301.598 ops/s
# Warmup Iteration  16: 1972672.630 ops/s
# Warmup Iteration  17: 2049127.368 ops/s
# Warmup Iteration  18: 1981090.518 ops/s
# Warmup Iteration  19: 2037160.529 ops/s
# Warmup Iteration  20: 2075796.124 ops/s
# Warmup Iteration  21: 2017154.743 ops/s
# Warmup Iteration  22: 2027017.329 ops/s
# Warmup Iteration  23: 2049755.982 ops/s
# Warmup Iteration  24: 2063973.638 ops/s
# Warmup Iteration  25: 1986762.366 ops/s
# Warmup Iteration  26: 2094014.587 ops/s
# Warmup Iteration  27: 1983269.903 ops/s
# Warmup Iteration  28: 2035764.586 ops/s
# Warmup Iteration  29: 2051478.439 ops/s
# Warmup Iteration  30: 1977444.332 ops/s
Iteration   1: 2029787.042 ops/s
Iteration   2: 2016482.595 ops/s
Iteration   3: 2026799.741 ops/s
Iteration   4: 1992279.485 ops/s
Iteration   5: 2050734.058 ops/s
Iteration   6: 2011093.085 ops/s
Iteration   7: 1990353.368 ops/s
Iteration   8: 2053430.404 ops/s
Iteration   9: 1983591.453 ops/s
Iteration  10: 2049918.368 ops/s
Iteration  11: 1989730.764 ops/s
Iteration  12: 2040860.265 ops/s
Iteration  13: 2061968.802 ops/s
Iteration  14: 1937518.213 ops/s
Iteration  15: 1994413.583 ops/s
Iteration  16: 2030184.109 ops/s
Iteration  17: 1974746.907 ops/s
Iteration  18: 2063155.715 ops/s
Iteration  19: 2105228.304 ops/s
Iteration  20: 2002432.927 ops/s
Iteration  21: 1974866.050 ops/s
Iteration  22: 2054217.165 ops/s
Iteration  23: 2103094.980 ops/s
Iteration  24: 2047750.269 ops/s
Iteration  25: 1947949.281 ops/s
Iteration  26: 2059425.602 ops/s
Iteration  27: 1974664.177 ops/s
Iteration  28: 1974033.064 ops/s
Iteration  29: 2047542.581 ops/s
Iteration  30: 1988430.380 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableOtherOnComplete":
  2019222.758 ±(99.9%) 28251.771 ops/s [Average]
  (min, avg, max) = (1937518.213, 2019222.758, 2105228.304), stdev = 42285.925
  CI (99.9%): [1990970.986, 2047474.529] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
CompletableAmbTest._Benchmark.benchmark_untilCompletableOtherOnComplete  thrpt   30  2019222.758 ± 28251.771  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_iterableCompleteLater$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_iterableCompleteLater

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 293595.199 ops/s
# Warmup Iteration   2: 1021407.291 ops/s
# Warmup Iteration   3: 1512981.245 ops/s
# Warmup Iteration   4: 1459710.110 ops/s
# Warmup Iteration   5: 1531699.820 ops/s
# Warmup Iteration   6: 1436893.466 ops/s
# Warmup Iteration   7: 1373365.074 ops/s
# Warmup Iteration   8: 1393816.994 ops/s
# Warmup Iteration   9: 1375669.866 ops/s
# Warmup Iteration  10: 1532758.469 ops/s
# Warmup Iteration  11: 1479504.981 ops/s
# Warmup Iteration  12: 1530639.622 ops/s
# Warmup Iteration  13: 1558593.921 ops/s
# Warmup Iteration  14: 1455312.071 ops/s
# Warmup Iteration  15: 1555287.254 ops/s
# Warmup Iteration  16: 1502054.079 ops/s
# Warmup Iteration  17: 1480969.079 ops/s
# Warmup Iteration  18: 1517772.400 ops/s
# Warmup Iteration  19: 1512465.018 ops/s
# Warmup Iteration  20: 1437681.775 ops/s
# Warmup Iteration  21: 1525111.503 ops/s
# Warmup Iteration  22: 1508933.575 ops/s
# Warmup Iteration  23: 1548930.719 ops/s
# Warmup Iteration  24: 1477700.789 ops/s
# Warmup Iteration  25: 1488731.849 ops/s
# Warmup Iteration  26: 1547198.567 ops/s
# Warmup Iteration  27: 1474913.209 ops/s
# Warmup Iteration  28: 1483997.466 ops/s
# Warmup Iteration  29: 1527428.782 ops/s
# Warmup Iteration  30: 1489058.333 ops/s
Iteration   1: 1532865.831 ops/s
Iteration   2: 1480911.833 ops/s
Iteration   3: 1464245.524 ops/s
Iteration   4: 1463047.031 ops/s
Iteration   5: 1524305.252 ops/s
Iteration   6: 1511423.491 ops/s
Iteration   7: 1445547.430 ops/s
Iteration   8: 1417483.287 ops/s
Iteration   9: 1367204.064 ops/s
Iteration  10: 1492571.689 ops/s
Iteration  11: 1446394.109 ops/s
Iteration  12: 1524421.104 ops/s
Iteration  13: 1505939.330 ops/s
Iteration  14: 1458196.961 ops/s
Iteration  15: 1464592.231 ops/s
Iteration  16: 1525545.568 ops/s
Iteration  17: 1417689.872 ops/s
Iteration  18: 1516205.304 ops/s
Iteration  19: 1481655.387 ops/s
Iteration  20: 1559205.352 ops/s
Iteration  21: 1534793.822 ops/s
Iteration  22: 1471725.130 ops/s
Iteration  23: 1523809.022 ops/s
Iteration  24: 1467221.981 ops/s
Iteration  25: 1570275.831 ops/s
Iteration  26: 1435292.736 ops/s
Iteration  27: 1474495.433 ops/s
Iteration  28: 1531470.122 ops/s
Iteration  29: 1486744.021 ops/s
Iteration  30: 1514285.802 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_iterableCompleteLater":
  1486985.485 ±(99.9%) 30396.921 ops/s [Average]
  (min, avg, max) = (1367204.064, 1486985.485, 1570275.831), stdev = 45496.684
  CI (99.9%): [1456588.564, 1517382.406] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_iterableCompleteLater  thrpt   30  1486985.485 ± 30396.921  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112128.180 ops/s
# Warmup Iteration   2: 381534.054 ops/s
# Warmup Iteration   3: 474568.217 ops/s
# Warmup Iteration   4: 469624.816 ops/s
# Warmup Iteration   5: 484168.063 ops/s
# Warmup Iteration   6: 530955.686 ops/s
# Warmup Iteration   7: 519227.240 ops/s
# Warmup Iteration   8: 537334.356 ops/s
# Warmup Iteration   9: 519963.857 ops/s
# Warmup Iteration  10: 525889.478 ops/s
# Warmup Iteration  11: 518349.252 ops/s
# Warmup Iteration  12: 528626.802 ops/s
# Warmup Iteration  13: 546297.845 ops/s
# Warmup Iteration  14: 513021.817 ops/s
# Warmup Iteration  15: 545449.672 ops/s
# Warmup Iteration  16: 523989.211 ops/s
# Warmup Iteration  17: 551689.281 ops/s
# Warmup Iteration  18: 563381.661 ops/s
# Warmup Iteration  19: 536396.746 ops/s
# Warmup Iteration  20: 548937.991 ops/s
# Warmup Iteration  21: 538579.666 ops/s
# Warmup Iteration  22: 549318.053 ops/s
# Warmup Iteration  23: 556595.954 ops/s
# Warmup Iteration  24: 578288.191 ops/s
# Warmup Iteration  25: 535069.650 ops/s
# Warmup Iteration  26: 566387.545 ops/s
# Warmup Iteration  27: 536514.837 ops/s
# Warmup Iteration  28: 559499.731 ops/s
# Warmup Iteration  29: 553679.627 ops/s
# Warmup Iteration  30: 546289.571 ops/s
Iteration   1: 561844.127 ops/s
Iteration   2: 535264.194 ops/s
Iteration   3: 553858.920 ops/s
Iteration   4: 567635.075 ops/s
Iteration   5: 537995.987 ops/s
Iteration   6: 539631.574 ops/s
Iteration   7: 541270.246 ops/s
Iteration   8: 553565.191 ops/s
Iteration   9: 569887.257 ops/s
Iteration  10: 552384.028 ops/s
Iteration  11: 527840.937 ops/s
Iteration  12: 569598.001 ops/s
Iteration  13: 569320.652 ops/s
Iteration  14: 544074.421 ops/s
Iteration  15: 540774.455 ops/s
Iteration  16: 538177.179 ops/s
Iteration  17: 557842.134 ops/s
Iteration  18: 550135.956 ops/s
Iteration  19: 542960.333 ops/s
Iteration  20: 549144.420 ops/s
Iteration  21: 562998.860 ops/s
Iteration  22: 536778.245 ops/s
Iteration  23: 542552.544 ops/s
Iteration  24: 552763.659 ops/s
Iteration  25: 530486.929 ops/s
Iteration  26: 561120.025 ops/s
Iteration  27: 557939.069 ops/s
Iteration  28: 528871.304 ops/s
Iteration  29: 562700.313 ops/s
Iteration  30: 575231.234 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableMainError":
  550488.242 ±(99.9%) 8995.162 ops/s [Average]
  (min, avg, max) = (527840.937, 550488.242, 575231.234), stdev = 13463.537
  CI (99.9%): [541493.080, 559483.405] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
CompletableAmbTest._Benchmark.benchmark_untilCompletableMainError  thrpt   30  550488.242 ± 8995.162  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 129045.447 ops/s
# Warmup Iteration   2: 285011.211 ops/s
# Warmup Iteration   3: 498794.808 ops/s
# Warmup Iteration   4: 522867.161 ops/s
# Warmup Iteration   5: 487065.162 ops/s
# Warmup Iteration   6: 499305.488 ops/s
# Warmup Iteration   7: 470952.275 ops/s
# Warmup Iteration   8: 529253.289 ops/s
# Warmup Iteration   9: 525356.319 ops/s
# Warmup Iteration  10: 521910.023 ops/s
# Warmup Iteration  11: 522798.569 ops/s
# Warmup Iteration  12: 528628.511 ops/s
# Warmup Iteration  13: 524400.298 ops/s
# Warmup Iteration  14: 530501.613 ops/s
# Warmup Iteration  15: 510322.135 ops/s
# Warmup Iteration  16: 537970.251 ops/s
# Warmup Iteration  17: 547541.633 ops/s
# Warmup Iteration  18: 553658.586 ops/s
# Warmup Iteration  19: 531648.466 ops/s
# Warmup Iteration  20: 550904.299 ops/s
# Warmup Iteration  21: 568846.329 ops/s
# Warmup Iteration  22: 543168.747 ops/s
# Warmup Iteration  23: 557577.357 ops/s
# Warmup Iteration  24: 551869.332 ops/s
# Warmup Iteration  25: 545504.836 ops/s
# Warmup Iteration  26: 558114.738 ops/s
# Warmup Iteration  27: 531230.624 ops/s
# Warmup Iteration  28: 542634.391 ops/s
# Warmup Iteration  29: 531609.945 ops/s
# Warmup Iteration  30: 554772.364 ops/s
Iteration   1: 540117.932 ops/s
Iteration   2: 551747.339 ops/s
Iteration   3: 474318.334 ops/s
Iteration   4: 549157.243 ops/s
Iteration   5: 528790.625 ops/s
Iteration   6: 556551.044 ops/s
Iteration   7: 531565.254 ops/s
Iteration   8: 553204.497 ops/s
Iteration   9: 542381.187 ops/s
Iteration  10: 559537.709 ops/s
Iteration  11: 536376.164 ops/s
Iteration  12: 553314.498 ops/s
Iteration  13: 550448.150 ops/s
Iteration  14: 538268.202 ops/s
Iteration  15: 532258.712 ops/s
Iteration  16: 568908.994 ops/s
Iteration  17: 534251.903 ops/s
Iteration  18: 562857.942 ops/s
Iteration  19: 547272.453 ops/s
Iteration  20: 554010.318 ops/s
Iteration  21: 564240.294 ops/s
Iteration  22: 527474.994 ops/s
Iteration  23: 552830.407 ops/s
Iteration  24: 556267.112 ops/s
Iteration  25: 551641.294 ops/s
Iteration  26: 563682.754 ops/s
Iteration  27: 539565.678 ops/s
Iteration  28: 555365.697 ops/s
Iteration  29: 537546.502 ops/s
Iteration  30: 546744.666 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_untilCompletableOtherError":
  545356.597 ±(99.9%) 11683.563 ops/s [Average]
  (min, avg, max) = (474318.334, 545356.597, 568908.994), stdev = 17487.408
  CI (99.9%): [533673.034, 557040.159] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
CompletableAmbTest._Benchmark.benchmark_untilCompletableOtherError  thrpt   30  545356.597 ± 11683.563  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_cancelAfterFirstDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_cancelAfterFirstDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 459033.442 ops/s
# Warmup Iteration   2: 1936361.453 ops/s
# Warmup Iteration   3: 2521065.414 ops/s
# Warmup Iteration   4: 2467541.727 ops/s
# Warmup Iteration   5: 2546659.789 ops/s
# Warmup Iteration   6: 2377092.753 ops/s
# Warmup Iteration   7: 2471575.890 ops/s
# Warmup Iteration   8: 2463656.077 ops/s
# Warmup Iteration   9: 2437179.492 ops/s
# Warmup Iteration  10: 2485816.748 ops/s
# Warmup Iteration  11: 2434778.263 ops/s
# Warmup Iteration  12: 2569018.582 ops/s
# Warmup Iteration  13: 2553222.411 ops/s
# Warmup Iteration  14: 2410146.525 ops/s
# Warmup Iteration  15: 2560775.235 ops/s
# Warmup Iteration  16: 2404431.632 ops/s
# Warmup Iteration  17: 2546104.111 ops/s
# Warmup Iteration  18: 2316852.588 ops/s
# Warmup Iteration  19: 2422165.395 ops/s
# Warmup Iteration  20: 2596707.539 ops/s
# Warmup Iteration  21: 2412199.428 ops/s
# Warmup Iteration  22: 2567340.504 ops/s
# Warmup Iteration  23: 2417610.370 ops/s
# Warmup Iteration  24: 2480273.280 ops/s
# Warmup Iteration  25: 2542663.251 ops/s
# Warmup Iteration  26: 2447970.040 ops/s
# Warmup Iteration  27: 2537984.001 ops/s
# Warmup Iteration  28: 2396920.107 ops/s
# Warmup Iteration  29: 2460056.068 ops/s
# Warmup Iteration  30: 2493775.146 ops/s
Iteration   1: 2518927.933 ops/s
Iteration   2: 2476163.924 ops/s
Iteration   3: 2562617.219 ops/s
Iteration   4: 2439376.330 ops/s
Iteration   5: 2554577.974 ops/s
Iteration   6: 2542628.256 ops/s
Iteration   7: 2507356.794 ops/s
Iteration   8: 2482955.764 ops/s
Iteration   9: 2486968.705 ops/s
Iteration  10: 2540968.825 ops/s
Iteration  11: 2456147.247 ops/s
Iteration  12: 2480196.091 ops/s
Iteration  13: 2555859.532 ops/s
Iteration  14: 2476646.398 ops/s
Iteration  15: 2398935.781 ops/s
Iteration  16: 2589430.625 ops/s
Iteration  17: 2459061.981 ops/s
Iteration  18: 2529863.913 ops/s
Iteration  19: 2430187.114 ops/s
Iteration  20: 2599957.784 ops/s
Iteration  21: 2406977.457 ops/s
Iteration  22: 2540643.503 ops/s
Iteration  23: 2434357.371 ops/s
Iteration  24: 2420553.027 ops/s
Iteration  25: 2543005.925 ops/s
Iteration  26: 2434627.606 ops/s
Iteration  27: 2408405.324 ops/s
Iteration  28: 2462028.725 ops/s
Iteration  29: 2494566.502 ops/s
Iteration  30: 2485818.556 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_cancelAfterFirstDelayError":
  2490660.406 ±(99.9%) 37555.459 ops/s [Average]
  (min, avg, max) = (2398935.781, 2490660.406, 2599957.784), stdev = 56211.247
  CI (99.9%): [2453104.947, 2528215.865] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_cancelAfterFirstDelayError  thrpt   30  2490660.406 ± 37555.459  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayMainErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayMainErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 68714.945 ops/s
# Warmup Iteration   2: 133826.604 ops/s
# Warmup Iteration   3: 402949.555 ops/s
# Warmup Iteration   4: 454427.857 ops/s
# Warmup Iteration   5: 455624.203 ops/s
# Warmup Iteration   6: 479007.610 ops/s
# Warmup Iteration   7: 440436.356 ops/s
# Warmup Iteration   8: 444382.742 ops/s
# Warmup Iteration   9: 463624.479 ops/s
# Warmup Iteration  10: 485866.626 ops/s
# Warmup Iteration  11: 471826.304 ops/s
# Warmup Iteration  12: 460378.270 ops/s
# Warmup Iteration  13: 473817.102 ops/s
# Warmup Iteration  14: 462656.816 ops/s
# Warmup Iteration  15: 477022.211 ops/s
# Warmup Iteration  16: 479566.193 ops/s
# Warmup Iteration  17: 472986.153 ops/s
# Warmup Iteration  18: 473309.986 ops/s
# Warmup Iteration  19: 501674.223 ops/s
# Warmup Iteration  20: 463256.686 ops/s
# Warmup Iteration  21: 474781.797 ops/s
# Warmup Iteration  22: 485439.506 ops/s
# Warmup Iteration  23: 472556.337 ops/s
# Warmup Iteration  24: 470561.388 ops/s
# Warmup Iteration  25: 500324.297 ops/s
# Warmup Iteration  26: 473487.397 ops/s
# Warmup Iteration  27: 450120.991 ops/s
# Warmup Iteration  28: 438644.995 ops/s
# Warmup Iteration  29: 466628.202 ops/s
# Warmup Iteration  30: 499850.428 ops/s
Iteration   1: 491455.970 ops/s
Iteration   2: 478707.330 ops/s
Iteration   3: 476998.751 ops/s
Iteration   4: 481824.105 ops/s
Iteration   5: 488432.086 ops/s
Iteration   6: 483751.926 ops/s
Iteration   7: 472830.549 ops/s
Iteration   8: 482600.325 ops/s
Iteration   9: 472409.688 ops/s
Iteration  10: 471654.503 ops/s
Iteration  11: 481255.777 ops/s
Iteration  12: 463116.854 ops/s
Iteration  13: 494714.094 ops/s
Iteration  14: 478018.261 ops/s
Iteration  15: 477682.155 ops/s
Iteration  16: 492672.568 ops/s
Iteration  17: 443840.767 ops/s
Iteration  18: 503758.825 ops/s
Iteration  19: 476752.629 ops/s
Iteration  20: 484018.135 ops/s
Iteration  21: 491725.551 ops/s
Iteration  22: 489389.019 ops/s
Iteration  23: 483956.293 ops/s
Iteration  24: 482924.097 ops/s
Iteration  25: 482618.621 ops/s
Iteration  26: 488572.916 ops/s
Iteration  27: 474987.216 ops/s
Iteration  28: 467317.153 ops/s
Iteration  29: 487416.196 ops/s
Iteration  30: 474704.778 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayMainErrors":
  480670.238 ±(99.9%) 7416.236 ops/s [Average]
  (min, avg, max) = (443840.767, 480670.238, 503758.825), stdev = 11100.273
  CI (99.9%): [473254.002, 488086.473] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayMainErrors  thrpt   30  480670.238 ± 7416.236  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30327.639 ops/s
# Warmup Iteration   2: 162522.755 ops/s
# Warmup Iteration   3: 189098.518 ops/s
# Warmup Iteration   4: 205258.297 ops/s
# Warmup Iteration   5: 222120.317 ops/s
# Warmup Iteration   6: 213689.602 ops/s
# Warmup Iteration   7: 206405.781 ops/s
# Warmup Iteration   8: 216033.196 ops/s
# Warmup Iteration   9: 207043.347 ops/s
# Warmup Iteration  10: 218612.613 ops/s
# Warmup Iteration  11: 210619.300 ops/s
# Warmup Iteration  12: 222811.361 ops/s
# Warmup Iteration  13: 211055.160 ops/s
# Warmup Iteration  14: 206220.502 ops/s
# Warmup Iteration  15: 221226.773 ops/s
# Warmup Iteration  16: 210768.742 ops/s
# Warmup Iteration  17: 217340.182 ops/s
# Warmup Iteration  18: 227055.633 ops/s
# Warmup Iteration  19: 217698.965 ops/s
# Warmup Iteration  20: 229810.481 ops/s
# Warmup Iteration  21: 215375.004 ops/s
# Warmup Iteration  22: 218199.282 ops/s
# Warmup Iteration  23: 226375.421 ops/s
# Warmup Iteration  24: 216544.135 ops/s
# Warmup Iteration  25: 224468.270 ops/s
# Warmup Iteration  26: 220848.253 ops/s
# Warmup Iteration  27: 219773.265 ops/s
# Warmup Iteration  28: 225708.314 ops/s
# Warmup Iteration  29: 220716.040 ops/s
# Warmup Iteration  30: 225730.429 ops/s
Iteration   1: 221267.606 ops/s
Iteration   2: 218423.890 ops/s
Iteration   3: 223894.230 ops/s
Iteration   4: 204798.283 ops/s
Iteration   5: 219300.947 ops/s
Iteration   6: 221059.273 ops/s
Iteration   7: 214410.015 ops/s
Iteration   8: 224574.426 ops/s
Iteration   9: 211740.161 ops/s
Iteration  10: 223271.301 ops/s
Iteration  11: 216173.839 ops/s
Iteration  12: 210761.250 ops/s
Iteration  13: 230131.444 ops/s
Iteration  14: 217245.967 ops/s
Iteration  15: 215432.483 ops/s
Iteration  16: 221492.049 ops/s
Iteration  17: 212577.934 ops/s
Iteration  18: 216401.828 ops/s
Iteration  19: 218317.239 ops/s
Iteration  20: 219204.784 ops/s
Iteration  21: 228453.849 ops/s
Iteration  22: 203660.943 ops/s
Iteration  23: 225120.882 ops/s
Iteration  24: 219152.988 ops/s
Iteration  25: 215570.194 ops/s
Iteration  26: 225330.865 ops/s
Iteration  27: 214884.489 ops/s
Iteration  28: 224540.062 ops/s
Iteration  29: 221958.624 ops/s
Iteration  30: 219855.411 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel":
  218633.575 ±(99.9%) 4107.126 ops/s [Average]
  (min, avg, max) = (203660.943, 218633.575, 230131.444), stdev = 6147.353
  CI (99.9%): [214526.449, 222740.701] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  218633.575 ± 4107.126  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 34608.683 ops/s
# Warmup Iteration   2: 156067.456 ops/s
# Warmup Iteration   3: 180881.147 ops/s
# Warmup Iteration   4: 205040.459 ops/s
# Warmup Iteration   5: 193776.487 ops/s
# Warmup Iteration   6: 207913.011 ops/s
# Warmup Iteration   7: 203438.213 ops/s
# Warmup Iteration   8: 222895.300 ops/s
# Warmup Iteration   9: 212209.448 ops/s
# Warmup Iteration  10: 207715.176 ops/s
# Warmup Iteration  11: 216544.385 ops/s
# Warmup Iteration  12: 218115.879 ops/s
# Warmup Iteration  13: 206940.053 ops/s
# Warmup Iteration  14: 217754.059 ops/s
# Warmup Iteration  15: 214326.647 ops/s
# Warmup Iteration  16: 212635.323 ops/s
# Warmup Iteration  17: 216400.881 ops/s
# Warmup Iteration  18: 220972.937 ops/s
# Warmup Iteration  19: 221755.421 ops/s
# Warmup Iteration  20: 213620.670 ops/s
# Warmup Iteration  21: 222312.668 ops/s
# Warmup Iteration  22: 205331.199 ops/s
# Warmup Iteration  23: 195792.011 ops/s
# Warmup Iteration  24: 216054.175 ops/s
# Warmup Iteration  25: 210927.364 ops/s
# Warmup Iteration  26: 223060.186 ops/s
# Warmup Iteration  27: 212805.583 ops/s
# Warmup Iteration  28: 221184.111 ops/s
# Warmup Iteration  29: 222794.602 ops/s
# Warmup Iteration  30: 216049.813 ops/s
Iteration   1: 225845.813 ops/s
Iteration   2: 214283.526 ops/s
Iteration   3: 216810.368 ops/s
Iteration   4: 224645.060 ops/s
Iteration   5: 216612.506 ops/s
Iteration   6: 220402.206 ops/s
Iteration   7: 225552.273 ops/s
Iteration   8: 212585.314 ops/s
Iteration   9: 221476.035 ops/s
Iteration  10: 218454.979 ops/s
Iteration  11: 221525.771 ops/s
Iteration  12: 212575.083 ops/s
Iteration  13: 222695.498 ops/s
Iteration  14: 219819.207 ops/s
Iteration  15: 210871.581 ops/s
Iteration  16: 225052.376 ops/s
Iteration  17: 214582.590 ops/s
Iteration  18: 222881.878 ops/s
Iteration  19: 218526.237 ops/s
Iteration  20: 222596.469 ops/s
Iteration  21: 218116.322 ops/s
Iteration  22: 219320.840 ops/s
Iteration  23: 218867.368 ops/s
Iteration  24: 218178.746 ops/s
Iteration  25: 217269.486 ops/s
Iteration  26: 219753.797 ops/s
Iteration  27: 221589.518 ops/s
Iteration  28: 215527.539 ops/s
Iteration  29: 222500.731 ops/s
Iteration  30: 225441.602 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  219478.691 ±(99.9%) 2738.320 ops/s [Average]
  (min, avg, max) = (210871.581, 219478.691, 225845.813), stdev = 4098.588
  CI (99.9%): [216740.371, 222217.010] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  219478.691 ± 2738.320  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowCloseIngoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowCloseIngoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10024.181 ops/s
# Warmup Iteration   2: 31744.998 ops/s
# Warmup Iteration   3: 56572.522 ops/s
# Warmup Iteration   4: 66402.206 ops/s
# Warmup Iteration   5: 131001.363 ops/s
# Warmup Iteration   6: 121611.290 ops/s
# Warmup Iteration   7: 147213.896 ops/s
# Warmup Iteration   8: 141036.407 ops/s
# Warmup Iteration   9: 148385.890 ops/s
# Warmup Iteration  10: 139909.834 ops/s
# Warmup Iteration  11: 146452.490 ops/s
# Warmup Iteration  12: 139985.613 ops/s
# Warmup Iteration  13: 144833.622 ops/s
# Warmup Iteration  14: 145289.803 ops/s
# Warmup Iteration  15: 141960.979 ops/s
# Warmup Iteration  16: 147152.282 ops/s
# Warmup Iteration  17: 143737.716 ops/s
# Warmup Iteration  18: 149581.519 ops/s
# Warmup Iteration  19: 144609.754 ops/s
# Warmup Iteration  20: 148645.693 ops/s
# Warmup Iteration  21: 146440.601 ops/s
# Warmup Iteration  22: 145739.656 ops/s
# Warmup Iteration  23: 149292.173 ops/s
# Warmup Iteration  24: 141309.748 ops/s
# Warmup Iteration  25: 150573.638 ops/s
# Warmup Iteration  26: 142162.150 ops/s
# Warmup Iteration  27: 146214.433 ops/s
# Warmup Iteration  28: 150986.004 ops/s
# Warmup Iteration  29: 146168.562 ops/s
# Warmup Iteration  30: 143459.177 ops/s
Iteration   1: 152757.726 ops/s
Iteration   2: 142588.630 ops/s
Iteration   3: 146153.858 ops/s
Iteration   4: 143291.867 ops/s
Iteration   5: 145678.999 ops/s
Iteration   6: 146718.371 ops/s
Iteration   7: 142478.557 ops/s
Iteration   8: 147130.862 ops/s
Iteration   9: 144972.718 ops/s
Iteration  10: 146593.661 ops/s
Iteration  11: 140917.701 ops/s
Iteration  12: 146704.423 ops/s
Iteration  13: 142189.571 ops/s
Iteration  14: 145360.219 ops/s
Iteration  15: 148757.533 ops/s
Iteration  16: 142347.680 ops/s
Iteration  17: 148034.001 ops/s
Iteration  18: 143205.359 ops/s
Iteration  19: 147455.627 ops/s
Iteration  20: 148336.548 ops/s
Iteration  21: 146596.120 ops/s
Iteration  22: 149828.168 ops/s
Iteration  23: 145733.515 ops/s
Iteration  24: 153753.864 ops/s
Iteration  25: 145915.533 ops/s
Iteration  26: 151119.680 ops/s
Iteration  27: 150411.267 ops/s
Iteration  28: 153578.760 ops/s
Iteration  29: 143289.934 ops/s
Iteration  30: 150377.689 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowCloseIngoresCancel":
  146742.615 ±(99.9%) 2322.295 ops/s [Average]
  (min, avg, max) = (140917.701, 146742.615, 153753.864), stdev = 3475.902
  CI (99.9%): [144420.320, 149064.909] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_windowCloseIngoresCancel  thrpt   30  146742.615 ± 2322.295  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_fuseAndTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_fuseAndTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 176839.951 ops/s
# Warmup Iteration   2: 615146.599 ops/s
# Warmup Iteration   3: 1238612.616 ops/s
# Warmup Iteration   4: 1548584.680 ops/s
# Warmup Iteration   5: 1573431.170 ops/s
# Warmup Iteration   6: 1471326.002 ops/s
# Warmup Iteration   7: 1546568.402 ops/s
# Warmup Iteration   8: 1553093.655 ops/s
# Warmup Iteration   9: 1496784.330 ops/s
# Warmup Iteration  10: 1566604.870 ops/s
# Warmup Iteration  11: 1465575.938 ops/s
# Warmup Iteration  12: 1538298.180 ops/s
# Warmup Iteration  13: 1596277.954 ops/s
# Warmup Iteration  14: 1529161.874 ops/s
# Warmup Iteration  15: 1579493.595 ops/s
# Warmup Iteration  16: 1515244.247 ops/s
# Warmup Iteration  17: 1378517.963 ops/s
# Warmup Iteration  18: 1351755.679 ops/s
# Warmup Iteration  19: 1556584.692 ops/s
# Warmup Iteration  20: 1578939.897 ops/s
# Warmup Iteration  21: 1507117.750 ops/s
# Warmup Iteration  22: 1557139.148 ops/s
# Warmup Iteration  23: 1579043.154 ops/s
# Warmup Iteration  24: 1480890.626 ops/s
# Warmup Iteration  25: 1512458.925 ops/s
# Warmup Iteration  26: 1542107.740 ops/s
# Warmup Iteration  27: 1527395.807 ops/s
# Warmup Iteration  28: 1543161.882 ops/s
# Warmup Iteration  29: 1492470.770 ops/s
# Warmup Iteration  30: 1502457.225 ops/s
Iteration   1: 1549642.785 ops/s
Iteration   2: 1574267.343 ops/s
Iteration   3: 1467017.190 ops/s
Iteration   4: 1553010.722 ops/s
Iteration   5: 1509127.060 ops/s
Iteration   6: 1543359.906 ops/s
Iteration   7: 1572704.063 ops/s
Iteration   8: 1508128.258 ops/s
Iteration   9: 1559891.279 ops/s
Iteration  10: 1497126.986 ops/s
Iteration  11: 1528682.309 ops/s
Iteration  12: 1492304.886 ops/s
Iteration  13: 1519590.515 ops/s
Iteration  14: 1567537.267 ops/s
Iteration  15: 1519135.859 ops/s
Iteration  16: 1487586.516 ops/s
Iteration  17: 1467451.129 ops/s
Iteration  18: 1565827.263 ops/s
Iteration  19: 1518405.186 ops/s
Iteration  20: 1521209.595 ops/s
Iteration  21: 1603524.988 ops/s
Iteration  22: 1479498.439 ops/s
Iteration  23: 1562983.184 ops/s
Iteration  24: 1516919.363 ops/s
Iteration  25: 1544969.063 ops/s
Iteration  26: 1532903.783 ops/s
Iteration  27: 1531852.141 ops/s
Iteration  28: 1532518.321 ops/s
Iteration  29: 1500860.221 ops/s
Iteration  30: 1538427.575 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_fuseAndTake":
  1528882.107 ±(99.9%) 22310.054 ops/s [Average]
  (min, avg, max) = (1467017.190, 1528882.107, 1603524.988), stdev = 33392.642
  CI (99.9%): [1506572.052, 1551192.161] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_fuseAndTake  thrpt   30  1528882.107 ± 22310.054  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAwaitTest._Benchmark.benchmark_awaitTimeoutInterrupted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAwaitTest._Benchmark.benchmark_awaitTimeoutInterrupted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 164870.622 ops/s
# Warmup Iteration   2: 300775.882 ops/s
# Warmup Iteration   3: 308062.291 ops/s
# Warmup Iteration   4: 310079.575 ops/s
# Warmup Iteration   5: 339399.614 ops/s
# Warmup Iteration   6: 332693.848 ops/s
# Warmup Iteration   7: 293276.127 ops/s
# Warmup Iteration   8: 339696.131 ops/s
# Warmup Iteration   9: 361988.434 ops/s
# Warmup Iteration  10: 342874.612 ops/s
# Warmup Iteration  11: 331406.281 ops/s
# Warmup Iteration  12: 339895.288 ops/s
# Warmup Iteration  13: 350658.985 ops/s
# Warmup Iteration  14: 332178.601 ops/s
# Warmup Iteration  15: 337405.341 ops/s
# Warmup Iteration  16: 344735.889 ops/s
# Warmup Iteration  17: 354951.773 ops/s
# Warmup Iteration  18: 361787.256 ops/s
# Warmup Iteration  19: 350987.742 ops/s
# Warmup Iteration  20: 366266.320 ops/s
# Warmup Iteration  21: 368399.275 ops/s
# Warmup Iteration  22: 350951.039 ops/s
# Warmup Iteration  23: 349322.373 ops/s
# Warmup Iteration  24: 352604.913 ops/s
# Warmup Iteration  25: 369208.788 ops/s
# Warmup Iteration  26: 349494.184 ops/s
# Warmup Iteration  27: 365406.016 ops/s
# Warmup Iteration  28: 360553.638 ops/s
# Warmup Iteration  29: 347494.445 ops/s
# Warmup Iteration  30: 371198.796 ops/s
Iteration   1: 351434.648 ops/s
Iteration   2: 366524.390 ops/s
Iteration   3: 349281.026 ops/s
Iteration   4: 348701.946 ops/s
Iteration   5: 365907.535 ops/s
Iteration   6: 353516.190 ops/s
Iteration   7: 359430.794 ops/s
Iteration   8: 358078.176 ops/s
Iteration   9: 353299.299 ops/s
Iteration  10: 371241.014 ops/s
Iteration  11: 348356.219 ops/s
Iteration  12: 365403.230 ops/s
Iteration  13: 350313.468 ops/s
Iteration  14: 354760.893 ops/s
Iteration  15: 363182.926 ops/s
Iteration  16: 353947.680 ops/s
Iteration  17: 367383.398 ops/s
Iteration  18: 351830.713 ops/s
Iteration  19: 366945.663 ops/s
Iteration  20: 356419.127 ops/s
Iteration  21: 365355.109 ops/s
Iteration  22: 346955.919 ops/s
Iteration  23: 357026.118 ops/s
Iteration  24: 361227.233 ops/s
Iteration  25: 355090.014 ops/s
Iteration  26: 360172.824 ops/s
Iteration  27: 350528.384 ops/s
Iteration  28: 367855.009 ops/s
Iteration  29: 363457.338 ops/s
Iteration  30: 361827.739 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAwaitTest._Benchmark.benchmark_awaitTimeoutInterrupted":
  358181.801 ±(99.9%) 4686.101 ops/s [Average]
  (min, avg, max) = (346955.919, 358181.801, 371241.014), stdev = 7013.936
  CI (99.9%): [353495.700, 362867.901] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
CompletableAwaitTest._Benchmark.benchmark_awaitTimeoutInterrupted  thrpt   30  358181.801 ± 4686.101  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 400232.437 ops/s
# Warmup Iteration   2: 571848.178 ops/s
# Warmup Iteration   3: 700912.315 ops/s
# Warmup Iteration   4: 668683.011 ops/s
# Warmup Iteration   5: 694279.008 ops/s
# Warmup Iteration   6: 672250.585 ops/s
# Warmup Iteration   7: 695092.752 ops/s
# Warmup Iteration   8: 703620.735 ops/s
# Warmup Iteration   9: 657618.219 ops/s
# Warmup Iteration  10: 645374.729 ops/s
# Warmup Iteration  11: 680413.673 ops/s
# Warmup Iteration  12: 533485.052 ops/s
# Warmup Iteration  13: 674041.811 ops/s
# Warmup Iteration  14: 684287.988 ops/s
# Warmup Iteration  15: 722071.659 ops/s
# Warmup Iteration  16: 682076.590 ops/s
# Warmup Iteration  17: 719609.820 ops/s
# Warmup Iteration  18: 753397.548 ops/s
# Warmup Iteration  19: 714913.931 ops/s
# Warmup Iteration  20: 724316.027 ops/s
# Warmup Iteration  21: 750473.487 ops/s
# Warmup Iteration  22: 725127.113 ops/s
# Warmup Iteration  23: 726071.661 ops/s
# Warmup Iteration  24: 741920.129 ops/s
# Warmup Iteration  25: 730123.038 ops/s
# Warmup Iteration  26: 731821.905 ops/s
# Warmup Iteration  27: 722874.080 ops/s
# Warmup Iteration  28: 753885.286 ops/s
# Warmup Iteration  29: 713715.209 ops/s
# Warmup Iteration  30: 739736.625 ops/s
Iteration   1: 730185.846 ops/s
Iteration   2: 746035.475 ops/s
Iteration   3: 709664.610 ops/s
Iteration   4: 742018.185 ops/s
Iteration   5: 726704.570 ops/s
Iteration   6: 719576.370 ops/s
Iteration   7: 748757.025 ops/s
Iteration   8: 714344.861 ops/s
Iteration   9: 751188.558 ops/s
Iteration  10: 705340.788 ops/s
Iteration  11: 725020.107 ops/s
Iteration  12: 714018.925 ops/s
Iteration  13: 718891.715 ops/s
Iteration  14: 760364.125 ops/s
Iteration  15: 740037.364 ops/s
Iteration  16: 726022.691 ops/s
Iteration  17: 756782.711 ops/s
Iteration  18: 718276.170 ops/s
Iteration  19: 731969.016 ops/s
Iteration  20: 748030.014 ops/s
Iteration  21: 732815.940 ops/s
Iteration  22: 736629.611 ops/s
Iteration  23: 730665.752 ops/s
Iteration  24: 714166.887 ops/s
Iteration  25: 743457.872 ops/s
Iteration  26: 714040.540 ops/s
Iteration  27: 731477.854 ops/s
Iteration  28: 736278.884 ops/s
Iteration  29: 705443.616 ops/s
Iteration  30: 703547.078 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableFutureCancels":
  729391.772 ±(99.9%) 10590.393 ops/s [Average]
  (min, avg, max) = (703547.078, 729391.772, 760364.125), stdev = 15851.203
  CI (99.9%): [718801.379, 739982.165] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score       Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableFutureCancels  thrpt   30  729391.772 ± 10590.393  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 349450.888 ops/s
# Warmup Iteration   2: 588450.790 ops/s
# Warmup Iteration   3: 699333.846 ops/s
# Warmup Iteration   4: 607715.879 ops/s
# Warmup Iteration   5: 722644.090 ops/s
# Warmup Iteration   6: 580216.009 ops/s
# Warmup Iteration   7: 705621.776 ops/s
# Warmup Iteration   8: 690426.095 ops/s
# Warmup Iteration   9: 718830.314 ops/s
# Warmup Iteration  10: 694943.359 ops/s
# Warmup Iteration  11: 689253.355 ops/s
# Warmup Iteration  12: 701479.354 ops/s
# Warmup Iteration  13: 697127.616 ops/s
# Warmup Iteration  14: 700658.375 ops/s
# Warmup Iteration  15: 713973.393 ops/s
# Warmup Iteration  16: 732835.201 ops/s
# Warmup Iteration  17: 732557.603 ops/s
# Warmup Iteration  18: 727389.476 ops/s
# Warmup Iteration  19: 751794.798 ops/s
# Warmup Iteration  20: 734014.882 ops/s
# Warmup Iteration  21: 750789.353 ops/s
# Warmup Iteration  22: 741494.532 ops/s
# Warmup Iteration  23: 771288.235 ops/s
# Warmup Iteration  24: 773064.817 ops/s
# Warmup Iteration  25: 716520.394 ops/s
# Warmup Iteration  26: 758690.511 ops/s
# Warmup Iteration  27: 751197.939 ops/s
# Warmup Iteration  28: 722391.850 ops/s
# Warmup Iteration  29: 748099.823 ops/s
# Warmup Iteration  30: 774397.949 ops/s
Iteration   1: 736544.568 ops/s
Iteration   2: 759767.166 ops/s
Iteration   3: 722859.445 ops/s
Iteration   4: 748442.023 ops/s
Iteration   5: 762044.686 ops/s
Iteration   6: 731704.500 ops/s
Iteration   7: 754908.764 ops/s
Iteration   8: 740891.638 ops/s
Iteration   9: 760328.790 ops/s
Iteration  10: 762315.611 ops/s
Iteration  11: 742253.542 ops/s
Iteration  12: 735946.561 ops/s
Iteration  13: 751992.007 ops/s
Iteration  14: 722045.789 ops/s
Iteration  15: 747683.446 ops/s
Iteration  16: 775722.861 ops/s
Iteration  17: 722297.857 ops/s
Iteration  18: 758572.713 ops/s
Iteration  19: 721644.790 ops/s
Iteration  20: 748913.025 ops/s
Iteration  21: 758192.220 ops/s
Iteration  22: 728807.729 ops/s
Iteration  23: 778271.013 ops/s
Iteration  24: 773320.405 ops/s
Iteration  25: 729488.849 ops/s
Iteration  26: 748974.110 ops/s
Iteration  27: 745354.287 ops/s
Iteration  28: 728936.526 ops/s
Iteration  29: 754923.614 ops/s
Iteration  30: 731649.423 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableFutureCancels":
  746159.932 ±(99.9%) 11014.381 ops/s [Average]
  (min, avg, max) = (721644.790, 746159.932, 778271.013), stdev = 16485.808
  CI (99.9%): [735145.551, 757174.313] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score       Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableFutureCancels  thrpt   30  746159.932 ± 11014.381  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 314855.469 ops/s
# Warmup Iteration   2: 577047.354 ops/s
# Warmup Iteration   3: 667319.574 ops/s
# Warmup Iteration   4: 609485.768 ops/s
# Warmup Iteration   5: 709603.802 ops/s
# Warmup Iteration   6: 533633.497 ops/s
# Warmup Iteration   7: 604240.044 ops/s
# Warmup Iteration   8: 669109.273 ops/s
# Warmup Iteration   9: 678181.313 ops/s
# Warmup Iteration  10: 709908.182 ops/s
# Warmup Iteration  11: 679972.023 ops/s
# Warmup Iteration  12: 686586.488 ops/s
# Warmup Iteration  13: 714490.283 ops/s
# Warmup Iteration  14: 692107.426 ops/s
# Warmup Iteration  15: 680562.407 ops/s
# Warmup Iteration  16: 684436.237 ops/s
# Warmup Iteration  17: 743008.245 ops/s
# Warmup Iteration  18: 731435.892 ops/s
# Warmup Iteration  19: 734175.529 ops/s
# Warmup Iteration  20: 754591.043 ops/s
# Warmup Iteration  21: 747760.179 ops/s
# Warmup Iteration  22: 716641.572 ops/s
# Warmup Iteration  23: 726807.488 ops/s
# Warmup Iteration  24: 712656.951 ops/s
# Warmup Iteration  25: 747662.824 ops/s
# Warmup Iteration  26: 730063.232 ops/s
# Warmup Iteration  27: 750800.875 ops/s
# Warmup Iteration  28: 714019.459 ops/s
# Warmup Iteration  29: 756246.182 ops/s
# Warmup Iteration  30: 745876.760 ops/s
Iteration   1: 715238.804 ops/s
Iteration   2: 761195.986 ops/s
Iteration   3: 713552.731 ops/s
Iteration   4: 713708.661 ops/s
Iteration   5: 743931.088 ops/s
Iteration   6: 754627.499 ops/s
Iteration   7: 720027.571 ops/s
Iteration   8: 747017.218 ops/s
Iteration   9: 734873.810 ops/s
Iteration  10: 751648.530 ops/s
Iteration  11: 721714.038 ops/s
Iteration  12: 726211.156 ops/s
Iteration  13: 759026.414 ops/s
Iteration  14: 703133.409 ops/s
Iteration  15: 745317.348 ops/s
Iteration  16: 716298.399 ops/s
Iteration  17: 725853.588 ops/s
Iteration  18: 755673.451 ops/s
Iteration  19: 723405.806 ops/s
Iteration  20: 765879.902 ops/s
Iteration  21: 743917.374 ops/s
Iteration  22: 719630.509 ops/s
Iteration  23: 724261.330 ops/s
Iteration  24: 769548.626 ops/s
Iteration  25: 719774.673 ops/s
Iteration  26: 747507.081 ops/s
Iteration  27: 733927.932 ops/s
Iteration  28: 748596.986 ops/s
Iteration  29: 743144.356 ops/s
Iteration  30: 721592.491 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableFutureCancels":
  735674.559 ±(99.9%) 12050.289 ops/s [Average]
  (min, avg, max) = (703133.409, 735674.559, 769548.626), stdev = 18036.307
  CI (99.9%): [723624.270, 747724.848] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score       Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableFutureCancels  thrpt   30  735674.559 ± 12050.289  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorResumeNextViaFunctionTest._Benchmark.benchmark_normalBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorResumeNextViaFunctionTest._Benchmark.benchmark_normalBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 62715.967 ops/s
# Warmup Iteration   2: 279296.737 ops/s
# Warmup Iteration   3: 510388.975 ops/s
# Warmup Iteration   4: 472752.107 ops/s
# Warmup Iteration   5: 533322.204 ops/s
# Warmup Iteration   6: 493376.207 ops/s
# Warmup Iteration   7: 536765.428 ops/s
# Warmup Iteration   8: 552516.166 ops/s
# Warmup Iteration   9: 586471.081 ops/s
# Warmup Iteration  10: 570717.049 ops/s
# Warmup Iteration  11: 525582.361 ops/s
# Warmup Iteration  12: 578096.437 ops/s
# Warmup Iteration  13: 531107.504 ops/s
# Warmup Iteration  14: 582766.342 ops/s
# Warmup Iteration  15: 541800.530 ops/s
# Warmup Iteration  16: 564795.632 ops/s
# Warmup Iteration  17: 571250.752 ops/s
# Warmup Iteration  18: 558655.824 ops/s
# Warmup Iteration  19: 600816.882 ops/s
# Warmup Iteration  20: 564720.727 ops/s
# Warmup Iteration  21: 587740.577 ops/s
# Warmup Iteration  22: 572499.318 ops/s
# Warmup Iteration  23: 593937.526 ops/s
# Warmup Iteration  24: 586584.097 ops/s
# Warmup Iteration  25: 560213.092 ops/s
# Warmup Iteration  26: 592389.804 ops/s
# Warmup Iteration  27: 563649.436 ops/s
# Warmup Iteration  28: 590334.472 ops/s
# Warmup Iteration  29: 589256.838 ops/s
# Warmup Iteration  30: 561050.294 ops/s
Iteration   1: 586322.723 ops/s
Iteration   2: 564270.861 ops/s
Iteration   3: 581000.194 ops/s
Iteration   4: 580441.695 ops/s
Iteration   5: 578765.177 ops/s
Iteration   6: 552394.582 ops/s
Iteration   7: 558066.704 ops/s
Iteration   8: 585845.834 ops/s
Iteration   9: 571623.509 ops/s
Iteration  10: 582750.713 ops/s
Iteration  11: 580925.681 ops/s
Iteration  12: 572421.443 ops/s
Iteration  13: 602123.205 ops/s
Iteration  14: 553802.677 ops/s
Iteration  15: 575239.470 ops/s
Iteration  16: 578024.930 ops/s
Iteration  17: 583663.514 ops/s
Iteration  18: 597521.153 ops/s
Iteration  19: 549975.842 ops/s
Iteration  20: 590361.727 ops/s
Iteration  21: 575481.896 ops/s
Iteration  22: 577665.639 ops/s
Iteration  23: 582245.644 ops/s
Iteration  24: 583142.473 ops/s
Iteration  25: 567307.983 ops/s
Iteration  26: 577770.322 ops/s
Iteration  27: 596665.654 ops/s
Iteration  28: 592719.977 ops/s
Iteration  29: 560674.749 ops/s
Iteration  30: 591461.589 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorResumeNextViaFunctionTest._Benchmark.benchmark_normalBackpressure":
  577689.252 ±(99.9%) 8968.811 ops/s [Average]
  (min, avg, max) = (549975.842, 577689.252, 602123.205), stdev = 13424.095
  CI (99.9%): [568720.441, 586658.063] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableOnErrorResumeNextViaFunctionTest._Benchmark.benchmark_normalBackpressure  thrpt   30  577689.252 ± 8968.811  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_noOverrequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_noOverrequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 258091.097 ops/s
# Warmup Iteration   2: 706123.875 ops/s
# Warmup Iteration   3: 2207553.972 ops/s
# Warmup Iteration   4: 2995934.739 ops/s
# Warmup Iteration   5: 3056269.999 ops/s
# Warmup Iteration   6: 2893619.596 ops/s
# Warmup Iteration   7: 2660482.338 ops/s
# Warmup Iteration   8: 3100597.044 ops/s
# Warmup Iteration   9: 3140660.100 ops/s
# Warmup Iteration  10: 2886631.338 ops/s
# Warmup Iteration  11: 3151840.601 ops/s
# Warmup Iteration  12: 3135038.053 ops/s
# Warmup Iteration  13: 2878234.914 ops/s
# Warmup Iteration  14: 3116141.233 ops/s
# Warmup Iteration  15: 3034409.399 ops/s
# Warmup Iteration  16: 3029672.655 ops/s
# Warmup Iteration  17: 2914069.944 ops/s
# Warmup Iteration  18: 3024185.522 ops/s
# Warmup Iteration  19: 3063203.065 ops/s
# Warmup Iteration  20: 3013787.867 ops/s
# Warmup Iteration  21: 3101634.572 ops/s
# Warmup Iteration  22: 2955340.591 ops/s
# Warmup Iteration  23: 3032914.674 ops/s
# Warmup Iteration  24: 3074028.382 ops/s
# Warmup Iteration  25: 2922842.963 ops/s
# Warmup Iteration  26: 3102116.783 ops/s
# Warmup Iteration  27: 2930686.909 ops/s
# Warmup Iteration  28: 3171125.764 ops/s
# Warmup Iteration  29: 2956985.048 ops/s
# Warmup Iteration  30: 2995405.739 ops/s
Iteration   1: 2965236.857 ops/s
Iteration   2: 3025169.036 ops/s
Iteration   3: 3102579.427 ops/s
Iteration   4: 2975171.978 ops/s
Iteration   5: 3064565.314 ops/s
Iteration   6: 2950582.419 ops/s
Iteration   7: 2980397.854 ops/s
Iteration   8: 3112606.365 ops/s
Iteration   9: 2895959.582 ops/s
Iteration  10: 3098406.030 ops/s
Iteration  11: 2963943.404 ops/s
Iteration  12: 3013718.726 ops/s
Iteration  13: 3066518.451 ops/s
Iteration  14: 3061653.727 ops/s
Iteration  15: 3004697.621 ops/s
Iteration  16: 2964988.295 ops/s
Iteration  17: 3125095.799 ops/s
Iteration  18: 3050080.494 ops/s
Iteration  19: 3123111.501 ops/s
Iteration  20: 3053036.966 ops/s
Iteration  21: 2974090.043 ops/s
Iteration  22: 3058876.044 ops/s
Iteration  23: 2971871.897 ops/s
Iteration  24: 3007728.791 ops/s
Iteration  25: 3133297.436 ops/s
Iteration  26: 2988108.359 ops/s
Iteration  27: 3020030.773 ops/s
Iteration  28: 3137211.929 ops/s
Iteration  29: 3019948.686 ops/s
Iteration  30: 2960472.984 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_noOverrequest":
  3028971.893 ±(99.9%) 42826.586 ops/s [Average]
  (min, avg, max) = (2895959.582, 3028971.893, 3137211.929), stdev = 64100.822
  CI (99.9%): [2986145.307, 3071798.479] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowableTakeTest2._Benchmark.benchmark_noOverrequest  thrpt   30  3028971.893 ± 42826.586  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 172402.312 ops/s
# Warmup Iteration   2: 341694.785 ops/s
# Warmup Iteration   3: 342905.981 ops/s
# Warmup Iteration   4: 355650.330 ops/s
# Warmup Iteration   5: 340866.497 ops/s
# Warmup Iteration   6: 355769.793 ops/s
# Warmup Iteration   7: 367396.125 ops/s
# Warmup Iteration   8: 376507.155 ops/s
# Warmup Iteration   9: 359414.967 ops/s
# Warmup Iteration  10: 366269.633 ops/s
# Warmup Iteration  11: 361931.109 ops/s
# Warmup Iteration  12: 371455.851 ops/s
# Warmup Iteration  13: 365939.303 ops/s
# Warmup Iteration  14: 369264.549 ops/s
# Warmup Iteration  15: 369034.453 ops/s
# Warmup Iteration  16: 361383.704 ops/s
# Warmup Iteration  17: 382605.539 ops/s
# Warmup Iteration  18: 389093.467 ops/s
# Warmup Iteration  19: 367255.915 ops/s
# Warmup Iteration  20: 378155.010 ops/s
# Warmup Iteration  21: 382290.728 ops/s
# Warmup Iteration  22: 386487.785 ops/s
# Warmup Iteration  23: 398226.480 ops/s
# Warmup Iteration  24: 384150.858 ops/s
# Warmup Iteration  25: 389577.919 ops/s
# Warmup Iteration  26: 395232.070 ops/s
# Warmup Iteration  27: 379343.313 ops/s
# Warmup Iteration  28: 396272.911 ops/s
# Warmup Iteration  29: 401010.295 ops/s
# Warmup Iteration  30: 374723.922 ops/s
Iteration   1: 402040.827 ops/s
Iteration   2: 396481.302 ops/s
Iteration   3: 390733.282 ops/s
Iteration   4: 395566.517 ops/s
Iteration   5: 393164.267 ops/s
Iteration   6: 375547.331 ops/s
Iteration   7: 396565.404 ops/s
Iteration   8: 391902.345 ops/s
Iteration   9: 393980.032 ops/s
Iteration  10: 382147.030 ops/s
Iteration  11: 383270.302 ops/s
Iteration  12: 400877.091 ops/s
Iteration  13: 382728.833 ops/s
Iteration  14: 383787.629 ops/s
Iteration  15: 388420.793 ops/s
Iteration  16: 386983.781 ops/s
Iteration  17: 394475.006 ops/s
Iteration  18: 396405.993 ops/s
Iteration  19: 388079.798 ops/s
Iteration  20: 398405.906 ops/s
Iteration  21: 378087.552 ops/s
Iteration  22: 400738.211 ops/s
Iteration  23: 386187.038 ops/s
Iteration  24: 400364.163 ops/s
Iteration  25: 382863.074 ops/s
Iteration  26: 397186.159 ops/s
Iteration  27: 393862.129 ops/s
Iteration  28: 322357.244 ops/s
Iteration  29: 394233.841 ops/s
Iteration  30: 391032.892 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels":
  388949.192 ±(99.9%) 9627.490 ops/s [Average]
  (min, avg, max) = (322357.244, 388949.192, 402040.827), stdev = 14409.974
  CI (99.9%): [379321.703, 398576.682] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                        Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels  thrpt   30  388949.192 ± 9627.490  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 178801.667 ops/s
# Warmup Iteration   2: 321906.583 ops/s
# Warmup Iteration   3: 331555.192 ops/s
# Warmup Iteration   4: 365284.780 ops/s
# Warmup Iteration   5: 366250.844 ops/s
# Warmup Iteration   6: 355531.518 ops/s
# Warmup Iteration   7: 368508.627 ops/s
# Warmup Iteration   8: 377279.810 ops/s
# Warmup Iteration   9: 349714.898 ops/s
# Warmup Iteration  10: 363805.493 ops/s
# Warmup Iteration  11: 372651.215 ops/s
# Warmup Iteration  12: 343786.500 ops/s
# Warmup Iteration  13: 372615.485 ops/s
# Warmup Iteration  14: 365249.018 ops/s
# Warmup Iteration  15: 364760.105 ops/s
# Warmup Iteration  16: 365827.817 ops/s
# Warmup Iteration  17: 381516.325 ops/s
# Warmup Iteration  18: 405597.696 ops/s
# Warmup Iteration  19: 373343.790 ops/s
# Warmup Iteration  20: 377849.625 ops/s
# Warmup Iteration  21: 398064.157 ops/s
# Warmup Iteration  22: 381645.358 ops/s
# Warmup Iteration  23: 386485.014 ops/s
# Warmup Iteration  24: 373969.784 ops/s
# Warmup Iteration  25: 387290.182 ops/s
# Warmup Iteration  26: 377547.673 ops/s
# Warmup Iteration  27: 383785.192 ops/s
# Warmup Iteration  28: 389517.053 ops/s
# Warmup Iteration  29: 388714.974 ops/s
# Warmup Iteration  30: 392967.452 ops/s
Iteration   1: 385432.623 ops/s
Iteration   2: 390797.047 ops/s
Iteration   3: 398347.144 ops/s
Iteration   4: 382498.737 ops/s
Iteration   5: 385234.795 ops/s
Iteration   6: 381327.991 ops/s
Iteration   7: 373451.186 ops/s
Iteration   8: 395688.707 ops/s
Iteration   9: 381443.684 ops/s
Iteration  10: 402939.439 ops/s
Iteration  11: 379307.170 ops/s
Iteration  12: 386216.578 ops/s
Iteration  13: 394285.222 ops/s
Iteration  14: 385854.159 ops/s
Iteration  15: 370961.378 ops/s
Iteration  16: 383245.749 ops/s
Iteration  17: 399341.057 ops/s
Iteration  18: 384750.073 ops/s
Iteration  19: 398931.184 ops/s
Iteration  20: 376630.652 ops/s
Iteration  21: 392132.412 ops/s
Iteration  22: 391665.755 ops/s
Iteration  23: 379218.504 ops/s
Iteration  24: 403042.596 ops/s
Iteration  25: 374127.794 ops/s
Iteration  26: 390570.506 ops/s
Iteration  27: 388304.878 ops/s
Iteration  28: 388322.458 ops/s
Iteration  29: 378813.069 ops/s
Iteration  30: 379487.046 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels":
  386745.653 ±(99.9%) 5828.947 ops/s [Average]
  (min, avg, max) = (370961.378, 386745.653, 403042.596), stdev = 8724.494
  CI (99.9%): [380916.706, 392574.600] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                       Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels  thrpt   30  386745.653 ± 5828.947  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 213948.825 ops/s
# Warmup Iteration   2: 953045.199 ops/s
# Warmup Iteration   3: 1793095.138 ops/s
# Warmup Iteration   4: 1698547.468 ops/s
# Warmup Iteration   5: 1784355.194 ops/s
# Warmup Iteration   6: 1687165.458 ops/s
# Warmup Iteration   7: 1785309.979 ops/s
# Warmup Iteration   8: 1671570.592 ops/s
# Warmup Iteration   9: 1776939.163 ops/s
# Warmup Iteration  10: 1658589.476 ops/s
# Warmup Iteration  11: 1745609.577 ops/s
# Warmup Iteration  12: 1755492.005 ops/s
# Warmup Iteration  13: 1699904.066 ops/s
# Warmup Iteration  14: 1812821.311 ops/s
# Warmup Iteration  15: 1588578.488 ops/s
# Warmup Iteration  16: 1739339.054 ops/s
# Warmup Iteration  17: 1806763.481 ops/s
# Warmup Iteration  18: 1682446.115 ops/s
# Warmup Iteration  19: 1791531.763 ops/s
# Warmup Iteration  20: 1708165.256 ops/s
# Warmup Iteration  21: 1731151.221 ops/s
# Warmup Iteration  22: 1758534.994 ops/s
# Warmup Iteration  23: 1699220.594 ops/s
# Warmup Iteration  24: 1716006.282 ops/s
# Warmup Iteration  25: 1782873.976 ops/s
# Warmup Iteration  26: 1715513.668 ops/s
# Warmup Iteration  27: 1757834.571 ops/s
# Warmup Iteration  28: 1699249.255 ops/s
# Warmup Iteration  29: 1748053.272 ops/s
# Warmup Iteration  30: 1814061.293 ops/s
Iteration   1: 1703411.148 ops/s
Iteration   2: 1807967.978 ops/s
Iteration   3: 1702295.105 ops/s
Iteration   4: 1657924.686 ops/s
Iteration   5: 1769451.568 ops/s
Iteration   6: 1781845.037 ops/s
Iteration   7: 1744753.771 ops/s
Iteration   8: 1789388.542 ops/s
Iteration   9: 1763664.161 ops/s
Iteration  10: 1698606.764 ops/s
Iteration  11: 1756701.029 ops/s
Iteration  12: 1783983.705 ops/s
Iteration  13: 1831944.958 ops/s
Iteration  14: 1678253.023 ops/s
Iteration  15: 1808564.329 ops/s
Iteration  16: 1701051.553 ops/s
Iteration  17: 1796016.158 ops/s
Iteration  18: 1759228.277 ops/s
Iteration  19: 1722634.806 ops/s
Iteration  20: 1804693.569 ops/s
Iteration  21: 1699500.004 ops/s
Iteration  22: 1725315.320 ops/s
Iteration  23: 1481368.504 ops/s
Iteration  24: 1713044.330 ops/s
Iteration  25: 1799333.738 ops/s
Iteration  26: 1772183.375 ops/s
Iteration  27: 1710642.885 ops/s
Iteration  28: 1829433.510 ops/s
Iteration  29: 1751650.323 ops/s
Iteration  30: 1747975.677 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPath":
  1743094.261 ±(99.9%) 45239.473 ops/s [Average]
  (min, avg, max) = (1481368.504, 1743094.261, 1831944.958), stdev = 67712.319
  CI (99.9%): [1697854.788, 1788333.735] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPath  thrpt   30  1743094.261 ± 45239.473  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 184982.330 ops/s
# Warmup Iteration   2: 784577.450 ops/s
# Warmup Iteration   3: 1746694.576 ops/s
# Warmup Iteration   4: 1761492.024 ops/s
# Warmup Iteration   5: 1776961.090 ops/s
# Warmup Iteration   6: 1576082.754 ops/s
# Warmup Iteration   7: 1805697.643 ops/s
# Warmup Iteration   8: 1721416.652 ops/s
# Warmup Iteration   9: 1757233.977 ops/s
# Warmup Iteration  10: 1750710.817 ops/s
# Warmup Iteration  11: 1636150.127 ops/s
# Warmup Iteration  12: 1809038.790 ops/s
# Warmup Iteration  13: 1742601.844 ops/s
# Warmup Iteration  14: 1779454.193 ops/s
# Warmup Iteration  15: 1717294.391 ops/s
# Warmup Iteration  16: 1749020.777 ops/s
# Warmup Iteration  17: 1766982.225 ops/s
# Warmup Iteration  18: 1721133.108 ops/s
# Warmup Iteration  19: 1738039.602 ops/s
# Warmup Iteration  20: 1712375.540 ops/s
# Warmup Iteration  21: 1776513.161 ops/s
# Warmup Iteration  22: 1706610.622 ops/s
# Warmup Iteration  23: 1776870.996 ops/s
# Warmup Iteration  24: 1712930.005 ops/s
# Warmup Iteration  25: 1671089.747 ops/s
# Warmup Iteration  26: 1750755.700 ops/s
# Warmup Iteration  27: 1812217.791 ops/s
# Warmup Iteration  28: 1738430.583 ops/s
# Warmup Iteration  29: 1749379.148 ops/s
# Warmup Iteration  30: 1784051.526 ops/s
Iteration   1: 1729664.287 ops/s
Iteration   2: 1793039.222 ops/s
Iteration   3: 1762065.278 ops/s
Iteration   4: 1797287.467 ops/s
Iteration   5: 1802398.685 ops/s
Iteration   6: 1719376.404 ops/s
Iteration   7: 1763105.973 ops/s
Iteration   8: 1824752.662 ops/s
Iteration   9: 1730258.063 ops/s
Iteration  10: 1792947.354 ops/s
Iteration  11: 1738910.281 ops/s
Iteration  12: 1745437.685 ops/s
Iteration  13: 1803795.410 ops/s
Iteration  14: 1722392.597 ops/s
Iteration  15: 1804310.396 ops/s
Iteration  16: 1742864.140 ops/s
Iteration  17: 1759370.031 ops/s
Iteration  18: 1838742.381 ops/s
Iteration  19: 1734497.933 ops/s
Iteration  20: 1805879.989 ops/s
Iteration  21: 1778279.841 ops/s
Iteration  22: 1785919.720 ops/s
Iteration  23: 1696952.664 ops/s
Iteration  24: 1812198.290 ops/s
Iteration  25: 1767840.038 ops/s
Iteration  26: 1801583.798 ops/s
Iteration  27: 1727533.105 ops/s
Iteration  28: 1751961.548 ops/s
Iteration  29: 1740654.512 ops/s
Iteration  30: 1722250.465 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPath":
  1766542.341 ±(99.9%) 24613.660 ops/s [Average]
  (min, avg, max) = (1696952.664, 1766542.341, 1838742.381), stdev = 36840.570
  CI (99.9%): [1741928.681, 1791156.001] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPath  thrpt   30  1766542.341 ± 24613.660  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 119844.610 ops/s
# Warmup Iteration   2: 593044.474 ops/s
# Warmup Iteration   3: 1145773.769 ops/s
# Warmup Iteration   4: 1464054.831 ops/s
# Warmup Iteration   5: 1519964.990 ops/s
# Warmup Iteration   6: 1391048.068 ops/s
# Warmup Iteration   7: 1563044.928 ops/s
# Warmup Iteration   8: 1402019.170 ops/s
# Warmup Iteration   9: 1430658.864 ops/s
# Warmup Iteration  10: 1488394.234 ops/s
# Warmup Iteration  11: 1517565.694 ops/s
# Warmup Iteration  12: 1460998.648 ops/s
# Warmup Iteration  13: 1526560.590 ops/s
# Warmup Iteration  14: 1409529.068 ops/s
# Warmup Iteration  15: 1469844.303 ops/s
# Warmup Iteration  16: 1458021.452 ops/s
# Warmup Iteration  17: 1489623.174 ops/s
# Warmup Iteration  18: 1515494.908 ops/s
# Warmup Iteration  19: 1441032.053 ops/s
# Warmup Iteration  20: 1496334.276 ops/s
# Warmup Iteration  21: 1460490.514 ops/s
# Warmup Iteration  22: 1448257.189 ops/s
# Warmup Iteration  23: 1465814.468 ops/s
# Warmup Iteration  24: 1446530.505 ops/s
# Warmup Iteration  25: 1474080.237 ops/s
# Warmup Iteration  26: 1472955.121 ops/s
# Warmup Iteration  27: 1458642.790 ops/s
# Warmup Iteration  28: 1520176.824 ops/s
# Warmup Iteration  29: 1483213.287 ops/s
# Warmup Iteration  30: 1507052.732 ops/s
Iteration   1: 1495534.039 ops/s
Iteration   2: 1450922.256 ops/s
Iteration   3: 1560768.792 ops/s
Iteration   4: 1432094.451 ops/s
Iteration   5: 1516623.452 ops/s
Iteration   6: 1502213.974 ops/s
Iteration   7: 1486606.285 ops/s
Iteration   8: 1513777.451 ops/s
Iteration   9: 1463569.249 ops/s
Iteration  10: 1508698.189 ops/s
Iteration  11: 1505245.950 ops/s
Iteration  12: 1426930.036 ops/s
Iteration  13: 1530475.934 ops/s
Iteration  14: 1509087.171 ops/s
Iteration  15: 1472542.897 ops/s
Iteration  16: 1507829.974 ops/s
Iteration  17: 1232681.404 ops/s
Iteration  18: 1528125.114 ops/s
Iteration  19: 1400097.045 ops/s
Iteration  20: 1498246.191 ops/s
Iteration  21: 1476783.826 ops/s
Iteration  22: 1489296.057 ops/s
Iteration  23: 1510501.399 ops/s
Iteration  24: 1456955.795 ops/s
Iteration  25: 1505953.232 ops/s
Iteration  26: 1444053.100 ops/s
Iteration  27: 1514032.198 ops/s
Iteration  28: 1489639.179 ops/s
Iteration  29: 1425305.514 ops/s
Iteration  30: 1530011.558 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelled":
  1479486.724 ±(99.9%) 39653.545 ops/s [Average]
  (min, avg, max) = (1232681.404, 1479486.724, 1560768.792), stdev = 59351.564
  CI (99.9%): [1439833.179, 1519140.269] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelled  thrpt   30  1479486.724 ± 39653.545  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambWithFirstFires$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambWithFirstFires

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 140920.688 ops/s
# Warmup Iteration   2: 579366.675 ops/s
# Warmup Iteration   3: 1625749.423 ops/s
# Warmup Iteration   4: 1593987.773 ops/s
# Warmup Iteration   5: 1687403.934 ops/s
# Warmup Iteration   6: 1612871.705 ops/s
# Warmup Iteration   7: 1674249.167 ops/s
# Warmup Iteration   8: 1528399.950 ops/s
# Warmup Iteration   9: 1545673.821 ops/s
# Warmup Iteration  10: 1705684.760 ops/s
# Warmup Iteration  11: 1607000.246 ops/s
# Warmup Iteration  12: 1603257.316 ops/s
# Warmup Iteration  13: 1508259.301 ops/s
# Warmup Iteration  14: 1732996.192 ops/s
# Warmup Iteration  15: 1608519.122 ops/s
# Warmup Iteration  16: 1694669.770 ops/s
# Warmup Iteration  17: 1714666.248 ops/s
# Warmup Iteration  18: 1620885.859 ops/s
# Warmup Iteration  19: 1741677.847 ops/s
# Warmup Iteration  20: 1646681.399 ops/s
# Warmup Iteration  21: 1724854.974 ops/s
# Warmup Iteration  22: 1614129.894 ops/s
# Warmup Iteration  23: 1649119.425 ops/s
# Warmup Iteration  24: 1658404.558 ops/s
# Warmup Iteration  25: 1681829.311 ops/s
# Warmup Iteration  26: 1657242.931 ops/s
# Warmup Iteration  27: 1738987.677 ops/s
# Warmup Iteration  28: 1634041.256 ops/s
# Warmup Iteration  29: 1734529.046 ops/s
# Warmup Iteration  30: 1695504.216 ops/s
Iteration   1: 1684143.334 ops/s
Iteration   2: 1742801.535 ops/s
Iteration   3: 1604001.892 ops/s
Iteration   4: 1708428.709 ops/s
Iteration   5: 1691654.182 ops/s
Iteration   6: 1626283.310 ops/s
Iteration   7: 1740743.705 ops/s
Iteration   8: 1637049.738 ops/s
Iteration   9: 1699902.697 ops/s
Iteration  10: 1651254.724 ops/s
Iteration  11: 1696988.175 ops/s
Iteration  12: 1687076.693 ops/s
Iteration  13: 1643884.682 ops/s
Iteration  14: 1698642.794 ops/s
Iteration  15: 1646007.655 ops/s
Iteration  16: 1661424.761 ops/s
Iteration  17: 1749218.011 ops/s
Iteration  18: 1738450.342 ops/s
Iteration  19: 1647832.973 ops/s
Iteration  20: 1722537.868 ops/s
Iteration  21: 1714768.932 ops/s
Iteration  22: 1614361.144 ops/s
Iteration  23: 1727244.534 ops/s
Iteration  24: 1632045.640 ops/s
Iteration  25: 1730688.715 ops/s
Iteration  26: 1637606.930 ops/s
Iteration  27: 1674196.928 ops/s
Iteration  28: 1705263.505 ops/s
Iteration  29: 1762391.528 ops/s
Iteration  30: 1674804.198 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambWithFirstFires":
  1685056.661 ±(99.9%) 29359.736 ops/s [Average]
  (min, avg, max) = (1604001.892, 1685056.661, 1762391.528), stdev = 43944.274
  CI (99.9%): [1655696.925, 1714416.397] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SingleAmbTest._Benchmark.benchmark_ambWithFirstFires  thrpt   30  1685056.661 ± 29359.736  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalMissingRequested$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalMissingRequested

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 185556.334 ops/s
# Warmup Iteration   2: 832520.830 ops/s
# Warmup Iteration   3: 1840989.464 ops/s
# Warmup Iteration   4: 1681561.721 ops/s
# Warmup Iteration   5: 1880360.689 ops/s
# Warmup Iteration   6: 1982506.175 ops/s
# Warmup Iteration   7: 1928438.785 ops/s
# Warmup Iteration   8: 1987916.517 ops/s
# Warmup Iteration   9: 2004570.917 ops/s
# Warmup Iteration  10: 1944719.190 ops/s
# Warmup Iteration  11: 1940020.909 ops/s
# Warmup Iteration  12: 1979150.531 ops/s
# Warmup Iteration  13: 2056398.758 ops/s
# Warmup Iteration  14: 1917068.845 ops/s
# Warmup Iteration  15: 1991925.233 ops/s
# Warmup Iteration  16: 1967342.226 ops/s
# Warmup Iteration  17: 2014229.088 ops/s
# Warmup Iteration  18: 1986084.260 ops/s
# Warmup Iteration  19: 1973240.915 ops/s
# Warmup Iteration  20: 2059361.152 ops/s
# Warmup Iteration  21: 2025342.380 ops/s
# Warmup Iteration  22: 1902150.771 ops/s
# Warmup Iteration  23: 2007956.881 ops/s
# Warmup Iteration  24: 1929644.861 ops/s
# Warmup Iteration  25: 2019959.150 ops/s
# Warmup Iteration  26: 2060147.250 ops/s
# Warmup Iteration  27: 1916164.546 ops/s
# Warmup Iteration  28: 2009962.091 ops/s
# Warmup Iteration  29: 1956127.828 ops/s
# Warmup Iteration  30: 1964641.675 ops/s
Iteration   1: 1942103.545 ops/s
Iteration   2: 1959755.393 ops/s
Iteration   3: 2072549.078 ops/s
Iteration   4: 1894874.312 ops/s
Iteration   5: 1944662.918 ops/s
Iteration   6: 2071574.624 ops/s
Iteration   7: 1946912.682 ops/s
Iteration   8: 1977480.135 ops/s
Iteration   9: 2011294.476 ops/s
Iteration  10: 1962954.097 ops/s
Iteration  11: 1977437.028 ops/s
Iteration  12: 1594660.807 ops/s
Iteration  13: 2000813.731 ops/s
Iteration  14: 1988602.286 ops/s
Iteration  15: 1928182.114 ops/s
Iteration  16: 2048566.604 ops/s
Iteration  17: 1994393.629 ops/s
Iteration  18: 1983101.451 ops/s
Iteration  19: 1996206.175 ops/s
Iteration  20: 1995025.070 ops/s
Iteration  21: 1954345.893 ops/s
Iteration  22: 1984488.197 ops/s
Iteration  23: 2017265.003 ops/s
Iteration  24: 1955292.011 ops/s
Iteration  25: 1998069.195 ops/s
Iteration  26: 1957966.413 ops/s
Iteration  27: 1957727.882 ops/s
Iteration  28: 2040342.062 ops/s
Iteration  29: 1967726.601 ops/s
Iteration  30: 1909247.448 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalMissingRequested":
  1967787.362 ±(99.9%) 54794.783 ops/s [Average]
  (min, avg, max) = (1594660.807, 1967787.362, 2072549.078), stdev = 82014.258
  CI (99.9%): [1912992.579, 2022582.145] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_normalMissingRequested  thrpt   30  1967787.362 ± 54794.783  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_emptyInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_emptyInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70966.605 ops/s
# Warmup Iteration   2: 211130.295 ops/s
# Warmup Iteration   3: 528385.506 ops/s
# Warmup Iteration   4: 496113.573 ops/s
# Warmup Iteration   5: 508711.597 ops/s
# Warmup Iteration   6: 501630.137 ops/s
# Warmup Iteration   7: 456970.018 ops/s
# Warmup Iteration   8: 542907.311 ops/s
# Warmup Iteration   9: 521148.714 ops/s
# Warmup Iteration  10: 527377.342 ops/s
# Warmup Iteration  11: 525147.257 ops/s
# Warmup Iteration  12: 512700.867 ops/s
# Warmup Iteration  13: 533789.677 ops/s
# Warmup Iteration  14: 517493.188 ops/s
# Warmup Iteration  15: 517189.224 ops/s
# Warmup Iteration  16: 547716.033 ops/s
# Warmup Iteration  17: 517373.217 ops/s
# Warmup Iteration  18: 555265.328 ops/s
# Warmup Iteration  19: 552679.948 ops/s
# Warmup Iteration  20: 527728.334 ops/s
# Warmup Iteration  21: 559421.117 ops/s
# Warmup Iteration  22: 534689.105 ops/s
# Warmup Iteration  23: 552439.373 ops/s
# Warmup Iteration  24: 550603.275 ops/s
# Warmup Iteration  25: 545888.864 ops/s
# Warmup Iteration  26: 566650.420 ops/s
# Warmup Iteration  27: 551609.225 ops/s
# Warmup Iteration  28: 544615.731 ops/s
# Warmup Iteration  29: 564741.259 ops/s
# Warmup Iteration  30: 532245.394 ops/s
Iteration   1: 570898.126 ops/s
Iteration   2: 570887.516 ops/s
Iteration   3: 534272.036 ops/s
Iteration   4: 551064.780 ops/s
Iteration   5: 548595.865 ops/s
Iteration   6: 560518.230 ops/s
Iteration   7: 531721.496 ops/s
Iteration   8: 546045.108 ops/s
Iteration   9: 557982.881 ops/s
Iteration  10: 535059.482 ops/s
Iteration  11: 561881.740 ops/s
Iteration  12: 538392.325 ops/s
Iteration  13: 544373.278 ops/s
Iteration  14: 558122.739 ops/s
Iteration  15: 542232.348 ops/s
Iteration  16: 570152.421 ops/s
Iteration  17: 540392.067 ops/s
Iteration  18: 556949.818 ops/s
Iteration  19: 552864.394 ops/s
Iteration  20: 547243.266 ops/s
Iteration  21: 570088.283 ops/s
Iteration  22: 529671.069 ops/s
Iteration  23: 581177.971 ops/s
Iteration  24: 563075.423 ops/s
Iteration  25: 526509.982 ops/s
Iteration  26: 554919.977 ops/s
Iteration  27: 554399.096 ops/s
Iteration  28: 539123.562 ops/s
Iteration  29: 542063.320 ops/s
Iteration  30: 572424.514 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_emptyInner":
  551770.104 ±(99.9%) 9620.128 ops/s [Average]
  (min, avg, max) = (526509.982, 551770.104, 581177.971), stdev = 14398.957
  CI (99.9%): [542149.975, 561390.232] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_emptyInner  thrpt   30  551770.104 ± 9620.128  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambIterableWithSecondFires$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambIterableWithSecondFires

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 149031.860 ops/s
# Warmup Iteration   2: 551144.123 ops/s
# Warmup Iteration   3: 1400838.340 ops/s
# Warmup Iteration   4: 1323606.119 ops/s
# Warmup Iteration   5: 1615370.377 ops/s
# Warmup Iteration   6: 1565174.404 ops/s
# Warmup Iteration   7: 1648792.770 ops/s
# Warmup Iteration   8: 1586512.404 ops/s
# Warmup Iteration   9: 1561397.642 ops/s
# Warmup Iteration  10: 1625160.840 ops/s
# Warmup Iteration  11: 1646762.678 ops/s
# Warmup Iteration  12: 1607973.141 ops/s
# Warmup Iteration  13: 1560467.243 ops/s
# Warmup Iteration  14: 1594326.533 ops/s
# Warmup Iteration  15: 1635936.756 ops/s
# Warmup Iteration  16: 1607907.487 ops/s
# Warmup Iteration  17: 1553096.178 ops/s
# Warmup Iteration  18: 1579458.724 ops/s
# Warmup Iteration  19: 1594065.013 ops/s
# Warmup Iteration  20: 1551523.471 ops/s
# Warmup Iteration  21: 1623708.818 ops/s
# Warmup Iteration  22: 1552128.548 ops/s
# Warmup Iteration  23: 1573840.067 ops/s
# Warmup Iteration  24: 1573074.989 ops/s
# Warmup Iteration  25: 1655842.418 ops/s
# Warmup Iteration  26: 1561205.279 ops/s
# Warmup Iteration  27: 1649285.674 ops/s
# Warmup Iteration  28: 1579234.509 ops/s
# Warmup Iteration  29: 1561446.432 ops/s
# Warmup Iteration  30: 1676412.169 ops/s
Iteration   1: 1521748.950 ops/s
Iteration   2: 1623797.415 ops/s
Iteration   3: 1584605.621 ops/s
Iteration   4: 1602431.574 ops/s
Iteration   5: 1628128.754 ops/s
Iteration   6: 1519505.323 ops/s
Iteration   7: 1330392.607 ops/s
Iteration   8: 1623575.713 ops/s
Iteration   9: 1578348.888 ops/s
Iteration  10: 1641810.440 ops/s
Iteration  11: 1587372.757 ops/s
Iteration  12: 1530887.059 ops/s
Iteration  13: 1663947.571 ops/s
Iteration  14: 1557556.784 ops/s
Iteration  15: 1564332.747 ops/s
Iteration  16: 1677993.293 ops/s
Iteration  17: 1558670.913 ops/s
Iteration  18: 1638186.146 ops/s
Iteration  19: 1615211.815 ops/s
Iteration  20: 1598263.387 ops/s
Iteration  21: 1635115.233 ops/s
Iteration  22: 1628149.165 ops/s
Iteration  23: 1558156.540 ops/s
Iteration  24: 1651450.651 ops/s
Iteration  25: 1540429.832 ops/s
Iteration  26: 1586777.894 ops/s
Iteration  27: 1572641.170 ops/s
Iteration  28: 1608469.290 ops/s
Iteration  29: 1588241.981 ops/s
Iteration  30: 1574314.702 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambIterableWithSecondFires":
  1586350.474 ±(99.9%) 42513.435 ops/s [Average]
  (min, avg, max) = (1330392.607, 1586350.474, 1677993.293), stdev = 63632.114
  CI (99.9%): [1543837.038, 1628863.909] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SingleAmbTest._Benchmark.benchmark_ambIterableWithSecondFires  thrpt   30  1586350.474 ± 42513.435  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambIterableWithFirstFires$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambIterableWithFirstFires

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 152717.168 ops/s
# Warmup Iteration   2: 826539.430 ops/s
# Warmup Iteration   3: 1385046.020 ops/s
# Warmup Iteration   4: 1582405.350 ops/s
# Warmup Iteration   5: 1680103.459 ops/s
# Warmup Iteration   6: 1420549.524 ops/s
# Warmup Iteration   7: 1635585.415 ops/s
# Warmup Iteration   8: 1592330.421 ops/s
# Warmup Iteration   9: 1597211.383 ops/s
# Warmup Iteration  10: 1653889.552 ops/s
# Warmup Iteration  11: 1562170.556 ops/s
# Warmup Iteration  12: 1665511.461 ops/s
# Warmup Iteration  13: 1609168.973 ops/s
# Warmup Iteration  14: 1656063.285 ops/s
# Warmup Iteration  15: 1628524.463 ops/s
# Warmup Iteration  16: 1609722.091 ops/s
# Warmup Iteration  17: 1638798.140 ops/s
# Warmup Iteration  18: 1610385.002 ops/s
# Warmup Iteration  19: 1652912.297 ops/s
# Warmup Iteration  20: 1561895.671 ops/s
# Warmup Iteration  21: 1582412.329 ops/s
# Warmup Iteration  22: 1685296.563 ops/s
# Warmup Iteration  23: 1571874.893 ops/s
# Warmup Iteration  24: 1617174.871 ops/s
# Warmup Iteration  25: 1642854.610 ops/s
# Warmup Iteration  26: 1609214.576 ops/s
# Warmup Iteration  27: 1707890.207 ops/s
# Warmup Iteration  28: 1643333.799 ops/s
# Warmup Iteration  29: 1595668.370 ops/s
# Warmup Iteration  30: 1705574.509 ops/s
Iteration   1: 1666818.541 ops/s
Iteration   2: 1657414.612 ops/s
Iteration   3: 1573966.263 ops/s
Iteration   4: 1654116.389 ops/s
Iteration   5: 1611678.651 ops/s
Iteration   6: 1671870.241 ops/s
Iteration   7: 1584359.230 ops/s
Iteration   8: 1646032.922 ops/s
Iteration   9: 1691431.335 ops/s
Iteration  10: 1623282.723 ops/s
Iteration  11: 1679790.028 ops/s
Iteration  12: 1584151.716 ops/s
Iteration  13: 1680609.555 ops/s
Iteration  14: 1670325.686 ops/s
Iteration  15: 1567738.678 ops/s
Iteration  16: 1686224.776 ops/s
Iteration  17: 1603149.314 ops/s
Iteration  18: 1624110.898 ops/s
Iteration  19: 1603364.382 ops/s
Iteration  20: 1609157.028 ops/s
Iteration  21: 1624429.391 ops/s
Iteration  22: 1637750.913 ops/s
Iteration  23: 1618773.457 ops/s
Iteration  24: 1687200.797 ops/s
Iteration  25: 1661350.622 ops/s
Iteration  26: 1626560.125 ops/s
Iteration  27: 1627149.868 ops/s
Iteration  28: 1607225.197 ops/s
Iteration  29: 1608820.648 ops/s
Iteration  30: 1691754.282 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambIterableWithFirstFires":
  1636020.275 ±(99.9%) 24803.055 ops/s [Average]
  (min, avg, max) = (1567738.678, 1636020.275, 1691754.282), stdev = 37124.048
  CI (99.9%): [1611217.221, 1660823.330] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SingleAmbTest._Benchmark.benchmark_ambIterableWithFirstFires  thrpt   30  1636020.275 ± 24803.055  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambWithSecondFires$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambWithSecondFires

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 117811.951 ops/s
# Warmup Iteration   2: 620353.482 ops/s
# Warmup Iteration   3: 1403691.565 ops/s
# Warmup Iteration   4: 1747497.670 ops/s
# Warmup Iteration   5: 1642256.944 ops/s
# Warmup Iteration   6: 1738155.022 ops/s
# Warmup Iteration   7: 1651415.256 ops/s
# Warmup Iteration   8: 1715684.800 ops/s
# Warmup Iteration   9: 1615035.495 ops/s
# Warmup Iteration  10: 1583560.714 ops/s
# Warmup Iteration  11: 1678102.077 ops/s
# Warmup Iteration  12: 1709933.480 ops/s
# Warmup Iteration  13: 1751432.152 ops/s
# Warmup Iteration  14: 1703010.865 ops/s
# Warmup Iteration  15: 1667688.498 ops/s
# Warmup Iteration  16: 1795355.748 ops/s
# Warmup Iteration  17: 1654403.202 ops/s
# Warmup Iteration  18: 1705049.255 ops/s
# Warmup Iteration  19: 1718782.951 ops/s
# Warmup Iteration  20: 1694636.478 ops/s
# Warmup Iteration  21: 1785468.573 ops/s
# Warmup Iteration  22: 1644780.276 ops/s
# Warmup Iteration  23: 1721912.936 ops/s
# Warmup Iteration  24: 1744852.493 ops/s
# Warmup Iteration  25: 1667709.023 ops/s
# Warmup Iteration  26: 1657267.758 ops/s
# Warmup Iteration  27: 1714040.304 ops/s
# Warmup Iteration  28: 1741355.654 ops/s
# Warmup Iteration  29: 1688134.443 ops/s
# Warmup Iteration  30: 1579404.690 ops/s
Iteration   1: 1421607.924 ops/s
Iteration   2: 1712217.293 ops/s
Iteration   3: 1740193.420 ops/s
Iteration   4: 1694081.109 ops/s
Iteration   5: 1696917.535 ops/s
Iteration   6: 1721360.452 ops/s
Iteration   7: 1744130.417 ops/s
Iteration   8: 1670628.385 ops/s
Iteration   9: 1798258.222 ops/s
Iteration  10: 1719024.295 ops/s
Iteration  11: 1649254.829 ops/s
Iteration  12: 1778576.480 ops/s
Iteration  13: 1679764.217 ops/s
Iteration  14: 1684894.186 ops/s
Iteration  15: 1738789.408 ops/s
Iteration  16: 1659192.476 ops/s
Iteration  17: 1728097.946 ops/s
Iteration  18: 1657978.002 ops/s
Iteration  19: 1738905.124 ops/s
Iteration  20: 1693941.105 ops/s
Iteration  21: 1679083.112 ops/s
Iteration  22: 1723606.475 ops/s
Iteration  23: 1728053.509 ops/s
Iteration  24: 1766012.642 ops/s
Iteration  25: 1784711.963 ops/s
Iteration  26: 1694832.468 ops/s
Iteration  27: 1730704.071 ops/s
Iteration  28: 1694946.761 ops/s
Iteration  29: 1684178.498 ops/s
Iteration  30: 1655023.831 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleAmbTest._Benchmark.benchmark_ambWithSecondFires":
  1702298.872 ±(99.9%) 43983.298 ops/s [Average]
  (min, avg, max) = (1421607.924, 1702298.872, 1798258.222), stdev = 65832.135
  CI (99.9%): [1658315.573, 1746282.170] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
SingleAmbTest._Benchmark.benchmark_ambWithSecondFires  thrpt   30  1702298.872 ± 43983.298  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_requestInline$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_requestInline

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124013.487 ops/s
# Warmup Iteration   2: 460507.439 ops/s
# Warmup Iteration   3: 970708.451 ops/s
# Warmup Iteration   4: 1265887.306 ops/s
# Warmup Iteration   5: 1292919.358 ops/s
# Warmup Iteration   6: 1229924.882 ops/s
# Warmup Iteration   7: 1299310.718 ops/s
# Warmup Iteration   8: 1330082.053 ops/s
# Warmup Iteration   9: 1364139.647 ops/s
# Warmup Iteration  10: 1280526.265 ops/s
# Warmup Iteration  11: 1338269.408 ops/s
# Warmup Iteration  12: 1312688.282 ops/s
# Warmup Iteration  13: 1329150.094 ops/s
# Warmup Iteration  14: 1371414.191 ops/s
# Warmup Iteration  15: 1272426.040 ops/s
# Warmup Iteration  16: 1342643.820 ops/s
# Warmup Iteration  17: 1290334.468 ops/s
# Warmup Iteration  18: 1368757.892 ops/s
# Warmup Iteration  19: 1299619.477 ops/s
# Warmup Iteration  20: 1353238.568 ops/s
# Warmup Iteration  21: 1318997.353 ops/s
# Warmup Iteration  22: 1314485.607 ops/s
# Warmup Iteration  23: 1348291.980 ops/s
# Warmup Iteration  24: 1385225.025 ops/s
# Warmup Iteration  25: 1304121.363 ops/s
# Warmup Iteration  26: 1324015.917 ops/s
# Warmup Iteration  27: 1351495.554 ops/s
# Warmup Iteration  28: 1311984.284 ops/s
# Warmup Iteration  29: 1335843.922 ops/s
# Warmup Iteration  30: 1343412.478 ops/s
Iteration   1: 1288419.729 ops/s
Iteration   2: 1353504.964 ops/s
Iteration   3: 1381101.124 ops/s
Iteration   4: 1308600.346 ops/s
Iteration   5: 1351588.903 ops/s
Iteration   6: 1310254.231 ops/s
Iteration   7: 1322841.030 ops/s
Iteration   8: 1370282.168 ops/s
Iteration   9: 1288098.092 ops/s
Iteration  10: 1348141.366 ops/s
Iteration  11: 1290488.660 ops/s
Iteration  12: 1326181.498 ops/s
Iteration  13: 1317932.743 ops/s
Iteration  14: 1307199.825 ops/s
Iteration  15: 1340797.372 ops/s
Iteration  16: 1278981.490 ops/s
Iteration  17: 1332625.687 ops/s
Iteration  18: 1357684.174 ops/s
Iteration  19: 1272094.679 ops/s
Iteration  20: 1390165.968 ops/s
Iteration  21: 1408389.462 ops/s
Iteration  22: 1291314.597 ops/s
Iteration  23: 1289826.138 ops/s
Iteration  24: 1364671.996 ops/s
Iteration  25: 1273347.444 ops/s
Iteration  26: 1329547.815 ops/s
Iteration  27: 1344723.716 ops/s
Iteration  28: 1320846.738 ops/s
Iteration  29: 1338792.172 ops/s
Iteration  30: 1291265.861 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_requestInline":
  1326323.666 ±(99.9%) 24125.033 ops/s [Average]
  (min, avg, max) = (1272094.679, 1326323.666, 1408389.462), stdev = 36109.216
  CI (99.9%): [1302198.634, 1350448.699] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_requestInline  thrpt   30  1326323.666 ± 24125.033  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_functionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_functionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69162.991 ops/s
# Warmup Iteration   2: 352420.409 ops/s
# Warmup Iteration   3: 506041.207 ops/s
# Warmup Iteration   4: 505252.631 ops/s
# Warmup Iteration   5: 504491.327 ops/s
# Warmup Iteration   6: 501664.100 ops/s
# Warmup Iteration   7: 500541.252 ops/s
# Warmup Iteration   8: 473843.573 ops/s
# Warmup Iteration   9: 517085.483 ops/s
# Warmup Iteration  10: 518439.246 ops/s
# Warmup Iteration  11: 529068.534 ops/s
# Warmup Iteration  12: 512387.780 ops/s
# Warmup Iteration  13: 530352.010 ops/s
# Warmup Iteration  14: 526438.687 ops/s
# Warmup Iteration  15: 531638.303 ops/s
# Warmup Iteration  16: 538598.992 ops/s
# Warmup Iteration  17: 532972.527 ops/s
# Warmup Iteration  18: 560798.505 ops/s
# Warmup Iteration  19: 543960.418 ops/s
# Warmup Iteration  20: 557398.607 ops/s
# Warmup Iteration  21: 535061.219 ops/s
# Warmup Iteration  22: 550588.687 ops/s
# Warmup Iteration  23: 539412.344 ops/s
# Warmup Iteration  24: 544152.365 ops/s
# Warmup Iteration  25: 384967.289 ops/s
# Warmup Iteration  26: 520911.338 ops/s
# Warmup Iteration  27: 554021.801 ops/s
# Warmup Iteration  28: 539352.492 ops/s
# Warmup Iteration  29: 573420.610 ops/s
# Warmup Iteration  30: 556787.750 ops/s
Iteration   1: 529574.992 ops/s
Iteration   2: 552749.405 ops/s
Iteration   3: 564286.155 ops/s
Iteration   4: 530541.437 ops/s
Iteration   5: 566738.716 ops/s
Iteration   6: 541692.196 ops/s
Iteration   7: 573685.931 ops/s
Iteration   8: 521305.399 ops/s
Iteration   9: 532001.731 ops/s
Iteration  10: 574370.377 ops/s
Iteration  11: 505390.978 ops/s
Iteration  12: 566251.904 ops/s
Iteration  13: 525297.351 ops/s
Iteration  14: 557651.106 ops/s
Iteration  15: 542575.752 ops/s
Iteration  16: 531831.212 ops/s
Iteration  17: 550532.113 ops/s
Iteration  18: 536524.780 ops/s
Iteration  19: 556599.115 ops/s
Iteration  20: 536924.639 ops/s
Iteration  21: 554763.777 ops/s
Iteration  22: 541959.954 ops/s
Iteration  23: 562731.480 ops/s
Iteration  24: 547634.685 ops/s
Iteration  25: 544134.902 ops/s
Iteration  26: 547506.618 ops/s
Iteration  27: 565400.160 ops/s
Iteration  28: 526030.481 ops/s
Iteration  29: 565405.407 ops/s
Iteration  30: 534093.417 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_functionThrows":
  546206.206 ±(99.9%) 11457.955 ops/s [Average]
  (min, avg, max) = (505390.978, 546206.206, 574370.377), stdev = 17149.729
  CI (99.9%): [534748.251, 557664.161] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_functionThrows  thrpt   30  546206.206 ± 11457.955  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 89098.858 ops/s
# Warmup Iteration   2: 295425.953 ops/s
# Warmup Iteration   3: 788890.069 ops/s
# Warmup Iteration   4: 1379281.625 ops/s
# Warmup Iteration   5: 1437642.307 ops/s
# Warmup Iteration   6: 1539918.876 ops/s
# Warmup Iteration   7: 1468036.886 ops/s
# Warmup Iteration   8: 1362032.111 ops/s
# Warmup Iteration   9: 1480921.228 ops/s
# Warmup Iteration  10: 1354591.179 ops/s
# Warmup Iteration  11: 1409524.098 ops/s
# Warmup Iteration  12: 1576539.418 ops/s
# Warmup Iteration  13: 1444897.736 ops/s
# Warmup Iteration  14: 1560241.608 ops/s
# Warmup Iteration  15: 1427854.917 ops/s
# Warmup Iteration  16: 1544678.398 ops/s
# Warmup Iteration  17: 1514113.131 ops/s
# Warmup Iteration  18: 1526866.327 ops/s
# Warmup Iteration  19: 1561687.309 ops/s
# Warmup Iteration  20: 1462718.597 ops/s
# Warmup Iteration  21: 1587221.197 ops/s
# Warmup Iteration  22: 1502070.128 ops/s
# Warmup Iteration  23: 1549440.597 ops/s
# Warmup Iteration  24: 1507219.554 ops/s
# Warmup Iteration  25: 1489701.392 ops/s
# Warmup Iteration  26: 1576272.199 ops/s
# Warmup Iteration  27: 1502531.053 ops/s
# Warmup Iteration  28: 1479266.800 ops/s
# Warmup Iteration  29: 1555946.502 ops/s
# Warmup Iteration  30: 1470629.185 ops/s
Iteration   1: 1559367.254 ops/s
Iteration   2: 1518322.767 ops/s
Iteration   3: 1519988.143 ops/s
Iteration   4: 1555862.081 ops/s
Iteration   5: 1510637.883 ops/s
Iteration   6: 1558772.584 ops/s
Iteration   7: 1457446.137 ops/s
Iteration   8: 1587376.368 ops/s
Iteration   9: 1471351.331 ops/s
Iteration  10: 1510089.654 ops/s
Iteration  11: 1558017.226 ops/s
Iteration  12: 1492971.631 ops/s
Iteration  13: 1482862.071 ops/s
Iteration  14: 1534745.510 ops/s
Iteration  15: 1521003.577 ops/s
Iteration  16: 1479188.716 ops/s
Iteration  17: 1489363.379 ops/s
Iteration  18: 1502103.183 ops/s
Iteration  19: 1538840.866 ops/s
Iteration  20: 1575735.525 ops/s
Iteration  21: 1479117.674 ops/s
Iteration  22: 1521482.829 ops/s
Iteration  23: 1560808.171 ops/s
Iteration  24: 1508686.097 ops/s
Iteration  25: 1524953.609 ops/s
Iteration  26: 1490680.644 ops/s
Iteration  27: 1493486.362 ops/s
Iteration  28: 1512616.769 ops/s
Iteration  29: 1511119.062 ops/s
Iteration  30: 1577921.143 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNext":
  1520163.941 ±(99.9%) 22892.665 ops/s [Average]
  (min, avg, max) = (1457446.137, 1520163.941, 1587376.368), stdev = 34264.665
  CI (99.9%): [1497271.277, 1543056.606] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNext  thrpt   30  1520163.941 ± 22892.665  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157330.553 ops/s
# Warmup Iteration   2: 434545.640 ops/s
# Warmup Iteration   3: 877043.871 ops/s
# Warmup Iteration   4: 1159907.482 ops/s
# Warmup Iteration   5: 1503377.275 ops/s
# Warmup Iteration   6: 1547437.769 ops/s
# Warmup Iteration   7: 1453459.512 ops/s
# Warmup Iteration   8: 1506357.187 ops/s
# Warmup Iteration   9: 1488466.971 ops/s
# Warmup Iteration  10: 1440289.419 ops/s
# Warmup Iteration  11: 1504975.670 ops/s
# Warmup Iteration  12: 1537434.555 ops/s
# Warmup Iteration  13: 1449528.330 ops/s
# Warmup Iteration  14: 1449183.144 ops/s
# Warmup Iteration  15: 1544338.086 ops/s
# Warmup Iteration  16: 1455129.675 ops/s
# Warmup Iteration  17: 1542964.402 ops/s
# Warmup Iteration  18: 1511012.946 ops/s
# Warmup Iteration  19: 1447166.006 ops/s
# Warmup Iteration  20: 1272253.275 ops/s
# Warmup Iteration  21: 1500616.120 ops/s
# Warmup Iteration  22: 1460561.580 ops/s
# Warmup Iteration  23: 1573563.629 ops/s
# Warmup Iteration  24: 1477321.402 ops/s
# Warmup Iteration  25: 1480639.046 ops/s
# Warmup Iteration  26: 1493956.561 ops/s
# Warmup Iteration  27: 1518887.889 ops/s
# Warmup Iteration  28: 1495955.542 ops/s
# Warmup Iteration  29: 1491949.456 ops/s
# Warmup Iteration  30: 1469265.106 ops/s
Iteration   1: 1534655.447 ops/s
Iteration   2: 1443360.133 ops/s
Iteration   3: 1526967.474 ops/s
Iteration   4: 1507360.349 ops/s
Iteration   5: 1491099.590 ops/s
Iteration   6: 1470585.772 ops/s
Iteration   7: 1525181.964 ops/s
Iteration   8: 1503984.768 ops/s
Iteration   9: 1470046.348 ops/s
Iteration  10: 1528608.207 ops/s
Iteration  11: 1512872.267 ops/s
Iteration  12: 1533256.742 ops/s
Iteration  13: 1526419.589 ops/s
Iteration  14: 1496529.689 ops/s
Iteration  15: 1457470.657 ops/s
Iteration  16: 1542618.149 ops/s
Iteration  17: 1455916.654 ops/s
Iteration  18: 1531187.692 ops/s
Iteration  19: 1467044.312 ops/s
Iteration  20: 1513935.167 ops/s
Iteration  21: 1503997.415 ops/s
Iteration  22: 1504424.466 ops/s
Iteration  23: 1493473.326 ops/s
Iteration  24: 1484996.698 ops/s
Iteration  25: 1616638.937 ops/s
Iteration  26: 1517997.597 ops/s
Iteration  27: 1466441.616 ops/s
Iteration  28: 1491869.543 ops/s
Iteration  29: 1504496.318 ops/s
Iteration  30: 1479946.852 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteSize":
  1503446.125 ±(99.9%) 22807.061 ops/s [Average]
  (min, avg, max) = (1443360.133, 1503446.125, 1616638.937), stdev = 34136.537
  CI (99.9%): [1480639.064, 1526253.185] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteSize  thrpt   30  1503446.125 ± 22807.061  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalBuffered$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalBuffered

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101246.173 ops/s
# Warmup Iteration   2: 343066.505 ops/s
# Warmup Iteration   3: 1082160.993 ops/s
# Warmup Iteration   4: 1063078.319 ops/s
# Warmup Iteration   5: 1291098.491 ops/s
# Warmup Iteration   6: 1211631.279 ops/s
# Warmup Iteration   7: 1269239.835 ops/s
# Warmup Iteration   8: 1270218.047 ops/s
# Warmup Iteration   9: 1242363.443 ops/s
# Warmup Iteration  10: 1263258.848 ops/s
# Warmup Iteration  11: 1285481.438 ops/s
# Warmup Iteration  12: 1233453.744 ops/s
# Warmup Iteration  13: 1229770.353 ops/s
# Warmup Iteration  14: 1263693.484 ops/s
# Warmup Iteration  15: 1256949.543 ops/s
# Warmup Iteration  16: 1217165.279 ops/s
# Warmup Iteration  17: 1292385.962 ops/s
# Warmup Iteration  18: 1262479.613 ops/s
# Warmup Iteration  19: 1343495.229 ops/s
# Warmup Iteration  20: 1288933.247 ops/s
# Warmup Iteration  21: 1292042.694 ops/s
# Warmup Iteration  22: 1241818.469 ops/s
# Warmup Iteration  23: 1269279.800 ops/s
# Warmup Iteration  24: 1351461.406 ops/s
# Warmup Iteration  25: 1206810.070 ops/s
# Warmup Iteration  26: 1311065.819 ops/s
# Warmup Iteration  27: 1269091.822 ops/s
# Warmup Iteration  28: 1274249.105 ops/s
# Warmup Iteration  29: 1252493.117 ops/s
# Warmup Iteration  30: 1285438.457 ops/s
Iteration   1: 1312820.825 ops/s
Iteration   2: 1313385.414 ops/s
Iteration   3: 1235934.879 ops/s
Iteration   4: 1341750.683 ops/s
Iteration   5: 1264468.947 ops/s
Iteration   6: 1285608.624 ops/s
Iteration   7: 1379055.732 ops/s
Iteration   8: 1300637.496 ops/s
Iteration   9: 1297423.514 ops/s
Iteration  10: 1276576.607 ops/s
Iteration  11: 1390265.388 ops/s
Iteration  12: 1269120.051 ops/s
Iteration  13: 1321607.375 ops/s
Iteration  14: 1433071.105 ops/s
Iteration  15: 1356367.977 ops/s
Iteration  16: 1283161.344 ops/s
Iteration  17: 1378295.524 ops/s
Iteration  18: 1308161.975 ops/s
Iteration  19: 1375169.049 ops/s
Iteration  20: 1229229.362 ops/s
Iteration  21: 1273371.801 ops/s
Iteration  22: 1210795.906 ops/s
Iteration  23: 1294373.766 ops/s
Iteration  24: 1296355.067 ops/s
Iteration  25: 1206547.579 ops/s
Iteration  26: 1292593.883 ops/s
Iteration  27: 1273304.898 ops/s
Iteration  28: 1254114.977 ops/s
Iteration  29: 1302433.804 ops/s
Iteration  30: 1274134.494 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalBuffered":
  1301004.602 ±(99.9%) 35747.466 ops/s [Average]
  (min, avg, max) = (1206547.579, 1301004.602, 1433071.105), stdev = 53505.129
  CI (99.9%): [1265257.135, 1336752.068] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_normalBuffered  thrpt   30  1301004.602 ± 35747.466  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130301.032 ops/s
# Warmup Iteration   2: 385825.730 ops/s
# Warmup Iteration   3: 818798.282 ops/s
# Warmup Iteration   4: 1397544.449 ops/s
# Warmup Iteration   5: 1514195.422 ops/s
# Warmup Iteration   6: 1459836.781 ops/s
# Warmup Iteration   7: 1553786.501 ops/s
# Warmup Iteration   8: 1490701.088 ops/s
# Warmup Iteration   9: 1551410.292 ops/s
# Warmup Iteration  10: 1414088.730 ops/s
# Warmup Iteration  11: 1452607.428 ops/s
# Warmup Iteration  12: 1592665.644 ops/s
# Warmup Iteration  13: 1454535.165 ops/s
# Warmup Iteration  14: 1188481.191 ops/s
# Warmup Iteration  15: 1493610.879 ops/s
# Warmup Iteration  16: 1488796.367 ops/s
# Warmup Iteration  17: 1510503.242 ops/s
# Warmup Iteration  18: 1529465.300 ops/s
# Warmup Iteration  19: 1562568.903 ops/s
# Warmup Iteration  20: 1495791.626 ops/s
# Warmup Iteration  21: 1554179.714 ops/s
# Warmup Iteration  22: 1545647.863 ops/s
# Warmup Iteration  23: 1468378.506 ops/s
# Warmup Iteration  24: 1527354.455 ops/s
# Warmup Iteration  25: 1505821.036 ops/s
# Warmup Iteration  26: 1561905.785 ops/s
# Warmup Iteration  27: 1505122.378 ops/s
# Warmup Iteration  28: 1576313.705 ops/s
# Warmup Iteration  29: 1465700.248 ops/s
# Warmup Iteration  30: 1553507.213 ops/s
Iteration   1: 1594000.320 ops/s
Iteration   2: 1505822.188 ops/s
Iteration   3: 1496598.988 ops/s
Iteration   4: 1536601.180 ops/s
Iteration   5: 1519306.423 ops/s
Iteration   6: 1531351.187 ops/s
Iteration   7: 1594917.329 ops/s
Iteration   8: 1470411.549 ops/s
Iteration   9: 1555280.291 ops/s
Iteration  10: 1544108.252 ops/s
Iteration  11: 1476884.592 ops/s
Iteration  12: 1561566.606 ops/s
Iteration  13: 1467823.440 ops/s
Iteration  14: 1512223.604 ops/s
Iteration  15: 1471465.750 ops/s
Iteration  16: 1488166.364 ops/s
Iteration  17: 1513926.537 ops/s
Iteration  18: 1518564.984 ops/s
Iteration  19: 1510293.923 ops/s
Iteration  20: 1544307.877 ops/s
Iteration  21: 1458100.267 ops/s
Iteration  22: 1534294.354 ops/s
Iteration  23: 1520924.569 ops/s
Iteration  24: 1566073.974 ops/s
Iteration  25: 1465902.053 ops/s
Iteration  26: 1536625.926 ops/s
Iteration  27: 1589010.688 ops/s
Iteration  28: 1508305.926 ops/s
Iteration  29: 1527430.904 ops/s
Iteration  30: 1506192.630 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNext":
  1520882.756 ±(99.9%) 25266.129 ops/s [Average]
  (min, avg, max) = (1458100.267, 1520882.756, 1594917.329), stdev = 37817.156
  CI (99.9%): [1495616.626, 1546148.885] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_reentrantOnNext  thrpt   30  1520882.756 ± 25266.129  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 89325.344 ops/s
# Warmup Iteration   2: 352948.129 ops/s
# Warmup Iteration   3: 390151.015 ops/s
# Warmup Iteration   4: 446132.080 ops/s
# Warmup Iteration   5: 417831.186 ops/s
# Warmup Iteration   6: 472037.939 ops/s
# Warmup Iteration   7: 482410.933 ops/s
# Warmup Iteration   8: 479947.401 ops/s
# Warmup Iteration   9: 513223.218 ops/s
# Warmup Iteration  10: 481390.677 ops/s
# Warmup Iteration  11: 484208.782 ops/s
# Warmup Iteration  12: 491455.285 ops/s
# Warmup Iteration  13: 489601.832 ops/s
# Warmup Iteration  14: 501078.219 ops/s
# Warmup Iteration  15: 470627.113 ops/s
# Warmup Iteration  16: 494362.623 ops/s
# Warmup Iteration  17: 510172.574 ops/s
# Warmup Iteration  18: 501208.489 ops/s
# Warmup Iteration  19: 516602.745 ops/s
# Warmup Iteration  20: 489528.350 ops/s
# Warmup Iteration  21: 519297.819 ops/s
# Warmup Iteration  22: 500889.096 ops/s
# Warmup Iteration  23: 504370.027 ops/s
# Warmup Iteration  24: 503377.790 ops/s
# Warmup Iteration  25: 512375.525 ops/s
# Warmup Iteration  26: 490786.086 ops/s
# Warmup Iteration  27: 491436.333 ops/s
# Warmup Iteration  28: 507562.304 ops/s
# Warmup Iteration  29: 495386.385 ops/s
# Warmup Iteration  30: 512237.503 ops/s
Iteration   1: 499208.511 ops/s
Iteration   2: 502952.876 ops/s
Iteration   3: 511671.988 ops/s
Iteration   4: 493843.813 ops/s
Iteration   5: 502084.150 ops/s
Iteration   6: 505226.197 ops/s
Iteration   7: 496546.635 ops/s
Iteration   8: 517345.720 ops/s
Iteration   9: 509935.447 ops/s
Iteration  10: 511612.883 ops/s
Iteration  11: 511592.678 ops/s
Iteration  12: 493595.600 ops/s
Iteration  13: 520282.794 ops/s
Iteration  14: 498040.492 ops/s
Iteration  15: 485955.479 ops/s
Iteration  16: 512164.480 ops/s
Iteration  17: 494864.204 ops/s
Iteration  18: 505998.142 ops/s
Iteration  19: 515335.598 ops/s
Iteration  20: 492349.303 ops/s
Iteration  21: 520055.435 ops/s
Iteration  22: 515915.030 ops/s
Iteration  23: 498716.316 ops/s
Iteration  24: 510764.789 ops/s
Iteration  25: 509119.916 ops/s
Iteration  26: 516018.256 ops/s
Iteration  27: 494136.820 ops/s
Iteration  28: 501023.237 ops/s
Iteration  29: 518687.235 ops/s
Iteration  30: 486125.677 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorSize":
  505038.990 ±(99.9%) 6774.499 ops/s [Average]
  (min, avg, max) = (485955.479, 505038.990, 520282.794), stdev = 10139.753
  CI (99.9%): [498264.491, 511813.490] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorSize  thrpt   30  505038.990 ± 6774.499  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 68468.273 ops/s
# Warmup Iteration   2: 268359.987 ops/s
# Warmup Iteration   3: 551639.820 ops/s
# Warmup Iteration   4: 863729.461 ops/s
# Warmup Iteration   5: 996774.535 ops/s
# Warmup Iteration   6: 936668.074 ops/s
# Warmup Iteration   7: 963445.790 ops/s
# Warmup Iteration   8: 877083.166 ops/s
# Warmup Iteration   9: 833082.996 ops/s
# Warmup Iteration  10: 930032.854 ops/s
# Warmup Iteration  11: 946774.773 ops/s
# Warmup Iteration  12: 981382.064 ops/s
# Warmup Iteration  13: 923759.767 ops/s
# Warmup Iteration  14: 947618.035 ops/s
# Warmup Iteration  15: 947626.890 ops/s
# Warmup Iteration  16: 937365.730 ops/s
# Warmup Iteration  17: 960767.821 ops/s
# Warmup Iteration  18: 946742.415 ops/s
# Warmup Iteration  19: 935775.505 ops/s
# Warmup Iteration  20: 928741.614 ops/s
# Warmup Iteration  21: 989716.017 ops/s
# Warmup Iteration  22: 962723.163 ops/s
# Warmup Iteration  23: 948791.646 ops/s
# Warmup Iteration  24: 974069.901 ops/s
# Warmup Iteration  25: 914118.962 ops/s
# Warmup Iteration  26: 978844.557 ops/s
# Warmup Iteration  27: 947162.432 ops/s
# Warmup Iteration  28: 915845.004 ops/s
# Warmup Iteration  29: 950657.765 ops/s
# Warmup Iteration  30: 975841.475 ops/s
Iteration   1: 964813.638 ops/s
Iteration   2: 937455.313 ops/s
Iteration   3: 990364.844 ops/s
Iteration   4: 944738.512 ops/s
Iteration   5: 992003.451 ops/s
Iteration   6: 939006.069 ops/s
Iteration   7: 965109.581 ops/s
Iteration   8: 959303.012 ops/s
Iteration   9: 944007.834 ops/s
Iteration  10: 1011333.471 ops/s
Iteration  11: 902993.095 ops/s
Iteration  12: 989384.236 ops/s
Iteration  13: 982383.971 ops/s
Iteration  14: 927950.949 ops/s
Iteration  15: 937474.366 ops/s
Iteration  16: 995327.306 ops/s
Iteration  17: 957545.696 ops/s
Iteration  18: 981305.498 ops/s
Iteration  19: 957559.960 ops/s
Iteration  20: 985277.688 ops/s
Iteration  21: 960208.438 ops/s
Iteration  22: 987637.001 ops/s
Iteration  23: 990990.628 ops/s
Iteration  24: 941479.548 ops/s
Iteration  25: 1023820.937 ops/s
Iteration  26: 928541.027 ops/s
Iteration  27: 982944.104 ops/s
Iteration  28: 955146.264 ops/s
Iteration  29: 982543.801 ops/s
Iteration  30: 976409.868 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound":
  966502.004 ±(99.9%) 18301.131 ops/s [Average]
  (min, avg, max) = (902993.095, 966502.004, 1023820.937), stdev = 27392.274
  CI (99.9%): [948200.872, 984803.135] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound  thrpt   30  966502.004 ± 18301.131  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionErrorSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionErrorSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87578.834 ops/s
# Warmup Iteration   2: 312955.733 ops/s
# Warmup Iteration   3: 425690.265 ops/s
# Warmup Iteration   4: 448620.501 ops/s
# Warmup Iteration   5: 481630.740 ops/s
# Warmup Iteration   6: 465287.371 ops/s
# Warmup Iteration   7: 461560.455 ops/s
# Warmup Iteration   8: 465957.736 ops/s
# Warmup Iteration   9: 442176.035 ops/s
# Warmup Iteration  10: 486776.588 ops/s
# Warmup Iteration  11: 479147.014 ops/s
# Warmup Iteration  12: 469010.637 ops/s
# Warmup Iteration  13: 471122.644 ops/s
# Warmup Iteration  14: 471565.060 ops/s
# Warmup Iteration  15: 472501.746 ops/s
# Warmup Iteration  16: 488339.822 ops/s
# Warmup Iteration  17: 483889.640 ops/s
# Warmup Iteration  18: 493498.003 ops/s
# Warmup Iteration  19: 508659.030 ops/s
# Warmup Iteration  20: 455911.978 ops/s
# Warmup Iteration  21: 518198.718 ops/s
# Warmup Iteration  22: 511209.249 ops/s
# Warmup Iteration  23: 480383.069 ops/s
# Warmup Iteration  24: 494556.793 ops/s
# Warmup Iteration  25: 507042.558 ops/s
# Warmup Iteration  26: 479765.742 ops/s
# Warmup Iteration  27: 510569.991 ops/s
# Warmup Iteration  28: 518798.752 ops/s
# Warmup Iteration  29: 493308.679 ops/s
# Warmup Iteration  30: 485609.599 ops/s
Iteration   1: 517606.550 ops/s
Iteration   2: 512710.261 ops/s
Iteration   3: 488299.903 ops/s
Iteration   4: 491242.476 ops/s
Iteration   5: 519356.451 ops/s
Iteration   6: 504760.057 ops/s
Iteration   7: 484860.422 ops/s
Iteration   8: 513907.992 ops/s
Iteration   9: 479135.069 ops/s
Iteration  10: 481866.573 ops/s
Iteration  11: 498843.177 ops/s
Iteration  12: 484594.928 ops/s
Iteration  13: 493895.124 ops/s
Iteration  14: 501593.992 ops/s
Iteration  15: 472650.312 ops/s
Iteration  16: 503478.239 ops/s
Iteration  17: 519995.297 ops/s
Iteration  18: 518580.448 ops/s
Iteration  19: 517471.753 ops/s
Iteration  20: 511270.000 ops/s
Iteration  21: 493769.055 ops/s
Iteration  22: 511257.745 ops/s
Iteration  23: 480548.531 ops/s
Iteration  24: 506041.841 ops/s
Iteration  25: 484877.444 ops/s
Iteration  26: 509590.730 ops/s
Iteration  27: 509812.388 ops/s
Iteration  28: 484695.048 ops/s
Iteration  29: 496463.031 ops/s
Iteration  30: 471286.190 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionErrorSize":
  498815.368 ±(99.9%) 10011.450 ops/s [Average]
  (min, avg, max) = (471286.190, 498815.368, 519995.297), stdev = 14984.668
  CI (99.9%): [488803.918, 508826.817] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_noHeadRetentionErrorSize  thrpt   30  498815.368 ± 10011.450  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 120459.673 ops/s
# Warmup Iteration   2: 286547.936 ops/s
# Warmup Iteration   3: 465335.849 ops/s
# Warmup Iteration   4: 754936.188 ops/s
# Warmup Iteration   5: 961467.175 ops/s
# Warmup Iteration   6: 962241.883 ops/s
# Warmup Iteration   7: 980925.119 ops/s
# Warmup Iteration   8: 949183.318 ops/s
# Warmup Iteration   9: 977067.256 ops/s
# Warmup Iteration  10: 945497.962 ops/s
# Warmup Iteration  11: 946554.002 ops/s
# Warmup Iteration  12: 953278.909 ops/s
# Warmup Iteration  13: 977745.467 ops/s
# Warmup Iteration  14: 959263.775 ops/s
# Warmup Iteration  15: 934684.356 ops/s
# Warmup Iteration  16: 965353.710 ops/s
# Warmup Iteration  17: 947441.000 ops/s
# Warmup Iteration  18: 929669.920 ops/s
# Warmup Iteration  19: 993855.869 ops/s
# Warmup Iteration  20: 938739.919 ops/s
# Warmup Iteration  21: 965039.494 ops/s
# Warmup Iteration  22: 949184.693 ops/s
# Warmup Iteration  23: 966433.639 ops/s
# Warmup Iteration  24: 962618.644 ops/s
# Warmup Iteration  25: 938454.886 ops/s
# Warmup Iteration  26: 970979.931 ops/s
# Warmup Iteration  27: 936462.142 ops/s
# Warmup Iteration  28: 944475.704 ops/s
# Warmup Iteration  29: 955131.691 ops/s
# Warmup Iteration  30: 934592.888 ops/s
Iteration   1: 960683.153 ops/s
Iteration   2: 914773.914 ops/s
Iteration   3: 974467.323 ops/s
Iteration   4: 965412.044 ops/s
Iteration   5: 979176.336 ops/s
Iteration   6: 970891.281 ops/s
Iteration   7: 951866.776 ops/s
Iteration   8: 962847.435 ops/s
Iteration   9: 952875.469 ops/s
Iteration  10: 960271.295 ops/s
Iteration  11: 987398.573 ops/s
Iteration  12: 979038.829 ops/s
Iteration  13: 935883.365 ops/s
Iteration  14: 973249.555 ops/s
Iteration  15: 971079.506 ops/s
Iteration  16: 923537.674 ops/s
Iteration  17: 967755.664 ops/s
Iteration  18: 946542.107 ops/s
Iteration  19: 953794.080 ops/s
Iteration  20: 951908.426 ops/s
Iteration  21: 907247.438 ops/s
Iteration  22: 1007014.516 ops/s
Iteration  23: 967153.164 ops/s
Iteration  24: 942549.734 ops/s
Iteration  25: 1000551.817 ops/s
Iteration  26: 929519.636 ops/s
Iteration  27: 970785.512 ops/s
Iteration  28: 990637.871 ops/s
Iteration  29: 934992.422 ops/s
Iteration  30: 983370.724 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound":
  960575.855 ±(99.9%) 16034.104 ops/s [Average]
  (min, avg, max) = (907247.438, 960575.855, 1007014.516), stdev = 23999.094
  CI (99.9%): [944541.751, 976609.959] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForResetSizeBound  thrpt   30  960575.855 ± 16034.104  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 134165.208 ops/s
# Warmup Iteration   2: 450865.752 ops/s
# Warmup Iteration   3: 965471.730 ops/s
# Warmup Iteration   4: 1164399.571 ops/s
# Warmup Iteration   5: 1503275.848 ops/s
# Warmup Iteration   6: 1442427.823 ops/s
# Warmup Iteration   7: 1465495.967 ops/s
# Warmup Iteration   8: 1506435.576 ops/s
# Warmup Iteration   9: 1429630.276 ops/s
# Warmup Iteration  10: 1507066.820 ops/s
# Warmup Iteration  11: 1452094.136 ops/s
# Warmup Iteration  12: 1427036.140 ops/s
# Warmup Iteration  13: 1491492.947 ops/s
# Warmup Iteration  14: 1460512.606 ops/s
# Warmup Iteration  15: 1498131.279 ops/s
# Warmup Iteration  16: 1497324.059 ops/s
# Warmup Iteration  17: 1449510.380 ops/s
# Warmup Iteration  18: 1503355.301 ops/s
# Warmup Iteration  19: 1431230.229 ops/s
# Warmup Iteration  20: 1462658.724 ops/s
# Warmup Iteration  21: 1394074.487 ops/s
# Warmup Iteration  22: 1489633.300 ops/s
# Warmup Iteration  23: 1446911.463 ops/s
# Warmup Iteration  24: 1434414.411 ops/s
# Warmup Iteration  25: 1469512.949 ops/s
# Warmup Iteration  26: 1442821.854 ops/s
# Warmup Iteration  27: 1449963.566 ops/s
# Warmup Iteration  28: 1483642.299 ops/s
# Warmup Iteration  29: 1428691.733 ops/s
# Warmup Iteration  30: 1466080.634 ops/s
Iteration   1: 1406890.394 ops/s
Iteration   2: 1450126.326 ops/s
Iteration   3: 1461144.099 ops/s
Iteration   4: 1459207.866 ops/s
Iteration   5: 1465959.175 ops/s
Iteration   6: 1433669.673 ops/s
Iteration   7: 1480590.592 ops/s
Iteration   8: 1427284.798 ops/s
Iteration   9: 1448449.007 ops/s
Iteration  10: 1470791.248 ops/s
Iteration  11: 1429054.820 ops/s
Iteration  12: 1515912.335 ops/s
Iteration  13: 1447160.912 ops/s
Iteration  14: 1421072.449 ops/s
Iteration  15: 1475223.485 ops/s
Iteration  16: 1425065.788 ops/s
Iteration  17: 1473239.004 ops/s
Iteration  18: 1446963.273 ops/s
Iteration  19: 1432721.339 ops/s
Iteration  20: 1506955.076 ops/s
Iteration  21: 1441433.807 ops/s
Iteration  22: 1450052.395 ops/s
Iteration  23: 1479005.230 ops/s
Iteration  24: 1389550.277 ops/s
Iteration  25: 1472746.548 ops/s
Iteration  26: 1419014.736 ops/s
Iteration  27: 1460116.419 ops/s
Iteration  28: 1415904.934 ops/s
Iteration  29: 1312967.461 ops/s
Iteration  30: 1283508.239 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionTime":
  1440059.390 ±(99.9%) 31944.627 ops/s [Average]
  (min, avg, max) = (1283508.239, 1440059.390, 1515912.335), stdev = 47813.218
  CI (99.9%): [1408114.763, 1472004.017] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionTime  thrpt   30  1440059.390 ± 31944.627  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115881.562 ops/s
# Warmup Iteration   2: 435358.531 ops/s
# Warmup Iteration   3: 930671.578 ops/s
# Warmup Iteration   4: 1344657.624 ops/s
# Warmup Iteration   5: 1461327.101 ops/s
# Warmup Iteration   6: 1467771.625 ops/s
# Warmup Iteration   7: 1457638.979 ops/s
# Warmup Iteration   8: 1385011.223 ops/s
# Warmup Iteration   9: 1355824.633 ops/s
# Warmup Iteration  10: 1454585.008 ops/s
# Warmup Iteration  11: 1411294.209 ops/s
# Warmup Iteration  12: 1449096.809 ops/s
# Warmup Iteration  13: 1454030.495 ops/s
# Warmup Iteration  14: 1386087.134 ops/s
# Warmup Iteration  15: 1446101.688 ops/s
# Warmup Iteration  16: 1426288.889 ops/s
# Warmup Iteration  17: 1462920.678 ops/s
# Warmup Iteration  18: 1390875.760 ops/s
# Warmup Iteration  19: 1385714.490 ops/s
# Warmup Iteration  20: 1492512.377 ops/s
# Warmup Iteration  21: 1437829.375 ops/s
# Warmup Iteration  22: 1407109.885 ops/s
# Warmup Iteration  23: 1421235.066 ops/s
# Warmup Iteration  24: 1436755.449 ops/s
# Warmup Iteration  25: 1410344.494 ops/s
# Warmup Iteration  26: 1396716.531 ops/s
# Warmup Iteration  27: 1445075.077 ops/s
# Warmup Iteration  28: 1396962.027 ops/s
# Warmup Iteration  29: 1458151.456 ops/s
# Warmup Iteration  30: 1456210.372 ops/s
Iteration   1: 1410875.996 ops/s
Iteration   2: 1478121.131 ops/s
Iteration   3: 1388153.640 ops/s
Iteration   4: 1420055.100 ops/s
Iteration   5: 1440236.489 ops/s
Iteration   6: 1386095.305 ops/s
Iteration   7: 1470178.977 ops/s
Iteration   8: 1381178.107 ops/s
Iteration   9: 1460466.989 ops/s
Iteration  10: 1438953.139 ops/s
Iteration  11: 1451558.750 ops/s
Iteration  12: 1379446.176 ops/s
Iteration  13: 1438994.753 ops/s
Iteration  14: 1468891.934 ops/s
Iteration  15: 1373081.530 ops/s
Iteration  16: 1412948.341 ops/s
Iteration  17: 1460983.369 ops/s
Iteration  18: 1430643.929 ops/s
Iteration  19: 1469270.317 ops/s
Iteration  20: 1410325.051 ops/s
Iteration  21: 1491490.710 ops/s
Iteration  22: 1384468.749 ops/s
Iteration  23: 1444573.571 ops/s
Iteration  24: 1427484.831 ops/s
Iteration  25: 1432342.243 ops/s
Iteration  26: 1512529.333 ops/s
Iteration  27: 1392206.150 ops/s
Iteration  28: 1457692.253 ops/s
Iteration  29: 1496996.513 ops/s
Iteration  30: 1405973.200 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionTime":
  1433873.886 ±(99.9%) 25517.864 ops/s [Average]
  (min, avg, max) = (1373081.530, 1433873.886, 1512529.333), stdev = 38193.940
  CI (99.9%): [1408356.022, 1459391.750] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_noHeadRetentionTime  thrpt   30  1433873.886 ± 25517.864  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableStartWithTest._Benchmark.benchmark_maybeNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableStartWithTest._Benchmark.benchmark_maybeNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 344251.825 ops/s
# Warmup Iteration   2: 1877249.525 ops/s
# Warmup Iteration   3: 2207700.761 ops/s
# Warmup Iteration   4: 2461978.508 ops/s
# Warmup Iteration   5: 2628850.723 ops/s
# Warmup Iteration   6: 2552887.149 ops/s
# Warmup Iteration   7: 2619686.495 ops/s
# Warmup Iteration   8: 2609205.391 ops/s
# Warmup Iteration   9: 2545367.938 ops/s
# Warmup Iteration  10: 2601531.838 ops/s
# Warmup Iteration  11: 2508650.787 ops/s
# Warmup Iteration  12: 2645385.679 ops/s
# Warmup Iteration  13: 2523543.199 ops/s
# Warmup Iteration  14: 2534027.074 ops/s
# Warmup Iteration  15: 2665802.684 ops/s
# Warmup Iteration  16: 2583780.816 ops/s
# Warmup Iteration  17: 2518730.303 ops/s
# Warmup Iteration  18: 2548404.828 ops/s
# Warmup Iteration  19: 2664140.065 ops/s
# Warmup Iteration  20: 2488083.153 ops/s
# Warmup Iteration  21: 2622555.591 ops/s
# Warmup Iteration  22: 2573360.007 ops/s
# Warmup Iteration  23: 2610485.501 ops/s
# Warmup Iteration  24: 2498004.582 ops/s
# Warmup Iteration  25: 2571307.754 ops/s
# Warmup Iteration  26: 2603352.555 ops/s
# Warmup Iteration  27: 2579463.184 ops/s
# Warmup Iteration  28: 2524111.610 ops/s
# Warmup Iteration  29: 2612917.402 ops/s
# Warmup Iteration  30: 2469978.363 ops/s
Iteration   1: 2628951.806 ops/s
Iteration   2: 2568479.333 ops/s
Iteration   3: 2617859.363 ops/s
Iteration   4: 2509756.713 ops/s
Iteration   5: 2583317.248 ops/s
Iteration   6: 2571883.561 ops/s
Iteration   7: 2536135.916 ops/s
Iteration   8: 2529474.208 ops/s
Iteration   9: 2496465.109 ops/s
Iteration  10: 2584508.275 ops/s
Iteration  11: 2525117.499 ops/s
Iteration  12: 2504140.447 ops/s
Iteration  13: 2654872.698 ops/s
Iteration  14: 2489776.569 ops/s
Iteration  15: 2547154.866 ops/s
Iteration  16: 2640826.364 ops/s
Iteration  17: 2566514.413 ops/s
Iteration  18: 2694189.287 ops/s
Iteration  19: 2494551.827 ops/s
Iteration  20: 2645309.285 ops/s
Iteration  21: 2666661.603 ops/s
Iteration  22: 2463359.252 ops/s
Iteration  23: 2606017.808 ops/s
Iteration  24: 1837448.782 ops/s
Iteration  25: 2513728.281 ops/s
Iteration  26: 2636796.995 ops/s
Iteration  27: 2535498.264 ops/s
Iteration  28: 2550908.137 ops/s
Iteration  29: 2488455.009 ops/s
Iteration  30: 2612049.157 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableStartWithTest._Benchmark.benchmark_maybeNormal":
  2543340.269 ±(99.9%) 98100.919 ops/s [Average]
  (min, avg, max) = (1837448.782, 2543340.269, 2694189.287), stdev = 146832.848
  CI (99.9%): [2445239.351, 2641441.188] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
CompletableStartWithTest._Benchmark.benchmark_maybeNormal  thrpt   30  2543340.269 ± 98100.919  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justMaybeJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justMaybeJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 167956.949 ops/s
# Warmup Iteration   2: 1402049.856 ops/s
# Warmup Iteration   3: 2105693.054 ops/s
# Warmup Iteration   4: 2242129.221 ops/s
# Warmup Iteration   5: 2320284.179 ops/s
# Warmup Iteration   6: 2228453.952 ops/s
# Warmup Iteration   7: 2314568.541 ops/s
# Warmup Iteration   8: 2269208.524 ops/s
# Warmup Iteration   9: 2091760.308 ops/s
# Warmup Iteration  10: 2331082.620 ops/s
# Warmup Iteration  11: 2256325.557 ops/s
# Warmup Iteration  12: 2237364.696 ops/s
# Warmup Iteration  13: 2376587.259 ops/s
# Warmup Iteration  14: 2229585.839 ops/s
# Warmup Iteration  15: 2312004.969 ops/s
# Warmup Iteration  16: 2262413.291 ops/s
# Warmup Iteration  17: 2222053.848 ops/s
# Warmup Iteration  18: 2334474.292 ops/s
# Warmup Iteration  19: 2335560.862 ops/s
# Warmup Iteration  20: 2212663.813 ops/s
# Warmup Iteration  21: 2258868.438 ops/s
# Warmup Iteration  22: 2188928.253 ops/s
# Warmup Iteration  23: 2276174.761 ops/s
# Warmup Iteration  24: 2389297.795 ops/s
# Warmup Iteration  25: 2378632.178 ops/s
# Warmup Iteration  26: 2294578.070 ops/s
# Warmup Iteration  27: 2233730.398 ops/s
# Warmup Iteration  28: 2412745.168 ops/s
# Warmup Iteration  29: 2356348.367 ops/s
# Warmup Iteration  30: 2234276.515 ops/s
Iteration   1: 2374318.345 ops/s
Iteration   2: 2294523.974 ops/s
Iteration   3: 2249616.144 ops/s
Iteration   4: 2375450.832 ops/s
Iteration   5: 2245414.933 ops/s
Iteration   6: 2308608.373 ops/s
Iteration   7: 2287503.326 ops/s
Iteration   8: 2326078.925 ops/s
Iteration   9: 2273088.304 ops/s
Iteration  10: 2333229.379 ops/s
Iteration  11: 2273175.261 ops/s
Iteration  12: 2306966.632 ops/s
Iteration  13: 2343381.539 ops/s
Iteration  14: 2286596.108 ops/s
Iteration  15: 2260832.441 ops/s
Iteration  16: 2337007.207 ops/s
Iteration  17: 2297478.865 ops/s
Iteration  18: 2285151.901 ops/s
Iteration  19: 2304972.509 ops/s
Iteration  20: 2246195.052 ops/s
Iteration  21: 2364326.044 ops/s
Iteration  22: 2262691.158 ops/s
Iteration  23: 2317649.033 ops/s
Iteration  24: 2274700.599 ops/s
Iteration  25: 2286346.788 ops/s
Iteration  26: 2377168.276 ops/s
Iteration  27: 2233827.698 ops/s
Iteration  28: 2392454.160 ops/s
Iteration  29: 2366001.166 ops/s
Iteration  30: 2228167.691 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justMaybeJust":
  2303764.089 ±(99.9%) 31145.864 ops/s [Average]
  (min, avg, max) = (2228167.691, 2303764.089, 2392454.160), stdev = 46617.667
  CI (99.9%): [2272618.224, 2334909.953] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justMaybeJust  thrpt   30  2303764.089 ± 31145.864  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justSingleJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justSingleJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 213931.655 ops/s
# Warmup Iteration   2: 1525841.410 ops/s
# Warmup Iteration   3: 1928404.647 ops/s
# Warmup Iteration   4: 2105386.743 ops/s
# Warmup Iteration   5: 2361606.024 ops/s
# Warmup Iteration   6: 2310208.782 ops/s
# Warmup Iteration   7: 2280353.367 ops/s
# Warmup Iteration   8: 2316747.639 ops/s
# Warmup Iteration   9: 2328249.843 ops/s
# Warmup Iteration  10: 2285673.034 ops/s
# Warmup Iteration  11: 2227725.097 ops/s
# Warmup Iteration  12: 2401024.846 ops/s
# Warmup Iteration  13: 2241476.122 ops/s
# Warmup Iteration  14: 2353533.431 ops/s
# Warmup Iteration  15: 2248154.225 ops/s
# Warmup Iteration  16: 2322527.752 ops/s
# Warmup Iteration  17: 2325450.386 ops/s
# Warmup Iteration  18: 2322203.936 ops/s
# Warmup Iteration  19: 2265269.573 ops/s
# Warmup Iteration  20: 2307812.573 ops/s
# Warmup Iteration  21: 2336028.129 ops/s
# Warmup Iteration  22: 2232380.917 ops/s
# Warmup Iteration  23: 2350168.493 ops/s
# Warmup Iteration  24: 2219556.020 ops/s
# Warmup Iteration  25: 2335794.840 ops/s
# Warmup Iteration  26: 2310599.105 ops/s
# Warmup Iteration  27: 2262744.601 ops/s
# Warmup Iteration  28: 2288307.452 ops/s
# Warmup Iteration  29: 2270337.839 ops/s
# Warmup Iteration  30: 2321658.608 ops/s
Iteration   1: 2328023.162 ops/s
Iteration   2: 2247036.844 ops/s
Iteration   3: 2375249.950 ops/s
Iteration   4: 2252802.758 ops/s
Iteration   5: 2279405.897 ops/s
Iteration   6: 2231094.107 ops/s
Iteration   7: 2309703.902 ops/s
Iteration   8: 2330359.452 ops/s
Iteration   9: 2248432.616 ops/s
Iteration  10: 2357020.225 ops/s
Iteration  11: 2270957.053 ops/s
Iteration  12: 2329545.666 ops/s
Iteration  13: 2357966.704 ops/s
Iteration  14: 2239689.249 ops/s
Iteration  15: 2332793.208 ops/s
Iteration  16: 2351445.956 ops/s
Iteration  17: 2253328.459 ops/s
Iteration  18: 2375243.700 ops/s
Iteration  19: 1664144.078 ops/s
Iteration  20: 2266536.573 ops/s
Iteration  21: 2355621.502 ops/s
Iteration  22: 2262910.295 ops/s
Iteration  23: 2336267.502 ops/s
Iteration  24: 2256314.616 ops/s
Iteration  25: 2329633.883 ops/s
Iteration  26: 2263868.719 ops/s
Iteration  27: 2348181.145 ops/s
Iteration  28: 2332246.507 ops/s
Iteration  29: 2236821.063 ops/s
Iteration  30: 2374972.930 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justSingleJust":
  2283253.924 ±(99.9%) 84485.301 ops/s [Average]
  (min, avg, max) = (1664144.078, 2283253.924, 2375249.950), stdev = 126453.631
  CI (99.9%): [2198768.623, 2367739.225] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeStartWithTest._Benchmark.benchmark_justSingleJust  thrpt   30  2283253.924 ± 84485.301  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justCompletableComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justCompletableComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 534500.269 ops/s
# Warmup Iteration   2: 2001133.402 ops/s
# Warmup Iteration   3: 2180826.338 ops/s
# Warmup Iteration   4: 2537614.782 ops/s
# Warmup Iteration   5: 2606022.651 ops/s
# Warmup Iteration   6: 2458847.943 ops/s
# Warmup Iteration   7: 2527884.508 ops/s
# Warmup Iteration   8: 2607367.432 ops/s
# Warmup Iteration   9: 2447045.426 ops/s
# Warmup Iteration  10: 2558930.473 ops/s
# Warmup Iteration  11: 2479197.351 ops/s
# Warmup Iteration  12: 2563369.411 ops/s
# Warmup Iteration  13: 2619597.619 ops/s
# Warmup Iteration  14: 2562668.936 ops/s
# Warmup Iteration  15: 2517632.596 ops/s
# Warmup Iteration  16: 2460344.851 ops/s
# Warmup Iteration  17: 2662246.335 ops/s
# Warmup Iteration  18: 2485100.319 ops/s
# Warmup Iteration  19: 2559164.509 ops/s
# Warmup Iteration  20: 2539901.029 ops/s
# Warmup Iteration  21: 2598467.583 ops/s
# Warmup Iteration  22: 2546993.732 ops/s
# Warmup Iteration  23: 2533636.590 ops/s
# Warmup Iteration  24: 2507359.443 ops/s
# Warmup Iteration  25: 2635715.032 ops/s
# Warmup Iteration  26: 2513523.344 ops/s
# Warmup Iteration  27: 2576480.179 ops/s
# Warmup Iteration  28: 2575979.623 ops/s
# Warmup Iteration  29: 2519973.349 ops/s
# Warmup Iteration  30: 2584916.849 ops/s
Iteration   1: 2660414.782 ops/s
Iteration   2: 2495480.991 ops/s
Iteration   3: 2629842.397 ops/s
Iteration   4: 2570988.857 ops/s
Iteration   5: 2507928.152 ops/s
Iteration   6: 2578310.300 ops/s
Iteration   7: 2599749.772 ops/s
Iteration   8: 2565908.289 ops/s
Iteration   9: 2626068.471 ops/s
Iteration  10: 2509374.481 ops/s
Iteration  11: 2639276.865 ops/s
Iteration  12: 2545555.502 ops/s
Iteration  13: 2534846.274 ops/s
Iteration  14: 2654783.131 ops/s
Iteration  15: 2538729.096 ops/s
Iteration  16: 2668263.777 ops/s
Iteration  17: 2633674.312 ops/s
Iteration  18: 2528922.536 ops/s
Iteration  19: 2634540.459 ops/s
Iteration  20: 2500539.382 ops/s
Iteration  21: 2604686.587 ops/s
Iteration  22: 2503236.180 ops/s
Iteration  23: 2534950.870 ops/s
Iteration  24: 2712895.282 ops/s
Iteration  25: 2443589.272 ops/s
Iteration  26: 2634825.489 ops/s
Iteration  27: 2522416.901 ops/s
Iteration  28: 2648827.252 ops/s
Iteration  29: 2508654.693 ops/s
Iteration  30: 2555350.821 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeStartWithTest._Benchmark.benchmark_justCompletableComplete":
  2576421.039 ±(99.9%) 44186.859 ops/s [Average]
  (min, avg, max) = (2443589.272, 2576421.039, 2712895.282), stdev = 66136.815
  CI (99.9%): [2532234.180, 2620607.898] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MaybeStartWithTest._Benchmark.benchmark_justCompletableComplete  thrpt   30  2576421.039 ± 44186.859  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilTrueJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilTrueJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 336831.751 ops/s
# Warmup Iteration   2: 2019569.770 ops/s
# Warmup Iteration   3: 2866650.286 ops/s
# Warmup Iteration   4: 3161673.272 ops/s
# Warmup Iteration   5: 3322820.554 ops/s
# Warmup Iteration   6: 3276121.471 ops/s
# Warmup Iteration   7: 3317439.359 ops/s
# Warmup Iteration   8: 3176947.139 ops/s
# Warmup Iteration   9: 3275708.938 ops/s
# Warmup Iteration  10: 3415240.075 ops/s
# Warmup Iteration  11: 3189935.438 ops/s
# Warmup Iteration  12: 3286579.970 ops/s
# Warmup Iteration  13: 3422750.535 ops/s
# Warmup Iteration  14: 3215511.299 ops/s
# Warmup Iteration  15: 3260117.150 ops/s
# Warmup Iteration  16: 3326343.239 ops/s
# Warmup Iteration  17: 3214845.547 ops/s
# Warmup Iteration  18: 3345567.165 ops/s
# Warmup Iteration  19: 3127998.204 ops/s
# Warmup Iteration  20: 3341608.826 ops/s
# Warmup Iteration  21: 3345775.202 ops/s
# Warmup Iteration  22: 3122162.174 ops/s
# Warmup Iteration  23: 3284522.775 ops/s
# Warmup Iteration  24: 3149836.552 ops/s
# Warmup Iteration  25: 3406874.999 ops/s
# Warmup Iteration  26: 3245543.389 ops/s
# Warmup Iteration  27: 3349078.854 ops/s
# Warmup Iteration  28: 3373848.476 ops/s
# Warmup Iteration  29: 3260704.058 ops/s
# Warmup Iteration  30: 3343363.904 ops/s
Iteration   1: 3318326.450 ops/s
Iteration   2: 3282932.198 ops/s
Iteration   3: 3424922.560 ops/s
Iteration   4: 3299020.401 ops/s
Iteration   5: 3251269.442 ops/s
Iteration   6: 3382057.731 ops/s
Iteration   7: 3296112.717 ops/s
Iteration   8: 3345542.564 ops/s
Iteration   9: 3278919.641 ops/s
Iteration  10: 3323266.514 ops/s
Iteration  11: 3375305.774 ops/s
Iteration  12: 3258836.898 ops/s
Iteration  13: 3281491.996 ops/s
Iteration  14: 2621935.742 ops/s
Iteration  15: 3377973.483 ops/s
Iteration  16: 3309566.066 ops/s
Iteration  17: 3274151.055 ops/s
Iteration  18: 3392373.196 ops/s
Iteration  19: 3252643.476 ops/s
Iteration  20: 3375603.552 ops/s
Iteration  21: 3202480.981 ops/s
Iteration  22: 3425998.381 ops/s
Iteration  23: 3341286.859 ops/s
Iteration  24: 3253675.574 ops/s
Iteration  25: 3415930.229 ops/s
Iteration  26: 3414734.290 ops/s
Iteration  27: 3243526.255 ops/s
Iteration  28: 3344653.416 ops/s
Iteration  29: 3411244.804 ops/s
Iteration  30: 3323514.311 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilTrueJust":
  3303309.885 ±(99.9%) 95526.332 ops/s [Average]
  (min, avg, max) = (2621935.742, 3303309.885, 3425998.381), stdev = 142979.328
  CI (99.9%): [3207783.553, 3398836.217] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
MaybeRetryTest._Benchmark.benchmark_untilTrueJust  thrpt   30  3303309.885 ± 95526.332  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilFalseJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilFalseJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 223200.019 ops/s
# Warmup Iteration   2: 1720054.698 ops/s
# Warmup Iteration   3: 2924169.293 ops/s
# Warmup Iteration   4: 3199412.485 ops/s
# Warmup Iteration   5: 3412731.189 ops/s
# Warmup Iteration   6: 3354373.438 ops/s
# Warmup Iteration   7: 3249708.810 ops/s
# Warmup Iteration   8: 3390049.295 ops/s
# Warmup Iteration   9: 3374149.512 ops/s
# Warmup Iteration  10: 3168537.012 ops/s
# Warmup Iteration  11: 3244214.135 ops/s
# Warmup Iteration  12: 3388047.164 ops/s
# Warmup Iteration  13: 3176322.188 ops/s
# Warmup Iteration  14: 3394589.538 ops/s
# Warmup Iteration  15: 3266655.878 ops/s
# Warmup Iteration  16: 3342833.157 ops/s
# Warmup Iteration  17: 3270421.147 ops/s
# Warmup Iteration  18: 3453829.073 ops/s
# Warmup Iteration  19: 3199491.637 ops/s
# Warmup Iteration  20: 3427434.239 ops/s
# Warmup Iteration  21: 3351312.404 ops/s
# Warmup Iteration  22: 3290815.797 ops/s
# Warmup Iteration  23: 3391204.726 ops/s
# Warmup Iteration  24: 3301640.163 ops/s
# Warmup Iteration  25: 3215425.588 ops/s
# Warmup Iteration  26: 3396664.028 ops/s
# Warmup Iteration  27: 3273229.584 ops/s
# Warmup Iteration  28: 3353484.743 ops/s
# Warmup Iteration  29: 3357045.776 ops/s
# Warmup Iteration  30: 3338338.664 ops/s
Iteration   1: 3339562.062 ops/s
Iteration   2: 3341193.951 ops/s
Iteration   3: 3337792.039 ops/s
Iteration   4: 3285572.723 ops/s
Iteration   5: 3271776.549 ops/s
Iteration   6: 3416027.975 ops/s
Iteration   7: 3282370.212 ops/s
Iteration   8: 3444851.405 ops/s
Iteration   9: 3191247.132 ops/s
Iteration  10: 3300286.529 ops/s
Iteration  11: 3394339.889 ops/s
Iteration  12: 3183809.068 ops/s
Iteration  13: 3358108.254 ops/s
Iteration  14: 3276979.903 ops/s
Iteration  15: 3413867.461 ops/s
Iteration  16: 3365857.586 ops/s
Iteration  17: 3281770.227 ops/s
Iteration  18: 3411405.371 ops/s
Iteration  19: 3219597.885 ops/s
Iteration  20: 3356038.097 ops/s
Iteration  21: 3323475.564 ops/s
Iteration  22: 3333029.174 ops/s
Iteration  23: 3316413.537 ops/s
Iteration  24: 3381744.652 ops/s
Iteration  25: 3366267.286 ops/s
Iteration  26: 3143227.166 ops/s
Iteration  27: 3350136.936 ops/s
Iteration  28: 3201852.254 ops/s
Iteration  29: 3278336.980 ops/s
Iteration  30: 3217472.516 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilFalseJust":
  3312813.680 ±(99.9%) 51198.521 ops/s [Average]
  (min, avg, max) = (3143227.166, 3312813.680, 3444851.405), stdev = 76631.542
  CI (99.9%): [3261615.158, 3364012.201] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MaybeRetryTest._Benchmark.benchmark_untilFalseJust  thrpt   30  3312813.680 ± 51198.521  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_success$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_success

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 573469.884 ops/s
# Warmup Iteration   2: 3880398.403 ops/s
# Warmup Iteration   3: 4476465.255 ops/s
# Warmup Iteration   4: 5189579.798 ops/s
# Warmup Iteration   5: 5568062.983 ops/s
# Warmup Iteration   6: 5330749.902 ops/s
# Warmup Iteration   7: 5203592.316 ops/s
# Warmup Iteration   8: 5519584.799 ops/s
# Warmup Iteration   9: 5292455.275 ops/s
# Warmup Iteration  10: 5517861.135 ops/s
# Warmup Iteration  11: 5366083.789 ops/s
# Warmup Iteration  12: 5463013.566 ops/s
# Warmup Iteration  13: 5292657.042 ops/s
# Warmup Iteration  14: 5549247.326 ops/s
# Warmup Iteration  15: 5220239.259 ops/s
# Warmup Iteration  16: 5320391.457 ops/s
# Warmup Iteration  17: 5184486.671 ops/s
# Warmup Iteration  18: 5395189.422 ops/s
# Warmup Iteration  19: 5260909.046 ops/s
# Warmup Iteration  20: 5321399.239 ops/s
# Warmup Iteration  21: 5523034.464 ops/s
# Warmup Iteration  22: 5324966.371 ops/s
# Warmup Iteration  23: 5449305.000 ops/s
# Warmup Iteration  24: 5516722.069 ops/s
# Warmup Iteration  25: 5461487.150 ops/s
# Warmup Iteration  26: 5220899.986 ops/s
# Warmup Iteration  27: 5437590.914 ops/s
# Warmup Iteration  28: 5300170.536 ops/s
# Warmup Iteration  29: 5421600.156 ops/s
# Warmup Iteration  30: 5571230.587 ops/s
Iteration   1: 5192601.182 ops/s
Iteration   2: 5627525.947 ops/s
Iteration   3: 5340684.609 ops/s
Iteration   4: 5313509.746 ops/s
Iteration   5: 5537408.929 ops/s
Iteration   6: 5334513.309 ops/s
Iteration   7: 5524580.210 ops/s
Iteration   8: 4215291.493 ops/s
Iteration   9: 5172790.845 ops/s
Iteration  10: 5710112.721 ops/s
Iteration  11: 5550844.657 ops/s
Iteration  12: 5296242.795 ops/s
Iteration  13: 5481020.767 ops/s
Iteration  14: 5308137.767 ops/s
Iteration  15: 5430938.952 ops/s
Iteration  16: 5489040.862 ops/s
Iteration  17: 5705176.318 ops/s
Iteration  18: 5318398.698 ops/s
Iteration  19: 5432970.202 ops/s
Iteration  20: 5284163.038 ops/s
Iteration  21: 5572250.033 ops/s
Iteration  22: 5393717.717 ops/s
Iteration  23: 5392245.226 ops/s
Iteration  24: 5565666.252 ops/s
Iteration  25: 5255817.887 ops/s
Iteration  26: 5594015.558 ops/s
Iteration  27: 5392564.112 ops/s
Iteration  28: 5281543.879 ops/s
Iteration  29: 5400560.549 ops/s
Iteration  30: 5408256.924 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_success":
  5384086.373 ±(99.9%) 175003.010 ops/s [Average]
  (min, avg, max) = (4215291.493, 5384086.373, 5710112.721), stdev = 261936.286
  CI (99.9%): [5209083.363, 5559089.383] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
FlowableFromMaybeTest._Benchmark.benchmark_success  thrpt   30  5384086.373 ± 175003.010  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_syncFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_syncFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 828717.135 ops/s
# Warmup Iteration   2: 3890205.638 ops/s
# Warmup Iteration   3: 4215220.621 ops/s
# Warmup Iteration   4: 4897221.178 ops/s
# Warmup Iteration   5: 4936049.556 ops/s
# Warmup Iteration   6: 4946256.266 ops/s
# Warmup Iteration   7: 4735191.796 ops/s
# Warmup Iteration   8: 4806806.425 ops/s
# Warmup Iteration   9: 5099587.746 ops/s
# Warmup Iteration  10: 4958262.920 ops/s
# Warmup Iteration  11: 4745497.017 ops/s
# Warmup Iteration  12: 4848549.921 ops/s
# Warmup Iteration  13: 5106354.807 ops/s
# Warmup Iteration  14: 4801903.074 ops/s
# Warmup Iteration  15: 4894838.009 ops/s
# Warmup Iteration  16: 4894713.277 ops/s
# Warmup Iteration  17: 4912764.597 ops/s
# Warmup Iteration  18: 4824841.426 ops/s
# Warmup Iteration  19: 4867814.609 ops/s
# Warmup Iteration  20: 5087592.723 ops/s
# Warmup Iteration  21: 4983147.039 ops/s
# Warmup Iteration  22: 4790402.196 ops/s
# Warmup Iteration  23: 5049608.570 ops/s
# Warmup Iteration  24: 4784194.906 ops/s
# Warmup Iteration  25: 4876524.916 ops/s
# Warmup Iteration  26: 4967237.256 ops/s
# Warmup Iteration  27: 4762427.973 ops/s
# Warmup Iteration  28: 4900427.962 ops/s
# Warmup Iteration  29: 4873456.215 ops/s
# Warmup Iteration  30: 5111814.939 ops/s
Iteration   1: 4709484.708 ops/s
Iteration   2: 4992336.301 ops/s
Iteration   3: 4965904.561 ops/s
Iteration   4: 4817991.126 ops/s
Iteration   5: 4932702.027 ops/s
Iteration   6: 4875415.192 ops/s
Iteration   7: 5107416.000 ops/s
Iteration   8: 4942954.598 ops/s
Iteration   9: 4963502.909 ops/s
Iteration  10: 4791621.730 ops/s
Iteration  11: 5037263.019 ops/s
Iteration  12: 4846585.079 ops/s
Iteration  13: 4765509.017 ops/s
Iteration  14: 5024632.909 ops/s
Iteration  15: 4783359.903 ops/s
Iteration  16: 4953547.289 ops/s
Iteration  17: 5149422.307 ops/s
Iteration  18: 4725160.700 ops/s
Iteration  19: 5105641.653 ops/s
Iteration  20: 4749312.447 ops/s
Iteration  21: 4999294.350 ops/s
Iteration  22: 4756909.900 ops/s
Iteration  23: 4859769.756 ops/s
Iteration  24: 5079791.507 ops/s
Iteration  25: 4799726.653 ops/s
Iteration  26: 4970648.708 ops/s
Iteration  27: 4923190.441 ops/s
Iteration  28: 4675970.734 ops/s
Iteration  29: 5047690.684 ops/s
Iteration  30: 4851885.177 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_syncFusionRejected":
  4906821.380 ±(99.9%) 87776.202 ops/s [Average]
  (min, avg, max) = (4675970.734, 4906821.380, 5149422.307), stdev = 131379.296
  CI (99.9%): [4819045.178, 4994597.581] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableFromMaybeTest._Benchmark.benchmark_syncFusionRejected  thrpt   30  4906821.380 ± 87776.202  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerWithScalar$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerWithScalar

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 187671.878 ops/s
# Warmup Iteration   2: 977827.533 ops/s
# Warmup Iteration   3: 1231587.864 ops/s
# Warmup Iteration   4: 1450522.231 ops/s
# Warmup Iteration   5: 1375923.832 ops/s
# Warmup Iteration   6: 1428120.698 ops/s
# Warmup Iteration   7: 1361876.135 ops/s
# Warmup Iteration   8: 1430369.778 ops/s
# Warmup Iteration   9: 1403783.431 ops/s
# Warmup Iteration  10: 1363154.782 ops/s
# Warmup Iteration  11: 1399437.626 ops/s
# Warmup Iteration  12: 1422445.121 ops/s
# Warmup Iteration  13: 1386615.622 ops/s
# Warmup Iteration  14: 1366875.839 ops/s
# Warmup Iteration  15: 1321544.983 ops/s
# Warmup Iteration  16: 1383528.065 ops/s
# Warmup Iteration  17: 1452097.708 ops/s
# Warmup Iteration  18: 1323798.260 ops/s
# Warmup Iteration  19: 1438269.257 ops/s
# Warmup Iteration  20: 1431154.215 ops/s
# Warmup Iteration  21: 1435690.659 ops/s
# Warmup Iteration  22: 1388590.643 ops/s
# Warmup Iteration  23: 1425775.985 ops/s
# Warmup Iteration  24: 1420386.044 ops/s
# Warmup Iteration  25: 1388349.095 ops/s
# Warmup Iteration  26: 1421677.998 ops/s
# Warmup Iteration  27: 1406296.927 ops/s
# Warmup Iteration  28: 1407571.507 ops/s
# Warmup Iteration  29: 1446484.764 ops/s
# Warmup Iteration  30: 1480164.730 ops/s
Iteration   1: 1379658.424 ops/s
Iteration   2: 1389104.488 ops/s
Iteration   3: 1178483.961 ops/s
Iteration   4: 1427892.351 ops/s
Iteration   5: 1365065.511 ops/s
Iteration   6: 1400866.127 ops/s
Iteration   7: 1449518.064 ops/s
Iteration   8: 1418870.794 ops/s
Iteration   9: 1434913.652 ops/s
Iteration  10: 1421812.646 ops/s
Iteration  11: 1350790.003 ops/s
Iteration  12: 1439029.759 ops/s
Iteration  13: 1378776.586 ops/s
Iteration  14: 1388241.318 ops/s
Iteration  15: 1406148.525 ops/s
Iteration  16: 1442280.284 ops/s
Iteration  17: 1484335.477 ops/s
Iteration  18: 1381460.173 ops/s
Iteration  19: 1453144.754 ops/s
Iteration  20: 1394182.433 ops/s
Iteration  21: 1424644.324 ops/s
Iteration  22: 1388460.821 ops/s
Iteration  23: 1418854.017 ops/s
Iteration  24: 1436326.880 ops/s
Iteration  25: 1393501.182 ops/s
Iteration  26: 1462620.019 ops/s
Iteration  27: 1390679.255 ops/s
Iteration  28: 1364949.424 ops/s
Iteration  29: 1433734.631 ops/s
Iteration  30: 1373038.416 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerWithScalar":
  1402379.477 ±(99.9%) 35563.098 ops/s [Average]
  (min, avg, max) = (1178483.961, 1402379.477, 1484335.477), stdev = 53229.175
  CI (99.9%): [1366816.379, 1437942.574] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_innerWithScalar  thrpt   30  1402379.477 ± 35563.098  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerWithEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerWithEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 201103.480 ops/s
# Warmup Iteration   2: 1061840.746 ops/s
# Warmup Iteration   3: 1204209.934 ops/s
# Warmup Iteration   4: 1278563.403 ops/s
# Warmup Iteration   5: 1421009.443 ops/s
# Warmup Iteration   6: 1420414.508 ops/s
# Warmup Iteration   7: 1467816.793 ops/s
# Warmup Iteration   8: 1409741.064 ops/s
# Warmup Iteration   9: 1421469.408 ops/s
# Warmup Iteration  10: 1414951.179 ops/s
# Warmup Iteration  11: 1399230.239 ops/s
# Warmup Iteration  12: 1386165.273 ops/s
# Warmup Iteration  13: 1465425.417 ops/s
# Warmup Iteration  14: 1413617.017 ops/s
# Warmup Iteration  15: 1443670.601 ops/s
# Warmup Iteration  16: 1423659.806 ops/s
# Warmup Iteration  17: 1378986.648 ops/s
# Warmup Iteration  18: 1420580.065 ops/s
# Warmup Iteration  19: 1347138.911 ops/s
# Warmup Iteration  20: 1418464.096 ops/s
# Warmup Iteration  21: 1456067.235 ops/s
# Warmup Iteration  22: 1344423.036 ops/s
# Warmup Iteration  23: 1439966.541 ops/s
# Warmup Iteration  24: 1361843.027 ops/s
# Warmup Iteration  25: 1394168.994 ops/s
# Warmup Iteration  26: 1387276.528 ops/s
# Warmup Iteration  27: 1436968.898 ops/s
# Warmup Iteration  28: 1376124.268 ops/s
# Warmup Iteration  29: 1425035.043 ops/s
# Warmup Iteration  30: 1388434.418 ops/s
Iteration   1: 1385800.910 ops/s
Iteration   2: 1435165.130 ops/s
Iteration   3: 1370947.634 ops/s
Iteration   4: 1445929.427 ops/s
Iteration   5: 1375357.400 ops/s
Iteration   6: 1434396.415 ops/s
Iteration   7: 1418733.776 ops/s
Iteration   8: 1376254.588 ops/s
Iteration   9: 1414918.986 ops/s
Iteration  10: 1407825.701 ops/s
Iteration  11: 1392491.550 ops/s
Iteration  12: 1413060.516 ops/s
Iteration  13: 1410831.835 ops/s
Iteration  14: 1407723.217 ops/s
Iteration  15: 1393434.114 ops/s
Iteration  16: 1342609.031 ops/s
Iteration  17: 1465833.104 ops/s
Iteration  18: 1381966.168 ops/s
Iteration  19: 1392584.502 ops/s
Iteration  20: 1441380.464 ops/s
Iteration  21: 1371076.015 ops/s
Iteration  22: 1401722.840 ops/s
Iteration  23: 1425079.430 ops/s
Iteration  24: 1378557.456 ops/s
Iteration  25: 1437472.695 ops/s
Iteration  26: 1378018.163 ops/s
Iteration  27: 1426773.406 ops/s
Iteration  28: 1388370.659 ops/s
Iteration  29: 1391835.160 ops/s
Iteration  30: 1476343.779 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerWithEmpty":
  1406083.136 ±(99.9%) 20386.314 ops/s [Average]
  (min, avg, max) = (1342609.031, 1406083.136, 1476343.779), stdev = 30513.277
  CI (99.9%): [1385696.822, 1426469.449] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_innerWithEmpty  thrpt   30  1406083.136 ± 20386.314  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_exceptionWithMoreThanOneElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_exceptionWithMoreThanOneElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 141812.359 ops/s
# Warmup Iteration   2: 292681.925 ops/s
# Warmup Iteration   3: 325004.631 ops/s
# Warmup Iteration   4: 313184.202 ops/s
# Warmup Iteration   5: 302544.199 ops/s
# Warmup Iteration   6: 302353.288 ops/s
# Warmup Iteration   7: 325564.154 ops/s
# Warmup Iteration   8: 321428.582 ops/s
# Warmup Iteration   9: 341106.547 ops/s
# Warmup Iteration  10: 318675.109 ops/s
# Warmup Iteration  11: 314293.039 ops/s
# Warmup Iteration  12: 332939.174 ops/s
# Warmup Iteration  13: 322075.063 ops/s
# Warmup Iteration  14: 323968.989 ops/s
# Warmup Iteration  15: 317464.146 ops/s
# Warmup Iteration  16: 329952.415 ops/s
# Warmup Iteration  17: 350682.589 ops/s
# Warmup Iteration  18: 341612.355 ops/s
# Warmup Iteration  19: 345764.675 ops/s
# Warmup Iteration  20: 332943.665 ops/s
# Warmup Iteration  21: 351107.155 ops/s
# Warmup Iteration  22: 332478.008 ops/s
# Warmup Iteration  23: 343848.613 ops/s
# Warmup Iteration  24: 343182.648 ops/s
# Warmup Iteration  25: 337335.975 ops/s
# Warmup Iteration  26: 348182.054 ops/s
# Warmup Iteration  27: 333672.167 ops/s
# Warmup Iteration  28: 252718.011 ops/s
# Warmup Iteration  29: 340777.594 ops/s
# Warmup Iteration  30: 344652.528 ops/s
Iteration   1: 359272.994 ops/s
Iteration   2: 340864.086 ops/s
Iteration   3: 330539.581 ops/s
Iteration   4: 349627.077 ops/s
Iteration   5: 332754.705 ops/s
Iteration   6: 343278.649 ops/s
Iteration   7: 349393.811 ops/s
Iteration   8: 328410.198 ops/s
Iteration   9: 343548.010 ops/s
Iteration  10: 329646.663 ops/s
Iteration  11: 346290.207 ops/s
Iteration  12: 349318.407 ops/s
Iteration  13: 332801.630 ops/s
Iteration  14: 343812.690 ops/s
Iteration  15: 352283.689 ops/s
Iteration  16: 327173.788 ops/s
Iteration  17: 354211.026 ops/s
Iteration  18: 331862.091 ops/s
Iteration  19: 342429.809 ops/s
Iteration  20: 342311.078 ops/s
Iteration  21: 340889.865 ops/s
Iteration  22: 346960.964 ops/s
Iteration  23: 331391.441 ops/s
Iteration  24: 341209.200 ops/s
Iteration  25: 346603.687 ops/s
Iteration  26: 336681.102 ops/s
Iteration  27: 348749.610 ops/s
Iteration  28: 338214.928 ops/s
Iteration  29: 353367.259 ops/s
Iteration  30: 334384.642 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_exceptionWithMoreThanOneElement":
  341609.430 ±(99.9%) 5738.256 ops/s [Average]
  (min, avg, max) = (327173.788, 341609.430, 359272.994), stdev = 8588.752
  CI (99.9%): [335871.173, 347347.686] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
BlockingFlowableToFutureTest._Benchmark.benchmark_exceptionWithMoreThanOneElement  thrpt   30  341609.430 ± 5738.256  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingRetryAmount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingRetryAmount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 57921.127 ops/s
# Warmup Iteration   2: 190776.550 ops/s
# Warmup Iteration   3: 216139.993 ops/s
# Warmup Iteration   4: 228977.515 ops/s
# Warmup Iteration   5: 221290.438 ops/s
# Warmup Iteration   6: 234248.059 ops/s
# Warmup Iteration   7: 239652.931 ops/s
# Warmup Iteration   8: 230130.983 ops/s
# Warmup Iteration   9: 248709.020 ops/s
# Warmup Iteration  10: 246908.992 ops/s
# Warmup Iteration  11: 237679.920 ops/s
# Warmup Iteration  12: 252776.336 ops/s
# Warmup Iteration  13: 245037.054 ops/s
# Warmup Iteration  14: 238871.747 ops/s
# Warmup Iteration  15: 246084.013 ops/s
# Warmup Iteration  16: 253070.745 ops/s
# Warmup Iteration  17: 248912.419 ops/s
# Warmup Iteration  18: 254588.234 ops/s
# Warmup Iteration  19: 262826.049 ops/s
# Warmup Iteration  20: 252284.121 ops/s
# Warmup Iteration  21: 257877.968 ops/s
# Warmup Iteration  22: 259668.611 ops/s
# Warmup Iteration  23: 258660.671 ops/s
# Warmup Iteration  24: 254340.105 ops/s
# Warmup Iteration  25: 251834.486 ops/s
# Warmup Iteration  26: 254338.146 ops/s
# Warmup Iteration  27: 260036.031 ops/s
# Warmup Iteration  28: 251683.176 ops/s
# Warmup Iteration  29: 257264.752 ops/s
# Warmup Iteration  30: 249483.066 ops/s
Iteration   1: 257247.306 ops/s
Iteration   2: 261858.820 ops/s
Iteration   3: 258918.059 ops/s
Iteration   4: 244077.946 ops/s
Iteration   5: 253100.131 ops/s
Iteration   6: 256763.663 ops/s
Iteration   7: 257447.914 ops/s
Iteration   8: 258685.505 ops/s
Iteration   9: 249375.884 ops/s
Iteration  10: 259104.728 ops/s
Iteration  11: 267907.847 ops/s
Iteration  12: 246065.694 ops/s
Iteration  13: 254785.795 ops/s
Iteration  14: 252999.481 ops/s
Iteration  15: 252673.908 ops/s
Iteration  16: 246329.197 ops/s
Iteration  17: 253079.927 ops/s
Iteration  18: 268048.817 ops/s
Iteration  19: 245061.253 ops/s
Iteration  20: 264184.075 ops/s
Iteration  21: 248380.124 ops/s
Iteration  22: 252840.064 ops/s
Iteration  23: 265593.360 ops/s
Iteration  24: 250798.928 ops/s
Iteration  25: 256107.447 ops/s
Iteration  26: 251236.488 ops/s
Iteration  27: 255347.557 ops/s
Iteration  28: 261147.906 ops/s
Iteration  29: 256222.547 ops/s
Iteration  30: 244682.455 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingRetryAmount":
  255002.427 ±(99.9%) 4454.764 ops/s [Average]
  (min, avg, max) = (244077.946, 255002.427, 268048.817), stdev = 6667.682
  CI (99.9%): [250547.663, 259457.192] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingRetryAmount  thrpt   30  255002.427 ± 4454.764  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noCancelPreviousIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noCancelPreviousIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109410.472 ops/s
# Warmup Iteration   2: 387048.436 ops/s
# Warmup Iteration   3: 897316.628 ops/s
# Warmup Iteration   4: 919904.976 ops/s
# Warmup Iteration   5: 935366.321 ops/s
# Warmup Iteration   6: 962133.709 ops/s
# Warmup Iteration   7: 860201.778 ops/s
# Warmup Iteration   8: 954019.826 ops/s
# Warmup Iteration   9: 909666.525 ops/s
# Warmup Iteration  10: 990599.990 ops/s
# Warmup Iteration  11: 955456.487 ops/s
# Warmup Iteration  12: 936254.506 ops/s
# Warmup Iteration  13: 880845.684 ops/s
# Warmup Iteration  14: 880415.345 ops/s
# Warmup Iteration  15: 952859.208 ops/s
# Warmup Iteration  16: 966049.685 ops/s
# Warmup Iteration  17: 909999.421 ops/s
# Warmup Iteration  18: 959249.907 ops/s
# Warmup Iteration  19: 908691.889 ops/s
# Warmup Iteration  20: 931769.810 ops/s
# Warmup Iteration  21: 977352.080 ops/s
# Warmup Iteration  22: 708319.630 ops/s
# Warmup Iteration  23: 938191.930 ops/s
# Warmup Iteration  24: 932597.972 ops/s
# Warmup Iteration  25: 919810.597 ops/s
# Warmup Iteration  26: 961555.367 ops/s
# Warmup Iteration  27: 907365.790 ops/s
# Warmup Iteration  28: 924189.149 ops/s
# Warmup Iteration  29: 968081.794 ops/s
# Warmup Iteration  30: 909764.149 ops/s
Iteration   1: 945239.962 ops/s
Iteration   2: 924133.469 ops/s
Iteration   3: 918925.060 ops/s
Iteration   4: 948521.605 ops/s
Iteration   5: 935463.654 ops/s
Iteration   6: 914971.012 ops/s
Iteration   7: 945415.588 ops/s
Iteration   8: 919292.979 ops/s
Iteration   9: 953732.154 ops/s
Iteration  10: 921858.747 ops/s
Iteration  11: 928870.569 ops/s
Iteration  12: 931450.390 ops/s
Iteration  13: 934373.256 ops/s
Iteration  14: 919258.215 ops/s
Iteration  15: 958979.930 ops/s
Iteration  16: 904667.473 ops/s
Iteration  17: 900521.007 ops/s
Iteration  18: 945577.281 ops/s
Iteration  19: 891711.532 ops/s
Iteration  20: 959405.391 ops/s
Iteration  21: 929297.343 ops/s
Iteration  22: 932719.297 ops/s
Iteration  23: 958886.656 ops/s
Iteration  24: 942764.090 ops/s
Iteration  25: 960157.540 ops/s
Iteration  26: 909346.732 ops/s
Iteration  27: 971491.934 ops/s
Iteration  28: 911927.855 ops/s
Iteration  29: 969174.274 ops/s
Iteration  30: 960982.791 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_noCancelPreviousIterable":
  934970.593 ±(99.9%) 14240.263 ops/s [Average]
  (min, avg, max) = (891711.532, 934970.593, 971491.934), stdev = 21314.157
  CI (99.9%): [920730.330, 949210.856] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_noCancelPreviousIterable  thrpt   30  934970.593 ± 14240.263  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableWindowTests._Benchmark.benchmark_window$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableWindowTests._Benchmark.benchmark_window

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19317.910 ops/s
# Warmup Iteration   2: 138118.937 ops/s
# Warmup Iteration   3: 343425.345 ops/s
# Warmup Iteration   4: 382725.843 ops/s
# Warmup Iteration   5: 410597.513 ops/s
# Warmup Iteration   6: 413500.820 ops/s
# Warmup Iteration   7: 415843.838 ops/s
# Warmup Iteration   8: 415924.208 ops/s
# Warmup Iteration   9: 397213.241 ops/s
# Warmup Iteration  10: 427880.185 ops/s
# Warmup Iteration  11: 407936.719 ops/s
# Warmup Iteration  12: 394637.876 ops/s
# Warmup Iteration  13: 423792.136 ops/s
# Warmup Iteration  14: 413279.572 ops/s
# Warmup Iteration  15: 423853.759 ops/s
# Warmup Iteration  16: 411035.186 ops/s
# Warmup Iteration  17: 405240.766 ops/s
# Warmup Iteration  18: 421874.694 ops/s
# Warmup Iteration  19: 410122.801 ops/s
# Warmup Iteration  20: 431856.145 ops/s
# Warmup Iteration  21: 401876.590 ops/s
# Warmup Iteration  22: 406839.463 ops/s
# Warmup Iteration  23: 437414.523 ops/s
# Warmup Iteration  24: 396970.598 ops/s
# Warmup Iteration  25: 420626.059 ops/s
# Warmup Iteration  26: 428804.752 ops/s
# Warmup Iteration  27: 411415.294 ops/s
# Warmup Iteration  28: 410091.884 ops/s
# Warmup Iteration  29: 429677.562 ops/s
# Warmup Iteration  30: 403548.715 ops/s
Iteration   1: 419953.909 ops/s
Iteration   2: 428070.865 ops/s
Iteration   3: 409150.350 ops/s
Iteration   4: 413389.636 ops/s
Iteration   5: 408259.293 ops/s
Iteration   6: 415622.566 ops/s
Iteration   7: 428931.145 ops/s
Iteration   8: 408129.857 ops/s
Iteration   9: 421236.591 ops/s
Iteration  10: 411196.188 ops/s
Iteration  11: 410210.730 ops/s
Iteration  12: 428675.940 ops/s
Iteration  13: 403099.548 ops/s
Iteration  14: 403942.025 ops/s
Iteration  15: 404958.151 ops/s
Iteration  16: 400389.847 ops/s
Iteration  17: 399815.107 ops/s
Iteration  18: 412525.498 ops/s
Iteration  19: 406873.415 ops/s
Iteration  20: 426716.531 ops/s
Iteration  21: 415491.934 ops/s
Iteration  22: 400165.209 ops/s
Iteration  23: 409568.721 ops/s
Iteration  24: 402935.646 ops/s
Iteration  25: 424262.075 ops/s
Iteration  26: 402287.059 ops/s
Iteration  27: 424846.747 ops/s
Iteration  28: 413183.358 ops/s
Iteration  29: 388691.818 ops/s
Iteration  30: 413251.485 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableWindowTests._Benchmark.benchmark_window":
  411861.041 ±(99.9%) 6731.006 ops/s [Average]
  (min, avg, max) = (388691.818, 411861.041, 428931.145), stdev = 10074.654
  CI (99.9%): [405130.035, 418592.047] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
FlowableWindowTests._Benchmark.benchmark_window  thrpt   30  411861.041 ± 6731.006  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54704.080 ops/s
# Warmup Iteration   2: 279423.711 ops/s
# Warmup Iteration   3: 447649.934 ops/s
# Warmup Iteration   4: 408744.184 ops/s
# Warmup Iteration   5: 391272.422 ops/s
# Warmup Iteration   6: 474370.879 ops/s
# Warmup Iteration   7: 452512.350 ops/s
# Warmup Iteration   8: 475718.323 ops/s
# Warmup Iteration   9: 461324.705 ops/s
# Warmup Iteration  10: 462946.234 ops/s
# Warmup Iteration  11: 469554.250 ops/s
# Warmup Iteration  12: 485046.921 ops/s
# Warmup Iteration  13: 447785.577 ops/s
# Warmup Iteration  14: 475773.864 ops/s
# Warmup Iteration  15: 466326.197 ops/s
# Warmup Iteration  16: 431974.096 ops/s
# Warmup Iteration  17: 434097.292 ops/s
# Warmup Iteration  18: 464963.960 ops/s
# Warmup Iteration  19: 486679.920 ops/s
# Warmup Iteration  20: 463518.060 ops/s
# Warmup Iteration  21: 481455.833 ops/s
# Warmup Iteration  22: 466074.224 ops/s
# Warmup Iteration  23: 475064.974 ops/s
# Warmup Iteration  24: 468063.476 ops/s
# Warmup Iteration  25: 474858.077 ops/s
# Warmup Iteration  26: 483651.159 ops/s
# Warmup Iteration  27: 485742.230 ops/s
# Warmup Iteration  28: 469495.456 ops/s
# Warmup Iteration  29: 493601.534 ops/s
# Warmup Iteration  30: 476298.547 ops/s
Iteration   1: 468309.833 ops/s
Iteration   2: 482715.494 ops/s
Iteration   3: 490448.736 ops/s
Iteration   4: 468521.495 ops/s
Iteration   5: 489366.172 ops/s
Iteration   6: 460012.070 ops/s
Iteration   7: 472506.957 ops/s
Iteration   8: 486384.131 ops/s
Iteration   9: 465065.858 ops/s
Iteration  10: 481206.821 ops/s
Iteration  11: 459822.435 ops/s
Iteration  12: 479545.631 ops/s
Iteration  13: 476135.296 ops/s
Iteration  14: 456203.756 ops/s
Iteration  15: 491291.013 ops/s
Iteration  16: 469762.485 ops/s
Iteration  17: 487655.511 ops/s
Iteration  18: 489818.434 ops/s
Iteration  19: 472982.596 ops/s
Iteration  20: 488008.465 ops/s
Iteration  21: 473970.908 ops/s
Iteration  22: 475429.154 ops/s
Iteration  23: 490199.857 ops/s
Iteration  24: 454708.892 ops/s
Iteration  25: 476188.175 ops/s
Iteration  26: 470390.477 ops/s
Iteration  27: 491078.214 ops/s
Iteration  28: 497753.967 ops/s
Iteration  29: 460251.381 ops/s
Iteration  30: 487252.854 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorBoundary":
  477099.569 ±(99.9%) 8058.312 ops/s [Average]
  (min, avg, max) = (454708.892, 477099.569, 497753.967), stdev = 12061.303
  CI (99.9%): [469041.257, 485157.881] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorBoundary  thrpt   30  477099.569 ± 8058.312  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableGroupByTests._Benchmark.benchmark_groupsCompleteAsSoonAsMainCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableGroupByTests._Benchmark.benchmark_groupsCompleteAsSoonAsMainCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5761.825 ops/s
# Warmup Iteration   2: 50696.379 ops/s
# Warmup Iteration   3: 78571.978 ops/s
# Warmup Iteration   4: 79579.988 ops/s
# Warmup Iteration   5: 83740.067 ops/s
# Warmup Iteration   6: 85257.144 ops/s
# Warmup Iteration   7: 78322.231 ops/s
# Warmup Iteration   8: 79136.433 ops/s
# Warmup Iteration   9: 88196.244 ops/s
# Warmup Iteration  10: 83338.640 ops/s
# Warmup Iteration  11: 83968.862 ops/s
# Warmup Iteration  12: 85981.601 ops/s
# Warmup Iteration  13: 84488.711 ops/s
# Warmup Iteration  14: 83406.738 ops/s
# Warmup Iteration  15: 88362.824 ops/s
# Warmup Iteration  16: 88572.693 ops/s
# Warmup Iteration  17: 82255.428 ops/s
# Warmup Iteration  18: 87091.043 ops/s
# Warmup Iteration  19: 84047.960 ops/s
# Warmup Iteration  20: 89485.890 ops/s
# Warmup Iteration  21: 83050.324 ops/s
# Warmup Iteration  22: 85073.334 ops/s
# Warmup Iteration  23: 87889.071 ops/s
# Warmup Iteration  24: 81004.594 ops/s
# Warmup Iteration  25: 90518.890 ops/s
# Warmup Iteration  26: 85427.090 ops/s
# Warmup Iteration  27: 82517.711 ops/s
# Warmup Iteration  28: 86961.638 ops/s
# Warmup Iteration  29: 84004.285 ops/s
# Warmup Iteration  30: 86962.350 ops/s
Iteration   1: 83772.849 ops/s
Iteration   2: 85854.993 ops/s
Iteration   3: 82852.809 ops/s
Iteration   4: 82603.142 ops/s
Iteration   5: 86132.398 ops/s
Iteration   6: 82524.355 ops/s
Iteration   7: 81387.738 ops/s
Iteration   8: 84709.906 ops/s
Iteration   9: 83112.195 ops/s
Iteration  10: 87540.104 ops/s
Iteration  11: 83229.580 ops/s
Iteration  12: 84348.113 ops/s
Iteration  13: 87340.855 ops/s
Iteration  14: 83606.489 ops/s
Iteration  15: 83804.633 ops/s
Iteration  16: 83398.421 ops/s
Iteration  17: 82591.470 ops/s
Iteration  18: 86118.641 ops/s
Iteration  19: 82497.025 ops/s
Iteration  20: 86048.649 ops/s
Iteration  21: 83941.990 ops/s
Iteration  22: 84451.016 ops/s
Iteration  23: 84272.791 ops/s
Iteration  24: 83994.796 ops/s
Iteration  25: 88744.266 ops/s
Iteration  26: 82537.786 ops/s
Iteration  27: 88579.688 ops/s
Iteration  28: 84454.185 ops/s
Iteration  29: 86570.911 ops/s
Iteration  30: 85166.642 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableGroupByTests._Benchmark.benchmark_groupsCompleteAsSoonAsMainCompletes":
  84539.615 ±(99.9%) 1270.291 ops/s [Average]
  (min, avg, max) = (81387.738, 84539.615, 88744.266), stdev = 1901.312
  CI (99.9%): [83269.323, 85809.906] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt      Score      Error  Units
FlowableGroupByTests._Benchmark.benchmark_groupsCompleteAsSoonAsMainCompletes  thrpt   30  84539.615 ± 1270.291  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 621706.246 ops/s
# Warmup Iteration   2: 2157309.269 ops/s
# Warmup Iteration   3: 2843518.443 ops/s
# Warmup Iteration   4: 2582043.532 ops/s
# Warmup Iteration   5: 2867080.879 ops/s
# Warmup Iteration   6: 2759474.214 ops/s
# Warmup Iteration   7: 2579842.617 ops/s
# Warmup Iteration   8: 2464385.182 ops/s
# Warmup Iteration   9: 2859144.756 ops/s
# Warmup Iteration  10: 2861056.895 ops/s
# Warmup Iteration  11: 2325462.138 ops/s
# Warmup Iteration  12: 2632235.938 ops/s
# Warmup Iteration  13: 2715703.322 ops/s
# Warmup Iteration  14: 2827289.968 ops/s
# Warmup Iteration  15: 2717229.561 ops/s
# Warmup Iteration  16: 2745688.389 ops/s
# Warmup Iteration  17: 2845474.483 ops/s
# Warmup Iteration  18: 2858681.597 ops/s
# Warmup Iteration  19: 2781424.501 ops/s
# Warmup Iteration  20: 2696484.424 ops/s
# Warmup Iteration  21: 2844638.867 ops/s
# Warmup Iteration  22: 2730262.227 ops/s
# Warmup Iteration  23: 2765485.604 ops/s
# Warmup Iteration  24: 2645797.557 ops/s
# Warmup Iteration  25: 2706093.762 ops/s
# Warmup Iteration  26: 2825901.656 ops/s
# Warmup Iteration  27: 2670999.618 ops/s
# Warmup Iteration  28: 2843213.472 ops/s
# Warmup Iteration  29: 2810969.704 ops/s
# Warmup Iteration  30: 2701251.834 ops/s
Iteration   1: 2726652.126 ops/s
Iteration   2: 2827094.731 ops/s
Iteration   3: 2701848.974 ops/s
Iteration   4: 2782227.657 ops/s
Iteration   5: 2802955.916 ops/s
Iteration   6: 2690937.899 ops/s
Iteration   7: 2816332.668 ops/s
Iteration   8: 2840849.703 ops/s
Iteration   9: 2724841.598 ops/s
Iteration  10: 2811628.537 ops/s
Iteration  11: 2684482.519 ops/s
Iteration  12: 2711673.601 ops/s
Iteration  13: 2881697.124 ops/s
Iteration  14: 2657860.860 ops/s
Iteration  15: 2704703.858 ops/s
Iteration  16: 2835955.035 ops/s
Iteration  17: 2746132.117 ops/s
Iteration  18: 2795524.700 ops/s
Iteration  19: 2639260.858 ops/s
Iteration  20: 2834851.819 ops/s
Iteration  21: 2693263.866 ops/s
Iteration  22: 2746908.484 ops/s
Iteration  23: 2874404.016 ops/s
Iteration  24: 2668302.246 ops/s
Iteration  25: 2831660.711 ops/s
Iteration  26: 2674946.084 ops/s
Iteration  27: 2779369.756 ops/s
Iteration  28: 2867023.027 ops/s
Iteration  29: 2679368.667 ops/s
Iteration  30: 2778302.518 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed":
  2760368.723 ±(99.9%) 48148.164 ops/s [Average]
  (min, avg, max) = (2639260.858, 2760368.723, 2881697.124), stdev = 72065.910
  CI (99.9%): [2712220.559, 2808516.886] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt        Score       Error  Units
FlowableRetryTest._Benchmark.benchmark_retryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed  thrpt   30  2760368.723 ± 48148.164  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_cancelledUpFront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_cancelledUpFront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 175696.034 ops/s
# Warmup Iteration   2: 798410.819 ops/s
# Warmup Iteration   3: 1207013.644 ops/s
# Warmup Iteration   4: 1498997.150 ops/s
# Warmup Iteration   5: 1606360.373 ops/s
# Warmup Iteration   6: 1507852.815 ops/s
# Warmup Iteration   7: 1543087.702 ops/s
# Warmup Iteration   8: 1606108.595 ops/s
# Warmup Iteration   9: 1545419.740 ops/s
# Warmup Iteration  10: 1587029.478 ops/s
# Warmup Iteration  11: 1505841.447 ops/s
# Warmup Iteration  12: 1577343.815 ops/s
# Warmup Iteration  13: 1542191.137 ops/s
# Warmup Iteration  14: 1531824.156 ops/s
# Warmup Iteration  15: 1612412.364 ops/s
# Warmup Iteration  16: 1549703.453 ops/s
# Warmup Iteration  17: 1581919.579 ops/s
# Warmup Iteration  18: 1519963.812 ops/s
# Warmup Iteration  19: 1566032.568 ops/s
# Warmup Iteration  20: 1587363.936 ops/s
# Warmup Iteration  21: 1573430.992 ops/s
# Warmup Iteration  22: 1564201.127 ops/s
# Warmup Iteration  23: 1568620.745 ops/s
# Warmup Iteration  24: 1559418.115 ops/s
# Warmup Iteration  25: 1537693.897 ops/s
# Warmup Iteration  26: 1623831.753 ops/s
# Warmup Iteration  27: 1562991.919 ops/s
# Warmup Iteration  28: 1558489.467 ops/s
# Warmup Iteration  29: 1581594.931 ops/s
# Warmup Iteration  30: 1587770.052 ops/s
Iteration   1: 1532857.912 ops/s
Iteration   2: 1625081.889 ops/s
Iteration   3: 1531374.139 ops/s
Iteration   4: 1590852.433 ops/s
Iteration   5: 1555748.478 ops/s
Iteration   6: 1542575.651 ops/s
Iteration   7: 1590029.031 ops/s
Iteration   8: 1520466.477 ops/s
Iteration   9: 1562162.432 ops/s
Iteration  10: 1561951.515 ops/s
Iteration  11: 1573760.531 ops/s
Iteration  12: 1598660.247 ops/s
Iteration  13: 1558756.671 ops/s
Iteration  14: 1582030.302 ops/s
Iteration  15: 1591702.395 ops/s
Iteration  16: 1540819.971 ops/s
Iteration  17: 1574877.638 ops/s
Iteration  18: 1515566.127 ops/s
Iteration  19: 1600543.344 ops/s
Iteration  20: 1530632.306 ops/s
Iteration  21: 1575152.954 ops/s
Iteration  22: 1532321.142 ops/s
Iteration  23: 1614339.648 ops/s
Iteration  24: 1599899.648 ops/s
Iteration  25: 1526287.790 ops/s
Iteration  26: 1560071.912 ops/s
Iteration  27: 1567432.932 ops/s
Iteration  28: 1550037.229 ops/s
Iteration  29: 1616471.668 ops/s
Iteration  30: 1505124.229 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_cancelledUpFront":
  1564252.955 ±(99.9%) 21586.487 ops/s [Average]
  (min, avg, max) = (1505124.229, 1564252.955, 1625081.889), stdev = 32309.640
  CI (99.9%): [1542666.468, 1585839.442] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableCacheTest._Benchmark.benchmark_cancelledUpFront  thrpt   30  1564252.955 ± 21586.487  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_predicateThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_predicateThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24703.431 ops/s
# Warmup Iteration   2: 123838.969 ops/s
# Warmup Iteration   3: 178100.040 ops/s
# Warmup Iteration   4: 169794.567 ops/s
# Warmup Iteration   5: 179834.372 ops/s
# Warmup Iteration   6: 128257.938 ops/s
# Warmup Iteration   7: 172941.066 ops/s
# Warmup Iteration   8: 176368.871 ops/s
# Warmup Iteration   9: 172734.573 ops/s
# Warmup Iteration  10: 174278.616 ops/s
# Warmup Iteration  11: 170154.520 ops/s
# Warmup Iteration  12: 167529.633 ops/s
# Warmup Iteration  13: 183740.251 ops/s
# Warmup Iteration  14: 174364.941 ops/s
# Warmup Iteration  15: 177769.939 ops/s
# Warmup Iteration  16: 181277.208 ops/s
# Warmup Iteration  17: 185012.039 ops/s
# Warmup Iteration  18: 195990.229 ops/s
# Warmup Iteration  19: 192906.428 ops/s
# Warmup Iteration  20: 195845.854 ops/s
# Warmup Iteration  21: 194431.932 ops/s
# Warmup Iteration  22: 191516.852 ops/s
# Warmup Iteration  23: 203448.417 ops/s
# Warmup Iteration  24: 186555.180 ops/s
# Warmup Iteration  25: 192180.657 ops/s
# Warmup Iteration  26: 199492.108 ops/s
# Warmup Iteration  27: 195250.006 ops/s
# Warmup Iteration  28: 190488.471 ops/s
# Warmup Iteration  29: 195954.466 ops/s
# Warmup Iteration  30: 190442.838 ops/s
Iteration   1: 202085.051 ops/s
Iteration   2: 187743.271 ops/s
Iteration   3: 191959.553 ops/s
Iteration   4: 190182.961 ops/s
Iteration   5: 195059.548 ops/s
Iteration   6: 188701.478 ops/s
Iteration   7: 194244.428 ops/s
Iteration   8: 185597.520 ops/s
Iteration   9: 193251.519 ops/s
Iteration  10: 192312.913 ops/s
Iteration  11: 186423.844 ops/s
Iteration  12: 190637.786 ops/s
Iteration  13: 187740.541 ops/s
Iteration  14: 196437.586 ops/s
Iteration  15: 191538.589 ops/s
Iteration  16: 194712.811 ops/s
Iteration  17: 191531.529 ops/s
Iteration  18: 193039.257 ops/s
Iteration  19: 194106.817 ops/s
Iteration  20: 196073.272 ops/s
Iteration  21: 190336.036 ops/s
Iteration  22: 197719.448 ops/s
Iteration  23: 196090.796 ops/s
Iteration  24: 195894.315 ops/s
Iteration  25: 187653.810 ops/s
Iteration  26: 195970.081 ops/s
Iteration  27: 198418.515 ops/s
Iteration  28: 192266.349 ops/s
Iteration  29: 187225.792 ops/s
Iteration  30: 196487.412 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryWithPredicateTest._Benchmark.benchmark_predicateThrows":
  192714.761 ±(99.9%) 2668.578 ops/s [Average]
  (min, avg, max) = (185597.520, 192714.761, 202085.051), stdev = 3994.202
  CI (99.9%): [190046.183, 195383.339] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableRetryWithPredicateTest._Benchmark.benchmark_predicateThrows  thrpt   30  192714.761 ± 2668.578  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapScalarBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapScalarBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 258375.683 ops/s
# Warmup Iteration   2: 940907.972 ops/s
# Warmup Iteration   3: 1662716.562 ops/s
# Warmup Iteration   4: 1841050.056 ops/s
# Warmup Iteration   5: 2037836.213 ops/s
# Warmup Iteration   6: 2067932.952 ops/s
# Warmup Iteration   7: 2000138.158 ops/s
# Warmup Iteration   8: 2041739.586 ops/s
# Warmup Iteration   9: 2063841.614 ops/s
# Warmup Iteration  10: 1993192.175 ops/s
# Warmup Iteration  11: 2007974.843 ops/s
# Warmup Iteration  12: 2086517.188 ops/s
# Warmup Iteration  13: 1967899.909 ops/s
# Warmup Iteration  14: 2110507.304 ops/s
# Warmup Iteration  15: 1990354.356 ops/s
# Warmup Iteration  16: 2088163.721 ops/s
# Warmup Iteration  17: 2075497.678 ops/s
# Warmup Iteration  18: 2061919.204 ops/s
# Warmup Iteration  19: 2070651.499 ops/s
# Warmup Iteration  20: 2060347.635 ops/s
# Warmup Iteration  21: 2027820.041 ops/s
# Warmup Iteration  22: 2043095.717 ops/s
# Warmup Iteration  23: 2021381.787 ops/s
# Warmup Iteration  24: 2116300.462 ops/s
# Warmup Iteration  25: 1997787.114 ops/s
# Warmup Iteration  26: 2019787.897 ops/s
# Warmup Iteration  27: 2080101.122 ops/s
# Warmup Iteration  28: 2048095.360 ops/s
# Warmup Iteration  29: 2042699.960 ops/s
# Warmup Iteration  30: 2057522.561 ops/s
Iteration   1: 2015342.940 ops/s
Iteration   2: 2029066.916 ops/s
Iteration   3: 2020550.134 ops/s
Iteration   4: 2094457.646 ops/s
Iteration   5: 2064405.672 ops/s
Iteration   6: 1987758.400 ops/s
Iteration   7: 2086616.512 ops/s
Iteration   8: 1996861.025 ops/s
Iteration   9: 2061797.718 ops/s
Iteration  10: 2050420.336 ops/s
Iteration  11: 1989005.690 ops/s
Iteration  12: 2146963.938 ops/s
Iteration  13: 1945665.335 ops/s
Iteration  14: 2063065.743 ops/s
Iteration  15: 2094136.322 ops/s
Iteration  16: 2009286.767 ops/s
Iteration  17: 2039279.316 ops/s
Iteration  18: 2045921.121 ops/s
Iteration  19: 1974700.254 ops/s
Iteration  20: 2129161.788 ops/s
Iteration  21: 2009315.632 ops/s
Iteration  22: 2066848.272 ops/s
Iteration  23: 2014403.040 ops/s
Iteration  24: 2054955.565 ops/s
Iteration  25: 2007291.203 ops/s
Iteration  26: 2007953.559 ops/s
Iteration  27: 2134811.422 ops/s
Iteration  28: 1948798.356 ops/s
Iteration  29: 2162706.490 ops/s
Iteration  30: 2005950.384 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapScalarBackpressured":
  2041916.583 ±(99.9%) 37149.554 ops/s [Average]
  (min, avg, max) = (1945665.335, 2041916.583, 2162706.490), stdev = 55603.707
  CI (99.9%): [2004767.029, 2079066.137] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapScalarBackpressured  thrpt   30  2041916.583 ± 37149.554  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_repeat$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_repeat

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7237.800 ops/s
# Warmup Iteration   2: 64917.825 ops/s
# Warmup Iteration   3: 107093.098 ops/s
# Warmup Iteration   4: 192860.365 ops/s
# Warmup Iteration   5: 254141.424 ops/s
# Warmup Iteration   6: 258037.181 ops/s
# Warmup Iteration   7: 262805.857 ops/s
# Warmup Iteration   8: 252112.554 ops/s
# Warmup Iteration   9: 255406.727 ops/s
# Warmup Iteration  10: 260161.543 ops/s
# Warmup Iteration  11: 253540.036 ops/s
# Warmup Iteration  12: 256426.150 ops/s
# Warmup Iteration  13: 252919.406 ops/s
# Warmup Iteration  14: 265702.960 ops/s
# Warmup Iteration  15: 252202.312 ops/s
# Warmup Iteration  16: 250510.231 ops/s
# Warmup Iteration  17: 260479.571 ops/s
# Warmup Iteration  18: 255134.572 ops/s
# Warmup Iteration  19: 258149.013 ops/s
# Warmup Iteration  20: 259016.508 ops/s
# Warmup Iteration  21: 241309.470 ops/s
# Warmup Iteration  22: 272092.749 ops/s
# Warmup Iteration  23: 252647.008 ops/s
# Warmup Iteration  24: 266967.105 ops/s
# Warmup Iteration  25: 262103.645 ops/s
# Warmup Iteration  26: 255884.302 ops/s
# Warmup Iteration  27: 271036.653 ops/s
# Warmup Iteration  28: 253081.228 ops/s
# Warmup Iteration  29: 262567.743 ops/s
# Warmup Iteration  30: 259051.556 ops/s
Iteration   1: 259499.618 ops/s
Iteration   2: 260711.093 ops/s
Iteration   3: 256448.466 ops/s
Iteration   4: 269094.476 ops/s
Iteration   5: 255027.305 ops/s
Iteration   6: 263575.222 ops/s
Iteration   7: 262547.364 ops/s
Iteration   8: 249383.105 ops/s
Iteration   9: 272742.524 ops/s
Iteration  10: 249352.472 ops/s
Iteration  11: 263302.335 ops/s
Iteration  12: 269680.544 ops/s
Iteration  13: 257227.980 ops/s
Iteration  14: 259731.995 ops/s
Iteration  15: 260392.060 ops/s
Iteration  16: 267296.330 ops/s
Iteration  17: 254865.597 ops/s
Iteration  18: 264384.158 ops/s
Iteration  19: 255512.227 ops/s
Iteration  20: 266995.521 ops/s
Iteration  21: 253872.172 ops/s
Iteration  22: 265666.824 ops/s
Iteration  23: 269214.016 ops/s
Iteration  24: 252855.830 ops/s
Iteration  25: 266578.124 ops/s
Iteration  26: 261948.434 ops/s
Iteration  27: 263940.507 ops/s
Iteration  28: 266008.544 ops/s
Iteration  29: 259481.126 ops/s
Iteration  30: 266714.570 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_repeat":
  261468.351 ±(99.9%) 4103.425 ops/s [Average]
  (min, avg, max) = (249352.472, 261468.351, 272742.524), stdev = 6141.814
  CI (99.9%): [257364.926, 265571.777] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                               Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_repeat  thrpt   30  261468.351 ± 4103.425  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36874.741 ops/s
# Warmup Iteration   2: 83233.433 ops/s
# Warmup Iteration   3: 186980.114 ops/s
# Warmup Iteration   4: 328449.243 ops/s
# Warmup Iteration   5: 354476.758 ops/s
# Warmup Iteration   6: 342422.145 ops/s
# Warmup Iteration   7: 330485.552 ops/s
# Warmup Iteration   8: 346623.617 ops/s
# Warmup Iteration   9: 333476.694 ops/s
# Warmup Iteration  10: 350142.968 ops/s
# Warmup Iteration  11: 343592.341 ops/s
# Warmup Iteration  12: 322499.207 ops/s
# Warmup Iteration  13: 354574.501 ops/s
# Warmup Iteration  14: 340039.868 ops/s
# Warmup Iteration  15: 351530.367 ops/s
# Warmup Iteration  16: 342684.043 ops/s
# Warmup Iteration  17: 348143.758 ops/s
# Warmup Iteration  18: 368872.229 ops/s
# Warmup Iteration  19: 334539.079 ops/s
# Warmup Iteration  20: 342027.693 ops/s
# Warmup Iteration  21: 355719.890 ops/s
# Warmup Iteration  22: 344669.155 ops/s
# Warmup Iteration  23: 359764.539 ops/s
# Warmup Iteration  24: 373905.137 ops/s
# Warmup Iteration  25: 344524.776 ops/s
# Warmup Iteration  26: 366756.820 ops/s
# Warmup Iteration  27: 351627.922 ops/s
# Warmup Iteration  28: 353787.498 ops/s
# Warmup Iteration  29: 353042.885 ops/s
# Warmup Iteration  30: 353475.695 ops/s
Iteration   1: 373353.282 ops/s
Iteration   2: 348855.195 ops/s
Iteration   3: 352771.877 ops/s
Iteration   4: 359612.342 ops/s
Iteration   5: 346080.815 ops/s
Iteration   6: 345138.843 ops/s
Iteration   7: 364569.698 ops/s
Iteration   8: 350665.515 ops/s
Iteration   9: 353405.464 ops/s
Iteration  10: 349394.279 ops/s
Iteration  11: 357989.550 ops/s
Iteration  12: 352707.198 ops/s
Iteration  13: 339463.301 ops/s
Iteration  14: 362164.585 ops/s
Iteration  15: 340693.280 ops/s
Iteration  16: 351177.079 ops/s
Iteration  17: 361680.224 ops/s
Iteration  18: 350034.299 ops/s
Iteration  19: 369518.534 ops/s
Iteration  20: 345355.738 ops/s
Iteration  21: 350912.882 ops/s
Iteration  22: 360569.776 ops/s
Iteration  23: 357990.423 ops/s
Iteration  24: 349281.127 ops/s
Iteration  25: 357504.664 ops/s
Iteration  26: 358799.211 ops/s
Iteration  27: 265736.404 ops/s
Iteration  28: 352999.263 ops/s
Iteration  29: 365215.167 ops/s
Iteration  30: 341381.002 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError2":
  351167.367 ±(99.9%) 12125.766 ops/s [Average]
  (min, avg, max) = (265736.404, 351167.367, 373353.282), stdev = 18149.277
  CI (99.9%): [339041.601, 363293.134] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError2  thrpt   30  351167.367 ± 12125.766  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRangeTest._Benchmark.benchmark_countNegative$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRangeTest._Benchmark.benchmark_countNegative

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 409725.211 ops/s
# Warmup Iteration   2: 612079.181 ops/s
# Warmup Iteration   3: 758448.980 ops/s
# Warmup Iteration   4: 750666.588 ops/s
# Warmup Iteration   5: 727093.887 ops/s
# Warmup Iteration   6: 760257.259 ops/s
# Warmup Iteration   7: 740645.849 ops/s
# Warmup Iteration   8: 722259.439 ops/s
# Warmup Iteration   9: 714524.413 ops/s
# Warmup Iteration  10: 747558.301 ops/s
# Warmup Iteration  11: 701907.662 ops/s
# Warmup Iteration  12: 717999.771 ops/s
# Warmup Iteration  13: 745363.105 ops/s
# Warmup Iteration  14: 721052.641 ops/s
# Warmup Iteration  15: 695302.625 ops/s
# Warmup Iteration  16: 760733.800 ops/s
# Warmup Iteration  17: 725445.976 ops/s
# Warmup Iteration  18: 788713.607 ops/s
# Warmup Iteration  19: 776323.938 ops/s
# Warmup Iteration  20: 815106.390 ops/s
# Warmup Iteration  21: 749602.669 ops/s
# Warmup Iteration  22: 783586.226 ops/s
# Warmup Iteration  23: 824250.782 ops/s
# Warmup Iteration  24: 736693.397 ops/s
# Warmup Iteration  25: 791665.426 ops/s
# Warmup Iteration  26: 776961.573 ops/s
# Warmup Iteration  27: 779240.461 ops/s
# Warmup Iteration  28: 794222.847 ops/s
# Warmup Iteration  29: 762961.779 ops/s
# Warmup Iteration  30: 769542.590 ops/s
Iteration   1: 767413.215 ops/s
Iteration   2: 761232.754 ops/s
Iteration   3: 832211.003 ops/s
Iteration   4: 775897.590 ops/s
Iteration   5: 750098.737 ops/s
Iteration   6: 800274.633 ops/s
Iteration   7: 761934.583 ops/s
Iteration   8: 815132.054 ops/s
Iteration   9: 807030.821 ops/s
Iteration  10: 747470.803 ops/s
Iteration  11: 795790.041 ops/s
Iteration  12: 785746.066 ops/s
Iteration  13: 765065.672 ops/s
Iteration  14: 794411.419 ops/s
Iteration  15: 797922.285 ops/s
Iteration  16: 783230.064 ops/s
Iteration  17: 766539.119 ops/s
Iteration  18: 790734.390 ops/s
Iteration  19: 770666.138 ops/s
Iteration  20: 792952.106 ops/s
Iteration  21: 780774.858 ops/s
Iteration  22: 791283.810 ops/s
Iteration  23: 812987.802 ops/s
Iteration  24: 780434.056 ops/s
Iteration  25: 789642.135 ops/s
Iteration  26: 763654.694 ops/s
Iteration  27: 814135.370 ops/s
Iteration  28: 779687.945 ops/s
Iteration  29: 795989.712 ops/s
Iteration  30: 801932.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRangeTest._Benchmark.benchmark_countNegative":
  785742.551 ±(99.9%) 13586.848 ops/s [Average]
  (min, avg, max) = (747470.803, 785742.551, 832211.003), stdev = 20336.156
  CI (99.9%): [772155.703, 799329.399] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableIntervalRangeTest._Benchmark.benchmark_countNegative  thrpt   30  785742.551 ± 13586.848  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_countNegative$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_countNegative

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 357410.648 ops/s
# Warmup Iteration   2: 599710.264 ops/s
# Warmup Iteration   3: 706073.242 ops/s
# Warmup Iteration   4: 714611.022 ops/s
# Warmup Iteration   5: 637506.764 ops/s
# Warmup Iteration   6: 731612.824 ops/s
# Warmup Iteration   7: 728271.568 ops/s
# Warmup Iteration   8: 720898.094 ops/s
# Warmup Iteration   9: 748673.973 ops/s
# Warmup Iteration  10: 720722.798 ops/s
# Warmup Iteration  11: 744612.169 ops/s
# Warmup Iteration  12: 737106.547 ops/s
# Warmup Iteration  13: 722629.343 ops/s
# Warmup Iteration  14: 764617.091 ops/s
# Warmup Iteration  15: 723442.386 ops/s
# Warmup Iteration  16: 745104.841 ops/s
# Warmup Iteration  17: 805220.186 ops/s
# Warmup Iteration  18: 751971.760 ops/s
# Warmup Iteration  19: 790235.332 ops/s
# Warmup Iteration  20: 788364.878 ops/s
# Warmup Iteration  21: 761684.528 ops/s
# Warmup Iteration  22: 781143.278 ops/s
# Warmup Iteration  23: 816541.071 ops/s
# Warmup Iteration  24: 763287.548 ops/s
# Warmup Iteration  25: 792172.249 ops/s
# Warmup Iteration  26: 778073.845 ops/s
# Warmup Iteration  27: 761349.378 ops/s
# Warmup Iteration  28: 788887.694 ops/s
# Warmup Iteration  29: 784933.390 ops/s
# Warmup Iteration  30: 803900.532 ops/s
Iteration   1: 786776.729 ops/s
Iteration   2: 797439.902 ops/s
Iteration   3: 767015.235 ops/s
Iteration   4: 784040.671 ops/s
Iteration   5: 806815.196 ops/s
Iteration   6: 760541.379 ops/s
Iteration   7: 800663.207 ops/s
Iteration   8: 773102.750 ops/s
Iteration   9: 761046.910 ops/s
Iteration  10: 804410.707 ops/s
Iteration  11: 787835.718 ops/s
Iteration  12: 802847.760 ops/s
Iteration  13: 769107.917 ops/s
Iteration  14: 791843.491 ops/s
Iteration  15: 779877.739 ops/s
Iteration  16: 771365.586 ops/s
Iteration  17: 823607.813 ops/s
Iteration  18: 754790.532 ops/s
Iteration  19: 806859.664 ops/s
Iteration  20: 811514.371 ops/s
Iteration  21: 739293.931 ops/s
Iteration  22: 656860.565 ops/s
Iteration  23: 785925.725 ops/s
Iteration  24: 793045.729 ops/s
Iteration  25: 782870.392 ops/s
Iteration  26: 761831.018 ops/s
Iteration  27: 786569.756 ops/s
Iteration  28: 757822.566 ops/s
Iteration  29: 796144.663 ops/s
Iteration  30: 774625.866 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_countNegative":
  779216.450 ±(99.9%) 20158.655 ops/s [Average]
  (min, avg, max) = (656860.565, 779216.450, 823607.813), stdev = 30172.528
  CI (99.9%): [759057.794, 799375.105] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableIntervalRangeTest._Benchmark.benchmark_countNegative  thrpt   30  779216.450 ± 20158.655  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimedWithNegativeCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimedWithNegativeCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 295255.280 ops/s
# Warmup Iteration   2: 626787.332 ops/s
# Warmup Iteration   3: 774291.630 ops/s
# Warmup Iteration   4: 702308.850 ops/s
# Warmup Iteration   5: 697002.171 ops/s
# Warmup Iteration   6: 720831.019 ops/s
# Warmup Iteration   7: 637246.951 ops/s
# Warmup Iteration   8: 727919.562 ops/s
# Warmup Iteration   9: 740735.719 ops/s
# Warmup Iteration  10: 763529.809 ops/s
# Warmup Iteration  11: 722450.422 ops/s
# Warmup Iteration  12: 748410.463 ops/s
# Warmup Iteration  13: 736377.206 ops/s
# Warmup Iteration  14: 748818.932 ops/s
# Warmup Iteration  15: 727344.046 ops/s
# Warmup Iteration  16: 735815.498 ops/s
# Warmup Iteration  17: 797354.069 ops/s
# Warmup Iteration  18: 785912.099 ops/s
# Warmup Iteration  19: 784850.540 ops/s
# Warmup Iteration  20: 782028.490 ops/s
# Warmup Iteration  21: 816650.545 ops/s
# Warmup Iteration  22: 782175.745 ops/s
# Warmup Iteration  23: 788999.497 ops/s
# Warmup Iteration  24: 788914.559 ops/s
# Warmup Iteration  25: 816048.464 ops/s
# Warmup Iteration  26: 766343.009 ops/s
# Warmup Iteration  27: 793498.491 ops/s
# Warmup Iteration  28: 828545.655 ops/s
# Warmup Iteration  29: 774965.791 ops/s
# Warmup Iteration  30: 795714.540 ops/s
Iteration   1: 784894.372 ops/s
Iteration   2: 807480.061 ops/s
Iteration   3: 759513.829 ops/s
Iteration   4: 800600.469 ops/s
Iteration   5: 817159.218 ops/s
Iteration   6: 765621.522 ops/s
Iteration   7: 801850.661 ops/s
Iteration   8: 776099.678 ops/s
Iteration   9: 768036.391 ops/s
Iteration  10: 829502.420 ops/s
Iteration  11: 769117.454 ops/s
Iteration  12: 810051.982 ops/s
Iteration  13: 782284.951 ops/s
Iteration  14: 792360.396 ops/s
Iteration  15: 770457.756 ops/s
Iteration  16: 772453.299 ops/s
Iteration  17: 808555.253 ops/s
Iteration  18: 772886.785 ops/s
Iteration  19: 793274.379 ops/s
Iteration  20: 812843.648 ops/s
Iteration  21: 785383.269 ops/s
Iteration  22: 790128.807 ops/s
Iteration  23: 781081.078 ops/s
Iteration  24: 808965.726 ops/s
Iteration  25: 778975.321 ops/s
Iteration  26: 798148.444 ops/s
Iteration  27: 789271.389 ops/s
Iteration  28: 774136.476 ops/s
Iteration  29: 804123.492 ops/s
Iteration  30: 795612.174 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimedWithNegativeCount":
  790029.023 ±(99.9%) 11754.327 ops/s [Average]
  (min, avg, max) = (759513.829, 790029.023, 829502.420), stdev = 17593.325
  CI (99.9%): [778274.696, 801783.351] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score       Error  Units
ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimedWithNegativeCount  thrpt   30  790029.023 ± 11754.327  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimedWithNegativeCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimedWithNegativeCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 385329.701 ops/s
# Warmup Iteration   2: 634553.244 ops/s
# Warmup Iteration   3: 641753.011 ops/s
# Warmup Iteration   4: 690846.193 ops/s
# Warmup Iteration   5: 712301.435 ops/s
# Warmup Iteration   6: 683012.455 ops/s
# Warmup Iteration   7: 724148.944 ops/s
# Warmup Iteration   8: 746610.084 ops/s
# Warmup Iteration   9: 711746.467 ops/s
# Warmup Iteration  10: 743187.072 ops/s
# Warmup Iteration  11: 754034.614 ops/s
# Warmup Iteration  12: 697631.695 ops/s
# Warmup Iteration  13: 755518.406 ops/s
# Warmup Iteration  14: 721926.918 ops/s
# Warmup Iteration  15: 728205.919 ops/s
# Warmup Iteration  16: 731820.661 ops/s
# Warmup Iteration  17: 780488.607 ops/s
# Warmup Iteration  18: 778471.983 ops/s
# Warmup Iteration  19: 804456.441 ops/s
# Warmup Iteration  20: 755851.685 ops/s
# Warmup Iteration  21: 811404.993 ops/s
# Warmup Iteration  22: 793322.077 ops/s
# Warmup Iteration  23: 778049.232 ops/s
# Warmup Iteration  24: 809731.159 ops/s
# Warmup Iteration  25: 790661.703 ops/s
# Warmup Iteration  26: 773807.348 ops/s
# Warmup Iteration  27: 819140.290 ops/s
# Warmup Iteration  28: 767490.008 ops/s
# Warmup Iteration  29: 797325.962 ops/s
# Warmup Iteration  30: 785955.368 ops/s
Iteration   1: 769466.762 ops/s
Iteration   2: 798385.057 ops/s
Iteration   3: 769070.381 ops/s
Iteration   4: 803862.291 ops/s
Iteration   5: 793289.306 ops/s
Iteration   6: 774526.491 ops/s
Iteration   7: 793463.136 ops/s
Iteration   8: 775903.649 ops/s
Iteration   9: 778244.319 ops/s
Iteration  10: 811044.958 ops/s
Iteration  11: 783799.258 ops/s
Iteration  12: 762689.575 ops/s
Iteration  13: 787785.926 ops/s
Iteration  14: 801136.477 ops/s
Iteration  15: 758293.351 ops/s
Iteration  16: 655292.067 ops/s
Iteration  17: 680672.022 ops/s
Iteration  18: 758182.351 ops/s
Iteration  19: 781607.870 ops/s
Iteration  20: 785938.519 ops/s
Iteration  21: 755426.719 ops/s
Iteration  22: 782085.224 ops/s
Iteration  23: 781106.648 ops/s
Iteration  24: 789159.501 ops/s
Iteration  25: 786510.297 ops/s
Iteration  26: 803616.603 ops/s
Iteration  27: 769373.015 ops/s
Iteration  28: 775740.701 ops/s
Iteration  29: 794349.331 ops/s
Iteration  30: 763498.904 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimedWithNegativeCount":
  774117.357 ±(99.9%) 21702.041 ops/s [Average]
  (min, avg, max) = (655292.067, 774117.357, 811044.958), stdev = 32482.596
  CI (99.9%): [752415.316, 795819.398] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
FlowableTakeLastTimedTest._Benchmark.benchmark_takeLastTimedWithNegativeCount  thrpt   30  774117.357 ± 21702.041  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRangeTest._Benchmark.benchmark_longOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRangeTest._Benchmark.benchmark_longOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 405051.229 ops/s
# Warmup Iteration   2: 617788.379 ops/s
# Warmup Iteration   3: 689825.014 ops/s
# Warmup Iteration   4: 689618.563 ops/s
# Warmup Iteration   5: 778412.664 ops/s
# Warmup Iteration   6: 720528.969 ops/s
# Warmup Iteration   7: 691538.929 ops/s
# Warmup Iteration   8: 779435.706 ops/s
# Warmup Iteration   9: 730468.931 ops/s
# Warmup Iteration  10: 791773.541 ops/s
# Warmup Iteration  11: 783153.533 ops/s
# Warmup Iteration  12: 763157.638 ops/s
# Warmup Iteration  13: 776018.507 ops/s
# Warmup Iteration  14: 765733.879 ops/s
# Warmup Iteration  15: 751102.471 ops/s
# Warmup Iteration  16: 788198.242 ops/s
# Warmup Iteration  17: 802329.447 ops/s
# Warmup Iteration  18: 834594.141 ops/s
# Warmup Iteration  19: 805060.366 ops/s
# Warmup Iteration  20: 835994.923 ops/s
# Warmup Iteration  21: 837642.292 ops/s
# Warmup Iteration  22: 812859.745 ops/s
# Warmup Iteration  23: 774131.887 ops/s
# Warmup Iteration  24: 830520.736 ops/s
# Warmup Iteration  25: 826440.577 ops/s
# Warmup Iteration  26: 790337.675 ops/s
# Warmup Iteration  27: 814609.101 ops/s
# Warmup Iteration  28: 809444.363 ops/s
# Warmup Iteration  29: 832117.997 ops/s
# Warmup Iteration  30: 823232.006 ops/s
Iteration   1: 821497.848 ops/s
Iteration   2: 828743.328 ops/s
Iteration   3: 792135.176 ops/s
Iteration   4: 815505.492 ops/s
Iteration   5: 832447.258 ops/s
Iteration   6: 787793.855 ops/s
Iteration   7: 847752.515 ops/s
Iteration   8: 790183.928 ops/s
Iteration   9: 831924.164 ops/s
Iteration  10: 812738.001 ops/s
Iteration  11: 812089.112 ops/s
Iteration  12: 811162.139 ops/s
Iteration  13: 800866.134 ops/s
Iteration  14: 846978.827 ops/s
Iteration  15: 786019.596 ops/s
Iteration  16: 804140.761 ops/s
Iteration  17: 841634.807 ops/s
Iteration  18: 808575.279 ops/s
Iteration  19: 812277.001 ops/s
Iteration  20: 820955.163 ops/s
Iteration  21: 794256.226 ops/s
Iteration  22: 818514.741 ops/s
Iteration  23: 808070.044 ops/s
Iteration  24: 814899.347 ops/s
Iteration  25: 811266.385 ops/s
Iteration  26: 819464.902 ops/s
Iteration  27: 796927.980 ops/s
Iteration  28: 789911.475 ops/s
Iteration  29: 846526.804 ops/s
Iteration  30: 795305.371 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIntervalRangeTest._Benchmark.benchmark_longOverflow":
  813352.122 ±(99.9%) 12128.480 ops/s [Average]
  (min, avg, max) = (786019.596, 813352.122, 847752.515), stdev = 18153.339
  CI (99.9%): [801223.642, 825480.602] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableIntervalRangeTest._Benchmark.benchmark_longOverflow  thrpt   30  813352.122 ± 12128.480  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_schedulePeriodicallyDirectNullRunnable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_schedulePeriodicallyDirectNullRunnable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 580316.766 ops/s
# Warmup Iteration   2: 649382.666 ops/s
# Warmup Iteration   3: 737832.313 ops/s
# Warmup Iteration   4: 643085.567 ops/s
# Warmup Iteration   5: 738979.917 ops/s
# Warmup Iteration   6: 687169.428 ops/s
# Warmup Iteration   7: 694112.598 ops/s
# Warmup Iteration   8: 751888.999 ops/s
# Warmup Iteration   9: 764471.528 ops/s
# Warmup Iteration  10: 772040.479 ops/s
# Warmup Iteration  11: 712865.560 ops/s
# Warmup Iteration  12: 738018.681 ops/s
# Warmup Iteration  13: 766837.547 ops/s
# Warmup Iteration  14: 747126.224 ops/s
# Warmup Iteration  15: 728239.363 ops/s
# Warmup Iteration  16: 760546.088 ops/s
# Warmup Iteration  17: 765936.428 ops/s
# Warmup Iteration  18: 791512.391 ops/s
# Warmup Iteration  19: 782726.508 ops/s
# Warmup Iteration  20: 791607.085 ops/s
# Warmup Iteration  21: 771418.728 ops/s
# Warmup Iteration  22: 793874.355 ops/s
# Warmup Iteration  23: 783351.502 ops/s
# Warmup Iteration  24: 768792.646 ops/s
# Warmup Iteration  25: 817696.096 ops/s
# Warmup Iteration  26: 769645.785 ops/s
# Warmup Iteration  27: 779971.241 ops/s
# Warmup Iteration  28: 809783.000 ops/s
# Warmup Iteration  29: 767067.717 ops/s
# Warmup Iteration  30: 802854.433 ops/s
Iteration   1: 770115.725 ops/s
Iteration   2: 793588.034 ops/s
Iteration   3: 824679.245 ops/s
Iteration   4: 755737.978 ops/s
Iteration   5: 798828.298 ops/s
Iteration   6: 757908.345 ops/s
Iteration   7: 809816.135 ops/s
Iteration   8: 814487.596 ops/s
Iteration   9: 767145.862 ops/s
Iteration  10: 793684.021 ops/s
Iteration  11: 650435.116 ops/s
Iteration  12: 790554.933 ops/s
Iteration  13: 782014.700 ops/s
Iteration  14: 779816.894 ops/s
Iteration  15: 810284.302 ops/s
Iteration  16: 769466.820 ops/s
Iteration  17: 807978.209 ops/s
Iteration  18: 766458.166 ops/s
Iteration  19: 805559.261 ops/s
Iteration  20: 774655.087 ops/s
Iteration  21: 766503.096 ops/s
Iteration  22: 816147.457 ops/s
Iteration  23: 784329.619 ops/s
Iteration  24: 785072.364 ops/s
Iteration  25: 775158.717 ops/s
Iteration  26: 810962.342 ops/s
Iteration  27: 778129.823 ops/s
Iteration  28: 799359.902 ops/s
Iteration  29: 775541.747 ops/s
Iteration  30: 786490.880 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_schedulePeriodicallyDirectNullRunnable":
  783363.689 ±(99.9%) 20884.144 ops/s [Average]
  (min, avg, max) = (650435.116, 783363.689, 824679.245), stdev = 31258.406
  CI (99.9%): [762479.545, 804247.834] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score       Error  Units
SingleSchedulerTest._Benchmark.benchmark_schedulePeriodicallyDirectNullRunnable  thrpt   30  783363.689 ± 20884.144  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17607.114 ops/s
# Warmup Iteration   2: 71567.160 ops/s
# Warmup Iteration   3: 121697.715 ops/s
# Warmup Iteration   4: 132420.153 ops/s
# Warmup Iteration   5: 123657.195 ops/s
# Warmup Iteration   6: 137973.046 ops/s
# Warmup Iteration   7: 144054.257 ops/s
# Warmup Iteration   8: 127053.803 ops/s
# Warmup Iteration   9: 152131.637 ops/s
# Warmup Iteration  10: 102861.005 ops/s
# Warmup Iteration  11: 129231.241 ops/s
# Warmup Iteration  12: 124933.279 ops/s
# Warmup Iteration  13: 116174.867 ops/s
# Warmup Iteration  14: 127588.603 ops/s
# Warmup Iteration  15: 131540.211 ops/s
# Warmup Iteration  16: 133373.623 ops/s
# Warmup Iteration  17: 121038.285 ops/s
# Warmup Iteration  18: 124270.668 ops/s
# Warmup Iteration  19: 141692.364 ops/s
# Warmup Iteration  20: 140922.905 ops/s
# Warmup Iteration  21: 118762.570 ops/s
# Warmup Iteration  22: 123176.657 ops/s
# Warmup Iteration  23: 123254.172 ops/s
# Warmup Iteration  24: 113973.594 ops/s
# Warmup Iteration  25: 141173.467 ops/s
# Warmup Iteration  26: 124686.632 ops/s
# Warmup Iteration  27: 131280.795 ops/s
# Warmup Iteration  28: 116090.135 ops/s
# Warmup Iteration  29: 125606.978 ops/s
# Warmup Iteration  30: 123136.691 ops/s
Iteration   1: 121278.722 ops/s
Iteration   2: 130813.206 ops/s
Iteration   3: 134113.839 ops/s
Iteration   4: 114739.482 ops/s
Iteration   5: 118510.193 ops/s
Iteration   6: 114716.294 ops/s
Iteration   7: 140043.976 ops/s
Iteration   8: 116392.963 ops/s
Iteration   9: 127035.768 ops/s
Iteration  10: 149900.862 ops/s
Iteration  11: 110331.286 ops/s
Iteration  12: 139528.800 ops/s
Iteration  13: 125002.179 ops/s
Iteration  14: 118219.844 ops/s
Iteration  15: 140397.945 ops/s
Iteration  16: 115126.488 ops/s
Iteration  17: 131171.489 ops/s
Iteration  18: 130966.662 ops/s
Iteration  19: 160914.491 ops/s
Iteration  20: 123371.743 ops/s
Iteration  21: 127847.250 ops/s
Iteration  22: 140553.056 ops/s
Iteration  23: 130420.456 ops/s
Iteration  24: 136364.542 ops/s
Iteration  25: 123342.232 ops/s
Iteration  26: 127026.125 ops/s
Iteration  27: 121420.572 ops/s
Iteration  28: 139282.924 ops/s
Iteration  29: 114227.620 ops/s
Iteration  30: 133801.518 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedEmpty":
  128562.084 ±(99.9%) 7774.181 ops/s [Average]
  (min, avg, max) = (110331.286, 128562.084, 160914.491), stdev = 11636.029
  CI (99.9%): [120787.903, 136336.265] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_timedEmpty  thrpt   30  128562.084 ± 7774.181  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedEmptyOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedEmptyOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10032.474 ops/s
# Warmup Iteration   2: 42582.870 ops/s
# Warmup Iteration   3: 93472.320 ops/s
# Warmup Iteration   4: 140389.410 ops/s
# Warmup Iteration   5: 127107.806 ops/s
# Warmup Iteration   6: 122683.047 ops/s
# Warmup Iteration   7: 140631.490 ops/s
# Warmup Iteration   8: 132904.491 ops/s
# Warmup Iteration   9: 146780.127 ops/s
# Warmup Iteration  10: 120787.727 ops/s
# Warmup Iteration  11: 148194.872 ops/s
# Warmup Iteration  12: 136409.157 ops/s
# Warmup Iteration  13: 137285.931 ops/s
# Warmup Iteration  14: 116840.859 ops/s
# Warmup Iteration  15: 135097.262 ops/s
# Warmup Iteration  16: 132841.095 ops/s
# Warmup Iteration  17: 140978.645 ops/s
# Warmup Iteration  18: 125059.846 ops/s
# Warmup Iteration  19: 127465.073 ops/s
# Warmup Iteration  20: 118516.110 ops/s
# Warmup Iteration  21: 118539.698 ops/s
# Warmup Iteration  22: 117819.837 ops/s
# Warmup Iteration  23: 112666.936 ops/s
# Warmup Iteration  24: 128685.476 ops/s
# Warmup Iteration  25: 127388.427 ops/s
# Warmup Iteration  26: 129392.388 ops/s
# Warmup Iteration  27: 154702.367 ops/s
# Warmup Iteration  28: 129218.170 ops/s
# Warmup Iteration  29: 122133.302 ops/s
# Warmup Iteration  30: 121958.959 ops/s
Iteration   1: 117722.558 ops/s
Iteration   2: 112519.975 ops/s
Iteration   3: 107239.981 ops/s
Iteration   4: 120210.824 ops/s
Iteration   5: 129272.331 ops/s
Iteration   6: 120677.163 ops/s
Iteration   7: 133074.508 ops/s
Iteration   8: 124962.376 ops/s
Iteration   9: 136648.225 ops/s
Iteration  10: 122966.171 ops/s
Iteration  11: 131001.599 ops/s
Iteration  12: 127474.612 ops/s
Iteration  13: 133016.869 ops/s
Iteration  14: 109464.657 ops/s
Iteration  15: 122892.854 ops/s
Iteration  16: 141008.615 ops/s
Iteration  17: 136765.428 ops/s
Iteration  18: 166573.343 ops/s
Iteration  19: 126209.318 ops/s
Iteration  20: 119119.770 ops/s
Iteration  21: 130548.114 ops/s
Iteration  22: 121920.830 ops/s
Iteration  23: 148616.464 ops/s
Iteration  24: 128451.871 ops/s
Iteration  25: 121894.507 ops/s
Iteration  26: 110569.321 ops/s
Iteration  27: 124295.145 ops/s
Iteration  28: 122587.875 ops/s
Iteration  29: 126414.364 ops/s
Iteration  30: 148124.382 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedEmptyOther":
  127408.135 ±(99.9%) 8319.964 ops/s [Average]
  (min, avg, max) = (107239.981, 127408.135, 166573.343), stdev = 12452.932
  CI (99.9%): [119088.171, 135728.099] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_timedEmptyOther  thrpt   30  127408.135 ± 8319.964  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4838.626 ops/s
# Warmup Iteration   2: 15118.497 ops/s
# Warmup Iteration   3: 26654.360 ops/s
# Warmup Iteration   4: 11671.788 ops/s
# Warmup Iteration   5: 46779.188 ops/s
# Warmup Iteration   6: 48690.733 ops/s
# Warmup Iteration   7: 58091.975 ops/s
# Warmup Iteration   8: 60607.509 ops/s
# Warmup Iteration   9: 61572.293 ops/s
# Warmup Iteration  10: 55438.087 ops/s
# Warmup Iteration  11: 63037.193 ops/s
# Warmup Iteration  12: 59104.973 ops/s
# Warmup Iteration  13: 63161.901 ops/s
# Warmup Iteration  14: 53691.982 ops/s
# Warmup Iteration  15: 56226.143 ops/s
# Warmup Iteration  16: 50192.461 ops/s
# Warmup Iteration  17: 59397.484 ops/s
# Warmup Iteration  18: 61642.540 ops/s
# Warmup Iteration  19: 57261.817 ops/s
# Warmup Iteration  20: 60219.624 ops/s
# Warmup Iteration  21: 62893.971 ops/s
# Warmup Iteration  22: 60405.993 ops/s
# Warmup Iteration  23: 61881.410 ops/s
# Warmup Iteration  24: 61461.923 ops/s
# Warmup Iteration  25: 62531.036 ops/s
# Warmup Iteration  26: 58298.664 ops/s
# Warmup Iteration  27: 60041.353 ops/s
# Warmup Iteration  28: 61705.985 ops/s
# Warmup Iteration  29: 60475.222 ops/s
# Warmup Iteration  30: 58895.542 ops/s
Iteration   1: 55296.401 ops/s
Iteration   2: 64817.038 ops/s
Iteration   3: 57084.009 ops/s
Iteration   4: 63547.776 ops/s
Iteration   5: 54089.293 ops/s
Iteration   6: 61624.735 ops/s
Iteration   7: 58882.140 ops/s
Iteration   8: 57329.890 ops/s
Iteration   9: 62322.775 ops/s
Iteration  10: 62041.148 ops/s
Iteration  11: 66264.624 ops/s
Iteration  12: 63069.489 ops/s
Iteration  13: 60133.949 ops/s
Iteration  14: 62798.501 ops/s
Iteration  15: 57923.389 ops/s
Iteration  16: 62864.566 ops/s
Iteration  17: 56144.804 ops/s
Iteration  18: 57098.020 ops/s
Iteration  19: 60730.163 ops/s
Iteration  20: 60059.815 ops/s
Iteration  21: 61868.199 ops/s
Iteration  22: 62555.764 ops/s
Iteration  23: 58278.411 ops/s
Iteration  24: 61823.329 ops/s
Iteration  25: 58114.659 ops/s
Iteration  26: 62568.153 ops/s
Iteration  27: 56069.358 ops/s
Iteration  28: 66681.455 ops/s
Iteration  29: 61815.143 ops/s
Iteration  30: 57170.332 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_badSource":
  60368.911 ±(99.9%) 2179.322 ops/s [Average]
  (min, avg, max) = (54089.293, 60368.911, 66681.455), stdev = 3261.907
  CI (99.9%): [58189.589, 62548.233] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt      Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_badSource  thrpt   30  60368.911 ± 2179.322  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 133527.869 ops/s
# Warmup Iteration   2: 870374.787 ops/s
# Warmup Iteration   3: 1236059.560 ops/s
# Warmup Iteration   4: 1135005.991 ops/s
# Warmup Iteration   5: 1192448.231 ops/s
# Warmup Iteration   6: 1075484.307 ops/s
# Warmup Iteration   7: 1164835.763 ops/s
# Warmup Iteration   8: 1236918.569 ops/s
# Warmup Iteration   9: 1190038.478 ops/s
# Warmup Iteration  10: 1216309.763 ops/s
# Warmup Iteration  11: 1200636.971 ops/s
# Warmup Iteration  12: 1270511.856 ops/s
# Warmup Iteration  13: 1250075.430 ops/s
# Warmup Iteration  14: 1168356.700 ops/s
# Warmup Iteration  15: 1251979.793 ops/s
# Warmup Iteration  16: 1220775.211 ops/s
# Warmup Iteration  17: 1193828.520 ops/s
# Warmup Iteration  18: 1225779.101 ops/s
# Warmup Iteration  19: 1208806.022 ops/s
# Warmup Iteration  20: 1243987.144 ops/s
# Warmup Iteration  21: 1203033.996 ops/s
# Warmup Iteration  22: 1239353.925 ops/s
# Warmup Iteration  23: 1266550.155 ops/s
# Warmup Iteration  24: 1176713.511 ops/s
# Warmup Iteration  25: 927127.737 ops/s
# Warmup Iteration  26: 1228989.751 ops/s
# Warmup Iteration  27: 1189610.494 ops/s
# Warmup Iteration  28: 1244289.085 ops/s
# Warmup Iteration  29: 1246046.801 ops/s
# Warmup Iteration  30: 1210567.615 ops/s
Iteration   1: 1232749.928 ops/s
Iteration   2: 1184552.014 ops/s
Iteration   3: 1245699.587 ops/s
Iteration   4: 1221105.561 ops/s
Iteration   5: 1224272.768 ops/s
Iteration   6: 1201910.556 ops/s
Iteration   7: 1197660.355 ops/s
Iteration   8: 1252883.802 ops/s
Iteration   9: 1183564.129 ops/s
Iteration  10: 1210221.282 ops/s
Iteration  11: 1218468.251 ops/s
Iteration  12: 1247092.149 ops/s
Iteration  13: 1180756.931 ops/s
Iteration  14: 1222764.777 ops/s
Iteration  15: 1196726.731 ops/s
Iteration  16: 1262407.623 ops/s
Iteration  17: 1195142.195 ops/s
Iteration  18: 1208516.283 ops/s
Iteration  19: 1277935.880 ops/s
Iteration  20: 1167510.730 ops/s
Iteration  21: 1259534.577 ops/s
Iteration  22: 1163002.605 ops/s
Iteration  23: 1256777.933 ops/s
Iteration  24: 1258523.924 ops/s
Iteration  25: 1170451.005 ops/s
Iteration  26: 1253125.038 ops/s
Iteration  27: 1211174.508 ops/s
Iteration  28: 1209675.364 ops/s
Iteration  29: 1227329.705 ops/s
Iteration  30: 1234447.179 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_backpressure":
  1219199.446 ±(99.9%) 20960.779 ops/s [Average]
  (min, avg, max) = (1163002.605, 1219199.446, 1277935.880), stdev = 31373.110
  CI (99.9%): [1198238.666, 1240160.225] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableGenerateTest._Benchmark.benchmark_backpressure  thrpt   30  1219199.446 ± 20960.779  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOut$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOut

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107473.865 ops/s
# Warmup Iteration   2: 371060.289 ops/s
# Warmup Iteration   3: 1182108.671 ops/s
# Warmup Iteration   4: 1296797.479 ops/s
# Warmup Iteration   5: 1346699.375 ops/s
# Warmup Iteration   6: 1293883.103 ops/s
# Warmup Iteration   7: 1365799.813 ops/s
# Warmup Iteration   8: 1320588.237 ops/s
# Warmup Iteration   9: 1305136.339 ops/s
# Warmup Iteration  10: 1360357.507 ops/s
# Warmup Iteration  11: 1272902.844 ops/s
# Warmup Iteration  12: 1272240.027 ops/s
# Warmup Iteration  13: 1362031.864 ops/s
# Warmup Iteration  14: 1312665.316 ops/s
# Warmup Iteration  15: 1256658.429 ops/s
# Warmup Iteration  16: 1334202.364 ops/s
# Warmup Iteration  17: 1363429.571 ops/s
# Warmup Iteration  18: 1343195.930 ops/s
# Warmup Iteration  19: 1356180.105 ops/s
# Warmup Iteration  20: 1401558.466 ops/s
# Warmup Iteration  21: 1296895.871 ops/s
# Warmup Iteration  22: 1409924.732 ops/s
# Warmup Iteration  23: 1361876.438 ops/s
# Warmup Iteration  24: 1308373.824 ops/s
# Warmup Iteration  25: 1393496.384 ops/s
# Warmup Iteration  26: 1339138.450 ops/s
# Warmup Iteration  27: 1364965.139 ops/s
# Warmup Iteration  28: 1343520.109 ops/s
# Warmup Iteration  29: 1340143.071 ops/s
# Warmup Iteration  30: 1422835.646 ops/s
Iteration   1: 1320440.326 ops/s
Iteration   2: 1371734.140 ops/s
Iteration   3: 1295294.007 ops/s
Iteration   4: 1399475.965 ops/s
Iteration   5: 1311829.457 ops/s
Iteration   6: 1365963.086 ops/s
Iteration   7: 1400057.394 ops/s
Iteration   8: 1336334.337 ops/s
Iteration   9: 1396331.007 ops/s
Iteration  10: 1318007.482 ops/s
Iteration  11: 1375751.970 ops/s
Iteration  12: 1333376.948 ops/s
Iteration  13: 1381250.478 ops/s
Iteration  14: 1364650.841 ops/s
Iteration  15: 1338796.869 ops/s
Iteration  16: 1333205.545 ops/s
Iteration  17: 1350037.661 ops/s
Iteration  18: 1311643.671 ops/s
Iteration  19: 1378630.260 ops/s
Iteration  20: 1312812.420 ops/s
Iteration  21: 1356013.094 ops/s
Iteration  22: 1293707.496 ops/s
Iteration  23: 1339544.225 ops/s
Iteration  24: 1368035.071 ops/s
Iteration  25: 1301459.146 ops/s
Iteration  26: 1370716.572 ops/s
Iteration  27: 1305649.033 ops/s
Iteration  28: 1348451.000 ops/s
Iteration  29: 1403142.365 ops/s
Iteration  30: 1318677.918 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOut":
  1346700.659 ±(99.9%) 22347.719 ops/s [Average]
  (min, avg, max) = (1293707.496, 1346700.659, 1403142.365), stdev = 33449.017
  CI (99.9%): [1324352.940, 1369048.379] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOut  thrpt   30  1346700.659 ± 22347.719  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_moreWorkInRunAsync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_moreWorkInRunAsync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 125946.222 ops/s
# Warmup Iteration   2: 444397.944 ops/s
# Warmup Iteration   3: 1462822.827 ops/s
# Warmup Iteration   4: 1536893.875 ops/s
# Warmup Iteration   5: 1524785.925 ops/s
# Warmup Iteration   6: 1400055.544 ops/s
# Warmup Iteration   7: 1540409.280 ops/s
# Warmup Iteration   8: 1599128.956 ops/s
# Warmup Iteration   9: 1516350.505 ops/s
# Warmup Iteration  10: 1602749.361 ops/s
# Warmup Iteration  11: 1550590.757 ops/s
# Warmup Iteration  12: 1615239.534 ops/s
# Warmup Iteration  13: 1632213.827 ops/s
# Warmup Iteration  14: 1494348.679 ops/s
# Warmup Iteration  15: 1623587.487 ops/s
# Warmup Iteration  16: 1542951.276 ops/s
# Warmup Iteration  17: 1576013.681 ops/s
# Warmup Iteration  18: 1586789.114 ops/s
# Warmup Iteration  19: 1399794.668 ops/s
# Warmup Iteration  20: 1190659.871 ops/s
# Warmup Iteration  21: 1540519.450 ops/s
# Warmup Iteration  22: 1538963.472 ops/s
# Warmup Iteration  23: 1565825.901 ops/s
# Warmup Iteration  24: 1558698.431 ops/s
# Warmup Iteration  25: 1569037.856 ops/s
# Warmup Iteration  26: 1548598.096 ops/s
# Warmup Iteration  27: 1653191.618 ops/s
# Warmup Iteration  28: 1538940.515 ops/s
# Warmup Iteration  29: 1565358.152 ops/s
# Warmup Iteration  30: 1621851.823 ops/s
Iteration   1: 1521796.444 ops/s
Iteration   2: 1621787.300 ops/s
Iteration   3: 1545201.624 ops/s
Iteration   4: 1633833.901 ops/s
Iteration   5: 1597145.907 ops/s
Iteration   6: 1570016.823 ops/s
Iteration   7: 1611233.713 ops/s
Iteration   8: 1572034.176 ops/s
Iteration   9: 1605450.392 ops/s
Iteration  10: 1562470.192 ops/s
Iteration  11: 1526871.318 ops/s
Iteration  12: 1624373.199 ops/s
Iteration  13: 1567388.698 ops/s
Iteration  14: 1563945.571 ops/s
Iteration  15: 1558299.677 ops/s
Iteration  16: 1603607.114 ops/s
Iteration  17: 1531376.487 ops/s
Iteration  18: 1558897.880 ops/s
Iteration  19: 1572220.469 ops/s
Iteration  20: 1519536.007 ops/s
Iteration  21: 1595546.658 ops/s
Iteration  22: 1543151.513 ops/s
Iteration  23: 1626816.769 ops/s
Iteration  24: 1528656.764 ops/s
Iteration  25: 1604599.944 ops/s
Iteration  26: 1577698.121 ops/s
Iteration  27: 1521161.786 ops/s
Iteration  28: 1604269.048 ops/s
Iteration  29: 1577805.931 ops/s
Iteration  30: 1534239.797 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_moreWorkInRunAsync":
  1572714.441 ±(99.9%) 23535.956 ops/s [Average]
  (min, avg, max) = (1519536.007, 1572714.441, 1633833.901), stdev = 35227.513
  CI (99.9%): [1549178.485, 1596250.396] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_moreWorkInRunAsync  thrpt   30  1572714.441 ± 23535.956  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_oneByOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_oneByOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85520.421 ops/s
# Warmup Iteration   2: 472814.555 ops/s
# Warmup Iteration   3: 645595.105 ops/s
# Warmup Iteration   4: 665855.828 ops/s
# Warmup Iteration   5: 660892.515 ops/s
# Warmup Iteration   6: 650543.110 ops/s
# Warmup Iteration   7: 625459.828 ops/s
# Warmup Iteration   8: 658106.152 ops/s
# Warmup Iteration   9: 686926.967 ops/s
# Warmup Iteration  10: 653848.248 ops/s
# Warmup Iteration  11: 669451.333 ops/s
# Warmup Iteration  12: 673284.158 ops/s
# Warmup Iteration  13: 641499.614 ops/s
# Warmup Iteration  14: 674744.860 ops/s
# Warmup Iteration  15: 666656.454 ops/s
# Warmup Iteration  16: 668791.532 ops/s
# Warmup Iteration  17: 679347.549 ops/s
# Warmup Iteration  18: 630688.772 ops/s
# Warmup Iteration  19: 666700.515 ops/s
# Warmup Iteration  20: 677554.870 ops/s
# Warmup Iteration  21: 666139.115 ops/s
# Warmup Iteration  22: 668286.622 ops/s
# Warmup Iteration  23: 656573.181 ops/s
# Warmup Iteration  24: 676873.532 ops/s
# Warmup Iteration  25: 658998.692 ops/s
# Warmup Iteration  26: 654893.552 ops/s
# Warmup Iteration  27: 687758.605 ops/s
# Warmup Iteration  28: 660973.876 ops/s
# Warmup Iteration  29: 674163.031 ops/s
# Warmup Iteration  30: 672993.604 ops/s
Iteration   1: 662670.478 ops/s
Iteration   2: 682826.473 ops/s
Iteration   3: 666083.484 ops/s
Iteration   4: 671353.949 ops/s
Iteration   5: 621056.326 ops/s
Iteration   6: 652178.380 ops/s
Iteration   7: 664111.128 ops/s
Iteration   8: 685556.893 ops/s
Iteration   9: 697566.445 ops/s
Iteration  10: 659329.468 ops/s
Iteration  11: 686879.417 ops/s
Iteration  12: 692216.520 ops/s
Iteration  13: 654111.129 ops/s
Iteration  14: 642716.862 ops/s
Iteration  15: 675159.187 ops/s
Iteration  16: 668265.670 ops/s
Iteration  17: 694425.280 ops/s
Iteration  18: 683324.102 ops/s
Iteration  19: 645611.356 ops/s
Iteration  20: 681532.532 ops/s
Iteration  21: 665873.297 ops/s
Iteration  22: 678930.468 ops/s
Iteration  23: 681404.826 ops/s
Iteration  24: 658798.978 ops/s
Iteration  25: 669516.467 ops/s
Iteration  26: 696750.770 ops/s
Iteration  27: 700659.885 ops/s
Iteration  28: 626549.725 ops/s
Iteration  29: 655322.656 ops/s
Iteration  30: 677560.988 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_oneByOne":
  669944.771 ±(99.9%) 13347.535 ops/s [Average]
  (min, avg, max) = (621056.326, 669944.771, 700659.885), stdev = 19977.963
  CI (99.9%): [656597.237, 683292.306] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_oneByOne  thrpt   30  669944.771 ± 13347.535  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_syncFusedRequestOneByOneConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_syncFusedRequestOneByOneConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 131559.438 ops/s
# Warmup Iteration   2: 628455.046 ops/s
# Warmup Iteration   3: 1131637.854 ops/s
# Warmup Iteration   4: 1102606.492 ops/s
# Warmup Iteration   5: 1133350.696 ops/s
# Warmup Iteration   6: 1036339.720 ops/s
# Warmup Iteration   7: 1072131.585 ops/s
# Warmup Iteration   8: 1127993.032 ops/s
# Warmup Iteration   9: 1133656.678 ops/s
# Warmup Iteration  10: 1181968.577 ops/s
# Warmup Iteration  11: 1167173.280 ops/s
# Warmup Iteration  12: 1180929.257 ops/s
# Warmup Iteration  13: 1112212.884 ops/s
# Warmup Iteration  14: 991215.560 ops/s
# Warmup Iteration  15: 1113198.087 ops/s
# Warmup Iteration  16: 1159245.114 ops/s
# Warmup Iteration  17: 1092794.780 ops/s
# Warmup Iteration  18: 1144715.266 ops/s
# Warmup Iteration  19: 1099017.570 ops/s
# Warmup Iteration  20: 1115895.823 ops/s
# Warmup Iteration  21: 1175329.590 ops/s
# Warmup Iteration  22: 1153784.207 ops/s
# Warmup Iteration  23: 1163386.635 ops/s
# Warmup Iteration  24: 1142144.390 ops/s
# Warmup Iteration  25: 1130518.794 ops/s
# Warmup Iteration  26: 1174359.146 ops/s
# Warmup Iteration  27: 1146252.093 ops/s
# Warmup Iteration  28: 1162205.001 ops/s
# Warmup Iteration  29: 1126293.356 ops/s
# Warmup Iteration  30: 1156679.083 ops/s
Iteration   1: 1207659.771 ops/s
Iteration   2: 1146119.921 ops/s
Iteration   3: 1155548.393 ops/s
Iteration   4: 1134127.192 ops/s
Iteration   5: 1177702.901 ops/s
Iteration   6: 1121639.809 ops/s
Iteration   7: 1156729.524 ops/s
Iteration   8: 1123002.540 ops/s
Iteration   9: 1117942.225 ops/s
Iteration  10: 1165485.889 ops/s
Iteration  11: 1136950.504 ops/s
Iteration  12: 1160898.965 ops/s
Iteration  13: 1127663.651 ops/s
Iteration  14: 1170620.320 ops/s
Iteration  15: 1148345.246 ops/s
Iteration  16: 1106151.315 ops/s
Iteration  17: 1182640.211 ops/s
Iteration  18: 1170169.163 ops/s
Iteration  19: 1118938.770 ops/s
Iteration  20: 1156159.199 ops/s
Iteration  21: 1138470.055 ops/s
Iteration  22: 1158962.135 ops/s
Iteration  23: 1190461.798 ops/s
Iteration  24: 1128288.722 ops/s
Iteration  25: 1177811.710 ops/s
Iteration  26: 1129175.255 ops/s
Iteration  27: 1197327.208 ops/s
Iteration  28: 1122111.778 ops/s
Iteration  29: 1137149.334 ops/s
Iteration  30: 1155151.078 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_syncFusedRequestOneByOneConditional":
  1150646.819 ±(99.9%) 17358.123 ops/s [Average]
  (min, avg, max) = (1106151.315, 1150646.819, 1207659.771), stdev = 25980.823
  CI (99.9%): [1133288.696, 1168004.942] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_syncFusedRequestOneByOneConditional  thrpt   30  1150646.819 ± 17358.123  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOutConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOutConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 84039.058 ops/s
# Warmup Iteration   2: 299019.999 ops/s
# Warmup Iteration   3: 971562.556 ops/s
# Warmup Iteration   4: 1245894.498 ops/s
# Warmup Iteration   5: 1336079.863 ops/s
# Warmup Iteration   6: 1200430.624 ops/s
# Warmup Iteration   7: 1225343.391 ops/s
# Warmup Iteration   8: 1257990.508 ops/s
# Warmup Iteration   9: 1267912.453 ops/s
# Warmup Iteration  10: 1290748.013 ops/s
# Warmup Iteration  11: 1366343.900 ops/s
# Warmup Iteration  12: 1291200.149 ops/s
# Warmup Iteration  13: 1366453.537 ops/s
# Warmup Iteration  14: 1282515.087 ops/s
# Warmup Iteration  15: 1322184.156 ops/s
# Warmup Iteration  16: 1279124.785 ops/s
# Warmup Iteration  17: 1339114.168 ops/s
# Warmup Iteration  18: 1305235.354 ops/s
# Warmup Iteration  19: 1336019.735 ops/s
# Warmup Iteration  20: 1341889.755 ops/s
# Warmup Iteration  21: 1311598.215 ops/s
# Warmup Iteration  22: 1352311.106 ops/s
# Warmup Iteration  23: 1285657.031 ops/s
# Warmup Iteration  24: 1323721.797 ops/s
# Warmup Iteration  25: 1322342.513 ops/s
# Warmup Iteration  26: 1341103.580 ops/s
# Warmup Iteration  27: 1301795.326 ops/s
# Warmup Iteration  28: 1356026.662 ops/s
# Warmup Iteration  29: 1315526.404 ops/s
# Warmup Iteration  30: 1298645.703 ops/s
Iteration   1: 1366330.222 ops/s
Iteration   2: 1298813.436 ops/s
Iteration   3: 1348981.088 ops/s
Iteration   4: 1270642.235 ops/s
Iteration   5: 1344338.510 ops/s
Iteration   6: 1355388.499 ops/s
Iteration   7: 1290654.818 ops/s
Iteration   8: 1353664.021 ops/s
Iteration   9: 1291479.615 ops/s
Iteration  10: 1309250.435 ops/s
Iteration  11: 1338030.065 ops/s
Iteration  12: 1304006.865 ops/s
Iteration  13: 1359834.953 ops/s
Iteration  14: 1297715.858 ops/s
Iteration  15: 1258205.587 ops/s
Iteration  16: 1311339.947 ops/s
Iteration  17: 1324986.270 ops/s
Iteration  18: 1352773.350 ops/s
Iteration  19: 1269582.950 ops/s
Iteration  20: 1352522.297 ops/s
Iteration  21: 1262066.134 ops/s
Iteration  22: 1327670.330 ops/s
Iteration  23: 1296488.295 ops/s
Iteration  24: 1324136.465 ops/s
Iteration  25: 1319421.702 ops/s
Iteration  26: 1336366.040 ops/s
Iteration  27: 1250829.617 ops/s
Iteration  28: 1334041.483 ops/s
Iteration  29: 1319388.620 ops/s
Iteration  30: 1291186.282 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOutConditional":
  1315337.866 ±(99.9%) 21952.710 ops/s [Average]
  (min, avg, max) = (1250829.617, 1315337.866, 1366330.222), stdev = 32857.785
  CI (99.9%): [1293385.157, 1337290.576] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInNormalOutConditional  thrpt   30  1315337.866 ± 21952.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24692.848 ops/s
# Warmup Iteration   2: 60323.812 ops/s
# Warmup Iteration   3: 183970.548 ops/s
# Warmup Iteration   4: 192169.649 ops/s
# Warmup Iteration   5: 189029.110 ops/s
# Warmup Iteration   6: 205824.614 ops/s
# Warmup Iteration   7: 221158.049 ops/s
# Warmup Iteration   8: 183383.495 ops/s
# Warmup Iteration   9: 211572.384 ops/s
# Warmup Iteration  10: 211738.207 ops/s
# Warmup Iteration  11: 218804.913 ops/s
# Warmup Iteration  12: 213221.940 ops/s
# Warmup Iteration  13: 220063.278 ops/s
# Warmup Iteration  14: 214787.375 ops/s
# Warmup Iteration  15: 214442.114 ops/s
# Warmup Iteration  16: 216877.661 ops/s
# Warmup Iteration  17: 219743.583 ops/s
# Warmup Iteration  18: 226398.179 ops/s
# Warmup Iteration  19: 229741.939 ops/s
# Warmup Iteration  20: 217815.267 ops/s
# Warmup Iteration  21: 231368.297 ops/s
# Warmup Iteration  22: 219170.172 ops/s
# Warmup Iteration  23: 226532.769 ops/s
# Warmup Iteration  24: 226119.871 ops/s
# Warmup Iteration  25: 215322.845 ops/s
# Warmup Iteration  26: 225177.727 ops/s
# Warmup Iteration  27: 218999.162 ops/s
# Warmup Iteration  28: 222480.866 ops/s
# Warmup Iteration  29: 230750.133 ops/s
# Warmup Iteration  30: 221830.862 ops/s
Iteration   1: 227181.758 ops/s
Iteration   2: 221783.866 ops/s
Iteration   3: 232740.233 ops/s
Iteration   4: 218753.921 ops/s
Iteration   5: 222951.243 ops/s
Iteration   6: 226761.093 ops/s
Iteration   7: 220442.284 ops/s
Iteration   8: 214752.360 ops/s
Iteration   9: 225947.507 ops/s
Iteration  10: 214669.444 ops/s
Iteration  11: 218518.412 ops/s
Iteration  12: 222963.051 ops/s
Iteration  13: 222433.464 ops/s
Iteration  14: 225664.649 ops/s
Iteration  15: 221763.155 ops/s
Iteration  16: 219781.066 ops/s
Iteration  17: 225415.208 ops/s
Iteration  18: 215069.979 ops/s
Iteration  19: 228715.233 ops/s
Iteration  20: 220962.130 ops/s
Iteration  21: 217938.409 ops/s
Iteration  22: 220111.181 ops/s
Iteration  23: 225416.835 ops/s
Iteration  24: 215893.861 ops/s
Iteration  25: 216971.655 ops/s
Iteration  26: 227112.274 ops/s
Iteration  27: 217389.585 ops/s
Iteration  28: 222738.155 ops/s
Iteration  29: 219949.851 ops/s
Iteration  30: 225576.475 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_badSource":
  221878.945 ±(99.9%) 3031.211 ops/s [Average]
  (min, avg, max) = (214669.444, 221878.945, 232740.233), stdev = 4536.974
  CI (99.9%): [218847.734, 224910.156] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_badSource  thrpt   30  221878.945 ± 3031.211  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOut$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOut

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72507.572 ops/s
# Warmup Iteration   2: 361549.991 ops/s
# Warmup Iteration   3: 832825.012 ops/s
# Warmup Iteration   4: 976028.498 ops/s
# Warmup Iteration   5: 1200891.166 ops/s
# Warmup Iteration   6: 1208226.992 ops/s
# Warmup Iteration   7: 1193741.928 ops/s
# Warmup Iteration   8: 1214323.600 ops/s
# Warmup Iteration   9: 1138209.725 ops/s
# Warmup Iteration  10: 1223874.904 ops/s
# Warmup Iteration  11: 1120978.399 ops/s
# Warmup Iteration  12: 1187313.639 ops/s
# Warmup Iteration  13: 1241712.229 ops/s
# Warmup Iteration  14: 1166102.114 ops/s
# Warmup Iteration  15: 1226080.822 ops/s
# Warmup Iteration  16: 1182357.413 ops/s
# Warmup Iteration  17: 1184000.181 ops/s
# Warmup Iteration  18: 1223084.353 ops/s
# Warmup Iteration  19: 1159850.661 ops/s
# Warmup Iteration  20: 1219844.175 ops/s
# Warmup Iteration  21: 1175513.534 ops/s
# Warmup Iteration  22: 1149042.296 ops/s
# Warmup Iteration  23: 1229698.296 ops/s
# Warmup Iteration  24: 1213758.928 ops/s
# Warmup Iteration  25: 1143791.358 ops/s
# Warmup Iteration  26: 1177723.174 ops/s
# Warmup Iteration  27: 1190287.768 ops/s
# Warmup Iteration  28: 1200345.504 ops/s
# Warmup Iteration  29: 1215366.206 ops/s
# Warmup Iteration  30: 1172429.499 ops/s
Iteration   1: 1151332.632 ops/s
Iteration   2: 1215197.722 ops/s
Iteration   3: 1162069.187 ops/s
Iteration   4: 1191939.829 ops/s
Iteration   5: 1163446.087 ops/s
Iteration   6: 1179270.417 ops/s
Iteration   7: 1213626.795 ops/s
Iteration   8: 1138291.712 ops/s
Iteration   9: 1199116.591 ops/s
Iteration  10: 1164108.725 ops/s
Iteration  11: 1222045.430 ops/s
Iteration  12: 1157358.181 ops/s
Iteration  13: 1201063.355 ops/s
Iteration  14: 1166968.094 ops/s
Iteration  15: 1228683.097 ops/s
Iteration  16: 1185391.579 ops/s
Iteration  17: 1190523.041 ops/s
Iteration  18: 1169038.551 ops/s
Iteration  19: 1172713.936 ops/s
Iteration  20: 1176970.507 ops/s
Iteration  21: 1142369.053 ops/s
Iteration  22: 1186507.186 ops/s
Iteration  23: 1239125.032 ops/s
Iteration  24: 1157739.623 ops/s
Iteration  25: 1242130.754 ops/s
Iteration  26: 1143702.606 ops/s
Iteration  27: 1244688.349 ops/s
Iteration  28: 1150105.859 ops/s
Iteration  29: 1186975.281 ops/s
Iteration  30: 1194109.016 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOut":
  1184553.608 ±(99.9%) 20463.370 ops/s [Average]
  (min, avg, max) = (1138291.712, 1184553.608, 1244688.349), stdev = 30628.612
  CI (99.9%): [1164090.237, 1205016.978] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyAsyncInNormalOut  thrpt   30  1184553.608 ± 20463.370  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedMoreWork$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedMoreWork

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204480.031 ops/s
# Warmup Iteration   2: 711966.127 ops/s
# Warmup Iteration   3: 1179331.703 ops/s
# Warmup Iteration   4: 1549031.484 ops/s
# Warmup Iteration   5: 1622384.336 ops/s
# Warmup Iteration   6: 1598722.157 ops/s
# Warmup Iteration   7: 1634692.804 ops/s
# Warmup Iteration   8: 1613127.526 ops/s
# Warmup Iteration   9: 1575057.770 ops/s
# Warmup Iteration  10: 1597384.118 ops/s
# Warmup Iteration  11: 1585167.670 ops/s
# Warmup Iteration  12: 1550417.466 ops/s
# Warmup Iteration  13: 1560904.396 ops/s
# Warmup Iteration  14: 1561467.986 ops/s
# Warmup Iteration  15: 1535771.002 ops/s
# Warmup Iteration  16: 1613289.488 ops/s
# Warmup Iteration  17: 1672559.599 ops/s
# Warmup Iteration  18: 1536106.581 ops/s
# Warmup Iteration  19: 1592839.232 ops/s
# Warmup Iteration  20: 1637539.829 ops/s
# Warmup Iteration  21: 1559446.173 ops/s
# Warmup Iteration  22: 1586437.602 ops/s
# Warmup Iteration  23: 1597733.095 ops/s
# Warmup Iteration  24: 1542975.137 ops/s
# Warmup Iteration  25: 1625588.929 ops/s
# Warmup Iteration  26: 1583004.068 ops/s
# Warmup Iteration  27: 1572453.989 ops/s
# Warmup Iteration  28: 1566092.564 ops/s
# Warmup Iteration  29: 1585853.467 ops/s
# Warmup Iteration  30: 1636607.300 ops/s
Iteration   1: 1526646.889 ops/s
Iteration   2: 1541975.136 ops/s
Iteration   3: 1656266.158 ops/s
Iteration   4: 1485014.428 ops/s
Iteration   5: 1624667.149 ops/s
Iteration   6: 1583613.359 ops/s
Iteration   7: 1543374.964 ops/s
Iteration   8: 1599293.930 ops/s
Iteration   9: 1520807.263 ops/s
Iteration  10: 1560961.706 ops/s
Iteration  11: 1629139.460 ops/s
Iteration  12: 1553150.805 ops/s
Iteration  13: 1600464.463 ops/s
Iteration  14: 1533188.928 ops/s
Iteration  15: 1548171.366 ops/s
Iteration  16: 1590688.679 ops/s
Iteration  17: 1567830.902 ops/s
Iteration  18: 1569614.967 ops/s
Iteration  19: 1631009.940 ops/s
Iteration  20: 1556234.699 ops/s
Iteration  21: 1605583.141 ops/s
Iteration  22: 1658180.643 ops/s
Iteration  23: 1556550.591 ops/s
Iteration  24: 1622197.692 ops/s
Iteration  25: 1509432.207 ops/s
Iteration  26: 1673069.487 ops/s
Iteration  27: 1641088.531 ops/s
Iteration  28: 1521923.637 ops/s
Iteration  29: 1631366.060 ops/s
Iteration  30: 1534227.459 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedMoreWork":
  1579191.155 ±(99.9%) 33191.306 ops/s [Average]
  (min, avg, max) = (1485014.428, 1579191.155, 1673069.487), stdev = 49679.188
  CI (99.9%): [1545999.849, 1612382.460] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_backFusedMoreWork  thrpt   30  1579191.155 ± 33191.306  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticastTest._Benchmark.benchmark_dontDropItemsWhenNoReadyConsumers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticastTest._Benchmark.benchmark_dontDropItemsWhenNoReadyConsumers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 457345.016 ops/s
# Warmup Iteration   2: 1588405.307 ops/s
# Warmup Iteration   3: 2055209.854 ops/s
# Warmup Iteration   4: 2176599.025 ops/s
# Warmup Iteration   5: 2234721.301 ops/s
# Warmup Iteration   6: 2290391.286 ops/s
# Warmup Iteration   7: 2314624.177 ops/s
# Warmup Iteration   8: 2204568.952 ops/s
# Warmup Iteration   9: 2260741.307 ops/s
# Warmup Iteration  10: 2148064.511 ops/s
# Warmup Iteration  11: 2253638.375 ops/s
# Warmup Iteration  12: 2131734.865 ops/s
# Warmup Iteration  13: 2208676.442 ops/s
# Warmup Iteration  14: 2270778.525 ops/s
# Warmup Iteration  15: 2231901.487 ops/s
# Warmup Iteration  16: 2257890.201 ops/s
# Warmup Iteration  17: 2298381.000 ops/s
# Warmup Iteration  18: 2220599.116 ops/s
# Warmup Iteration  19: 2291482.023 ops/s
# Warmup Iteration  20: 2188571.765 ops/s
# Warmup Iteration  21: 2206203.452 ops/s
# Warmup Iteration  22: 2182081.330 ops/s
# Warmup Iteration  23: 2276348.778 ops/s
# Warmup Iteration  24: 2304192.549 ops/s
# Warmup Iteration  25: 2181896.545 ops/s
# Warmup Iteration  26: 2295596.675 ops/s
# Warmup Iteration  27: 2208307.093 ops/s
# Warmup Iteration  28: 2194807.490 ops/s
# Warmup Iteration  29: 2162353.999 ops/s
# Warmup Iteration  30: 2303406.610 ops/s
Iteration   1: 2292428.750 ops/s
Iteration   2: 2182654.074 ops/s
Iteration   3: 2288732.939 ops/s
Iteration   4: 2206375.090 ops/s
Iteration   5: 2245366.281 ops/s
Iteration   6: 2185388.428 ops/s
Iteration   7: 2292022.961 ops/s
Iteration   8: 2136772.736 ops/s
Iteration   9: 2276720.171 ops/s
Iteration  10: 2347810.910 ops/s
Iteration  11: 2128378.115 ops/s
Iteration  12: 2186148.264 ops/s
Iteration  13: 2359157.518 ops/s
Iteration  14: 2140380.687 ops/s
Iteration  15: 2248882.333 ops/s
Iteration  16: 2282930.317 ops/s
Iteration  17: 2206802.820 ops/s
Iteration  18: 2312905.747 ops/s
Iteration  19: 2294648.175 ops/s
Iteration  20: 2205639.455 ops/s
Iteration  21: 2343781.227 ops/s
Iteration  22: 2296271.352 ops/s
Iteration  23: 2182381.390 ops/s
Iteration  24: 2262629.053 ops/s
Iteration  25: 2173888.857 ops/s
Iteration  26: 2273837.892 ops/s
Iteration  27: 2249664.116 ops/s
Iteration  28: 2193783.758 ops/s
Iteration  29: 1891389.950 ops/s
Iteration  30: 2264767.179 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishMulticastTest._Benchmark.benchmark_dontDropItemsWhenNoReadyConsumers":
  2231751.352 ±(99.9%) 60333.494 ops/s [Average]
  (min, avg, max) = (1891389.950, 2231751.352, 2359157.518), stdev = 90304.340
  CI (99.9%): [2171417.858, 2292084.845] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
FlowablePublishMulticastTest._Benchmark.benchmark_dontDropItemsWhenNoReadyConsumers  thrpt   30  2231751.352 ± 60333.494  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45902.048 ops/s
# Warmup Iteration   2: 127962.991 ops/s
# Warmup Iteration   3: 319733.493 ops/s
# Warmup Iteration   4: 452077.012 ops/s
# Warmup Iteration   5: 470819.870 ops/s
# Warmup Iteration   6: 456167.210 ops/s
# Warmup Iteration   7: 439006.660 ops/s
# Warmup Iteration   8: 478255.901 ops/s
# Warmup Iteration   9: 453433.911 ops/s
# Warmup Iteration  10: 447754.964 ops/s
# Warmup Iteration  11: 453488.412 ops/s
# Warmup Iteration  12: 462578.219 ops/s
# Warmup Iteration  13: 453312.454 ops/s
# Warmup Iteration  14: 468747.503 ops/s
# Warmup Iteration  15: 437007.001 ops/s
# Warmup Iteration  16: 467391.755 ops/s
# Warmup Iteration  17: 510153.745 ops/s
# Warmup Iteration  18: 507786.322 ops/s
# Warmup Iteration  19: 484877.558 ops/s
# Warmup Iteration  20: 497590.974 ops/s
# Warmup Iteration  21: 497094.247 ops/s
# Warmup Iteration  22: 463234.101 ops/s
# Warmup Iteration  23: 503747.242 ops/s
# Warmup Iteration  24: 489646.888 ops/s
# Warmup Iteration  25: 466332.597 ops/s
# Warmup Iteration  26: 509518.312 ops/s
# Warmup Iteration  27: 477741.733 ops/s
# Warmup Iteration  28: 513340.631 ops/s
# Warmup Iteration  29: 472113.247 ops/s
# Warmup Iteration  30: 498230.384 ops/s
Iteration   1: 480155.042 ops/s
Iteration   2: 497604.794 ops/s
Iteration   3: 497626.971 ops/s
Iteration   4: 476712.001 ops/s
Iteration   5: 490728.001 ops/s
Iteration   6: 486607.470 ops/s
Iteration   7: 490197.095 ops/s
Iteration   8: 514739.825 ops/s
Iteration   9: 503466.787 ops/s
Iteration  10: 475138.281 ops/s
Iteration  11: 500849.897 ops/s
Iteration  12: 483744.674 ops/s
Iteration  13: 501233.603 ops/s
Iteration  14: 498141.342 ops/s
Iteration  15: 501661.146 ops/s
Iteration  16: 473783.088 ops/s
Iteration  17: 501131.460 ops/s
Iteration  18: 480105.964 ops/s
Iteration  19: 498928.989 ops/s
Iteration  20: 484147.634 ops/s
Iteration  21: 476280.395 ops/s
Iteration  22: 497334.127 ops/s
Iteration  23: 474491.950 ops/s
Iteration  24: 482549.321 ops/s
Iteration  25: 485195.110 ops/s
Iteration  26: 486429.618 ops/s
Iteration  27: 487088.607 ops/s
Iteration  28: 479600.474 ops/s
Iteration  29: 486285.805 ops/s
Iteration  30: 495659.525 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_error":
  489587.300 ±(99.9%) 7052.266 ops/s [Average]
  (min, avg, max) = (473783.088, 489587.300, 514739.825), stdev = 10555.501
  CI (99.9%): [482535.034, 496639.566] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_error  thrpt   30  489587.300 ± 7052.266  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_publishFunctionCancelOuterAfterOneInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_publishFunctionCancelOuterAfterOneInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 145638.629 ops/s
# Warmup Iteration   2: 415718.783 ops/s
# Warmup Iteration   3: 430266.378 ops/s
# Warmup Iteration   4: 1077400.598 ops/s
# Warmup Iteration   5: 1364681.329 ops/s
# Warmup Iteration   6: 1332978.739 ops/s
# Warmup Iteration   7: 1312429.506 ops/s
# Warmup Iteration   8: 1369996.783 ops/s
# Warmup Iteration   9: 1367888.304 ops/s
# Warmup Iteration  10: 1284271.962 ops/s
# Warmup Iteration  11: 1306923.918 ops/s
# Warmup Iteration  12: 1373646.630 ops/s
# Warmup Iteration  13: 1304105.292 ops/s
# Warmup Iteration  14: 1330083.164 ops/s
# Warmup Iteration  15: 1406008.681 ops/s
# Warmup Iteration  16: 1301495.053 ops/s
# Warmup Iteration  17: 1336932.250 ops/s
# Warmup Iteration  18: 1320659.716 ops/s
# Warmup Iteration  19: 1308681.285 ops/s
# Warmup Iteration  20: 1344932.788 ops/s
# Warmup Iteration  21: 1309559.143 ops/s
# Warmup Iteration  22: 1305784.053 ops/s
# Warmup Iteration  23: 1355657.613 ops/s
# Warmup Iteration  24: 1307470.918 ops/s
# Warmup Iteration  25: 1304012.277 ops/s
# Warmup Iteration  26: 1345306.144 ops/s
# Warmup Iteration  27: 1294246.164 ops/s
# Warmup Iteration  28: 1285044.712 ops/s
# Warmup Iteration  29: 1328693.189 ops/s
# Warmup Iteration  30: 1376953.977 ops/s
Iteration   1: 1283047.947 ops/s
Iteration   2: 1309287.950 ops/s
Iteration   3: 1363629.871 ops/s
Iteration   4: 1306652.646 ops/s
Iteration   5: 1342708.757 ops/s
Iteration   6: 1332109.356 ops/s
Iteration   7: 1336759.968 ops/s
Iteration   8: 1293384.641 ops/s
Iteration   9: 1311555.054 ops/s
Iteration  10: 1343237.625 ops/s
Iteration  11: 1287333.095 ops/s
Iteration  12: 1327368.716 ops/s
Iteration  13: 1285350.779 ops/s
Iteration  14: 1302615.210 ops/s
Iteration  15: 1286405.167 ops/s
Iteration  16: 1400084.637 ops/s
Iteration  17: 1320180.545 ops/s
Iteration  18: 1364186.579 ops/s
Iteration  19: 1304478.678 ops/s
Iteration  20: 1341689.960 ops/s
Iteration  21: 1331518.989 ops/s
Iteration  22: 1331364.885 ops/s
Iteration  23: 1164333.575 ops/s
Iteration  24: 1151548.014 ops/s
Iteration  25: 1362826.438 ops/s
Iteration  26: 1312774.392 ops/s
Iteration  27: 1349987.786 ops/s
Iteration  28: 1308130.902 ops/s
Iteration  29: 1342822.460 ops/s
Iteration  30: 1344576.840 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_publishFunctionCancelOuterAfterOneInner":
  1314731.715 ±(99.9%) 33918.621 ops/s [Average]
  (min, avg, max) = (1151548.014, 1314731.715, 1400084.637), stdev = 50767.799
  CI (99.9%): [1280813.095, 1348650.336] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_publishFunctionCancelOuterAfterOneInner  thrpt   30  1314731.715 ± 33918.621  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_publishFunctionCancelOuterAfterOneInnerBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_publishFunctionCancelOuterAfterOneInnerBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 137427.487 ops/s
# Warmup Iteration   2: 296433.819 ops/s
# Warmup Iteration   3: 424586.015 ops/s
# Warmup Iteration   4: 960768.966 ops/s
# Warmup Iteration   5: 1292927.850 ops/s
# Warmup Iteration   6: 1316181.784 ops/s
# Warmup Iteration   7: 1360048.983 ops/s
# Warmup Iteration   8: 1303040.285 ops/s
# Warmup Iteration   9: 1311978.552 ops/s
# Warmup Iteration  10: 1381226.234 ops/s
# Warmup Iteration  11: 1269586.271 ops/s
# Warmup Iteration  12: 1398295.396 ops/s
# Warmup Iteration  13: 1265948.194 ops/s
# Warmup Iteration  14: 1374843.965 ops/s
# Warmup Iteration  15: 1288629.181 ops/s
# Warmup Iteration  16: 1313547.876 ops/s
# Warmup Iteration  17: 1372026.950 ops/s
# Warmup Iteration  18: 1288635.455 ops/s
# Warmup Iteration  19: 1344285.036 ops/s
# Warmup Iteration  20: 1304584.696 ops/s
# Warmup Iteration  21: 1322589.384 ops/s
# Warmup Iteration  22: 1311817.447 ops/s
# Warmup Iteration  23: 1297760.448 ops/s
# Warmup Iteration  24: 1347940.262 ops/s
# Warmup Iteration  25: 1296715.560 ops/s
# Warmup Iteration  26: 1303149.353 ops/s
# Warmup Iteration  27: 1307838.488 ops/s
# Warmup Iteration  28: 1301938.975 ops/s
# Warmup Iteration  29: 1353757.402 ops/s
# Warmup Iteration  30: 1324205.260 ops/s
Iteration   1: 1278294.359 ops/s
Iteration   2: 1304181.497 ops/s
Iteration   3: 1364504.516 ops/s
Iteration   4: 1303134.563 ops/s
Iteration   5: 1340941.975 ops/s
Iteration   6: 1277210.204 ops/s
Iteration   7: 1336167.855 ops/s
Iteration   8: 1317151.453 ops/s
Iteration   9: 1292480.092 ops/s
Iteration  10: 1309253.531 ops/s
Iteration  11: 1280338.302 ops/s
Iteration  12: 1302502.122 ops/s
Iteration  13: 1337994.509 ops/s
Iteration  14: 1270416.763 ops/s
Iteration  15: 1344846.334 ops/s
Iteration  16: 1306762.890 ops/s
Iteration  17: 1314509.117 ops/s
Iteration  18: 1341249.912 ops/s
Iteration  19: 1278260.469 ops/s
Iteration  20: 1359144.847 ops/s
Iteration  21: 1296858.421 ops/s
Iteration  22: 1342608.816 ops/s
Iteration  23: 1276783.530 ops/s
Iteration  24: 1307548.629 ops/s
Iteration  25: 1354665.918 ops/s
Iteration  26: 1302355.745 ops/s
Iteration  27: 1354200.195 ops/s
Iteration  28: 1322770.811 ops/s
Iteration  29: 1324834.745 ops/s
Iteration  30: 1295968.518 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_publishFunctionCancelOuterAfterOneInnerBackpressured":
  1314598.021 ±(99.9%) 18552.691 ops/s [Average]
  (min, avg, max) = (1270416.763, 1314598.021, 1364504.516), stdev = 27768.796
  CI (99.9%): [1296045.330, 1333150.712] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_publishFunctionCancelOuterAfterOneInnerBackpressured  thrpt   30  1314598.021 ± 18552.691  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_takeCompletesUnsafe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_takeCompletesUnsafe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 127494.098 ops/s
# Warmup Iteration   2: 800945.286 ops/s
# Warmup Iteration   3: 1451098.486 ops/s
# Warmup Iteration   4: 1367413.676 ops/s
# Warmup Iteration   5: 1224949.960 ops/s
# Warmup Iteration   6: 1328202.877 ops/s
# Warmup Iteration   7: 1421888.108 ops/s
# Warmup Iteration   8: 1383679.077 ops/s
# Warmup Iteration   9: 1426614.798 ops/s
# Warmup Iteration  10: 1459255.740 ops/s
# Warmup Iteration  11: 1376449.222 ops/s
# Warmup Iteration  12: 1442312.698 ops/s
# Warmup Iteration  13: 1379925.638 ops/s
# Warmup Iteration  14: 1421211.254 ops/s
# Warmup Iteration  15: 1373430.923 ops/s
# Warmup Iteration  16: 1438160.824 ops/s
# Warmup Iteration  17: 1504441.113 ops/s
# Warmup Iteration  18: 1465686.972 ops/s
# Warmup Iteration  19: 1370313.096 ops/s
# Warmup Iteration  20: 1453451.949 ops/s
# Warmup Iteration  21: 1434963.066 ops/s
# Warmup Iteration  22: 1379369.041 ops/s
# Warmup Iteration  23: 1417718.228 ops/s
# Warmup Iteration  24: 1427173.090 ops/s
# Warmup Iteration  25: 1398872.280 ops/s
# Warmup Iteration  26: 1464889.376 ops/s
# Warmup Iteration  27: 1389059.106 ops/s
# Warmup Iteration  28: 1445153.856 ops/s
# Warmup Iteration  29: 1371404.693 ops/s
# Warmup Iteration  30: 1411471.994 ops/s
Iteration   1: 1428426.186 ops/s
Iteration   2: 1412985.447 ops/s
Iteration   3: 1357538.646 ops/s
Iteration   4: 1472418.125 ops/s
Iteration   5: 1371915.073 ops/s
Iteration   6: 1430273.578 ops/s
Iteration   7: 1386156.024 ops/s
Iteration   8: 1405317.447 ops/s
Iteration   9: 1458451.841 ops/s
Iteration  10: 1349574.138 ops/s
Iteration  11: 1425936.206 ops/s
Iteration  12: 1387204.997 ops/s
Iteration  13: 1436758.530 ops/s
Iteration  14: 1405043.532 ops/s
Iteration  15: 1378968.413 ops/s
Iteration  16: 1492564.509 ops/s
Iteration  17: 1385529.699 ops/s
Iteration  18: 1155859.378 ops/s
Iteration  19: 1451333.575 ops/s
Iteration  20: 1414150.212 ops/s
Iteration  21: 1402451.912 ops/s
Iteration  22: 1477623.828 ops/s
Iteration  23: 1418160.351 ops/s
Iteration  24: 1457180.816 ops/s
Iteration  25: 1436486.296 ops/s
Iteration  26: 1391273.918 ops/s
Iteration  27: 1415632.716 ops/s
Iteration  28: 1435067.931 ops/s
Iteration  29: 1440836.319 ops/s
Iteration  30: 1416931.249 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_takeCompletesUnsafe":
  1409935.030 ±(99.9%) 39484.618 ops/s [Average]
  (min, avg, max) = (1155859.378, 1409935.030, 1492564.509), stdev = 59098.721
  CI (99.9%): [1370450.412, 1449419.647] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_takeCompletesUnsafe  thrpt   30  1409935.030 ± 39484.618  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_takeCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_takeCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100546.066 ops/s
# Warmup Iteration   2: 373128.427 ops/s
# Warmup Iteration   3: 957388.228 ops/s
# Warmup Iteration   4: 1257688.404 ops/s
# Warmup Iteration   5: 1403964.100 ops/s
# Warmup Iteration   6: 1440450.661 ops/s
# Warmup Iteration   7: 1466193.715 ops/s
# Warmup Iteration   8: 1418599.282 ops/s
# Warmup Iteration   9: 1394415.353 ops/s
# Warmup Iteration  10: 1459989.224 ops/s
# Warmup Iteration  11: 1381743.182 ops/s
# Warmup Iteration  12: 1428294.043 ops/s
# Warmup Iteration  13: 1360730.282 ops/s
# Warmup Iteration  14: 1447980.947 ops/s
# Warmup Iteration  15: 1379563.197 ops/s
# Warmup Iteration  16: 1449550.028 ops/s
# Warmup Iteration  17: 1382796.121 ops/s
# Warmup Iteration  18: 1442730.423 ops/s
# Warmup Iteration  19: 1417465.313 ops/s
# Warmup Iteration  20: 1378600.006 ops/s
# Warmup Iteration  21: 1447930.252 ops/s
# Warmup Iteration  22: 1457731.432 ops/s
# Warmup Iteration  23: 1390896.418 ops/s
# Warmup Iteration  24: 1382663.959 ops/s
# Warmup Iteration  25: 1467816.959 ops/s
# Warmup Iteration  26: 1435618.058 ops/s
# Warmup Iteration  27: 1413380.807 ops/s
# Warmup Iteration  28: 1474673.809 ops/s
# Warmup Iteration  29: 1364879.734 ops/s
# Warmup Iteration  30: 1458453.560 ops/s
Iteration   1: 1479844.266 ops/s
Iteration   2: 1452813.398 ops/s
Iteration   3: 1409941.758 ops/s
Iteration   4: 1411061.582 ops/s
Iteration   5: 1480618.074 ops/s
Iteration   6: 1367934.912 ops/s
Iteration   7: 1494387.161 ops/s
Iteration   8: 1404683.451 ops/s
Iteration   9: 1477514.982 ops/s
Iteration  10: 1379116.145 ops/s
Iteration  11: 1452566.095 ops/s
Iteration  12: 1451136.733 ops/s
Iteration  13: 1385250.175 ops/s
Iteration  14: 1477976.089 ops/s
Iteration  15: 1466345.349 ops/s
Iteration  16: 1386249.394 ops/s
Iteration  17: 1430933.554 ops/s
Iteration  18: 1429322.409 ops/s
Iteration  19: 1397555.912 ops/s
Iteration  20: 1476269.261 ops/s
Iteration  21: 1401410.836 ops/s
Iteration  22: 1445999.926 ops/s
Iteration  23: 1457312.177 ops/s
Iteration  24: 1402714.559 ops/s
Iteration  25: 1452303.567 ops/s
Iteration  26: 1415012.109 ops/s
Iteration  27: 1435987.676 ops/s
Iteration  28: 1398181.602 ops/s
Iteration  29: 1433567.160 ops/s
Iteration  30: 1441277.417 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_takeCompletes":
  1433176.258 ±(99.9%) 23433.319 ops/s [Average]
  (min, avg, max) = (1367934.912, 1433176.258, 1494387.161), stdev = 35073.891
  CI (99.9%): [1409742.939, 1456609.576] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_takeCompletes  thrpt   30  1433176.258 ± 23433.319  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_completeCancelRaceNoRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_completeCancelRaceNoRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 187468.002 ops/s
# Warmup Iteration   2: 448262.844 ops/s
# Warmup Iteration   3: 1299475.767 ops/s
# Warmup Iteration   4: 1366259.642 ops/s
# Warmup Iteration   5: 1473769.561 ops/s
# Warmup Iteration   6: 1384841.302 ops/s
# Warmup Iteration   7: 1364388.997 ops/s
# Warmup Iteration   8: 1463043.067 ops/s
# Warmup Iteration   9: 1391995.808 ops/s
# Warmup Iteration  10: 1367408.310 ops/s
# Warmup Iteration  11: 1393563.719 ops/s
# Warmup Iteration  12: 1227333.095 ops/s
# Warmup Iteration  13: 1403341.866 ops/s
# Warmup Iteration  14: 1429351.639 ops/s
# Warmup Iteration  15: 1391989.633 ops/s
# Warmup Iteration  16: 1452872.698 ops/s
# Warmup Iteration  17: 1431826.511 ops/s
# Warmup Iteration  18: 1368770.792 ops/s
# Warmup Iteration  19: 1454761.652 ops/s
# Warmup Iteration  20: 1388536.482 ops/s
# Warmup Iteration  21: 1415998.666 ops/s
# Warmup Iteration  22: 1462005.947 ops/s
# Warmup Iteration  23: 1375477.286 ops/s
# Warmup Iteration  24: 1372372.687 ops/s
# Warmup Iteration  25: 1450917.843 ops/s
# Warmup Iteration  26: 1459758.026 ops/s
# Warmup Iteration  27: 1352302.450 ops/s
# Warmup Iteration  28: 1439234.542 ops/s
# Warmup Iteration  29: 1397052.884 ops/s
# Warmup Iteration  30: 1408366.744 ops/s
Iteration   1: 1451723.339 ops/s
Iteration   2: 1385238.428 ops/s
Iteration   3: 1483541.508 ops/s
Iteration   4: 1377672.670 ops/s
Iteration   5: 1470824.474 ops/s
Iteration   6: 1405190.252 ops/s
Iteration   7: 1414922.158 ops/s
Iteration   8: 1471602.483 ops/s
Iteration   9: 1406412.347 ops/s
Iteration  10: 1443633.934 ops/s
Iteration  11: 1429166.981 ops/s
Iteration  12: 1445161.284 ops/s
Iteration  13: 1217050.628 ops/s
Iteration  14: 1430040.626 ops/s
Iteration  15: 1377617.361 ops/s
Iteration  16: 1466273.298 ops/s
Iteration  17: 1430323.678 ops/s
Iteration  18: 1426717.044 ops/s
Iteration  19: 1453774.526 ops/s
Iteration  20: 1419514.547 ops/s
Iteration  21: 1446197.372 ops/s
Iteration  22: 1413490.258 ops/s
Iteration  23: 1455813.444 ops/s
Iteration  24: 1394718.595 ops/s
Iteration  25: 1424688.544 ops/s
Iteration  26: 1455184.058 ops/s
Iteration  27: 1399905.565 ops/s
Iteration  28: 1435244.821 ops/s
Iteration  29: 1402493.091 ops/s
Iteration  30: 1404313.126 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_completeCancelRaceNoRequest":
  1421281.681 ±(99.9%) 32008.997 ops/s [Average]
  (min, avg, max) = (1217050.628, 1421281.681, 1483541.508), stdev = 47909.563
  CI (99.9%): [1389272.685, 1453290.678] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_completeCancelRaceNoRequest  thrpt   30  1421281.681 ± 32008.997  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_connectWithNoSubscriber$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_connectWithNoSubscriber

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78946.033 ops/s
# Warmup Iteration   2: 245604.426 ops/s
# Warmup Iteration   3: 462291.783 ops/s
# Warmup Iteration   4: 585405.752 ops/s
# Warmup Iteration   5: 731409.904 ops/s
# Warmup Iteration   6: 695109.829 ops/s
# Warmup Iteration   7: 706913.892 ops/s
# Warmup Iteration   8: 723018.254 ops/s
# Warmup Iteration   9: 690560.776 ops/s
# Warmup Iteration  10: 701693.580 ops/s
# Warmup Iteration  11: 707026.869 ops/s
# Warmup Iteration  12: 696685.956 ops/s
# Warmup Iteration  13: 713905.395 ops/s
# Warmup Iteration  14: 686582.468 ops/s
# Warmup Iteration  15: 710371.181 ops/s
# Warmup Iteration  16: 700408.558 ops/s
# Warmup Iteration  17: 711515.015 ops/s
# Warmup Iteration  18: 680225.316 ops/s
# Warmup Iteration  19: 711072.896 ops/s
# Warmup Iteration  20: 692478.982 ops/s
# Warmup Iteration  21: 707100.893 ops/s
# Warmup Iteration  22: 679422.991 ops/s
# Warmup Iteration  23: 707442.596 ops/s
# Warmup Iteration  24: 719022.044 ops/s
# Warmup Iteration  25: 688648.326 ops/s
# Warmup Iteration  26: 716241.504 ops/s
# Warmup Iteration  27: 687132.017 ops/s
# Warmup Iteration  28: 696923.419 ops/s
# Warmup Iteration  29: 726644.213 ops/s
# Warmup Iteration  30: 677237.504 ops/s
Iteration   1: 728268.976 ops/s
Iteration   2: 671374.690 ops/s
Iteration   3: 710883.104 ops/s
Iteration   4: 673818.265 ops/s
Iteration   5: 692857.856 ops/s
Iteration   6: 710728.233 ops/s
Iteration   7: 704035.677 ops/s
Iteration   8: 717069.166 ops/s
Iteration   9: 690791.056 ops/s
Iteration  10: 745901.969 ops/s
Iteration  11: 690164.094 ops/s
Iteration  12: 729374.142 ops/s
Iteration  13: 708336.661 ops/s
Iteration  14: 696296.697 ops/s
Iteration  15: 685708.097 ops/s
Iteration  16: 751077.959 ops/s
Iteration  17: 731564.923 ops/s
Iteration  18: 702747.266 ops/s
Iteration  19: 724425.447 ops/s
Iteration  20: 704024.024 ops/s
Iteration  21: 713500.264 ops/s
Iteration  22: 708691.368 ops/s
Iteration  23: 708724.253 ops/s
Iteration  24: 685955.488 ops/s
Iteration  25: 687344.588 ops/s
Iteration  26: 745537.083 ops/s
Iteration  27: 680086.378 ops/s
Iteration  28: 701336.548 ops/s
Iteration  29: 698250.524 ops/s
Iteration  30: 701478.371 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_connectWithNoSubscriber":
  706678.439 ±(99.9%) 13810.439 ops/s [Average]
  (min, avg, max) = (671374.690, 706678.439, 751077.959), stdev = 20670.817
  CI (99.9%): [692868.000, 720488.878] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_connectWithNoSubscriber  thrpt   30  706678.439 ± 13810.439  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_refCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_refCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14255.274 ops/s
# Warmup Iteration   2: 99442.251 ops/s
# Warmup Iteration   3: 212680.932 ops/s
# Warmup Iteration   4: 234420.623 ops/s
# Warmup Iteration   5: 243818.275 ops/s
# Warmup Iteration   6: 225678.394 ops/s
# Warmup Iteration   7: 222947.747 ops/s
# Warmup Iteration   8: 229026.486 ops/s
# Warmup Iteration   9: 233133.912 ops/s
# Warmup Iteration  10: 253238.584 ops/s
# Warmup Iteration  11: 231558.065 ops/s
# Warmup Iteration  12: 239931.804 ops/s
# Warmup Iteration  13: 250043.594 ops/s
# Warmup Iteration  14: 242423.883 ops/s
# Warmup Iteration  15: 251045.022 ops/s
# Warmup Iteration  16: 232107.368 ops/s
# Warmup Iteration  17: 236870.652 ops/s
# Warmup Iteration  18: 250589.473 ops/s
# Warmup Iteration  19: 231763.826 ops/s
# Warmup Iteration  20: 253829.155 ops/s
# Warmup Iteration  21: 244011.999 ops/s
# Warmup Iteration  22: 233877.362 ops/s
# Warmup Iteration  23: 247614.518 ops/s
# Warmup Iteration  24: 246076.706 ops/s
# Warmup Iteration  25: 232372.931 ops/s
# Warmup Iteration  26: 248812.948 ops/s
# Warmup Iteration  27: 253409.947 ops/s
# Warmup Iteration  28: 234601.190 ops/s
# Warmup Iteration  29: 250198.907 ops/s
# Warmup Iteration  30: 240523.828 ops/s
Iteration   1: 245962.356 ops/s
Iteration   2: 250201.573 ops/s
Iteration   3: 237978.031 ops/s
Iteration   4: 249265.293 ops/s
Iteration   5: 248495.895 ops/s
Iteration   6: 240830.840 ops/s
Iteration   7: 234256.436 ops/s
Iteration   8: 219929.826 ops/s
Iteration   9: 235334.235 ops/s
Iteration  10: 250086.505 ops/s
Iteration  11: 239685.956 ops/s
Iteration  12: 246134.148 ops/s
Iteration  13: 241625.676 ops/s
Iteration  14: 238661.701 ops/s
Iteration  15: 243839.832 ops/s
Iteration  16: 240259.707 ops/s
Iteration  17: 243359.954 ops/s
Iteration  18: 244062.485 ops/s
Iteration  19: 240324.279 ops/s
Iteration  20: 248507.642 ops/s
Iteration  21: 239318.535 ops/s
Iteration  22: 248038.630 ops/s
Iteration  23: 251838.112 ops/s
Iteration  24: 252909.924 ops/s
Iteration  25: 235344.025 ops/s
Iteration  26: 239719.846 ops/s
Iteration  27: 237394.050 ops/s
Iteration  28: 232956.383 ops/s
Iteration  29: 249596.563 ops/s
Iteration  30: 235372.150 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_refCount":
  242043.020 ±(99.9%) 4736.195 ops/s [Average]
  (min, avg, max) = (219929.826, 242043.020, 252909.924), stdev = 7088.914
  CI (99.9%): [237306.825, 246779.214] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
FlowableRefCountTest._Benchmark.benchmark_refCount  thrpt   30  242043.020 ± 4736.195  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_connectDisconnectConnectAndSubjectState$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_connectDisconnectConnectAndSubjectState

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32587.551 ops/s
# Warmup Iteration   2: 120630.883 ops/s
# Warmup Iteration   3: 284380.062 ops/s
# Warmup Iteration   4: 361932.260 ops/s
# Warmup Iteration   5: 419123.164 ops/s
# Warmup Iteration   6: 406943.464 ops/s
# Warmup Iteration   7: 428164.376 ops/s
# Warmup Iteration   8: 404729.063 ops/s
# Warmup Iteration   9: 411171.764 ops/s
# Warmup Iteration  10: 411710.452 ops/s
# Warmup Iteration  11: 391407.160 ops/s
# Warmup Iteration  12: 390855.591 ops/s
# Warmup Iteration  13: 428538.813 ops/s
# Warmup Iteration  14: 412522.784 ops/s
# Warmup Iteration  15: 427229.800 ops/s
# Warmup Iteration  16: 398253.066 ops/s
# Warmup Iteration  17: 415571.652 ops/s
# Warmup Iteration  18: 390592.158 ops/s
# Warmup Iteration  19: 421096.728 ops/s
# Warmup Iteration  20: 401391.151 ops/s
# Warmup Iteration  21: 408729.158 ops/s
# Warmup Iteration  22: 421110.732 ops/s
# Warmup Iteration  23: 428284.562 ops/s
# Warmup Iteration  24: 379365.852 ops/s
# Warmup Iteration  25: 415109.934 ops/s
# Warmup Iteration  26: 392755.644 ops/s
# Warmup Iteration  27: 359835.667 ops/s
# Warmup Iteration  28: 431912.144 ops/s
# Warmup Iteration  29: 405861.779 ops/s
# Warmup Iteration  30: 418419.648 ops/s
Iteration   1: 421880.871 ops/s
Iteration   2: 413681.185 ops/s
Iteration   3: 410278.889 ops/s
Iteration   4: 418069.315 ops/s
Iteration   5: 404043.045 ops/s
Iteration   6: 422483.144 ops/s
Iteration   7: 397685.453 ops/s
Iteration   8: 427572.504 ops/s
Iteration   9: 418388.966 ops/s
Iteration  10: 406865.862 ops/s
Iteration  11: 427353.575 ops/s
Iteration  12: 404268.803 ops/s
Iteration  13: 425002.916 ops/s
Iteration  14: 409399.967 ops/s
Iteration  15: 410574.888 ops/s
Iteration  16: 417170.613 ops/s
Iteration  17: 423189.046 ops/s
Iteration  18: 416057.893 ops/s
Iteration  19: 429934.163 ops/s
Iteration  20: 405517.037 ops/s
Iteration  21: 433276.416 ops/s
Iteration  22: 424973.552 ops/s
Iteration  23: 412219.021 ops/s
Iteration  24: 429938.808 ops/s
Iteration  25: 399371.398 ops/s
Iteration  26: 421651.597 ops/s
Iteration  27: 401799.998 ops/s
Iteration  28: 420604.994 ops/s
Iteration  29: 422406.733 ops/s
Iteration  30: 405155.946 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_connectDisconnectConnectAndSubjectState":
  416027.220 ±(99.9%) 6653.007 ops/s [Average]
  (min, avg, max) = (397685.453, 416027.220, 433276.416), stdev = 9957.909
  CI (99.9%): [409374.213, 422680.227] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
FlowableRefCountTest._Benchmark.benchmark_connectDisconnectConnectAndSubjectState  thrpt   30  416027.220 ± 6653.007  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelledCloseCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelledCloseCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24833.226 ops/s
# Warmup Iteration   2: 120205.980 ops/s
# Warmup Iteration   3: 184878.039 ops/s
# Warmup Iteration   4: 202721.237 ops/s
# Warmup Iteration   5: 203468.722 ops/s
# Warmup Iteration   6: 206636.619 ops/s
# Warmup Iteration   7: 191654.760 ops/s
# Warmup Iteration   8: 207003.781 ops/s
# Warmup Iteration   9: 196022.316 ops/s
# Warmup Iteration  10: 201387.095 ops/s
# Warmup Iteration  11: 198502.757 ops/s
# Warmup Iteration  12: 196466.141 ops/s
# Warmup Iteration  13: 203605.432 ops/s
# Warmup Iteration  14: 208080.358 ops/s
# Warmup Iteration  15: 203106.277 ops/s
# Warmup Iteration  16: 208130.865 ops/s
# Warmup Iteration  17: 197734.360 ops/s
# Warmup Iteration  18: 204638.390 ops/s
# Warmup Iteration  19: 211440.910 ops/s
# Warmup Iteration  20: 200788.596 ops/s
# Warmup Iteration  21: 214788.733 ops/s
# Warmup Iteration  22: 204693.175 ops/s
# Warmup Iteration  23: 211668.674 ops/s
# Warmup Iteration  24: 207528.500 ops/s
# Warmup Iteration  25: 215913.574 ops/s
# Warmup Iteration  26: 203823.823 ops/s
# Warmup Iteration  27: 208293.292 ops/s
# Warmup Iteration  28: 209931.427 ops/s
# Warmup Iteration  29: 206377.905 ops/s
# Warmup Iteration  30: 211254.165 ops/s
Iteration   1: 203231.436 ops/s
Iteration   2: 183298.537 ops/s
Iteration   3: 204529.184 ops/s
Iteration   4: 209611.916 ops/s
Iteration   5: 208971.274 ops/s
Iteration   6: 203149.417 ops/s
Iteration   7: 205220.966 ops/s
Iteration   8: 206551.377 ops/s
Iteration   9: 205336.985 ops/s
Iteration  10: 206485.162 ops/s
Iteration  11: 219627.142 ops/s
Iteration  12: 213692.632 ops/s
Iteration  13: 203389.970 ops/s
Iteration  14: 211478.238 ops/s
Iteration  15: 210375.272 ops/s
Iteration  16: 214825.845 ops/s
Iteration  17: 205813.792 ops/s
Iteration  18: 218192.304 ops/s
Iteration  19: 208122.648 ops/s
Iteration  20: 211279.214 ops/s
Iteration  21: 207714.804 ops/s
Iteration  22: 211777.362 ops/s
Iteration  23: 210738.343 ops/s
Iteration  24: 211136.312 ops/s
Iteration  25: 214403.076 ops/s
Iteration  26: 207094.224 ops/s
Iteration  27: 223074.703 ops/s
Iteration  28: 217380.400 ops/s
Iteration  29: 211784.179 ops/s
Iteration  30: 207343.270 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelledCloseCrash":
  209187.666 ±(99.9%) 4683.394 ops/s [Average]
  (min, avg, max) = (183298.537, 209187.666, 223074.703), stdev = 7009.884
  CI (99.9%): [204504.272, 213871.060] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelledCloseCrash  thrpt   30  209187.666 ± 4683.394  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1756929.649 ops/s
# Warmup Iteration   2: 3684716.637 ops/s
# Warmup Iteration   3: 4546943.628 ops/s
# Warmup Iteration   4: 4373711.551 ops/s
# Warmup Iteration   5: 4576286.083 ops/s
# Warmup Iteration   6: 4416179.804 ops/s
# Warmup Iteration   7: 3782427.263 ops/s
# Warmup Iteration   8: 4374838.565 ops/s
# Warmup Iteration   9: 4368586.165 ops/s
# Warmup Iteration  10: 4523628.589 ops/s
# Warmup Iteration  11: 4354089.225 ops/s
# Warmup Iteration  12: 4661262.296 ops/s
# Warmup Iteration  13: 4271883.163 ops/s
# Warmup Iteration  14: 4215596.328 ops/s
# Warmup Iteration  15: 4537901.874 ops/s
# Warmup Iteration  16: 4371177.892 ops/s
# Warmup Iteration  17: 4361733.439 ops/s
# Warmup Iteration  18: 4634730.674 ops/s
# Warmup Iteration  19: 4231737.214 ops/s
# Warmup Iteration  20: 4561098.296 ops/s
# Warmup Iteration  21: 4203047.767 ops/s
# Warmup Iteration  22: 4213095.542 ops/s
# Warmup Iteration  23: 4518313.152 ops/s
# Warmup Iteration  24: 4333246.318 ops/s
# Warmup Iteration  25: 4613316.712 ops/s
# Warmup Iteration  26: 4490578.071 ops/s
# Warmup Iteration  27: 4456562.500 ops/s
# Warmup Iteration  28: 4595250.341 ops/s
# Warmup Iteration  29: 4461556.695 ops/s
# Warmup Iteration  30: 4624380.822 ops/s
Iteration   1: 4529220.184 ops/s
Iteration   2: 4627210.482 ops/s
Iteration   3: 4390597.191 ops/s
Iteration   4: 4605885.127 ops/s
Iteration   5: 4669728.851 ops/s
Iteration   6: 4566405.250 ops/s
Iteration   7: 4421108.523 ops/s
Iteration   8: 4584385.352 ops/s
Iteration   9: 4557782.021 ops/s
Iteration  10: 4711353.691 ops/s
Iteration  11: 4505110.418 ops/s
Iteration  12: 4433786.589 ops/s
Iteration  13: 4702867.680 ops/s
Iteration  14: 4510452.737 ops/s
Iteration  15: 4450762.333 ops/s
Iteration  16: 4621201.897 ops/s
Iteration  17: 4575757.859 ops/s
Iteration  18: 4483917.721 ops/s
Iteration  19: 4510209.385 ops/s
Iteration  20: 4566280.004 ops/s
Iteration  21: 4694333.480 ops/s
Iteration  22: 4503212.747 ops/s
Iteration  23: 4702554.114 ops/s
Iteration  24: 4472629.225 ops/s
Iteration  25: 4756006.437 ops/s
Iteration  26: 4452004.032 ops/s
Iteration  27: 4639229.396 ops/s
Iteration  28: 4532110.258 ops/s
Iteration  29: 4483290.698 ops/s
Iteration  30: 4447718.542 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_dispose":
  4556903.741 ±(99.9%) 65854.816 ops/s [Average]
  (min, avg, max) = (4390597.191, 4556903.741, 4756006.437), stdev = 98568.396
  CI (99.9%): [4491048.925, 4622758.557] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
BlockingFlowableToIteratorTest._Benchmark.benchmark_dispose  thrpt   30  4556903.741 ± 65854.816  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 418651.704 ops/s
# Warmup Iteration   2: 566778.937 ops/s
# Warmup Iteration   3: 604378.729 ops/s
# Warmup Iteration   4: 547675.370 ops/s
# Warmup Iteration   5: 658687.356 ops/s
# Warmup Iteration   6: 634388.875 ops/s
# Warmup Iteration   7: 631887.577 ops/s
# Warmup Iteration   8: 653431.630 ops/s
# Warmup Iteration   9: 626143.281 ops/s
# Warmup Iteration  10: 660519.395 ops/s
# Warmup Iteration  11: 654285.795 ops/s
# Warmup Iteration  12: 640014.537 ops/s
# Warmup Iteration  13: 620185.543 ops/s
# Warmup Iteration  14: 655728.446 ops/s
# Warmup Iteration  15: 635982.520 ops/s
# Warmup Iteration  16: 617387.328 ops/s
# Warmup Iteration  17: 688985.048 ops/s
# Warmup Iteration  18: 682498.284 ops/s
# Warmup Iteration  19: 665849.269 ops/s
# Warmup Iteration  20: 686435.841 ops/s
# Warmup Iteration  21: 680642.518 ops/s
# Warmup Iteration  22: 695516.964 ops/s
# Warmup Iteration  23: 665115.867 ops/s
# Warmup Iteration  24: 669336.348 ops/s
# Warmup Iteration  25: 688665.531 ops/s
# Warmup Iteration  26: 659298.450 ops/s
# Warmup Iteration  27: 487676.018 ops/s
# Warmup Iteration  28: 669194.848 ops/s
# Warmup Iteration  29: 694798.657 ops/s
# Warmup Iteration  30: 709215.928 ops/s
Iteration   1: 685203.515 ops/s
Iteration   2: 662023.100 ops/s
Iteration   3: 662775.334 ops/s
Iteration   4: 697169.230 ops/s
Iteration   5: 692598.922 ops/s
Iteration   6: 663651.791 ops/s
Iteration   7: 707721.263 ops/s
Iteration   8: 685504.131 ops/s
Iteration   9: 658315.710 ops/s
Iteration  10: 697253.268 ops/s
Iteration  11: 685813.703 ops/s
Iteration  12: 684145.119 ops/s
Iteration  13: 672382.017 ops/s
Iteration  14: 692026.055 ops/s
Iteration  15: 696962.982 ops/s
Iteration  16: 683700.459 ops/s
Iteration  17: 691261.217 ops/s
Iteration  18: 678075.714 ops/s
Iteration  19: 669773.534 ops/s
Iteration  20: 711227.452 ops/s
Iteration  21: 664663.832 ops/s
Iteration  22: 705476.063 ops/s
Iteration  23: 665928.069 ops/s
Iteration  24: 694758.751 ops/s
Iteration  25: 670061.011 ops/s
Iteration  26: 669388.112 ops/s
Iteration  27: 697429.390 ops/s
Iteration  28: 660340.942 ops/s
Iteration  29: 701172.223 ops/s
Iteration  30: 703331.819 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_remove":
  683671.158 ±(99.9%) 10737.025 ops/s [Average]
  (min, avg, max) = (658315.710, 683671.158, 711227.452), stdev = 16070.675
  CI (99.9%): [672934.133, 694408.183] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
BlockingFlowableToIteratorTest._Benchmark.benchmark_remove  thrpt   30  683671.158 ± 10737.025  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_timedNoOutdatedData$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_timedNoOutdatedData

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 56621.369 ops/s
# Warmup Iteration   2: 284368.553 ops/s
# Warmup Iteration   3: 702441.538 ops/s
# Warmup Iteration   4: 815509.602 ops/s
# Warmup Iteration   5: 816507.670 ops/s
# Warmup Iteration   6: 848105.765 ops/s
# Warmup Iteration   7: 896025.245 ops/s
# Warmup Iteration   8: 956435.823 ops/s
# Warmup Iteration   9: 946278.659 ops/s
# Warmup Iteration  10: 897849.719 ops/s
# Warmup Iteration  11: 928629.246 ops/s
# Warmup Iteration  12: 895570.193 ops/s
# Warmup Iteration  13: 928479.000 ops/s
# Warmup Iteration  14: 913654.081 ops/s
# Warmup Iteration  15: 915520.736 ops/s
# Warmup Iteration  16: 959663.822 ops/s
# Warmup Iteration  17: 912089.305 ops/s
# Warmup Iteration  18: 899807.388 ops/s
# Warmup Iteration  19: 951428.257 ops/s
# Warmup Iteration  20: 901939.471 ops/s
# Warmup Iteration  21: 969791.901 ops/s
# Warmup Iteration  22: 886877.684 ops/s
# Warmup Iteration  23: 916513.286 ops/s
# Warmup Iteration  24: 908461.638 ops/s
# Warmup Iteration  25: 907404.564 ops/s
# Warmup Iteration  26: 900385.882 ops/s
# Warmup Iteration  27: 920505.574 ops/s
# Warmup Iteration  28: 914390.505 ops/s
# Warmup Iteration  29: 948342.422 ops/s
# Warmup Iteration  30: 915560.302 ops/s
Iteration   1: 919601.281 ops/s
Iteration   2: 955311.915 ops/s
Iteration   3: 898385.530 ops/s
Iteration   4: 936253.667 ops/s
Iteration   5: 909706.143 ops/s
Iteration   6: 901534.120 ops/s
Iteration   7: 926613.295 ops/s
Iteration   8: 898434.016 ops/s
Iteration   9: 939726.404 ops/s
Iteration  10: 880510.017 ops/s
Iteration  11: 937284.392 ops/s
Iteration  12: 913780.392 ops/s
Iteration  13: 921094.286 ops/s
Iteration  14: 915011.783 ops/s
Iteration  15: 897320.261 ops/s
Iteration  16: 961058.877 ops/s
Iteration  17: 972488.762 ops/s
Iteration  18: 936278.050 ops/s
Iteration  19: 883808.355 ops/s
Iteration  20: 973458.355 ops/s
Iteration  21: 897584.258 ops/s
Iteration  22: 956567.433 ops/s
Iteration  23: 898958.452 ops/s
Iteration  24: 922549.078 ops/s
Iteration  25: 948457.529 ops/s
Iteration  26: 903299.194 ops/s
Iteration  27: 900252.253 ops/s
Iteration  28: 938644.923 ops/s
Iteration  29: 896874.456 ops/s
Iteration  30: 916596.780 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_timedNoOutdatedData":
  921914.809 ±(99.9%) 17184.672 ops/s [Average]
  (min, avg, max) = (880510.017, 921914.809, 973458.355), stdev = 25721.209
  CI (99.9%): [904730.137, 939099.480] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_timedNoOutdatedData  thrpt   30  921914.809 ± 17184.672  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_timedNoOutdatedData$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_timedNoOutdatedData

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60265.769 ops/s
# Warmup Iteration   2: 328935.373 ops/s
# Warmup Iteration   3: 675338.080 ops/s
# Warmup Iteration   4: 838159.774 ops/s
# Warmup Iteration   5: 921269.792 ops/s
# Warmup Iteration   6: 920709.219 ops/s
# Warmup Iteration   7: 768840.663 ops/s
# Warmup Iteration   8: 855486.057 ops/s
# Warmup Iteration   9: 929522.238 ops/s
# Warmup Iteration  10: 928522.705 ops/s
# Warmup Iteration  11: 912168.096 ops/s
# Warmup Iteration  12: 880510.438 ops/s
# Warmup Iteration  13: 939660.361 ops/s
# Warmup Iteration  14: 876675.692 ops/s
# Warmup Iteration  15: 947960.278 ops/s
# Warmup Iteration  16: 948573.094 ops/s
# Warmup Iteration  17: 865238.896 ops/s
# Warmup Iteration  18: 905805.093 ops/s
# Warmup Iteration  19: 883136.048 ops/s
# Warmup Iteration  20: 896871.646 ops/s
# Warmup Iteration  21: 717671.111 ops/s
# Warmup Iteration  22: 849888.620 ops/s
# Warmup Iteration  23: 910468.781 ops/s
# Warmup Iteration  24: 901063.683 ops/s
# Warmup Iteration  25: 891080.370 ops/s
# Warmup Iteration  26: 869748.119 ops/s
# Warmup Iteration  27: 892473.485 ops/s
# Warmup Iteration  28: 936909.123 ops/s
# Warmup Iteration  29: 887334.678 ops/s
# Warmup Iteration  30: 900522.640 ops/s
Iteration   1: 881035.424 ops/s
Iteration   2: 910151.989 ops/s
Iteration   3: 919191.838 ops/s
Iteration   4: 877696.893 ops/s
Iteration   5: 929388.914 ops/s
Iteration   6: 885706.117 ops/s
Iteration   7: 880543.278 ops/s
Iteration   8: 933179.074 ops/s
Iteration   9: 882481.380 ops/s
Iteration  10: 911818.686 ops/s
Iteration  11: 900551.007 ops/s
Iteration  12: 944191.825 ops/s
Iteration  13: 871386.523 ops/s
Iteration  14: 907001.707 ops/s
Iteration  15: 926649.125 ops/s
Iteration  16: 876353.083 ops/s
Iteration  17: 903488.003 ops/s
Iteration  18: 904702.599 ops/s
Iteration  19: 888153.439 ops/s
Iteration  20: 909699.960 ops/s
Iteration  21: 866640.866 ops/s
Iteration  22: 923284.190 ops/s
Iteration  23: 876894.676 ops/s
Iteration  24: 935869.247 ops/s
Iteration  25: 869416.165 ops/s
Iteration  26: 946485.672 ops/s
Iteration  27: 899228.272 ops/s
Iteration  28: 892488.059 ops/s
Iteration  29: 881799.450 ops/s
Iteration  30: 894211.113 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_timedNoOutdatedData":
  900989.619 ±(99.9%) 15518.442 ops/s [Average]
  (min, avg, max) = (866640.866, 900989.619, 946485.672), stdev = 23227.275
  CI (99.9%): [885471.177, 916508.061] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_timedNoOutdatedData  thrpt   30  900989.619 ± 15518.442  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_emptyThrowsNoSuch$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_emptyThrowsNoSuch

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 389562.488 ops/s
# Warmup Iteration   2: 559659.772 ops/s
# Warmup Iteration   3: 588180.696 ops/s
# Warmup Iteration   4: 565890.171 ops/s
# Warmup Iteration   5: 661573.526 ops/s
# Warmup Iteration   6: 625051.380 ops/s
# Warmup Iteration   7: 637945.584 ops/s
# Warmup Iteration   8: 683815.417 ops/s
# Warmup Iteration   9: 619614.792 ops/s
# Warmup Iteration  10: 650041.813 ops/s
# Warmup Iteration  11: 631508.003 ops/s
# Warmup Iteration  12: 654716.053 ops/s
# Warmup Iteration  13: 641459.740 ops/s
# Warmup Iteration  14: 667692.652 ops/s
# Warmup Iteration  15: 632301.770 ops/s
# Warmup Iteration  16: 661188.270 ops/s
# Warmup Iteration  17: 702170.175 ops/s
# Warmup Iteration  18: 680179.205 ops/s
# Warmup Iteration  19: 687413.080 ops/s
# Warmup Iteration  20: 682543.711 ops/s
# Warmup Iteration  21: 697022.854 ops/s
# Warmup Iteration  22: 667283.794 ops/s
# Warmup Iteration  23: 701118.403 ops/s
# Warmup Iteration  24: 686301.991 ops/s
# Warmup Iteration  25: 711585.919 ops/s
# Warmup Iteration  26: 670768.577 ops/s
# Warmup Iteration  27: 711943.881 ops/s
# Warmup Iteration  28: 702296.404 ops/s
# Warmup Iteration  29: 679218.505 ops/s
# Warmup Iteration  30: 696858.582 ops/s
Iteration   1: 661191.037 ops/s
Iteration   2: 674233.154 ops/s
Iteration   3: 711348.164 ops/s
Iteration   4: 633407.138 ops/s
Iteration   5: 687940.376 ops/s
Iteration   6: 716650.827 ops/s
Iteration   7: 677284.354 ops/s
Iteration   8: 686028.769 ops/s
Iteration   9: 696337.407 ops/s
Iteration  10: 690134.614 ops/s
Iteration  11: 691365.114 ops/s
Iteration  12: 711707.976 ops/s
Iteration  13: 672015.256 ops/s
Iteration  14: 702988.702 ops/s
Iteration  15: 675808.882 ops/s
Iteration  16: 668636.829 ops/s
Iteration  17: 687539.772 ops/s
Iteration  18: 685603.902 ops/s
Iteration  19: 707454.071 ops/s
Iteration  20: 670114.044 ops/s
Iteration  21: 710145.633 ops/s
Iteration  22: 711534.977 ops/s
Iteration  23: 654532.705 ops/s
Iteration  24: 707286.364 ops/s
Iteration  25: 665941.223 ops/s
Iteration  26: 718596.823 ops/s
Iteration  27: 689267.932 ops/s
Iteration  28: 673010.843 ops/s
Iteration  29: 708274.170 ops/s
Iteration  30: 674245.933 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_emptyThrowsNoSuch":
  687354.233 ±(99.9%) 13872.021 ops/s [Average]
  (min, avg, max) = (633407.138, 687354.233, 718596.823), stdev = 20762.990
  CI (99.9%): [673482.212, 701226.254] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
BlockingFlowableToIteratorTest._Benchmark.benchmark_emptyThrowsNoSuch  thrpt   30  687354.233 ± 13872.021  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23505251.085 ops/s
# Warmup Iteration   2: 40894072.289 ops/s
# Warmup Iteration   3: 52757127.525 ops/s
# Warmup Iteration   4: 49610802.802 ops/s
# Warmup Iteration   5: 51780987.819 ops/s
# Warmup Iteration   6: 50104589.931 ops/s
# Warmup Iteration   7: 49754540.819 ops/s
# Warmup Iteration   8: 52498258.765 ops/s
# Warmup Iteration   9: 49668461.320 ops/s
# Warmup Iteration  10: 49631567.515 ops/s
# Warmup Iteration  11: 54009624.664 ops/s
# Warmup Iteration  12: 49765497.941 ops/s
# Warmup Iteration  13: 49847896.128 ops/s
# Warmup Iteration  14: 53457702.027 ops/s
# Warmup Iteration  15: 46239038.296 ops/s
# Warmup Iteration  16: 41748006.426 ops/s
# Warmup Iteration  17: 49467906.419 ops/s
# Warmup Iteration  18: 51989221.541 ops/s
# Warmup Iteration  19: 50077534.740 ops/s
# Warmup Iteration  20: 50589483.650 ops/s
# Warmup Iteration  21: 51209576.571 ops/s
# Warmup Iteration  22: 48987924.115 ops/s
# Warmup Iteration  23: 54015735.545 ops/s
# Warmup Iteration  24: 50178753.801 ops/s
# Warmup Iteration  25: 49880144.079 ops/s
# Warmup Iteration  26: 52123710.199 ops/s
# Warmup Iteration  27: 49681494.623 ops/s
# Warmup Iteration  28: 51786001.910 ops/s
# Warmup Iteration  29: 52403813.220 ops/s
# Warmup Iteration  30: 49184360.574 ops/s
Iteration   1: 50082101.525 ops/s
Iteration   2: 50131596.768 ops/s
Iteration   3: 51096358.485 ops/s
Iteration   4: 51317655.994 ops/s
Iteration   5: 50910771.198 ops/s
Iteration   6: 50130244.308 ops/s
Iteration   7: 50910228.739 ops/s
Iteration   8: 50581599.848 ops/s
Iteration   9: 51618518.695 ops/s
Iteration  10: 51547391.258 ops/s
Iteration  11: 49442498.303 ops/s
Iteration  12: 50896815.340 ops/s
Iteration  13: 50139706.663 ops/s
Iteration  14: 49282230.444 ops/s
Iteration  15: 50778199.884 ops/s
Iteration  16: 50963671.955 ops/s
Iteration  17: 49428250.213 ops/s
Iteration  18: 52743975.041 ops/s
Iteration  19: 48534367.088 ops/s
Iteration  20: 51399494.271 ops/s
Iteration  21: 49656178.951 ops/s
Iteration  22: 49164783.342 ops/s
Iteration  23: 49572500.611 ops/s
Iteration  24: 44193082.862 ops/s
Iteration  25: 49210479.416 ops/s
Iteration  26: 51217174.590 ops/s
Iteration  27: 52001531.143 ops/s
Iteration  28: 47886013.974 ops/s
Iteration  29: 51019608.647 ops/s
Iteration  30: 46002327.862 ops/s


Result "io.reactivex.rxjava3.internal.SubscribeWithTest._Benchmark.benchmark_withSingle":
  50061978.581 ±(99.9%) 1159471.550 ops/s [Average]
  (min, avg, max) = (44193082.862, 50061978.581, 52743975.041), stdev = 1735442.564
  CI (99.9%): [48902507.030, 51221450.131] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score         Error  Units
SubscribeWithTest._Benchmark.benchmark_withSingle  thrpt   30  50061978.581 ± 1159471.550  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_covarianceOfMerge$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_covarianceOfMerge

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10683124.862 ops/s
# Warmup Iteration   2: 20526974.331 ops/s
# Warmup Iteration   3: 30416234.825 ops/s
# Warmup Iteration   4: 26838099.817 ops/s
# Warmup Iteration   5: 30951069.567 ops/s
# Warmup Iteration   6: 26643076.367 ops/s
# Warmup Iteration   7: 25011753.259 ops/s
# Warmup Iteration   8: 28249570.886 ops/s
# Warmup Iteration   9: 30659205.939 ops/s
# Warmup Iteration  10: 31015453.568 ops/s
# Warmup Iteration  11: 30188161.725 ops/s
# Warmup Iteration  12: 30570307.298 ops/s
# Warmup Iteration  13: 29550017.159 ops/s
# Warmup Iteration  14: 29348933.339 ops/s
# Warmup Iteration  15: 30483086.401 ops/s
# Warmup Iteration  16: 30464424.169 ops/s
# Warmup Iteration  17: 29497553.909 ops/s
# Warmup Iteration  18: 30135950.861 ops/s
# Warmup Iteration  19: 31023179.757 ops/s
# Warmup Iteration  20: 29329979.713 ops/s
# Warmup Iteration  21: 31349772.220 ops/s
# Warmup Iteration  22: 29811944.449 ops/s
# Warmup Iteration  23: 31663414.156 ops/s
# Warmup Iteration  24: 28935720.622 ops/s
# Warmup Iteration  25: 30803903.507 ops/s
# Warmup Iteration  26: 29972808.985 ops/s
# Warmup Iteration  27: 29662848.730 ops/s
# Warmup Iteration  28: 30611531.912 ops/s
# Warmup Iteration  29: 30552634.610 ops/s
# Warmup Iteration  30: 30509354.374 ops/s
Iteration   1: 30096129.307 ops/s
Iteration   2: 30450799.527 ops/s
Iteration   3: 29215783.349 ops/s
Iteration   4: 29999816.841 ops/s
Iteration   5: 31988392.972 ops/s
Iteration   6: 28625581.266 ops/s
Iteration   7: 31976994.679 ops/s
Iteration   8: 30060845.497 ops/s
Iteration   9: 31559504.037 ops/s
Iteration  10: 29714582.364 ops/s
Iteration  11: 31329872.409 ops/s
Iteration  12: 30240523.061 ops/s
Iteration  13: 29904196.495 ops/s
Iteration  14: 29921158.800 ops/s
Iteration  15: 30714975.680 ops/s
Iteration  16: 30371994.585 ops/s
Iteration  17: 28874126.829 ops/s
Iteration  18: 30475570.280 ops/s
Iteration  19: 29917931.575 ops/s
Iteration  20: 29988423.036 ops/s
Iteration  21: 28233737.110 ops/s
Iteration  22: 29904564.274 ops/s
Iteration  23: 30328986.106 ops/s
Iteration  24: 29599928.064 ops/s
Iteration  25: 30436948.355 ops/s
Iteration  26: 29961345.830 ops/s
Iteration  27: 28262996.550 ops/s
Iteration  28: 29690824.727 ops/s
Iteration  29: 30102542.086 ops/s
Iteration  30: 29906699.662 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_covarianceOfMerge":
  30061859.178 ±(99.9%) 603914.788 ops/s [Average]
  (min, avg, max) = (28233737.110, 30061859.178, 31988392.972), stdev = 903911.292
  CI (99.9%): [29457944.391, 30665773.966] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
FlowableMergeTests._Benchmark.benchmark_covarianceOfMerge  thrpt   30  30061859.178 ± 603914.788  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5656801.206 ops/s
# Warmup Iteration   2: 9245107.472 ops/s
# Warmup Iteration   3: 10021206.862 ops/s
# Warmup Iteration   4: 11109976.025 ops/s
# Warmup Iteration   5: 11789910.122 ops/s
# Warmup Iteration   6: 11519758.474 ops/s
# Warmup Iteration   7: 11193576.431 ops/s
# Warmup Iteration   8: 11243608.678 ops/s
# Warmup Iteration   9: 11499412.744 ops/s
# Warmup Iteration  10: 9433589.362 ops/s
# Warmup Iteration  11: 10904503.845 ops/s
# Warmup Iteration  12: 11236981.198 ops/s
# Warmup Iteration  13: 11866125.024 ops/s
# Warmup Iteration  14: 11578231.647 ops/s
# Warmup Iteration  15: 11135540.235 ops/s
# Warmup Iteration  16: 11468422.107 ops/s
# Warmup Iteration  17: 11167103.267 ops/s
# Warmup Iteration  18: 11266901.527 ops/s
# Warmup Iteration  19: 11712553.429 ops/s
# Warmup Iteration  20: 11047529.217 ops/s
# Warmup Iteration  21: 11282755.719 ops/s
# Warmup Iteration  22: 11936549.715 ops/s
# Warmup Iteration  23: 10914033.850 ops/s
# Warmup Iteration  24: 11364136.935 ops/s
# Warmup Iteration  25: 11693181.004 ops/s
# Warmup Iteration  26: 11026865.887 ops/s
# Warmup Iteration  27: 10949335.777 ops/s
# Warmup Iteration  28: 11618423.858 ops/s
# Warmup Iteration  29: 11271467.585 ops/s
# Warmup Iteration  30: 11367826.115 ops/s
Iteration   1: 11438844.841 ops/s
Iteration   2: 11364694.102 ops/s
Iteration   3: 11429401.624 ops/s
Iteration   4: 11588718.858 ops/s
Iteration   5: 11708705.729 ops/s
Iteration   6: 11008735.497 ops/s
Iteration   7: 11749506.791 ops/s
Iteration   8: 11115957.888 ops/s
Iteration   9: 11341305.385 ops/s
Iteration  10: 11815953.475 ops/s
Iteration  11: 11196093.751 ops/s
Iteration  12: 11026153.987 ops/s
Iteration  13: 11950720.386 ops/s
Iteration  14: 11035056.366 ops/s
Iteration  15: 11157298.593 ops/s
Iteration  16: 11771052.779 ops/s
Iteration  17: 10979517.116 ops/s
Iteration  18: 11596909.755 ops/s
Iteration  19: 11161532.228 ops/s
Iteration  20: 11430463.224 ops/s
Iteration  21: 11885908.201 ops/s
Iteration  22: 11289757.158 ops/s
Iteration  23: 11948739.381 ops/s
Iteration  24: 11271580.270 ops/s
Iteration  25: 11334318.355 ops/s
Iteration  26: 11363293.516 ops/s
Iteration  27: 11256427.653 ops/s
Iteration  28: 11055821.427 ops/s
Iteration  29: 11562442.976 ops/s
Iteration  30: 11227894.366 ops/s


Result "io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_dispose":
  11402093.523 ±(99.9%) 196993.493 ops/s [Average]
  (min, avg, max) = (10979517.116, 11402093.523, 11950720.386), stdev = 294850.609
  CI (99.9%): [11205100.030, 11599087.016] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
FutureSingleObserverTest._Benchmark.benchmark_dispose  thrpt   30  11402093.523 ± 196993.493  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5773913.239 ops/s
# Warmup Iteration   2: 12847737.039 ops/s
# Warmup Iteration   3: 14171021.819 ops/s
# Warmup Iteration   4: 16081919.484 ops/s
# Warmup Iteration   5: 16686233.940 ops/s
# Warmup Iteration   6: 16541333.806 ops/s
# Warmup Iteration   7: 15909773.672 ops/s
# Warmup Iteration   8: 16235630.348 ops/s
# Warmup Iteration   9: 16531726.760 ops/s
# Warmup Iteration  10: 15968086.188 ops/s
# Warmup Iteration  11: 15678913.961 ops/s
# Warmup Iteration  12: 16827648.098 ops/s
# Warmup Iteration  13: 15903250.808 ops/s
# Warmup Iteration  14: 16370911.727 ops/s
# Warmup Iteration  15: 15854829.767 ops/s
# Warmup Iteration  16: 16862660.840 ops/s
# Warmup Iteration  17: 15960037.460 ops/s
# Warmup Iteration  18: 16658302.007 ops/s
# Warmup Iteration  19: 16381975.829 ops/s
# Warmup Iteration  20: 15978881.011 ops/s
# Warmup Iteration  21: 16737330.878 ops/s
# Warmup Iteration  22: 15786218.875 ops/s
# Warmup Iteration  23: 17074943.335 ops/s
# Warmup Iteration  24: 16426839.167 ops/s
# Warmup Iteration  25: 16185450.349 ops/s
# Warmup Iteration  26: 16549402.321 ops/s
# Warmup Iteration  27: 16120099.047 ops/s
# Warmup Iteration  28: 16166284.014 ops/s
# Warmup Iteration  29: 16247420.423 ops/s
# Warmup Iteration  30: 15473431.625 ops/s
Iteration   1: 16555947.434 ops/s
Iteration   2: 16625005.906 ops/s
Iteration   3: 15781926.216 ops/s
Iteration   4: 16984290.559 ops/s
Iteration   5: 16056080.530 ops/s
Iteration   6: 15533959.733 ops/s
Iteration   7: 16658358.183 ops/s
Iteration   8: 16774449.068 ops/s
Iteration   9: 15711741.899 ops/s
Iteration  10: 16761409.385 ops/s
Iteration  11: 15606896.116 ops/s
Iteration  12: 16384532.622 ops/s
Iteration  13: 16822823.389 ops/s
Iteration  14: 16110081.199 ops/s
Iteration  15: 15826616.061 ops/s
Iteration  16: 16453682.389 ops/s
Iteration  17: 17118724.093 ops/s
Iteration  18: 16057270.577 ops/s
Iteration  19: 15473003.979 ops/s
Iteration  20: 16566357.833 ops/s
Iteration  21: 16314379.073 ops/s
Iteration  22: 15986610.775 ops/s
Iteration  23: 16345270.909 ops/s
Iteration  24: 15802853.226 ops/s
Iteration  25: 16536093.429 ops/s
Iteration  26: 16895723.927 ops/s
Iteration  27: 15919921.791 ops/s
Iteration  28: 16464084.364 ops/s
Iteration  29: 16291715.314 ops/s
Iteration  30: 16139200.041 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_just":
  16285300.334 ±(99.9%) 302485.981 ops/s [Average]
  (min, avg, max) = (15473003.979, 16285300.334, 17118724.093), stdev = 452746.810
  CI (99.9%): [15982814.354, 16587786.315] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
SingleToCompletionStageTest._Benchmark.benchmark_just  thrpt   30  16285300.334 ± 302485.981  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_normalGetWitHTimeout$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_normalGetWitHTimeout

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4784273.939 ops/s
# Warmup Iteration   2: 9258639.682 ops/s
# Warmup Iteration   3: 10556305.462 ops/s
# Warmup Iteration   4: 10917146.009 ops/s
# Warmup Iteration   5: 8888685.761 ops/s
# Warmup Iteration   6: 11698256.856 ops/s
# Warmup Iteration   7: 11335019.530 ops/s
# Warmup Iteration   8: 11158867.351 ops/s
# Warmup Iteration   9: 11333245.578 ops/s
# Warmup Iteration  10: 11619404.914 ops/s
# Warmup Iteration  11: 10836793.395 ops/s
# Warmup Iteration  12: 11832146.637 ops/s
# Warmup Iteration  13: 11136239.315 ops/s
# Warmup Iteration  14: 10984076.447 ops/s
# Warmup Iteration  15: 11668865.113 ops/s
# Warmup Iteration  16: 11132576.862 ops/s
# Warmup Iteration  17: 11756304.556 ops/s
# Warmup Iteration  18: 11641982.414 ops/s
# Warmup Iteration  19: 11323198.056 ops/s
# Warmup Iteration  20: 11402113.126 ops/s
# Warmup Iteration  21: 11181860.284 ops/s
# Warmup Iteration  22: 11427645.760 ops/s
# Warmup Iteration  23: 10884938.305 ops/s
# Warmup Iteration  24: 11118722.216 ops/s
# Warmup Iteration  25: 11493964.852 ops/s
# Warmup Iteration  26: 10989705.253 ops/s
# Warmup Iteration  27: 11612923.967 ops/s
# Warmup Iteration  28: 10959317.390 ops/s
# Warmup Iteration  29: 11830981.956 ops/s
# Warmup Iteration  30: 11248479.013 ops/s
Iteration   1: 10917838.776 ops/s
Iteration   2: 11437753.171 ops/s
Iteration   3: 11205042.909 ops/s
Iteration   4: 11591728.219 ops/s
Iteration   5: 11013036.991 ops/s
Iteration   6: 11446870.081 ops/s
Iteration   7: 11020039.376 ops/s
Iteration   8: 11612475.831 ops/s
Iteration   9: 11234637.346 ops/s
Iteration  10: 11065170.978 ops/s
Iteration  11: 11509550.601 ops/s
Iteration  12: 11078052.999 ops/s
Iteration  13: 11839005.446 ops/s
Iteration  14: 11384120.727 ops/s
Iteration  15: 11080343.067 ops/s
Iteration  16: 11731533.268 ops/s
Iteration  17: 11753844.716 ops/s
Iteration  18: 11128135.337 ops/s
Iteration  19: 11340800.993 ops/s
Iteration  20: 11583077.271 ops/s
Iteration  21: 11147260.058 ops/s
Iteration  22: 11762919.893 ops/s
Iteration  23: 11053473.776 ops/s
Iteration  24: 11593521.896 ops/s
Iteration  25: 11094175.933 ops/s
Iteration  26: 11097204.495 ops/s
Iteration  27: 11655775.844 ops/s
Iteration  28: 11079997.518 ops/s
Iteration  29: 11527095.401 ops/s
Iteration  30: 11403896.960 ops/s


Result "io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_normalGetWitHTimeout":
  11346279.329 ±(99.9%) 183272.448 ops/s [Average]
  (min, avg, max) = (10917838.776, 11346279.329, 11839005.446), stdev = 274313.592
  CI (99.9%): [11163006.882, 11529551.777] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
FutureSingleObserverTest._Benchmark.benchmark_normalGetWitHTimeout  thrpt   30  11346279.329 ± 183272.448  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_noArgSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_noArgSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14455668.973 ops/s
# Warmup Iteration   2: 20058145.676 ops/s
# Warmup Iteration   3: 20422841.243 ops/s
# Warmup Iteration   4: 24551034.338 ops/s
# Warmup Iteration   5: 24598765.359 ops/s
# Warmup Iteration   6: 23817491.662 ops/s
# Warmup Iteration   7: 24777976.890 ops/s
# Warmup Iteration   8: 24473409.819 ops/s
# Warmup Iteration   9: 24879751.076 ops/s
# Warmup Iteration  10: 25483354.565 ops/s
# Warmup Iteration  11: 24750771.863 ops/s
# Warmup Iteration  12: 24104169.384 ops/s
# Warmup Iteration  13: 25004728.224 ops/s
# Warmup Iteration  14: 23978134.975 ops/s
# Warmup Iteration  15: 23963576.669 ops/s
# Warmup Iteration  16: 24991405.822 ops/s
# Warmup Iteration  17: 24869159.211 ops/s
# Warmup Iteration  18: 25120100.407 ops/s
# Warmup Iteration  19: 25284489.304 ops/s
# Warmup Iteration  20: 24930952.341 ops/s
# Warmup Iteration  21: 25212615.944 ops/s
# Warmup Iteration  22: 24852439.268 ops/s
# Warmup Iteration  23: 25599465.315 ops/s
# Warmup Iteration  24: 25304984.153 ops/s
# Warmup Iteration  25: 24897156.157 ops/s
# Warmup Iteration  26: 25776404.880 ops/s
# Warmup Iteration  27: 24399692.976 ops/s
# Warmup Iteration  28: 25429585.340 ops/s
# Warmup Iteration  29: 24459588.066 ops/s
# Warmup Iteration  30: 25493219.695 ops/s
Iteration   1: 24063350.791 ops/s
Iteration   2: 25277986.791 ops/s
Iteration   3: 25381910.168 ops/s
Iteration   4: 24502799.158 ops/s
Iteration   5: 24598781.466 ops/s
Iteration   6: 24509885.518 ops/s
Iteration   7: 24705807.356 ops/s
Iteration   8: 25480601.387 ops/s
Iteration   9: 24528031.513 ops/s
Iteration  10: 24858702.980 ops/s
Iteration  11: 25165764.309 ops/s
Iteration  12: 25828831.821 ops/s
Iteration  13: 24179635.944 ops/s
Iteration  14: 25683569.876 ops/s
Iteration  15: 24767037.535 ops/s
Iteration  16: 24473401.410 ops/s
Iteration  17: 25515885.934 ops/s
Iteration  18: 24522701.014 ops/s
Iteration  19: 24927115.700 ops/s
Iteration  20: 24890283.202 ops/s
Iteration  21: 25434479.551 ops/s
Iteration  22: 25042710.401 ops/s
Iteration  23: 24407052.069 ops/s
Iteration  24: 26013689.983 ops/s
Iteration  25: 24475318.065 ops/s
Iteration  26: 25021934.090 ops/s
Iteration  27: 24529418.215 ops/s
Iteration  28: 25621169.155 ops/s
Iteration  29: 25076567.897 ops/s
Iteration  30: 25380724.709 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_noArgSuccess":
  24962171.600 ±(99.9%) 341290.010 ops/s [Average]
  (min, avg, max) = (24063350.791, 24962171.600, 26013689.983), stdev = 510826.858
  CI (99.9%): [24620881.591, 25303461.610] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
SingleBlockingSubscribeTest._Benchmark.benchmark_noArgSuccess  thrpt   30  24962171.600 ± 341290.010  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_composeWithDeltaLogic$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_composeWithDeltaLogic

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1463957.211 ops/s
# Warmup Iteration   2: 5221056.754 ops/s
# Warmup Iteration   3: 6566997.927 ops/s
# Warmup Iteration   4: 7065890.737 ops/s
# Warmup Iteration   5: 6595992.581 ops/s
# Warmup Iteration   6: 6906271.744 ops/s
# Warmup Iteration   7: 6945643.056 ops/s
# Warmup Iteration   8: 7100027.279 ops/s
# Warmup Iteration   9: 6758756.762 ops/s
# Warmup Iteration  10: 6970631.223 ops/s
# Warmup Iteration  11: 6609625.910 ops/s
# Warmup Iteration  12: 6895609.018 ops/s
# Warmup Iteration  13: 6812600.105 ops/s
# Warmup Iteration  14: 6922061.574 ops/s
# Warmup Iteration  15: 7161438.160 ops/s
# Warmup Iteration  16: 6972015.280 ops/s
# Warmup Iteration  17: 6689678.610 ops/s
# Warmup Iteration  18: 7115525.493 ops/s
# Warmup Iteration  19: 7100584.203 ops/s
# Warmup Iteration  20: 6775381.938 ops/s
# Warmup Iteration  21: 7094036.303 ops/s
# Warmup Iteration  22: 6646376.206 ops/s
# Warmup Iteration  23: 6713790.875 ops/s
# Warmup Iteration  24: 7072538.117 ops/s
# Warmup Iteration  25: 6855134.545 ops/s
# Warmup Iteration  26: 6697129.296 ops/s
# Warmup Iteration  27: 6962810.781 ops/s
# Warmup Iteration  28: 6858841.621 ops/s
# Warmup Iteration  29: 6799823.571 ops/s
# Warmup Iteration  30: 7068542.332 ops/s
Iteration   1: 6808905.083 ops/s
Iteration   2: 6778901.182 ops/s
Iteration   3: 6911455.231 ops/s
Iteration   4: 6848627.429 ops/s
Iteration   5: 6601957.363 ops/s
Iteration   6: 6695889.665 ops/s
Iteration   7: 7027523.642 ops/s
Iteration   8: 6214276.352 ops/s
Iteration   9: 7070834.142 ops/s
Iteration  10: 6651525.401 ops/s
Iteration  11: 6848468.834 ops/s
Iteration  12: 6832064.466 ops/s
Iteration  13: 6719613.761 ops/s
Iteration  14: 6738611.378 ops/s
Iteration  15: 6392554.083 ops/s
Iteration  16: 6865202.945 ops/s
Iteration  17: 6911101.183 ops/s
Iteration  18: 6730548.496 ops/s
Iteration  19: 6993770.572 ops/s
Iteration  20: 6692315.218 ops/s
Iteration  21: 6664804.879 ops/s
Iteration  22: 6801505.401 ops/s
Iteration  23: 6693689.364 ops/s
Iteration  24: 6748133.034 ops/s
Iteration  25: 6779102.484 ops/s
Iteration  26: 7124845.210 ops/s
Iteration  27: 6691837.681 ops/s
Iteration  28: 6685850.985 ops/s
Iteration  29: 6936027.057 ops/s
Iteration  30: 6671398.223 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_composeWithDeltaLogic":
  6771044.691 ±(99.9%) 122733.250 ops/s [Average]
  (min, avg, max) = (6214276.352, 6771044.691, 7124845.210), stdev = 183701.364
  CI (99.9%): [6648311.442, 6893777.941] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
FlowableCovarianceTest._Benchmark.benchmark_composeWithDeltaLogic  thrpt   30  6771044.691 ± 122733.250  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2230128.644 ops/s
# Warmup Iteration   2: 6240110.688 ops/s
# Warmup Iteration   3: 6424935.638 ops/s
# Warmup Iteration   4: 7592017.896 ops/s
# Warmup Iteration   5: 8066101.662 ops/s
# Warmup Iteration   6: 7613068.513 ops/s
# Warmup Iteration   7: 7949647.070 ops/s
# Warmup Iteration   8: 7895006.310 ops/s
# Warmup Iteration   9: 7632442.239 ops/s
# Warmup Iteration  10: 8057707.175 ops/s
# Warmup Iteration  11: 7626462.312 ops/s
# Warmup Iteration  12: 8048485.980 ops/s
# Warmup Iteration  13: 7665310.590 ops/s
# Warmup Iteration  14: 7617799.126 ops/s
# Warmup Iteration  15: 7974596.761 ops/s
# Warmup Iteration  16: 7626025.229 ops/s
# Warmup Iteration  17: 8209800.844 ops/s
# Warmup Iteration  18: 7611310.314 ops/s
# Warmup Iteration  19: 7761964.255 ops/s
# Warmup Iteration  20: 8111165.660 ops/s
# Warmup Iteration  21: 7755024.787 ops/s
# Warmup Iteration  22: 7893412.961 ops/s
# Warmup Iteration  23: 8116978.514 ops/s
# Warmup Iteration  24: 7337805.831 ops/s
# Warmup Iteration  25: 8091717.866 ops/s
# Warmup Iteration  26: 8150903.111 ops/s
# Warmup Iteration  27: 7643779.463 ops/s
# Warmup Iteration  28: 7972017.350 ops/s
# Warmup Iteration  29: 7701574.992 ops/s
# Warmup Iteration  30: 8017648.313 ops/s
Iteration   1: 7673092.188 ops/s
Iteration   2: 7735251.829 ops/s
Iteration   3: 7851601.805 ops/s
Iteration   4: 7701441.561 ops/s
Iteration   5: 7816189.542 ops/s
Iteration   6: 7195359.232 ops/s
Iteration   7: 7805377.109 ops/s
Iteration   8: 7703065.360 ops/s
Iteration   9: 8040958.042 ops/s
Iteration  10: 7744422.696 ops/s
Iteration  11: 7780919.777 ops/s
Iteration  12: 7778838.890 ops/s
Iteration  13: 7716502.682 ops/s
Iteration  14: 8182626.770 ops/s
Iteration  15: 7672254.118 ops/s
Iteration  16: 7947008.650 ops/s
Iteration  17: 7611020.204 ops/s
Iteration  18: 7968193.952 ops/s
Iteration  19: 7669858.854 ops/s
Iteration  20: 7824068.734 ops/s
Iteration  21: 7833649.810 ops/s
Iteration  22: 7588374.369 ops/s
Iteration  23: 8107089.386 ops/s
Iteration  24: 7589594.992 ops/s
Iteration  25: 8082914.515 ops/s
Iteration  26: 6164509.917 ops/s
Iteration  27: 7569557.051 ops/s
Iteration  28: 7925284.386 ops/s
Iteration  29: 7587864.054 ops/s
Iteration  30: 7892152.145 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapTest._Benchmark.benchmark_dispose":
  7725301.421 ±(99.9%) 236604.088 ops/s [Average]
  (min, avg, max) = (6164509.917, 7725301.421, 8182626.770), stdev = 354137.888
  CI (99.9%): [7488697.332, 7961905.509] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score        Error  Units
SingleConcatMapTest._Benchmark.benchmark_dispose  thrpt   30  7725301.421 ± 236604.088  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1451984.599 ops/s
# Warmup Iteration   2: 6321339.170 ops/s
# Warmup Iteration   3: 6402749.668 ops/s
# Warmup Iteration   4: 7611550.017 ops/s
# Warmup Iteration   5: 8169810.940 ops/s
# Warmup Iteration   6: 7481318.565 ops/s
# Warmup Iteration   7: 7601947.411 ops/s
# Warmup Iteration   8: 8088994.062 ops/s
# Warmup Iteration   9: 7730126.750 ops/s
# Warmup Iteration  10: 7527963.562 ops/s
# Warmup Iteration  11: 8063917.465 ops/s
# Warmup Iteration  12: 7932295.423 ops/s
# Warmup Iteration  13: 7616177.138 ops/s
# Warmup Iteration  14: 7897995.693 ops/s
# Warmup Iteration  15: 7608491.695 ops/s
# Warmup Iteration  16: 7709719.513 ops/s
# Warmup Iteration  17: 7702791.965 ops/s
# Warmup Iteration  18: 7678634.908 ops/s
# Warmup Iteration  19: 8118043.228 ops/s
# Warmup Iteration  20: 7596447.376 ops/s
# Warmup Iteration  21: 7827282.810 ops/s
# Warmup Iteration  22: 7709512.957 ops/s
# Warmup Iteration  23: 7864602.311 ops/s
# Warmup Iteration  24: 7941207.362 ops/s
# Warmup Iteration  25: 7711223.694 ops/s
# Warmup Iteration  26: 7904362.098 ops/s
# Warmup Iteration  27: 7520481.820 ops/s
# Warmup Iteration  28: 7722345.741 ops/s
# Warmup Iteration  29: 7849996.611 ops/s
# Warmup Iteration  30: 7664819.709 ops/s
Iteration   1: 7900655.094 ops/s
Iteration   2: 7953598.327 ops/s
Iteration   3: 7625644.619 ops/s
Iteration   4: 8064009.598 ops/s
Iteration   5: 7919544.637 ops/s
Iteration   6: 7700023.691 ops/s
Iteration   7: 7864319.587 ops/s
Iteration   8: 7798850.093 ops/s
Iteration   9: 7445059.408 ops/s
Iteration  10: 7655490.651 ops/s
Iteration  11: 8027459.145 ops/s
Iteration  12: 7558167.373 ops/s
Iteration  13: 7781963.953 ops/s
Iteration  14: 7927672.112 ops/s
Iteration  15: 7786245.182 ops/s
Iteration  16: 7550886.506 ops/s
Iteration  17: 7779074.507 ops/s
Iteration  18: 7641016.886 ops/s
Iteration  19: 7614156.129 ops/s
Iteration  20: 7908866.272 ops/s
Iteration  21: 7712546.842 ops/s
Iteration  22: 7844609.207 ops/s
Iteration  23: 7801098.542 ops/s
Iteration  24: 7789685.169 ops/s
Iteration  25: 7862727.967 ops/s
Iteration  26: 7865597.023 ops/s
Iteration  27: 7714189.968 ops/s
Iteration  28: 7884175.459 ops/s
Iteration  29: 7485304.418 ops/s
Iteration  30: 8012996.517 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_dispose":
  7782521.163 ±(99.9%) 106579.302 ops/s [Average]
  (min, avg, max) = (7445059.408, 7782521.163, 8064009.598), stdev = 159522.894
  CI (99.9%): [7675941.861, 7889100.465] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
SingleFlatMapTest._Benchmark.benchmark_dispose  thrpt   30  7782521.163 ± 106579.302  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1468255.986 ops/s
# Warmup Iteration   2: 5829337.683 ops/s
# Warmup Iteration   3: 7775568.034 ops/s
# Warmup Iteration   4: 9059581.980 ops/s
# Warmup Iteration   5: 9553656.144 ops/s
# Warmup Iteration   6: 9305088.911 ops/s
# Warmup Iteration   7: 8870309.157 ops/s
# Warmup Iteration   8: 9414516.400 ops/s
# Warmup Iteration   9: 9263169.780 ops/s
# Warmup Iteration  10: 9087387.981 ops/s
# Warmup Iteration  11: 9482376.674 ops/s
# Warmup Iteration  12: 9407998.055 ops/s
# Warmup Iteration  13: 9312591.020 ops/s
# Warmup Iteration  14: 8866942.076 ops/s
# Warmup Iteration  15: 9365572.029 ops/s
# Warmup Iteration  16: 9146914.262 ops/s
# Warmup Iteration  17: 8935813.234 ops/s
# Warmup Iteration  18: 8996441.310 ops/s
# Warmup Iteration  19: 9240215.736 ops/s
# Warmup Iteration  20: 9032473.150 ops/s
# Warmup Iteration  21: 8873965.595 ops/s
# Warmup Iteration  22: 9322992.666 ops/s
# Warmup Iteration  23: 8818386.621 ops/s
# Warmup Iteration  24: 8723236.636 ops/s
# Warmup Iteration  25: 9253327.652 ops/s
# Warmup Iteration  26: 8724662.089 ops/s
# Warmup Iteration  27: 9045874.091 ops/s
# Warmup Iteration  28: 8836351.516 ops/s
# Warmup Iteration  29: 9155725.951 ops/s
# Warmup Iteration  30: 8590665.648 ops/s
Iteration   1: 8942311.878 ops/s
Iteration   2: 9053526.748 ops/s
Iteration   3: 8642654.754 ops/s
Iteration   4: 8944355.528 ops/s
Iteration   5: 8963530.745 ops/s
Iteration   6: 8691270.558 ops/s
Iteration   7: 8797561.618 ops/s
Iteration   8: 9128183.074 ops/s
Iteration   9: 8995399.911 ops/s
Iteration  10: 9285962.384 ops/s
Iteration  11: 8637928.378 ops/s
Iteration  12: 8995340.380 ops/s
Iteration  13: 8872855.712 ops/s
Iteration  14: 8829397.564 ops/s
Iteration  15: 9009335.094 ops/s
Iteration  16: 8970926.732 ops/s
Iteration  17: 9287617.363 ops/s
Iteration  18: 8756167.903 ops/s
Iteration  19: 9251316.612 ops/s
Iteration  20: 8077290.720 ops/s
Iteration  21: 8151912.027 ops/s
Iteration  22: 9260323.344 ops/s
Iteration  23: 8863791.500 ops/s
Iteration  24: 9018704.251 ops/s
Iteration  25: 9122163.325 ops/s
Iteration  26: 8900915.549 ops/s
Iteration  27: 9252201.476 ops/s
Iteration  28: 8425706.140 ops/s
Iteration  29: 9231705.536 ops/s
Iteration  30: 8831584.807 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_dispose":
  8906398.054 ±(99.9%) 201970.927 ops/s [Average]
  (min, avg, max) = (8077290.720, 8906398.054, 9287617.363), stdev = 302300.598
  CI (99.9%): [8704427.127, 9108368.981] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_dispose  thrpt   30  8906398.054 ± 201970.927  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_fusedEmptyCheck$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_fusedEmptyCheck

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1684065.192 ops/s
# Warmup Iteration   2: 6710997.985 ops/s
# Warmup Iteration   3: 9624285.497 ops/s
# Warmup Iteration   4: 9619452.787 ops/s
# Warmup Iteration   5: 10106138.442 ops/s
# Warmup Iteration   6: 9872490.424 ops/s
# Warmup Iteration   7: 10136631.487 ops/s
# Warmup Iteration   8: 9942411.669 ops/s
# Warmup Iteration   9: 9618516.558 ops/s
# Warmup Iteration  10: 10427615.449 ops/s
# Warmup Iteration  11: 10373945.025 ops/s
# Warmup Iteration  12: 9896345.780 ops/s
# Warmup Iteration  13: 10135322.538 ops/s
# Warmup Iteration  14: 10289837.733 ops/s
# Warmup Iteration  15: 9823159.847 ops/s
# Warmup Iteration  16: 10329190.190 ops/s
# Warmup Iteration  17: 9908540.824 ops/s
# Warmup Iteration  18: 10407978.509 ops/s
# Warmup Iteration  19: 10204705.482 ops/s
# Warmup Iteration  20: 10263864.235 ops/s
# Warmup Iteration  21: 10353649.549 ops/s
# Warmup Iteration  22: 9889517.345 ops/s
# Warmup Iteration  23: 10202989.967 ops/s
# Warmup Iteration  24: 10067827.420 ops/s
# Warmup Iteration  25: 9792981.765 ops/s
# Warmup Iteration  26: 10232929.497 ops/s
# Warmup Iteration  27: 9973315.532 ops/s
# Warmup Iteration  28: 10533665.546 ops/s
# Warmup Iteration  29: 9911190.484 ops/s
# Warmup Iteration  30: 10298391.244 ops/s
Iteration   1: 9918880.631 ops/s
Iteration   2: 10406552.969 ops/s
Iteration   3: 9892239.239 ops/s
Iteration   4: 10131330.212 ops/s
Iteration   5: 10338277.449 ops/s
Iteration   6: 9953683.347 ops/s
Iteration   7: 10486240.432 ops/s
Iteration   8: 9805887.989 ops/s
Iteration   9: 10167978.052 ops/s
Iteration  10: 9869093.935 ops/s
Iteration  11: 9837864.484 ops/s
Iteration  12: 9915655.556 ops/s
Iteration  13: 10026920.150 ops/s
Iteration  14: 10273777.534 ops/s
Iteration  15: 10514773.102 ops/s
Iteration  16: 10419513.514 ops/s
Iteration  17: 9926463.333 ops/s
Iteration  18: 10271524.006 ops/s
Iteration  19: 9931540.734 ops/s
Iteration  20: 10034985.614 ops/s
Iteration  21: 10205097.442 ops/s
Iteration  22: 9866888.620 ops/s
Iteration  23: 10551242.372 ops/s
Iteration  24: 10096521.171 ops/s
Iteration  25: 10207474.452 ops/s
Iteration  26: 10091684.815 ops/s
Iteration  27: 10588520.863 ops/s
Iteration  28: 10032199.788 ops/s
Iteration  29: 9978749.079 ops/s
Iteration  30: 10270115.906 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_fusedEmptyCheck":
  10133722.560 ±(99.9%) 155979.830 ops/s [Average]
  (min, avg, max) = (9805887.989, 10133722.560, 10588520.863), stdev = 233463.285
  CI (99.9%): [9977742.729, 10289702.390] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score        Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_fusedEmptyCheck  thrpt   30  10133722.560 ± 155979.830  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 761065.521 ops/s
# Warmup Iteration   2: 2034294.767 ops/s
# Warmup Iteration   3: 3138669.286 ops/s
# Warmup Iteration   4: 3946375.893 ops/s
# Warmup Iteration   5: 3792645.075 ops/s
# Warmup Iteration   6: 3880950.937 ops/s
# Warmup Iteration   7: 3801233.437 ops/s
# Warmup Iteration   8: 3786810.865 ops/s
# Warmup Iteration   9: 3953656.982 ops/s
# Warmup Iteration  10: 3727696.150 ops/s
# Warmup Iteration  11: 3827860.388 ops/s
# Warmup Iteration  12: 3995138.098 ops/s
# Warmup Iteration  13: 3804017.678 ops/s
# Warmup Iteration  14: 3920515.361 ops/s
# Warmup Iteration  15: 3999664.882 ops/s
# Warmup Iteration  16: 3690467.493 ops/s
# Warmup Iteration  17: 3865465.105 ops/s
# Warmup Iteration  18: 3749585.340 ops/s
# Warmup Iteration  19: 3825482.415 ops/s
# Warmup Iteration  20: 3865793.025 ops/s
# Warmup Iteration  21: 3686076.198 ops/s
# Warmup Iteration  22: 3884363.548 ops/s
# Warmup Iteration  23: 3841647.813 ops/s
# Warmup Iteration  24: 3799783.991 ops/s
# Warmup Iteration  25: 3743430.130 ops/s
# Warmup Iteration  26: 3882153.581 ops/s
# Warmup Iteration  27: 3661583.708 ops/s
# Warmup Iteration  28: 3863187.777 ops/s
# Warmup Iteration  29: 3865525.182 ops/s
# Warmup Iteration  30: 3703254.095 ops/s
Iteration   1: 3969983.314 ops/s
Iteration   2: 3950118.639 ops/s
Iteration   3: 3975735.045 ops/s
Iteration   4: 3647033.855 ops/s
Iteration   5: 3930286.903 ops/s
Iteration   6: 3710960.524 ops/s
Iteration   7: 3831383.170 ops/s
Iteration   8: 3812138.183 ops/s
Iteration   9: 3751478.336 ops/s
Iteration  10: 3934340.781 ops/s
Iteration  11: 3770835.724 ops/s
Iteration  12: 3964612.742 ops/s
Iteration  13: 3817646.995 ops/s
Iteration  14: 3853632.788 ops/s
Iteration  15: 3035414.768 ops/s
Iteration  16: 3795695.563 ops/s
Iteration  17: 3792180.188 ops/s
Iteration  18: 3824048.337 ops/s
Iteration  19: 3928246.324 ops/s
Iteration  20: 3732811.461 ops/s
Iteration  21: 3872902.365 ops/s
Iteration  22: 3894824.280 ops/s
Iteration  23: 3736329.949 ops/s
Iteration  24: 3965573.790 ops/s
Iteration  25: 3742938.268 ops/s
Iteration  26: 3770272.659 ops/s
Iteration  27: 3965557.431 ops/s
Iteration  28: 3706098.256 ops/s
Iteration  29: 3858288.601 ops/s
Iteration  30: 3768799.782 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_normal":
  3810338.967 ±(99.9%) 116171.883 ops/s [Average]
  (min, avg, max) = (3035414.768, 3810338.967, 3975735.045), stdev = 173880.619
  CI (99.9%): [3694167.084, 3926510.850] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
ObservableConcatWithSingleTest._Benchmark.benchmark_normal  thrpt   30  3810338.967 ± 116171.883  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_rangeWithOverflow3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_rangeWithOverflow3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21764404.764 ops/s
# Warmup Iteration   2: 44623903.681 ops/s
# Warmup Iteration   3: 57836107.263 ops/s
# Warmup Iteration   4: 57330966.057 ops/s
# Warmup Iteration   5: 59796441.555 ops/s
# Warmup Iteration   6: 55644997.773 ops/s
# Warmup Iteration   7: 58381874.831 ops/s
# Warmup Iteration   8: 57704234.254 ops/s
# Warmup Iteration   9: 61199441.689 ops/s
# Warmup Iteration  10: 59509285.592 ops/s
# Warmup Iteration  11: 55960918.962 ops/s
# Warmup Iteration  12: 58240859.920 ops/s
# Warmup Iteration  13: 59114567.901 ops/s
# Warmup Iteration  14: 56321409.406 ops/s
# Warmup Iteration  15: 60737686.359 ops/s
# Warmup Iteration  16: 56455481.775 ops/s
# Warmup Iteration  17: 56949782.197 ops/s
# Warmup Iteration  18: 56420822.320 ops/s
# Warmup Iteration  19: 56412963.375 ops/s
# Warmup Iteration  20: 55601937.688 ops/s
# Warmup Iteration  21: 55157026.091 ops/s
# Warmup Iteration  22: 57762013.119 ops/s
# Warmup Iteration  23: 55057662.379 ops/s
# Warmup Iteration  24: 52890020.497 ops/s
# Warmup Iteration  25: 49771096.021 ops/s
# Warmup Iteration  26: 54574613.994 ops/s
# Warmup Iteration  27: 56770938.358 ops/s
# Warmup Iteration  28: 57139398.070 ops/s
# Warmup Iteration  29: 56557131.613 ops/s
# Warmup Iteration  30: 56249506.487 ops/s
Iteration   1: 52199741.137 ops/s
Iteration   2: 55864037.841 ops/s
Iteration   3: 55603361.589 ops/s
Iteration   4: 57280410.428 ops/s
Iteration   5: 55978385.118 ops/s
Iteration   6: 54854574.716 ops/s
Iteration   7: 51922791.461 ops/s
Iteration   8: 53274578.019 ops/s
Iteration   9: 49462054.442 ops/s
Iteration  10: 53330816.022 ops/s
Iteration  11: 58162719.209 ops/s
Iteration  12: 59742802.782 ops/s
Iteration  13: 60109247.091 ops/s
Iteration  14: 55464494.242 ops/s
Iteration  15: 57949015.191 ops/s
Iteration  16: 58647347.579 ops/s
Iteration  17: 56246897.509 ops/s
Iteration  18: 58268811.515 ops/s
Iteration  19: 57516329.757 ops/s
Iteration  20: 57944946.083 ops/s
Iteration  21: 59734725.827 ops/s
Iteration  22: 57073384.031 ops/s
Iteration  23: 57906635.221 ops/s
Iteration  24: 59710807.870 ops/s
Iteration  25: 56890857.256 ops/s
Iteration  26: 59916058.069 ops/s
Iteration  27: 56395373.689 ops/s
Iteration  28: 58772450.318 ops/s
Iteration  29: 59691172.250 ops/s
Iteration  30: 56695819.190 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_rangeWithOverflow3":
  56753688.182 ±(99.9%) 1767625.443 ops/s [Average]
  (min, avg, max) = (49462054.442, 56753688.182, 60109247.091), stdev = 2645698.749
  CI (99.9%): [54986062.739, 58521313.624] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score         Error  Units
ObservableRangeTest._Benchmark.benchmark_rangeWithOverflow3  thrpt   30  56753688.182 ± 1767625.443  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_parallelFlowableGenericsSignatureTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_parallelFlowableGenericsSignatureTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 770677.501 ops/s
# Warmup Iteration   2: 1077895.960 ops/s
# Warmup Iteration   3: 1197352.961 ops/s
# Warmup Iteration   4: 1222545.488 ops/s
# Warmup Iteration   5: 1151820.905 ops/s
# Warmup Iteration   6: 1166122.675 ops/s
# Warmup Iteration   7: 1211437.580 ops/s
# Warmup Iteration   8: 1223188.231 ops/s
# Warmup Iteration   9: 1166300.876 ops/s
# Warmup Iteration  10: 1233214.369 ops/s
# Warmup Iteration  11: 1179313.552 ops/s
# Warmup Iteration  12: 1169666.637 ops/s
# Warmup Iteration  13: 1220841.226 ops/s
# Warmup Iteration  14: 1193894.335 ops/s
# Warmup Iteration  15: 1246290.654 ops/s
# Warmup Iteration  16: 1212317.273 ops/s
# Warmup Iteration  17: 1188954.025 ops/s
# Warmup Iteration  18: 1228373.880 ops/s
# Warmup Iteration  19: 1219541.982 ops/s
# Warmup Iteration  20: 1203424.591 ops/s
# Warmup Iteration  21: 1218231.560 ops/s
# Warmup Iteration  22: 1150063.908 ops/s
# Warmup Iteration  23: 1225747.280 ops/s
# Warmup Iteration  24: 1207828.751 ops/s
# Warmup Iteration  25: 1185092.830 ops/s
# Warmup Iteration  26: 1210807.945 ops/s
# Warmup Iteration  27: 1223631.966 ops/s
# Warmup Iteration  28: 1176343.831 ops/s
# Warmup Iteration  29: 1242405.794 ops/s
# Warmup Iteration  30: 1174764.563 ops/s
Iteration   1: 1247575.216 ops/s
Iteration   2: 1219501.013 ops/s
Iteration   3: 1172324.368 ops/s
Iteration   4: 1205436.568 ops/s
Iteration   5: 1206760.947 ops/s
Iteration   6: 1193911.699 ops/s
Iteration   7: 1261575.199 ops/s
Iteration   8: 1189809.152 ops/s
Iteration   9: 1217206.300 ops/s
Iteration  10: 976584.786 ops/s
Iteration  11: 1208894.672 ops/s
Iteration  12: 1207976.464 ops/s
Iteration  13: 1189686.898 ops/s
Iteration  14: 1215231.405 ops/s
Iteration  15: 1201526.505 ops/s
Iteration  16: 1236320.962 ops/s
Iteration  17: 1168516.483 ops/s
Iteration  18: 1220252.206 ops/s
Iteration  19: 1181826.637 ops/s
Iteration  20: 1199423.146 ops/s
Iteration  21: 1200644.244 ops/s
Iteration  22: 1204208.300 ops/s
Iteration  23: 1227512.943 ops/s
Iteration  24: 1199536.403 ops/s
Iteration  25: 1227370.704 ops/s
Iteration  26: 1229910.666 ops/s
Iteration  27: 1189343.420 ops/s
Iteration  28: 1210074.115 ops/s
Iteration  29: 1244612.377 ops/s
Iteration  30: 1203220.693 ops/s


Result "io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_parallelFlowableGenericsSignatureTest":
  1201892.483 ±(99.9%) 31797.975 ops/s [Average]
  (min, avg, max) = (976584.786, 1201892.483, 1261575.199), stdev = 47593.716
  CI (99.9%): [1170094.508, 1233690.458] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ConverterTest._Benchmark.benchmark_parallelFlowableGenericsSignatureTest  thrpt   30  1201892.483 ± 31797.975  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fusedEmptyCheck$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fusedEmptyCheck

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1245700.437 ops/s
# Warmup Iteration   2: 6968655.418 ops/s
# Warmup Iteration   3: 7949071.263 ops/s
# Warmup Iteration   4: 9259142.829 ops/s
# Warmup Iteration   5: 9434656.022 ops/s
# Warmup Iteration   6: 8788369.908 ops/s
# Warmup Iteration   7: 9133859.708 ops/s
# Warmup Iteration   8: 9332118.879 ops/s
# Warmup Iteration   9: 8956211.276 ops/s
# Warmup Iteration  10: 9146639.815 ops/s
# Warmup Iteration  11: 8888730.955 ops/s
# Warmup Iteration  12: 8957152.412 ops/s
# Warmup Iteration  13: 9291459.783 ops/s
# Warmup Iteration  14: 8904766.921 ops/s
# Warmup Iteration  15: 9293429.978 ops/s
# Warmup Iteration  16: 9185760.600 ops/s
# Warmup Iteration  17: 8859458.506 ops/s
# Warmup Iteration  18: 9289190.129 ops/s
# Warmup Iteration  19: 8863012.562 ops/s
# Warmup Iteration  20: 9300818.767 ops/s
# Warmup Iteration  21: 8898336.312 ops/s
# Warmup Iteration  22: 9101010.207 ops/s
# Warmup Iteration  23: 9165052.457 ops/s
# Warmup Iteration  24: 9006744.553 ops/s
# Warmup Iteration  25: 9139572.035 ops/s
# Warmup Iteration  26: 9251272.601 ops/s
# Warmup Iteration  27: 9402031.791 ops/s
# Warmup Iteration  28: 8967248.363 ops/s
# Warmup Iteration  29: 9281114.697 ops/s
# Warmup Iteration  30: 8566254.704 ops/s
Iteration   1: 8962136.520 ops/s
Iteration   2: 9186242.365 ops/s
Iteration   3: 9101321.854 ops/s
Iteration   4: 9179924.862 ops/s
Iteration   5: 9322236.321 ops/s
Iteration   6: 8926864.007 ops/s
Iteration   7: 9542529.188 ops/s
Iteration   8: 8898373.873 ops/s
Iteration   9: 9179577.281 ops/s
Iteration  10: 8969156.804 ops/s
Iteration  11: 8941094.852 ops/s
Iteration  12: 9427568.835 ops/s
Iteration  13: 8870170.639 ops/s
Iteration  14: 9316913.347 ops/s
Iteration  15: 9213384.987 ops/s
Iteration  16: 9047175.192 ops/s
Iteration  17: 9079102.136 ops/s
Iteration  18: 9342406.525 ops/s
Iteration  19: 8825220.251 ops/s
Iteration  20: 9342698.109 ops/s
Iteration  21: 9155188.156 ops/s
Iteration  22: 9308908.235 ops/s
Iteration  23: 8918112.605 ops/s
Iteration  24: 9290799.128 ops/s
Iteration  25: 8818128.461 ops/s
Iteration  26: 9035798.476 ops/s
Iteration  27: 9419187.961 ops/s
Iteration  28: 8831534.774 ops/s
Iteration  29: 9648212.418 ops/s
Iteration  30: 9019102.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fusedEmptyCheck":
  9137302.360 ±(99.9%) 149541.491 ops/s [Average]
  (min, avg, max) = (8818128.461, 9137302.360, 9648212.418), stdev = 223826.680
  CI (99.9%): [8987760.870, 9286843.851] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score        Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fusedEmptyCheck  thrpt   30  9137302.360 ± 149541.491  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10465982.545 ops/s
# Warmup Iteration   2: 38649595.680 ops/s
# Warmup Iteration   3: 52739667.163 ops/s
# Warmup Iteration   4: 49802375.171 ops/s
# Warmup Iteration   5: 51521768.793 ops/s
# Warmup Iteration   6: 52251272.044 ops/s
# Warmup Iteration   7: 54027078.208 ops/s
# Warmup Iteration   8: 50926843.650 ops/s
# Warmup Iteration   9: 52010501.905 ops/s
# Warmup Iteration  10: 52942498.434 ops/s
# Warmup Iteration  11: 51144059.233 ops/s
# Warmup Iteration  12: 49180345.620 ops/s
# Warmup Iteration  13: 52349942.173 ops/s
# Warmup Iteration  14: 51882191.543 ops/s
# Warmup Iteration  15: 50380962.933 ops/s
# Warmup Iteration  16: 54183439.944 ops/s
# Warmup Iteration  17: 52472109.541 ops/s
# Warmup Iteration  18: 49922553.359 ops/s
# Warmup Iteration  19: 52008087.819 ops/s
# Warmup Iteration  20: 50397298.048 ops/s
# Warmup Iteration  21: 50827408.845 ops/s
# Warmup Iteration  22: 52680479.985 ops/s
# Warmup Iteration  23: 50783540.812 ops/s
# Warmup Iteration  24: 52704261.273 ops/s
# Warmup Iteration  25: 50136199.108 ops/s
# Warmup Iteration  26: 49857858.157 ops/s
# Warmup Iteration  27: 50534503.540 ops/s
# Warmup Iteration  28: 51917608.586 ops/s
# Warmup Iteration  29: 52361860.098 ops/s
# Warmup Iteration  30: 50855993.184 ops/s
Iteration   1: 52687304.818 ops/s
Iteration   2: 49534171.869 ops/s
Iteration   3: 53368082.489 ops/s
Iteration   4: 45213889.695 ops/s
Iteration   5: 46290496.569 ops/s
Iteration   6: 51239370.837 ops/s
Iteration   7: 51706023.681 ops/s
Iteration   8: 53105294.308 ops/s
Iteration   9: 49493601.514 ops/s
Iteration  10: 53288664.614 ops/s
Iteration  11: 53344934.601 ops/s
Iteration  12: 50682958.732 ops/s
Iteration  13: 50579594.022 ops/s
Iteration  14: 54154929.518 ops/s
Iteration  15: 53171545.503 ops/s
Iteration  16: 50380994.942 ops/s
Iteration  17: 52041940.121 ops/s
Iteration  18: 51693145.668 ops/s
Iteration  19: 50648084.752 ops/s
Iteration  20: 54297009.699 ops/s
Iteration  21: 50358294.351 ops/s
Iteration  22: 52102211.492 ops/s
Iteration  23: 50797803.163 ops/s
Iteration  24: 53086505.564 ops/s
Iteration  25: 50996854.705 ops/s
Iteration  26: 50319505.125 ops/s
Iteration  27: 53236639.358 ops/s
Iteration  28: 49836427.110 ops/s
Iteration  29: 51625220.736 ops/s
Iteration  30: 52634766.999 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_flatMapEmpty":
  51397208.885 ±(99.9%) 1377721.293 ops/s [Average]
  (min, avg, max) = (45213889.695, 51397208.885, 54297009.699), stdev = 2062108.530
  CI (99.9%): [50019487.592, 52774930.179] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score         Error  Units
ObservableFlatMapTest._Benchmark.benchmark_flatMapEmpty  thrpt   30  51397208.885 ± 1377721.293  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7105067.759 ops/s
# Warmup Iteration   2: 12819548.024 ops/s
# Warmup Iteration   3: 21433114.680 ops/s
# Warmup Iteration   4: 20584604.402 ops/s
# Warmup Iteration   5: 21271269.992 ops/s
# Warmup Iteration   6: 20706162.766 ops/s
# Warmup Iteration   7: 20548635.739 ops/s
# Warmup Iteration   8: 21412358.570 ops/s
# Warmup Iteration   9: 20473267.923 ops/s
# Warmup Iteration  10: 21542072.075 ops/s
# Warmup Iteration  11: 19605194.355 ops/s
# Warmup Iteration  12: 21073164.986 ops/s
# Warmup Iteration  13: 20550153.581 ops/s
# Warmup Iteration  14: 20849421.970 ops/s
# Warmup Iteration  15: 20613338.886 ops/s
# Warmup Iteration  16: 21131823.822 ops/s
# Warmup Iteration  17: 20454729.844 ops/s
# Warmup Iteration  18: 20619578.529 ops/s
# Warmup Iteration  19: 21456568.316 ops/s
# Warmup Iteration  20: 21020169.525 ops/s
# Warmup Iteration  21: 21582778.856 ops/s
# Warmup Iteration  22: 20158586.869 ops/s
# Warmup Iteration  23: 20584055.102 ops/s
# Warmup Iteration  24: 21505105.228 ops/s
# Warmup Iteration  25: 19768066.241 ops/s
# Warmup Iteration  26: 20464318.023 ops/s
# Warmup Iteration  27: 21147104.460 ops/s
# Warmup Iteration  28: 20560842.812 ops/s
# Warmup Iteration  29: 21138260.051 ops/s
# Warmup Iteration  30: 20790780.385 ops/s
Iteration   1: 21598125.138 ops/s
Iteration   2: 21418191.939 ops/s
Iteration   3: 21293009.999 ops/s
Iteration   4: 20447924.230 ops/s
Iteration   5: 21706515.792 ops/s
Iteration   6: 20719302.718 ops/s
Iteration   7: 21100524.381 ops/s
Iteration   8: 21206825.729 ops/s
Iteration   9: 20602567.504 ops/s
Iteration  10: 21292823.783 ops/s
Iteration  11: 20601505.747 ops/s
Iteration  12: 20808353.762 ops/s
Iteration  13: 21167681.498 ops/s
Iteration  14: 20792239.140 ops/s
Iteration  15: 21298918.326 ops/s
Iteration  16: 21360644.819 ops/s
Iteration  17: 20469571.803 ops/s
Iteration  18: 20269768.230 ops/s
Iteration  19: 20805570.193 ops/s
Iteration  20: 20822884.194 ops/s
Iteration  21: 20840056.131 ops/s
Iteration  22: 20742654.725 ops/s
Iteration  23: 20938346.857 ops/s
Iteration  24: 21709078.529 ops/s
Iteration  25: 20419110.431 ops/s
Iteration  26: 21655687.132 ops/s
Iteration  27: 21746675.094 ops/s
Iteration  28: 20913184.239 ops/s
Iteration  29: 19796166.053 ops/s
Iteration  30: 21441478.054 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose3":
  20999512.872 ±(99.9%) 322158.093 ops/s [Average]
  (min, avg, max) = (19796166.053, 20999512.872, 21746675.094), stdev = 482191.103
  CI (99.9%): [20677354.780, 21321670.965] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose3  thrpt   30  20999512.872 ± 322158.093  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8728285.949 ops/s
# Warmup Iteration   2: 16801670.187 ops/s
# Warmup Iteration   3: 25095804.694 ops/s
# Warmup Iteration   4: 23670109.406 ops/s
# Warmup Iteration   5: 24670247.362 ops/s
# Warmup Iteration   6: 22741676.172 ops/s
# Warmup Iteration   7: 23840429.920 ops/s
# Warmup Iteration   8: 24646748.885 ops/s
# Warmup Iteration   9: 23471170.574 ops/s
# Warmup Iteration  10: 23126221.930 ops/s
# Warmup Iteration  11: 24146466.090 ops/s
# Warmup Iteration  12: 24658592.893 ops/s
# Warmup Iteration  13: 23733779.652 ops/s
# Warmup Iteration  14: 23988346.264 ops/s
# Warmup Iteration  15: 24530213.999 ops/s
# Warmup Iteration  16: 22807673.440 ops/s
# Warmup Iteration  17: 24012153.849 ops/s
# Warmup Iteration  18: 24340735.907 ops/s
# Warmup Iteration  19: 24062113.648 ops/s
# Warmup Iteration  20: 24348894.320 ops/s
# Warmup Iteration  21: 23074239.939 ops/s
# Warmup Iteration  22: 24564775.614 ops/s
# Warmup Iteration  23: 23445143.211 ops/s
# Warmup Iteration  24: 23443284.508 ops/s
# Warmup Iteration  25: 24581931.782 ops/s
# Warmup Iteration  26: 22703444.436 ops/s
# Warmup Iteration  27: 24281036.359 ops/s
# Warmup Iteration  28: 23085526.603 ops/s
# Warmup Iteration  29: 20455307.521 ops/s
# Warmup Iteration  30: 23752873.704 ops/s
Iteration   1: 24705161.366 ops/s
Iteration   2: 24978667.511 ops/s
Iteration   3: 23276626.785 ops/s
Iteration   4: 24222705.838 ops/s
Iteration   5: 23933129.325 ops/s
Iteration   6: 24631917.014 ops/s
Iteration   7: 24807838.114 ops/s
Iteration   8: 24250660.008 ops/s
Iteration   9: 24734966.313 ops/s
Iteration  10: 23245537.913 ops/s
Iteration  11: 24294982.653 ops/s
Iteration  12: 24460655.461 ops/s
Iteration  13: 24145871.241 ops/s
Iteration  14: 24072331.225 ops/s
Iteration  15: 24977610.538 ops/s
Iteration  16: 24057258.738 ops/s
Iteration  17: 24608073.544 ops/s
Iteration  18: 25026563.331 ops/s
Iteration  19: 23528907.570 ops/s
Iteration  20: 25319892.605 ops/s
Iteration  21: 23834623.845 ops/s
Iteration  22: 24670201.497 ops/s
Iteration  23: 23727665.255 ops/s
Iteration  24: 24775108.102 ops/s
Iteration  25: 24030394.819 ops/s
Iteration  26: 24425060.619 ops/s
Iteration  27: 24282612.552 ops/s
Iteration  28: 23342894.866 ops/s
Iteration  29: 24240925.806 ops/s
Iteration  30: 24656184.451 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose4":
  24308834.297 ±(99.9%) 359594.695 ops/s [Average]
  (min, avg, max) = (23245537.913, 24308834.297, 25319892.605), stdev = 538224.452
  CI (99.9%): [23949239.602, 24668428.992] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose4  thrpt   30  24308834.297 ± 359594.695  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 399110.851 ops/s
# Warmup Iteration   2: 590840.178 ops/s
# Warmup Iteration   3: 673989.902 ops/s
# Warmup Iteration   4: 613558.707 ops/s
# Warmup Iteration   5: 708593.237 ops/s
# Warmup Iteration   6: 691398.672 ops/s
# Warmup Iteration   7: 699035.805 ops/s
# Warmup Iteration   8: 721805.636 ops/s
# Warmup Iteration   9: 707868.528 ops/s
# Warmup Iteration  10: 725700.476 ops/s
# Warmup Iteration  11: 681103.762 ops/s
# Warmup Iteration  12: 696335.786 ops/s
# Warmup Iteration  13: 724657.594 ops/s
# Warmup Iteration  14: 691077.524 ops/s
# Warmup Iteration  15: 705476.393 ops/s
# Warmup Iteration  16: 718943.129 ops/s
# Warmup Iteration  17: 731225.207 ops/s
# Warmup Iteration  18: 758283.286 ops/s
# Warmup Iteration  19: 737529.994 ops/s
# Warmup Iteration  20: 744403.214 ops/s
# Warmup Iteration  21: 767219.832 ops/s
# Warmup Iteration  22: 745448.047 ops/s
# Warmup Iteration  23: 746760.502 ops/s
# Warmup Iteration  24: 751916.502 ops/s
# Warmup Iteration  25: 726334.096 ops/s
# Warmup Iteration  26: 772453.772 ops/s
# Warmup Iteration  27: 734235.902 ops/s
# Warmup Iteration  28: 724974.261 ops/s
# Warmup Iteration  29: 772289.585 ops/s
# Warmup Iteration  30: 753901.727 ops/s
Iteration   1: 757027.563 ops/s
Iteration   2: 734293.028 ops/s
Iteration   3: 761267.774 ops/s
Iteration   4: 733711.153 ops/s
Iteration   5: 727387.803 ops/s
Iteration   6: 748429.339 ops/s
Iteration   7: 742072.177 ops/s
Iteration   8: 738367.329 ops/s
Iteration   9: 761586.217 ops/s
Iteration  10: 739443.416 ops/s
Iteration  11: 763438.760 ops/s
Iteration  12: 729074.860 ops/s
Iteration  13: 754226.577 ops/s
Iteration  14: 778840.302 ops/s
Iteration  15: 729141.828 ops/s
Iteration  16: 747136.708 ops/s
Iteration  17: 738879.450 ops/s
Iteration  18: 755330.333 ops/s
Iteration  19: 758718.127 ops/s
Iteration  20: 730844.165 ops/s
Iteration  21: 776695.843 ops/s
Iteration  22: 718412.513 ops/s
Iteration  23: 746237.505 ops/s
Iteration  24: 763109.461 ops/s
Iteration  25: 730718.263 ops/s
Iteration  26: 765896.591 ops/s
Iteration  27: 723466.984 ops/s
Iteration  28: 744597.579 ops/s
Iteration  29: 743418.373 ops/s
Iteration  30: 710173.843 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipIterableOneIsNull":
  745064.795 ±(99.9%) 11306.491 ops/s [Average]
  (min, avg, max) = (710173.843, 745064.795, 778840.302), stdev = 16923.025
  CI (99.9%): [733758.304, 756371.287] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
SingleZipIterableTest._Benchmark.benchmark_zipIterableOneIsNull  thrpt   30  745064.795 ± 11306.491  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1745189.900 ops/s
# Warmup Iteration   2: 6543951.050 ops/s
# Warmup Iteration   3: 8417145.988 ops/s
# Warmup Iteration   4: 8115373.730 ops/s
# Warmup Iteration   5: 8614183.539 ops/s
# Warmup Iteration   6: 7289254.303 ops/s
# Warmup Iteration   7: 7799561.360 ops/s
# Warmup Iteration   8: 8328600.073 ops/s
# Warmup Iteration   9: 8093416.611 ops/s
# Warmup Iteration  10: 8658343.996 ops/s
# Warmup Iteration  11: 8071695.333 ops/s
# Warmup Iteration  12: 8560066.948 ops/s
# Warmup Iteration  13: 8530024.052 ops/s
# Warmup Iteration  14: 8202509.131 ops/s
# Warmup Iteration  15: 8706955.906 ops/s
# Warmup Iteration  16: 8240857.483 ops/s
# Warmup Iteration  17: 8258204.674 ops/s
# Warmup Iteration  18: 8368558.168 ops/s
# Warmup Iteration  19: 8272692.634 ops/s
# Warmup Iteration  20: 8316150.570 ops/s
# Warmup Iteration  21: 7957154.962 ops/s
# Warmup Iteration  22: 8006350.525 ops/s
# Warmup Iteration  23: 8488837.413 ops/s
# Warmup Iteration  24: 6309562.222 ops/s
# Warmup Iteration  25: 8462688.141 ops/s
# Warmup Iteration  26: 8317823.013 ops/s
# Warmup Iteration  27: 8262551.647 ops/s
# Warmup Iteration  28: 8560727.098 ops/s
# Warmup Iteration  29: 8111628.325 ops/s
# Warmup Iteration  30: 8199729.768 ops/s
Iteration   1: 7974985.299 ops/s
Iteration   2: 8397148.510 ops/s
Iteration   3: 8382694.214 ops/s
Iteration   4: 8288057.510 ops/s
Iteration   5: 8591029.341 ops/s
Iteration   6: 8129929.594 ops/s
Iteration   7: 8324995.324 ops/s
Iteration   8: 8649510.332 ops/s
Iteration   9: 8526432.305 ops/s
Iteration  10: 8118521.899 ops/s
Iteration  11: 8673433.949 ops/s
Iteration  12: 8229479.790 ops/s
Iteration  13: 8602844.101 ops/s
Iteration  14: 8154232.978 ops/s
Iteration  15: 8252880.434 ops/s
Iteration  16: 8347575.179 ops/s
Iteration  17: 8478657.170 ops/s
Iteration  18: 8208128.456 ops/s
Iteration  19: 8572691.323 ops/s
Iteration  20: 8355659.967 ops/s
Iteration  21: 8544510.857 ops/s
Iteration  22: 8633373.267 ops/s
Iteration  23: 8064180.360 ops/s
Iteration  24: 8653347.416 ops/s
Iteration  25: 8671548.596 ops/s
Iteration  26: 8130119.889 ops/s
Iteration  27: 8403708.678 ops/s
Iteration  28: 8201513.123 ops/s
Iteration  29: 8138013.050 ops/s
Iteration  30: 8514316.600 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_dispose":
  8373783.984 ±(99.9%) 139812.103 ops/s [Average]
  (min, avg, max) = (7974985.299, 8373783.984, 8673433.949), stdev = 209264.190
  CI (99.9%): [8233971.880, 8513596.087] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
SingleFlatMapMaybeTest._Benchmark.benchmark_dispose  thrpt   30  8373783.984 ± 139812.103  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1805177.485 ops/s
# Warmup Iteration   2: 5717509.542 ops/s
# Warmup Iteration   3: 6775274.803 ops/s
# Warmup Iteration   4: 7273492.547 ops/s
# Warmup Iteration   5: 7951523.347 ops/s
# Warmup Iteration   6: 7403780.579 ops/s
# Warmup Iteration   7: 7500887.003 ops/s
# Warmup Iteration   8: 7974137.546 ops/s
# Warmup Iteration   9: 7321493.724 ops/s
# Warmup Iteration  10: 7576152.336 ops/s
# Warmup Iteration  11: 7772411.810 ops/s
# Warmup Iteration  12: 7360143.735 ops/s
# Warmup Iteration  13: 7788750.936 ops/s
# Warmup Iteration  14: 7542791.714 ops/s
# Warmup Iteration  15: 7597507.396 ops/s
# Warmup Iteration  16: 7673297.873 ops/s
# Warmup Iteration  17: 7497887.049 ops/s
# Warmup Iteration  18: 7726933.204 ops/s
# Warmup Iteration  19: 7615001.421 ops/s
# Warmup Iteration  20: 7599725.427 ops/s
# Warmup Iteration  21: 7814247.283 ops/s
# Warmup Iteration  22: 7609202.529 ops/s
# Warmup Iteration  23: 7417144.327 ops/s
# Warmup Iteration  24: 7731892.968 ops/s
# Warmup Iteration  25: 7515417.045 ops/s
# Warmup Iteration  26: 7738323.878 ops/s
# Warmup Iteration  27: 7754381.987 ops/s
# Warmup Iteration  28: 7466516.407 ops/s
# Warmup Iteration  29: 7646541.131 ops/s
# Warmup Iteration  30: 7528662.269 ops/s
Iteration   1: 7683894.691 ops/s
Iteration   2: 7407016.480 ops/s
Iteration   3: 7473521.880 ops/s
Iteration   4: 7986924.169 ops/s
Iteration   5: 7424166.336 ops/s
Iteration   6: 8015418.183 ops/s
Iteration   7: 7547001.630 ops/s
Iteration   8: 7748851.546 ops/s
Iteration   9: 7579270.913 ops/s
Iteration  10: 7644898.380 ops/s
Iteration  11: 7793096.637 ops/s
Iteration  12: 7359360.839 ops/s
Iteration  13: 7801024.572 ops/s
Iteration  14: 7696965.989 ops/s
Iteration  15: 7714427.705 ops/s
Iteration  16: 7552964.612 ops/s
Iteration  17: 7735979.160 ops/s
Iteration  18: 7521063.396 ops/s
Iteration  19: 7616748.888 ops/s
Iteration  20: 7905750.085 ops/s
Iteration  21: 7441773.361 ops/s
Iteration  22: 7669777.123 ops/s
Iteration  23: 7552615.370 ops/s
Iteration  24: 7870506.056 ops/s
Iteration  25: 7384394.040 ops/s
Iteration  26: 7945845.129 ops/s
Iteration  27: 7433608.197 ops/s
Iteration  28: 7637001.705 ops/s
Iteration  29: 7954086.388 ops/s
Iteration  30: 7412137.432 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_dispose":
  7650336.363 ±(99.9%) 130405.548 ops/s [Average]
  (min, avg, max) = (7359360.839, 7650336.363, 8015418.183), stdev = 195184.899
  CI (99.9%): [7519930.815, 7780741.911] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
SingleConcatMapMaybeTest._Benchmark.benchmark_dispose  thrpt   30  7650336.363 ± 130405.548  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 630374.769 ops/s
# Warmup Iteration   2: 3117012.553 ops/s
# Warmup Iteration   3: 4037955.581 ops/s
# Warmup Iteration   4: 4778807.436 ops/s
# Warmup Iteration   5: 4473136.344 ops/s
# Warmup Iteration   6: 4647656.171 ops/s
# Warmup Iteration   7: 4697160.277 ops/s
# Warmup Iteration   8: 4699331.005 ops/s
# Warmup Iteration   9: 4428238.025 ops/s
# Warmup Iteration  10: 4667787.595 ops/s
# Warmup Iteration  11: 4635999.959 ops/s
# Warmup Iteration  12: 4446509.339 ops/s
# Warmup Iteration  13: 4836951.467 ops/s
# Warmup Iteration  14: 4658242.193 ops/s
# Warmup Iteration  15: 4534760.112 ops/s
# Warmup Iteration  16: 4584688.031 ops/s
# Warmup Iteration  17: 4542811.157 ops/s
# Warmup Iteration  18: 3688931.446 ops/s
# Warmup Iteration  19: 4527149.273 ops/s
# Warmup Iteration  20: 4665788.820 ops/s
# Warmup Iteration  21: 4682242.015 ops/s
# Warmup Iteration  22: 4659270.191 ops/s
# Warmup Iteration  23: 4675990.467 ops/s
# Warmup Iteration  24: 4702853.887 ops/s
# Warmup Iteration  25: 4567006.792 ops/s
# Warmup Iteration  26: 4668595.173 ops/s
# Warmup Iteration  27: 4733488.041 ops/s
# Warmup Iteration  28: 4540576.923 ops/s
# Warmup Iteration  29: 4702652.308 ops/s
# Warmup Iteration  30: 4830039.155 ops/s
Iteration   1: 4532677.439 ops/s
Iteration   2: 4601864.219 ops/s
Iteration   3: 4848285.603 ops/s
Iteration   4: 4553732.499 ops/s
Iteration   5: 4656659.206 ops/s
Iteration   6: 4758757.002 ops/s
Iteration   7: 4499486.696 ops/s
Iteration   8: 4694077.722 ops/s
Iteration   9: 4694489.284 ops/s
Iteration  10: 4802880.480 ops/s
Iteration  11: 4504350.936 ops/s
Iteration  12: 4684141.994 ops/s
Iteration  13: 4546037.817 ops/s
Iteration  14: 4666168.601 ops/s
Iteration  15: 4713372.838 ops/s
Iteration  16: 4611417.742 ops/s
Iteration  17: 4656260.595 ops/s
Iteration  18: 4757806.223 ops/s
Iteration  19: 4494259.290 ops/s
Iteration  20: 4613164.126 ops/s
Iteration  21: 4782823.455 ops/s
Iteration  22: 4573325.378 ops/s
Iteration  23: 4713781.443 ops/s
Iteration  24: 4521622.445 ops/s
Iteration  25: 4786263.655 ops/s
Iteration  26: 4592226.725 ops/s
Iteration  27: 4556980.382 ops/s
Iteration  28: 4733269.340 ops/s
Iteration  29: 4535216.683 ops/s
Iteration  30: 4524030.075 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_flatMapObservable":
  4640314.330 ±(99.9%) 69133.039 ops/s [Average]
  (min, avg, max) = (4494259.290, 4640314.330, 4848285.603), stdev = 103475.085
  CI (99.9%): [4571181.291, 4709447.368] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SingleFlatMapTest._Benchmark.benchmark_flatMapObservable  thrpt   30  4640314.330 ± 69133.039  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipIterableTwoIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipIterableTwoIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 366190.960 ops/s
# Warmup Iteration   2: 582912.990 ops/s
# Warmup Iteration   3: 653036.014 ops/s
# Warmup Iteration   4: 622341.766 ops/s
# Warmup Iteration   5: 692485.972 ops/s
# Warmup Iteration   6: 605475.108 ops/s
# Warmup Iteration   7: 712773.628 ops/s
# Warmup Iteration   8: 688735.693 ops/s
# Warmup Iteration   9: 700431.330 ops/s
# Warmup Iteration  10: 681886.072 ops/s
# Warmup Iteration  11: 675212.711 ops/s
# Warmup Iteration  12: 725368.179 ops/s
# Warmup Iteration  13: 660606.304 ops/s
# Warmup Iteration  14: 713862.335 ops/s
# Warmup Iteration  15: 675213.155 ops/s
# Warmup Iteration  16: 696450.972 ops/s
# Warmup Iteration  17: 740095.962 ops/s
# Warmup Iteration  18: 737093.920 ops/s
# Warmup Iteration  19: 755167.641 ops/s
# Warmup Iteration  20: 720347.982 ops/s
# Warmup Iteration  21: 762442.333 ops/s
# Warmup Iteration  22: 762214.837 ops/s
# Warmup Iteration  23: 712067.165 ops/s
# Warmup Iteration  24: 757044.582 ops/s
# Warmup Iteration  25: 715371.104 ops/s
# Warmup Iteration  26: 720295.841 ops/s
# Warmup Iteration  27: 755617.077 ops/s
# Warmup Iteration  28: 709948.137 ops/s
# Warmup Iteration  29: 758961.533 ops/s
# Warmup Iteration  30: 741880.331 ops/s
Iteration   1: 701865.266 ops/s
Iteration   2: 750870.002 ops/s
Iteration   3: 722144.034 ops/s
Iteration   4: 767111.883 ops/s
Iteration   5: 713488.571 ops/s
Iteration   6: 768682.876 ops/s
Iteration   7: 741759.515 ops/s
Iteration   8: 747281.867 ops/s
Iteration   9: 741577.914 ops/s
Iteration  10: 725559.494 ops/s
Iteration  11: 753741.752 ops/s
Iteration  12: 760931.243 ops/s
Iteration  13: 744439.358 ops/s
Iteration  14: 750739.391 ops/s
Iteration  15: 758319.600 ops/s
Iteration  16: 708807.993 ops/s
Iteration  17: 762455.676 ops/s
Iteration  18: 709010.356 ops/s
Iteration  19: 740358.845 ops/s
Iteration  20: 722103.929 ops/s
Iteration  21: 734980.288 ops/s
Iteration  22: 706628.282 ops/s
Iteration  23: 731281.844 ops/s
Iteration  24: 753646.194 ops/s
Iteration  25: 719328.858 ops/s
Iteration  26: 753259.317 ops/s
Iteration  27: 713712.183 ops/s
Iteration  28: 733087.609 ops/s
Iteration  29: 732651.979 ops/s
Iteration  30: 737135.137 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_zipIterableTwoIsNull":
  736898.709 ±(99.9%) 12888.039 ops/s [Average]
  (min, avg, max) = (701865.266, 736898.709, 768682.876), stdev = 19290.212
  CI (99.9%): [724010.669, 749786.748] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
SingleZipIterableTest._Benchmark.benchmark_zipIterableTwoIsNull  thrpt   30  736898.709 ± 12888.039  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecution$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecution

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 684034.320 ops/s
# Warmup Iteration   2: 3771385.788 ops/s
# Warmup Iteration   3: 5246240.855 ops/s
# Warmup Iteration   4: 5928510.443 ops/s
# Warmup Iteration   5: 6492851.504 ops/s
# Warmup Iteration   6: 6246925.550 ops/s
# Warmup Iteration   7: 5993443.946 ops/s
# Warmup Iteration   8: 5985423.564 ops/s
# Warmup Iteration   9: 6176128.399 ops/s
# Warmup Iteration  10: 6090098.226 ops/s
# Warmup Iteration  11: 6204236.022 ops/s
# Warmup Iteration  12: 5605872.418 ops/s
# Warmup Iteration  13: 5895464.075 ops/s
# Warmup Iteration  14: 6349332.445 ops/s
# Warmup Iteration  15: 6170524.883 ops/s
# Warmup Iteration  16: 6160841.068 ops/s
# Warmup Iteration  17: 6025438.927 ops/s
# Warmup Iteration  18: 6465750.557 ops/s
# Warmup Iteration  19: 6085816.119 ops/s
# Warmup Iteration  20: 6519968.324 ops/s
# Warmup Iteration  21: 5929039.835 ops/s
# Warmup Iteration  22: 6358615.459 ops/s
# Warmup Iteration  23: 6069474.251 ops/s
# Warmup Iteration  24: 6360126.854 ops/s
# Warmup Iteration  25: 6258675.074 ops/s
# Warmup Iteration  26: 6196176.549 ops/s
# Warmup Iteration  27: 6567998.291 ops/s
# Warmup Iteration  28: 6144952.946 ops/s
# Warmup Iteration  29: 6197487.089 ops/s
# Warmup Iteration  30: 6289791.637 ops/s
Iteration   1: 6548451.961 ops/s
Iteration   2: 6252235.527 ops/s
Iteration   3: 6112250.093 ops/s
Iteration   4: 6333943.647 ops/s
Iteration   5: 6096309.632 ops/s
Iteration   6: 6380835.229 ops/s
Iteration   7: 6197986.398 ops/s
Iteration   8: 6366489.138 ops/s
Iteration   9: 6223209.268 ops/s
Iteration  10: 6469770.196 ops/s
Iteration  11: 6255425.449 ops/s
Iteration  12: 6398636.436 ops/s
Iteration  13: 6177757.334 ops/s
Iteration  14: 6155872.487 ops/s
Iteration  15: 6336002.016 ops/s
Iteration  16: 6284484.093 ops/s
Iteration  17: 6462563.997 ops/s
Iteration  18: 6221870.668 ops/s
Iteration  19: 6192617.844 ops/s
Iteration  20: 6275504.123 ops/s
Iteration  21: 5953484.384 ops/s
Iteration  22: 6326558.928 ops/s
Iteration  23: 6066886.109 ops/s
Iteration  24: 6316988.104 ops/s
Iteration  25: 6297075.572 ops/s
Iteration  26: 5910344.129 ops/s
Iteration  27: 6428865.026 ops/s
Iteration  28: 6374880.701 ops/s
Iteration  29: 6180206.023 ops/s
Iteration  30: 6548446.856 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecution":
  6271531.712 ±(99.9%) 103268.329 ops/s [Average]
  (min, avg, max) = (5910344.129, 6271531.712, 6548451.961), stdev = 154567.185
  CI (99.9%): [6168263.383, 6374800.041] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecution  thrpt   30  6271531.712 ± 103268.329  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecution$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecution

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 619939.966 ops/s
# Warmup Iteration   2: 2255337.416 ops/s
# Warmup Iteration   3: 5274150.883 ops/s
# Warmup Iteration   4: 6099076.275 ops/s
# Warmup Iteration   5: 6208697.258 ops/s
# Warmup Iteration   6: 6222212.442 ops/s
# Warmup Iteration   7: 6056619.328 ops/s
# Warmup Iteration   8: 6319399.221 ops/s
# Warmup Iteration   9: 6093001.531 ops/s
# Warmup Iteration  10: 6316965.230 ops/s
# Warmup Iteration  11: 5957741.084 ops/s
# Warmup Iteration  12: 6282851.914 ops/s
# Warmup Iteration  13: 6269276.699 ops/s
# Warmup Iteration  14: 6194856.180 ops/s
# Warmup Iteration  15: 6393206.203 ops/s
# Warmup Iteration  16: 5937908.573 ops/s
# Warmup Iteration  17: 6492885.804 ops/s
# Warmup Iteration  18: 6434989.715 ops/s
# Warmup Iteration  19: 6282531.220 ops/s
# Warmup Iteration  20: 6362453.554 ops/s
# Warmup Iteration  21: 6262040.615 ops/s
# Warmup Iteration  22: 6316831.318 ops/s
# Warmup Iteration  23: 6285803.772 ops/s
# Warmup Iteration  24: 6264948.467 ops/s
# Warmup Iteration  25: 6476991.978 ops/s
# Warmup Iteration  26: 6107292.936 ops/s
# Warmup Iteration  27: 6481929.727 ops/s
# Warmup Iteration  28: 6342935.223 ops/s
# Warmup Iteration  29: 6371207.380 ops/s
# Warmup Iteration  30: 6493668.719 ops/s
Iteration   1: 6110552.428 ops/s
Iteration   2: 6401628.159 ops/s
Iteration   3: 6270686.045 ops/s
Iteration   4: 6322358.244 ops/s
Iteration   5: 6445695.382 ops/s
Iteration   6: 6257618.562 ops/s
Iteration   7: 6444021.085 ops/s
Iteration   8: 6588365.022 ops/s
Iteration   9: 6145091.777 ops/s
Iteration  10: 6470692.609 ops/s
Iteration  11: 6229792.994 ops/s
Iteration  12: 6638498.227 ops/s
Iteration  13: 6460087.143 ops/s
Iteration  14: 6092044.911 ops/s
Iteration  15: 6373114.442 ops/s
Iteration  16: 6668443.968 ops/s
Iteration  17: 6184200.382 ops/s
Iteration  18: 6365347.467 ops/s
Iteration  19: 6168496.346 ops/s
Iteration  20: 6337644.571 ops/s
Iteration  21: 6171525.023 ops/s
Iteration  22: 6245654.010 ops/s
Iteration  23: 6213856.889 ops/s
Iteration  24: 6475685.995 ops/s
Iteration  25: 6280889.214 ops/s
Iteration  26: 6417632.719 ops/s
Iteration  27: 6124308.901 ops/s
Iteration  28: 6514140.398 ops/s
Iteration  29: 6201226.736 ops/s
Iteration  30: 6377621.304 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecution":
  6333230.698 ±(99.9%) 105625.160 ops/s [Average]
  (min, avg, max) = (6092044.911, 6333230.698, 6668443.968), stdev = 158094.779
  CI (99.9%): [6227605.538, 6438855.859] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecution  thrpt   30  6333230.698 ± 105625.160  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100623.053 ops/s
# Warmup Iteration   2: 472230.635 ops/s
# Warmup Iteration   3: 553881.239 ops/s
# Warmup Iteration   4: 554452.253 ops/s
# Warmup Iteration   5: 616798.675 ops/s
# Warmup Iteration   6: 605888.237 ops/s
# Warmup Iteration   7: 520680.125 ops/s
# Warmup Iteration   8: 591130.739 ops/s
# Warmup Iteration   9: 599328.470 ops/s
# Warmup Iteration  10: 625149.010 ops/s
# Warmup Iteration  11: 579884.071 ops/s
# Warmup Iteration  12: 612750.244 ops/s
# Warmup Iteration  13: 584975.881 ops/s
# Warmup Iteration  14: 605785.803 ops/s
# Warmup Iteration  15: 615357.958 ops/s
# Warmup Iteration  16: 588883.353 ops/s
# Warmup Iteration  17: 642942.972 ops/s
# Warmup Iteration  18: 639132.051 ops/s
# Warmup Iteration  19: 613929.665 ops/s
# Warmup Iteration  20: 651947.640 ops/s
# Warmup Iteration  21: 612300.707 ops/s
# Warmup Iteration  22: 640032.095 ops/s
# Warmup Iteration  23: 632204.713 ops/s
# Warmup Iteration  24: 628631.211 ops/s
# Warmup Iteration  25: 648472.442 ops/s
# Warmup Iteration  26: 615841.374 ops/s
# Warmup Iteration  27: 634212.730 ops/s
# Warmup Iteration  28: 650163.852 ops/s
# Warmup Iteration  29: 631531.986 ops/s
# Warmup Iteration  30: 605085.254 ops/s
Iteration   1: 654051.109 ops/s
Iteration   2: 629765.671 ops/s
Iteration   3: 646088.748 ops/s
Iteration   4: 628333.088 ops/s
Iteration   5: 651505.613 ops/s
Iteration   6: 626590.314 ops/s
Iteration   7: 664436.032 ops/s
Iteration   8: 650317.015 ops/s
Iteration   9: 622997.755 ops/s
Iteration  10: 654923.158 ops/s
Iteration  11: 632317.362 ops/s
Iteration  12: 620244.296 ops/s
Iteration  13: 652285.253 ops/s
Iteration  14: 629464.554 ops/s
Iteration  15: 644026.281 ops/s
Iteration  16: 625194.433 ops/s
Iteration  17: 649710.274 ops/s
Iteration  18: 627392.861 ops/s
Iteration  19: 642772.573 ops/s
Iteration  20: 624547.272 ops/s
Iteration  21: 647292.263 ops/s
Iteration  22: 626630.460 ops/s
Iteration  23: 627067.263 ops/s
Iteration  24: 641268.733 ops/s
Iteration  25: 623917.428 ops/s
Iteration  26: 668079.360 ops/s
Iteration  27: 616856.246 ops/s
Iteration  28: 643677.014 ops/s
Iteration  29: 642407.574 ops/s
Iteration  30: 639834.214 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapNull":
  638466.474 ±(99.9%) 9101.338 ops/s [Average]
  (min, avg, max) = (616856.246, 638466.474, 668079.360), stdev = 13622.455
  CI (99.9%): [629365.136, 647567.812] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapNull  thrpt   30  638466.474 ± 9101.338  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75263.107 ops/s
# Warmup Iteration   2: 507372.239 ops/s
# Warmup Iteration   3: 622788.015 ops/s
# Warmup Iteration   4: 590986.761 ops/s
# Warmup Iteration   5: 611226.304 ops/s
# Warmup Iteration   6: 614256.221 ops/s
# Warmup Iteration   7: 623786.330 ops/s
# Warmup Iteration   8: 609493.327 ops/s
# Warmup Iteration   9: 600453.205 ops/s
# Warmup Iteration  10: 625665.148 ops/s
# Warmup Iteration  11: 591878.749 ops/s
# Warmup Iteration  12: 627591.667 ops/s
# Warmup Iteration  13: 611441.833 ops/s
# Warmup Iteration  14: 590827.905 ops/s
# Warmup Iteration  15: 630489.696 ops/s
# Warmup Iteration  16: 599675.517 ops/s
# Warmup Iteration  17: 663660.495 ops/s
# Warmup Iteration  18: 619540.690 ops/s
# Warmup Iteration  19: 633531.383 ops/s
# Warmup Iteration  20: 654571.805 ops/s
# Warmup Iteration  21: 645043.207 ops/s
# Warmup Iteration  22: 663300.616 ops/s
# Warmup Iteration  23: 640065.705 ops/s
# Warmup Iteration  24: 643343.149 ops/s
# Warmup Iteration  25: 667447.623 ops/s
# Warmup Iteration  26: 668297.899 ops/s
# Warmup Iteration  27: 631061.256 ops/s
# Warmup Iteration  28: 645188.134 ops/s
# Warmup Iteration  29: 649546.404 ops/s
# Warmup Iteration  30: 614180.267 ops/s
Iteration   1: 646776.526 ops/s
Iteration   2: 635390.869 ops/s
Iteration   3: 662617.699 ops/s
Iteration   4: 650948.597 ops/s
Iteration   5: 609625.028 ops/s
Iteration   6: 637987.039 ops/s
Iteration   7: 637890.818 ops/s
Iteration   8: 612045.652 ops/s
Iteration   9: 657735.517 ops/s
Iteration  10: 668427.449 ops/s
Iteration  11: 672234.348 ops/s
Iteration  12: 642752.374 ops/s
Iteration  13: 641005.882 ops/s
Iteration  14: 658336.507 ops/s
Iteration  15: 638406.645 ops/s
Iteration  16: 649972.101 ops/s
Iteration  17: 642449.475 ops/s
Iteration  18: 631426.980 ops/s
Iteration  19: 683523.237 ops/s
Iteration  20: 679929.000 ops/s
Iteration  21: 617975.264 ops/s
Iteration  22: 666234.744 ops/s
Iteration  23: 656124.324 ops/s
Iteration  24: 647741.397 ops/s
Iteration  25: 637968.305 ops/s
Iteration  26: 646952.213 ops/s
Iteration  27: 658854.531 ops/s
Iteration  28: 647826.143 ops/s
Iteration  29: 659078.524 ops/s
Iteration  30: 637809.458 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNull":
  647868.222 ±(99.9%) 11810.218 ops/s [Average]
  (min, avg, max) = (609625.028, 647868.222, 683523.237), stdev = 17676.979
  CI (99.9%): [636058.004, 659678.439] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNull  thrpt   30  647868.222 ± 11810.218  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_flowableGenericsSignatureTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_flowableGenericsSignatureTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16755213.259 ops/s
# Warmup Iteration   2: 19330969.296 ops/s
# Warmup Iteration   3: 39041579.695 ops/s
# Warmup Iteration   4: 37362619.576 ops/s
# Warmup Iteration   5: 38015967.560 ops/s
# Warmup Iteration   6: 38975675.740 ops/s
# Warmup Iteration   7: 37019213.584 ops/s
# Warmup Iteration   8: 38310794.592 ops/s
# Warmup Iteration   9: 37673143.541 ops/s
# Warmup Iteration  10: 38734679.707 ops/s
# Warmup Iteration  11: 38316023.098 ops/s
# Warmup Iteration  12: 36357976.602 ops/s
# Warmup Iteration  13: 39421022.654 ops/s
# Warmup Iteration  14: 37928016.859 ops/s
# Warmup Iteration  15: 38860428.108 ops/s
# Warmup Iteration  16: 37637791.288 ops/s
# Warmup Iteration  17: 39018147.437 ops/s
# Warmup Iteration  18: 38028091.410 ops/s
# Warmup Iteration  19: 37738726.960 ops/s
# Warmup Iteration  20: 39811275.450 ops/s
# Warmup Iteration  21: 39429687.248 ops/s
# Warmup Iteration  22: 37134776.500 ops/s
# Warmup Iteration  23: 39068951.721 ops/s
# Warmup Iteration  24: 37518741.337 ops/s
# Warmup Iteration  25: 37479394.580 ops/s
# Warmup Iteration  26: 38357595.873 ops/s
# Warmup Iteration  27: 39651969.303 ops/s
# Warmup Iteration  28: 37687025.287 ops/s
# Warmup Iteration  29: 39038427.747 ops/s
# Warmup Iteration  30: 38821767.794 ops/s
Iteration   1: 37209907.530 ops/s
Iteration   2: 39866483.507 ops/s
Iteration   3: 37733393.416 ops/s
Iteration   4: 38629822.207 ops/s
Iteration   5: 38137943.486 ops/s
Iteration   6: 37832087.396 ops/s
Iteration   7: 38382108.776 ops/s
Iteration   8: 37010226.466 ops/s
Iteration   9: 39017147.302 ops/s
Iteration  10: 36744256.802 ops/s
Iteration  11: 39309016.352 ops/s
Iteration  12: 36828272.343 ops/s
Iteration  13: 38088039.990 ops/s
Iteration  14: 38169380.495 ops/s
Iteration  15: 36357920.460 ops/s
Iteration  16: 36178514.739 ops/s
Iteration  17: 38534984.129 ops/s
Iteration  18: 37658482.724 ops/s
Iteration  19: 37982118.815 ops/s
Iteration  20: 38592639.606 ops/s
Iteration  21: 35812916.804 ops/s
Iteration  22: 39355415.835 ops/s
Iteration  23: 37494584.620 ops/s
Iteration  24: 39496855.046 ops/s
Iteration  25: 38016031.290 ops/s
Iteration  26: 36501795.640 ops/s
Iteration  27: 38515227.652 ops/s
Iteration  28: 37439286.501 ops/s
Iteration  29: 36806575.826 ops/s
Iteration  30: 39588493.297 ops/s


Result "io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_flowableGenericsSignatureTest":
  37909664.302 ±(99.9%) 722308.622 ops/s [Average]
  (min, avg, max) = (35812916.804, 37909664.302, 39866483.507), stdev = 1081117.623
  CI (99.9%): [37187355.680, 38631972.924] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ConverterTest._Benchmark.benchmark_flowableGenericsSignatureTest  thrpt   30  37909664.302 ± 722308.622  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_emptyIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_emptyIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1888763.924 ops/s
# Warmup Iteration   2: 5549729.466 ops/s
# Warmup Iteration   3: 8817515.273 ops/s
# Warmup Iteration   4: 8391418.324 ops/s
# Warmup Iteration   5: 8928842.694 ops/s
# Warmup Iteration   6: 8741583.476 ops/s
# Warmup Iteration   7: 8283021.195 ops/s
# Warmup Iteration   8: 8574585.346 ops/s
# Warmup Iteration   9: 8578943.035 ops/s
# Warmup Iteration  10: 8780025.187 ops/s
# Warmup Iteration  11: 8417524.713 ops/s
# Warmup Iteration  12: 8544698.157 ops/s
# Warmup Iteration  13: 8757416.526 ops/s
# Warmup Iteration  14: 8424090.097 ops/s
# Warmup Iteration  15: 8896805.009 ops/s
# Warmup Iteration  16: 8354298.318 ops/s
# Warmup Iteration  17: 8513221.608 ops/s
# Warmup Iteration  18: 9026259.454 ops/s
# Warmup Iteration  19: 8836300.681 ops/s
# Warmup Iteration  20: 8473927.826 ops/s
# Warmup Iteration  21: 8743790.913 ops/s
# Warmup Iteration  22: 8564217.579 ops/s
# Warmup Iteration  23: 8813947.188 ops/s
# Warmup Iteration  24: 8401531.831 ops/s
# Warmup Iteration  25: 8497836.084 ops/s
# Warmup Iteration  26: 8855680.891 ops/s
# Warmup Iteration  27: 8789862.819 ops/s
# Warmup Iteration  28: 8413176.453 ops/s
# Warmup Iteration  29: 8952292.409 ops/s
# Warmup Iteration  30: 8896263.931 ops/s
Iteration   1: 8591410.800 ops/s
Iteration   2: 8388328.682 ops/s
Iteration   3: 8980882.987 ops/s
Iteration   4: 8427551.290 ops/s
Iteration   5: 8801029.495 ops/s
Iteration   6: 8466782.872 ops/s
Iteration   7: 8767835.737 ops/s
Iteration   8: 8670448.791 ops/s
Iteration   9: 8437641.520 ops/s
Iteration  10: 8880028.462 ops/s
Iteration  11: 8312984.567 ops/s
Iteration  12: 8906206.929 ops/s
Iteration  13: 8512963.201 ops/s
Iteration  14: 8305023.628 ops/s
Iteration  15: 8473216.062 ops/s
Iteration  16: 8558183.781 ops/s
Iteration  17: 8786033.842 ops/s
Iteration  18: 8543539.227 ops/s
Iteration  19: 8669364.045 ops/s
Iteration  20: 8502711.918 ops/s
Iteration  21: 8393007.341 ops/s
Iteration  22: 8737967.032 ops/s
Iteration  23: 8484214.833 ops/s
Iteration  24: 8890619.482 ops/s
Iteration  25: 8898101.253 ops/s
Iteration  26: 8220113.743 ops/s
Iteration  27: 8781160.875 ops/s
Iteration  28: 7648227.985 ops/s
Iteration  29: 7711334.527 ops/s
Iteration  30: 8268192.977 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_emptyIterable":
  8533836.929 ±(99.9%) 209684.879 ops/s [Average]
  (min, avg, max) = (7648227.985, 8533836.929, 8980882.987), stdev = 313846.479
  CI (99.9%): [8324152.050, 8743521.809] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score        Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_emptyIterable  thrpt   30  8533836.929 ± 209684.879  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 591947.702 ops/s
# Warmup Iteration   2: 2328059.105 ops/s
# Warmup Iteration   3: 2812655.906 ops/s
# Warmup Iteration   4: 3040757.793 ops/s
# Warmup Iteration   5: 3300006.268 ops/s
# Warmup Iteration   6: 3081847.812 ops/s
# Warmup Iteration   7: 3236810.330 ops/s
# Warmup Iteration   8: 3209044.026 ops/s
# Warmup Iteration   9: 3012656.796 ops/s
# Warmup Iteration  10: 3208780.682 ops/s
# Warmup Iteration  11: 3255192.932 ops/s
# Warmup Iteration  12: 2972411.705 ops/s
# Warmup Iteration  13: 3238361.618 ops/s
# Warmup Iteration  14: 3273593.221 ops/s
# Warmup Iteration  15: 3186211.959 ops/s
# Warmup Iteration  16: 3276157.730 ops/s
# Warmup Iteration  17: 3196960.326 ops/s
# Warmup Iteration  18: 3123240.265 ops/s
# Warmup Iteration  19: 3255731.082 ops/s
# Warmup Iteration  20: 3168527.937 ops/s
# Warmup Iteration  21: 3208563.860 ops/s
# Warmup Iteration  22: 3065720.174 ops/s
# Warmup Iteration  23: 3240136.817 ops/s
# Warmup Iteration  24: 3220116.407 ops/s
# Warmup Iteration  25: 3137823.567 ops/s
# Warmup Iteration  26: 3182526.076 ops/s
# Warmup Iteration  27: 3212881.997 ops/s
# Warmup Iteration  28: 3189570.023 ops/s
# Warmup Iteration  29: 3218501.088 ops/s
# Warmup Iteration  30: 3045621.121 ops/s
Iteration   1: 3277641.824 ops/s
Iteration   2: 3100259.342 ops/s
Iteration   3: 3288059.464 ops/s
Iteration   4: 3162944.223 ops/s
Iteration   5: 3115706.843 ops/s
Iteration   6: 3245024.029 ops/s
Iteration   7: 3101579.465 ops/s
Iteration   8: 3165264.131 ops/s
Iteration   9: 3275627.322 ops/s
Iteration  10: 3156659.023 ops/s
Iteration  11: 3172839.352 ops/s
Iteration  12: 3194559.011 ops/s
Iteration  13: 3190873.731 ops/s
Iteration  14: 3227601.712 ops/s
Iteration  15: 3062572.353 ops/s
Iteration  16: 3162584.344 ops/s
Iteration  17: 3097220.326 ops/s
Iteration  18: 3279410.727 ops/s
Iteration  19: 3049062.975 ops/s
Iteration  20: 3256874.383 ops/s
Iteration  21: 3095434.952 ops/s
Iteration  22: 3241482.651 ops/s
Iteration  23: 3116394.415 ops/s
Iteration  24: 3145282.382 ops/s
Iteration  25: 3130466.080 ops/s
Iteration  26: 3196029.919 ops/s
Iteration  27: 3193384.368 ops/s
Iteration  28: 3096473.745 ops/s
Iteration  29: 3167109.101 ops/s
Iteration  30: 3257635.276 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_normal":
  3174068.582 ±(99.9%) 46420.053 ops/s [Average]
  (min, avg, max) = (3049062.975, 3174068.582, 3288059.464), stdev = 69479.355
  CI (99.9%): [3127648.529, 3220488.635] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableConcatWithSingleTest._Benchmark.benchmark_normal  thrpt   30  3174068.582 ± 46420.053  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2248743.720 ops/s
# Warmup Iteration   2: 5276088.545 ops/s
# Warmup Iteration   3: 6908199.893 ops/s
# Warmup Iteration   4: 7019725.210 ops/s
# Warmup Iteration   5: 7066157.855 ops/s
# Warmup Iteration   6: 6927183.022 ops/s
# Warmup Iteration   7: 7003032.842 ops/s
# Warmup Iteration   8: 7272615.291 ops/s
# Warmup Iteration   9: 7015984.688 ops/s
# Warmup Iteration  10: 7315186.228 ops/s
# Warmup Iteration  11: 7086225.665 ops/s
# Warmup Iteration  12: 6815808.484 ops/s
# Warmup Iteration  13: 7054207.200 ops/s
# Warmup Iteration  14: 7021638.225 ops/s
# Warmup Iteration  15: 7154996.463 ops/s
# Warmup Iteration  16: 7203826.863 ops/s
# Warmup Iteration  17: 6962695.878 ops/s
# Warmup Iteration  18: 7123196.528 ops/s
# Warmup Iteration  19: 6975408.061 ops/s
# Warmup Iteration  20: 7159687.462 ops/s
# Warmup Iteration  21: 7104913.238 ops/s
# Warmup Iteration  22: 6964982.653 ops/s
# Warmup Iteration  23: 7331752.843 ops/s
# Warmup Iteration  24: 6880226.032 ops/s
# Warmup Iteration  25: 7363334.510 ops/s
# Warmup Iteration  26: 6771951.386 ops/s
# Warmup Iteration  27: 6859420.999 ops/s
# Warmup Iteration  28: 7135828.336 ops/s
# Warmup Iteration  29: 6904054.115 ops/s
# Warmup Iteration  30: 7395502.496 ops/s
Iteration   1: 7052815.149 ops/s
Iteration   2: 6734481.472 ops/s
Iteration   3: 7374144.076 ops/s
Iteration   4: 6954834.765 ops/s
Iteration   5: 6902233.271 ops/s
Iteration   6: 7181682.265 ops/s
Iteration   7: 6866721.816 ops/s
Iteration   8: 6991314.389 ops/s
Iteration   9: 6888048.233 ops/s
Iteration  10: 7186273.306 ops/s
Iteration  11: 6947986.191 ops/s
Iteration  12: 7050498.087 ops/s
Iteration  13: 7180520.048 ops/s
Iteration  14: 6894778.741 ops/s
Iteration  15: 6884454.826 ops/s
Iteration  16: 7219816.491 ops/s
Iteration  17: 6886720.703 ops/s
Iteration  18: 7318226.212 ops/s
Iteration  19: 6874357.884 ops/s
Iteration  20: 7107727.463 ops/s
Iteration  21: 7100575.806 ops/s
Iteration  22: 6987917.059 ops/s
Iteration  23: 5507326.259 ops/s
Iteration  24: 7014891.631 ops/s
Iteration  25: 7068307.052 ops/s
Iteration  26: 7071776.579 ops/s
Iteration  27: 6848994.985 ops/s
Iteration  28: 7023110.658 ops/s
Iteration  29: 7311856.062 ops/s
Iteration  30: 6838072.431 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSuccess":
  6975682.130 ±(99.9%) 213178.657 ops/s [Average]
  (min, avg, max) = (5507326.259, 6975682.130, 7374144.076), stdev = 319075.803
  CI (99.9%): [6762503.473, 7188860.788] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnSuccess  thrpt   30  6975682.130 ± 213178.657  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withSingleDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withSingleDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2403343.347 ops/s
# Warmup Iteration   2: 6057381.301 ops/s
# Warmup Iteration   3: 6680773.682 ops/s
# Warmup Iteration   4: 7476269.848 ops/s
# Warmup Iteration   5: 7703338.117 ops/s
# Warmup Iteration   6: 7605416.576 ops/s
# Warmup Iteration   7: 7509249.891 ops/s
# Warmup Iteration   8: 7755056.252 ops/s
# Warmup Iteration   9: 7549629.363 ops/s
# Warmup Iteration  10: 7795786.490 ops/s
# Warmup Iteration  11: 7330585.985 ops/s
# Warmup Iteration  12: 7609766.393 ops/s
# Warmup Iteration  13: 8027343.672 ops/s
# Warmup Iteration  14: 7513098.811 ops/s
# Warmup Iteration  15: 7756111.621 ops/s
# Warmup Iteration  16: 7497478.426 ops/s
# Warmup Iteration  17: 7636957.760 ops/s
# Warmup Iteration  18: 7844611.924 ops/s
# Warmup Iteration  19: 7384982.616 ops/s
# Warmup Iteration  20: 7729431.921 ops/s
# Warmup Iteration  21: 7251466.725 ops/s
# Warmup Iteration  22: 7632620.056 ops/s
# Warmup Iteration  23: 7692671.533 ops/s
# Warmup Iteration  24: 7386939.943 ops/s
# Warmup Iteration  25: 7742495.907 ops/s
# Warmup Iteration  26: 7548155.595 ops/s
# Warmup Iteration  27: 7564772.533 ops/s
# Warmup Iteration  28: 7862616.348 ops/s
# Warmup Iteration  29: 7482913.061 ops/s
# Warmup Iteration  30: 7838570.745 ops/s
Iteration   1: 7420850.366 ops/s
Iteration   2: 7611536.530 ops/s
Iteration   3: 7683423.784 ops/s
Iteration   4: 7616823.504 ops/s
Iteration   5: 7543395.169 ops/s
Iteration   6: 7413327.316 ops/s
Iteration   7: 7732505.419 ops/s
Iteration   8: 7414519.929 ops/s
Iteration   9: 7640753.010 ops/s
Iteration  10: 7759065.276 ops/s
Iteration  11: 7300340.214 ops/s
Iteration  12: 7660552.677 ops/s
Iteration  13: 7869474.151 ops/s
Iteration  14: 7393648.948 ops/s
Iteration  15: 7876447.773 ops/s
Iteration  16: 7633949.378 ops/s
Iteration  17: 7462899.661 ops/s
Iteration  18: 7820478.305 ops/s
Iteration  19: 7833590.970 ops/s
Iteration  20: 7350220.095 ops/s
Iteration  21: 7552803.085 ops/s
Iteration  22: 7671006.461 ops/s
Iteration  23: 7786274.726 ops/s
Iteration  24: 7334231.892 ops/s
Iteration  25: 7928692.298 ops/s
Iteration  26: 7438894.374 ops/s
Iteration  27: 7781674.095 ops/s
Iteration  28: 7580315.757 ops/s
Iteration  29: 7544207.106 ops/s
Iteration  30: 7838934.090 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withSingleDispose":
  7616494.545 ±(99.9%) 121499.859 ops/s [Average]
  (min, avg, max) = (7300340.214, 7616494.545, 7928692.298), stdev = 181855.282
  CI (99.9%): [7494994.687, 7737994.404] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
SingleDelayTest._Benchmark.benchmark_withSingleDispose  thrpt   30  7616494.545 ± 121499.859  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_observerSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_observerSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1584598.088 ops/s
# Warmup Iteration   2: 5593909.238 ops/s
# Warmup Iteration   3: 6559988.045 ops/s
# Warmup Iteration   4: 7150105.364 ops/s
# Warmup Iteration   5: 7221608.096 ops/s
# Warmup Iteration   6: 7422099.236 ops/s
# Warmup Iteration   7: 7129555.924 ops/s
# Warmup Iteration   8: 7171657.953 ops/s
# Warmup Iteration   9: 7306863.915 ops/s
# Warmup Iteration  10: 7135909.887 ops/s
# Warmup Iteration  11: 7098146.343 ops/s
# Warmup Iteration  12: 7405150.535 ops/s
# Warmup Iteration  13: 7182777.165 ops/s
# Warmup Iteration  14: 7330662.438 ops/s
# Warmup Iteration  15: 6937158.361 ops/s
# Warmup Iteration  16: 7424619.797 ops/s
# Warmup Iteration  17: 7363153.132 ops/s
# Warmup Iteration  18: 7063560.813 ops/s
# Warmup Iteration  19: 7542803.290 ops/s
# Warmup Iteration  20: 7257171.099 ops/s
# Warmup Iteration  21: 7391422.962 ops/s
# Warmup Iteration  22: 7402301.441 ops/s
# Warmup Iteration  23: 7199777.317 ops/s
# Warmup Iteration  24: 7354189.399 ops/s
# Warmup Iteration  25: 7483734.501 ops/s
# Warmup Iteration  26: 7314700.458 ops/s
# Warmup Iteration  27: 7204198.941 ops/s
# Warmup Iteration  28: 7145434.545 ops/s
# Warmup Iteration  29: 7612235.275 ops/s
# Warmup Iteration  30: 7381571.432 ops/s
Iteration   1: 7433895.042 ops/s
Iteration   2: 7374874.450 ops/s
Iteration   3: 7029409.575 ops/s
Iteration   4: 7420288.141 ops/s
Iteration   5: 7031805.241 ops/s
Iteration   6: 7478141.159 ops/s
Iteration   7: 7111292.980 ops/s
Iteration   8: 7156562.830 ops/s
Iteration   9: 7583029.566 ops/s
Iteration  10: 7075117.058 ops/s
Iteration  11: 7535085.402 ops/s
Iteration  12: 7163612.707 ops/s
Iteration  13: 7521288.214 ops/s
Iteration  14: 7276240.131 ops/s
Iteration  15: 7196693.478 ops/s
Iteration  16: 7418167.670 ops/s
Iteration  17: 7346270.836 ops/s
Iteration  18: 6627933.413 ops/s
Iteration  19: 6542507.588 ops/s
Iteration  20: 7556838.142 ops/s
Iteration  21: 7194521.395 ops/s
Iteration  22: 7476711.720 ops/s
Iteration  23: 7422112.576 ops/s
Iteration  24: 7202627.545 ops/s
Iteration  25: 7505790.950 ops/s
Iteration  26: 7317601.938 ops/s
Iteration  27: 7419379.015 ops/s
Iteration  28: 7299588.708 ops/s
Iteration  29: 7371733.479 ops/s
Iteration  30: 7506853.529 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleBlockingSubscribeTest._Benchmark.benchmark_observerSuccess":
  7286532.482 ±(99.9%) 166890.310 ops/s [Average]
  (min, avg, max) = (6542507.588, 7286532.482, 7583029.566), stdev = 249793.579
  CI (99.9%): [7119642.172, 7453422.793] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
SingleBlockingSubscribeTest._Benchmark.benchmark_observerSuccess  thrpt   30  7286532.482 ± 166890.310  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2470409.814 ops/s
# Warmup Iteration   2: 5161881.985 ops/s
# Warmup Iteration   3: 7058296.554 ops/s
# Warmup Iteration   4: 6826815.055 ops/s
# Warmup Iteration   5: 7023839.960 ops/s
# Warmup Iteration   6: 7142500.689 ops/s
# Warmup Iteration   7: 6816093.347 ops/s
# Warmup Iteration   8: 6976568.115 ops/s
# Warmup Iteration   9: 6819818.671 ops/s
# Warmup Iteration  10: 6728440.097 ops/s
# Warmup Iteration  11: 6950318.070 ops/s
# Warmup Iteration  12: 6806678.998 ops/s
# Warmup Iteration  13: 7257563.733 ops/s
# Warmup Iteration  14: 6887565.912 ops/s
# Warmup Iteration  15: 7048216.829 ops/s
# Warmup Iteration  16: 6964365.969 ops/s
# Warmup Iteration  17: 6837782.072 ops/s
# Warmup Iteration  18: 7059383.633 ops/s
# Warmup Iteration  19: 7110450.072 ops/s
# Warmup Iteration  20: 6693444.590 ops/s
# Warmup Iteration  21: 7194365.429 ops/s
# Warmup Iteration  22: 6837218.065 ops/s
# Warmup Iteration  23: 7033576.286 ops/s
# Warmup Iteration  24: 6715281.065 ops/s
# Warmup Iteration  25: 7125216.912 ops/s
# Warmup Iteration  26: 6862941.861 ops/s
# Warmup Iteration  27: 7096678.304 ops/s
# Warmup Iteration  28: 6843175.313 ops/s
# Warmup Iteration  29: 7047084.428 ops/s
# Warmup Iteration  30: 7084371.735 ops/s
Iteration   1: 6860501.632 ops/s
Iteration   2: 7013474.904 ops/s
Iteration   3: 6756228.238 ops/s
Iteration   4: 7033343.447 ops/s
Iteration   5: 6927144.563 ops/s
Iteration   6: 6958405.344 ops/s
Iteration   7: 7085313.577 ops/s
Iteration   8: 6553746.644 ops/s
Iteration   9: 6983903.584 ops/s
Iteration  10: 6929004.854 ops/s
Iteration  11: 6888642.231 ops/s
Iteration  12: 7309921.579 ops/s
Iteration  13: 6781613.268 ops/s
Iteration  14: 6910754.139 ops/s
Iteration  15: 6498005.837 ops/s
Iteration  16: 6791437.637 ops/s
Iteration  17: 6834622.649 ops/s
Iteration  18: 6874989.987 ops/s
Iteration  19: 7319950.990 ops/s
Iteration  20: 6807511.926 ops/s
Iteration  21: 7208864.756 ops/s
Iteration  22: 7052748.681 ops/s
Iteration  23: 6673076.059 ops/s
Iteration  24: 7323457.619 ops/s
Iteration  25: 7256260.684 ops/s
Iteration  26: 6713210.701 ops/s
Iteration  27: 7231326.577 ops/s
Iteration  28: 7073695.174 ops/s
Iteration  29: 6869206.705 ops/s
Iteration  30: 7116289.648 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapValue":
  6954555.121 ±(99.9%) 145447.032 ops/s [Average]
  (min, avg, max) = (6498005.837, 6954555.121, 7323457.619), stdev = 217698.287
  CI (99.9%): [6809108.089, 7100002.153] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score        Error  Units
SingleMapTest._Benchmark.benchmark_mapValue  thrpt   30  6954555.121 ± 145447.032  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2086482.680 ops/s
# Warmup Iteration   2: 4988176.158 ops/s
# Warmup Iteration   3: 6598477.162 ops/s
# Warmup Iteration   4: 6970062.378 ops/s
# Warmup Iteration   5: 7000113.361 ops/s
# Warmup Iteration   6: 6785709.513 ops/s
# Warmup Iteration   7: 6901017.892 ops/s
# Warmup Iteration   8: 6830333.685 ops/s
# Warmup Iteration   9: 7142861.949 ops/s
# Warmup Iteration  10: 6713269.091 ops/s
# Warmup Iteration  11: 7014645.808 ops/s
# Warmup Iteration  12: 6556235.471 ops/s
# Warmup Iteration  13: 7253663.088 ops/s
# Warmup Iteration  14: 6727897.472 ops/s
# Warmup Iteration  15: 7033350.985 ops/s
# Warmup Iteration  16: 6636014.192 ops/s
# Warmup Iteration  17: 7110830.958 ops/s
# Warmup Iteration  18: 6932716.342 ops/s
# Warmup Iteration  19: 6768335.852 ops/s
# Warmup Iteration  20: 7048293.903 ops/s
# Warmup Iteration  21: 6610759.627 ops/s
# Warmup Iteration  22: 6839565.434 ops/s
# Warmup Iteration  23: 7039191.962 ops/s
# Warmup Iteration  24: 6605816.771 ops/s
# Warmup Iteration  25: 6871035.596 ops/s
# Warmup Iteration  26: 6644485.523 ops/s
# Warmup Iteration  27: 6901931.460 ops/s
# Warmup Iteration  28: 6760178.051 ops/s
# Warmup Iteration  29: 6698972.623 ops/s
# Warmup Iteration  30: 7153247.873 ops/s
Iteration   1: 6758890.691 ops/s
Iteration   2: 6911175.705 ops/s
Iteration   3: 6868732.436 ops/s
Iteration   4: 6738570.434 ops/s
Iteration   5: 6784725.856 ops/s
Iteration   6: 6938105.518 ops/s
Iteration   7: 7037910.701 ops/s
Iteration   8: 6695343.058 ops/s
Iteration   9: 6850395.586 ops/s
Iteration  10: 7210317.476 ops/s
Iteration  11: 6589792.447 ops/s
Iteration  12: 6807317.129 ops/s
Iteration  13: 4648848.635 ops/s
Iteration  14: 6817357.230 ops/s
Iteration  15: 6669942.872 ops/s
Iteration  16: 6854857.000 ops/s
Iteration  17: 6954495.257 ops/s
Iteration  18: 6843092.033 ops/s
Iteration  19: 7078547.001 ops/s
Iteration  20: 6835470.888 ops/s
Iteration  21: 6887730.201 ops/s
Iteration  22: 6870823.713 ops/s
Iteration  23: 6981625.673 ops/s
Iteration  24: 7103000.479 ops/s
Iteration  25: 7028409.501 ops/s
Iteration  26: 6854487.706 ops/s
Iteration  27: 7226455.780 ops/s
Iteration  28: 7040838.663 ops/s
Iteration  29: 6844478.154 ops/s
Iteration  30: 7132146.125 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccess":
  6828796.132 ±(99.9%) 293506.965 ops/s [Average]
  (min, avg, max) = (4648848.635, 6828796.132, 7226455.780), stdev = 439307.441
  CI (99.9%): [6535289.167, 7122303.097] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccess  thrpt   30  6828796.132 ± 293506.965  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 121097.158 ops/s
# Warmup Iteration   2: 565088.197 ops/s
# Warmup Iteration   3: 596731.814 ops/s
# Warmup Iteration   4: 665831.470 ops/s
# Warmup Iteration   5: 653976.687 ops/s
# Warmup Iteration   6: 646386.827 ops/s
# Warmup Iteration   7: 658794.925 ops/s
# Warmup Iteration   8: 638072.215 ops/s
# Warmup Iteration   9: 639044.098 ops/s
# Warmup Iteration  10: 673514.468 ops/s
# Warmup Iteration  11: 641870.262 ops/s
# Warmup Iteration  12: 636405.146 ops/s
# Warmup Iteration  13: 657796.497 ops/s
# Warmup Iteration  14: 630169.924 ops/s
# Warmup Iteration  15: 642373.036 ops/s
# Warmup Iteration  16: 681197.932 ops/s
# Warmup Iteration  17: 689763.643 ops/s
# Warmup Iteration  18: 680353.733 ops/s
# Warmup Iteration  19: 700548.894 ops/s
# Warmup Iteration  20: 674726.834 ops/s
# Warmup Iteration  21: 682932.231 ops/s
# Warmup Iteration  22: 687972.602 ops/s
# Warmup Iteration  23: 675189.496 ops/s
# Warmup Iteration  24: 696856.711 ops/s
# Warmup Iteration  25: 685223.358 ops/s
# Warmup Iteration  26: 656946.602 ops/s
# Warmup Iteration  27: 707459.739 ops/s
# Warmup Iteration  28: 680223.093 ops/s
# Warmup Iteration  29: 681067.951 ops/s
# Warmup Iteration  30: 686499.428 ops/s
Iteration   1: 678369.159 ops/s
Iteration   2: 702596.014 ops/s
Iteration   3: 670277.287 ops/s
Iteration   4: 710857.905 ops/s
Iteration   5: 703483.537 ops/s
Iteration   6: 684197.678 ops/s
Iteration   7: 693068.813 ops/s
Iteration   8: 674614.611 ops/s
Iteration   9: 715939.775 ops/s
Iteration  10: 680004.798 ops/s
Iteration  11: 668703.889 ops/s
Iteration  12: 683595.604 ops/s
Iteration  13: 696583.544 ops/s
Iteration  14: 671133.103 ops/s
Iteration  15: 708829.292 ops/s
Iteration  16: 704384.057 ops/s
Iteration  17: 668926.986 ops/s
Iteration  18: 689775.132 ops/s
Iteration  19: 680127.846 ops/s
Iteration  20: 675874.915 ops/s
Iteration  21: 692390.122 ops/s
Iteration  22: 666284.522 ops/s
Iteration  23: 702306.173 ops/s
Iteration  24: 649942.996 ops/s
Iteration  25: 703787.993 ops/s
Iteration  26: 696491.560 ops/s
Iteration  27: 698865.596 ops/s
Iteration  28: 690543.177 ops/s
Iteration  29: 697715.624 ops/s
Iteration  30: 692014.302 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrash":
  688389.534 ±(99.9%) 10505.203 ops/s [Average]
  (min, avg, max) = (649942.996, 688389.534, 715939.775), stdev = 15723.694
  CI (99.9%): [677884.331, 698894.736] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrash  thrpt   30  688389.534 ± 10505.203  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_onSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_onSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1984062.304 ops/s
# Warmup Iteration   2: 5283501.617 ops/s
# Warmup Iteration   3: 7597609.812 ops/s
# Warmup Iteration   4: 7055411.957 ops/s
# Warmup Iteration   5: 7440280.153 ops/s
# Warmup Iteration   6: 7234613.671 ops/s
# Warmup Iteration   7: 7088636.918 ops/s
# Warmup Iteration   8: 7382324.281 ops/s
# Warmup Iteration   9: 7070804.546 ops/s
# Warmup Iteration  10: 7529046.188 ops/s
# Warmup Iteration  11: 7406447.042 ops/s
# Warmup Iteration  12: 7281350.286 ops/s
# Warmup Iteration  13: 7215705.362 ops/s
# Warmup Iteration  14: 7162521.608 ops/s
# Warmup Iteration  15: 7077184.668 ops/s
# Warmup Iteration  16: 7400195.973 ops/s
# Warmup Iteration  17: 7142977.596 ops/s
# Warmup Iteration  18: 7412907.447 ops/s
# Warmup Iteration  19: 7298473.206 ops/s
# Warmup Iteration  20: 7191803.657 ops/s
# Warmup Iteration  21: 7464480.230 ops/s
# Warmup Iteration  22: 6966904.701 ops/s
# Warmup Iteration  23: 7412217.371 ops/s
# Warmup Iteration  24: 7212921.300 ops/s
# Warmup Iteration  25: 7188663.442 ops/s
# Warmup Iteration  26: 7029496.226 ops/s
# Warmup Iteration  27: 7392002.242 ops/s
# Warmup Iteration  28: 7248742.810 ops/s
# Warmup Iteration  29: 7318380.929 ops/s
# Warmup Iteration  30: 7281675.455 ops/s
Iteration   1: 7051191.668 ops/s
Iteration   2: 7381511.104 ops/s
Iteration   3: 7288514.126 ops/s
Iteration   4: 7420171.405 ops/s
Iteration   5: 7331113.350 ops/s
Iteration   6: 7004474.319 ops/s
Iteration   7: 5741692.388 ops/s
Iteration   8: 6409264.129 ops/s
Iteration   9: 6998791.933 ops/s
Iteration  10: 7108354.881 ops/s
Iteration  11: 7545036.879 ops/s
Iteration  12: 6838904.404 ops/s
Iteration  13: 7508590.404 ops/s
Iteration  14: 7216402.143 ops/s
Iteration  15: 7004280.027 ops/s
Iteration  16: 7445669.453 ops/s
Iteration  17: 7097666.915 ops/s
Iteration  18: 7344193.774 ops/s
Iteration  19: 7247935.919 ops/s
Iteration  20: 7588987.854 ops/s
Iteration  21: 7117607.636 ops/s
Iteration  22: 7338039.189 ops/s
Iteration  23: 7602330.238 ops/s
Iteration  24: 7056186.542 ops/s
Iteration  25: 7222438.175 ops/s
Iteration  26: 7465504.551 ops/s
Iteration  27: 7081211.858 ops/s
Iteration  28: 7359251.504 ops/s
Iteration  29: 7115221.866 ops/s
Iteration  30: 7191770.607 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_onSuccess":
  7170743.641 ±(99.9%) 244900.921 ops/s [Average]
  (min, avg, max) = (5741692.388, 7170743.641, 7602330.238), stdev = 366556.198
  CI (99.9%): [6925842.720, 7415644.563] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
SingleDetachTest._Benchmark.benchmark_onSuccess  thrpt   30  7170743.641 ± 244900.921  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_contains$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_contains

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 909650.236 ops/s
# Warmup Iteration   2: 2394915.723 ops/s
# Warmup Iteration   3: 3362096.413 ops/s
# Warmup Iteration   4: 3976378.826 ops/s
# Warmup Iteration   5: 3843008.310 ops/s
# Warmup Iteration   6: 4062438.042 ops/s
# Warmup Iteration   7: 3890681.346 ops/s
# Warmup Iteration   8: 3993216.432 ops/s
# Warmup Iteration   9: 3944653.560 ops/s
# Warmup Iteration  10: 3925134.408 ops/s
# Warmup Iteration  11: 3938662.410 ops/s
# Warmup Iteration  12: 4052776.633 ops/s
# Warmup Iteration  13: 3953272.162 ops/s
# Warmup Iteration  14: 3972865.363 ops/s
# Warmup Iteration  15: 3853291.103 ops/s
# Warmup Iteration  16: 4010034.050 ops/s
# Warmup Iteration  17: 3977997.513 ops/s
# Warmup Iteration  18: 3820590.012 ops/s
# Warmup Iteration  19: 4100380.791 ops/s
# Warmup Iteration  20: 3817666.439 ops/s
# Warmup Iteration  21: 3901582.545 ops/s
# Warmup Iteration  22: 4010718.318 ops/s
# Warmup Iteration  23: 3898470.893 ops/s
# Warmup Iteration  24: 3915899.716 ops/s
# Warmup Iteration  25: 4083320.026 ops/s
# Warmup Iteration  26: 3846935.021 ops/s
# Warmup Iteration  27: 3846796.767 ops/s
# Warmup Iteration  28: 3983598.176 ops/s
# Warmup Iteration  29: 3877136.143 ops/s
# Warmup Iteration  30: 3950398.008 ops/s
Iteration   1: 3821781.613 ops/s
Iteration   2: 3923811.183 ops/s
Iteration   3: 4050211.338 ops/s
Iteration   4: 3802940.041 ops/s
Iteration   5: 4056453.724 ops/s
Iteration   6: 3815611.524 ops/s
Iteration   7: 3966922.883 ops/s
Iteration   8: 4055053.481 ops/s
Iteration   9: 3895232.257 ops/s
Iteration  10: 3970401.216 ops/s
Iteration  11: 3856613.932 ops/s
Iteration  12: 3840268.887 ops/s
Iteration  13: 4057612.688 ops/s
Iteration  14: 3914796.386 ops/s
Iteration  15: 3950143.171 ops/s
Iteration  16: 3949444.916 ops/s
Iteration  17: 3941603.605 ops/s
Iteration  18: 3975717.552 ops/s
Iteration  19: 3797421.626 ops/s
Iteration  20: 4185036.251 ops/s
Iteration  21: 4015590.579 ops/s
Iteration  22: 3781019.300 ops/s
Iteration  23: 4063600.733 ops/s
Iteration  24: 3811911.384 ops/s
Iteration  25: 4033114.441 ops/s
Iteration  26: 4031675.015 ops/s
Iteration  27: 3769332.551 ops/s
Iteration  28: 4055686.728 ops/s
Iteration  29: 3943056.636 ops/s
Iteration  30: 3820265.177 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_contains":
  3938411.027 ±(99.9%) 72430.367 ops/s [Average]
  (min, avg, max) = (3769332.551, 3938411.027, 4185036.251), stdev = 108410.372
  CI (99.9%): [3865980.660, 4010841.394] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
SingleMiscTest._Benchmark.benchmark_contains  thrpt   30  3938411.027 ± 72430.367  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 191116.101 ops/s
# Warmup Iteration   2: 331917.785 ops/s
# Warmup Iteration   3: 336581.956 ops/s
# Warmup Iteration   4: 337707.926 ops/s
# Warmup Iteration   5: 365552.097 ops/s
# Warmup Iteration   6: 360077.320 ops/s
# Warmup Iteration   7: 322655.379 ops/s
# Warmup Iteration   8: 370812.013 ops/s
# Warmup Iteration   9: 370001.899 ops/s
# Warmup Iteration  10: 375185.829 ops/s
# Warmup Iteration  11: 361614.483 ops/s
# Warmup Iteration  12: 369066.147 ops/s
# Warmup Iteration  13: 362022.883 ops/s
# Warmup Iteration  14: 373004.560 ops/s
# Warmup Iteration  15: 387152.989 ops/s
# Warmup Iteration  16: 359598.322 ops/s
# Warmup Iteration  17: 394231.068 ops/s
# Warmup Iteration  18: 385668.258 ops/s
# Warmup Iteration  19: 398645.793 ops/s
# Warmup Iteration  20: 393026.598 ops/s
# Warmup Iteration  21: 387355.963 ops/s
# Warmup Iteration  22: 400244.163 ops/s
# Warmup Iteration  23: 398108.156 ops/s
# Warmup Iteration  24: 380733.039 ops/s
# Warmup Iteration  25: 384553.018 ops/s
# Warmup Iteration  26: 409979.391 ops/s
# Warmup Iteration  27: 397882.928 ops/s
# Warmup Iteration  28: 381075.664 ops/s
# Warmup Iteration  29: 396321.552 ops/s
# Warmup Iteration  30: 385798.281 ops/s
Iteration   1: 398863.298 ops/s
Iteration   2: 263035.187 ops/s
Iteration   3: 391372.137 ops/s
Iteration   4: 401695.631 ops/s
Iteration   5: 376640.190 ops/s
Iteration   6: 400729.321 ops/s
Iteration   7: 379415.433 ops/s
Iteration   8: 390350.129 ops/s
Iteration   9: 401427.436 ops/s
Iteration  10: 402407.936 ops/s
Iteration  11: 372838.015 ops/s
Iteration  12: 390080.821 ops/s
Iteration  13: 379981.279 ops/s
Iteration  14: 386547.161 ops/s
Iteration  15: 387852.004 ops/s
Iteration  16: 384255.439 ops/s
Iteration  17: 402466.940 ops/s
Iteration  18: 388770.080 ops/s
Iteration  19: 402845.285 ops/s
Iteration  20: 379663.123 ops/s
Iteration  21: 401615.529 ops/s
Iteration  22: 381650.521 ops/s
Iteration  23: 390892.098 ops/s
Iteration  24: 404717.627 ops/s
Iteration  25: 377148.712 ops/s
Iteration  26: 395643.906 ops/s
Iteration  27: 385156.329 ops/s
Iteration  28: 394620.017 ops/s
Iteration  29: 399180.819 ops/s
Iteration  30: 378142.312 ops/s


Result "io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_cancel":
  386333.490 ±(99.9%) 16822.782 ops/s [Average]
  (min, avg, max) = (263035.187, 386333.490, 404717.627), stdev = 25179.550
  CI (99.9%): [369510.709, 403156.272] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
FutureSingleObserverTest._Benchmark.benchmark_cancel  thrpt   30  386333.490 ± 16822.782  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_rangeWithOverflow3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_rangeWithOverflow3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23456365.513 ops/s
# Warmup Iteration   2: 44232822.138 ops/s
# Warmup Iteration   3: 56438790.776 ops/s
# Warmup Iteration   4: 58962693.987 ops/s
# Warmup Iteration   5: 58420639.455 ops/s
# Warmup Iteration   6: 58698283.323 ops/s
# Warmup Iteration   7: 56550915.494 ops/s
# Warmup Iteration   8: 59362100.282 ops/s
# Warmup Iteration   9: 55725245.577 ops/s
# Warmup Iteration  10: 56367870.389 ops/s
# Warmup Iteration  11: 60363085.870 ops/s
# Warmup Iteration  12: 56650347.342 ops/s
# Warmup Iteration  13: 59386415.700 ops/s
# Warmup Iteration  14: 55602268.638 ops/s
# Warmup Iteration  15: 59115757.748 ops/s
# Warmup Iteration  16: 57742356.088 ops/s
# Warmup Iteration  17: 57707334.791 ops/s
# Warmup Iteration  18: 58112491.356 ops/s
# Warmup Iteration  19: 59217832.759 ops/s
# Warmup Iteration  20: 56218300.031 ops/s
# Warmup Iteration  21: 60085554.048 ops/s
# Warmup Iteration  22: 56327714.379 ops/s
# Warmup Iteration  23: 58390652.180 ops/s
# Warmup Iteration  24: 57028225.483 ops/s
# Warmup Iteration  25: 57362710.221 ops/s
# Warmup Iteration  26: 58796074.629 ops/s
# Warmup Iteration  27: 58940396.520 ops/s
# Warmup Iteration  28: 57359454.474 ops/s
# Warmup Iteration  29: 59833806.196 ops/s
# Warmup Iteration  30: 55393653.119 ops/s
Iteration   1: 58405716.560 ops/s
Iteration   2: 56814121.906 ops/s
Iteration   3: 59051985.538 ops/s
Iteration   4: 58480812.064 ops/s
Iteration   5: 57224216.427 ops/s
Iteration   6: 58932555.839 ops/s
Iteration   7: 57853057.786 ops/s
Iteration   8: 58240456.562 ops/s
Iteration   9: 58322260.025 ops/s
Iteration  10: 58828769.710 ops/s
Iteration  11: 55843841.578 ops/s
Iteration  12: 59759241.633 ops/s
Iteration  13: 58151031.348 ops/s
Iteration  14: 58401969.387 ops/s
Iteration  15: 56460102.610 ops/s
Iteration  16: 56715253.578 ops/s
Iteration  17: 58730993.955 ops/s
Iteration  18: 56901022.759 ops/s
Iteration  19: 59234536.004 ops/s
Iteration  20: 55494172.434 ops/s
Iteration  21: 58382218.624 ops/s
Iteration  22: 59597855.899 ops/s
Iteration  23: 55728073.748 ops/s
Iteration  24: 58239948.330 ops/s
Iteration  25: 57629356.657 ops/s
Iteration  26: 58529095.313 ops/s
Iteration  27: 57597834.419 ops/s
Iteration  28: 58857582.096 ops/s
Iteration  29: 59938226.498 ops/s
Iteration  30: 55682502.559 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_rangeWithOverflow3":
  57934293.728 ±(99.9%) 832042.686 ops/s [Average]
  (min, avg, max) = (55494172.434, 57934293.728, 59938226.498), stdev = 1245362.417
  CI (99.9%): [57102251.042, 58766336.414] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
FlowableRangeTest._Benchmark.benchmark_rangeWithOverflow3  thrpt   30  57934293.728 ± 832042.686  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_onErrorSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_onErrorSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2162381.437 ops/s
# Warmup Iteration   2: 5049341.181 ops/s
# Warmup Iteration   3: 7095662.668 ops/s
# Warmup Iteration   4: 7142722.224 ops/s
# Warmup Iteration   5: 7160217.871 ops/s
# Warmup Iteration   6: 7037885.399 ops/s
# Warmup Iteration   7: 7119291.908 ops/s
# Warmup Iteration   8: 7502270.640 ops/s
# Warmup Iteration   9: 6927709.379 ops/s
# Warmup Iteration  10: 7315959.662 ops/s
# Warmup Iteration  11: 7080034.661 ops/s
# Warmup Iteration  12: 6997275.044 ops/s
# Warmup Iteration  13: 7419951.574 ops/s
# Warmup Iteration  14: 7435768.799 ops/s
# Warmup Iteration  15: 6881048.655 ops/s
# Warmup Iteration  16: 7070010.243 ops/s
# Warmup Iteration  17: 7242537.186 ops/s
# Warmup Iteration  18: 7046108.552 ops/s
# Warmup Iteration  19: 7125873.593 ops/s
# Warmup Iteration  20: 7493223.857 ops/s
# Warmup Iteration  21: 6953944.351 ops/s
# Warmup Iteration  22: 7357616.172 ops/s
# Warmup Iteration  23: 7027015.194 ops/s
# Warmup Iteration  24: 7038699.296 ops/s
# Warmup Iteration  25: 7451121.549 ops/s
# Warmup Iteration  26: 7168443.128 ops/s
# Warmup Iteration  27: 5507935.110 ops/s
# Warmup Iteration  28: 6870508.097 ops/s
# Warmup Iteration  29: 7279972.780 ops/s
# Warmup Iteration  30: 7363520.295 ops/s
Iteration   1: 7101498.591 ops/s
Iteration   2: 7056854.110 ops/s
Iteration   3: 7346811.614 ops/s
Iteration   4: 6973870.069 ops/s
Iteration   5: 7413039.482 ops/s
Iteration   6: 7105918.418 ops/s
Iteration   7: 7335639.130 ops/s
Iteration   8: 7479001.878 ops/s
Iteration   9: 7137910.818 ops/s
Iteration  10: 7465660.037 ops/s
Iteration  11: 7113639.781 ops/s
Iteration  12: 7495032.492 ops/s
Iteration  13: 7478954.329 ops/s
Iteration  14: 7446275.152 ops/s
Iteration  15: 7157196.920 ops/s
Iteration  16: 7276498.710 ops/s
Iteration  17: 7030896.611 ops/s
Iteration  18: 7416860.127 ops/s
Iteration  19: 7452193.463 ops/s
Iteration  20: 7310216.966 ops/s
Iteration  21: 7421138.769 ops/s
Iteration  22: 6958310.685 ops/s
Iteration  23: 7621643.733 ops/s
Iteration  24: 7321182.777 ops/s
Iteration  25: 7038123.466 ops/s
Iteration  26: 7256029.058 ops/s
Iteration  27: 7145380.731 ops/s
Iteration  28: 7367548.101 ops/s
Iteration  29: 7253197.243 ops/s
Iteration  30: 7182377.267 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_onErrorSuccess":
  7271963.351 ±(99.9%) 119501.411 ops/s [Average]
  (min, avg, max) = (6958310.685, 7271963.351, 7621643.733), stdev = 178864.100
  CI (99.9%): [7152461.939, 7391464.762] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
SingleDoOnTest._Benchmark.benchmark_onErrorSuccess  thrpt   30  7271963.351 ± 119501.411  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 110097.992 ops/s
# Warmup Iteration   2: 547837.553 ops/s
# Warmup Iteration   3: 628135.358 ops/s
# Warmup Iteration   4: 574365.325 ops/s
# Warmup Iteration   5: 587088.491 ops/s
# Warmup Iteration   6: 635911.620 ops/s
# Warmup Iteration   7: 664967.397 ops/s
# Warmup Iteration   8: 635735.860 ops/s
# Warmup Iteration   9: 655609.937 ops/s
# Warmup Iteration  10: 633170.062 ops/s
# Warmup Iteration  11: 621277.445 ops/s
# Warmup Iteration  12: 674722.439 ops/s
# Warmup Iteration  13: 615666.313 ops/s
# Warmup Iteration  14: 644360.647 ops/s
# Warmup Iteration  15: 670774.760 ops/s
# Warmup Iteration  16: 640467.177 ops/s
# Warmup Iteration  17: 684415.060 ops/s
# Warmup Iteration  18: 672112.857 ops/s
# Warmup Iteration  19: 669105.905 ops/s
# Warmup Iteration  20: 699784.037 ops/s
# Warmup Iteration  21: 664493.643 ops/s
# Warmup Iteration  22: 692975.939 ops/s
# Warmup Iteration  23: 675804.929 ops/s
# Warmup Iteration  24: 700616.156 ops/s
# Warmup Iteration  25: 653227.829 ops/s
# Warmup Iteration  26: 690856.970 ops/s
# Warmup Iteration  27: 673509.766 ops/s
# Warmup Iteration  28: 664350.360 ops/s
# Warmup Iteration  29: 709912.804 ops/s
# Warmup Iteration  30: 645584.581 ops/s
Iteration   1: 704815.994 ops/s
Iteration   2: 688655.046 ops/s
Iteration   3: 677293.858 ops/s
Iteration   4: 682499.033 ops/s
Iteration   5: 664014.378 ops/s
Iteration   6: 681001.532 ops/s
Iteration   7: 714304.946 ops/s
Iteration   8: 692896.625 ops/s
Iteration   9: 665121.830 ops/s
Iteration  10: 703875.446 ops/s
Iteration  11: 712285.336 ops/s
Iteration  12: 668641.850 ops/s
Iteration  13: 667501.932 ops/s
Iteration  14: 698157.435 ops/s
Iteration  15: 721923.459 ops/s
Iteration  16: 660272.725 ops/s
Iteration  17: 656549.695 ops/s
Iteration  18: 691762.995 ops/s
Iteration  19: 661863.797 ops/s
Iteration  20: 691822.979 ops/s
Iteration  21: 660571.178 ops/s
Iteration  22: 691266.556 ops/s
Iteration  23: 692066.271 ops/s
Iteration  24: 680459.285 ops/s
Iteration  25: 694754.116 ops/s
Iteration  26: 666291.844 ops/s
Iteration  27: 674515.510 ops/s
Iteration  28: 700312.212 ops/s
Iteration  29: 673395.156 ops/s
Iteration  30: 699476.843 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrash":
  684612.329 ±(99.9%) 11989.902 ops/s [Average]
  (min, avg, max) = (656549.695, 684612.329, 721923.459), stdev = 17945.922
  CI (99.9%): [672622.427, 696602.231] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorSupplierCrash  thrpt   30  684612.329 ± 11989.902  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 913845.301 ops/s
# Warmup Iteration   2: 2992522.177 ops/s
# Warmup Iteration   3: 4656241.442 ops/s
# Warmup Iteration   4: 4522885.738 ops/s
# Warmup Iteration   5: 4810022.052 ops/s
# Warmup Iteration   6: 4801692.519 ops/s
# Warmup Iteration   7: 4620622.966 ops/s
# Warmup Iteration   8: 4667997.526 ops/s
# Warmup Iteration   9: 4776872.989 ops/s
# Warmup Iteration  10: 4570001.748 ops/s
# Warmup Iteration  11: 4780508.396 ops/s
# Warmup Iteration  12: 4591647.339 ops/s
# Warmup Iteration  13: 4675256.416 ops/s
# Warmup Iteration  14: 4770259.816 ops/s
# Warmup Iteration  15: 4731738.454 ops/s
# Warmup Iteration  16: 4886392.057 ops/s
# Warmup Iteration  17: 4763509.105 ops/s
# Warmup Iteration  18: 4750920.204 ops/s
# Warmup Iteration  19: 4765468.774 ops/s
# Warmup Iteration  20: 4659026.331 ops/s
# Warmup Iteration  21: 3895787.546 ops/s
# Warmup Iteration  22: 4756399.317 ops/s
# Warmup Iteration  23: 4652249.123 ops/s
# Warmup Iteration  24: 4617084.911 ops/s
# Warmup Iteration  25: 4775487.482 ops/s
# Warmup Iteration  26: 4535861.894 ops/s
# Warmup Iteration  27: 4716387.865 ops/s
# Warmup Iteration  28: 4872357.727 ops/s
# Warmup Iteration  29: 4736993.781 ops/s
# Warmup Iteration  30: 4672058.538 ops/s
Iteration   1: 4910895.608 ops/s
Iteration   2: 4655538.779 ops/s
Iteration   3: 4608725.941 ops/s
Iteration   4: 4840048.475 ops/s
Iteration   5: 4734613.360 ops/s
Iteration   6: 4594173.635 ops/s
Iteration   7: 4870969.264 ops/s
Iteration   8: 4736609.530 ops/s
Iteration   9: 4791712.821 ops/s
Iteration  10: 4672699.285 ops/s
Iteration  11: 4838199.502 ops/s
Iteration  12: 4550425.073 ops/s
Iteration  13: 4696005.956 ops/s
Iteration  14: 4722553.179 ops/s
Iteration  15: 4649671.008 ops/s
Iteration  16: 4662563.883 ops/s
Iteration  17: 4712899.697 ops/s
Iteration  18: 4784215.514 ops/s
Iteration  19: 4864204.392 ops/s
Iteration  20: 4638038.916 ops/s
Iteration  21: 4963292.335 ops/s
Iteration  22: 4632273.439 ops/s
Iteration  23: 4733257.486 ops/s
Iteration  24: 4647397.508 ops/s
Iteration  25: 4846677.578 ops/s
Iteration  26: 4602516.991 ops/s
Iteration  27: 4838767.765 ops/s
Iteration  28: 4793717.226 ops/s
Iteration  29: 4522063.222 ops/s
Iteration  30: 4692883.092 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_just":
  4726920.349 ±(99.9%) 74162.205 ops/s [Average]
  (min, avg, max) = (4522063.222, 4726920.349, 4963292.335), stdev = 111002.505
  CI (99.9%): [4652758.144, 4801082.553] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
SingleDoAfterSuccessTest._Benchmark.benchmark_just  thrpt   30  4726920.349 ± 74162.205  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_noOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_noOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21536832.503 ops/s
# Warmup Iteration   2: 37274785.288 ops/s
# Warmup Iteration   3: 57563529.226 ops/s
# Warmup Iteration   4: 56745698.770 ops/s
# Warmup Iteration   5: 57333727.464 ops/s
# Warmup Iteration   6: 53795171.933 ops/s
# Warmup Iteration   7: 55289065.281 ops/s
# Warmup Iteration   8: 57984031.398 ops/s
# Warmup Iteration   9: 56197413.368 ops/s
# Warmup Iteration  10: 57266513.028 ops/s
# Warmup Iteration  11: 56773635.209 ops/s
# Warmup Iteration  12: 55747934.105 ops/s
# Warmup Iteration  13: 57413455.426 ops/s
# Warmup Iteration  14: 56171508.849 ops/s
# Warmup Iteration  15: 54542042.512 ops/s
# Warmup Iteration  16: 58893946.661 ops/s
# Warmup Iteration  17: 54391745.511 ops/s
# Warmup Iteration  18: 55678316.635 ops/s
# Warmup Iteration  19: 58547299.811 ops/s
# Warmup Iteration  20: 55086245.958 ops/s
# Warmup Iteration  21: 58426724.946 ops/s
# Warmup Iteration  22: 59537271.589 ops/s
# Warmup Iteration  23: 56960485.643 ops/s
# Warmup Iteration  24: 56911315.556 ops/s
# Warmup Iteration  25: 57007857.283 ops/s
# Warmup Iteration  26: 56510684.666 ops/s
# Warmup Iteration  27: 59210727.614 ops/s
# Warmup Iteration  28: 55841371.136 ops/s
# Warmup Iteration  29: 56352499.711 ops/s
# Warmup Iteration  30: 58601764.235 ops/s
Iteration   1: 56378780.780 ops/s
Iteration   2: 57793413.680 ops/s
Iteration   3: 57961513.407 ops/s
Iteration   4: 57543612.761 ops/s
Iteration   5: 58523889.131 ops/s
Iteration   6: 56155619.503 ops/s
Iteration   7: 60391768.872 ops/s
Iteration   8: 57685827.911 ops/s
Iteration   9: 57192281.729 ops/s
Iteration  10: 58157118.052 ops/s
Iteration  11: 57277374.302 ops/s
Iteration  12: 56749969.128 ops/s
Iteration  13: 59953561.422 ops/s
Iteration  14: 57429439.591 ops/s
Iteration  15: 55984394.342 ops/s
Iteration  16: 58390462.792 ops/s
Iteration  17: 56299210.466 ops/s
Iteration  18: 60117690.288 ops/s
Iteration  19: 56301605.004 ops/s
Iteration  20: 58312661.982 ops/s
Iteration  21: 56979392.746 ops/s
Iteration  22: 57800123.961 ops/s
Iteration  23: 60979701.077 ops/s
Iteration  24: 55807411.867 ops/s
Iteration  25: 61047704.773 ops/s
Iteration  26: 56445188.830 ops/s
Iteration  27: 58281564.905 ops/s
Iteration  28: 59181934.953 ops/s
Iteration  29: 56101231.666 ops/s
Iteration  30: 58136343.430 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_noOverflow":
  57845359.778 ±(99.9%) 998022.573 ops/s [Average]
  (min, avg, max) = (55807411.867, 57845359.778, 61047704.773), stdev = 1493793.316
  CI (99.9%): [56847337.206, 58843382.351] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
FlowableRangeTest._Benchmark.benchmark_noOverflow  thrpt   30  57845359.778 ± 998022.573  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1848675.852 ops/s
# Warmup Iteration   2: 5066362.278 ops/s
# Warmup Iteration   3: 6716797.697 ops/s
# Warmup Iteration   4: 6988211.303 ops/s
# Warmup Iteration   5: 6857026.612 ops/s
# Warmup Iteration   6: 6928243.801 ops/s
# Warmup Iteration   7: 7059877.345 ops/s
# Warmup Iteration   8: 6993639.164 ops/s
# Warmup Iteration   9: 7088627.306 ops/s
# Warmup Iteration  10: 7232900.336 ops/s
# Warmup Iteration  11: 6546466.202 ops/s
# Warmup Iteration  12: 7141401.053 ops/s
# Warmup Iteration  13: 7234621.915 ops/s
# Warmup Iteration  14: 7017006.403 ops/s
# Warmup Iteration  15: 7110186.170 ops/s
# Warmup Iteration  16: 5233762.949 ops/s
# Warmup Iteration  17: 6877382.381 ops/s
# Warmup Iteration  18: 6944045.067 ops/s
# Warmup Iteration  19: 6948695.399 ops/s
# Warmup Iteration  20: 7184921.165 ops/s
# Warmup Iteration  21: 6748644.855 ops/s
# Warmup Iteration  22: 7101267.943 ops/s
# Warmup Iteration  23: 6919663.549 ops/s
# Warmup Iteration  24: 7010529.763 ops/s
# Warmup Iteration  25: 7209039.158 ops/s
# Warmup Iteration  26: 6890468.973 ops/s
# Warmup Iteration  27: 7047955.773 ops/s
# Warmup Iteration  28: 7032612.311 ops/s
# Warmup Iteration  29: 7140009.117 ops/s
# Warmup Iteration  30: 6845392.573 ops/s
Iteration   1: 7189403.360 ops/s
Iteration   2: 6949310.310 ops/s
Iteration   3: 6942415.806 ops/s
Iteration   4: 7219602.249 ops/s
Iteration   5: 7437314.843 ops/s
Iteration   6: 6891956.655 ops/s
Iteration   7: 7211155.470 ops/s
Iteration   8: 7240995.603 ops/s
Iteration   9: 6851672.278 ops/s
Iteration  10: 7283849.642 ops/s
Iteration  11: 7005044.084 ops/s
Iteration  12: 6953353.362 ops/s
Iteration  13: 7137617.795 ops/s
Iteration  14: 7145295.977 ops/s
Iteration  15: 6970644.426 ops/s
Iteration  16: 7317209.723 ops/s
Iteration  17: 6926414.418 ops/s
Iteration  18: 7148779.187 ops/s
Iteration  19: 6791509.352 ops/s
Iteration  20: 7297570.760 ops/s
Iteration  21: 6768312.727 ops/s
Iteration  22: 7144492.039 ops/s
Iteration  23: 7185657.382 ops/s
Iteration  24: 6879440.230 ops/s
Iteration  25: 7052337.312 ops/s
Iteration  26: 7112689.843 ops/s
Iteration  27: 6978852.337 ops/s
Iteration  28: 7071117.567 ops/s
Iteration  29: 7015998.240 ops/s
Iteration  30: 6812113.949 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_just":
  7064404.231 ±(99.9%) 114856.995 ops/s [Average]
  (min, avg, max) = (6768312.727, 7064404.231, 7437314.843), stdev = 171912.556
  CI (99.9%): [6949547.236, 7179261.226] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
SingleDoAfterTerminateTest._Benchmark.benchmark_just  thrpt   30  7064404.231 ± 114856.995  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_factoryFailureResultsInErrorEmission$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_factoryFailureResultsInErrorEmission

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 168146.251 ops/s
# Warmup Iteration   2: 555397.355 ops/s
# Warmup Iteration   3: 691380.589 ops/s
# Warmup Iteration   4: 629799.903 ops/s
# Warmup Iteration   5: 666083.658 ops/s
# Warmup Iteration   6: 667898.615 ops/s
# Warmup Iteration   7: 735154.216 ops/s
# Warmup Iteration   8: 698133.395 ops/s
# Warmup Iteration   9: 725569.661 ops/s
# Warmup Iteration  10: 719228.065 ops/s
# Warmup Iteration  11: 716838.378 ops/s
# Warmup Iteration  12: 746519.145 ops/s
# Warmup Iteration  13: 693936.017 ops/s
# Warmup Iteration  14: 742444.330 ops/s
# Warmup Iteration  15: 703062.442 ops/s
# Warmup Iteration  16: 725523.246 ops/s
# Warmup Iteration  17: 770416.112 ops/s
# Warmup Iteration  18: 776681.918 ops/s
# Warmup Iteration  19: 750818.876 ops/s
# Warmup Iteration  20: 775343.039 ops/s
# Warmup Iteration  21: 731649.346 ops/s
# Warmup Iteration  22: 750235.201 ops/s
# Warmup Iteration  23: 772780.984 ops/s
# Warmup Iteration  24: 778139.680 ops/s
# Warmup Iteration  25: 743043.779 ops/s
# Warmup Iteration  26: 758049.320 ops/s
# Warmup Iteration  27: 756015.901 ops/s
# Warmup Iteration  28: 737591.308 ops/s
# Warmup Iteration  29: 779095.514 ops/s
# Warmup Iteration  30: 740731.184 ops/s
Iteration   1: 789379.782 ops/s
Iteration   2: 732719.684 ops/s
Iteration   3: 755719.150 ops/s
Iteration   4: 778623.793 ops/s
Iteration   5: 753009.054 ops/s
Iteration   6: 779789.118 ops/s
Iteration   7: 760044.578 ops/s
Iteration   8: 752526.891 ops/s
Iteration   9: 770482.193 ops/s
Iteration  10: 732914.980 ops/s
Iteration  11: 781932.754 ops/s
Iteration  12: 756140.110 ops/s
Iteration  13: 751509.639 ops/s
Iteration  14: 771370.738 ops/s
Iteration  15: 751520.080 ops/s
Iteration  16: 760092.539 ops/s
Iteration  17: 777248.391 ops/s
Iteration  18: 750014.297 ops/s
Iteration  19: 781098.422 ops/s
Iteration  20: 750682.832 ops/s
Iteration  21: 776158.457 ops/s
Iteration  22: 766358.679 ops/s
Iteration  23: 761688.963 ops/s
Iteration  24: 789786.925 ops/s
Iteration  25: 728116.708 ops/s
Iteration  26: 762535.083 ops/s
Iteration  27: 779834.366 ops/s
Iteration  28: 764026.507 ops/s
Iteration  29: 753441.145 ops/s
Iteration  30: 748356.562 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_factoryFailureResultsInErrorEmission":
  762237.414 ±(99.9%) 10860.806 ops/s [Average]
  (min, avg, max) = (728116.708, 762237.414, 789786.925), stdev = 16255.945
  CI (99.9%): [751376.608, 773098.220] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_factoryFailureResultsInErrorEmission  thrpt   30  762237.414 ± 10860.806  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_factoryFailureResultsInErrorEmissionFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_factoryFailureResultsInErrorEmissionFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126826.452 ops/s
# Warmup Iteration   2: 572481.261 ops/s
# Warmup Iteration   3: 681617.850 ops/s
# Warmup Iteration   4: 653801.241 ops/s
# Warmup Iteration   5: 629696.658 ops/s
# Warmup Iteration   6: 708736.679 ops/s
# Warmup Iteration   7: 715168.851 ops/s
# Warmup Iteration   8: 727917.178 ops/s
# Warmup Iteration   9: 699698.888 ops/s
# Warmup Iteration  10: 718793.234 ops/s
# Warmup Iteration  11: 600808.253 ops/s
# Warmup Iteration  12: 692989.460 ops/s
# Warmup Iteration  13: 722596.276 ops/s
# Warmup Iteration  14: 703764.614 ops/s
# Warmup Iteration  15: 747034.470 ops/s
# Warmup Iteration  16: 718142.368 ops/s
# Warmup Iteration  17: 745190.089 ops/s
# Warmup Iteration  18: 777381.344 ops/s
# Warmup Iteration  19: 766461.500 ops/s
# Warmup Iteration  20: 734276.209 ops/s
# Warmup Iteration  21: 787432.407 ops/s
# Warmup Iteration  22: 767316.826 ops/s
# Warmup Iteration  23: 766089.205 ops/s
# Warmup Iteration  24: 753472.791 ops/s
# Warmup Iteration  25: 772927.370 ops/s
# Warmup Iteration  26: 759372.042 ops/s
# Warmup Iteration  27: 777259.080 ops/s
# Warmup Iteration  28: 750096.149 ops/s
# Warmup Iteration  29: 764156.024 ops/s
# Warmup Iteration  30: 752743.126 ops/s
Iteration   1: 772746.142 ops/s
Iteration   2: 761553.540 ops/s
Iteration   3: 752251.752 ops/s
Iteration   4: 771752.168 ops/s
Iteration   5: 752834.080 ops/s
Iteration   6: 763863.249 ops/s
Iteration   7: 763468.884 ops/s
Iteration   8: 755654.952 ops/s
Iteration   9: 793649.013 ops/s
Iteration  10: 766352.908 ops/s
Iteration  11: 737434.979 ops/s
Iteration  12: 782760.375 ops/s
Iteration  13: 722586.733 ops/s
Iteration  14: 754804.923 ops/s
Iteration  15: 725396.465 ops/s
Iteration  16: 755525.031 ops/s
Iteration  17: 778387.078 ops/s
Iteration  18: 739079.832 ops/s
Iteration  19: 791127.329 ops/s
Iteration  20: 746437.570 ops/s
Iteration  21: 786099.894 ops/s
Iteration  22: 745401.235 ops/s
Iteration  23: 771631.256 ops/s
Iteration  24: 744228.517 ops/s
Iteration  25: 767205.741 ops/s
Iteration  26: 777942.792 ops/s
Iteration  27: 739309.902 ops/s
Iteration  28: 755398.174 ops/s
Iteration  29: 791279.079 ops/s
Iteration  30: 743186.710 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_factoryFailureResultsInErrorEmissionFlowable":
  760311.677 ±(99.9%) 12768.761 ops/s [Average]
  (min, avg, max) = (722586.733, 760311.677, 793649.013), stdev = 19111.682
  CI (99.9%): [747542.916, 773080.438] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_factoryFailureResultsInErrorEmissionFlowable  thrpt   30  760311.677 ± 12768.761  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2026725.849 ops/s
# Warmup Iteration   2: 4356803.581 ops/s
# Warmup Iteration   3: 6587348.068 ops/s
# Warmup Iteration   4: 6322526.806 ops/s
# Warmup Iteration   5: 6474311.546 ops/s
# Warmup Iteration   6: 6244976.597 ops/s
# Warmup Iteration   7: 6447014.494 ops/s
# Warmup Iteration   8: 6335311.674 ops/s
# Warmup Iteration   9: 6358600.686 ops/s
# Warmup Iteration  10: 6666956.110 ops/s
# Warmup Iteration  11: 6467333.330 ops/s
# Warmup Iteration  12: 6157318.690 ops/s
# Warmup Iteration  13: 6550611.365 ops/s
# Warmup Iteration  14: 6275369.579 ops/s
# Warmup Iteration  15: 6199606.643 ops/s
# Warmup Iteration  16: 6525259.013 ops/s
# Warmup Iteration  17: 6637980.228 ops/s
# Warmup Iteration  18: 6828238.404 ops/s
# Warmup Iteration  19: 6843837.990 ops/s
# Warmup Iteration  20: 6776019.042 ops/s
# Warmup Iteration  21: 6829651.393 ops/s
# Warmup Iteration  22: 6802777.360 ops/s
# Warmup Iteration  23: 6867527.697 ops/s
# Warmup Iteration  24: 6961935.971 ops/s
# Warmup Iteration  25: 6747473.235 ops/s
# Warmup Iteration  26: 6752320.492 ops/s
# Warmup Iteration  27: 6679271.192 ops/s
# Warmup Iteration  28: 6690933.462 ops/s
# Warmup Iteration  29: 7031375.171 ops/s
# Warmup Iteration  30: 6805314.784 ops/s
Iteration   1: 6765949.792 ops/s
Iteration   2: 7107720.412 ops/s
Iteration   3: 6757750.635 ops/s
Iteration   4: 6984074.192 ops/s
Iteration   5: 6707312.664 ops/s
Iteration   6: 6901933.313 ops/s
Iteration   7: 6817048.869 ops/s
Iteration   8: 6820725.206 ops/s
Iteration   9: 6849904.824 ops/s
Iteration  10: 6599570.655 ops/s
Iteration  11: 6954710.582 ops/s
Iteration  12: 6632328.127 ops/s
Iteration  13: 7000418.601 ops/s
Iteration  14: 6723705.053 ops/s
Iteration  15: 6934011.779 ops/s
Iteration  16: 7056622.381 ops/s
Iteration  17: 6673713.449 ops/s
Iteration  18: 6838850.688 ops/s
Iteration  19: 7069237.232 ops/s
Iteration  20: 6745486.870 ops/s
Iteration  21: 6994118.852 ops/s
Iteration  22: 6629558.289 ops/s
Iteration  23: 6948687.227 ops/s
Iteration  24: 6753830.167 ops/s
Iteration  25: 6586241.739 ops/s
Iteration  26: 7114189.432 ops/s
Iteration  27: 6824931.707 ops/s
Iteration  28: 6616152.220 ops/s
Iteration  29: 6949358.062 ops/s
Iteration  30: 6565085.358 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnSubscribeNormal":
  6830774.279 ±(99.9%) 110099.668 ops/s [Average]
  (min, avg, max) = (6565085.358, 6830774.279, 7114189.432), stdev = 164792.012
  CI (99.9%): [6720674.612, 6940873.947] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnSubscribeNormal  thrpt   30  6830774.279 ± 110099.668  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_compose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_compose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2065158.052 ops/s
# Warmup Iteration   2: 4980344.608 ops/s
# Warmup Iteration   3: 6963414.671 ops/s
# Warmup Iteration   4: 6756838.987 ops/s
# Warmup Iteration   5: 5844689.328 ops/s
# Warmup Iteration   6: 6571308.030 ops/s
# Warmup Iteration   7: 7073667.814 ops/s
# Warmup Iteration   8: 6757676.472 ops/s
# Warmup Iteration   9: 6764069.846 ops/s
# Warmup Iteration  10: 6973540.199 ops/s
# Warmup Iteration  11: 6729859.691 ops/s
# Warmup Iteration  12: 6857315.949 ops/s
# Warmup Iteration  13: 6726834.394 ops/s
# Warmup Iteration  14: 6843732.513 ops/s
# Warmup Iteration  15: 6627978.288 ops/s
# Warmup Iteration  16: 7046758.057 ops/s
# Warmup Iteration  17: 6932543.508 ops/s
# Warmup Iteration  18: 6836410.884 ops/s
# Warmup Iteration  19: 6978035.295 ops/s
# Warmup Iteration  20: 6809483.963 ops/s
# Warmup Iteration  21: 6974931.783 ops/s
# Warmup Iteration  22: 6971489.677 ops/s
# Warmup Iteration  23: 6612228.591 ops/s
# Warmup Iteration  24: 6612805.728 ops/s
# Warmup Iteration  25: 7141983.300 ops/s
# Warmup Iteration  26: 6745059.806 ops/s
# Warmup Iteration  27: 7142074.029 ops/s
# Warmup Iteration  28: 6948767.961 ops/s
# Warmup Iteration  29: 6786708.701 ops/s
# Warmup Iteration  30: 7058072.701 ops/s
Iteration   1: 6777188.644 ops/s
Iteration   2: 6592667.236 ops/s
Iteration   3: 7081565.487 ops/s
Iteration   4: 6628313.215 ops/s
Iteration   5: 6955369.985 ops/s
Iteration   6: 6787463.206 ops/s
Iteration   7: 7173855.791 ops/s
Iteration   8: 6985517.759 ops/s
Iteration   9: 6721025.154 ops/s
Iteration  10: 7031349.106 ops/s
Iteration  11: 6854298.739 ops/s
Iteration  12: 7146601.352 ops/s
Iteration  13: 6973364.195 ops/s
Iteration  14: 6742338.550 ops/s
Iteration  15: 6709873.707 ops/s
Iteration  16: 7131481.738 ops/s
Iteration  17: 6558088.324 ops/s
Iteration  18: 6805710.591 ops/s
Iteration  19: 6706344.919 ops/s
Iteration  20: 7097845.232 ops/s
Iteration  21: 6774003.065 ops/s
Iteration  22: 6900647.612 ops/s
Iteration  23: 6822726.462 ops/s
Iteration  24: 6718211.384 ops/s
Iteration  25: 6747451.132 ops/s
Iteration  26: 6962579.651 ops/s
Iteration  27: 6654822.791 ops/s
Iteration  28: 6866238.779 ops/s
Iteration  29: 6993287.962 ops/s
Iteration  30: 6954524.827 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_compose":
  6861825.220 ±(99.9%) 115069.711 ops/s [Average]
  (min, avg, max) = (6558088.324, 6861825.220, 7173855.791), stdev = 172230.939
  CI (99.9%): [6746755.509, 6976894.931] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score        Error  Units
SingleMiscTest._Benchmark.benchmark_compose  thrpt   30  6861825.220 ± 115069.711  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_oneArray$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_oneArray

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1666623.874 ops/s
# Warmup Iteration   2: 4523956.745 ops/s
# Warmup Iteration   3: 6444313.926 ops/s
# Warmup Iteration   4: 6106581.194 ops/s
# Warmup Iteration   5: 6370261.226 ops/s
# Warmup Iteration   6: 6225586.083 ops/s
# Warmup Iteration   7: 6332968.074 ops/s
# Warmup Iteration   8: 6314137.775 ops/s
# Warmup Iteration   9: 6114269.405 ops/s
# Warmup Iteration  10: 6380953.843 ops/s
# Warmup Iteration  11: 6542893.731 ops/s
# Warmup Iteration  12: 6434644.636 ops/s
# Warmup Iteration  13: 6470856.203 ops/s
# Warmup Iteration  14: 6341327.486 ops/s
# Warmup Iteration  15: 6569285.978 ops/s
# Warmup Iteration  16: 6088464.300 ops/s
# Warmup Iteration  17: 6190792.374 ops/s
# Warmup Iteration  18: 6598455.089 ops/s
# Warmup Iteration  19: 6273330.362 ops/s
# Warmup Iteration  20: 6383552.244 ops/s
# Warmup Iteration  21: 6420857.840 ops/s
# Warmup Iteration  22: 6576035.743 ops/s
# Warmup Iteration  23: 6428157.707 ops/s
# Warmup Iteration  24: 6294131.322 ops/s
# Warmup Iteration  25: 6311085.620 ops/s
# Warmup Iteration  26: 6434466.756 ops/s
# Warmup Iteration  27: 6458532.395 ops/s
# Warmup Iteration  28: 6464262.146 ops/s
# Warmup Iteration  29: 6187933.572 ops/s
# Warmup Iteration  30: 6557270.556 ops/s
Iteration   1: 6448022.276 ops/s
Iteration   2: 6413746.762 ops/s
Iteration   3: 6241855.787 ops/s
Iteration   4: 6491852.419 ops/s
Iteration   5: 6424535.243 ops/s
Iteration   6: 6156998.650 ops/s
Iteration   7: 6314605.545 ops/s
Iteration   8: 6365844.555 ops/s
Iteration   9: 6535044.326 ops/s
Iteration  10: 6244072.102 ops/s
Iteration  11: 6255992.792 ops/s
Iteration  12: 6691903.634 ops/s
Iteration  13: 6300750.540 ops/s
Iteration  14: 6509286.377 ops/s
Iteration  15: 6284860.043 ops/s
Iteration  16: 6299079.740 ops/s
Iteration  17: 6427869.164 ops/s
Iteration  18: 6285267.466 ops/s
Iteration  19: 6605026.391 ops/s
Iteration  20: 6053016.009 ops/s
Iteration  21: 6541989.505 ops/s
Iteration  22: 6246820.618 ops/s
Iteration  23: 6349999.064 ops/s
Iteration  24: 6580438.521 ops/s
Iteration  25: 6160407.458 ops/s
Iteration  26: 6459597.100 ops/s
Iteration  27: 6226750.550 ops/s
Iteration  28: 6299469.330 ops/s
Iteration  29: 6626638.285 ops/s
Iteration  30: 6114078.942 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_oneArray":
  6365193.973 ±(99.9%) 107493.358 ops/s [Average]
  (min, avg, max) = (6053016.009, 6365193.973, 6691903.634), stdev = 160891.010
  CI (99.9%): [6257700.615, 6472687.331] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score        Error  Units
SingleZipArrayTest._Benchmark.benchmark_oneArray  thrpt   30  6365193.973 ± 107493.358  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_never$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_never

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5392635.784 ops/s
# Warmup Iteration   2: 10668639.462 ops/s
# Warmup Iteration   3: 13744855.716 ops/s
# Warmup Iteration   4: 13174478.194 ops/s
# Warmup Iteration   5: 13903571.326 ops/s
# Warmup Iteration   6: 13281584.947 ops/s
# Warmup Iteration   7: 13568716.011 ops/s
# Warmup Iteration   8: 13876327.162 ops/s
# Warmup Iteration   9: 13633209.171 ops/s
# Warmup Iteration  10: 14390830.292 ops/s
# Warmup Iteration  11: 14138620.538 ops/s
# Warmup Iteration  12: 13296084.970 ops/s
# Warmup Iteration  13: 14092575.756 ops/s
# Warmup Iteration  14: 13098941.175 ops/s
# Warmup Iteration  15: 13883111.082 ops/s
# Warmup Iteration  16: 13503596.959 ops/s
# Warmup Iteration  17: 13213518.363 ops/s
# Warmup Iteration  18: 13933976.892 ops/s
# Warmup Iteration  19: 13531564.586 ops/s
# Warmup Iteration  20: 13642716.737 ops/s
# Warmup Iteration  21: 13760307.671 ops/s
# Warmup Iteration  22: 14050950.017 ops/s
# Warmup Iteration  23: 13578653.609 ops/s
# Warmup Iteration  24: 13194863.258 ops/s
# Warmup Iteration  25: 14075580.159 ops/s
# Warmup Iteration  26: 13473450.637 ops/s
# Warmup Iteration  27: 13422799.727 ops/s
# Warmup Iteration  28: 14381753.032 ops/s
# Warmup Iteration  29: 14116957.658 ops/s
# Warmup Iteration  30: 13211317.814 ops/s
Iteration   1: 14115823.882 ops/s
Iteration   2: 13165651.133 ops/s
Iteration   3: 13732647.696 ops/s
Iteration   4: 13454788.457 ops/s
Iteration   5: 13844072.273 ops/s
Iteration   6: 13461909.434 ops/s
Iteration   7: 13601067.888 ops/s
Iteration   8: 14090337.906 ops/s
Iteration   9: 13191853.564 ops/s
Iteration  10: 14248541.469 ops/s
Iteration  11: 13270918.567 ops/s
Iteration  12: 13964124.380 ops/s
Iteration  13: 13603715.148 ops/s
Iteration  14: 13813466.048 ops/s
Iteration  15: 13529863.283 ops/s
Iteration  16: 13899200.671 ops/s
Iteration  17: 13410947.380 ops/s
Iteration  18: 13442458.360 ops/s
Iteration  19: 13907427.752 ops/s
Iteration  20: 13569615.771 ops/s
Iteration  21: 14116539.920 ops/s
Iteration  22: 13284896.287 ops/s
Iteration  23: 13915608.573 ops/s
Iteration  24: 13248135.632 ops/s
Iteration  25: 13818458.878 ops/s
Iteration  26: 13537083.485 ops/s
Iteration  27: 13807333.053 ops/s
Iteration  28: 13710421.927 ops/s
Iteration  29: 13349546.256 ops/s
Iteration  30: 14169308.799 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_never":
  13675858.796 ±(99.9%) 209342.285 ops/s [Average]
  (min, avg, max) = (13165651.133, 13675858.796, 14248541.469), stdev = 313333.701
  CI (99.9%): [13466516.511, 13885201.081] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt         Score        Error  Units
SingleMiscTest._Benchmark.benchmark_never  thrpt   30  13675858.796 ± 209342.285  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccessCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccessCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216598.675 ops/s
# Warmup Iteration   2: 515896.482 ops/s
# Warmup Iteration   3: 614811.714 ops/s
# Warmup Iteration   4: 601604.077 ops/s
# Warmup Iteration   5: 630679.255 ops/s
# Warmup Iteration   6: 604445.556 ops/s
# Warmup Iteration   7: 599193.577 ops/s
# Warmup Iteration   8: 626578.510 ops/s
# Warmup Iteration   9: 594931.219 ops/s
# Warmup Iteration  10: 608264.036 ops/s
# Warmup Iteration  11: 609316.121 ops/s
# Warmup Iteration  12: 600584.222 ops/s
# Warmup Iteration  13: 622260.653 ops/s
# Warmup Iteration  14: 607007.960 ops/s
# Warmup Iteration  15: 606611.603 ops/s
# Warmup Iteration  16: 615909.317 ops/s
# Warmup Iteration  17: 633484.279 ops/s
# Warmup Iteration  18: 654247.075 ops/s
# Warmup Iteration  19: 619439.585 ops/s
# Warmup Iteration  20: 639749.715 ops/s
# Warmup Iteration  21: 638123.909 ops/s
# Warmup Iteration  22: 651857.767 ops/s
# Warmup Iteration  23: 635060.091 ops/s
# Warmup Iteration  24: 652927.744 ops/s
# Warmup Iteration  25: 616042.741 ops/s
# Warmup Iteration  26: 660924.103 ops/s
# Warmup Iteration  27: 632163.399 ops/s
# Warmup Iteration  28: 646475.094 ops/s
# Warmup Iteration  29: 665700.616 ops/s
# Warmup Iteration  30: 619007.937 ops/s
Iteration   1: 676578.094 ops/s
Iteration   2: 655386.269 ops/s
Iteration   3: 632638.469 ops/s
Iteration   4: 645328.523 ops/s
Iteration   5: 673224.238 ops/s
Iteration   6: 638728.643 ops/s
Iteration   7: 659516.057 ops/s
Iteration   8: 629392.152 ops/s
Iteration   9: 655466.412 ops/s
Iteration  10: 657434.594 ops/s
Iteration  11: 635328.999 ops/s
Iteration  12: 651482.362 ops/s
Iteration  13: 664489.051 ops/s
Iteration  14: 626698.221 ops/s
Iteration  15: 661946.609 ops/s
Iteration  16: 635583.882 ops/s
Iteration  17: 631784.638 ops/s
Iteration  18: 661533.494 ops/s
Iteration  19: 643356.895 ops/s
Iteration  20: 653219.953 ops/s
Iteration  21: 639841.220 ops/s
Iteration  22: 590634.940 ops/s
Iteration  23: 654168.704 ops/s
Iteration  24: 627971.675 ops/s
Iteration  25: 634939.450 ops/s
Iteration  26: 585647.315 ops/s
Iteration  27: 552668.099 ops/s
Iteration  28: 649926.612 ops/s
Iteration  29: 636179.613 ops/s
Iteration  30: 659212.388 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccessCrash":
  640676.919 ±(99.9%) 17460.010 ops/s [Average]
  (min, avg, max) = (552668.099, 640676.919, 676578.094), stdev = 26133.323
  CI (99.9%): [623216.909, 658136.929] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
SingleDoOnTerminateTest._Benchmark.benchmark_doOnTerminateSuccessCrash  thrpt   30  640676.919 ± 17460.010  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleContainstTest._Benchmark.benchmark_comparerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleContainstTest._Benchmark.benchmark_comparerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 244541.848 ops/s
# Warmup Iteration   2: 576496.520 ops/s
# Warmup Iteration   3: 611162.675 ops/s
# Warmup Iteration   4: 618586.435 ops/s
# Warmup Iteration   5: 627936.660 ops/s
# Warmup Iteration   6: 610366.910 ops/s
# Warmup Iteration   7: 609444.226 ops/s
# Warmup Iteration   8: 611749.930 ops/s
# Warmup Iteration   9: 597270.039 ops/s
# Warmup Iteration  10: 636164.940 ops/s
# Warmup Iteration  11: 574099.774 ops/s
# Warmup Iteration  12: 639617.137 ops/s
# Warmup Iteration  13: 636867.463 ops/s
# Warmup Iteration  14: 618468.809 ops/s
# Warmup Iteration  15: 631046.613 ops/s
# Warmup Iteration  16: 646676.432 ops/s
# Warmup Iteration  17: 626230.129 ops/s
# Warmup Iteration  18: 687960.928 ops/s
# Warmup Iteration  19: 657531.103 ops/s
# Warmup Iteration  20: 641344.033 ops/s
# Warmup Iteration  21: 686204.712 ops/s
# Warmup Iteration  22: 644675.949 ops/s
# Warmup Iteration  23: 655123.984 ops/s
# Warmup Iteration  24: 671331.179 ops/s
# Warmup Iteration  25: 628475.067 ops/s
# Warmup Iteration  26: 681823.232 ops/s
# Warmup Iteration  27: 644101.817 ops/s
# Warmup Iteration  28: 662281.639 ops/s
# Warmup Iteration  29: 674624.612 ops/s
# Warmup Iteration  30: 674168.396 ops/s
Iteration   1: 630273.882 ops/s
Iteration   2: 683640.079 ops/s
Iteration   3: 653473.028 ops/s
Iteration   4: 666008.234 ops/s
Iteration   5: 681732.935 ops/s
Iteration   6: 679040.243 ops/s
Iteration   7: 690584.426 ops/s
Iteration   8: 621699.221 ops/s
Iteration   9: 699341.852 ops/s
Iteration  10: 654558.857 ops/s
Iteration  11: 660701.746 ops/s
Iteration  12: 645670.111 ops/s
Iteration  13: 638109.426 ops/s
Iteration  14: 669224.504 ops/s
Iteration  15: 630811.532 ops/s
Iteration  16: 674616.488 ops/s
Iteration  17: 639106.092 ops/s
Iteration  18: 653237.479 ops/s
Iteration  19: 655464.488 ops/s
Iteration  20: 663000.764 ops/s
Iteration  21: 655625.963 ops/s
Iteration  22: 661416.585 ops/s
Iteration  23: 671581.865 ops/s
Iteration  24: 654718.036 ops/s
Iteration  25: 659695.962 ops/s
Iteration  26: 658287.570 ops/s
Iteration  27: 654600.200 ops/s
Iteration  28: 655912.023 ops/s
Iteration  29: 645772.490 ops/s
Iteration  30: 655812.604 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleContainstTest._Benchmark.benchmark_comparerThrows":
  658790.623 ±(99.9%) 11829.586 ops/s [Average]
  (min, avg, max) = (621699.221, 658790.623, 699341.852), stdev = 17705.969
  CI (99.9%): [646961.036, 670620.209] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
SingleContainstTest._Benchmark.benchmark_comparerThrows  thrpt   30  658790.623 ± 11829.586  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_singleCollectionSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_singleCollectionSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150692.250 ops/s
# Warmup Iteration   2: 533237.263 ops/s
# Warmup Iteration   3: 621022.750 ops/s
# Warmup Iteration   4: 590877.903 ops/s
# Warmup Iteration   5: 648216.592 ops/s
# Warmup Iteration   6: 550310.649 ops/s
# Warmup Iteration   7: 675060.503 ops/s
# Warmup Iteration   8: 653115.811 ops/s
# Warmup Iteration   9: 655778.810 ops/s
# Warmup Iteration  10: 636692.599 ops/s
# Warmup Iteration  11: 667194.770 ops/s
# Warmup Iteration  12: 680067.896 ops/s
# Warmup Iteration  13: 631862.748 ops/s
# Warmup Iteration  14: 677812.055 ops/s
# Warmup Iteration  15: 652482.643 ops/s
# Warmup Iteration  16: 664098.637 ops/s
# Warmup Iteration  17: 677651.789 ops/s
# Warmup Iteration  18: 684683.942 ops/s
# Warmup Iteration  19: 712693.356 ops/s
# Warmup Iteration  20: 684891.873 ops/s
# Warmup Iteration  21: 715842.049 ops/s
# Warmup Iteration  22: 683268.374 ops/s
# Warmup Iteration  23: 687038.475 ops/s
# Warmup Iteration  24: 704864.601 ops/s
# Warmup Iteration  25: 686409.206 ops/s
# Warmup Iteration  26: 698836.645 ops/s
# Warmup Iteration  27: 685648.836 ops/s
# Warmup Iteration  28: 676599.310 ops/s
# Warmup Iteration  29: 695484.762 ops/s
# Warmup Iteration  30: 685670.088 ops/s
Iteration   1: 704052.582 ops/s
Iteration   2: 673305.058 ops/s
Iteration   3: 710642.185 ops/s
Iteration   4: 676605.639 ops/s
Iteration   5: 684611.227 ops/s
Iteration   6: 701217.337 ops/s
Iteration   7: 674764.561 ops/s
Iteration   8: 701613.536 ops/s
Iteration   9: 689455.898 ops/s
Iteration  10: 688597.984 ops/s
Iteration  11: 692618.203 ops/s
Iteration  12: 668022.808 ops/s
Iteration  13: 721184.204 ops/s
Iteration  14: 712576.735 ops/s
Iteration  15: 690177.578 ops/s
Iteration  16: 659175.273 ops/s
Iteration  17: 690050.502 ops/s
Iteration  18: 706009.600 ops/s
Iteration  19: 680650.508 ops/s
Iteration  20: 688203.072 ops/s
Iteration  21: 594434.682 ops/s
Iteration  22: 677823.761 ops/s
Iteration  23: 723168.305 ops/s
Iteration  24: 713468.411 ops/s
Iteration  25: 669808.595 ops/s
Iteration  26: 657284.539 ops/s
Iteration  27: 698238.800 ops/s
Iteration  28: 695578.470 ops/s
Iteration  29: 680495.629 ops/s
Iteration  30: 718741.519 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_singleCollectionSupplierThrows":
  688085.907 ±(99.9%) 16732.916 ops/s [Average]
  (min, avg, max) = (594434.682, 688085.907, 723168.305), stdev = 25045.042
  CI (99.9%): [671352.991, 704818.822] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
FlowableToListTest._Benchmark.benchmark_singleCollectionSupplierThrows  thrpt   30  688085.907 ± 16732.916  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_oneIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_oneIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1439587.470 ops/s
# Warmup Iteration   2: 4328303.094 ops/s
# Warmup Iteration   3: 6515554.358 ops/s
# Warmup Iteration   4: 6499647.809 ops/s
# Warmup Iteration   5: 6569523.084 ops/s
# Warmup Iteration   6: 6413375.223 ops/s
# Warmup Iteration   7: 6405521.786 ops/s
# Warmup Iteration   8: 6399316.179 ops/s
# Warmup Iteration   9: 6769850.684 ops/s
# Warmup Iteration  10: 6403716.390 ops/s
# Warmup Iteration  11: 6389070.675 ops/s
# Warmup Iteration  12: 6723336.622 ops/s
# Warmup Iteration  13: 6398526.694 ops/s
# Warmup Iteration  14: 6702009.582 ops/s
# Warmup Iteration  15: 6457634.250 ops/s
# Warmup Iteration  16: 6578806.823 ops/s
# Warmup Iteration  17: 6654777.794 ops/s
# Warmup Iteration  18: 6638484.903 ops/s
# Warmup Iteration  19: 6762090.284 ops/s
# Warmup Iteration  20: 6707780.506 ops/s
# Warmup Iteration  21: 6443272.967 ops/s
# Warmup Iteration  22: 6352169.017 ops/s
# Warmup Iteration  23: 6674820.834 ops/s
# Warmup Iteration  24: 6349365.489 ops/s
# Warmup Iteration  25: 6638131.220 ops/s
# Warmup Iteration  26: 6548716.969 ops/s
# Warmup Iteration  27: 6645208.708 ops/s
# Warmup Iteration  28: 6631163.423 ops/s
# Warmup Iteration  29: 6407255.114 ops/s
# Warmup Iteration  30: 6657740.518 ops/s
Iteration   1: 6454948.266 ops/s
Iteration   2: 6839727.034 ops/s
Iteration   3: 6601245.601 ops/s
Iteration   4: 6438087.895 ops/s
Iteration   5: 6605026.510 ops/s
Iteration   6: 6289237.416 ops/s
Iteration   7: 6475349.769 ops/s
Iteration   8: 6824379.255 ops/s
Iteration   9: 6463739.701 ops/s
Iteration  10: 6321271.333 ops/s
Iteration  11: 6359381.638 ops/s
Iteration  12: 6455963.511 ops/s
Iteration  13: 6849402.022 ops/s
Iteration  14: 6320718.510 ops/s
Iteration  15: 6531551.628 ops/s
Iteration  16: 6651443.344 ops/s
Iteration  17: 6511852.684 ops/s
Iteration  18: 6287441.552 ops/s
Iteration  19: 6379670.234 ops/s
Iteration  20: 6678641.911 ops/s
Iteration  21: 6471409.017 ops/s
Iteration  22: 6429195.868 ops/s
Iteration  23: 6540920.825 ops/s
Iteration  24: 6305643.641 ops/s
Iteration  25: 6699181.079 ops/s
Iteration  26: 6301107.175 ops/s
Iteration  27: 6761544.571 ops/s
Iteration  28: 6554149.598 ops/s
Iteration  29: 6458117.083 ops/s
Iteration  30: 6582802.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_oneIterable":
  6514771.711 ±(99.9%) 112041.574 ops/s [Average]
  (min, avg, max) = (6287441.552, 6514771.711, 6849402.022), stdev = 167698.566
  CI (99.9%): [6402730.137, 6626813.284] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
SingleZipIterableTest._Benchmark.benchmark_oneIterable  thrpt   30  6514771.711 ± 112041.574  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_singleCollectionSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_singleCollectionSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124577.799 ops/s
# Warmup Iteration   2: 481912.514 ops/s
# Warmup Iteration   3: 514737.713 ops/s
# Warmup Iteration   4: 549755.826 ops/s
# Warmup Iteration   5: 576333.161 ops/s
# Warmup Iteration   6: 554278.191 ops/s
# Warmup Iteration   7: 583543.048 ops/s
# Warmup Iteration   8: 564105.000 ops/s
# Warmup Iteration   9: 570824.055 ops/s
# Warmup Iteration  10: 573996.999 ops/s
# Warmup Iteration  11: 568345.167 ops/s
# Warmup Iteration  12: 570745.083 ops/s
# Warmup Iteration  13: 553760.616 ops/s
# Warmup Iteration  14: 565538.996 ops/s
# Warmup Iteration  15: 564770.542 ops/s
# Warmup Iteration  16: 598374.846 ops/s
# Warmup Iteration  17: 609310.978 ops/s
# Warmup Iteration  18: 586666.906 ops/s
# Warmup Iteration  19: 619177.491 ops/s
# Warmup Iteration  20: 581267.243 ops/s
# Warmup Iteration  21: 617156.123 ops/s
# Warmup Iteration  22: 592104.724 ops/s
# Warmup Iteration  23: 592643.510 ops/s
# Warmup Iteration  24: 607802.462 ops/s
# Warmup Iteration  25: 563142.041 ops/s
# Warmup Iteration  26: 605664.762 ops/s
# Warmup Iteration  27: 589629.379 ops/s
# Warmup Iteration  28: 592485.630 ops/s
# Warmup Iteration  29: 622103.068 ops/s
# Warmup Iteration  30: 572109.667 ops/s
Iteration   1: 625346.100 ops/s
Iteration   2: 572646.091 ops/s
Iteration   3: 613894.841 ops/s
Iteration   4: 588080.824 ops/s
Iteration   5: 574552.791 ops/s
Iteration   6: 603913.129 ops/s
Iteration   7: 580456.221 ops/s
Iteration   8: 605080.215 ops/s
Iteration   9: 573428.059 ops/s
Iteration  10: 583837.777 ops/s
Iteration  11: 617164.543 ops/s
Iteration  12: 577564.868 ops/s
Iteration  13: 609137.275 ops/s
Iteration  14: 587184.894 ops/s
Iteration  15: 519637.243 ops/s
Iteration  16: 564935.691 ops/s
Iteration  17: 588762.387 ops/s
Iteration  18: 612230.533 ops/s
Iteration  19: 582611.139 ops/s
Iteration  20: 599931.313 ops/s
Iteration  21: 624532.634 ops/s
Iteration  22: 545518.794 ops/s
Iteration  23: 609420.526 ops/s
Iteration  24: 602230.798 ops/s
Iteration  25: 600001.346 ops/s
Iteration  26: 608696.060 ops/s
Iteration  27: 591769.766 ops/s
Iteration  28: 586968.196 ops/s
Iteration  29: 613321.172 ops/s
Iteration  30: 605488.057 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_singleCollectionSupplierReturnsNull":
  592278.109 ±(99.9%) 15431.580 ops/s [Average]
  (min, avg, max) = (519637.243, 592278.109, 625346.100), stdev = 23097.265
  CI (99.9%): [576846.529, 607709.690] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
ObservableToListTest._Benchmark.benchmark_singleCollectionSupplierReturnsNull  thrpt   30  592278.109 ± 15431.580  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_normalEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_normalEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 996711.148 ops/s
# Warmup Iteration   2: 3782131.502 ops/s
# Warmup Iteration   3: 5204161.491 ops/s
# Warmup Iteration   4: 5234534.859 ops/s
# Warmup Iteration   5: 5401230.838 ops/s
# Warmup Iteration   6: 5512862.737 ops/s
# Warmup Iteration   7: 5412330.826 ops/s
# Warmup Iteration   8: 5563113.600 ops/s
# Warmup Iteration   9: 5289423.661 ops/s
# Warmup Iteration  10: 5448893.631 ops/s
# Warmup Iteration  11: 5380105.493 ops/s
# Warmup Iteration  12: 5384756.597 ops/s
# Warmup Iteration  13: 5550062.282 ops/s
# Warmup Iteration  14: 5265327.923 ops/s
# Warmup Iteration  15: 5469568.352 ops/s
# Warmup Iteration  16: 5377858.811 ops/s
# Warmup Iteration  17: 5444884.991 ops/s
# Warmup Iteration  18: 5610216.493 ops/s
# Warmup Iteration  19: 5564339.521 ops/s
# Warmup Iteration  20: 5258013.064 ops/s
# Warmup Iteration  21: 5667105.147 ops/s
# Warmup Iteration  22: 5510524.289 ops/s
# Warmup Iteration  23: 5253085.292 ops/s
# Warmup Iteration  24: 5501492.884 ops/s
# Warmup Iteration  25: 5593239.888 ops/s
# Warmup Iteration  26: 5691260.037 ops/s
# Warmup Iteration  27: 5354304.458 ops/s
# Warmup Iteration  28: 5505837.034 ops/s
# Warmup Iteration  29: 5347139.815 ops/s
# Warmup Iteration  30: 5597519.553 ops/s
Iteration   1: 5490125.811 ops/s
Iteration   2: 5389068.821 ops/s
Iteration   3: 5690547.753 ops/s
Iteration   4: 5350025.346 ops/s
Iteration   5: 5505290.066 ops/s
Iteration   6: 5495943.997 ops/s
Iteration   7: 5510635.081 ops/s
Iteration   8: 5413578.670 ops/s
Iteration   9: 5348844.486 ops/s
Iteration  10: 5592891.768 ops/s
Iteration  11: 5240489.482 ops/s
Iteration  12: 5490415.814 ops/s
Iteration  13: 5369297.843 ops/s
Iteration  14: 5473207.754 ops/s
Iteration  15: 5110784.796 ops/s
Iteration  16: 5408696.646 ops/s
Iteration  17: 5461821.453 ops/s
Iteration  18: 5174881.573 ops/s
Iteration  19: 5252782.089 ops/s
Iteration  20: 5362065.203 ops/s
Iteration  21: 5551389.413 ops/s
Iteration  22: 5278745.373 ops/s
Iteration  23: 5672617.847 ops/s
Iteration  24: 5346149.321 ops/s
Iteration  25: 5239036.014 ops/s
Iteration  26: 5526546.458 ops/s
Iteration  27: 5315798.974 ops/s
Iteration  28: 5458855.798 ops/s
Iteration  29: 5383508.046 ops/s
Iteration  30: 5405946.974 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_normalEager":
  5410332.956 ±(99.9%) 90608.119 ops/s [Average]
  (min, avg, max) = (5110784.796, 5410332.956, 5690547.753), stdev = 135617.978
  CI (99.9%): [5319724.836, 5500941.075] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SingleUsingTest._Benchmark.benchmark_normalEager  thrpt   30  5410332.956 ± 90608.119  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_normalNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_normalNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1149615.928 ops/s
# Warmup Iteration   2: 3288846.578 ops/s
# Warmup Iteration   3: 5098075.794 ops/s
# Warmup Iteration   4: 5149885.680 ops/s
# Warmup Iteration   5: 5467217.406 ops/s
# Warmup Iteration   6: 5432169.392 ops/s
# Warmup Iteration   7: 5241869.643 ops/s
# Warmup Iteration   8: 5221832.209 ops/s
# Warmup Iteration   9: 5269167.770 ops/s
# Warmup Iteration  10: 5162486.759 ops/s
# Warmup Iteration  11: 5409948.933 ops/s
# Warmup Iteration  12: 5315082.915 ops/s
# Warmup Iteration  13: 5312446.922 ops/s
# Warmup Iteration  14: 5218734.500 ops/s
# Warmup Iteration  15: 5208320.001 ops/s
# Warmup Iteration  16: 5380604.010 ops/s
# Warmup Iteration  17: 5447732.045 ops/s
# Warmup Iteration  18: 5179366.784 ops/s
# Warmup Iteration  19: 5441880.867 ops/s
# Warmup Iteration  20: 5184898.241 ops/s
# Warmup Iteration  21: 5491300.124 ops/s
# Warmup Iteration  22: 5102523.070 ops/s
# Warmup Iteration  23: 5326873.700 ops/s
# Warmup Iteration  24: 5101068.154 ops/s
# Warmup Iteration  25: 5261708.128 ops/s
# Warmup Iteration  26: 5210816.723 ops/s
# Warmup Iteration  27: 5490372.800 ops/s
# Warmup Iteration  28: 5412166.509 ops/s
# Warmup Iteration  29: 5286484.833 ops/s
# Warmup Iteration  30: 5483854.458 ops/s
Iteration   1: 5117302.048 ops/s
Iteration   2: 5320452.272 ops/s
Iteration   3: 5151939.836 ops/s
Iteration   4: 5337839.928 ops/s
Iteration   5: 5384693.461 ops/s
Iteration   6: 5223514.056 ops/s
Iteration   7: 5557470.837 ops/s
Iteration   8: 5275817.247 ops/s
Iteration   9: 5379466.232 ops/s
Iteration  10: 4332608.730 ops/s
Iteration  11: 5455606.287 ops/s
Iteration  12: 5422031.977 ops/s
Iteration  13: 5318124.746 ops/s
Iteration  14: 5235367.336 ops/s
Iteration  15: 5453871.147 ops/s
Iteration  16: 5203055.714 ops/s
Iteration  17: 5537048.194 ops/s
Iteration  18: 5429362.676 ops/s
Iteration  19: 5203312.122 ops/s
Iteration  20: 5558296.822 ops/s
Iteration  21: 5174240.845 ops/s
Iteration  22: 5387637.387 ops/s
Iteration  23: 5239578.374 ops/s
Iteration  24: 5521115.753 ops/s
Iteration  25: 5089171.722 ops/s
Iteration  26: 5309688.073 ops/s
Iteration  27: 5510782.783 ops/s
Iteration  28: 5206543.423 ops/s
Iteration  29: 5364527.287 ops/s
Iteration  30: 5159906.912 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_normalNonEager":
  5295345.808 ±(99.9%) 152038.289 ops/s [Average]
  (min, avg, max) = (4332608.730, 5295345.808, 5558296.822), stdev = 227563.770
  CI (99.9%): [5143307.519, 5447384.096] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
SingleUsingTest._Benchmark.benchmark_normalNonEager  thrpt   30  5295345.808 ± 152038.289  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 176016.797 ops/s
# Warmup Iteration   2: 483734.914 ops/s
# Warmup Iteration   3: 539630.681 ops/s
# Warmup Iteration   4: 556652.417 ops/s
# Warmup Iteration   5: 588546.554 ops/s
# Warmup Iteration   6: 563297.034 ops/s
# Warmup Iteration   7: 555918.263 ops/s
# Warmup Iteration   8: 549154.127 ops/s
# Warmup Iteration   9: 591700.231 ops/s
# Warmup Iteration  10: 562384.425 ops/s
# Warmup Iteration  11: 556302.242 ops/s
# Warmup Iteration  12: 577784.897 ops/s
# Warmup Iteration  13: 562287.904 ops/s
# Warmup Iteration  14: 586574.841 ops/s
# Warmup Iteration  15: 557120.537 ops/s
# Warmup Iteration  16: 579643.086 ops/s
# Warmup Iteration  17: 616436.839 ops/s
# Warmup Iteration  18: 589298.940 ops/s
# Warmup Iteration  19: 591274.100 ops/s
# Warmup Iteration  20: 609601.732 ops/s
# Warmup Iteration  21: 591003.929 ops/s
# Warmup Iteration  22: 621718.056 ops/s
# Warmup Iteration  23: 586706.575 ops/s
# Warmup Iteration  24: 577199.558 ops/s
# Warmup Iteration  25: 606762.926 ops/s
# Warmup Iteration  26: 593943.022 ops/s
# Warmup Iteration  27: 603551.266 ops/s
# Warmup Iteration  28: 598256.614 ops/s
# Warmup Iteration  29: 578091.775 ops/s
# Warmup Iteration  30: 602449.012 ops/s
Iteration   1: 602015.585 ops/s
Iteration   2: 556624.834 ops/s
Iteration   3: 607752.523 ops/s
Iteration   4: 600850.380 ops/s
Iteration   5: 595176.242 ops/s
Iteration   6: 621162.955 ops/s
Iteration   7: 583989.096 ops/s
Iteration   8: 606823.843 ops/s
Iteration   9: 615709.866 ops/s
Iteration  10: 578084.581 ops/s
Iteration  11: 595204.868 ops/s
Iteration  12: 578785.668 ops/s
Iteration  13: 588224.890 ops/s
Iteration  14: 600077.159 ops/s
Iteration  15: 565371.025 ops/s
Iteration  16: 588577.064 ops/s
Iteration  17: 618367.729 ops/s
Iteration  18: 574673.104 ops/s
Iteration  19: 590304.654 ops/s
Iteration  20: 609242.956 ops/s
Iteration  21: 603843.626 ops/s
Iteration  22: 584553.131 ops/s
Iteration  23: 602240.307 ops/s
Iteration  24: 603345.160 ops/s
Iteration  25: 597852.693 ops/s
Iteration  26: 604650.348 ops/s
Iteration  27: 570354.700 ops/s
Iteration  28: 580778.576 ops/s
Iteration  29: 597980.628 ops/s
Iteration  30: 593029.311 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull":
  593854.917 ±(99.9%) 10388.196 ops/s [Average]
  (min, avg, max) = (556624.834, 593854.917, 621162.955), stdev = 15548.563
  CI (99.9%): [583466.721, 604243.112] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
SingleZipArrayTest._Benchmark.benchmark_singleSourceZipperReturnsNull  thrpt   30  593854.917 ± 10388.196  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_disposerThrowsEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_disposerThrowsEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 227238.853 ops/s
# Warmup Iteration   2: 483376.700 ops/s
# Warmup Iteration   3: 575959.785 ops/s
# Warmup Iteration   4: 545696.048 ops/s
# Warmup Iteration   5: 532432.497 ops/s
# Warmup Iteration   6: 573910.804 ops/s
# Warmup Iteration   7: 599982.521 ops/s
# Warmup Iteration   8: 586529.446 ops/s
# Warmup Iteration   9: 598992.207 ops/s
# Warmup Iteration  10: 596190.786 ops/s
# Warmup Iteration  11: 602937.695 ops/s
# Warmup Iteration  12: 598801.250 ops/s
# Warmup Iteration  13: 605751.529 ops/s
# Warmup Iteration  14: 609514.094 ops/s
# Warmup Iteration  15: 582120.933 ops/s
# Warmup Iteration  16: 615663.014 ops/s
# Warmup Iteration  17: 611254.887 ops/s
# Warmup Iteration  18: 649205.568 ops/s
# Warmup Iteration  19: 637972.587 ops/s
# Warmup Iteration  20: 616958.397 ops/s
# Warmup Iteration  21: 655174.380 ops/s
# Warmup Iteration  22: 602923.937 ops/s
# Warmup Iteration  23: 638132.239 ops/s
# Warmup Iteration  24: 618641.040 ops/s
# Warmup Iteration  25: 622265.919 ops/s
# Warmup Iteration  26: 638444.261 ops/s
# Warmup Iteration  27: 609532.556 ops/s
# Warmup Iteration  28: 636015.041 ops/s
# Warmup Iteration  29: 646022.052 ops/s
# Warmup Iteration  30: 605904.213 ops/s
Iteration   1: 644365.367 ops/s
Iteration   2: 617064.677 ops/s
Iteration   3: 618449.348 ops/s
Iteration   4: 634081.808 ops/s
Iteration   5: 503247.585 ops/s
Iteration   6: 628747.385 ops/s
Iteration   7: 626389.402 ops/s
Iteration   8: 619322.921 ops/s
Iteration   9: 640720.340 ops/s
Iteration  10: 601613.257 ops/s
Iteration  11: 633817.628 ops/s
Iteration  12: 614449.230 ops/s
Iteration  13: 639470.163 ops/s
Iteration  14: 613091.589 ops/s
Iteration  15: 613218.748 ops/s
Iteration  16: 637829.474 ops/s
Iteration  17: 611736.336 ops/s
Iteration  18: 643917.308 ops/s
Iteration  19: 640254.629 ops/s
Iteration  20: 617779.648 ops/s
Iteration  21: 627269.954 ops/s
Iteration  22: 601078.069 ops/s
Iteration  23: 651465.194 ops/s
Iteration  24: 630156.853 ops/s
Iteration  25: 595186.493 ops/s
Iteration  26: 652019.498 ops/s
Iteration  27: 614012.662 ops/s
Iteration  28: 618178.616 ops/s
Iteration  29: 638462.806 ops/s
Iteration  30: 593489.465 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_disposerThrowsEager":
  620696.215 ±(99.9%) 18234.089 ops/s [Average]
  (min, avg, max) = (503247.585, 620696.215, 652019.498), stdev = 27291.928
  CI (99.9%): [602462.126, 638930.304] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
SingleUsingTest._Benchmark.benchmark_disposerThrowsEager  thrpt   30  620696.215 ± 18234.089  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_singleSourceZipperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_singleSourceZipperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 141339.629 ops/s
# Warmup Iteration   2: 465269.771 ops/s
# Warmup Iteration   3: 514219.860 ops/s
# Warmup Iteration   4: 518676.370 ops/s
# Warmup Iteration   5: 529277.323 ops/s
# Warmup Iteration   6: 516546.073 ops/s
# Warmup Iteration   7: 578475.212 ops/s
# Warmup Iteration   8: 542085.235 ops/s
# Warmup Iteration   9: 558540.780 ops/s
# Warmup Iteration  10: 568797.632 ops/s
# Warmup Iteration  11: 552060.877 ops/s
# Warmup Iteration  12: 569928.463 ops/s
# Warmup Iteration  13: 558543.943 ops/s
# Warmup Iteration  14: 559333.088 ops/s
# Warmup Iteration  15: 584943.958 ops/s
# Warmup Iteration  16: 583815.015 ops/s
# Warmup Iteration  17: 575354.647 ops/s
# Warmup Iteration  18: 584091.893 ops/s
# Warmup Iteration  19: 595704.899 ops/s
# Warmup Iteration  20: 595162.359 ops/s
# Warmup Iteration  21: 600021.753 ops/s
# Warmup Iteration  22: 566149.756 ops/s
# Warmup Iteration  23: 599457.071 ops/s
# Warmup Iteration  24: 588740.944 ops/s
# Warmup Iteration  25: 569340.011 ops/s
# Warmup Iteration  26: 584707.361 ops/s
# Warmup Iteration  27: 590399.316 ops/s
# Warmup Iteration  28: 582412.487 ops/s
# Warmup Iteration  29: 584987.892 ops/s
# Warmup Iteration  30: 616616.408 ops/s
Iteration   1: 571287.156 ops/s
Iteration   2: 581822.891 ops/s
Iteration   3: 607492.399 ops/s
Iteration   4: 580989.480 ops/s
Iteration   5: 570850.905 ops/s
Iteration   6: 607592.291 ops/s
Iteration   7: 584197.106 ops/s
Iteration   8: 572643.314 ops/s
Iteration   9: 605363.300 ops/s
Iteration  10: 581360.380 ops/s
Iteration  11: 606794.493 ops/s
Iteration  12: 562720.892 ops/s
Iteration  13: 588094.420 ops/s
Iteration  14: 599466.564 ops/s
Iteration  15: 571655.634 ops/s
Iteration  16: 570514.089 ops/s
Iteration  17: 589085.812 ops/s
Iteration  18: 585921.641 ops/s
Iteration  19: 573240.607 ops/s
Iteration  20: 606349.946 ops/s
Iteration  21: 572152.055 ops/s
Iteration  22: 612268.911 ops/s
Iteration  23: 611928.127 ops/s
Iteration  24: 565226.800 ops/s
Iteration  25: 605712.284 ops/s
Iteration  26: 578763.189 ops/s
Iteration  27: 590555.308 ops/s
Iteration  28: 593767.405 ops/s
Iteration  29: 591927.123 ops/s
Iteration  30: 583399.810 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_singleSourceZipperReturnsNull":
  587438.144 ±(99.9%) 10135.743 ops/s [Average]
  (min, avg, max) = (562720.892, 587438.144, 612268.911), stdev = 15170.704
  CI (99.9%): [577302.402, 597573.887] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
SingleZipIterableTest._Benchmark.benchmark_singleSourceZipperReturnsNull  thrpt   30  587438.144 ± 10135.743  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 308008.344 ops/s
# Warmup Iteration   2: 586816.649 ops/s
# Warmup Iteration   3: 665367.958 ops/s
# Warmup Iteration   4: 669098.059 ops/s
# Warmup Iteration   5: 709407.110 ops/s
# Warmup Iteration   6: 687555.437 ops/s
# Warmup Iteration   7: 669085.446 ops/s
# Warmup Iteration   8: 680152.490 ops/s
# Warmup Iteration   9: 674823.567 ops/s
# Warmup Iteration  10: 689472.622 ops/s
# Warmup Iteration  11: 671326.938 ops/s
# Warmup Iteration  12: 680191.918 ops/s
# Warmup Iteration  13: 702347.487 ops/s
# Warmup Iteration  14: 682426.204 ops/s
# Warmup Iteration  15: 694986.596 ops/s
# Warmup Iteration  16: 695111.465 ops/s
# Warmup Iteration  17: 731264.642 ops/s
# Warmup Iteration  18: 680854.208 ops/s
# Warmup Iteration  19: 736604.406 ops/s
# Warmup Iteration  20: 756048.675 ops/s
# Warmup Iteration  21: 721215.056 ops/s
# Warmup Iteration  22: 734739.999 ops/s
# Warmup Iteration  23: 735208.612 ops/s
# Warmup Iteration  24: 729864.476 ops/s
# Warmup Iteration  25: 745601.914 ops/s
# Warmup Iteration  26: 719958.271 ops/s
# Warmup Iteration  27: 755661.033 ops/s
# Warmup Iteration  28: 719451.029 ops/s
# Warmup Iteration  29: 689214.833 ops/s
# Warmup Iteration  30: 639669.824 ops/s
Iteration   1: 692916.061 ops/s
Iteration   2: 727001.835 ops/s
Iteration   3: 748765.696 ops/s
Iteration   4: 721686.094 ops/s
Iteration   5: 747243.470 ops/s
Iteration   6: 713368.897 ops/s
Iteration   7: 749503.830 ops/s
Iteration   8: 756316.763 ops/s
Iteration   9: 723199.095 ops/s
Iteration  10: 732936.799 ops/s
Iteration  11: 739029.054 ops/s
Iteration  12: 733208.914 ops/s
Iteration  13: 738577.034 ops/s
Iteration  14: 712506.413 ops/s
Iteration  15: 740500.598 ops/s
Iteration  16: 716642.088 ops/s
Iteration  17: 749214.479 ops/s
Iteration  18: 730354.209 ops/s
Iteration  19: 729337.492 ops/s
Iteration  20: 737554.092 ops/s
Iteration  21: 735422.284 ops/s
Iteration  22: 742951.059 ops/s
Iteration  23: 712145.552 ops/s
Iteration  24: 747950.952 ops/s
Iteration  25: 723892.656 ops/s
Iteration  26: 733668.205 ops/s
Iteration  27: 701406.648 ops/s
Iteration  28: 721975.857 ops/s
Iteration  29: 708448.756 ops/s
Iteration  30: 752088.949 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableFutureCancels":
  730660.461 ±(99.9%) 10675.654 ops/s [Average]
  (min, avg, max) = (692916.061, 730660.461, 756316.763), stdev = 15978.817
  CI (99.9%): [719984.807, 741336.115] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score       Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableFutureCancels  thrpt   30  730660.461 ± 10675.654  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 348809.415 ops/s
# Warmup Iteration   2: 580116.523 ops/s
# Warmup Iteration   3: 658983.495 ops/s
# Warmup Iteration   4: 596932.351 ops/s
# Warmup Iteration   5: 696952.625 ops/s
# Warmup Iteration   6: 615982.698 ops/s
# Warmup Iteration   7: 696361.366 ops/s
# Warmup Iteration   8: 685830.678 ops/s
# Warmup Iteration   9: 698579.239 ops/s
# Warmup Iteration  10: 721088.679 ops/s
# Warmup Iteration  11: 696160.474 ops/s
# Warmup Iteration  12: 690249.170 ops/s
# Warmup Iteration  13: 685520.830 ops/s
# Warmup Iteration  14: 690929.659 ops/s
# Warmup Iteration  15: 701008.462 ops/s
# Warmup Iteration  16: 678039.896 ops/s
# Warmup Iteration  17: 741463.488 ops/s
# Warmup Iteration  18: 735980.827 ops/s
# Warmup Iteration  19: 723228.517 ops/s
# Warmup Iteration  20: 728740.826 ops/s
# Warmup Iteration  21: 743809.153 ops/s
# Warmup Iteration  22: 717538.214 ops/s
# Warmup Iteration  23: 721570.263 ops/s
# Warmup Iteration  24: 716016.255 ops/s
# Warmup Iteration  25: 715968.863 ops/s
# Warmup Iteration  26: 737257.335 ops/s
# Warmup Iteration  27: 697780.006 ops/s
# Warmup Iteration  28: 721354.283 ops/s
# Warmup Iteration  29: 721405.198 ops/s
# Warmup Iteration  30: 719375.941 ops/s
Iteration   1: 722341.796 ops/s
Iteration   2: 706747.560 ops/s
Iteration   3: 727690.611 ops/s
Iteration   4: 735245.225 ops/s
Iteration   5: 714602.599 ops/s
Iteration   6: 728638.215 ops/s
Iteration   7: 725568.526 ops/s
Iteration   8: 720527.855 ops/s
Iteration   9: 758107.383 ops/s
Iteration  10: 737388.607 ops/s
Iteration  11: 705666.446 ops/s
Iteration  12: 752263.012 ops/s
Iteration  13: 737009.322 ops/s
Iteration  14: 678761.462 ops/s
Iteration  15: 727372.516 ops/s
Iteration  16: 721765.952 ops/s
Iteration  17: 714342.336 ops/s
Iteration  18: 751852.188 ops/s
Iteration  19: 750305.920 ops/s
Iteration  20: 692471.674 ops/s
Iteration  21: 742318.581 ops/s
Iteration  22: 718653.447 ops/s
Iteration  23: 726869.205 ops/s
Iteration  24: 707158.158 ops/s
Iteration  25: 722161.278 ops/s
Iteration  26: 719568.215 ops/s
Iteration  27: 713410.525 ops/s
Iteration  28: 734070.371 ops/s
Iteration  29: 710669.039 ops/s
Iteration  30: 744922.199 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableFutureCancels":
  724949.007 ±(99.9%) 11971.206 ops/s [Average]
  (min, avg, max) = (678761.462, 724949.007, 758107.383), stdev = 17917.939
  CI (99.9%): [712977.801, 736920.213] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score       Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableFutureCancels  thrpt   30  724949.007 ± 11971.206  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 337960.357 ops/s
# Warmup Iteration   2: 563946.648 ops/s
# Warmup Iteration   3: 647443.248 ops/s
# Warmup Iteration   4: 629733.807 ops/s
# Warmup Iteration   5: 664662.664 ops/s
# Warmup Iteration   6: 590891.418 ops/s
# Warmup Iteration   7: 717219.458 ops/s
# Warmup Iteration   8: 672188.349 ops/s
# Warmup Iteration   9: 715821.215 ops/s
# Warmup Iteration  10: 714827.803 ops/s
# Warmup Iteration  11: 724756.164 ops/s
# Warmup Iteration  12: 670277.239 ops/s
# Warmup Iteration  13: 707063.390 ops/s
# Warmup Iteration  14: 679354.653 ops/s
# Warmup Iteration  15: 726045.354 ops/s
# Warmup Iteration  16: 681420.688 ops/s
# Warmup Iteration  17: 736763.055 ops/s
# Warmup Iteration  18: 763395.429 ops/s
# Warmup Iteration  19: 726922.865 ops/s
# Warmup Iteration  20: 747418.078 ops/s
# Warmup Iteration  21: 715274.033 ops/s
# Warmup Iteration  22: 743673.197 ops/s
# Warmup Iteration  23: 753911.319 ops/s
# Warmup Iteration  24: 551654.314 ops/s
# Warmup Iteration  25: 704588.125 ops/s
# Warmup Iteration  26: 751096.553 ops/s
# Warmup Iteration  27: 717059.761 ops/s
# Warmup Iteration  28: 741450.647 ops/s
# Warmup Iteration  29: 736503.962 ops/s
# Warmup Iteration  30: 735781.932 ops/s
Iteration   1: 756087.450 ops/s
Iteration   2: 711217.490 ops/s
Iteration   3: 767062.575 ops/s
Iteration   4: 741048.953 ops/s
Iteration   5: 722610.082 ops/s
Iteration   6: 728629.439 ops/s
Iteration   7: 748229.021 ops/s
Iteration   8: 756690.083 ops/s
Iteration   9: 706774.508 ops/s
Iteration  10: 763266.428 ops/s
Iteration  11: 719138.638 ops/s
Iteration  12: 745346.880 ops/s
Iteration  13: 749803.165 ops/s
Iteration  14: 718149.053 ops/s
Iteration  15: 720293.244 ops/s
Iteration  16: 747425.527 ops/s
Iteration  17: 726587.354 ops/s
Iteration  18: 753735.238 ops/s
Iteration  19: 722204.692 ops/s
Iteration  20: 759246.451 ops/s
Iteration  21: 719639.946 ops/s
Iteration  22: 736296.320 ops/s
Iteration  23: 771510.584 ops/s
Iteration  24: 743515.017 ops/s
Iteration  25: 716685.253 ops/s
Iteration  26: 759248.652 ops/s
Iteration  27: 713698.535 ops/s
Iteration  28: 743170.566 ops/s
Iteration  29: 748957.278 ops/s
Iteration  30: 722792.147 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableFutureCancels":
  737968.686 ±(99.9%) 12457.581 ops/s [Average]
  (min, avg, max) = (706774.508, 737968.686, 771510.584), stdev = 18645.923
  CI (99.9%): [725511.104, 750426.267] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score       Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableFutureCancels  thrpt   30  737968.686 ± 12457.581  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1042170.980 ops/s
# Warmup Iteration   2: 4968410.917 ops/s
# Warmup Iteration   3: 5123218.324 ops/s
# Warmup Iteration   4: 5834439.727 ops/s
# Warmup Iteration   5: 6250396.041 ops/s
# Warmup Iteration   6: 6271990.297 ops/s
# Warmup Iteration   7: 6281492.280 ops/s
# Warmup Iteration   8: 6024851.422 ops/s
# Warmup Iteration   9: 6029839.083 ops/s
# Warmup Iteration  10: 6415954.095 ops/s
# Warmup Iteration  11: 6174531.200 ops/s
# Warmup Iteration  12: 5992315.541 ops/s
# Warmup Iteration  13: 6142526.553 ops/s
# Warmup Iteration  14: 5971832.630 ops/s
# Warmup Iteration  15: 6159232.600 ops/s
# Warmup Iteration  16: 6108925.906 ops/s
# Warmup Iteration  17: 6130215.103 ops/s
# Warmup Iteration  18: 6292227.424 ops/s
# Warmup Iteration  19: 5798944.672 ops/s
# Warmup Iteration  20: 6283315.462 ops/s
# Warmup Iteration  21: 5908444.272 ops/s
# Warmup Iteration  22: 6131826.902 ops/s
# Warmup Iteration  23: 6380211.133 ops/s
# Warmup Iteration  24: 6090705.839 ops/s
# Warmup Iteration  25: 5959049.114 ops/s
# Warmup Iteration  26: 6339121.003 ops/s
# Warmup Iteration  27: 6007387.565 ops/s
# Warmup Iteration  28: 6130802.205 ops/s
# Warmup Iteration  29: 6276501.795 ops/s
# Warmup Iteration  30: 6067243.619 ops/s
Iteration   1: 6278828.436 ops/s
Iteration   2: 6068123.644 ops/s
Iteration   3: 6331141.772 ops/s
Iteration   4: 6031722.168 ops/s
Iteration   5: 6345977.407 ops/s
Iteration   6: 6232692.710 ops/s
Iteration   7: 6089228.557 ops/s
Iteration   8: 5976418.013 ops/s
Iteration   9: 6209228.023 ops/s
Iteration  10: 6014726.029 ops/s
Iteration  11: 6124660.611 ops/s
Iteration  12: 6340614.462 ops/s
Iteration  13: 6090263.932 ops/s
Iteration  14: 6043980.708 ops/s
Iteration  15: 6169991.910 ops/s
Iteration  16: 5983425.985 ops/s
Iteration  17: 6249582.009 ops/s
Iteration  18: 6399547.693 ops/s
Iteration  19: 6224982.731 ops/s
Iteration  20: 6187307.058 ops/s
Iteration  21: 6271038.869 ops/s
Iteration  22: 6095509.374 ops/s
Iteration  23: 6093513.335 ops/s
Iteration  24: 6322930.281 ops/s
Iteration  25: 5987212.115 ops/s
Iteration  26: 6296211.852 ops/s
Iteration  27: 6171887.000 ops/s
Iteration  28: 6065632.798 ops/s
Iteration  29: 6067042.656 ops/s
Iteration  30: 6198722.754 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteCancels":
  6165404.830 ±(99.9%) 82149.783 ops/s [Average]
  (min, avg, max) = (5976418.013, 6165404.830, 6399547.693), stdev = 122957.937
  CI (99.9%): [6083255.047, 6247554.612] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt        Score       Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteCancels  thrpt   30  6165404.830 ± 82149.783  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2778832.717 ops/s
# Warmup Iteration   2: 4818166.436 ops/s
# Warmup Iteration   3: 5601746.911 ops/s
# Warmup Iteration   4: 6231432.873 ops/s
# Warmup Iteration   5: 6398154.214 ops/s
# Warmup Iteration   6: 6249961.301 ops/s
# Warmup Iteration   7: 6516222.957 ops/s
# Warmup Iteration   8: 6247587.712 ops/s
# Warmup Iteration   9: 6482268.836 ops/s
# Warmup Iteration  10: 6478336.455 ops/s
# Warmup Iteration  11: 6225361.611 ops/s
# Warmup Iteration  12: 6423865.947 ops/s
# Warmup Iteration  13: 6349809.270 ops/s
# Warmup Iteration  14: 6553241.701 ops/s
# Warmup Iteration  15: 6296546.015 ops/s
# Warmup Iteration  16: 6416215.381 ops/s
# Warmup Iteration  17: 6363765.821 ops/s
# Warmup Iteration  18: 4834838.470 ops/s
# Warmup Iteration  19: 6679796.497 ops/s
# Warmup Iteration  20: 6308390.070 ops/s
# Warmup Iteration  21: 6620498.735 ops/s
# Warmup Iteration  22: 6451789.243 ops/s
# Warmup Iteration  23: 6266085.286 ops/s
# Warmup Iteration  24: 6635808.825 ops/s
# Warmup Iteration  25: 6614536.727 ops/s
# Warmup Iteration  26: 6554777.667 ops/s
# Warmup Iteration  27: 6177503.392 ops/s
# Warmup Iteration  28: 6404559.532 ops/s
# Warmup Iteration  29: 6272456.055 ops/s
# Warmup Iteration  30: 6398269.775 ops/s
Iteration   1: 6310162.891 ops/s
Iteration   2: 6441511.684 ops/s
Iteration   3: 6444994.183 ops/s
Iteration   4: 6320922.520 ops/s
Iteration   5: 6468743.959 ops/s
Iteration   6: 6368030.516 ops/s
Iteration   7: 6521271.092 ops/s
Iteration   8: 6162105.334 ops/s
Iteration   9: 6529451.151 ops/s
Iteration  10: 6335386.891 ops/s
Iteration  11: 6434374.902 ops/s
Iteration  12: 6406326.884 ops/s
Iteration  13: 6387210.505 ops/s
Iteration  14: 6347242.591 ops/s
Iteration  15: 6232764.269 ops/s
Iteration  16: 6443975.223 ops/s
Iteration  17: 6485177.698 ops/s
Iteration  18: 6173284.224 ops/s
Iteration  19: 6585609.297 ops/s
Iteration  20: 6237321.595 ops/s
Iteration  21: 6395121.157 ops/s
Iteration  22: 6161895.411 ops/s
Iteration  23: 6421410.593 ops/s
Iteration  24: 6442090.927 ops/s
Iteration  25: 6106854.743 ops/s
Iteration  26: 6509365.221 ops/s
Iteration  27: 6224406.201 ops/s
Iteration  28: 6394618.376 ops/s
Iteration  29: 6491458.513 ops/s
Iteration  30: 6289857.735 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteCancels":
  6369098.210 ±(99.9%) 83155.883 ops/s [Average]
  (min, avg, max) = (6106854.743, 6369098.210, 6585609.297), stdev = 124463.820
  CI (99.9%): [6285942.327, 6452254.093] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt        Score       Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteCancels  thrpt   30  6369098.210 ± 83155.883  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2534611.891 ops/s
# Warmup Iteration   2: 4530632.963 ops/s
# Warmup Iteration   3: 5170119.108 ops/s
# Warmup Iteration   4: 5948999.528 ops/s
# Warmup Iteration   5: 5960592.118 ops/s
# Warmup Iteration   6: 5911316.325 ops/s
# Warmup Iteration   7: 5931485.455 ops/s
# Warmup Iteration   8: 6159474.057 ops/s
# Warmup Iteration   9: 5890002.892 ops/s
# Warmup Iteration  10: 5823624.819 ops/s
# Warmup Iteration  11: 6094741.627 ops/s
# Warmup Iteration  12: 6117481.044 ops/s
# Warmup Iteration  13: 5676172.263 ops/s
# Warmup Iteration  14: 6297635.713 ops/s
# Warmup Iteration  15: 5824636.486 ops/s
# Warmup Iteration  16: 6026321.154 ops/s
# Warmup Iteration  17: 6089217.740 ops/s
# Warmup Iteration  18: 5982844.333 ops/s
# Warmup Iteration  19: 5998787.710 ops/s
# Warmup Iteration  20: 5963585.053 ops/s
# Warmup Iteration  21: 6179662.571 ops/s
# Warmup Iteration  22: 5966584.853 ops/s
# Warmup Iteration  23: 6125985.355 ops/s
# Warmup Iteration  24: 6122479.987 ops/s
# Warmup Iteration  25: 5984038.914 ops/s
# Warmup Iteration  26: 5932069.068 ops/s
# Warmup Iteration  27: 6021521.843 ops/s
# Warmup Iteration  28: 6112569.492 ops/s
# Warmup Iteration  29: 6046503.735 ops/s
# Warmup Iteration  30: 6154961.504 ops/s
Iteration   1: 5894395.019 ops/s
Iteration   2: 6264147.808 ops/s
Iteration   3: 6231452.475 ops/s
Iteration   4: 5847946.436 ops/s
Iteration   5: 6201004.080 ops/s
Iteration   6: 5922709.034 ops/s
Iteration   7: 6190781.791 ops/s
Iteration   8: 6044439.680 ops/s
Iteration   9: 5973855.201 ops/s
Iteration  10: 6120800.618 ops/s
Iteration  11: 5874349.600 ops/s
Iteration  12: 6027018.347 ops/s
Iteration  13: 6284692.973 ops/s
Iteration  14: 6005074.986 ops/s
Iteration  15: 5974755.186 ops/s
Iteration  16: 6037482.541 ops/s
Iteration  17: 5889569.924 ops/s
Iteration  18: 6170389.788 ops/s
Iteration  19: 6284988.682 ops/s
Iteration  20: 5828519.700 ops/s
Iteration  21: 5944480.129 ops/s
Iteration  22: 5986543.095 ops/s
Iteration  23: 5883971.508 ops/s
Iteration  24: 6203009.909 ops/s
Iteration  25: 5884809.853 ops/s
Iteration  26: 6159787.891 ops/s
Iteration  27: 5949225.772 ops/s
Iteration  28: 6115767.176 ops/s
Iteration  29: 5992507.123 ops/s
Iteration  30: 5961448.421 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteCancels":
  6038330.825 ±(99.9%) 94429.625 ops/s [Average]
  (min, avg, max) = (5828519.700, 6038330.825, 6284988.682), stdev = 141337.828
  CI (99.9%): [5943901.200, 6132760.450] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt        Score       Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteCancels  thrpt   30  6038330.825 ± 94429.625  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1544064.914 ops/s
# Warmup Iteration   2: 5502287.727 ops/s
# Warmup Iteration   3: 5995055.026 ops/s
# Warmup Iteration   4: 5816691.708 ops/s
# Warmup Iteration   5: 5781342.445 ops/s
# Warmup Iteration   6: 5469134.968 ops/s
# Warmup Iteration   7: 5669662.466 ops/s
# Warmup Iteration   8: 6212666.149 ops/s
# Warmup Iteration   9: 5980441.512 ops/s
# Warmup Iteration  10: 6268251.372 ops/s
# Warmup Iteration  11: 5971514.399 ops/s
# Warmup Iteration  12: 6114690.326 ops/s
# Warmup Iteration  13: 5049705.163 ops/s
# Warmup Iteration  14: 6165818.356 ops/s
# Warmup Iteration  15: 6124288.849 ops/s
# Warmup Iteration  16: 6010456.285 ops/s
# Warmup Iteration  17: 6325068.073 ops/s
# Warmup Iteration  18: 5936531.905 ops/s
# Warmup Iteration  19: 6314193.602 ops/s
# Warmup Iteration  20: 5856298.401 ops/s
# Warmup Iteration  21: 6275009.440 ops/s
# Warmup Iteration  22: 5994232.820 ops/s
# Warmup Iteration  23: 6072511.958 ops/s
# Warmup Iteration  24: 6494577.204 ops/s
# Warmup Iteration  25: 6193761.414 ops/s
# Warmup Iteration  26: 6332832.519 ops/s
# Warmup Iteration  27: 5987525.941 ops/s
# Warmup Iteration  28: 6138415.447 ops/s
# Warmup Iteration  29: 6232773.650 ops/s
# Warmup Iteration  30: 6084504.841 ops/s
Iteration   1: 6304454.707 ops/s
Iteration   2: 5880529.745 ops/s
Iteration   3: 6267430.805 ops/s
Iteration   4: 6018517.119 ops/s
Iteration   5: 6095226.164 ops/s
Iteration   6: 6252962.389 ops/s
Iteration   7: 5853850.794 ops/s
Iteration   8: 6319205.398 ops/s
Iteration   9: 5994506.395 ops/s
Iteration  10: 6162091.103 ops/s
Iteration  11: 6072274.565 ops/s
Iteration  12: 6075589.125 ops/s
Iteration  13: 6446603.306 ops/s
Iteration  14: 5890816.918 ops/s
Iteration  15: 6277300.443 ops/s
Iteration  16: 6057949.322 ops/s
Iteration  17: 5984635.314 ops/s
Iteration  18: 6267674.001 ops/s
Iteration  19: 6023603.442 ops/s
Iteration  20: 6217195.828 ops/s
Iteration  21: 6131333.693 ops/s
Iteration  22: 6321737.085 ops/s
Iteration  23: 5997253.741 ops/s
Iteration  24: 6244624.468 ops/s
Iteration  25: 6102184.931 ops/s
Iteration  26: 6028846.384 ops/s
Iteration  27: 6297768.445 ops/s
Iteration  28: 6114882.777 ops/s
Iteration  29: 6126409.229 ops/s
Iteration  30: 6324546.388 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteCancels":
  6138400.134 ±(99.9%) 101099.717 ops/s [Average]
  (min, avg, max) = (5853850.794, 6138400.134, 6446603.306), stdev = 151321.309
  CI (99.9%): [6037300.417, 6239499.852] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt        Score        Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteCancels  thrpt   30  6138400.134 ± 101099.717  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1985506.737 ops/s
# Warmup Iteration   2: 4859089.649 ops/s
# Warmup Iteration   3: 5333739.670 ops/s
# Warmup Iteration   4: 5863884.634 ops/s
# Warmup Iteration   5: 6123941.586 ops/s
# Warmup Iteration   6: 5951022.070 ops/s
# Warmup Iteration   7: 6377743.437 ops/s
# Warmup Iteration   8: 5959619.455 ops/s
# Warmup Iteration   9: 6121483.304 ops/s
# Warmup Iteration  10: 6095526.444 ops/s
# Warmup Iteration  11: 5952410.496 ops/s
# Warmup Iteration  12: 6116179.389 ops/s
# Warmup Iteration  13: 5893872.592 ops/s
# Warmup Iteration  14: 6240886.234 ops/s
# Warmup Iteration  15: 6143188.340 ops/s
# Warmup Iteration  16: 5907451.459 ops/s
# Warmup Iteration  17: 6115524.704 ops/s
# Warmup Iteration  18: 5963512.442 ops/s
# Warmup Iteration  19: 6161994.479 ops/s
# Warmup Iteration  20: 5970378.431 ops/s
# Warmup Iteration  21: 6204020.982 ops/s
# Warmup Iteration  22: 5968098.805 ops/s
# Warmup Iteration  23: 6190210.988 ops/s
# Warmup Iteration  24: 5864813.271 ops/s
# Warmup Iteration  25: 6252281.239 ops/s
# Warmup Iteration  26: 6242244.600 ops/s
# Warmup Iteration  27: 5963570.459 ops/s
# Warmup Iteration  28: 6179762.034 ops/s
# Warmup Iteration  29: 6112979.812 ops/s
# Warmup Iteration  30: 6250974.170 ops/s
Iteration   1: 5973459.811 ops/s
Iteration   2: 6049434.352 ops/s
Iteration   3: 6279631.827 ops/s
Iteration   4: 5962554.370 ops/s
Iteration   5: 6255181.679 ops/s
Iteration   6: 6205960.513 ops/s
Iteration   7: 6043755.372 ops/s
Iteration   8: 6230766.242 ops/s
Iteration   9: 5895523.318 ops/s
Iteration  10: 6231064.422 ops/s
Iteration  11: 5951115.883 ops/s
Iteration  12: 6297009.143 ops/s
Iteration  13: 6069358.957 ops/s
Iteration  14: 6148826.375 ops/s
Iteration  15: 6099515.798 ops/s
Iteration  16: 6119457.660 ops/s
Iteration  17: 5926157.056 ops/s
Iteration  18: 6317571.123 ops/s
Iteration  19: 5904507.200 ops/s
Iteration  20: 6155047.580 ops/s
Iteration  21: 6178770.637 ops/s
Iteration  22: 6034966.424 ops/s
Iteration  23: 6070542.226 ops/s
Iteration  24: 6014190.359 ops/s
Iteration  25: 6240308.886 ops/s
Iteration  26: 6072546.831 ops/s
Iteration  27: 5988127.915 ops/s
Iteration  28: 6175943.516 ops/s
Iteration  29: 6257966.270 ops/s
Iteration  30: 5948852.025 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteCancels":
  6103270.459 ±(99.9%) 85293.759 ops/s [Average]
  (min, avg, max) = (5895523.318, 6103270.459, 6317571.123), stdev = 127663.693
  CI (99.9%): [6017976.700, 6188564.218] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt        Score       Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteCancels  thrpt   30  6103270.459 ± 85293.759  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1607808.299 ops/s
# Warmup Iteration   2: 4660139.946 ops/s
# Warmup Iteration   3: 5316007.005 ops/s
# Warmup Iteration   4: 5941267.177 ops/s
# Warmup Iteration   5: 6078552.893 ops/s
# Warmup Iteration   6: 6301518.236 ops/s
# Warmup Iteration   7: 4363439.473 ops/s
# Warmup Iteration   8: 5894313.048 ops/s
# Warmup Iteration   9: 6287623.765 ops/s
# Warmup Iteration  10: 5817447.370 ops/s
# Warmup Iteration  11: 6122880.755 ops/s
# Warmup Iteration  12: 6011694.032 ops/s
# Warmup Iteration  13: 5936827.462 ops/s
# Warmup Iteration  14: 6195155.932 ops/s
# Warmup Iteration  15: 5839044.662 ops/s
# Warmup Iteration  16: 6326217.968 ops/s
# Warmup Iteration  17: 6212576.372 ops/s
# Warmup Iteration  18: 5922853.675 ops/s
# Warmup Iteration  19: 6290107.612 ops/s
# Warmup Iteration  20: 6142987.567 ops/s
# Warmup Iteration  21: 6272556.501 ops/s
# Warmup Iteration  22: 6350195.552 ops/s
# Warmup Iteration  23: 5942508.975 ops/s
# Warmup Iteration  24: 6007169.095 ops/s
# Warmup Iteration  25: 6163318.954 ops/s
# Warmup Iteration  26: 5952523.818 ops/s
# Warmup Iteration  27: 5943128.890 ops/s
# Warmup Iteration  28: 6277855.605 ops/s
# Warmup Iteration  29: 5909938.335 ops/s
# Warmup Iteration  30: 6336920.646 ops/s
Iteration   1: 5899865.199 ops/s
Iteration   2: 6246933.391 ops/s
Iteration   3: 6054458.343 ops/s
Iteration   4: 6115976.499 ops/s
Iteration   5: 6181569.977 ops/s
Iteration   6: 5993775.750 ops/s
Iteration   7: 6200849.417 ops/s
Iteration   8: 5982997.027 ops/s
Iteration   9: 6302683.295 ops/s
Iteration  10: 6086230.700 ops/s
Iteration  11: 6283512.654 ops/s
Iteration  12: 5973353.777 ops/s
Iteration  13: 6018351.161 ops/s
Iteration  14: 6041337.211 ops/s
Iteration  15: 5988030.960 ops/s
Iteration  16: 6114604.326 ops/s
Iteration  17: 6208990.205 ops/s
Iteration  18: 5986527.565 ops/s
Iteration  19: 6280916.667 ops/s
Iteration  20: 5987706.215 ops/s
Iteration  21: 6291854.493 ops/s
Iteration  22: 6061306.758 ops/s
Iteration  23: 6143836.748 ops/s
Iteration  24: 6357890.731 ops/s
Iteration  25: 5986872.842 ops/s
Iteration  26: 6239979.231 ops/s
Iteration  27: 6076193.107 ops/s
Iteration  28: 6320263.174 ops/s
Iteration  29: 6329734.332 ops/s
Iteration  30: 5952799.866 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteCancels":
  6123646.721 ±(99.9%) 90796.091 ops/s [Average]
  (min, avg, max) = (5899865.199, 6123646.721, 6357890.731), stdev = 135899.325
  CI (99.9%): [6032850.629, 6214442.812] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt        Score       Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteCancels  thrpt   30  6123646.721 ± 90796.091  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 108548.969 ops/s
# Warmup Iteration   2: 325202.883 ops/s
# Warmup Iteration   3: 329498.521 ops/s
# Warmup Iteration   4: 350606.561 ops/s
# Warmup Iteration   5: 343038.800 ops/s
# Warmup Iteration   6: 358301.297 ops/s
# Warmup Iteration   7: 352187.244 ops/s
# Warmup Iteration   8: 359423.986 ops/s
# Warmup Iteration   9: 355443.280 ops/s
# Warmup Iteration  10: 360703.763 ops/s
# Warmup Iteration  11: 362824.383 ops/s
# Warmup Iteration  12: 350170.497 ops/s
# Warmup Iteration  13: 363659.802 ops/s
# Warmup Iteration  14: 355157.051 ops/s
# Warmup Iteration  15: 360066.401 ops/s
# Warmup Iteration  16: 358355.664 ops/s
# Warmup Iteration  17: 375523.286 ops/s
# Warmup Iteration  18: 385211.134 ops/s
# Warmup Iteration  19: 372840.776 ops/s
# Warmup Iteration  20: 360511.530 ops/s
# Warmup Iteration  21: 380904.890 ops/s
# Warmup Iteration  22: 363938.476 ops/s
# Warmup Iteration  23: 402063.663 ops/s
# Warmup Iteration  24: 378766.918 ops/s
# Warmup Iteration  25: 364162.478 ops/s
# Warmup Iteration  26: 383407.741 ops/s
# Warmup Iteration  27: 375422.125 ops/s
# Warmup Iteration  28: 375730.031 ops/s
# Warmup Iteration  29: 393387.496 ops/s
# Warmup Iteration  30: 361302.145 ops/s
Iteration   1: 385858.715 ops/s
Iteration   2: 366000.008 ops/s
Iteration   3: 386498.408 ops/s
Iteration   4: 388826.523 ops/s
Iteration   5: 376121.186 ops/s
Iteration   6: 387142.744 ops/s
Iteration   7: 379782.209 ops/s
Iteration   8: 386649.299 ops/s
Iteration   9: 394563.256 ops/s
Iteration  10: 372199.832 ops/s
Iteration  11: 375962.361 ops/s
Iteration  12: 370371.377 ops/s
Iteration  13: 384762.278 ops/s
Iteration  14: 380362.510 ops/s
Iteration  15: 369304.742 ops/s
Iteration  16: 383842.675 ops/s
Iteration  17: 373494.268 ops/s
Iteration  18: 385242.959 ops/s
Iteration  19: 394234.125 ops/s
Iteration  20: 365408.374 ops/s
Iteration  21: 378530.340 ops/s
Iteration  22: 396801.140 ops/s
Iteration  23: 372718.513 ops/s
Iteration  24: 394867.928 ops/s
Iteration  25: 371512.496 ops/s
Iteration  26: 398293.131 ops/s
Iteration  27: 390661.164 ops/s
Iteration  28: 380589.217 ops/s
Iteration  29: 398042.482 ops/s
Iteration  30: 366699.833 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels":
  381844.803 ±(99.9%) 6749.387 ops/s [Average]
  (min, avg, max) = (365408.374, 381844.803, 398293.131), stdev = 10102.165
  CI (99.9%): [375095.416, 388594.190] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                      Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteExceptionallyCancels  thrpt   30  381844.803 ± 6749.387  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 144762.440 ops/s
# Warmup Iteration   2: 241372.070 ops/s
# Warmup Iteration   3: 345228.126 ops/s
# Warmup Iteration   4: 356482.884 ops/s
# Warmup Iteration   5: 372938.075 ops/s
# Warmup Iteration   6: 350624.945 ops/s
# Warmup Iteration   7: 369515.429 ops/s
# Warmup Iteration   8: 368040.899 ops/s
# Warmup Iteration   9: 363570.061 ops/s
# Warmup Iteration  10: 354518.439 ops/s
# Warmup Iteration  11: 369133.522 ops/s
# Warmup Iteration  12: 377333.591 ops/s
# Warmup Iteration  13: 337189.682 ops/s
# Warmup Iteration  14: 378272.406 ops/s
# Warmup Iteration  15: 351722.917 ops/s
# Warmup Iteration  16: 380031.801 ops/s
# Warmup Iteration  17: 386769.765 ops/s
# Warmup Iteration  18: 390563.047 ops/s
# Warmup Iteration  19: 387238.449 ops/s
# Warmup Iteration  20: 390674.116 ops/s
# Warmup Iteration  21: 392488.046 ops/s
# Warmup Iteration  22: 379394.922 ops/s
# Warmup Iteration  23: 405939.877 ops/s
# Warmup Iteration  24: 384292.896 ops/s
# Warmup Iteration  25: 374799.367 ops/s
# Warmup Iteration  26: 385722.472 ops/s
# Warmup Iteration  27: 393733.703 ops/s
# Warmup Iteration  28: 382959.417 ops/s
# Warmup Iteration  29: 397775.746 ops/s
# Warmup Iteration  30: 379308.356 ops/s
Iteration   1: 395566.815 ops/s
Iteration   2: 381992.812 ops/s
Iteration   3: 386003.085 ops/s
Iteration   4: 396132.736 ops/s
Iteration   5: 372850.784 ops/s
Iteration   6: 396160.358 ops/s
Iteration   7: 386025.348 ops/s
Iteration   8: 390555.130 ops/s
Iteration   9: 395863.712 ops/s
Iteration  10: 387965.807 ops/s
Iteration  11: 390226.729 ops/s
Iteration  12: 388471.227 ops/s
Iteration  13: 375305.231 ops/s
Iteration  14: 392768.638 ops/s
Iteration  15: 386235.618 ops/s
Iteration  16: 394553.905 ops/s
Iteration  17: 392803.595 ops/s
Iteration  18: 385144.680 ops/s
Iteration  19: 405201.179 ops/s
Iteration  20: 379882.731 ops/s
Iteration  21: 409826.977 ops/s
Iteration  22: 381291.001 ops/s
Iteration  23: 388777.874 ops/s
Iteration  24: 388396.655 ops/s
Iteration  25: 391269.860 ops/s
Iteration  26: 402484.582 ops/s
Iteration  27: 372434.102 ops/s
Iteration  28: 387067.348 ops/s
Iteration  29: 384058.407 ops/s
Iteration  30: 386356.830 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels":
  389055.792 ±(99.9%) 5726.691 ops/s [Average]
  (min, avg, max) = (372434.102, 389055.792, 409826.977), stdev = 8571.442
  CI (99.9%): [383329.101, 394782.483] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                         Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteExceptionallyCancels  thrpt   30  389055.792 ± 5726.691  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148676.255 ops/s
# Warmup Iteration   2: 287373.552 ops/s
# Warmup Iteration   3: 362712.742 ops/s
# Warmup Iteration   4: 348176.521 ops/s
# Warmup Iteration   5: 365872.154 ops/s
# Warmup Iteration   6: 364338.020 ops/s
# Warmup Iteration   7: 371712.174 ops/s
# Warmup Iteration   8: 374919.218 ops/s
# Warmup Iteration   9: 353363.915 ops/s
# Warmup Iteration  10: 375508.816 ops/s
# Warmup Iteration  11: 354251.542 ops/s
# Warmup Iteration  12: 365305.670 ops/s
# Warmup Iteration  13: 374282.418 ops/s
# Warmup Iteration  14: 357078.457 ops/s
# Warmup Iteration  15: 378890.596 ops/s
# Warmup Iteration  16: 358071.234 ops/s
# Warmup Iteration  17: 371333.988 ops/s
# Warmup Iteration  18: 383349.928 ops/s
# Warmup Iteration  19: 399972.068 ops/s
# Warmup Iteration  20: 372705.770 ops/s
# Warmup Iteration  21: 385117.674 ops/s
# Warmup Iteration  22: 368781.646 ops/s
# Warmup Iteration  23: 397395.824 ops/s
# Warmup Iteration  24: 399844.401 ops/s
# Warmup Iteration  25: 382703.648 ops/s
# Warmup Iteration  26: 388635.261 ops/s
# Warmup Iteration  27: 375735.324 ops/s
# Warmup Iteration  28: 393774.327 ops/s
# Warmup Iteration  29: 394209.138 ops/s
# Warmup Iteration  30: 378172.777 ops/s
Iteration   1: 401707.127 ops/s
Iteration   2: 370049.633 ops/s
Iteration   3: 405700.274 ops/s
Iteration   4: 371440.292 ops/s
Iteration   5: 376975.743 ops/s
Iteration   6: 382864.009 ops/s
Iteration   7: 388395.065 ops/s
Iteration   8: 378392.471 ops/s
Iteration   9: 398840.021 ops/s
Iteration  10: 386891.623 ops/s
Iteration  11: 372052.251 ops/s
Iteration  12: 398273.147 ops/s
Iteration  13: 393528.051 ops/s
Iteration  14: 376193.279 ops/s
Iteration  15: 389772.408 ops/s
Iteration  16: 397216.810 ops/s
Iteration  17: 385713.206 ops/s
Iteration  18: 392124.814 ops/s
Iteration  19: 384734.788 ops/s
Iteration  20: 395598.107 ops/s
Iteration  21: 391711.770 ops/s
Iteration  22: 386460.634 ops/s
Iteration  23: 390758.217 ops/s
Iteration  24: 404884.510 ops/s
Iteration  25: 382047.240 ops/s
Iteration  26: 394946.550 ops/s
Iteration  27: 368080.111 ops/s
Iteration  28: 382182.610 ops/s
Iteration  29: 322710.437 ops/s
Iteration  30: 382559.302 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels":
  385093.483 ±(99.9%) 10400.322 ops/s [Average]
  (min, avg, max) = (322710.437, 385093.483, 405700.274), stdev = 15566.713
  CI (99.9%): [374693.161, 395493.805] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                     Mode  Cnt       Score       Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteExceptionallyCancels  thrpt   30  385093.483 ± 10400.322  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_lastWindowIsFixedInTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_lastWindowIsFixedInTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 223560.859 ops/s
# Warmup Iteration   2: 739770.617 ops/s
# Warmup Iteration   3: 1282449.150 ops/s
# Warmup Iteration   4: 1293067.696 ops/s
# Warmup Iteration   5: 1334184.111 ops/s
# Warmup Iteration   6: 1382043.085 ops/s
# Warmup Iteration   7: 1406618.952 ops/s
# Warmup Iteration   8: 1456218.955 ops/s
# Warmup Iteration   9: 1431879.362 ops/s
# Warmup Iteration  10: 1459122.062 ops/s
# Warmup Iteration  11: 1325686.958 ops/s
# Warmup Iteration  12: 1454674.287 ops/s
# Warmup Iteration  13: 1372544.397 ops/s
# Warmup Iteration  14: 1450119.653 ops/s
# Warmup Iteration  15: 1401130.928 ops/s
# Warmup Iteration  16: 1403533.777 ops/s
# Warmup Iteration  17: 1476090.940 ops/s
# Warmup Iteration  18: 1488321.685 ops/s
# Warmup Iteration  19: 1391031.416 ops/s
# Warmup Iteration  20: 1434867.906 ops/s
# Warmup Iteration  21: 1398924.232 ops/s
# Warmup Iteration  22: 1440374.237 ops/s
# Warmup Iteration  23: 1399883.053 ops/s
# Warmup Iteration  24: 1400629.642 ops/s
# Warmup Iteration  25: 1405034.594 ops/s
# Warmup Iteration  26: 1440955.959 ops/s
# Warmup Iteration  27: 1454100.292 ops/s
# Warmup Iteration  28: 1433487.718 ops/s
# Warmup Iteration  29: 1445827.454 ops/s
# Warmup Iteration  30: 1430371.533 ops/s
Iteration   1: 1469581.206 ops/s
Iteration   2: 1381758.738 ops/s
Iteration   3: 1496294.380 ops/s
Iteration   4: 1389247.344 ops/s
Iteration   5: 1414922.011 ops/s
Iteration   6: 1443181.581 ops/s
Iteration   7: 1421698.640 ops/s
Iteration   8: 1443844.516 ops/s
Iteration   9: 1423264.490 ops/s
Iteration  10: 1393123.813 ops/s
Iteration  11: 1431221.182 ops/s
Iteration  12: 1441288.772 ops/s
Iteration  13: 1471929.741 ops/s
Iteration  14: 1402157.382 ops/s
Iteration  15: 1481239.663 ops/s
Iteration  16: 1428320.551 ops/s
Iteration  17: 1411248.974 ops/s
Iteration  18: 1486603.435 ops/s
Iteration  19: 1379688.135 ops/s
Iteration  20: 1506968.179 ops/s
Iteration  21: 1434021.468 ops/s
Iteration  22: 1392840.682 ops/s
Iteration  23: 1459986.638 ops/s
Iteration  24: 1412722.116 ops/s
Iteration  25: 1452530.393 ops/s
Iteration  26: 1423599.748 ops/s
Iteration  27: 1458552.123 ops/s
Iteration  28: 1491642.640 ops/s
Iteration  29: 1364348.056 ops/s
Iteration  30: 1407987.009 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_lastWindowIsFixedInTime":
  1433860.454 ±(99.9%) 25250.902 ops/s [Average]
  (min, avg, max) = (1364348.056, 1433860.454, 1506968.179), stdev = 37794.365
  CI (99.9%): [1408609.551, 1459111.356] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableTakeLastTimedTest._Benchmark.benchmark_lastWindowIsFixedInTime  thrpt   30  1433860.454 ± 25250.902  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorInlineLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorInlineLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74181.946 ops/s
# Warmup Iteration   2: 379742.556 ops/s
# Warmup Iteration   3: 508647.252 ops/s
# Warmup Iteration   4: 524732.861 ops/s
# Warmup Iteration   5: 476784.081 ops/s
# Warmup Iteration   6: 576479.945 ops/s
# Warmup Iteration   7: 577451.522 ops/s
# Warmup Iteration   8: 572473.876 ops/s
# Warmup Iteration   9: 571760.408 ops/s
# Warmup Iteration  10: 567564.215 ops/s
# Warmup Iteration  11: 584722.642 ops/s
# Warmup Iteration  12: 583891.402 ops/s
# Warmup Iteration  13: 555009.243 ops/s
# Warmup Iteration  14: 604121.305 ops/s
# Warmup Iteration  15: 562553.696 ops/s
# Warmup Iteration  16: 588621.479 ops/s
# Warmup Iteration  17: 609239.849 ops/s
# Warmup Iteration  18: 595726.759 ops/s
# Warmup Iteration  19: 619613.286 ops/s
# Warmup Iteration  20: 595986.941 ops/s
# Warmup Iteration  21: 611250.139 ops/s
# Warmup Iteration  22: 586901.282 ops/s
# Warmup Iteration  23: 602306.836 ops/s
# Warmup Iteration  24: 604867.251 ops/s
# Warmup Iteration  25: 592316.733 ops/s
# Warmup Iteration  26: 595779.613 ops/s
# Warmup Iteration  27: 599745.097 ops/s
# Warmup Iteration  28: 599591.627 ops/s
# Warmup Iteration  29: 612573.214 ops/s
# Warmup Iteration  30: 580584.364 ops/s
Iteration   1: 620419.428 ops/s
Iteration   2: 601643.513 ops/s
Iteration   3: 590432.166 ops/s
Iteration   4: 631267.906 ops/s
Iteration   5: 596870.938 ops/s
Iteration   6: 606462.198 ops/s
Iteration   7: 627777.581 ops/s
Iteration   8: 600360.438 ops/s
Iteration   9: 621549.619 ops/s
Iteration  10: 602509.740 ops/s
Iteration  11: 609040.921 ops/s
Iteration  12: 597432.958 ops/s
Iteration  13: 623730.816 ops/s
Iteration  14: 597056.062 ops/s
Iteration  15: 623071.738 ops/s
Iteration  16: 594864.374 ops/s
Iteration  17: 609420.984 ops/s
Iteration  18: 606224.775 ops/s
Iteration  19: 610749.844 ops/s
Iteration  20: 611282.301 ops/s
Iteration  21: 593861.404 ops/s
Iteration  22: 634583.844 ops/s
Iteration  23: 485922.673 ops/s
Iteration  24: 617035.084 ops/s
Iteration  25: 592816.367 ops/s
Iteration  26: 623812.661 ops/s
Iteration  27: 623997.341 ops/s
Iteration  28: 583742.264 ops/s
Iteration  29: 598081.330 ops/s
Iteration  30: 610560.520 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorInlineLatest":
  604886.060 ±(99.9%) 17443.181 ops/s [Average]
  (min, avg, max) = (485922.673, 604886.060, 634583.844), stdev = 26108.134
  CI (99.9%): [587442.879, 622329.241] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_errorInlineLatest  thrpt   30  604886.060 ± 17443.181  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnNextCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnNextCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32930.970 ops/s
# Warmup Iteration   2: 272710.432 ops/s
# Warmup Iteration   3: 487738.672 ops/s
# Warmup Iteration   4: 570315.664 ops/s
# Warmup Iteration   5: 562384.538 ops/s
# Warmup Iteration   6: 543381.585 ops/s
# Warmup Iteration   7: 556369.606 ops/s
# Warmup Iteration   8: 546433.006 ops/s
# Warmup Iteration   9: 514217.689 ops/s
# Warmup Iteration  10: 563880.036 ops/s
# Warmup Iteration  11: 538159.328 ops/s
# Warmup Iteration  12: 566301.895 ops/s
# Warmup Iteration  13: 557998.825 ops/s
# Warmup Iteration  14: 563265.502 ops/s
# Warmup Iteration  15: 568660.918 ops/s
# Warmup Iteration  16: 550594.519 ops/s
# Warmup Iteration  17: 596524.581 ops/s
# Warmup Iteration  18: 593007.551 ops/s
# Warmup Iteration  19: 569956.511 ops/s
# Warmup Iteration  20: 594029.760 ops/s
# Warmup Iteration  21: 546144.768 ops/s
# Warmup Iteration  22: 577868.372 ops/s
# Warmup Iteration  23: 583977.169 ops/s
# Warmup Iteration  24: 561659.467 ops/s
# Warmup Iteration  25: 575482.352 ops/s
# Warmup Iteration  26: 597273.926 ops/s
# Warmup Iteration  27: 559062.483 ops/s
# Warmup Iteration  28: 596689.628 ops/s
# Warmup Iteration  29: 599058.289 ops/s
# Warmup Iteration  30: 567695.613 ops/s
Iteration   1: 591156.978 ops/s
Iteration   2: 591645.599 ops/s
Iteration   3: 586531.553 ops/s
Iteration   4: 595818.540 ops/s
Iteration   5: 578954.734 ops/s
Iteration   6: 603654.928 ops/s
Iteration   7: 571189.931 ops/s
Iteration   8: 592587.314 ops/s
Iteration   9: 587866.773 ops/s
Iteration  10: 588903.272 ops/s
Iteration  11: 584666.884 ops/s
Iteration  12: 574083.200 ops/s
Iteration  13: 598838.308 ops/s
Iteration  14: 572740.266 ops/s
Iteration  15: 590423.360 ops/s
Iteration  16: 573101.564 ops/s
Iteration  17: 587741.269 ops/s
Iteration  18: 604455.782 ops/s
Iteration  19: 566610.608 ops/s
Iteration  20: 591924.161 ops/s
Iteration  21: 571965.216 ops/s
Iteration  22: 593272.667 ops/s
Iteration  23: 594655.491 ops/s
Iteration  24: 565598.380 ops/s
Iteration  25: 608123.782 ops/s
Iteration  26: 573846.618 ops/s
Iteration  27: 597654.656 ops/s
Iteration  28: 567153.128 ops/s
Iteration  29: 595253.014 ops/s
Iteration  30: 605799.057 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherOnNextCompletable":
  586873.901 ±(99.9%) 8359.573 ops/s [Average]
  (min, avg, max) = (565598.380, 586873.901, 608123.782), stdev = 12512.216
  CI (99.9%): [578514.329, 595233.474] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
SingleTakeUntilTest._Benchmark.benchmark_otherOnNextCompletable  thrpt   30  586873.901 ± 8359.573  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_oneStartOnly$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_oneStartOnly

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 269946.886 ops/s
# Warmup Iteration   2: 1425982.116 ops/s
# Warmup Iteration   3: 1823462.912 ops/s
# Warmup Iteration   4: 1913258.000 ops/s
# Warmup Iteration   5: 2003160.473 ops/s
# Warmup Iteration   6: 1873949.767 ops/s
# Warmup Iteration   7: 1956923.986 ops/s
# Warmup Iteration   8: 1964831.912 ops/s
# Warmup Iteration   9: 1915777.540 ops/s
# Warmup Iteration  10: 1939162.852 ops/s
# Warmup Iteration  11: 2029645.998 ops/s
# Warmup Iteration  12: 1951056.907 ops/s
# Warmup Iteration  13: 2019850.349 ops/s
# Warmup Iteration  14: 1928387.888 ops/s
# Warmup Iteration  15: 1983140.162 ops/s
# Warmup Iteration  16: 1896875.153 ops/s
# Warmup Iteration  17: 1898048.221 ops/s
# Warmup Iteration  18: 1969605.564 ops/s
# Warmup Iteration  19: 1908072.828 ops/s
# Warmup Iteration  20: 2034886.612 ops/s
# Warmup Iteration  21: 1959792.803 ops/s
# Warmup Iteration  22: 1974527.755 ops/s
# Warmup Iteration  23: 2041729.607 ops/s
# Warmup Iteration  24: 1949173.399 ops/s
# Warmup Iteration  25: 1914911.174 ops/s
# Warmup Iteration  26: 1940466.169 ops/s
# Warmup Iteration  27: 1968768.257 ops/s
# Warmup Iteration  28: 1916679.283 ops/s
# Warmup Iteration  29: 1992087.200 ops/s
# Warmup Iteration  30: 1900308.334 ops/s
Iteration   1: 2000664.540 ops/s
Iteration   2: 1910004.364 ops/s
Iteration   3: 2051242.140 ops/s
Iteration   4: 1941766.364 ops/s
Iteration   5: 1996683.238 ops/s
Iteration   6: 2000131.150 ops/s
Iteration   7: 2017796.812 ops/s
Iteration   8: 1893070.582 ops/s
Iteration   9: 2040501.423 ops/s
Iteration  10: 1929892.873 ops/s
Iteration  11: 2004631.397 ops/s
Iteration  12: 1978771.913 ops/s
Iteration  13: 1980230.610 ops/s
Iteration  14: 1971749.395 ops/s
Iteration  15: 1898164.739 ops/s
Iteration  16: 1961011.129 ops/s
Iteration  17: 1771931.564 ops/s
Iteration  18: 1858228.401 ops/s
Iteration  19: 1960619.440 ops/s
Iteration  20: 1989938.542 ops/s
Iteration  21: 1914419.247 ops/s
Iteration  22: 2012071.391 ops/s
Iteration  23: 1938802.667 ops/s
Iteration  24: 1984398.458 ops/s
Iteration  25: 2014203.378 ops/s
Iteration  26: 1928659.676 ops/s
Iteration  27: 2009518.039 ops/s
Iteration  28: 1916928.654 ops/s
Iteration  29: 2015349.809 ops/s
Iteration  30: 1929466.176 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_oneStartOnly":
  1960694.937 ±(99.9%) 39692.516 ops/s [Average]
  (min, avg, max) = (1771931.564, 1960694.937, 2051242.140), stdev = 59409.894
  CI (99.9%): [1921002.421, 2000387.453] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_oneStartOnly  thrpt   30  1960694.937 ± 39692.516  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80988.828 ops/s
# Warmup Iteration   2: 425301.119 ops/s
# Warmup Iteration   3: 569639.712 ops/s
# Warmup Iteration   4: 601772.091 ops/s
# Warmup Iteration   5: 610827.209 ops/s
# Warmup Iteration   6: 600020.104 ops/s
# Warmup Iteration   7: 591010.605 ops/s
# Warmup Iteration   8: 628506.714 ops/s
# Warmup Iteration   9: 588264.024 ops/s
# Warmup Iteration  10: 620189.051 ops/s
# Warmup Iteration  11: 605130.836 ops/s
# Warmup Iteration  12: 602332.908 ops/s
# Warmup Iteration  13: 618546.334 ops/s
# Warmup Iteration  14: 581709.440 ops/s
# Warmup Iteration  15: 603327.810 ops/s
# Warmup Iteration  16: 594180.335 ops/s
# Warmup Iteration  17: 651320.682 ops/s
# Warmup Iteration  18: 642608.110 ops/s
# Warmup Iteration  19: 665539.421 ops/s
# Warmup Iteration  20: 622843.249 ops/s
# Warmup Iteration  21: 654477.652 ops/s
# Warmup Iteration  22: 629494.012 ops/s
# Warmup Iteration  23: 660612.627 ops/s
# Warmup Iteration  24: 633121.244 ops/s
# Warmup Iteration  25: 619853.132 ops/s
# Warmup Iteration  26: 641900.955 ops/s
# Warmup Iteration  27: 632232.575 ops/s
# Warmup Iteration  28: 638270.471 ops/s
# Warmup Iteration  29: 632965.856 ops/s
# Warmup Iteration  30: 634605.333 ops/s
Iteration   1: 627900.368 ops/s
Iteration   2: 654338.442 ops/s
Iteration   3: 623288.407 ops/s
Iteration   4: 648006.621 ops/s
Iteration   5: 622317.297 ops/s
Iteration   6: 607854.410 ops/s
Iteration   7: 670420.932 ops/s
Iteration   8: 656270.685 ops/s
Iteration   9: 618672.468 ops/s
Iteration  10: 670704.834 ops/s
Iteration  11: 626452.140 ops/s
Iteration  12: 651099.138 ops/s
Iteration  13: 632723.106 ops/s
Iteration  14: 624936.793 ops/s
Iteration  15: 620414.914 ops/s
Iteration  16: 660459.598 ops/s
Iteration  17: 628305.924 ops/s
Iteration  18: 661889.150 ops/s
Iteration  19: 628389.093 ops/s
Iteration  20: 612438.904 ops/s
Iteration  21: 646570.001 ops/s
Iteration  22: 655087.666 ops/s
Iteration  23: 629420.410 ops/s
Iteration  24: 648341.609 ops/s
Iteration  25: 638699.207 ops/s
Iteration  26: 657591.900 ops/s
Iteration  27: 657674.267 ops/s
Iteration  28: 632639.967 ops/s
Iteration  29: 659121.879 ops/s
Iteration  30: 621124.306 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainError":
  639771.815 ±(99.9%) 12014.949 ops/s [Average]
  (min, avg, max) = (607854.410, 639771.815, 670704.834), stdev = 17983.412
  CI (99.9%): [627756.865, 651786.764] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
MaybeTimeoutPublisherTest._Benchmark.benchmark_mainError  thrpt   30  639771.815 ± 12014.949  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_justWithOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_justWithOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 79049.271 ops/s
# Warmup Iteration   2: 342302.956 ops/s
# Warmup Iteration   3: 562982.690 ops/s
# Warmup Iteration   4: 570552.975 ops/s
# Warmup Iteration   5: 593655.003 ops/s
# Warmup Iteration   6: 575323.042 ops/s
# Warmup Iteration   7: 606246.015 ops/s
# Warmup Iteration   8: 633275.301 ops/s
# Warmup Iteration   9: 630101.547 ops/s
# Warmup Iteration  10: 633287.348 ops/s
# Warmup Iteration  11: 637052.248 ops/s
# Warmup Iteration  12: 617971.352 ops/s
# Warmup Iteration  13: 644104.532 ops/s
# Warmup Iteration  14: 630973.657 ops/s
# Warmup Iteration  15: 629603.554 ops/s
# Warmup Iteration  16: 619746.410 ops/s
# Warmup Iteration  17: 679291.549 ops/s
# Warmup Iteration  18: 670428.174 ops/s
# Warmup Iteration  19: 647211.675 ops/s
# Warmup Iteration  20: 691664.916 ops/s
# Warmup Iteration  21: 644148.948 ops/s
# Warmup Iteration  22: 682542.376 ops/s
# Warmup Iteration  23: 643283.887 ops/s
# Warmup Iteration  24: 645075.997 ops/s
# Warmup Iteration  25: 674917.229 ops/s
# Warmup Iteration  26: 649739.177 ops/s
# Warmup Iteration  27: 656017.299 ops/s
# Warmup Iteration  28: 644205.569 ops/s
# Warmup Iteration  29: 691442.715 ops/s
# Warmup Iteration  30: 648763.467 ops/s
Iteration   1: 670148.187 ops/s
Iteration   2: 649212.271 ops/s
Iteration   3: 687709.068 ops/s
Iteration   4: 663589.122 ops/s
Iteration   5: 660349.285 ops/s
Iteration   6: 649713.003 ops/s
Iteration   7: 655762.988 ops/s
Iteration   8: 673160.155 ops/s
Iteration   9: 662186.983 ops/s
Iteration  10: 653776.745 ops/s
Iteration  11: 662089.323 ops/s
Iteration  12: 542901.433 ops/s
Iteration  13: 672453.296 ops/s
Iteration  14: 634237.631 ops/s
Iteration  15: 667217.461 ops/s
Iteration  16: 671443.910 ops/s
Iteration  17: 635406.954 ops/s
Iteration  18: 674259.018 ops/s
Iteration  19: 633847.474 ops/s
Iteration  20: 679148.534 ops/s
Iteration  21: 634148.504 ops/s
Iteration  22: 659299.369 ops/s
Iteration  23: 667311.546 ops/s
Iteration  24: 653382.170 ops/s
Iteration  25: 677527.194 ops/s
Iteration  26: 661884.675 ops/s
Iteration  27: 656404.546 ops/s
Iteration  28: 649915.112 ops/s
Iteration  29: 679340.665 ops/s
Iteration  30: 671461.367 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_justWithOnError":
  656976.266 ±(99.9%) 17253.681 ops/s [Average]
  (min, avg, max) = (542901.433, 656976.266, 687709.068), stdev = 25824.499
  CI (99.9%): [639722.586, 674229.947] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_justWithOnError  thrpt   30  656976.266 ± 17253.681  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancelBounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancelBounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157542.328 ops/s
# Warmup Iteration   2: 386482.310 ops/s
# Warmup Iteration   3: 350632.499 ops/s
# Warmup Iteration   4: 641301.654 ops/s
# Warmup Iteration   5: 1467856.812 ops/s
# Warmup Iteration   6: 1464053.206 ops/s
# Warmup Iteration   7: 1536151.928 ops/s
# Warmup Iteration   8: 1383531.695 ops/s
# Warmup Iteration   9: 1552026.888 ops/s
# Warmup Iteration  10: 1356399.569 ops/s
# Warmup Iteration  11: 1377567.488 ops/s
# Warmup Iteration  12: 1629916.060 ops/s
# Warmup Iteration  13: 1525248.654 ops/s
# Warmup Iteration  14: 1579297.876 ops/s
# Warmup Iteration  15: 1489459.329 ops/s
# Warmup Iteration  16: 1577993.828 ops/s
# Warmup Iteration  17: 1606196.842 ops/s
# Warmup Iteration  18: 1534072.796 ops/s
# Warmup Iteration  19: 1508021.791 ops/s
# Warmup Iteration  20: 1598431.403 ops/s
# Warmup Iteration  21: 1502414.150 ops/s
# Warmup Iteration  22: 1533335.806 ops/s
# Warmup Iteration  23: 1528895.848 ops/s
# Warmup Iteration  24: 1482556.121 ops/s
# Warmup Iteration  25: 1565705.679 ops/s
# Warmup Iteration  26: 1529478.714 ops/s
# Warmup Iteration  27: 1575884.502 ops/s
# Warmup Iteration  28: 1513429.070 ops/s
# Warmup Iteration  29: 1537540.329 ops/s
# Warmup Iteration  30: 1545727.797 ops/s
Iteration   1: 1557226.819 ops/s
Iteration   2: 1537965.424 ops/s
Iteration   3: 1572071.909 ops/s
Iteration   4: 1499190.551 ops/s
Iteration   5: 1596317.653 ops/s
Iteration   6: 1470709.700 ops/s
Iteration   7: 1614075.346 ops/s
Iteration   8: 1483876.260 ops/s
Iteration   9: 1588361.783 ops/s
Iteration  10: 1511753.316 ops/s
Iteration  11: 1538194.877 ops/s
Iteration  12: 1598346.535 ops/s
Iteration  13: 1547364.695 ops/s
Iteration  14: 1557373.558 ops/s
Iteration  15: 1538423.689 ops/s
Iteration  16: 1543248.572 ops/s
Iteration  17: 1574992.002 ops/s
Iteration  18: 1506123.889 ops/s
Iteration  19: 1576929.312 ops/s
Iteration  20: 1498009.545 ops/s
Iteration  21: 1580024.206 ops/s
Iteration  22: 1564708.876 ops/s
Iteration  23: 1529314.348 ops/s
Iteration  24: 1575022.032 ops/s
Iteration  25: 1492542.739 ops/s
Iteration  26: 1550166.269 ops/s
Iteration  27: 1572938.691 ops/s
Iteration  28: 1586937.840 ops/s
Iteration  29: 1604890.342 ops/s
Iteration  30: 1572222.400 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancelBounded":
  1551310.773 ±(99.9%) 25614.362 ops/s [Average]
  (min, avg, max) = (1470709.700, 1551310.773, 1614075.346), stdev = 38338.374
  CI (99.9%): [1525696.410, 1576925.135] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextCancelBounded  thrpt   30  1551310.773 ± 25614.362  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNextCancelBounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNextCancelBounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 199202.799 ops/s
# Warmup Iteration   2: 743528.103 ops/s
# Warmup Iteration   3: 1030025.783 ops/s
# Warmup Iteration   4: 1507986.660 ops/s
# Warmup Iteration   5: 1755131.595 ops/s
# Warmup Iteration   6: 1663087.885 ops/s
# Warmup Iteration   7: 1828483.351 ops/s
# Warmup Iteration   8: 1691886.047 ops/s
# Warmup Iteration   9: 1741856.303 ops/s
# Warmup Iteration  10: 1690115.619 ops/s
# Warmup Iteration  11: 1667915.291 ops/s
# Warmup Iteration  12: 1822494.827 ops/s
# Warmup Iteration  13: 1681259.293 ops/s
# Warmup Iteration  14: 1767156.375 ops/s
# Warmup Iteration  15: 1690793.262 ops/s
# Warmup Iteration  16: 1700830.530 ops/s
# Warmup Iteration  17: 1690601.815 ops/s
# Warmup Iteration  18: 1737530.499 ops/s
# Warmup Iteration  19: 1864074.912 ops/s
# Warmup Iteration  20: 1779774.307 ops/s
# Warmup Iteration  21: 1681859.667 ops/s
# Warmup Iteration  22: 1726601.696 ops/s
# Warmup Iteration  23: 1824714.534 ops/s
# Warmup Iteration  24: 1945588.089 ops/s
# Warmup Iteration  25: 1801496.578 ops/s
# Warmup Iteration  26: 1917707.719 ops/s
# Warmup Iteration  27: 1656250.470 ops/s
# Warmup Iteration  28: 1767897.462 ops/s
# Warmup Iteration  29: 1692834.107 ops/s
# Warmup Iteration  30: 1682259.374 ops/s
Iteration   1: 1690419.695 ops/s
Iteration   2: 1773689.777 ops/s
Iteration   3: 1679638.862 ops/s
Iteration   4: 1767526.604 ops/s
Iteration   5: 1667638.983 ops/s
Iteration   6: 1553704.581 ops/s
Iteration   7: 1563881.454 ops/s
Iteration   8: 1690360.853 ops/s
Iteration   9: 1687700.178 ops/s
Iteration  10: 1706021.984 ops/s
Iteration  11: 1726156.505 ops/s
Iteration  12: 1718494.750 ops/s
Iteration  13: 1755287.289 ops/s
Iteration  14: 1745771.521 ops/s
Iteration  15: 1698291.931 ops/s
Iteration  16: 1737872.271 ops/s
Iteration  17: 1630795.893 ops/s
Iteration  18: 1730599.670 ops/s
Iteration  19: 1699915.544 ops/s
Iteration  20: 1746818.524 ops/s
Iteration  21: 1705241.399 ops/s
Iteration  22: 1728798.766 ops/s
Iteration  23: 1716264.323 ops/s
Iteration  24: 1713087.629 ops/s
Iteration  25: 1730914.414 ops/s
Iteration  26: 1728170.583 ops/s
Iteration  27: 1715043.882 ops/s
Iteration  28: 1663970.882 ops/s
Iteration  29: 1752465.947 ops/s
Iteration  30: 1777158.717 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNextCancelBounded":
  1706723.447 ±(99.9%) 34915.936 ops/s [Average]
  (min, avg, max) = (1553704.581, 1706723.447, 1777158.717), stdev = 52260.533
  CI (99.9%): [1671807.511, 1741639.383] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_reentrantOnNextCancelBounded  thrpt   30  1706723.447 ± 34915.936  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115604.993 ops/s
# Warmup Iteration   2: 327563.652 ops/s
# Warmup Iteration   3: 832089.690 ops/s
# Warmup Iteration   4: 1184088.063 ops/s
# Warmup Iteration   5: 1256517.801 ops/s
# Warmup Iteration   6: 1201832.714 ops/s
# Warmup Iteration   7: 1210500.448 ops/s
# Warmup Iteration   8: 1233371.608 ops/s
# Warmup Iteration   9: 1170215.736 ops/s
# Warmup Iteration  10: 1195974.297 ops/s
# Warmup Iteration  11: 1245156.594 ops/s
# Warmup Iteration  12: 1214796.775 ops/s
# Warmup Iteration  13: 1271597.196 ops/s
# Warmup Iteration  14: 1171210.471 ops/s
# Warmup Iteration  15: 1266836.826 ops/s
# Warmup Iteration  16: 1219967.090 ops/s
# Warmup Iteration  17: 1255090.996 ops/s
# Warmup Iteration  18: 1198495.246 ops/s
# Warmup Iteration  19: 1213626.034 ops/s
# Warmup Iteration  20: 1249255.623 ops/s
# Warmup Iteration  21: 1212581.902 ops/s
# Warmup Iteration  22: 1223220.480 ops/s
# Warmup Iteration  23: 1220070.623 ops/s
# Warmup Iteration  24: 1241744.876 ops/s
# Warmup Iteration  25: 1282421.375 ops/s
# Warmup Iteration  26: 1217123.302 ops/s
# Warmup Iteration  27: 1259771.628 ops/s
# Warmup Iteration  28: 1255791.982 ops/s
# Warmup Iteration  29: 1212456.897 ops/s
# Warmup Iteration  30: 1232884.758 ops/s
Iteration   1: 1235498.836 ops/s
Iteration   2: 1276174.149 ops/s
Iteration   3: 1169385.132 ops/s
Iteration   4: 1261425.813 ops/s
Iteration   5: 1290444.860 ops/s
Iteration   6: 1177014.436 ops/s
Iteration   7: 1284870.821 ops/s
Iteration   8: 1224617.151 ops/s
Iteration   9: 1189297.429 ops/s
Iteration  10: 1252602.786 ops/s
Iteration  11: 1204407.602 ops/s
Iteration  12: 1254628.278 ops/s
Iteration  13: 1215337.463 ops/s
Iteration  14: 1261962.528 ops/s
Iteration  15: 1272740.392 ops/s
Iteration  16: 1255776.154 ops/s
Iteration  17: 1239953.532 ops/s
Iteration  18: 1249978.298 ops/s
Iteration  19: 1193271.292 ops/s
Iteration  20: 1298954.700 ops/s
Iteration  21: 1300144.375 ops/s
Iteration  22: 1238432.353 ops/s
Iteration  23: 1233249.982 ops/s
Iteration  24: 1216813.136 ops/s
Iteration  25: 1259732.356 ops/s
Iteration  26: 1239109.166 ops/s
Iteration  27: 1210865.246 ops/s
Iteration  28: 1256058.176 ops/s
Iteration  29: 1253603.558 ops/s
Iteration  30: 1229842.260 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_take":
  1241539.742 ±(99.9%) 22820.559 ops/s [Average]
  (min, avg, max) = (1169385.132, 1241539.742, 1300144.375), stdev = 34156.742
  CI (99.9%): [1218719.183, 1264360.302] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_take  thrpt   30  1241539.742 ± 22820.559  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 165801.426 ops/s
# Warmup Iteration   2: 453695.651 ops/s
# Warmup Iteration   3: 967000.927 ops/s
# Warmup Iteration   4: 1394220.036 ops/s
# Warmup Iteration   5: 1388975.945 ops/s
# Warmup Iteration   6: 1480553.994 ops/s
# Warmup Iteration   7: 1374196.294 ops/s
# Warmup Iteration   8: 1585937.020 ops/s
# Warmup Iteration   9: 1542499.061 ops/s
# Warmup Iteration  10: 1552114.445 ops/s
# Warmup Iteration  11: 1590278.939 ops/s
# Warmup Iteration  12: 1516758.039 ops/s
# Warmup Iteration  13: 1577708.505 ops/s
# Warmup Iteration  14: 1511580.720 ops/s
# Warmup Iteration  15: 1536225.812 ops/s
# Warmup Iteration  16: 1529325.937 ops/s
# Warmup Iteration  17: 1530515.672 ops/s
# Warmup Iteration  18: 1566099.099 ops/s
# Warmup Iteration  19: 1530305.115 ops/s
# Warmup Iteration  20: 1557247.376 ops/s
# Warmup Iteration  21: 1541940.338 ops/s
# Warmup Iteration  22: 1621125.701 ops/s
# Warmup Iteration  23: 1525326.563 ops/s
# Warmup Iteration  24: 1580647.544 ops/s
# Warmup Iteration  25: 1534862.971 ops/s
# Warmup Iteration  26: 1552114.646 ops/s
# Warmup Iteration  27: 1569259.138 ops/s
# Warmup Iteration  28: 1529208.919 ops/s
# Warmup Iteration  29: 1620966.539 ops/s
# Warmup Iteration  30: 1595953.289 ops/s
Iteration   1: 1196870.941 ops/s
Iteration   2: 1604701.046 ops/s
Iteration   3: 1596286.044 ops/s
Iteration   4: 1549714.629 ops/s
Iteration   5: 1590501.649 ops/s
Iteration   6: 1520108.842 ops/s
Iteration   7: 1583776.742 ops/s
Iteration   8: 1564462.144 ops/s
Iteration   9: 1520915.740 ops/s
Iteration  10: 1595196.448 ops/s
Iteration  11: 1529404.437 ops/s
Iteration  12: 1589246.705 ops/s
Iteration  13: 1526865.832 ops/s
Iteration  14: 1546826.211 ops/s
Iteration  15: 1537045.401 ops/s
Iteration  16: 1576999.348 ops/s
Iteration  17: 1587627.314 ops/s
Iteration  18: 1503151.154 ops/s
Iteration  19: 1609385.807 ops/s
Iteration  20: 1503945.262 ops/s
Iteration  21: 1579447.276 ops/s
Iteration  22: 1549696.917 ops/s
Iteration  23: 1599213.081 ops/s
Iteration  24: 1588169.488 ops/s
Iteration  25: 1626857.331 ops/s
Iteration  26: 1516793.493 ops/s
Iteration  27: 1547990.259 ops/s
Iteration  28: 1597378.338 ops/s
Iteration  29: 1506595.858 ops/s
Iteration  30: 1600111.158 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextBound":
  1551509.497 ±(99.9%) 50791.646 ops/s [Average]
  (min, avg, max) = (1196870.941, 1551509.497, 1626857.331), stdev = 76022.550
  CI (99.9%): [1500717.851, 1602301.143] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextBound  thrpt   30  1551509.497 ± 50791.646  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_takeOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_takeOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124652.458 ops/s
# Warmup Iteration   2: 806063.441 ops/s
# Warmup Iteration   3: 1173322.557 ops/s
# Warmup Iteration   4: 1433333.948 ops/s
# Warmup Iteration   5: 1476886.426 ops/s
# Warmup Iteration   6: 1391731.779 ops/s
# Warmup Iteration   7: 1476374.194 ops/s
# Warmup Iteration   8: 1386869.311 ops/s
# Warmup Iteration   9: 1462453.786 ops/s
# Warmup Iteration  10: 1414283.520 ops/s
# Warmup Iteration  11: 1377235.488 ops/s
# Warmup Iteration  12: 1478969.809 ops/s
# Warmup Iteration  13: 1391481.433 ops/s
# Warmup Iteration  14: 1419474.464 ops/s
# Warmup Iteration  15: 1480541.279 ops/s
# Warmup Iteration  16: 1423684.755 ops/s
# Warmup Iteration  17: 1468600.986 ops/s
# Warmup Iteration  18: 1435062.413 ops/s
# Warmup Iteration  19: 1427446.516 ops/s
# Warmup Iteration  20: 1451843.136 ops/s
# Warmup Iteration  21: 1341440.913 ops/s
# Warmup Iteration  22: 1419977.250 ops/s
# Warmup Iteration  23: 1493883.099 ops/s
# Warmup Iteration  24: 1418488.165 ops/s
# Warmup Iteration  25: 1434466.320 ops/s
# Warmup Iteration  26: 1459864.160 ops/s
# Warmup Iteration  27: 1368634.607 ops/s
# Warmup Iteration  28: 1470775.990 ops/s
# Warmup Iteration  29: 1429943.731 ops/s
# Warmup Iteration  30: 1430128.825 ops/s
Iteration   1: 1460859.506 ops/s
Iteration   2: 1396798.547 ops/s
Iteration   3: 1459542.077 ops/s
Iteration   4: 1400985.482 ops/s
Iteration   5: 1381388.638 ops/s
Iteration   6: 1508797.961 ops/s
Iteration   7: 1356010.836 ops/s
Iteration   8: 1438532.892 ops/s
Iteration   9: 1398540.739 ops/s
Iteration  10: 1449731.622 ops/s
Iteration  11: 1423269.970 ops/s
Iteration  12: 1454774.061 ops/s
Iteration  13: 1419656.508 ops/s
Iteration  14: 1392856.876 ops/s
Iteration  15: 1436396.400 ops/s
Iteration  16: 1405135.110 ops/s
Iteration  17: 1392547.940 ops/s
Iteration  18: 1455361.732 ops/s
Iteration  19: 1404150.988 ops/s
Iteration  20: 1405566.042 ops/s
Iteration  21: 1472130.846 ops/s
Iteration  22: 1382333.218 ops/s
Iteration  23: 1428439.691 ops/s
Iteration  24: 1461744.613 ops/s
Iteration  25: 1414242.015 ops/s
Iteration  26: 1483821.394 ops/s
Iteration  27: 1394708.892 ops/s
Iteration  28: 1426848.346 ops/s
Iteration  29: 1439681.646 ops/s
Iteration  30: 1391965.984 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_takeOne":
  1424560.686 ±(99.9%) 23373.745 ops/s [Average]
  (min, avg, max) = (1356010.836, 1424560.686, 1508797.961), stdev = 34984.723
  CI (99.9%): [1401186.941, 1447934.430] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_takeOne  thrpt   30  1424560.686 ± 23373.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNextBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNextBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 155223.466 ops/s
# Warmup Iteration   2: 260533.450 ops/s
# Warmup Iteration   3: 744190.349 ops/s
# Warmup Iteration   4: 1282981.479 ops/s
# Warmup Iteration   5: 1382099.508 ops/s
# Warmup Iteration   6: 1385770.521 ops/s
# Warmup Iteration   7: 1365639.874 ops/s
# Warmup Iteration   8: 1406503.698 ops/s
# Warmup Iteration   9: 1405643.451 ops/s
# Warmup Iteration  10: 1373253.921 ops/s
# Warmup Iteration  11: 1467000.051 ops/s
# Warmup Iteration  12: 1380986.044 ops/s
# Warmup Iteration  13: 1366993.680 ops/s
# Warmup Iteration  14: 1345181.846 ops/s
# Warmup Iteration  15: 1427498.963 ops/s
# Warmup Iteration  16: 1460693.720 ops/s
# Warmup Iteration  17: 1338642.122 ops/s
# Warmup Iteration  18: 1475534.497 ops/s
# Warmup Iteration  19: 1460464.422 ops/s
# Warmup Iteration  20: 1434031.878 ops/s
# Warmup Iteration  21: 1420090.452 ops/s
# Warmup Iteration  22: 1408970.215 ops/s
# Warmup Iteration  23: 1455756.477 ops/s
# Warmup Iteration  24: 1408305.707 ops/s
# Warmup Iteration  25: 1151208.114 ops/s
# Warmup Iteration  26: 1408159.429 ops/s
# Warmup Iteration  27: 1462544.783 ops/s
# Warmup Iteration  28: 1502181.104 ops/s
# Warmup Iteration  29: 1391165.292 ops/s
# Warmup Iteration  30: 1457524.033 ops/s
Iteration   1: 1416776.489 ops/s
Iteration   2: 1401951.811 ops/s
Iteration   3: 1417521.812 ops/s
Iteration   4: 1379038.637 ops/s
Iteration   5: 1487028.392 ops/s
Iteration   6: 1428940.991 ops/s
Iteration   7: 1404290.906 ops/s
Iteration   8: 1412361.449 ops/s
Iteration   9: 1487451.178 ops/s
Iteration  10: 1422297.016 ops/s
Iteration  11: 1416826.006 ops/s
Iteration  12: 1419810.146 ops/s
Iteration  13: 1453570.793 ops/s
Iteration  14: 1459477.902 ops/s
Iteration  15: 1417942.637 ops/s
Iteration  16: 1396521.014 ops/s
Iteration  17: 1455409.486 ops/s
Iteration  18: 1409857.099 ops/s
Iteration  19: 1460467.991 ops/s
Iteration  20: 1390962.517 ops/s
Iteration  21: 1413498.273 ops/s
Iteration  22: 1489078.000 ops/s
Iteration  23: 1392221.278 ops/s
Iteration  24: 1453986.158 ops/s
Iteration  25: 1425155.315 ops/s
Iteration  26: 1409222.036 ops/s
Iteration  27: 1470295.611 ops/s
Iteration  28: 1383660.063 ops/s
Iteration  29: 1484509.487 ops/s
Iteration  30: 1439102.222 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_reentrantOnNextBound":
  1429974.424 ±(99.9%) 21779.405 ops/s [Average]
  (min, avg, max) = (1379038.637, 1429974.424, 1489078.000), stdev = 32598.391
  CI (99.9%): [1408195.018, 1451753.829] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_reentrantOnNextBound  thrpt   30  1429974.424 ± 21779.405  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorBuffered$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorBuffered

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77068.022 ops/s
# Warmup Iteration   2: 305041.104 ops/s
# Warmup Iteration   3: 411387.593 ops/s
# Warmup Iteration   4: 427637.226 ops/s
# Warmup Iteration   5: 434921.403 ops/s
# Warmup Iteration   6: 405541.620 ops/s
# Warmup Iteration   7: 421539.806 ops/s
# Warmup Iteration   8: 418208.314 ops/s
# Warmup Iteration   9: 430849.222 ops/s
# Warmup Iteration  10: 415660.041 ops/s
# Warmup Iteration  11: 413132.397 ops/s
# Warmup Iteration  12: 431436.999 ops/s
# Warmup Iteration  13: 397579.403 ops/s
# Warmup Iteration  14: 439405.907 ops/s
# Warmup Iteration  15: 408980.271 ops/s
# Warmup Iteration  16: 426435.174 ops/s
# Warmup Iteration  17: 446417.264 ops/s
# Warmup Iteration  18: 442877.032 ops/s
# Warmup Iteration  19: 431456.109 ops/s
# Warmup Iteration  20: 435183.988 ops/s
# Warmup Iteration  21: 443145.522 ops/s
# Warmup Iteration  22: 459719.081 ops/s
# Warmup Iteration  23: 430068.303 ops/s
# Warmup Iteration  24: 456471.967 ops/s
# Warmup Iteration  25: 448770.517 ops/s
# Warmup Iteration  26: 430885.976 ops/s
# Warmup Iteration  27: 445942.430 ops/s
# Warmup Iteration  28: 453404.052 ops/s
# Warmup Iteration  29: 430553.692 ops/s
# Warmup Iteration  30: 438973.944 ops/s
Iteration   1: 455446.285 ops/s
Iteration   2: 422184.859 ops/s
Iteration   3: 441137.992 ops/s
Iteration   4: 434094.952 ops/s
Iteration   5: 428716.567 ops/s
Iteration   6: 446754.929 ops/s
Iteration   7: 440331.928 ops/s
Iteration   8: 446709.533 ops/s
Iteration   9: 432608.067 ops/s
Iteration  10: 455205.566 ops/s
Iteration  11: 433836.313 ops/s
Iteration  12: 445782.720 ops/s
Iteration  13: 440003.472 ops/s
Iteration  14: 431585.566 ops/s
Iteration  15: 428282.564 ops/s
Iteration  16: 441590.822 ops/s
Iteration  17: 425439.989 ops/s
Iteration  18: 426755.743 ops/s
Iteration  19: 452354.647 ops/s
Iteration  20: 420419.790 ops/s
Iteration  21: 446536.984 ops/s
Iteration  22: 434381.253 ops/s
Iteration  23: 449436.045 ops/s
Iteration  24: 440764.017 ops/s
Iteration  25: 438700.679 ops/s
Iteration  26: 445669.333 ops/s
Iteration  27: 447451.815 ops/s
Iteration  28: 452965.824 ops/s
Iteration  29: 430577.338 ops/s
Iteration  30: 457109.560 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorBuffered":
  439761.172 ±(99.9%) 6910.738 ops/s [Average]
  (min, avg, max) = (420419.790, 439761.172, 457109.560), stdev = 10343.668
  CI (99.9%): [432850.434, 446671.910] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableFromSourceTest._Benchmark.benchmark_errorBuffered  thrpt   30  439761.172 ± 6910.738  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 370585.123 ops/s
# Warmup Iteration   2: 1605464.755 ops/s
# Warmup Iteration   3: 3194230.484 ops/s
# Warmup Iteration   4: 3404546.694 ops/s
# Warmup Iteration   5: 3534139.423 ops/s
# Warmup Iteration   6: 3144836.594 ops/s
# Warmup Iteration   7: 3138211.514 ops/s
# Warmup Iteration   8: 3589460.648 ops/s
# Warmup Iteration   9: 3400478.423 ops/s
# Warmup Iteration  10: 3606824.099 ops/s
# Warmup Iteration  11: 3358990.838 ops/s
# Warmup Iteration  12: 3496531.092 ops/s
# Warmup Iteration  13: 3624671.962 ops/s
# Warmup Iteration  14: 3383197.569 ops/s
# Warmup Iteration  15: 3614686.987 ops/s
# Warmup Iteration  16: 3368645.757 ops/s
# Warmup Iteration  17: 3590317.613 ops/s
# Warmup Iteration  18: 3380569.674 ops/s
# Warmup Iteration  19: 3576223.431 ops/s
# Warmup Iteration  20: 2670321.492 ops/s
# Warmup Iteration  21: 3499037.417 ops/s
# Warmup Iteration  22: 3612057.265 ops/s
# Warmup Iteration  23: 3417288.054 ops/s
# Warmup Iteration  24: 3419804.216 ops/s
# Warmup Iteration  25: 3457064.826 ops/s
# Warmup Iteration  26: 3387608.186 ops/s
# Warmup Iteration  27: 3503020.050 ops/s
# Warmup Iteration  28: 3413938.043 ops/s
# Warmup Iteration  29: 3642575.081 ops/s
# Warmup Iteration  30: 3388892.542 ops/s
Iteration   1: 3439912.534 ops/s
Iteration   2: 3477191.288 ops/s
Iteration   3: 3417068.319 ops/s
Iteration   4: 3515372.193 ops/s
Iteration   5: 3423983.741 ops/s
Iteration   6: 3466421.365 ops/s
Iteration   7: 3537349.287 ops/s
Iteration   8: 3441627.136 ops/s
Iteration   9: 3606862.525 ops/s
Iteration  10: 3312951.122 ops/s
Iteration  11: 3460157.265 ops/s
Iteration  12: 3597833.989 ops/s
Iteration  13: 3580411.416 ops/s
Iteration  14: 3394443.532 ops/s
Iteration  15: 3501895.817 ops/s
Iteration  16: 3387883.643 ops/s
Iteration  17: 3394419.607 ops/s
Iteration  18: 3469238.621 ops/s
Iteration  19: 3381499.982 ops/s
Iteration  20: 3616166.089 ops/s
Iteration  21: 3587398.275 ops/s
Iteration  22: 3352965.630 ops/s
Iteration  23: 3475904.613 ops/s
Iteration  24: 3539417.288 ops/s
Iteration  25: 3416465.630 ops/s
Iteration  26: 3565117.631 ops/s
Iteration  27: 3288488.385 ops/s
Iteration  28: 3545879.851 ops/s
Iteration  29: 3494136.502 ops/s
Iteration  30: 3456901.621 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_normal":
  3471512.163 ±(99.9%) 57837.451 ops/s [Average]
  (min, avg, max) = (3288488.385, 3471512.163, 3616166.089), stdev = 86568.381
  CI (99.9%): [3413674.712, 3529349.615] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_normal  thrpt   30  3471512.163 ± 57837.451  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_emptyIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_emptyIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 722913.163 ops/s
# Warmup Iteration   2: 2969990.922 ops/s
# Warmup Iteration   3: 4870303.614 ops/s
# Warmup Iteration   4: 5113706.343 ops/s
# Warmup Iteration   5: 5634997.923 ops/s
# Warmup Iteration   6: 5477330.170 ops/s
# Warmup Iteration   7: 5324338.671 ops/s
# Warmup Iteration   8: 5611416.492 ops/s
# Warmup Iteration   9: 5578216.866 ops/s
# Warmup Iteration  10: 5336147.846 ops/s
# Warmup Iteration  11: 5385792.348 ops/s
# Warmup Iteration  12: 5693318.851 ops/s
# Warmup Iteration  13: 5264201.489 ops/s
# Warmup Iteration  14: 5668078.033 ops/s
# Warmup Iteration  15: 5416524.448 ops/s
# Warmup Iteration  16: 5266424.812 ops/s
# Warmup Iteration  17: 5542570.817 ops/s
# Warmup Iteration  18: 5318114.706 ops/s
# Warmup Iteration  19: 5599250.374 ops/s
# Warmup Iteration  20: 5449136.446 ops/s
# Warmup Iteration  21: 5369885.598 ops/s
# Warmup Iteration  22: 5703566.881 ops/s
# Warmup Iteration  23: 5237141.558 ops/s
# Warmup Iteration  24: 5307235.408 ops/s
# Warmup Iteration  25: 5728728.973 ops/s
# Warmup Iteration  26: 5296153.230 ops/s
# Warmup Iteration  27: 5399710.294 ops/s
# Warmup Iteration  28: 5668040.995 ops/s
# Warmup Iteration  29: 5317763.220 ops/s
# Warmup Iteration  30: 5577053.445 ops/s
Iteration   1: 5678753.977 ops/s
Iteration   2: 5569452.888 ops/s
Iteration   3: 5559011.511 ops/s
Iteration   4: 5341691.679 ops/s
Iteration   5: 5547621.896 ops/s
Iteration   6: 5301671.089 ops/s
Iteration   7: 5605677.628 ops/s
Iteration   8: 5405965.366 ops/s
Iteration   9: 5624675.838 ops/s
Iteration  10: 5366233.328 ops/s
Iteration  11: 5343415.489 ops/s
Iteration  12: 5538724.513 ops/s
Iteration  13: 5260880.096 ops/s
Iteration  14: 5379820.513 ops/s
Iteration  15: 5504818.427 ops/s
Iteration  16: 5665084.433 ops/s
Iteration  17: 5380387.362 ops/s
Iteration  18: 5530015.860 ops/s
Iteration  19: 5532209.087 ops/s
Iteration  20: 5274619.134 ops/s
Iteration  21: 5623966.367 ops/s
Iteration  22: 5394371.099 ops/s
Iteration  23: 5423338.504 ops/s
Iteration  24: 5490417.186 ops/s
Iteration  25: 5390742.687 ops/s
Iteration  26: 5717327.805 ops/s
Iteration  27: 5384497.026 ops/s
Iteration  28: 5322915.440 ops/s
Iteration  29: 5591219.924 ops/s
Iteration  30: 5366047.895 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_emptyIterable":
  5470519.135 ±(99.9%) 86746.639 ops/s [Average]
  (min, avg, max) = (5260880.096, 5470519.135, 5717327.805), stdev = 129838.295
  CI (99.9%): [5383772.496, 5557265.774] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_emptyIterable  thrpt   30  5470519.135 ± 86746.639  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fusedNoSync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fusedNoSync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 298777.039 ops/s
# Warmup Iteration   2: 1906863.905 ops/s
# Warmup Iteration   3: 3879086.110 ops/s
# Warmup Iteration   4: 3772138.681 ops/s
# Warmup Iteration   5: 3932465.893 ops/s
# Warmup Iteration   6: 3502432.757 ops/s
# Warmup Iteration   7: 3500707.598 ops/s
# Warmup Iteration   8: 3994941.508 ops/s
# Warmup Iteration   9: 3932070.800 ops/s
# Warmup Iteration  10: 3932200.953 ops/s
# Warmup Iteration  11: 3831106.963 ops/s
# Warmup Iteration  12: 3933838.415 ops/s
# Warmup Iteration  13: 3893846.500 ops/s
# Warmup Iteration  14: 2935258.302 ops/s
# Warmup Iteration  15: 3964376.740 ops/s
# Warmup Iteration  16: 4062874.103 ops/s
# Warmup Iteration  17: 3838718.825 ops/s
# Warmup Iteration  18: 3962987.264 ops/s
# Warmup Iteration  19: 3708973.968 ops/s
# Warmup Iteration  20: 3909824.383 ops/s
# Warmup Iteration  21: 3804830.562 ops/s
# Warmup Iteration  22: 3984511.002 ops/s
# Warmup Iteration  23: 3898448.128 ops/s
# Warmup Iteration  24: 3844096.658 ops/s
# Warmup Iteration  25: 3736957.629 ops/s
# Warmup Iteration  26: 4002281.242 ops/s
# Warmup Iteration  27: 3863963.543 ops/s
# Warmup Iteration  28: 3804958.375 ops/s
# Warmup Iteration  29: 3952844.066 ops/s
# Warmup Iteration  30: 3785768.345 ops/s
Iteration   1: 3815661.927 ops/s
Iteration   2: 3930965.459 ops/s
Iteration   3: 3810313.117 ops/s
Iteration   4: 3884941.054 ops/s
Iteration   5: 3870538.249 ops/s
Iteration   6: 3856625.748 ops/s
Iteration   7: 3893538.373 ops/s
Iteration   8: 3767932.394 ops/s
Iteration   9: 3939953.604 ops/s
Iteration  10: 3823300.283 ops/s
Iteration  11: 3883485.827 ops/s
Iteration  12: 3809437.384 ops/s
Iteration  13: 3891117.153 ops/s
Iteration  14: 3905187.766 ops/s
Iteration  15: 3984433.224 ops/s
Iteration  16: 3875147.440 ops/s
Iteration  17: 3877086.940 ops/s
Iteration  18: 3938933.040 ops/s
Iteration  19: 3839398.716 ops/s
Iteration  20: 3816939.578 ops/s
Iteration  21: 4000917.872 ops/s
Iteration  22: 3779130.169 ops/s
Iteration  23: 3988994.479 ops/s
Iteration  24: 3800066.553 ops/s
Iteration  25: 3845250.283 ops/s
Iteration  26: 4023573.652 ops/s
Iteration  27: 3766701.882 ops/s
Iteration  28: 3931480.534 ops/s
Iteration  29: 3706151.524 ops/s
Iteration  30: 3982165.082 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fusedNoSync":
  3874645.644 ±(99.9%) 52308.631 ops/s [Average]
  (min, avg, max) = (3706151.524, 3874645.644, 4023573.652), stdev = 78293.103
  CI (99.9%): [3822337.012, 3926954.275] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fusedNoSync  thrpt   30  3874645.644 ± 52308.631  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fastPathCancelAfterHasNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fastPathCancelAfterHasNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162512.999 ops/s
# Warmup Iteration   2: 470322.998 ops/s
# Warmup Iteration   3: 646737.169 ops/s
# Warmup Iteration   4: 630095.947 ops/s
# Warmup Iteration   5: 626303.610 ops/s
# Warmup Iteration   6: 644389.830 ops/s
# Warmup Iteration   7: 637919.978 ops/s
# Warmup Iteration   8: 643494.679 ops/s
# Warmup Iteration   9: 635170.845 ops/s
# Warmup Iteration  10: 657002.142 ops/s
# Warmup Iteration  11: 646004.434 ops/s
# Warmup Iteration  12: 635798.712 ops/s
# Warmup Iteration  13: 655071.545 ops/s
# Warmup Iteration  14: 629828.986 ops/s
# Warmup Iteration  15: 647086.377 ops/s
# Warmup Iteration  16: 631919.878 ops/s
# Warmup Iteration  17: 605243.929 ops/s
# Warmup Iteration  18: 649010.618 ops/s
# Warmup Iteration  19: 611570.149 ops/s
# Warmup Iteration  20: 619839.170 ops/s
# Warmup Iteration  21: 619029.401 ops/s
# Warmup Iteration  22: 633441.344 ops/s
# Warmup Iteration  23: 629031.603 ops/s
# Warmup Iteration  24: 592577.397 ops/s
# Warmup Iteration  25: 620732.613 ops/s
# Warmup Iteration  26: 638795.675 ops/s
# Warmup Iteration  27: 617267.621 ops/s
# Warmup Iteration  28: 625016.007 ops/s
# Warmup Iteration  29: 618853.381 ops/s
# Warmup Iteration  30: 609635.823 ops/s
Iteration   1: 653610.100 ops/s
Iteration   2: 611436.888 ops/s
Iteration   3: 641772.796 ops/s
Iteration   4: 630667.267 ops/s
Iteration   5: 612401.057 ops/s
Iteration   6: 639259.058 ops/s
Iteration   7: 607692.299 ops/s
Iteration   8: 615417.362 ops/s
Iteration   9: 599799.704 ops/s
Iteration  10: 625147.664 ops/s
Iteration  11: 649686.182 ops/s
Iteration  12: 628915.193 ops/s
Iteration  13: 614967.279 ops/s
Iteration  14: 652957.047 ops/s
Iteration  15: 618430.879 ops/s
Iteration  16: 639930.365 ops/s
Iteration  17: 628687.731 ops/s
Iteration  18: 650254.666 ops/s
Iteration  19: 635704.079 ops/s
Iteration  20: 634273.567 ops/s
Iteration  21: 634512.620 ops/s
Iteration  22: 603842.963 ops/s
Iteration  23: 642976.028 ops/s
Iteration  24: 638093.550 ops/s
Iteration  25: 610312.550 ops/s
Iteration  26: 665546.810 ops/s
Iteration  27: 637771.481 ops/s
Iteration  28: 626306.186 ops/s
Iteration  29: 611364.042 ops/s
Iteration  30: 654080.530 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fastPathCancelAfterHasNext":
  630527.265 ±(99.9%) 11439.516 ops/s [Average]
  (min, avg, max) = (599799.704, 630527.265, 665546.810), stdev = 17122.131
  CI (99.9%): [619087.748, 641966.781] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fastPathCancelAfterHasNext  thrpt   30  630527.265 ± 11439.516  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_slowPatchCancelAfterOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_slowPatchCancelAfterOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 547145.258 ops/s
# Warmup Iteration   2: 1957353.941 ops/s
# Warmup Iteration   3: 3729093.076 ops/s
# Warmup Iteration   4: 3604879.282 ops/s
# Warmup Iteration   5: 3370115.918 ops/s
# Warmup Iteration   6: 3398638.938 ops/s
# Warmup Iteration   7: 3624129.867 ops/s
# Warmup Iteration   8: 3034995.766 ops/s
# Warmup Iteration   9: 3667629.245 ops/s
# Warmup Iteration  10: 3650451.340 ops/s
# Warmup Iteration  11: 3657710.018 ops/s
# Warmup Iteration  12: 3683952.537 ops/s
# Warmup Iteration  13: 3578918.640 ops/s
# Warmup Iteration  14: 3693401.207 ops/s
# Warmup Iteration  15: 3644603.694 ops/s
# Warmup Iteration  16: 3541347.414 ops/s
# Warmup Iteration  17: 3768518.524 ops/s
# Warmup Iteration  18: 3550514.984 ops/s
# Warmup Iteration  19: 3635787.089 ops/s
# Warmup Iteration  20: 3592356.376 ops/s
# Warmup Iteration  21: 3670799.752 ops/s
# Warmup Iteration  22: 3574710.277 ops/s
# Warmup Iteration  23: 3587601.424 ops/s
# Warmup Iteration  24: 3651643.410 ops/s
# Warmup Iteration  25: 3543031.707 ops/s
# Warmup Iteration  26: 3727937.115 ops/s
# Warmup Iteration  27: 3478290.381 ops/s
# Warmup Iteration  28: 3603300.955 ops/s
# Warmup Iteration  29: 3598931.282 ops/s
# Warmup Iteration  30: 3565668.594 ops/s
Iteration   1: 3686879.165 ops/s
Iteration   2: 3637984.534 ops/s
Iteration   3: 3636587.926 ops/s
Iteration   4: 3786172.482 ops/s
Iteration   5: 3477279.545 ops/s
Iteration   6: 3696971.934 ops/s
Iteration   7: 3667686.079 ops/s
Iteration   8: 3586627.797 ops/s
Iteration   9: 3620650.505 ops/s
Iteration  10: 3722888.748 ops/s
Iteration  11: 3548743.728 ops/s
Iteration  12: 3710057.375 ops/s
Iteration  13: 3580954.953 ops/s
Iteration  14: 3713099.909 ops/s
Iteration  15: 3611905.430 ops/s
Iteration  16: 3523350.368 ops/s
Iteration  17: 3701941.989 ops/s
Iteration  18: 3540303.475 ops/s
Iteration  19: 3762152.870 ops/s
Iteration  20: 3538103.507 ops/s
Iteration  21: 3644173.098 ops/s
Iteration  22: 3764088.837 ops/s
Iteration  23: 3503865.893 ops/s
Iteration  24: 3798431.217 ops/s
Iteration  25: 3563916.188 ops/s
Iteration  26: 3656845.141 ops/s
Iteration  27: 3747739.021 ops/s
Iteration  28: 3807587.552 ops/s
Iteration  29: 3521468.670 ops/s
Iteration  30: 3868326.289 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_slowPatchCancelAfterOnNext":
  3654226.141 ±(99.9%) 68475.964 ops/s [Average]
  (min, avg, max) = (3477279.545, 3654226.141, 3868326.289), stdev = 102491.607
  CI (99.9%): [3585750.177, 3722702.104] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_slowPatchCancelAfterOnNext  thrpt   30  3654226.141 ± 68475.964  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_slowPathCancelAfterHasNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_slowPathCancelAfterHasNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 68902.517 ops/s
# Warmup Iteration   2: 358439.822 ops/s
# Warmup Iteration   3: 550948.469 ops/s
# Warmup Iteration   4: 628128.647 ops/s
# Warmup Iteration   5: 612961.763 ops/s
# Warmup Iteration   6: 629195.639 ops/s
# Warmup Iteration   7: 615572.551 ops/s
# Warmup Iteration   8: 633700.120 ops/s
# Warmup Iteration   9: 618307.161 ops/s
# Warmup Iteration  10: 630449.528 ops/s
# Warmup Iteration  11: 613533.210 ops/s
# Warmup Iteration  12: 635859.053 ops/s
# Warmup Iteration  13: 632923.233 ops/s
# Warmup Iteration  14: 607016.583 ops/s
# Warmup Iteration  15: 611205.296 ops/s
# Warmup Iteration  16: 640285.338 ops/s
# Warmup Iteration  17: 601699.356 ops/s
# Warmup Iteration  18: 604334.267 ops/s
# Warmup Iteration  19: 598328.881 ops/s
# Warmup Iteration  20: 599903.683 ops/s
# Warmup Iteration  21: 630224.705 ops/s
# Warmup Iteration  22: 641158.359 ops/s
# Warmup Iteration  23: 613197.074 ops/s
# Warmup Iteration  24: 609424.695 ops/s
# Warmup Iteration  25: 589383.618 ops/s
# Warmup Iteration  26: 621416.865 ops/s
# Warmup Iteration  27: 601103.839 ops/s
# Warmup Iteration  28: 606972.655 ops/s
# Warmup Iteration  29: 628689.655 ops/s
# Warmup Iteration  30: 587890.513 ops/s
Iteration   1: 617383.730 ops/s
Iteration   2: 565410.227 ops/s
Iteration   3: 605297.747 ops/s
Iteration   4: 622266.914 ops/s
Iteration   5: 610376.858 ops/s
Iteration   6: 618340.816 ops/s
Iteration   7: 628690.839 ops/s
Iteration   8: 617275.861 ops/s
Iteration   9: 612117.000 ops/s
Iteration  10: 607242.906 ops/s
Iteration  11: 633351.605 ops/s
Iteration  12: 610665.475 ops/s
Iteration  13: 634566.634 ops/s
Iteration  14: 608838.483 ops/s
Iteration  15: 625271.674 ops/s
Iteration  16: 637118.114 ops/s
Iteration  17: 602791.764 ops/s
Iteration  18: 640020.880 ops/s
Iteration  19: 627469.980 ops/s
Iteration  20: 639485.418 ops/s
Iteration  21: 612837.289 ops/s
Iteration  22: 627986.005 ops/s
Iteration  23: 619856.764 ops/s
Iteration  24: 636437.009 ops/s
Iteration  25: 622362.622 ops/s
Iteration  26: 623219.860 ops/s
Iteration  27: 641961.110 ops/s
Iteration  28: 619168.313 ops/s
Iteration  29: 632940.617 ops/s
Iteration  30: 638086.537 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_slowPathCancelAfterHasNext":
  621294.635 ±(99.9%) 10376.584 ops/s [Average]
  (min, avg, max) = (565410.227, 621294.635, 641961.110), stdev = 15531.184
  CI (99.9%): [610918.051, 631671.219] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_slowPathCancelAfterHasNext  thrpt   30  621294.635 ± 10376.584  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 579181.030 ops/s
# Warmup Iteration   2: 2547206.320 ops/s
# Warmup Iteration   3: 2387556.478 ops/s
# Warmup Iteration   4: 3968453.073 ops/s
# Warmup Iteration   5: 3722995.995 ops/s
# Warmup Iteration   6: 3878098.676 ops/s
# Warmup Iteration   7: 3664797.382 ops/s
# Warmup Iteration   8: 3824293.225 ops/s
# Warmup Iteration   9: 3977866.136 ops/s
# Warmup Iteration  10: 3663022.272 ops/s
# Warmup Iteration  11: 3884018.097 ops/s
# Warmup Iteration  12: 3943992.590 ops/s
# Warmup Iteration  13: 3710840.746 ops/s
# Warmup Iteration  14: 3883548.009 ops/s
# Warmup Iteration  15: 3956302.759 ops/s
# Warmup Iteration  16: 3655886.667 ops/s
# Warmup Iteration  17: 4027996.034 ops/s
# Warmup Iteration  18: 3911528.465 ops/s
# Warmup Iteration  19: 3832313.126 ops/s
# Warmup Iteration  20: 3939771.533 ops/s
# Warmup Iteration  21: 3743885.139 ops/s
# Warmup Iteration  22: 3779498.551 ops/s
# Warmup Iteration  23: 3907580.783 ops/s
# Warmup Iteration  24: 3757311.538 ops/s
# Warmup Iteration  25: 3898251.797 ops/s
# Warmup Iteration  26: 3911582.425 ops/s
# Warmup Iteration  27: 3803398.927 ops/s
# Warmup Iteration  28: 3944318.484 ops/s
# Warmup Iteration  29: 3749038.021 ops/s
# Warmup Iteration  30: 3865541.140 ops/s
Iteration   1: 3929633.001 ops/s
Iteration   2: 3759203.195 ops/s
Iteration   3: 3811004.793 ops/s
Iteration   4: 3751559.226 ops/s
Iteration   5: 3710329.669 ops/s
Iteration   6: 3924619.290 ops/s
Iteration   7: 3855592.005 ops/s
Iteration   8: 3902730.488 ops/s
Iteration   9: 3843193.696 ops/s
Iteration  10: 3872956.652 ops/s
Iteration  11: 3972748.513 ops/s
Iteration  12: 3669147.798 ops/s
Iteration  13: 4079707.493 ops/s
Iteration  14: 3672041.874 ops/s
Iteration  15: 3806118.764 ops/s
Iteration  16: 3790389.063 ops/s
Iteration  17: 3909565.129 ops/s
Iteration  18: 3723438.382 ops/s
Iteration  19: 3976832.836 ops/s
Iteration  20: 3834618.039 ops/s
Iteration  21: 3941883.721 ops/s
Iteration  22: 3887522.526 ops/s
Iteration  23: 3780459.460 ops/s
Iteration  24: 3903096.254 ops/s
Iteration  25: 4024025.497 ops/s
Iteration  26: 3915429.201 ops/s
Iteration  27: 3751080.423 ops/s
Iteration  28: 4031891.261 ops/s
Iteration  29: 3820226.825 ops/s
Iteration  30: 3925655.514 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fused":
  3859223.353 ±(99.9%) 70927.485 ops/s [Average]
  (min, avg, max) = (3669147.798, 3859223.353, 4079707.493), stdev = 106160.929
  CI (99.9%): [3788295.868, 3930150.838] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_fused  thrpt   30  3859223.353 ± 70927.485  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 463568.957 ops/s
# Warmup Iteration   2: 1557500.741 ops/s
# Warmup Iteration   3: 2787570.416 ops/s
# Warmup Iteration   4: 3365228.987 ops/s
# Warmup Iteration   5: 3306815.197 ops/s
# Warmup Iteration   6: 3433980.581 ops/s
# Warmup Iteration   7: 3275900.006 ops/s
# Warmup Iteration   8: 3213793.535 ops/s
# Warmup Iteration   9: 3354007.777 ops/s
# Warmup Iteration  10: 3338829.771 ops/s
# Warmup Iteration  11: 3250760.444 ops/s
# Warmup Iteration  12: 3471203.304 ops/s
# Warmup Iteration  13: 3282978.511 ops/s
# Warmup Iteration  14: 3376757.394 ops/s
# Warmup Iteration  15: 3295565.449 ops/s
# Warmup Iteration  16: 3466098.990 ops/s
# Warmup Iteration  17: 3317848.192 ops/s
# Warmup Iteration  18: 3219369.792 ops/s
# Warmup Iteration  19: 3449850.661 ops/s
# Warmup Iteration  20: 3213974.610 ops/s
# Warmup Iteration  21: 3378301.779 ops/s
# Warmup Iteration  22: 3249783.114 ops/s
# Warmup Iteration  23: 3451433.350 ops/s
# Warmup Iteration  24: 3344970.849 ops/s
# Warmup Iteration  25: 3234110.395 ops/s
# Warmup Iteration  26: 3396334.268 ops/s
# Warmup Iteration  27: 3303267.599 ops/s
# Warmup Iteration  28: 3310787.388 ops/s
# Warmup Iteration  29: 3450862.669 ops/s
# Warmup Iteration  30: 3320934.345 ops/s
Iteration   1: 3329462.626 ops/s
Iteration   2: 3457674.724 ops/s
Iteration   3: 3222376.203 ops/s
Iteration   4: 3362292.359 ops/s
Iteration   5: 3296543.014 ops/s
Iteration   6: 3408698.390 ops/s
Iteration   7: 3398693.683 ops/s
Iteration   8: 3285072.770 ops/s
Iteration   9: 3370495.195 ops/s
Iteration  10: 3337308.597 ops/s
Iteration  11: 3291253.000 ops/s
Iteration  12: 3517749.803 ops/s
Iteration  13: 3258996.174 ops/s
Iteration  14: 3370675.579 ops/s
Iteration  15: 3441101.974 ops/s
Iteration  16: 3213198.686 ops/s
Iteration  17: 3371497.279 ops/s
Iteration  18: 3437992.553 ops/s
Iteration  19: 3290531.019 ops/s
Iteration  20: 3473935.256 ops/s
Iteration  21: 3227446.375 ops/s
Iteration  22: 3428287.989 ops/s
Iteration  23: 3350124.080 ops/s
Iteration  24: 3335582.838 ops/s
Iteration  25: 3281483.303 ops/s
Iteration  26: 3388970.184 ops/s
Iteration  27: 3290010.655 ops/s
Iteration  28: 3474811.762 ops/s
Iteration  29: 2706368.485 ops/s
Iteration  30: 3210520.183 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_take":
  3327638.491 ±(99.9%) 96244.931 ops/s [Average]
  (min, avg, max) = (2706368.485, 3327638.491, 3517749.803), stdev = 144054.893
  CI (99.9%): [3231393.560, 3423883.423] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_take  thrpt   30  3327638.491 ± 96244.931  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 208492.449 ops/s
# Warmup Iteration   2: 1642609.962 ops/s
# Warmup Iteration   3: 2402590.449 ops/s
# Warmup Iteration   4: 3202334.941 ops/s
# Warmup Iteration   5: 3327027.005 ops/s
# Warmup Iteration   6: 3299137.032 ops/s
# Warmup Iteration   7: 3334786.896 ops/s
# Warmup Iteration   8: 3138797.840 ops/s
# Warmup Iteration   9: 3330119.393 ops/s
# Warmup Iteration  10: 3197209.380 ops/s
# Warmup Iteration  11: 3266599.225 ops/s
# Warmup Iteration  12: 3257879.546 ops/s
# Warmup Iteration  13: 3210509.671 ops/s
# Warmup Iteration  14: 3431481.548 ops/s
# Warmup Iteration  15: 3197770.912 ops/s
# Warmup Iteration  16: 3309598.946 ops/s
# Warmup Iteration  17: 3215086.110 ops/s
# Warmup Iteration  18: 3330267.287 ops/s
# Warmup Iteration  19: 3308841.320 ops/s
# Warmup Iteration  20: 3253182.688 ops/s
# Warmup Iteration  21: 3425286.761 ops/s
# Warmup Iteration  22: 3274961.323 ops/s
# Warmup Iteration  23: 3218478.934 ops/s
# Warmup Iteration  24: 3322506.220 ops/s
# Warmup Iteration  25: 3199716.391 ops/s
# Warmup Iteration  26: 3252360.969 ops/s
# Warmup Iteration  27: 3363653.083 ops/s
# Warmup Iteration  28: 3322295.645 ops/s
# Warmup Iteration  29: 3241560.850 ops/s
# Warmup Iteration  30: 3247520.620 ops/s
Iteration   1: 3354207.241 ops/s
Iteration   2: 3312654.549 ops/s
Iteration   3: 3231414.389 ops/s
Iteration   4: 3243140.737 ops/s
Iteration   5: 3348826.849 ops/s
Iteration   6: 3217630.829 ops/s
Iteration   7: 3407167.804 ops/s
Iteration   8: 3246591.304 ops/s
Iteration   9: 3373127.585 ops/s
Iteration  10: 3245509.138 ops/s
Iteration  11: 3245772.129 ops/s
Iteration  12: 3277869.027 ops/s
Iteration  13: 3248769.995 ops/s
Iteration  14: 3255713.959 ops/s
Iteration  15: 3211506.415 ops/s
Iteration  16: 3286608.367 ops/s
Iteration  17: 3417010.790 ops/s
Iteration  18: 3281985.201 ops/s
Iteration  19: 3268968.663 ops/s
Iteration  20: 3357028.361 ops/s
Iteration  21: 3207495.659 ops/s
Iteration  22: 3318260.151 ops/s
Iteration  23: 3221397.926 ops/s
Iteration  24: 3380740.771 ops/s
Iteration  25: 3245145.590 ops/s
Iteration  26: 3292502.993 ops/s
Iteration  27: 3423752.719 ops/s
Iteration  28: 3229918.265 ops/s
Iteration  29: 3339281.103 ops/s
Iteration  30: 3239229.248 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_backpressure":
  3290974.259 ±(99.9%) 43826.530 ops/s [Average]
  (min, avg, max) = (3207495.659, 3290974.259, 3423752.719), stdev = 65597.492
  CI (99.9%): [3247147.729, 3334800.788] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_backpressure  thrpt   30  3290974.259 ± 43826.530  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrowsUnbounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrowsUnbounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60845.268 ops/s
# Warmup Iteration   2: 421046.855 ops/s
# Warmup Iteration   3: 489168.079 ops/s
# Warmup Iteration   4: 449907.838 ops/s
# Warmup Iteration   5: 544853.672 ops/s
# Warmup Iteration   6: 443471.759 ops/s
# Warmup Iteration   7: 516237.100 ops/s
# Warmup Iteration   8: 541768.532 ops/s
# Warmup Iteration   9: 506314.565 ops/s
# Warmup Iteration  10: 526904.031 ops/s
# Warmup Iteration  11: 536265.994 ops/s
# Warmup Iteration  12: 525048.422 ops/s
# Warmup Iteration  13: 534069.434 ops/s
# Warmup Iteration  14: 516579.012 ops/s
# Warmup Iteration  15: 545718.576 ops/s
# Warmup Iteration  16: 520446.354 ops/s
# Warmup Iteration  17: 547068.759 ops/s
# Warmup Iteration  18: 566648.551 ops/s
# Warmup Iteration  19: 534192.883 ops/s
# Warmup Iteration  20: 557040.108 ops/s
# Warmup Iteration  21: 562209.200 ops/s
# Warmup Iteration  22: 546290.169 ops/s
# Warmup Iteration  23: 556686.953 ops/s
# Warmup Iteration  24: 550520.095 ops/s
# Warmup Iteration  25: 529754.378 ops/s
# Warmup Iteration  26: 554317.871 ops/s
# Warmup Iteration  27: 554590.929 ops/s
# Warmup Iteration  28: 544203.446 ops/s
# Warmup Iteration  29: 548520.708 ops/s
# Warmup Iteration  30: 557467.772 ops/s
Iteration   1: 548264.111 ops/s
Iteration   2: 566892.356 ops/s
Iteration   3: 538451.896 ops/s
Iteration   4: 545036.659 ops/s
Iteration   5: 571245.963 ops/s
Iteration   6: 529454.293 ops/s
Iteration   7: 577755.492 ops/s
Iteration   8: 540353.659 ops/s
Iteration   9: 566804.216 ops/s
Iteration  10: 541352.501 ops/s
Iteration  11: 550102.272 ops/s
Iteration  12: 571474.607 ops/s
Iteration  13: 546845.186 ops/s
Iteration  14: 557803.160 ops/s
Iteration  15: 549861.067 ops/s
Iteration  16: 556307.904 ops/s
Iteration  17: 550029.150 ops/s
Iteration  18: 558881.902 ops/s
Iteration  19: 531439.595 ops/s
Iteration  20: 569467.518 ops/s
Iteration  21: 573729.938 ops/s
Iteration  22: 549964.399 ops/s
Iteration  23: 534313.186 ops/s
Iteration  24: 457201.125 ops/s
Iteration  25: 567426.280 ops/s
Iteration  26: 543335.271 ops/s
Iteration  27: 574888.958 ops/s
Iteration  28: 535930.397 ops/s
Iteration  29: 539471.754 ops/s
Iteration  30: 569357.293 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrowsUnbounded":
  550448.070 ±(99.9%) 15184.967 ops/s [Average]
  (min, avg, max) = (457201.125, 550448.070, 577755.492), stdev = 22728.146
  CI (99.9%): [535263.103, 565633.038] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrowsUnbounded  thrpt   30  550448.070 ± 15184.967  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 66813.216 ops/s
# Warmup Iteration   2: 332192.496 ops/s
# Warmup Iteration   3: 513581.492 ops/s
# Warmup Iteration   4: 458491.356 ops/s
# Warmup Iteration   5: 521512.697 ops/s
# Warmup Iteration   6: 455621.307 ops/s
# Warmup Iteration   7: 525466.166 ops/s
# Warmup Iteration   8: 532310.992 ops/s
# Warmup Iteration   9: 540949.068 ops/s
# Warmup Iteration  10: 541988.780 ops/s
# Warmup Iteration  11: 510166.314 ops/s
# Warmup Iteration  12: 529389.905 ops/s
# Warmup Iteration  13: 543598.387 ops/s
# Warmup Iteration  14: 508546.202 ops/s
# Warmup Iteration  15: 551732.753 ops/s
# Warmup Iteration  16: 519543.874 ops/s
# Warmup Iteration  17: 533842.038 ops/s
# Warmup Iteration  18: 549843.891 ops/s
# Warmup Iteration  19: 538881.974 ops/s
# Warmup Iteration  20: 564650.752 ops/s
# Warmup Iteration  21: 534581.079 ops/s
# Warmup Iteration  22: 546481.835 ops/s
# Warmup Iteration  23: 531560.749 ops/s
# Warmup Iteration  24: 527741.545 ops/s
# Warmup Iteration  25: 549222.539 ops/s
# Warmup Iteration  26: 537468.998 ops/s
# Warmup Iteration  27: 539184.233 ops/s
# Warmup Iteration  28: 548596.094 ops/s
# Warmup Iteration  29: 527253.750 ops/s
# Warmup Iteration  30: 540277.778 ops/s
Iteration   1: 570307.179 ops/s
Iteration   2: 536252.434 ops/s
Iteration   3: 553530.840 ops/s
Iteration   4: 545819.104 ops/s
Iteration   5: 542210.906 ops/s
Iteration   6: 531240.187 ops/s
Iteration   7: 559584.608 ops/s
Iteration   8: 568021.710 ops/s
Iteration   9: 520147.629 ops/s
Iteration  10: 565217.657 ops/s
Iteration  11: 530614.905 ops/s
Iteration  12: 544477.034 ops/s
Iteration  13: 542118.501 ops/s
Iteration  14: 563776.211 ops/s
Iteration  15: 542242.514 ops/s
Iteration  16: 535724.892 ops/s
Iteration  17: 550027.478 ops/s
Iteration  18: 545671.672 ops/s
Iteration  19: 552966.605 ops/s
Iteration  20: 559251.592 ops/s
Iteration  21: 521345.553 ops/s
Iteration  22: 578499.789 ops/s
Iteration  23: 568809.585 ops/s
Iteration  24: 533794.467 ops/s
Iteration  25: 554268.573 ops/s
Iteration  26: 550528.742 ops/s
Iteration  27: 537883.922 ops/s
Iteration  28: 557928.013 ops/s
Iteration  29: 562185.111 ops/s
Iteration  30: 531741.435 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextCrash":
  548539.628 ±(99.9%) 10013.507 ops/s [Average]
  (min, avg, max) = (520147.629, 548539.628, 578499.789), stdev = 14987.747
  CI (99.9%): [538526.121, 558553.135] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextCrash  thrpt   30  548539.628 ± 10013.507  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 64976.357 ops/s
# Warmup Iteration   2: 268818.222 ops/s
# Warmup Iteration   3: 482280.337 ops/s
# Warmup Iteration   4: 482730.270 ops/s
# Warmup Iteration   5: 502489.554 ops/s
# Warmup Iteration   6: 445494.702 ops/s
# Warmup Iteration   7: 532128.791 ops/s
# Warmup Iteration   8: 501843.024 ops/s
# Warmup Iteration   9: 508334.758 ops/s
# Warmup Iteration  10: 521103.258 ops/s
# Warmup Iteration  11: 488973.974 ops/s
# Warmup Iteration  12: 520561.396 ops/s
# Warmup Iteration  13: 520657.344 ops/s
# Warmup Iteration  14: 501240.372 ops/s
# Warmup Iteration  15: 520932.586 ops/s
# Warmup Iteration  16: 494009.585 ops/s
# Warmup Iteration  17: 532244.160 ops/s
# Warmup Iteration  18: 539431.431 ops/s
# Warmup Iteration  19: 525567.603 ops/s
# Warmup Iteration  20: 528160.160 ops/s
# Warmup Iteration  21: 531584.278 ops/s
# Warmup Iteration  22: 527856.977 ops/s
# Warmup Iteration  23: 547322.751 ops/s
# Warmup Iteration  24: 543011.055 ops/s
# Warmup Iteration  25: 519479.995 ops/s
# Warmup Iteration  26: 532775.092 ops/s
# Warmup Iteration  27: 520336.002 ops/s
# Warmup Iteration  28: 552894.914 ops/s
# Warmup Iteration  29: 537052.590 ops/s
# Warmup Iteration  30: 505870.322 ops/s
Iteration   1: 554166.715 ops/s
Iteration   2: 552246.946 ops/s
Iteration   3: 524382.594 ops/s
Iteration   4: 525872.228 ops/s
Iteration   5: 521954.448 ops/s
Iteration   6: 517631.983 ops/s
Iteration   7: 557339.043 ops/s
Iteration   8: 511860.208 ops/s
Iteration   9: 534643.237 ops/s
Iteration  10: 511891.236 ops/s
Iteration  11: 553437.100 ops/s
Iteration  12: 517717.961 ops/s
Iteration  13: 517481.862 ops/s
Iteration  14: 541950.158 ops/s
Iteration  15: 533099.931 ops/s
Iteration  16: 508766.389 ops/s
Iteration  17: 531657.578 ops/s
Iteration  18: 400954.624 ops/s
Iteration  19: 540394.952 ops/s
Iteration  20: 514556.184 ops/s
Iteration  21: 543341.149 ops/s
Iteration  22: 529726.649 ops/s
Iteration  23: 515293.354 ops/s
Iteration  24: 543777.127 ops/s
Iteration  25: 517138.114 ops/s
Iteration  26: 526846.952 ops/s
Iteration  27: 525092.002 ops/s
Iteration  28: 515219.160 ops/s
Iteration  29: 528026.467 ops/s
Iteration  30: 513197.179 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash2":
  524322.118 ±(99.9%) 18214.622 ops/s [Average]
  (min, avg, max) = (400954.624, 524322.118, 557339.043), stdev = 27262.791
  CI (99.9%): [506107.496, 542536.740] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextCrash2  thrpt   30  524322.118 ± 18214.622  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrowsUnbounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrowsUnbounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 103538.403 ops/s
# Warmup Iteration   2: 449153.018 ops/s
# Warmup Iteration   3: 457267.279 ops/s
# Warmup Iteration   4: 522818.803 ops/s
# Warmup Iteration   5: 504693.854 ops/s
# Warmup Iteration   6: 491189.588 ops/s
# Warmup Iteration   7: 515512.589 ops/s
# Warmup Iteration   8: 490970.581 ops/s
# Warmup Iteration   9: 511277.647 ops/s
# Warmup Iteration  10: 490281.703 ops/s
# Warmup Iteration  11: 481013.481 ops/s
# Warmup Iteration  12: 518520.610 ops/s
# Warmup Iteration  13: 476403.588 ops/s
# Warmup Iteration  14: 499152.302 ops/s
# Warmup Iteration  15: 511823.057 ops/s
# Warmup Iteration  16: 508590.892 ops/s
# Warmup Iteration  17: 522295.940 ops/s
# Warmup Iteration  18: 547820.247 ops/s
# Warmup Iteration  19: 516987.164 ops/s
# Warmup Iteration  20: 525029.046 ops/s
# Warmup Iteration  21: 543828.343 ops/s
# Warmup Iteration  22: 524994.028 ops/s
# Warmup Iteration  23: 535985.227 ops/s
# Warmup Iteration  24: 532023.668 ops/s
# Warmup Iteration  25: 515560.756 ops/s
# Warmup Iteration  26: 524796.850 ops/s
# Warmup Iteration  27: 500254.028 ops/s
# Warmup Iteration  28: 527742.271 ops/s
# Warmup Iteration  29: 534079.329 ops/s
# Warmup Iteration  30: 530289.918 ops/s
Iteration   1: 526943.763 ops/s
Iteration   2: 504039.428 ops/s
Iteration   3: 556898.155 ops/s
Iteration   4: 521426.841 ops/s
Iteration   5: 542680.586 ops/s
Iteration   6: 530598.511 ops/s
Iteration   7: 519855.652 ops/s
Iteration   8: 542236.987 ops/s
Iteration   9: 543882.036 ops/s
Iteration  10: 511265.208 ops/s
Iteration  11: 548117.194 ops/s
Iteration  12: 522213.950 ops/s
Iteration  13: 521605.271 ops/s
Iteration  14: 524549.956 ops/s
Iteration  15: 536469.842 ops/s
Iteration  16: 508890.034 ops/s
Iteration  17: 538282.928 ops/s
Iteration  18: 521209.389 ops/s
Iteration  19: 522240.854 ops/s
Iteration  20: 550394.102 ops/s
Iteration  21: 518765.897 ops/s
Iteration  22: 535316.110 ops/s
Iteration  23: 524179.685 ops/s
Iteration  24: 539107.098 ops/s
Iteration  25: 515321.938 ops/s
Iteration  26: 542788.232 ops/s
Iteration  27: 518871.099 ops/s
Iteration  28: 531786.051 ops/s
Iteration  29: 541908.102 ops/s
Iteration  30: 518444.837 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrowsUnbounded":
  529342.991 ±(99.9%) 8839.191 ops/s [Average]
  (min, avg, max) = (504039.428, 529342.991, 556898.155), stdev = 13230.086
  CI (99.9%): [520503.800, 538182.182] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrowsUnbounded  thrpt   30  529342.991 ± 8839.191  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162521.627 ops/s
# Warmup Iteration   2: 478878.418 ops/s
# Warmup Iteration   3: 484293.111 ops/s
# Warmup Iteration   4: 509841.205 ops/s
# Warmup Iteration   5: 462278.563 ops/s
# Warmup Iteration   6: 534358.510 ops/s
# Warmup Iteration   7: 562394.870 ops/s
# Warmup Iteration   8: 526873.532 ops/s
# Warmup Iteration   9: 522328.241 ops/s
# Warmup Iteration  10: 540877.854 ops/s
# Warmup Iteration  11: 547469.122 ops/s
# Warmup Iteration  12: 537936.690 ops/s
# Warmup Iteration  13: 511653.969 ops/s
# Warmup Iteration  14: 544775.043 ops/s
# Warmup Iteration  15: 555034.940 ops/s
# Warmup Iteration  16: 532005.942 ops/s
# Warmup Iteration  17: 550840.676 ops/s
# Warmup Iteration  18: 570343.506 ops/s
# Warmup Iteration  19: 558634.128 ops/s
# Warmup Iteration  20: 575120.154 ops/s
# Warmup Iteration  21: 544027.122 ops/s
# Warmup Iteration  22: 552714.549 ops/s
# Warmup Iteration  23: 562680.848 ops/s
# Warmup Iteration  24: 533103.170 ops/s
# Warmup Iteration  25: 567738.918 ops/s
# Warmup Iteration  26: 555168.119 ops/s
# Warmup Iteration  27: 578635.551 ops/s
# Warmup Iteration  28: 566133.070 ops/s
# Warmup Iteration  29: 560085.848 ops/s
# Warmup Iteration  30: 580715.304 ops/s
Iteration   1: 567612.854 ops/s
Iteration   2: 552971.042 ops/s
Iteration   3: 582949.024 ops/s
Iteration   4: 569381.388 ops/s
Iteration   5: 537665.303 ops/s
Iteration   6: 574499.777 ops/s
Iteration   7: 558019.808 ops/s
Iteration   8: 558486.972 ops/s
Iteration   9: 577095.110 ops/s
Iteration  10: 553703.599 ops/s
Iteration  11: 574019.892 ops/s
Iteration  12: 564606.380 ops/s
Iteration  13: 439034.252 ops/s
Iteration  14: 569334.907 ops/s
Iteration  15: 543608.598 ops/s
Iteration  16: 577336.424 ops/s
Iteration  17: 571925.150 ops/s
Iteration  18: 521754.943 ops/s
Iteration  19: 552799.075 ops/s
Iteration  20: 553656.854 ops/s
Iteration  21: 566998.792 ops/s
Iteration  22: 563866.423 ops/s
Iteration  23: 565270.928 ops/s
Iteration  24: 563281.806 ops/s
Iteration  25: 561349.604 ops/s
Iteration  26: 577773.408 ops/s
Iteration  27: 543375.592 ops/s
Iteration  28: 567702.169 ops/s
Iteration  29: 583425.994 ops/s
Iteration  30: 552315.569 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrows":
  558194.055 ±(99.9%) 17649.997 ops/s [Average]
  (min, avg, max) = (439034.252, 558194.055, 583425.994), stdev = 26417.686
  CI (99.9%): [540544.058, 575844.051] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_nextThrows  thrpt   30  558194.055 ± 17649.997  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107218.436 ops/s
# Warmup Iteration   2: 466347.476 ops/s
# Warmup Iteration   3: 468816.437 ops/s
# Warmup Iteration   4: 444229.307 ops/s
# Warmup Iteration   5: 517403.773 ops/s
# Warmup Iteration   6: 435014.284 ops/s
# Warmup Iteration   7: 500990.338 ops/s
# Warmup Iteration   8: 523559.971 ops/s
# Warmup Iteration   9: 505721.718 ops/s
# Warmup Iteration  10: 527221.291 ops/s
# Warmup Iteration  11: 522346.911 ops/s
# Warmup Iteration  12: 498171.146 ops/s
# Warmup Iteration  13: 531050.031 ops/s
# Warmup Iteration  14: 505192.864 ops/s
# Warmup Iteration  15: 513911.080 ops/s
# Warmup Iteration  16: 506677.874 ops/s
# Warmup Iteration  17: 530478.017 ops/s
# Warmup Iteration  18: 554733.639 ops/s
# Warmup Iteration  19: 518858.741 ops/s
# Warmup Iteration  20: 547155.900 ops/s
# Warmup Iteration  21: 527924.522 ops/s
# Warmup Iteration  22: 527751.289 ops/s
# Warmup Iteration  23: 549680.865 ops/s
# Warmup Iteration  24: 526826.439 ops/s
# Warmup Iteration  25: 542898.845 ops/s
# Warmup Iteration  26: 520256.310 ops/s
# Warmup Iteration  27: 532538.626 ops/s
# Warmup Iteration  28: 562240.496 ops/s
# Warmup Iteration  29: 518502.921 ops/s
# Warmup Iteration  30: 553402.231 ops/s
Iteration   1: 511115.291 ops/s
Iteration   2: 538780.893 ops/s
Iteration   3: 544968.589 ops/s
Iteration   4: 528279.421 ops/s
Iteration   5: 538878.501 ops/s
Iteration   6: 530736.319 ops/s
Iteration   7: 541809.217 ops/s
Iteration   8: 541445.110 ops/s
Iteration   9: 505946.335 ops/s
Iteration  10: 552806.170 ops/s
Iteration  11: 530085.851 ops/s
Iteration  12: 549519.373 ops/s
Iteration  13: 521575.440 ops/s
Iteration  14: 545654.926 ops/s
Iteration  15: 543737.102 ops/s
Iteration  16: 526700.238 ops/s
Iteration  17: 557200.135 ops/s
Iteration  18: 523502.185 ops/s
Iteration  19: 541559.827 ops/s
Iteration  20: 532269.637 ops/s
Iteration  21: 542700.718 ops/s
Iteration  22: 526083.910 ops/s
Iteration  23: 543316.783 ops/s
Iteration  24: 560939.241 ops/s
Iteration  25: 510322.849 ops/s
Iteration  26: 546786.932 ops/s
Iteration  27: 530926.892 ops/s
Iteration  28: 552098.324 ops/s
Iteration  29: 522144.719 ops/s
Iteration  30: 544531.627 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrows":
  536214.085 ±(99.9%) 9209.814 ops/s [Average]
  (min, avg, max) = (505946.335, 536214.085, 560939.241), stdev = 13784.818
  CI (99.9%): [527004.271, 545423.900] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_hasNextThrows  thrpt   30  536214.085 ± 9209.814  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73990.357 ops/s
# Warmup Iteration   2: 577740.682 ops/s
# Warmup Iteration   3: 671683.229 ops/s
# Warmup Iteration   4: 655816.470 ops/s
# Warmup Iteration   5: 698112.371 ops/s
# Warmup Iteration   6: 668651.669 ops/s
# Warmup Iteration   7: 683442.238 ops/s
# Warmup Iteration   8: 655399.868 ops/s
# Warmup Iteration   9: 640119.611 ops/s
# Warmup Iteration  10: 669686.349 ops/s
# Warmup Iteration  11: 663911.468 ops/s
# Warmup Iteration  12: 688077.430 ops/s
# Warmup Iteration  13: 708392.765 ops/s
# Warmup Iteration  14: 665008.418 ops/s
# Warmup Iteration  15: 703176.978 ops/s
# Warmup Iteration  16: 671710.321 ops/s
# Warmup Iteration  17: 719567.641 ops/s
# Warmup Iteration  18: 721792.986 ops/s
# Warmup Iteration  19: 728959.589 ops/s
# Warmup Iteration  20: 740283.603 ops/s
# Warmup Iteration  21: 714639.307 ops/s
# Warmup Iteration  22: 714838.396 ops/s
# Warmup Iteration  23: 753866.371 ops/s
# Warmup Iteration  24: 730352.451 ops/s
# Warmup Iteration  25: 720346.625 ops/s
# Warmup Iteration  26: 745383.972 ops/s
# Warmup Iteration  27: 714222.784 ops/s
# Warmup Iteration  28: 721019.133 ops/s
# Warmup Iteration  29: 761073.505 ops/s
# Warmup Iteration  30: 753114.389 ops/s
Iteration   1: 689372.496 ops/s
Iteration   2: 737303.911 ops/s
Iteration   3: 702215.091 ops/s
Iteration   4: 689948.041 ops/s
Iteration   5: 713531.570 ops/s
Iteration   6: 694461.346 ops/s
Iteration   7: 696214.458 ops/s
Iteration   8: 518369.195 ops/s
Iteration   9: 740545.749 ops/s
Iteration  10: 707914.214 ops/s
Iteration  11: 742021.489 ops/s
Iteration  12: 716142.781 ops/s
Iteration  13: 730354.456 ops/s
Iteration  14: 712193.170 ops/s
Iteration  15: 685680.204 ops/s
Iteration  16: 733540.757 ops/s
Iteration  17: 726429.965 ops/s
Iteration  18: 741865.415 ops/s
Iteration  19: 725282.392 ops/s
Iteration  20: 736435.083 ops/s
Iteration  21: 707199.643 ops/s
Iteration  22: 737681.908 ops/s
Iteration  23: 754703.917 ops/s
Iteration  24: 705340.183 ops/s
Iteration  25: 753443.658 ops/s
Iteration  26: 710774.002 ops/s
Iteration  27: 747059.858 ops/s
Iteration  28: 755430.094 ops/s
Iteration  29: 720246.607 ops/s
Iteration  30: 743885.156 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_error":
  715852.894 ±(99.9%) 28542.612 ops/s [Average]
  (min, avg, max) = (518369.195, 715852.894, 755430.094), stdev = 42721.241
  CI (99.9%): [687310.282, 744395.506] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_error  thrpt   30  715852.894 ± 28542.612  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65358.390 ops/s
# Warmup Iteration   2: 202682.873 ops/s
# Warmup Iteration   3: 395769.988 ops/s
# Warmup Iteration   4: 438994.652 ops/s
# Warmup Iteration   5: 425009.126 ops/s
# Warmup Iteration   6: 469196.636 ops/s
# Warmup Iteration   7: 478058.805 ops/s
# Warmup Iteration   8: 466823.773 ops/s
# Warmup Iteration   9: 478966.814 ops/s
# Warmup Iteration  10: 488503.622 ops/s
# Warmup Iteration  11: 471277.493 ops/s
# Warmup Iteration  12: 465824.619 ops/s
# Warmup Iteration  13: 489436.090 ops/s
# Warmup Iteration  14: 468375.843 ops/s
# Warmup Iteration  15: 487738.644 ops/s
# Warmup Iteration  16: 482734.827 ops/s
# Warmup Iteration  17: 489628.655 ops/s
# Warmup Iteration  18: 515614.284 ops/s
# Warmup Iteration  19: 477510.048 ops/s
# Warmup Iteration  20: 494710.909 ops/s
# Warmup Iteration  21: 479065.773 ops/s
# Warmup Iteration  22: 491735.817 ops/s
# Warmup Iteration  23: 486377.138 ops/s
# Warmup Iteration  24: 475700.115 ops/s
# Warmup Iteration  25: 510875.761 ops/s
# Warmup Iteration  26: 476020.784 ops/s
# Warmup Iteration  27: 497536.219 ops/s
# Warmup Iteration  28: 516738.521 ops/s
# Warmup Iteration  29: 479919.636 ops/s
# Warmup Iteration  30: 496913.071 ops/s
Iteration   1: 492454.388 ops/s
Iteration   2: 488666.953 ops/s
Iteration   3: 514586.297 ops/s
Iteration   4: 492642.310 ops/s
Iteration   5: 485315.432 ops/s
Iteration   6: 502375.177 ops/s
Iteration   7: 490282.719 ops/s
Iteration   8: 491548.521 ops/s
Iteration   9: 515628.114 ops/s
Iteration  10: 484698.117 ops/s
Iteration  11: 496578.109 ops/s
Iteration  12: 495521.451 ops/s
Iteration  13: 493996.045 ops/s
Iteration  14: 511725.437 ops/s
Iteration  15: 479186.968 ops/s
Iteration  16: 503797.457 ops/s
Iteration  17: 488940.407 ops/s
Iteration  18: 500624.944 ops/s
Iteration  19: 486535.825 ops/s
Iteration  20: 491175.303 ops/s
Iteration  21: 490221.704 ops/s
Iteration  22: 497984.184 ops/s
Iteration  23: 507603.075 ops/s
Iteration  24: 475220.554 ops/s
Iteration  25: 487107.383 ops/s
Iteration  26: 476675.654 ops/s
Iteration  27: 502739.483 ops/s
Iteration  28: 481855.003 ops/s
Iteration  29: 471932.427 ops/s
Iteration  30: 499095.194 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_badRequest":
  493223.821 ±(99.9%) 7425.460 ops/s [Average]
  (min, avg, max) = (471932.427, 493223.821, 515628.114), stdev = 11114.079
  CI (99.9%): [485798.362, 500649.281] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_badRequest  thrpt   30  493223.821 ± 7425.460  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 754794.733 ops/s
# Warmup Iteration   2: 3343344.723 ops/s
# Warmup Iteration   3: 3909254.926 ops/s
# Warmup Iteration   4: 4774707.288 ops/s
# Warmup Iteration   5: 4666086.304 ops/s
# Warmup Iteration   6: 4846734.290 ops/s
# Warmup Iteration   7: 4675745.649 ops/s
# Warmup Iteration   8: 4811719.919 ops/s
# Warmup Iteration   9: 4796202.169 ops/s
# Warmup Iteration  10: 4623854.331 ops/s
# Warmup Iteration  11: 4694048.221 ops/s
# Warmup Iteration  12: 4837763.415 ops/s
# Warmup Iteration  13: 4594760.463 ops/s
# Warmup Iteration  14: 4910737.258 ops/s
# Warmup Iteration  15: 4598285.753 ops/s
# Warmup Iteration  16: 4742572.972 ops/s
# Warmup Iteration  17: 4709272.756 ops/s
# Warmup Iteration  18: 4687145.187 ops/s
# Warmup Iteration  19: 4919983.266 ops/s
# Warmup Iteration  20: 4603175.301 ops/s
# Warmup Iteration  21: 4968807.082 ops/s
# Warmup Iteration  22: 4691170.270 ops/s
# Warmup Iteration  23: 4886077.915 ops/s
# Warmup Iteration  24: 4891061.941 ops/s
# Warmup Iteration  25: 4630137.102 ops/s
# Warmup Iteration  26: 4912296.634 ops/s
# Warmup Iteration  27: 4717231.422 ops/s
# Warmup Iteration  28: 4866907.511 ops/s
# Warmup Iteration  29: 4902535.973 ops/s
# Warmup Iteration  30: 4708068.870 ops/s
Iteration   1: 4846096.618 ops/s
Iteration   2: 3716047.169 ops/s
Iteration   3: 4618799.689 ops/s
Iteration   4: 4697439.782 ops/s
Iteration   5: 4768056.360 ops/s
Iteration   6: 4967980.220 ops/s
Iteration   7: 4893797.350 ops/s
Iteration   8: 4610269.365 ops/s
Iteration   9: 4866410.914 ops/s
Iteration  10: 4645529.897 ops/s
Iteration  11: 4693509.771 ops/s
Iteration  12: 4719428.204 ops/s
Iteration  13: 4942944.917 ops/s
Iteration  14: 4732838.803 ops/s
Iteration  15: 4636531.601 ops/s
Iteration  16: 4849642.672 ops/s
Iteration  17: 4654271.360 ops/s
Iteration  18: 4869351.675 ops/s
Iteration  19: 4673490.766 ops/s
Iteration  20: 4834115.844 ops/s
Iteration  21: 4883572.626 ops/s
Iteration  22: 4632188.366 ops/s
Iteration  23: 4888312.226 ops/s
Iteration  24: 4659614.627 ops/s
Iteration  25: 4872875.026 ops/s
Iteration  26: 4742604.555 ops/s
Iteration  27: 4840651.478 ops/s
Iteration  28: 4768735.657 ops/s
Iteration  29: 4708092.058 ops/s
Iteration  30: 4708106.853 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_dispose":
  4731376.882 ±(99.9%) 146135.062 ops/s [Average]
  (min, avg, max) = (3716047.169, 4731376.882, 4967980.220), stdev = 218728.098
  CI (99.9%): [4585241.820, 4877511.944] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_dispose  thrpt   30  4731376.882 ± 146135.062  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112859.489 ops/s
# Warmup Iteration   2: 519982.337 ops/s
# Warmup Iteration   3: 605585.607 ops/s
# Warmup Iteration   4: 611424.674 ops/s
# Warmup Iteration   5: 624512.407 ops/s
# Warmup Iteration   6: 618798.389 ops/s
# Warmup Iteration   7: 616008.353 ops/s
# Warmup Iteration   8: 573848.931 ops/s
# Warmup Iteration   9: 621365.605 ops/s
# Warmup Iteration  10: 581439.234 ops/s
# Warmup Iteration  11: 564556.504 ops/s
# Warmup Iteration  12: 606495.228 ops/s
# Warmup Iteration  13: 625939.831 ops/s
# Warmup Iteration  14: 639745.605 ops/s
# Warmup Iteration  15: 608738.770 ops/s
# Warmup Iteration  16: 613389.908 ops/s
# Warmup Iteration  17: 691742.160 ops/s
# Warmup Iteration  18: 651279.255 ops/s
# Warmup Iteration  19: 628723.012 ops/s
# Warmup Iteration  20: 681453.368 ops/s
# Warmup Iteration  21: 642374.589 ops/s
# Warmup Iteration  22: 627677.684 ops/s
# Warmup Iteration  23: 675676.426 ops/s
# Warmup Iteration  24: 625210.125 ops/s
# Warmup Iteration  25: 646629.035 ops/s
# Warmup Iteration  26: 669657.451 ops/s
# Warmup Iteration  27: 625895.572 ops/s
# Warmup Iteration  28: 648497.406 ops/s
# Warmup Iteration  29: 636157.644 ops/s
# Warmup Iteration  30: 657267.877 ops/s
Iteration   1: 658293.623 ops/s
Iteration   2: 628624.860 ops/s
Iteration   3: 644335.491 ops/s
Iteration   4: 669484.859 ops/s
Iteration   5: 639569.910 ops/s
Iteration   6: 676846.496 ops/s
Iteration   7: 658818.563 ops/s
Iteration   8: 641494.190 ops/s
Iteration   9: 656102.627 ops/s
Iteration  10: 656798.783 ops/s
Iteration  11: 646722.193 ops/s
Iteration  12: 656432.749 ops/s
Iteration  13: 638469.160 ops/s
Iteration  14: 664493.285 ops/s
Iteration  15: 630768.234 ops/s
Iteration  16: 662053.854 ops/s
Iteration  17: 645644.283 ops/s
Iteration  18: 643533.019 ops/s
Iteration  19: 667867.753 ops/s
Iteration  20: 637882.718 ops/s
Iteration  21: 669414.613 ops/s
Iteration  22: 626856.867 ops/s
Iteration  23: 668253.563 ops/s
Iteration  24: 640386.516 ops/s
Iteration  25: 675644.544 ops/s
Iteration  26: 633773.101 ops/s
Iteration  27: 647757.650 ops/s
Iteration  28: 667819.372 ops/s
Iteration  29: 638366.865 ops/s
Iteration  30: 660343.307 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_mainError":
  651761.768 ±(99.9%) 9744.123 ops/s [Average]
  (min, avg, max) = (626856.867, 651761.768, 676846.496), stdev = 14584.546
  CI (99.9%): [642017.645, 661505.891] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_mainError  thrpt   30  651761.768 ± 9744.123  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_notInstance$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_notInstance

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1578005.758 ops/s
# Warmup Iteration   2: 4846561.077 ops/s
# Warmup Iteration   3: 7261911.492 ops/s
# Warmup Iteration   4: 6858339.271 ops/s
# Warmup Iteration   5: 7330691.667 ops/s
# Warmup Iteration   6: 6977382.631 ops/s
# Warmup Iteration   7: 7154033.795 ops/s
# Warmup Iteration   8: 7203451.529 ops/s
# Warmup Iteration   9: 6964671.357 ops/s
# Warmup Iteration  10: 6978381.363 ops/s
# Warmup Iteration  11: 7205499.976 ops/s
# Warmup Iteration  12: 6805877.039 ops/s
# Warmup Iteration  13: 7206387.231 ops/s
# Warmup Iteration  14: 6978680.313 ops/s
# Warmup Iteration  15: 7191006.115 ops/s
# Warmup Iteration  16: 7203972.251 ops/s
# Warmup Iteration  17: 7244630.800 ops/s
# Warmup Iteration  18: 6935817.959 ops/s
# Warmup Iteration  19: 7249519.843 ops/s
# Warmup Iteration  20: 7116263.425 ops/s
# Warmup Iteration  21: 7188955.420 ops/s
# Warmup Iteration  22: 6926592.514 ops/s
# Warmup Iteration  23: 7167991.087 ops/s
# Warmup Iteration  24: 7216210.405 ops/s
# Warmup Iteration  25: 7112470.508 ops/s
# Warmup Iteration  26: 7111073.054 ops/s
# Warmup Iteration  27: 6021210.116 ops/s
# Warmup Iteration  28: 7092700.776 ops/s
# Warmup Iteration  29: 7210994.591 ops/s
# Warmup Iteration  30: 7048040.132 ops/s
Iteration   1: 7176241.318 ops/s
Iteration   2: 7362984.505 ops/s
Iteration   3: 6924951.059 ops/s
Iteration   4: 7239942.634 ops/s
Iteration   5: 7248775.331 ops/s
Iteration   6: 6947271.082 ops/s
Iteration   7: 7209950.087 ops/s
Iteration   8: 7063295.153 ops/s
Iteration   9: 7298864.953 ops/s
Iteration  10: 7228806.739 ops/s
Iteration  11: 6878049.478 ops/s
Iteration  12: 7117845.174 ops/s
Iteration  13: 6855051.724 ops/s
Iteration  14: 6797945.510 ops/s
Iteration  15: 7144720.800 ops/s
Iteration  16: 7353258.733 ops/s
Iteration  17: 7049796.587 ops/s
Iteration  18: 7270391.457 ops/s
Iteration  19: 6852825.121 ops/s
Iteration  20: 7096281.055 ops/s
Iteration  21: 7183832.701 ops/s
Iteration  22: 7253721.668 ops/s
Iteration  23: 6971012.095 ops/s
Iteration  24: 7048329.906 ops/s
Iteration  25: 6960880.589 ops/s
Iteration  26: 7144531.827 ops/s
Iteration  27: 6747606.505 ops/s
Iteration  28: 6758240.611 ops/s
Iteration  29: 7106813.907 ops/s
Iteration  30: 7176616.505 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_notInstance":
  7082294.494 ±(99.9%) 118263.098 ops/s [Average]
  (min, avg, max) = (6747606.505, 7082294.494, 7362984.505), stdev = 177010.650
  CI (99.9%): [6964031.396, 7200557.591] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
SingleOfTypeTest._Benchmark.benchmark_notInstance  thrpt   30  7082294.494 ± 118263.098  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87834.547 ops/s
# Warmup Iteration   2: 348028.035 ops/s
# Warmup Iteration   3: 491206.357 ops/s
# Warmup Iteration   4: 468874.234 ops/s
# Warmup Iteration   5: 504830.462 ops/s
# Warmup Iteration   6: 468703.127 ops/s
# Warmup Iteration   7: 493312.775 ops/s
# Warmup Iteration   8: 511922.327 ops/s
# Warmup Iteration   9: 469845.596 ops/s
# Warmup Iteration  10: 508715.834 ops/s
# Warmup Iteration  11: 507494.451 ops/s
# Warmup Iteration  12: 518372.116 ops/s
# Warmup Iteration  13: 515453.603 ops/s
# Warmup Iteration  14: 525390.347 ops/s
# Warmup Iteration  15: 514407.321 ops/s
# Warmup Iteration  16: 512294.026 ops/s
# Warmup Iteration  17: 537915.558 ops/s
# Warmup Iteration  18: 525295.446 ops/s
# Warmup Iteration  19: 555258.687 ops/s
# Warmup Iteration  20: 528514.728 ops/s
# Warmup Iteration  21: 534282.784 ops/s
# Warmup Iteration  22: 540291.361 ops/s
# Warmup Iteration  23: 532540.630 ops/s
# Warmup Iteration  24: 544433.839 ops/s
# Warmup Iteration  25: 518366.037 ops/s
# Warmup Iteration  26: 542743.355 ops/s
# Warmup Iteration  27: 547092.681 ops/s
# Warmup Iteration  28: 518395.686 ops/s
# Warmup Iteration  29: 546503.721 ops/s
# Warmup Iteration  30: 545732.370 ops/s
Iteration   1: 524796.649 ops/s
Iteration   2: 546312.405 ops/s
Iteration   3: 524668.043 ops/s
Iteration   4: 553631.339 ops/s
Iteration   5: 521505.086 ops/s
Iteration   6: 543489.317 ops/s
Iteration   7: 534040.699 ops/s
Iteration   8: 528921.338 ops/s
Iteration   9: 555636.266 ops/s
Iteration  10: 522145.341 ops/s
Iteration  11: 549232.481 ops/s
Iteration  12: 524049.120 ops/s
Iteration  13: 562532.490 ops/s
Iteration  14: 543650.277 ops/s
Iteration  15: 524003.198 ops/s
Iteration  16: 552654.855 ops/s
Iteration  17: 521202.836 ops/s
Iteration  18: 534213.889 ops/s
Iteration  19: 545557.018 ops/s
Iteration  20: 528396.426 ops/s
Iteration  21: 555211.382 ops/s
Iteration  22: 528798.694 ops/s
Iteration  23: 543202.575 ops/s
Iteration  24: 549235.283 ops/s
Iteration  25: 534809.867 ops/s
Iteration  26: 524576.501 ops/s
Iteration  27: 533539.638 ops/s
Iteration  28: 545948.882 ops/s
Iteration  29: 522683.118 ops/s
Iteration  30: 552080.829 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableFlowableTest._Benchmark.benchmark_doubleOnSubscribe":
  537690.861 ±(99.9%) 8484.600 ops/s [Average]
  (min, avg, max) = (521202.836, 537690.861, 562532.490), stdev = 12699.351
  CI (99.9%): [529206.261, 546175.462] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
SingleFlatMapIterableFlowableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  537690.861 ± 8484.600  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_streamCloseCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_streamCloseCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43276.438 ops/s
# Warmup Iteration   2: 168100.374 ops/s
# Warmup Iteration   3: 182850.867 ops/s
# Warmup Iteration   4: 205705.853 ops/s
# Warmup Iteration   5: 196668.672 ops/s
# Warmup Iteration   6: 208597.010 ops/s
# Warmup Iteration   7: 216665.398 ops/s
# Warmup Iteration   8: 217624.348 ops/s
# Warmup Iteration   9: 204974.008 ops/s
# Warmup Iteration  10: 214786.594 ops/s
# Warmup Iteration  11: 216983.445 ops/s
# Warmup Iteration  12: 215065.410 ops/s
# Warmup Iteration  13: 201541.698 ops/s
# Warmup Iteration  14: 217205.091 ops/s
# Warmup Iteration  15: 214795.849 ops/s
# Warmup Iteration  16: 217812.451 ops/s
# Warmup Iteration  17: 225307.875 ops/s
# Warmup Iteration  18: 208533.970 ops/s
# Warmup Iteration  19: 228188.220 ops/s
# Warmup Iteration  20: 213575.824 ops/s
# Warmup Iteration  21: 222098.607 ops/s
# Warmup Iteration  22: 172544.855 ops/s
# Warmup Iteration  23: 228427.831 ops/s
# Warmup Iteration  24: 215934.966 ops/s
# Warmup Iteration  25: 214825.115 ops/s
# Warmup Iteration  26: 221242.191 ops/s
# Warmup Iteration  27: 213915.559 ops/s
# Warmup Iteration  28: 226336.475 ops/s
# Warmup Iteration  29: 213702.619 ops/s
# Warmup Iteration  30: 226592.728 ops/s
Iteration   1: 207900.180 ops/s
Iteration   2: 224506.371 ops/s
Iteration   3: 210748.684 ops/s
Iteration   4: 213170.477 ops/s
Iteration   5: 221077.991 ops/s
Iteration   6: 221277.355 ops/s
Iteration   7: 213686.198 ops/s
Iteration   8: 220253.939 ops/s
Iteration   9: 221920.351 ops/s
Iteration  10: 218187.518 ops/s
Iteration  11: 222968.757 ops/s
Iteration  12: 215278.305 ops/s
Iteration  13: 218269.356 ops/s
Iteration  14: 214887.111 ops/s
Iteration  15: 214777.101 ops/s
Iteration  16: 223681.895 ops/s
Iteration  17: 213840.148 ops/s
Iteration  18: 222956.566 ops/s
Iteration  19: 217314.948 ops/s
Iteration  20: 215749.897 ops/s
Iteration  21: 214717.292 ops/s
Iteration  22: 224193.568 ops/s
Iteration  23: 208955.237 ops/s
Iteration  24: 225021.571 ops/s
Iteration  25: 210954.884 ops/s
Iteration  26: 216053.167 ops/s
Iteration  27: 226354.033 ops/s
Iteration  28: 226300.572 ops/s
Iteration  29: 224531.025 ops/s
Iteration  30: 211473.172 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_streamCloseCrash":
  218033.589 ±(99.9%) 3657.443 ops/s [Average]
  (min, avg, max) = (207900.180, 218033.589, 226354.033), stdev = 5474.289
  CI (99.9%): [214376.146, 221691.032] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
SingleFlattenStreamAsFlowableTest._Benchmark.benchmark_streamCloseCrash  thrpt   30  218033.589 ± 3657.443  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_flowableCancelDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_flowableCancelDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 111334.466 ops/s
# Warmup Iteration   2: 514001.281 ops/s
# Warmup Iteration   3: 594585.870 ops/s
# Warmup Iteration   4: 576448.860 ops/s
# Warmup Iteration   5: 614008.318 ops/s
# Warmup Iteration   6: 589176.633 ops/s
# Warmup Iteration   7: 570947.051 ops/s
# Warmup Iteration   8: 551375.292 ops/s
# Warmup Iteration   9: 618914.227 ops/s
# Warmup Iteration  10: 604535.822 ops/s
# Warmup Iteration  11: 617757.415 ops/s
# Warmup Iteration  12: 603413.922 ops/s
# Warmup Iteration  13: 586173.166 ops/s
# Warmup Iteration  14: 642650.328 ops/s
# Warmup Iteration  15: 593638.605 ops/s
# Warmup Iteration  16: 586068.380 ops/s
# Warmup Iteration  17: 647067.587 ops/s
# Warmup Iteration  18: 629260.689 ops/s
# Warmup Iteration  19: 648043.023 ops/s
# Warmup Iteration  20: 618759.016 ops/s
# Warmup Iteration  21: 605324.822 ops/s
# Warmup Iteration  22: 646250.388 ops/s
# Warmup Iteration  23: 615911.290 ops/s
# Warmup Iteration  24: 621029.584 ops/s
# Warmup Iteration  25: 623555.738 ops/s
# Warmup Iteration  26: 593584.228 ops/s
# Warmup Iteration  27: 651486.401 ops/s
# Warmup Iteration  28: 575728.663 ops/s
# Warmup Iteration  29: 650489.089 ops/s
# Warmup Iteration  30: 590841.127 ops/s
Iteration   1: 657181.955 ops/s
Iteration   2: 634669.557 ops/s
Iteration   3: 629481.895 ops/s
Iteration   4: 650374.534 ops/s
Iteration   5: 617266.259 ops/s
Iteration   6: 629256.442 ops/s
Iteration   7: 653493.330 ops/s
Iteration   8: 615657.770 ops/s
Iteration   9: 640259.246 ops/s
Iteration  10: 626948.373 ops/s
Iteration  11: 658132.646 ops/s
Iteration  12: 618667.890 ops/s
Iteration  13: 623623.152 ops/s
Iteration  14: 630950.875 ops/s
Iteration  15: 640247.526 ops/s
Iteration  16: 636582.407 ops/s
Iteration  17: 633661.549 ops/s
Iteration  18: 622868.462 ops/s
Iteration  19: 630314.273 ops/s
Iteration  20: 619177.791 ops/s
Iteration  21: 651202.507 ops/s
Iteration  22: 610361.017 ops/s
Iteration  23: 624443.626 ops/s
Iteration  24: 651079.360 ops/s
Iteration  25: 601706.766 ops/s
Iteration  26: 654982.187 ops/s
Iteration  27: 611411.112 ops/s
Iteration  28: 628377.234 ops/s
Iteration  29: 649692.373 ops/s
Iteration  30: 641476.214 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_flowableCancelDelayed":
  633118.278 ±(99.9%) 10240.654 ops/s [Average]
  (min, avg, max) = (601706.766, 633118.278, 658132.646), stdev = 15327.730
  CI (99.9%): [622877.624, 643358.931] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_flowableCancelDelayed  thrpt   30  633118.278 ± 10240.654  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_longOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_longOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 413253.561 ops/s
# Warmup Iteration   2: 660742.599 ops/s
# Warmup Iteration   3: 708684.812 ops/s
# Warmup Iteration   4: 758809.994 ops/s
# Warmup Iteration   5: 756628.749 ops/s
# Warmup Iteration   6: 753297.542 ops/s
# Warmup Iteration   7: 788211.120 ops/s
# Warmup Iteration   8: 750583.268 ops/s
# Warmup Iteration   9: 768206.063 ops/s
# Warmup Iteration  10: 776158.564 ops/s
# Warmup Iteration  11: 742936.255 ops/s
# Warmup Iteration  12: 789465.884 ops/s
# Warmup Iteration  13: 750501.483 ops/s
# Warmup Iteration  14: 744986.640 ops/s
# Warmup Iteration  15: 759105.432 ops/s
# Warmup Iteration  16: 583417.304 ops/s
# Warmup Iteration  17: 800740.439 ops/s
# Warmup Iteration  18: 807810.724 ops/s
# Warmup Iteration  19: 827089.082 ops/s
# Warmup Iteration  20: 827555.461 ops/s
# Warmup Iteration  21: 812530.270 ops/s
# Warmup Iteration  22: 820597.202 ops/s
# Warmup Iteration  23: 805186.255 ops/s
# Warmup Iteration  24: 807166.209 ops/s
# Warmup Iteration  25: 826170.901 ops/s
# Warmup Iteration  26: 796378.720 ops/s
# Warmup Iteration  27: 789053.575 ops/s
# Warmup Iteration  28: 839207.993 ops/s
# Warmup Iteration  29: 798365.965 ops/s
# Warmup Iteration  30: 827366.549 ops/s
Iteration   1: 795331.621 ops/s
Iteration   2: 805488.408 ops/s
Iteration   3: 835593.082 ops/s
Iteration   4: 782645.393 ops/s
Iteration   5: 793923.253 ops/s
Iteration   6: 843910.979 ops/s
Iteration   7: 790456.733 ops/s
Iteration   8: 813241.924 ops/s
Iteration   9: 801953.774 ops/s
Iteration  10: 803968.336 ops/s
Iteration  11: 814243.873 ops/s
Iteration  12: 786417.567 ops/s
Iteration  13: 839765.216 ops/s
Iteration  14: 783648.614 ops/s
Iteration  15: 811683.325 ops/s
Iteration  16: 836985.059 ops/s
Iteration  17: 795944.625 ops/s
Iteration  18: 842041.244 ops/s
Iteration  19: 787569.151 ops/s
Iteration  20: 843591.373 ops/s
Iteration  21: 788550.096 ops/s
Iteration  22: 814585.472 ops/s
Iteration  23: 810909.337 ops/s
Iteration  24: 804553.178 ops/s
Iteration  25: 823251.577 ops/s
Iteration  26: 787511.548 ops/s
Iteration  27: 808378.830 ops/s
Iteration  28: 797971.987 ops/s
Iteration  29: 775277.738 ops/s
Iteration  30: 806699.422 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIntervalRangeTest._Benchmark.benchmark_longOverflow":
  807536.425 ±(99.9%) 13394.900 ops/s [Average]
  (min, avg, max) = (775277.738, 807536.425, 843910.979), stdev = 20048.857
  CI (99.9%): [794141.524, 820931.325] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableIntervalRangeTest._Benchmark.benchmark_longOverflow  thrpt   30  807536.425 ± 13394.900  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_queueWorkerDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_queueWorkerDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4119856.911 ops/s
# Warmup Iteration   2: 8077633.023 ops/s
# Warmup Iteration   3: 8621542.876 ops/s
# Warmup Iteration   4: 9875848.794 ops/s
# Warmup Iteration   5: 10016221.223 ops/s
# Warmup Iteration   6: 9826523.249 ops/s
# Warmup Iteration   7: 9954737.431 ops/s
# Warmup Iteration   8: 10371728.456 ops/s
# Warmup Iteration   9: 10134720.978 ops/s
# Warmup Iteration  10: 9678103.620 ops/s
# Warmup Iteration  11: 9902664.322 ops/s
# Warmup Iteration  12: 9855118.469 ops/s
# Warmup Iteration  13: 9838771.938 ops/s
# Warmup Iteration  14: 10326464.946 ops/s
# Warmup Iteration  15: 9706499.441 ops/s
# Warmup Iteration  16: 9969121.035 ops/s
# Warmup Iteration  17: 10249314.080 ops/s
# Warmup Iteration  18: 9715323.971 ops/s
# Warmup Iteration  19: 10304964.045 ops/s
# Warmup Iteration  20: 9658796.286 ops/s
# Warmup Iteration  21: 10197605.398 ops/s
# Warmup Iteration  22: 9938923.176 ops/s
# Warmup Iteration  23: 10142222.353 ops/s
# Warmup Iteration  24: 9814122.937 ops/s
# Warmup Iteration  25: 9835607.663 ops/s
# Warmup Iteration  26: 10005214.449 ops/s
# Warmup Iteration  27: 10206238.872 ops/s
# Warmup Iteration  28: 9513081.801 ops/s
# Warmup Iteration  29: 9962346.924 ops/s
# Warmup Iteration  30: 9536375.558 ops/s
Iteration   1: 10106344.601 ops/s
Iteration   2: 9848069.706 ops/s
Iteration   3: 10145945.059 ops/s
Iteration   4: 9797081.075 ops/s
Iteration   5: 9878551.082 ops/s
Iteration   6: 10097973.724 ops/s
Iteration   7: 9702855.143 ops/s
Iteration   8: 10027405.993 ops/s
Iteration   9: 9548924.554 ops/s
Iteration  10: 9926377.925 ops/s
Iteration  11: 9550692.706 ops/s
Iteration  12: 9988382.639 ops/s
Iteration  13: 9995910.217 ops/s
Iteration  14: 9676318.280 ops/s
Iteration  15: 9751391.041 ops/s
Iteration  16: 10293915.045 ops/s
Iteration  17: 9667083.361 ops/s
Iteration  18: 10318127.175 ops/s
Iteration  19: 9955698.726 ops/s
Iteration  20: 10113726.035 ops/s
Iteration  21: 9908722.938 ops/s
Iteration  22: 9966573.378 ops/s
Iteration  23: 9739713.110 ops/s
Iteration  24: 9664449.374 ops/s
Iteration  25: 9987563.233 ops/s
Iteration  26: 9719735.300 ops/s
Iteration  27: 10069734.039 ops/s
Iteration  28: 9595514.227 ops/s
Iteration  29: 9979846.634 ops/s
Iteration  30: 9806388.888 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_queueWorkerDispose":
  9894300.507 ±(99.9%) 138196.026 ops/s [Average]
  (min, avg, max) = (9548924.554, 9894300.507, 10318127.175), stdev = 206845.322
  CI (99.9%): [9756104.481, 10032496.533] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
SchedulerWhenTest._Benchmark.benchmark_queueWorkerDispose  thrpt   30  9894300.507 ± 138196.026  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 782110.117 ops/s
# Warmup Iteration   2: 1042902.497 ops/s
# Warmup Iteration   3: 1192957.904 ops/s
# Warmup Iteration   4: 1267833.156 ops/s
# Warmup Iteration   5: 1196468.249 ops/s
# Warmup Iteration   6: 1282900.391 ops/s
# Warmup Iteration   7: 1247355.056 ops/s
# Warmup Iteration   8: 1369429.633 ops/s
# Warmup Iteration   9: 1319078.096 ops/s
# Warmup Iteration  10: 1258557.447 ops/s
# Warmup Iteration  11: 1041317.729 ops/s
# Warmup Iteration  12: 1254707.985 ops/s
# Warmup Iteration  13: 1307028.569 ops/s
# Warmup Iteration  14: 1288328.175 ops/s
# Warmup Iteration  15: 1249813.034 ops/s
# Warmup Iteration  16: 1299305.367 ops/s
# Warmup Iteration  17: 1320109.713 ops/s
# Warmup Iteration  18: 1291603.383 ops/s
# Warmup Iteration  19: 1278801.606 ops/s
# Warmup Iteration  20: 1286795.901 ops/s
# Warmup Iteration  21: 1345524.167 ops/s
# Warmup Iteration  22: 1229259.616 ops/s
# Warmup Iteration  23: 1347415.145 ops/s
# Warmup Iteration  24: 1262911.238 ops/s
# Warmup Iteration  25: 1226504.762 ops/s
# Warmup Iteration  26: 1304889.973 ops/s
# Warmup Iteration  27: 1230545.375 ops/s
# Warmup Iteration  28: 1288809.862 ops/s
# Warmup Iteration  29: 1303211.058 ops/s
# Warmup Iteration  30: 1240091.848 ops/s
Iteration   1: 1322733.255 ops/s
Iteration   2: 1291460.328 ops/s
Iteration   3: 1233576.607 ops/s
Iteration   4: 1321522.680 ops/s
Iteration   5: 1223087.684 ops/s
Iteration   6: 1289160.266 ops/s
Iteration   7: 1347277.811 ops/s
Iteration   8: 1225272.224 ops/s
Iteration   9: 1285548.600 ops/s
Iteration  10: 1294171.719 ops/s
Iteration  11: 1269758.092 ops/s
Iteration  12: 1280447.135 ops/s
Iteration  13: 1274139.134 ops/s
Iteration  14: 1336764.229 ops/s
Iteration  15: 1317986.936 ops/s
Iteration  16: 1235431.130 ops/s
Iteration  17: 1273213.260 ops/s
Iteration  18: 1320165.686 ops/s
Iteration  19: 1264750.984 ops/s
Iteration  20: 1277673.371 ops/s
Iteration  21: 1301751.422 ops/s
Iteration  22: 1278106.462 ops/s
Iteration  23: 1313524.670 ops/s
Iteration  24: 1284529.402 ops/s
Iteration  25: 1305165.834 ops/s
Iteration  26: 1318667.998 ops/s
Iteration  27: 1255013.049 ops/s
Iteration  28: 1307341.961 ops/s
Iteration  29: 1279132.874 ops/s
Iteration  30: 1336211.503 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_dispose":
  1288786.210 ±(99.9%) 22042.898 ops/s [Average]
  (min, avg, max) = (1223087.684, 1288786.210, 1347277.811), stdev = 32992.774
  CI (99.9%): [1266743.312, 1310829.108] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
TrampolineSchedulerInternalTest._Benchmark.benchmark_dispose  thrpt   30  1288786.210 ± 22042.898  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectNullRunnable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectNullRunnable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 501419.674 ops/s
# Warmup Iteration   2: 692656.480 ops/s
# Warmup Iteration   3: 731570.731 ops/s
# Warmup Iteration   4: 699236.679 ops/s
# Warmup Iteration   5: 708498.333 ops/s
# Warmup Iteration   6: 687276.009 ops/s
# Warmup Iteration   7: 735566.632 ops/s
# Warmup Iteration   8: 751190.612 ops/s
# Warmup Iteration   9: 719579.608 ops/s
# Warmup Iteration  10: 742481.617 ops/s
# Warmup Iteration  11: 701134.879 ops/s
# Warmup Iteration  12: 745118.969 ops/s
# Warmup Iteration  13: 754306.937 ops/s
# Warmup Iteration  14: 717038.583 ops/s
# Warmup Iteration  15: 731185.982 ops/s
# Warmup Iteration  16: 718946.225 ops/s
# Warmup Iteration  17: 741706.168 ops/s
# Warmup Iteration  18: 808226.060 ops/s
# Warmup Iteration  19: 755354.061 ops/s
# Warmup Iteration  20: 785454.620 ops/s
# Warmup Iteration  21: 793526.559 ops/s
# Warmup Iteration  22: 774238.543 ops/s
# Warmup Iteration  23: 804412.308 ops/s
# Warmup Iteration  24: 790089.378 ops/s
# Warmup Iteration  25: 791099.779 ops/s
# Warmup Iteration  26: 764371.187 ops/s
# Warmup Iteration  27: 782466.793 ops/s
# Warmup Iteration  28: 767527.301 ops/s
# Warmup Iteration  29: 795957.407 ops/s
# Warmup Iteration  30: 794695.110 ops/s
Iteration   1: 740842.290 ops/s
Iteration   2: 810090.974 ops/s
Iteration   3: 755898.893 ops/s
Iteration   4: 779419.704 ops/s
Iteration   5: 760591.208 ops/s
Iteration   6: 770814.795 ops/s
Iteration   7: 792006.858 ops/s
Iteration   8: 754547.071 ops/s
Iteration   9: 791480.971 ops/s
Iteration  10: 783851.219 ops/s
Iteration  11: 818299.924 ops/s
Iteration  12: 760772.316 ops/s
Iteration  13: 791610.649 ops/s
Iteration  14: 799845.396 ops/s
Iteration  15: 748657.816 ops/s
Iteration  16: 798356.150 ops/s
Iteration  17: 772798.523 ops/s
Iteration  18: 770012.247 ops/s
Iteration  19: 776943.620 ops/s
Iteration  20: 776713.196 ops/s
Iteration  21: 798377.518 ops/s
Iteration  22: 745938.829 ops/s
Iteration  23: 801645.063 ops/s
Iteration  24: 773951.207 ops/s
Iteration  25: 797092.445 ops/s
Iteration  26: 789537.850 ops/s
Iteration  27: 806357.867 ops/s
Iteration  28: 770208.129 ops/s
Iteration  29: 792755.513 ops/s
Iteration  30: 803084.402 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectNullRunnable":
  781083.421 ±(99.9%) 13654.592 ops/s [Average]
  (min, avg, max) = (740842.290, 781083.421, 818299.924), stdev = 20437.551
  CI (99.9%): [767428.830, 794738.013] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
SingleSchedulerTest._Benchmark.benchmark_scheduleDirectNullRunnable  thrpt   30  781083.421 ± 13654.592  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectWithDelayNullRunnable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectWithDelayNullRunnable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 536376.428 ops/s
# Warmup Iteration   2: 674255.832 ops/s
# Warmup Iteration   3: 744639.232 ops/s
# Warmup Iteration   4: 737261.547 ops/s
# Warmup Iteration   5: 668843.960 ops/s
# Warmup Iteration   6: 686089.169 ops/s
# Warmup Iteration   7: 700419.662 ops/s
# Warmup Iteration   8: 709425.594 ops/s
# Warmup Iteration   9: 779526.148 ops/s
# Warmup Iteration  10: 723509.072 ops/s
# Warmup Iteration  11: 731422.693 ops/s
# Warmup Iteration  12: 775168.631 ops/s
# Warmup Iteration  13: 713771.645 ops/s
# Warmup Iteration  14: 782296.130 ops/s
# Warmup Iteration  15: 706075.643 ops/s
# Warmup Iteration  16: 762423.098 ops/s
# Warmup Iteration  17: 782685.664 ops/s
# Warmup Iteration  18: 787064.261 ops/s
# Warmup Iteration  19: 796111.888 ops/s
# Warmup Iteration  20: 784402.504 ops/s
# Warmup Iteration  21: 799317.691 ops/s
# Warmup Iteration  22: 761677.790 ops/s
# Warmup Iteration  23: 814700.043 ops/s
# Warmup Iteration  24: 779707.598 ops/s
# Warmup Iteration  25: 781985.507 ops/s
# Warmup Iteration  26: 807967.541 ops/s
# Warmup Iteration  27: 780387.013 ops/s
# Warmup Iteration  28: 783058.724 ops/s
# Warmup Iteration  29: 821367.214 ops/s
# Warmup Iteration  30: 777955.744 ops/s
Iteration   1: 826365.875 ops/s
Iteration   2: 768295.391 ops/s
Iteration   3: 805129.746 ops/s
Iteration   4: 777797.169 ops/s
Iteration   5: 771524.136 ops/s
Iteration   6: 797677.053 ops/s
Iteration   7: 778296.639 ops/s
Iteration   8: 822812.556 ops/s
Iteration   9: 807972.645 ops/s
Iteration  10: 750174.990 ops/s
Iteration  11: 814669.827 ops/s
Iteration  12: 765412.093 ops/s
Iteration  13: 804276.354 ops/s
Iteration  14: 741586.244 ops/s
Iteration  15: 769648.641 ops/s
Iteration  16: 785774.241 ops/s
Iteration  17: 769448.244 ops/s
Iteration  18: 809332.363 ops/s
Iteration  19: 789116.442 ops/s
Iteration  20: 812348.389 ops/s
Iteration  21: 792943.461 ops/s
Iteration  22: 802161.441 ops/s
Iteration  23: 788810.495 ops/s
Iteration  24: 783067.368 ops/s
Iteration  25: 776632.959 ops/s
Iteration  26: 830162.083 ops/s
Iteration  27: 782811.933 ops/s
Iteration  28: 818205.998 ops/s
Iteration  29: 775621.334 ops/s
Iteration  30: 764935.167 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectWithDelayNullRunnable":
  789433.709 ±(99.9%) 15120.694 ops/s [Average]
  (min, avg, max) = (741586.244, 789433.709, 830162.083), stdev = 22631.944
  CI (99.9%): [774313.016, 804554.403] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
SingleSchedulerTest._Benchmark.benchmark_scheduleDirectWithDelayNullRunnable  thrpt   30  789433.709 ± 15120.694  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleShutdown2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleShutdown2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 242836.931 ops/s
# Warmup Iteration   2: 562077.072 ops/s
# Warmup Iteration   3: 605128.999 ops/s
# Warmup Iteration   4: 594524.058 ops/s
# Warmup Iteration   5: 600160.683 ops/s
# Warmup Iteration   6: 581764.450 ops/s
# Warmup Iteration   7: 596500.598 ops/s
# Warmup Iteration   8: 588849.232 ops/s
# Warmup Iteration   9: 584180.775 ops/s
# Warmup Iteration  10: 615863.702 ops/s
# Warmup Iteration  11: 576022.691 ops/s
# Warmup Iteration  12: 585260.680 ops/s
# Warmup Iteration  13: 609624.924 ops/s
# Warmup Iteration  14: 600333.441 ops/s
# Warmup Iteration  15: 594231.997 ops/s
# Warmup Iteration  16: 584055.341 ops/s
# Warmup Iteration  17: 588359.974 ops/s
# Warmup Iteration  18: 602996.072 ops/s
# Warmup Iteration  19: 593847.773 ops/s
# Warmup Iteration  20: 601453.184 ops/s
# Warmup Iteration  21: 581538.847 ops/s
# Warmup Iteration  22: 635330.150 ops/s
# Warmup Iteration  23: 579077.658 ops/s
# Warmup Iteration  24: 579923.204 ops/s
# Warmup Iteration  25: 618609.967 ops/s
# Warmup Iteration  26: 590361.657 ops/s
# Warmup Iteration  27: 596725.855 ops/s
# Warmup Iteration  28: 594902.526 ops/s
# Warmup Iteration  29: 608962.196 ops/s
# Warmup Iteration  30: 603665.798 ops/s
Iteration   1: 591376.446 ops/s
Iteration   2: 588838.821 ops/s
Iteration   3: 623385.123 ops/s
Iteration   4: 576861.146 ops/s
Iteration   5: 614605.316 ops/s
Iteration   6: 572868.511 ops/s
Iteration   7: 623284.955 ops/s
Iteration   8: 593508.987 ops/s
Iteration   9: 612813.450 ops/s
Iteration  10: 600850.672 ops/s
Iteration  11: 595364.914 ops/s
Iteration  12: 608823.575 ops/s
Iteration  13: 583121.885 ops/s
Iteration  14: 594967.704 ops/s
Iteration  15: 603773.825 ops/s
Iteration  16: 606782.791 ops/s
Iteration  17: 584937.079 ops/s
Iteration  18: 616492.876 ops/s
Iteration  19: 587096.867 ops/s
Iteration  20: 602730.752 ops/s
Iteration  21: 594897.492 ops/s
Iteration  22: 615484.520 ops/s
Iteration  23: 599754.175 ops/s
Iteration  24: 587369.687 ops/s
Iteration  25: 614488.721 ops/s
Iteration  26: 587592.261 ops/s
Iteration  27: 600229.231 ops/s
Iteration  28: 598459.012 ops/s
Iteration  29: 603294.717 ops/s
Iteration  30: 593845.699 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleShutdown2":
  599263.374 ±(99.9%) 8725.827 ops/s [Average]
  (min, avg, max) = (572868.511, 599263.374, 623385.123), stdev = 13060.408
  CI (99.9%): [590537.547, 607989.201] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleShutdown2  thrpt   30  599263.374 ± 8725.827  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_invalidSpan$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_invalidSpan

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 145313.847 ops/s
# Warmup Iteration   2: 448653.936 ops/s
# Warmup Iteration   3: 558698.507 ops/s
# Warmup Iteration   4: 545036.491 ops/s
# Warmup Iteration   5: 552585.808 ops/s
# Warmup Iteration   6: 534435.432 ops/s
# Warmup Iteration   7: 548223.715 ops/s
# Warmup Iteration   8: 573302.656 ops/s
# Warmup Iteration   9: 541704.281 ops/s
# Warmup Iteration  10: 546252.050 ops/s
# Warmup Iteration  11: 564640.827 ops/s
# Warmup Iteration  12: 531740.736 ops/s
# Warmup Iteration  13: 559417.611 ops/s
# Warmup Iteration  14: 521682.776 ops/s
# Warmup Iteration  15: 570917.988 ops/s
# Warmup Iteration  16: 552854.421 ops/s
# Warmup Iteration  17: 568577.399 ops/s
# Warmup Iteration  18: 580082.475 ops/s
# Warmup Iteration  19: 569583.073 ops/s
# Warmup Iteration  20: 569823.619 ops/s
# Warmup Iteration  21: 601131.325 ops/s
# Warmup Iteration  22: 551968.932 ops/s
# Warmup Iteration  23: 587863.916 ops/s
# Warmup Iteration  24: 581514.764 ops/s
# Warmup Iteration  25: 564044.205 ops/s
# Warmup Iteration  26: 587166.697 ops/s
# Warmup Iteration  27: 575163.691 ops/s
# Warmup Iteration  28: 551622.516 ops/s
# Warmup Iteration  29: 589695.916 ops/s
# Warmup Iteration  30: 570917.136 ops/s
Iteration   1: 578349.769 ops/s
Iteration   2: 593101.791 ops/s
Iteration   3: 558977.342 ops/s
Iteration   4: 573985.788 ops/s
Iteration   5: 606709.544 ops/s
Iteration   6: 567404.567 ops/s
Iteration   7: 593055.986 ops/s
Iteration   8: 559899.822 ops/s
Iteration   9: 583720.982 ops/s
Iteration  10: 577008.786 ops/s
Iteration  11: 583574.226 ops/s
Iteration  12: 574554.702 ops/s
Iteration  13: 570975.518 ops/s
Iteration  14: 600959.759 ops/s
Iteration  15: 580870.888 ops/s
Iteration  16: 573531.907 ops/s
Iteration  17: 575260.523 ops/s
Iteration  18: 571856.368 ops/s
Iteration  19: 588376.872 ops/s
Iteration  20: 571032.024 ops/s
Iteration  21: 559022.917 ops/s
Iteration  22: 594018.101 ops/s
Iteration  23: 545460.493 ops/s
Iteration  24: 596243.510 ops/s
Iteration  25: 596437.523 ops/s
Iteration  26: 567017.850 ops/s
Iteration  27: 602627.230 ops/s
Iteration  28: 579555.014 ops/s
Iteration  29: 601339.711 ops/s
Iteration  30: 535317.441 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_invalidSpan":
  578674.898 ±(99.9%) 11377.890 ops/s [Average]
  (min, avg, max) = (535317.441, 578674.898, 606709.544), stdev = 17029.891
  CI (99.9%): [567297.009, 590052.788] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_invalidSpan  thrpt   30  578674.898 ± 11377.890  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleShutdown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleShutdown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 200435.902 ops/s
# Warmup Iteration   2: 527557.521 ops/s
# Warmup Iteration   3: 565125.778 ops/s
# Warmup Iteration   4: 524547.374 ops/s
# Warmup Iteration   5: 583772.102 ops/s
# Warmup Iteration   6: 521004.219 ops/s
# Warmup Iteration   7: 568528.775 ops/s
# Warmup Iteration   8: 588937.150 ops/s
# Warmup Iteration   9: 564784.949 ops/s
# Warmup Iteration  10: 582333.390 ops/s
# Warmup Iteration  11: 556484.348 ops/s
# Warmup Iteration  12: 567166.989 ops/s
# Warmup Iteration  13: 583411.839 ops/s
# Warmup Iteration  14: 584609.865 ops/s
# Warmup Iteration  15: 558866.609 ops/s
# Warmup Iteration  16: 581373.325 ops/s
# Warmup Iteration  17: 576971.501 ops/s
# Warmup Iteration  18: 569143.307 ops/s
# Warmup Iteration  19: 601215.044 ops/s
# Warmup Iteration  20: 555584.928 ops/s
# Warmup Iteration  21: 590617.971 ops/s
# Warmup Iteration  22: 558780.816 ops/s
# Warmup Iteration  23: 567115.701 ops/s
# Warmup Iteration  24: 577322.657 ops/s
# Warmup Iteration  25: 583143.724 ops/s
# Warmup Iteration  26: 565826.337 ops/s
# Warmup Iteration  27: 596185.434 ops/s
# Warmup Iteration  28: 554455.094 ops/s
# Warmup Iteration  29: 574526.912 ops/s
# Warmup Iteration  30: 568318.920 ops/s
Iteration   1: 566766.034 ops/s
Iteration   2: 584623.480 ops/s
Iteration   3: 566014.844 ops/s
Iteration   4: 565402.865 ops/s
Iteration   5: 572556.338 ops/s
Iteration   6: 580204.040 ops/s
Iteration   7: 568606.650 ops/s
Iteration   8: 595151.478 ops/s
Iteration   9: 574402.800 ops/s
Iteration  10: 573696.120 ops/s
Iteration  11: 584049.426 ops/s
Iteration  12: 563430.858 ops/s
Iteration  13: 576014.398 ops/s
Iteration  14: 563839.019 ops/s
Iteration  15: 561294.842 ops/s
Iteration  16: 580768.066 ops/s
Iteration  17: 556519.300 ops/s
Iteration  18: 563704.181 ops/s
Iteration  19: 596998.880 ops/s
Iteration  20: 545352.347 ops/s
Iteration  21: 579309.582 ops/s
Iteration  22: 579396.961 ops/s
Iteration  23: 586969.190 ops/s
Iteration  24: 575444.220 ops/s
Iteration  25: 584871.582 ops/s
Iteration  26: 574359.467 ops/s
Iteration  27: 400759.422 ops/s
Iteration  28: 552378.945 ops/s
Iteration  29: 578182.614 ops/s
Iteration  30: 566408.833 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleShutdown":
  567249.226 ±(99.9%) 22415.105 ops/s [Average]
  (min, avg, max) = (400759.422, 567249.226, 596998.880), stdev = 33549.877
  CI (99.9%): [544834.121, 589664.331] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleShutdown  thrpt   30  567249.226 ± 22415.105  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_combineCrashInConstructor$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_combineCrashInConstructor

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 281594.981 ops/s
# Warmup Iteration   2: 554438.256 ops/s
# Warmup Iteration   3: 568409.392 ops/s
# Warmup Iteration   4: 502073.102 ops/s
# Warmup Iteration   5: 628872.008 ops/s
# Warmup Iteration   6: 614732.660 ops/s
# Warmup Iteration   7: 586829.839 ops/s
# Warmup Iteration   8: 628067.039 ops/s
# Warmup Iteration   9: 582817.846 ops/s
# Warmup Iteration  10: 601472.595 ops/s
# Warmup Iteration  11: 603201.182 ops/s
# Warmup Iteration  12: 576825.715 ops/s
# Warmup Iteration  13: 614808.167 ops/s
# Warmup Iteration  14: 584625.834 ops/s
# Warmup Iteration  15: 602754.987 ops/s
# Warmup Iteration  16: 624465.976 ops/s
# Warmup Iteration  17: 612492.298 ops/s
# Warmup Iteration  18: 632294.714 ops/s
# Warmup Iteration  19: 635749.490 ops/s
# Warmup Iteration  20: 612032.619 ops/s
# Warmup Iteration  21: 617717.538 ops/s
# Warmup Iteration  22: 591950.504 ops/s
# Warmup Iteration  23: 648362.433 ops/s
# Warmup Iteration  24: 599850.813 ops/s
# Warmup Iteration  25: 634491.875 ops/s
# Warmup Iteration  26: 624326.067 ops/s
# Warmup Iteration  27: 641234.786 ops/s
# Warmup Iteration  28: 600839.189 ops/s
# Warmup Iteration  29: 638883.315 ops/s
# Warmup Iteration  30: 610805.268 ops/s
Iteration   1: 651892.023 ops/s
Iteration   2: 645714.032 ops/s
Iteration   3: 613320.383 ops/s
Iteration   4: 629039.058 ops/s
Iteration   5: 649567.540 ops/s
Iteration   6: 615831.380 ops/s
Iteration   7: 637162.254 ops/s
Iteration   8: 618711.645 ops/s
Iteration   9: 648796.524 ops/s
Iteration  10: 619036.726 ops/s
Iteration  11: 644594.562 ops/s
Iteration  12: 605619.925 ops/s
Iteration  13: 654788.394 ops/s
Iteration  14: 644915.329 ops/s
Iteration  15: 606994.265 ops/s
Iteration  16: 637193.622 ops/s
Iteration  17: 626375.795 ops/s
Iteration  18: 631542.334 ops/s
Iteration  19: 630202.804 ops/s
Iteration  20: 637739.402 ops/s
Iteration  21: 643370.273 ops/s
Iteration  22: 604271.217 ops/s
Iteration  23: 650877.210 ops/s
Iteration  24: 626155.714 ops/s
Iteration  25: 608514.112 ops/s
Iteration  26: 633620.380 ops/s
Iteration  27: 612705.950 ops/s
Iteration  28: 644495.573 ops/s
Iteration  29: 625541.121 ops/s
Iteration  30: 596853.260 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_combineCrashInConstructor":
  629848.094 ±(99.9%) 11051.717 ops/s [Average]
  (min, avg, max) = (596853.260, 629848.094, 654788.394), stdev = 16541.692
  CI (99.9%): [618796.376, 640899.811] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SchedulerWhenTest._Benchmark.benchmark_combineCrashInConstructor  thrpt   30  629848.094 ± 11051.717  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOnTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOnTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1006044.319 ops/s
# Warmup Iteration   2: 4357542.192 ops/s
# Warmup Iteration   3: 5877114.054 ops/s
# Warmup Iteration   4: 6265606.065 ops/s
# Warmup Iteration   5: 6220490.626 ops/s
# Warmup Iteration   6: 6039257.777 ops/s
# Warmup Iteration   7: 6161443.041 ops/s
# Warmup Iteration   8: 6042141.150 ops/s
# Warmup Iteration   9: 6188221.074 ops/s
# Warmup Iteration  10: 5985696.519 ops/s
# Warmup Iteration  11: 6011008.569 ops/s
# Warmup Iteration  12: 6168832.454 ops/s
# Warmup Iteration  13: 5974645.923 ops/s
# Warmup Iteration  14: 6300483.102 ops/s
# Warmup Iteration  15: 6078471.504 ops/s
# Warmup Iteration  16: 6361517.779 ops/s
# Warmup Iteration  17: 6109088.912 ops/s
# Warmup Iteration  18: 6354644.108 ops/s
# Warmup Iteration  19: 5951881.514 ops/s
# Warmup Iteration  20: 6357284.184 ops/s
# Warmup Iteration  21: 6144534.586 ops/s
# Warmup Iteration  22: 6010889.499 ops/s
# Warmup Iteration  23: 6404587.226 ops/s
# Warmup Iteration  24: 5951777.353 ops/s
# Warmup Iteration  25: 5854869.994 ops/s
# Warmup Iteration  26: 6227557.064 ops/s
# Warmup Iteration  27: 6103284.658 ops/s
# Warmup Iteration  28: 6097952.116 ops/s
# Warmup Iteration  29: 6211132.875 ops/s
# Warmup Iteration  30: 6145195.699 ops/s
Iteration   1: 6391201.495 ops/s
Iteration   2: 6051539.540 ops/s
Iteration   3: 6030211.055 ops/s
Iteration   4: 6343870.792 ops/s
Iteration   5: 6332122.963 ops/s
Iteration   6: 6079256.523 ops/s
Iteration   7: 6445753.390 ops/s
Iteration   8: 6321094.878 ops/s
Iteration   9: 6177282.570 ops/s
Iteration  10: 6317049.073 ops/s
Iteration  11: 6174865.990 ops/s
Iteration  12: 6415518.933 ops/s
Iteration  13: 6016048.396 ops/s
Iteration  14: 6234090.336 ops/s
Iteration  15: 6282198.120 ops/s
Iteration  16: 6018180.403 ops/s
Iteration  17: 6516800.350 ops/s
Iteration  18: 6047327.240 ops/s
Iteration  19: 6218555.333 ops/s
Iteration  20: 6248572.826 ops/s
Iteration  21: 6092315.578 ops/s
Iteration  22: 5204659.966 ops/s
Iteration  23: 6399759.242 ops/s
Iteration  24: 6459294.500 ops/s
Iteration  25: 6018756.506 ops/s
Iteration  26: 6136182.695 ops/s
Iteration  27: 6368411.884 ops/s
Iteration  28: 6049993.505 ops/s
Iteration  29: 6306876.992 ops/s
Iteration  30: 6421566.463 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOnTest._Benchmark.benchmark_dispose":
  6203978.585 ±(99.9%) 163416.745 ops/s [Average]
  (min, avg, max) = (5204659.966, 6203978.585, 6516800.350), stdev = 244594.510
  CI (99.9%): [6040561.839, 6367395.330] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
FlowableSubscribeOnTest._Benchmark.benchmark_dispose  thrpt   30  6203978.585 ± 163416.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 267033.839 ops/s
# Warmup Iteration   2: 536560.657 ops/s
# Warmup Iteration   3: 532711.245 ops/s
# Warmup Iteration   4: 522098.919 ops/s
# Warmup Iteration   5: 554639.142 ops/s
# Warmup Iteration   6: 547923.351 ops/s
# Warmup Iteration   7: 552598.085 ops/s
# Warmup Iteration   8: 549701.039 ops/s
# Warmup Iteration   9: 520325.968 ops/s
# Warmup Iteration  10: 545977.826 ops/s
# Warmup Iteration  11: 546555.012 ops/s
# Warmup Iteration  12: 536673.097 ops/s
# Warmup Iteration  13: 563398.344 ops/s
# Warmup Iteration  14: 560063.814 ops/s
# Warmup Iteration  15: 546818.078 ops/s
# Warmup Iteration  16: 554188.673 ops/s
# Warmup Iteration  17: 545999.057 ops/s
# Warmup Iteration  18: 575471.778 ops/s
# Warmup Iteration  19: 562422.847 ops/s
# Warmup Iteration  20: 542497.553 ops/s
# Warmup Iteration  21: 551033.986 ops/s
# Warmup Iteration  22: 542033.853 ops/s
# Warmup Iteration  23: 543632.861 ops/s
# Warmup Iteration  24: 555401.821 ops/s
# Warmup Iteration  25: 530448.160 ops/s
# Warmup Iteration  26: 562152.358 ops/s
# Warmup Iteration  27: 535452.712 ops/s
# Warmup Iteration  28: 556997.548 ops/s
# Warmup Iteration  29: 562660.140 ops/s
# Warmup Iteration  30: 534867.753 ops/s
Iteration   1: 556574.068 ops/s
Iteration   2: 537124.342 ops/s
Iteration   3: 545665.171 ops/s
Iteration   4: 535490.004 ops/s
Iteration   5: 555293.200 ops/s
Iteration   6: 550614.820 ops/s
Iteration   7: 551785.775 ops/s
Iteration   8: 559341.821 ops/s
Iteration   9: 550899.913 ops/s
Iteration  10: 550315.789 ops/s
Iteration  11: 577380.132 ops/s
Iteration  12: 542615.133 ops/s
Iteration  13: 571444.015 ops/s
Iteration  14: 532720.610 ops/s
Iteration  15: 543217.351 ops/s
Iteration  16: 549613.259 ops/s
Iteration  17: 560902.087 ops/s
Iteration  18: 566822.954 ops/s
Iteration  19: 533656.600 ops/s
Iteration  20: 565811.155 ops/s
Iteration  21: 540266.640 ops/s
Iteration  22: 531723.169 ops/s
Iteration  23: 556824.018 ops/s
Iteration  24: 555467.360 ops/s
Iteration  25: 553269.313 ops/s
Iteration  26: 548151.058 ops/s
Iteration  27: 558473.242 ops/s
Iteration  28: 564561.242 ops/s
Iteration  29: 544271.929 ops/s
Iteration  30: 569660.596 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleDispose":
  551998.559 ±(99.9%) 8029.386 ops/s [Average]
  (min, avg, max) = (531723.169, 551998.559, 577380.132), stdev = 12018.008
  CI (99.9%): [543969.173, 560027.945] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
TrampolineSchedulerInternalTest._Benchmark.benchmark_reentrantScheduleDispose  thrpt   30  551998.559 ± 8029.386  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42716.012 ops/s
# Warmup Iteration   2: 117329.583 ops/s
# Warmup Iteration   3: 396202.034 ops/s
# Warmup Iteration   4: 408104.659 ops/s
# Warmup Iteration   5: 398409.845 ops/s
# Warmup Iteration   6: 414559.752 ops/s
# Warmup Iteration   7: 387346.562 ops/s
# Warmup Iteration   8: 408393.003 ops/s
# Warmup Iteration   9: 413307.052 ops/s
# Warmup Iteration  10: 407727.465 ops/s
# Warmup Iteration  11: 417959.325 ops/s
# Warmup Iteration  12: 422448.398 ops/s
# Warmup Iteration  13: 418578.131 ops/s
# Warmup Iteration  14: 425580.890 ops/s
# Warmup Iteration  15: 409830.201 ops/s
# Warmup Iteration  16: 442419.042 ops/s
# Warmup Iteration  17: 418219.586 ops/s
# Warmup Iteration  18: 438511.929 ops/s
# Warmup Iteration  19: 415982.454 ops/s
# Warmup Iteration  20: 437639.583 ops/s
# Warmup Iteration  21: 450783.080 ops/s
# Warmup Iteration  22: 397185.894 ops/s
# Warmup Iteration  23: 419938.875 ops/s
# Warmup Iteration  24: 433433.612 ops/s
# Warmup Iteration  25: 399571.753 ops/s
# Warmup Iteration  26: 428991.792 ops/s
# Warmup Iteration  27: 439875.276 ops/s
# Warmup Iteration  28: 436077.440 ops/s
# Warmup Iteration  29: 445846.165 ops/s
# Warmup Iteration  30: 430869.773 ops/s
Iteration   1: 443006.251 ops/s
Iteration   2: 432160.427 ops/s
Iteration   3: 437355.188 ops/s
Iteration   4: 441810.717 ops/s
Iteration   5: 452984.814 ops/s
Iteration   6: 433547.945 ops/s
Iteration   7: 444632.098 ops/s
Iteration   8: 437930.745 ops/s
Iteration   9: 439928.352 ops/s
Iteration  10: 448396.105 ops/s
Iteration  11: 429015.338 ops/s
Iteration  12: 458488.845 ops/s
Iteration  13: 425187.263 ops/s
Iteration  14: 453778.600 ops/s
Iteration  15: 439126.711 ops/s
Iteration  16: 369232.159 ops/s
Iteration  17: 411034.705 ops/s
Iteration  18: 427948.330 ops/s
Iteration  19: 437391.549 ops/s
Iteration  20: 459900.365 ops/s
Iteration  21: 428722.265 ops/s
Iteration  22: 449888.849 ops/s
Iteration  23: 443198.518 ops/s
Iteration  24: 438414.651 ops/s
Iteration  25: 460604.914 ops/s
Iteration  26: 431691.711 ops/s
Iteration  27: 444647.732 ops/s
Iteration  28: 429979.043 ops/s
Iteration  29: 435802.236 ops/s
Iteration  30: 448625.320 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_badRequest":
  437814.392 ±(99.9%) 11409.275 ops/s [Average]
  (min, avg, max) = (369232.159, 437814.392, 460604.914), stdev = 17076.866
  CI (99.9%): [426405.117, 449223.666] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableTakeLastTimedTest._Benchmark.benchmark_badRequest  thrpt   30  437814.392 ± 11409.275  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53223.864 ops/s
# Warmup Iteration   2: 155664.110 ops/s
# Warmup Iteration   3: 392712.569 ops/s
# Warmup Iteration   4: 413422.225 ops/s
# Warmup Iteration   5: 438408.522 ops/s
# Warmup Iteration   6: 397224.987 ops/s
# Warmup Iteration   7: 409122.252 ops/s
# Warmup Iteration   8: 450286.524 ops/s
# Warmup Iteration   9: 434767.405 ops/s
# Warmup Iteration  10: 462303.569 ops/s
# Warmup Iteration  11: 461168.509 ops/s
# Warmup Iteration  12: 458746.554 ops/s
# Warmup Iteration  13: 431839.553 ops/s
# Warmup Iteration  14: 448838.064 ops/s
# Warmup Iteration  15: 442742.378 ops/s
# Warmup Iteration  16: 445464.295 ops/s
# Warmup Iteration  17: 448205.041 ops/s
# Warmup Iteration  18: 454276.427 ops/s
# Warmup Iteration  19: 447396.972 ops/s
# Warmup Iteration  20: 468096.103 ops/s
# Warmup Iteration  21: 476087.582 ops/s
# Warmup Iteration  22: 456230.928 ops/s
# Warmup Iteration  23: 472335.586 ops/s
# Warmup Iteration  24: 457529.435 ops/s
# Warmup Iteration  25: 477568.871 ops/s
# Warmup Iteration  26: 458471.307 ops/s
# Warmup Iteration  27: 463080.477 ops/s
# Warmup Iteration  28: 462816.043 ops/s
# Warmup Iteration  29: 475154.658 ops/s
# Warmup Iteration  30: 455684.415 ops/s
Iteration   1: 467886.908 ops/s
Iteration   2: 476735.867 ops/s
Iteration   3: 460667.855 ops/s
Iteration   4: 476921.731 ops/s
Iteration   5: 458725.745 ops/s
Iteration   6: 495216.715 ops/s
Iteration   7: 458334.330 ops/s
Iteration   8: 476872.057 ops/s
Iteration   9: 475868.313 ops/s
Iteration  10: 456673.650 ops/s
Iteration  11: 482048.803 ops/s
Iteration  12: 479270.133 ops/s
Iteration  13: 447987.175 ops/s
Iteration  14: 481452.911 ops/s
Iteration  15: 463954.469 ops/s
Iteration  16: 455601.857 ops/s
Iteration  17: 489581.239 ops/s
Iteration  18: 443483.639 ops/s
Iteration  19: 481213.759 ops/s
Iteration  20: 465899.235 ops/s
Iteration  21: 455537.022 ops/s
Iteration  22: 470970.341 ops/s
Iteration  23: 474865.207 ops/s
Iteration  24: 446031.926 ops/s
Iteration  25: 490544.659 ops/s
Iteration  26: 456276.166 ops/s
Iteration  27: 459613.481 ops/s
Iteration  28: 469514.480 ops/s
Iteration  29: 465928.796 ops/s
Iteration  30: 469440.060 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_badRequest":
  468437.284 ±(99.9%) 8889.011 ops/s [Average]
  (min, avg, max) = (443483.639, 468437.284, 495216.715), stdev = 13304.653
  CI (99.9%): [459548.274, 477326.295] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_badRequest  thrpt   30  468437.284 ± 8889.011  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83110.367 ops/s
# Warmup Iteration   2: 346226.311 ops/s
# Warmup Iteration   3: 389790.906 ops/s
# Warmup Iteration   4: 366511.238 ops/s
# Warmup Iteration   5: 416832.120 ops/s
# Warmup Iteration   6: 427920.383 ops/s
# Warmup Iteration   7: 437561.782 ops/s
# Warmup Iteration   8: 399953.252 ops/s
# Warmup Iteration   9: 436800.600 ops/s
# Warmup Iteration  10: 422591.183 ops/s
# Warmup Iteration  11: 420679.062 ops/s
# Warmup Iteration  12: 434725.752 ops/s
# Warmup Iteration  13: 408248.789 ops/s
# Warmup Iteration  14: 435650.974 ops/s
# Warmup Iteration  15: 417841.447 ops/s
# Warmup Iteration  16: 429677.048 ops/s
# Warmup Iteration  17: 426769.139 ops/s
# Warmup Iteration  18: 431353.836 ops/s
# Warmup Iteration  19: 424703.084 ops/s
# Warmup Iteration  20: 435570.778 ops/s
# Warmup Iteration  21: 441383.939 ops/s
# Warmup Iteration  22: 432413.669 ops/s
# Warmup Iteration  23: 452747.840 ops/s
# Warmup Iteration  24: 446694.057 ops/s
# Warmup Iteration  25: 430620.475 ops/s
# Warmup Iteration  26: 449512.549 ops/s
# Warmup Iteration  27: 424405.943 ops/s
# Warmup Iteration  28: 435916.732 ops/s
# Warmup Iteration  29: 435898.845 ops/s
# Warmup Iteration  30: 435066.532 ops/s
Iteration   1: 447826.438 ops/s
Iteration   2: 440792.657 ops/s
Iteration   3: 425884.390 ops/s
Iteration   4: 448765.877 ops/s
Iteration   5: 429886.451 ops/s
Iteration   6: 455229.050 ops/s
Iteration   7: 435833.120 ops/s
Iteration   8: 422437.685 ops/s
Iteration   9: 461048.826 ops/s
Iteration  10: 402739.134 ops/s
Iteration  11: 335761.541 ops/s
Iteration  12: 445259.074 ops/s
Iteration  13: 429349.255 ops/s
Iteration  14: 437197.857 ops/s
Iteration  15: 431138.132 ops/s
Iteration  16: 428499.428 ops/s
Iteration  17: 440172.539 ops/s
Iteration  18: 440392.251 ops/s
Iteration  19: 451473.787 ops/s
Iteration  20: 426833.954 ops/s
Iteration  21: 448717.280 ops/s
Iteration  22: 435407.752 ops/s
Iteration  23: 446623.940 ops/s
Iteration  24: 417564.392 ops/s
Iteration  25: 450763.116 ops/s
Iteration  26: 422742.574 ops/s
Iteration  27: 431189.598 ops/s
Iteration  28: 440765.252 ops/s
Iteration  29: 428167.966 ops/s
Iteration  30: 434369.932 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTimedTest._Benchmark.benchmark_doubleOnSubscribe":
  433094.442 ±(99.9%) 14803.487 ops/s [Average]
  (min, avg, max) = (335761.541, 433094.442, 461048.826), stdev = 22157.164
  CI (99.9%): [418290.955, 447897.928] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableSkipLastTimedTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  433094.442 ± 14803.487  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60663.021 ops/s
# Warmup Iteration   2: 369117.436 ops/s
# Warmup Iteration   3: 450898.915 ops/s
# Warmup Iteration   4: 446250.987 ops/s
# Warmup Iteration   5: 462797.715 ops/s
# Warmup Iteration   6: 478371.380 ops/s
# Warmup Iteration   7: 480067.435 ops/s
# Warmup Iteration   8: 501543.048 ops/s
# Warmup Iteration   9: 486055.291 ops/s
# Warmup Iteration  10: 499637.490 ops/s
# Warmup Iteration  11: 482120.900 ops/s
# Warmup Iteration  12: 490081.244 ops/s
# Warmup Iteration  13: 499663.738 ops/s
# Warmup Iteration  14: 480656.667 ops/s
# Warmup Iteration  15: 506058.408 ops/s
# Warmup Iteration  16: 499590.936 ops/s
# Warmup Iteration  17: 505388.144 ops/s
# Warmup Iteration  18: 522718.108 ops/s
# Warmup Iteration  19: 491479.903 ops/s
# Warmup Iteration  20: 526484.114 ops/s
# Warmup Iteration  21: 504924.372 ops/s
# Warmup Iteration  22: 515367.678 ops/s
# Warmup Iteration  23: 485261.344 ops/s
# Warmup Iteration  24: 501454.043 ops/s
# Warmup Iteration  25: 516425.347 ops/s
# Warmup Iteration  26: 526573.196 ops/s
# Warmup Iteration  27: 505368.309 ops/s
# Warmup Iteration  28: 528207.230 ops/s
# Warmup Iteration  29: 509261.140 ops/s
# Warmup Iteration  30: 529947.505 ops/s
Iteration   1: 517370.882 ops/s
Iteration   2: 503916.039 ops/s
Iteration   3: 531867.294 ops/s
Iteration   4: 518834.044 ops/s
Iteration   5: 503089.043 ops/s
Iteration   6: 515380.421 ops/s
Iteration   7: 507441.194 ops/s
Iteration   8: 524668.752 ops/s
Iteration   9: 494671.583 ops/s
Iteration  10: 530506.469 ops/s
Iteration  11: 491255.530 ops/s
Iteration  12: 529550.677 ops/s
Iteration  13: 489523.689 ops/s
Iteration  14: 501420.102 ops/s
Iteration  15: 496269.717 ops/s
Iteration  16: 532307.862 ops/s
Iteration  17: 493756.589 ops/s
Iteration  18: 532813.425 ops/s
Iteration  19: 496155.355 ops/s
Iteration  20: 519466.960 ops/s
Iteration  21: 524768.219 ops/s
Iteration  22: 518744.820 ops/s
Iteration  23: 504739.877 ops/s
Iteration  24: 516769.242 ops/s
Iteration  25: 515508.133 ops/s
Iteration  26: 511257.162 ops/s
Iteration  27: 521113.043 ops/s
Iteration  28: 494417.199 ops/s
Iteration  29: 514452.547 ops/s
Iteration  30: 531746.129 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_doubleOnSubscribe":
  512792.733 ±(99.9%) 9288.147 ops/s [Average]
  (min, avg, max) = (489523.689, 512792.733, 532813.425), stdev = 13902.062
  CI (99.9%): [503504.587, 522080.880] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableThrottleLatestTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  512792.733 ± 9288.147  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_badSourceOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_badSourceOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6073.967 ops/s
# Warmup Iteration   2: 24359.229 ops/s
# Warmup Iteration   3: 21055.750 ops/s
# Warmup Iteration   4: 26173.643 ops/s
# Warmup Iteration   5: 46049.328 ops/s
# Warmup Iteration   6: 45171.097 ops/s
# Warmup Iteration   7: 58884.241 ops/s
# Warmup Iteration   8: 55391.636 ops/s
# Warmup Iteration   9: 66192.274 ops/s
# Warmup Iteration  10: 59278.002 ops/s
# Warmup Iteration  11: 62764.111 ops/s
# Warmup Iteration  12: 59775.533 ops/s
# Warmup Iteration  13: 65478.151 ops/s
# Warmup Iteration  14: 60040.105 ops/s
# Warmup Iteration  15: 59485.634 ops/s
# Warmup Iteration  16: 55748.294 ops/s
# Warmup Iteration  17: 60883.253 ops/s
# Warmup Iteration  18: 62403.082 ops/s
# Warmup Iteration  19: 64603.275 ops/s
# Warmup Iteration  20: 62189.691 ops/s
# Warmup Iteration  21: 67628.839 ops/s
# Warmup Iteration  22: 52713.227 ops/s
# Warmup Iteration  23: 64540.395 ops/s
# Warmup Iteration  24: 54456.483 ops/s
# Warmup Iteration  25: 60717.087 ops/s
# Warmup Iteration  26: 63757.997 ops/s
# Warmup Iteration  27: 59983.502 ops/s
# Warmup Iteration  28: 62746.458 ops/s
# Warmup Iteration  29: 63364.752 ops/s
# Warmup Iteration  30: 64162.386 ops/s
Iteration   1: 57478.309 ops/s
Iteration   2: 64638.733 ops/s
Iteration   3: 62854.663 ops/s
Iteration   4: 44124.315 ops/s
Iteration   5: 65227.050 ops/s
Iteration   6: 60543.081 ops/s
Iteration   7: 63301.047 ops/s
Iteration   8: 64327.249 ops/s
Iteration   9: 64153.055 ops/s
Iteration  10: 62842.201 ops/s
Iteration  11: 62280.789 ops/s
Iteration  12: 61382.210 ops/s
Iteration  13: 66987.175 ops/s
Iteration  14: 67761.782 ops/s
Iteration  15: 62235.908 ops/s
Iteration  16: 62665.002 ops/s
Iteration  17: 64344.954 ops/s
Iteration  18: 58550.240 ops/s
Iteration  19: 61555.769 ops/s
Iteration  20: 65451.621 ops/s
Iteration  21: 61048.971 ops/s
Iteration  22: 63772.510 ops/s
Iteration  23: 63243.055 ops/s
Iteration  24: 68681.133 ops/s
Iteration  25: 59739.966 ops/s
Iteration  26: 60418.760 ops/s
Iteration  27: 67783.504 ops/s
Iteration  28: 62914.738 ops/s
Iteration  29: 68631.451 ops/s
Iteration  30: 58553.338 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_badSourceOther":
  62583.086 ±(99.9%) 3036.404 ops/s [Average]
  (min, avg, max) = (44124.315, 62583.086, 68681.133), stdev = 4544.747
  CI (99.9%): [59546.682, 65619.490] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt      Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_badSourceOther  thrpt   30  62583.086 ± 3036.404  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_comeAndGo$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_comeAndGo

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 110065.053 ops/s
# Warmup Iteration   2: 430715.731 ops/s
# Warmup Iteration   3: 449065.837 ops/s
# Warmup Iteration   4: 534572.910 ops/s
# Warmup Iteration   5: 579194.832 ops/s
# Warmup Iteration   6: 570215.507 ops/s
# Warmup Iteration   7: 564771.499 ops/s
# Warmup Iteration   8: 606336.739 ops/s
# Warmup Iteration   9: 568626.150 ops/s
# Warmup Iteration  10: 586266.548 ops/s
# Warmup Iteration  11: 557734.429 ops/s
# Warmup Iteration  12: 584654.533 ops/s
# Warmup Iteration  13: 587286.761 ops/s
# Warmup Iteration  14: 571087.835 ops/s
# Warmup Iteration  15: 594946.692 ops/s
# Warmup Iteration  16: 563153.031 ops/s
# Warmup Iteration  17: 585257.239 ops/s
# Warmup Iteration  18: 588986.562 ops/s
# Warmup Iteration  19: 597271.462 ops/s
# Warmup Iteration  20: 570513.559 ops/s
# Warmup Iteration  21: 601147.166 ops/s
# Warmup Iteration  22: 572085.016 ops/s
# Warmup Iteration  23: 598700.895 ops/s
# Warmup Iteration  24: 585259.360 ops/s
# Warmup Iteration  25: 569729.384 ops/s
# Warmup Iteration  26: 599880.801 ops/s
# Warmup Iteration  27: 598999.943 ops/s
# Warmup Iteration  28: 570920.860 ops/s
# Warmup Iteration  29: 603875.656 ops/s
# Warmup Iteration  30: 565149.352 ops/s
Iteration   1: 600140.404 ops/s
Iteration   2: 590172.835 ops/s
Iteration   3: 579058.476 ops/s
Iteration   4: 606629.523 ops/s
Iteration   5: 571992.929 ops/s
Iteration   6: 583472.524 ops/s
Iteration   7: 602108.150 ops/s
Iteration   8: 567507.613 ops/s
Iteration   9: 600655.573 ops/s
Iteration  10: 567303.714 ops/s
Iteration  11: 607323.752 ops/s
Iteration  12: 584678.700 ops/s
Iteration  13: 579532.589 ops/s
Iteration  14: 602308.533 ops/s
Iteration  15: 588811.435 ops/s
Iteration  16: 571565.675 ops/s
Iteration  17: 592242.434 ops/s
Iteration  18: 581871.216 ops/s
Iteration  19: 588386.421 ops/s
Iteration  20: 570078.333 ops/s
Iteration  21: 599435.547 ops/s
Iteration  22: 579966.417 ops/s
Iteration  23: 576578.241 ops/s
Iteration  24: 594875.038 ops/s
Iteration  25: 573656.613 ops/s
Iteration  26: 590573.016 ops/s
Iteration  27: 573111.087 ops/s
Iteration  28: 587017.729 ops/s
Iteration  29: 586946.338 ops/s
Iteration  30: 560506.995 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_comeAndGo":
  585283.595 ±(99.9%) 8519.489 ops/s [Average]
  (min, avg, max) = (560506.995, 585283.595, 607323.752), stdev = 12751.570
  CI (99.9%): [576764.106, 593803.084] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableRefCountTest._Benchmark.benchmark_comeAndGo  thrpt   30  585283.595 ± 8519.489  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 55735.090 ops/s
# Warmup Iteration   2: 333223.548 ops/s
# Warmup Iteration   3: 360094.750 ops/s
# Warmup Iteration   4: 403415.601 ops/s
# Warmup Iteration   5: 416526.640 ops/s
# Warmup Iteration   6: 399180.731 ops/s
# Warmup Iteration   7: 434434.842 ops/s
# Warmup Iteration   8: 438045.166 ops/s
# Warmup Iteration   9: 434093.156 ops/s
# Warmup Iteration  10: 430077.430 ops/s
# Warmup Iteration  11: 423352.488 ops/s
# Warmup Iteration  12: 444535.715 ops/s
# Warmup Iteration  13: 425104.904 ops/s
# Warmup Iteration  14: 444393.512 ops/s
# Warmup Iteration  15: 420839.371 ops/s
# Warmup Iteration  16: 441630.282 ops/s
# Warmup Iteration  17: 436444.610 ops/s
# Warmup Iteration  18: 453951.323 ops/s
# Warmup Iteration  19: 441862.711 ops/s
# Warmup Iteration  20: 455915.199 ops/s
# Warmup Iteration  21: 450991.074 ops/s
# Warmup Iteration  22: 436863.210 ops/s
# Warmup Iteration  23: 457243.286 ops/s
# Warmup Iteration  24: 433788.879 ops/s
# Warmup Iteration  25: 459007.338 ops/s
# Warmup Iteration  26: 438775.698 ops/s
# Warmup Iteration  27: 340982.841 ops/s
# Warmup Iteration  28: 437913.284 ops/s
# Warmup Iteration  29: 441424.196 ops/s
# Warmup Iteration  30: 466494.740 ops/s
Iteration   1: 454129.582 ops/s
Iteration   2: 434188.215 ops/s
Iteration   3: 450141.998 ops/s
Iteration   4: 458787.014 ops/s
Iteration   5: 439959.139 ops/s
Iteration   6: 461128.835 ops/s
Iteration   7: 435223.295 ops/s
Iteration   8: 454307.191 ops/s
Iteration   9: 455375.227 ops/s
Iteration  10: 450633.290 ops/s
Iteration  11: 453080.106 ops/s
Iteration  12: 442665.641 ops/s
Iteration  13: 455529.112 ops/s
Iteration  14: 442403.802 ops/s
Iteration  15: 441676.497 ops/s
Iteration  16: 428831.698 ops/s
Iteration  17: 450091.419 ops/s
Iteration  18: 443228.932 ops/s
Iteration  19: 453496.228 ops/s
Iteration  20: 455833.089 ops/s
Iteration  21: 435284.899 ops/s
Iteration  22: 464189.367 ops/s
Iteration  23: 438678.258 ops/s
Iteration  24: 441127.266 ops/s
Iteration  25: 451288.512 ops/s
Iteration  26: 475142.993 ops/s
Iteration  27: 429703.357 ops/s
Iteration  28: 440864.031 ops/s
Iteration  29: 463162.954 ops/s
Iteration  30: 424485.471 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_doubleOnSubscribe":
  447487.914 ±(99.9%) 7832.026 ops/s [Average]
  (min, avg, max) = (424485.471, 447487.914, 475142.993), stdev = 11722.608
  CI (99.9%): [439655.889, 455319.940] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  447487.914 ± 7832.026  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedCombinerCrashError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedCombinerCrashError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25740.078 ops/s
# Warmup Iteration   2: 80048.392 ops/s
# Warmup Iteration   3: 232228.117 ops/s
# Warmup Iteration   4: 248336.401 ops/s
# Warmup Iteration   5: 266809.264 ops/s
# Warmup Iteration   6: 284421.790 ops/s
# Warmup Iteration   7: 277072.895 ops/s
# Warmup Iteration   8: 269190.367 ops/s
# Warmup Iteration   9: 273882.130 ops/s
# Warmup Iteration  10: 270569.145 ops/s
# Warmup Iteration  11: 279230.419 ops/s
# Warmup Iteration  12: 270321.310 ops/s
# Warmup Iteration  13: 281745.272 ops/s
# Warmup Iteration  14: 275435.874 ops/s
# Warmup Iteration  15: 280087.725 ops/s
# Warmup Iteration  16: 275571.364 ops/s
# Warmup Iteration  17: 278525.625 ops/s
# Warmup Iteration  18: 290619.355 ops/s
# Warmup Iteration  19: 277579.928 ops/s
# Warmup Iteration  20: 294691.296 ops/s
# Warmup Iteration  21: 287708.951 ops/s
# Warmup Iteration  22: 275554.664 ops/s
# Warmup Iteration  23: 291045.025 ops/s
# Warmup Iteration  24: 276009.591 ops/s
# Warmup Iteration  25: 281823.600 ops/s
# Warmup Iteration  26: 284542.393 ops/s
# Warmup Iteration  27: 278990.985 ops/s
# Warmup Iteration  28: 287588.921 ops/s
# Warmup Iteration  29: 283529.916 ops/s
# Warmup Iteration  30: 278051.698 ops/s
Iteration   1: 294312.047 ops/s
Iteration   2: 280404.038 ops/s
Iteration   3: 282090.344 ops/s
Iteration   4: 293256.709 ops/s
Iteration   5: 290804.967 ops/s
Iteration   6: 274189.973 ops/s
Iteration   7: 304210.660 ops/s
Iteration   8: 275737.521 ops/s
Iteration   9: 286348.372 ops/s
Iteration  10: 273791.747 ops/s
Iteration  11: 291607.731 ops/s
Iteration  12: 278304.181 ops/s
Iteration  13: 272262.484 ops/s
Iteration  14: 283223.755 ops/s
Iteration  15: 276543.901 ops/s
Iteration  16: 272326.732 ops/s
Iteration  17: 276945.131 ops/s
Iteration  18: 289605.824 ops/s
Iteration  19: 280846.062 ops/s
Iteration  20: 285269.602 ops/s
Iteration  21: 284729.176 ops/s
Iteration  22: 280967.197 ops/s
Iteration  23: 279160.200 ops/s
Iteration  24: 289138.557 ops/s
Iteration  25: 287202.078 ops/s
Iteration  26: 278822.969 ops/s
Iteration  27: 284685.798 ops/s
Iteration  28: 278949.811 ops/s
Iteration  29: 281928.835 ops/s
Iteration  30: 287033.178 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_fusedCombinerCrashError2":
  283156.653 ±(99.9%) 4909.068 ops/s [Average]
  (min, avg, max) = (272262.484, 283156.653, 304210.660), stdev = 7347.662
  CI (99.9%): [278247.585, 288065.721] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_fusedCombinerCrashError2  thrpt   30  283156.653 ± 4909.068  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_conditionalFusionNoNPE$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_conditionalFusionNoNPE

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 289238.957 ops/s
# Warmup Iteration   2: 1917193.722 ops/s
# Warmup Iteration   3: 2955673.975 ops/s
# Warmup Iteration   4: 2522216.031 ops/s
# Warmup Iteration   5: 3041728.155 ops/s
# Warmup Iteration   6: 2904534.193 ops/s
# Warmup Iteration   7: 3009177.057 ops/s
# Warmup Iteration   8: 3135103.646 ops/s
# Warmup Iteration   9: 2913521.459 ops/s
# Warmup Iteration  10: 3087284.936 ops/s
# Warmup Iteration  11: 2987092.424 ops/s
# Warmup Iteration  12: 3058454.708 ops/s
# Warmup Iteration  13: 2934854.960 ops/s
# Warmup Iteration  14: 3034847.256 ops/s
# Warmup Iteration  15: 3120236.706 ops/s
# Warmup Iteration  16: 2906689.077 ops/s
# Warmup Iteration  17: 3011020.810 ops/s
# Warmup Iteration  18: 2925251.570 ops/s
# Warmup Iteration  19: 3032268.453 ops/s
# Warmup Iteration  20: 2988896.120 ops/s
# Warmup Iteration  21: 2954311.103 ops/s
# Warmup Iteration  22: 2494225.107 ops/s
# Warmup Iteration  23: 2972442.804 ops/s
# Warmup Iteration  24: 2911355.701 ops/s
# Warmup Iteration  25: 3070603.853 ops/s
# Warmup Iteration  26: 2996405.079 ops/s
# Warmup Iteration  27: 3007533.214 ops/s
# Warmup Iteration  28: 2977598.514 ops/s
# Warmup Iteration  29: 3037414.425 ops/s
# Warmup Iteration  30: 3105749.936 ops/s
Iteration   1: 2974766.642 ops/s
Iteration   2: 3102644.109 ops/s
Iteration   3: 2909236.786 ops/s
Iteration   4: 2958538.110 ops/s
Iteration   5: 3051439.570 ops/s
Iteration   6: 2975416.692 ops/s
Iteration   7: 3072563.024 ops/s
Iteration   8: 3012147.209 ops/s
Iteration   9: 3058014.640 ops/s
Iteration  10: 3086779.993 ops/s
Iteration  11: 3005750.035 ops/s
Iteration  12: 3105299.686 ops/s
Iteration  13: 3087973.478 ops/s
Iteration  14: 2965051.786 ops/s
Iteration  15: 2994869.183 ops/s
Iteration  16: 3121488.013 ops/s
Iteration  17: 2931120.615 ops/s
Iteration  18: 3091505.946 ops/s
Iteration  19: 2957941.159 ops/s
Iteration  20: 2962633.662 ops/s
Iteration  21: 3097307.023 ops/s
Iteration  22: 2974760.946 ops/s
Iteration  23: 3076525.941 ops/s
Iteration  24: 2910333.972 ops/s
Iteration  25: 2955530.934 ops/s
Iteration  26: 3075443.651 ops/s
Iteration  27: 2892137.810 ops/s
Iteration  28: 2999532.295 ops/s
Iteration  29: 3068448.412 ops/s
Iteration  30: 2996997.487 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_conditionalFusionNoNPE":
  3015739.960 ±(99.9%) 45144.676 ops/s [Average]
  (min, avg, max) = (2892137.810, 3015739.960, 3121488.013), stdev = 67570.430
  CI (99.9%): [2970595.285, 3060884.636] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_conditionalFusionNoNPE  thrpt   30  3015739.960 ± 45144.676  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipMultipleRequests$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipMultipleRequests

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15370.824 ops/s
# Warmup Iteration   2: 81802.438 ops/s
# Warmup Iteration   3: 162375.397 ops/s
# Warmup Iteration   4: 235534.292 ops/s
# Warmup Iteration   5: 298901.055 ops/s
# Warmup Iteration   6: 295374.558 ops/s
# Warmup Iteration   7: 283910.410 ops/s
# Warmup Iteration   8: 293327.610 ops/s
# Warmup Iteration   9: 283145.052 ops/s
# Warmup Iteration  10: 298791.602 ops/s
# Warmup Iteration  11: 289188.686 ops/s
# Warmup Iteration  12: 297542.794 ops/s
# Warmup Iteration  13: 282967.398 ops/s
# Warmup Iteration  14: 297595.041 ops/s
# Warmup Iteration  15: 293349.752 ops/s
# Warmup Iteration  16: 281078.716 ops/s
# Warmup Iteration  17: 298982.111 ops/s
# Warmup Iteration  18: 289916.046 ops/s
# Warmup Iteration  19: 282848.275 ops/s
# Warmup Iteration  20: 303492.274 ops/s
# Warmup Iteration  21: 293632.824 ops/s
# Warmup Iteration  22: 277374.016 ops/s
# Warmup Iteration  23: 295970.036 ops/s
# Warmup Iteration  24: 285836.075 ops/s
# Warmup Iteration  25: 280219.198 ops/s
# Warmup Iteration  26: 287209.983 ops/s
# Warmup Iteration  27: 288028.519 ops/s
# Warmup Iteration  28: 282543.746 ops/s
# Warmup Iteration  29: 289517.323 ops/s
# Warmup Iteration  30: 289018.497 ops/s
Iteration   1: 291764.433 ops/s
Iteration   2: 281212.220 ops/s
Iteration   3: 300200.081 ops/s
Iteration   4: 283379.856 ops/s
Iteration   5: 298615.475 ops/s
Iteration   6: 289999.131 ops/s
Iteration   7: 283640.998 ops/s
Iteration   8: 299211.506 ops/s
Iteration   9: 276229.079 ops/s
Iteration  10: 296222.372 ops/s
Iteration  11: 283631.563 ops/s
Iteration  12: 291861.248 ops/s
Iteration  13: 300090.251 ops/s
Iteration  14: 283991.384 ops/s
Iteration  15: 292202.192 ops/s
Iteration  16: 297845.534 ops/s
Iteration  17: 279153.401 ops/s
Iteration  18: 299941.008 ops/s
Iteration  19: 273240.027 ops/s
Iteration  20: 302160.332 ops/s
Iteration  21: 281371.815 ops/s
Iteration  22: 297603.412 ops/s
Iteration  23: 290562.500 ops/s
Iteration  24: 281326.377 ops/s
Iteration  25: 295971.715 ops/s
Iteration  26: 282834.784 ops/s
Iteration  27: 293464.264 ops/s
Iteration  28: 289960.334 ops/s
Iteration  29: 291796.754 ops/s
Iteration  30: 293820.484 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipMultipleRequests":
  290110.151 ±(99.9%) 5370.659 ops/s [Average]
  (min, avg, max) = (273240.027, 290110.151, 302160.332), stdev = 8038.551
  CI (99.9%): [284739.492, 295480.810] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_skipMultipleRequests  thrpt   30  290110.151 ± 5370.659  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124387.364 ops/s
# Warmup Iteration   2: 456921.883 ops/s
# Warmup Iteration   3: 489524.220 ops/s
# Warmup Iteration   4: 497377.717 ops/s
# Warmup Iteration   5: 526394.050 ops/s
# Warmup Iteration   6: 528213.852 ops/s
# Warmup Iteration   7: 515831.176 ops/s
# Warmup Iteration   8: 539115.124 ops/s
# Warmup Iteration   9: 534296.932 ops/s
# Warmup Iteration  10: 507697.088 ops/s
# Warmup Iteration  11: 534751.203 ops/s
# Warmup Iteration  12: 510746.337 ops/s
# Warmup Iteration  13: 513516.457 ops/s
# Warmup Iteration  14: 542094.203 ops/s
# Warmup Iteration  15: 519533.464 ops/s
# Warmup Iteration  16: 465354.037 ops/s
# Warmup Iteration  17: 495231.001 ops/s
# Warmup Iteration  18: 522149.886 ops/s
# Warmup Iteration  19: 559262.366 ops/s
# Warmup Iteration  20: 561534.833 ops/s
# Warmup Iteration  21: 566923.086 ops/s
# Warmup Iteration  22: 522554.522 ops/s
# Warmup Iteration  23: 564389.452 ops/s
# Warmup Iteration  24: 554928.188 ops/s
# Warmup Iteration  25: 546681.919 ops/s
# Warmup Iteration  26: 553566.455 ops/s
# Warmup Iteration  27: 548833.542 ops/s
# Warmup Iteration  28: 516663.704 ops/s
# Warmup Iteration  29: 555328.457 ops/s
# Warmup Iteration  30: 522646.832 ops/s
Iteration   1: 549422.410 ops/s
Iteration   2: 540948.939 ops/s
Iteration   3: 508109.421 ops/s
Iteration   4: 554294.272 ops/s
Iteration   5: 509320.736 ops/s
Iteration   6: 544766.869 ops/s
Iteration   7: 538946.546 ops/s
Iteration   8: 523470.614 ops/s
Iteration   9: 547734.328 ops/s
Iteration  10: 527034.838 ops/s
Iteration  11: 562328.411 ops/s
Iteration  12: 553620.248 ops/s
Iteration  13: 541956.928 ops/s
Iteration  14: 547687.385 ops/s
Iteration  15: 555346.574 ops/s
Iteration  16: 521573.526 ops/s
Iteration  17: 536989.519 ops/s
Iteration  18: 561670.088 ops/s
Iteration  19: 529062.677 ops/s
Iteration  20: 559011.150 ops/s
Iteration  21: 494404.039 ops/s
Iteration  22: 536111.677 ops/s
Iteration  23: 536382.846 ops/s
Iteration  24: 558799.554 ops/s
Iteration  25: 542512.710 ops/s
Iteration  26: 523343.677 ops/s
Iteration  27: 564090.732 ops/s
Iteration  28: 531105.041 ops/s
Iteration  29: 530753.955 ops/s
Iteration  30: 562023.351 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe":
  539760.769 ±(99.9%) 11790.529 ops/s [Average]
  (min, avg, max) = (494404.039, 539760.769, 564090.732), stdev = 17647.510
  CI (99.9%): [527970.240, 551551.298] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  539760.769 ± 11790.529  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_iteratorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_iteratorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44674.368 ops/s
# Warmup Iteration   2: 161295.806 ops/s
# Warmup Iteration   3: 177416.184 ops/s
# Warmup Iteration   4: 168527.078 ops/s
# Warmup Iteration   5: 188657.759 ops/s
# Warmup Iteration   6: 162014.650 ops/s
# Warmup Iteration   7: 189262.707 ops/s
# Warmup Iteration   8: 189043.395 ops/s
# Warmup Iteration   9: 188188.512 ops/s
# Warmup Iteration  10: 188262.145 ops/s
# Warmup Iteration  11: 191468.872 ops/s
# Warmup Iteration  12: 185762.391 ops/s
# Warmup Iteration  13: 192452.607 ops/s
# Warmup Iteration  14: 188408.653 ops/s
# Warmup Iteration  15: 188339.447 ops/s
# Warmup Iteration  16: 185198.920 ops/s
# Warmup Iteration  17: 203246.782 ops/s
# Warmup Iteration  18: 198635.831 ops/s
# Warmup Iteration  19: 193545.496 ops/s
# Warmup Iteration  20: 203768.802 ops/s
# Warmup Iteration  21: 202647.788 ops/s
# Warmup Iteration  22: 194234.412 ops/s
# Warmup Iteration  23: 202247.515 ops/s
# Warmup Iteration  24: 194419.119 ops/s
# Warmup Iteration  25: 203223.483 ops/s
# Warmup Iteration  26: 194543.753 ops/s
# Warmup Iteration  27: 199323.748 ops/s
# Warmup Iteration  28: 204201.023 ops/s
# Warmup Iteration  29: 192710.610 ops/s
# Warmup Iteration  30: 205209.821 ops/s
Iteration   1: 201088.132 ops/s
Iteration   2: 191883.857 ops/s
Iteration   3: 202529.392 ops/s
Iteration   4: 195781.749 ops/s
Iteration   5: 195192.278 ops/s
Iteration   6: 197825.206 ops/s
Iteration   7: 195070.637 ops/s
Iteration   8: 207555.534 ops/s
Iteration   9: 201769.958 ops/s
Iteration  10: 196799.734 ops/s
Iteration  11: 199685.765 ops/s
Iteration  12: 196490.832 ops/s
Iteration  13: 198449.205 ops/s
Iteration  14: 191414.762 ops/s
Iteration  15: 200353.729 ops/s
Iteration  16: 203508.000 ops/s
Iteration  17: 197561.333 ops/s
Iteration  18: 198919.523 ops/s
Iteration  19: 194761.107 ops/s
Iteration  20: 201830.385 ops/s
Iteration  21: 197126.709 ops/s
Iteration  22: 199619.568 ops/s
Iteration  23: 201078.214 ops/s
Iteration  24: 196123.732 ops/s
Iteration  25: 204355.685 ops/s
Iteration  26: 191096.235 ops/s
Iteration  27: 201616.079 ops/s
Iteration  28: 200239.302 ops/s
Iteration  29: 197618.934 ops/s
Iteration  30: 200052.228 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_iteratorThrows":
  198579.927 ±(99.9%) 2552.847 ops/s [Average]
  (min, avg, max) = (191096.235, 198579.927, 207555.534), stdev = 3820.982
  CI (99.9%): [196027.079, 201132.774] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableAmbTest._Benchmark.benchmark_iteratorThrows  thrpt   30  198579.927 ± 2552.847  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_overlapBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_overlapBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53523.415 ops/s
# Warmup Iteration   2: 328442.954 ops/s
# Warmup Iteration   3: 407003.984 ops/s
# Warmup Iteration   4: 361540.071 ops/s
# Warmup Iteration   5: 450983.384 ops/s
# Warmup Iteration   6: 433754.224 ops/s
# Warmup Iteration   7: 450689.291 ops/s
# Warmup Iteration   8: 449595.158 ops/s
# Warmup Iteration   9: 442050.156 ops/s
# Warmup Iteration  10: 446831.699 ops/s
# Warmup Iteration  11: 319530.549 ops/s
# Warmup Iteration  12: 436332.236 ops/s
# Warmup Iteration  13: 444689.894 ops/s
# Warmup Iteration  14: 439519.831 ops/s
# Warmup Iteration  15: 446124.305 ops/s
# Warmup Iteration  16: 466485.789 ops/s
# Warmup Iteration  17: 452713.080 ops/s
# Warmup Iteration  18: 466914.180 ops/s
# Warmup Iteration  19: 449737.922 ops/s
# Warmup Iteration  20: 481489.285 ops/s
# Warmup Iteration  21: 451863.868 ops/s
# Warmup Iteration  22: 471892.188 ops/s
# Warmup Iteration  23: 467220.253 ops/s
# Warmup Iteration  24: 433042.274 ops/s
# Warmup Iteration  25: 450077.219 ops/s
# Warmup Iteration  26: 482054.829 ops/s
# Warmup Iteration  27: 449789.321 ops/s
# Warmup Iteration  28: 464327.290 ops/s
# Warmup Iteration  29: 449123.717 ops/s
# Warmup Iteration  30: 450798.769 ops/s
Iteration   1: 464080.890 ops/s
Iteration   2: 460108.401 ops/s
Iteration   3: 472749.620 ops/s
Iteration   4: 469856.354 ops/s
Iteration   5: 453207.754 ops/s
Iteration   6: 462193.249 ops/s
Iteration   7: 469371.701 ops/s
Iteration   8: 446703.073 ops/s
Iteration   9: 457178.196 ops/s
Iteration  10: 455577.372 ops/s
Iteration  11: 461958.376 ops/s
Iteration  12: 457398.207 ops/s
Iteration  13: 451286.530 ops/s
Iteration  14: 472645.165 ops/s
Iteration  15: 436160.832 ops/s
Iteration  16: 454302.776 ops/s
Iteration  17: 456893.794 ops/s
Iteration  18: 440082.044 ops/s
Iteration  19: 481986.729 ops/s
Iteration  20: 455545.639 ops/s
Iteration  21: 471414.550 ops/s
Iteration  22: 450450.862 ops/s
Iteration  23: 461879.104 ops/s
Iteration  24: 477556.354 ops/s
Iteration  25: 444252.821 ops/s
Iteration  26: 469283.540 ops/s
Iteration  27: 464911.018 ops/s
Iteration  28: 451879.842 ops/s
Iteration  29: 464229.957 ops/s
Iteration  30: 451617.999 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_overlapBackpressure":
  459558.758 ±(99.9%) 7251.253 ops/s [Average]
  (min, avg, max) = (436160.832, 459558.758, 481986.729), stdev = 10853.336
  CI (99.9%): [452307.505, 466810.012] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_overlapBackpressure  thrpt   30  459558.758 ± 7251.253  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 67659.790 ops/s
# Warmup Iteration   2: 191758.553 ops/s
# Warmup Iteration   3: 388790.091 ops/s
# Warmup Iteration   4: 366869.678 ops/s
# Warmup Iteration   5: 456840.135 ops/s
# Warmup Iteration   6: 432839.419 ops/s
# Warmup Iteration   7: 437974.255 ops/s
# Warmup Iteration   8: 435582.930 ops/s
# Warmup Iteration   9: 444787.106 ops/s
# Warmup Iteration  10: 440273.493 ops/s
# Warmup Iteration  11: 455936.429 ops/s
# Warmup Iteration  12: 427480.231 ops/s
# Warmup Iteration  13: 441201.378 ops/s
# Warmup Iteration  14: 450928.662 ops/s
# Warmup Iteration  15: 438904.798 ops/s
# Warmup Iteration  16: 450479.997 ops/s
# Warmup Iteration  17: 451944.891 ops/s
# Warmup Iteration  18: 460390.435 ops/s
# Warmup Iteration  19: 465921.292 ops/s
# Warmup Iteration  20: 453665.354 ops/s
# Warmup Iteration  21: 470385.260 ops/s
# Warmup Iteration  22: 456988.225 ops/s
# Warmup Iteration  23: 468648.412 ops/s
# Warmup Iteration  24: 462948.358 ops/s
# Warmup Iteration  25: 447239.070 ops/s
# Warmup Iteration  26: 465560.959 ops/s
# Warmup Iteration  27: 452762.610 ops/s
# Warmup Iteration  28: 464548.081 ops/s
# Warmup Iteration  29: 454016.917 ops/s
# Warmup Iteration  30: 453417.747 ops/s
Iteration   1: 473112.481 ops/s
Iteration   2: 457008.668 ops/s
Iteration   3: 468045.525 ops/s
Iteration   4: 452004.625 ops/s
Iteration   5: 447241.862 ops/s
Iteration   6: 473968.242 ops/s
Iteration   7: 453744.755 ops/s
Iteration   8: 468757.836 ops/s
Iteration   9: 450010.556 ops/s
Iteration  10: 461647.116 ops/s
Iteration  11: 449300.978 ops/s
Iteration  12: 467488.863 ops/s
Iteration  13: 449084.058 ops/s
Iteration  14: 455431.339 ops/s
Iteration  15: 472725.785 ops/s
Iteration  16: 473106.061 ops/s
Iteration  17: 464757.083 ops/s
Iteration  18: 443804.298 ops/s
Iteration  19: 458284.885 ops/s
Iteration  20: 471930.500 ops/s
Iteration  21: 452886.566 ops/s
Iteration  22: 473693.832 ops/s
Iteration  23: 443376.903 ops/s
Iteration  24: 480628.162 ops/s
Iteration  25: 449680.516 ops/s
Iteration  26: 480082.338 ops/s
Iteration  27: 463687.181 ops/s
Iteration  28: 444471.135 ops/s
Iteration  29: 473596.017 ops/s
Iteration  30: 451353.651 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipBackpressure":
  460830.394 ±(99.9%) 7751.547 ops/s [Average]
  (min, avg, max) = (443376.903, 460830.394, 480628.162), stdev = 11602.151
  CI (99.9%): [453078.847, 468581.940] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_skipBackpressure  thrpt   30  460830.394 ± 7751.547  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150083.637 ops/s
# Warmup Iteration   2: 470385.363 ops/s
# Warmup Iteration   3: 477500.620 ops/s
# Warmup Iteration   4: 459771.376 ops/s
# Warmup Iteration   5: 380277.675 ops/s
# Warmup Iteration   6: 486921.575 ops/s
# Warmup Iteration   7: 469315.283 ops/s
# Warmup Iteration   8: 531534.988 ops/s
# Warmup Iteration   9: 520262.352 ops/s
# Warmup Iteration  10: 525626.981 ops/s
# Warmup Iteration  11: 504423.664 ops/s
# Warmup Iteration  12: 530546.046 ops/s
# Warmup Iteration  13: 540408.830 ops/s
# Warmup Iteration  14: 512985.682 ops/s
# Warmup Iteration  15: 535016.587 ops/s
# Warmup Iteration  16: 507993.273 ops/s
# Warmup Iteration  17: 552988.427 ops/s
# Warmup Iteration  18: 561000.340 ops/s
# Warmup Iteration  19: 541062.006 ops/s
# Warmup Iteration  20: 570686.124 ops/s
# Warmup Iteration  21: 549035.041 ops/s
# Warmup Iteration  22: 542493.992 ops/s
# Warmup Iteration  23: 550020.349 ops/s
# Warmup Iteration  24: 550328.857 ops/s
# Warmup Iteration  25: 527891.050 ops/s
# Warmup Iteration  26: 560535.084 ops/s
# Warmup Iteration  27: 529386.336 ops/s
# Warmup Iteration  28: 559301.960 ops/s
# Warmup Iteration  29: 535593.075 ops/s
# Warmup Iteration  30: 549820.795 ops/s
Iteration   1: 552820.935 ops/s
Iteration   2: 563751.239 ops/s
Iteration   3: 537209.183 ops/s
Iteration   4: 538964.221 ops/s
Iteration   5: 537825.304 ops/s
Iteration   6: 547060.371 ops/s
Iteration   7: 551945.964 ops/s
Iteration   8: 532446.023 ops/s
Iteration   9: 558038.685 ops/s
Iteration  10: 551015.044 ops/s
Iteration  11: 533262.456 ops/s
Iteration  12: 561740.505 ops/s
Iteration  13: 526650.737 ops/s
Iteration  14: 550966.194 ops/s
Iteration  15: 534876.475 ops/s
Iteration  16: 541131.315 ops/s
Iteration  17: 567452.564 ops/s
Iteration  18: 526380.338 ops/s
Iteration  19: 548161.066 ops/s
Iteration  20: 540186.707 ops/s
Iteration  21: 560702.079 ops/s
Iteration  22: 532486.704 ops/s
Iteration  23: 543979.191 ops/s
Iteration  24: 550918.940 ops/s
Iteration  25: 532600.138 ops/s
Iteration  26: 567744.762 ops/s
Iteration  27: 528601.456 ops/s
Iteration  28: 547933.871 ops/s
Iteration  29: 547660.225 ops/s
Iteration  30: 552640.949 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_doubleOnSubscribe":
  545571.788 ±(99.9%) 8052.656 ops/s [Average]
  (min, avg, max) = (526380.338, 545571.788, 567744.762), stdev = 12052.838
  CI (99.9%): [537519.132, 553624.444] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableTakeLastTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  545571.788 ± 8052.656  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_maxConcurrencySustained$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_maxConcurrencySustained

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61812.730 ops/s
# Warmup Iteration   2: 180301.486 ops/s
# Warmup Iteration   3: 387822.248 ops/s
# Warmup Iteration   4: 573558.008 ops/s
# Warmup Iteration   5: 587819.315 ops/s
# Warmup Iteration   6: 608940.609 ops/s
# Warmup Iteration   7: 661642.520 ops/s
# Warmup Iteration   8: 658630.201 ops/s
# Warmup Iteration   9: 656261.279 ops/s
# Warmup Iteration  10: 650523.326 ops/s
# Warmup Iteration  11: 652287.552 ops/s
# Warmup Iteration  12: 670079.666 ops/s
# Warmup Iteration  13: 654589.636 ops/s
# Warmup Iteration  14: 642963.406 ops/s
# Warmup Iteration  15: 679266.682 ops/s
# Warmup Iteration  16: 661901.567 ops/s
# Warmup Iteration  17: 646199.537 ops/s
# Warmup Iteration  18: 682681.287 ops/s
# Warmup Iteration  19: 670190.797 ops/s
# Warmup Iteration  20: 634030.041 ops/s
# Warmup Iteration  21: 686042.943 ops/s
# Warmup Iteration  22: 629278.497 ops/s
# Warmup Iteration  23: 655302.373 ops/s
# Warmup Iteration  24: 651048.293 ops/s
# Warmup Iteration  25: 636245.118 ops/s
# Warmup Iteration  26: 653386.257 ops/s
# Warmup Iteration  27: 674190.669 ops/s
# Warmup Iteration  28: 647582.515 ops/s
# Warmup Iteration  29: 670617.574 ops/s
# Warmup Iteration  30: 646253.690 ops/s
Iteration   1: 649713.289 ops/s
Iteration   2: 683671.551 ops/s
Iteration   3: 632676.834 ops/s
Iteration   4: 671279.397 ops/s
Iteration   5: 678119.449 ops/s
Iteration   6: 640667.297 ops/s
Iteration   7: 660712.732 ops/s
Iteration   8: 656121.254 ops/s
Iteration   9: 671103.096 ops/s
Iteration  10: 656591.670 ops/s
Iteration  11: 658413.240 ops/s
Iteration  12: 645744.745 ops/s
Iteration  13: 645200.231 ops/s
Iteration  14: 666884.309 ops/s
Iteration  15: 676621.557 ops/s
Iteration  16: 632557.280 ops/s
Iteration  17: 683201.309 ops/s
Iteration  18: 648125.377 ops/s
Iteration  19: 674490.164 ops/s
Iteration  20: 644761.221 ops/s
Iteration  21: 668545.603 ops/s
Iteration  22: 668123.473 ops/s
Iteration  23: 650689.728 ops/s
Iteration  24: 678485.950 ops/s
Iteration  25: 629647.266 ops/s
Iteration  26: 680095.768 ops/s
Iteration  27: 648832.489 ops/s
Iteration  28: 663680.901 ops/s
Iteration  29: 683739.377 ops/s
Iteration  30: 637214.901 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_maxConcurrencySustained":
  659523.715 ±(99.9%) 11181.193 ops/s [Average]
  (min, avg, max) = (629647.266, 659523.715, 683739.377), stdev = 16735.485
  CI (99.9%): [648342.522, 670704.909] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableFlatMapTest._Benchmark.benchmark_maxConcurrencySustained  thrpt   30  659523.715 ± 11181.193  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.694 ops/s
# Warmup Iteration   2: 16944.817 ops/s
# Warmup Iteration   3: 52014.932 ops/s
# Warmup Iteration   4: 63847.116 ops/s
# Warmup Iteration   5: 68431.040 ops/s
# Warmup Iteration   6: 74537.308 ops/s
# Warmup Iteration   7: 67926.600 ops/s
# Warmup Iteration   8: 103313.390 ops/s
# Warmup Iteration   9: 159344.871 ops/s
# Warmup Iteration  10: 260442.947 ops/s
# Warmup Iteration  11: 242805.312 ops/s
# Warmup Iteration  12: 279274.553 ops/s
# Warmup Iteration  13: 286223.435 ops/s
# Warmup Iteration  14: 287114.556 ops/s
# Warmup Iteration  15: 279176.703 ops/s
# Warmup Iteration  16: 293699.282 ops/s
# Warmup Iteration  17: 279379.559 ops/s
# Warmup Iteration  18: 279374.237 ops/s
# Warmup Iteration  19: 289670.918 ops/s
# Warmup Iteration  20: 277276.588 ops/s
# Warmup Iteration  21: 276764.409 ops/s
# Warmup Iteration  22: 277639.438 ops/s
# Warmup Iteration  23: 280830.287 ops/s
# Warmup Iteration  24: 284464.734 ops/s
# Warmup Iteration  25: 284428.851 ops/s
# Warmup Iteration  26: 283456.724 ops/s
# Warmup Iteration  27: 294875.947 ops/s
# Warmup Iteration  28: 279480.658 ops/s
# Warmup Iteration  29: 286709.206 ops/s
# Warmup Iteration  30: 291542.659 ops/s
Iteration   1: 283033.715 ops/s
Iteration   2: 290966.487 ops/s
Iteration   3: 273684.456 ops/s
Iteration   4: 287011.734 ops/s
Iteration   5: 291483.742 ops/s
Iteration   6: 276984.209 ops/s
Iteration   7: 284284.349 ops/s
Iteration   8: 286948.755 ops/s
Iteration   9: 285598.697 ops/s
Iteration  10: 294591.260 ops/s
Iteration  11: 275692.110 ops/s
Iteration  12: 282919.042 ops/s
Iteration  13: 296452.960 ops/s
Iteration  14: 290722.343 ops/s
Iteration  15: 279639.374 ops/s
Iteration  16: 276731.995 ops/s
Iteration  17: 289506.685 ops/s
Iteration  18: 283126.458 ops/s
Iteration  19: 285281.619 ops/s
Iteration  20: 280841.041 ops/s
Iteration  21: 288641.258 ops/s
Iteration  22: 290484.815 ops/s
Iteration  23: 271439.063 ops/s
Iteration  24: 287489.468 ops/s
Iteration  25: 270256.871 ops/s
Iteration  26: 287062.973 ops/s
Iteration  27: 286071.303 ops/s
Iteration  28: 278454.098 ops/s
Iteration  29: 289037.831 ops/s
Iteration  30: 291549.002 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorWithError":
  284532.924 ±(99.9%) 4506.465 ops/s [Average]
  (min, avg, max) = (270256.871, 284532.924, 296452.960), stdev = 6745.065
  CI (99.9%): [280026.459, 289039.388] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorWithError  thrpt   30  284532.924 ± 4506.465  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.696 ops/s
# Warmup Iteration   2: 43827.127 ops/s
# Warmup Iteration   3: 97481.725 ops/s
# Warmup Iteration   4: 146113.982 ops/s
# Warmup Iteration   5: 158359.056 ops/s
# Warmup Iteration   6: 143977.884 ops/s
# Warmup Iteration   7: 222961.694 ops/s
# Warmup Iteration   8: 595771.288 ops/s
# Warmup Iteration   9: 745638.102 ops/s
# Warmup Iteration  10: 738991.567 ops/s
# Warmup Iteration  11: 739616.255 ops/s
# Warmup Iteration  12: 763424.743 ops/s
# Warmup Iteration  13: 748227.602 ops/s
# Warmup Iteration  14: 755131.669 ops/s
# Warmup Iteration  15: 727356.099 ops/s
# Warmup Iteration  16: 731097.361 ops/s
# Warmup Iteration  17: 759500.606 ops/s
# Warmup Iteration  18: 755189.078 ops/s
# Warmup Iteration  19: 728600.063 ops/s
# Warmup Iteration  20: 749314.464 ops/s
# Warmup Iteration  21: 740832.597 ops/s
# Warmup Iteration  22: 776692.611 ops/s
# Warmup Iteration  23: 728461.419 ops/s
# Warmup Iteration  24: 723166.577 ops/s
# Warmup Iteration  25: 751666.238 ops/s
# Warmup Iteration  26: 736015.169 ops/s
# Warmup Iteration  27: 755159.577 ops/s
# Warmup Iteration  28: 775391.220 ops/s
# Warmup Iteration  29: 719964.651 ops/s
# Warmup Iteration  30: 755813.765 ops/s
Iteration   1: 734892.214 ops/s
Iteration   2: 758396.465 ops/s
Iteration   3: 725443.008 ops/s
Iteration   4: 736808.849 ops/s
Iteration   5: 753312.970 ops/s
Iteration   6: 715794.698 ops/s
Iteration   7: 740047.619 ops/s
Iteration   8: 776329.604 ops/s
Iteration   9: 741210.589 ops/s
Iteration  10: 779210.894 ops/s
Iteration  11: 711092.722 ops/s
Iteration  12: 775068.348 ops/s
Iteration  13: 730146.959 ops/s
Iteration  14: 720738.680 ops/s
Iteration  15: 763467.789 ops/s
Iteration  16: 759745.229 ops/s
Iteration  17: 760986.458 ops/s
Iteration  18: 733146.826 ops/s
Iteration  19: 778481.194 ops/s
Iteration  20: 736811.836 ops/s
Iteration  21: 750758.688 ops/s
Iteration  22: 745015.747 ops/s
Iteration  23: 730006.460 ops/s
Iteration  24: 768619.861 ops/s
Iteration  25: 551720.771 ops/s
Iteration  26: 726741.268 ops/s
Iteration  27: 791209.221 ops/s
Iteration  28: 759053.295 ops/s
Iteration  29: 737892.252 ops/s
Iteration  30: 741845.671 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorMaxConcurrency":
  741133.206 ±(99.9%) 27547.138 ops/s [Average]
  (min, avg, max) = (551720.771, 741133.206, 791209.221), stdev = 41231.262
  CI (99.9%): [713586.068, 768680.344] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score       Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorMaxConcurrency  thrpt   30  741133.206 ± 27547.138  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6967.470 ops/s
# Warmup Iteration   2: 67989.325 ops/s
# Warmup Iteration   3: 149541.395 ops/s
# Warmup Iteration   4: 157571.905 ops/s
# Warmup Iteration   5: 156262.127 ops/s
# Warmup Iteration   6: 171124.737 ops/s
# Warmup Iteration   7: 178123.835 ops/s
# Warmup Iteration   8: 172962.586 ops/s
# Warmup Iteration   9: 180115.769 ops/s
# Warmup Iteration  10: 177247.528 ops/s
# Warmup Iteration  11: 174365.308 ops/s
# Warmup Iteration  12: 176485.360 ops/s
# Warmup Iteration  13: 170269.084 ops/s
# Warmup Iteration  14: 175240.131 ops/s
# Warmup Iteration  15: 178163.959 ops/s
# Warmup Iteration  16: 170252.985 ops/s
# Warmup Iteration  17: 175308.842 ops/s
# Warmup Iteration  18: 184039.581 ops/s
# Warmup Iteration  19: 181090.322 ops/s
# Warmup Iteration  20: 177456.273 ops/s
# Warmup Iteration  21: 184612.102 ops/s
# Warmup Iteration  22: 177162.827 ops/s
# Warmup Iteration  23: 174932.554 ops/s
# Warmup Iteration  24: 173999.895 ops/s
# Warmup Iteration  25: 174364.675 ops/s
# Warmup Iteration  26: 173539.957 ops/s
# Warmup Iteration  27: 177845.720 ops/s
# Warmup Iteration  28: 178019.606 ops/s
# Warmup Iteration  29: 179142.820 ops/s
# Warmup Iteration  30: 177524.216 ops/s
Iteration   1: 181105.418 ops/s
Iteration   2: 182190.601 ops/s
Iteration   3: 175625.746 ops/s
Iteration   4: 181501.248 ops/s
Iteration   5: 174690.621 ops/s
Iteration   6: 182274.478 ops/s
Iteration   7: 186404.638 ops/s
Iteration   8: 172936.937 ops/s
Iteration   9: 174049.508 ops/s
Iteration  10: 187530.441 ops/s
Iteration  11: 176458.046 ops/s
Iteration  12: 181573.228 ops/s
Iteration  13: 174705.833 ops/s
Iteration  14: 176884.468 ops/s
Iteration  15: 179364.860 ops/s
Iteration  16: 174343.148 ops/s
Iteration  17: 180601.729 ops/s
Iteration  18: 175047.345 ops/s
Iteration  19: 179372.587 ops/s
Iteration  20: 178623.088 ops/s
Iteration  21: 180025.250 ops/s
Iteration  22: 178452.870 ops/s
Iteration  23: 179480.060 ops/s
Iteration  24: 183008.169 ops/s
Iteration  25: 177802.221 ops/s
Iteration  26: 174847.643 ops/s
Iteration  27: 182972.667 ops/s
Iteration  28: 174499.295 ops/s
Iteration  29: 178223.758 ops/s
Iteration  30: 171466.802 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_badSource":
  178535.423 ±(99.9%) 2631.646 ops/s [Average]
  (min, avg, max) = (171466.802, 178535.423, 187530.441), stdev = 3938.924
  CI (99.9%): [175903.777, 181167.069] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableWindowWithObservableTest._Benchmark.benchmark_badSource  thrpt   30  178535.423 ± 2631.646  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipSkipping$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipSkipping

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6246.496 ops/s
# Warmup Iteration   2: 79147.872 ops/s
# Warmup Iteration   3: 204768.428 ops/s
# Warmup Iteration   4: 309134.713 ops/s
# Warmup Iteration   5: 325787.837 ops/s
# Warmup Iteration   6: 308059.898 ops/s
# Warmup Iteration   7: 307250.962 ops/s
# Warmup Iteration   8: 313041.528 ops/s
# Warmup Iteration   9: 299344.050 ops/s
# Warmup Iteration  10: 319135.135 ops/s
# Warmup Iteration  11: 322555.551 ops/s
# Warmup Iteration  12: 311156.086 ops/s
# Warmup Iteration  13: 330662.497 ops/s
# Warmup Iteration  14: 314709.835 ops/s
# Warmup Iteration  15: 337191.646 ops/s
# Warmup Iteration  16: 299277.552 ops/s
# Warmup Iteration  17: 321458.893 ops/s
# Warmup Iteration  18: 329218.965 ops/s
# Warmup Iteration  19: 313536.722 ops/s
# Warmup Iteration  20: 331282.768 ops/s
# Warmup Iteration  21: 319707.808 ops/s
# Warmup Iteration  22: 318656.719 ops/s
# Warmup Iteration  23: 338189.574 ops/s
# Warmup Iteration  24: 314219.054 ops/s
# Warmup Iteration  25: 310895.539 ops/s
# Warmup Iteration  26: 330027.845 ops/s
# Warmup Iteration  27: 314614.255 ops/s
# Warmup Iteration  28: 322977.193 ops/s
# Warmup Iteration  29: 316435.886 ops/s
# Warmup Iteration  30: 306394.786 ops/s
Iteration   1: 326238.471 ops/s
Iteration   2: 315725.312 ops/s
Iteration   3: 334652.697 ops/s
Iteration   4: 314793.783 ops/s
Iteration   5: 323716.075 ops/s
Iteration   6: 319402.346 ops/s
Iteration   7: 321151.056 ops/s
Iteration   8: 326151.102 ops/s
Iteration   9: 315741.335 ops/s
Iteration  10: 321934.606 ops/s
Iteration  11: 328532.568 ops/s
Iteration  12: 315205.739 ops/s
Iteration  13: 336139.116 ops/s
Iteration  14: 320990.022 ops/s
Iteration  15: 311422.208 ops/s
Iteration  16: 329703.635 ops/s
Iteration  17: 313726.913 ops/s
Iteration  18: 330280.497 ops/s
Iteration  19: 318352.400 ops/s
Iteration  20: 259857.489 ops/s
Iteration  21: 328510.606 ops/s
Iteration  22: 310266.694 ops/s
Iteration  23: 332731.959 ops/s
Iteration  24: 314046.644 ops/s
Iteration  25: 327275.742 ops/s
Iteration  26: 323403.868 ops/s
Iteration  27: 324707.452 ops/s
Iteration  28: 333394.291 ops/s
Iteration  29: 318506.650 ops/s
Iteration  30: 315351.332 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipSkipping":
  320397.087 ±(99.9%) 9043.999 ops/s [Average]
  (min, avg, max) = (259857.489, 320397.087, 336139.116), stdev = 13536.634
  CI (99.9%): [311353.088, 329441.086] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipSkipping  thrpt   30  320397.087 ± 9043.999  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 470627.816 ops/s
# Warmup Iteration   2: 2147887.240 ops/s
# Warmup Iteration   3: 2899012.513 ops/s
# Warmup Iteration   4: 3041024.792 ops/s
# Warmup Iteration   5: 3042918.606 ops/s
# Warmup Iteration   6: 3255716.863 ops/s
# Warmup Iteration   7: 3130732.726 ops/s
# Warmup Iteration   8: 3082258.869 ops/s
# Warmup Iteration   9: 3014059.552 ops/s
# Warmup Iteration  10: 3238256.293 ops/s
# Warmup Iteration  11: 3082242.289 ops/s
# Warmup Iteration  12: 3094535.619 ops/s
# Warmup Iteration  13: 3103403.296 ops/s
# Warmup Iteration  14: 3075484.962 ops/s
# Warmup Iteration  15: 3130632.587 ops/s
# Warmup Iteration  16: 3072474.691 ops/s
# Warmup Iteration  17: 3120327.454 ops/s
# Warmup Iteration  18: 3012717.320 ops/s
# Warmup Iteration  19: 3135232.513 ops/s
# Warmup Iteration  20: 3043104.510 ops/s
# Warmup Iteration  21: 3167777.838 ops/s
# Warmup Iteration  22: 3125738.560 ops/s
# Warmup Iteration  23: 3054461.068 ops/s
# Warmup Iteration  24: 3145901.318 ops/s
# Warmup Iteration  25: 3083098.955 ops/s
# Warmup Iteration  26: 3255771.759 ops/s
# Warmup Iteration  27: 3123189.999 ops/s
# Warmup Iteration  28: 3004056.767 ops/s
# Warmup Iteration  29: 3142006.664 ops/s
# Warmup Iteration  30: 3132835.943 ops/s
Iteration   1: 3048446.668 ops/s
Iteration   2: 3263602.351 ops/s
Iteration   3: 3202117.722 ops/s
Iteration   4: 3134295.053 ops/s
Iteration   5: 3188032.667 ops/s
Iteration   6: 3207257.949 ops/s
Iteration   7: 3100327.618 ops/s
Iteration   8: 3179324.352 ops/s
Iteration   9: 3044424.682 ops/s
Iteration  10: 3173087.413 ops/s
Iteration  11: 3175831.605 ops/s
Iteration  12: 3076212.404 ops/s
Iteration  13: 3194278.147 ops/s
Iteration  14: 3050376.592 ops/s
Iteration  15: 3031217.600 ops/s
Iteration  16: 3233893.554 ops/s
Iteration  17: 3013249.059 ops/s
Iteration  18: 3108815.849 ops/s
Iteration  19: 3204172.150 ops/s
Iteration  20: 3054390.819 ops/s
Iteration  21: 3151624.071 ops/s
Iteration  22: 3106851.533 ops/s
Iteration  23: 3208486.292 ops/s
Iteration  24: 3276247.246 ops/s
Iteration  25: 3037880.106 ops/s
Iteration  26: 3257666.475 ops/s
Iteration  27: 3196936.099 ops/s
Iteration  28: 3083437.175 ops/s
Iteration  29: 3183107.569 ops/s
Iteration  30: 3088905.008 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete":
  3142483.194 ±(99.9%) 51555.701 ops/s [Average]
  (min, avg, max) = (3013249.059, 3142483.194, 3276247.246), stdev = 77166.152
  CI (99.9%): [3090927.493, 3194038.895] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete  thrpt   30  3142483.194 ± 51555.701  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 149705.623 ops/s
# Warmup Iteration   2: 335003.557 ops/s
# Warmup Iteration   3: 358106.464 ops/s
# Warmup Iteration   4: 363070.615 ops/s
# Warmup Iteration   5: 362478.455 ops/s
# Warmup Iteration   6: 351034.915 ops/s
# Warmup Iteration   7: 356611.416 ops/s
# Warmup Iteration   8: 368756.760 ops/s
# Warmup Iteration   9: 349051.333 ops/s
# Warmup Iteration  10: 353207.917 ops/s
# Warmup Iteration  11: 351163.470 ops/s
# Warmup Iteration  12: 364639.447 ops/s
# Warmup Iteration  13: 364335.217 ops/s
# Warmup Iteration  14: 346986.057 ops/s
# Warmup Iteration  15: 370066.965 ops/s
# Warmup Iteration  16: 345741.143 ops/s
# Warmup Iteration  17: 385169.755 ops/s
# Warmup Iteration  18: 377920.940 ops/s
# Warmup Iteration  19: 380760.607 ops/s
# Warmup Iteration  20: 398033.556 ops/s
# Warmup Iteration  21: 390512.039 ops/s
# Warmup Iteration  22: 378820.865 ops/s
# Warmup Iteration  23: 389056.505 ops/s
# Warmup Iteration  24: 375050.796 ops/s
# Warmup Iteration  25: 378531.581 ops/s
# Warmup Iteration  26: 390034.201 ops/s
# Warmup Iteration  27: 375520.513 ops/s
# Warmup Iteration  28: 388848.988 ops/s
# Warmup Iteration  29: 374707.800 ops/s
# Warmup Iteration  30: 383843.195 ops/s
Iteration   1: 392981.645 ops/s
Iteration   2: 365584.441 ops/s
Iteration   3: 388120.923 ops/s
Iteration   4: 395496.578 ops/s
Iteration   5: 376058.976 ops/s
Iteration   6: 374887.504 ops/s
Iteration   7: 394766.786 ops/s
Iteration   8: 378246.611 ops/s
Iteration   9: 392505.535 ops/s
Iteration  10: 375586.146 ops/s
Iteration  11: 384026.735 ops/s
Iteration  12: 385796.018 ops/s
Iteration  13: 363333.274 ops/s
Iteration  14: 362426.858 ops/s
Iteration  15: 338265.295 ops/s
Iteration  16: 395209.762 ops/s
Iteration  17: 374865.638 ops/s
Iteration  18: 392546.322 ops/s
Iteration  19: 360545.287 ops/s
Iteration  20: 393473.549 ops/s
Iteration  21: 373348.401 ops/s
Iteration  22: 391718.897 ops/s
Iteration  23: 386587.585 ops/s
Iteration  24: 378383.921 ops/s
Iteration  25: 403261.030 ops/s
Iteration  26: 373288.873 ops/s
Iteration  27: 391477.022 ops/s
Iteration  28: 377870.315 ops/s
Iteration  29: 387503.254 ops/s
Iteration  30: 377784.735 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstError":
  380864.931 ±(99.9%) 9170.054 ops/s [Average]
  (min, avg, max) = (338265.295, 380864.931, 403261.030), stdev = 13725.306
  CI (99.9%): [371694.877, 390034.985] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstError  thrpt   30  380864.931 ± 9170.054  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 183110.707 ops/s
# Warmup Iteration   2: 322423.813 ops/s
# Warmup Iteration   3: 341689.032 ops/s
# Warmup Iteration   4: 354613.178 ops/s
# Warmup Iteration   5: 358164.328 ops/s
# Warmup Iteration   6: 340948.931 ops/s
# Warmup Iteration   7: 368558.958 ops/s
# Warmup Iteration   8: 330643.617 ops/s
# Warmup Iteration   9: 347040.146 ops/s
# Warmup Iteration  10: 370334.517 ops/s
# Warmup Iteration  11: 357355.561 ops/s
# Warmup Iteration  12: 354537.176 ops/s
# Warmup Iteration  13: 376251.928 ops/s
# Warmup Iteration  14: 353852.857 ops/s
# Warmup Iteration  15: 374722.037 ops/s
# Warmup Iteration  16: 362214.088 ops/s
# Warmup Iteration  17: 388048.825 ops/s
# Warmup Iteration  18: 391975.287 ops/s
# Warmup Iteration  19: 370022.131 ops/s
# Warmup Iteration  20: 389594.228 ops/s
# Warmup Iteration  21: 380367.188 ops/s
# Warmup Iteration  22: 388075.002 ops/s
# Warmup Iteration  23: 374669.671 ops/s
# Warmup Iteration  24: 373692.122 ops/s
# Warmup Iteration  25: 394256.590 ops/s
# Warmup Iteration  26: 380948.324 ops/s
# Warmup Iteration  27: 380096.476 ops/s
# Warmup Iteration  28: 386393.149 ops/s
# Warmup Iteration  29: 382882.946 ops/s
# Warmup Iteration  30: 389374.769 ops/s
Iteration   1: 372208.011 ops/s
Iteration   2: 385307.131 ops/s
Iteration   3: 376385.374 ops/s
Iteration   4: 389787.546 ops/s
Iteration   5: 374671.528 ops/s
Iteration   6: 383098.394 ops/s
Iteration   7: 396224.387 ops/s
Iteration   8: 378779.274 ops/s
Iteration   9: 385561.449 ops/s
Iteration  10: 378599.635 ops/s
Iteration  11: 394293.221 ops/s
Iteration  12: 378212.408 ops/s
Iteration  13: 386067.917 ops/s
Iteration  14: 381852.792 ops/s
Iteration  15: 376053.610 ops/s
Iteration  16: 390433.182 ops/s
Iteration  17: 388274.841 ops/s
Iteration  18: 377495.982 ops/s
Iteration  19: 393994.845 ops/s
Iteration  20: 379829.297 ops/s
Iteration  21: 387298.654 ops/s
Iteration  22: 400202.597 ops/s
Iteration  23: 362581.568 ops/s
Iteration  24: 393978.976 ops/s
Iteration  25: 381538.205 ops/s
Iteration  26: 393994.466 ops/s
Iteration  27: 387956.291 ops/s
Iteration  28: 376333.677 ops/s
Iteration  29: 400347.144 ops/s
Iteration  30: 377668.697 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstError":
  384301.037 ±(99.9%) 5918.588 ops/s [Average]
  (min, avg, max) = (362581.568, 384301.037, 400347.144), stdev = 8858.664
  CI (99.9%): [378382.449, 390219.625] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstError  thrpt   30  384301.037 ± 5918.588  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 160748.069 ops/s
# Warmup Iteration   2: 629536.127 ops/s
# Warmup Iteration   3: 715943.122 ops/s
# Warmup Iteration   4: 688913.059 ops/s
# Warmup Iteration   5: 727761.246 ops/s
# Warmup Iteration   6: 692329.557 ops/s
# Warmup Iteration   7: 689028.306 ops/s
# Warmup Iteration   8: 678373.399 ops/s
# Warmup Iteration   9: 690295.704 ops/s
# Warmup Iteration  10: 639074.056 ops/s
# Warmup Iteration  11: 723883.523 ops/s
# Warmup Iteration  12: 714751.660 ops/s
# Warmup Iteration  13: 666151.520 ops/s
# Warmup Iteration  14: 741014.890 ops/s
# Warmup Iteration  15: 709044.907 ops/s
# Warmup Iteration  16: 710981.652 ops/s
# Warmup Iteration  17: 782828.891 ops/s
# Warmup Iteration  18: 787730.550 ops/s
# Warmup Iteration  19: 736293.913 ops/s
# Warmup Iteration  20: 753991.374 ops/s
# Warmup Iteration  21: 808023.456 ops/s
# Warmup Iteration  22: 781605.918 ops/s
# Warmup Iteration  23: 737129.172 ops/s
# Warmup Iteration  24: 763558.689 ops/s
# Warmup Iteration  25: 746680.556 ops/s
# Warmup Iteration  26: 748171.932 ops/s
# Warmup Iteration  27: 778664.014 ops/s
# Warmup Iteration  28: 787802.738 ops/s
# Warmup Iteration  29: 724533.829 ops/s
# Warmup Iteration  30: 776496.082 ops/s
Iteration   1: 737949.453 ops/s
Iteration   2: 786732.731 ops/s
Iteration   3: 748318.949 ops/s
Iteration   4: 742688.524 ops/s
Iteration   5: 785900.322 ops/s
Iteration   6: 727689.918 ops/s
Iteration   7: 778651.302 ops/s
Iteration   8: 746396.563 ops/s
Iteration   9: 602278.690 ops/s
Iteration  10: 712239.914 ops/s
Iteration  11: 742712.769 ops/s
Iteration  12: 768264.074 ops/s
Iteration  13: 753273.251 ops/s
Iteration  14: 763350.949 ops/s
Iteration  15: 739487.406 ops/s
Iteration  16: 781269.981 ops/s
Iteration  17: 736112.308 ops/s
Iteration  18: 780606.193 ops/s
Iteration  19: 750207.271 ops/s
Iteration  20: 769538.340 ops/s
Iteration  21: 746384.956 ops/s
Iteration  22: 764984.482 ops/s
Iteration  23: 792374.925 ops/s
Iteration  24: 734602.282 ops/s
Iteration  25: 780616.556 ops/s
Iteration  26: 746420.058 ops/s
Iteration  27: 774151.836 ops/s
Iteration  28: 764418.859 ops/s
Iteration  29: 771160.689 ops/s
Iteration  30: 763699.121 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenTest._Benchmark.benchmark_andThenMaybeError":
  753082.756 ±(99.9%) 23195.957 ops/s [Average]
  (min, avg, max) = (602278.690, 753082.756, 792374.925), stdev = 34718.619
  CI (99.9%): [729886.799, 776278.713] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
CompletableAndThenTest._Benchmark.benchmark_andThenMaybeError  thrpt   30  753082.756 ± 23195.957  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_connectDisposeCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_connectDisposeCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 279149.685 ops/s
# Warmup Iteration   2: 489760.181 ops/s
# Warmup Iteration   3: 581084.234 ops/s
# Warmup Iteration   4: 550069.580 ops/s
# Warmup Iteration   5: 618756.207 ops/s
# Warmup Iteration   6: 522148.833 ops/s
# Warmup Iteration   7: 612892.912 ops/s
# Warmup Iteration   8: 639383.183 ops/s
# Warmup Iteration   9: 627414.768 ops/s
# Warmup Iteration  10: 602706.734 ops/s
# Warmup Iteration  11: 618341.097 ops/s
# Warmup Iteration  12: 599523.188 ops/s
# Warmup Iteration  13: 634145.417 ops/s
# Warmup Iteration  14: 638867.384 ops/s
# Warmup Iteration  15: 607304.889 ops/s
# Warmup Iteration  16: 620251.985 ops/s
# Warmup Iteration  17: 639881.182 ops/s
# Warmup Iteration  18: 616275.264 ops/s
# Warmup Iteration  19: 667343.102 ops/s
# Warmup Iteration  20: 630389.980 ops/s
# Warmup Iteration  21: 668926.531 ops/s
# Warmup Iteration  22: 627477.814 ops/s
# Warmup Iteration  23: 666671.060 ops/s
# Warmup Iteration  24: 631812.646 ops/s
# Warmup Iteration  25: 656046.915 ops/s
# Warmup Iteration  26: 629368.485 ops/s
# Warmup Iteration  27: 645085.825 ops/s
# Warmup Iteration  28: 680566.842 ops/s
# Warmup Iteration  29: 632633.109 ops/s
# Warmup Iteration  30: 670549.428 ops/s
Iteration   1: 640061.385 ops/s
Iteration   2: 656110.884 ops/s
Iteration   3: 640840.139 ops/s
Iteration   4: 647268.529 ops/s
Iteration   5: 658221.515 ops/s
Iteration   6: 641191.757 ops/s
Iteration   7: 664264.281 ops/s
Iteration   8: 647963.187 ops/s
Iteration   9: 632654.269 ops/s
Iteration  10: 682907.279 ops/s
Iteration  11: 651462.920 ops/s
Iteration  12: 641619.543 ops/s
Iteration  13: 652183.790 ops/s
Iteration  14: 643233.002 ops/s
Iteration  15: 641186.983 ops/s
Iteration  16: 679517.635 ops/s
Iteration  17: 667530.006 ops/s
Iteration  18: 638392.867 ops/s
Iteration  19: 669822.926 ops/s
Iteration  20: 655583.974 ops/s
Iteration  21: 629023.799 ops/s
Iteration  22: 656219.900 ops/s
Iteration  23: 641661.045 ops/s
Iteration  24: 663753.803 ops/s
Iteration  25: 658480.000 ops/s
Iteration  26: 653006.646 ops/s
Iteration  27: 640219.121 ops/s
Iteration  28: 653773.094 ops/s
Iteration  29: 665872.508 ops/s
Iteration  30: 643823.157 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_connectDisposeCrash":
  651928.331 ±(99.9%) 8780.534 ops/s [Average]
  (min, avg, max) = (629023.799, 651928.331, 682907.279), stdev = 13142.290
  CI (99.9%): [643147.798, 660708.865] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableReplayTest._Benchmark.benchmark_connectDisposeCrash  thrpt   30  651928.331 ± 8780.534  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2715735.273 ops/s
# Warmup Iteration   2: 6309440.447 ops/s
# Warmup Iteration   3: 8666341.127 ops/s
# Warmup Iteration   4: 7933651.484 ops/s
# Warmup Iteration   5: 8642274.266 ops/s
# Warmup Iteration   6: 8508619.722 ops/s
# Warmup Iteration   7: 8555209.774 ops/s
# Warmup Iteration   8: 8242588.755 ops/s
# Warmup Iteration   9: 8337932.045 ops/s
# Warmup Iteration  10: 8094136.076 ops/s
# Warmup Iteration  11: 8162357.153 ops/s
# Warmup Iteration  12: 8713387.941 ops/s
# Warmup Iteration  13: 8124834.274 ops/s
# Warmup Iteration  14: 8562898.441 ops/s
# Warmup Iteration  15: 8122985.351 ops/s
# Warmup Iteration  16: 8474055.073 ops/s
# Warmup Iteration  17: 8183248.892 ops/s
# Warmup Iteration  18: 7990772.504 ops/s
# Warmup Iteration  19: 8648944.761 ops/s
# Warmup Iteration  20: 8015024.936 ops/s
# Warmup Iteration  21: 8678778.889 ops/s
# Warmup Iteration  22: 8496552.509 ops/s
# Warmup Iteration  23: 8602006.186 ops/s
# Warmup Iteration  24: 8258678.058 ops/s
# Warmup Iteration  25: 8287285.535 ops/s
# Warmup Iteration  26: 8609247.689 ops/s
# Warmup Iteration  27: 8142131.109 ops/s
# Warmup Iteration  28: 8499507.987 ops/s
# Warmup Iteration  29: 8129175.838 ops/s
# Warmup Iteration  30: 8177453.266 ops/s
Iteration   1: 8480458.639 ops/s
Iteration   2: 8149552.761 ops/s
Iteration   3: 8589336.947 ops/s
Iteration   4: 6815807.411 ops/s
Iteration   5: 8425614.584 ops/s
Iteration   6: 8566061.355 ops/s
Iteration   7: 8300058.858 ops/s
Iteration   8: 8414688.244 ops/s
Iteration   9: 8635563.010 ops/s
Iteration  10: 8431526.248 ops/s
Iteration  11: 8252086.459 ops/s
Iteration  12: 8335805.226 ops/s
Iteration  13: 8139480.726 ops/s
Iteration  14: 8159440.679 ops/s
Iteration  15: 8530285.170 ops/s
Iteration  16: 8099697.868 ops/s
Iteration  17: 8212382.859 ops/s
Iteration  18: 8582958.238 ops/s
Iteration  19: 8009331.233 ops/s
Iteration  20: 8738407.246 ops/s
Iteration  21: 8053078.914 ops/s
Iteration  22: 8425869.346 ops/s
Iteration  23: 8578047.238 ops/s
Iteration  24: 8219704.790 ops/s
Iteration  25: 8646862.232 ops/s
Iteration  26: 8159071.345 ops/s
Iteration  27: 8539682.468 ops/s
Iteration  28: 8145789.014 ops/s
Iteration  29: 8253874.166 ops/s
Iteration  30: 8574805.257 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_dispose":
  8315510.951 ±(99.9%) 233112.745 ops/s [Average]
  (min, avg, max) = (6815807.411, 8315510.951, 8738407.246), stdev = 348912.209
  CI (99.9%): [8082398.206, 8548623.696] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score        Error  Units
ObservableUsingTest._Benchmark.benchmark_dispose  thrpt   30  8315510.951 ± 233112.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturn$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturn

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 149415.345 ops/s
# Warmup Iteration   2: 573070.016 ops/s
# Warmup Iteration   3: 687644.298 ops/s
# Warmup Iteration   4: 682824.712 ops/s
# Warmup Iteration   5: 684369.687 ops/s
# Warmup Iteration   6: 662266.498 ops/s
# Warmup Iteration   7: 668640.608 ops/s
# Warmup Iteration   8: 670458.594 ops/s
# Warmup Iteration   9: 707162.521 ops/s
# Warmup Iteration  10: 719240.465 ops/s
# Warmup Iteration  11: 678047.379 ops/s
# Warmup Iteration  12: 699314.531 ops/s
# Warmup Iteration  13: 704005.192 ops/s
# Warmup Iteration  14: 705868.909 ops/s
# Warmup Iteration  15: 709968.443 ops/s
# Warmup Iteration  16: 704449.007 ops/s
# Warmup Iteration  17: 743466.914 ops/s
# Warmup Iteration  18: 758581.782 ops/s
# Warmup Iteration  19: 712920.667 ops/s
# Warmup Iteration  20: 734918.628 ops/s
# Warmup Iteration  21: 713021.321 ops/s
# Warmup Iteration  22: 752204.210 ops/s
# Warmup Iteration  23: 727779.834 ops/s
# Warmup Iteration  24: 743388.977 ops/s
# Warmup Iteration  25: 723807.660 ops/s
# Warmup Iteration  26: 739065.557 ops/s
# Warmup Iteration  27: 748144.732 ops/s
# Warmup Iteration  28: 733577.071 ops/s
# Warmup Iteration  29: 744988.050 ops/s
# Warmup Iteration  30: 742016.230 ops/s
Iteration   1: 754739.542 ops/s
Iteration   2: 757300.257 ops/s
Iteration   3: 722033.992 ops/s
Iteration   4: 737332.292 ops/s
Iteration   5: 743437.895 ops/s
Iteration   6: 733597.882 ops/s
Iteration   7: 733790.921 ops/s
Iteration   8: 750252.196 ops/s
Iteration   9: 726850.109 ops/s
Iteration  10: 742550.018 ops/s
Iteration  11: 771150.040 ops/s
Iteration  12: 710752.642 ops/s
Iteration  13: 759214.335 ops/s
Iteration  14: 774312.780 ops/s
Iteration  15: 756862.475 ops/s
Iteration  16: 720351.804 ops/s
Iteration  17: 728226.673 ops/s
Iteration  18: 750790.812 ops/s
Iteration  19: 734921.054 ops/s
Iteration  20: 759107.918 ops/s
Iteration  21: 723043.144 ops/s
Iteration  22: 757619.285 ops/s
Iteration  23: 729767.486 ops/s
Iteration  24: 740221.264 ops/s
Iteration  25: 722541.249 ops/s
Iteration  26: 762976.903 ops/s
Iteration  27: 730883.562 ops/s
Iteration  28: 725942.354 ops/s
Iteration  29: 759090.480 ops/s
Iteration  30: 730434.620 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturn":
  741669.866 ±(99.9%) 11165.526 ops/s [Average]
  (min, avg, max) = (710752.642, 741669.866, 774312.780), stdev = 16712.035
  CI (99.9%): [730504.340, 752835.392] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturn  thrpt   30  741669.866 ± 11165.526  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_errorReceivedObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_errorReceivedObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 187520.829 ops/s
# Warmup Iteration   2: 596904.575 ops/s
# Warmup Iteration   3: 694423.940 ops/s
# Warmup Iteration   4: 658269.590 ops/s
# Warmup Iteration   5: 691087.320 ops/s
# Warmup Iteration   6: 681060.684 ops/s
# Warmup Iteration   7: 648233.751 ops/s
# Warmup Iteration   8: 670202.676 ops/s
# Warmup Iteration   9: 647859.548 ops/s
# Warmup Iteration  10: 694117.968 ops/s
# Warmup Iteration  11: 673053.851 ops/s
# Warmup Iteration  12: 669313.436 ops/s
# Warmup Iteration  13: 645642.957 ops/s
# Warmup Iteration  14: 685075.306 ops/s
# Warmup Iteration  15: 671558.313 ops/s
# Warmup Iteration  16: 694869.832 ops/s
# Warmup Iteration  17: 693055.433 ops/s
# Warmup Iteration  18: 719272.805 ops/s
# Warmup Iteration  19: 723729.804 ops/s
# Warmup Iteration  20: 694850.672 ops/s
# Warmup Iteration  21: 733801.686 ops/s
# Warmup Iteration  22: 712288.871 ops/s
# Warmup Iteration  23: 729787.282 ops/s
# Warmup Iteration  24: 713359.099 ops/s
# Warmup Iteration  25: 702009.121 ops/s
# Warmup Iteration  26: 726433.020 ops/s
# Warmup Iteration  27: 709018.679 ops/s
# Warmup Iteration  28: 613074.497 ops/s
# Warmup Iteration  29: 722085.613 ops/s
# Warmup Iteration  30: 693100.473 ops/s
Iteration   1: 746280.761 ops/s
Iteration   2: 698951.660 ops/s
Iteration   3: 722859.257 ops/s
Iteration   4: 715671.557 ops/s
Iteration   5: 699091.173 ops/s
Iteration   6: 739909.154 ops/s
Iteration   7: 686643.452 ops/s
Iteration   8: 723177.767 ops/s
Iteration   9: 679966.251 ops/s
Iteration  10: 737774.126 ops/s
Iteration  11: 684351.651 ops/s
Iteration  12: 702566.081 ops/s
Iteration  13: 729367.961 ops/s
Iteration  14: 701792.453 ops/s
Iteration  15: 708860.970 ops/s
Iteration  16: 690599.064 ops/s
Iteration  17: 709355.569 ops/s
Iteration  18: 725831.347 ops/s
Iteration  19: 705299.732 ops/s
Iteration  20: 711044.040 ops/s
Iteration  21: 716132.857 ops/s
Iteration  22: 731940.731 ops/s
Iteration  23: 704749.777 ops/s
Iteration  24: 731980.508 ops/s
Iteration  25: 724456.497 ops/s
Iteration  26: 667320.348 ops/s
Iteration  27: 730798.170 ops/s
Iteration  28: 698738.198 ops/s
Iteration  29: 711166.302 ops/s
Iteration  30: 724667.776 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_errorReceivedObservable":
  712044.840 ±(99.9%) 12749.363 ops/s [Average]
  (min, avg, max) = (667320.348, 712044.840, 746280.761), stdev = 19082.647
  CI (99.9%): [699295.477, 724794.202] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_errorReceivedObservable  thrpt   30  712044.840 ± 12749.363  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapNullHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapNullHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42339.792 ops/s
# Warmup Iteration   2: 273535.426 ops/s
# Warmup Iteration   3: 328285.167 ops/s
# Warmup Iteration   4: 325379.704 ops/s
# Warmup Iteration   5: 377659.712 ops/s
# Warmup Iteration   6: 340102.995 ops/s
# Warmup Iteration   7: 371635.271 ops/s
# Warmup Iteration   8: 381758.769 ops/s
# Warmup Iteration   9: 379249.950 ops/s
# Warmup Iteration  10: 368410.154 ops/s
# Warmup Iteration  11: 375356.582 ops/s
# Warmup Iteration  12: 373469.031 ops/s
# Warmup Iteration  13: 388897.536 ops/s
# Warmup Iteration  14: 389648.526 ops/s
# Warmup Iteration  15: 364032.371 ops/s
# Warmup Iteration  16: 389612.485 ops/s
# Warmup Iteration  17: 435937.572 ops/s
# Warmup Iteration  18: 436291.015 ops/s
# Warmup Iteration  19: 451460.661 ops/s
# Warmup Iteration  20: 424844.370 ops/s
# Warmup Iteration  21: 452723.180 ops/s
# Warmup Iteration  22: 442687.409 ops/s
# Warmup Iteration  23: 427436.107 ops/s
# Warmup Iteration  24: 448904.976 ops/s
# Warmup Iteration  25: 445278.061 ops/s
# Warmup Iteration  26: 437740.133 ops/s
# Warmup Iteration  27: 428342.092 ops/s
# Warmup Iteration  28: 442700.970 ops/s
# Warmup Iteration  29: 441729.070 ops/s
# Warmup Iteration  30: 437422.033 ops/s
Iteration   1: 459385.568 ops/s
Iteration   2: 435282.451 ops/s
Iteration   3: 451968.318 ops/s
Iteration   4: 454412.059 ops/s
Iteration   5: 435377.391 ops/s
Iteration   6: 443960.298 ops/s
Iteration   7: 441720.740 ops/s
Iteration   8: 457724.748 ops/s
Iteration   9: 433514.461 ops/s
Iteration  10: 441930.852 ops/s
Iteration  11: 461517.592 ops/s
Iteration  12: 431627.108 ops/s
Iteration  13: 439074.308 ops/s
Iteration  14: 436938.210 ops/s
Iteration  15: 446703.701 ops/s
Iteration  16: 436867.940 ops/s
Iteration  17: 434007.574 ops/s
Iteration  18: 435411.644 ops/s
Iteration  19: 450151.197 ops/s
Iteration  20: 445667.548 ops/s
Iteration  21: 421909.450 ops/s
Iteration  22: 463691.691 ops/s
Iteration  23: 432222.938 ops/s
Iteration  24: 439743.849 ops/s
Iteration  25: 445932.689 ops/s
Iteration  26: 440929.748 ops/s
Iteration  27: 453228.963 ops/s
Iteration  28: 439205.313 ops/s
Iteration  29: 433746.971 ops/s
Iteration  30: 444250.383 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapNullHidden":
  442936.857 ±(99.9%) 6679.309 ops/s [Average]
  (min, avg, max) = (421909.450, 442936.857, 463691.691), stdev = 9997.276
  CI (99.9%): [436257.548, 449616.166] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableFromCallableTest._Benchmark.benchmark_fusedFlatMapNullHidden  thrpt   30  442936.857 ± 6679.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNullHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNullHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60558.270 ops/s
# Warmup Iteration   2: 287982.404 ops/s
# Warmup Iteration   3: 334682.095 ops/s
# Warmup Iteration   4: 359140.637 ops/s
# Warmup Iteration   5: 345391.733 ops/s
# Warmup Iteration   6: 364255.286 ops/s
# Warmup Iteration   7: 377487.828 ops/s
# Warmup Iteration   8: 389411.259 ops/s
# Warmup Iteration   9: 368072.814 ops/s
# Warmup Iteration  10: 389353.997 ops/s
# Warmup Iteration  11: 373287.882 ops/s
# Warmup Iteration  12: 375672.288 ops/s
# Warmup Iteration  13: 378565.108 ops/s
# Warmup Iteration  14: 389327.979 ops/s
# Warmup Iteration  15: 371700.941 ops/s
# Warmup Iteration  16: 394049.399 ops/s
# Warmup Iteration  17: 440681.428 ops/s
# Warmup Iteration  18: 445592.430 ops/s
# Warmup Iteration  19: 466359.627 ops/s
# Warmup Iteration  20: 435653.905 ops/s
# Warmup Iteration  21: 459957.273 ops/s
# Warmup Iteration  22: 439028.517 ops/s
# Warmup Iteration  23: 347626.941 ops/s
# Warmup Iteration  24: 450494.612 ops/s
# Warmup Iteration  25: 442979.004 ops/s
# Warmup Iteration  26: 461065.612 ops/s
# Warmup Iteration  27: 463610.136 ops/s
# Warmup Iteration  28: 445004.068 ops/s
# Warmup Iteration  29: 461307.243 ops/s
# Warmup Iteration  30: 443971.443 ops/s
Iteration   1: 451728.286 ops/s
Iteration   2: 444323.724 ops/s
Iteration   3: 455157.258 ops/s
Iteration   4: 445218.552 ops/s
Iteration   5: 457240.628 ops/s
Iteration   6: 443569.098 ops/s
Iteration   7: 460681.460 ops/s
Iteration   8: 442326.214 ops/s
Iteration   9: 447704.285 ops/s
Iteration  10: 449588.403 ops/s
Iteration  11: 461917.593 ops/s
Iteration  12: 458320.072 ops/s
Iteration  13: 436152.067 ops/s
Iteration  14: 458261.343 ops/s
Iteration  15: 440289.391 ops/s
Iteration  16: 459618.144 ops/s
Iteration  17: 439871.508 ops/s
Iteration  18: 447878.578 ops/s
Iteration  19: 462509.091 ops/s
Iteration  20: 452254.453 ops/s
Iteration  21: 467434.963 ops/s
Iteration  22: 442119.420 ops/s
Iteration  23: 460306.529 ops/s
Iteration  24: 434869.327 ops/s
Iteration  25: 442675.231 ops/s
Iteration  26: 463205.953 ops/s
Iteration  27: 446035.879 ops/s
Iteration  28: 454299.911 ops/s
Iteration  29: 440180.975 ops/s
Iteration  30: 451017.566 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNullHidden":
  450558.530 ±(99.9%) 5995.296 ops/s [Average]
  (min, avg, max) = (434869.327, 450558.530, 467434.963), stdev = 8973.477
  CI (99.9%): [444563.235, 456553.826] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNullHidden  thrpt   30  450558.530 ± 5995.296  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1774914.048 ops/s
# Warmup Iteration   2: 6634266.602 ops/s
# Warmup Iteration   3: 9550747.464 ops/s
# Warmup Iteration   4: 8770727.471 ops/s
# Warmup Iteration   5: 9429259.423 ops/s
# Warmup Iteration   6: 9378000.738 ops/s
# Warmup Iteration   7: 8992514.877 ops/s
# Warmup Iteration   8: 9022354.107 ops/s
# Warmup Iteration   9: 9614374.697 ops/s
# Warmup Iteration  10: 8818518.603 ops/s
# Warmup Iteration  11: 9499093.326 ops/s
# Warmup Iteration  12: 9359515.991 ops/s
# Warmup Iteration  13: 9095256.369 ops/s
# Warmup Iteration  14: 9373353.484 ops/s
# Warmup Iteration  15: 9388101.517 ops/s
# Warmup Iteration  16: 8995883.442 ops/s
# Warmup Iteration  17: 8975916.838 ops/s
# Warmup Iteration  18: 9400736.709 ops/s
# Warmup Iteration  19: 9455380.097 ops/s
# Warmup Iteration  20: 8566516.652 ops/s
# Warmup Iteration  21: 9305946.298 ops/s
# Warmup Iteration  22: 9253629.491 ops/s
# Warmup Iteration  23: 9123664.029 ops/s
# Warmup Iteration  24: 9344482.374 ops/s
# Warmup Iteration  25: 8944042.350 ops/s
# Warmup Iteration  26: 9239047.303 ops/s
# Warmup Iteration  27: 9286256.864 ops/s
# Warmup Iteration  28: 8886965.829 ops/s
# Warmup Iteration  29: 9480655.011 ops/s
# Warmup Iteration  30: 9220421.295 ops/s
Iteration   1: 8878087.832 ops/s
Iteration   2: 9178968.208 ops/s
Iteration   3: 9072678.803 ops/s
Iteration   4: 9154108.536 ops/s
Iteration   5: 9010081.204 ops/s
Iteration   6: 9369263.812 ops/s
Iteration   7: 9295314.497 ops/s
Iteration   8: 9009645.191 ops/s
Iteration   9: 9591773.424 ops/s
Iteration  10: 8894621.689 ops/s
Iteration  11: 9312067.274 ops/s
Iteration  12: 8867636.584 ops/s
Iteration  13: 9564998.997 ops/s
Iteration  14: 8993031.202 ops/s
Iteration  15: 9006160.939 ops/s
Iteration  16: 9334337.968 ops/s
Iteration  17: 8987438.907 ops/s
Iteration  18: 9493457.580 ops/s
Iteration  19: 8918398.153 ops/s
Iteration  20: 9145606.634 ops/s
Iteration  21: 8991220.771 ops/s
Iteration  22: 9439845.349 ops/s
Iteration  23: 9188804.592 ops/s
Iteration  24: 9116125.177 ops/s
Iteration  25: 9088899.305 ops/s
Iteration  26: 9408003.722 ops/s
Iteration  27: 8816472.660 ops/s
Iteration  28: 9275708.355 ops/s
Iteration  29: 8900754.685 ops/s
Iteration  30: 9386091.736 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_dispose":
  9156320.126 ±(99.9%) 148416.697 ops/s [Average]
  (min, avg, max) = (8816472.660, 9156320.126, 9591773.424), stdev = 222143.141
  CI (99.9%): [9007903.430, 9304736.823] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
ObservableTakeLastTest._Benchmark.benchmark_dispose  thrpt   30  9156320.126 ± 148416.697  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_mergeDelayErrorIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_mergeDelayErrorIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 149782.336 ops/s
# Warmup Iteration   2: 380036.842 ops/s
# Warmup Iteration   3: 408261.729 ops/s
# Warmup Iteration   4: 453126.005 ops/s
# Warmup Iteration   5: 469779.693 ops/s
# Warmup Iteration   6: 464934.956 ops/s
# Warmup Iteration   7: 471901.326 ops/s
# Warmup Iteration   8: 463620.335 ops/s
# Warmup Iteration   9: 460259.509 ops/s
# Warmup Iteration  10: 465039.274 ops/s
# Warmup Iteration  11: 477318.044 ops/s
# Warmup Iteration  12: 451247.508 ops/s
# Warmup Iteration  13: 475536.109 ops/s
# Warmup Iteration  14: 465659.529 ops/s
# Warmup Iteration  15: 466581.614 ops/s
# Warmup Iteration  16: 477231.795 ops/s
# Warmup Iteration  17: 395029.399 ops/s
# Warmup Iteration  18: 451809.205 ops/s
# Warmup Iteration  19: 469382.098 ops/s
# Warmup Iteration  20: 490957.476 ops/s
# Warmup Iteration  21: 485378.144 ops/s
# Warmup Iteration  22: 498797.815 ops/s
# Warmup Iteration  23: 483607.710 ops/s
# Warmup Iteration  24: 473769.634 ops/s
# Warmup Iteration  25: 502388.715 ops/s
# Warmup Iteration  26: 484490.856 ops/s
# Warmup Iteration  27: 498604.212 ops/s
# Warmup Iteration  28: 464178.445 ops/s
# Warmup Iteration  29: 494043.702 ops/s
# Warmup Iteration  30: 497731.880 ops/s
Iteration   1: 483611.418 ops/s
Iteration   2: 484668.571 ops/s
Iteration   3: 486003.971 ops/s
Iteration   4: 493540.620 ops/s
Iteration   5: 479704.218 ops/s
Iteration   6: 484352.251 ops/s
Iteration   7: 499581.424 ops/s
Iteration   8: 481094.679 ops/s
Iteration   9: 499714.168 ops/s
Iteration  10: 489582.174 ops/s
Iteration  11: 480482.997 ops/s
Iteration  12: 495483.217 ops/s
Iteration  13: 489328.044 ops/s
Iteration  14: 485176.168 ops/s
Iteration  15: 483826.745 ops/s
Iteration  16: 482378.037 ops/s
Iteration  17: 516793.779 ops/s
Iteration  18: 498427.338 ops/s
Iteration  19: 486656.151 ops/s
Iteration  20: 478095.880 ops/s
Iteration  21: 494732.803 ops/s
Iteration  22: 471002.722 ops/s
Iteration  23: 496134.214 ops/s
Iteration  24: 473797.432 ops/s
Iteration  25: 488234.517 ops/s
Iteration  26: 498571.363 ops/s
Iteration  27: 476373.895 ops/s
Iteration  28: 490919.944 ops/s
Iteration  29: 467398.313 ops/s
Iteration  30: 504567.588 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_mergeDelayErrorIterableOneIsNull":
  488007.821 ±(99.9%) 7055.614 ops/s [Average]
  (min, avg, max) = (467398.313, 488007.821, 516793.779), stdev = 10560.511
  CI (99.9%): [480952.208, 495063.435] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_mergeDelayErrorIterableOneIsNull  thrpt   30  488007.821 ± 7055.614  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastRange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastRange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4167700.828 ops/s
# Warmup Iteration   2: 9214532.134 ops/s
# Warmup Iteration   3: 9976378.541 ops/s
# Warmup Iteration   4: 11455719.392 ops/s
# Warmup Iteration   5: 11139187.948 ops/s
# Warmup Iteration   6: 11605817.796 ops/s
# Warmup Iteration   7: 11616018.454 ops/s
# Warmup Iteration   8: 11331118.547 ops/s
# Warmup Iteration   9: 11717974.963 ops/s
# Warmup Iteration  10: 11159118.595 ops/s
# Warmup Iteration  11: 11327911.509 ops/s
# Warmup Iteration  12: 11749751.142 ops/s
# Warmup Iteration  13: 11306991.378 ops/s
# Warmup Iteration  14: 11606865.394 ops/s
# Warmup Iteration  15: 11675891.264 ops/s
# Warmup Iteration  16: 11152525.242 ops/s
# Warmup Iteration  17: 11829154.310 ops/s
# Warmup Iteration  18: 11316223.545 ops/s
# Warmup Iteration  19: 11851646.480 ops/s
# Warmup Iteration  20: 10973253.066 ops/s
# Warmup Iteration  21: 11703711.524 ops/s
# Warmup Iteration  22: 11411351.364 ops/s
# Warmup Iteration  23: 11634239.025 ops/s
# Warmup Iteration  24: 11540105.834 ops/s
# Warmup Iteration  25: 11254636.504 ops/s
# Warmup Iteration  26: 11312736.127 ops/s
# Warmup Iteration  27: 11514259.997 ops/s
# Warmup Iteration  28: 11247714.548 ops/s
# Warmup Iteration  29: 11855667.884 ops/s
# Warmup Iteration  30: 11948845.261 ops/s
Iteration   1: 11099432.631 ops/s
Iteration   2: 11550624.739 ops/s
Iteration   3: 11288802.991 ops/s
Iteration   4: 11492196.347 ops/s
Iteration   5: 11717169.322 ops/s
Iteration   6: 11073351.525 ops/s
Iteration   7: 11798872.827 ops/s
Iteration   8: 11296378.260 ops/s
Iteration   9: 11314440.815 ops/s
Iteration  10: 12086263.810 ops/s
Iteration  11: 10987528.015 ops/s
Iteration  12: 11270352.860 ops/s
Iteration  13: 11203455.613 ops/s
Iteration  14: 11710989.695 ops/s
Iteration  15: 11380664.588 ops/s
Iteration  16: 11487848.395 ops/s
Iteration  17: 11303252.494 ops/s
Iteration  18: 11519318.563 ops/s
Iteration  19: 11210443.521 ops/s
Iteration  20: 11554668.078 ops/s
Iteration  21: 11292750.647 ops/s
Iteration  22: 11164084.096 ops/s
Iteration  23: 11805657.273 ops/s
Iteration  24: 11297018.200 ops/s
Iteration  25: 11764482.458 ops/s
Iteration  26: 11178372.280 ops/s
Iteration  27: 11722776.838 ops/s
Iteration  28: 11703163.758 ops/s
Iteration  29: 11020573.573 ops/s
Iteration  30: 11287568.961 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastRange":
  11419416.772 ±(99.9%) 182709.636 ops/s [Average]
  (min, avg, max) = (10987528.015, 11419416.772, 12086263.810), stdev = 273471.202
  CI (99.9%): [11236707.137, 11602126.408] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score        Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastRange  thrpt   30  11419416.772 ± 182709.636  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastRange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastRange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3909461.763 ops/s
# Warmup Iteration   2: 9237456.404 ops/s
# Warmup Iteration   3: 9910232.382 ops/s
# Warmup Iteration   4: 11144689.692 ops/s
# Warmup Iteration   5: 11595550.236 ops/s
# Warmup Iteration   6: 11490594.784 ops/s
# Warmup Iteration   7: 10931141.910 ops/s
# Warmup Iteration   8: 11694351.955 ops/s
# Warmup Iteration   9: 11868457.082 ops/s
# Warmup Iteration  10: 11231863.754 ops/s
# Warmup Iteration  11: 11339124.767 ops/s
# Warmup Iteration  12: 8755920.871 ops/s
# Warmup Iteration  13: 10792883.565 ops/s
# Warmup Iteration  14: 11144522.378 ops/s
# Warmup Iteration  15: 11560441.418 ops/s
# Warmup Iteration  16: 11209550.335 ops/s
# Warmup Iteration  17: 11746343.121 ops/s
# Warmup Iteration  18: 11310696.796 ops/s
# Warmup Iteration  19: 11372994.395 ops/s
# Warmup Iteration  20: 11783932.261 ops/s
# Warmup Iteration  21: 11227953.646 ops/s
# Warmup Iteration  22: 11668326.837 ops/s
# Warmup Iteration  23: 11208431.116 ops/s
# Warmup Iteration  24: 11291530.421 ops/s
# Warmup Iteration  25: 11576694.638 ops/s
# Warmup Iteration  26: 11179112.139 ops/s
# Warmup Iteration  27: 11129415.799 ops/s
# Warmup Iteration  28: 11698516.726 ops/s
# Warmup Iteration  29: 11226039.563 ops/s
# Warmup Iteration  30: 11784099.634 ops/s
Iteration   1: 11350132.061 ops/s
Iteration   2: 11244621.752 ops/s
Iteration   3: 11657693.747 ops/s
Iteration   4: 11604189.604 ops/s
Iteration   5: 11341519.411 ops/s
Iteration   6: 11034282.393 ops/s
Iteration   7: 11488887.213 ops/s
Iteration   8: 11124634.334 ops/s
Iteration   9: 11761388.866 ops/s
Iteration  10: 11418371.998 ops/s
Iteration  11: 11465570.519 ops/s
Iteration  12: 11073714.758 ops/s
Iteration  13: 11253183.365 ops/s
Iteration  14: 12209999.993 ops/s
Iteration  15: 11096155.769 ops/s
Iteration  16: 11342976.563 ops/s
Iteration  17: 11436325.541 ops/s
Iteration  18: 11273549.190 ops/s
Iteration  19: 11568826.917 ops/s
Iteration  20: 11021460.411 ops/s
Iteration  21: 11628928.942 ops/s
Iteration  22: 11729142.173 ops/s
Iteration  23: 10867877.265 ops/s
Iteration  24: 11722577.858 ops/s
Iteration  25: 11008747.474 ops/s
Iteration  26: 11254467.341 ops/s
Iteration  27: 11003902.490 ops/s
Iteration  28: 11696647.192 ops/s
Iteration  29: 11211360.999 ops/s
Iteration  30: 11344794.489 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastRange":
  11374531.021 ±(99.9%) 197958.695 ops/s [Average]
  (min, avg, max) = (10867877.265, 11374531.021, 12209999.993), stdev = 296295.278
  CI (99.9%): [11176572.326, 11572489.716] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastRange  thrpt   30  11374531.021 ± 197958.695  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_mergeIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_mergeIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 139976.049 ops/s
# Warmup Iteration   2: 386709.156 ops/s
# Warmup Iteration   3: 414437.047 ops/s
# Warmup Iteration   4: 459571.594 ops/s
# Warmup Iteration   5: 457889.508 ops/s
# Warmup Iteration   6: 475361.174 ops/s
# Warmup Iteration   7: 445835.142 ops/s
# Warmup Iteration   8: 478373.004 ops/s
# Warmup Iteration   9: 454903.948 ops/s
# Warmup Iteration  10: 462004.702 ops/s
# Warmup Iteration  11: 448382.326 ops/s
# Warmup Iteration  12: 452029.802 ops/s
# Warmup Iteration  13: 467326.225 ops/s
# Warmup Iteration  14: 443457.443 ops/s
# Warmup Iteration  15: 473086.151 ops/s
# Warmup Iteration  16: 459922.182 ops/s
# Warmup Iteration  17: 479054.852 ops/s
# Warmup Iteration  18: 445738.678 ops/s
# Warmup Iteration  19: 455461.628 ops/s
# Warmup Iteration  20: 488011.404 ops/s
# Warmup Iteration  21: 480525.899 ops/s
# Warmup Iteration  22: 485799.688 ops/s
# Warmup Iteration  23: 480494.037 ops/s
# Warmup Iteration  24: 475602.202 ops/s
# Warmup Iteration  25: 496964.185 ops/s
# Warmup Iteration  26: 461768.535 ops/s
# Warmup Iteration  27: 482320.698 ops/s
# Warmup Iteration  28: 481183.849 ops/s
# Warmup Iteration  29: 475236.197 ops/s
# Warmup Iteration  30: 475913.360 ops/s
Iteration   1: 498721.042 ops/s
Iteration   2: 453742.977 ops/s
Iteration   3: 488682.390 ops/s
Iteration   4: 461170.748 ops/s
Iteration   5: 472242.521 ops/s
Iteration   6: 482857.881 ops/s
Iteration   7: 461372.910 ops/s
Iteration   8: 464752.056 ops/s
Iteration   9: 463010.540 ops/s
Iteration  10: 475204.986 ops/s
Iteration  11: 475526.932 ops/s
Iteration  12: 479734.796 ops/s
Iteration  13: 479756.033 ops/s
Iteration  14: 465079.011 ops/s
Iteration  15: 477651.153 ops/s
Iteration  16: 474825.939 ops/s
Iteration  17: 497206.563 ops/s
Iteration  18: 491495.679 ops/s
Iteration  19: 475465.877 ops/s
Iteration  20: 481456.689 ops/s
Iteration  21: 473586.816 ops/s
Iteration  22: 484873.613 ops/s
Iteration  23: 475088.598 ops/s
Iteration  24: 467236.747 ops/s
Iteration  25: 489601.237 ops/s
Iteration  26: 463396.786 ops/s
Iteration  27: 484820.212 ops/s
Iteration  28: 477153.867 ops/s
Iteration  29: 474391.538 ops/s
Iteration  30: 483372.654 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_mergeIterableOneIsNull":
  476449.293 ±(99.9%) 7309.270 ops/s [Average]
  (min, avg, max) = (453742.977, 476449.293, 498721.042), stdev = 10940.171
  CI (99.9%): [469140.024, 483758.563] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_mergeIterableOneIsNull  thrpt   30  476449.293 ± 7309.270  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_takeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_takeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 722297.309 ops/s
# Warmup Iteration   2: 3159486.645 ops/s
# Warmup Iteration   3: 3491190.844 ops/s
# Warmup Iteration   4: 4364858.532 ops/s
# Warmup Iteration   5: 4025046.440 ops/s
# Warmup Iteration   6: 3967350.065 ops/s
# Warmup Iteration   7: 3513712.398 ops/s
# Warmup Iteration   8: 4052561.107 ops/s
# Warmup Iteration   9: 4237489.876 ops/s
# Warmup Iteration  10: 4370330.527 ops/s
# Warmup Iteration  11: 4292365.108 ops/s
# Warmup Iteration  12: 4147898.709 ops/s
# Warmup Iteration  13: 4356101.617 ops/s
# Warmup Iteration  14: 4116092.044 ops/s
# Warmup Iteration  15: 4147552.448 ops/s
# Warmup Iteration  16: 4216826.883 ops/s
# Warmup Iteration  17: 4258307.243 ops/s
# Warmup Iteration  18: 4199296.616 ops/s
# Warmup Iteration  19: 4092869.821 ops/s
# Warmup Iteration  20: 4388038.275 ops/s
# Warmup Iteration  21: 4084125.517 ops/s
# Warmup Iteration  22: 4341785.646 ops/s
# Warmup Iteration  23: 4185738.643 ops/s
# Warmup Iteration  24: 4066543.558 ops/s
# Warmup Iteration  25: 4427569.146 ops/s
# Warmup Iteration  26: 4084913.901 ops/s
# Warmup Iteration  27: 4302442.254 ops/s
# Warmup Iteration  28: 4194411.594 ops/s
# Warmup Iteration  29: 4262226.347 ops/s
# Warmup Iteration  30: 4182535.362 ops/s
Iteration   1: 4145899.234 ops/s
Iteration   2: 4221634.576 ops/s
Iteration   3: 4312303.961 ops/s
Iteration   4: 4161330.562 ops/s
Iteration   5: 4430460.558 ops/s
Iteration   6: 4050221.374 ops/s
Iteration   7: 4218186.673 ops/s
Iteration   8: 4220160.620 ops/s
Iteration   9: 4264872.226 ops/s
Iteration  10: 4072573.797 ops/s
Iteration  11: 4196532.611 ops/s
Iteration  12: 4292451.098 ops/s
Iteration  13: 4170954.319 ops/s
Iteration  14: 4202303.102 ops/s
Iteration  15: 4281669.239 ops/s
Iteration  16: 4247024.641 ops/s
Iteration  17: 4060557.474 ops/s
Iteration  18: 4245066.620 ops/s
Iteration  19: 4260396.473 ops/s
Iteration  20: 4330362.112 ops/s
Iteration  21: 4200921.279 ops/s
Iteration  22: 4159081.461 ops/s
Iteration  23: 4308731.343 ops/s
Iteration  24: 4180186.339 ops/s
Iteration  25: 4278647.877 ops/s
Iteration  26: 4229653.994 ops/s
Iteration  27: 4369808.957 ops/s
Iteration  28: 4107857.425 ops/s
Iteration  29: 4210443.467 ops/s
Iteration  30: 4214637.275 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_takeMain":
  4221497.690 ±(99.9%) 58109.407 ops/s [Average]
  (min, avg, max) = (4050221.374, 4221497.690, 4430460.558), stdev = 86975.432
  CI (99.9%): [4163388.282, 4279607.097] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableConcatWithSingleTest._Benchmark.benchmark_takeMain  thrpt   30  4221497.690 ± 58109.407  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_range$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_range

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 286667.959 ops/s
# Warmup Iteration   2: 1530076.785 ops/s
# Warmup Iteration   3: 2179565.847 ops/s
# Warmup Iteration   4: 2793635.855 ops/s
# Warmup Iteration   5: 2827553.710 ops/s
# Warmup Iteration   6: 2712810.654 ops/s
# Warmup Iteration   7: 2796703.426 ops/s
# Warmup Iteration   8: 2686544.247 ops/s
# Warmup Iteration   9: 2672673.405 ops/s
# Warmup Iteration  10: 2753595.513 ops/s
# Warmup Iteration  11: 2746821.908 ops/s
# Warmup Iteration  12: 2766835.431 ops/s
# Warmup Iteration  13: 2706785.800 ops/s
# Warmup Iteration  14: 2890172.474 ops/s
# Warmup Iteration  15: 2707795.362 ops/s
# Warmup Iteration  16: 2883162.737 ops/s
# Warmup Iteration  17: 2850956.275 ops/s
# Warmup Iteration  18: 2716329.341 ops/s
# Warmup Iteration  19: 2766697.979 ops/s
# Warmup Iteration  20: 2914330.928 ops/s
# Warmup Iteration  21: 2699101.209 ops/s
# Warmup Iteration  22: 2851362.756 ops/s
# Warmup Iteration  23: 2667442.714 ops/s
# Warmup Iteration  24: 2759717.424 ops/s
# Warmup Iteration  25: 2886816.215 ops/s
# Warmup Iteration  26: 2902866.353 ops/s
# Warmup Iteration  27: 2790066.098 ops/s
# Warmup Iteration  28: 2638603.213 ops/s
# Warmup Iteration  29: 2825694.803 ops/s
# Warmup Iteration  30: 2778787.542 ops/s
Iteration   1: 2709881.668 ops/s
Iteration   2: 2853881.977 ops/s
Iteration   3: 2771355.995 ops/s
Iteration   4: 2788061.642 ops/s
Iteration   5: 2788861.608 ops/s
Iteration   6: 2754021.493 ops/s
Iteration   7: 2877826.198 ops/s
Iteration   8: 2722695.947 ops/s
Iteration   9: 2791189.524 ops/s
Iteration  10: 2773290.025 ops/s
Iteration  11: 2739301.966 ops/s
Iteration  12: 2831652.388 ops/s
Iteration  13: 2815684.631 ops/s
Iteration  14: 2640635.557 ops/s
Iteration  15: 2719686.404 ops/s
Iteration  16: 2834935.223 ops/s
Iteration  17: 2737529.950 ops/s
Iteration  18: 2823911.467 ops/s
Iteration  19: 2782788.610 ops/s
Iteration  20: 2852452.621 ops/s
Iteration  21: 2725969.990 ops/s
Iteration  22: 2742034.414 ops/s
Iteration  23: 2865794.182 ops/s
Iteration  24: 2689312.060 ops/s
Iteration  25: 2809985.635 ops/s
Iteration  26: 2781415.056 ops/s
Iteration  27: 2814458.954 ops/s
Iteration  28: 2720736.524 ops/s
Iteration  29: 2785020.404 ops/s
Iteration  30: 2854106.756 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_range":
  2779949.296 ±(99.9%) 38444.329 ops/s [Average]
  (min, avg, max) = (2640635.557, 2779949.296, 2877826.198), stdev = 57541.666
  CI (99.9%): [2741504.967, 2818393.624] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_range  thrpt   30  2779949.296 ± 38444.329  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_normalDelayErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_normalDelayErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16883.215 ops/s
# Warmup Iteration   2: 558578.518 ops/s
# Warmup Iteration   3: 1276656.745 ops/s
# Warmup Iteration   4: 1546713.071 ops/s
# Warmup Iteration   5: 1703068.867 ops/s
# Warmup Iteration   6: 1594607.081 ops/s
# Warmup Iteration   7: 1690835.401 ops/s
# Warmup Iteration   8: 1603052.813 ops/s
# Warmup Iteration   9: 1625127.913 ops/s
# Warmup Iteration  10: 1698744.930 ops/s
# Warmup Iteration  11: 1700947.903 ops/s
# Warmup Iteration  12: 1591418.211 ops/s
# Warmup Iteration  13: 1705509.597 ops/s
# Warmup Iteration  14: 1571351.830 ops/s
# Warmup Iteration  15: 1720942.134 ops/s
# Warmup Iteration  16: 1706922.081 ops/s
# Warmup Iteration  17: 1563759.609 ops/s
# Warmup Iteration  18: 1727930.935 ops/s
# Warmup Iteration  19: 1634450.421 ops/s
# Warmup Iteration  20: 1661801.054 ops/s
# Warmup Iteration  21: 1671182.347 ops/s
# Warmup Iteration  22: 1650676.775 ops/s
# Warmup Iteration  23: 1674158.912 ops/s
# Warmup Iteration  24: 1642400.822 ops/s
# Warmup Iteration  25: 1600201.678 ops/s
# Warmup Iteration  26: 1673885.734 ops/s
# Warmup Iteration  27: 1680231.197 ops/s
# Warmup Iteration  28: 1606284.518 ops/s
# Warmup Iteration  29: 1654415.663 ops/s
# Warmup Iteration  30: 1616527.653 ops/s
Iteration   1: 1692094.001 ops/s
Iteration   2: 1648877.498 ops/s
Iteration   3: 1659534.114 ops/s
Iteration   4: 1693463.032 ops/s
Iteration   5: 1581501.250 ops/s
Iteration   6: 1650457.316 ops/s
Iteration   7: 1674837.853 ops/s
Iteration   8: 1581515.065 ops/s
Iteration   9: 1656903.009 ops/s
Iteration  10: 1585007.963 ops/s
Iteration  11: 1650756.889 ops/s
Iteration  12: 1668315.486 ops/s
Iteration  13: 1629349.775 ops/s
Iteration  14: 1671082.322 ops/s
Iteration  15: 1595754.658 ops/s
Iteration  16: 1615300.330 ops/s
Iteration  17: 1723991.122 ops/s
Iteration  18: 1581571.692 ops/s
Iteration  19: 1636827.995 ops/s
Iteration  20: 1630723.843 ops/s
Iteration  21: 1648926.997 ops/s
Iteration  22: 1684275.525 ops/s
Iteration  23: 1636892.908 ops/s
Iteration  24: 1692032.060 ops/s
Iteration  25: 1661626.813 ops/s
Iteration  26: 1620282.975 ops/s
Iteration  27: 1713752.823 ops/s
Iteration  28: 1693025.402 ops/s
Iteration  29: 1646527.105 ops/s
Iteration  30: 1664370.799 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_normalDelayErrors":
  1649652.621 ±(99.9%) 26125.472 ops/s [Average]
  (min, avg, max) = (1581501.250, 1649652.621, 1723991.122), stdev = 39103.380
  CI (99.9%): [1623527.148, 1675778.093] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_normalDelayErrors  thrpt   30  1649652.621 ± 26125.472  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allEmptyConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allEmptyConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 920471.338 ops/s
# Warmup Iteration   2: 4462849.041 ops/s
# Warmup Iteration   3: 7122536.374 ops/s
# Warmup Iteration   4: 6670623.873 ops/s
# Warmup Iteration   5: 7038574.634 ops/s
# Warmup Iteration   6: 7062230.629 ops/s
# Warmup Iteration   7: 6926394.873 ops/s
# Warmup Iteration   8: 6996421.610 ops/s
# Warmup Iteration   9: 6856339.917 ops/s
# Warmup Iteration  10: 6833982.919 ops/s
# Warmup Iteration  11: 6739755.375 ops/s
# Warmup Iteration  12: 7053683.051 ops/s
# Warmup Iteration  13: 7081398.742 ops/s
# Warmup Iteration  14: 6889944.888 ops/s
# Warmup Iteration  15: 7114183.454 ops/s
# Warmup Iteration  16: 7252830.410 ops/s
# Warmup Iteration  17: 7063402.131 ops/s
# Warmup Iteration  18: 6572563.569 ops/s
# Warmup Iteration  19: 7102367.250 ops/s
# Warmup Iteration  20: 6978587.947 ops/s
# Warmup Iteration  21: 7252604.540 ops/s
# Warmup Iteration  22: 6796732.408 ops/s
# Warmup Iteration  23: 7045015.587 ops/s
# Warmup Iteration  24: 6860078.952 ops/s
# Warmup Iteration  25: 7191692.311 ops/s
# Warmup Iteration  26: 6901515.511 ops/s
# Warmup Iteration  27: 6740223.187 ops/s
# Warmup Iteration  28: 7142605.434 ops/s
# Warmup Iteration  29: 6827716.675 ops/s
# Warmup Iteration  30: 7058249.340 ops/s
Iteration   1: 6808475.279 ops/s
Iteration   2: 7221996.344 ops/s
Iteration   3: 6885247.563 ops/s
Iteration   4: 6979909.669 ops/s
Iteration   5: 6883465.609 ops/s
Iteration   6: 6974058.189 ops/s
Iteration   7: 7192373.230 ops/s
Iteration   8: 7083037.801 ops/s
Iteration   9: 6812101.476 ops/s
Iteration  10: 7237671.174 ops/s
Iteration  11: 6722291.622 ops/s
Iteration  12: 6946910.434 ops/s
Iteration  13: 6990951.708 ops/s
Iteration  14: 6878614.136 ops/s
Iteration  15: 7011399.098 ops/s
Iteration  16: 6799085.867 ops/s
Iteration  17: 6873186.000 ops/s
Iteration  18: 7053876.013 ops/s
Iteration  19: 6933262.343 ops/s
Iteration  20: 7062479.383 ops/s
Iteration  21: 6702166.360 ops/s
Iteration  22: 7001789.501 ops/s
Iteration  23: 7044616.083 ops/s
Iteration  24: 6644456.505 ops/s
Iteration  25: 7074217.305 ops/s
Iteration  26: 6884693.774 ops/s
Iteration  27: 7144020.713 ops/s
Iteration  28: 5246916.905 ops/s
Iteration  29: 6876378.027 ops/s
Iteration  30: 7039216.738 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allEmptyConditional":
  6900295.495 ±(99.9%) 230795.989 ops/s [Average]
  (min, avg, max) = (5246916.905, 6900295.495, 7237671.174), stdev = 345444.597
  CI (99.9%): [6669499.506, 7131091.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_allEmptyConditional  thrpt   30  6900295.495 ± 230795.989  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2125986.895 ops/s
# Warmup Iteration   2: 5159644.416 ops/s
# Warmup Iteration   3: 7183750.710 ops/s
# Warmup Iteration   4: 7181872.840 ops/s
# Warmup Iteration   5: 7223521.272 ops/s
# Warmup Iteration   6: 7329028.441 ops/s
# Warmup Iteration   7: 6923669.848 ops/s
# Warmup Iteration   8: 7468233.142 ops/s
# Warmup Iteration   9: 7427691.764 ops/s
# Warmup Iteration  10: 7117928.494 ops/s
# Warmup Iteration  11: 7176421.426 ops/s
# Warmup Iteration  12: 7309787.651 ops/s
# Warmup Iteration  13: 7143569.786 ops/s
# Warmup Iteration  14: 7136032.908 ops/s
# Warmup Iteration  15: 7005743.579 ops/s
# Warmup Iteration  16: 7431584.810 ops/s
# Warmup Iteration  17: 7350939.673 ops/s
# Warmup Iteration  18: 7057423.973 ops/s
# Warmup Iteration  19: 7419959.911 ops/s
# Warmup Iteration  20: 7139435.588 ops/s
# Warmup Iteration  21: 7176785.455 ops/s
# Warmup Iteration  22: 7488808.264 ops/s
# Warmup Iteration  23: 7030800.544 ops/s
# Warmup Iteration  24: 7080851.964 ops/s
# Warmup Iteration  25: 7118724.958 ops/s
# Warmup Iteration  26: 7253459.613 ops/s
# Warmup Iteration  27: 7134695.925 ops/s
# Warmup Iteration  28: 7394826.179 ops/s
# Warmup Iteration  29: 7228001.685 ops/s
# Warmup Iteration  30: 7199126.962 ops/s
Iteration   1: 7261281.861 ops/s
Iteration   2: 7217920.844 ops/s
Iteration   3: 7278429.692 ops/s
Iteration   4: 7372971.866 ops/s
Iteration   5: 6902295.758 ops/s
Iteration   6: 7403705.450 ops/s
Iteration   7: 6899996.233 ops/s
Iteration   8: 7402668.929 ops/s
Iteration   9: 7124551.318 ops/s
Iteration  10: 7018809.017 ops/s
Iteration  11: 7254673.902 ops/s
Iteration  12: 7054182.002 ops/s
Iteration  13: 7327636.140 ops/s
Iteration  14: 7419438.308 ops/s
Iteration  15: 7198006.957 ops/s
Iteration  16: 7178582.371 ops/s
Iteration  17: 7167465.862 ops/s
Iteration  18: 7292568.620 ops/s
Iteration  19: 7246535.295 ops/s
Iteration  20: 7158268.010 ops/s
Iteration  21: 7165755.054 ops/s
Iteration  22: 7170483.016 ops/s
Iteration  23: 7245384.711 ops/s
Iteration  24: 7312896.094 ops/s
Iteration  25: 7251181.417 ops/s
Iteration  26: 7070670.814 ops/s
Iteration  27: 7142373.099 ops/s
Iteration  28: 7133681.350 ops/s
Iteration  29: 7268270.761 ops/s
Iteration  30: 6976111.875 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allEmpty":
  7197226.554 ±(99.9%) 91256.344 ops/s [Average]
  (min, avg, max) = (6899996.233, 7197226.554, 7419438.308), stdev = 136588.211
  CI (99.9%): [7105970.210, 7288482.899] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_allEmpty  thrpt   30  7197226.554 ± 91256.344  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_requestWrongFusion$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_requestWrongFusion

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1320414.535 ops/s
# Warmup Iteration   2: 4147304.846 ops/s
# Warmup Iteration   3: 5231215.686 ops/s
# Warmup Iteration   4: 5465138.827 ops/s
# Warmup Iteration   5: 5849447.812 ops/s
# Warmup Iteration   6: 5756512.775 ops/s
# Warmup Iteration   7: 5475658.821 ops/s
# Warmup Iteration   8: 5650015.705 ops/s
# Warmup Iteration   9: 5762195.107 ops/s
# Warmup Iteration  10: 5682230.282 ops/s
# Warmup Iteration  11: 5498808.807 ops/s
# Warmup Iteration  12: 5718508.145 ops/s
# Warmup Iteration  13: 5487985.082 ops/s
# Warmup Iteration  14: 5673113.088 ops/s
# Warmup Iteration  15: 5706076.908 ops/s
# Warmup Iteration  16: 5578359.171 ops/s
# Warmup Iteration  17: 5666862.260 ops/s
# Warmup Iteration  18: 5495628.952 ops/s
# Warmup Iteration  19: 5597104.339 ops/s
# Warmup Iteration  20: 5502954.953 ops/s
# Warmup Iteration  21: 5458450.441 ops/s
# Warmup Iteration  22: 5619249.323 ops/s
# Warmup Iteration  23: 5637452.441 ops/s
# Warmup Iteration  24: 5558238.650 ops/s
# Warmup Iteration  25: 5619668.739 ops/s
# Warmup Iteration  26: 5528465.511 ops/s
# Warmup Iteration  27: 5718608.033 ops/s
# Warmup Iteration  28: 5502207.302 ops/s
# Warmup Iteration  29: 5853910.254 ops/s
# Warmup Iteration  30: 5439586.467 ops/s
Iteration   1: 5705169.252 ops/s
Iteration   2: 5760113.245 ops/s
Iteration   3: 5414185.760 ops/s
Iteration   4: 5602485.598 ops/s
Iteration   5: 5548203.109 ops/s
Iteration   6: 5527738.012 ops/s
Iteration   7: 5769353.493 ops/s
Iteration   8: 5550978.085 ops/s
Iteration   9: 5574791.923 ops/s
Iteration  10: 5567225.630 ops/s
Iteration  11: 5731754.194 ops/s
Iteration  12: 5400863.541 ops/s
Iteration  13: 5533581.185 ops/s
Iteration  14: 5679386.262 ops/s
Iteration  15: 5509240.155 ops/s
Iteration  16: 5590700.959 ops/s
Iteration  17: 5585144.527 ops/s
Iteration  18: 5457035.372 ops/s
Iteration  19: 5432267.899 ops/s
Iteration  20: 5816007.241 ops/s
Iteration  21: 5472471.732 ops/s
Iteration  22: 5610774.509 ops/s
Iteration  23: 4118301.575 ops/s
Iteration  24: 5496956.076 ops/s
Iteration  25: 5632222.432 ops/s
Iteration  26: 5373505.625 ops/s
Iteration  27: 5767941.373 ops/s
Iteration  28: 5603726.749 ops/s
Iteration  29: 5481661.921 ops/s
Iteration  30: 5816275.059 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_requestWrongFusion":
  5537668.750 ±(99.9%) 197363.135 ops/s [Average]
  (min, avg, max) = (4118301.575, 5537668.750, 5816275.059), stdev = 295403.872
  CI (99.9%): [5340305.614, 5735031.885] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
ObservableRangeTest._Benchmark.benchmark_requestWrongFusion  thrpt   30  5537668.750 ± 197363.135  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_rangeBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_rangeBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 186465.454 ops/s
# Warmup Iteration   2: 589366.969 ops/s
# Warmup Iteration   3: 1127730.846 ops/s
# Warmup Iteration   4: 1583919.010 ops/s
# Warmup Iteration   5: 1960215.419 ops/s
# Warmup Iteration   6: 1885710.005 ops/s
# Warmup Iteration   7: 1941290.998 ops/s
# Warmup Iteration   8: 1874902.968 ops/s
# Warmup Iteration   9: 1869210.610 ops/s
# Warmup Iteration  10: 1949391.826 ops/s
# Warmup Iteration  11: 1788728.247 ops/s
# Warmup Iteration  12: 1965696.811 ops/s
# Warmup Iteration  13: 1847299.014 ops/s
# Warmup Iteration  14: 1923091.030 ops/s
# Warmup Iteration  15: 1921703.678 ops/s
# Warmup Iteration  16: 1960795.219 ops/s
# Warmup Iteration  17: 1877935.054 ops/s
# Warmup Iteration  18: 1927796.411 ops/s
# Warmup Iteration  19: 1867538.549 ops/s
# Warmup Iteration  20: 1909114.477 ops/s
# Warmup Iteration  21: 1877042.077 ops/s
# Warmup Iteration  22: 1863152.235 ops/s
# Warmup Iteration  23: 1942492.629 ops/s
# Warmup Iteration  24: 1846822.791 ops/s
# Warmup Iteration  25: 1929384.128 ops/s
# Warmup Iteration  26: 1865138.136 ops/s
# Warmup Iteration  27: 1957730.499 ops/s
# Warmup Iteration  28: 1879095.459 ops/s
# Warmup Iteration  29: 1877635.700 ops/s
# Warmup Iteration  30: 1976197.481 ops/s
Iteration   1: 1894850.352 ops/s
Iteration   2: 1955937.311 ops/s
Iteration   3: 1895291.792 ops/s
Iteration   4: 1914579.669 ops/s
Iteration   5: 1930007.932 ops/s
Iteration   6: 1868947.150 ops/s
Iteration   7: 1962023.579 ops/s
Iteration   8: 1899116.935 ops/s
Iteration   9: 1935373.225 ops/s
Iteration  10: 1902858.285 ops/s
Iteration  11: 1911874.965 ops/s
Iteration  12: 1944188.960 ops/s
Iteration  13: 1861587.722 ops/s
Iteration  14: 1967268.429 ops/s
Iteration  15: 1887447.995 ops/s
Iteration  16: 1934931.733 ops/s
Iteration  17: 1926123.998 ops/s
Iteration  18: 1892674.133 ops/s
Iteration  19: 1980562.529 ops/s
Iteration  20: 1880216.600 ops/s
Iteration  21: 1956807.137 ops/s
Iteration  22: 1860053.824 ops/s
Iteration  23: 1937033.392 ops/s
Iteration  24: 1928705.574 ops/s
Iteration  25: 1847854.020 ops/s
Iteration  26: 1961835.118 ops/s
Iteration  27: 1862994.311 ops/s
Iteration  28: 1918484.558 ops/s
Iteration  29: 1888981.932 ops/s
Iteration  30: 1974804.968 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_rangeBackpressured":
  1916113.938 ±(99.9%) 25014.344 ops/s [Average]
  (min, avg, max) = (1847854.020, 1916113.938, 1980562.529), stdev = 37440.295
  CI (99.9%): [1891099.594, 1941128.281] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableBlockingStreamTest._Benchmark.benchmark_rangeBackpressured  thrpt   30  1916113.938 ± 25014.344  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_fusedReject$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_fusedReject

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 630302.270 ops/s
# Warmup Iteration   2: 3772547.180 ops/s
# Warmup Iteration   3: 5166228.391 ops/s
# Warmup Iteration   4: 5306622.555 ops/s
# Warmup Iteration   5: 5590759.575 ops/s
# Warmup Iteration   6: 5394592.094 ops/s
# Warmup Iteration   7: 5512125.560 ops/s
# Warmup Iteration   8: 5535854.653 ops/s
# Warmup Iteration   9: 5405578.592 ops/s
# Warmup Iteration  10: 5592773.001 ops/s
# Warmup Iteration  11: 5407637.067 ops/s
# Warmup Iteration  12: 5514179.177 ops/s
# Warmup Iteration  13: 5317347.895 ops/s
# Warmup Iteration  14: 5514454.316 ops/s
# Warmup Iteration  15: 5756724.816 ops/s
# Warmup Iteration  16: 5363961.772 ops/s
# Warmup Iteration  17: 5555525.622 ops/s
# Warmup Iteration  18: 5268600.203 ops/s
# Warmup Iteration  19: 5567995.449 ops/s
# Warmup Iteration  20: 5480128.571 ops/s
# Warmup Iteration  21: 5525004.501 ops/s
# Warmup Iteration  22: 5476218.925 ops/s
# Warmup Iteration  23: 5461961.757 ops/s
# Warmup Iteration  24: 5717851.608 ops/s
# Warmup Iteration  25: 5342553.026 ops/s
# Warmup Iteration  26: 5392776.051 ops/s
# Warmup Iteration  27: 5543991.421 ops/s
# Warmup Iteration  28: 5406352.689 ops/s
# Warmup Iteration  29: 5615222.165 ops/s
# Warmup Iteration  30: 5595137.686 ops/s
Iteration   1: 5245422.518 ops/s
Iteration   2: 5625009.307 ops/s
Iteration   3: 5269154.853 ops/s
Iteration   4: 5430940.919 ops/s
Iteration   5: 5610710.772 ops/s
Iteration   6: 5293832.645 ops/s
Iteration   7: 5630693.742 ops/s
Iteration   8: 5383706.093 ops/s
Iteration   9: 5456609.563 ops/s
Iteration  10: 5322514.037 ops/s
Iteration  11: 5556712.514 ops/s
Iteration  12: 5109588.944 ops/s
Iteration  13: 5586480.399 ops/s
Iteration  14: 5603137.835 ops/s
Iteration  15: 5534383.186 ops/s
Iteration  16: 5397592.053 ops/s
Iteration  17: 5260320.464 ops/s
Iteration  18: 4414089.870 ops/s
Iteration  19: 5379595.327 ops/s
Iteration  20: 5409113.007 ops/s
Iteration  21: 5618738.265 ops/s
Iteration  22: 5258357.840 ops/s
Iteration  23: 5674686.630 ops/s
Iteration  24: 5337964.943 ops/s
Iteration  25: 5507324.880 ops/s
Iteration  26: 5443457.337 ops/s
Iteration  27: 5452281.495 ops/s
Iteration  28: 5557028.378 ops/s
Iteration  29: 5538710.197 ops/s
Iteration  30: 5466637.184 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFilterTest._Benchmark.benchmark_fusedReject":
  5412493.173 ±(99.9%) 157568.159 ops/s [Average]
  (min, avg, max) = (4414089.870, 5412493.173, 5674686.630), stdev = 235840.620
  CI (99.9%): [5254925.015, 5570061.332] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
ObservableFilterTest._Benchmark.benchmark_fusedReject  thrpt   30  5412493.173 ± 157568.159  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_normalDelayErrorsTillTheEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_normalDelayErrorsTillTheEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 177510.615 ops/s
# Warmup Iteration   2: 855513.498 ops/s
# Warmup Iteration   3: 1724336.015 ops/s
# Warmup Iteration   4: 1758919.520 ops/s
# Warmup Iteration   5: 2013413.749 ops/s
# Warmup Iteration   6: 1981954.666 ops/s
# Warmup Iteration   7: 2015618.139 ops/s
# Warmup Iteration   8: 2096347.830 ops/s
# Warmup Iteration   9: 2020849.977 ops/s
# Warmup Iteration  10: 1986834.070 ops/s
# Warmup Iteration  11: 2057882.076 ops/s
# Warmup Iteration  12: 1978460.998 ops/s
# Warmup Iteration  13: 2078373.323 ops/s
# Warmup Iteration  14: 2054326.007 ops/s
# Warmup Iteration  15: 1937002.411 ops/s
# Warmup Iteration  16: 2100287.297 ops/s
# Warmup Iteration  17: 2013685.105 ops/s
# Warmup Iteration  18: 2016857.471 ops/s
# Warmup Iteration  19: 2046909.069 ops/s
# Warmup Iteration  20: 1965847.798 ops/s
# Warmup Iteration  21: 2082940.807 ops/s
# Warmup Iteration  22: 2053757.367 ops/s
# Warmup Iteration  23: 1953306.370 ops/s
# Warmup Iteration  24: 2027478.592 ops/s
# Warmup Iteration  25: 2090244.323 ops/s
# Warmup Iteration  26: 2003376.278 ops/s
# Warmup Iteration  27: 2086576.650 ops/s
# Warmup Iteration  28: 2006046.805 ops/s
# Warmup Iteration  29: 2021528.957 ops/s
# Warmup Iteration  30: 2112748.175 ops/s
Iteration   1: 2066042.223 ops/s
Iteration   2: 1971976.996 ops/s
Iteration   3: 2072890.015 ops/s
Iteration   4: 2060693.749 ops/s
Iteration   5: 1955443.357 ops/s
Iteration   6: 2114670.107 ops/s
Iteration   7: 2016619.929 ops/s
Iteration   8: 2032830.432 ops/s
Iteration   9: 2140694.228 ops/s
Iteration  10: 2014416.403 ops/s
Iteration  11: 2082320.066 ops/s
Iteration  12: 2068803.451 ops/s
Iteration  13: 2015913.863 ops/s
Iteration  14: 2069300.845 ops/s
Iteration  15: 2081943.997 ops/s
Iteration  16: 1976298.346 ops/s
Iteration  17: 2068607.434 ops/s
Iteration  18: 2067957.963 ops/s
Iteration  19: 2016480.042 ops/s
Iteration  20: 2094940.723 ops/s
Iteration  21: 2023182.394 ops/s
Iteration  22: 2077805.054 ops/s
Iteration  23: 2016886.941 ops/s
Iteration  24: 2065328.115 ops/s
Iteration  25: 1990604.939 ops/s
Iteration  26: 2006972.131 ops/s
Iteration  27: 2097261.271 ops/s
Iteration  28: 1970884.835 ops/s
Iteration  29: 2003041.991 ops/s
Iteration  30: 2010183.476 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_normalDelayErrorsTillTheEnd":
  2041699.844 ±(99.9%) 31046.952 ops/s [Average]
  (min, avg, max) = (1955443.357, 2041699.844, 2140694.228), stdev = 46469.619
  CI (99.9%): [2010652.892, 2072746.796] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_normalDelayErrorsTillTheEnd  thrpt   30  2041699.844 ± 31046.952  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_disposeOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_disposeOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 421087.703 ops/s
# Warmup Iteration   2: 2086481.173 ops/s
# Warmup Iteration   3: 2311982.064 ops/s
# Warmup Iteration   4: 2915312.814 ops/s
# Warmup Iteration   5: 2785604.269 ops/s
# Warmup Iteration   6: 2915712.808 ops/s
# Warmup Iteration   7: 2910822.074 ops/s
# Warmup Iteration   8: 2788139.640 ops/s
# Warmup Iteration   9: 2781495.290 ops/s
# Warmup Iteration  10: 2897975.716 ops/s
# Warmup Iteration  11: 2799452.963 ops/s
# Warmup Iteration  12: 2929397.525 ops/s
# Warmup Iteration  13: 2736818.046 ops/s
# Warmup Iteration  14: 3004961.577 ops/s
# Warmup Iteration  15: 2754591.521 ops/s
# Warmup Iteration  16: 2831365.673 ops/s
# Warmup Iteration  17: 2763885.100 ops/s
# Warmup Iteration  18: 2832199.364 ops/s
# Warmup Iteration  19: 2804982.771 ops/s
# Warmup Iteration  20: 2763374.982 ops/s
# Warmup Iteration  21: 2835688.289 ops/s
# Warmup Iteration  22: 2830245.957 ops/s
# Warmup Iteration  23: 2843576.458 ops/s
# Warmup Iteration  24: 2864122.877 ops/s
# Warmup Iteration  25: 2861876.054 ops/s
# Warmup Iteration  26: 2828734.830 ops/s
# Warmup Iteration  27: 2873382.363 ops/s
# Warmup Iteration  28: 2824033.983 ops/s
# Warmup Iteration  29: 2752564.410 ops/s
# Warmup Iteration  30: 2952709.309 ops/s
Iteration   1: 2785439.928 ops/s
Iteration   2: 2862776.965 ops/s
Iteration   3: 2793438.759 ops/s
Iteration   4: 2833644.891 ops/s
Iteration   5: 2933918.496 ops/s
Iteration   6: 2708957.575 ops/s
Iteration   7: 2896789.343 ops/s
Iteration   8: 2752167.485 ops/s
Iteration   9: 2830505.195 ops/s
Iteration  10: 2847756.152 ops/s
Iteration  11: 2789260.424 ops/s
Iteration  12: 2292388.200 ops/s
Iteration  13: 2851955.483 ops/s
Iteration  14: 2826464.408 ops/s
Iteration  15: 2873400.152 ops/s
Iteration  16: 2825892.762 ops/s
Iteration  17: 2756681.068 ops/s
Iteration  18: 2904829.897 ops/s
Iteration  19: 2830179.904 ops/s
Iteration  20: 2905084.765 ops/s
Iteration  21: 2809014.273 ops/s
Iteration  22: 2889285.872 ops/s
Iteration  23: 2814601.756 ops/s
Iteration  24: 2919049.352 ops/s
Iteration  25: 2809964.252 ops/s
Iteration  26: 2899513.240 ops/s
Iteration  27: 2945355.338 ops/s
Iteration  28: 2820082.152 ops/s
Iteration  29: 2878463.740 ops/s
Iteration  30: 2849603.966 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_disposeOnArrival":
  2824548.860 ±(99.9%) 76779.479 ops/s [Average]
  (min, avg, max) = (2292388.200, 2824548.860, 2945355.338), stdev = 114919.919
  CI (99.9%): [2747769.380, 2901328.339] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableCacheTest._Benchmark.benchmark_disposeOnArrival  thrpt   30  2824548.860 ± 76779.479  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_basicToObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_basicToObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 213523.814 ops/s
# Warmup Iteration   2: 1951597.810 ops/s
# Warmup Iteration   3: 2998006.741 ops/s
# Warmup Iteration   4: 3740977.285 ops/s
# Warmup Iteration   5: 3632636.158 ops/s
# Warmup Iteration   6: 3523706.515 ops/s
# Warmup Iteration   7: 3669356.522 ops/s
# Warmup Iteration   8: 3671618.671 ops/s
# Warmup Iteration   9: 3708539.480 ops/s
# Warmup Iteration  10: 3675644.462 ops/s
# Warmup Iteration  11: 3568938.437 ops/s
# Warmup Iteration  12: 3773210.363 ops/s
# Warmup Iteration  13: 3690254.705 ops/s
# Warmup Iteration  14: 3687498.695 ops/s
# Warmup Iteration  15: 3608601.656 ops/s
# Warmup Iteration  16: 3796963.982 ops/s
# Warmup Iteration  17: 3677157.872 ops/s
# Warmup Iteration  18: 3684299.007 ops/s
# Warmup Iteration  19: 3617294.549 ops/s
# Warmup Iteration  20: 3801702.144 ops/s
# Warmup Iteration  21: 3604137.961 ops/s
# Warmup Iteration  22: 3676619.870 ops/s
# Warmup Iteration  23: 3619363.244 ops/s
# Warmup Iteration  24: 3657915.110 ops/s
# Warmup Iteration  25: 3637062.258 ops/s
# Warmup Iteration  26: 3642580.562 ops/s
# Warmup Iteration  27: 3784752.365 ops/s
# Warmup Iteration  28: 3485738.388 ops/s
# Warmup Iteration  29: 3836017.622 ops/s
# Warmup Iteration  30: 3713947.596 ops/s
Iteration   1: 3547580.409 ops/s
Iteration   2: 3751386.515 ops/s
Iteration   3: 3720000.831 ops/s
Iteration   4: 3706184.645 ops/s
Iteration   5: 3567338.853 ops/s
Iteration   6: 3811346.678 ops/s
Iteration   7: 3814487.445 ops/s
Iteration   8: 3490731.874 ops/s
Iteration   9: 3809804.753 ops/s
Iteration  10: 3679607.447 ops/s
Iteration  11: 3797404.424 ops/s
Iteration  12: 3578358.340 ops/s
Iteration  13: 3663277.891 ops/s
Iteration  14: 3590471.698 ops/s
Iteration  15: 3523671.558 ops/s
Iteration  16: 3752844.709 ops/s
Iteration  17: 3535643.711 ops/s
Iteration  18: 3690436.263 ops/s
Iteration  19: 3832222.640 ops/s
Iteration  20: 3598806.752 ops/s
Iteration  21: 3725855.805 ops/s
Iteration  22: 3695703.072 ops/s
Iteration  23: 3610426.076 ops/s
Iteration  24: 3758754.719 ops/s
Iteration  25: 3662554.102 ops/s
Iteration  26: 3667303.969 ops/s
Iteration  27: 3767638.027 ops/s
Iteration  28: 3544880.166 ops/s
Iteration  29: 3672357.413 ops/s
Iteration  30: 3800632.463 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_basicToObservable":
  3678923.775 ±(99.9%) 67139.666 ops/s [Average]
  (min, avg, max) = (3490731.874, 3678923.775, 3832222.640), stdev = 100491.499
  CI (99.9%): [3611784.109, 3746063.441] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_basicToObservable  thrpt   30  3678923.775 ± 67139.666  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustRange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustRange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 603443.800 ops/s
# Warmup Iteration   2: 2454069.680 ops/s
# Warmup Iteration   3: 2735461.564 ops/s
# Warmup Iteration   4: 3108649.678 ops/s
# Warmup Iteration   5: 3274612.814 ops/s
# Warmup Iteration   6: 3262956.524 ops/s
# Warmup Iteration   7: 3119149.264 ops/s
# Warmup Iteration   8: 3271545.220 ops/s
# Warmup Iteration   9: 3146148.705 ops/s
# Warmup Iteration  10: 3154763.163 ops/s
# Warmup Iteration  11: 3153335.304 ops/s
# Warmup Iteration  12: 3266083.560 ops/s
# Warmup Iteration  13: 3263568.321 ops/s
# Warmup Iteration  14: 3188803.838 ops/s
# Warmup Iteration  15: 3219635.591 ops/s
# Warmup Iteration  16: 3180948.655 ops/s
# Warmup Iteration  17: 3169359.200 ops/s
# Warmup Iteration  18: 3263106.008 ops/s
# Warmup Iteration  19: 3097101.785 ops/s
# Warmup Iteration  20: 3313893.517 ops/s
# Warmup Iteration  21: 3258292.046 ops/s
# Warmup Iteration  22: 3119609.468 ops/s
# Warmup Iteration  23: 3145489.343 ops/s
# Warmup Iteration  24: 3109909.426 ops/s
# Warmup Iteration  25: 3163661.637 ops/s
# Warmup Iteration  26: 3240598.137 ops/s
# Warmup Iteration  27: 3145118.558 ops/s
# Warmup Iteration  28: 3287508.673 ops/s
# Warmup Iteration  29: 3138583.794 ops/s
# Warmup Iteration  30: 3243537.611 ops/s
Iteration   1: 3247096.459 ops/s
Iteration   2: 3162513.271 ops/s
Iteration   3: 3254357.437 ops/s
Iteration   4: 3154770.973 ops/s
Iteration   5: 3160018.824 ops/s
Iteration   6: 2676031.961 ops/s
Iteration   7: 2967784.881 ops/s
Iteration   8: 3201776.841 ops/s
Iteration   9: 3289377.468 ops/s
Iteration  10: 3167618.554 ops/s
Iteration  11: 3182319.333 ops/s
Iteration  12: 3333240.254 ops/s
Iteration  13: 3301311.903 ops/s
Iteration  14: 3186495.417 ops/s
Iteration  15: 3132031.595 ops/s
Iteration  16: 3142144.232 ops/s
Iteration  17: 3249438.573 ops/s
Iteration  18: 3190458.934 ops/s
Iteration  19: 3192088.591 ops/s
Iteration  20: 3116381.379 ops/s
Iteration  21: 3335333.241 ops/s
Iteration  22: 3159068.220 ops/s
Iteration  23: 3143419.685 ops/s
Iteration  24: 3084192.363 ops/s
Iteration  25: 3196496.996 ops/s
Iteration  26: 3186441.395 ops/s
Iteration  27: 3202001.998 ops/s
Iteration  28: 3289834.047 ops/s
Iteration  29: 3305025.040 ops/s
Iteration  30: 3074489.356 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustRange":
  3176118.641 ±(99.9%) 83072.418 ops/s [Average]
  (min, avg, max) = (2676031.961, 3176118.641, 3335333.241), stdev = 124338.894
  CI (99.9%): [3093046.223, 3259191.059] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustRange  thrpt   30  3176118.641 ± 83072.418  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 374283.436 ops/s
# Warmup Iteration   2: 1789488.072 ops/s
# Warmup Iteration   3: 2450997.732 ops/s
# Warmup Iteration   4: 2557821.190 ops/s
# Warmup Iteration   5: 2461121.797 ops/s
# Warmup Iteration   6: 2244708.535 ops/s
# Warmup Iteration   7: 2655562.613 ops/s
# Warmup Iteration   8: 2462729.877 ops/s
# Warmup Iteration   9: 2609489.543 ops/s
# Warmup Iteration  10: 2495477.981 ops/s
# Warmup Iteration  11: 2503700.297 ops/s
# Warmup Iteration  12: 2579095.151 ops/s
# Warmup Iteration  13: 2505058.849 ops/s
# Warmup Iteration  14: 2578354.543 ops/s
# Warmup Iteration  15: 2486192.735 ops/s
# Warmup Iteration  16: 2637570.570 ops/s
# Warmup Iteration  17: 2554426.360 ops/s
# Warmup Iteration  18: 2678431.234 ops/s
# Warmup Iteration  19: 2482635.456 ops/s
# Warmup Iteration  20: 2542079.680 ops/s
# Warmup Iteration  21: 2516471.261 ops/s
# Warmup Iteration  22: 2603110.647 ops/s
# Warmup Iteration  23: 2545284.522 ops/s
# Warmup Iteration  24: 2524729.961 ops/s
# Warmup Iteration  25: 2516630.870 ops/s
# Warmup Iteration  26: 2487874.013 ops/s
# Warmup Iteration  27: 2519882.455 ops/s
# Warmup Iteration  28: 2469182.926 ops/s
# Warmup Iteration  29: 2589002.964 ops/s
# Warmup Iteration  30: 2514096.905 ops/s
Iteration   1: 2552200.327 ops/s
Iteration   2: 2545512.333 ops/s
Iteration   3: 2544016.080 ops/s
Iteration   4: 2501795.591 ops/s
Iteration   5: 2520664.976 ops/s
Iteration   6: 2551777.498 ops/s
Iteration   7: 2505988.664 ops/s
Iteration   8: 2637425.499 ops/s
Iteration   9: 2478202.583 ops/s
Iteration  10: 2534950.781 ops/s
Iteration  11: 2559260.703 ops/s
Iteration  12: 2500941.493 ops/s
Iteration  13: 2616589.948 ops/s
Iteration  14: 2464982.429 ops/s
Iteration  15: 2481658.997 ops/s
Iteration  16: 2537433.521 ops/s
Iteration  17: 2524017.521 ops/s
Iteration  18: 2594262.543 ops/s
Iteration  19: 2499208.229 ops/s
Iteration  20: 2593762.693 ops/s
Iteration  21: 2491946.103 ops/s
Iteration  22: 2516086.896 ops/s
Iteration  23: 2581966.689 ops/s
Iteration  24: 2550333.845 ops/s
Iteration  25: 2620864.305 ops/s
Iteration  26: 2529716.429 ops/s
Iteration  27: 2624494.401 ops/s
Iteration  28: 2543570.644 ops/s
Iteration  29: 2479776.378 ops/s
Iteration  30: 2652765.626 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_normal":
  2544539.124 ±(99.9%) 34086.591 ops/s [Average]
  (min, avg, max) = (2464982.429, 2544539.124, 2652765.626), stdev = 51019.209
  CI (99.9%): [2510452.533, 2578625.715] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableMergeWithCompletableTest._Benchmark.benchmark_normal  thrpt   30  2544539.124 ± 34086.591  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFusedBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFusedBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1136821.100 ops/s
# Warmup Iteration   2: 3485962.572 ops/s
# Warmup Iteration   3: 4486833.160 ops/s
# Warmup Iteration   4: 4818194.367 ops/s
# Warmup Iteration   5: 4602799.811 ops/s
# Warmup Iteration   6: 4800527.927 ops/s
# Warmup Iteration   7: 4699646.425 ops/s
# Warmup Iteration   8: 4845174.162 ops/s
# Warmup Iteration   9: 4643777.696 ops/s
# Warmup Iteration  10: 4823439.012 ops/s
# Warmup Iteration  11: 5004615.009 ops/s
# Warmup Iteration  12: 4721004.492 ops/s
# Warmup Iteration  13: 4804069.083 ops/s
# Warmup Iteration  14: 4630336.211 ops/s
# Warmup Iteration  15: 4720088.821 ops/s
# Warmup Iteration  16: 4797152.016 ops/s
# Warmup Iteration  17: 4684972.096 ops/s
# Warmup Iteration  18: 4955028.643 ops/s
# Warmup Iteration  19: 4650637.579 ops/s
# Warmup Iteration  20: 4880102.224 ops/s
# Warmup Iteration  21: 4778368.909 ops/s
# Warmup Iteration  22: 4836231.137 ops/s
# Warmup Iteration  23: 4678790.654 ops/s
# Warmup Iteration  24: 4744516.042 ops/s
# Warmup Iteration  25: 4973229.158 ops/s
# Warmup Iteration  26: 4899274.438 ops/s
# Warmup Iteration  27: 4753547.151 ops/s
# Warmup Iteration  28: 4647431.402 ops/s
# Warmup Iteration  29: 4943903.382 ops/s
# Warmup Iteration  30: 4655628.339 ops/s
Iteration   1: 3249377.286 ops/s
Iteration   2: 4686704.967 ops/s
Iteration   3: 4868221.631 ops/s
Iteration   4: 4538108.884 ops/s
Iteration   5: 4875420.598 ops/s
Iteration   6: 4903057.531 ops/s
Iteration   7: 4736234.163 ops/s
Iteration   8: 4852932.429 ops/s
Iteration   9: 4850908.474 ops/s
Iteration  10: 4825374.120 ops/s
Iteration  11: 4930957.836 ops/s
Iteration  12: 4659964.120 ops/s
Iteration  13: 4776673.785 ops/s
Iteration  14: 4780485.829 ops/s
Iteration  15: 4795822.062 ops/s
Iteration  16: 4717912.251 ops/s
Iteration  17: 4931593.196 ops/s
Iteration  18: 4671900.140 ops/s
Iteration  19: 4998407.015 ops/s
Iteration  20: 4696166.640 ops/s
Iteration  21: 4847246.316 ops/s
Iteration  22: 4727129.679 ops/s
Iteration  23: 4839524.185 ops/s
Iteration  24: 4938632.853 ops/s
Iteration  25: 4596432.592 ops/s
Iteration  26: 4878476.184 ops/s
Iteration  27: 4761249.699 ops/s
Iteration  28: 4953357.237 ops/s
Iteration  29: 4628975.370 ops/s
Iteration  30: 4648470.425 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFusedBoundary":
  4738857.250 ±(99.9%) 203339.957 ops/s [Average]
  (min, avg, max) = (3249377.286, 4738857.250, 4998407.015), stdev = 304349.698
  CI (99.9%): [4535517.293, 4942197.207] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_syncFusedBoundary  thrpt   30  4738857.250 ± 203339.957  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_range$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_range

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100015.207 ops/s
# Warmup Iteration   2: 349329.077 ops/s
# Warmup Iteration   3: 601603.772 ops/s
# Warmup Iteration   4: 586571.302 ops/s
# Warmup Iteration   5: 616218.429 ops/s
# Warmup Iteration   6: 612737.979 ops/s
# Warmup Iteration   7: 589456.970 ops/s
# Warmup Iteration   8: 608332.885 ops/s
# Warmup Iteration   9: 590532.668 ops/s
# Warmup Iteration  10: 622182.136 ops/s
# Warmup Iteration  11: 530108.642 ops/s
# Warmup Iteration  12: 602383.657 ops/s
# Warmup Iteration  13: 607035.364 ops/s
# Warmup Iteration  14: 578219.438 ops/s
# Warmup Iteration  15: 619997.674 ops/s
# Warmup Iteration  16: 602277.137 ops/s
# Warmup Iteration  17: 603287.518 ops/s
# Warmup Iteration  18: 619795.878 ops/s
# Warmup Iteration  19: 590313.099 ops/s
# Warmup Iteration  20: 619497.157 ops/s
# Warmup Iteration  21: 598999.317 ops/s
# Warmup Iteration  22: 597753.760 ops/s
# Warmup Iteration  23: 630647.928 ops/s
# Warmup Iteration  24: 613176.514 ops/s
# Warmup Iteration  25: 598668.653 ops/s
# Warmup Iteration  26: 613358.681 ops/s
# Warmup Iteration  27: 585678.448 ops/s
# Warmup Iteration  28: 622161.676 ops/s
# Warmup Iteration  29: 603857.888 ops/s
# Warmup Iteration  30: 598578.489 ops/s
Iteration   1: 622424.130 ops/s
Iteration   2: 595533.698 ops/s
Iteration   3: 617925.515 ops/s
Iteration   4: 582268.565 ops/s
Iteration   5: 603996.586 ops/s
Iteration   6: 600068.151 ops/s
Iteration   7: 598282.598 ops/s
Iteration   8: 599149.276 ops/s
Iteration   9: 612491.789 ops/s
Iteration  10: 612639.083 ops/s
Iteration  11: 602400.547 ops/s
Iteration  12: 607522.084 ops/s
Iteration  13: 601382.892 ops/s
Iteration  14: 603494.241 ops/s
Iteration  15: 604114.367 ops/s
Iteration  16: 588965.980 ops/s
Iteration  17: 599940.177 ops/s
Iteration  18: 625287.357 ops/s
Iteration  19: 618382.062 ops/s
Iteration  20: 608574.484 ops/s
Iteration  21: 597832.434 ops/s
Iteration  22: 612238.974 ops/s
Iteration  23: 604271.640 ops/s
Iteration  24: 590624.504 ops/s
Iteration  25: 607144.572 ops/s
Iteration  26: 592229.496 ops/s
Iteration  27: 606508.850 ops/s
Iteration  28: 610162.822 ops/s
Iteration  29: 598441.836 ops/s
Iteration  30: 613219.662 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_range":
  604583.946 ±(99.9%) 6593.587 ops/s [Average]
  (min, avg, max) = (582268.565, 604583.946, 625287.357), stdev = 9868.971
  CI (99.9%): [597990.359, 611177.533] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_range  thrpt   30  604583.946 ± 6593.587  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allPresent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allPresent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 669212.082 ops/s
# Warmup Iteration   2: 3386125.263 ops/s
# Warmup Iteration   3: 4171076.085 ops/s
# Warmup Iteration   4: 4824483.858 ops/s
# Warmup Iteration   5: 4661905.640 ops/s
# Warmup Iteration   6: 4613203.076 ops/s
# Warmup Iteration   7: 4955696.654 ops/s
# Warmup Iteration   8: 4536895.724 ops/s
# Warmup Iteration   9: 4848560.531 ops/s
# Warmup Iteration  10: 4742648.711 ops/s
# Warmup Iteration  11: 4571085.133 ops/s
# Warmup Iteration  12: 4724798.187 ops/s
# Warmup Iteration  13: 4685860.356 ops/s
# Warmup Iteration  14: 4739616.853 ops/s
# Warmup Iteration  15: 4846105.292 ops/s
# Warmup Iteration  16: 4622232.898 ops/s
# Warmup Iteration  17: 4873793.009 ops/s
# Warmup Iteration  18: 4707852.471 ops/s
# Warmup Iteration  19: 4509571.687 ops/s
# Warmup Iteration  20: 4760938.198 ops/s
# Warmup Iteration  21: 4657486.365 ops/s
# Warmup Iteration  22: 4523003.476 ops/s
# Warmup Iteration  23: 4817427.401 ops/s
# Warmup Iteration  24: 4554557.617 ops/s
# Warmup Iteration  25: 4008726.236 ops/s
# Warmup Iteration  26: 4473058.718 ops/s
# Warmup Iteration  27: 4689999.085 ops/s
# Warmup Iteration  28: 4615398.233 ops/s
# Warmup Iteration  29: 4716254.510 ops/s
# Warmup Iteration  30: 4617457.230 ops/s
Iteration   1: 4807452.811 ops/s
Iteration   2: 4567764.525 ops/s
Iteration   3: 4880841.189 ops/s
Iteration   4: 4604906.817 ops/s
Iteration   5: 4670223.430 ops/s
Iteration   6: 4811088.353 ops/s
Iteration   7: 4702886.606 ops/s
Iteration   8: 4665450.999 ops/s
Iteration   9: 4719536.793 ops/s
Iteration  10: 4547355.074 ops/s
Iteration  11: 4776603.988 ops/s
Iteration  12: 4652105.485 ops/s
Iteration  13: 4689439.498 ops/s
Iteration  14: 4939391.147 ops/s
Iteration  15: 4552627.427 ops/s
Iteration  16: 4725404.781 ops/s
Iteration  17: 4727677.839 ops/s
Iteration  18: 4740667.940 ops/s
Iteration  19: 4780538.580 ops/s
Iteration  20: 4602255.785 ops/s
Iteration  21: 4688396.450 ops/s
Iteration  22: 4918987.899 ops/s
Iteration  23: 4690109.395 ops/s
Iteration  24: 4840916.590 ops/s
Iteration  25: 4611198.353 ops/s
Iteration  26: 4650705.748 ops/s
Iteration  27: 4863831.687 ops/s
Iteration  28: 4508881.530 ops/s
Iteration  29: 4791743.239 ops/s
Iteration  30: 4827815.665 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allPresent":
  4718560.187 ±(99.9%) 75613.157 ops/s [Average]
  (min, avg, max) = (4508881.530, 4718560.187, 4939391.147), stdev = 113174.222
  CI (99.9%): [4642947.030, 4794173.345] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_allPresent  thrpt   30  4718560.187 ± 75613.157  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 774169.876 ops/s
# Warmup Iteration   2: 2989742.467 ops/s
# Warmup Iteration   3: 3939368.663 ops/s
# Warmup Iteration   4: 4318553.860 ops/s
# Warmup Iteration   5: 4119545.188 ops/s
# Warmup Iteration   6: 4366458.708 ops/s
# Warmup Iteration   7: 4126478.140 ops/s
# Warmup Iteration   8: 4283511.938 ops/s
# Warmup Iteration   9: 4165396.733 ops/s
# Warmup Iteration  10: 4191585.608 ops/s
# Warmup Iteration  11: 4239059.085 ops/s
# Warmup Iteration  12: 4141328.553 ops/s
# Warmup Iteration  13: 4283620.380 ops/s
# Warmup Iteration  14: 4125069.120 ops/s
# Warmup Iteration  15: 4327047.282 ops/s
# Warmup Iteration  16: 4361936.727 ops/s
# Warmup Iteration  17: 4094310.938 ops/s
# Warmup Iteration  18: 4204931.338 ops/s
# Warmup Iteration  19: 4107066.648 ops/s
# Warmup Iteration  20: 4299356.767 ops/s
# Warmup Iteration  21: 4114088.739 ops/s
# Warmup Iteration  22: 4164213.662 ops/s
# Warmup Iteration  23: 4246282.038 ops/s
# Warmup Iteration  24: 4291986.288 ops/s
# Warmup Iteration  25: 4216609.224 ops/s
# Warmup Iteration  26: 4295099.414 ops/s
# Warmup Iteration  27: 4042992.376 ops/s
# Warmup Iteration  28: 4361183.391 ops/s
# Warmup Iteration  29: 4139253.066 ops/s
# Warmup Iteration  30: 4208736.455 ops/s
Iteration   1: 4344864.775 ops/s
Iteration   2: 4408675.792 ops/s
Iteration   3: 4122058.383 ops/s
Iteration   4: 4239303.533 ops/s
Iteration   5: 3990686.665 ops/s
Iteration   6: 4356752.788 ops/s
Iteration   7: 4266139.858 ops/s
Iteration   8: 3988751.826 ops/s
Iteration   9: 4215149.566 ops/s
Iteration  10: 4294538.163 ops/s
Iteration  11: 4088705.048 ops/s
Iteration  12: 4257089.339 ops/s
Iteration  13: 4203432.698 ops/s
Iteration  14: 4139433.766 ops/s
Iteration  15: 4387261.914 ops/s
Iteration  16: 4195751.891 ops/s
Iteration  17: 4219754.349 ops/s
Iteration  18: 4221861.052 ops/s
Iteration  19: 4269507.924 ops/s
Iteration  20: 4333532.934 ops/s
Iteration  21: 4117237.776 ops/s
Iteration  22: 4319247.321 ops/s
Iteration  23: 4181349.872 ops/s
Iteration  24: 4278697.272 ops/s
Iteration  25: 4120653.142 ops/s
Iteration  26: 4251937.383 ops/s
Iteration  27: 4292211.929 ops/s
Iteration  28: 4238317.075 ops/s
Iteration  29: 4361904.618 ops/s
Iteration  30: 4162028.586 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mixed":
  4228894.575 ±(99.9%) 70818.066 ops/s [Average]
  (min, avg, max) = (3988751.826, 4228894.575, 4408675.792), stdev = 105997.156
  CI (99.9%): [4158076.508, 4299712.641] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_mixed  thrpt   30  4228894.575 ± 70818.066  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_takeLastTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_takeLastTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 812357.740 ops/s
# Warmup Iteration   2: 2842659.217 ops/s
# Warmup Iteration   3: 3248523.987 ops/s
# Warmup Iteration   4: 3748574.476 ops/s
# Warmup Iteration   5: 3806333.004 ops/s
# Warmup Iteration   6: 3715988.709 ops/s
# Warmup Iteration   7: 3730627.387 ops/s
# Warmup Iteration   8: 3636943.251 ops/s
# Warmup Iteration   9: 3829519.512 ops/s
# Warmup Iteration  10: 3618309.508 ops/s
# Warmup Iteration  11: 3583702.194 ops/s
# Warmup Iteration  12: 3850402.593 ops/s
# Warmup Iteration  13: 3576403.934 ops/s
# Warmup Iteration  14: 3774663.174 ops/s
# Warmup Iteration  15: 3678866.895 ops/s
# Warmup Iteration  16: 3780956.405 ops/s
# Warmup Iteration  17: 3774113.790 ops/s
# Warmup Iteration  18: 3707846.351 ops/s
# Warmup Iteration  19: 3824332.601 ops/s
# Warmup Iteration  20: 2782404.776 ops/s
# Warmup Iteration  21: 3601189.707 ops/s
# Warmup Iteration  22: 3667063.951 ops/s
# Warmup Iteration  23: 3836913.932 ops/s
# Warmup Iteration  24: 3713906.270 ops/s
# Warmup Iteration  25: 3731905.195 ops/s
# Warmup Iteration  26: 3693575.635 ops/s
# Warmup Iteration  27: 3723764.349 ops/s
# Warmup Iteration  28: 3684013.381 ops/s
# Warmup Iteration  29: 3807796.155 ops/s
# Warmup Iteration  30: 3628137.677 ops/s
Iteration   1: 3802171.346 ops/s
Iteration   2: 3675709.907 ops/s
Iteration   3: 3886357.308 ops/s
Iteration   4: 3628159.507 ops/s
Iteration   5: 3628202.920 ops/s
Iteration   6: 3898443.229 ops/s
Iteration   7: 3709628.345 ops/s
Iteration   8: 3706035.420 ops/s
Iteration   9: 3998747.845 ops/s
Iteration  10: 3777785.806 ops/s
Iteration  11: 3734482.517 ops/s
Iteration  12: 3844582.734 ops/s
Iteration  13: 3717085.454 ops/s
Iteration  14: 3863727.435 ops/s
Iteration  15: 3810537.288 ops/s
Iteration  16: 3639667.063 ops/s
Iteration  17: 3761819.860 ops/s
Iteration  18: 3760729.712 ops/s
Iteration  19: 3856519.350 ops/s
Iteration  20: 3735225.330 ops/s
Iteration  21: 3740562.430 ops/s
Iteration  22: 3752803.007 ops/s
Iteration  23: 3711303.960 ops/s
Iteration  24: 3786942.195 ops/s
Iteration  25: 3732030.082 ops/s
Iteration  26: 3897844.699 ops/s
Iteration  27: 3870733.825 ops/s
Iteration  28: 3700033.531 ops/s
Iteration  29: 3854056.604 ops/s
Iteration  30: 3634965.568 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_takeLastTake":
  3770563.143 ±(99.9%) 61934.614 ops/s [Average]
  (min, avg, max) = (3628159.507, 3770563.143, 3998747.845), stdev = 92700.822
  CI (99.9%): [3708628.528, 3832497.757] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservableTakeLastTest._Benchmark.benchmark_takeLastTake  thrpt   30  3770563.143 ± 61934.614  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78601.149 ops/s
# Warmup Iteration   2: 375314.550 ops/s
# Warmup Iteration   3: 489115.110 ops/s
# Warmup Iteration   4: 616588.420 ops/s
# Warmup Iteration   5: 580536.987 ops/s
# Warmup Iteration   6: 589853.000 ops/s
# Warmup Iteration   7: 620663.191 ops/s
# Warmup Iteration   8: 575510.949 ops/s
# Warmup Iteration   9: 609206.664 ops/s
# Warmup Iteration  10: 613738.217 ops/s
# Warmup Iteration  11: 597547.167 ops/s
# Warmup Iteration  12: 582524.738 ops/s
# Warmup Iteration  13: 619411.402 ops/s
# Warmup Iteration  14: 603788.171 ops/s
# Warmup Iteration  15: 580640.144 ops/s
# Warmup Iteration  16: 628277.553 ops/s
# Warmup Iteration  17: 590286.448 ops/s
# Warmup Iteration  18: 620635.421 ops/s
# Warmup Iteration  19: 586963.535 ops/s
# Warmup Iteration  20: 621356.637 ops/s
# Warmup Iteration  21: 607790.683 ops/s
# Warmup Iteration  22: 581650.117 ops/s
# Warmup Iteration  23: 611922.538 ops/s
# Warmup Iteration  24: 576806.233 ops/s
# Warmup Iteration  25: 596357.871 ops/s
# Warmup Iteration  26: 604309.338 ops/s
# Warmup Iteration  27: 577483.670 ops/s
# Warmup Iteration  28: 588321.854 ops/s
# Warmup Iteration  29: 607140.023 ops/s
# Warmup Iteration  30: 583027.405 ops/s
Iteration   1: 605087.336 ops/s
Iteration   2: 601377.390 ops/s
Iteration   3: 581564.242 ops/s
Iteration   4: 623595.899 ops/s
Iteration   5: 614459.281 ops/s
Iteration   6: 594350.137 ops/s
Iteration   7: 618925.833 ops/s
Iteration   8: 605311.569 ops/s
Iteration   9: 581390.489 ops/s
Iteration  10: 614473.911 ops/s
Iteration  11: 590108.001 ops/s
Iteration  12: 588655.255 ops/s
Iteration  13: 626341.059 ops/s
Iteration  14: 579131.402 ops/s
Iteration  15: 612706.794 ops/s
Iteration  16: 604910.663 ops/s
Iteration  17: 581897.352 ops/s
Iteration  18: 605914.302 ops/s
Iteration  19: 599181.841 ops/s
Iteration  20: 624731.733 ops/s
Iteration  21: 571983.169 ops/s
Iteration  22: 599651.611 ops/s
Iteration  23: 625890.493 ops/s
Iteration  24: 588179.867 ops/s
Iteration  25: 626070.432 ops/s
Iteration  26: 574840.368 ops/s
Iteration  27: 602115.832 ops/s
Iteration  28: 620105.772 ops/s
Iteration  29: 586670.625 ops/s
Iteration  30: 612381.957 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeHidden":
  602066.821 ±(99.9%) 11195.791 ops/s [Average]
  (min, avg, max) = (571983.169, 602066.821, 626341.059), stdev = 16757.335
  CI (99.9%): [590871.029, 613262.612] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_rangeHidden  thrpt   30  602066.821 ± 11195.791  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_takeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_takeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 622695.697 ops/s
# Warmup Iteration   2: 3367437.427 ops/s
# Warmup Iteration   3: 4464646.922 ops/s
# Warmup Iteration   4: 3552323.031 ops/s
# Warmup Iteration   5: 4505902.109 ops/s
# Warmup Iteration   6: 4558476.221 ops/s
# Warmup Iteration   7: 4298121.770 ops/s
# Warmup Iteration   8: 4452373.799 ops/s
# Warmup Iteration   9: 4431194.853 ops/s
# Warmup Iteration  10: 4508024.845 ops/s
# Warmup Iteration  11: 4401543.787 ops/s
# Warmup Iteration  12: 4266059.709 ops/s
# Warmup Iteration  13: 4493486.085 ops/s
# Warmup Iteration  14: 3332725.200 ops/s
# Warmup Iteration  15: 4151389.552 ops/s
# Warmup Iteration  16: 4550079.382 ops/s
# Warmup Iteration  17: 4486544.709 ops/s
# Warmup Iteration  18: 4464868.015 ops/s
# Warmup Iteration  19: 4398028.704 ops/s
# Warmup Iteration  20: 4393449.793 ops/s
# Warmup Iteration  21: 4245722.759 ops/s
# Warmup Iteration  22: 4334140.603 ops/s
# Warmup Iteration  23: 4540839.461 ops/s
# Warmup Iteration  24: 4295716.306 ops/s
# Warmup Iteration  25: 4464852.481 ops/s
# Warmup Iteration  26: 4620853.393 ops/s
# Warmup Iteration  27: 4390878.608 ops/s
# Warmup Iteration  28: 4268003.668 ops/s
# Warmup Iteration  29: 4413641.157 ops/s
# Warmup Iteration  30: 4375959.882 ops/s
Iteration   1: 4400958.673 ops/s
Iteration   2: 4266279.572 ops/s
Iteration   3: 4567607.218 ops/s
Iteration   4: 4285741.832 ops/s
Iteration   5: 4361717.621 ops/s
Iteration   6: 4470985.768 ops/s
Iteration   7: 4442769.109 ops/s
Iteration   8: 4491981.784 ops/s
Iteration   9: 4441195.945 ops/s
Iteration  10: 4402440.925 ops/s
Iteration  11: 4498367.396 ops/s
Iteration  12: 4306051.111 ops/s
Iteration  13: 4534456.453 ops/s
Iteration  14: 4191923.706 ops/s
Iteration  15: 4323347.420 ops/s
Iteration  16: 4379081.637 ops/s
Iteration  17: 4535750.720 ops/s
Iteration  18: 4355164.447 ops/s
Iteration  19: 4601926.802 ops/s
Iteration  20: 4398074.667 ops/s
Iteration  21: 4301368.359 ops/s
Iteration  22: 4555285.674 ops/s
Iteration  23: 4393360.749 ops/s
Iteration  24: 4528926.795 ops/s
Iteration  25: 4476394.641 ops/s
Iteration  26: 4392443.739 ops/s
Iteration  27: 4468460.995 ops/s
Iteration  28: 4295963.641 ops/s
Iteration  29: 4444083.881 ops/s
Iteration  30: 4390628.946 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_takeMain":
  4416758.008 ±(99.9%) 66863.253 ops/s [Average]
  (min, avg, max) = (4191923.706, 4416758.008, 4601926.802), stdev = 100077.777
  CI (99.9%): [4349894.755, 4483621.260] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableConcatWithCompletableTest._Benchmark.benchmark_takeMain  thrpt   30  4416758.008 ± 66863.253  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mixedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mixedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1323798.582 ops/s
# Warmup Iteration   2: 2829336.401 ops/s
# Warmup Iteration   3: 3885023.301 ops/s
# Warmup Iteration   4: 3649737.929 ops/s
# Warmup Iteration   5: 3867084.064 ops/s
# Warmup Iteration   6: 3880835.269 ops/s
# Warmup Iteration   7: 3726807.212 ops/s
# Warmup Iteration   8: 3782108.228 ops/s
# Warmup Iteration   9: 3741562.397 ops/s
# Warmup Iteration  10: 3757189.698 ops/s
# Warmup Iteration  11: 3813501.117 ops/s
# Warmup Iteration  12: 3884435.267 ops/s
# Warmup Iteration  13: 3767854.528 ops/s
# Warmup Iteration  14: 4069031.386 ops/s
# Warmup Iteration  15: 3808177.306 ops/s
# Warmup Iteration  16: 3765160.297 ops/s
# Warmup Iteration  17: 3948453.779 ops/s
# Warmup Iteration  18: 3798983.709 ops/s
# Warmup Iteration  19: 3841163.239 ops/s
# Warmup Iteration  20: 3903752.237 ops/s
# Warmup Iteration  21: 3905213.327 ops/s
# Warmup Iteration  22: 3776051.005 ops/s
# Warmup Iteration  23: 3854948.749 ops/s
# Warmup Iteration  24: 3845949.000 ops/s
# Warmup Iteration  25: 3747559.068 ops/s
# Warmup Iteration  26: 3975340.132 ops/s
# Warmup Iteration  27: 3886550.780 ops/s
# Warmup Iteration  28: 3838416.444 ops/s
# Warmup Iteration  29: 3934737.717 ops/s
# Warmup Iteration  30: 3941558.161 ops/s
Iteration   1: 3757258.815 ops/s
Iteration   2: 3966475.387 ops/s
Iteration   3: 3692914.890 ops/s
Iteration   4: 3979283.684 ops/s
Iteration   5: 3776582.024 ops/s
Iteration   6: 3870943.668 ops/s
Iteration   7: 3939373.501 ops/s
Iteration   8: 3844741.222 ops/s
Iteration   9: 3933738.386 ops/s
Iteration  10: 3784045.476 ops/s
Iteration  11: 3802224.321 ops/s
Iteration  12: 3780212.215 ops/s
Iteration  13: 3866618.194 ops/s
Iteration  14: 3854824.346 ops/s
Iteration  15: 3899351.303 ops/s
Iteration  16: 3970301.607 ops/s
Iteration  17: 3789567.741 ops/s
Iteration  18: 3885249.198 ops/s
Iteration  19: 3787404.730 ops/s
Iteration  20: 3933882.273 ops/s
Iteration  21: 3649757.792 ops/s
Iteration  22: 3919977.441 ops/s
Iteration  23: 3827293.401 ops/s
Iteration  24: 3920953.411 ops/s
Iteration  25: 3786121.497 ops/s
Iteration  26: 3948767.313 ops/s
Iteration  27: 3972597.679 ops/s
Iteration  28: 3753882.416 ops/s
Iteration  29: 3777120.754 ops/s
Iteration  30: 3923644.342 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mixedConditional":
  3853170.301 ±(99.9%) 59247.494 ops/s [Average]
  (min, avg, max) = (3649757.792, 3853170.301, 3979283.684), stdev = 88678.866
  CI (99.9%): [3793922.807, 3912417.794] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_mixedConditional  thrpt   30  3853170.301 ± 59247.494  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allPresentConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allPresentConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1036035.125 ops/s
# Warmup Iteration   2: 3032293.921 ops/s
# Warmup Iteration   3: 4034234.816 ops/s
# Warmup Iteration   4: 4234281.002 ops/s
# Warmup Iteration   5: 4306982.022 ops/s
# Warmup Iteration   6: 4226406.833 ops/s
# Warmup Iteration   7: 4371907.584 ops/s
# Warmup Iteration   8: 4064946.791 ops/s
# Warmup Iteration   9: 3517606.551 ops/s
# Warmup Iteration  10: 4337532.590 ops/s
# Warmup Iteration  11: 4249664.636 ops/s
# Warmup Iteration  12: 4322569.970 ops/s
# Warmup Iteration  13: 4507976.262 ops/s
# Warmup Iteration  14: 4213375.505 ops/s
# Warmup Iteration  15: 4309960.239 ops/s
# Warmup Iteration  16: 4385814.126 ops/s
# Warmup Iteration  17: 4237747.433 ops/s
# Warmup Iteration  18: 4353762.642 ops/s
# Warmup Iteration  19: 4391960.952 ops/s
# Warmup Iteration  20: 4172607.419 ops/s
# Warmup Iteration  21: 4392761.904 ops/s
# Warmup Iteration  22: 4208201.182 ops/s
# Warmup Iteration  23: 4334723.156 ops/s
# Warmup Iteration  24: 4407008.753 ops/s
# Warmup Iteration  25: 4472293.854 ops/s
# Warmup Iteration  26: 4179836.948 ops/s
# Warmup Iteration  27: 4395818.967 ops/s
# Warmup Iteration  28: 4327983.501 ops/s
# Warmup Iteration  29: 4233334.085 ops/s
# Warmup Iteration  30: 4503089.087 ops/s
Iteration   1: 4447348.348 ops/s
Iteration   2: 4288663.800 ops/s
Iteration   3: 4438942.551 ops/s
Iteration   4: 4173663.808 ops/s
Iteration   5: 4402978.674 ops/s
Iteration   6: 4284298.113 ops/s
Iteration   7: 4269294.051 ops/s
Iteration   8: 4372952.456 ops/s
Iteration   9: 4164297.087 ops/s
Iteration  10: 4542083.607 ops/s
Iteration  11: 4272623.928 ops/s
Iteration  12: 4285287.642 ops/s
Iteration  13: 4276763.345 ops/s
Iteration  14: 4345249.459 ops/s
Iteration  15: 4353829.579 ops/s
Iteration  16: 4388953.753 ops/s
Iteration  17: 4278374.310 ops/s
Iteration  18: 4372917.898 ops/s
Iteration  19: 4413875.215 ops/s
Iteration  20: 4187754.540 ops/s
Iteration  21: 4365678.803 ops/s
Iteration  22: 4220360.415 ops/s
Iteration  23: 4291565.358 ops/s
Iteration  24: 4275648.118 ops/s
Iteration  25: 4341335.335 ops/s
Iteration  26: 4323329.230 ops/s
Iteration  27: 4293728.737 ops/s
Iteration  28: 4319850.535 ops/s
Iteration  29: 4308936.204 ops/s
Iteration  30: 4432542.093 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_allPresentConditional":
  4324437.566 ±(99.9%) 56947.902 ops/s [Average]
  (min, avg, max) = (4164297.087, 4324437.566, 4542083.607), stdev = 85236.946
  CI (99.9%): [4267489.664, 4381385.469] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_allPresentConditional  thrpt   30  4324437.566 ± 56947.902  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_takeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_takeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 523469.723 ops/s
# Warmup Iteration   2: 2945674.775 ops/s
# Warmup Iteration   3: 3572291.019 ops/s
# Warmup Iteration   4: 4265870.111 ops/s
# Warmup Iteration   5: 4148264.193 ops/s
# Warmup Iteration   6: 4086999.594 ops/s
# Warmup Iteration   7: 4473074.773 ops/s
# Warmup Iteration   8: 4313996.720 ops/s
# Warmup Iteration   9: 4162863.836 ops/s
# Warmup Iteration  10: 4374224.148 ops/s
# Warmup Iteration  11: 4180409.200 ops/s
# Warmup Iteration  12: 4226153.368 ops/s
# Warmup Iteration  13: 4182719.033 ops/s
# Warmup Iteration  14: 4412873.109 ops/s
# Warmup Iteration  15: 4233271.307 ops/s
# Warmup Iteration  16: 4388367.102 ops/s
# Warmup Iteration  17: 4141298.834 ops/s
# Warmup Iteration  18: 4305679.908 ops/s
# Warmup Iteration  19: 4214805.704 ops/s
# Warmup Iteration  20: 4379724.506 ops/s
# Warmup Iteration  21: 4219041.016 ops/s
# Warmup Iteration  22: 4219660.102 ops/s
# Warmup Iteration  23: 4479819.437 ops/s
# Warmup Iteration  24: 4116790.862 ops/s
# Warmup Iteration  25: 4028179.347 ops/s
# Warmup Iteration  26: 4387298.829 ops/s
# Warmup Iteration  27: 4111331.258 ops/s
# Warmup Iteration  28: 4277251.153 ops/s
# Warmup Iteration  29: 4433759.964 ops/s
# Warmup Iteration  30: 4204683.562 ops/s
Iteration   1: 4397461.536 ops/s
Iteration   2: 4095196.133 ops/s
Iteration   3: 4198986.692 ops/s
Iteration   4: 4408020.182 ops/s
Iteration   5: 4125410.441 ops/s
Iteration   6: 4472622.510 ops/s
Iteration   7: 4267869.637 ops/s
Iteration   8: 4165379.079 ops/s
Iteration   9: 4298396.771 ops/s
Iteration  10: 4321547.741 ops/s
Iteration  11: 4250975.146 ops/s
Iteration  12: 4222802.518 ops/s
Iteration  13: 4348434.731 ops/s
Iteration  14: 4148598.722 ops/s
Iteration  15: 4118437.757 ops/s
Iteration  16: 4405953.351 ops/s
Iteration  17: 4137106.097 ops/s
Iteration  18: 4234409.380 ops/s
Iteration  19: 4403089.057 ops/s
Iteration  20: 4124717.852 ops/s
Iteration  21: 4244564.540 ops/s
Iteration  22: 4328319.396 ops/s
Iteration  23: 4106969.542 ops/s
Iteration  24: 4239026.997 ops/s
Iteration  25: 4216436.740 ops/s
Iteration  26: 4229033.840 ops/s
Iteration  27: 4021945.568 ops/s
Iteration  28: 4187321.084 ops/s
Iteration  29: 4372914.354 ops/s
Iteration  30: 4130886.756 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithMaybeTest._Benchmark.benchmark_takeMain":
  4240761.138 ±(99.9%) 76353.110 ops/s [Average]
  (min, avg, max) = (4021945.568, 4240761.138, 4472622.510), stdev = 114281.749
  CI (99.9%): [4164408.029, 4317114.248] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableConcatWithMaybeTest._Benchmark.benchmark_takeMain  thrpt   30  4240761.138 ± 76353.110  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerWithScalar$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerWithScalar

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 260008.729 ops/s
# Warmup Iteration   2: 1713370.751 ops/s
# Warmup Iteration   3: 1518303.578 ops/s
# Warmup Iteration   4: 2111624.537 ops/s
# Warmup Iteration   5: 2391141.871 ops/s
# Warmup Iteration   6: 2299364.289 ops/s
# Warmup Iteration   7: 2324349.742 ops/s
# Warmup Iteration   8: 2352383.839 ops/s
# Warmup Iteration   9: 2301319.207 ops/s
# Warmup Iteration  10: 2324001.216 ops/s
# Warmup Iteration  11: 2283815.598 ops/s
# Warmup Iteration  12: 2421999.113 ops/s
# Warmup Iteration  13: 2338404.416 ops/s
# Warmup Iteration  14: 2242961.139 ops/s
# Warmup Iteration  15: 2314879.036 ops/s
# Warmup Iteration  16: 2283760.579 ops/s
# Warmup Iteration  17: 2286631.214 ops/s
# Warmup Iteration  18: 2340736.435 ops/s
# Warmup Iteration  19: 2222880.602 ops/s
# Warmup Iteration  20: 2372658.396 ops/s
# Warmup Iteration  21: 2370263.748 ops/s
# Warmup Iteration  22: 2240894.191 ops/s
# Warmup Iteration  23: 2351995.613 ops/s
# Warmup Iteration  24: 2355361.681 ops/s
# Warmup Iteration  25: 2299210.635 ops/s
# Warmup Iteration  26: 2325680.385 ops/s
# Warmup Iteration  27: 2283015.796 ops/s
# Warmup Iteration  28: 2338362.885 ops/s
# Warmup Iteration  29: 2377754.674 ops/s
# Warmup Iteration  30: 2308121.683 ops/s
Iteration   1: 2356702.391 ops/s
Iteration   2: 2229735.258 ops/s
Iteration   3: 2363422.393 ops/s
Iteration   4: 2304306.092 ops/s
Iteration   5: 2294352.387 ops/s
Iteration   6: 2388083.069 ops/s
Iteration   7: 2301307.633 ops/s
Iteration   8: 2273670.343 ops/s
Iteration   9: 2385454.329 ops/s
Iteration  10: 2256594.303 ops/s
Iteration  11: 2375933.917 ops/s
Iteration  12: 2355806.553 ops/s
Iteration  13: 2259581.336 ops/s
Iteration  14: 2357406.193 ops/s
Iteration  15: 2414357.290 ops/s
Iteration  16: 2301423.328 ops/s
Iteration  17: 2364277.413 ops/s
Iteration  18: 2312655.240 ops/s
Iteration  19: 2272860.127 ops/s
Iteration  20: 2372581.187 ops/s
Iteration  21: 2264420.033 ops/s
Iteration  22: 2355337.607 ops/s
Iteration  23: 2229149.398 ops/s
Iteration  24: 2329417.344 ops/s
Iteration  25: 2371823.320 ops/s
Iteration  26: 2246121.174 ops/s
Iteration  27: 2353214.935 ops/s
Iteration  28: 2299637.166 ops/s
Iteration  29: 2369472.719 ops/s
Iteration  30: 2399566.819 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerWithScalar":
  2325289.043 ±(99.9%) 35895.768 ops/s [Average]
  (min, avg, max) = (2229149.398, 2325289.043, 2414357.290), stdev = 53727.100
  CI (99.9%): [2289393.275, 2361184.811] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_innerWithScalar  thrpt   30  2325289.043 ± 35895.768  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeTakeHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeTakeHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72213.810 ops/s
# Warmup Iteration   2: 399466.535 ops/s
# Warmup Iteration   3: 897486.107 ops/s
# Warmup Iteration   4: 795602.944 ops/s
# Warmup Iteration   5: 956221.696 ops/s
# Warmup Iteration   6: 946624.789 ops/s
# Warmup Iteration   7: 957417.400 ops/s
# Warmup Iteration   8: 940580.511 ops/s
# Warmup Iteration   9: 934954.193 ops/s
# Warmup Iteration  10: 970210.621 ops/s
# Warmup Iteration  11: 970626.610 ops/s
# Warmup Iteration  12: 911024.056 ops/s
# Warmup Iteration  13: 956341.862 ops/s
# Warmup Iteration  14: 967706.835 ops/s
# Warmup Iteration  15: 924960.307 ops/s
# Warmup Iteration  16: 967244.389 ops/s
# Warmup Iteration  17: 959615.808 ops/s
# Warmup Iteration  18: 936116.593 ops/s
# Warmup Iteration  19: 989950.970 ops/s
# Warmup Iteration  20: 937558.817 ops/s
# Warmup Iteration  21: 962791.520 ops/s
# Warmup Iteration  22: 916626.319 ops/s
# Warmup Iteration  23: 949889.735 ops/s
# Warmup Iteration  24: 977704.916 ops/s
# Warmup Iteration  25: 924145.266 ops/s
# Warmup Iteration  26: 969552.135 ops/s
# Warmup Iteration  27: 942019.738 ops/s
# Warmup Iteration  28: 940842.628 ops/s
# Warmup Iteration  29: 955732.324 ops/s
# Warmup Iteration  30: 943781.820 ops/s
Iteration   1: 990328.935 ops/s
Iteration   2: 978030.674 ops/s
Iteration   3: 958421.091 ops/s
Iteration   4: 966679.474 ops/s
Iteration   5: 920394.357 ops/s
Iteration   6: 957885.791 ops/s
Iteration   7: 932981.995 ops/s
Iteration   8: 965105.537 ops/s
Iteration   9: 949437.879 ops/s
Iteration  10: 954659.226 ops/s
Iteration  11: 980946.713 ops/s
Iteration  12: 957125.639 ops/s
Iteration  13: 957454.595 ops/s
Iteration  14: 926539.393 ops/s
Iteration  15: 920637.711 ops/s
Iteration  16: 978262.479 ops/s
Iteration  17: 916520.476 ops/s
Iteration  18: 973781.228 ops/s
Iteration  19: 991608.542 ops/s
Iteration  20: 936660.226 ops/s
Iteration  21: 979383.553 ops/s
Iteration  22: 927434.960 ops/s
Iteration  23: 994510.770 ops/s
Iteration  24: 964485.543 ops/s
Iteration  25: 932453.291 ops/s
Iteration  26: 994243.428 ops/s
Iteration  27: 1010284.207 ops/s
Iteration  28: 921069.877 ops/s
Iteration  29: 877818.111 ops/s
Iteration  30: 826790.463 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_rangeTakeHidden":
  951397.872 ±(99.9%) 25347.962 ops/s [Average]
  (min, avg, max) = (826790.463, 951397.872, 1010284.207), stdev = 37939.639
  CI (99.9%): [926049.910, 976745.834] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_rangeTakeHidden  thrpt   30  951397.872 ± 25347.962  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_take2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_take2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 199787.225 ops/s
# Warmup Iteration   2: 1014790.046 ops/s
# Warmup Iteration   3: 1617855.709 ops/s
# Warmup Iteration   4: 1438736.347 ops/s
# Warmup Iteration   5: 1688825.055 ops/s
# Warmup Iteration   6: 1722988.238 ops/s
# Warmup Iteration   7: 1683494.303 ops/s
# Warmup Iteration   8: 1799664.133 ops/s
# Warmup Iteration   9: 1667477.852 ops/s
# Warmup Iteration  10: 1718746.033 ops/s
# Warmup Iteration  11: 1709063.892 ops/s
# Warmup Iteration  12: 1724076.186 ops/s
# Warmup Iteration  13: 1705023.153 ops/s
# Warmup Iteration  14: 1718864.762 ops/s
# Warmup Iteration  15: 1781302.856 ops/s
# Warmup Iteration  16: 1778014.112 ops/s
# Warmup Iteration  17: 1671109.056 ops/s
# Warmup Iteration  18: 1768902.653 ops/s
# Warmup Iteration  19: 1758184.837 ops/s
# Warmup Iteration  20: 1735579.749 ops/s
# Warmup Iteration  21: 1755748.410 ops/s
# Warmup Iteration  22: 1690255.423 ops/s
# Warmup Iteration  23: 1772017.846 ops/s
# Warmup Iteration  24: 1730561.600 ops/s
# Warmup Iteration  25: 1690036.370 ops/s
# Warmup Iteration  26: 1762127.762 ops/s
# Warmup Iteration  27: 1679095.366 ops/s
# Warmup Iteration  28: 1715643.129 ops/s
# Warmup Iteration  29: 1788500.818 ops/s
# Warmup Iteration  30: 1676339.714 ops/s
Iteration   1: 1743864.792 ops/s
Iteration   2: 1712222.983 ops/s
Iteration   3: 1762349.837 ops/s
Iteration   4: 1695074.255 ops/s
Iteration   5: 1708885.050 ops/s
Iteration   6: 1786819.234 ops/s
Iteration   7: 1694250.842 ops/s
Iteration   8: 1689539.760 ops/s
Iteration   9: 1766384.268 ops/s
Iteration  10: 1669652.927 ops/s
Iteration  11: 1679086.032 ops/s
Iteration  12: 1743572.543 ops/s
Iteration  13: 1749264.978 ops/s
Iteration  14: 1717184.187 ops/s
Iteration  15: 1760517.199 ops/s
Iteration  16: 1700003.447 ops/s
Iteration  17: 1741875.544 ops/s
Iteration  18: 1721076.917 ops/s
Iteration  19: 1712411.875 ops/s
Iteration  20: 1766991.394 ops/s
Iteration  21: 1700575.139 ops/s
Iteration  22: 1767672.926 ops/s
Iteration  23: 1741678.286 ops/s
Iteration  24: 1749334.929 ops/s
Iteration  25: 1689463.319 ops/s
Iteration  26: 1753627.747 ops/s
Iteration  27: 1768755.312 ops/s
Iteration  28: 1682532.162 ops/s
Iteration  29: 1758553.665 ops/s
Iteration  30: 1739859.628 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCacheTest._Benchmark.benchmark_take2":
  1729102.706 ±(99.9%) 21847.874 ops/s [Average]
  (min, avg, max) = (1669652.927, 1729102.706, 1786819.234), stdev = 32700.872
  CI (99.9%): [1707254.832, 1750950.580] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
ObservableCacheTest._Benchmark.benchmark_take2  thrpt   30  1729102.706 ± 21847.874  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 259923.582 ops/s
# Warmup Iteration   2: 1682201.948 ops/s
# Warmup Iteration   3: 2178614.129 ops/s
# Warmup Iteration   4: 2701782.513 ops/s
# Warmup Iteration   5: 2654051.353 ops/s
# Warmup Iteration   6: 2711350.315 ops/s
# Warmup Iteration   7: 2608196.023 ops/s
# Warmup Iteration   8: 2738693.314 ops/s
# Warmup Iteration   9: 2646960.331 ops/s
# Warmup Iteration  10: 2684601.002 ops/s
# Warmup Iteration  11: 2704936.535 ops/s
# Warmup Iteration  12: 2702250.827 ops/s
# Warmup Iteration  13: 2681394.670 ops/s
# Warmup Iteration  14: 2677800.055 ops/s
# Warmup Iteration  15: 2704643.581 ops/s
# Warmup Iteration  16: 2708697.054 ops/s
# Warmup Iteration  17: 2671334.748 ops/s
# Warmup Iteration  18: 2791839.342 ops/s
# Warmup Iteration  19: 2692755.589 ops/s
# Warmup Iteration  20: 2689929.860 ops/s
# Warmup Iteration  21: 2748258.514 ops/s
# Warmup Iteration  22: 2657090.651 ops/s
# Warmup Iteration  23: 2774629.625 ops/s
# Warmup Iteration  24: 2743830.572 ops/s
# Warmup Iteration  25: 2640447.565 ops/s
# Warmup Iteration  26: 2662364.013 ops/s
# Warmup Iteration  27: 2735037.934 ops/s
# Warmup Iteration  28: 2711553.401 ops/s
# Warmup Iteration  29: 2727415.365 ops/s
# Warmup Iteration  30: 2707687.251 ops/s
Iteration   1: 2746998.103 ops/s
Iteration   2: 2632279.353 ops/s
Iteration   3: 2722623.257 ops/s
Iteration   4: 2766230.182 ops/s
Iteration   5: 2635442.192 ops/s
Iteration   6: 2667768.199 ops/s
Iteration   7: 2767345.461 ops/s
Iteration   8: 2644907.783 ops/s
Iteration   9: 2747237.094 ops/s
Iteration  10: 2636174.379 ops/s
Iteration  11: 2803446.253 ops/s
Iteration  12: 2657704.971 ops/s
Iteration  13: 2728751.455 ops/s
Iteration  14: 2825414.517 ops/s
Iteration  15: 2575021.290 ops/s
Iteration  16: 2729343.276 ops/s
Iteration  17: 2742610.760 ops/s
Iteration  18: 2632731.918 ops/s
Iteration  19: 2686788.748 ops/s
Iteration  20: 2645086.515 ops/s
Iteration  21: 2669818.582 ops/s
Iteration  22: 2703281.836 ops/s
Iteration  23: 2676856.491 ops/s
Iteration  24: 2230728.203 ops/s
Iteration  25: 2730235.223 ops/s
Iteration  26: 2757087.531 ops/s
Iteration  27: 2618798.559 ops/s
Iteration  28: 2680762.152 ops/s
Iteration  29: 2712765.366 ops/s
Iteration  30: 2778374.953 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_dispose":
  2685087.153 ±(99.9%) 69992.738 ops/s [Average]
  (min, avg, max) = (2230728.203, 2685087.153, 2825414.517), stdev = 104761.844
  CI (99.9%): [2615094.415, 2755079.892] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_dispose  thrpt   30  2685087.153 ± 69992.738  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_whenTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_whenTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 125279.796 ops/s
# Warmup Iteration   2: 977318.676 ops/s
# Warmup Iteration   3: 1286537.404 ops/s
# Warmup Iteration   4: 1487748.086 ops/s
# Warmup Iteration   5: 1444649.968 ops/s
# Warmup Iteration   6: 1490056.800 ops/s
# Warmup Iteration   7: 1534616.668 ops/s
# Warmup Iteration   8: 1437898.305 ops/s
# Warmup Iteration   9: 1420275.334 ops/s
# Warmup Iteration  10: 1571097.147 ops/s
# Warmup Iteration  11: 1474007.349 ops/s
# Warmup Iteration  12: 1483320.818 ops/s
# Warmup Iteration  13: 1398933.374 ops/s
# Warmup Iteration  14: 1484560.726 ops/s
# Warmup Iteration  15: 1374497.172 ops/s
# Warmup Iteration  16: 1557222.907 ops/s
# Warmup Iteration  17: 1598387.033 ops/s
# Warmup Iteration  18: 1468787.135 ops/s
# Warmup Iteration  19: 1572421.612 ops/s
# Warmup Iteration  20: 1501692.633 ops/s
# Warmup Iteration  21: 1551189.812 ops/s
# Warmup Iteration  22: 1484844.269 ops/s
# Warmup Iteration  23: 1524075.418 ops/s
# Warmup Iteration  24: 1518855.205 ops/s
# Warmup Iteration  25: 1574243.355 ops/s
# Warmup Iteration  26: 1501227.524 ops/s
# Warmup Iteration  27: 1536155.966 ops/s
# Warmup Iteration  28: 1487957.420 ops/s
# Warmup Iteration  29: 1591893.880 ops/s
# Warmup Iteration  30: 1586538.209 ops/s
Iteration   1: 1475216.957 ops/s
Iteration   2: 1557523.847 ops/s
Iteration   3: 1573595.319 ops/s
Iteration   4: 1507402.690 ops/s
Iteration   5: 1578203.859 ops/s
Iteration   6: 1513748.144 ops/s
Iteration   7: 1488663.463 ops/s
Iteration   8: 1560401.419 ops/s
Iteration   9: 1493266.921 ops/s
Iteration  10: 1577879.511 ops/s
Iteration  11: 1487717.192 ops/s
Iteration  12: 1543381.718 ops/s
Iteration  13: 1540259.796 ops/s
Iteration  14: 1500829.201 ops/s
Iteration  15: 1504888.090 ops/s
Iteration  16: 1541452.869 ops/s
Iteration  17: 1522896.911 ops/s
Iteration  18: 1529201.000 ops/s
Iteration  19: 1493620.350 ops/s
Iteration  20: 1614076.601 ops/s
Iteration  21: 1498498.180 ops/s
Iteration  22: 1559897.271 ops/s
Iteration  23: 1500169.331 ops/s
Iteration  24: 1543843.821 ops/s
Iteration  25: 1519398.604 ops/s
Iteration  26: 1562087.200 ops/s
Iteration  27: 1520291.442 ops/s
Iteration  28: 1501345.432 ops/s
Iteration  29: 1561294.563 ops/s
Iteration  30: 1475611.275 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_whenTake":
  1528222.099 ±(99.9%) 23549.055 ops/s [Average]
  (min, avg, max) = (1475216.957, 1528222.099, 1614076.601), stdev = 35247.120
  CI (99.9%): [1504673.044, 1551771.154] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
ObservableRepeatTest._Benchmark.benchmark_whenTake  thrpt   30  1528222.099 ± 23549.055  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorDisconnectsIndependentSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorDisconnectsIndependentSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 640164.050 ops/s
# Warmup Iteration   2: 2461273.195 ops/s
# Warmup Iteration   3: 3399909.391 ops/s
# Warmup Iteration   4: 3136662.446 ops/s
# Warmup Iteration   5: 3315681.975 ops/s
# Warmup Iteration   6: 3134481.302 ops/s
# Warmup Iteration   7: 3235331.517 ops/s
# Warmup Iteration   8: 2879968.282 ops/s
# Warmup Iteration   9: 3038214.999 ops/s
# Warmup Iteration  10: 3349757.759 ops/s
# Warmup Iteration  11: 3282669.315 ops/s
# Warmup Iteration  12: 3285346.015 ops/s
# Warmup Iteration  13: 3342669.305 ops/s
# Warmup Iteration  14: 3291256.260 ops/s
# Warmup Iteration  15: 3247416.204 ops/s
# Warmup Iteration  16: 3336132.016 ops/s
# Warmup Iteration  17: 3236978.135 ops/s
# Warmup Iteration  18: 3223279.291 ops/s
# Warmup Iteration  19: 3413140.318 ops/s
# Warmup Iteration  20: 3277941.230 ops/s
# Warmup Iteration  21: 3218042.175 ops/s
# Warmup Iteration  22: 3306963.275 ops/s
# Warmup Iteration  23: 3214305.821 ops/s
# Warmup Iteration  24: 3208923.033 ops/s
# Warmup Iteration  25: 3266495.665 ops/s
# Warmup Iteration  26: 3220988.290 ops/s
# Warmup Iteration  27: 3397290.712 ops/s
# Warmup Iteration  28: 3211379.612 ops/s
# Warmup Iteration  29: 3333528.220 ops/s
# Warmup Iteration  30: 3210465.543 ops/s
Iteration   1: 3411644.153 ops/s
Iteration   2: 3291081.975 ops/s
Iteration   3: 3382266.390 ops/s
Iteration   4: 3222622.985 ops/s
Iteration   5: 3302940.684 ops/s
Iteration   6: 3221751.621 ops/s
Iteration   7: 3328014.038 ops/s
Iteration   8: 3238673.164 ops/s
Iteration   9: 3299896.565 ops/s
Iteration  10: 3244342.264 ops/s
Iteration  11: 3291312.295 ops/s
Iteration  12: 3255453.363 ops/s
Iteration  13: 3303944.847 ops/s
Iteration  14: 3276319.756 ops/s
Iteration  15: 3212562.153 ops/s
Iteration  16: 3285835.340 ops/s
Iteration  17: 3321434.397 ops/s
Iteration  18: 3300175.755 ops/s
Iteration  19: 2364085.872 ops/s
Iteration  20: 3224838.547 ops/s
Iteration  21: 3271028.724 ops/s
Iteration  22: 3398553.867 ops/s
Iteration  23: 3143178.536 ops/s
Iteration  24: 3329807.174 ops/s
Iteration  25: 3176244.677 ops/s
Iteration  26: 3164942.183 ops/s
Iteration  27: 3259178.978 ops/s
Iteration  28: 3143801.116 ops/s
Iteration  29: 3243277.455 ops/s
Iteration  30: 3314115.199 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorDisconnectsIndependentSource":
  3240777.469 ±(99.9%) 119351.454 ops/s [Average]
  (min, avg, max) = (2364085.872, 3240777.469, 3411644.153), stdev = 178639.651
  CI (99.9%): [3121426.015, 3360128.923] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score        Error  Units
ObservablePublishTest._Benchmark.benchmark_selectorDisconnectsIndependentSource  thrpt   30  3240777.469 ± 119351.454  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejectedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejectedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 202084.924 ops/s
# Warmup Iteration   2: 1050129.063 ops/s
# Warmup Iteration   3: 2080283.049 ops/s
# Warmup Iteration   4: 2437778.611 ops/s
# Warmup Iteration   5: 2361755.670 ops/s
# Warmup Iteration   6: 2364105.751 ops/s
# Warmup Iteration   7: 2418145.612 ops/s
# Warmup Iteration   8: 2113647.826 ops/s
# Warmup Iteration   9: 2485416.326 ops/s
# Warmup Iteration  10: 2428453.692 ops/s
# Warmup Iteration  11: 2281687.329 ops/s
# Warmup Iteration  12: 2403098.431 ops/s
# Warmup Iteration  13: 2444573.574 ops/s
# Warmup Iteration  14: 2415165.931 ops/s
# Warmup Iteration  15: 2346272.507 ops/s
# Warmup Iteration  16: 2552427.687 ops/s
# Warmup Iteration  17: 2430302.216 ops/s
# Warmup Iteration  18: 2398446.907 ops/s
# Warmup Iteration  19: 2409691.518 ops/s
# Warmup Iteration  20: 2503303.860 ops/s
# Warmup Iteration  21: 2458022.104 ops/s
# Warmup Iteration  22: 2392505.923 ops/s
# Warmup Iteration  23: 2483306.562 ops/s
# Warmup Iteration  24: 2383241.761 ops/s
# Warmup Iteration  25: 2413235.835 ops/s
# Warmup Iteration  26: 2454090.795 ops/s
# Warmup Iteration  27: 2383678.109 ops/s
# Warmup Iteration  28: 2473140.918 ops/s
# Warmup Iteration  29: 2420209.380 ops/s
# Warmup Iteration  30: 2427778.398 ops/s
Iteration   1: 2491980.417 ops/s
Iteration   2: 2235598.232 ops/s
Iteration   3: 2458476.646 ops/s
Iteration   4: 2432936.441 ops/s
Iteration   5: 2359590.391 ops/s
Iteration   6: 2449266.464 ops/s
Iteration   7: 2305433.402 ops/s
Iteration   8: 2402911.243 ops/s
Iteration   9: 2423697.456 ops/s
Iteration  10: 2352743.011 ops/s
Iteration  11: 2390842.607 ops/s
Iteration  12: 2337517.788 ops/s
Iteration  13: 2421251.194 ops/s
Iteration  14: 2373445.257 ops/s
Iteration  15: 2332027.754 ops/s
Iteration  16: 2443007.521 ops/s
Iteration  17: 2443821.533 ops/s
Iteration  18: 2364509.842 ops/s
Iteration  19: 2449712.556 ops/s
Iteration  20: 2425378.070 ops/s
Iteration  21: 2409081.342 ops/s
Iteration  22: 2328952.484 ops/s
Iteration  23: 2394577.049 ops/s
Iteration  24: 2390727.014 ops/s
Iteration  25: 2403053.819 ops/s
Iteration  26: 2483989.014 ops/s
Iteration  27: 2370281.466 ops/s
Iteration  28: 2484867.419 ops/s
Iteration  29: 2368118.112 ops/s
Iteration  30: 2473083.255 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejectedConditional":
  2400029.293 ±(99.9%) 39323.276 ops/s [Average]
  (min, avg, max) = (2235598.232, 2400029.293, 2491980.417), stdev = 58857.233
  CI (99.9%): [2360706.017, 2439352.570] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableDoAfterNextTest._Benchmark.benchmark_asyncFusedRejectedConditional  thrpt   30  2400029.293 ± 39323.276  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFusedBoundaryConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFusedBoundaryConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 573321.280 ops/s
# Warmup Iteration   2: 2981049.898 ops/s
# Warmup Iteration   3: 3508043.787 ops/s
# Warmup Iteration   4: 4033316.327 ops/s
# Warmup Iteration   5: 4218929.506 ops/s
# Warmup Iteration   6: 4032152.145 ops/s
# Warmup Iteration   7: 4284112.490 ops/s
# Warmup Iteration   8: 4102376.592 ops/s
# Warmup Iteration   9: 4097483.222 ops/s
# Warmup Iteration  10: 4179710.799 ops/s
# Warmup Iteration  11: 4150516.958 ops/s
# Warmup Iteration  12: 4133121.753 ops/s
# Warmup Iteration  13: 4270729.593 ops/s
# Warmup Iteration  14: 3960806.867 ops/s
# Warmup Iteration  15: 4258056.526 ops/s
# Warmup Iteration  16: 4036417.267 ops/s
# Warmup Iteration  17: 4291320.927 ops/s
# Warmup Iteration  18: 3939494.434 ops/s
# Warmup Iteration  19: 4148939.327 ops/s
# Warmup Iteration  20: 4306382.595 ops/s
# Warmup Iteration  21: 4245294.982 ops/s
# Warmup Iteration  22: 4030135.984 ops/s
# Warmup Iteration  23: 4267446.064 ops/s
# Warmup Iteration  24: 3960643.358 ops/s
# Warmup Iteration  25: 4233405.156 ops/s
# Warmup Iteration  26: 4102867.291 ops/s
# Warmup Iteration  27: 4089203.620 ops/s
# Warmup Iteration  28: 4281410.379 ops/s
# Warmup Iteration  29: 4250186.179 ops/s
# Warmup Iteration  30: 4050000.964 ops/s
Iteration   1: 4341035.206 ops/s
Iteration   2: 4183569.174 ops/s
Iteration   3: 4055769.556 ops/s
Iteration   4: 4008133.837 ops/s
Iteration   5: 4250241.716 ops/s
Iteration   6: 3967243.383 ops/s
Iteration   7: 4247037.277 ops/s
Iteration   8: 4029990.880 ops/s
Iteration   9: 4236954.664 ops/s
Iteration  10: 4058311.501 ops/s
Iteration  11: 4112747.243 ops/s
Iteration  12: 4293481.031 ops/s
Iteration  13: 3177105.939 ops/s
Iteration  14: 4185152.982 ops/s
Iteration  15: 4155402.413 ops/s
Iteration  16: 4151836.185 ops/s
Iteration  17: 4160857.619 ops/s
Iteration  18: 4087450.181 ops/s
Iteration  19: 4140260.821 ops/s
Iteration  20: 4214410.687 ops/s
Iteration  21: 4051418.985 ops/s
Iteration  22: 4292199.392 ops/s
Iteration  23: 4072371.949 ops/s
Iteration  24: 4173915.913 ops/s
Iteration  25: 4205672.090 ops/s
Iteration  26: 4112168.876 ops/s
Iteration  27: 4310303.350 ops/s
Iteration  28: 4165968.328 ops/s
Iteration  29: 4024845.826 ops/s
Iteration  30: 4222640.298 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_syncFusedBoundaryConditional":
  4122949.910 ±(99.9%) 135561.574 ops/s [Average]
  (min, avg, max) = (3177105.939, 4122949.910, 4341035.206), stdev = 202902.198
  CI (99.9%): [3987388.336, 4258511.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_syncFusedBoundaryConditional  thrpt   30  4122949.910 ± 135561.574  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSupplierCrash2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSupplierCrash2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.663 ops/s
# Warmup Iteration   2: 24849.472 ops/s
# Warmup Iteration   3: 64553.106 ops/s
# Warmup Iteration   4: 87881.866 ops/s
# Warmup Iteration   5: 86142.583 ops/s
# Warmup Iteration   6: 96954.993 ops/s
# Warmup Iteration   7: 115448.829 ops/s
# Warmup Iteration   8: 285167.833 ops/s
# Warmup Iteration   9: 273766.617 ops/s
# Warmup Iteration  10: 285539.756 ops/s
# Warmup Iteration  11: 308321.354 ops/s
# Warmup Iteration  12: 266361.710 ops/s
# Warmup Iteration  13: 306477.754 ops/s
# Warmup Iteration  14: 303885.442 ops/s
# Warmup Iteration  15: 302263.294 ops/s
# Warmup Iteration  16: 317010.270 ops/s
# Warmup Iteration  17: 298795.401 ops/s
# Warmup Iteration  18: 316422.516 ops/s
# Warmup Iteration  19: 301804.476 ops/s
# Warmup Iteration  20: 312961.058 ops/s
# Warmup Iteration  21: 305333.088 ops/s
# Warmup Iteration  22: 306850.226 ops/s
# Warmup Iteration  23: 315262.762 ops/s
# Warmup Iteration  24: 305692.562 ops/s
# Warmup Iteration  25: 316587.542 ops/s
# Warmup Iteration  26: 304680.515 ops/s
# Warmup Iteration  27: 315643.247 ops/s
# Warmup Iteration  28: 311750.099 ops/s
# Warmup Iteration  29: 307047.010 ops/s
# Warmup Iteration  30: 313899.451 ops/s
Iteration   1: 302971.547 ops/s
Iteration   2: 301756.017 ops/s
Iteration   3: 316892.845 ops/s
Iteration   4: 304392.724 ops/s
Iteration   5: 298384.080 ops/s
Iteration   6: 315279.086 ops/s
Iteration   7: 299127.607 ops/s
Iteration   8: 306616.498 ops/s
Iteration   9: 318781.882 ops/s
Iteration  10: 303617.241 ops/s
Iteration  11: 311742.416 ops/s
Iteration  12: 308096.972 ops/s
Iteration  13: 308020.954 ops/s
Iteration  14: 314655.736 ops/s
Iteration  15: 290952.420 ops/s
Iteration  16: 323358.152 ops/s
Iteration  17: 292260.516 ops/s
Iteration  18: 312234.631 ops/s
Iteration  19: 307192.481 ops/s
Iteration  20: 297719.234 ops/s
Iteration  21: 308279.948 ops/s
Iteration  22: 297457.746 ops/s
Iteration  23: 303381.224 ops/s
Iteration  24: 307106.785 ops/s
Iteration  25: 301417.539 ops/s
Iteration  26: 316150.478 ops/s
Iteration  27: 301660.591 ops/s
Iteration  28: 315327.843 ops/s
Iteration  29: 299518.064 ops/s
Iteration  30: 317029.011 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferSupplierCrash2":
  306712.742 ±(99.9%) 5429.866 ops/s [Average]
  (min, avg, max) = (290952.420, 306712.742, 323358.152), stdev = 8127.168
  CI (99.9%): [301282.877, 312142.608] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferSupplierCrash2  thrpt   30  306712.742 ± 5429.866  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_itemsThenError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_itemsThenError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 212594.259 ops/s
# Warmup Iteration   2: 1032928.981 ops/s
# Warmup Iteration   3: 1862277.463 ops/s
# Warmup Iteration   4: 1864467.347 ops/s
# Warmup Iteration   5: 1989451.044 ops/s
# Warmup Iteration   6: 1960886.235 ops/s
# Warmup Iteration   7: 1929964.241 ops/s
# Warmup Iteration   8: 1998893.912 ops/s
# Warmup Iteration   9: 1923242.893 ops/s
# Warmup Iteration  10: 1912718.686 ops/s
# Warmup Iteration  11: 1921783.555 ops/s
# Warmup Iteration  12: 1889005.875 ops/s
# Warmup Iteration  13: 1910214.320 ops/s
# Warmup Iteration  14: 2000763.411 ops/s
# Warmup Iteration  15: 1915698.547 ops/s
# Warmup Iteration  16: 1963727.843 ops/s
# Warmup Iteration  17: 1997582.292 ops/s
# Warmup Iteration  18: 1892899.127 ops/s
# Warmup Iteration  19: 1921748.721 ops/s
# Warmup Iteration  20: 2037393.873 ops/s
# Warmup Iteration  21: 1854470.028 ops/s
# Warmup Iteration  22: 1981844.250 ops/s
# Warmup Iteration  23: 1861149.844 ops/s
# Warmup Iteration  24: 1989575.697 ops/s
# Warmup Iteration  25: 2017680.548 ops/s
# Warmup Iteration  26: 1942975.515 ops/s
# Warmup Iteration  27: 1965854.625 ops/s
# Warmup Iteration  28: 1975101.081 ops/s
# Warmup Iteration  29: 1998001.277 ops/s
# Warmup Iteration  30: 1974097.647 ops/s
Iteration   1: 1936640.305 ops/s
Iteration   2: 1965150.611 ops/s
Iteration   3: 2049584.383 ops/s
Iteration   4: 1932050.433 ops/s
Iteration   5: 2030434.004 ops/s
Iteration   6: 1950768.305 ops/s
Iteration   7: 1672582.538 ops/s
Iteration   8: 1849910.371 ops/s
Iteration   9: 1963157.639 ops/s
Iteration  10: 2040047.087 ops/s
Iteration  11: 2024875.702 ops/s
Iteration  12: 1922714.754 ops/s
Iteration  13: 2026771.684 ops/s
Iteration  14: 1938728.373 ops/s
Iteration  15: 1965100.768 ops/s
Iteration  16: 2001113.073 ops/s
Iteration  17: 1967002.842 ops/s
Iteration  18: 1993788.527 ops/s
Iteration  19: 1950845.103 ops/s
Iteration  20: 1989996.282 ops/s
Iteration  21: 2015459.943 ops/s
Iteration  22: 1973031.505 ops/s
Iteration  23: 2048838.761 ops/s
Iteration  24: 2003552.002 ops/s
Iteration  25: 1934515.222 ops/s
Iteration  26: 2029356.178 ops/s
Iteration  27: 1933796.772 ops/s
Iteration  28: 2034464.664 ops/s
Iteration  29: 1943811.609 ops/s
Iteration  30: 1989583.749 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_itemsThenError":
  1969255.773 ±(99.9%) 48570.441 ops/s [Average]
  (min, avg, max) = (1672582.538, 1969255.773, 2049584.383), stdev = 72697.955
  CI (99.9%): [1920685.332, 2017826.214] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableOnErrorCompleteTest._Benchmark.benchmark_itemsThenError  thrpt   30  1969255.773 ± 48570.441  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_badSourceDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_badSourceDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14726.263 ops/s
# Warmup Iteration   2: 110064.191 ops/s
# Warmup Iteration   3: 175182.135 ops/s
# Warmup Iteration   4: 197625.073 ops/s
# Warmup Iteration   5: 196624.643 ops/s
# Warmup Iteration   6: 206305.311 ops/s
# Warmup Iteration   7: 219882.091 ops/s
# Warmup Iteration   8: 217440.188 ops/s
# Warmup Iteration   9: 210287.914 ops/s
# Warmup Iteration  10: 218195.296 ops/s
# Warmup Iteration  11: 213152.931 ops/s
# Warmup Iteration  12: 212064.155 ops/s
# Warmup Iteration  13: 211103.989 ops/s
# Warmup Iteration  14: 213459.312 ops/s
# Warmup Iteration  15: 214596.548 ops/s
# Warmup Iteration  16: 216180.598 ops/s
# Warmup Iteration  17: 223739.830 ops/s
# Warmup Iteration  18: 218729.545 ops/s
# Warmup Iteration  19: 218286.727 ops/s
# Warmup Iteration  20: 231149.944 ops/s
# Warmup Iteration  21: 219456.144 ops/s
# Warmup Iteration  22: 226120.877 ops/s
# Warmup Iteration  23: 226406.638 ops/s
# Warmup Iteration  24: 208115.804 ops/s
# Warmup Iteration  25: 223448.028 ops/s
# Warmup Iteration  26: 224781.997 ops/s
# Warmup Iteration  27: 216449.019 ops/s
# Warmup Iteration  28: 223198.850 ops/s
# Warmup Iteration  29: 226554.178 ops/s
# Warmup Iteration  30: 218725.502 ops/s
Iteration   1: 223148.496 ops/s
Iteration   2: 219024.210 ops/s
Iteration   3: 232196.384 ops/s
Iteration   4: 218679.850 ops/s
Iteration   5: 220689.436 ops/s
Iteration   6: 224928.316 ops/s
Iteration   7: 212168.279 ops/s
Iteration   8: 224504.888 ops/s
Iteration   9: 220810.860 ops/s
Iteration  10: 220700.284 ops/s
Iteration  11: 231646.842 ops/s
Iteration  12: 212915.952 ops/s
Iteration  13: 224323.369 ops/s
Iteration  14: 216126.533 ops/s
Iteration  15: 217608.292 ops/s
Iteration  16: 228906.830 ops/s
Iteration  17: 215726.693 ops/s
Iteration  18: 226380.352 ops/s
Iteration  19: 217265.080 ops/s
Iteration  20: 229758.010 ops/s
Iteration  21: 216665.797 ops/s
Iteration  22: 221488.462 ops/s
Iteration  23: 228562.295 ops/s
Iteration  24: 212801.245 ops/s
Iteration  25: 213672.491 ops/s
Iteration  26: 229921.663 ops/s
Iteration  27: 215488.802 ops/s
Iteration  28: 222659.387 ops/s
Iteration  29: 218258.755 ops/s
Iteration  30: 228460.636 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_badSourceDelayError":
  221516.283 ±(99.9%) 4010.900 ops/s [Average]
  (min, avg, max) = (212168.279, 221516.283, 232196.384), stdev = 6003.326
  CI (99.9%): [217505.383, 225527.183] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_badSourceDelayError  thrpt   30  221516.283 ± 4010.900  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_cancelOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_cancelOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 478770.544 ops/s
# Warmup Iteration   2: 2191435.503 ops/s
# Warmup Iteration   3: 2362999.318 ops/s
# Warmup Iteration   4: 2849290.534 ops/s
# Warmup Iteration   5: 2742661.564 ops/s
# Warmup Iteration   6: 2786172.148 ops/s
# Warmup Iteration   7: 2839012.973 ops/s
# Warmup Iteration   8: 2796541.978 ops/s
# Warmup Iteration   9: 2872129.395 ops/s
# Warmup Iteration  10: 2733999.580 ops/s
# Warmup Iteration  11: 2773363.903 ops/s
# Warmup Iteration  12: 2940698.213 ops/s
# Warmup Iteration  13: 2765299.832 ops/s
# Warmup Iteration  14: 2748005.543 ops/s
# Warmup Iteration  15: 2937583.369 ops/s
# Warmup Iteration  16: 2732797.448 ops/s
# Warmup Iteration  17: 2794678.453 ops/s
# Warmup Iteration  18: 2846538.614 ops/s
# Warmup Iteration  19: 2931258.793 ops/s
# Warmup Iteration  20: 2898518.784 ops/s
# Warmup Iteration  21: 2806322.044 ops/s
# Warmup Iteration  22: 2756741.242 ops/s
# Warmup Iteration  23: 2921068.758 ops/s
# Warmup Iteration  24: 2807671.029 ops/s
# Warmup Iteration  25: 2822619.827 ops/s
# Warmup Iteration  26: 2760074.637 ops/s
# Warmup Iteration  27: 2950211.554 ops/s
# Warmup Iteration  28: 2893694.565 ops/s
# Warmup Iteration  29: 2825056.803 ops/s
# Warmup Iteration  30: 2811385.266 ops/s
Iteration   1: 2813560.031 ops/s
Iteration   2: 2667844.718 ops/s
Iteration   3: 2493244.851 ops/s
Iteration   4: 2897900.028 ops/s
Iteration   5: 2749957.709 ops/s
Iteration   6: 2861827.573 ops/s
Iteration   7: 2666504.784 ops/s
Iteration   8: 2916746.045 ops/s
Iteration   9: 2868607.561 ops/s
Iteration  10: 2777903.605 ops/s
Iteration  11: 2882606.051 ops/s
Iteration  12: 2756866.912 ops/s
Iteration  13: 2806314.632 ops/s
Iteration  14: 2916886.175 ops/s
Iteration  15: 2786400.446 ops/s
Iteration  16: 2890246.589 ops/s
Iteration  17: 2750269.880 ops/s
Iteration  18: 2867329.545 ops/s
Iteration  19: 2927721.361 ops/s
Iteration  20: 2721536.488 ops/s
Iteration  21: 2916824.697 ops/s
Iteration  22: 2767361.392 ops/s
Iteration  23: 2918595.196 ops/s
Iteration  24: 2741694.366 ops/s
Iteration  25: 2850117.778 ops/s
Iteration  26: 2810208.905 ops/s
Iteration  27: 2770253.862 ops/s
Iteration  28: 2843947.312 ops/s
Iteration  29: 2713719.096 ops/s
Iteration  30: 2838685.174 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_cancelOnArrival":
  2806389.425 ±(99.9%) 64445.084 ops/s [Average]
  (min, avg, max) = (2493244.851, 2806389.425, 2927721.361), stdev = 96458.375
  CI (99.9%): [2741944.342, 2870834.509] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_cancelOnArrival  thrpt   30  2806389.425 ± 64445.084  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 500048.503 ops/s
# Warmup Iteration   2: 2113440.209 ops/s
# Warmup Iteration   3: 2467461.219 ops/s
# Warmup Iteration   4: 2833847.942 ops/s
# Warmup Iteration   5: 2966281.340 ops/s
# Warmup Iteration   6: 2782411.508 ops/s
# Warmup Iteration   7: 2873327.255 ops/s
# Warmup Iteration   8: 2929439.251 ops/s
# Warmup Iteration   9: 2889909.997 ops/s
# Warmup Iteration  10: 2954769.926 ops/s
# Warmup Iteration  11: 2761359.771 ops/s
# Warmup Iteration  12: 2851844.289 ops/s
# Warmup Iteration  13: 2921969.770 ops/s
# Warmup Iteration  14: 2874550.882 ops/s
# Warmup Iteration  15: 2871733.087 ops/s
# Warmup Iteration  16: 2837978.204 ops/s
# Warmup Iteration  17: 2972713.988 ops/s
# Warmup Iteration  18: 2823021.879 ops/s
# Warmup Iteration  19: 2978246.219 ops/s
# Warmup Iteration  20: 2836131.656 ops/s
# Warmup Iteration  21: 2925062.612 ops/s
# Warmup Iteration  22: 2832142.269 ops/s
# Warmup Iteration  23: 2857219.866 ops/s
# Warmup Iteration  24: 2929074.091 ops/s
# Warmup Iteration  25: 3049897.721 ops/s
# Warmup Iteration  26: 2819374.974 ops/s
# Warmup Iteration  27: 2955463.689 ops/s
# Warmup Iteration  28: 2798689.282 ops/s
# Warmup Iteration  29: 2954896.275 ops/s
# Warmup Iteration  30: 2896925.959 ops/s
Iteration   1: 2891863.053 ops/s
Iteration   2: 2974098.893 ops/s
Iteration   3: 2797617.735 ops/s
Iteration   4: 3001122.457 ops/s
Iteration   5: 2894829.818 ops/s
Iteration   6: 2753787.908 ops/s
Iteration   7: 2857245.722 ops/s
Iteration   8: 2932981.976 ops/s
Iteration   9: 2784474.790 ops/s
Iteration  10: 2963565.389 ops/s
Iteration  11: 2859279.415 ops/s
Iteration  12: 2991100.907 ops/s
Iteration  13: 2871167.435 ops/s
Iteration  14: 2826004.529 ops/s
Iteration  15: 2950428.205 ops/s
Iteration  16: 2887734.921 ops/s
Iteration  17: 2817502.451 ops/s
Iteration  18: 2981646.882 ops/s
Iteration  19: 2771773.935 ops/s
Iteration  20: 2983852.509 ops/s
Iteration  21: 2871067.201 ops/s
Iteration  22: 2817032.700 ops/s
Iteration  23: 2931835.600 ops/s
Iteration  24: 2739032.891 ops/s
Iteration  25: 2875863.806 ops/s
Iteration  26: 2772289.380 ops/s
Iteration  27: 2969664.925 ops/s
Iteration  28: 2929464.368 ops/s
Iteration  29: 2796508.715 ops/s
Iteration  30: 2826361.068 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival":
  2877373.320 ±(99.9%) 52914.650 ops/s [Average]
  (min, avg, max) = (2739032.891, 2877373.320, 3001122.457), stdev = 79200.162
  CI (99.9%): [2824458.670, 2930287.969] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival  thrpt   30  2877373.320 ± 52914.650  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 55249.897 ops/s
# Warmup Iteration   2: 213590.009 ops/s
# Warmup Iteration   3: 233381.783 ops/s
# Warmup Iteration   4: 256778.721 ops/s
# Warmup Iteration   5: 268279.780 ops/s
# Warmup Iteration   6: 267989.296 ops/s
# Warmup Iteration   7: 253317.426 ops/s
# Warmup Iteration   8: 271807.787 ops/s
# Warmup Iteration   9: 250238.978 ops/s
# Warmup Iteration  10: 267894.976 ops/s
# Warmup Iteration  11: 266311.011 ops/s
# Warmup Iteration  12: 250121.105 ops/s
# Warmup Iteration  13: 261343.432 ops/s
# Warmup Iteration  14: 260450.692 ops/s
# Warmup Iteration  15: 264388.684 ops/s
# Warmup Iteration  16: 255249.963 ops/s
# Warmup Iteration  17: 266822.760 ops/s
# Warmup Iteration  18: 267120.721 ops/s
# Warmup Iteration  19: 243578.343 ops/s
# Warmup Iteration  20: 267065.896 ops/s
# Warmup Iteration  21: 255854.908 ops/s
# Warmup Iteration  22: 271508.841 ops/s
# Warmup Iteration  23: 266094.239 ops/s
# Warmup Iteration  24: 254029.394 ops/s
# Warmup Iteration  25: 258058.148 ops/s
# Warmup Iteration  26: 268446.230 ops/s
# Warmup Iteration  27: 204963.660 ops/s
# Warmup Iteration  28: 260316.715 ops/s
# Warmup Iteration  29: 252081.692 ops/s
# Warmup Iteration  30: 261189.661 ops/s
Iteration   1: 256338.237 ops/s
Iteration   2: 250773.797 ops/s
Iteration   3: 260317.392 ops/s
Iteration   4: 260494.826 ops/s
Iteration   5: 264704.949 ops/s
Iteration   6: 250191.552 ops/s
Iteration   7: 265787.005 ops/s
Iteration   8: 257929.185 ops/s
Iteration   9: 260956.578 ops/s
Iteration  10: 267046.724 ops/s
Iteration  11: 254982.336 ops/s
Iteration  12: 256497.469 ops/s
Iteration  13: 252405.542 ops/s
Iteration  14: 266980.879 ops/s
Iteration  15: 271646.708 ops/s
Iteration  16: 246581.991 ops/s
Iteration  17: 262604.202 ops/s
Iteration  18: 254111.411 ops/s
Iteration  19: 257971.404 ops/s
Iteration  20: 257667.688 ops/s
Iteration  21: 258094.087 ops/s
Iteration  22: 268545.433 ops/s
Iteration  23: 260147.075 ops/s
Iteration  24: 267649.316 ops/s
Iteration  25: 251597.917 ops/s
Iteration  26: 267816.000 ops/s
Iteration  27: 254067.855 ops/s
Iteration  28: 254025.031 ops/s
Iteration  29: 265090.901 ops/s
Iteration  30: 260631.353 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_take":
  259455.161 ±(99.9%) 4246.046 ops/s [Average]
  (min, avg, max) = (246581.991, 259455.161, 271646.708), stdev = 6355.282
  CI (99.9%): [255209.115, 263701.207] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_take  thrpt   30  259455.161 ± 4246.046  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31529.729 ops/s
# Warmup Iteration   2: 153386.653 ops/s
# Warmup Iteration   3: 187988.763 ops/s
# Warmup Iteration   4: 196085.484 ops/s
# Warmup Iteration   5: 194659.283 ops/s
# Warmup Iteration   6: 192502.941 ops/s
# Warmup Iteration   7: 189411.440 ops/s
# Warmup Iteration   8: 190193.139 ops/s
# Warmup Iteration   9: 203218.458 ops/s
# Warmup Iteration  10: 192045.598 ops/s
# Warmup Iteration  11: 199270.364 ops/s
# Warmup Iteration  12: 202224.822 ops/s
# Warmup Iteration  13: 194840.709 ops/s
# Warmup Iteration  14: 207922.480 ops/s
# Warmup Iteration  15: 204567.840 ops/s
# Warmup Iteration  16: 195219.638 ops/s
# Warmup Iteration  17: 202462.549 ops/s
# Warmup Iteration  18: 203901.348 ops/s
# Warmup Iteration  19: 201498.803 ops/s
# Warmup Iteration  20: 204482.022 ops/s
# Warmup Iteration  21: 211451.112 ops/s
# Warmup Iteration  22: 206606.939 ops/s
# Warmup Iteration  23: 209708.824 ops/s
# Warmup Iteration  24: 198357.023 ops/s
# Warmup Iteration  25: 196828.472 ops/s
# Warmup Iteration  26: 210893.427 ops/s
# Warmup Iteration  27: 201764.681 ops/s
# Warmup Iteration  28: 198843.254 ops/s
# Warmup Iteration  29: 212776.438 ops/s
# Warmup Iteration  30: 198533.662 ops/s
Iteration   1: 206834.759 ops/s
Iteration   2: 199768.868 ops/s
Iteration   3: 212457.646 ops/s
Iteration   4: 202070.995 ops/s
Iteration   5: 199635.380 ops/s
Iteration   6: 201803.403 ops/s
Iteration   7: 204319.291 ops/s
Iteration   8: 205795.634 ops/s
Iteration   9: 195902.903 ops/s
Iteration  10: 202878.734 ops/s
Iteration  11: 214388.864 ops/s
Iteration  12: 200699.946 ops/s
Iteration  13: 206560.980 ops/s
Iteration  14: 200067.155 ops/s
Iteration  15: 202396.720 ops/s
Iteration  16: 205894.755 ops/s
Iteration  17: 202342.504 ops/s
Iteration  18: 212627.178 ops/s
Iteration  19: 207797.337 ops/s
Iteration  20: 202330.059 ops/s
Iteration  21: 210305.718 ops/s
Iteration  22: 200293.166 ops/s
Iteration  23: 212967.758 ops/s
Iteration  24: 198108.456 ops/s
Iteration  25: 207544.967 ops/s
Iteration  26: 204363.619 ops/s
Iteration  27: 202316.541 ops/s
Iteration  28: 206713.345 ops/s
Iteration  29: 201552.126 ops/s
Iteration  30: 215861.796 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  204886.687 ±(99.9%) 3400.477 ops/s [Average]
  (min, avg, max) = (195902.903, 204886.687, 215861.796), stdev = 5089.674
  CI (99.9%): [201486.210, 208287.164] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  204886.687 ± 3400.477  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_concatReportsDisposedOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_concatReportsDisposedOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 648028.399 ops/s
# Warmup Iteration   2: 2480196.882 ops/s
# Warmup Iteration   3: 2894694.933 ops/s
# Warmup Iteration   4: 3296393.733 ops/s
# Warmup Iteration   5: 3399775.436 ops/s
# Warmup Iteration   6: 3303934.249 ops/s
# Warmup Iteration   7: 3324695.188 ops/s
# Warmup Iteration   8: 3428876.180 ops/s
# Warmup Iteration   9: 3242780.403 ops/s
# Warmup Iteration  10: 3392030.410 ops/s
# Warmup Iteration  11: 3345178.503 ops/s
# Warmup Iteration  12: 3280538.387 ops/s
# Warmup Iteration  13: 3323406.037 ops/s
# Warmup Iteration  14: 3345658.349 ops/s
# Warmup Iteration  15: 3366062.279 ops/s
# Warmup Iteration  16: 3330626.828 ops/s
# Warmup Iteration  17: 3320669.004 ops/s
# Warmup Iteration  18: 3456294.880 ops/s
# Warmup Iteration  19: 3350096.331 ops/s
# Warmup Iteration  20: 3493960.650 ops/s
# Warmup Iteration  21: 3265925.323 ops/s
# Warmup Iteration  22: 3071182.042 ops/s
# Warmup Iteration  23: 3301459.630 ops/s
# Warmup Iteration  24: 3324544.551 ops/s
# Warmup Iteration  25: 3506192.727 ops/s
# Warmup Iteration  26: 3303314.471 ops/s
# Warmup Iteration  27: 3472917.607 ops/s
# Warmup Iteration  28: 3409736.531 ops/s
# Warmup Iteration  29: 3203829.136 ops/s
# Warmup Iteration  30: 3424489.271 ops/s
Iteration   1: 3264128.171 ops/s
Iteration   2: 3395412.330 ops/s
Iteration   3: 3461417.354 ops/s
Iteration   4: 3328044.457 ops/s
Iteration   5: 3345481.215 ops/s
Iteration   6: 3521926.600 ops/s
Iteration   7: 3346425.888 ops/s
Iteration   8: 3494824.509 ops/s
Iteration   9: 3297424.504 ops/s
Iteration  10: 3533496.453 ops/s
Iteration  11: 3267479.518 ops/s
Iteration  12: 3371731.847 ops/s
Iteration  13: 3277078.437 ops/s
Iteration  14: 3362386.788 ops/s
Iteration  15: 3413777.663 ops/s
Iteration  16: 3473275.701 ops/s
Iteration  17: 3300109.971 ops/s
Iteration  18: 3497347.042 ops/s
Iteration  19: 3353298.244 ops/s
Iteration  20: 3440121.548 ops/s
Iteration  21: 3473978.602 ops/s
Iteration  22: 3308420.915 ops/s
Iteration  23: 3523387.316 ops/s
Iteration  24: 3277596.509 ops/s
Iteration  25: 3390296.554 ops/s
Iteration  26: 3333385.729 ops/s
Iteration  27: 3360187.776 ops/s
Iteration  28: 3517163.991 ops/s
Iteration  29: 3293880.917 ops/s
Iteration  30: 3350949.719 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_concatReportsDisposedOnComplete":
  3385814.542 ±(99.9%) 58285.130 ops/s [Average]
  (min, avg, max) = (3264128.171, 3385814.542, 3533496.453), stdev = 87238.446
  CI (99.9%): [3327529.412, 3444099.673] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_concatReportsDisposedOnComplete  thrpt   30  3385814.542 ± 58285.130  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicSyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicSyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 470096.298 ops/s
# Warmup Iteration   2: 1514462.372 ops/s
# Warmup Iteration   3: 1689340.618 ops/s
# Warmup Iteration   4: 1816257.946 ops/s
# Warmup Iteration   5: 1877695.122 ops/s
# Warmup Iteration   6: 1782478.976 ops/s
# Warmup Iteration   7: 1813254.193 ops/s
# Warmup Iteration   8: 1699021.068 ops/s
# Warmup Iteration   9: 1842421.304 ops/s
# Warmup Iteration  10: 1820601.091 ops/s
# Warmup Iteration  11: 1586605.881 ops/s
# Warmup Iteration  12: 1897210.989 ops/s
# Warmup Iteration  13: 1872385.378 ops/s
# Warmup Iteration  14: 1797535.871 ops/s
# Warmup Iteration  15: 1877831.512 ops/s
# Warmup Iteration  16: 1792545.909 ops/s
# Warmup Iteration  17: 1851398.960 ops/s
# Warmup Iteration  18: 1797402.042 ops/s
# Warmup Iteration  19: 1873010.821 ops/s
# Warmup Iteration  20: 1838822.537 ops/s
# Warmup Iteration  21: 1780026.484 ops/s
# Warmup Iteration  22: 1912472.720 ops/s
# Warmup Iteration  23: 1789226.579 ops/s
# Warmup Iteration  24: 1814864.184 ops/s
# Warmup Iteration  25: 1840505.804 ops/s
# Warmup Iteration  26: 1808098.945 ops/s
# Warmup Iteration  27: 1858124.312 ops/s
# Warmup Iteration  28: 1850937.735 ops/s
# Warmup Iteration  29: 1779693.862 ops/s
# Warmup Iteration  30: 1890768.472 ops/s
Iteration   1: 1821368.801 ops/s
Iteration   2: 1816081.927 ops/s
Iteration   3: 1816041.848 ops/s
Iteration   4: 1787432.745 ops/s
Iteration   5: 1853184.525 ops/s
Iteration   6: 1810709.368 ops/s
Iteration   7: 1877976.158 ops/s
Iteration   8: 1772730.253 ops/s
Iteration   9: 1853235.796 ops/s
Iteration  10: 1823755.715 ops/s
Iteration  11: 1842700.330 ops/s
Iteration  12: 1823761.505 ops/s
Iteration  13: 1807570.224 ops/s
Iteration  14: 1883880.788 ops/s
Iteration  15: 1866649.573 ops/s
Iteration  16: 1816843.404 ops/s
Iteration  17: 1879978.021 ops/s
Iteration  18: 1810917.913 ops/s
Iteration  19: 1829504.959 ops/s
Iteration  20: 1906572.127 ops/s
Iteration  21: 1782869.949 ops/s
Iteration  22: 1858658.815 ops/s
Iteration  23: 1847360.730 ops/s
Iteration  24: 1826901.473 ops/s
Iteration  25: 1869685.238 ops/s
Iteration  26: 1850219.230 ops/s
Iteration  27: 1767370.588 ops/s
Iteration  28: 1857212.028 ops/s
Iteration  29: 1826785.740 ops/s
Iteration  30: 1868296.226 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicSyncFused":
  1835208.533 ±(99.9%) 22828.245 ops/s [Average]
  (min, avg, max) = (1767370.588, 1835208.533, 1906572.127), stdev = 34168.245
  CI (99.9%): [1812380.288, 1858036.778] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_basicSyncFused  thrpt   30  1835208.533 ± 22828.245  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_simple$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_simple

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 685618.961 ops/s
# Warmup Iteration   2: 1678511.729 ops/s
# Warmup Iteration   3: 1624311.231 ops/s
# Warmup Iteration   4: 1912004.148 ops/s
# Warmup Iteration   5: 1877419.698 ops/s
# Warmup Iteration   6: 1901196.599 ops/s
# Warmup Iteration   7: 1869656.479 ops/s
# Warmup Iteration   8: 1793715.371 ops/s
# Warmup Iteration   9: 1697154.611 ops/s
# Warmup Iteration  10: 1952867.181 ops/s
# Warmup Iteration  11: 1896853.181 ops/s
# Warmup Iteration  12: 1896379.964 ops/s
# Warmup Iteration  13: 1847361.736 ops/s
# Warmup Iteration  14: 1981094.971 ops/s
# Warmup Iteration  15: 1833060.162 ops/s
# Warmup Iteration  16: 1599475.244 ops/s
# Warmup Iteration  17: 1783486.088 ops/s
# Warmup Iteration  18: 1868126.899 ops/s
# Warmup Iteration  19: 1781950.728 ops/s
# Warmup Iteration  20: 1796198.644 ops/s
# Warmup Iteration  21: 1840548.505 ops/s
# Warmup Iteration  22: 1832607.755 ops/s
# Warmup Iteration  23: 1750393.664 ops/s
# Warmup Iteration  24: 1790871.115 ops/s
# Warmup Iteration  25: 1853193.677 ops/s
# Warmup Iteration  26: 1791994.536 ops/s
# Warmup Iteration  27: 1769414.451 ops/s
# Warmup Iteration  28: 1839189.879 ops/s
# Warmup Iteration  29: 1813420.154 ops/s
# Warmup Iteration  30: 1842863.412 ops/s
Iteration   1: 1746716.596 ops/s
Iteration   2: 1839782.224 ops/s
Iteration   3: 1773242.738 ops/s
Iteration   4: 1847310.493 ops/s
Iteration   5: 1881680.782 ops/s
Iteration   6: 1763902.392 ops/s
Iteration   7: 1856213.022 ops/s
Iteration   8: 1795323.818 ops/s
Iteration   9: 1789829.049 ops/s
Iteration  10: 1881921.999 ops/s
Iteration  11: 1880463.305 ops/s
Iteration  12: 1803259.887 ops/s
Iteration  13: 1800838.924 ops/s
Iteration  14: 1837094.852 ops/s
Iteration  15: 1739752.214 ops/s
Iteration  16: 1747084.687 ops/s
Iteration  17: 1850080.931 ops/s
Iteration  18: 1789389.347 ops/s
Iteration  19: 1822735.845 ops/s
Iteration  20: 1805199.411 ops/s
Iteration  21: 1835951.160 ops/s
Iteration  22: 1792386.487 ops/s
Iteration  23: 1845135.021 ops/s
Iteration  24: 1781163.988 ops/s
Iteration  25: 1788791.815 ops/s
Iteration  26: 1848892.595 ops/s
Iteration  27: 1776377.313 ops/s
Iteration  28: 1793824.531 ops/s
Iteration  29: 1848217.732 ops/s
Iteration  30: 1806377.717 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_simple":
  1812298.029 ±(99.9%) 27035.578 ops/s [Average]
  (min, avg, max) = (1739752.214, 1812298.029, 1881921.999), stdev = 40465.584
  CI (99.9%): [1785262.451, 1839333.607] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_simple  thrpt   30  1812298.029 ± 27035.578  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_concatReportsDisposedOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_concatReportsDisposedOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87567.285 ops/s
# Warmup Iteration   2: 432470.677 ops/s
# Warmup Iteration   3: 503529.083 ops/s
# Warmup Iteration   4: 500141.078 ops/s
# Warmup Iteration   5: 536568.739 ops/s
# Warmup Iteration   6: 520345.295 ops/s
# Warmup Iteration   7: 514396.673 ops/s
# Warmup Iteration   8: 548847.558 ops/s
# Warmup Iteration   9: 474029.348 ops/s
# Warmup Iteration  10: 538264.863 ops/s
# Warmup Iteration  11: 530676.367 ops/s
# Warmup Iteration  12: 512334.297 ops/s
# Warmup Iteration  13: 530927.076 ops/s
# Warmup Iteration  14: 524253.082 ops/s
# Warmup Iteration  15: 532074.205 ops/s
# Warmup Iteration  16: 503196.982 ops/s
# Warmup Iteration  17: 538707.769 ops/s
# Warmup Iteration  18: 553505.569 ops/s
# Warmup Iteration  19: 516278.045 ops/s
# Warmup Iteration  20: 555881.564 ops/s
# Warmup Iteration  21: 534631.078 ops/s
# Warmup Iteration  22: 539980.993 ops/s
# Warmup Iteration  23: 535507.185 ops/s
# Warmup Iteration  24: 541309.165 ops/s
# Warmup Iteration  25: 533486.049 ops/s
# Warmup Iteration  26: 538553.524 ops/s
# Warmup Iteration  27: 540942.271 ops/s
# Warmup Iteration  28: 558233.977 ops/s
# Warmup Iteration  29: 520880.304 ops/s
# Warmup Iteration  30: 573097.697 ops/s
Iteration   1: 567436.683 ops/s
Iteration   2: 533701.858 ops/s
Iteration   3: 549720.086 ops/s
Iteration   4: 550388.877 ops/s
Iteration   5: 558336.805 ops/s
Iteration   6: 534379.394 ops/s
Iteration   7: 562816.494 ops/s
Iteration   8: 560189.202 ops/s
Iteration   9: 541096.217 ops/s
Iteration  10: 553704.393 ops/s
Iteration  11: 535850.798 ops/s
Iteration  12: 553261.257 ops/s
Iteration  13: 539820.317 ops/s
Iteration  14: 547629.065 ops/s
Iteration  15: 556549.473 ops/s
Iteration  16: 535661.820 ops/s
Iteration  17: 546515.697 ops/s
Iteration  18: 541585.771 ops/s
Iteration  19: 544370.854 ops/s
Iteration  20: 562363.352 ops/s
Iteration  21: 523949.791 ops/s
Iteration  22: 557373.224 ops/s
Iteration  23: 525470.823 ops/s
Iteration  24: 548198.476 ops/s
Iteration  25: 545377.296 ops/s
Iteration  26: 558491.767 ops/s
Iteration  27: 540790.667 ops/s
Iteration  28: 527602.242 ops/s
Iteration  29: 557609.145 ops/s
Iteration  30: 522015.728 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_concatReportsDisposedOnError":
  546075.252 ±(99.9%) 8301.536 ops/s [Average]
  (min, avg, max) = (522015.728, 546075.252, 567436.683), stdev = 12425.350
  CI (99.9%): [537773.716, 554376.789] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_concatReportsDisposedOnError  thrpt   30  546075.252 ± 8301.536  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_simple2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_simple2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 417737.848 ops/s
# Warmup Iteration   2: 1366941.618 ops/s
# Warmup Iteration   3: 1403793.221 ops/s
# Warmup Iteration   4: 1452678.129 ops/s
# Warmup Iteration   5: 1615062.461 ops/s
# Warmup Iteration   6: 1638403.821 ops/s
# Warmup Iteration   7: 1676532.652 ops/s
# Warmup Iteration   8: 1619503.180 ops/s
# Warmup Iteration   9: 1692876.753 ops/s
# Warmup Iteration  10: 1619065.302 ops/s
# Warmup Iteration  11: 1332457.562 ops/s
# Warmup Iteration  12: 1664903.393 ops/s
# Warmup Iteration  13: 1609419.555 ops/s
# Warmup Iteration  14: 1714111.396 ops/s
# Warmup Iteration  15: 1586873.391 ops/s
# Warmup Iteration  16: 1710854.695 ops/s
# Warmup Iteration  17: 1605491.812 ops/s
# Warmup Iteration  18: 1603753.686 ops/s
# Warmup Iteration  19: 1619587.179 ops/s
# Warmup Iteration  20: 1556878.707 ops/s
# Warmup Iteration  21: 1629007.850 ops/s
# Warmup Iteration  22: 1627563.940 ops/s
# Warmup Iteration  23: 1598834.275 ops/s
# Warmup Iteration  24: 1583862.449 ops/s
# Warmup Iteration  25: 1659650.977 ops/s
# Warmup Iteration  26: 1589135.234 ops/s
# Warmup Iteration  27: 1604202.086 ops/s
# Warmup Iteration  28: 1667158.353 ops/s
# Warmup Iteration  29: 1540896.696 ops/s
# Warmup Iteration  30: 1661458.062 ops/s
Iteration   1: 1573505.136 ops/s
Iteration   2: 1627750.738 ops/s
Iteration   3: 1605561.309 ops/s
Iteration   4: 1637531.712 ops/s
Iteration   5: 1614865.997 ops/s
Iteration   6: 1562278.923 ops/s
Iteration   7: 1625012.357 ops/s
Iteration   8: 1630374.367 ops/s
Iteration   9: 1588978.410 ops/s
Iteration  10: 1641884.807 ops/s
Iteration  11: 1594349.450 ops/s
Iteration  12: 1644759.173 ops/s
Iteration  13: 1577191.203 ops/s
Iteration  14: 1627261.702 ops/s
Iteration  15: 1599784.087 ops/s
Iteration  16: 1573309.701 ops/s
Iteration  17: 1661363.834 ops/s
Iteration  18: 1681903.414 ops/s
Iteration  19: 1567058.007 ops/s
Iteration  20: 1643630.591 ops/s
Iteration  21: 1596324.001 ops/s
Iteration  22: 1637618.418 ops/s
Iteration  23: 1598418.113 ops/s
Iteration  24: 1620407.541 ops/s
Iteration  25: 1599953.638 ops/s
Iteration  26: 1608169.087 ops/s
Iteration  27: 1637206.456 ops/s
Iteration  28: 1594041.468 ops/s
Iteration  29: 1572847.354 ops/s
Iteration  30: 1653250.056 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_simple2":
  1613219.702 ±(99.9%) 20430.315 ops/s [Average]
  (min, avg, max) = (1562278.923, 1613219.702, 1681903.414), stdev = 30579.136
  CI (99.9%): [1592789.387, 1633650.016] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_simple2  thrpt   30  1613219.702 ± 20430.315  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1218403.787 ops/s
# Warmup Iteration   2: 4708923.813 ops/s
# Warmup Iteration   3: 5140767.461 ops/s
# Warmup Iteration   4: 5556292.374 ops/s
# Warmup Iteration   5: 5704252.456 ops/s
# Warmup Iteration   6: 5764790.287 ops/s
# Warmup Iteration   7: 5648402.464 ops/s
# Warmup Iteration   8: 5681715.248 ops/s
# Warmup Iteration   9: 5908953.151 ops/s
# Warmup Iteration  10: 5601396.934 ops/s
# Warmup Iteration  11: 5767740.023 ops/s
# Warmup Iteration  12: 5688718.635 ops/s
# Warmup Iteration  13: 5717997.468 ops/s
# Warmup Iteration  14: 6019951.075 ops/s
# Warmup Iteration  15: 5608146.666 ops/s
# Warmup Iteration  16: 5795360.054 ops/s
# Warmup Iteration  17: 5663131.284 ops/s
# Warmup Iteration  18: 5782387.984 ops/s
# Warmup Iteration  19: 5883898.096 ops/s
# Warmup Iteration  20: 5792041.673 ops/s
# Warmup Iteration  21: 5770351.466 ops/s
# Warmup Iteration  22: 5841922.879 ops/s
# Warmup Iteration  23: 5931473.402 ops/s
# Warmup Iteration  24: 5691991.113 ops/s
# Warmup Iteration  25: 5700300.839 ops/s
# Warmup Iteration  26: 6035934.795 ops/s
# Warmup Iteration  27: 5611847.799 ops/s
# Warmup Iteration  28: 5604973.814 ops/s
# Warmup Iteration  29: 5686651.677 ops/s
# Warmup Iteration  30: 5843709.858 ops/s
Iteration   1: 5698804.116 ops/s
Iteration   2: 5911062.521 ops/s
Iteration   3: 5564774.782 ops/s
Iteration   4: 5794150.680 ops/s
Iteration   5: 5941193.008 ops/s
Iteration   6: 5670419.239 ops/s
Iteration   7: 5946619.030 ops/s
Iteration   8: 5567916.889 ops/s
Iteration   9: 5892047.394 ops/s
Iteration  10: 5788540.507 ops/s
Iteration  11: 5838260.053 ops/s
Iteration  12: 5642365.451 ops/s
Iteration  13: 5796157.290 ops/s
Iteration  14: 5924361.010 ops/s
Iteration  15: 5786355.675 ops/s
Iteration  16: 5604537.166 ops/s
Iteration  17: 5970124.861 ops/s
Iteration  18: 5667153.770 ops/s
Iteration  19: 5934675.953 ops/s
Iteration  20: 5892242.257 ops/s
Iteration  21: 5833889.880 ops/s
Iteration  22: 5989711.524 ops/s
Iteration  23: 5624137.097 ops/s
Iteration  24: 6048598.890 ops/s
Iteration  25: 5910312.106 ops/s
Iteration  26: 5592971.034 ops/s
Iteration  27: 5899116.323 ops/s
Iteration  28: 5706389.165 ops/s
Iteration  29: 5722196.204 ops/s
Iteration  30: 5842809.676 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_disposed":
  5800063.118 ±(99.9%) 93125.443 ops/s [Average]
  (min, avg, max) = (5564774.782, 5800063.118, 6048598.890), stdev = 139385.790
  CI (99.9%): [5706937.675, 5893188.562] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_disposed  thrpt   30  5800063.118 ± 93125.443  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_asyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_asyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 254026.282 ops/s
# Warmup Iteration   2: 1344689.681 ops/s
# Warmup Iteration   3: 1568196.691 ops/s
# Warmup Iteration   4: 1749232.735 ops/s
# Warmup Iteration   5: 1370230.979 ops/s
# Warmup Iteration   6: 1790487.655 ops/s
# Warmup Iteration   7: 1728497.557 ops/s
# Warmup Iteration   8: 1831554.274 ops/s
# Warmup Iteration   9: 1704345.975 ops/s
# Warmup Iteration  10: 1746418.648 ops/s
# Warmup Iteration  11: 1725592.297 ops/s
# Warmup Iteration  12: 1776291.646 ops/s
# Warmup Iteration  13: 1788882.839 ops/s
# Warmup Iteration  14: 1734713.653 ops/s
# Warmup Iteration  15: 1830122.657 ops/s
# Warmup Iteration  16: 1703921.987 ops/s
# Warmup Iteration  17: 1773183.333 ops/s
# Warmup Iteration  18: 1725552.076 ops/s
# Warmup Iteration  19: 1750546.864 ops/s
# Warmup Iteration  20: 1782976.010 ops/s
# Warmup Iteration  21: 1713017.424 ops/s
# Warmup Iteration  22: 1790344.744 ops/s
# Warmup Iteration  23: 1697121.612 ops/s
# Warmup Iteration  24: 1780552.834 ops/s
# Warmup Iteration  25: 1691565.146 ops/s
# Warmup Iteration  26: 1757948.047 ops/s
# Warmup Iteration  27: 1806431.977 ops/s
# Warmup Iteration  28: 1705811.371 ops/s
# Warmup Iteration  29: 1732255.456 ops/s
# Warmup Iteration  30: 1759931.320 ops/s
Iteration   1: 1704491.650 ops/s
Iteration   2: 1753309.678 ops/s
Iteration   3: 1814871.678 ops/s
Iteration   4: 1672757.294 ops/s
Iteration   5: 1755675.341 ops/s
Iteration   6: 1834791.328 ops/s
Iteration   7: 1713209.106 ops/s
Iteration   8: 1776230.728 ops/s
Iteration   9: 1769351.327 ops/s
Iteration  10: 1762107.017 ops/s
Iteration  11: 1797742.082 ops/s
Iteration  12: 1726042.454 ops/s
Iteration  13: 1863177.341 ops/s
Iteration  14: 1730020.081 ops/s
Iteration  15: 1695985.148 ops/s
Iteration  16: 1842298.848 ops/s
Iteration  17: 1752293.701 ops/s
Iteration  18: 1816812.725 ops/s
Iteration  19: 1852582.716 ops/s
Iteration  20: 1723325.641 ops/s
Iteration  21: 1850049.687 ops/s
Iteration  22: 1756548.725 ops/s
Iteration  23: 1736246.427 ops/s
Iteration  24: 1778581.014 ops/s
Iteration  25: 1735043.716 ops/s
Iteration  26: 1753475.760 ops/s
Iteration  27: 1787082.089 ops/s
Iteration  28: 1717090.108 ops/s
Iteration  29: 1804512.518 ops/s
Iteration  30: 1731938.468 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_asyncFused":
  1766921.480 ±(99.9%) 33681.861 ops/s [Average]
  (min, avg, max) = (1672757.294, 1766921.480, 1863177.341), stdev = 50413.428
  CI (99.9%): [1733239.619, 1800603.341] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_asyncFused  thrpt   30  1766921.480 ± 33681.861  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 350395.040 ops/s
# Warmup Iteration   2: 2256886.593 ops/s
# Warmup Iteration   3: 3282549.154 ops/s
# Warmup Iteration   4: 3139186.994 ops/s
# Warmup Iteration   5: 3278092.973 ops/s
# Warmup Iteration   6: 2874423.088 ops/s
# Warmup Iteration   7: 3068273.023 ops/s
# Warmup Iteration   8: 3154821.991 ops/s
# Warmup Iteration   9: 3312868.413 ops/s
# Warmup Iteration  10: 3333992.154 ops/s
# Warmup Iteration  11: 3100461.492 ops/s
# Warmup Iteration  12: 3308261.539 ops/s
# Warmup Iteration  13: 3162822.272 ops/s
# Warmup Iteration  14: 3339312.415 ops/s
# Warmup Iteration  15: 3166350.825 ops/s
# Warmup Iteration  16: 3189207.251 ops/s
# Warmup Iteration  17: 3204129.625 ops/s
# Warmup Iteration  18: 3272185.812 ops/s
# Warmup Iteration  19: 3328297.345 ops/s
# Warmup Iteration  20: 3153730.591 ops/s
# Warmup Iteration  21: 3301996.085 ops/s
# Warmup Iteration  22: 3206675.832 ops/s
# Warmup Iteration  23: 3254454.474 ops/s
# Warmup Iteration  24: 3208755.800 ops/s
# Warmup Iteration  25: 3234028.753 ops/s
# Warmup Iteration  26: 3318480.307 ops/s
# Warmup Iteration  27: 3120003.799 ops/s
# Warmup Iteration  28: 3175395.696 ops/s
# Warmup Iteration  29: 3118725.932 ops/s
# Warmup Iteration  30: 3287151.003 ops/s
Iteration   1: 3213385.646 ops/s
Iteration   2: 3240513.158 ops/s
Iteration   3: 3299598.301 ops/s
Iteration   4: 3263720.144 ops/s
Iteration   5: 3197449.942 ops/s
Iteration   6: 3288702.428 ops/s
Iteration   7: 3241822.978 ops/s
Iteration   8: 3352304.630 ops/s
Iteration   9: 3294475.252 ops/s
Iteration  10: 3265227.799 ops/s
Iteration  11: 3365831.858 ops/s
Iteration  12: 3221620.456 ops/s
Iteration  13: 3280726.979 ops/s
Iteration  14: 3347943.394 ops/s
Iteration  15: 3239666.899 ops/s
Iteration  16: 3120205.067 ops/s
Iteration  17: 3354345.473 ops/s
Iteration  18: 3129014.994 ops/s
Iteration  19: 3367951.293 ops/s
Iteration  20: 3144449.541 ops/s
Iteration  21: 3353114.892 ops/s
Iteration  22: 3253357.215 ops/s
Iteration  23: 3171442.228 ops/s
Iteration  24: 3303869.793 ops/s
Iteration  25: 3174604.722 ops/s
Iteration  26: 3378983.649 ops/s
Iteration  27: 3217949.318 ops/s
Iteration  28: 3217762.605 ops/s
Iteration  29: 3222483.001 ops/s
Iteration  30: 3281824.990 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_dispose":
  3260144.955 ±(99.9%) 49027.106 ops/s [Average]
  (min, avg, max) = (3120205.067, 3260144.955, 3378983.649), stdev = 73381.469
  CI (99.9%): [3211117.849, 3309172.061] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_dispose  thrpt   30  3260144.955 ± 49027.106  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicNonFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicNonFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 215748.131 ops/s
# Warmup Iteration   2: 1022263.205 ops/s
# Warmup Iteration   3: 1177867.000 ops/s
# Warmup Iteration   4: 1050207.292 ops/s
# Warmup Iteration   5: 1296668.182 ops/s
# Warmup Iteration   6: 1231693.221 ops/s
# Warmup Iteration   7: 1332282.042 ops/s
# Warmup Iteration   8: 1303038.483 ops/s
# Warmup Iteration   9: 1231999.081 ops/s
# Warmup Iteration  10: 1265019.046 ops/s
# Warmup Iteration  11: 1292144.294 ops/s
# Warmup Iteration  12: 1264711.315 ops/s
# Warmup Iteration  13: 1282168.568 ops/s
# Warmup Iteration  14: 1321764.408 ops/s
# Warmup Iteration  15: 1237970.727 ops/s
# Warmup Iteration  16: 1276524.117 ops/s
# Warmup Iteration  17: 1258329.986 ops/s
# Warmup Iteration  18: 1274495.633 ops/s
# Warmup Iteration  19: 1270678.941 ops/s
# Warmup Iteration  20: 1306376.217 ops/s
# Warmup Iteration  21: 1234975.530 ops/s
# Warmup Iteration  22: 1273495.045 ops/s
# Warmup Iteration  23: 1296039.036 ops/s
# Warmup Iteration  24: 1216957.500 ops/s
# Warmup Iteration  25: 1310993.010 ops/s
# Warmup Iteration  26: 1283231.524 ops/s
# Warmup Iteration  27: 1254712.415 ops/s
# Warmup Iteration  28: 1265484.121 ops/s
# Warmup Iteration  29: 1281470.292 ops/s
# Warmup Iteration  30: 1252721.959 ops/s
Iteration   1: 1289948.366 ops/s
Iteration   2: 1257356.796 ops/s
Iteration   3: 1261972.744 ops/s
Iteration   4: 1255201.360 ops/s
Iteration   5: 1292883.249 ops/s
Iteration   6: 1281879.783 ops/s
Iteration   7: 1222500.090 ops/s
Iteration   8: 1287884.021 ops/s
Iteration   9: 1235769.430 ops/s
Iteration  10: 1319772.631 ops/s
Iteration  11: 1240955.135 ops/s
Iteration  12: 1285642.561 ops/s
Iteration  13: 1315882.327 ops/s
Iteration  14: 1237139.037 ops/s
Iteration  15: 1261103.726 ops/s
Iteration  16: 1317300.712 ops/s
Iteration  17: 1294199.516 ops/s
Iteration  18: 1243062.799 ops/s
Iteration  19: 1307433.241 ops/s
Iteration  20: 1248688.928 ops/s
Iteration  21: 1270952.598 ops/s
Iteration  22: 1276807.484 ops/s
Iteration  23: 1274563.590 ops/s
Iteration  24: 1306161.608 ops/s
Iteration  25: 1258344.726 ops/s
Iteration  26: 1320948.760 ops/s
Iteration  27: 1255261.958 ops/s
Iteration  28: 1233527.423 ops/s
Iteration  29: 1319583.669 ops/s
Iteration  30: 1324340.874 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicNonFused":
  1276568.971 ±(99.9%) 20483.703 ops/s [Average]
  (min, avg, max) = (1222500.090, 1276568.971, 1324340.874), stdev = 30659.045
  CI (99.9%): [1256085.268, 1297052.675] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_basicNonFused  thrpt   30  1276568.971 ± 20483.703  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_notFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_notFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 113628.513 ops/s
# Warmup Iteration   2: 408755.655 ops/s
# Warmup Iteration   3: 1154780.994 ops/s
# Warmup Iteration   4: 1339375.328 ops/s
# Warmup Iteration   5: 1272561.744 ops/s
# Warmup Iteration   6: 1228324.221 ops/s
# Warmup Iteration   7: 1378573.419 ops/s
# Warmup Iteration   8: 1334509.982 ops/s
# Warmup Iteration   9: 1400797.754 ops/s
# Warmup Iteration  10: 1382045.649 ops/s
# Warmup Iteration  11: 1307865.525 ops/s
# Warmup Iteration  12: 1345391.475 ops/s
# Warmup Iteration  13: 1358235.998 ops/s
# Warmup Iteration  14: 1333847.833 ops/s
# Warmup Iteration  15: 1370643.972 ops/s
# Warmup Iteration  16: 1330630.100 ops/s
# Warmup Iteration  17: 1421083.138 ops/s
# Warmup Iteration  18: 1364965.290 ops/s
# Warmup Iteration  19: 1365195.896 ops/s
# Warmup Iteration  20: 1398603.119 ops/s
# Warmup Iteration  21: 1371139.315 ops/s
# Warmup Iteration  22: 1363820.615 ops/s
# Warmup Iteration  23: 1332303.269 ops/s
# Warmup Iteration  24: 1396117.354 ops/s
# Warmup Iteration  25: 1437890.707 ops/s
# Warmup Iteration  26: 1361355.676 ops/s
# Warmup Iteration  27: 1427053.943 ops/s
# Warmup Iteration  28: 1367309.820 ops/s
# Warmup Iteration  29: 1357664.890 ops/s
# Warmup Iteration  30: 1429303.771 ops/s
Iteration   1: 1376590.911 ops/s
Iteration   2: 1348932.647 ops/s
Iteration   3: 1419235.758 ops/s
Iteration   4: 1319937.191 ops/s
Iteration   5: 1414505.468 ops/s
Iteration   6: 1339734.857 ops/s
Iteration   7: 1355467.836 ops/s
Iteration   8: 1436255.221 ops/s
Iteration   9: 1356657.705 ops/s
Iteration  10: 1383100.193 ops/s
Iteration  11: 1362201.780 ops/s
Iteration  12: 1418207.964 ops/s
Iteration  13: 1435743.515 ops/s
Iteration  14: 1351052.939 ops/s
Iteration  15: 1345798.716 ops/s
Iteration  16: 1368379.547 ops/s
Iteration  17: 1396283.244 ops/s
Iteration  18: 1355910.022 ops/s
Iteration  19: 1449987.445 ops/s
Iteration  20: 1352643.343 ops/s
Iteration  21: 1436177.485 ops/s
Iteration  22: 1363157.840 ops/s
Iteration  23: 1410357.092 ops/s
Iteration  24: 1341752.784 ops/s
Iteration  25: 1391115.043 ops/s
Iteration  26: 1056411.664 ops/s
Iteration  27: 1323756.485 ops/s
Iteration  28: 1364446.713 ops/s
Iteration  29: 1395070.413 ops/s
Iteration  30: 1452275.590 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_notFused":
  1370704.914 ±(99.9%) 47029.887 ops/s [Average]
  (min, avg, max) = (1056411.664, 1370704.914, 1452275.590), stdev = 70392.126
  CI (99.9%): [1323675.027, 1417734.801] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_notFused  thrpt   30  1370704.914 ± 47029.887  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 581011.266 ops/s
# Warmup Iteration   2: 3357499.577 ops/s
# Warmup Iteration   3: 4524906.835 ops/s
# Warmup Iteration   4: 4851526.591 ops/s
# Warmup Iteration   5: 4978220.914 ops/s
# Warmup Iteration   6: 5061013.513 ops/s
# Warmup Iteration   7: 4827520.762 ops/s
# Warmup Iteration   8: 5033046.065 ops/s
# Warmup Iteration   9: 4995061.789 ops/s
# Warmup Iteration  10: 4663520.448 ops/s
# Warmup Iteration  11: 5024864.725 ops/s
# Warmup Iteration  12: 4801569.302 ops/s
# Warmup Iteration  13: 4911166.808 ops/s
# Warmup Iteration  14: 5058645.842 ops/s
# Warmup Iteration  15: 4881738.178 ops/s
# Warmup Iteration  16: 5119719.968 ops/s
# Warmup Iteration  17: 4721090.339 ops/s
# Warmup Iteration  18: 4957249.774 ops/s
# Warmup Iteration  19: 5115089.011 ops/s
# Warmup Iteration  20: 4871159.430 ops/s
# Warmup Iteration  21: 4971729.284 ops/s
# Warmup Iteration  22: 5007484.198 ops/s
# Warmup Iteration  23: 5078429.332 ops/s
# Warmup Iteration  24: 4824447.741 ops/s
# Warmup Iteration  25: 5118800.337 ops/s
# Warmup Iteration  26: 4911472.002 ops/s
# Warmup Iteration  27: 4893846.275 ops/s
# Warmup Iteration  28: 5154916.920 ops/s
# Warmup Iteration  29: 4928358.069 ops/s
# Warmup Iteration  30: 5066487.846 ops/s
Iteration   1: 5080326.208 ops/s
Iteration   2: 4923574.666 ops/s
Iteration   3: 5045496.743 ops/s
Iteration   4: 4913460.657 ops/s
Iteration   5: 4932656.324 ops/s
Iteration   6: 5154133.326 ops/s
Iteration   7: 5101181.115 ops/s
Iteration   8: 4860456.507 ops/s
Iteration   9: 5096828.775 ops/s
Iteration  10: 4910416.853 ops/s
Iteration  11: 4960037.777 ops/s
Iteration  12: 5165132.811 ops/s
Iteration  13: 4927176.112 ops/s
Iteration  14: 5018371.301 ops/s
Iteration  15: 5108884.710 ops/s
Iteration  16: 4859210.605 ops/s
Iteration  17: 5021842.281 ops/s
Iteration  18: 5169117.664 ops/s
Iteration  19: 4840898.266 ops/s
Iteration  20: 4984712.704 ops/s
Iteration  21: 5013319.988 ops/s
Iteration  22: 4863609.512 ops/s
Iteration  23: 4948789.249 ops/s
Iteration  24: 4858601.094 ops/s
Iteration  25: 5105010.540 ops/s
Iteration  26: 4956214.653 ops/s
Iteration  27: 5155895.882 ops/s
Iteration  28: 4995527.283 ops/s
Iteration  29: 5057589.863 ops/s
Iteration  30: 4957504.784 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicFusionRejected":
  4999532.608 ±(99.9%) 68161.995 ops/s [Average]
  (min, avg, max) = (4840898.266, 4999532.608, 5169117.664), stdev = 102021.673
  CI (99.9%): [4931370.614, 5067694.603] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_basicFusionRejected  thrpt   30  4999532.608 ± 68161.995  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicAsyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicAsyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 103885.469 ops/s
# Warmup Iteration   2: 584533.080 ops/s
# Warmup Iteration   3: 959825.009 ops/s
# Warmup Iteration   4: 964399.398 ops/s
# Warmup Iteration   5: 1080414.374 ops/s
# Warmup Iteration   6: 1054104.092 ops/s
# Warmup Iteration   7: 1091369.837 ops/s
# Warmup Iteration   8: 1141769.140 ops/s
# Warmup Iteration   9: 1083809.434 ops/s
# Warmup Iteration  10: 1040479.710 ops/s
# Warmup Iteration  11: 1108892.771 ops/s
# Warmup Iteration  12: 1063245.112 ops/s
# Warmup Iteration  13: 1087978.369 ops/s
# Warmup Iteration  14: 1069623.926 ops/s
# Warmup Iteration  15: 1101142.866 ops/s
# Warmup Iteration  16: 1115872.161 ops/s
# Warmup Iteration  17: 1109624.715 ops/s
# Warmup Iteration  18: 1052958.594 ops/s
# Warmup Iteration  19: 1103747.877 ops/s
# Warmup Iteration  20: 1070503.244 ops/s
# Warmup Iteration  21: 1134964.534 ops/s
# Warmup Iteration  22: 1049927.461 ops/s
# Warmup Iteration  23: 1076355.156 ops/s
# Warmup Iteration  24: 1093176.178 ops/s
# Warmup Iteration  25: 1077959.161 ops/s
# Warmup Iteration  26: 1076974.073 ops/s
# Warmup Iteration  27: 1114653.884 ops/s
# Warmup Iteration  28: 1069476.087 ops/s
# Warmup Iteration  29: 1126049.898 ops/s
# Warmup Iteration  30: 1080777.754 ops/s
Iteration   1: 1067105.916 ops/s
Iteration   2: 1098278.750 ops/s
Iteration   3: 1093841.564 ops/s
Iteration   4: 1138789.878 ops/s
Iteration   5: 1060078.167 ops/s
Iteration   6: 1061938.688 ops/s
Iteration   7: 1130241.697 ops/s
Iteration   8: 1060676.799 ops/s
Iteration   9: 1080857.005 ops/s
Iteration  10: 1083806.559 ops/s
Iteration  11: 1116521.770 ops/s
Iteration  12: 1095138.149 ops/s
Iteration  13: 1082925.153 ops/s
Iteration  14: 1108879.167 ops/s
Iteration  15: 1056309.913 ops/s
Iteration  16: 1086254.291 ops/s
Iteration  17: 1137370.330 ops/s
Iteration  18: 1040979.352 ops/s
Iteration  19: 1083136.630 ops/s
Iteration  20: 1130080.556 ops/s
Iteration  21: 832880.098 ops/s
Iteration  22: 1114794.558 ops/s
Iteration  23: 1088921.224 ops/s
Iteration  24: 1079725.707 ops/s
Iteration  25: 1124849.899 ops/s
Iteration  26: 1045245.366 ops/s
Iteration  27: 1119076.157 ops/s
Iteration  28: 1096510.175 ops/s
Iteration  29: 1043827.735 ops/s
Iteration  30: 1096863.577 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_basicAsyncFused":
  1081863.494 ±(99.9%) 36591.535 ops/s [Average]
  (min, avg, max) = (832880.098, 1081863.494, 1138789.878), stdev = 54768.491
  CI (99.9%): [1045271.959, 1118455.030] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_basicAsyncFused  thrpt   30  1081863.494 ± 36591.535  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 91126.899 ops/s
# Warmup Iteration   2: 551146.764 ops/s
# Warmup Iteration   3: 605877.674 ops/s
# Warmup Iteration   4: 545919.120 ops/s
# Warmup Iteration   5: 662465.191 ops/s
# Warmup Iteration   6: 569758.836 ops/s
# Warmup Iteration   7: 650923.435 ops/s
# Warmup Iteration   8: 629056.262 ops/s
# Warmup Iteration   9: 666901.509 ops/s
# Warmup Iteration  10: 636357.440 ops/s
# Warmup Iteration  11: 631245.651 ops/s
# Warmup Iteration  12: 669184.401 ops/s
# Warmup Iteration  13: 636742.513 ops/s
# Warmup Iteration  14: 651415.260 ops/s
# Warmup Iteration  15: 668802.363 ops/s
# Warmup Iteration  16: 625411.355 ops/s
# Warmup Iteration  17: 697126.098 ops/s
# Warmup Iteration  18: 672837.117 ops/s
# Warmup Iteration  19: 681656.435 ops/s
# Warmup Iteration  20: 714687.387 ops/s
# Warmup Iteration  21: 664499.335 ops/s
# Warmup Iteration  22: 678115.297 ops/s
# Warmup Iteration  23: 676831.951 ops/s
# Warmup Iteration  24: 667496.690 ops/s
# Warmup Iteration  25: 706147.192 ops/s
# Warmup Iteration  26: 674399.502 ops/s
# Warmup Iteration  27: 703800.435 ops/s
# Warmup Iteration  28: 683251.977 ops/s
# Warmup Iteration  29: 695710.959 ops/s
# Warmup Iteration  30: 676076.387 ops/s
Iteration   1: 674560.437 ops/s
Iteration   2: 717030.065 ops/s
Iteration   3: 682291.539 ops/s
Iteration   4: 670047.715 ops/s
Iteration   5: 694553.138 ops/s
Iteration   6: 684304.804 ops/s
Iteration   7: 672655.831 ops/s
Iteration   8: 699785.719 ops/s
Iteration   9: 679277.199 ops/s
Iteration  10: 701688.623 ops/s
Iteration  11: 686737.628 ops/s
Iteration  12: 707747.330 ops/s
Iteration  13: 668211.958 ops/s
Iteration  14: 703988.074 ops/s
Iteration  15: 684711.754 ops/s
Iteration  16: 670060.009 ops/s
Iteration  17: 695200.580 ops/s
Iteration  18: 687308.821 ops/s
Iteration  19: 691749.676 ops/s
Iteration  20: 675480.942 ops/s
Iteration  21: 700720.213 ops/s
Iteration  22: 668753.767 ops/s
Iteration  23: 700090.420 ops/s
Iteration  24: 675349.762 ops/s
Iteration  25: 689224.148 ops/s
Iteration  26: 690505.457 ops/s
Iteration  27: 667331.522 ops/s
Iteration  28: 706125.231 ops/s
Iteration  29: 685263.896 ops/s
Iteration  30: 698339.777 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_mainError":
  687636.534 ±(99.9%) 9099.590 ops/s [Average]
  (min, avg, max) = (667331.522, 687636.534, 717030.065), stdev = 13619.839
  CI (99.9%): [678536.944, 696736.125] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_mainError  thrpt   30  687636.534 ± 9099.590  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_fusedPollCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_fusedPollCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36288.279 ops/s
# Warmup Iteration   2: 301848.569 ops/s
# Warmup Iteration   3: 411213.095 ops/s
# Warmup Iteration   4: 382630.062 ops/s
# Warmup Iteration   5: 398583.922 ops/s
# Warmup Iteration   6: 374037.334 ops/s
# Warmup Iteration   7: 393126.186 ops/s
# Warmup Iteration   8: 368685.352 ops/s
# Warmup Iteration   9: 406722.717 ops/s
# Warmup Iteration  10: 413137.351 ops/s
# Warmup Iteration  11: 383465.355 ops/s
# Warmup Iteration  12: 404353.063 ops/s
# Warmup Iteration  13: 408373.231 ops/s
# Warmup Iteration  14: 399920.356 ops/s
# Warmup Iteration  15: 398442.396 ops/s
# Warmup Iteration  16: 409139.762 ops/s
# Warmup Iteration  17: 406537.785 ops/s
# Warmup Iteration  18: 413327.394 ops/s
# Warmup Iteration  19: 429823.011 ops/s
# Warmup Iteration  20: 397104.564 ops/s
# Warmup Iteration  21: 425059.343 ops/s
# Warmup Iteration  22: 398660.253 ops/s
# Warmup Iteration  23: 427537.424 ops/s
# Warmup Iteration  24: 406896.214 ops/s
# Warmup Iteration  25: 414391.711 ops/s
# Warmup Iteration  26: 434717.354 ops/s
# Warmup Iteration  27: 421171.621 ops/s
# Warmup Iteration  28: 411023.893 ops/s
# Warmup Iteration  29: 427395.559 ops/s
# Warmup Iteration  30: 389550.621 ops/s
Iteration   1: 431497.253 ops/s
Iteration   2: 409826.435 ops/s
Iteration   3: 420493.543 ops/s
Iteration   4: 417161.575 ops/s
Iteration   5: 411668.402 ops/s
Iteration   6: 422963.614 ops/s
Iteration   7: 418179.328 ops/s
Iteration   8: 416539.108 ops/s
Iteration   9: 416839.770 ops/s
Iteration  10: 411253.127 ops/s
Iteration  11: 421954.950 ops/s
Iteration  12: 404574.398 ops/s
Iteration  13: 423557.039 ops/s
Iteration  14: 417941.882 ops/s
Iteration  15: 385902.908 ops/s
Iteration  16: 358773.007 ops/s
Iteration  17: 431616.883 ops/s
Iteration  18: 405689.603 ops/s
Iteration  19: 430633.429 ops/s
Iteration  20: 429898.629 ops/s
Iteration  21: 413530.574 ops/s
Iteration  22: 420084.788 ops/s
Iteration  23: 412220.523 ops/s
Iteration  24: 412578.222 ops/s
Iteration  25: 406015.461 ops/s
Iteration  26: 413687.958 ops/s
Iteration  27: 426304.507 ops/s
Iteration  28: 410098.732 ops/s
Iteration  29: 425376.990 ops/s
Iteration  30: 412648.322 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_fusedPollCrash":
  414650.365 ±(99.9%) 9529.518 ops/s [Average]
  (min, avg, max) = (358773.007, 414650.365, 431616.883), stdev = 14263.335
  CI (99.9%): [405120.848, 424179.883] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_fusedPollCrash  thrpt   30  414650.365 ± 9529.518  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39368.571 ops/s
# Warmup Iteration   2: 337694.913 ops/s
# Warmup Iteration   3: 435298.379 ops/s
# Warmup Iteration   4: 495346.575 ops/s
# Warmup Iteration   5: 493212.923 ops/s
# Warmup Iteration   6: 466030.029 ops/s
# Warmup Iteration   7: 452025.187 ops/s
# Warmup Iteration   8: 492134.880 ops/s
# Warmup Iteration   9: 472315.304 ops/s
# Warmup Iteration  10: 446806.540 ops/s
# Warmup Iteration  11: 483836.227 ops/s
# Warmup Iteration  12: 498289.415 ops/s
# Warmup Iteration  13: 475005.603 ops/s
# Warmup Iteration  14: 455467.329 ops/s
# Warmup Iteration  15: 512464.096 ops/s
# Warmup Iteration  16: 462356.453 ops/s
# Warmup Iteration  17: 507452.825 ops/s
# Warmup Iteration  18: 525201.358 ops/s
# Warmup Iteration  19: 487814.183 ops/s
# Warmup Iteration  20: 528044.955 ops/s
# Warmup Iteration  21: 525588.805 ops/s
# Warmup Iteration  22: 493411.255 ops/s
# Warmup Iteration  23: 508266.072 ops/s
# Warmup Iteration  24: 498246.590 ops/s
# Warmup Iteration  25: 519430.598 ops/s
# Warmup Iteration  26: 496839.127 ops/s
# Warmup Iteration  27: 508212.764 ops/s
# Warmup Iteration  28: 499663.497 ops/s
# Warmup Iteration  29: 523112.890 ops/s
# Warmup Iteration  30: 493597.474 ops/s
Iteration   1: 520132.056 ops/s
Iteration   2: 514290.999 ops/s
Iteration   3: 503830.777 ops/s
Iteration   4: 498283.520 ops/s
Iteration   5: 513426.920 ops/s
Iteration   6: 518985.342 ops/s
Iteration   7: 496058.838 ops/s
Iteration   8: 513272.133 ops/s
Iteration   9: 500371.197 ops/s
Iteration  10: 518910.227 ops/s
Iteration  11: 499837.724 ops/s
Iteration  12: 521058.788 ops/s
Iteration  13: 499998.861 ops/s
Iteration  14: 509505.024 ops/s
Iteration  15: 505693.277 ops/s
Iteration  16: 512874.787 ops/s
Iteration  17: 495299.631 ops/s
Iteration  18: 510560.165 ops/s
Iteration  19: 512910.837 ops/s
Iteration  20: 508570.122 ops/s
Iteration  21: 514443.956 ops/s
Iteration  22: 503840.265 ops/s
Iteration  23: 522708.120 ops/s
Iteration  24: 493123.532 ops/s
Iteration  25: 514271.633 ops/s
Iteration  26: 499526.547 ops/s
Iteration  27: 498820.611 ops/s
Iteration  28: 519966.776 ops/s
Iteration  29: 497804.420 ops/s
Iteration  30: 525277.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_innerError":
  508788.491 ±(99.9%) 6252.702 ops/s [Average]
  (min, avg, max) = (493123.532, 508788.491, 525277.647), stdev = 9358.751
  CI (99.9%): [502535.789, 515041.193] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_innerError  thrpt   30  508788.491 ± 6252.702  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 160790.509 ops/s
# Warmup Iteration   2: 537854.199 ops/s
# Warmup Iteration   3: 668866.125 ops/s
# Warmup Iteration   4: 593722.156 ops/s
# Warmup Iteration   5: 686095.304 ops/s
# Warmup Iteration   6: 601097.611 ops/s
# Warmup Iteration   7: 640998.128 ops/s
# Warmup Iteration   8: 694195.819 ops/s
# Warmup Iteration   9: 681609.805 ops/s
# Warmup Iteration  10: 658266.036 ops/s
# Warmup Iteration  11: 656006.950 ops/s
# Warmup Iteration  12: 672470.428 ops/s
# Warmup Iteration  13: 677474.432 ops/s
# Warmup Iteration  14: 706590.132 ops/s
# Warmup Iteration  15: 658180.195 ops/s
# Warmup Iteration  16: 681049.284 ops/s
# Warmup Iteration  17: 687546.846 ops/s
# Warmup Iteration  18: 728405.103 ops/s
# Warmup Iteration  19: 696911.276 ops/s
# Warmup Iteration  20: 693365.592 ops/s
# Warmup Iteration  21: 729500.869 ops/s
# Warmup Iteration  22: 654689.172 ops/s
# Warmup Iteration  23: 724545.584 ops/s
# Warmup Iteration  24: 703846.629 ops/s
# Warmup Iteration  25: 678687.225 ops/s
# Warmup Iteration  26: 733356.352 ops/s
# Warmup Iteration  27: 724885.683 ops/s
# Warmup Iteration  28: 726143.094 ops/s
# Warmup Iteration  29: 673135.743 ops/s
# Warmup Iteration  30: 708959.897 ops/s
Iteration   1: 683987.624 ops/s
Iteration   2: 713935.103 ops/s
Iteration   3: 701685.840 ops/s
Iteration   4: 712193.617 ops/s
Iteration   5: 679062.578 ops/s
Iteration   6: 701736.427 ops/s
Iteration   7: 699683.120 ops/s
Iteration   8: 689910.636 ops/s
Iteration   9: 714460.666 ops/s
Iteration  10: 587497.491 ops/s
Iteration  11: 701144.864 ops/s
Iteration  12: 726124.992 ops/s
Iteration  13: 696697.959 ops/s
Iteration  14: 674112.137 ops/s
Iteration  15: 684659.292 ops/s
Iteration  16: 704359.841 ops/s
Iteration  17: 715077.689 ops/s
Iteration  18: 676320.669 ops/s
Iteration  19: 719235.650 ops/s
Iteration  20: 696502.456 ops/s
Iteration  21: 700118.175 ops/s
Iteration  22: 720679.881 ops/s
Iteration  23: 696591.041 ops/s
Iteration  24: 721897.239 ops/s
Iteration  25: 703134.637 ops/s
Iteration  26: 694025.450 ops/s
Iteration  27: 732461.551 ops/s
Iteration  28: 713504.639 ops/s
Iteration  29: 687214.648 ops/s
Iteration  30: 714402.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_mainError":
  698747.285 ±(99.9%) 17246.937 ops/s [Average]
  (min, avg, max) = (587497.491, 698747.285, 732461.551), stdev = 25814.405
  CI (99.9%): [681500.349, 715994.222] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_mainError  thrpt   30  698747.285 ± 17246.937  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_fusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_fusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 607579.142 ops/s
# Warmup Iteration   2: 2900838.071 ops/s
# Warmup Iteration   3: 3798788.629 ops/s
# Warmup Iteration   4: 4177979.445 ops/s
# Warmup Iteration   5: 4142579.567 ops/s
# Warmup Iteration   6: 4314738.560 ops/s
# Warmup Iteration   7: 4005669.531 ops/s
# Warmup Iteration   8: 4097637.480 ops/s
# Warmup Iteration   9: 4270352.316 ops/s
# Warmup Iteration  10: 4107915.363 ops/s
# Warmup Iteration  11: 4116380.375 ops/s
# Warmup Iteration  12: 4138945.010 ops/s
# Warmup Iteration  13: 4108100.095 ops/s
# Warmup Iteration  14: 4253577.791 ops/s
# Warmup Iteration  15: 4119262.497 ops/s
# Warmup Iteration  16: 4189830.146 ops/s
# Warmup Iteration  17: 4084445.887 ops/s
# Warmup Iteration  18: 4312878.284 ops/s
# Warmup Iteration  19: 4164241.013 ops/s
# Warmup Iteration  20: 4148237.362 ops/s
# Warmup Iteration  21: 4209584.262 ops/s
# Warmup Iteration  22: 4178511.332 ops/s
# Warmup Iteration  23: 3942964.387 ops/s
# Warmup Iteration  24: 4202832.721 ops/s
# Warmup Iteration  25: 4121628.413 ops/s
# Warmup Iteration  26: 4097692.226 ops/s
# Warmup Iteration  27: 4305842.323 ops/s
# Warmup Iteration  28: 4059442.675 ops/s
# Warmup Iteration  29: 4219730.948 ops/s
# Warmup Iteration  30: 4204764.461 ops/s
Iteration   1: 4170887.779 ops/s
Iteration   2: 4081446.689 ops/s
Iteration   3: 4353091.789 ops/s
Iteration   4: 3948697.340 ops/s
Iteration   5: 4204579.851 ops/s
Iteration   6: 4294635.795 ops/s
Iteration   7: 4185230.670 ops/s
Iteration   8: 4288726.474 ops/s
Iteration   9: 4124626.514 ops/s
Iteration  10: 4238628.371 ops/s
Iteration  11: 4224135.413 ops/s
Iteration  12: 4273557.666 ops/s
Iteration  13: 4212642.981 ops/s
Iteration  14: 4247287.426 ops/s
Iteration  15: 4198199.039 ops/s
Iteration  16: 4183768.390 ops/s
Iteration  17: 4278720.436 ops/s
Iteration  18: 4262443.069 ops/s
Iteration  19: 4062606.788 ops/s
Iteration  20: 4228899.980 ops/s
Iteration  21: 4114031.336 ops/s
Iteration  22: 4399245.345 ops/s
Iteration  23: 4161363.695 ops/s
Iteration  24: 4379056.323 ops/s
Iteration  25: 4180489.298 ops/s
Iteration  26: 3957418.765 ops/s
Iteration  27: 4371272.141 ops/s
Iteration  28: 4134809.149 ops/s
Iteration  29: 4022231.171 ops/s
Iteration  30: 4423003.313 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_fusionRejected":
  4206857.767 ±(99.9%) 80170.884 ops/s [Average]
  (min, avg, max) = (3948697.340, 4206857.767, 4423003.313), stdev = 119996.014
  CI (99.9%): [4126686.883, 4287028.650] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_fusionRejected  thrpt   30  4206857.767 ± 80170.884  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_doneButNotEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_doneButNotEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 166693.614 ops/s
# Warmup Iteration   2: 918494.372 ops/s
# Warmup Iteration   3: 1369739.800 ops/s
# Warmup Iteration   4: 1378078.890 ops/s
# Warmup Iteration   5: 1639086.555 ops/s
# Warmup Iteration   6: 1637444.472 ops/s
# Warmup Iteration   7: 1625330.505 ops/s
# Warmup Iteration   8: 1577685.769 ops/s
# Warmup Iteration   9: 1609351.812 ops/s
# Warmup Iteration  10: 1551352.498 ops/s
# Warmup Iteration  11: 1599947.016 ops/s
# Warmup Iteration  12: 1528384.511 ops/s
# Warmup Iteration  13: 1647020.676 ops/s
# Warmup Iteration  14: 1516210.618 ops/s
# Warmup Iteration  15: 1637286.982 ops/s
# Warmup Iteration  16: 1612316.642 ops/s
# Warmup Iteration  17: 1607559.341 ops/s
# Warmup Iteration  18: 1651342.890 ops/s
# Warmup Iteration  19: 1655129.322 ops/s
# Warmup Iteration  20: 1585091.134 ops/s
# Warmup Iteration  21: 1603341.805 ops/s
# Warmup Iteration  22: 1643524.559 ops/s
# Warmup Iteration  23: 1573749.343 ops/s
# Warmup Iteration  24: 1635286.530 ops/s
# Warmup Iteration  25: 1550940.253 ops/s
# Warmup Iteration  26: 1607379.419 ops/s
# Warmup Iteration  27: 1609683.213 ops/s
# Warmup Iteration  28: 1567380.763 ops/s
# Warmup Iteration  29: 1619317.377 ops/s
# Warmup Iteration  30: 1552145.493 ops/s
Iteration   1: 1607710.427 ops/s
Iteration   2: 1646570.259 ops/s
Iteration   3: 1567237.501 ops/s
Iteration   4: 1626482.909 ops/s
Iteration   5: 1257709.183 ops/s
Iteration   6: 1581858.267 ops/s
Iteration   7: 1644268.940 ops/s
Iteration   8: 1574730.882 ops/s
Iteration   9: 1646810.030 ops/s
Iteration  10: 1622590.627 ops/s
Iteration  11: 1550527.648 ops/s
Iteration  12: 1605544.985 ops/s
Iteration  13: 1674221.916 ops/s
Iteration  14: 1590687.623 ops/s
Iteration  15: 1572526.948 ops/s
Iteration  16: 1668241.127 ops/s
Iteration  17: 1590280.627 ops/s
Iteration  18: 1651000.553 ops/s
Iteration  19: 1591398.400 ops/s
Iteration  20: 1657748.935 ops/s
Iteration  21: 1579506.693 ops/s
Iteration  22: 1644909.768 ops/s
Iteration  23: 1665629.269 ops/s
Iteration  24: 1559168.391 ops/s
Iteration  25: 1661208.834 ops/s
Iteration  26: 1568355.056 ops/s
Iteration  27: 1640677.881 ops/s
Iteration  28: 1645982.864 ops/s
Iteration  29: 1586594.733 ops/s
Iteration  30: 1644662.634 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_doneButNotEmpty":
  1604161.464 ±(99.9%) 50390.745 ops/s [Average]
  (min, avg, max) = (1257709.183, 1604161.464, 1674221.916), stdev = 75422.501
  CI (99.9%): [1553770.718, 1654552.209] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_doneButNotEmpty  thrpt   30  1604161.464 ± 50390.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60133.857 ops/s
# Warmup Iteration   2: 443361.756 ops/s
# Warmup Iteration   3: 458631.756 ops/s
# Warmup Iteration   4: 419723.598 ops/s
# Warmup Iteration   5: 490642.232 ops/s
# Warmup Iteration   6: 414202.758 ops/s
# Warmup Iteration   7: 489552.072 ops/s
# Warmup Iteration   8: 509398.222 ops/s
# Warmup Iteration   9: 478532.863 ops/s
# Warmup Iteration  10: 501573.838 ops/s
# Warmup Iteration  11: 503872.375 ops/s
# Warmup Iteration  12: 472419.657 ops/s
# Warmup Iteration  13: 494032.311 ops/s
# Warmup Iteration  14: 495807.535 ops/s
# Warmup Iteration  15: 487865.731 ops/s
# Warmup Iteration  16: 495830.237 ops/s
# Warmup Iteration  17: 521913.398 ops/s
# Warmup Iteration  18: 500719.016 ops/s
# Warmup Iteration  19: 513369.975 ops/s
# Warmup Iteration  20: 507804.596 ops/s
# Warmup Iteration  21: 511364.793 ops/s
# Warmup Iteration  22: 509065.410 ops/s
# Warmup Iteration  23: 504854.549 ops/s
# Warmup Iteration  24: 504720.123 ops/s
# Warmup Iteration  25: 514707.281 ops/s
# Warmup Iteration  26: 525498.030 ops/s
# Warmup Iteration  27: 489219.094 ops/s
# Warmup Iteration  28: 536113.442 ops/s
# Warmup Iteration  29: 489824.025 ops/s
# Warmup Iteration  30: 515892.867 ops/s
Iteration   1: 512173.045 ops/s
Iteration   2: 507239.533 ops/s
Iteration   3: 515815.054 ops/s
Iteration   4: 505253.381 ops/s
Iteration   5: 508432.549 ops/s
Iteration   6: 495664.690 ops/s
Iteration   7: 514957.996 ops/s
Iteration   8: 508668.669 ops/s
Iteration   9: 507356.787 ops/s
Iteration  10: 504023.040 ops/s
Iteration  11: 530512.441 ops/s
Iteration  12: 487366.315 ops/s
Iteration  13: 519719.621 ops/s
Iteration  14: 508567.413 ops/s
Iteration  15: 505852.980 ops/s
Iteration  16: 514796.942 ops/s
Iteration  17: 497261.907 ops/s
Iteration  18: 510188.355 ops/s
Iteration  19: 510654.766 ops/s
Iteration  20: 530239.806 ops/s
Iteration  21: 522535.692 ops/s
Iteration  22: 497756.273 ops/s
Iteration  23: 530619.659 ops/s
Iteration  24: 538260.579 ops/s
Iteration  25: 522290.892 ops/s
Iteration  26: 492764.766 ops/s
Iteration  27: 526618.990 ops/s
Iteration  28: 499922.569 ops/s
Iteration  29: 517106.069 ops/s
Iteration  30: 491512.687 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperThrows":
  511137.782 ±(99.9%) 8503.732 ops/s [Average]
  (min, avg, max) = (487366.315, 511137.782, 538260.579), stdev = 12727.986
  CI (99.9%): [502634.051, 519641.514] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperThrows  thrpt   30  511137.782 ± 8503.732  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20914.168 ops/s
# Warmup Iteration   2: 152337.375 ops/s
# Warmup Iteration   3: 190621.109 ops/s
# Warmup Iteration   4: 206268.029 ops/s
# Warmup Iteration   5: 220566.406 ops/s
# Warmup Iteration   6: 217147.510 ops/s
# Warmup Iteration   7: 219790.959 ops/s
# Warmup Iteration   8: 200883.214 ops/s
# Warmup Iteration   9: 206637.633 ops/s
# Warmup Iteration  10: 211050.233 ops/s
# Warmup Iteration  11: 214904.987 ops/s
# Warmup Iteration  12: 223667.944 ops/s
# Warmup Iteration  13: 211680.493 ops/s
# Warmup Iteration  14: 224305.116 ops/s
# Warmup Iteration  15: 212244.303 ops/s
# Warmup Iteration  16: 212653.254 ops/s
# Warmup Iteration  17: 225074.717 ops/s
# Warmup Iteration  18: 218599.292 ops/s
# Warmup Iteration  19: 226403.359 ops/s
# Warmup Iteration  20: 216324.091 ops/s
# Warmup Iteration  21: 224108.731 ops/s
# Warmup Iteration  22: 226422.925 ops/s
# Warmup Iteration  23: 216476.490 ops/s
# Warmup Iteration  24: 220519.425 ops/s
# Warmup Iteration  25: 222177.067 ops/s
# Warmup Iteration  26: 225554.406 ops/s
# Warmup Iteration  27: 228971.175 ops/s
# Warmup Iteration  28: 213946.424 ops/s
# Warmup Iteration  29: 213454.561 ops/s
# Warmup Iteration  30: 198673.946 ops/s
Iteration   1: 219953.574 ops/s
Iteration   2: 221597.240 ops/s
Iteration   3: 225361.775 ops/s
Iteration   4: 222844.201 ops/s
Iteration   5: 226016.460 ops/s
Iteration   6: 221839.254 ops/s
Iteration   7: 230625.084 ops/s
Iteration   8: 233198.926 ops/s
Iteration   9: 219701.461 ops/s
Iteration  10: 226527.644 ops/s
Iteration  11: 216729.551 ops/s
Iteration  12: 222126.504 ops/s
Iteration  13: 230718.627 ops/s
Iteration  14: 221437.859 ops/s
Iteration  15: 221891.072 ops/s
Iteration  16: 222154.261 ops/s
Iteration  17: 224804.721 ops/s
Iteration  18: 230412.322 ops/s
Iteration  19: 216858.070 ops/s
Iteration  20: 224150.018 ops/s
Iteration  21: 229638.557 ops/s
Iteration  22: 218578.917 ops/s
Iteration  23: 228249.634 ops/s
Iteration  24: 224132.145 ops/s
Iteration  25: 220140.314 ops/s
Iteration  26: 230079.140 ops/s
Iteration  27: 218266.742 ops/s
Iteration  28: 214679.760 ops/s
Iteration  29: 224170.183 ops/s
Iteration  30: 223924.222 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_badSource":
  223693.608 ±(99.9%) 3149.017 ops/s [Average]
  (min, avg, max) = (214679.760, 223693.608, 233198.926), stdev = 4713.300
  CI (99.9%): [220544.591, 226842.625] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_badSource  thrpt   30  223693.608 ± 3149.017  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperCrashHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperCrashHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69228.499 ops/s
# Warmup Iteration   2: 337763.719 ops/s
# Warmup Iteration   3: 467633.703 ops/s
# Warmup Iteration   4: 440831.028 ops/s
# Warmup Iteration   5: 433364.553 ops/s
# Warmup Iteration   6: 471816.198 ops/s
# Warmup Iteration   7: 487260.259 ops/s
# Warmup Iteration   8: 486580.565 ops/s
# Warmup Iteration   9: 494882.207 ops/s
# Warmup Iteration  10: 496237.715 ops/s
# Warmup Iteration  11: 495305.460 ops/s
# Warmup Iteration  12: 468156.348 ops/s
# Warmup Iteration  13: 486788.255 ops/s
# Warmup Iteration  14: 487234.357 ops/s
# Warmup Iteration  15: 497851.516 ops/s
# Warmup Iteration  16: 496124.944 ops/s
# Warmup Iteration  17: 502820.086 ops/s
# Warmup Iteration  18: 528941.589 ops/s
# Warmup Iteration  19: 500624.253 ops/s
# Warmup Iteration  20: 501902.113 ops/s
# Warmup Iteration  21: 528126.746 ops/s
# Warmup Iteration  22: 512275.716 ops/s
# Warmup Iteration  23: 484712.135 ops/s
# Warmup Iteration  24: 509833.818 ops/s
# Warmup Iteration  25: 487846.808 ops/s
# Warmup Iteration  26: 506301.943 ops/s
# Warmup Iteration  27: 502559.963 ops/s
# Warmup Iteration  28: 499584.922 ops/s
# Warmup Iteration  29: 492905.990 ops/s
# Warmup Iteration  30: 521219.204 ops/s
Iteration   1: 498148.805 ops/s
Iteration   2: 500278.183 ops/s
Iteration   3: 524149.255 ops/s
Iteration   4: 520983.373 ops/s
Iteration   5: 505810.377 ops/s
Iteration   6: 523242.685 ops/s
Iteration   7: 522304.989 ops/s
Iteration   8: 492332.040 ops/s
Iteration   9: 526034.783 ops/s
Iteration  10: 512219.104 ops/s
Iteration  11: 509059.980 ops/s
Iteration  12: 490493.985 ops/s
Iteration  13: 520094.743 ops/s
Iteration  14: 502414.326 ops/s
Iteration  15: 503048.709 ops/s
Iteration  16: 512137.925 ops/s
Iteration  17: 505344.358 ops/s
Iteration  18: 525166.295 ops/s
Iteration  19: 499408.529 ops/s
Iteration  20: 526863.832 ops/s
Iteration  21: 504150.626 ops/s
Iteration  22: 521404.369 ops/s
Iteration  23: 523979.942 ops/s
Iteration  24: 487205.846 ops/s
Iteration  25: 515017.662 ops/s
Iteration  26: 502478.640 ops/s
Iteration  27: 504170.965 ops/s
Iteration  28: 505059.726 ops/s
Iteration  29: 508569.606 ops/s
Iteration  30: 510690.932 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperCrashHidden":
  510075.486 ±(99.9%) 7585.328 ops/s [Average]
  (min, avg, max) = (487205.846, 510075.486, 526863.832), stdev = 11353.363
  CI (99.9%): [502490.158, 517660.815] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_mapperCrashHidden  thrpt   30  510075.486 ± 7585.328  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_fusedPollThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_fusedPollThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42599.920 ops/s
# Warmup Iteration   2: 448330.686 ops/s
# Warmup Iteration   3: 457992.488 ops/s
# Warmup Iteration   4: 496038.603 ops/s
# Warmup Iteration   5: 458368.898 ops/s
# Warmup Iteration   6: 510848.103 ops/s
# Warmup Iteration   7: 472491.488 ops/s
# Warmup Iteration   8: 525699.251 ops/s
# Warmup Iteration   9: 524776.850 ops/s
# Warmup Iteration  10: 514116.425 ops/s
# Warmup Iteration  11: 510253.639 ops/s
# Warmup Iteration  12: 534536.318 ops/s
# Warmup Iteration  13: 514379.937 ops/s
# Warmup Iteration  14: 528383.879 ops/s
# Warmup Iteration  15: 517922.362 ops/s
# Warmup Iteration  16: 530133.991 ops/s
# Warmup Iteration  17: 551316.776 ops/s
# Warmup Iteration  18: 515559.257 ops/s
# Warmup Iteration  19: 557313.162 ops/s
# Warmup Iteration  20: 536902.031 ops/s
# Warmup Iteration  21: 554217.634 ops/s
# Warmup Iteration  22: 531472.253 ops/s
# Warmup Iteration  23: 534192.187 ops/s
# Warmup Iteration  24: 462099.585 ops/s
# Warmup Iteration  25: 473377.831 ops/s
# Warmup Iteration  26: 524311.352 ops/s
# Warmup Iteration  27: 549977.974 ops/s
# Warmup Iteration  28: 525231.541 ops/s
# Warmup Iteration  29: 564416.252 ops/s
# Warmup Iteration  30: 517132.133 ops/s
Iteration   1: 540426.610 ops/s
Iteration   2: 553232.367 ops/s
Iteration   3: 518950.469 ops/s
Iteration   4: 543552.460 ops/s
Iteration   5: 527121.092 ops/s
Iteration   6: 532941.014 ops/s
Iteration   7: 554935.452 ops/s
Iteration   8: 533817.242 ops/s
Iteration   9: 545411.800 ops/s
Iteration  10: 531665.090 ops/s
Iteration  11: 556688.188 ops/s
Iteration  12: 541571.754 ops/s
Iteration  13: 563749.522 ops/s
Iteration  14: 538054.626 ops/s
Iteration  15: 543636.790 ops/s
Iteration  16: 549278.928 ops/s
Iteration  17: 529943.826 ops/s
Iteration  18: 544542.831 ops/s
Iteration  19: 552820.241 ops/s
Iteration  20: 536653.448 ops/s
Iteration  21: 565316.830 ops/s
Iteration  22: 536562.104 ops/s
Iteration  23: 557525.397 ops/s
Iteration  24: 551402.156 ops/s
Iteration  25: 529156.875 ops/s
Iteration  26: 551069.381 ops/s
Iteration  27: 538443.095 ops/s
Iteration  28: 553662.488 ops/s
Iteration  29: 523633.459 ops/s
Iteration  30: 554294.746 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapCompletableTest._Benchmark.benchmark_fusedPollThrows":
  543335.343 ±(99.9%) 7953.491 ops/s [Average]
  (min, avg, max) = (518950.469, 543335.343, 565316.830), stdev = 11904.411
  CI (99.9%): [535381.852, 551288.833] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_fusedPollThrows  thrpt   30  543335.343 ± 7953.491  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_asyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_asyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 152240.446 ops/s
# Warmup Iteration   2: 373630.803 ops/s
# Warmup Iteration   3: 1274956.542 ops/s
# Warmup Iteration   4: 1367020.953 ops/s
# Warmup Iteration   5: 1367789.417 ops/s
# Warmup Iteration   6: 1248813.254 ops/s
# Warmup Iteration   7: 1302337.387 ops/s
# Warmup Iteration   8: 1395213.992 ops/s
# Warmup Iteration   9: 1346322.766 ops/s
# Warmup Iteration  10: 1401477.578 ops/s
# Warmup Iteration  11: 1357020.407 ops/s
# Warmup Iteration  12: 1450449.666 ops/s
# Warmup Iteration  13: 1383219.903 ops/s
# Warmup Iteration  14: 1427397.792 ops/s
# Warmup Iteration  15: 1388240.938 ops/s
# Warmup Iteration  16: 1427730.190 ops/s
# Warmup Iteration  17: 1366102.363 ops/s
# Warmup Iteration  18: 1393448.692 ops/s
# Warmup Iteration  19: 1390298.781 ops/s
# Warmup Iteration  20: 1448188.150 ops/s
# Warmup Iteration  21: 1410616.403 ops/s
# Warmup Iteration  22: 1423179.033 ops/s
# Warmup Iteration  23: 1327541.757 ops/s
# Warmup Iteration  24: 1402132.833 ops/s
# Warmup Iteration  25: 1418579.195 ops/s
# Warmup Iteration  26: 1380785.106 ops/s
# Warmup Iteration  27: 1438598.261 ops/s
# Warmup Iteration  28: 1390459.356 ops/s
# Warmup Iteration  29: 1403343.270 ops/s
# Warmup Iteration  30: 1408324.004 ops/s
Iteration   1: 1387443.700 ops/s
Iteration   2: 1344294.885 ops/s
Iteration   3: 1444003.890 ops/s
Iteration   4: 1329944.742 ops/s
Iteration   5: 1430821.223 ops/s
Iteration   6: 1438794.337 ops/s
Iteration   7: 1371211.478 ops/s
Iteration   8: 1382855.669 ops/s
Iteration   9: 1437746.059 ops/s
Iteration  10: 1390967.754 ops/s
Iteration  11: 1445769.429 ops/s
Iteration  12: 1377175.554 ops/s
Iteration  13: 1407487.730 ops/s
Iteration  14: 1410939.550 ops/s
Iteration  15: 1388486.990 ops/s
Iteration  16: 1381700.873 ops/s
Iteration  17: 1393848.177 ops/s
Iteration  18: 1376228.604 ops/s
Iteration  19: 1452746.849 ops/s
Iteration  20: 1350994.779 ops/s
Iteration  21: 1367158.029 ops/s
Iteration  22: 1407911.972 ops/s
Iteration  23: 1436802.996 ops/s
Iteration  24: 1340109.113 ops/s
Iteration  25: 1422255.038 ops/s
Iteration  26: 1358306.767 ops/s
Iteration  27: 1445158.908 ops/s
Iteration  28: 1357597.767 ops/s
Iteration  29: 1402235.629 ops/s
Iteration  30: 1404937.810 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_asyncFused":
  1396197.877 ±(99.9%) 23534.392 ops/s [Average]
  (min, avg, max) = (1329944.742, 1396197.877, 1452746.849), stdev = 35225.173
  CI (99.9%): [1372663.485, 1419732.269] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_asyncFused  thrpt   30  1396197.877 ± 23534.392  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_endError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_endError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53714.484 ops/s
# Warmup Iteration   2: 144729.094 ops/s
# Warmup Iteration   3: 349865.323 ops/s
# Warmup Iteration   4: 447245.312 ops/s
# Warmup Iteration   5: 470437.135 ops/s
# Warmup Iteration   6: 448077.982 ops/s
# Warmup Iteration   7: 460911.267 ops/s
# Warmup Iteration   8: 467255.781 ops/s
# Warmup Iteration   9: 447621.410 ops/s
# Warmup Iteration  10: 462617.466 ops/s
# Warmup Iteration  11: 455935.235 ops/s
# Warmup Iteration  12: 434292.274 ops/s
# Warmup Iteration  13: 471778.914 ops/s
# Warmup Iteration  14: 442224.254 ops/s
# Warmup Iteration  15: 484413.492 ops/s
# Warmup Iteration  16: 484475.498 ops/s
# Warmup Iteration  17: 491801.944 ops/s
# Warmup Iteration  18: 480167.869 ops/s
# Warmup Iteration  19: 384224.441 ops/s
# Warmup Iteration  20: 472233.406 ops/s
# Warmup Iteration  21: 477230.022 ops/s
# Warmup Iteration  22: 497799.219 ops/s
# Warmup Iteration  23: 475683.009 ops/s
# Warmup Iteration  24: 474372.999 ops/s
# Warmup Iteration  25: 488455.761 ops/s
# Warmup Iteration  26: 477430.023 ops/s
# Warmup Iteration  27: 495867.777 ops/s
# Warmup Iteration  28: 476316.752 ops/s
# Warmup Iteration  29: 500105.982 ops/s
# Warmup Iteration  30: 485991.629 ops/s
Iteration   1: 492509.859 ops/s
Iteration   2: 493925.120 ops/s
Iteration   3: 454629.041 ops/s
Iteration   4: 489895.782 ops/s
Iteration   5: 500585.382 ops/s
Iteration   6: 473036.357 ops/s
Iteration   7: 508690.023 ops/s
Iteration   8: 475985.779 ops/s
Iteration   9: 478804.670 ops/s
Iteration  10: 483315.471 ops/s
Iteration  11: 505048.511 ops/s
Iteration  12: 493241.875 ops/s
Iteration  13: 471805.959 ops/s
Iteration  14: 503899.390 ops/s
Iteration  15: 477720.243 ops/s
Iteration  16: 487104.969 ops/s
Iteration  17: 498077.199 ops/s
Iteration  18: 480664.388 ops/s
Iteration  19: 498192.123 ops/s
Iteration  20: 478383.202 ops/s
Iteration  21: 498400.128 ops/s
Iteration  22: 474500.212 ops/s
Iteration  23: 477467.888 ops/s
Iteration  24: 498717.929 ops/s
Iteration  25: 486760.925 ops/s
Iteration  26: 489327.515 ops/s
Iteration  27: 476850.506 ops/s
Iteration  28: 503008.473 ops/s
Iteration  29: 498316.581 ops/s
Iteration  30: 477632.784 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_endError":
  487549.943 ±(99.9%) 8416.493 ops/s [Average]
  (min, avg, max) = (454629.041, 487549.943, 508690.023), stdev = 12597.412
  CI (99.9%): [479133.449, 495966.436] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_endError  thrpt   30  487549.943 ± 8416.493  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_boundaryError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_boundaryError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60577.783 ops/s
# Warmup Iteration   2: 267528.264 ops/s
# Warmup Iteration   3: 540256.039 ops/s
# Warmup Iteration   4: 519317.856 ops/s
# Warmup Iteration   5: 535918.703 ops/s
# Warmup Iteration   6: 503099.266 ops/s
# Warmup Iteration   7: 524528.025 ops/s
# Warmup Iteration   8: 527677.227 ops/s
# Warmup Iteration   9: 542685.743 ops/s
# Warmup Iteration  10: 518981.400 ops/s
# Warmup Iteration  11: 543333.756 ops/s
# Warmup Iteration  12: 534307.830 ops/s
# Warmup Iteration  13: 559939.521 ops/s
# Warmup Iteration  14: 539523.272 ops/s
# Warmup Iteration  15: 533470.285 ops/s
# Warmup Iteration  16: 518211.198 ops/s
# Warmup Iteration  17: 548216.783 ops/s
# Warmup Iteration  18: 553877.328 ops/s
# Warmup Iteration  19: 588690.699 ops/s
# Warmup Iteration  20: 513347.407 ops/s
# Warmup Iteration  21: 577233.750 ops/s
# Warmup Iteration  22: 562891.937 ops/s
# Warmup Iteration  23: 584897.323 ops/s
# Warmup Iteration  24: 563087.221 ops/s
# Warmup Iteration  25: 560640.410 ops/s
# Warmup Iteration  26: 581055.330 ops/s
# Warmup Iteration  27: 550797.982 ops/s
# Warmup Iteration  28: 582705.403 ops/s
# Warmup Iteration  29: 558732.852 ops/s
# Warmup Iteration  30: 568632.846 ops/s
Iteration   1: 587894.566 ops/s
Iteration   2: 558788.986 ops/s
Iteration   3: 548269.307 ops/s
Iteration   4: 574367.437 ops/s
Iteration   5: 573245.148 ops/s
Iteration   6: 536594.573 ops/s
Iteration   7: 571785.954 ops/s
Iteration   8: 582589.599 ops/s
Iteration   9: 548752.230 ops/s
Iteration  10: 580348.523 ops/s
Iteration  11: 587205.794 ops/s
Iteration  12: 561840.945 ops/s
Iteration  13: 572904.380 ops/s
Iteration  14: 566679.220 ops/s
Iteration  15: 560219.701 ops/s
Iteration  16: 573532.919 ops/s
Iteration  17: 545749.550 ops/s
Iteration  18: 569226.913 ops/s
Iteration  19: 565680.995 ops/s
Iteration  20: 592526.220 ops/s
Iteration  21: 585865.011 ops/s
Iteration  22: 552923.858 ops/s
Iteration  23: 579008.733 ops/s
Iteration  24: 559210.358 ops/s
Iteration  25: 574729.027 ops/s
Iteration  26: 560488.793 ops/s
Iteration  27: 590045.127 ops/s
Iteration  28: 569846.493 ops/s
Iteration  29: 563339.778 ops/s
Iteration  30: 573962.559 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_boundaryError":
  568920.757 ±(99.9%) 9341.656 ops/s [Average]
  (min, avg, max) = (536594.573, 568920.757, 592526.220), stdev = 13982.152
  CI (99.9%): [559579.100, 578262.413] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_boundaryError  thrpt   30  568920.757 ± 9341.656  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_immediateError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_immediateError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75692.429 ops/s
# Warmup Iteration   2: 260247.585 ops/s
# Warmup Iteration   3: 494681.349 ops/s
# Warmup Iteration   4: 483602.539 ops/s
# Warmup Iteration   5: 552419.291 ops/s
# Warmup Iteration   6: 462483.954 ops/s
# Warmup Iteration   7: 572842.286 ops/s
# Warmup Iteration   8: 498555.128 ops/s
# Warmup Iteration   9: 564635.351 ops/s
# Warmup Iteration  10: 529639.918 ops/s
# Warmup Iteration  11: 552045.188 ops/s
# Warmup Iteration  12: 561621.669 ops/s
# Warmup Iteration  13: 532794.882 ops/s
# Warmup Iteration  14: 471900.270 ops/s
# Warmup Iteration  15: 538864.057 ops/s
# Warmup Iteration  16: 564253.492 ops/s
# Warmup Iteration  17: 556431.342 ops/s
# Warmup Iteration  18: 573668.527 ops/s
# Warmup Iteration  19: 580221.100 ops/s
# Warmup Iteration  20: 558864.607 ops/s
# Warmup Iteration  21: 602171.062 ops/s
# Warmup Iteration  22: 561954.661 ops/s
# Warmup Iteration  23: 569343.751 ops/s
# Warmup Iteration  24: 581387.904 ops/s
# Warmup Iteration  25: 593926.709 ops/s
# Warmup Iteration  26: 555452.288 ops/s
# Warmup Iteration  27: 596006.326 ops/s
# Warmup Iteration  28: 576397.690 ops/s
# Warmup Iteration  29: 558542.861 ops/s
# Warmup Iteration  30: 591766.879 ops/s
Iteration   1: 574427.020 ops/s
Iteration   2: 586717.680 ops/s
Iteration   3: 571965.199 ops/s
Iteration   4: 567890.504 ops/s
Iteration   5: 560299.175 ops/s
Iteration   6: 592020.123 ops/s
Iteration   7: 559401.312 ops/s
Iteration   8: 579872.816 ops/s
Iteration   9: 576727.311 ops/s
Iteration  10: 560195.551 ops/s
Iteration  11: 583253.036 ops/s
Iteration  12: 583892.102 ops/s
Iteration  13: 556176.980 ops/s
Iteration  14: 587240.953 ops/s
Iteration  15: 578678.937 ops/s
Iteration  16: 590552.927 ops/s
Iteration  17: 549849.733 ops/s
Iteration  18: 585190.995 ops/s
Iteration  19: 591748.497 ops/s
Iteration  20: 568609.018 ops/s
Iteration  21: 602880.840 ops/s
Iteration  22: 564808.108 ops/s
Iteration  23: 585815.447 ops/s
Iteration  24: 559468.085 ops/s
Iteration  25: 558522.240 ops/s
Iteration  26: 596432.898 ops/s
Iteration  27: 567423.630 ops/s
Iteration  28: 564998.980 ops/s
Iteration  29: 602217.714 ops/s
Iteration  30: 553395.877 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_immediateError2":
  575355.790 ±(99.9%) 9993.542 ops/s [Average]
  (min, avg, max) = (549849.733, 575355.790, 602880.840), stdev = 14957.864
  CI (99.9%): [565362.248, 585349.332] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_immediateError2  thrpt   30  575355.790 ± 9993.542  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_immediateError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_immediateError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54182.133 ops/s
# Warmup Iteration   2: 211133.773 ops/s
# Warmup Iteration   3: 478995.789 ops/s
# Warmup Iteration   4: 511236.808 ops/s
# Warmup Iteration   5: 480157.838 ops/s
# Warmup Iteration   6: 493516.891 ops/s
# Warmup Iteration   7: 550479.424 ops/s
# Warmup Iteration   8: 549257.999 ops/s
# Warmup Iteration   9: 557996.402 ops/s
# Warmup Iteration  10: 529590.460 ops/s
# Warmup Iteration  11: 561128.375 ops/s
# Warmup Iteration  12: 539010.978 ops/s
# Warmup Iteration  13: 544235.007 ops/s
# Warmup Iteration  14: 549914.154 ops/s
# Warmup Iteration  15: 536824.388 ops/s
# Warmup Iteration  16: 557850.632 ops/s
# Warmup Iteration  17: 554162.058 ops/s
# Warmup Iteration  18: 578567.880 ops/s
# Warmup Iteration  19: 575851.708 ops/s
# Warmup Iteration  20: 549041.465 ops/s
# Warmup Iteration  21: 580529.196 ops/s
# Warmup Iteration  22: 546429.789 ops/s
# Warmup Iteration  23: 567248.282 ops/s
# Warmup Iteration  24: 551488.615 ops/s
# Warmup Iteration  25: 548982.550 ops/s
# Warmup Iteration  26: 597292.150 ops/s
# Warmup Iteration  27: 572214.235 ops/s
# Warmup Iteration  28: 548996.349 ops/s
# Warmup Iteration  29: 581587.025 ops/s
# Warmup Iteration  30: 558363.846 ops/s
Iteration   1: 569521.359 ops/s
Iteration   2: 556011.200 ops/s
Iteration   3: 572299.594 ops/s
Iteration   4: 579094.231 ops/s
Iteration   5: 550857.858 ops/s
Iteration   6: 577010.118 ops/s
Iteration   7: 551433.299 ops/s
Iteration   8: 583831.722 ops/s
Iteration   9: 564073.885 ops/s
Iteration  10: 561811.155 ops/s
Iteration  11: 575966.359 ops/s
Iteration  12: 568862.892 ops/s
Iteration  13: 573924.310 ops/s
Iteration  14: 562909.224 ops/s
Iteration  15: 566599.509 ops/s
Iteration  16: 578698.656 ops/s
Iteration  17: 558331.793 ops/s
Iteration  18: 586611.653 ops/s
Iteration  19: 590636.825 ops/s
Iteration  20: 545042.688 ops/s
Iteration  21: 587184.905 ops/s
Iteration  22: 551448.609 ops/s
Iteration  23: 592947.939 ops/s
Iteration  24: 587206.287 ops/s
Iteration  25: 556071.552 ops/s
Iteration  26: 565078.855 ops/s
Iteration  27: 561126.112 ops/s
Iteration  28: 578246.057 ops/s
Iteration  29: 585031.739 ops/s
Iteration  30: 558033.043 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_immediateError":
  569863.448 ±(99.9%) 8932.739 ops/s [Average]
  (min, avg, max) = (545042.688, 569863.448, 592947.939), stdev = 13370.104
  CI (99.9%): [560930.709, 578796.186] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_immediateError  thrpt   30  569863.448 ± 8932.739  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24079.037 ops/s
# Warmup Iteration   2: 151532.573 ops/s
# Warmup Iteration   3: 183968.932 ops/s
# Warmup Iteration   4: 208212.484 ops/s
# Warmup Iteration   5: 204551.273 ops/s
# Warmup Iteration   6: 209073.305 ops/s
# Warmup Iteration   7: 200481.364 ops/s
# Warmup Iteration   8: 193659.017 ops/s
# Warmup Iteration   9: 176406.167 ops/s
# Warmup Iteration  10: 202205.684 ops/s
# Warmup Iteration  11: 198364.317 ops/s
# Warmup Iteration  12: 207908.013 ops/s
# Warmup Iteration  13: 200169.055 ops/s
# Warmup Iteration  14: 212808.427 ops/s
# Warmup Iteration  15: 198853.666 ops/s
# Warmup Iteration  16: 209774.752 ops/s
# Warmup Iteration  17: 208616.413 ops/s
# Warmup Iteration  18: 205487.857 ops/s
# Warmup Iteration  19: 224692.247 ops/s
# Warmup Iteration  20: 208564.053 ops/s
# Warmup Iteration  21: 217921.375 ops/s
# Warmup Iteration  22: 214080.830 ops/s
# Warmup Iteration  23: 212379.489 ops/s
# Warmup Iteration  24: 207947.012 ops/s
# Warmup Iteration  25: 208168.537 ops/s
# Warmup Iteration  26: 214190.992 ops/s
# Warmup Iteration  27: 209444.914 ops/s
# Warmup Iteration  28: 207222.736 ops/s
# Warmup Iteration  29: 219704.749 ops/s
# Warmup Iteration  30: 209815.577 ops/s
Iteration   1: 222632.859 ops/s
Iteration   2: 219302.590 ops/s
Iteration   3: 211896.052 ops/s
Iteration   4: 221329.439 ops/s
Iteration   5: 212762.377 ops/s
Iteration   6: 225194.274 ops/s
Iteration   7: 205790.307 ops/s
Iteration   8: 215547.829 ops/s
Iteration   9: 216335.044 ops/s
Iteration  10: 214883.050 ops/s
Iteration  11: 211461.569 ops/s
Iteration  12: 217117.086 ops/s
Iteration  13: 214433.387 ops/s
Iteration  14: 198733.874 ops/s
Iteration  15: 206851.573 ops/s
Iteration  16: 219450.441 ops/s
Iteration  17: 208431.975 ops/s
Iteration  18: 225019.809 ops/s
Iteration  19: 204869.669 ops/s
Iteration  20: 221373.332 ops/s
Iteration  21: 204519.184 ops/s
Iteration  22: 220001.623 ops/s
Iteration  23: 213072.279 ops/s
Iteration  24: 208368.167 ops/s
Iteration  25: 220002.056 ops/s
Iteration  26: 206990.860 ops/s
Iteration  27: 217688.813 ops/s
Iteration  28: 217335.379 ops/s
Iteration  29: 211228.736 ops/s
Iteration  30: 224586.548 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd":
  214573.673 ±(99.9%) 4579.157 ops/s [Average]
  (min, avg, max) = (198733.874, 214573.673, 225194.274), stdev = 6853.867
  CI (99.9%): [209994.516, 219152.830] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd  thrpt   30  214573.673 ± 4579.157  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26746.291 ops/s
# Warmup Iteration   2: 160252.221 ops/s
# Warmup Iteration   3: 194518.213 ops/s
# Warmup Iteration   4: 208185.776 ops/s
# Warmup Iteration   5: 199358.993 ops/s
# Warmup Iteration   6: 209312.785 ops/s
# Warmup Iteration   7: 200301.751 ops/s
# Warmup Iteration   8: 201280.475 ops/s
# Warmup Iteration   9: 203909.660 ops/s
# Warmup Iteration  10: 192483.934 ops/s
# Warmup Iteration  11: 204202.353 ops/s
# Warmup Iteration  12: 206517.819 ops/s
# Warmup Iteration  13: 200371.093 ops/s
# Warmup Iteration  14: 215764.483 ops/s
# Warmup Iteration  15: 193496.175 ops/s
# Warmup Iteration  16: 207100.246 ops/s
# Warmup Iteration  17: 212455.331 ops/s
# Warmup Iteration  18: 210876.274 ops/s
# Warmup Iteration  19: 217965.415 ops/s
# Warmup Iteration  20: 203873.316 ops/s
# Warmup Iteration  21: 208626.280 ops/s
# Warmup Iteration  22: 216093.466 ops/s
# Warmup Iteration  23: 209145.194 ops/s
# Warmup Iteration  24: 211721.308 ops/s
# Warmup Iteration  25: 208515.568 ops/s
# Warmup Iteration  26: 202430.478 ops/s
# Warmup Iteration  27: 220856.555 ops/s
# Warmup Iteration  28: 208168.170 ops/s
# Warmup Iteration  29: 214538.717 ops/s
# Warmup Iteration  30: 219988.452 ops/s
Iteration   1: 202346.528 ops/s
Iteration   2: 212083.609 ops/s
Iteration   3: 208778.305 ops/s
Iteration   4: 212226.886 ops/s
Iteration   5: 207047.422 ops/s
Iteration   6: 205772.715 ops/s
Iteration   7: 209703.639 ops/s
Iteration   8: 214294.259 ops/s
Iteration   9: 220168.973 ops/s
Iteration  10: 204826.494 ops/s
Iteration  11: 213355.678 ops/s
Iteration  12: 217929.957 ops/s
Iteration  13: 207557.330 ops/s
Iteration  14: 208418.043 ops/s
Iteration  15: 210957.656 ops/s
Iteration  16: 216086.863 ops/s
Iteration  17: 209323.937 ops/s
Iteration  18: 208268.633 ops/s
Iteration  19: 207323.714 ops/s
Iteration  20: 219181.174 ops/s
Iteration  21: 205987.625 ops/s
Iteration  22: 222317.908 ops/s
Iteration  23: 213595.654 ops/s
Iteration  24: 208983.989 ops/s
Iteration  25: 212006.759 ops/s
Iteration  26: 212180.093 ops/s
Iteration  27: 210147.763 ops/s
Iteration  28: 219567.688 ops/s
Iteration  29: 199087.476 ops/s
Iteration  30: 209084.610 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel":
  210953.713 ±(99.9%) 3584.864 ops/s [Average]
  (min, avg, max) = (199087.476, 210953.713, 222317.908), stdev = 5365.656
  CI (99.9%): [207368.849, 214538.576] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableConcatMapSingleTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  210953.713 ± 3584.864  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 672174.837 ops/s
# Warmup Iteration   2: 3819241.769 ops/s
# Warmup Iteration   3: 4128320.874 ops/s
# Warmup Iteration   4: 5655798.263 ops/s
# Warmup Iteration   5: 5481117.539 ops/s
# Warmup Iteration   6: 5580611.818 ops/s
# Warmup Iteration   7: 5607371.246 ops/s
# Warmup Iteration   8: 5584519.715 ops/s
# Warmup Iteration   9: 5766538.399 ops/s
# Warmup Iteration  10: 5573327.804 ops/s
# Warmup Iteration  11: 5720021.343 ops/s
# Warmup Iteration  12: 5537918.485 ops/s
# Warmup Iteration  13: 5509496.730 ops/s
# Warmup Iteration  14: 5717280.968 ops/s
# Warmup Iteration  15: 5481542.404 ops/s
# Warmup Iteration  16: 5727782.052 ops/s
# Warmup Iteration  17: 5670933.739 ops/s
# Warmup Iteration  18: 5604856.186 ops/s
# Warmup Iteration  19: 5709016.368 ops/s
# Warmup Iteration  20: 5575910.002 ops/s
# Warmup Iteration  21: 5676150.410 ops/s
# Warmup Iteration  22: 5742074.979 ops/s
# Warmup Iteration  23: 5572343.456 ops/s
# Warmup Iteration  24: 5614632.825 ops/s
# Warmup Iteration  25: 5700523.313 ops/s
# Warmup Iteration  26: 5766616.613 ops/s
# Warmup Iteration  27: 5737078.980 ops/s
# Warmup Iteration  28: 5604536.264 ops/s
# Warmup Iteration  29: 5727847.862 ops/s
# Warmup Iteration  30: 5382763.123 ops/s
Iteration   1: 5720255.699 ops/s
Iteration   2: 5863275.654 ops/s
Iteration   3: 5589739.338 ops/s
Iteration   4: 5695797.872 ops/s
Iteration   5: 5527491.362 ops/s
Iteration   6: 5712971.148 ops/s
Iteration   7: 5554051.139 ops/s
Iteration   8: 5765812.946 ops/s
Iteration   9: 5647994.408 ops/s
Iteration  10: 5544610.838 ops/s
Iteration  11: 5750389.208 ops/s
Iteration  12: 5416273.404 ops/s
Iteration  13: 5526353.672 ops/s
Iteration  14: 5753383.168 ops/s
Iteration  15: 5782944.936 ops/s
Iteration  16: 5391791.188 ops/s
Iteration  17: 5801990.608 ops/s
Iteration  18: 5528992.031 ops/s
Iteration  19: 5660839.743 ops/s
Iteration  20: 5785895.208 ops/s
Iteration  21: 5416393.061 ops/s
Iteration  22: 5880664.041 ops/s
Iteration  23: 5378758.281 ops/s
Iteration  24: 5643514.244 ops/s
Iteration  25: 5681443.313 ops/s
Iteration  26: 5680841.774 ops/s
Iteration  27: 5591256.725 ops/s
Iteration  28: 5653603.612 ops/s
Iteration  29: 5645449.406 ops/s
Iteration  30: 5565600.277 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_normal":
  5638612.610 ±(99.9%) 90343.348 ops/s [Average]
  (min, avg, max) = (5378758.281, 5638612.610, 5880664.041), stdev = 135221.680
  CI (99.9%): [5548269.262, 5728955.958] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_normal  thrpt   30  5638612.610 ± 90343.348  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_fusedNoSync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_fusedNoSync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 491012.021 ops/s
# Warmup Iteration   2: 3700514.642 ops/s
# Warmup Iteration   3: 5135728.629 ops/s
# Warmup Iteration   4: 5553034.060 ops/s
# Warmup Iteration   5: 5794603.362 ops/s
# Warmup Iteration   6: 5571493.670 ops/s
# Warmup Iteration   7: 5502078.044 ops/s
# Warmup Iteration   8: 5752464.016 ops/s
# Warmup Iteration   9: 5645827.149 ops/s
# Warmup Iteration  10: 5752513.329 ops/s
# Warmup Iteration  11: 5848362.985 ops/s
# Warmup Iteration  12: 5698684.737 ops/s
# Warmup Iteration  13: 5922437.412 ops/s
# Warmup Iteration  14: 5465481.065 ops/s
# Warmup Iteration  15: 5916237.005 ops/s
# Warmup Iteration  16: 5692910.341 ops/s
# Warmup Iteration  17: 5615076.880 ops/s
# Warmup Iteration  18: 5721115.877 ops/s
# Warmup Iteration  19: 5710740.360 ops/s
# Warmup Iteration  20: 5821551.534 ops/s
# Warmup Iteration  21: 5689335.545 ops/s
# Warmup Iteration  22: 5746231.923 ops/s
# Warmup Iteration  23: 5679365.753 ops/s
# Warmup Iteration  24: 5741139.877 ops/s
# Warmup Iteration  25: 5738047.213 ops/s
# Warmup Iteration  26: 5659178.550 ops/s
# Warmup Iteration  27: 5833126.207 ops/s
# Warmup Iteration  28: 5689411.442 ops/s
# Warmup Iteration  29: 5781563.135 ops/s
# Warmup Iteration  30: 5865962.968 ops/s
Iteration   1: 5829315.417 ops/s
Iteration   2: 5623309.918 ops/s
Iteration   3: 5960899.863 ops/s
Iteration   4: 5608341.678 ops/s
Iteration   5: 5822904.893 ops/s
Iteration   6: 5786456.871 ops/s
Iteration   7: 5690059.171 ops/s
Iteration   8: 5744486.686 ops/s
Iteration   9: 5691041.784 ops/s
Iteration  10: 5947720.665 ops/s
Iteration  11: 5694038.838 ops/s
Iteration  12: 5602862.653 ops/s
Iteration  13: 5940937.834 ops/s
Iteration  14: 5617150.924 ops/s
Iteration  15: 5691578.418 ops/s
Iteration  16: 5848232.292 ops/s
Iteration  17: 5741002.693 ops/s
Iteration  18: 5716462.578 ops/s
Iteration  19: 5995711.355 ops/s
Iteration  20: 5782380.145 ops/s
Iteration  21: 6181392.894 ops/s
Iteration  22: 5808969.006 ops/s
Iteration  23: 6362014.643 ops/s
Iteration  24: 5875446.161 ops/s
Iteration  25: 6207782.820 ops/s
Iteration  26: 5771104.616 ops/s
Iteration  27: 5841014.690 ops/s
Iteration  28: 6433747.918 ops/s
Iteration  29: 5738414.200 ops/s
Iteration  30: 4290079.343 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_fusedNoSync":
  5794828.699 ±(99.9%) 236415.422 ops/s [Average]
  (min, avg, max) = (4290079.343, 5794828.699, 6433747.918), stdev = 353855.500
  CI (99.9%): [5558413.277, 6031244.120] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_fusedNoSync  thrpt   30  5794828.699 ± 236415.422  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 753674.459 ops/s
# Warmup Iteration   2: 3322696.672 ops/s
# Warmup Iteration   3: 4445453.657 ops/s
# Warmup Iteration   4: 5857439.893 ops/s
# Warmup Iteration   5: 5164105.075 ops/s
# Warmup Iteration   6: 4987731.510 ops/s
# Warmup Iteration   7: 5224815.280 ops/s
# Warmup Iteration   8: 4955260.499 ops/s
# Warmup Iteration   9: 5058610.521 ops/s
# Warmup Iteration  10: 5229044.791 ops/s
# Warmup Iteration  11: 4955712.486 ops/s
# Warmup Iteration  12: 5232298.585 ops/s
# Warmup Iteration  13: 5019166.773 ops/s
# Warmup Iteration  14: 4997747.762 ops/s
# Warmup Iteration  15: 5204088.260 ops/s
# Warmup Iteration  16: 5067520.285 ops/s
# Warmup Iteration  17: 5197648.850 ops/s
# Warmup Iteration  18: 5047937.654 ops/s
# Warmup Iteration  19: 5204284.575 ops/s
# Warmup Iteration  20: 5228961.500 ops/s
# Warmup Iteration  21: 5095806.562 ops/s
# Warmup Iteration  22: 5045641.794 ops/s
# Warmup Iteration  23: 5094254.822 ops/s
# Warmup Iteration  24: 5026337.096 ops/s
# Warmup Iteration  25: 5324143.772 ops/s
# Warmup Iteration  26: 5078432.670 ops/s
# Warmup Iteration  27: 5160725.218 ops/s
# Warmup Iteration  28: 5081300.235 ops/s
# Warmup Iteration  29: 5064309.524 ops/s
# Warmup Iteration  30: 5133860.816 ops/s
Iteration   1: 4957880.243 ops/s
Iteration   2: 5272315.609 ops/s
Iteration   3: 4980489.531 ops/s
Iteration   4: 5092341.415 ops/s
Iteration   5: 5222393.564 ops/s
Iteration   6: 4891571.703 ops/s
Iteration   7: 5041187.973 ops/s
Iteration   8: 5064500.173 ops/s
Iteration   9: 4996994.642 ops/s
Iteration  10: 5298489.136 ops/s
Iteration  11: 5031197.248 ops/s
Iteration  12: 5177047.289 ops/s
Iteration  13: 4999328.223 ops/s
Iteration  14: 5306743.233 ops/s
Iteration  15: 5002559.594 ops/s
Iteration  16: 5151482.400 ops/s
Iteration  17: 5168509.942 ops/s
Iteration  18: 5005689.105 ops/s
Iteration  19: 5146792.300 ops/s
Iteration  20: 5159209.724 ops/s
Iteration  21: 5158268.313 ops/s
Iteration  22: 5112129.753 ops/s
Iteration  23: 5274722.437 ops/s
Iteration  24: 5271660.418 ops/s
Iteration  25: 5104955.468 ops/s
Iteration  26: 5166132.903 ops/s
Iteration  27: 5010790.710 ops/s
Iteration  28: 5247937.284 ops/s
Iteration  29: 5006585.127 ops/s
Iteration  30: 5077339.459 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_take":
  5113241.497 ±(99.9%) 75884.774 ops/s [Average]
  (min, avg, max) = (4891571.703, 5113241.497, 5306743.233), stdev = 113580.766
  CI (99.9%): [5037356.724, 5189126.271] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_take  thrpt   30  5113241.497 ± 75884.774  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 311005.667 ops/s
# Warmup Iteration   2: 2908500.671 ops/s
# Warmup Iteration   3: 5065344.732 ops/s
# Warmup Iteration   4: 5359872.796 ops/s
# Warmup Iteration   5: 4618192.318 ops/s
# Warmup Iteration   6: 5222665.539 ops/s
# Warmup Iteration   7: 5437888.560 ops/s
# Warmup Iteration   8: 5190968.601 ops/s
# Warmup Iteration   9: 5171994.975 ops/s
# Warmup Iteration  10: 5503755.216 ops/s
# Warmup Iteration  11: 5362392.707 ops/s
# Warmup Iteration  12: 5167093.926 ops/s
# Warmup Iteration  13: 5502263.804 ops/s
# Warmup Iteration  14: 5345576.321 ops/s
# Warmup Iteration  15: 5219262.942 ops/s
# Warmup Iteration  16: 5417780.337 ops/s
# Warmup Iteration  17: 5228482.587 ops/s
# Warmup Iteration  18: 5282700.773 ops/s
# Warmup Iteration  19: 5376120.697 ops/s
# Warmup Iteration  20: 5116685.312 ops/s
# Warmup Iteration  21: 5461417.695 ops/s
# Warmup Iteration  22: 5317276.629 ops/s
# Warmup Iteration  23: 5249637.629 ops/s
# Warmup Iteration  24: 5261521.963 ops/s
# Warmup Iteration  25: 5260187.366 ops/s
# Warmup Iteration  26: 5304296.915 ops/s
# Warmup Iteration  27: 5297221.050 ops/s
# Warmup Iteration  28: 5205808.379 ops/s
# Warmup Iteration  29: 5252119.307 ops/s
# Warmup Iteration  30: 5545153.069 ops/s
Iteration   1: 5201483.531 ops/s
Iteration   2: 5159656.908 ops/s
Iteration   3: 5339053.817 ops/s
Iteration   4: 5314008.414 ops/s
Iteration   5: 5249989.796 ops/s
Iteration   6: 5509921.471 ops/s
Iteration   7: 5529383.482 ops/s
Iteration   8: 5193899.954 ops/s
Iteration   9: 5514120.618 ops/s
Iteration  10: 5184766.290 ops/s
Iteration  11: 5393916.702 ops/s
Iteration  12: 5309366.112 ops/s
Iteration  13: 5135457.342 ops/s
Iteration  14: 5538429.123 ops/s
Iteration  15: 5284712.965 ops/s
Iteration  16: 5572768.536 ops/s
Iteration  17: 5260126.066 ops/s
Iteration  18: 5499817.818 ops/s
Iteration  19: 5261263.528 ops/s
Iteration  20: 5457559.143 ops/s
Iteration  21: 5266784.234 ops/s
Iteration  22: 5518777.708 ops/s
Iteration  23: 5239101.431 ops/s
Iteration  24: 5205190.390 ops/s
Iteration  25: 4202493.635 ops/s
Iteration  26: 5113006.350 ops/s
Iteration  27: 5409202.332 ops/s
Iteration  28: 5267517.357 ops/s
Iteration  29: 5347036.167 ops/s
Iteration  30: 5340823.311 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_fused":
  5293987.818 ±(99.9%) 164260.378 ops/s [Average]
  (min, avg, max) = (4202493.635, 5293987.818, 5572768.536), stdev = 245857.220
  CI (99.9%): [5129727.439, 5458248.196] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_fused  thrpt   30  5293987.818 ± 164260.378  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_nextCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_nextCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161048.411 ops/s
# Warmup Iteration   2: 514286.892 ops/s
# Warmup Iteration   3: 533700.688 ops/s
# Warmup Iteration   4: 589209.956 ops/s
# Warmup Iteration   5: 541637.422 ops/s
# Warmup Iteration   6: 598384.712 ops/s
# Warmup Iteration   7: 498372.461 ops/s
# Warmup Iteration   8: 592136.841 ops/s
# Warmup Iteration   9: 572818.398 ops/s
# Warmup Iteration  10: 589431.048 ops/s
# Warmup Iteration  11: 601604.659 ops/s
# Warmup Iteration  12: 583091.995 ops/s
# Warmup Iteration  13: 611778.770 ops/s
# Warmup Iteration  14: 576028.243 ops/s
# Warmup Iteration  15: 591197.500 ops/s
# Warmup Iteration  16: 606598.395 ops/s
# Warmup Iteration  17: 605038.996 ops/s
# Warmup Iteration  18: 610109.094 ops/s
# Warmup Iteration  19: 620127.359 ops/s
# Warmup Iteration  20: 608158.311 ops/s
# Warmup Iteration  21: 614112.873 ops/s
# Warmup Iteration  22: 599873.806 ops/s
# Warmup Iteration  23: 629023.175 ops/s
# Warmup Iteration  24: 592348.195 ops/s
# Warmup Iteration  25: 630744.101 ops/s
# Warmup Iteration  26: 629481.385 ops/s
# Warmup Iteration  27: 596008.671 ops/s
# Warmup Iteration  28: 621848.658 ops/s
# Warmup Iteration  29: 610608.035 ops/s
# Warmup Iteration  30: 605724.336 ops/s
Iteration   1: 632854.963 ops/s
Iteration   2: 612487.635 ops/s
Iteration   3: 636144.053 ops/s
Iteration   4: 597199.202 ops/s
Iteration   5: 616157.509 ops/s
Iteration   6: 614544.840 ops/s
Iteration   7: 621432.524 ops/s
Iteration   8: 611498.495 ops/s
Iteration   9: 624094.843 ops/s
Iteration  10: 601915.002 ops/s
Iteration  11: 626373.176 ops/s
Iteration  12: 633685.151 ops/s
Iteration  13: 595550.163 ops/s
Iteration  14: 609266.386 ops/s
Iteration  15: 625253.027 ops/s
Iteration  16: 610641.269 ops/s
Iteration  17: 625831.654 ops/s
Iteration  18: 597991.431 ops/s
Iteration  19: 631068.443 ops/s
Iteration  20: 613171.324 ops/s
Iteration  21: 623346.871 ops/s
Iteration  22: 634468.172 ops/s
Iteration  23: 602330.620 ops/s
Iteration  24: 622419.503 ops/s
Iteration  25: 596889.966 ops/s
Iteration  26: 622904.585 ops/s
Iteration  27: 604541.949 ops/s
Iteration  28: 615160.516 ops/s
Iteration  29: 634151.388 ops/s
Iteration  30: 624555.920 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_nextCrash":
  617264.353 ±(99.9%) 8367.264 ops/s [Average]
  (min, avg, max) = (595550.163, 617264.353, 636144.053), stdev = 12523.728
  CI (99.9%): [608897.089, 625631.617] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_nextCrash  thrpt   30  617264.353 ± 8367.264  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76573.862 ops/s
# Warmup Iteration   2: 490351.856 ops/s
# Warmup Iteration   3: 531152.211 ops/s
# Warmup Iteration   4: 522448.722 ops/s
# Warmup Iteration   5: 527112.736 ops/s
# Warmup Iteration   6: 608466.061 ops/s
# Warmup Iteration   7: 587683.331 ops/s
# Warmup Iteration   8: 571966.162 ops/s
# Warmup Iteration   9: 592651.482 ops/s
# Warmup Iteration  10: 561935.863 ops/s
# Warmup Iteration  11: 582746.502 ops/s
# Warmup Iteration  12: 567212.227 ops/s
# Warmup Iteration  13: 578094.092 ops/s
# Warmup Iteration  14: 582845.911 ops/s
# Warmup Iteration  15: 573721.112 ops/s
# Warmup Iteration  16: 598912.075 ops/s
# Warmup Iteration  17: 613703.644 ops/s
# Warmup Iteration  18: 576210.373 ops/s
# Warmup Iteration  19: 625682.201 ops/s
# Warmup Iteration  20: 606774.519 ops/s
# Warmup Iteration  21: 591579.740 ops/s
# Warmup Iteration  22: 605318.638 ops/s
# Warmup Iteration  23: 588551.461 ops/s
# Warmup Iteration  24: 607460.046 ops/s
# Warmup Iteration  25: 614567.732 ops/s
# Warmup Iteration  26: 594491.411 ops/s
# Warmup Iteration  27: 624053.409 ops/s
# Warmup Iteration  28: 599095.564 ops/s
# Warmup Iteration  29: 600330.103 ops/s
# Warmup Iteration  30: 610322.341 ops/s
Iteration   1: 599333.630 ops/s
Iteration   2: 589951.956 ops/s
Iteration   3: 607359.473 ops/s
Iteration   4: 580855.337 ops/s
Iteration   5: 624684.545 ops/s
Iteration   6: 591067.108 ops/s
Iteration   7: 602614.349 ops/s
Iteration   8: 615049.851 ops/s
Iteration   9: 613460.314 ops/s
Iteration  10: 612285.386 ops/s
Iteration  11: 605804.365 ops/s
Iteration  12: 611462.043 ops/s
Iteration  13: 600892.439 ops/s
Iteration  14: 602367.909 ops/s
Iteration  15: 619410.570 ops/s
Iteration  16: 569333.776 ops/s
Iteration  17: 607933.267 ops/s
Iteration  18: 586024.061 ops/s
Iteration  19: 520023.259 ops/s
Iteration  20: 523128.023 ops/s
Iteration  21: 599343.946 ops/s
Iteration  22: 621005.314 ops/s
Iteration  23: 632506.587 ops/s
Iteration  24: 576366.817 ops/s
Iteration  25: 591646.947 ops/s
Iteration  26: 600047.187 ops/s
Iteration  27: 590994.368 ops/s
Iteration  28: 603506.074 ops/s
Iteration  29: 591503.788 ops/s
Iteration  30: 578646.261 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash2":
  595620.298 ±(99.9%) 16646.006 ops/s [Average]
  (min, avg, max) = (520023.259, 595620.298, 632506.587), stdev = 24914.959
  CI (99.9%): [578974.293, 612266.304] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash2  thrpt   30  595620.298 ± 16646.006  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3629375.992 ops/s
# Warmup Iteration   2: 8498721.288 ops/s
# Warmup Iteration   3: 13051287.870 ops/s
# Warmup Iteration   4: 13130836.331 ops/s
# Warmup Iteration   5: 12639078.852 ops/s
# Warmup Iteration   6: 12881964.338 ops/s
# Warmup Iteration   7: 13221314.556 ops/s
# Warmup Iteration   8: 12701352.883 ops/s
# Warmup Iteration   9: 13333584.971 ops/s
# Warmup Iteration  10: 12878670.003 ops/s
# Warmup Iteration  11: 12857630.377 ops/s
# Warmup Iteration  12: 13478490.874 ops/s
# Warmup Iteration  13: 12804496.835 ops/s
# Warmup Iteration  14: 13262631.480 ops/s
# Warmup Iteration  15: 12571992.116 ops/s
# Warmup Iteration  16: 13538831.613 ops/s
# Warmup Iteration  17: 12895293.223 ops/s
# Warmup Iteration  18: 12870901.961 ops/s
# Warmup Iteration  19: 13509424.091 ops/s
# Warmup Iteration  20: 12713188.288 ops/s
# Warmup Iteration  21: 13235081.211 ops/s
# Warmup Iteration  22: 13100196.755 ops/s
# Warmup Iteration  23: 13544994.018 ops/s
# Warmup Iteration  24: 12925237.815 ops/s
# Warmup Iteration  25: 12751125.077 ops/s
# Warmup Iteration  26: 13666339.183 ops/s
# Warmup Iteration  27: 13571091.751 ops/s
# Warmup Iteration  28: 12790502.996 ops/s
# Warmup Iteration  29: 13574882.114 ops/s
# Warmup Iteration  30: 12888864.571 ops/s
Iteration   1: 13026822.061 ops/s
Iteration   2: 12940211.847 ops/s
Iteration   3: 12865955.150 ops/s
Iteration   4: 13239134.712 ops/s
Iteration   5: 12773307.991 ops/s
Iteration   6: 13293392.880 ops/s
Iteration   7: 13154702.038 ops/s
Iteration   8: 13357683.670 ops/s
Iteration   9: 12962063.801 ops/s
Iteration  10: 13335450.970 ops/s
Iteration  11: 13319252.242 ops/s
Iteration  12: 12946288.340 ops/s
Iteration  13: 13265061.297 ops/s
Iteration  14: 13174078.348 ops/s
Iteration  15: 12836349.148 ops/s
Iteration  16: 13482325.107 ops/s
Iteration  17: 12763620.662 ops/s
Iteration  18: 13437184.295 ops/s
Iteration  19: 13317570.944 ops/s
Iteration  20: 12960947.736 ops/s
Iteration  21: 13009479.581 ops/s
Iteration  22: 12996689.182 ops/s
Iteration  23: 13428921.516 ops/s
Iteration  24: 12947628.677 ops/s
Iteration  25: 12851897.430 ops/s
Iteration  26: 13150489.295 ops/s
Iteration  27: 12724791.332 ops/s
Iteration  28: 13322251.587 ops/s
Iteration  29: 12928922.029 ops/s
Iteration  30: 13525538.211 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_dispose":
  13111267.069 ±(99.9%) 157799.238 ops/s [Average]
  (min, avg, max) = (12724791.332, 13111267.069, 13525538.211), stdev = 236186.489
  CI (99.9%): [12953467.831, 13269066.307] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_dispose  thrpt   30  13111267.069 ± 157799.238  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fusedEmptyCheck$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fusedEmptyCheck

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2410821.504 ops/s
# Warmup Iteration   2: 6814979.508 ops/s
# Warmup Iteration   3: 10480595.817 ops/s
# Warmup Iteration   4: 9867063.902 ops/s
# Warmup Iteration   5: 9850804.608 ops/s
# Warmup Iteration   6: 10391201.767 ops/s
# Warmup Iteration   7: 10020557.093 ops/s
# Warmup Iteration   8: 10431985.361 ops/s
# Warmup Iteration   9: 9886105.671 ops/s
# Warmup Iteration  10: 9966367.243 ops/s
# Warmup Iteration  11: 10279297.461 ops/s
# Warmup Iteration  12: 9857790.794 ops/s
# Warmup Iteration  13: 10075475.620 ops/s
# Warmup Iteration  14: 10180066.927 ops/s
# Warmup Iteration  15: 10072212.073 ops/s
# Warmup Iteration  16: 10322200.728 ops/s
# Warmup Iteration  17: 10328602.179 ops/s
# Warmup Iteration  18: 10052898.869 ops/s
# Warmup Iteration  19: 10194096.700 ops/s
# Warmup Iteration  20: 10206617.575 ops/s
# Warmup Iteration  21: 10168332.254 ops/s
# Warmup Iteration  22: 10004349.956 ops/s
# Warmup Iteration  23: 10072152.542 ops/s
# Warmup Iteration  24: 10256142.583 ops/s
# Warmup Iteration  25: 10580990.592 ops/s
# Warmup Iteration  26: 10178840.260 ops/s
# Warmup Iteration  27: 9894187.353 ops/s
# Warmup Iteration  28: 10506916.718 ops/s
# Warmup Iteration  29: 9952457.685 ops/s
# Warmup Iteration  30: 10384517.784 ops/s
Iteration   1: 10283103.100 ops/s
Iteration   2: 10234419.064 ops/s
Iteration   3: 10270239.070 ops/s
Iteration   4: 10272477.359 ops/s
Iteration   5: 10076886.508 ops/s
Iteration   6: 10078533.680 ops/s
Iteration   7: 10512885.746 ops/s
Iteration   8: 10128928.362 ops/s
Iteration   9: 9887201.025 ops/s
Iteration  10: 10619144.361 ops/s
Iteration  11: 10097183.040 ops/s
Iteration  12: 10709003.346 ops/s
Iteration  13: 10368096.801 ops/s
Iteration  14: 8252078.263 ops/s
Iteration  15: 10032620.062 ops/s
Iteration  16: 10678230.246 ops/s
Iteration  17: 9884072.816 ops/s
Iteration  18: 10483632.328 ops/s
Iteration  19: 9610040.000 ops/s
Iteration  20: 10383856.702 ops/s
Iteration  21: 10033080.183 ops/s
Iteration  22: 10046499.343 ops/s
Iteration  23: 10293838.876 ops/s
Iteration  24: 9954406.560 ops/s
Iteration  25: 10527303.342 ops/s
Iteration  26: 9945034.059 ops/s
Iteration  27: 10544120.082 ops/s
Iteration  28: 10018839.666 ops/s
Iteration  29: 10251773.833 ops/s
Iteration  30: 9826711.610 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fusedEmptyCheck":
  10143474.648 ±(99.9%) 299455.492 ops/s [Average]
  (min, avg, max) = (8252078.263, 10143474.648, 10709003.346), stdev = 448210.916
  CI (99.9%): [9844019.156, 10442930.139] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt         Score        Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_fusedEmptyCheck  thrpt   30  10143474.648 ± 299455.492  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_iteratorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_iteratorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 79020.201 ops/s
# Warmup Iteration   2: 488601.873 ops/s
# Warmup Iteration   3: 548977.114 ops/s
# Warmup Iteration   4: 557925.775 ops/s
# Warmup Iteration   5: 517487.671 ops/s
# Warmup Iteration   6: 585455.652 ops/s
# Warmup Iteration   7: 570821.850 ops/s
# Warmup Iteration   8: 555674.893 ops/s
# Warmup Iteration   9: 604958.273 ops/s
# Warmup Iteration  10: 562524.445 ops/s
# Warmup Iteration  11: 580340.089 ops/s
# Warmup Iteration  12: 593995.776 ops/s
# Warmup Iteration  13: 588155.885 ops/s
# Warmup Iteration  14: 599866.829 ops/s
# Warmup Iteration  15: 576460.750 ops/s
# Warmup Iteration  16: 575487.650 ops/s
# Warmup Iteration  17: 620524.304 ops/s
# Warmup Iteration  18: 611964.823 ops/s
# Warmup Iteration  19: 604697.396 ops/s
# Warmup Iteration  20: 600190.651 ops/s
# Warmup Iteration  21: 611723.960 ops/s
# Warmup Iteration  22: 627803.572 ops/s
# Warmup Iteration  23: 610175.414 ops/s
# Warmup Iteration  24: 598222.211 ops/s
# Warmup Iteration  25: 609449.466 ops/s
# Warmup Iteration  26: 618984.871 ops/s
# Warmup Iteration  27: 596651.199 ops/s
# Warmup Iteration  28: 623747.380 ops/s
# Warmup Iteration  29: 587568.479 ops/s
# Warmup Iteration  30: 596365.381 ops/s
Iteration   1: 613870.965 ops/s
Iteration   2: 597758.236 ops/s
Iteration   3: 625388.441 ops/s
Iteration   4: 574403.231 ops/s
Iteration   5: 607355.429 ops/s
Iteration   6: 592269.120 ops/s
Iteration   7: 628985.691 ops/s
Iteration   8: 597264.486 ops/s
Iteration   9: 625657.253 ops/s
Iteration  10: 627598.427 ops/s
Iteration  11: 582990.644 ops/s
Iteration  12: 631174.201 ops/s
Iteration  13: 594114.818 ops/s
Iteration  14: 618139.737 ops/s
Iteration  15: 605787.980 ops/s
Iteration  16: 602004.360 ops/s
Iteration  17: 640232.073 ops/s
Iteration  18: 604651.045 ops/s
Iteration  19: 616958.701 ops/s
Iteration  20: 631452.907 ops/s
Iteration  21: 577933.155 ops/s
Iteration  22: 618503.823 ops/s
Iteration  23: 621833.393 ops/s
Iteration  24: 612267.250 ops/s
Iteration  25: 601928.035 ops/s
Iteration  26: 624134.416 ops/s
Iteration  27: 627144.264 ops/s
Iteration  28: 589173.489 ops/s
Iteration  29: 630087.552 ops/s
Iteration  30: 599226.027 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_iteratorCrash":
  610676.305 ±(99.9%) 11665.623 ops/s [Average]
  (min, avg, max) = (574403.231, 610676.305, 640232.073), stdev = 17460.557
  CI (99.9%): [599010.682, 622341.928] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_iteratorCrash  thrpt   30  610676.305 ± 11665.623  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 96083.285 ops/s
# Warmup Iteration   2: 499713.800 ops/s
# Warmup Iteration   3: 563537.597 ops/s
# Warmup Iteration   4: 599808.088 ops/s
# Warmup Iteration   5: 599752.312 ops/s
# Warmup Iteration   6: 563695.924 ops/s
# Warmup Iteration   7: 575777.059 ops/s
# Warmup Iteration   8: 589754.500 ops/s
# Warmup Iteration   9: 571110.452 ops/s
# Warmup Iteration  10: 586298.135 ops/s
# Warmup Iteration  11: 576488.652 ops/s
# Warmup Iteration  12: 562859.803 ops/s
# Warmup Iteration  13: 600675.450 ops/s
# Warmup Iteration  14: 582088.686 ops/s
# Warmup Iteration  15: 617393.201 ops/s
# Warmup Iteration  16: 577852.398 ops/s
# Warmup Iteration  17: 599510.895 ops/s
# Warmup Iteration  18: 625091.823 ops/s
# Warmup Iteration  19: 601010.244 ops/s
# Warmup Iteration  20: 619833.117 ops/s
# Warmup Iteration  21: 589935.602 ops/s
# Warmup Iteration  22: 623324.837 ops/s
# Warmup Iteration  23: 608674.690 ops/s
# Warmup Iteration  24: 609170.453 ops/s
# Warmup Iteration  25: 626645.581 ops/s
# Warmup Iteration  26: 606007.519 ops/s
# Warmup Iteration  27: 626321.732 ops/s
# Warmup Iteration  28: 604415.253 ops/s
# Warmup Iteration  29: 620838.864 ops/s
# Warmup Iteration  30: 616455.479 ops/s
Iteration   1: 607716.989 ops/s
Iteration   2: 618377.383 ops/s
Iteration   3: 595715.033 ops/s
Iteration   4: 604082.753 ops/s
Iteration   5: 617385.434 ops/s
Iteration   6: 622834.241 ops/s
Iteration   7: 633234.808 ops/s
Iteration   8: 596377.576 ops/s
Iteration   9: 503399.257 ops/s
Iteration  10: 595707.422 ops/s
Iteration  11: 619318.507 ops/s
Iteration  12: 606964.538 ops/s
Iteration  13: 623920.431 ops/s
Iteration  14: 633950.112 ops/s
Iteration  15: 615119.178 ops/s
Iteration  16: 601239.628 ops/s
Iteration  17: 633000.283 ops/s
Iteration  18: 612559.278 ops/s
Iteration  19: 613342.376 ops/s
Iteration  20: 625205.039 ops/s
Iteration  21: 612977.992 ops/s
Iteration  22: 640024.653 ops/s
Iteration  23: 621147.442 ops/s
Iteration  24: 622437.916 ops/s
Iteration  25: 637404.843 ops/s
Iteration  26: 607198.508 ops/s
Iteration  27: 617651.675 ops/s
Iteration  28: 609974.466 ops/s
Iteration  29: 602652.113 ops/s
Iteration  30: 648414.991 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash":
  613311.162 ±(99.9%) 16542.625 ops/s [Average]
  (min, avg, max) = (503399.257, 613311.162, 648414.991), stdev = 24760.224
  CI (99.9%): [596768.537, 629853.787] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash  thrpt   30  613311.162 ± 16542.625  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 956348.012 ops/s
# Warmup Iteration   2: 4392030.996 ops/s
# Warmup Iteration   3: 6753107.939 ops/s
# Warmup Iteration   4: 6552789.213 ops/s
# Warmup Iteration   5: 7003914.999 ops/s
# Warmup Iteration   6: 6582985.315 ops/s
# Warmup Iteration   7: 6660349.666 ops/s
# Warmup Iteration   8: 6903387.657 ops/s
# Warmup Iteration   9: 6582622.769 ops/s
# Warmup Iteration  10: 6662226.000 ops/s
# Warmup Iteration  11: 6839495.589 ops/s
# Warmup Iteration  12: 6643810.208 ops/s
# Warmup Iteration  13: 6678619.131 ops/s
# Warmup Iteration  14: 6748598.471 ops/s
# Warmup Iteration  15: 6694212.506 ops/s
# Warmup Iteration  16: 7017600.397 ops/s
# Warmup Iteration  17: 6526783.308 ops/s
# Warmup Iteration  18: 6985352.607 ops/s
# Warmup Iteration  19: 6713407.983 ops/s
# Warmup Iteration  20: 6762613.052 ops/s
# Warmup Iteration  21: 6914381.844 ops/s
# Warmup Iteration  22: 6804922.397 ops/s
# Warmup Iteration  23: 6810594.774 ops/s
# Warmup Iteration  24: 6661758.175 ops/s
# Warmup Iteration  25: 6954096.611 ops/s
# Warmup Iteration  26: 6709541.117 ops/s
# Warmup Iteration  27: 6824490.532 ops/s
# Warmup Iteration  28: 7072672.219 ops/s
# Warmup Iteration  29: 6935166.154 ops/s
# Warmup Iteration  30: 6633125.944 ops/s
Iteration   1: 6903581.434 ops/s
Iteration   2: 7079895.427 ops/s
Iteration   3: 6691603.482 ops/s
Iteration   4: 6663760.524 ops/s
Iteration   5: 6875426.222 ops/s
Iteration   6: 7053846.082 ops/s
Iteration   7: 6708115.939 ops/s
Iteration   8: 6622956.881 ops/s
Iteration   9: 6953296.402 ops/s
Iteration  10: 6985842.558 ops/s
Iteration  11: 6741223.306 ops/s
Iteration  12: 6797613.682 ops/s
Iteration  13: 7015108.199 ops/s
Iteration  14: 6453034.415 ops/s
Iteration  15: 6778828.893 ops/s
Iteration  16: 7007262.282 ops/s
Iteration  17: 6808186.559 ops/s
Iteration  18: 6916195.932 ops/s
Iteration  19: 6641500.930 ops/s
Iteration  20: 6884635.561 ops/s
Iteration  21: 7129775.891 ops/s
Iteration  22: 7145258.613 ops/s
Iteration  23: 6571745.120 ops/s
Iteration  24: 6980417.515 ops/s
Iteration  25: 6639119.314 ops/s
Iteration  26: 6946945.847 ops/s
Iteration  27: 6923752.494 ops/s
Iteration  28: 6971553.373 ops/s
Iteration  29: 6583251.021 ops/s
Iteration  30: 7015492.105 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successEmpty":
  6849640.867 ±(99.9%) 122254.971 ops/s [Average]
  (min, avg, max) = (6453034.415, 6849640.867, 7145258.613), stdev = 182985.500
  CI (99.9%): [6727385.895, 6971895.838] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successEmpty  thrpt   30  6849640.867 ± 122254.971  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1522861.524 ops/s
# Warmup Iteration   2: 8095477.953 ops/s
# Warmup Iteration   3: 9613956.577 ops/s
# Warmup Iteration   4: 11182428.543 ops/s
# Warmup Iteration   5: 11170761.985 ops/s
# Warmup Iteration   6: 10934524.376 ops/s
# Warmup Iteration   7: 10714292.488 ops/s
# Warmup Iteration   8: 11210253.351 ops/s
# Warmup Iteration   9: 10886172.020 ops/s
# Warmup Iteration  10: 11191808.370 ops/s
# Warmup Iteration  11: 10580895.019 ops/s
# Warmup Iteration  12: 11152446.943 ops/s
# Warmup Iteration  13: 10597365.845 ops/s
# Warmup Iteration  14: 11380317.049 ops/s
# Warmup Iteration  15: 10639757.002 ops/s
# Warmup Iteration  16: 10894724.285 ops/s
# Warmup Iteration  17: 11470334.847 ops/s
# Warmup Iteration  18: 10816828.417 ops/s
# Warmup Iteration  19: 11278563.087 ops/s
# Warmup Iteration  20: 11036034.632 ops/s
# Warmup Iteration  21: 11092771.721 ops/s
# Warmup Iteration  22: 11021092.555 ops/s
# Warmup Iteration  23: 11076180.158 ops/s
# Warmup Iteration  24: 10802200.248 ops/s
# Warmup Iteration  25: 10759260.679 ops/s
# Warmup Iteration  26: 11422391.172 ops/s
# Warmup Iteration  27: 11042278.007 ops/s
# Warmup Iteration  28: 10905963.919 ops/s
# Warmup Iteration  29: 11433521.427 ops/s
# Warmup Iteration  30: 10776890.253 ops/s
Iteration   1: 11311099.213 ops/s
Iteration   2: 10767214.838 ops/s
Iteration   3: 10597402.627 ops/s
Iteration   4: 9854275.520 ops/s
Iteration   5: 11093068.543 ops/s
Iteration   6: 11224437.370 ops/s
Iteration   7: 10979383.794 ops/s
Iteration   8: 11225723.286 ops/s
Iteration   9: 10892281.232 ops/s
Iteration  10: 11218619.627 ops/s
Iteration  11: 11283255.186 ops/s
Iteration  12: 11011035.412 ops/s
Iteration  13: 11406807.157 ops/s
Iteration  14: 11086447.861 ops/s
Iteration  15: 10895339.329 ops/s
Iteration  16: 11193000.366 ops/s
Iteration  17: 11047418.033 ops/s
Iteration  18: 11596536.979 ops/s
Iteration  19: 10827909.353 ops/s
Iteration  20: 11048187.658 ops/s
Iteration  21: 11240728.541 ops/s
Iteration  22: 11283625.505 ops/s
Iteration  23: 10841172.669 ops/s
Iteration  24: 11501780.029 ops/s
Iteration  25: 11198659.988 ops/s
Iteration  26: 11467069.757 ops/s
Iteration  27: 10786893.822 ops/s
Iteration  28: 11565093.580 ops/s
Iteration  29: 11148650.154 ops/s
Iteration  30: 11008144.951 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_isDisposed":
  11086708.746 ±(99.9%) 226108.839 ops/s [Average]
  (min, avg, max) = (9854275.520, 11086708.746, 11596536.979), stdev = 338429.092
  CI (99.9%): [10860599.907, 11312817.585] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt         Score        Error  Units
SingleFlatMapObservableTest._Benchmark.benchmark_isDisposed  thrpt   30  11086708.746 ± 226108.839  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_issue1522$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_issue1522

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3344153.878 ops/s
# Warmup Iteration   2: 9739879.241 ops/s
# Warmup Iteration   3: 13938926.244 ops/s
# Warmup Iteration   4: 13605658.868 ops/s
# Warmup Iteration   5: 13971677.201 ops/s
# Warmup Iteration   6: 13466852.417 ops/s
# Warmup Iteration   7: 13407964.882 ops/s
# Warmup Iteration   8: 14072596.956 ops/s
# Warmup Iteration   9: 13557229.376 ops/s
# Warmup Iteration  10: 13587777.645 ops/s
# Warmup Iteration  11: 14059316.524 ops/s
# Warmup Iteration  12: 13675707.243 ops/s
# Warmup Iteration  13: 14241714.217 ops/s
# Warmup Iteration  14: 13353445.074 ops/s
# Warmup Iteration  15: 13603127.322 ops/s
# Warmup Iteration  16: 14295355.683 ops/s
# Warmup Iteration  17: 13769996.690 ops/s
# Warmup Iteration  18: 14248029.703 ops/s
# Warmup Iteration  19: 13941743.575 ops/s
# Warmup Iteration  20: 13582942.623 ops/s
# Warmup Iteration  21: 14340593.541 ops/s
# Warmup Iteration  22: 13600574.654 ops/s
# Warmup Iteration  23: 14133202.922 ops/s
# Warmup Iteration  24: 13395045.712 ops/s
# Warmup Iteration  25: 14018230.480 ops/s
# Warmup Iteration  26: 14188566.159 ops/s
# Warmup Iteration  27: 13622521.252 ops/s
# Warmup Iteration  28: 14404561.690 ops/s
# Warmup Iteration  29: 13677730.690 ops/s
# Warmup Iteration  30: 14104766.194 ops/s
Iteration   1: 13919536.978 ops/s
Iteration   2: 13339575.084 ops/s
Iteration   3: 14261679.884 ops/s
Iteration   4: 13380837.576 ops/s
Iteration   5: 13702120.036 ops/s
Iteration   6: 14348700.141 ops/s
Iteration   7: 13560296.673 ops/s
Iteration   8: 14468915.105 ops/s
Iteration   9: 14388491.265 ops/s
Iteration  10: 13574038.589 ops/s
Iteration  11: 13998670.880 ops/s
Iteration  12: 13334442.897 ops/s
Iteration  13: 14366370.951 ops/s
Iteration  14: 14231135.966 ops/s
Iteration  15: 14253215.504 ops/s
Iteration  16: 13492344.576 ops/s
Iteration  17: 14398792.337 ops/s
Iteration  18: 13618943.652 ops/s
Iteration  19: 14480091.309 ops/s
Iteration  20: 13274375.047 ops/s
Iteration  21: 14150283.091 ops/s
Iteration  22: 13586156.342 ops/s
Iteration  23: 14146240.925 ops/s
Iteration  24: 14481962.948 ops/s
Iteration  25: 13483633.717 ops/s
Iteration  26: 14469770.627 ops/s
Iteration  27: 14409349.459 ops/s
Iteration  28: 13232735.867 ops/s
Iteration  29: 13987880.464 ops/s
Iteration  30: 13785927.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_issue1522":
  13937550.518 ±(99.9%) 290540.491 ops/s [Average]
  (min, avg, max) = (13232735.867, 13937550.518, 14481962.948), stdev = 434867.361
  CI (99.9%): [13647010.027, 14228091.008] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt         Score        Error  Units
ObservableTakeLastTest._Benchmark.benchmark_issue1522  thrpt   30  13937550.518 ± 290540.491  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withEmptyObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withEmptyObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3346277.596 ops/s
# Warmup Iteration   2: 8796723.012 ops/s
# Warmup Iteration   3: 14572080.089 ops/s
# Warmup Iteration   4: 14087433.564 ops/s
# Warmup Iteration   5: 14015134.414 ops/s
# Warmup Iteration   6: 14220919.497 ops/s
# Warmup Iteration   7: 14533108.165 ops/s
# Warmup Iteration   8: 13718927.103 ops/s
# Warmup Iteration   9: 14501687.469 ops/s
# Warmup Iteration  10: 14236732.463 ops/s
# Warmup Iteration  11: 13610978.584 ops/s
# Warmup Iteration  12: 14097455.953 ops/s
# Warmup Iteration  13: 14168229.459 ops/s
# Warmup Iteration  14: 13982405.414 ops/s
# Warmup Iteration  15: 14217134.964 ops/s
# Warmup Iteration  16: 14025797.543 ops/s
# Warmup Iteration  17: 14049012.597 ops/s
# Warmup Iteration  18: 14077807.300 ops/s
# Warmup Iteration  19: 14252750.487 ops/s
# Warmup Iteration  20: 13938349.336 ops/s
# Warmup Iteration  21: 14418525.118 ops/s
# Warmup Iteration  22: 14108800.008 ops/s
# Warmup Iteration  23: 13959701.162 ops/s
# Warmup Iteration  24: 14405672.700 ops/s
# Warmup Iteration  25: 13884083.393 ops/s
# Warmup Iteration  26: 14007733.444 ops/s
# Warmup Iteration  27: 14757378.879 ops/s
# Warmup Iteration  28: 9804373.237 ops/s
# Warmup Iteration  29: 14682161.226 ops/s
# Warmup Iteration  30: 13850682.630 ops/s
Iteration   1: 14279602.770 ops/s
Iteration   2: 14255207.723 ops/s
Iteration   3: 14029242.727 ops/s
Iteration   4: 14420244.194 ops/s
Iteration   5: 14004919.860 ops/s
Iteration   6: 14238342.645 ops/s
Iteration   7: 14824558.624 ops/s
Iteration   8: 14855958.865 ops/s
Iteration   9: 14670453.449 ops/s
Iteration  10: 14122181.207 ops/s
Iteration  11: 14427041.370 ops/s
Iteration  12: 14222930.484 ops/s
Iteration  13: 14510031.340 ops/s
Iteration  14: 13948874.318 ops/s
Iteration  15: 13990874.614 ops/s
Iteration  16: 14545058.559 ops/s
Iteration  17: 13808313.170 ops/s
Iteration  18: 14348721.563 ops/s
Iteration  19: 14110141.368 ops/s
Iteration  20: 14411097.770 ops/s
Iteration  21: 14484080.645 ops/s
Iteration  22: 14790747.648 ops/s
Iteration  23: 13919772.385 ops/s
Iteration  24: 13830601.909 ops/s
Iteration  25: 14289490.125 ops/s
Iteration  26: 13895635.534 ops/s
Iteration  27: 14589709.851 ops/s
Iteration  28: 13701266.649 ops/s
Iteration  29: 14111815.601 ops/s
Iteration  30: 14852411.144 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableIgnoreElementsTest._Benchmark.benchmark_withEmptyObservable":
  14282977.604 ±(99.9%) 220170.700 ops/s [Average]
  (min, avg, max) = (13701266.649, 14282977.604, 14855958.865), stdev = 329541.163
  CI (99.9%): [14062806.904, 14503148.303] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score        Error  Units
ObservableIgnoreElementsTest._Benchmark.benchmark_withEmptyObservable  thrpt   30  14282977.604 ± 220170.700  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1616395.066 ops/s
# Warmup Iteration   2: 4966151.679 ops/s
# Warmup Iteration   3: 5371748.570 ops/s
# Warmup Iteration   4: 6302261.224 ops/s
# Warmup Iteration   5: 6310760.832 ops/s
# Warmup Iteration   6: 6528936.816 ops/s
# Warmup Iteration   7: 6389881.057 ops/s
# Warmup Iteration   8: 6419222.585 ops/s
# Warmup Iteration   9: 6463731.579 ops/s
# Warmup Iteration  10: 6420369.634 ops/s
# Warmup Iteration  11: 6372818.090 ops/s
# Warmup Iteration  12: 6342879.955 ops/s
# Warmup Iteration  13: 6333249.728 ops/s
# Warmup Iteration  14: 6508041.013 ops/s
# Warmup Iteration  15: 6323971.386 ops/s
# Warmup Iteration  16: 6256301.672 ops/s
# Warmup Iteration  17: 6450646.617 ops/s
# Warmup Iteration  18: 6177739.222 ops/s
# Warmup Iteration  19: 6386900.805 ops/s
# Warmup Iteration  20: 6566656.470 ops/s
# Warmup Iteration  21: 6540518.947 ops/s
# Warmup Iteration  22: 6145268.218 ops/s
# Warmup Iteration  23: 6737847.506 ops/s
# Warmup Iteration  24: 6347309.513 ops/s
# Warmup Iteration  25: 6270894.812 ops/s
# Warmup Iteration  26: 6566714.675 ops/s
# Warmup Iteration  27: 6204812.054 ops/s
# Warmup Iteration  28: 6491810.029 ops/s
# Warmup Iteration  29: 6293768.619 ops/s
# Warmup Iteration  30: 6196114.201 ops/s
Iteration   1: 6369365.201 ops/s
Iteration   2: 6357250.347 ops/s
Iteration   3: 6454264.223 ops/s
Iteration   4: 6225510.469 ops/s
Iteration   5: 6318137.590 ops/s
Iteration   6: 6499815.980 ops/s
Iteration   7: 6453023.910 ops/s
Iteration   8: 6602171.066 ops/s
Iteration   9: 6245718.779 ops/s
Iteration  10: 6382082.614 ops/s
Iteration  11: 6336833.856 ops/s
Iteration  12: 6284712.889 ops/s
Iteration  13: 6426915.040 ops/s
Iteration  14: 6637495.109 ops/s
Iteration  15: 6424725.763 ops/s
Iteration  16: 6355380.899 ops/s
Iteration  17: 6463822.042 ops/s
Iteration  18: 6586346.017 ops/s
Iteration  19: 6253804.272 ops/s
Iteration  20: 6614761.856 ops/s
Iteration  21: 6264877.569 ops/s
Iteration  22: 6587059.450 ops/s
Iteration  23: 6286865.198 ops/s
Iteration  24: 6532511.603 ops/s
Iteration  25: 6244937.245 ops/s
Iteration  26: 6341107.547 ops/s
Iteration  27: 6325972.058 ops/s
Iteration  28: 6212054.187 ops/s
Iteration  29: 6602441.278 ops/s
Iteration  30: 6235318.309 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_dispose":
  6397509.412 ±(99.9%) 89789.193 ops/s [Average]
  (min, avg, max) = (6212054.187, 6397509.412, 6637495.109), stdev = 134392.247
  CI (99.9%): [6307720.220, 6487298.605] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_dispose  thrpt   30  6397509.412 ± 89789.193  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfFrom$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfFrom

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11853357.138 ops/s
# Warmup Iteration   2: 27559903.786 ops/s
# Warmup Iteration   3: 36878296.689 ops/s
# Warmup Iteration   4: 37801047.266 ops/s
# Warmup Iteration   5: 36791226.674 ops/s
# Warmup Iteration   6: 36786674.322 ops/s
# Warmup Iteration   7: 38077086.072 ops/s
# Warmup Iteration   8: 35320653.385 ops/s
# Warmup Iteration   9: 37471983.230 ops/s
# Warmup Iteration  10: 36398622.059 ops/s
# Warmup Iteration  11: 36565794.387 ops/s
# Warmup Iteration  12: 36184732.568 ops/s
# Warmup Iteration  13: 37763331.639 ops/s
# Warmup Iteration  14: 37137807.427 ops/s
# Warmup Iteration  15: 36318549.032 ops/s
# Warmup Iteration  16: 37582209.899 ops/s
# Warmup Iteration  17: 38508014.327 ops/s
# Warmup Iteration  18: 36258801.343 ops/s
# Warmup Iteration  19: 36334768.935 ops/s
# Warmup Iteration  20: 37350589.395 ops/s
# Warmup Iteration  21: 35675482.431 ops/s
# Warmup Iteration  22: 36759263.008 ops/s
# Warmup Iteration  23: 29549150.556 ops/s
# Warmup Iteration  24: 36296363.115 ops/s
# Warmup Iteration  25: 37348709.436 ops/s
# Warmup Iteration  26: 36308617.029 ops/s
# Warmup Iteration  27: 36873482.375 ops/s
# Warmup Iteration  28: 36451617.164 ops/s
# Warmup Iteration  29: 36404787.288 ops/s
# Warmup Iteration  30: 39173497.600 ops/s
Iteration   1: 34950811.492 ops/s
Iteration   2: 37267913.679 ops/s
Iteration   3: 35956129.092 ops/s
Iteration   4: 38195970.705 ops/s
Iteration   5: 36799514.122 ops/s
Iteration   6: 36743174.443 ops/s
Iteration   7: 36876635.492 ops/s
Iteration   8: 35446993.634 ops/s
Iteration   9: 38389719.250 ops/s
Iteration  10: 35996959.130 ops/s
Iteration  11: 37324753.425 ops/s
Iteration  12: 36651376.121 ops/s
Iteration  13: 38172248.528 ops/s
Iteration  14: 35844891.495 ops/s
Iteration  15: 36240878.769 ops/s
Iteration  16: 38393970.364 ops/s
Iteration  17: 36168199.193 ops/s
Iteration  18: 36543805.666 ops/s
Iteration  19: 37418724.934 ops/s
Iteration  20: 38068117.229 ops/s
Iteration  21: 36047746.520 ops/s
Iteration  22: 37248880.011 ops/s
Iteration  23: 36345968.648 ops/s
Iteration  24: 37978045.545 ops/s
Iteration  25: 37772163.279 ops/s
Iteration  26: 36139263.384 ops/s
Iteration  27: 37201710.979 ops/s
Iteration  28: 36464639.599 ops/s
Iteration  29: 36712434.596 ops/s
Iteration  30: 38062645.388 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfFrom":
  36914142.824 ±(99.9%) 619593.288 ops/s [Average]
  (min, avg, max) = (34950811.492, 36914142.824, 38393970.364), stdev = 927378.135
  CI (99.9%): [36294549.536, 37533736.111] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
FlowableCovarianceTest._Benchmark.benchmark_covarianceOfFrom  thrpt   30  36914142.824 ± 619593.288  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMaterializeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMaterializeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2540623.958 ops/s
# Warmup Iteration   2: 6902269.148 ops/s
# Warmup Iteration   3: 9253781.015 ops/s
# Warmup Iteration   4: 9458644.490 ops/s
# Warmup Iteration   5: 10050305.552 ops/s
# Warmup Iteration   6: 9797425.829 ops/s
# Warmup Iteration   7: 9437589.821 ops/s
# Warmup Iteration   8: 9598946.802 ops/s
# Warmup Iteration   9: 9512403.250 ops/s
# Warmup Iteration  10: 9557126.146 ops/s
# Warmup Iteration  11: 9465454.876 ops/s
# Warmup Iteration  12: 9539661.974 ops/s
# Warmup Iteration  13: 9853973.540 ops/s
# Warmup Iteration  14: 9611544.616 ops/s
# Warmup Iteration  15: 9540020.003 ops/s
# Warmup Iteration  16: 9695266.194 ops/s
# Warmup Iteration  17: 9376588.847 ops/s
# Warmup Iteration  18: 9736750.105 ops/s
# Warmup Iteration  19: 9536001.125 ops/s
# Warmup Iteration  20: 9755342.700 ops/s
# Warmup Iteration  21: 9952434.306 ops/s
# Warmup Iteration  22: 9922235.820 ops/s
# Warmup Iteration  23: 9488073.266 ops/s
# Warmup Iteration  24: 9624327.646 ops/s
# Warmup Iteration  25: 9953906.132 ops/s
# Warmup Iteration  26: 10002906.138 ops/s
# Warmup Iteration  27: 9488647.074 ops/s
# Warmup Iteration  28: 9789249.237 ops/s
# Warmup Iteration  29: 9384171.997 ops/s
# Warmup Iteration  30: 9606808.913 ops/s
Iteration   1: 9942826.165 ops/s
Iteration   2: 9580328.041 ops/s
Iteration   3: 9963901.798 ops/s
Iteration   4: 9666893.810 ops/s
Iteration   5: 9372776.073 ops/s
Iteration   6: 9906692.855 ops/s
Iteration   7: 9694801.223 ops/s
Iteration   8: 9852169.837 ops/s
Iteration   9: 9470993.804 ops/s
Iteration  10: 9844432.516 ops/s
Iteration  11: 10051548.063 ops/s
Iteration  12: 9669585.512 ops/s
Iteration  13: 9551711.139 ops/s
Iteration  14: 9759720.099 ops/s
Iteration  15: 10021040.504 ops/s
Iteration  16: 9647195.729 ops/s
Iteration  17: 9810552.712 ops/s
Iteration  18: 9806492.966 ops/s
Iteration  19: 9267713.755 ops/s
Iteration  20: 10078627.161 ops/s
Iteration  21: 9395029.035 ops/s
Iteration  22: 9962668.683 ops/s
Iteration  23: 9615854.416 ops/s
Iteration  24: 9592396.926 ops/s
Iteration  25: 10060511.868 ops/s
Iteration  26: 9137253.057 ops/s
Iteration  27: 10276798.730 ops/s
Iteration  28: 9686068.281 ops/s
Iteration  29: 9400841.418 ops/s
Iteration  30: 9880736.922 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMaterializeTest._Benchmark.benchmark_dispose":
  9732272.103 ±(99.9%) 177684.408 ops/s [Average]
  (min, avg, max) = (9137253.057, 9732272.103, 10276798.730), stdev = 265949.678
  CI (99.9%): [9554587.695, 9909956.512] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
ObservableMaterializeTest._Benchmark.benchmark_dispose  thrpt   30  9732272.103 ± 177684.408  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_success$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_success

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1276835.634 ops/s
# Warmup Iteration   2: 4375561.601 ops/s
# Warmup Iteration   3: 6697374.962 ops/s
# Warmup Iteration   4: 6503054.286 ops/s
# Warmup Iteration   5: 6785126.262 ops/s
# Warmup Iteration   6: 6502798.277 ops/s
# Warmup Iteration   7: 6518193.566 ops/s
# Warmup Iteration   8: 6481261.955 ops/s
# Warmup Iteration   9: 6553291.375 ops/s
# Warmup Iteration  10: 6539499.512 ops/s
# Warmup Iteration  11: 6606506.558 ops/s
# Warmup Iteration  12: 6227889.925 ops/s
# Warmup Iteration  13: 6725118.221 ops/s
# Warmup Iteration  14: 6450869.462 ops/s
# Warmup Iteration  15: 6358542.082 ops/s
# Warmup Iteration  16: 6623676.408 ops/s
# Warmup Iteration  17: 6379819.991 ops/s
# Warmup Iteration  18: 5360462.133 ops/s
# Warmup Iteration  19: 6762999.448 ops/s
# Warmup Iteration  20: 6793480.956 ops/s
# Warmup Iteration  21: 6445907.974 ops/s
# Warmup Iteration  22: 6478102.710 ops/s
# Warmup Iteration  23: 6571570.867 ops/s
# Warmup Iteration  24: 6503463.836 ops/s
# Warmup Iteration  25: 6746979.606 ops/s
# Warmup Iteration  26: 6547981.414 ops/s
# Warmup Iteration  27: 6479879.667 ops/s
# Warmup Iteration  28: 6853905.609 ops/s
# Warmup Iteration  29: 6413510.251 ops/s
# Warmup Iteration  30: 6543289.043 ops/s
Iteration   1: 6717613.939 ops/s
Iteration   2: 6534628.702 ops/s
Iteration   3: 6494693.901 ops/s
Iteration   4: 6580670.127 ops/s
Iteration   5: 6599350.102 ops/s
Iteration   6: 6636038.532 ops/s
Iteration   7: 6460380.892 ops/s
Iteration   8: 6412304.924 ops/s
Iteration   9: 6841277.753 ops/s
Iteration  10: 6580192.161 ops/s
Iteration  11: 6738954.439 ops/s
Iteration  12: 6469993.241 ops/s
Iteration  13: 6677100.251 ops/s
Iteration  14: 6643455.576 ops/s
Iteration  15: 6333554.470 ops/s
Iteration  16: 6586152.196 ops/s
Iteration  17: 6709004.935 ops/s
Iteration  18: 6546763.267 ops/s
Iteration  19: 6563180.645 ops/s
Iteration  20: 6327055.163 ops/s
Iteration  21: 6880062.399 ops/s
Iteration  22: 6634187.058 ops/s
Iteration  23: 6516447.206 ops/s
Iteration  24: 6567112.236 ops/s
Iteration  25: 6655506.568 ops/s
Iteration  26: 6386327.775 ops/s
Iteration  27: 6745401.759 ops/s
Iteration  28: 6597261.838 ops/s
Iteration  29: 6483627.616 ops/s
Iteration  30: 6969095.950 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_success":
  6596246.521 ±(99.9%) 100554.387 ops/s [Average]
  (min, avg, max) = (6327055.163, 6596246.521, 6969095.950), stdev = 150505.084
  CI (99.9%): [6495692.134, 6696800.908] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
ObservableFromSingleTest._Benchmark.benchmark_success  thrpt   30  6596246.521 ± 100554.387  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 159151.480 ops/s
# Warmup Iteration   2: 531706.764 ops/s
# Warmup Iteration   3: 677579.402 ops/s
# Warmup Iteration   4: 670066.989 ops/s
# Warmup Iteration   5: 714374.944 ops/s
# Warmup Iteration   6: 709781.357 ops/s
# Warmup Iteration   7: 699596.979 ops/s
# Warmup Iteration   8: 696296.070 ops/s
# Warmup Iteration   9: 697244.678 ops/s
# Warmup Iteration  10: 679785.346 ops/s
# Warmup Iteration  11: 670255.440 ops/s
# Warmup Iteration  12: 695061.938 ops/s
# Warmup Iteration  13: 680700.608 ops/s
# Warmup Iteration  14: 694018.064 ops/s
# Warmup Iteration  15: 692574.804 ops/s
# Warmup Iteration  16: 717341.545 ops/s
# Warmup Iteration  17: 744899.684 ops/s
# Warmup Iteration  18: 750080.462 ops/s
# Warmup Iteration  19: 737449.926 ops/s
# Warmup Iteration  20: 730941.800 ops/s
# Warmup Iteration  21: 768158.991 ops/s
# Warmup Iteration  22: 715073.619 ops/s
# Warmup Iteration  23: 738574.704 ops/s
# Warmup Iteration  24: 722885.132 ops/s
# Warmup Iteration  25: 731914.650 ops/s
# Warmup Iteration  26: 754218.632 ops/s
# Warmup Iteration  27: 744138.641 ops/s
# Warmup Iteration  28: 774589.190 ops/s
# Warmup Iteration  29: 755042.955 ops/s
# Warmup Iteration  30: 710890.214 ops/s
Iteration   1: 764580.632 ops/s
Iteration   2: 737398.102 ops/s
Iteration   3: 747236.424 ops/s
Iteration   4: 726588.685 ops/s
Iteration   5: 754030.458 ops/s
Iteration   6: 744090.934 ops/s
Iteration   7: 743089.909 ops/s
Iteration   8: 772768.612 ops/s
Iteration   9: 703810.715 ops/s
Iteration  10: 771701.408 ops/s
Iteration  11: 725005.247 ops/s
Iteration  12: 735497.123 ops/s
Iteration  13: 767216.392 ops/s
Iteration  14: 745389.820 ops/s
Iteration  15: 739887.855 ops/s
Iteration  16: 724859.733 ops/s
Iteration  17: 776253.276 ops/s
Iteration  18: 708673.002 ops/s
Iteration  19: 719151.230 ops/s
Iteration  20: 754519.565 ops/s
Iteration  21: 736891.611 ops/s
Iteration  22: 749984.706 ops/s
Iteration  23: 756898.833 ops/s
Iteration  24: 722536.378 ops/s
Iteration  25: 782526.331 ops/s
Iteration  26: 768855.013 ops/s
Iteration  27: 712955.611 ops/s
Iteration  28: 770627.877 ops/s
Iteration  29: 724194.859 ops/s
Iteration  30: 742692.468 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_error":
  744330.427 ±(99.9%) 14332.124 ops/s [Average]
  (min, avg, max) = (703810.715, 744330.427, 782526.331), stdev = 21451.650
  CI (99.9%): [729998.303, 758662.551] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_error  thrpt   30  744330.427 ± 14332.124  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 200279.990 ops/s
# Warmup Iteration   2: 453681.664 ops/s
# Warmup Iteration   3: 483584.499 ops/s
# Warmup Iteration   4: 544886.395 ops/s
# Warmup Iteration   5: 522612.199 ops/s
# Warmup Iteration   6: 533953.503 ops/s
# Warmup Iteration   7: 519020.140 ops/s
# Warmup Iteration   8: 516655.053 ops/s
# Warmup Iteration   9: 548178.375 ops/s
# Warmup Iteration  10: 516786.564 ops/s
# Warmup Iteration  11: 519887.530 ops/s
# Warmup Iteration  12: 357254.615 ops/s
# Warmup Iteration  13: 531330.251 ops/s
# Warmup Iteration  14: 521765.256 ops/s
# Warmup Iteration  15: 517645.521 ops/s
# Warmup Iteration  16: 541642.530 ops/s
# Warmup Iteration  17: 544241.596 ops/s
# Warmup Iteration  18: 573278.330 ops/s
# Warmup Iteration  19: 541846.367 ops/s
# Warmup Iteration  20: 547682.390 ops/s
# Warmup Iteration  21: 551922.534 ops/s
# Warmup Iteration  22: 540606.856 ops/s
# Warmup Iteration  23: 585391.606 ops/s
# Warmup Iteration  24: 568654.504 ops/s
# Warmup Iteration  25: 539889.487 ops/s
# Warmup Iteration  26: 558217.156 ops/s
# Warmup Iteration  27: 534684.786 ops/s
# Warmup Iteration  28: 559673.114 ops/s
# Warmup Iteration  29: 547642.786 ops/s
# Warmup Iteration  30: 561613.773 ops/s
Iteration   1: 552712.163 ops/s
Iteration   2: 561577.574 ops/s
Iteration   3: 560834.779 ops/s
Iteration   4: 549702.297 ops/s
Iteration   5: 553686.677 ops/s
Iteration   6: 548100.147 ops/s
Iteration   7: 566731.367 ops/s
Iteration   8: 570310.720 ops/s
Iteration   9: 549629.722 ops/s
Iteration  10: 568943.627 ops/s
Iteration  11: 552146.842 ops/s
Iteration  12: 533414.491 ops/s
Iteration  13: 571706.792 ops/s
Iteration  14: 531250.566 ops/s
Iteration  15: 537924.800 ops/s
Iteration  16: 551658.094 ops/s
Iteration  17: 568559.800 ops/s
Iteration  18: 559565.081 ops/s
Iteration  19: 547055.913 ops/s
Iteration  20: 591414.207 ops/s
Iteration  21: 539519.867 ops/s
Iteration  22: 571148.594 ops/s
Iteration  23: 533685.015 ops/s
Iteration  24: 568622.657 ops/s
Iteration  25: 580094.646 ops/s
Iteration  26: 574210.868 ops/s
Iteration  27: 552130.909 ops/s
Iteration  28: 552254.911 ops/s
Iteration  29: 563062.854 ops/s
Iteration  30: 562990.201 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_mapperCrash":
  557488.206 ±(99.9%) 9663.591 ops/s [Average]
  (min, avg, max) = (531250.566, 557488.206, 591414.207), stdev = 14464.009
  CI (99.9%): [547824.615, 567151.797] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_mapperCrash  thrpt   30  557488.206 ± 9663.591  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 889336.066 ops/s
# Warmup Iteration   2: 3655762.804 ops/s
# Warmup Iteration   3: 3806598.943 ops/s
# Warmup Iteration   4: 4394223.575 ops/s
# Warmup Iteration   5: 4404675.006 ops/s
# Warmup Iteration   6: 4343491.432 ops/s
# Warmup Iteration   7: 4403889.960 ops/s
# Warmup Iteration   8: 4404870.376 ops/s
# Warmup Iteration   9: 4305726.209 ops/s
# Warmup Iteration  10: 4578226.730 ops/s
# Warmup Iteration  11: 4331350.663 ops/s
# Warmup Iteration  12: 4344612.264 ops/s
# Warmup Iteration  13: 4455832.527 ops/s
# Warmup Iteration  14: 4394738.651 ops/s
# Warmup Iteration  15: 4457430.869 ops/s
# Warmup Iteration  16: 4426437.985 ops/s
# Warmup Iteration  17: 4535015.268 ops/s
# Warmup Iteration  18: 4423917.311 ops/s
# Warmup Iteration  19: 4381907.019 ops/s
# Warmup Iteration  20: 4530221.226 ops/s
# Warmup Iteration  21: 4384334.978 ops/s
# Warmup Iteration  22: 4589088.482 ops/s
# Warmup Iteration  23: 4352586.670 ops/s
# Warmup Iteration  24: 4491127.597 ops/s
# Warmup Iteration  25: 4421775.592 ops/s
# Warmup Iteration  26: 4311958.535 ops/s
# Warmup Iteration  27: 4447870.322 ops/s
# Warmup Iteration  28: 4505481.576 ops/s
# Warmup Iteration  29: 4520704.561 ops/s
# Warmup Iteration  30: 4467568.583 ops/s
Iteration   1: 4537153.683 ops/s
Iteration   2: 4505113.059 ops/s
Iteration   3: 4437815.077 ops/s
Iteration   4: 4494841.881 ops/s
Iteration   5: 4431570.560 ops/s
Iteration   6: 4400800.679 ops/s
Iteration   7: 4704790.593 ops/s
Iteration   8: 4252818.344 ops/s
Iteration   9: 4553031.466 ops/s
Iteration  10: 4323001.769 ops/s
Iteration  11: 4324689.997 ops/s
Iteration  12: 4465281.041 ops/s
Iteration  13: 4194716.405 ops/s
Iteration  14: 4591052.550 ops/s
Iteration  15: 4341785.878 ops/s
Iteration  16: 4516906.025 ops/s
Iteration  17: 4405907.822 ops/s
Iteration  18: 4468507.998 ops/s
Iteration  19: 4582312.910 ops/s
Iteration  20: 4291701.079 ops/s
Iteration  21: 4529603.292 ops/s
Iteration  22: 4337303.795 ops/s
Iteration  23: 4651325.405 ops/s
Iteration  24: 4596176.175 ops/s
Iteration  25: 4367638.673 ops/s
Iteration  26: 4556838.229 ops/s
Iteration  27: 4424711.403 ops/s
Iteration  28: 4597240.014 ops/s
Iteration  29: 4491340.577 ops/s
Iteration  30: 4333263.332 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successJust":
  4456974.657 ±(99.9%) 82619.245 ops/s [Average]
  (min, avg, max) = (4194716.405, 4456974.657, 4704790.593), stdev = 123660.606
  CI (99.9%): [4374355.412, 4539593.902] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successJust  thrpt   30  4456974.657 ± 82619.245  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successMany$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successMany

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 385375.978 ops/s
# Warmup Iteration   2: 1878633.014 ops/s
# Warmup Iteration   3: 3119467.024 ops/s
# Warmup Iteration   4: 3473733.221 ops/s
# Warmup Iteration   5: 3364613.740 ops/s
# Warmup Iteration   6: 3207027.520 ops/s
# Warmup Iteration   7: 2782425.260 ops/s
# Warmup Iteration   8: 3201173.524 ops/s
# Warmup Iteration   9: 3571856.745 ops/s
# Warmup Iteration  10: 3439740.178 ops/s
# Warmup Iteration  11: 3388840.626 ops/s
# Warmup Iteration  12: 3538072.814 ops/s
# Warmup Iteration  13: 3473414.519 ops/s
# Warmup Iteration  14: 3424223.903 ops/s
# Warmup Iteration  15: 3312704.207 ops/s
# Warmup Iteration  16: 3575315.260 ops/s
# Warmup Iteration  17: 3521718.724 ops/s
# Warmup Iteration  18: 3534758.372 ops/s
# Warmup Iteration  19: 3510860.785 ops/s
# Warmup Iteration  20: 3476136.632 ops/s
# Warmup Iteration  21: 3526552.104 ops/s
# Warmup Iteration  22: 3399328.323 ops/s
# Warmup Iteration  23: 3523271.041 ops/s
# Warmup Iteration  24: 3566245.434 ops/s
# Warmup Iteration  25: 3381617.019 ops/s
# Warmup Iteration  26: 3528467.870 ops/s
# Warmup Iteration  27: 3470497.279 ops/s
# Warmup Iteration  28: 3531424.550 ops/s
# Warmup Iteration  29: 3610232.458 ops/s
# Warmup Iteration  30: 3411049.337 ops/s
Iteration   1: 3527720.133 ops/s
Iteration   2: 3464744.288 ops/s
Iteration   3: 3493335.023 ops/s
Iteration   4: 3593403.034 ops/s
Iteration   5: 3504606.650 ops/s
Iteration   6: 3395246.137 ops/s
Iteration   7: 3636804.666 ops/s
Iteration   8: 3427491.395 ops/s
Iteration   9: 3604762.053 ops/s
Iteration  10: 3387127.131 ops/s
Iteration  11: 3515990.670 ops/s
Iteration  12: 3684183.026 ops/s
Iteration  13: 3380501.237 ops/s
Iteration  14: 3523521.981 ops/s
Iteration  15: 3488333.534 ops/s
Iteration  16: 3470713.354 ops/s
Iteration  17: 3469161.626 ops/s
Iteration  18: 3502952.166 ops/s
Iteration  19: 3513329.782 ops/s
Iteration  20: 3512798.928 ops/s
Iteration  21: 3485466.598 ops/s
Iteration  22: 3653445.600 ops/s
Iteration  23: 3398703.795 ops/s
Iteration  24: 3579841.409 ops/s
Iteration  25: 3459024.271 ops/s
Iteration  26: 3439553.867 ops/s
Iteration  27: 3567939.961 ops/s
Iteration  28: 3475978.593 ops/s
Iteration  29: 3558536.761 ops/s
Iteration  30: 3463821.523 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successMany":
  3505967.973 ±(99.9%) 51952.938 ops/s [Average]
  (min, avg, max) = (3380501.237, 3505967.973, 3684183.026), stdev = 77760.717
  CI (99.9%): [3454015.035, 3557920.911] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successMany  thrpt   30  3505967.973 ± 51952.938  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedMany$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedMany

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 290357.347 ops/s
# Warmup Iteration   2: 2883454.143 ops/s
# Warmup Iteration   3: 3963149.455 ops/s
# Warmup Iteration   4: 3983898.561 ops/s
# Warmup Iteration   5: 3206677.538 ops/s
# Warmup Iteration   6: 4005328.385 ops/s
# Warmup Iteration   7: 3820865.399 ops/s
# Warmup Iteration   8: 4025392.235 ops/s
# Warmup Iteration   9: 3983934.195 ops/s
# Warmup Iteration  10: 3970934.557 ops/s
# Warmup Iteration  11: 3995206.252 ops/s
# Warmup Iteration  12: 3991862.561 ops/s
# Warmup Iteration  13: 4000909.395 ops/s
# Warmup Iteration  14: 4093524.501 ops/s
# Warmup Iteration  15: 3984351.043 ops/s
# Warmup Iteration  16: 3826172.453 ops/s
# Warmup Iteration  17: 4078416.716 ops/s
# Warmup Iteration  18: 3990163.582 ops/s
# Warmup Iteration  19: 3961736.843 ops/s
# Warmup Iteration  20: 4173773.760 ops/s
# Warmup Iteration  21: 3829027.387 ops/s
# Warmup Iteration  22: 4033829.970 ops/s
# Warmup Iteration  23: 4005276.049 ops/s
# Warmup Iteration  24: 3957118.632 ops/s
# Warmup Iteration  25: 4004017.159 ops/s
# Warmup Iteration  26: 4021162.234 ops/s
# Warmup Iteration  27: 3973468.246 ops/s
# Warmup Iteration  28: 4172536.611 ops/s
# Warmup Iteration  29: 3822510.176 ops/s
# Warmup Iteration  30: 3952439.955 ops/s
Iteration   1: 4177698.716 ops/s
Iteration   2: 4100379.991 ops/s
Iteration   3: 3892441.284 ops/s
Iteration   4: 4084765.853 ops/s
Iteration   5: 3996846.719 ops/s
Iteration   6: 4177815.434 ops/s
Iteration   7: 3931721.619 ops/s
Iteration   8: 4001488.815 ops/s
Iteration   9: 4069562.170 ops/s
Iteration  10: 3963937.267 ops/s
Iteration  11: 4131059.722 ops/s
Iteration  12: 3798902.487 ops/s
Iteration  13: 4124769.530 ops/s
Iteration  14: 4022131.452 ops/s
Iteration  15: 3977228.972 ops/s
Iteration  16: 4016493.459 ops/s
Iteration  17: 3972973.254 ops/s
Iteration  18: 3974456.411 ops/s
Iteration  19: 4129675.313 ops/s
Iteration  20: 4003532.433 ops/s
Iteration  21: 4141499.328 ops/s
Iteration  22: 3885517.734 ops/s
Iteration  23: 4171772.411 ops/s
Iteration  24: 3970803.375 ops/s
Iteration  25: 4095343.388 ops/s
Iteration  26: 3964776.443 ops/s
Iteration  27: 3978178.147 ops/s
Iteration  28: 4071694.206 ops/s
Iteration  29: 3786191.886 ops/s
Iteration  30: 4264376.654 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedMany":
  4029267.816 ±(99.9%) 74939.970 ops/s [Average]
  (min, avg, max) = (3786191.886, 4029267.816, 4264376.654), stdev = 112166.628
  CI (99.9%): [3954327.846, 4104207.786] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedMany  thrpt   30  4029267.816 ± 74939.970  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 625607.163 ops/s
# Warmup Iteration   2: 1844926.037 ops/s
# Warmup Iteration   3: 3777093.860 ops/s
# Warmup Iteration   4: 4556173.436 ops/s
# Warmup Iteration   5: 4764890.821 ops/s
# Warmup Iteration   6: 4607046.754 ops/s
# Warmup Iteration   7: 4569006.154 ops/s
# Warmup Iteration   8: 4706088.785 ops/s
# Warmup Iteration   9: 4550302.368 ops/s
# Warmup Iteration  10: 4670591.142 ops/s
# Warmup Iteration  11: 4778949.004 ops/s
# Warmup Iteration  12: 4577728.897 ops/s
# Warmup Iteration  13: 4884583.420 ops/s
# Warmup Iteration  14: 4523674.490 ops/s
# Warmup Iteration  15: 4784143.625 ops/s
# Warmup Iteration  16: 4599793.485 ops/s
# Warmup Iteration  17: 4680857.962 ops/s
# Warmup Iteration  18: 4766814.801 ops/s
# Warmup Iteration  19: 4620276.565 ops/s
# Warmup Iteration  20: 4721532.424 ops/s
# Warmup Iteration  21: 4620377.950 ops/s
# Warmup Iteration  22: 4700261.021 ops/s
# Warmup Iteration  23: 4711689.440 ops/s
# Warmup Iteration  24: 4730193.638 ops/s
# Warmup Iteration  25: 4846008.281 ops/s
# Warmup Iteration  26: 4489074.689 ops/s
# Warmup Iteration  27: 4706812.276 ops/s
# Warmup Iteration  28: 4723604.761 ops/s
# Warmup Iteration  29: 4662128.029 ops/s
# Warmup Iteration  30: 4690908.934 ops/s
Iteration   1: 4544994.598 ops/s
Iteration   2: 4646677.482 ops/s
Iteration   3: 4513457.033 ops/s
Iteration   4: 4734616.731 ops/s
Iteration   5: 4666244.189 ops/s
Iteration   6: 4596984.634 ops/s
Iteration   7: 4847932.905 ops/s
Iteration   8: 4669864.958 ops/s
Iteration   9: 4570702.457 ops/s
Iteration  10: 4634709.027 ops/s
Iteration  11: 4547552.077 ops/s
Iteration  12: 4709740.491 ops/s
Iteration  13: 4637538.311 ops/s
Iteration  14: 4451680.308 ops/s
Iteration  15: 4607128.850 ops/s
Iteration  16: 4251350.062 ops/s
Iteration  17: 4748811.484 ops/s
Iteration  18: 4425381.726 ops/s
Iteration  19: 4687354.803 ops/s
Iteration  20: 4616168.133 ops/s
Iteration  21: 4623297.219 ops/s
Iteration  22: 4833371.343 ops/s
Iteration  23: 4540933.272 ops/s
Iteration  24: 4810252.591 ops/s
Iteration  25: 4650793.380 ops/s
Iteration  26: 4556217.068 ops/s
Iteration  27: 4703209.991 ops/s
Iteration  28: 4552978.527 ops/s
Iteration  29: 4794223.934 ops/s
Iteration  30: 4542344.857 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedJust":
  4623883.748 ±(99.9%) 84870.213 ops/s [Average]
  (min, avg, max) = (4251350.062, 4623883.748, 4847932.905), stdev = 127029.749
  CI (99.9%): [4539013.535, 4708753.961] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedJust  thrpt   30  4623883.748 ± 84870.213  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedManyRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedManyRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 323230.007 ops/s
# Warmup Iteration   2: 1886400.198 ops/s
# Warmup Iteration   3: 3213842.104 ops/s
# Warmup Iteration   4: 3696828.695 ops/s
# Warmup Iteration   5: 3901143.399 ops/s
# Warmup Iteration   6: 3900688.829 ops/s
# Warmup Iteration   7: 3771880.143 ops/s
# Warmup Iteration   8: 3901373.603 ops/s
# Warmup Iteration   9: 3607432.204 ops/s
# Warmup Iteration  10: 3951920.622 ops/s
# Warmup Iteration  11: 3724266.428 ops/s
# Warmup Iteration  12: 3691336.613 ops/s
# Warmup Iteration  13: 3888788.011 ops/s
# Warmup Iteration  14: 3634138.747 ops/s
# Warmup Iteration  15: 3962816.630 ops/s
# Warmup Iteration  16: 3796993.420 ops/s
# Warmup Iteration  17: 3835580.260 ops/s
# Warmup Iteration  18: 3771729.711 ops/s
# Warmup Iteration  19: 3821549.023 ops/s
# Warmup Iteration  20: 3866244.758 ops/s
# Warmup Iteration  21: 3785485.084 ops/s
# Warmup Iteration  22: 3793747.056 ops/s
# Warmup Iteration  23: 3831386.723 ops/s
# Warmup Iteration  24: 3797122.473 ops/s
# Warmup Iteration  25: 3604605.036 ops/s
# Warmup Iteration  26: 3793279.233 ops/s
# Warmup Iteration  27: 3786624.042 ops/s
# Warmup Iteration  28: 3769078.435 ops/s
# Warmup Iteration  29: 3642500.902 ops/s
# Warmup Iteration  30: 3842069.243 ops/s
Iteration   1: 3929262.992 ops/s
Iteration   2: 3888381.926 ops/s
Iteration   3: 3724872.395 ops/s
Iteration   4: 3777418.684 ops/s
Iteration   5: 3705378.267 ops/s
Iteration   6: 3842598.863 ops/s
Iteration   7: 3936120.502 ops/s
Iteration   8: 3659512.762 ops/s
Iteration   9: 3888934.115 ops/s
Iteration  10: 3827118.633 ops/s
Iteration  11: 3672174.994 ops/s
Iteration  12: 3811604.573 ops/s
Iteration  13: 3872159.917 ops/s
Iteration  14: 3839731.393 ops/s
Iteration  15: 3697448.186 ops/s
Iteration  16: 3817181.064 ops/s
Iteration  17: 3763332.812 ops/s
Iteration  18: 3762989.315 ops/s
Iteration  19: 3717962.288 ops/s
Iteration  20: 3863317.841 ops/s
Iteration  21: 3650546.087 ops/s
Iteration  22: 3892941.954 ops/s
Iteration  23: 3760666.531 ops/s
Iteration  24: 3898374.894 ops/s
Iteration  25: 3686885.240 ops/s
Iteration  26: 3903328.562 ops/s
Iteration  27: 3941705.350 ops/s
Iteration  28: 3706477.644 ops/s
Iteration  29: 2516075.095 ops/s
Iteration  30: 3931054.418 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedManyRejected":
  3762851.910 ±(99.9%) 168957.586 ops/s [Average]
  (min, avg, max) = (2516075.095, 3762851.910, 3941705.350), stdev = 252887.781
  CI (99.9%): [3593894.324, 3931809.496] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score        Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedManyRejected  thrpt   30  3762851.910 ± 168957.586  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successManyTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successManyTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 222731.712 ops/s
# Warmup Iteration   2: 1782952.533 ops/s
# Warmup Iteration   3: 3065919.478 ops/s
# Warmup Iteration   4: 3398008.687 ops/s
# Warmup Iteration   5: 3157616.875 ops/s
# Warmup Iteration   6: 2834248.199 ops/s
# Warmup Iteration   7: 3222696.915 ops/s
# Warmup Iteration   8: 3261258.371 ops/s
# Warmup Iteration   9: 3276217.947 ops/s
# Warmup Iteration  10: 3274001.647 ops/s
# Warmup Iteration  11: 3405602.568 ops/s
# Warmup Iteration  12: 3276641.135 ops/s
# Warmup Iteration  13: 3371621.870 ops/s
# Warmup Iteration  14: 3330242.728 ops/s
# Warmup Iteration  15: 3275925.213 ops/s
# Warmup Iteration  16: 3264295.428 ops/s
# Warmup Iteration  17: 3219421.519 ops/s
# Warmup Iteration  18: 3386555.383 ops/s
# Warmup Iteration  19: 3228320.936 ops/s
# Warmup Iteration  20: 3330697.622 ops/s
# Warmup Iteration  21: 3263829.150 ops/s
# Warmup Iteration  22: 3374840.618 ops/s
# Warmup Iteration  23: 3319923.889 ops/s
# Warmup Iteration  24: 3175928.581 ops/s
# Warmup Iteration  25: 3392341.295 ops/s
# Warmup Iteration  26: 3138288.048 ops/s
# Warmup Iteration  27: 3275572.854 ops/s
# Warmup Iteration  28: 3348440.006 ops/s
# Warmup Iteration  29: 3210257.625 ops/s
# Warmup Iteration  30: 3390525.842 ops/s
Iteration   1: 3151869.159 ops/s
Iteration   2: 3273708.679 ops/s
Iteration   3: 3247289.869 ops/s
Iteration   4: 3191487.220 ops/s
Iteration   5: 3352834.350 ops/s
Iteration   6: 3186956.270 ops/s
Iteration   7: 3309174.108 ops/s
Iteration   8: 3256335.610 ops/s
Iteration   9: 3348431.609 ops/s
Iteration  10: 3232412.049 ops/s
Iteration  11: 3253714.918 ops/s
Iteration  12: 3379738.120 ops/s
Iteration  13: 3255058.737 ops/s
Iteration  14: 3324525.481 ops/s
Iteration  15: 3301582.104 ops/s
Iteration  16: 3227237.564 ops/s
Iteration  17: 3210261.566 ops/s
Iteration  18: 3341541.352 ops/s
Iteration  19: 3118029.143 ops/s
Iteration  20: 3319912.009 ops/s
Iteration  21: 3319923.949 ops/s
Iteration  22: 3244278.450 ops/s
Iteration  23: 3317321.269 ops/s
Iteration  24: 3284292.079 ops/s
Iteration  25: 3383965.366 ops/s
Iteration  26: 3259616.082 ops/s
Iteration  27: 3304301.789 ops/s
Iteration  28: 3334178.132 ops/s
Iteration  29: 3254329.863 ops/s
Iteration  30: 3304007.827 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successManyTake":
  3276277.157 ±(99.9%) 43067.739 ops/s [Average]
  (min, avg, max) = (3118029.143, 3276277.157, 3383965.366), stdev = 64461.769
  CI (99.9%): [3233209.419, 3319344.896] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_successManyTake  thrpt   30  3276277.157 ± 43067.739  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1505943.323 ops/s
# Warmup Iteration   2: 4647177.604 ops/s
# Warmup Iteration   3: 6966639.135 ops/s
# Warmup Iteration   4: 6882546.317 ops/s
# Warmup Iteration   5: 6714791.780 ops/s
# Warmup Iteration   6: 6595748.068 ops/s
# Warmup Iteration   7: 7027530.782 ops/s
# Warmup Iteration   8: 6990063.143 ops/s
# Warmup Iteration   9: 6633270.771 ops/s
# Warmup Iteration  10: 6696659.756 ops/s
# Warmup Iteration  11: 6624834.586 ops/s
# Warmup Iteration  12: 6761096.594 ops/s
# Warmup Iteration  13: 6849269.083 ops/s
# Warmup Iteration  14: 6560756.966 ops/s
# Warmup Iteration  15: 6732685.903 ops/s
# Warmup Iteration  16: 6586087.736 ops/s
# Warmup Iteration  17: 6643960.212 ops/s
# Warmup Iteration  18: 6742892.955 ops/s
# Warmup Iteration  19: 6569847.563 ops/s
# Warmup Iteration  20: 6939662.742 ops/s
# Warmup Iteration  21: 6558636.128 ops/s
# Warmup Iteration  22: 6674696.944 ops/s
# Warmup Iteration  23: 7082790.217 ops/s
# Warmup Iteration  24: 6830322.564 ops/s
# Warmup Iteration  25: 6583502.002 ops/s
# Warmup Iteration  26: 6881221.136 ops/s
# Warmup Iteration  27: 6533861.706 ops/s
# Warmup Iteration  28: 6907379.983 ops/s
# Warmup Iteration  29: 6625032.545 ops/s
# Warmup Iteration  30: 6707291.646 ops/s
Iteration   1: 6829688.462 ops/s
Iteration   2: 6690888.204 ops/s
Iteration   3: 6949529.838 ops/s
Iteration   4: 6573484.321 ops/s
Iteration   5: 6826472.580 ops/s
Iteration   6: 6718602.764 ops/s
Iteration   7: 6792320.502 ops/s
Iteration   8: 6789361.194 ops/s
Iteration   9: 6693607.412 ops/s
Iteration  10: 6955649.832 ops/s
Iteration  11: 6728139.973 ops/s
Iteration  12: 6974052.889 ops/s
Iteration  13: 6812536.830 ops/s
Iteration  14: 6763352.331 ops/s
Iteration  15: 6731537.786 ops/s
Iteration  16: 6799133.907 ops/s
Iteration  17: 6543513.647 ops/s
Iteration  18: 6939643.802 ops/s
Iteration  19: 6940790.954 ops/s
Iteration  20: 6700799.768 ops/s
Iteration  21: 6819893.827 ops/s
Iteration  22: 6934165.668 ops/s
Iteration  23: 5387561.107 ops/s
Iteration  24: 6549716.220 ops/s
Iteration  25: 6628253.666 ops/s
Iteration  26: 6489774.510 ops/s
Iteration  27: 6813512.853 ops/s
Iteration  28: 6684800.053 ops/s
Iteration  29: 6773806.175 ops/s
Iteration  30: 6891484.450 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeSuccess":
  6724202.518 ±(99.9%) 189702.710 ops/s [Average]
  (min, avg, max) = (5387561.107, 6724202.518, 6974052.889), stdev = 283938.107
  CI (99.9%): [6534499.808, 6913905.228] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnDisposeSuccess  thrpt   30  6724202.518 ± 189702.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1575834.871 ops/s
# Warmup Iteration   2: 4435512.417 ops/s
# Warmup Iteration   3: 6866253.459 ops/s
# Warmup Iteration   4: 7186885.609 ops/s
# Warmup Iteration   5: 7134199.345 ops/s
# Warmup Iteration   6: 6808053.155 ops/s
# Warmup Iteration   7: 6803130.464 ops/s
# Warmup Iteration   8: 6695419.508 ops/s
# Warmup Iteration   9: 7128834.302 ops/s
# Warmup Iteration  10: 7075414.499 ops/s
# Warmup Iteration  11: 6560575.822 ops/s
# Warmup Iteration  12: 6872307.312 ops/s
# Warmup Iteration  13: 7117035.329 ops/s
# Warmup Iteration  14: 6746473.826 ops/s
# Warmup Iteration  15: 7100131.668 ops/s
# Warmup Iteration  16: 7123655.503 ops/s
# Warmup Iteration  17: 6744042.331 ops/s
# Warmup Iteration  18: 7242707.232 ops/s
# Warmup Iteration  19: 6739535.687 ops/s
# Warmup Iteration  20: 7090138.442 ops/s
# Warmup Iteration  21: 7146854.989 ops/s
# Warmup Iteration  22: 6740157.295 ops/s
# Warmup Iteration  23: 7187234.675 ops/s
# Warmup Iteration  24: 6550627.564 ops/s
# Warmup Iteration  25: 6987405.149 ops/s
# Warmup Iteration  26: 7084136.522 ops/s
# Warmup Iteration  27: 7048483.639 ops/s
# Warmup Iteration  28: 6773336.048 ops/s
# Warmup Iteration  29: 7012419.640 ops/s
# Warmup Iteration  30: 6806573.856 ops/s
Iteration   1: 6876798.938 ops/s
Iteration   2: 6753480.055 ops/s
Iteration   3: 7114654.374 ops/s
Iteration   4: 6810726.561 ops/s
Iteration   5: 6902570.641 ops/s
Iteration   6: 7330815.056 ops/s
Iteration   7: 6688010.456 ops/s
Iteration   8: 7049469.037 ops/s
Iteration   9: 6686850.523 ops/s
Iteration  10: 7016392.592 ops/s
Iteration  11: 6791234.105 ops/s
Iteration  12: 6910419.637 ops/s
Iteration  13: 6984584.315 ops/s
Iteration  14: 6959716.971 ops/s
Iteration  15: 7015435.085 ops/s
Iteration  16: 6778681.199 ops/s
Iteration  17: 7164188.844 ops/s
Iteration  18: 7285949.939 ops/s
Iteration  19: 6926483.274 ops/s
Iteration  20: 6995085.543 ops/s
Iteration  21: 7237983.133 ops/s
Iteration  22: 7002858.837 ops/s
Iteration  23: 6972501.854 ops/s
Iteration  24: 7109250.843 ops/s
Iteration  25: 6633039.022 ops/s
Iteration  26: 7329150.749 ops/s
Iteration  27: 6664523.480 ops/s
Iteration  28: 6929813.503 ops/s
Iteration  29: 7217290.464 ops/s
Iteration  30: 6581343.564 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySource":
  6957310.086 ±(99.9%) 139065.865 ops/s [Average]
  (min, avg, max) = (6581343.564, 6957310.086, 7330815.056), stdev = 208147.255
  CI (99.9%): [6818244.222, 7096375.951] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySource  thrpt   30  6957310.086 ± 139065.865  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex0WithDefaultOnEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex0WithDefaultOnEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1755062.455 ops/s
# Warmup Iteration   2: 4514839.785 ops/s
# Warmup Iteration   3: 7001012.768 ops/s
# Warmup Iteration   4: 7007828.168 ops/s
# Warmup Iteration   5: 6657332.094 ops/s
# Warmup Iteration   6: 7021090.249 ops/s
# Warmup Iteration   7: 6847580.677 ops/s
# Warmup Iteration   8: 6869705.714 ops/s
# Warmup Iteration   9: 6970745.208 ops/s
# Warmup Iteration  10: 7009708.054 ops/s
# Warmup Iteration  11: 6694028.603 ops/s
# Warmup Iteration  12: 6844725.684 ops/s
# Warmup Iteration  13: 7072546.718 ops/s
# Warmup Iteration  14: 6806037.817 ops/s
# Warmup Iteration  15: 7247962.640 ops/s
# Warmup Iteration  16: 6863610.610 ops/s
# Warmup Iteration  17: 6573671.255 ops/s
# Warmup Iteration  18: 7105888.475 ops/s
# Warmup Iteration  19: 6781883.243 ops/s
# Warmup Iteration  20: 7013131.961 ops/s
# Warmup Iteration  21: 7116617.499 ops/s
# Warmup Iteration  22: 6791531.430 ops/s
# Warmup Iteration  23: 6945084.466 ops/s
# Warmup Iteration  24: 7100719.520 ops/s
# Warmup Iteration  25: 6717010.004 ops/s
# Warmup Iteration  26: 7032991.976 ops/s
# Warmup Iteration  27: 7052807.539 ops/s
# Warmup Iteration  28: 6708967.844 ops/s
# Warmup Iteration  29: 7121144.441 ops/s
# Warmup Iteration  30: 7189006.272 ops/s
Iteration   1: 6733316.171 ops/s
Iteration   2: 6842163.623 ops/s
Iteration   3: 6864737.151 ops/s
Iteration   4: 6848138.716 ops/s
Iteration   5: 6772126.113 ops/s
Iteration   6: 7069623.103 ops/s
Iteration   7: 6889144.270 ops/s
Iteration   8: 6943996.184 ops/s
Iteration   9: 7034837.853 ops/s
Iteration  10: 7015278.985 ops/s
Iteration  11: 6664849.348 ops/s
Iteration  12: 6847434.025 ops/s
Iteration  13: 6815364.363 ops/s
Iteration  14: 6793021.847 ops/s
Iteration  15: 6986109.160 ops/s
Iteration  16: 6990677.334 ops/s
Iteration  17: 6967663.153 ops/s
Iteration  18: 5705774.923 ops/s
Iteration  19: 7067301.919 ops/s
Iteration  20: 6890207.182 ops/s
Iteration  21: 6878933.963 ops/s
Iteration  22: 7020221.636 ops/s
Iteration  23: 6898206.110 ops/s
Iteration  24: 7001687.919 ops/s
Iteration  25: 6915923.136 ops/s
Iteration  26: 6969811.472 ops/s
Iteration  27: 7137258.769 ops/s
Iteration  28: 6755605.303 ops/s
Iteration  29: 6893548.267 ops/s
Iteration  30: 7152747.051 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtIndex0WithDefaultOnEmptySource":
  6878856.968 ±(99.9%) 167505.448 ops/s [Average]
  (min, avg, max) = (5705774.923, 6878856.968, 7152747.051), stdev = 250714.288
  CI (99.9%): [6711351.520, 7046362.416] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score        Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtIndex0WithDefaultOnEmptySource  thrpt   30  6878856.968 ± 167505.448  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_mapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_mapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 250402.293 ops/s
# Warmup Iteration   2: 530844.679 ops/s
# Warmup Iteration   3: 588358.420 ops/s
# Warmup Iteration   4: 573609.004 ops/s
# Warmup Iteration   5: 618121.994 ops/s
# Warmup Iteration   6: 631703.401 ops/s
# Warmup Iteration   7: 599162.105 ops/s
# Warmup Iteration   8: 604403.170 ops/s
# Warmup Iteration   9: 637793.943 ops/s
# Warmup Iteration  10: 602440.824 ops/s
# Warmup Iteration  11: 601959.861 ops/s
# Warmup Iteration  12: 569238.933 ops/s
# Warmup Iteration  13: 592998.017 ops/s
# Warmup Iteration  14: 637594.299 ops/s
# Warmup Iteration  15: 604632.503 ops/s
# Warmup Iteration  16: 611980.686 ops/s
# Warmup Iteration  17: 649573.856 ops/s
# Warmup Iteration  18: 648518.909 ops/s
# Warmup Iteration  19: 642942.055 ops/s
# Warmup Iteration  20: 654657.584 ops/s
# Warmup Iteration  21: 643814.625 ops/s
# Warmup Iteration  22: 646461.494 ops/s
# Warmup Iteration  23: 631586.106 ops/s
# Warmup Iteration  24: 640079.242 ops/s
# Warmup Iteration  25: 662614.136 ops/s
# Warmup Iteration  26: 644761.639 ops/s
# Warmup Iteration  27: 624330.634 ops/s
# Warmup Iteration  28: 648009.553 ops/s
# Warmup Iteration  29: 636244.824 ops/s
# Warmup Iteration  30: 660158.890 ops/s
Iteration   1: 643100.157 ops/s
Iteration   2: 643392.267 ops/s
Iteration   3: 640571.272 ops/s
Iteration   4: 646716.546 ops/s
Iteration   5: 636717.545 ops/s
Iteration   6: 654059.535 ops/s
Iteration   7: 645329.527 ops/s
Iteration   8: 659312.778 ops/s
Iteration   9: 630863.035 ops/s
Iteration  10: 639715.946 ops/s
Iteration  11: 639462.321 ops/s
Iteration  12: 641991.308 ops/s
Iteration  13: 646923.284 ops/s
Iteration  14: 624919.035 ops/s
Iteration  15: 636207.604 ops/s
Iteration  16: 661388.557 ops/s
Iteration  17: 628949.306 ops/s
Iteration  18: 671344.176 ops/s
Iteration  19: 678409.263 ops/s
Iteration  20: 626732.873 ops/s
Iteration  21: 672963.550 ops/s
Iteration  22: 622826.398 ops/s
Iteration  23: 631032.052 ops/s
Iteration  24: 669589.897 ops/s
Iteration  25: 600412.614 ops/s
Iteration  26: 652071.090 ops/s
Iteration  27: 642486.718 ops/s
Iteration  28: 652454.129 ops/s
Iteration  29: 632056.770 ops/s
Iteration  30: 641315.199 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_mapperCrash":
  643777.158 ±(99.9%) 11176.765 ops/s [Average]
  (min, avg, max) = (600412.614, 643777.158, 678409.263), stdev = 16728.856
  CI (99.9%): [632600.394, 654953.923] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
SingleMapOptionalTest._Benchmark.benchmark_mapperCrash  thrpt   30  643777.158 ± 11176.765  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorNoElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorNoElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 174670.650 ops/s
# Warmup Iteration   2: 554588.674 ops/s
# Warmup Iteration   3: 580604.078 ops/s
# Warmup Iteration   4: 605762.973 ops/s
# Warmup Iteration   5: 634139.682 ops/s
# Warmup Iteration   6: 590180.487 ops/s
# Warmup Iteration   7: 623278.191 ops/s
# Warmup Iteration   8: 607195.297 ops/s
# Warmup Iteration   9: 617616.911 ops/s
# Warmup Iteration  10: 621243.779 ops/s
# Warmup Iteration  11: 557168.649 ops/s
# Warmup Iteration  12: 623005.020 ops/s
# Warmup Iteration  13: 645241.267 ops/s
# Warmup Iteration  14: 600371.642 ops/s
# Warmup Iteration  15: 628263.589 ops/s
# Warmup Iteration  16: 635102.372 ops/s
# Warmup Iteration  17: 654926.042 ops/s
# Warmup Iteration  18: 635377.129 ops/s
# Warmup Iteration  19: 657462.788 ops/s
# Warmup Iteration  20: 640036.044 ops/s
# Warmup Iteration  21: 665725.838 ops/s
# Warmup Iteration  22: 634160.290 ops/s
# Warmup Iteration  23: 650510.117 ops/s
# Warmup Iteration  24: 646314.097 ops/s
# Warmup Iteration  25: 627667.059 ops/s
# Warmup Iteration  26: 645012.104 ops/s
# Warmup Iteration  27: 669812.344 ops/s
# Warmup Iteration  28: 631361.510 ops/s
# Warmup Iteration  29: 668833.708 ops/s
# Warmup Iteration  30: 665243.002 ops/s
Iteration   1: 622394.966 ops/s
Iteration   2: 667746.363 ops/s
Iteration   3: 643882.757 ops/s
Iteration   4: 636424.151 ops/s
Iteration   5: 668471.852 ops/s
Iteration   6: 634523.110 ops/s
Iteration   7: 665238.085 ops/s
Iteration   8: 666956.283 ops/s
Iteration   9: 620096.855 ops/s
Iteration  10: 660840.964 ops/s
Iteration  11: 668946.470 ops/s
Iteration  12: 450281.241 ops/s
Iteration  13: 646240.386 ops/s
Iteration  14: 600276.521 ops/s
Iteration  15: 609049.564 ops/s
Iteration  16: 641024.975 ops/s
Iteration  17: 631265.573 ops/s
Iteration  18: 674589.353 ops/s
Iteration  19: 636266.736 ops/s
Iteration  20: 671816.233 ops/s
Iteration  21: 640133.005 ops/s
Iteration  22: 672675.841 ops/s
Iteration  23: 626005.425 ops/s
Iteration  24: 660343.135 ops/s
Iteration  25: 668339.740 ops/s
Iteration  26: 633037.324 ops/s
Iteration  27: 665383.632 ops/s
Iteration  28: 628536.797 ops/s
Iteration  29: 657933.986 ops/s
Iteration  30: 645383.700 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorNoElement":
  640470.167 ±(99.9%) 27601.996 ops/s [Average]
  (min, avg, max) = (450281.241, 640470.167, 674589.353), stdev = 41313.372
  CI (99.9%): [612868.171, 668072.164] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableLastTest._Benchmark.benchmark_lastOrErrorNoElement  thrpt   30  640470.167 ± 27601.996  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_success$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_success

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1511590.857 ops/s
# Warmup Iteration   2: 4590559.322 ops/s
# Warmup Iteration   3: 6839557.475 ops/s
# Warmup Iteration   4: 6479519.938 ops/s
# Warmup Iteration   5: 6874250.166 ops/s
# Warmup Iteration   6: 6601374.666 ops/s
# Warmup Iteration   7: 6815878.609 ops/s
# Warmup Iteration   8: 6491553.246 ops/s
# Warmup Iteration   9: 6517623.484 ops/s
# Warmup Iteration  10: 6885708.359 ops/s
# Warmup Iteration  11: 6439055.054 ops/s
# Warmup Iteration  12: 6689988.855 ops/s
# Warmup Iteration  13: 6799042.924 ops/s
# Warmup Iteration  14: 6714699.661 ops/s
# Warmup Iteration  15: 6878015.181 ops/s
# Warmup Iteration  16: 6900467.367 ops/s
# Warmup Iteration  17: 6546612.048 ops/s
# Warmup Iteration  18: 6853856.933 ops/s
# Warmup Iteration  19: 6609235.309 ops/s
# Warmup Iteration  20: 6824705.015 ops/s
# Warmup Iteration  21: 6460067.365 ops/s
# Warmup Iteration  22: 6871891.743 ops/s
# Warmup Iteration  23: 6713987.308 ops/s
# Warmup Iteration  24: 6512905.523 ops/s
# Warmup Iteration  25: 6887842.052 ops/s
# Warmup Iteration  26: 6604158.151 ops/s
# Warmup Iteration  27: 6730941.923 ops/s
# Warmup Iteration  28: 6544265.140 ops/s
# Warmup Iteration  29: 6701800.660 ops/s
# Warmup Iteration  30: 6893264.986 ops/s
Iteration   1: 6603815.437 ops/s
Iteration   2: 6597701.628 ops/s
Iteration   3: 6825524.988 ops/s
Iteration   4: 6583151.851 ops/s
Iteration   5: 6609121.578 ops/s
Iteration   6: 6636217.579 ops/s
Iteration   7: 6607353.771 ops/s
Iteration   8: 6525588.643 ops/s
Iteration   9: 7042067.323 ops/s
Iteration  10: 6579177.671 ops/s
Iteration  11: 6876102.780 ops/s
Iteration  12: 6550252.752 ops/s
Iteration  13: 6766347.945 ops/s
Iteration  14: 6413558.406 ops/s
Iteration  15: 6778717.632 ops/s
Iteration  16: 6628771.626 ops/s
Iteration  17: 6646481.728 ops/s
Iteration  18: 6859055.463 ops/s
Iteration  19: 6595741.361 ops/s
Iteration  20: 6583840.258 ops/s
Iteration  21: 6833769.448 ops/s
Iteration  22: 6421536.986 ops/s
Iteration  23: 6829418.689 ops/s
Iteration  24: 6569267.730 ops/s
Iteration  25: 6587655.628 ops/s
Iteration  26: 6753000.788 ops/s
Iteration  27: 6649985.538 ops/s
Iteration  28: 6870366.997 ops/s
Iteration  29: 6652486.684 ops/s
Iteration  30: 6689085.627 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_success":
  6672172.151 ±(99.9%) 95387.289 ops/s [Average]
  (min, avg, max) = (6413558.406, 6672172.151, 7042067.323), stdev = 142771.214
  CI (99.9%): [6576784.862, 6767559.440] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
SingleFromMaybeTest._Benchmark.benchmark_success  thrpt   30  6672172.151 ± 95387.289  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_cancelOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_cancelOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1315603.559 ops/s
# Warmup Iteration   2: 2718352.648 ops/s
# Warmup Iteration   3: 3375556.926 ops/s
# Warmup Iteration   4: 3975000.766 ops/s
# Warmup Iteration   5: 3882525.422 ops/s
# Warmup Iteration   6: 3568698.891 ops/s
# Warmup Iteration   7: 3791412.203 ops/s
# Warmup Iteration   8: 3766327.925 ops/s
# Warmup Iteration   9: 3730420.971 ops/s
# Warmup Iteration  10: 3897345.332 ops/s
# Warmup Iteration  11: 3814703.486 ops/s
# Warmup Iteration  12: 3836349.682 ops/s
# Warmup Iteration  13: 3780915.076 ops/s
# Warmup Iteration  14: 3754577.845 ops/s
# Warmup Iteration  15: 3769256.771 ops/s
# Warmup Iteration  16: 3859153.962 ops/s
# Warmup Iteration  17: 3765020.296 ops/s
# Warmup Iteration  18: 3729107.296 ops/s
# Warmup Iteration  19: 3836180.829 ops/s
# Warmup Iteration  20: 3681324.475 ops/s
# Warmup Iteration  21: 3755120.226 ops/s
# Warmup Iteration  22: 3831655.473 ops/s
# Warmup Iteration  23: 3737763.099 ops/s
# Warmup Iteration  24: 3767203.461 ops/s
# Warmup Iteration  25: 3724438.263 ops/s
# Warmup Iteration  26: 3780473.692 ops/s
# Warmup Iteration  27: 3804584.411 ops/s
# Warmup Iteration  28: 3714351.304 ops/s
# Warmup Iteration  29: 3768520.955 ops/s
# Warmup Iteration  30: 3803738.277 ops/s
Iteration   1: 3703978.273 ops/s
Iteration   2: 3837515.084 ops/s
Iteration   3: 3764988.936 ops/s
Iteration   4: 3838265.970 ops/s
Iteration   5: 3667970.775 ops/s
Iteration   6: 3872179.957 ops/s
Iteration   7: 2732837.801 ops/s
Iteration   8: 3801079.692 ops/s
Iteration   9: 3795075.088 ops/s
Iteration  10: 3662830.364 ops/s
Iteration  11: 3736840.303 ops/s
Iteration  12: 3619824.442 ops/s
Iteration  13: 3741842.260 ops/s
Iteration  14: 3750751.228 ops/s
Iteration  15: 3682395.855 ops/s
Iteration  16: 3712934.025 ops/s
Iteration  17: 3691379.371 ops/s
Iteration  18: 3735719.759 ops/s
Iteration  19: 3701534.020 ops/s
Iteration  20: 3802432.987 ops/s
Iteration  21: 3705682.965 ops/s
Iteration  22: 3870901.320 ops/s
Iteration  23: 3732713.557 ops/s
Iteration  24: 3796336.364 ops/s
Iteration  25: 3871401.264 ops/s
Iteration  26: 3688705.283 ops/s
Iteration  27: 3690456.618 ops/s
Iteration  28: 3807151.892 ops/s
Iteration  29: 3719624.097 ops/s
Iteration  30: 3870196.862 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_cancelOther":
  3720184.880 ±(99.9%) 133115.464 ops/s [Average]
  (min, avg, max) = (2732837.801, 3720184.880, 3872179.957), stdev = 199240.975
  CI (99.9%): [3587069.417, 3853300.344] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
ObservableConcatWithSingleTest._Benchmark.benchmark_cancelOther  thrpt   30  3720184.880 ± 133115.464  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1407523.951 ops/s
# Warmup Iteration   2: 4152901.305 ops/s
# Warmup Iteration   3: 5308170.849 ops/s
# Warmup Iteration   4: 5689287.711 ops/s
# Warmup Iteration   5: 5951402.072 ops/s
# Warmup Iteration   6: 5645961.920 ops/s
# Warmup Iteration   7: 5741444.292 ops/s
# Warmup Iteration   8: 5697754.840 ops/s
# Warmup Iteration   9: 5640540.823 ops/s
# Warmup Iteration  10: 5954269.978 ops/s
# Warmup Iteration  11: 5693020.405 ops/s
# Warmup Iteration  12: 5963305.787 ops/s
# Warmup Iteration  13: 5754746.155 ops/s
# Warmup Iteration  14: 5718895.442 ops/s
# Warmup Iteration  15: 5836056.410 ops/s
# Warmup Iteration  16: 5720933.614 ops/s
# Warmup Iteration  17: 5898930.582 ops/s
# Warmup Iteration  18: 5657768.827 ops/s
# Warmup Iteration  19: 5813038.943 ops/s
# Warmup Iteration  20: 6022801.310 ops/s
# Warmup Iteration  21: 5832710.246 ops/s
# Warmup Iteration  22: 5931561.967 ops/s
# Warmup Iteration  23: 5582783.251 ops/s
# Warmup Iteration  24: 6031896.400 ops/s
# Warmup Iteration  25: 5703276.875 ops/s
# Warmup Iteration  26: 5940404.787 ops/s
# Warmup Iteration  27: 5810282.612 ops/s
# Warmup Iteration  28: 5697412.169 ops/s
# Warmup Iteration  29: 5926314.410 ops/s
# Warmup Iteration  30: 5794262.735 ops/s
Iteration   1: 6062138.407 ops/s
Iteration   2: 6000546.900 ops/s
Iteration   3: 5671915.704 ops/s
Iteration   4: 5713250.743 ops/s
Iteration   5: 5851191.633 ops/s
Iteration   6: 5641057.936 ops/s
Iteration   7: 5882404.232 ops/s
Iteration   8: 5661991.249 ops/s
Iteration   9: 5800566.285 ops/s
Iteration  10: 5977389.487 ops/s
Iteration  11: 5793964.752 ops/s
Iteration  12: 5831427.499 ops/s
Iteration  13: 5835704.141 ops/s
Iteration  14: 5645488.446 ops/s
Iteration  15: 6010694.695 ops/s
Iteration  16: 5561964.257 ops/s
Iteration  17: 6021668.174 ops/s
Iteration  18: 5771902.383 ops/s
Iteration  19: 5821083.315 ops/s
Iteration  20: 5774939.326 ops/s
Iteration  21: 6132002.243 ops/s
Iteration  22: 5690487.572 ops/s
Iteration  23: 6043063.020 ops/s
Iteration  24: 5953314.525 ops/s
Iteration  25: 5791983.406 ops/s
Iteration  26: 5888790.814 ops/s
Iteration  27: 5827361.189 ops/s
Iteration  28: 5726969.138 ops/s
Iteration  29: 5950718.107 ops/s
Iteration  30: 5738113.427 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_empty":
  5835803.100 ±(99.9%) 96356.810 ops/s [Average]
  (min, avg, max) = (5561964.257, 5835803.100, 6132002.243), stdev = 144222.348
  CI (99.9%): [5739446.290, 5932159.910] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_empty  thrpt   30  5835803.100 ± 96356.810  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_lastOfEmptyReturnsEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_lastOfEmptyReturnsEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2728726.218 ops/s
# Warmup Iteration   2: 5295111.410 ops/s
# Warmup Iteration   3: 6996390.022 ops/s
# Warmup Iteration   4: 7451389.733 ops/s
# Warmup Iteration   5: 7079437.438 ops/s
# Warmup Iteration   6: 7344992.276 ops/s
# Warmup Iteration   7: 7024560.570 ops/s
# Warmup Iteration   8: 7518841.671 ops/s
# Warmup Iteration   9: 7277620.738 ops/s
# Warmup Iteration  10: 7258320.877 ops/s
# Warmup Iteration  11: 7316261.138 ops/s
# Warmup Iteration  12: 7142885.803 ops/s
# Warmup Iteration  13: 7371006.411 ops/s
# Warmup Iteration  14: 7017999.261 ops/s
# Warmup Iteration  15: 7255462.386 ops/s
# Warmup Iteration  16: 7328569.496 ops/s
# Warmup Iteration  17: 7078057.442 ops/s
# Warmup Iteration  18: 7434849.243 ops/s
# Warmup Iteration  19: 7065156.634 ops/s
# Warmup Iteration  20: 7505128.567 ops/s
# Warmup Iteration  21: 7175285.234 ops/s
# Warmup Iteration  22: 7152847.392 ops/s
# Warmup Iteration  23: 7535895.181 ops/s
# Warmup Iteration  24: 7292883.253 ops/s
# Warmup Iteration  25: 7028367.737 ops/s
# Warmup Iteration  26: 7230875.777 ops/s
# Warmup Iteration  27: 7055575.611 ops/s
# Warmup Iteration  28: 7078992.450 ops/s
# Warmup Iteration  29: 7605930.196 ops/s
# Warmup Iteration  30: 7019665.454 ops/s
Iteration   1: 7520476.585 ops/s
Iteration   2: 5800613.067 ops/s
Iteration   3: 7001113.070 ops/s
Iteration   4: 7375256.852 ops/s
Iteration   5: 7172734.612 ops/s
Iteration   6: 7054393.720 ops/s
Iteration   7: 7235614.596 ops/s
Iteration   8: 7107712.838 ops/s
Iteration   9: 7367325.350 ops/s
Iteration  10: 6974996.068 ops/s
Iteration  11: 7378537.916 ops/s
Iteration  12: 7317232.061 ops/s
Iteration  13: 7135525.397 ops/s
Iteration  14: 7278481.683 ops/s
Iteration  15: 7263146.815 ops/s
Iteration  16: 7131579.368 ops/s
Iteration  17: 7550603.292 ops/s
Iteration  18: 6983506.923 ops/s
Iteration  19: 7237220.719 ops/s
Iteration  20: 6938081.856 ops/s
Iteration  21: 7185758.376 ops/s
Iteration  22: 7316112.654 ops/s
Iteration  23: 7128815.126 ops/s
Iteration  24: 7266522.120 ops/s
Iteration  25: 7307793.321 ops/s
Iteration  26: 7459709.808 ops/s
Iteration  27: 7441465.625 ops/s
Iteration  28: 6975237.631 ops/s
Iteration  29: 7501196.705 ops/s
Iteration  30: 7133845.801 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_lastOfEmptyReturnsEmpty":
  7184686.999 ±(99.9%) 209267.496 ops/s [Average]
  (min, avg, max) = (5800613.067, 7184686.999, 7550603.292), stdev = 313221.761
  CI (99.9%): [6975419.502, 7393954.495] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score        Error  Units
ObservableTakeLastOneTest._Benchmark.benchmark_lastOfEmptyReturnsEmpty  thrpt   30  7184686.999 ± 209267.496  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182185.935 ops/s
# Warmup Iteration   2: 445661.940 ops/s
# Warmup Iteration   3: 443355.053 ops/s
# Warmup Iteration   4: 464417.355 ops/s
# Warmup Iteration   5: 478891.082 ops/s
# Warmup Iteration   6: 510257.596 ops/s
# Warmup Iteration   7: 428963.493 ops/s
# Warmup Iteration   8: 494028.728 ops/s
# Warmup Iteration   9: 517452.335 ops/s
# Warmup Iteration  10: 493394.111 ops/s
# Warmup Iteration  11: 501261.701 ops/s
# Warmup Iteration  12: 506412.161 ops/s
# Warmup Iteration  13: 513724.059 ops/s
# Warmup Iteration  14: 518523.159 ops/s
# Warmup Iteration  15: 497422.440 ops/s
# Warmup Iteration  16: 494128.156 ops/s
# Warmup Iteration  17: 521889.903 ops/s
# Warmup Iteration  18: 531549.426 ops/s
# Warmup Iteration  19: 514584.232 ops/s
# Warmup Iteration  20: 525308.057 ops/s
# Warmup Iteration  21: 533495.569 ops/s
# Warmup Iteration  22: 517517.738 ops/s
# Warmup Iteration  23: 543351.553 ops/s
# Warmup Iteration  24: 503675.128 ops/s
# Warmup Iteration  25: 523687.309 ops/s
# Warmup Iteration  26: 531946.498 ops/s
# Warmup Iteration  27: 511730.715 ops/s
# Warmup Iteration  28: 526962.590 ops/s
# Warmup Iteration  29: 527741.294 ops/s
# Warmup Iteration  30: 509474.680 ops/s
Iteration   1: 548057.855 ops/s
Iteration   2: 499963.327 ops/s
Iteration   3: 523942.705 ops/s
Iteration   4: 530331.664 ops/s
Iteration   5: 508726.023 ops/s
Iteration   6: 532598.520 ops/s
Iteration   7: 512589.071 ops/s
Iteration   8: 528237.573 ops/s
Iteration   9: 521723.160 ops/s
Iteration  10: 509264.492 ops/s
Iteration  11: 534838.375 ops/s
Iteration  12: 515143.170 ops/s
Iteration  13: 536932.976 ops/s
Iteration  14: 523468.699 ops/s
Iteration  15: 527071.568 ops/s
Iteration  16: 490032.021 ops/s
Iteration  17: 525847.791 ops/s
Iteration  18: 529306.246 ops/s
Iteration  19: 507733.224 ops/s
Iteration  20: 541411.025 ops/s
Iteration  21: 509782.451 ops/s
Iteration  22: 540303.452 ops/s
Iteration  23: 520189.942 ops/s
Iteration  24: 518288.225 ops/s
Iteration  25: 542091.427 ops/s
Iteration  26: 490775.290 ops/s
Iteration  27: 534792.449 ops/s
Iteration  28: 521408.951 ops/s
Iteration  29: 535991.332 ops/s
Iteration  30: 507753.533 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapIterableObservableTest._Benchmark.benchmark_doubleOnSubscribe":
  522286.551 ±(99.9%) 9917.094 ops/s [Average]
  (min, avg, max) = (490032.021, 522286.551, 548057.855), stdev = 14843.441
  CI (99.9%): [512369.457, 532203.646] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
SingleFlatMapIterableObservableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  522286.551 ± 9917.094  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorIndex1OnEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorIndex1OnEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 235171.151 ops/s
# Warmup Iteration   2: 512512.274 ops/s
# Warmup Iteration   3: 623175.180 ops/s
# Warmup Iteration   4: 549852.443 ops/s
# Warmup Iteration   5: 589260.207 ops/s
# Warmup Iteration   6: 571116.918 ops/s
# Warmup Iteration   7: 611284.482 ops/s
# Warmup Iteration   8: 627606.335 ops/s
# Warmup Iteration   9: 622680.069 ops/s
# Warmup Iteration  10: 632215.959 ops/s
# Warmup Iteration  11: 605112.919 ops/s
# Warmup Iteration  12: 630354.195 ops/s
# Warmup Iteration  13: 633578.397 ops/s
# Warmup Iteration  14: 610556.651 ops/s
# Warmup Iteration  15: 651718.306 ops/s
# Warmup Iteration  16: 622273.024 ops/s
# Warmup Iteration  17: 649870.340 ops/s
# Warmup Iteration  18: 678645.555 ops/s
# Warmup Iteration  19: 634642.569 ops/s
# Warmup Iteration  20: 671307.375 ops/s
# Warmup Iteration  21: 645716.695 ops/s
# Warmup Iteration  22: 664520.581 ops/s
# Warmup Iteration  23: 650278.020 ops/s
# Warmup Iteration  24: 640129.452 ops/s
# Warmup Iteration  25: 653880.601 ops/s
# Warmup Iteration  26: 640272.394 ops/s
# Warmup Iteration  27: 566516.090 ops/s
# Warmup Iteration  28: 647540.547 ops/s
# Warmup Iteration  29: 649626.144 ops/s
# Warmup Iteration  30: 638072.194 ops/s
Iteration   1: 656388.099 ops/s
Iteration   2: 672654.428 ops/s
Iteration   3: 640683.713 ops/s
Iteration   4: 654228.864 ops/s
Iteration   5: 657772.061 ops/s
Iteration   6: 648694.281 ops/s
Iteration   7: 678043.764 ops/s
Iteration   8: 634827.431 ops/s
Iteration   9: 663212.605 ops/s
Iteration  10: 633151.095 ops/s
Iteration  11: 666068.859 ops/s
Iteration  12: 651428.040 ops/s
Iteration  13: 649385.112 ops/s
Iteration  14: 653297.171 ops/s
Iteration  15: 634909.115 ops/s
Iteration  16: 647705.082 ops/s
Iteration  17: 666487.332 ops/s
Iteration  18: 638501.009 ops/s
Iteration  19: 665777.320 ops/s
Iteration  20: 646671.540 ops/s
Iteration  21: 658904.039 ops/s
Iteration  22: 664167.628 ops/s
Iteration  23: 613395.036 ops/s
Iteration  24: 686160.322 ops/s
Iteration  25: 645826.648 ops/s
Iteration  26: 645668.337 ops/s
Iteration  27: 665378.736 ops/s
Iteration  28: 648852.337 ops/s
Iteration  29: 651264.021 ops/s
Iteration  30: 672677.551 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorIndex1OnEmptySource":
  653739.386 ±(99.9%) 10126.639 ops/s [Average]
  (min, avg, max) = (613395.036, 653739.386, 686160.322), stdev = 15157.077
  CI (99.9%): [643612.747, 663866.025] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score       Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorIndex1OnEmptySource  thrpt   30  653739.386 ± 10126.639  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_justConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_justConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1110633.954 ops/s
# Warmup Iteration   2: 3152586.211 ops/s
# Warmup Iteration   3: 4562879.049 ops/s
# Warmup Iteration   4: 4581769.661 ops/s
# Warmup Iteration   5: 4670221.007 ops/s
# Warmup Iteration   6: 4539940.630 ops/s
# Warmup Iteration   7: 4435484.636 ops/s
# Warmup Iteration   8: 4774400.228 ops/s
# Warmup Iteration   9: 4479805.413 ops/s
# Warmup Iteration  10: 4462892.673 ops/s
# Warmup Iteration  11: 4710990.376 ops/s
# Warmup Iteration  12: 4435494.034 ops/s
# Warmup Iteration  13: 4621280.722 ops/s
# Warmup Iteration  14: 4591740.635 ops/s
# Warmup Iteration  15: 4648426.595 ops/s
# Warmup Iteration  16: 4449065.960 ops/s
# Warmup Iteration  17: 4578409.317 ops/s
# Warmup Iteration  18: 4714187.229 ops/s
# Warmup Iteration  19: 4522259.458 ops/s
# Warmup Iteration  20: 4696089.953 ops/s
# Warmup Iteration  21: 4534494.316 ops/s
# Warmup Iteration  22: 4535195.906 ops/s
# Warmup Iteration  23: 4839890.536 ops/s
# Warmup Iteration  24: 4434845.758 ops/s
# Warmup Iteration  25: 4713703.484 ops/s
# Warmup Iteration  26: 4514301.039 ops/s
# Warmup Iteration  27: 4615758.402 ops/s
# Warmup Iteration  28: 4705939.442 ops/s
# Warmup Iteration  29: 4460335.920 ops/s
# Warmup Iteration  30: 4584211.938 ops/s
Iteration   1: 4701837.683 ops/s
Iteration   2: 4756450.150 ops/s
Iteration   3: 4510262.869 ops/s
Iteration   4: 4696515.488 ops/s
Iteration   5: 4702270.604 ops/s
Iteration   6: 4576989.004 ops/s
Iteration   7: 4557364.307 ops/s
Iteration   8: 4406947.092 ops/s
Iteration   9: 4652615.516 ops/s
Iteration  10: 4760103.642 ops/s
Iteration  11: 4623448.459 ops/s
Iteration  12: 4646190.815 ops/s
Iteration  13: 4610774.183 ops/s
Iteration  14: 4532120.710 ops/s
Iteration  15: 4538963.303 ops/s
Iteration  16: 4554477.829 ops/s
Iteration  17: 4650038.882 ops/s
Iteration  18: 4744641.703 ops/s
Iteration  19: 4476635.349 ops/s
Iteration  20: 4713530.607 ops/s
Iteration  21: 4669874.737 ops/s
Iteration  22: 4654664.279 ops/s
Iteration  23: 4548112.045 ops/s
Iteration  24: 4647287.610 ops/s
Iteration  25: 4693971.995 ops/s
Iteration  26: 4573479.289 ops/s
Iteration  27: 4759965.322 ops/s
Iteration  28: 4608413.192 ops/s
Iteration  29: 4644292.279 ops/s
Iteration  30: 4793495.286 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_justConditional":
  4633524.474 ±(99.9%) 61922.154 ops/s [Average]
  (min, avg, max) = (4406947.092, 4633524.474, 4793495.286), stdev = 92682.171
  CI (99.9%): [4571602.321, 4695446.628] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
SingleDoAfterSuccessTest._Benchmark.benchmark_justConditional  thrpt   30  4633524.474 ± 61922.154  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_justConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_justConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1084116.614 ops/s
# Warmup Iteration   2: 4199350.937 ops/s
# Warmup Iteration   3: 6494493.554 ops/s
# Warmup Iteration   4: 6284671.510 ops/s
# Warmup Iteration   5: 6707040.039 ops/s
# Warmup Iteration   6: 6185246.137 ops/s
# Warmup Iteration   7: 6582455.976 ops/s
# Warmup Iteration   8: 6457342.165 ops/s
# Warmup Iteration   9: 6520589.154 ops/s
# Warmup Iteration  10: 6668018.349 ops/s
# Warmup Iteration  11: 6473220.709 ops/s
# Warmup Iteration  12: 6409997.300 ops/s
# Warmup Iteration  13: 6580088.084 ops/s
# Warmup Iteration  14: 6477255.886 ops/s
# Warmup Iteration  15: 6823237.605 ops/s
# Warmup Iteration  16: 6600795.690 ops/s
# Warmup Iteration  17: 6358224.025 ops/s
# Warmup Iteration  18: 6843223.824 ops/s
# Warmup Iteration  19: 6258981.597 ops/s
# Warmup Iteration  20: 6507299.986 ops/s
# Warmup Iteration  21: 6027731.730 ops/s
# Warmup Iteration  22: 5236146.630 ops/s
# Warmup Iteration  23: 6762327.684 ops/s
# Warmup Iteration  24: 6717334.145 ops/s
# Warmup Iteration  25: 6346992.742 ops/s
# Warmup Iteration  26: 6458566.746 ops/s
# Warmup Iteration  27: 6449771.458 ops/s
# Warmup Iteration  28: 6354130.638 ops/s
# Warmup Iteration  29: 6696527.650 ops/s
# Warmup Iteration  30: 6402624.081 ops/s
Iteration   1: 6590016.280 ops/s
Iteration   2: 6459154.174 ops/s
Iteration   3: 6412091.432 ops/s
Iteration   4: 6454344.569 ops/s
Iteration   5: 6421800.306 ops/s
Iteration   6: 6676763.662 ops/s
Iteration   7: 6433715.723 ops/s
Iteration   8: 6411263.901 ops/s
Iteration   9: 6573368.556 ops/s
Iteration  10: 6407644.590 ops/s
Iteration  11: 6632890.426 ops/s
Iteration  12: 6318793.814 ops/s
Iteration  13: 6384143.724 ops/s
Iteration  14: 6566820.626 ops/s
Iteration  15: 6859650.174 ops/s
Iteration  16: 6749070.424 ops/s
Iteration  17: 6259202.636 ops/s
Iteration  18: 6575651.139 ops/s
Iteration  19: 6529523.818 ops/s
Iteration  20: 6574679.802 ops/s
Iteration  21: 6509881.542 ops/s
Iteration  22: 6401157.720 ops/s
Iteration  23: 6533088.438 ops/s
Iteration  24: 6677197.557 ops/s
Iteration  25: 6463399.569 ops/s
Iteration  26: 6539906.363 ops/s
Iteration  27: 6557925.633 ops/s
Iteration  28: 6525534.726 ops/s
Iteration  29: 6342268.249 ops/s
Iteration  30: 6343577.185 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_justConditional":
  6506150.892 ±(99.9%) 88649.109 ops/s [Average]
  (min, avg, max) = (6259202.636, 6506150.892, 6859650.174), stdev = 132685.824
  CI (99.9%): [6417501.783, 6594800.001] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SingleDoAfterTerminateTest._Benchmark.benchmark_justConditional  thrpt   30  6506150.892 ± 88649.109  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.663 ops/s
# Warmup Iteration   2: 14550.277 ops/s
# Warmup Iteration   3: 30143.201 ops/s
# Warmup Iteration   4: 36566.168 ops/s
# Warmup Iteration   5: 45193.384 ops/s
# Warmup Iteration   6: 41299.602 ops/s
# Warmup Iteration   7: 48931.627 ops/s
# Warmup Iteration   8: 83888.544 ops/s
# Warmup Iteration   9: 184577.153 ops/s
# Warmup Iteration  10: 206682.607 ops/s
# Warmup Iteration  11: 222447.547 ops/s
# Warmup Iteration  12: 216516.689 ops/s
# Warmup Iteration  13: 222533.687 ops/s
# Warmup Iteration  14: 211557.383 ops/s
# Warmup Iteration  15: 222237.136 ops/s
# Warmup Iteration  16: 212727.873 ops/s
# Warmup Iteration  17: 216374.202 ops/s
# Warmup Iteration  18: 222019.299 ops/s
# Warmup Iteration  19: 207918.176 ops/s
# Warmup Iteration  20: 221773.886 ops/s
# Warmup Iteration  21: 215727.705 ops/s
# Warmup Iteration  22: 221810.139 ops/s
# Warmup Iteration  23: 206773.405 ops/s
# Warmup Iteration  24: 212534.167 ops/s
# Warmup Iteration  25: 212670.249 ops/s
# Warmup Iteration  26: 222562.377 ops/s
# Warmup Iteration  27: 212419.449 ops/s
# Warmup Iteration  28: 212661.053 ops/s
# Warmup Iteration  29: 220868.538 ops/s
# Warmup Iteration  30: 215055.357 ops/s
Iteration   1: 222292.746 ops/s
Iteration   2: 215136.032 ops/s
Iteration   3: 221043.390 ops/s
Iteration   4: 212014.070 ops/s
Iteration   5: 216905.323 ops/s
Iteration   6: 218418.539 ops/s
Iteration   7: 210790.796 ops/s
Iteration   8: 219161.165 ops/s
Iteration   9: 216837.941 ops/s
Iteration  10: 223694.318 ops/s
Iteration  11: 213396.180 ops/s
Iteration  12: 221300.405 ops/s
Iteration  13: 217655.088 ops/s
Iteration  14: 214680.086 ops/s
Iteration  15: 219395.023 ops/s
Iteration  16: 218844.978 ops/s
Iteration  17: 221949.446 ops/s
Iteration  18: 220060.631 ops/s
Iteration  19: 222225.630 ops/s
Iteration  20: 215775.902 ops/s
Iteration  21: 224039.238 ops/s
Iteration  22: 218808.796 ops/s
Iteration  23: 217407.322 ops/s
Iteration  24: 225234.227 ops/s
Iteration  25: 218118.391 ops/s
Iteration  26: 223842.755 ops/s
Iteration  27: 215306.736 ops/s
Iteration  28: 226052.143 ops/s
Iteration  29: 226219.180 ops/s
Iteration  30: 219637.338 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorError":
  219208.127 ±(99.9%) 2693.198 ops/s [Average]
  (min, avg, max) = (210790.796, 219208.127, 226219.180), stdev = 4031.053
  CI (99.9%): [216514.929, 221901.325] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableFirstTest._Benchmark.benchmark_firstOrErrorError  thrpt   30  219208.127 ± 2693.198  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 233453.042 ops/s
# Warmup Iteration   2: 552437.235 ops/s
# Warmup Iteration   3: 634630.139 ops/s
# Warmup Iteration   4: 704185.003 ops/s
# Warmup Iteration   5: 609758.888 ops/s
# Warmup Iteration   6: 695542.905 ops/s
# Warmup Iteration   7: 649998.253 ops/s
# Warmup Iteration   8: 699542.357 ops/s
# Warmup Iteration   9: 717397.875 ops/s
# Warmup Iteration  10: 678251.415 ops/s
# Warmup Iteration  11: 702592.889 ops/s
# Warmup Iteration  12: 725236.143 ops/s
# Warmup Iteration  13: 686754.096 ops/s
# Warmup Iteration  14: 736305.605 ops/s
# Warmup Iteration  15: 614031.152 ops/s
# Warmup Iteration  16: 653143.220 ops/s
# Warmup Iteration  17: 773552.929 ops/s
# Warmup Iteration  18: 716098.303 ops/s
# Warmup Iteration  19: 773129.277 ops/s
# Warmup Iteration  20: 716752.202 ops/s
# Warmup Iteration  21: 770998.401 ops/s
# Warmup Iteration  22: 731434.940 ops/s
# Warmup Iteration  23: 745144.997 ops/s
# Warmup Iteration  24: 766192.753 ops/s
# Warmup Iteration  25: 743383.270 ops/s
# Warmup Iteration  26: 767056.910 ops/s
# Warmup Iteration  27: 750565.070 ops/s
# Warmup Iteration  28: 728134.175 ops/s
# Warmup Iteration  29: 775319.132 ops/s
# Warmup Iteration  30: 745667.308 ops/s
Iteration   1: 725391.207 ops/s
Iteration   2: 774391.296 ops/s
Iteration   3: 764867.020 ops/s
Iteration   4: 701472.122 ops/s
Iteration   5: 753715.396 ops/s
Iteration   6: 732257.520 ops/s
Iteration   7: 759449.748 ops/s
Iteration   8: 768417.122 ops/s
Iteration   9: 750934.813 ops/s
Iteration  10: 758007.311 ops/s
Iteration  11: 764347.872 ops/s
Iteration  12: 734223.561 ops/s
Iteration  13: 772334.305 ops/s
Iteration  14: 760055.727 ops/s
Iteration  15: 759370.640 ops/s
Iteration  16: 737511.121 ops/s
Iteration  17: 765845.876 ops/s
Iteration  18: 713754.023 ops/s
Iteration  19: 770102.228 ops/s
Iteration  20: 736594.205 ops/s
Iteration  21: 760762.551 ops/s
Iteration  22: 759523.745 ops/s
Iteration  23: 714217.452 ops/s
Iteration  24: 771295.332 ops/s
Iteration  25: 723752.873 ops/s
Iteration  26: 742259.898 ops/s
Iteration  27: 760345.601 ops/s
Iteration  28: 734845.948 ops/s
Iteration  29: 749476.851 ops/s
Iteration  30: 747838.305 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromMaybeTest._Benchmark.benchmark_error":
  748912.056 ±(99.9%) 13036.378 ops/s [Average]
  (min, avg, max) = (701472.122, 748912.056, 774391.296), stdev = 19512.239
  CI (99.9%): [735875.677, 761948.434] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
SingleFromMaybeTest._Benchmark.benchmark_error  thrpt   30  748912.056 ± 13036.378  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_noDisposeOnAllSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_noDisposeOnAllSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 849790.155 ops/s
# Warmup Iteration   2: 2603221.095 ops/s
# Warmup Iteration   3: 3519479.469 ops/s
# Warmup Iteration   4: 3630928.965 ops/s
# Warmup Iteration   5: 3798155.216 ops/s
# Warmup Iteration   6: 3684903.196 ops/s
# Warmup Iteration   7: 3675276.314 ops/s
# Warmup Iteration   8: 3863686.704 ops/s
# Warmup Iteration   9: 3533045.019 ops/s
# Warmup Iteration  10: 3746689.662 ops/s
# Warmup Iteration  11: 3803373.961 ops/s
# Warmup Iteration  12: 3580134.217 ops/s
# Warmup Iteration  13: 3793510.684 ops/s
# Warmup Iteration  14: 3647240.233 ops/s
# Warmup Iteration  15: 3811063.148 ops/s
# Warmup Iteration  16: 3832730.089 ops/s
# Warmup Iteration  17: 3710089.348 ops/s
# Warmup Iteration  18: 3626693.823 ops/s
# Warmup Iteration  19: 3838732.799 ops/s
# Warmup Iteration  20: 3650573.943 ops/s
# Warmup Iteration  21: 3789468.283 ops/s
# Warmup Iteration  22: 3721219.946 ops/s
# Warmup Iteration  23: 3581097.401 ops/s
# Warmup Iteration  24: 3825222.185 ops/s
# Warmup Iteration  25: 3784333.352 ops/s
# Warmup Iteration  26: 3606156.064 ops/s
# Warmup Iteration  27: 3765596.821 ops/s
# Warmup Iteration  28: 3633219.992 ops/s
# Warmup Iteration  29: 3647183.639 ops/s
# Warmup Iteration  30: 3853241.321 ops/s
Iteration   1: 3509233.869 ops/s
Iteration   2: 3699202.448 ops/s
Iteration   3: 3775584.894 ops/s
Iteration   4: 3575759.057 ops/s
Iteration   5: 3821410.912 ops/s
Iteration   6: 3651427.700 ops/s
Iteration   7: 3718946.663 ops/s
Iteration   8: 3698558.211 ops/s
Iteration   9: 3707378.137 ops/s
Iteration  10: 3808500.495 ops/s
Iteration  11: 3641056.937 ops/s
Iteration  12: 3699044.767 ops/s
Iteration  13: 3765608.182 ops/s
Iteration  14: 3637005.872 ops/s
Iteration  15: 3752571.697 ops/s
Iteration  16: 3738208.212 ops/s
Iteration  17: 3726493.070 ops/s
Iteration  18: 3806105.254 ops/s
Iteration  19: 3722291.904 ops/s
Iteration  20: 3863603.921 ops/s
Iteration  21: 3691853.771 ops/s
Iteration  22: 3751981.709 ops/s
Iteration  23: 3713081.545 ops/s
Iteration  24: 3758626.735 ops/s
Iteration  25: 3732536.315 ops/s
Iteration  26: 3612770.179 ops/s
Iteration  27: 3826849.001 ops/s
Iteration  28: 3607972.625 ops/s
Iteration  29: 3796296.263 ops/s
Iteration  30: 3747348.124 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipTest._Benchmark.benchmark_noDisposeOnAllSuccess":
  3718576.949 ±(99.9%) 53042.826 ops/s [Average]
  (min, avg, max) = (3509233.869, 3718576.949, 3863603.921), stdev = 79392.012
  CI (99.9%): [3665534.123, 3771619.775] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SingleZipTest._Benchmark.benchmark_noDisposeOnAllSuccess  thrpt   30  3718576.949 ± 53042.826  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25804.092 ops/s
# Warmup Iteration   2: 17807.164 ops/s
# Warmup Iteration   3: 19439.790 ops/s
# Warmup Iteration   4: 20714.530 ops/s
# Warmup Iteration   5: 27721.912 ops/s
# Warmup Iteration   6: 21403.239 ops/s
# Warmup Iteration   7: 21291.101 ops/s
# Warmup Iteration   8: 20549.688 ops/s
# Warmup Iteration   9: 20871.050 ops/s
# Warmup Iteration  10: 29614.688 ops/s
# Warmup Iteration  11: 19091.131 ops/s
# Warmup Iteration  12: 20387.146 ops/s
# Warmup Iteration  13: 20787.831 ops/s
# Warmup Iteration  14: 20935.574 ops/s
# Warmup Iteration  15: 21085.629 ops/s
# Warmup Iteration  16: 20841.789 ops/s
# Warmup Iteration  17: 20236.694 ops/s
# Warmup Iteration  18: 21094.786 ops/s
# Warmup Iteration  19: 20908.381 ops/s
# Warmup Iteration  20: 21618.322 ops/s
# Warmup Iteration  21: 20878.066 ops/s
# Warmup Iteration  22: 21097.133 ops/s
# Warmup Iteration  23: 20656.714 ops/s
# Warmup Iteration  24: 21343.520 ops/s
# Warmup Iteration  25: 20758.877 ops/s
# Warmup Iteration  26: 21075.892 ops/s
# Warmup Iteration  27: 20714.039 ops/s
# Warmup Iteration  28: 21383.729 ops/s
# Warmup Iteration  29: 20891.327 ops/s
# Warmup Iteration  30: 21029.997 ops/s
Iteration   1: 20628.214 ops/s
Iteration   2: 20760.205 ops/s
Iteration   3: 20664.478 ops/s
Iteration   4: 20925.295 ops/s
Iteration   5: 21152.728 ops/s
Iteration   6: 20753.460 ops/s
Iteration   7: 21375.038 ops/s
Iteration   8: 20782.077 ops/s
Iteration   9: 21245.080 ops/s
Iteration  10: 20448.783 ops/s
Iteration  11: 21032.629 ops/s
Iteration  12: 20177.631 ops/s
Iteration  13: 20759.905 ops/s
Iteration  14: 21559.542 ops/s
Iteration  15: 20832.497 ops/s
Iteration  16: 21249.364 ops/s
Iteration  17: 20817.239 ops/s
Iteration  18: 20959.543 ops/s
Iteration  19: 20583.245 ops/s
Iteration  20: 20678.476 ops/s
Iteration  21: 21006.205 ops/s
Iteration  22: 20881.131 ops/s
Iteration  23: 20456.747 ops/s
Iteration  24: 21478.461 ops/s
Iteration  25: 21008.649 ops/s
Iteration  26: 21084.200 ops/s
Iteration  27: 21107.095 ops/s
Iteration  28: 20736.460 ops/s
Iteration  29: 21469.181 ops/s
Iteration  30: 20686.476 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirect":
  20910.001 ±(99.9%) 218.517 ops/s [Average]
  (min, avg, max) = (20177.631, 20910.001, 21559.542), stdev = 327.067
  CI (99.9%): [20691.484, 21128.519] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt      Score     Error  Units
SingleSchedulerTest._Benchmark.benchmark_scheduleDirect  thrpt   30  20910.001 ± 218.517  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_unwrapScheduleDirectTask$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_unwrapScheduleDirectTask

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 145320.182 ops/s
# Warmup Iteration   2: 384068.376 ops/s
# Warmup Iteration   3: 400267.514 ops/s
# Warmup Iteration   4: 381485.622 ops/s
# Warmup Iteration   5: 380081.497 ops/s
# Warmup Iteration   6: 389539.312 ops/s
# Warmup Iteration   7: 399514.689 ops/s
# Warmup Iteration   8: 368771.480 ops/s
# Warmup Iteration   9: 402077.400 ops/s
# Warmup Iteration  10: 362760.847 ops/s
# Warmup Iteration  11: 365890.257 ops/s
# Warmup Iteration  12: 373919.695 ops/s
# Warmup Iteration  13: 396324.140 ops/s
# Warmup Iteration  14: 355935.628 ops/s
# Warmup Iteration  15: 392098.395 ops/s
# Warmup Iteration  16: 393039.098 ops/s
# Warmup Iteration  17: 392276.100 ops/s
# Warmup Iteration  18: 375518.297 ops/s
# Warmup Iteration  19: 412450.256 ops/s
# Warmup Iteration  20: 403434.182 ops/s
# Warmup Iteration  21: 438668.650 ops/s
# Warmup Iteration  22: 387892.095 ops/s
# Warmup Iteration  23: 421787.411 ops/s
# Warmup Iteration  24: 380939.569 ops/s
# Warmup Iteration  25: 370572.478 ops/s
# Warmup Iteration  26: 400105.156 ops/s
# Warmup Iteration  27: 403674.610 ops/s
# Warmup Iteration  28: 436977.177 ops/s
# Warmup Iteration  29: 387864.745 ops/s
# Warmup Iteration  30: 429168.349 ops/s
Iteration   1: 414790.131 ops/s
Iteration   2: 358443.591 ops/s
Iteration   3: 424224.564 ops/s
Iteration   4: 389822.449 ops/s
Iteration   5: 339984.291 ops/s
Iteration   6: 381915.522 ops/s
Iteration   7: 316193.727 ops/s
Iteration   8: 361135.890 ops/s
Iteration   9: 338699.850 ops/s
Iteration  10: 324062.284 ops/s
Iteration  11: 357233.528 ops/s
Iteration  12: 415594.477 ops/s
Iteration  13: 426840.582 ops/s
Iteration  14: 441810.294 ops/s
Iteration  15: 417109.444 ops/s
Iteration  16: 377827.763 ops/s
Iteration  17: 417489.828 ops/s
Iteration  18: 384647.000 ops/s
Iteration  19: 377032.220 ops/s
Iteration  20: 383515.518 ops/s
Iteration  21: 404219.553 ops/s
Iteration  22: 393879.600 ops/s
Iteration  23: 392127.488 ops/s
Iteration  24: 371579.775 ops/s
Iteration  25: 407143.337 ops/s
Iteration  26: 347544.931 ops/s
Iteration  27: 345571.810 ops/s
Iteration  28: 397417.848 ops/s
Iteration  29: 375649.380 ops/s
Iteration  30: 427257.392 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_unwrapScheduleDirectTask":
  383692.136 ±(99.9%) 21964.560 ops/s [Average]
  (min, avg, max) = (316193.727, 383692.136, 441810.294), stdev = 32875.522
  CI (99.9%): [361727.575, 405656.696] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
SingleSchedulerTest._Benchmark.benchmark_unwrapScheduleDirectTask  thrpt   30  383692.136 ± 21964.560  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_scheduledActionStates$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_scheduledActionStates

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2119886.636 ops/s
# Warmup Iteration   2: 4123257.891 ops/s
# Warmup Iteration   3: 4389395.205 ops/s
# Warmup Iteration   4: 4119820.719 ops/s
# Warmup Iteration   5: 5454650.261 ops/s
# Warmup Iteration   6: 5293757.154 ops/s
# Warmup Iteration   7: 5179687.429 ops/s
# Warmup Iteration   8: 5064723.166 ops/s
# Warmup Iteration   9: 5266593.279 ops/s
# Warmup Iteration  10: 4993438.566 ops/s
# Warmup Iteration  11: 5231581.377 ops/s
# Warmup Iteration  12: 5097084.457 ops/s
# Warmup Iteration  13: 5210458.375 ops/s
# Warmup Iteration  14: 5161192.044 ops/s
# Warmup Iteration  15: 5109910.001 ops/s
# Warmup Iteration  16: 5212447.777 ops/s
# Warmup Iteration  17: 5032613.425 ops/s
# Warmup Iteration  18: 5265938.852 ops/s
# Warmup Iteration  19: 5150433.426 ops/s
# Warmup Iteration  20: 5405863.102 ops/s
# Warmup Iteration  21: 5019257.279 ops/s
# Warmup Iteration  22: 5215049.034 ops/s
# Warmup Iteration  23: 5300578.546 ops/s
# Warmup Iteration  24: 5174853.155 ops/s
# Warmup Iteration  25: 5032595.252 ops/s
# Warmup Iteration  26: 5387424.216 ops/s
# Warmup Iteration  27: 4942326.530 ops/s
# Warmup Iteration  28: 5328102.518 ops/s
# Warmup Iteration  29: 5204718.286 ops/s
# Warmup Iteration  30: 5200780.053 ops/s
Iteration   1: 5151098.714 ops/s
Iteration   2: 5244333.440 ops/s
Iteration   3: 5261376.252 ops/s
Iteration   4: 5015034.237 ops/s
Iteration   5: 5123050.392 ops/s
Iteration   6: 5370344.594 ops/s
Iteration   7: 5225242.372 ops/s
Iteration   8: 5246853.120 ops/s
Iteration   9: 5254598.964 ops/s
Iteration  10: 5067611.891 ops/s
Iteration  11: 5438000.260 ops/s
Iteration  12: 5256002.629 ops/s
Iteration  13: 5242684.306 ops/s
Iteration  14: 5167335.913 ops/s
Iteration  15: 5156857.307 ops/s
Iteration  16: 5143541.209 ops/s
Iteration  17: 5289586.596 ops/s
Iteration  18: 5110397.762 ops/s
Iteration  19: 5163381.369 ops/s
Iteration  20: 5075681.443 ops/s
Iteration  21: 5235910.220 ops/s
Iteration  22: 5035088.938 ops/s
Iteration  23: 5093423.038 ops/s
Iteration  24: 5129524.775 ops/s
Iteration  25: 5290094.175 ops/s
Iteration  26: 5287816.471 ops/s
Iteration  27: 5060458.387 ops/s
Iteration  28: 5287587.251 ops/s
Iteration  29: 5136645.166 ops/s
Iteration  30: 5201685.111 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SchedulerWhenTest._Benchmark.benchmark_scheduledActionStates":
  5192041.544 ±(99.9%) 66935.873 ops/s [Average]
  (min, avg, max) = (5015034.237, 5192041.544, 5438000.260), stdev = 100186.471
  CI (99.9%): [5125105.671, 5258977.416] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
SchedulerWhenTest._Benchmark.benchmark_scheduledActionStates  thrpt   30  5192041.544 ± 66935.873  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTimedTest._Benchmark.benchmark_timedDefaultScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTimedTest._Benchmark.benchmark_timedDefaultScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30017.465 ops/s
# Warmup Iteration   2: 67845.092 ops/s
# Warmup Iteration   3: 132768.434 ops/s
# Warmup Iteration   4: 124849.527 ops/s
# Warmup Iteration   5: 118543.650 ops/s
# Warmup Iteration   6: 123474.414 ops/s
# Warmup Iteration   7: 126894.108 ops/s
# Warmup Iteration   8: 131874.884 ops/s
# Warmup Iteration   9: 160458.816 ops/s
# Warmup Iteration  10: 123589.129 ops/s
# Warmup Iteration  11: 124796.135 ops/s
# Warmup Iteration  12: 147944.962 ops/s
# Warmup Iteration  13: 130531.740 ops/s
# Warmup Iteration  14: 139414.642 ops/s
# Warmup Iteration  15: 133307.077 ops/s
# Warmup Iteration  16: 139441.502 ops/s
# Warmup Iteration  17: 111490.245 ops/s
# Warmup Iteration  18: 143721.456 ops/s
# Warmup Iteration  19: 122651.604 ops/s
# Warmup Iteration  20: 130518.429 ops/s
# Warmup Iteration  21: 130529.187 ops/s
# Warmup Iteration  22: 137096.787 ops/s
# Warmup Iteration  23: 128386.460 ops/s
# Warmup Iteration  24: 128868.213 ops/s
# Warmup Iteration  25: 129468.757 ops/s
# Warmup Iteration  26: 120374.479 ops/s
# Warmup Iteration  27: 142519.609 ops/s
# Warmup Iteration  28: 113469.700 ops/s
# Warmup Iteration  29: 154740.538 ops/s
# Warmup Iteration  30: 159109.500 ops/s
Iteration   1: 138228.603 ops/s
Iteration   2: 144562.247 ops/s
Iteration   3: 119701.334 ops/s
Iteration   4: 126191.513 ops/s
Iteration   5: 125117.549 ops/s
Iteration   6: 131067.033 ops/s
Iteration   7: 114948.625 ops/s
Iteration   8: 146000.055 ops/s
Iteration   9: 151772.936 ops/s
Iteration  10: 125424.395 ops/s
Iteration  11: 127615.148 ops/s
Iteration  12: 123851.465 ops/s
Iteration  13: 138588.072 ops/s
Iteration  14: 118284.691 ops/s
Iteration  15: 120217.585 ops/s
Iteration  16: 144127.810 ops/s
Iteration  17: 143682.129 ops/s
Iteration  18: 129580.878 ops/s
Iteration  19: 140545.438 ops/s
Iteration  20: 131131.588 ops/s
Iteration  21: 140533.311 ops/s
Iteration  22: 141482.455 ops/s
Iteration  23: 138189.182 ops/s
Iteration  24: 136492.188 ops/s
Iteration  25: 131928.562 ops/s
Iteration  26: 135934.580 ops/s
Iteration  27: 123769.491 ops/s
Iteration  28: 114904.484 ops/s
Iteration  29: 101729.633 ops/s
Iteration  30: 123021.217 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTimedTest._Benchmark.benchmark_timedDefaultScheduler":
  130954.140 ±(99.9%) 7577.902 ops/s [Average]
  (min, avg, max) = (101729.633, 130954.140, 151772.936), stdev = 11342.248
  CI (99.9%): [123376.238, 138532.042] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableTakeTimedTest._Benchmark.benchmark_timedDefaultScheduler  thrpt   30  130954.140 ± 7577.902  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 13103.714 ops/s
# Warmup Iteration   2: 42476.729 ops/s
# Warmup Iteration   3: 53910.559 ops/s
# Warmup Iteration   4: 101034.906 ops/s
# Warmup Iteration   5: 110085.770 ops/s
# Warmup Iteration   6: 103707.811 ops/s
# Warmup Iteration   7: 120466.642 ops/s
# Warmup Iteration   8: 110497.333 ops/s
# Warmup Iteration   9: 97954.760 ops/s
# Warmup Iteration  10: 116898.283 ops/s
# Warmup Iteration  11: 103932.281 ops/s
# Warmup Iteration  12: 125326.756 ops/s
# Warmup Iteration  13: 110500.085 ops/s
# Warmup Iteration  14: 103314.743 ops/s
# Warmup Iteration  15: 102312.245 ops/s
# Warmup Iteration  16: 115955.462 ops/s
# Warmup Iteration  17: 104449.166 ops/s
# Warmup Iteration  18: 127279.918 ops/s
# Warmup Iteration  19: 116819.328 ops/s
# Warmup Iteration  20: 110868.722 ops/s
# Warmup Iteration  21: 111311.292 ops/s
# Warmup Iteration  22: 121327.557 ops/s
# Warmup Iteration  23: 108677.056 ops/s
# Warmup Iteration  24: 103528.001 ops/s
# Warmup Iteration  25: 121563.911 ops/s
# Warmup Iteration  26: 113687.921 ops/s
# Warmup Iteration  27: 121828.544 ops/s
# Warmup Iteration  28: 105518.172 ops/s
# Warmup Iteration  29: 121720.711 ops/s
# Warmup Iteration  30: 115057.921 ops/s
Iteration   1: 121802.195 ops/s
Iteration   2: 109956.622 ops/s
Iteration   3: 106349.023 ops/s
Iteration   4: 114091.046 ops/s
Iteration   5: 110898.672 ops/s
Iteration   6: 127215.319 ops/s
Iteration   7: 111914.436 ops/s
Iteration   8: 117539.307 ops/s
Iteration   9: 110276.009 ops/s
Iteration  10: 106445.176 ops/s
Iteration  11: 120807.186 ops/s
Iteration  12: 111491.505 ops/s
Iteration  13: 114705.060 ops/s
Iteration  14: 117411.343 ops/s
Iteration  15: 118803.168 ops/s
Iteration  16: 127274.635 ops/s
Iteration  17: 118919.444 ops/s
Iteration  18: 96530.699 ops/s
Iteration  19: 116224.070 ops/s
Iteration  20: 114557.116 ops/s
Iteration  21: 109400.821 ops/s
Iteration  22: 111187.047 ops/s
Iteration  23: 115402.779 ops/s
Iteration  24: 106965.298 ops/s
Iteration  25: 115827.650 ops/s
Iteration  26: 103340.057 ops/s
Iteration  27: 112641.140 ops/s
Iteration  28: 107183.809 ops/s
Iteration  29: 109343.193 ops/s
Iteration  30: 105546.071 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedError":
  113001.663 ±(99.9%) 4499.991 ops/s [Average]
  (min, avg, max) = (96530.699, 113001.663, 127274.635), stdev = 6735.375
  CI (99.9%): [108501.672, 117501.654] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_timedError  thrpt   30  113001.663 ± 4499.991  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOnTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOnTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106928.191 ops/s
# Warmup Iteration   2: 407716.356 ops/s
# Warmup Iteration   3: 499972.039 ops/s
# Warmup Iteration   4: 484935.243 ops/s
# Warmup Iteration   5: 502317.387 ops/s
# Warmup Iteration   6: 501865.909 ops/s
# Warmup Iteration   7: 526412.674 ops/s
# Warmup Iteration   8: 477333.665 ops/s
# Warmup Iteration   9: 512825.704 ops/s
# Warmup Iteration  10: 513493.822 ops/s
# Warmup Iteration  11: 496725.324 ops/s
# Warmup Iteration  12: 516145.956 ops/s
# Warmup Iteration  13: 495415.920 ops/s
# Warmup Iteration  14: 511025.375 ops/s
# Warmup Iteration  15: 519629.974 ops/s
# Warmup Iteration  16: 478274.817 ops/s
# Warmup Iteration  17: 545655.638 ops/s
# Warmup Iteration  18: 517598.177 ops/s
# Warmup Iteration  19: 537878.924 ops/s
# Warmup Iteration  20: 524959.854 ops/s
# Warmup Iteration  21: 528349.522 ops/s
# Warmup Iteration  22: 506075.948 ops/s
# Warmup Iteration  23: 526639.429 ops/s
# Warmup Iteration  24: 496841.765 ops/s
# Warmup Iteration  25: 516472.881 ops/s
# Warmup Iteration  26: 512031.637 ops/s
# Warmup Iteration  27: 554780.430 ops/s
# Warmup Iteration  28: 517751.539 ops/s
# Warmup Iteration  29: 547664.998 ops/s
# Warmup Iteration  30: 521325.477 ops/s
Iteration   1: 544429.245 ops/s
Iteration   2: 523410.730 ops/s
Iteration   3: 526198.799 ops/s
Iteration   4: 534510.820 ops/s
Iteration   5: 520778.236 ops/s
Iteration   6: 532788.747 ops/s
Iteration   7: 521305.913 ops/s
Iteration   8: 524799.185 ops/s
Iteration   9: 520181.741 ops/s
Iteration  10: 529189.693 ops/s
Iteration  11: 533333.481 ops/s
Iteration  12: 514600.938 ops/s
Iteration  13: 536759.788 ops/s
Iteration  14: 529602.282 ops/s
Iteration  15: 529136.415 ops/s
Iteration  16: 500714.208 ops/s
Iteration  17: 544818.689 ops/s
Iteration  18: 508383.821 ops/s
Iteration  19: 534623.183 ops/s
Iteration  20: 554118.974 ops/s
Iteration  21: 544439.108 ops/s
Iteration  22: 366273.456 ops/s
Iteration  23: 559886.690 ops/s
Iteration  24: 512018.865 ops/s
Iteration  25: 537899.003 ops/s
Iteration  26: 535513.874 ops/s
Iteration  27: 518044.719 ops/s
Iteration  28: 529709.705 ops/s
Iteration  29: 524291.622 ops/s
Iteration  30: 526299.004 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSubscribeOnTest._Benchmark.benchmark_badRequest":
  523935.364 ±(99.9%) 21642.748 ops/s [Average]
  (min, avg, max) = (366273.456, 523935.364, 559886.690), stdev = 32393.848
  CI (99.9%): [502292.617, 545578.112] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
FlowableSubscribeOnTest._Benchmark.benchmark_badRequest  thrpt   30  523935.364 ± 21642.748  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6110701.474 ops/s
# Warmup Iteration   2: 9880720.056 ops/s
# Warmup Iteration   3: 13833838.337 ops/s
# Warmup Iteration   4: 13426092.218 ops/s
# Warmup Iteration   5: 14031173.146 ops/s
# Warmup Iteration   6: 13414021.249 ops/s
# Warmup Iteration   7: 13303695.455 ops/s
# Warmup Iteration   8: 13774955.385 ops/s
# Warmup Iteration   9: 13394606.901 ops/s
# Warmup Iteration  10: 13398170.346 ops/s
# Warmup Iteration  11: 13741323.996 ops/s
# Warmup Iteration  12: 13348831.748 ops/s
# Warmup Iteration  13: 14013052.128 ops/s
# Warmup Iteration  14: 13725828.249 ops/s
# Warmup Iteration  15: 13829520.126 ops/s
# Warmup Iteration  16: 13379073.820 ops/s
# Warmup Iteration  17: 13643796.991 ops/s
# Warmup Iteration  18: 13654038.374 ops/s
# Warmup Iteration  19: 13320207.068 ops/s
# Warmup Iteration  20: 13604545.975 ops/s
# Warmup Iteration  21: 13543436.449 ops/s
# Warmup Iteration  22: 13727269.144 ops/s
# Warmup Iteration  23: 13770066.026 ops/s
# Warmup Iteration  24: 13578940.868 ops/s
# Warmup Iteration  25: 13342360.904 ops/s
# Warmup Iteration  26: 13553801.188 ops/s
# Warmup Iteration  27: 13752725.016 ops/s
# Warmup Iteration  28: 13331573.986 ops/s
# Warmup Iteration  29: 13958778.016 ops/s
# Warmup Iteration  30: 13703349.974 ops/s
Iteration   1: 13911939.541 ops/s
Iteration   2: 13775601.420 ops/s
Iteration   3: 13268645.340 ops/s
Iteration   4: 13740634.178 ops/s
Iteration   5: 13225292.083 ops/s
Iteration   6: 13223824.625 ops/s
Iteration   7: 13843597.919 ops/s
Iteration   8: 12979685.775 ops/s
Iteration   9: 14322148.184 ops/s
Iteration  10: 13988920.016 ops/s
Iteration  11: 13314076.570 ops/s
Iteration  12: 13914847.796 ops/s
Iteration  13: 13459562.310 ops/s
Iteration  14: 13395925.242 ops/s
Iteration  15: 13631144.552 ops/s
Iteration  16: 13430588.100 ops/s
Iteration  17: 13635744.024 ops/s
Iteration  18: 14169198.757 ops/s
Iteration  19: 13390056.359 ops/s
Iteration  20: 13672105.889 ops/s
Iteration  21: 13353768.003 ops/s
Iteration  22: 14347562.318 ops/s
Iteration  23: 13587883.365 ops/s
Iteration  24: 13531718.024 ops/s
Iteration  25: 13817873.909 ops/s
Iteration  26: 13621157.243 ops/s
Iteration  27: 13632027.893 ops/s
Iteration  28: 14013443.096 ops/s
Iteration  29: 13599991.745 ops/s
Iteration  30: 13263699.292 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed2":
  13635422.119 ±(99.9%) 222717.377 ops/s [Average]
  (min, avg, max) = (12979685.775, 13635422.119, 14347562.318), stdev = 333352.910
  CI (99.9%): [13412704.742, 13858139.496] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed2  thrpt   30  13635422.119 ± 222717.377  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4725381.014 ops/s
# Warmup Iteration   2: 9540582.416 ops/s
# Warmup Iteration   3: 10862380.734 ops/s
# Warmup Iteration   4: 12290089.436 ops/s
# Warmup Iteration   5: 11706192.977 ops/s
# Warmup Iteration   6: 12566533.408 ops/s
# Warmup Iteration   7: 12393257.377 ops/s
# Warmup Iteration   8: 11632135.438 ops/s
# Warmup Iteration   9: 12077340.279 ops/s
# Warmup Iteration  10: 11583610.531 ops/s
# Warmup Iteration  11: 11786114.113 ops/s
# Warmup Iteration  12: 12485732.646 ops/s
# Warmup Iteration  13: 11661983.114 ops/s
# Warmup Iteration  14: 12176642.546 ops/s
# Warmup Iteration  15: 11541471.607 ops/s
# Warmup Iteration  16: 12164204.817 ops/s
# Warmup Iteration  17: 11748885.860 ops/s
# Warmup Iteration  18: 11965109.110 ops/s
# Warmup Iteration  19: 12580689.319 ops/s
# Warmup Iteration  20: 11822980.339 ops/s
# Warmup Iteration  21: 12505957.833 ops/s
# Warmup Iteration  22: 11680071.696 ops/s
# Warmup Iteration  23: 12068929.872 ops/s
# Warmup Iteration  24: 11956983.431 ops/s
# Warmup Iteration  25: 11691874.705 ops/s
# Warmup Iteration  26: 12193420.148 ops/s
# Warmup Iteration  27: 12211096.692 ops/s
# Warmup Iteration  28: 11806138.602 ops/s
# Warmup Iteration  29: 12671515.602 ops/s
# Warmup Iteration  30: 12282572.421 ops/s
Iteration   1: 12191321.603 ops/s
Iteration   2: 12144514.023 ops/s
Iteration   3: 11926512.816 ops/s
Iteration   4: 12316741.951 ops/s
Iteration   5: 12324879.810 ops/s
Iteration   6: 12452610.100 ops/s
Iteration   7: 12191803.947 ops/s
Iteration   8: 12112509.772 ops/s
Iteration   9: 12129787.059 ops/s
Iteration  10: 12463795.041 ops/s
Iteration  11: 11725052.171 ops/s
Iteration  12: 12551859.433 ops/s
Iteration  13: 12100543.369 ops/s
Iteration  14: 11593559.223 ops/s
Iteration  15: 12357982.533 ops/s
Iteration  16: 9782981.172 ops/s
Iteration  17: 11681008.972 ops/s
Iteration  18: 12510112.109 ops/s
Iteration  19: 11847806.774 ops/s
Iteration  20: 12442150.438 ops/s
Iteration  21: 11862301.755 ops/s
Iteration  22: 11999824.981 ops/s
Iteration  23: 12571782.356 ops/s
Iteration  24: 11926879.462 ops/s
Iteration  25: 12278913.851 ops/s
Iteration  26: 11893540.483 ops/s
Iteration  27: 12344662.253 ops/s
Iteration  28: 12134289.989 ops/s
Iteration  29: 12074414.940 ops/s
Iteration  30: 12497678.368 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed3":
  12081060.692 ±(99.9%) 341297.432 ops/s [Average]
  (min, avg, max) = (9782981.172, 12081060.692, 12571782.356), stdev = 510837.968
  CI (99.9%): [11739763.260, 12422358.124] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed3  thrpt   30  12081060.692 ± 341297.432  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withoutParentDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withoutParentDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12436708.838 ops/s
# Warmup Iteration   2: 14682085.922 ops/s
# Warmup Iteration   3: 22959951.763 ops/s
# Warmup Iteration   4: 23528030.863 ops/s
# Warmup Iteration   5: 22893407.839 ops/s
# Warmup Iteration   6: 23022736.222 ops/s
# Warmup Iteration   7: 23345953.415 ops/s
# Warmup Iteration   8: 22817577.857 ops/s
# Warmup Iteration   9: 22801198.285 ops/s
# Warmup Iteration  10: 22965737.984 ops/s
# Warmup Iteration  11: 22892676.424 ops/s
# Warmup Iteration  12: 22639892.516 ops/s
# Warmup Iteration  13: 23686088.306 ops/s
# Warmup Iteration  14: 22812797.437 ops/s
# Warmup Iteration  15: 23563814.078 ops/s
# Warmup Iteration  16: 23800240.736 ops/s
# Warmup Iteration  17: 22474680.185 ops/s
# Warmup Iteration  18: 24280445.812 ops/s
# Warmup Iteration  19: 23708218.760 ops/s
# Warmup Iteration  20: 23168750.373 ops/s
# Warmup Iteration  21: 23648330.019 ops/s
# Warmup Iteration  22: 22546697.676 ops/s
# Warmup Iteration  23: 23503071.313 ops/s
# Warmup Iteration  24: 22978576.921 ops/s
# Warmup Iteration  25: 22788672.211 ops/s
# Warmup Iteration  26: 23819631.600 ops/s
# Warmup Iteration  27: 23012586.072 ops/s
# Warmup Iteration  28: 23532212.347 ops/s
# Warmup Iteration  29: 22105128.831 ops/s
# Warmup Iteration  30: 23042780.480 ops/s
Iteration   1: 24043493.053 ops/s
Iteration   2: 22236553.575 ops/s
Iteration   3: 24238230.512 ops/s
Iteration   4: 23799760.553 ops/s
Iteration   5: 22343124.808 ops/s
Iteration   6: 23734969.274 ops/s
Iteration   7: 23016923.884 ops/s
Iteration   8: 23058239.432 ops/s
Iteration   9: 23582584.542 ops/s
Iteration  10: 22364674.493 ops/s
Iteration  11: 23210009.932 ops/s
Iteration  12: 22835479.440 ops/s
Iteration  13: 23265511.338 ops/s
Iteration  14: 23319882.133 ops/s
Iteration  15: 22989342.744 ops/s
Iteration  16: 23237814.814 ops/s
Iteration  17: 23207327.678 ops/s
Iteration  18: 22973176.910 ops/s
Iteration  19: 23508973.151 ops/s
Iteration  20: 22568724.355 ops/s
Iteration  21: 24605264.440 ops/s
Iteration  22: 22435129.113 ops/s
Iteration  23: 23860368.584 ops/s
Iteration  24: 24045949.948 ops/s
Iteration  25: 23447775.404 ops/s
Iteration  26: 23817499.803 ops/s
Iteration  27: 22650476.539 ops/s
Iteration  28: 23144254.068 ops/s
Iteration  29: 23056571.267 ops/s
Iteration  30: 22158724.453 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withoutParentDisposed":
  23225227.008 ±(99.9%) 416746.835 ops/s [Average]
  (min, avg, max) = (22158724.453, 23225227.008, 24605264.440), stdev = 623767.091
  CI (99.9%): [22808480.173, 23641973.843] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ScheduledRunnableTest._Benchmark.benchmark_withoutParentDisposed  thrpt   30  23225227.008 ± 416746.835  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_asyncDisposeIdempotent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_asyncDisposeIdempotent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9024459.598 ops/s
# Warmup Iteration   2: 14445042.975 ops/s
# Warmup Iteration   3: 18497090.512 ops/s
# Warmup Iteration   4: 19757895.010 ops/s
# Warmup Iteration   5: 18883521.934 ops/s
# Warmup Iteration   6: 19151510.729 ops/s
# Warmup Iteration   7: 19787953.067 ops/s
# Warmup Iteration   8: 19343884.073 ops/s
# Warmup Iteration   9: 19164299.415 ops/s
# Warmup Iteration  10: 20079227.095 ops/s
# Warmup Iteration  11: 19503615.834 ops/s
# Warmup Iteration  12: 19015680.490 ops/s
# Warmup Iteration  13: 19735427.819 ops/s
# Warmup Iteration  14: 18706870.833 ops/s
# Warmup Iteration  15: 19265458.799 ops/s
# Warmup Iteration  16: 20359586.846 ops/s
# Warmup Iteration  17: 19158468.375 ops/s
# Warmup Iteration  18: 19207040.803 ops/s
# Warmup Iteration  19: 20102596.296 ops/s
# Warmup Iteration  20: 19103229.796 ops/s
# Warmup Iteration  21: 20110879.422 ops/s
# Warmup Iteration  22: 18778065.472 ops/s
# Warmup Iteration  23: 19722505.093 ops/s
# Warmup Iteration  24: 19113508.475 ops/s
# Warmup Iteration  25: 19278008.790 ops/s
# Warmup Iteration  26: 20103673.663 ops/s
# Warmup Iteration  27: 18687565.815 ops/s
# Warmup Iteration  28: 20142864.989 ops/s
# Warmup Iteration  29: 19608951.193 ops/s
# Warmup Iteration  30: 19003422.709 ops/s
Iteration   1: 19975500.537 ops/s
Iteration   2: 19088630.364 ops/s
Iteration   3: 19247383.719 ops/s
Iteration   4: 19951637.651 ops/s
Iteration   5: 19435580.279 ops/s
Iteration   6: 20026725.872 ops/s
Iteration   7: 18967920.713 ops/s
Iteration   8: 19989752.411 ops/s
Iteration   9: 19734758.422 ops/s
Iteration  10: 19026563.999 ops/s
Iteration  11: 15621386.268 ops/s
Iteration  12: 20116397.728 ops/s
Iteration  13: 19329196.332 ops/s
Iteration  14: 19622185.961 ops/s
Iteration  15: 19703289.602 ops/s
Iteration  16: 19018742.631 ops/s
Iteration  17: 20153056.685 ops/s
Iteration  18: 20212176.084 ops/s
Iteration  19: 18766491.671 ops/s
Iteration  20: 19695369.068 ops/s
Iteration  21: 19313539.481 ops/s
Iteration  22: 20160351.642 ops/s
Iteration  23: 19289260.201 ops/s
Iteration  24: 19791931.327 ops/s
Iteration  25: 19482381.592 ops/s
Iteration  26: 20210992.369 ops/s
Iteration  27: 19611008.890 ops/s
Iteration  28: 19011991.017 ops/s
Iteration  29: 19662778.334 ops/s
Iteration  30: 19277682.212 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_asyncDisposeIdempotent":
  19449822.102 ±(99.9%) 559734.410 ops/s [Average]
  (min, avg, max) = (15621386.268, 19449822.102, 20212176.084), stdev = 837784.178
  CI (99.9%): [18890087.692, 20009556.512] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ScheduledRunnableTest._Benchmark.benchmark_asyncDisposeIdempotent  thrpt   30  19449822.102 ± 559734.410  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_syncDisposeIdempotent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_syncDisposeIdempotent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6984315.972 ops/s
# Warmup Iteration   2: 13810612.471 ops/s
# Warmup Iteration   3: 16805042.769 ops/s
# Warmup Iteration   4: 16320267.482 ops/s
# Warmup Iteration   5: 16117121.118 ops/s
# Warmup Iteration   6: 15256264.407 ops/s
# Warmup Iteration   7: 15856605.312 ops/s
# Warmup Iteration   8: 16849515.586 ops/s
# Warmup Iteration   9: 16854815.605 ops/s
# Warmup Iteration  10: 16519949.586 ops/s
# Warmup Iteration  11: 16481984.901 ops/s
# Warmup Iteration  12: 16428153.743 ops/s
# Warmup Iteration  13: 16574253.387 ops/s
# Warmup Iteration  14: 16193142.694 ops/s
# Warmup Iteration  15: 16360503.114 ops/s
# Warmup Iteration  16: 16771789.308 ops/s
# Warmup Iteration  17: 16287719.275 ops/s
# Warmup Iteration  18: 16380899.627 ops/s
# Warmup Iteration  19: 16367942.845 ops/s
# Warmup Iteration  20: 17071006.022 ops/s
# Warmup Iteration  21: 16294155.184 ops/s
# Warmup Iteration  22: 17011612.471 ops/s
# Warmup Iteration  23: 16517454.042 ops/s
# Warmup Iteration  24: 16418165.042 ops/s
# Warmup Iteration  25: 16872908.775 ops/s
# Warmup Iteration  26: 16553457.396 ops/s
# Warmup Iteration  27: 16685326.350 ops/s
# Warmup Iteration  28: 16728291.229 ops/s
# Warmup Iteration  29: 16665115.549 ops/s
# Warmup Iteration  30: 17223254.954 ops/s
Iteration   1: 16328557.398 ops/s
Iteration   2: 16820864.635 ops/s
Iteration   3: 16657813.896 ops/s
Iteration   4: 16580156.556 ops/s
Iteration   5: 16355769.321 ops/s
Iteration   6: 16378170.820 ops/s
Iteration   7: 16735239.122 ops/s
Iteration   8: 17326986.423 ops/s
Iteration   9: 17067358.560 ops/s
Iteration  10: 16225468.291 ops/s
Iteration  11: 17374592.170 ops/s
Iteration  12: 15943185.145 ops/s
Iteration  13: 17111988.150 ops/s
Iteration  14: 16394440.984 ops/s
Iteration  15: 16391181.990 ops/s
Iteration  16: 17314335.270 ops/s
Iteration  17: 16278346.253 ops/s
Iteration  18: 16536861.374 ops/s
Iteration  19: 16925395.690 ops/s
Iteration  20: 16281743.105 ops/s
Iteration  21: 16820629.649 ops/s
Iteration  22: 16635379.855 ops/s
Iteration  23: 16812105.281 ops/s
Iteration  24: 16766646.563 ops/s
Iteration  25: 16493457.479 ops/s
Iteration  26: 17136262.918 ops/s
Iteration  27: 16129088.343 ops/s
Iteration  28: 16843201.149 ops/s
Iteration  29: 17040493.308 ops/s
Iteration  30: 15923611.924 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_syncDisposeIdempotent":
  16654311.054 ±(99.9%) 266391.425 ops/s [Average]
  (min, avg, max) = (15923611.924, 16654311.054, 17374592.170), stdev = 398722.175
  CI (99.9%): [16387919.629, 16920702.479] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ScheduledRunnableTest._Benchmark.benchmark_syncDisposeIdempotent  thrpt   30  16654311.054 ± 266391.425  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7683231.487 ops/s
# Warmup Iteration   2: 9339154.170 ops/s
# Warmup Iteration   3: 14775718.658 ops/s
# Warmup Iteration   4: 15591582.199 ops/s
# Warmup Iteration   5: 14911390.133 ops/s
# Warmup Iteration   6: 15113448.600 ops/s
# Warmup Iteration   7: 14733931.010 ops/s
# Warmup Iteration   8: 14994598.751 ops/s
# Warmup Iteration   9: 15332376.458 ops/s
# Warmup Iteration  10: 14939432.397 ops/s
# Warmup Iteration  11: 14527957.586 ops/s
# Warmup Iteration  12: 15664839.141 ops/s
# Warmup Iteration  13: 14857649.551 ops/s
# Warmup Iteration  14: 15636981.474 ops/s
# Warmup Iteration  15: 15623714.765 ops/s
# Warmup Iteration  16: 14868751.718 ops/s
# Warmup Iteration  17: 15580092.458 ops/s
# Warmup Iteration  18: 14784090.970 ops/s
# Warmup Iteration  19: 15793999.857 ops/s
# Warmup Iteration  20: 14705642.718 ops/s
# Warmup Iteration  21: 15489810.599 ops/s
# Warmup Iteration  22: 15031018.861 ops/s
# Warmup Iteration  23: 15179359.027 ops/s
# Warmup Iteration  24: 16016902.436 ops/s
# Warmup Iteration  25: 14291064.126 ops/s
# Warmup Iteration  26: 15235463.239 ops/s
# Warmup Iteration  27: 15342951.335 ops/s
# Warmup Iteration  28: 15200196.935 ops/s
# Warmup Iteration  29: 15074495.067 ops/s
# Warmup Iteration  30: 15642820.731 ops/s
Iteration   1: 14985267.139 ops/s
Iteration   2: 15552965.253 ops/s
Iteration   3: 15727006.648 ops/s
Iteration   4: 14602580.246 ops/s
Iteration   5: 12989001.015 ops/s
Iteration   6: 15210796.927 ops/s
Iteration   7: 15137650.651 ops/s
Iteration   8: 15495332.190 ops/s
Iteration   9: 14794856.147 ops/s
Iteration  10: 15005375.678 ops/s
Iteration  11: 15610659.021 ops/s
Iteration  12: 14715567.565 ops/s
Iteration  13: 15618937.502 ops/s
Iteration  14: 15537282.365 ops/s
Iteration  15: 14908331.089 ops/s
Iteration  16: 14911393.183 ops/s
Iteration  17: 15775741.745 ops/s
Iteration  18: 14869141.995 ops/s
Iteration  19: 15109656.254 ops/s
Iteration  20: 15717126.774 ops/s
Iteration  21: 14785875.649 ops/s
Iteration  22: 15566198.898 ops/s
Iteration  23: 14920577.643 ops/s
Iteration  24: 15230649.343 ops/s
Iteration  25: 14665081.817 ops/s
Iteration  26: 15068671.344 ops/s
Iteration  27: 15692528.108 ops/s
Iteration  28: 15194005.089 ops/s
Iteration  29: 14873795.870 ops/s
Iteration  30: 15471021.948 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_dispose":
  15124769.170 ±(99.9%) 361821.987 ops/s [Average]
  (min, avg, max) = (12989001.015, 15124769.170, 15775741.745), stdev = 541558.157
  CI (99.9%): [14762947.183, 15486591.157] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
BoundedSubscriberTest._Benchmark.benchmark_dispose  thrpt   30  15124769.170 ± 361821.987  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStreamUsingSelector$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStreamUsingSelector

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 120431.707 ops/s
# Warmup Iteration   2: 275592.847 ops/s
# Warmup Iteration   3: 690435.193 ops/s
# Warmup Iteration   4: 814408.837 ops/s
# Warmup Iteration   5: 817124.474 ops/s
# Warmup Iteration   6: 905992.120 ops/s
# Warmup Iteration   7: 932682.960 ops/s
# Warmup Iteration   8: 968505.338 ops/s
# Warmup Iteration   9: 919310.681 ops/s
# Warmup Iteration  10: 963353.508 ops/s
# Warmup Iteration  11: 944808.815 ops/s
# Warmup Iteration  12: 937935.922 ops/s
# Warmup Iteration  13: 940702.291 ops/s
# Warmup Iteration  14: 943526.465 ops/s
# Warmup Iteration  15: 939549.881 ops/s
# Warmup Iteration  16: 930653.347 ops/s
# Warmup Iteration  17: 940305.485 ops/s
# Warmup Iteration  18: 945990.532 ops/s
# Warmup Iteration  19: 926839.821 ops/s
# Warmup Iteration  20: 940072.044 ops/s
# Warmup Iteration  21: 940655.454 ops/s
# Warmup Iteration  22: 905509.813 ops/s
# Warmup Iteration  23: 935872.388 ops/s
# Warmup Iteration  24: 909368.833 ops/s
# Warmup Iteration  25: 944395.297 ops/s
# Warmup Iteration  26: 927247.093 ops/s
# Warmup Iteration  27: 950718.866 ops/s
# Warmup Iteration  28: 897000.949 ops/s
# Warmup Iteration  29: 955055.071 ops/s
# Warmup Iteration  30: 892071.861 ops/s
Iteration   1: 933580.578 ops/s
Iteration   2: 919419.564 ops/s
Iteration   3: 935008.370 ops/s
Iteration   4: 942779.761 ops/s
Iteration   5: 891987.038 ops/s
Iteration   6: 942201.701 ops/s
Iteration   7: 947472.482 ops/s
Iteration   8: 972560.492 ops/s
Iteration   9: 915217.595 ops/s
Iteration  10: 962228.403 ops/s
Iteration  11: 905305.897 ops/s
Iteration  12: 959494.650 ops/s
Iteration  13: 936595.733 ops/s
Iteration  14: 931353.526 ops/s
Iteration  15: 976501.202 ops/s
Iteration  16: 926915.949 ops/s
Iteration  17: 932861.139 ops/s
Iteration  18: 944681.721 ops/s
Iteration  19: 930627.327 ops/s
Iteration  20: 971513.689 ops/s
Iteration  21: 934666.855 ops/s
Iteration  22: 957042.203 ops/s
Iteration  23: 932050.908 ops/s
Iteration  24: 945508.987 ops/s
Iteration  25: 956537.548 ops/s
Iteration  26: 924587.186 ops/s
Iteration  27: 944590.666 ops/s
Iteration  28: 938024.825 ops/s
Iteration  29: 924886.983 ops/s
Iteration  30: 979544.446 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStreamUsingSelector":
  940524.914 ±(99.9%) 13642.447 ops/s [Average]
  (min, avg, max) = (891987.038, 940524.914, 979544.446), stdev = 20419.373
  CI (99.9%): [926882.468, 954167.361] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_takeUntilWithPublishedStreamUsingSelector  thrpt   30  940524.914 ± 13642.447  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableSubscribe1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableSubscribe1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43969.449 ops/s
# Warmup Iteration   2: 152712.489 ops/s
# Warmup Iteration   3: 168133.522 ops/s
# Warmup Iteration   4: 203389.650 ops/s
# Warmup Iteration   5: 206644.016 ops/s
# Warmup Iteration   6: 205330.757 ops/s
# Warmup Iteration   7: 204398.726 ops/s
# Warmup Iteration   8: 211955.723 ops/s
# Warmup Iteration   9: 209587.264 ops/s
# Warmup Iteration  10: 199235.044 ops/s
# Warmup Iteration  11: 199166.403 ops/s
# Warmup Iteration  12: 215150.908 ops/s
# Warmup Iteration  13: 205929.410 ops/s
# Warmup Iteration  14: 212749.008 ops/s
# Warmup Iteration  15: 214437.301 ops/s
# Warmup Iteration  16: 201140.984 ops/s
# Warmup Iteration  17: 213362.776 ops/s
# Warmup Iteration  18: 218116.313 ops/s
# Warmup Iteration  19: 208259.315 ops/s
# Warmup Iteration  20: 217630.426 ops/s
# Warmup Iteration  21: 209118.098 ops/s
# Warmup Iteration  22: 220671.353 ops/s
# Warmup Iteration  23: 223911.370 ops/s
# Warmup Iteration  24: 211055.301 ops/s
# Warmup Iteration  25: 206019.768 ops/s
# Warmup Iteration  26: 213819.649 ops/s
# Warmup Iteration  27: 213658.965 ops/s
# Warmup Iteration  28: 207237.603 ops/s
# Warmup Iteration  29: 214437.008 ops/s
# Warmup Iteration  30: 168934.778 ops/s
Iteration   1: 207943.292 ops/s
Iteration   2: 224818.116 ops/s
Iteration   3: 205492.190 ops/s
Iteration   4: 211138.136 ops/s
Iteration   5: 216033.896 ops/s
Iteration   6: 213175.406 ops/s
Iteration   7: 207562.683 ops/s
Iteration   8: 222490.907 ops/s
Iteration   9: 208473.986 ops/s
Iteration  10: 211939.056 ops/s
Iteration  11: 216501.441 ops/s
Iteration  12: 208262.693 ops/s
Iteration  13: 210035.198 ops/s
Iteration  14: 213170.069 ops/s
Iteration  15: 204252.317 ops/s
Iteration  16: 221247.711 ops/s
Iteration  17: 209988.202 ops/s
Iteration  18: 214001.846 ops/s
Iteration  19: 217329.041 ops/s
Iteration  20: 221152.255 ops/s
Iteration  21: 206389.191 ops/s
Iteration  22: 214874.940 ops/s
Iteration  23: 213594.604 ops/s
Iteration  24: 214252.475 ops/s
Iteration  25: 223344.647 ops/s
Iteration  26: 201508.691 ops/s
Iteration  27: 224314.220 ops/s
Iteration  28: 221821.053 ops/s
Iteration  29: 208294.639 ops/s
Iteration  30: 212534.998 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableSubscribe1":
  213531.263 ±(99.9%) 4237.913 ops/s [Average]
  (min, avg, max) = (201508.691, 213531.263, 224818.116), stdev = 6343.109
  CI (99.9%): [209293.350, 217769.176] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableSubscribe1  thrpt   30  213531.263 ± 4237.913  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableSubscribe0$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableSubscribe0

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35155.915 ops/s
# Warmup Iteration   2: 149351.076 ops/s
# Warmup Iteration   3: 171793.857 ops/s
# Warmup Iteration   4: 200846.099 ops/s
# Warmup Iteration   5: 218203.458 ops/s
# Warmup Iteration   6: 211395.895 ops/s
# Warmup Iteration   7: 203221.387 ops/s
# Warmup Iteration   8: 212044.216 ops/s
# Warmup Iteration   9: 202523.442 ops/s
# Warmup Iteration  10: 207068.596 ops/s
# Warmup Iteration  11: 204327.774 ops/s
# Warmup Iteration  12: 208549.589 ops/s
# Warmup Iteration  13: 217782.823 ops/s
# Warmup Iteration  14: 205335.281 ops/s
# Warmup Iteration  15: 211795.363 ops/s
# Warmup Iteration  16: 204478.714 ops/s
# Warmup Iteration  17: 221802.749 ops/s
# Warmup Iteration  18: 214559.116 ops/s
# Warmup Iteration  19: 212388.190 ops/s
# Warmup Iteration  20: 219751.066 ops/s
# Warmup Iteration  21: 215713.183 ops/s
# Warmup Iteration  22: 218197.972 ops/s
# Warmup Iteration  23: 208420.263 ops/s
# Warmup Iteration  24: 210615.980 ops/s
# Warmup Iteration  25: 221359.270 ops/s
# Warmup Iteration  26: 215345.382 ops/s
# Warmup Iteration  27: 220211.730 ops/s
# Warmup Iteration  28: 215877.831 ops/s
# Warmup Iteration  29: 213636.372 ops/s
# Warmup Iteration  30: 222952.201 ops/s
Iteration   1: 208476.198 ops/s
Iteration   2: 222118.459 ops/s
Iteration   3: 221385.260 ops/s
Iteration   4: 223234.490 ops/s
Iteration   5: 212510.705 ops/s
Iteration   6: 221955.150 ops/s
Iteration   7: 221994.660 ops/s
Iteration   8: 208349.489 ops/s
Iteration   9: 223198.399 ops/s
Iteration  10: 222716.594 ops/s
Iteration  11: 221827.110 ops/s
Iteration  12: 210667.755 ops/s
Iteration  13: 218960.704 ops/s
Iteration  14: 215596.592 ops/s
Iteration  15: 218248.969 ops/s
Iteration  16: 215023.791 ops/s
Iteration  17: 216894.191 ops/s
Iteration  18: 219225.150 ops/s
Iteration  19: 209567.817 ops/s
Iteration  20: 225113.117 ops/s
Iteration  21: 215786.506 ops/s
Iteration  22: 212610.941 ops/s
Iteration  23: 215729.719 ops/s
Iteration  24: 209835.488 ops/s
Iteration  25: 219113.545 ops/s
Iteration  26: 218902.912 ops/s
Iteration  27: 211548.563 ops/s
Iteration  28: 216442.853 ops/s
Iteration  29: 216927.268 ops/s
Iteration  30: 217169.102 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableSubscribe0":
  217037.717 ±(99.9%) 3247.166 ops/s [Average]
  (min, avg, max) = (208349.489, 217037.717, 225113.117), stdev = 4860.205
  CI (99.9%): [213790.551, 220284.883] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableSubscribe0  thrpt   30  217037.717 ± 3247.166  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactWindowSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactWindowSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24611.393 ops/s
# Warmup Iteration   2: 88960.489 ops/s
# Warmup Iteration   3: 94264.543 ops/s
# Warmup Iteration   4: 101106.191 ops/s
# Warmup Iteration   5: 185180.724 ops/s
# Warmup Iteration   6: 322675.186 ops/s
# Warmup Iteration   7: 332828.638 ops/s
# Warmup Iteration   8: 332132.010 ops/s
# Warmup Iteration   9: 332411.669 ops/s
# Warmup Iteration  10: 334129.648 ops/s
# Warmup Iteration  11: 324178.014 ops/s
# Warmup Iteration  12: 340432.280 ops/s
# Warmup Iteration  13: 331590.546 ops/s
# Warmup Iteration  14: 326308.454 ops/s
# Warmup Iteration  15: 337338.200 ops/s
# Warmup Iteration  16: 345234.010 ops/s
# Warmup Iteration  17: 326402.383 ops/s
# Warmup Iteration  18: 347598.175 ops/s
# Warmup Iteration  19: 341222.996 ops/s
# Warmup Iteration  20: 321895.564 ops/s
# Warmup Iteration  21: 348410.941 ops/s
# Warmup Iteration  22: 321744.584 ops/s
# Warmup Iteration  23: 320470.344 ops/s
# Warmup Iteration  24: 286578.117 ops/s
# Warmup Iteration  25: 315825.997 ops/s
# Warmup Iteration  26: 338522.251 ops/s
# Warmup Iteration  27: 336851.165 ops/s
# Warmup Iteration  28: 333534.023 ops/s
# Warmup Iteration  29: 336399.267 ops/s
# Warmup Iteration  30: 344382.006 ops/s
Iteration   1: 326784.178 ops/s
Iteration   2: 336625.656 ops/s
Iteration   3: 325005.330 ops/s
Iteration   4: 332313.245 ops/s
Iteration   5: 324593.524 ops/s
Iteration   6: 336899.607 ops/s
Iteration   7: 342593.452 ops/s
Iteration   8: 324228.484 ops/s
Iteration   9: 344032.314 ops/s
Iteration  10: 328629.072 ops/s
Iteration  11: 343542.634 ops/s
Iteration  12: 326772.019 ops/s
Iteration  13: 330066.313 ops/s
Iteration  14: 346944.601 ops/s
Iteration  15: 328709.747 ops/s
Iteration  16: 325862.413 ops/s
Iteration  17: 329347.649 ops/s
Iteration  18: 347738.112 ops/s
Iteration  19: 321829.208 ops/s
Iteration  20: 343481.548 ops/s
Iteration  21: 323003.310 ops/s
Iteration  22: 336001.416 ops/s
Iteration  23: 335399.406 ops/s
Iteration  24: 327770.312 ops/s
Iteration  25: 335302.374 ops/s
Iteration  26: 329133.115 ops/s
Iteration  27: 348049.238 ops/s
Iteration  28: 321916.322 ops/s
Iteration  29: 340263.212 ops/s
Iteration  30: 333453.694 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactWindowSize":
  333209.717 ±(99.9%) 5496.326 ops/s [Average]
  (min, avg, max) = (321829.208, 333209.717, 348049.238), stdev = 8226.642
  CI (99.9%): [327713.391, 338706.042] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_exactWindowSize  thrpt   30  333209.717 ± 5496.326  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnUnSubscribeWorksWithRefCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnUnSubscribeWorksWithRefCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76983.361 ops/s
# Warmup Iteration   2: 246554.732 ops/s
# Warmup Iteration   3: 423185.077 ops/s
# Warmup Iteration   4: 441206.883 ops/s
# Warmup Iteration   5: 527233.661 ops/s
# Warmup Iteration   6: 531528.213 ops/s
# Warmup Iteration   7: 508964.050 ops/s
# Warmup Iteration   8: 509370.281 ops/s
# Warmup Iteration   9: 535745.080 ops/s
# Warmup Iteration  10: 504598.402 ops/s
# Warmup Iteration  11: 507432.628 ops/s
# Warmup Iteration  12: 515914.679 ops/s
# Warmup Iteration  13: 519370.468 ops/s
# Warmup Iteration  14: 532356.429 ops/s
# Warmup Iteration  15: 500867.661 ops/s
# Warmup Iteration  16: 533841.324 ops/s
# Warmup Iteration  17: 515931.134 ops/s
# Warmup Iteration  18: 514372.701 ops/s
# Warmup Iteration  19: 533999.776 ops/s
# Warmup Iteration  20: 507420.857 ops/s
# Warmup Iteration  21: 527892.369 ops/s
# Warmup Iteration  22: 499434.329 ops/s
# Warmup Iteration  23: 520202.153 ops/s
# Warmup Iteration  24: 518987.776 ops/s
# Warmup Iteration  25: 505857.839 ops/s
# Warmup Iteration  26: 513027.151 ops/s
# Warmup Iteration  27: 544042.290 ops/s
# Warmup Iteration  28: 492426.377 ops/s
# Warmup Iteration  29: 516885.550 ops/s
# Warmup Iteration  30: 536127.894 ops/s
Iteration   1: 516314.682 ops/s
Iteration   2: 482883.608 ops/s
Iteration   3: 506947.677 ops/s
Iteration   4: 515571.286 ops/s
Iteration   5: 518199.975 ops/s
Iteration   6: 533768.639 ops/s
Iteration   7: 499337.966 ops/s
Iteration   8: 528713.475 ops/s
Iteration   9: 494423.631 ops/s
Iteration  10: 514603.638 ops/s
Iteration  11: 516613.253 ops/s
Iteration  12: 503115.795 ops/s
Iteration  13: 508519.374 ops/s
Iteration  14: 524723.745 ops/s
Iteration  15: 500207.095 ops/s
Iteration  16: 506407.513 ops/s
Iteration  17: 523013.940 ops/s
Iteration  18: 499464.967 ops/s
Iteration  19: 516315.578 ops/s
Iteration  20: 508830.454 ops/s
Iteration  21: 514849.721 ops/s
Iteration  22: 529783.669 ops/s
Iteration  23: 524660.105 ops/s
Iteration  24: 530531.170 ops/s
Iteration  25: 511741.808 ops/s
Iteration  26: 533935.397 ops/s
Iteration  27: 521988.734 ops/s
Iteration  28: 522870.109 ops/s
Iteration  29: 509531.275 ops/s
Iteration  30: 517801.518 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnUnSubscribeWorksWithRefCount":
  514522.327 ±(99.9%) 8135.643 ops/s [Average]
  (min, avg, max) = (482883.608, 514522.327, 533935.397), stdev = 12177.048
  CI (99.9%): [506386.684, 522657.969] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableDoOnSubscribeTest._Benchmark.benchmark_doOnUnSubscribeWorksWithRefCount  thrpt   30  514522.327 ± 8135.643  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onNextCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onNextCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 304721.937 ops/s
# Warmup Iteration   2: 546685.300 ops/s
# Warmup Iteration   3: 621737.327 ops/s
# Warmup Iteration   4: 645325.796 ops/s
# Warmup Iteration   5: 601655.804 ops/s
# Warmup Iteration   6: 682442.856 ops/s
# Warmup Iteration   7: 652683.654 ops/s
# Warmup Iteration   8: 683628.820 ops/s
# Warmup Iteration   9: 648904.202 ops/s
# Warmup Iteration  10: 670916.651 ops/s
# Warmup Iteration  11: 653891.535 ops/s
# Warmup Iteration  12: 693186.467 ops/s
# Warmup Iteration  13: 673499.676 ops/s
# Warmup Iteration  14: 678719.860 ops/s
# Warmup Iteration  15: 661195.389 ops/s
# Warmup Iteration  16: 691305.610 ops/s
# Warmup Iteration  17: 731803.267 ops/s
# Warmup Iteration  18: 713594.087 ops/s
# Warmup Iteration  19: 524430.947 ops/s
# Warmup Iteration  20: 704784.917 ops/s
# Warmup Iteration  21: 734034.700 ops/s
# Warmup Iteration  22: 696720.082 ops/s
# Warmup Iteration  23: 721795.516 ops/s
# Warmup Iteration  24: 664217.951 ops/s
# Warmup Iteration  25: 736208.889 ops/s
# Warmup Iteration  26: 714422.574 ops/s
# Warmup Iteration  27: 702472.161 ops/s
# Warmup Iteration  28: 697773.086 ops/s
# Warmup Iteration  29: 720304.919 ops/s
# Warmup Iteration  30: 728462.505 ops/s
Iteration   1: 695296.539 ops/s
Iteration   2: 723552.800 ops/s
Iteration   3: 704281.211 ops/s
Iteration   4: 702604.622 ops/s
Iteration   5: 708669.249 ops/s
Iteration   6: 715068.429 ops/s
Iteration   7: 738549.935 ops/s
Iteration   8: 673164.822 ops/s
Iteration   9: 729136.653 ops/s
Iteration  10: 689908.144 ops/s
Iteration  11: 725667.378 ops/s
Iteration  12: 698007.512 ops/s
Iteration  13: 690538.919 ops/s
Iteration  14: 735956.736 ops/s
Iteration  15: 689162.307 ops/s
Iteration  16: 707691.436 ops/s
Iteration  17: 725925.270 ops/s
Iteration  18: 701280.567 ops/s
Iteration  19: 717635.310 ops/s
Iteration  20: 688965.197 ops/s
Iteration  21: 721859.037 ops/s
Iteration  22: 689795.084 ops/s
Iteration  23: 728669.446 ops/s
Iteration  24: 697585.623 ops/s
Iteration  25: 722465.989 ops/s
Iteration  26: 715269.029 ops/s
Iteration  27: 713018.264 ops/s
Iteration  28: 699684.820 ops/s
Iteration  29: 715619.423 ops/s
Iteration  30: 687534.638 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onNextCrashes":
  708418.813 ±(99.9%) 11082.696 ops/s [Average]
  (min, avg, max) = (673164.822, 708418.813, 738549.935), stdev = 16588.059
  CI (99.9%): [697336.117, 719501.509] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableSubscriberTest._Benchmark.benchmark_onNextCrashes  thrpt   30  708418.813 ± 11082.696  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_liftReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_liftReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 245277.142 ops/s
# Warmup Iteration   2: 447583.538 ops/s
# Warmup Iteration   3: 445042.319 ops/s
# Warmup Iteration   4: 408623.848 ops/s
# Warmup Iteration   5: 509789.430 ops/s
# Warmup Iteration   6: 469157.365 ops/s
# Warmup Iteration   7: 499947.805 ops/s
# Warmup Iteration   8: 476308.973 ops/s
# Warmup Iteration   9: 471479.604 ops/s
# Warmup Iteration  10: 479784.281 ops/s
# Warmup Iteration  11: 486041.946 ops/s
# Warmup Iteration  12: 488616.857 ops/s
# Warmup Iteration  13: 475100.049 ops/s
# Warmup Iteration  14: 492999.418 ops/s
# Warmup Iteration  15: 478961.874 ops/s
# Warmup Iteration  16: 485431.116 ops/s
# Warmup Iteration  17: 484505.118 ops/s
# Warmup Iteration  18: 517696.239 ops/s
# Warmup Iteration  19: 499034.669 ops/s
# Warmup Iteration  20: 512847.977 ops/s
# Warmup Iteration  21: 520420.366 ops/s
# Warmup Iteration  22: 494823.790 ops/s
# Warmup Iteration  23: 513433.762 ops/s
# Warmup Iteration  24: 511758.738 ops/s
# Warmup Iteration  25: 501544.586 ops/s
# Warmup Iteration  26: 512177.209 ops/s
# Warmup Iteration  27: 525004.118 ops/s
# Warmup Iteration  28: 499163.821 ops/s
# Warmup Iteration  29: 508847.095 ops/s
# Warmup Iteration  30: 491927.360 ops/s
Iteration   1: 522206.500 ops/s
Iteration   2: 494370.796 ops/s
Iteration   3: 515376.415 ops/s
Iteration   4: 525157.311 ops/s
Iteration   5: 483462.752 ops/s
Iteration   6: 519443.673 ops/s
Iteration   7: 519767.930 ops/s
Iteration   8: 499572.920 ops/s
Iteration   9: 520039.444 ops/s
Iteration  10: 492141.054 ops/s
Iteration  11: 489144.554 ops/s
Iteration  12: 524117.453 ops/s
Iteration  13: 503086.392 ops/s
Iteration  14: 508594.982 ops/s
Iteration  15: 511478.946 ops/s
Iteration  16: 509120.146 ops/s
Iteration  17: 511263.045 ops/s
Iteration  18: 521777.887 ops/s
Iteration  19: 488126.792 ops/s
Iteration  20: 513972.639 ops/s
Iteration  21: 519692.372 ops/s
Iteration  22: 494476.486 ops/s
Iteration  23: 522066.485 ops/s
Iteration  24: 500362.348 ops/s
Iteration  25: 524050.447 ops/s
Iteration  26: 482626.282 ops/s
Iteration  27: 528305.971 ops/s
Iteration  28: 487978.725 ops/s
Iteration  29: 502139.425 ops/s
Iteration  30: 525809.490 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_liftReturnsNull":
  508657.655 ±(99.9%) 9600.914 ops/s [Average]
  (min, avg, max) = (482626.282, 508657.655, 528305.971), stdev = 14370.198
  CI (99.9%): [499056.741, 518258.570] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_liftReturnsNull  thrpt   30  508657.655 ± 9600.914  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 336564.403 ops/s
# Warmup Iteration   2: 1429553.064 ops/s
# Warmup Iteration   3: 2301140.968 ops/s
# Warmup Iteration   4: 2597966.715 ops/s
# Warmup Iteration   5: 2562089.008 ops/s
# Warmup Iteration   6: 2726099.525 ops/s
# Warmup Iteration   7: 2553980.460 ops/s
# Warmup Iteration   8: 2622370.161 ops/s
# Warmup Iteration   9: 2666160.489 ops/s
# Warmup Iteration  10: 2577945.339 ops/s
# Warmup Iteration  11: 2601442.808 ops/s
# Warmup Iteration  12: 2613513.779 ops/s
# Warmup Iteration  13: 2087098.672 ops/s
# Warmup Iteration  14: 2639811.055 ops/s
# Warmup Iteration  15: 2695028.912 ops/s
# Warmup Iteration  16: 2596183.167 ops/s
# Warmup Iteration  17: 2648601.642 ops/s
# Warmup Iteration  18: 2694233.016 ops/s
# Warmup Iteration  19: 2563619.783 ops/s
# Warmup Iteration  20: 2700733.331 ops/s
# Warmup Iteration  21: 2635300.331 ops/s
# Warmup Iteration  22: 2609498.058 ops/s
# Warmup Iteration  23: 2733701.597 ops/s
# Warmup Iteration  24: 2521561.468 ops/s
# Warmup Iteration  25: 2690246.409 ops/s
# Warmup Iteration  26: 2611895.289 ops/s
# Warmup Iteration  27: 2657381.121 ops/s
# Warmup Iteration  28: 2697459.761 ops/s
# Warmup Iteration  29: 2666961.036 ops/s
# Warmup Iteration  30: 2725212.202 ops/s
Iteration   1: 2582009.897 ops/s
Iteration   2: 2567794.857 ops/s
Iteration   3: 2672115.094 ops/s
Iteration   4: 2624642.623 ops/s
Iteration   5: 2672423.015 ops/s
Iteration   6: 2590818.842 ops/s
Iteration   7: 2623068.368 ops/s
Iteration   8: 2750781.884 ops/s
Iteration   9: 2554729.730 ops/s
Iteration  10: 2604952.407 ops/s
Iteration  11: 2719741.976 ops/s
Iteration  12: 2640056.795 ops/s
Iteration  13: 2658559.121 ops/s
Iteration  14: 2609978.455 ops/s
Iteration  15: 2555758.994 ops/s
Iteration  16: 2666547.760 ops/s
Iteration  17: 2647928.982 ops/s
Iteration  18: 2653496.853 ops/s
Iteration  19: 2600664.251 ops/s
Iteration  20: 2739614.133 ops/s
Iteration  21: 2695578.690 ops/s
Iteration  22: 2601391.574 ops/s
Iteration  23: 2712728.595 ops/s
Iteration  24: 2530846.415 ops/s
Iteration  25: 2652769.303 ops/s
Iteration  26: 2659300.045 ops/s
Iteration  27: 2527377.172 ops/s
Iteration  28: 2732375.239 ops/s
Iteration  29: 2750818.621 ops/s
Iteration  30: 2528758.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival":
  2637587.623 ±(99.9%) 44648.129 ops/s [Average]
  (min, avg, max) = (2527377.172, 2637587.623, 2750818.621), stdev = 66827.223
  CI (99.9%): [2592939.494, 2682235.752] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival  thrpt   30  2637587.623 ± 44648.129  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_cancelOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_cancelOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 524649.151 ops/s
# Warmup Iteration   2: 1802232.947 ops/s
# Warmup Iteration   3: 2347460.021 ops/s
# Warmup Iteration   4: 2651403.247 ops/s
# Warmup Iteration   5: 2637911.617 ops/s
# Warmup Iteration   6: 2656137.787 ops/s
# Warmup Iteration   7: 2833880.932 ops/s
# Warmup Iteration   8: 2592107.999 ops/s
# Warmup Iteration   9: 2651738.395 ops/s
# Warmup Iteration  10: 2690721.973 ops/s
# Warmup Iteration  11: 2543412.743 ops/s
# Warmup Iteration  12: 2717408.616 ops/s
# Warmup Iteration  13: 2704505.813 ops/s
# Warmup Iteration  14: 2628581.635 ops/s
# Warmup Iteration  15: 2774826.373 ops/s
# Warmup Iteration  16: 2640876.142 ops/s
# Warmup Iteration  17: 2789695.827 ops/s
# Warmup Iteration  18: 2603811.298 ops/s
# Warmup Iteration  19: 2744556.762 ops/s
# Warmup Iteration  20: 2638113.182 ops/s
# Warmup Iteration  21: 2711072.272 ops/s
# Warmup Iteration  22: 2657312.709 ops/s
# Warmup Iteration  23: 2639478.937 ops/s
# Warmup Iteration  24: 2787639.198 ops/s
# Warmup Iteration  25: 2615569.351 ops/s
# Warmup Iteration  26: 2657639.893 ops/s
# Warmup Iteration  27: 2662163.051 ops/s
# Warmup Iteration  28: 2755618.213 ops/s
# Warmup Iteration  29: 2788680.332 ops/s
# Warmup Iteration  30: 2610372.002 ops/s
Iteration   1: 2761992.109 ops/s
Iteration   2: 2595242.312 ops/s
Iteration   3: 2706939.552 ops/s
Iteration   4: 2779083.765 ops/s
Iteration   5: 2627084.544 ops/s
Iteration   6: 2769681.669 ops/s
Iteration   7: 2610990.921 ops/s
Iteration   8: 2697170.622 ops/s
Iteration   9: 2593032.102 ops/s
Iteration  10: 2636702.964 ops/s
Iteration  11: 2784351.720 ops/s
Iteration  12: 2693606.108 ops/s
Iteration  13: 2597668.441 ops/s
Iteration  14: 2750754.361 ops/s
Iteration  15: 2727169.890 ops/s
Iteration  16: 2627065.302 ops/s
Iteration  17: 2697502.540 ops/s
Iteration  18: 2773376.485 ops/s
Iteration  19: 2619881.882 ops/s
Iteration  20: 2761479.323 ops/s
Iteration  21: 2795377.072 ops/s
Iteration  22: 2563066.856 ops/s
Iteration  23: 2716594.242 ops/s
Iteration  24: 2668286.669 ops/s
Iteration  25: 2693811.849 ops/s
Iteration  26: 2721119.919 ops/s
Iteration  27: 2603541.454 ops/s
Iteration  28: 2784892.518 ops/s
Iteration  29: 2663079.324 ops/s
Iteration  30: 2704834.993 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_cancelOnArrival":
  2690846.050 ±(99.9%) 46672.051 ops/s [Average]
  (min, avg, max) = (2563066.856, 2690846.050, 2795377.072), stdev = 69856.535
  CI (99.9%): [2644173.999, 2737518.102] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_cancelOnArrival  thrpt   30  2690846.050 ± 46672.051  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_onlyFirstShouldSubscribeAndLastUnsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_onlyFirstShouldSubscribeAndLastUnsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 202373.037 ops/s
# Warmup Iteration   2: 813691.980 ops/s
# Warmup Iteration   3: 853619.651 ops/s
# Warmup Iteration   4: 1105436.820 ops/s
# Warmup Iteration   5: 1180477.955 ops/s
# Warmup Iteration   6: 1173507.848 ops/s
# Warmup Iteration   7: 1175660.085 ops/s
# Warmup Iteration   8: 981507.029 ops/s
# Warmup Iteration   9: 1143556.234 ops/s
# Warmup Iteration  10: 1191110.484 ops/s
# Warmup Iteration  11: 1127499.864 ops/s
# Warmup Iteration  12: 1192501.892 ops/s
# Warmup Iteration  13: 1111574.841 ops/s
# Warmup Iteration  14: 1152448.417 ops/s
# Warmup Iteration  15: 1210824.334 ops/s
# Warmup Iteration  16: 1128276.343 ops/s
# Warmup Iteration  17: 1201520.275 ops/s
# Warmup Iteration  18: 1153733.480 ops/s
# Warmup Iteration  19: 1177091.619 ops/s
# Warmup Iteration  20: 1187689.932 ops/s
# Warmup Iteration  21: 1163439.210 ops/s
# Warmup Iteration  22: 1201815.256 ops/s
# Warmup Iteration  23: 1163760.547 ops/s
# Warmup Iteration  24: 1179564.495 ops/s
# Warmup Iteration  25: 1190598.859 ops/s
# Warmup Iteration  26: 1158091.037 ops/s
# Warmup Iteration  27: 1173547.166 ops/s
# Warmup Iteration  28: 1183855.301 ops/s
# Warmup Iteration  29: 1184115.738 ops/s
# Warmup Iteration  30: 1212189.656 ops/s
Iteration   1: 1146960.491 ops/s
Iteration   2: 1181165.911 ops/s
Iteration   3: 1221562.946 ops/s
Iteration   4: 1155459.660 ops/s
Iteration   5: 1192391.196 ops/s
Iteration   6: 1231987.467 ops/s
Iteration   7: 1148277.809 ops/s
Iteration   8: 1202452.169 ops/s
Iteration   9: 1138360.772 ops/s
Iteration  10: 1187449.507 ops/s
Iteration  11: 1162761.297 ops/s
Iteration  12: 1204681.949 ops/s
Iteration  13: 1189116.392 ops/s
Iteration  14: 1165340.294 ops/s
Iteration  15: 1211064.779 ops/s
Iteration  16: 1155202.513 ops/s
Iteration  17: 1203062.309 ops/s
Iteration  18: 1168742.531 ops/s
Iteration  19: 1200689.053 ops/s
Iteration  20: 1157795.534 ops/s
Iteration  21: 1176280.994 ops/s
Iteration  22: 1234224.749 ops/s
Iteration  23: 1164564.436 ops/s
Iteration  24: 1195728.407 ops/s
Iteration  25: 1190073.876 ops/s
Iteration  26: 1190102.680 ops/s
Iteration  27: 1154235.157 ops/s
Iteration  28: 1203313.656 ops/s
Iteration  29: 1210131.182 ops/s
Iteration  30: 1148944.838 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_onlyFirstShouldSubscribeAndLastUnsubscribe":
  1183070.819 ±(99.9%) 17712.592 ops/s [Average]
  (min, avg, max) = (1138360.772, 1183070.819, 1234224.749), stdev = 26511.376
  CI (99.9%): [1165358.227, 1200783.411] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
FlowableRefCountTest._Benchmark.benchmark_onlyFirstShouldSubscribeAndLastUnsubscribe  thrpt   30  1183070.819 ± 17712.592  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableBlockingSubscribe1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableBlockingSubscribe1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31198.159 ops/s
# Warmup Iteration   2: 84779.039 ops/s
# Warmup Iteration   3: 160876.691 ops/s
# Warmup Iteration   4: 205866.032 ops/s
# Warmup Iteration   5: 191260.980 ops/s
# Warmup Iteration   6: 202479.845 ops/s
# Warmup Iteration   7: 195331.095 ops/s
# Warmup Iteration   8: 199028.183 ops/s
# Warmup Iteration   9: 200406.814 ops/s
# Warmup Iteration  10: 181060.874 ops/s
# Warmup Iteration  11: 203379.176 ops/s
# Warmup Iteration  12: 199747.575 ops/s
# Warmup Iteration  13: 201219.920 ops/s
# Warmup Iteration  14: 208876.174 ops/s
# Warmup Iteration  15: 194700.976 ops/s
# Warmup Iteration  16: 208154.878 ops/s
# Warmup Iteration  17: 203999.031 ops/s
# Warmup Iteration  18: 202440.048 ops/s
# Warmup Iteration  19: 211808.281 ops/s
# Warmup Iteration  20: 206244.225 ops/s
# Warmup Iteration  21: 210595.714 ops/s
# Warmup Iteration  22: 208708.832 ops/s
# Warmup Iteration  23: 201934.072 ops/s
# Warmup Iteration  24: 213220.315 ops/s
# Warmup Iteration  25: 208006.138 ops/s
# Warmup Iteration  26: 209830.597 ops/s
# Warmup Iteration  27: 210066.391 ops/s
# Warmup Iteration  28: 203269.311 ops/s
# Warmup Iteration  29: 217232.617 ops/s
# Warmup Iteration  30: 199329.665 ops/s
Iteration   1: 212722.880 ops/s
Iteration   2: 201072.655 ops/s
Iteration   3: 214887.713 ops/s
Iteration   4: 203831.078 ops/s
Iteration   5: 202954.437 ops/s
Iteration   6: 219081.401 ops/s
Iteration   7: 203008.098 ops/s
Iteration   8: 217194.638 ops/s
Iteration   9: 199983.363 ops/s
Iteration  10: 205746.423 ops/s
Iteration  11: 209672.694 ops/s
Iteration  12: 209448.780 ops/s
Iteration  13: 206673.094 ops/s
Iteration  14: 203268.172 ops/s
Iteration  15: 204894.953 ops/s
Iteration  16: 214761.887 ops/s
Iteration  17: 203460.046 ops/s
Iteration  18: 213555.446 ops/s
Iteration  19: 202306.024 ops/s
Iteration  20: 213722.850 ops/s
Iteration  21: 210955.978 ops/s
Iteration  22: 198597.328 ops/s
Iteration  23: 214602.182 ops/s
Iteration  24: 201794.239 ops/s
Iteration  25: 213125.703 ops/s
Iteration  26: 195978.061 ops/s
Iteration  27: 205036.083 ops/s
Iteration  28: 216205.067 ops/s
Iteration  29: 196409.958 ops/s
Iteration  30: 202575.287 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableBlockingSubscribe1":
  207250.884 ±(99.9%) 4362.292 ops/s [Average]
  (min, avg, max) = (195978.061, 207250.884, 219081.401), stdev = 6529.274
  CI (99.9%): [202888.592, 211613.176] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_flowableBlockingSubscribe1  thrpt   30  207250.884 ± 4362.292  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 381924.547 ops/s
# Warmup Iteration   2: 567813.390 ops/s
# Warmup Iteration   3: 476942.806 ops/s
# Warmup Iteration   4: 666266.450 ops/s
# Warmup Iteration   5: 613331.685 ops/s
# Warmup Iteration   6: 690414.807 ops/s
# Warmup Iteration   7: 679631.961 ops/s
# Warmup Iteration   8: 710701.766 ops/s
# Warmup Iteration   9: 691046.149 ops/s
# Warmup Iteration  10: 707072.377 ops/s
# Warmup Iteration  11: 688349.635 ops/s
# Warmup Iteration  12: 682286.149 ops/s
# Warmup Iteration  13: 711322.005 ops/s
# Warmup Iteration  14: 698943.724 ops/s
# Warmup Iteration  15: 695604.193 ops/s
# Warmup Iteration  16: 706270.009 ops/s
# Warmup Iteration  17: 734394.736 ops/s
# Warmup Iteration  18: 756677.762 ops/s
# Warmup Iteration  19: 717665.125 ops/s
# Warmup Iteration  20: 770526.379 ops/s
# Warmup Iteration  21: 710679.261 ops/s
# Warmup Iteration  22: 748254.385 ops/s
# Warmup Iteration  23: 729846.264 ops/s
# Warmup Iteration  24: 730400.253 ops/s
# Warmup Iteration  25: 753679.092 ops/s
# Warmup Iteration  26: 727903.314 ops/s
# Warmup Iteration  27: 747517.645 ops/s
# Warmup Iteration  28: 727210.053 ops/s
# Warmup Iteration  29: 741513.201 ops/s
# Warmup Iteration  30: 755731.042 ops/s
Iteration   1: 721386.990 ops/s
Iteration   2: 732148.358 ops/s
Iteration   3: 740152.974 ops/s
Iteration   4: 734390.443 ops/s
Iteration   5: 727337.341 ops/s
Iteration   6: 727458.431 ops/s
Iteration   7: 760254.372 ops/s
Iteration   8: 721933.865 ops/s
Iteration   9: 762066.044 ops/s
Iteration  10: 735038.133 ops/s
Iteration  11: 718351.500 ops/s
Iteration  12: 771048.280 ops/s
Iteration  13: 719155.074 ops/s
Iteration  14: 761767.334 ops/s
Iteration  15: 719854.981 ops/s
Iteration  16: 738170.477 ops/s
Iteration  17: 765367.052 ops/s
Iteration  18: 724552.827 ops/s
Iteration  19: 773963.118 ops/s
Iteration  20: 733023.657 ops/s
Iteration  21: 743837.396 ops/s
Iteration  22: 739333.737 ops/s
Iteration  23: 753107.580 ops/s
Iteration  24: 716161.304 ops/s
Iteration  25: 747146.607 ops/s
Iteration  26: 753143.590 ops/s
Iteration  27: 724713.925 ops/s
Iteration  28: 747272.079 ops/s
Iteration  29: 733522.815 ops/s
Iteration  30: 738180.313 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_error":
  739461.353 ±(99.9%) 11194.791 ops/s [Average]
  (min, avg, max) = (716161.304, 739461.353, 773963.118), stdev = 16755.838
  CI (99.9%): [728266.562, 750656.145] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_error  thrpt   30  739461.353 ± 11194.791  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 526376.873 ops/s
# Warmup Iteration   2: 1605316.947 ops/s
# Warmup Iteration   3: 2258138.170 ops/s
# Warmup Iteration   4: 2112003.350 ops/s
# Warmup Iteration   5: 2287540.585 ops/s
# Warmup Iteration   6: 2155690.658 ops/s
# Warmup Iteration   7: 2221756.619 ops/s
# Warmup Iteration   8: 2269650.292 ops/s
# Warmup Iteration   9: 2284784.773 ops/s
# Warmup Iteration  10: 2219454.955 ops/s
# Warmup Iteration  11: 2188434.034 ops/s
# Warmup Iteration  12: 2235025.545 ops/s
# Warmup Iteration  13: 2325891.057 ops/s
# Warmup Iteration  14: 2193519.869 ops/s
# Warmup Iteration  15: 2226845.330 ops/s
# Warmup Iteration  16: 2216076.598 ops/s
# Warmup Iteration  17: 2301380.226 ops/s
# Warmup Iteration  18: 2290930.874 ops/s
# Warmup Iteration  19: 2210653.621 ops/s
# Warmup Iteration  20: 2304285.990 ops/s
# Warmup Iteration  21: 2152116.912 ops/s
# Warmup Iteration  22: 2179650.591 ops/s
# Warmup Iteration  23: 2312066.857 ops/s
# Warmup Iteration  24: 2232005.951 ops/s
# Warmup Iteration  25: 2233761.837 ops/s
# Warmup Iteration  26: 2253467.284 ops/s
# Warmup Iteration  27: 2168928.945 ops/s
# Warmup Iteration  28: 2195736.253 ops/s
# Warmup Iteration  29: 2276049.757 ops/s
# Warmup Iteration  30: 2178205.753 ops/s
Iteration   1: 2232313.019 ops/s
Iteration   2: 2146964.994 ops/s
Iteration   3: 2218575.826 ops/s
Iteration   4: 2332939.188 ops/s
Iteration   5: 2268195.373 ops/s
Iteration   6: 2190878.175 ops/s
Iteration   7: 2288478.982 ops/s
Iteration   8: 2154529.635 ops/s
Iteration   9: 2219245.778 ops/s
Iteration  10: 2286174.831 ops/s
Iteration  11: 2240622.937 ops/s
Iteration  12: 2224171.399 ops/s
Iteration  13: 2276989.460 ops/s
Iteration  14: 2263202.178 ops/s
Iteration  15: 2286753.259 ops/s
Iteration  16: 2192291.989 ops/s
Iteration  17: 2190548.679 ops/s
Iteration  18: 2348535.289 ops/s
Iteration  19: 2190312.249 ops/s
Iteration  20: 2330028.348 ops/s
Iteration  21: 2226082.349 ops/s
Iteration  22: 2274572.890 ops/s
Iteration  23: 2241784.643 ops/s
Iteration  24: 2248568.598 ops/s
Iteration  25: 2201454.808 ops/s
Iteration  26: 2268391.320 ops/s
Iteration  27: 2327988.637 ops/s
Iteration  28: 2187209.221 ops/s
Iteration  29: 2299438.134 ops/s
Iteration  30: 1622144.078 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_disposed":
  2225979.542 ±(99.9%) 83991.860 ops/s [Average]
  (min, avg, max) = (1622144.078, 2225979.542, 2348535.289), stdev = 125715.071
  CI (99.9%): [2141987.682, 2309971.402] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_disposed  thrpt   30  2225979.542 ± 83991.860  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 152088.954 ops/s
# Warmup Iteration   2: 434601.245 ops/s
# Warmup Iteration   3: 455197.997 ops/s
# Warmup Iteration   4: 436296.268 ops/s
# Warmup Iteration   5: 524808.912 ops/s
# Warmup Iteration   6: 511569.265 ops/s
# Warmup Iteration   7: 482371.706 ops/s
# Warmup Iteration   8: 504753.617 ops/s
# Warmup Iteration   9: 488308.817 ops/s
# Warmup Iteration  10: 532802.619 ops/s
# Warmup Iteration  11: 500318.822 ops/s
# Warmup Iteration  12: 533862.522 ops/s
# Warmup Iteration  13: 512835.054 ops/s
# Warmup Iteration  14: 522071.952 ops/s
# Warmup Iteration  15: 531129.431 ops/s
# Warmup Iteration  16: 500778.571 ops/s
# Warmup Iteration  17: 545411.667 ops/s
# Warmup Iteration  18: 528621.115 ops/s
# Warmup Iteration  19: 539192.718 ops/s
# Warmup Iteration  20: 557419.465 ops/s
# Warmup Iteration  21: 527497.372 ops/s
# Warmup Iteration  22: 538910.485 ops/s
# Warmup Iteration  23: 537414.983 ops/s
# Warmup Iteration  24: 532366.699 ops/s
# Warmup Iteration  25: 554387.503 ops/s
# Warmup Iteration  26: 528901.843 ops/s
# Warmup Iteration  27: 529490.963 ops/s
# Warmup Iteration  28: 559833.200 ops/s
# Warmup Iteration  29: 526748.877 ops/s
# Warmup Iteration  30: 557916.643 ops/s
Iteration   1: 530221.227 ops/s
Iteration   2: 542119.416 ops/s
Iteration   3: 557309.302 ops/s
Iteration   4: 513594.849 ops/s
Iteration   5: 542194.710 ops/s
Iteration   6: 545427.264 ops/s
Iteration   7: 529792.296 ops/s
Iteration   8: 563988.952 ops/s
Iteration   9: 525741.333 ops/s
Iteration  10: 551769.438 ops/s
Iteration  11: 539129.582 ops/s
Iteration  12: 538226.109 ops/s
Iteration  13: 536752.447 ops/s
Iteration  14: 533001.222 ops/s
Iteration  15: 540573.808 ops/s
Iteration  16: 539172.744 ops/s
Iteration  17: 536655.977 ops/s
Iteration  18: 549124.463 ops/s
Iteration  19: 541296.005 ops/s
Iteration  20: 552262.528 ops/s
Iteration  21: 517697.874 ops/s
Iteration  22: 547700.451 ops/s
Iteration  23: 546099.296 ops/s
Iteration  24: 535774.496 ops/s
Iteration  25: 547972.188 ops/s
Iteration  26: 532044.133 ops/s
Iteration  27: 550091.699 ops/s
Iteration  28: 530327.279 ops/s
Iteration  29: 530995.428 ops/s
Iteration  30: 562462.757 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe":
  540317.309 ±(99.9%) 7827.236 ops/s [Average]
  (min, avg, max) = (513594.849, 540317.309, 563988.952), stdev = 11715.440
  CI (99.9%): [532490.073, 548144.545] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableDoOnLifecycleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  540317.309 ± 7827.236  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19489.886 ops/s
# Warmup Iteration   2: 120381.698 ops/s
# Warmup Iteration   3: 239552.855 ops/s
# Warmup Iteration   4: 355472.849 ops/s
# Warmup Iteration   5: 356237.232 ops/s
# Warmup Iteration   6: 346766.445 ops/s
# Warmup Iteration   7: 336860.382 ops/s
# Warmup Iteration   8: 355573.880 ops/s
# Warmup Iteration   9: 337000.299 ops/s
# Warmup Iteration  10: 353993.078 ops/s
# Warmup Iteration  11: 331726.435 ops/s
# Warmup Iteration  12: 342650.200 ops/s
# Warmup Iteration  13: 359468.895 ops/s
# Warmup Iteration  14: 358093.387 ops/s
# Warmup Iteration  15: 339616.255 ops/s
# Warmup Iteration  16: 353615.041 ops/s
# Warmup Iteration  17: 339389.170 ops/s
# Warmup Iteration  18: 353870.229 ops/s
# Warmup Iteration  19: 346671.851 ops/s
# Warmup Iteration  20: 326173.186 ops/s
# Warmup Iteration  21: 354680.813 ops/s
# Warmup Iteration  22: 335508.959 ops/s
# Warmup Iteration  23: 342576.800 ops/s
# Warmup Iteration  24: 348224.233 ops/s
# Warmup Iteration  25: 339994.787 ops/s
# Warmup Iteration  26: 352459.862 ops/s
# Warmup Iteration  27: 351203.891 ops/s
# Warmup Iteration  28: 345146.739 ops/s
# Warmup Iteration  29: 349507.888 ops/s
# Warmup Iteration  30: 340419.319 ops/s
Iteration   1: 343197.268 ops/s
Iteration   2: 352380.881 ops/s
Iteration   3: 335676.237 ops/s
Iteration   4: 341519.969 ops/s
Iteration   5: 357022.755 ops/s
Iteration   6: 331603.413 ops/s
Iteration   7: 362803.026 ops/s
Iteration   8: 341571.030 ops/s
Iteration   9: 352871.529 ops/s
Iteration  10: 349254.041 ops/s
Iteration  11: 355497.656 ops/s
Iteration  12: 351517.750 ops/s
Iteration  13: 348098.365 ops/s
Iteration  14: 346915.852 ops/s
Iteration  15: 339358.816 ops/s
Iteration  16: 336469.206 ops/s
Iteration  17: 333353.926 ops/s
Iteration  18: 346899.468 ops/s
Iteration  19: 338457.356 ops/s
Iteration  20: 357249.202 ops/s
Iteration  21: 336801.853 ops/s
Iteration  22: 349291.415 ops/s
Iteration  23: 351824.247 ops/s
Iteration  24: 265991.445 ops/s
Iteration  25: 339232.880 ops/s
Iteration  26: 343842.867 ops/s
Iteration  27: 349407.057 ops/s
Iteration  28: 341445.264 ops/s
Iteration  29: 335771.673 ops/s
Iteration  30: 348516.385 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timed":
  342794.761 ±(99.9%) 11016.723 ops/s [Average]
  (min, avg, max) = (265991.445, 342794.761, 362803.026), stdev = 16489.313
  CI (99.9%): [331778.038, 353811.484] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_timed  thrpt   30  342794.761 ± 11016.723  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timedAndCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timedAndCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11335.211 ops/s
# Warmup Iteration   2: 73619.087 ops/s
# Warmup Iteration   3: 86003.203 ops/s
# Warmup Iteration   4: 161660.291 ops/s
# Warmup Iteration   5: 193945.488 ops/s
# Warmup Iteration   6: 238833.468 ops/s
# Warmup Iteration   7: 232337.132 ops/s
# Warmup Iteration   8: 230994.063 ops/s
# Warmup Iteration   9: 236538.468 ops/s
# Warmup Iteration  10: 243505.058 ops/s
# Warmup Iteration  11: 235706.335 ops/s
# Warmup Iteration  12: 225374.927 ops/s
# Warmup Iteration  13: 238412.937 ops/s
# Warmup Iteration  14: 230199.122 ops/s
# Warmup Iteration  15: 242652.012 ops/s
# Warmup Iteration  16: 227371.469 ops/s
# Warmup Iteration  17: 232774.939 ops/s
# Warmup Iteration  18: 235970.177 ops/s
# Warmup Iteration  19: 227907.977 ops/s
# Warmup Iteration  20: 243394.467 ops/s
# Warmup Iteration  21: 225010.524 ops/s
# Warmup Iteration  22: 232972.278 ops/s
# Warmup Iteration  23: 227199.466 ops/s
# Warmup Iteration  24: 226946.188 ops/s
# Warmup Iteration  25: 232684.249 ops/s
# Warmup Iteration  26: 234780.096 ops/s
# Warmup Iteration  27: 232968.952 ops/s
# Warmup Iteration  28: 233520.571 ops/s
# Warmup Iteration  29: 233930.716 ops/s
# Warmup Iteration  30: 223770.459 ops/s
Iteration   1: 238396.129 ops/s
Iteration   2: 232948.574 ops/s
Iteration   3: 227256.603 ops/s
Iteration   4: 234493.185 ops/s
Iteration   5: 224945.880 ops/s
Iteration   6: 229489.534 ops/s
Iteration   7: 239342.774 ops/s
Iteration   8: 220876.924 ops/s
Iteration   9: 227867.298 ops/s
Iteration  10: 236099.907 ops/s
Iteration  11: 240567.988 ops/s
Iteration  12: 233072.706 ops/s
Iteration  13: 229764.540 ops/s
Iteration  14: 237115.312 ops/s
Iteration  15: 229281.287 ops/s
Iteration  16: 228157.522 ops/s
Iteration  17: 240003.374 ops/s
Iteration  18: 225015.814 ops/s
Iteration  19: 236220.116 ops/s
Iteration  20: 236062.107 ops/s
Iteration  21: 238138.668 ops/s
Iteration  22: 240126.203 ops/s
Iteration  23: 236390.497 ops/s
Iteration  24: 238924.676 ops/s
Iteration  25: 227867.467 ops/s
Iteration  26: 237110.790 ops/s
Iteration  27: 234487.287 ops/s
Iteration  28: 238567.198 ops/s
Iteration  29: 237061.585 ops/s
Iteration  30: 232603.500 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timedAndCount":
  233608.515 ±(99.9%) 3563.430 ops/s [Average]
  (min, avg, max) = (220876.924, 233608.515, 240567.988), stdev = 5333.574
  CI (99.9%): [230045.085, 237171.945] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_timedAndCount  thrpt   30  233608.515 ± 3563.430  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_timeoutConsumerDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_timeoutConsumerDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33231.156 ops/s
# Warmup Iteration   2: 145881.233 ops/s
# Warmup Iteration   3: 189391.217 ops/s
# Warmup Iteration   4: 215607.544 ops/s
# Warmup Iteration   5: 219079.258 ops/s
# Warmup Iteration   6: 212689.041 ops/s
# Warmup Iteration   7: 215890.819 ops/s
# Warmup Iteration   8: 208119.287 ops/s
# Warmup Iteration   9: 216279.030 ops/s
# Warmup Iteration  10: 218706.588 ops/s
# Warmup Iteration  11: 205760.094 ops/s
# Warmup Iteration  12: 212338.875 ops/s
# Warmup Iteration  13: 216934.499 ops/s
# Warmup Iteration  14: 211479.329 ops/s
# Warmup Iteration  15: 218716.107 ops/s
# Warmup Iteration  16: 223628.063 ops/s
# Warmup Iteration  17: 233091.538 ops/s
# Warmup Iteration  18: 250802.498 ops/s
# Warmup Iteration  19: 231045.224 ops/s
# Warmup Iteration  20: 251313.336 ops/s
# Warmup Iteration  21: 237730.692 ops/s
# Warmup Iteration  22: 240641.813 ops/s
# Warmup Iteration  23: 242081.674 ops/s
# Warmup Iteration  24: 241881.509 ops/s
# Warmup Iteration  25: 229076.136 ops/s
# Warmup Iteration  26: 248059.177 ops/s
# Warmup Iteration  27: 233408.689 ops/s
# Warmup Iteration  28: 255655.696 ops/s
# Warmup Iteration  29: 240837.350 ops/s
# Warmup Iteration  30: 236038.813 ops/s
Iteration   1: 244363.957 ops/s
Iteration   2: 232949.178 ops/s
Iteration   3: 240026.296 ops/s
Iteration   4: 250422.483 ops/s
Iteration   5: 237774.520 ops/s
Iteration   6: 237338.164 ops/s
Iteration   7: 248316.233 ops/s
Iteration   8: 243443.287 ops/s
Iteration   9: 250663.471 ops/s
Iteration  10: 237745.347 ops/s
Iteration  11: 241422.361 ops/s
Iteration  12: 242809.792 ops/s
Iteration  13: 236517.817 ops/s
Iteration  14: 242035.202 ops/s
Iteration  15: 244030.149 ops/s
Iteration  16: 236558.579 ops/s
Iteration  17: 250165.883 ops/s
Iteration  18: 230386.231 ops/s
Iteration  19: 190642.940 ops/s
Iteration  20: 252700.448 ops/s
Iteration  21: 247073.345 ops/s
Iteration  22: 238828.837 ops/s
Iteration  23: 251656.275 ops/s
Iteration  24: 237705.720 ops/s
Iteration  25: 239569.484 ops/s
Iteration  26: 245401.676 ops/s
Iteration  27: 234718.392 ops/s
Iteration  28: 240514.454 ops/s
Iteration  29: 249296.069 ops/s
Iteration  30: 230871.929 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_timeoutConsumerDoubleOnSubscribe":
  240198.284 ±(99.9%) 7500.898 ops/s [Average]
  (min, avg, max) = (190642.940, 240198.284, 252700.448), stdev = 11226.991
  CI (99.9%): [232697.386, 247699.182] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_timeoutConsumerDoubleOnSubscribe  thrpt   30  240198.284 ± 7500.898  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_countRestartsOnTimeTick$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_countRestartsOnTimeTick

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24533.238 ops/s
# Warmup Iteration   2: 110755.910 ops/s
# Warmup Iteration   3: 163150.567 ops/s
# Warmup Iteration   4: 431121.380 ops/s
# Warmup Iteration   5: 421533.074 ops/s
# Warmup Iteration   6: 426703.924 ops/s
# Warmup Iteration   7: 442509.015 ops/s
# Warmup Iteration   8: 427856.152 ops/s
# Warmup Iteration   9: 428310.306 ops/s
# Warmup Iteration  10: 418240.042 ops/s
# Warmup Iteration  11: 433672.717 ops/s
# Warmup Iteration  12: 441517.253 ops/s
# Warmup Iteration  13: 404522.439 ops/s
# Warmup Iteration  14: 434000.222 ops/s
# Warmup Iteration  15: 381324.834 ops/s
# Warmup Iteration  16: 443780.895 ops/s
# Warmup Iteration  17: 428290.688 ops/s
# Warmup Iteration  18: 428391.682 ops/s
# Warmup Iteration  19: 448731.623 ops/s
# Warmup Iteration  20: 424986.792 ops/s
# Warmup Iteration  21: 444800.997 ops/s
# Warmup Iteration  22: 412691.216 ops/s
# Warmup Iteration  23: 444287.520 ops/s
# Warmup Iteration  24: 450551.286 ops/s
# Warmup Iteration  25: 399326.759 ops/s
# Warmup Iteration  26: 442763.133 ops/s
# Warmup Iteration  27: 406620.369 ops/s
# Warmup Iteration  28: 449053.332 ops/s
# Warmup Iteration  29: 440387.773 ops/s
# Warmup Iteration  30: 428798.756 ops/s
Iteration   1: 438232.722 ops/s
Iteration   2: 452432.405 ops/s
Iteration   3: 430192.548 ops/s
Iteration   4: 439324.149 ops/s
Iteration   5: 427542.726 ops/s
Iteration   6: 434286.841 ops/s
Iteration   7: 456704.858 ops/s
Iteration   8: 423213.551 ops/s
Iteration   9: 451224.607 ops/s
Iteration  10: 441357.082 ops/s
Iteration  11: 433391.576 ops/s
Iteration  12: 449180.726 ops/s
Iteration  13: 423717.851 ops/s
Iteration  14: 439439.063 ops/s
Iteration  15: 443163.404 ops/s
Iteration  16: 424220.647 ops/s
Iteration  17: 438850.919 ops/s
Iteration  18: 448805.443 ops/s
Iteration  19: 433876.859 ops/s
Iteration  20: 452595.462 ops/s
Iteration  21: 423371.885 ops/s
Iteration  22: 436321.039 ops/s
Iteration  23: 456066.245 ops/s
Iteration  24: 432213.044 ops/s
Iteration  25: 450956.950 ops/s
Iteration  26: 432457.316 ops/s
Iteration  27: 441391.485 ops/s
Iteration  28: 442136.575 ops/s
Iteration  29: 440071.288 ops/s
Iteration  30: 441472.648 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_countRestartsOnTimeTick":
  439273.730 ±(99.9%) 6607.907 ops/s [Average]
  (min, avg, max) = (423213.551, 439273.730, 456704.858), stdev = 9890.404
  CI (99.9%): [432665.824, 445881.637] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_countRestartsOnTimeTick  thrpt   30  439273.730 ± 6607.907  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrowsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrowsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18293.901 ops/s
# Warmup Iteration   2: 126885.094 ops/s
# Warmup Iteration   3: 143155.224 ops/s
# Warmup Iteration   4: 178193.005 ops/s
# Warmup Iteration   5: 161908.351 ops/s
# Warmup Iteration   6: 173953.092 ops/s
# Warmup Iteration   7: 159630.332 ops/s
# Warmup Iteration   8: 177218.812 ops/s
# Warmup Iteration   9: 183257.476 ops/s
# Warmup Iteration  10: 168244.098 ops/s
# Warmup Iteration  11: 181231.622 ops/s
# Warmup Iteration  12: 171125.529 ops/s
# Warmup Iteration  13: 177959.622 ops/s
# Warmup Iteration  14: 177394.472 ops/s
# Warmup Iteration  15: 172727.663 ops/s
# Warmup Iteration  16: 182213.204 ops/s
# Warmup Iteration  17: 178156.931 ops/s
# Warmup Iteration  18: 185670.853 ops/s
# Warmup Iteration  19: 181389.714 ops/s
# Warmup Iteration  20: 187341.978 ops/s
# Warmup Iteration  21: 179030.876 ops/s
# Warmup Iteration  22: 184553.492 ops/s
# Warmup Iteration  23: 188126.515 ops/s
# Warmup Iteration  24: 179333.503 ops/s
# Warmup Iteration  25: 179852.158 ops/s
# Warmup Iteration  26: 192077.461 ops/s
# Warmup Iteration  27: 188758.944 ops/s
# Warmup Iteration  28: 188296.570 ops/s
# Warmup Iteration  29: 178903.347 ops/s
# Warmup Iteration  30: 188634.229 ops/s
Iteration   1: 183160.519 ops/s
Iteration   2: 184746.330 ops/s
Iteration   3: 188040.513 ops/s
Iteration   4: 176695.075 ops/s
Iteration   5: 189179.633 ops/s
Iteration   6: 177893.928 ops/s
Iteration   7: 186653.769 ops/s
Iteration   8: 185375.960 ops/s
Iteration   9: 182543.431 ops/s
Iteration  10: 187454.568 ops/s
Iteration  11: 178789.159 ops/s
Iteration  12: 184773.804 ops/s
Iteration  13: 177709.239 ops/s
Iteration  14: 148667.442 ops/s
Iteration  15: 184317.739 ops/s
Iteration  16: 181512.443 ops/s
Iteration  17: 182473.298 ops/s
Iteration  18: 180536.261 ops/s
Iteration  19: 182787.639 ops/s
Iteration  20: 192524.718 ops/s
Iteration  21: 188353.292 ops/s
Iteration  22: 177524.714 ops/s
Iteration  23: 190687.028 ops/s
Iteration  24: 184292.696 ops/s
Iteration  25: 179847.423 ops/s
Iteration  26: 188660.576 ops/s
Iteration  27: 180342.768 ops/s
Iteration  28: 176918.824 ops/s
Iteration  29: 183864.801 ops/s
Iteration  30: 178698.320 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrowsObservable":
  182167.530 ±(99.9%) 5121.484 ops/s [Average]
  (min, avg, max) = (148667.442, 182167.530, 192524.718), stdev = 7665.597
  CI (99.9%): [177046.046, 187289.014] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableAllTest._Benchmark.benchmark_predicateThrowsObservable  thrpt   30  182167.530 ± 5121.484  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_interruptWait$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_interruptWait

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 156138.770 ops/s
# Warmup Iteration   2: 247129.569 ops/s
# Warmup Iteration   3: 269640.769 ops/s
# Warmup Iteration   4: 279027.859 ops/s
# Warmup Iteration   5: 261377.404 ops/s
# Warmup Iteration   6: 269204.510 ops/s
# Warmup Iteration   7: 289629.977 ops/s
# Warmup Iteration   8: 285001.466 ops/s
# Warmup Iteration   9: 281879.780 ops/s
# Warmup Iteration  10: 284146.456 ops/s
# Warmup Iteration  11: 287542.546 ops/s
# Warmup Iteration  12: 303481.676 ops/s
# Warmup Iteration  13: 270578.554 ops/s
# Warmup Iteration  14: 287788.165 ops/s
# Warmup Iteration  15: 285081.909 ops/s
# Warmup Iteration  16: 280896.656 ops/s
# Warmup Iteration  17: 309522.494 ops/s
# Warmup Iteration  18: 280917.207 ops/s
# Warmup Iteration  19: 299712.710 ops/s
# Warmup Iteration  20: 303305.186 ops/s
# Warmup Iteration  21: 290178.107 ops/s
# Warmup Iteration  22: 301181.095 ops/s
# Warmup Iteration  23: 290760.078 ops/s
# Warmup Iteration  24: 286938.139 ops/s
# Warmup Iteration  25: 300522.531 ops/s
# Warmup Iteration  26: 284933.748 ops/s
# Warmup Iteration  27: 297956.468 ops/s
# Warmup Iteration  28: 299891.437 ops/s
# Warmup Iteration  29: 302158.385 ops/s
# Warmup Iteration  30: 284520.930 ops/s
Iteration   1: 295581.737 ops/s
Iteration   2: 294876.304 ops/s
Iteration   3: 308669.688 ops/s
Iteration   4: 304958.304 ops/s
Iteration   5: 287866.270 ops/s
Iteration   6: 302676.152 ops/s
Iteration   7: 294473.745 ops/s
Iteration   8: 304600.034 ops/s
Iteration   9: 295951.007 ops/s
Iteration  10: 300943.250 ops/s
Iteration  11: 284443.084 ops/s
Iteration  12: 306612.938 ops/s
Iteration  13: 290236.479 ops/s
Iteration  14: 293663.561 ops/s
Iteration  15: 298449.428 ops/s
Iteration  16: 294501.292 ops/s
Iteration  17: 299675.656 ops/s
Iteration  18: 298315.493 ops/s
Iteration  19: 304310.812 ops/s
Iteration  20: 297381.349 ops/s
Iteration  21: 311620.445 ops/s
Iteration  22: 288977.441 ops/s
Iteration  23: 295137.629 ops/s
Iteration  24: 309979.597 ops/s
Iteration  25: 294288.514 ops/s
Iteration  26: 298230.070 ops/s
Iteration  27: 308722.601 ops/s
Iteration  28: 284036.905 ops/s
Iteration  29: 300040.069 ops/s
Iteration  30: 294826.667 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToIteratorTest._Benchmark.benchmark_interruptWait":
  298134.884 ±(99.9%) 4836.919 ops/s [Average]
  (min, avg, max) = (284036.905, 298134.884, 311620.445), stdev = 7239.673
  CI (99.9%): [293297.965, 302971.803] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
BlockingFlowableToIteratorTest._Benchmark.benchmark_interruptWait  thrpt   30  298134.884 ± 4836.919  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11868.791 ops/s
# Warmup Iteration   2: 121918.262 ops/s
# Warmup Iteration   3: 160988.258 ops/s
# Warmup Iteration   4: 177940.560 ops/s
# Warmup Iteration   5: 170418.836 ops/s
# Warmup Iteration   6: 169159.457 ops/s
# Warmup Iteration   7: 167530.952 ops/s
# Warmup Iteration   8: 171048.343 ops/s
# Warmup Iteration   9: 176074.589 ops/s
# Warmup Iteration  10: 175664.019 ops/s
# Warmup Iteration  11: 176014.883 ops/s
# Warmup Iteration  12: 178544.021 ops/s
# Warmup Iteration  13: 169565.391 ops/s
# Warmup Iteration  14: 178300.666 ops/s
# Warmup Iteration  15: 172201.368 ops/s
# Warmup Iteration  16: 172113.226 ops/s
# Warmup Iteration  17: 180768.060 ops/s
# Warmup Iteration  18: 179251.817 ops/s
# Warmup Iteration  19: 191407.336 ops/s
# Warmup Iteration  20: 193004.899 ops/s
# Warmup Iteration  21: 191910.384 ops/s
# Warmup Iteration  22: 180437.815 ops/s
# Warmup Iteration  23: 180882.714 ops/s
# Warmup Iteration  24: 185550.692 ops/s
# Warmup Iteration  25: 184215.225 ops/s
# Warmup Iteration  26: 181945.275 ops/s
# Warmup Iteration  27: 178797.650 ops/s
# Warmup Iteration  28: 182698.454 ops/s
# Warmup Iteration  29: 188492.185 ops/s
# Warmup Iteration  30: 180274.062 ops/s
Iteration   1: 181565.516 ops/s
Iteration   2: 189928.531 ops/s
Iteration   3: 182054.311 ops/s
Iteration   4: 187793.213 ops/s
Iteration   5: 184255.135 ops/s
Iteration   6: 181555.714 ops/s
Iteration   7: 192078.409 ops/s
Iteration   8: 143502.740 ops/s
Iteration   9: 186463.012 ops/s
Iteration  10: 181813.954 ops/s
Iteration  11: 188204.347 ops/s
Iteration  12: 178805.536 ops/s
Iteration  13: 182990.364 ops/s
Iteration  14: 189199.702 ops/s
Iteration  15: 189746.516 ops/s
Iteration  16: 176692.875 ops/s
Iteration  17: 188623.512 ops/s
Iteration  18: 187840.994 ops/s
Iteration  19: 180232.405 ops/s
Iteration  20: 191828.578 ops/s
Iteration  21: 186238.111 ops/s
Iteration  22: 179265.337 ops/s
Iteration  23: 191280.541 ops/s
Iteration  24: 184153.093 ops/s
Iteration  25: 186307.118 ops/s
Iteration  26: 175932.669 ops/s
Iteration  27: 184775.794 ops/s
Iteration  28: 176365.916 ops/s
Iteration  29: 181390.543 ops/s
Iteration  30: 189481.507 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_predicateThrows":
  183345.533 ±(99.9%) 5931.721 ops/s [Average]
  (min, avg, max) = (143502.740, 183345.533, 192078.409), stdev = 8878.322
  CI (99.9%): [177413.812, 189277.254] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableAllTest._Benchmark.benchmark_predicateThrows  thrpt   30  183345.533 ± 5931.721  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressureDrainOnTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressureDrainOnTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36248.976 ops/s
# Warmup Iteration   2: 92847.738 ops/s
# Warmup Iteration   3: 237786.523 ops/s
# Warmup Iteration   4: 284863.480 ops/s
# Warmup Iteration   5: 329768.633 ops/s
# Warmup Iteration   6: 328814.789 ops/s
# Warmup Iteration   7: 318179.592 ops/s
# Warmup Iteration   8: 341901.508 ops/s
# Warmup Iteration   9: 351760.422 ops/s
# Warmup Iteration  10: 330778.521 ops/s
# Warmup Iteration  11: 332919.727 ops/s
# Warmup Iteration  12: 347063.343 ops/s
# Warmup Iteration  13: 330768.997 ops/s
# Warmup Iteration  14: 338608.645 ops/s
# Warmup Iteration  15: 340535.372 ops/s
# Warmup Iteration  16: 348760.756 ops/s
# Warmup Iteration  17: 339025.583 ops/s
# Warmup Iteration  18: 348722.468 ops/s
# Warmup Iteration  19: 348670.912 ops/s
# Warmup Iteration  20: 350471.169 ops/s
# Warmup Iteration  21: 359420.927 ops/s
# Warmup Iteration  22: 333752.555 ops/s
# Warmup Iteration  23: 353223.017 ops/s
# Warmup Iteration  24: 340878.945 ops/s
# Warmup Iteration  25: 342956.938 ops/s
# Warmup Iteration  26: 357610.061 ops/s
# Warmup Iteration  27: 356678.830 ops/s
# Warmup Iteration  28: 330813.789 ops/s
# Warmup Iteration  29: 350988.725 ops/s
# Warmup Iteration  30: 335609.256 ops/s
Iteration   1: 343055.068 ops/s
Iteration   2: 336250.277 ops/s
Iteration   3: 356688.337 ops/s
Iteration   4: 334877.946 ops/s
Iteration   5: 344635.525 ops/s
Iteration   6: 349804.402 ops/s
Iteration   7: 348074.511 ops/s
Iteration   8: 347522.178 ops/s
Iteration   9: 364501.630 ops/s
Iteration  10: 335089.842 ops/s
Iteration  11: 362452.312 ops/s
Iteration  12: 358734.084 ops/s
Iteration  13: 343402.864 ops/s
Iteration  14: 351930.447 ops/s
Iteration  15: 355137.520 ops/s
Iteration  16: 339843.987 ops/s
Iteration  17: 361671.895 ops/s
Iteration  18: 342669.396 ops/s
Iteration  19: 345457.250 ops/s
Iteration  20: 355033.703 ops/s
Iteration  21: 354738.341 ops/s
Iteration  22: 343533.281 ops/s
Iteration  23: 356199.372 ops/s
Iteration  24: 352620.673 ops/s
Iteration  25: 347451.902 ops/s
Iteration  26: 358310.672 ops/s
Iteration  27: 341375.303 ops/s
Iteration  28: 358689.587 ops/s
Iteration  29: 340058.041 ops/s
Iteration  30: 361725.398 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressureDrainOnTime":
  349717.858 ±(99.9%) 5812.585 ops/s [Average]
  (min, avg, max) = (334877.946, 349717.858, 364501.630), stdev = 8700.004
  CI (99.9%): [343905.273, 355530.443] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_nextWindowMissingBackpressureDrainOnTime  thrpt   30  349717.858 ± 5812.585  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatWithObservableOfObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatWithObservableOfObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130859.583 ops/s
# Warmup Iteration   2: 459201.576 ops/s
# Warmup Iteration   3: 1125650.374 ops/s
# Warmup Iteration   4: 1609416.038 ops/s
# Warmup Iteration   5: 1861281.596 ops/s
# Warmup Iteration   6: 1751255.027 ops/s
# Warmup Iteration   7: 2000392.311 ops/s
# Warmup Iteration   8: 2144070.790 ops/s
# Warmup Iteration   9: 1978842.840 ops/s
# Warmup Iteration  10: 2040523.759 ops/s
# Warmup Iteration  11: 2052041.930 ops/s
# Warmup Iteration  12: 2013060.457 ops/s
# Warmup Iteration  13: 2036213.979 ops/s
# Warmup Iteration  14: 2119358.128 ops/s
# Warmup Iteration  15: 1963707.975 ops/s
# Warmup Iteration  16: 2147683.224 ops/s
# Warmup Iteration  17: 2036176.477 ops/s
# Warmup Iteration  18: 2078624.919 ops/s
# Warmup Iteration  19: 2030382.860 ops/s
# Warmup Iteration  20: 2064482.493 ops/s
# Warmup Iteration  21: 2021716.907 ops/s
# Warmup Iteration  22: 2019372.335 ops/s
# Warmup Iteration  23: 2096633.479 ops/s
# Warmup Iteration  24: 1998495.064 ops/s
# Warmup Iteration  25: 2082893.799 ops/s
# Warmup Iteration  26: 1966703.821 ops/s
# Warmup Iteration  27: 2038140.193 ops/s
# Warmup Iteration  28: 2088200.844 ops/s
# Warmup Iteration  29: 2131954.448 ops/s
# Warmup Iteration  30: 1976765.011 ops/s
Iteration   1: 2030498.355 ops/s
Iteration   2: 1629904.638 ops/s
Iteration   3: 1955287.576 ops/s
Iteration   4: 2072798.347 ops/s
Iteration   5: 2018393.043 ops/s
Iteration   6: 2043429.138 ops/s
Iteration   7: 2020293.755 ops/s
Iteration   8: 1992366.646 ops/s
Iteration   9: 2046227.352 ops/s
Iteration  10: 2013942.005 ops/s
Iteration  11: 2006589.719 ops/s
Iteration  12: 2045438.177 ops/s
Iteration  13: 1997788.014 ops/s
Iteration  14: 2018337.598 ops/s
Iteration  15: 2056181.042 ops/s
Iteration  16: 2008242.705 ops/s
Iteration  17: 2047248.007 ops/s
Iteration  18: 2028048.289 ops/s
Iteration  19: 2048238.584 ops/s
Iteration  20: 2109403.804 ops/s
Iteration  21: 1971500.509 ops/s
Iteration  22: 2138057.947 ops/s
Iteration  23: 2007447.735 ops/s
Iteration  24: 2006415.164 ops/s
Iteration  25: 2098582.076 ops/s
Iteration  26: 2039999.364 ops/s
Iteration  27: 2117138.327 ops/s
Iteration  28: 2052519.415 ops/s
Iteration  29: 1997050.358 ops/s
Iteration  30: 2089306.327 ops/s


Result "io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatWithObservableOfObservable":
  2023555.801 ±(99.9%) 57166.986 ops/s [Average]
  (min, avg, max) = (1629904.638, 2023555.801, 2138057.947), stdev = 85564.860
  CI (99.9%): [1966388.815, 2080722.787] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableConcatTests._Benchmark.benchmark_concatWithObservableOfObservable  thrpt   30  2023555.801 ± 57166.986  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 64260.464 ops/s
# Warmup Iteration   2: 441471.292 ops/s
# Warmup Iteration   3: 1209409.180 ops/s
# Warmup Iteration   4: 2098539.807 ops/s
# Warmup Iteration   5: 2560324.226 ops/s
# Warmup Iteration   6: 2402986.521 ops/s
# Warmup Iteration   7: 2226726.603 ops/s
# Warmup Iteration   8: 2352951.404 ops/s
# Warmup Iteration   9: 2494651.669 ops/s
# Warmup Iteration  10: 2535223.838 ops/s
# Warmup Iteration  11: 2472297.291 ops/s
# Warmup Iteration  12: 2490866.769 ops/s
# Warmup Iteration  13: 2569803.844 ops/s
# Warmup Iteration  14: 2504487.692 ops/s
# Warmup Iteration  15: 2548765.933 ops/s
# Warmup Iteration  16: 2522774.436 ops/s
# Warmup Iteration  17: 2516973.115 ops/s
# Warmup Iteration  18: 2563433.459 ops/s
# Warmup Iteration  19: 2589803.882 ops/s
# Warmup Iteration  20: 2507387.090 ops/s
# Warmup Iteration  21: 2520697.821 ops/s
# Warmup Iteration  22: 2472954.114 ops/s
# Warmup Iteration  23: 2514904.328 ops/s
# Warmup Iteration  24: 2513626.007 ops/s
# Warmup Iteration  25: 2502629.931 ops/s
# Warmup Iteration  26: 2477114.480 ops/s
# Warmup Iteration  27: 2565436.069 ops/s
# Warmup Iteration  28: 2523254.197 ops/s
# Warmup Iteration  29: 2508333.096 ops/s
# Warmup Iteration  30: 2637701.365 ops/s
Iteration   1: 2431066.492 ops/s
Iteration   2: 2510674.211 ops/s
Iteration   3: 2468729.911 ops/s
Iteration   4: 2494468.717 ops/s
Iteration   5: 2593513.030 ops/s
Iteration   6: 2463023.094 ops/s
Iteration   7: 2637496.687 ops/s
Iteration   8: 2441431.091 ops/s
Iteration   9: 2583891.173 ops/s
Iteration  10: 2497726.065 ops/s
Iteration  11: 2555963.387 ops/s
Iteration  12: 2547232.368 ops/s
Iteration  13: 2464533.231 ops/s
Iteration  14: 2520467.468 ops/s
Iteration  15: 2467395.006 ops/s
Iteration  16: 2608643.927 ops/s
Iteration  17: 2442696.731 ops/s
Iteration  18: 2516066.950 ops/s
Iteration  19: 2510510.763 ops/s
Iteration  20: 2459992.586 ops/s
Iteration  21: 2560157.763 ops/s
Iteration  22: 2441969.870 ops/s
Iteration  23: 2502172.513 ops/s
Iteration  24: 2527635.270 ops/s
Iteration  25: 2511488.136 ops/s
Iteration  26: 2455874.450 ops/s
Iteration  27: 2566793.869 ops/s
Iteration  28: 2478825.960 ops/s
Iteration  29: 2519569.497 ops/s
Iteration  30: 2522004.984 ops/s


Result "io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance":
  2510067.173 ±(99.9%) 35763.191 ops/s [Average]
  (min, avg, max) = (2431066.492, 2510067.173, 2637496.687), stdev = 53528.664
  CI (99.9%): [2474303.983, 2545830.364] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableConcatTests._Benchmark.benchmark_concatCovariance  thrpt   30  2510067.173 ± 35763.191  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100127.418 ops/s
# Warmup Iteration   2: 427647.555 ops/s
# Warmup Iteration   3: 1212580.845 ops/s
# Warmup Iteration   4: 1965462.276 ops/s
# Warmup Iteration   5: 2301518.330 ops/s
# Warmup Iteration   6: 2363197.135 ops/s
# Warmup Iteration   7: 2148893.349 ops/s
# Warmup Iteration   8: 2390852.176 ops/s
# Warmup Iteration   9: 2300590.318 ops/s
# Warmup Iteration  10: 2383089.865 ops/s
# Warmup Iteration  11: 2347678.700 ops/s
# Warmup Iteration  12: 2172256.044 ops/s
# Warmup Iteration  13: 2196802.732 ops/s
# Warmup Iteration  14: 2300259.840 ops/s
# Warmup Iteration  15: 2420350.170 ops/s
# Warmup Iteration  16: 2421073.897 ops/s
# Warmup Iteration  17: 2336432.105 ops/s
# Warmup Iteration  18: 2361175.303 ops/s
# Warmup Iteration  19: 2463213.297 ops/s
# Warmup Iteration  20: 2449559.250 ops/s
# Warmup Iteration  21: 2333750.075 ops/s
# Warmup Iteration  22: 2416099.241 ops/s
# Warmup Iteration  23: 2374247.580 ops/s
# Warmup Iteration  24: 2330154.356 ops/s
# Warmup Iteration  25: 2433252.762 ops/s
# Warmup Iteration  26: 2317548.743 ops/s
# Warmup Iteration  27: 1930859.694 ops/s
# Warmup Iteration  28: 2496262.291 ops/s
# Warmup Iteration  29: 2363340.201 ops/s
# Warmup Iteration  30: 2426868.146 ops/s
Iteration   1: 2292543.326 ops/s
Iteration   2: 2384318.203 ops/s
Iteration   3: 2374503.296 ops/s
Iteration   4: 2293028.877 ops/s
Iteration   5: 2345518.597 ops/s
Iteration   6: 2426058.484 ops/s
Iteration   7: 2347845.143 ops/s
Iteration   8: 2448794.481 ops/s
Iteration   9: 2312803.556 ops/s
Iteration  10: 2427457.563 ops/s
Iteration  11: 2325873.124 ops/s
Iteration  12: 2311286.981 ops/s
Iteration  13: 2403924.015 ops/s
Iteration  14: 2375415.759 ops/s
Iteration  15: 2349442.193 ops/s
Iteration  16: 2471052.506 ops/s
Iteration  17: 2309223.253 ops/s
Iteration  18: 2383233.115 ops/s
Iteration  19: 2362347.321 ops/s
Iteration  20: 2405951.077 ops/s
Iteration  21: 2373075.112 ops/s
Iteration  22: 2334691.310 ops/s
Iteration  23: 2519083.720 ops/s
Iteration  24: 2325595.977 ops/s
Iteration  25: 2468897.402 ops/s
Iteration  26: 2367144.969 ops/s
Iteration  27: 2413979.746 ops/s
Iteration  28: 2325535.731 ops/s
Iteration  29: 2381346.998 ops/s
Iteration  30: 2411410.751 ops/s


Result "io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatCovariance2":
  2375712.753 ±(99.9%) 37551.225 ops/s [Average]
  (min, avg, max) = (2292543.326, 2375712.753, 2519083.720), stdev = 56204.910
  CI (99.9%): [2338161.528, 2413263.978] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableConcatTests._Benchmark.benchmark_concatCovariance2  thrpt   30  2375712.753 ± 37551.225  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_concatReportsDisposedOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_concatReportsDisposedOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 424672.473 ops/s
# Warmup Iteration   2: 1378649.873 ops/s
# Warmup Iteration   3: 1617120.599 ops/s
# Warmup Iteration   4: 1947084.940 ops/s
# Warmup Iteration   5: 2147552.405 ops/s
# Warmup Iteration   6: 1884324.612 ops/s
# Warmup Iteration   7: 1936195.222 ops/s
# Warmup Iteration   8: 1942944.208 ops/s
# Warmup Iteration   9: 2078672.412 ops/s
# Warmup Iteration  10: 2029117.241 ops/s
# Warmup Iteration  11: 2122426.784 ops/s
# Warmup Iteration  12: 2029999.900 ops/s
# Warmup Iteration  13: 2087267.380 ops/s
# Warmup Iteration  14: 2127718.201 ops/s
# Warmup Iteration  15: 2102551.677 ops/s
# Warmup Iteration  16: 2078132.994 ops/s
# Warmup Iteration  17: 2130825.470 ops/s
# Warmup Iteration  18: 2072981.240 ops/s
# Warmup Iteration  19: 2123227.982 ops/s
# Warmup Iteration  20: 2082524.859 ops/s
# Warmup Iteration  21: 2088368.330 ops/s
# Warmup Iteration  22: 2090876.535 ops/s
# Warmup Iteration  23: 2088945.389 ops/s
# Warmup Iteration  24: 2092193.062 ops/s
# Warmup Iteration  25: 2039984.788 ops/s
# Warmup Iteration  26: 2143899.954 ops/s
# Warmup Iteration  27: 2185077.381 ops/s
# Warmup Iteration  28: 2000730.024 ops/s
# Warmup Iteration  29: 2181264.616 ops/s
# Warmup Iteration  30: 2038622.734 ops/s
Iteration   1: 2130024.106 ops/s
Iteration   2: 2115673.174 ops/s
Iteration   3: 2123423.839 ops/s
Iteration   4: 2051326.732 ops/s
Iteration   5: 2124246.501 ops/s
Iteration   6: 2055585.877 ops/s
Iteration   7: 2181488.119 ops/s
Iteration   8: 2150561.516 ops/s
Iteration   9: 2165023.829 ops/s
Iteration  10: 2019644.867 ops/s
Iteration  11: 2096560.691 ops/s
Iteration  12: 1999447.789 ops/s
Iteration  13: 2040273.120 ops/s
Iteration  14: 2175071.197 ops/s
Iteration  15: 2110294.282 ops/s
Iteration  16: 2036742.378 ops/s
Iteration  17: 2039881.225 ops/s
Iteration  18: 2157690.540 ops/s
Iteration  19: 2099653.236 ops/s
Iteration  20: 2058413.811 ops/s
Iteration  21: 2106598.540 ops/s
Iteration  22: 2088594.309 ops/s
Iteration  23: 2214380.870 ops/s
Iteration  24: 2134164.088 ops/s
Iteration  25: 2060722.581 ops/s
Iteration  26: 2141822.203 ops/s
Iteration  27: 2101550.396 ops/s
Iteration  28: 2068517.050 ops/s
Iteration  29: 2110474.731 ops/s
Iteration  30: 2104163.774 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_concatReportsDisposedOnComplete":
  2102067.179 ±(99.9%) 34498.294 ops/s [Average]
  (min, avg, max) = (1999447.789, 2102067.179, 2214380.870), stdev = 51635.426
  CI (99.9%): [2067568.885, 2136565.473] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_concatReportsDisposedOnComplete  thrpt   30  2102067.179 ± 34498.294  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_fusionWithConcatMap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_fusionWithConcatMap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 181282.714 ops/s
# Warmup Iteration   2: 676659.765 ops/s
# Warmup Iteration   3: 777645.186 ops/s
# Warmup Iteration   4: 1156624.236 ops/s
# Warmup Iteration   5: 1382878.029 ops/s
# Warmup Iteration   6: 1450914.857 ops/s
# Warmup Iteration   7: 1503764.454 ops/s
# Warmup Iteration   8: 1597773.470 ops/s
# Warmup Iteration   9: 1441595.417 ops/s
# Warmup Iteration  10: 1494931.731 ops/s
# Warmup Iteration  11: 1480720.344 ops/s
# Warmup Iteration  12: 1499526.018 ops/s
# Warmup Iteration  13: 1469382.367 ops/s
# Warmup Iteration  14: 1483245.076 ops/s
# Warmup Iteration  15: 1570414.661 ops/s
# Warmup Iteration  16: 1443258.317 ops/s
# Warmup Iteration  17: 1524560.764 ops/s
# Warmup Iteration  18: 1561407.667 ops/s
# Warmup Iteration  19: 1453456.482 ops/s
# Warmup Iteration  20: 1482713.356 ops/s
# Warmup Iteration  21: 1538237.027 ops/s
# Warmup Iteration  22: 1188012.821 ops/s
# Warmup Iteration  23: 1452551.850 ops/s
# Warmup Iteration  24: 1420666.176 ops/s
# Warmup Iteration  25: 1524116.494 ops/s
# Warmup Iteration  26: 1461319.096 ops/s
# Warmup Iteration  27: 1524929.779 ops/s
# Warmup Iteration  28: 1455368.340 ops/s
# Warmup Iteration  29: 1510560.240 ops/s
# Warmup Iteration  30: 1470074.680 ops/s
Iteration   1: 1472105.849 ops/s
Iteration   2: 1510392.856 ops/s
Iteration   3: 1428461.138 ops/s
Iteration   4: 1559098.253 ops/s
Iteration   5: 1479381.005 ops/s
Iteration   6: 1427539.304 ops/s
Iteration   7: 1548511.615 ops/s
Iteration   8: 1511764.649 ops/s
Iteration   9: 1450712.097 ops/s
Iteration  10: 1522008.023 ops/s
Iteration  11: 1455609.285 ops/s
Iteration  12: 1526463.437 ops/s
Iteration  13: 1537865.908 ops/s
Iteration  14: 1451228.202 ops/s
Iteration  15: 1512022.613 ops/s
Iteration  16: 1440738.661 ops/s
Iteration  17: 1478616.366 ops/s
Iteration  18: 1531550.466 ops/s
Iteration  19: 1568069.999 ops/s
Iteration  20: 1510787.104 ops/s
Iteration  21: 1443233.831 ops/s
Iteration  22: 1533111.295 ops/s
Iteration  23: 1453539.538 ops/s
Iteration  24: 1504337.184 ops/s
Iteration  25: 1468625.868 ops/s
Iteration  26: 1499964.072 ops/s
Iteration  27: 1537817.970 ops/s
Iteration  28: 1447817.244 ops/s
Iteration  29: 1523411.213 ops/s
Iteration  30: 1475075.108 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_fusionWithConcatMap":
  1493662.005 ±(99.9%) 27327.644 ops/s [Average]
  (min, avg, max) = (1427539.304, 1493662.005, 1568069.999), stdev = 40902.734
  CI (99.9%): [1466334.361, 1520989.649] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableFromIterableTest._Benchmark.benchmark_fusionWithConcatMap  thrpt   30  1493662.005 ± 27327.644  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatWithIterableOfObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatWithIterableOfObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71441.142 ops/s
# Warmup Iteration   2: 456579.172 ops/s
# Warmup Iteration   3: 1015235.520 ops/s
# Warmup Iteration   4: 1567685.355 ops/s
# Warmup Iteration   5: 1759366.192 ops/s
# Warmup Iteration   6: 1914458.120 ops/s
# Warmup Iteration   7: 1930453.242 ops/s
# Warmup Iteration   8: 2014596.050 ops/s
# Warmup Iteration   9: 2051996.989 ops/s
# Warmup Iteration  10: 1949248.124 ops/s
# Warmup Iteration  11: 2054596.059 ops/s
# Warmup Iteration  12: 1981673.780 ops/s
# Warmup Iteration  13: 2038567.784 ops/s
# Warmup Iteration  14: 2040288.164 ops/s
# Warmup Iteration  15: 2001485.284 ops/s
# Warmup Iteration  16: 2040028.205 ops/s
# Warmup Iteration  17: 1974370.904 ops/s
# Warmup Iteration  18: 2086990.448 ops/s
# Warmup Iteration  19: 1958491.744 ops/s
# Warmup Iteration  20: 1962554.100 ops/s
# Warmup Iteration  21: 2063294.259 ops/s
# Warmup Iteration  22: 1994575.045 ops/s
# Warmup Iteration  23: 2060072.203 ops/s
# Warmup Iteration  24: 2022471.973 ops/s
# Warmup Iteration  25: 2022477.296 ops/s
# Warmup Iteration  26: 2049156.140 ops/s
# Warmup Iteration  27: 2004757.261 ops/s
# Warmup Iteration  28: 1979137.655 ops/s
# Warmup Iteration  29: 2022741.955 ops/s
# Warmup Iteration  30: 2039095.537 ops/s
Iteration   1: 2041642.504 ops/s
Iteration   2: 2010511.137 ops/s
Iteration   3: 2069442.097 ops/s
Iteration   4: 2015610.880 ops/s
Iteration   5: 2039138.561 ops/s
Iteration   6: 2101834.457 ops/s
Iteration   7: 1969254.775 ops/s
Iteration   8: 2048579.604 ops/s
Iteration   9: 2028264.737 ops/s
Iteration  10: 2033825.388 ops/s
Iteration  11: 2106425.562 ops/s
Iteration  12: 1989657.610 ops/s
Iteration  13: 2086048.972 ops/s
Iteration  14: 2021302.474 ops/s
Iteration  15: 1943081.426 ops/s
Iteration  16: 2079238.607 ops/s
Iteration  17: 1967294.093 ops/s
Iteration  18: 2007790.563 ops/s
Iteration  19: 2016676.917 ops/s
Iteration  20: 2054165.149 ops/s
Iteration  21: 2049513.550 ops/s
Iteration  22: 2024752.799 ops/s
Iteration  23: 2000209.214 ops/s
Iteration  24: 2052778.588 ops/s
Iteration  25: 2074132.866 ops/s
Iteration  26: 1972146.404 ops/s
Iteration  27: 2098782.549 ops/s
Iteration  28: 2076698.314 ops/s
Iteration  29: 1924156.646 ops/s
Iteration  30: 2097837.969 ops/s


Result "io.reactivex.rxjava3.observable.ObservableConcatTests._Benchmark.benchmark_concatWithIterableOfObservable":
  2033359.814 ±(99.9%) 32092.809 ops/s [Average]
  (min, avg, max) = (1924156.646, 2033359.814, 2106425.562), stdev = 48035.009
  CI (99.9%): [2001267.005, 2065452.622] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableConcatTests._Benchmark.benchmark_concatWithIterableOfObservable  thrpt   30  2033359.814 ± 32092.809  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_noCancelPrevious$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_noCancelPrevious

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150370.157 ops/s
# Warmup Iteration   2: 542155.332 ops/s
# Warmup Iteration   3: 934885.155 ops/s
# Warmup Iteration   4: 1204501.732 ops/s
# Warmup Iteration   5: 1298845.848 ops/s
# Warmup Iteration   6: 1294248.476 ops/s
# Warmup Iteration   7: 1282322.301 ops/s
# Warmup Iteration   8: 1266365.499 ops/s
# Warmup Iteration   9: 1293221.963 ops/s
# Warmup Iteration  10: 1292288.866 ops/s
# Warmup Iteration  11: 1263317.874 ops/s
# Warmup Iteration  12: 1313485.661 ops/s
# Warmup Iteration  13: 1227408.772 ops/s
# Warmup Iteration  14: 1340097.178 ops/s
# Warmup Iteration  15: 1337145.393 ops/s
# Warmup Iteration  16: 1061755.744 ops/s
# Warmup Iteration  17: 1326180.388 ops/s
# Warmup Iteration  18: 1279545.595 ops/s
# Warmup Iteration  19: 1339034.716 ops/s
# Warmup Iteration  20: 1245853.018 ops/s
# Warmup Iteration  21: 1344538.496 ops/s
# Warmup Iteration  22: 1305430.076 ops/s
# Warmup Iteration  23: 1289025.900 ops/s
# Warmup Iteration  24: 1286000.773 ops/s
# Warmup Iteration  25: 1353288.589 ops/s
# Warmup Iteration  26: 1282055.737 ops/s
# Warmup Iteration  27: 1280438.386 ops/s
# Warmup Iteration  28: 1334857.236 ops/s
# Warmup Iteration  29: 1287680.450 ops/s
# Warmup Iteration  30: 1295822.997 ops/s
Iteration   1: 1341912.397 ops/s
Iteration   2: 1270489.283 ops/s
Iteration   3: 1313864.797 ops/s
Iteration   4: 1264278.664 ops/s
Iteration   5: 1248278.495 ops/s
Iteration   6: 1351514.347 ops/s
Iteration   7: 1296005.043 ops/s
Iteration   8: 1248484.602 ops/s
Iteration   9: 1334581.278 ops/s
Iteration  10: 1306716.496 ops/s
Iteration  11: 1372929.857 ops/s
Iteration  12: 1364017.290 ops/s
Iteration  13: 1288694.607 ops/s
Iteration  14: 1302434.036 ops/s
Iteration  15: 1347832.742 ops/s
Iteration  16: 1323391.392 ops/s
Iteration  17: 1330952.467 ops/s
Iteration  18: 1332346.033 ops/s
Iteration  19: 1321426.939 ops/s
Iteration  20: 1373541.792 ops/s
Iteration  21: 1362409.256 ops/s
Iteration  22: 1293001.580 ops/s
Iteration  23: 1335285.103 ops/s
Iteration  24: 1300772.245 ops/s
Iteration  25: 1293915.582 ops/s
Iteration  26: 1297124.332 ops/s
Iteration  27: 1296415.966 ops/s
Iteration  28: 1350756.328 ops/s
Iteration  29: 1358242.180 ops/s
Iteration  30: 1299015.040 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_noCancelPrevious":
  1317354.339 ±(99.9%) 23466.041 ops/s [Average]
  (min, avg, max) = (1248278.495, 1317354.339, 1373541.792), stdev = 35122.869
  CI (99.9%): [1293888.298, 1340820.380] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_noCancelPrevious  thrpt   30  1317354.339 ± 23466.041  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_concatReportsDisposedOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_concatReportsDisposedOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 163060.377 ops/s
# Warmup Iteration   2: 459240.604 ops/s
# Warmup Iteration   3: 547263.153 ops/s
# Warmup Iteration   4: 580216.122 ops/s
# Warmup Iteration   5: 578010.623 ops/s
# Warmup Iteration   6: 574299.860 ops/s
# Warmup Iteration   7: 594289.748 ops/s
# Warmup Iteration   8: 553816.774 ops/s
# Warmup Iteration   9: 567376.712 ops/s
# Warmup Iteration  10: 596637.241 ops/s
# Warmup Iteration  11: 552234.238 ops/s
# Warmup Iteration  12: 599605.741 ops/s
# Warmup Iteration  13: 565705.307 ops/s
# Warmup Iteration  14: 575292.336 ops/s
# Warmup Iteration  15: 599709.112 ops/s
# Warmup Iteration  16: 563952.207 ops/s
# Warmup Iteration  17: 605776.696 ops/s
# Warmup Iteration  18: 607430.329 ops/s
# Warmup Iteration  19: 595300.055 ops/s
# Warmup Iteration  20: 594635.268 ops/s
# Warmup Iteration  21: 622062.935 ops/s
# Warmup Iteration  22: 596347.491 ops/s
# Warmup Iteration  23: 597334.049 ops/s
# Warmup Iteration  24: 604449.143 ops/s
# Warmup Iteration  25: 611268.338 ops/s
# Warmup Iteration  26: 583458.682 ops/s
# Warmup Iteration  27: 597751.951 ops/s
# Warmup Iteration  28: 613855.096 ops/s
# Warmup Iteration  29: 583380.278 ops/s
# Warmup Iteration  30: 623280.066 ops/s
Iteration   1: 579810.157 ops/s
Iteration   2: 589443.000 ops/s
Iteration   3: 614383.923 ops/s
Iteration   4: 585707.499 ops/s
Iteration   5: 599903.311 ops/s
Iteration   6: 605458.055 ops/s
Iteration   7: 605535.523 ops/s
Iteration   8: 607903.590 ops/s
Iteration   9: 606295.360 ops/s
Iteration  10: 624790.494 ops/s
Iteration  11: 604598.595 ops/s
Iteration  12: 616563.793 ops/s
Iteration  13: 613119.134 ops/s
Iteration  14: 600720.589 ops/s
Iteration  15: 601601.948 ops/s
Iteration  16: 631084.285 ops/s
Iteration  17: 586009.291 ops/s
Iteration  18: 626894.466 ops/s
Iteration  19: 597921.412 ops/s
Iteration  20: 628861.204 ops/s
Iteration  21: 598399.465 ops/s
Iteration  22: 601181.836 ops/s
Iteration  23: 631102.200 ops/s
Iteration  24: 593135.425 ops/s
Iteration  25: 633048.923 ops/s
Iteration  26: 628366.871 ops/s
Iteration  27: 593725.222 ops/s
Iteration  28: 626007.658 ops/s
Iteration  29: 602406.295 ops/s
Iteration  30: 598281.924 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_concatReportsDisposedOnError":
  607742.048 ±(99.9%) 10187.210 ops/s [Average]
  (min, avg, max) = (579810.157, 607742.048, 633048.923), stdev = 15247.738
  CI (99.9%): [597554.838, 617929.258] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_concatReportsDisposedOnError  thrpt   30  607742.048 ± 10187.210  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_rejectedFusion$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_rejectedFusion

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1052609.101 ops/s
# Warmup Iteration   2: 3060002.534 ops/s
# Warmup Iteration   3: 4742924.425 ops/s
# Warmup Iteration   4: 4396363.979 ops/s
# Warmup Iteration   5: 4545693.250 ops/s
# Warmup Iteration   6: 4647707.953 ops/s
# Warmup Iteration   7: 4653082.805 ops/s
# Warmup Iteration   8: 4633705.436 ops/s
# Warmup Iteration   9: 4416229.040 ops/s
# Warmup Iteration  10: 4395218.418 ops/s
# Warmup Iteration  11: 3956880.942 ops/s
# Warmup Iteration  12: 4780954.707 ops/s
# Warmup Iteration  13: 4434636.140 ops/s
# Warmup Iteration  14: 4734030.900 ops/s
# Warmup Iteration  15: 4416544.640 ops/s
# Warmup Iteration  16: 4625368.075 ops/s
# Warmup Iteration  17: 4632823.976 ops/s
# Warmup Iteration  18: 4481875.364 ops/s
# Warmup Iteration  19: 4711847.670 ops/s
# Warmup Iteration  20: 4488923.283 ops/s
# Warmup Iteration  21: 4545849.300 ops/s
# Warmup Iteration  22: 4581534.998 ops/s
# Warmup Iteration  23: 4578681.768 ops/s
# Warmup Iteration  24: 4471601.069 ops/s
# Warmup Iteration  25: 4631365.681 ops/s
# Warmup Iteration  26: 4643624.942 ops/s
# Warmup Iteration  27: 4554333.842 ops/s
# Warmup Iteration  28: 4792159.831 ops/s
# Warmup Iteration  29: 4474301.550 ops/s
# Warmup Iteration  30: 4550140.865 ops/s
Iteration   1: 4528334.832 ops/s
Iteration   2: 4654449.113 ops/s
Iteration   3: 4704209.223 ops/s
Iteration   4: 4507766.496 ops/s
Iteration   5: 4609347.608 ops/s
Iteration   6: 4762246.178 ops/s
Iteration   7: 4804829.015 ops/s
Iteration   8: 4443331.587 ops/s
Iteration   9: 4494138.339 ops/s
Iteration  10: 4544394.242 ops/s
Iteration  11: 4478730.679 ops/s
Iteration  12: 4735248.636 ops/s
Iteration  13: 4519779.757 ops/s
Iteration  14: 4678851.646 ops/s
Iteration  15: 4554696.765 ops/s
Iteration  16: 4600734.051 ops/s
Iteration  17: 4693933.042 ops/s
Iteration  18: 4469540.750 ops/s
Iteration  19: 4446681.107 ops/s
Iteration  20: 4628789.101 ops/s
Iteration  21: 4560747.964 ops/s
Iteration  22: 4716313.467 ops/s
Iteration  23: 4473712.010 ops/s
Iteration  24: 4613310.753 ops/s
Iteration  25: 4536571.975 ops/s
Iteration  26: 4600714.898 ops/s
Iteration  27: 4663364.923 ops/s
Iteration  28: 4519868.235 ops/s
Iteration  29: 4808932.538 ops/s
Iteration  30: 4498842.050 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_rejectedFusion":
  4595080.366 ±(99.9%) 71418.459 ops/s [Average]
  (min, avg, max) = (4443331.587, 4595080.366, 4808932.538), stdev = 106895.795
  CI (99.9%): [4523661.907, 4666498.825] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_rejectedFusion  thrpt   30  4595080.366 ± 71418.459  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 577989.688 ops/s
# Warmup Iteration   2: 2224758.509 ops/s
# Warmup Iteration   3: 3108077.889 ops/s
# Warmup Iteration   4: 2891777.594 ops/s
# Warmup Iteration   5: 3012425.311 ops/s
# Warmup Iteration   6: 3072890.121 ops/s
# Warmup Iteration   7: 3130045.425 ops/s
# Warmup Iteration   8: 3222618.046 ops/s
# Warmup Iteration   9: 3134951.697 ops/s
# Warmup Iteration  10: 3269035.116 ops/s
# Warmup Iteration  11: 3185961.940 ops/s
# Warmup Iteration  12: 3080989.339 ops/s
# Warmup Iteration  13: 3240579.872 ops/s
# Warmup Iteration  14: 3064737.949 ops/s
# Warmup Iteration  15: 3251601.909 ops/s
# Warmup Iteration  16: 3127171.570 ops/s
# Warmup Iteration  17: 3245983.058 ops/s
# Warmup Iteration  18: 3107220.634 ops/s
# Warmup Iteration  19: 3110818.406 ops/s
# Warmup Iteration  20: 3226512.586 ops/s
# Warmup Iteration  21: 3129816.801 ops/s
# Warmup Iteration  22: 3142254.075 ops/s
# Warmup Iteration  23: 3110866.315 ops/s
# Warmup Iteration  24: 3138744.602 ops/s
# Warmup Iteration  25: 3252812.002 ops/s
# Warmup Iteration  26: 3035571.324 ops/s
# Warmup Iteration  27: 3138176.071 ops/s
# Warmup Iteration  28: 3263599.495 ops/s
# Warmup Iteration  29: 3102285.500 ops/s
# Warmup Iteration  30: 3218568.971 ops/s
Iteration   1: 3192051.499 ops/s
Iteration   2: 3172215.476 ops/s
Iteration   3: 3262979.857 ops/s
Iteration   4: 3273127.102 ops/s
Iteration   5: 3132798.916 ops/s
Iteration   6: 3225572.053 ops/s
Iteration   7: 3161527.149 ops/s
Iteration   8: 3265376.271 ops/s
Iteration   9: 3197288.215 ops/s
Iteration  10: 3155824.936 ops/s
Iteration  11: 3246102.019 ops/s
Iteration  12: 3089315.189 ops/s
Iteration  13: 3204684.322 ops/s
Iteration  14: 3261143.382 ops/s
Iteration  15: 3213575.293 ops/s
Iteration  16: 3154482.724 ops/s
Iteration  17: 3097329.093 ops/s
Iteration  18: 3228147.416 ops/s
Iteration  19: 3100854.822 ops/s
Iteration  20: 3091309.525 ops/s
Iteration  21: 3367376.047 ops/s
Iteration  22: 3284369.634 ops/s
Iteration  23: 3066722.791 ops/s
Iteration  24: 3236473.331 ops/s
Iteration  25: 3047790.745 ops/s
Iteration  26: 3251354.168 ops/s
Iteration  27: 3157639.890 ops/s
Iteration  28: 3277642.152 ops/s
Iteration  29: 3226715.525 ops/s
Iteration  30: 3045099.418 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_dispose":
  3189562.965 ±(99.9%) 53462.828 ops/s [Average]
  (min, avg, max) = (3045099.418, 3189562.965, 3367376.047), stdev = 80020.650
  CI (99.9%): [3136100.137, 3243025.793] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_dispose  thrpt   30  3189562.965 ± 53462.828  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_reentrantNoOverflowHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_reentrantNoOverflowHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75505.416 ops/s
# Warmup Iteration   2: 267262.665 ops/s
# Warmup Iteration   3: 393327.913 ops/s
# Warmup Iteration   4: 511853.288 ops/s
# Warmup Iteration   5: 396187.013 ops/s
# Warmup Iteration   6: 527547.398 ops/s
# Warmup Iteration   7: 491091.991 ops/s
# Warmup Iteration   8: 557611.781 ops/s
# Warmup Iteration   9: 582291.471 ops/s
# Warmup Iteration  10: 566271.100 ops/s
# Warmup Iteration  11: 548371.117 ops/s
# Warmup Iteration  12: 567706.058 ops/s
# Warmup Iteration  13: 573468.249 ops/s
# Warmup Iteration  14: 577095.852 ops/s
# Warmup Iteration  15: 545305.180 ops/s
# Warmup Iteration  16: 573973.279 ops/s
# Warmup Iteration  17: 556709.567 ops/s
# Warmup Iteration  18: 563474.116 ops/s
# Warmup Iteration  19: 572643.985 ops/s
# Warmup Iteration  20: 548446.345 ops/s
# Warmup Iteration  21: 575756.950 ops/s
# Warmup Iteration  22: 547158.729 ops/s
# Warmup Iteration  23: 559473.005 ops/s
# Warmup Iteration  24: 549416.626 ops/s
# Warmup Iteration  25: 559248.364 ops/s
# Warmup Iteration  26: 553252.504 ops/s
# Warmup Iteration  27: 571419.789 ops/s
# Warmup Iteration  28: 583318.977 ops/s
# Warmup Iteration  29: 539306.418 ops/s
# Warmup Iteration  30: 586369.586 ops/s
Iteration   1: 549894.930 ops/s
Iteration   2: 557678.222 ops/s
Iteration   3: 562954.526 ops/s
Iteration   4: 568835.378 ops/s
Iteration   5: 564650.877 ops/s
Iteration   6: 549637.275 ops/s
Iteration   7: 561686.250 ops/s
Iteration   8: 539753.743 ops/s
Iteration   9: 550145.856 ops/s
Iteration  10: 557595.345 ops/s
Iteration  11: 568514.968 ops/s
Iteration  12: 555634.947 ops/s
Iteration  13: 556853.102 ops/s
Iteration  14: 571965.765 ops/s
Iteration  15: 553363.936 ops/s
Iteration  16: 552050.666 ops/s
Iteration  17: 581976.164 ops/s
Iteration  18: 541096.717 ops/s
Iteration  19: 569821.345 ops/s
Iteration  20: 562433.029 ops/s
Iteration  21: 564203.590 ops/s
Iteration  22: 565319.564 ops/s
Iteration  23: 561155.087 ops/s
Iteration  24: 595246.069 ops/s
Iteration  25: 545980.668 ops/s
Iteration  26: 567998.851 ops/s
Iteration  27: 567665.728 ops/s
Iteration  28: 557908.327 ops/s
Iteration  29: 563961.268 ops/s
Iteration  30: 566888.214 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_reentrantNoOverflowHidden":
  561095.680 ±(99.9%) 7621.559 ops/s [Average]
  (min, avg, max) = (539753.743, 561095.680, 595246.069), stdev = 11407.592
  CI (99.9%): [553474.121, 568717.239] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableConcatMapTest._Benchmark.benchmark_reentrantNoOverflowHidden  thrpt   30  561095.680 ± 7621.559  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3353719.804 ops/s
# Warmup Iteration   2: 7118479.280 ops/s
# Warmup Iteration   3: 9393905.721 ops/s
# Warmup Iteration   4: 9273047.827 ops/s
# Warmup Iteration   5: 10052712.947 ops/s
# Warmup Iteration   6: 9450354.621 ops/s
# Warmup Iteration   7: 9751001.637 ops/s
# Warmup Iteration   8: 9500224.452 ops/s
# Warmup Iteration   9: 9791489.110 ops/s
# Warmup Iteration  10: 9190436.699 ops/s
# Warmup Iteration  11: 9648118.389 ops/s
# Warmup Iteration  12: 9913702.975 ops/s
# Warmup Iteration  13: 9530542.370 ops/s
# Warmup Iteration  14: 9671048.179 ops/s
# Warmup Iteration  15: 9372973.765 ops/s
# Warmup Iteration  16: 9525492.858 ops/s
# Warmup Iteration  17: 9606182.241 ops/s
# Warmup Iteration  18: 9741173.036 ops/s
# Warmup Iteration  19: 9770828.041 ops/s
# Warmup Iteration  20: 9670281.723 ops/s
# Warmup Iteration  21: 9448256.686 ops/s
# Warmup Iteration  22: 9700658.997 ops/s
# Warmup Iteration  23: 9432898.293 ops/s
# Warmup Iteration  24: 9721899.664 ops/s
# Warmup Iteration  25: 9310686.437 ops/s
# Warmup Iteration  26: 9601884.898 ops/s
# Warmup Iteration  27: 9935481.156 ops/s
# Warmup Iteration  28: 9449873.719 ops/s
# Warmup Iteration  29: 9947732.420 ops/s
# Warmup Iteration  30: 9354882.123 ops/s
Iteration   1: 9656602.551 ops/s
Iteration   2: 9728838.764 ops/s
Iteration   3: 9346336.088 ops/s
Iteration   4: 9839723.085 ops/s
Iteration   5: 9623823.235 ops/s
Iteration   6: 9472454.873 ops/s
Iteration   7: 9866310.884 ops/s
Iteration   8: 9922055.471 ops/s
Iteration   9: 9517652.247 ops/s
Iteration  10: 9695010.859 ops/s
Iteration  11: 9613917.477 ops/s
Iteration  12: 9670071.705 ops/s
Iteration  13: 9919780.973 ops/s
Iteration  14: 9386824.817 ops/s
Iteration  15: 9747132.234 ops/s
Iteration  16: 9795309.867 ops/s
Iteration  17: 9533175.028 ops/s
Iteration  18: 9549034.326 ops/s
Iteration  19: 10086912.716 ops/s
Iteration  20: 9666748.790 ops/s
Iteration  21: 9403429.588 ops/s
Iteration  22: 9844739.909 ops/s
Iteration  23: 9408395.212 ops/s
Iteration  24: 9632877.396 ops/s
Iteration  25: 9427866.994 ops/s
Iteration  26: 9910887.218 ops/s
Iteration  27: 9552103.938 ops/s
Iteration  28: 9687430.093 ops/s
Iteration  29: 9782397.550 ops/s
Iteration  30: 9582130.883 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_dispose":
  9662332.492 ±(99.9%) 124045.701 ops/s [Average]
  (min, avg, max) = (9346336.088, 9662332.492, 10086912.716), stdev = 185665.779
  CI (99.9%): [9538286.792, 9786378.193] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
ObservableTakeLastOneTest._Benchmark.benchmark_dispose  thrpt   30  9662332.492 ± 124045.701  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_asyncFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_asyncFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118623.281 ops/s
# Warmup Iteration   2: 375408.285 ops/s
# Warmup Iteration   3: 995862.843 ops/s
# Warmup Iteration   4: 1378990.320 ops/s
# Warmup Iteration   5: 1599911.765 ops/s
# Warmup Iteration   6: 1527489.773 ops/s
# Warmup Iteration   7: 1507676.387 ops/s
# Warmup Iteration   8: 1566502.565 ops/s
# Warmup Iteration   9: 1513813.194 ops/s
# Warmup Iteration  10: 1549991.005 ops/s
# Warmup Iteration  11: 1449632.288 ops/s
# Warmup Iteration  12: 1524451.715 ops/s
# Warmup Iteration  13: 1573366.877 ops/s
# Warmup Iteration  14: 1468643.796 ops/s
# Warmup Iteration  15: 1527212.236 ops/s
# Warmup Iteration  16: 1490048.589 ops/s
# Warmup Iteration  17: 1469060.001 ops/s
# Warmup Iteration  18: 1538520.341 ops/s
# Warmup Iteration  19: 1479321.003 ops/s
# Warmup Iteration  20: 1556779.986 ops/s
# Warmup Iteration  21: 1502788.631 ops/s
# Warmup Iteration  22: 1532141.702 ops/s
# Warmup Iteration  23: 1538529.194 ops/s
# Warmup Iteration  24: 1542143.876 ops/s
# Warmup Iteration  25: 1515255.144 ops/s
# Warmup Iteration  26: 1559090.974 ops/s
# Warmup Iteration  27: 1529342.096 ops/s
# Warmup Iteration  28: 1532427.600 ops/s
# Warmup Iteration  29: 1528049.179 ops/s
# Warmup Iteration  30: 1490163.146 ops/s
Iteration   1: 1512201.005 ops/s
Iteration   2: 1574700.646 ops/s
Iteration   3: 1462875.713 ops/s
Iteration   4: 1509327.481 ops/s
Iteration   5: 1528182.728 ops/s
Iteration   6: 1451885.539 ops/s
Iteration   7: 1543761.703 ops/s
Iteration   8: 1500532.565 ops/s
Iteration   9: 1539042.438 ops/s
Iteration  10: 1524617.831 ops/s
Iteration  11: 1522082.131 ops/s
Iteration  12: 1537201.987 ops/s
Iteration  13: 1508395.863 ops/s
Iteration  14: 1562454.881 ops/s
Iteration  15: 1507101.775 ops/s
Iteration  16: 1453119.484 ops/s
Iteration  17: 1522517.403 ops/s
Iteration  18: 1551163.090 ops/s
Iteration  19: 1502758.805 ops/s
Iteration  20: 1582598.494 ops/s
Iteration  21: 1509756.587 ops/s
Iteration  22: 1574577.725 ops/s
Iteration  23: 1503604.146 ops/s
Iteration  24: 1565309.238 ops/s
Iteration  25: 1540394.717 ops/s
Iteration  26: 1506354.091 ops/s
Iteration  27: 1545375.581 ops/s
Iteration  28: 1509807.735 ops/s
Iteration  29: 1562997.853 ops/s
Iteration  30: 1544219.057 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapTest._Benchmark.benchmark_asyncFused":
  1525297.276 ±(99.9%) 22497.635 ops/s [Average]
  (min, avg, max) = (1451885.539, 1525297.276, 1582598.494), stdev = 33673.404
  CI (99.9%): [1502799.641, 1547794.911] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableConcatMapTest._Benchmark.benchmark_asyncFused  thrpt   30  1525297.276 ± 22497.635  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2302664.341 ops/s
# Warmup Iteration   2: 6536636.833 ops/s
# Warmup Iteration   3: 9262942.751 ops/s
# Warmup Iteration   4: 8800148.071 ops/s
# Warmup Iteration   5: 9035454.535 ops/s
# Warmup Iteration   6: 8868885.971 ops/s
# Warmup Iteration   7: 9163769.555 ops/s
# Warmup Iteration   8: 8953638.777 ops/s
# Warmup Iteration   9: 8803744.985 ops/s
# Warmup Iteration  10: 9176574.295 ops/s
# Warmup Iteration  11: 8756585.569 ops/s
# Warmup Iteration  12: 9165908.725 ops/s
# Warmup Iteration  13: 9298684.423 ops/s
# Warmup Iteration  14: 8799438.009 ops/s
# Warmup Iteration  15: 9196783.405 ops/s
# Warmup Iteration  16: 8835078.748 ops/s
# Warmup Iteration  17: 9073406.703 ops/s
# Warmup Iteration  18: 9015492.853 ops/s
# Warmup Iteration  19: 8769612.628 ops/s
# Warmup Iteration  20: 8947185.958 ops/s
# Warmup Iteration  21: 9221880.225 ops/s
# Warmup Iteration  22: 8951448.831 ops/s
# Warmup Iteration  23: 9180488.121 ops/s
# Warmup Iteration  24: 8646399.282 ops/s
# Warmup Iteration  25: 8851364.878 ops/s
# Warmup Iteration  26: 9094015.016 ops/s
# Warmup Iteration  27: 8769810.138 ops/s
# Warmup Iteration  28: 9027282.988 ops/s
# Warmup Iteration  29: 8837688.847 ops/s
# Warmup Iteration  30: 9029855.839 ops/s
Iteration   1: 9067750.162 ops/s
Iteration   2: 8863201.950 ops/s
Iteration   3: 9306474.979 ops/s
Iteration   4: 8999653.044 ops/s
Iteration   5: 8757123.802 ops/s
Iteration   6: 9437673.961 ops/s
Iteration   7: 9187762.184 ops/s
Iteration   8: 8863189.544 ops/s
Iteration   9: 9006648.313 ops/s
Iteration  10: 8909561.736 ops/s
Iteration  11: 9025108.000 ops/s
Iteration  12: 9390861.255 ops/s
Iteration  13: 8705683.361 ops/s
Iteration  14: 9357851.022 ops/s
Iteration  15: 9021878.163 ops/s
Iteration  16: 8770724.892 ops/s
Iteration  17: 9255540.648 ops/s
Iteration  18: 9439116.245 ops/s
Iteration  19: 8539665.587 ops/s
Iteration  20: 9176154.247 ops/s
Iteration  21: 8768417.480 ops/s
Iteration  22: 9433853.407 ops/s
Iteration  23: 8907771.478 ops/s
Iteration  24: 9174950.286 ops/s
Iteration  25: 8977083.958 ops/s
Iteration  26: 9000596.723 ops/s
Iteration  27: 7165097.952 ops/s
Iteration  28: 8915031.782 ops/s
Iteration  29: 9127660.761 ops/s
Iteration  30: 8764505.368 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTest._Benchmark.benchmark_dispose":
  8977219.743 ±(99.9%) 279186.795 ops/s [Average]
  (min, avg, max) = (7165097.952, 8977219.743, 9439116.245), stdev = 417873.683
  CI (99.9%): [8698032.948, 9256406.538] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
ObservableSkipLastTest._Benchmark.benchmark_dispose  thrpt   30  8977219.743 ± 279186.795  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2653846.675 ops/s
# Warmup Iteration   2: 6786680.067 ops/s
# Warmup Iteration   3: 9144950.628 ops/s
# Warmup Iteration   4: 9411613.978 ops/s
# Warmup Iteration   5: 9830732.229 ops/s
# Warmup Iteration   6: 9267750.825 ops/s
# Warmup Iteration   7: 9544460.281 ops/s
# Warmup Iteration   8: 9742046.546 ops/s
# Warmup Iteration   9: 9367674.575 ops/s
# Warmup Iteration  10: 9814832.389 ops/s
# Warmup Iteration  11: 9416837.401 ops/s
# Warmup Iteration  12: 9308974.717 ops/s
# Warmup Iteration  13: 9623623.802 ops/s
# Warmup Iteration  14: 9255024.170 ops/s
# Warmup Iteration  15: 10012776.345 ops/s
# Warmup Iteration  16: 9532876.836 ops/s
# Warmup Iteration  17: 9347483.285 ops/s
# Warmup Iteration  18: 9771265.600 ops/s
# Warmup Iteration  19: 9565018.577 ops/s
# Warmup Iteration  20: 9264719.245 ops/s
# Warmup Iteration  21: 9766095.088 ops/s
# Warmup Iteration  22: 9320771.240 ops/s
# Warmup Iteration  23: 9686700.359 ops/s
# Warmup Iteration  24: 9606546.533 ops/s
# Warmup Iteration  25: 9339073.404 ops/s
# Warmup Iteration  26: 9769472.444 ops/s
# Warmup Iteration  27: 9739062.450 ops/s
# Warmup Iteration  28: 9405562.554 ops/s
# Warmup Iteration  29: 9064034.896 ops/s
# Warmup Iteration  30: 9551276.610 ops/s
Iteration   1: 9763003.940 ops/s
Iteration   2: 9492004.951 ops/s
Iteration   3: 9355702.974 ops/s
Iteration   4: 9315925.112 ops/s
Iteration   5: 9931126.085 ops/s
Iteration   6: 9326692.396 ops/s
Iteration   7: 9426391.586 ops/s
Iteration   8: 9269327.531 ops/s
Iteration   9: 9390348.059 ops/s
Iteration  10: 9705212.241 ops/s
Iteration  11: 9343541.555 ops/s
Iteration  12: 9310918.446 ops/s
Iteration  13: 9449057.225 ops/s
Iteration  14: 9834926.029 ops/s
Iteration  15: 9588115.104 ops/s
Iteration  16: 9199625.275 ops/s
Iteration  17: 9605564.733 ops/s
Iteration  18: 9474146.733 ops/s
Iteration  19: 9174273.688 ops/s
Iteration  20: 9680304.186 ops/s
Iteration  21: 9676126.240 ops/s
Iteration  22: 9055402.371 ops/s
Iteration  23: 9547979.521 ops/s
Iteration  24: 9252073.825 ops/s
Iteration  25: 9753280.074 ops/s
Iteration  26: 9487136.752 ops/s
Iteration  27: 9506312.040 ops/s
Iteration  28: 9588607.165 ops/s
Iteration  29: 9735294.300 ops/s
Iteration  30: 9156075.570 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_dispose":
  9479816.524 ±(99.9%) 146906.798 ops/s [Average]
  (min, avg, max) = (9055402.371, 9479816.524, 9931126.085), stdev = 219883.196
  CI (99.9%): [9332909.725, 9626723.322] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
ObservableSkipTest._Benchmark.benchmark_dispose  thrpt   30  9479816.524 ± 146906.798  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_debounceWithEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_debounceWithEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.825 ops/s
# Warmup Iteration   2: 56507.296 ops/s
# Warmup Iteration   3: 150883.321 ops/s
# Warmup Iteration   4: 222813.521 ops/s
# Warmup Iteration   5: 271304.836 ops/s
# Warmup Iteration   6: 315223.904 ops/s
# Warmup Iteration   7: 632456.038 ops/s
# Warmup Iteration   8: 775233.731 ops/s
# Warmup Iteration   9: 796817.260 ops/s
# Warmup Iteration  10: 783494.153 ops/s
# Warmup Iteration  11: 804919.372 ops/s
# Warmup Iteration  12: 808661.841 ops/s
# Warmup Iteration  13: 793040.299 ops/s
# Warmup Iteration  14: 764561.073 ops/s
# Warmup Iteration  15: 832361.167 ops/s
# Warmup Iteration  16: 815460.067 ops/s
# Warmup Iteration  17: 788769.780 ops/s
# Warmup Iteration  18: 826724.175 ops/s
# Warmup Iteration  19: 765133.236 ops/s
# Warmup Iteration  20: 823918.865 ops/s
# Warmup Iteration  21: 779302.880 ops/s
# Warmup Iteration  22: 790249.677 ops/s
# Warmup Iteration  23: 805489.625 ops/s
# Warmup Iteration  24: 793826.332 ops/s
# Warmup Iteration  25: 796965.330 ops/s
# Warmup Iteration  26: 826789.565 ops/s
# Warmup Iteration  27: 765275.847 ops/s
# Warmup Iteration  28: 808225.001 ops/s
# Warmup Iteration  29: 760274.164 ops/s
# Warmup Iteration  30: 808521.571 ops/s
Iteration   1: 809659.997 ops/s
Iteration   2: 774620.337 ops/s
Iteration   3: 828600.284 ops/s
Iteration   4: 776922.633 ops/s
Iteration   5: 815845.854 ops/s
Iteration   6: 779774.952 ops/s
Iteration   7: 801135.792 ops/s
Iteration   8: 837804.748 ops/s
Iteration   9: 761011.123 ops/s
Iteration  10: 813739.153 ops/s
Iteration  11: 790702.694 ops/s
Iteration  12: 799570.325 ops/s
Iteration  13: 786612.453 ops/s
Iteration  14: 770048.282 ops/s
Iteration  15: 816533.972 ops/s
Iteration  16: 789732.924 ops/s
Iteration  17: 802637.078 ops/s
Iteration  18: 825681.687 ops/s
Iteration  19: 775954.955 ops/s
Iteration  20: 817255.838 ops/s
Iteration  21: 686896.231 ops/s
Iteration  22: 776282.565 ops/s
Iteration  23: 791777.131 ops/s
Iteration  24: 774023.494 ops/s
Iteration  25: 795159.050 ops/s
Iteration  26: 802524.382 ops/s
Iteration  27: 788927.165 ops/s
Iteration  28: 801192.442 ops/s
Iteration  29: 787529.883 ops/s
Iteration  30: 789764.421 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_debounceWithEmpty":
  792264.061 ±(99.9%) 18270.854 ops/s [Average]
  (min, avg, max) = (686896.231, 792264.061, 837804.748), stdev = 27346.957
  CI (99.9%): [773993.207, 810534.916] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableDebounceTest._Benchmark.benchmark_debounceWithEmpty  thrpt   30  792264.061 ± 18270.854  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustRange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustRange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 432359.537 ops/s
# Warmup Iteration   2: 1282063.789 ops/s
# Warmup Iteration   3: 1308506.329 ops/s
# Warmup Iteration   4: 2230253.025 ops/s
# Warmup Iteration   5: 3020133.503 ops/s
# Warmup Iteration   6: 2864582.575 ops/s
# Warmup Iteration   7: 2938320.233 ops/s
# Warmup Iteration   8: 3012481.405 ops/s
# Warmup Iteration   9: 2845080.146 ops/s
# Warmup Iteration  10: 3013615.118 ops/s
# Warmup Iteration  11: 2768735.172 ops/s
# Warmup Iteration  12: 2971186.684 ops/s
# Warmup Iteration  13: 3010842.128 ops/s
# Warmup Iteration  14: 2916097.549 ops/s
# Warmup Iteration  15: 2982165.552 ops/s
# Warmup Iteration  16: 3030151.947 ops/s
# Warmup Iteration  17: 2925402.930 ops/s
# Warmup Iteration  18: 2993509.977 ops/s
# Warmup Iteration  19: 3035620.847 ops/s
# Warmup Iteration  20: 2997283.165 ops/s
# Warmup Iteration  21: 2914536.477 ops/s
# Warmup Iteration  22: 2842077.085 ops/s
# Warmup Iteration  23: 3044621.957 ops/s
# Warmup Iteration  24: 2961971.354 ops/s
# Warmup Iteration  25: 3008865.270 ops/s
# Warmup Iteration  26: 3014171.382 ops/s
# Warmup Iteration  27: 2929035.973 ops/s
# Warmup Iteration  28: 2935459.873 ops/s
# Warmup Iteration  29: 2958303.305 ops/s
# Warmup Iteration  30: 3033643.603 ops/s
Iteration   1: 2877334.157 ops/s
Iteration   2: 3034539.852 ops/s
Iteration   3: 2912294.745 ops/s
Iteration   4: 2925722.401 ops/s
Iteration   5: 2975297.116 ops/s
Iteration   6: 3022902.568 ops/s
Iteration   7: 2998378.129 ops/s
Iteration   8: 2933829.893 ops/s
Iteration   9: 3050834.687 ops/s
Iteration  10: 2889329.789 ops/s
Iteration  11: 2983217.656 ops/s
Iteration  12: 3020309.272 ops/s
Iteration  13: 2936207.014 ops/s
Iteration  14: 2964510.534 ops/s
Iteration  15: 2962703.433 ops/s
Iteration  16: 2955159.684 ops/s
Iteration  17: 3060465.138 ops/s
Iteration  18: 2852068.190 ops/s
Iteration  19: 2966001.904 ops/s
Iteration  20: 3030716.246 ops/s
Iteration  21: 2856031.939 ops/s
Iteration  22: 2937742.615 ops/s
Iteration  23: 2962082.493 ops/s
Iteration  24: 3003871.335 ops/s
Iteration  25: 2951064.932 ops/s
Iteration  26: 2918416.864 ops/s
Iteration  27: 3123186.757 ops/s
Iteration  28: 2844456.367 ops/s
Iteration  29: 2944321.350 ops/s
Iteration  30: 2862051.622 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustRange":
  2958501.623 ±(99.9%) 45041.473 ops/s [Average]
  (min, avg, max) = (2844456.367, 2958501.623, 3123186.757), stdev = 67415.961
  CI (99.9%): [2913460.150, 3003543.096] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustRange  thrpt   30  2958501.623 ± 45041.473  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_noCancelPrevious$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_noCancelPrevious

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 302479.505 ops/s
# Warmup Iteration   2: 840389.199 ops/s
# Warmup Iteration   3: 913098.178 ops/s
# Warmup Iteration   4: 1295699.561 ops/s
# Warmup Iteration   5: 1461637.814 ops/s
# Warmup Iteration   6: 1377847.881 ops/s
# Warmup Iteration   7: 1395374.719 ops/s
# Warmup Iteration   8: 1329227.994 ops/s
# Warmup Iteration   9: 1479155.860 ops/s
# Warmup Iteration  10: 1422674.958 ops/s
# Warmup Iteration  11: 1351446.248 ops/s
# Warmup Iteration  12: 1487161.985 ops/s
# Warmup Iteration  13: 1416677.706 ops/s
# Warmup Iteration  14: 1460105.201 ops/s
# Warmup Iteration  15: 1401712.153 ops/s
# Warmup Iteration  16: 1453787.479 ops/s
# Warmup Iteration  17: 1485889.894 ops/s
# Warmup Iteration  18: 1411834.829 ops/s
# Warmup Iteration  19: 1451802.419 ops/s
# Warmup Iteration  20: 1474933.121 ops/s
# Warmup Iteration  21: 1411189.348 ops/s
# Warmup Iteration  22: 1473861.288 ops/s
# Warmup Iteration  23: 1475931.141 ops/s
# Warmup Iteration  24: 1443425.462 ops/s
# Warmup Iteration  25: 1500101.763 ops/s
# Warmup Iteration  26: 1516083.534 ops/s
# Warmup Iteration  27: 1442495.670 ops/s
# Warmup Iteration  28: 1436904.610 ops/s
# Warmup Iteration  29: 1494923.112 ops/s
# Warmup Iteration  30: 1467271.608 ops/s
Iteration   1: 1455988.975 ops/s
Iteration   2: 1522052.549 ops/s
Iteration   3: 1411064.997 ops/s
Iteration   4: 1496928.066 ops/s
Iteration   5: 1434859.185 ops/s
Iteration   6: 1456156.376 ops/s
Iteration   7: 1463627.671 ops/s
Iteration   8: 1505367.675 ops/s
Iteration   9: 1400151.627 ops/s
Iteration  10: 1415821.619 ops/s
Iteration  11: 1490376.573 ops/s
Iteration  12: 1482362.271 ops/s
Iteration  13: 1511661.002 ops/s
Iteration  14: 1480124.304 ops/s
Iteration  15: 1403810.689 ops/s
Iteration  16: 1174071.858 ops/s
Iteration  17: 1459731.364 ops/s
Iteration  18: 1442676.327 ops/s
Iteration  19: 1513105.880 ops/s
Iteration  20: 1527662.119 ops/s
Iteration  21: 1526033.860 ops/s
Iteration  22: 1390553.130 ops/s
Iteration  23: 1508521.230 ops/s
Iteration  24: 1469715.911 ops/s
Iteration  25: 1389076.132 ops/s
Iteration  26: 1493727.442 ops/s
Iteration  27: 1448139.614 ops/s
Iteration  28: 1469915.218 ops/s
Iteration  29: 1431307.121 ops/s
Iteration  30: 1500809.704 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_noCancelPrevious":
  1455846.683 ±(99.9%) 45244.621 ops/s [Average]
  (min, avg, max) = (1174071.858, 1455846.683, 1527662.119), stdev = 67720.024
  CI (99.9%): [1410602.062, 1501091.304] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_noCancelPrevious  thrpt   30  1455846.683 ± 45244.621  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122121.297 ops/s
# Warmup Iteration   2: 1020480.320 ops/s
# Warmup Iteration   3: 1957019.622 ops/s
# Warmup Iteration   4: 2528851.328 ops/s
# Warmup Iteration   5: 2548798.337 ops/s
# Warmup Iteration   6: 2670562.837 ops/s
# Warmup Iteration   7: 2536957.862 ops/s
# Warmup Iteration   8: 2419381.998 ops/s
# Warmup Iteration   9: 2616007.400 ops/s
# Warmup Iteration  10: 2669595.597 ops/s
# Warmup Iteration  11: 2628809.042 ops/s
# Warmup Iteration  12: 2664544.022 ops/s
# Warmup Iteration  13: 2600210.230 ops/s
# Warmup Iteration  14: 2606873.724 ops/s
# Warmup Iteration  15: 2652100.817 ops/s
# Warmup Iteration  16: 2622091.054 ops/s
# Warmup Iteration  17: 2565839.482 ops/s
# Warmup Iteration  18: 2658830.113 ops/s
# Warmup Iteration  19: 2542919.885 ops/s
# Warmup Iteration  20: 2735531.000 ops/s
# Warmup Iteration  21: 2573865.054 ops/s
# Warmup Iteration  22: 2589617.155 ops/s
# Warmup Iteration  23: 2663856.328 ops/s
# Warmup Iteration  24: 2584253.289 ops/s
# Warmup Iteration  25: 2625717.120 ops/s
# Warmup Iteration  26: 2619018.835 ops/s
# Warmup Iteration  27: 2569108.959 ops/s
# Warmup Iteration  28: 2708300.107 ops/s
# Warmup Iteration  29: 2646891.452 ops/s
# Warmup Iteration  30: 2550631.936 ops/s
Iteration   1: 2678984.218 ops/s
Iteration   2: 2617399.215 ops/s
Iteration   3: 2689589.950 ops/s
Iteration   4: 2624265.315 ops/s
Iteration   5: 2593434.830 ops/s
Iteration   6: 2717722.327 ops/s
Iteration   7: 2591600.208 ops/s
Iteration   8: 2659390.090 ops/s
Iteration   9: 2574521.643 ops/s
Iteration  10: 2722167.125 ops/s
Iteration  11: 2615919.036 ops/s
Iteration  12: 2644229.948 ops/s
Iteration  13: 2605382.051 ops/s
Iteration  14: 2632501.384 ops/s
Iteration  15: 2649709.260 ops/s
Iteration  16: 2593026.022 ops/s
Iteration  17: 2596868.121 ops/s
Iteration  18: 2724512.093 ops/s
Iteration  19: 2549902.559 ops/s
Iteration  20: 2629427.608 ops/s
Iteration  21: 2714886.888 ops/s
Iteration  22: 2548271.590 ops/s
Iteration  23: 2624678.003 ops/s
Iteration  24: 2550082.508 ops/s
Iteration  25: 2650499.469 ops/s
Iteration  26: 2518577.534 ops/s
Iteration  27: 2765274.545 ops/s
Iteration  28: 2541202.262 ops/s
Iteration  29: 2585046.125 ops/s
Iteration  30: 2706130.602 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSource":
  2630506.751 ±(99.9%) 42151.029 ops/s [Average]
  (min, avg, max) = (2518577.534, 2630506.751, 2765274.545), stdev = 63089.680
  CI (99.9%): [2588355.722, 2672657.780] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapJustSource  thrpt   30  2630506.751 ± 42151.029  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOut$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOut

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 168772.869 ops/s
# Warmup Iteration   2: 887860.918 ops/s
# Warmup Iteration   3: 1728077.481 ops/s
# Warmup Iteration   4: 1738356.560 ops/s
# Warmup Iteration   5: 2030586.527 ops/s
# Warmup Iteration   6: 2056498.082 ops/s
# Warmup Iteration   7: 1940220.938 ops/s
# Warmup Iteration   8: 1922979.168 ops/s
# Warmup Iteration   9: 2076150.151 ops/s
# Warmup Iteration  10: 2028401.709 ops/s
# Warmup Iteration  11: 1884569.320 ops/s
# Warmup Iteration  12: 1997242.772 ops/s
# Warmup Iteration  13: 1986577.813 ops/s
# Warmup Iteration  14: 1943186.395 ops/s
# Warmup Iteration  15: 2048735.689 ops/s
# Warmup Iteration  16: 1952075.186 ops/s
# Warmup Iteration  17: 1974364.300 ops/s
# Warmup Iteration  18: 1979906.290 ops/s
# Warmup Iteration  19: 2006229.798 ops/s
# Warmup Iteration  20: 1959918.329 ops/s
# Warmup Iteration  21: 1997619.601 ops/s
# Warmup Iteration  22: 2050738.616 ops/s
# Warmup Iteration  23: 1937761.544 ops/s
# Warmup Iteration  24: 1927572.107 ops/s
# Warmup Iteration  25: 2047587.803 ops/s
# Warmup Iteration  26: 1908477.035 ops/s
# Warmup Iteration  27: 1966729.652 ops/s
# Warmup Iteration  28: 2034471.516 ops/s
# Warmup Iteration  29: 1917487.985 ops/s
# Warmup Iteration  30: 2007152.705 ops/s
Iteration   1: 1977002.917 ops/s
Iteration   2: 1909516.902 ops/s
Iteration   3: 2074207.997 ops/s
Iteration   4: 1943346.437 ops/s
Iteration   5: 1992093.176 ops/s
Iteration   6: 2025819.956 ops/s
Iteration   7: 1919622.077 ops/s
Iteration   8: 2044475.800 ops/s
Iteration   9: 1973670.864 ops/s
Iteration  10: 1622555.307 ops/s
Iteration  11: 2046695.110 ops/s
Iteration  12: 1900450.561 ops/s
Iteration  13: 2007456.796 ops/s
Iteration  14: 2062446.343 ops/s
Iteration  15: 2028542.262 ops/s
Iteration  16: 1951351.710 ops/s
Iteration  17: 2030512.897 ops/s
Iteration  18: 2029595.363 ops/s
Iteration  19: 2007500.456 ops/s
Iteration  20: 2062638.989 ops/s
Iteration  21: 1946742.814 ops/s
Iteration  22: 2057102.207 ops/s
Iteration  23: 1968060.691 ops/s
Iteration  24: 2020022.718 ops/s
Iteration  25: 1958399.413 ops/s
Iteration  26: 2077719.505 ops/s
Iteration  27: 2007544.367 ops/s
Iteration  28: 2022754.387 ops/s
Iteration  29: 1883380.084 ops/s
Iteration  30: 2016923.141 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOut":
  1985605.042 ±(99.9%) 57967.345 ops/s [Average]
  (min, avg, max) = (1622555.307, 1985605.042, 2077719.505), stdev = 86762.800
  CI (99.9%): [1927637.697, 2043572.387] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
ObservableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelySyncInNormalOut  thrpt   30  1985605.042 ± 57967.345  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatWithNonCompliantSourceDoubleOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatWithNonCompliantSourceDoubleOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 234004.943 ops/s
# Warmup Iteration   2: 1317971.051 ops/s
# Warmup Iteration   3: 1852518.485 ops/s
# Warmup Iteration   4: 2102116.894 ops/s
# Warmup Iteration   5: 2009374.550 ops/s
# Warmup Iteration   6: 2058957.828 ops/s
# Warmup Iteration   7: 2110034.899 ops/s
# Warmup Iteration   8: 1982914.217 ops/s
# Warmup Iteration   9: 2119502.704 ops/s
# Warmup Iteration  10: 1994759.483 ops/s
# Warmup Iteration  11: 2068245.016 ops/s
# Warmup Iteration  12: 1984905.278 ops/s
# Warmup Iteration  13: 2035690.662 ops/s
# Warmup Iteration  14: 2067387.757 ops/s
# Warmup Iteration  15: 1931135.550 ops/s
# Warmup Iteration  16: 2126870.770 ops/s
# Warmup Iteration  17: 2034113.789 ops/s
# Warmup Iteration  18: 2080659.951 ops/s
# Warmup Iteration  19: 2111183.864 ops/s
# Warmup Iteration  20: 1940919.822 ops/s
# Warmup Iteration  21: 2164449.962 ops/s
# Warmup Iteration  22: 2061379.749 ops/s
# Warmup Iteration  23: 2041532.783 ops/s
# Warmup Iteration  24: 2105821.392 ops/s
# Warmup Iteration  25: 2053250.703 ops/s
# Warmup Iteration  26: 2145011.145 ops/s
# Warmup Iteration  27: 2069573.507 ops/s
# Warmup Iteration  28: 2087631.582 ops/s
# Warmup Iteration  29: 2085137.814 ops/s
# Warmup Iteration  30: 2079981.245 ops/s
Iteration   1: 2152366.662 ops/s
Iteration   2: 2030190.278 ops/s
Iteration   3: 2131027.365 ops/s
Iteration   4: 2039995.399 ops/s
Iteration   5: 2128807.004 ops/s
Iteration   6: 2127783.238 ops/s
Iteration   7: 2051310.674 ops/s
Iteration   8: 2090741.988 ops/s
Iteration   9: 2083477.674 ops/s
Iteration  10: 2114127.162 ops/s
Iteration  11: 2014378.587 ops/s
Iteration  12: 2018090.190 ops/s
Iteration  13: 2125899.260 ops/s
Iteration  14: 2024611.252 ops/s
Iteration  15: 2132582.053 ops/s
Iteration  16: 2031441.122 ops/s
Iteration  17: 2104790.442 ops/s
Iteration  18: 2117631.552 ops/s
Iteration  19: 2058426.965 ops/s
Iteration  20: 2134336.626 ops/s
Iteration  21: 2189635.403 ops/s
Iteration  22: 2029739.323 ops/s
Iteration  23: 2073742.455 ops/s
Iteration  24: 2142257.454 ops/s
Iteration  25: 2013998.504 ops/s
Iteration  26: 2184745.991 ops/s
Iteration  27: 2095928.817 ops/s
Iteration  28: 2021836.446 ops/s
Iteration  29: 2153975.942 ops/s
Iteration  30: 2043325.688 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatWithNonCompliantSourceDoubleOnComplete":
  2088706.717 ±(99.9%) 36076.566 ops/s [Average]
  (min, avg, max) = (2013998.504, 2088706.717, 2189635.403), stdev = 53997.710
  CI (99.9%): [2052630.151, 2124783.284] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_concatWithNonCompliantSourceDoubleOnComplete  thrpt   30  2088706.717 ± 36076.566  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.601 ops/s
# Warmup Iteration   2: 16640.621 ops/s
# Warmup Iteration   3: 66870.309 ops/s
# Warmup Iteration   4: 162359.014 ops/s
# Warmup Iteration   5: 282313.605 ops/s
# Warmup Iteration   6: 509616.689 ops/s
# Warmup Iteration   7: 524077.053 ops/s
# Warmup Iteration   8: 539541.441 ops/s
# Warmup Iteration   9: 511864.740 ops/s
# Warmup Iteration  10: 521980.045 ops/s
# Warmup Iteration  11: 534983.283 ops/s
# Warmup Iteration  12: 519144.198 ops/s
# Warmup Iteration  13: 509890.078 ops/s
# Warmup Iteration  14: 540977.794 ops/s
# Warmup Iteration  15: 504103.295 ops/s
# Warmup Iteration  16: 543660.762 ops/s
# Warmup Iteration  17: 542132.335 ops/s
# Warmup Iteration  18: 540140.684 ops/s
# Warmup Iteration  19: 511009.085 ops/s
# Warmup Iteration  20: 546183.964 ops/s
# Warmup Iteration  21: 544255.268 ops/s
# Warmup Iteration  22: 512105.952 ops/s
# Warmup Iteration  23: 532983.332 ops/s
# Warmup Iteration  24: 508127.118 ops/s
# Warmup Iteration  25: 536404.262 ops/s
# Warmup Iteration  26: 531908.793 ops/s
# Warmup Iteration  27: 516537.584 ops/s
# Warmup Iteration  28: 535917.436 ops/s
# Warmup Iteration  29: 527584.855 ops/s
# Warmup Iteration  30: 512792.089 ops/s
Iteration   1: 537019.115 ops/s
Iteration   2: 524495.144 ops/s
Iteration   3: 515271.855 ops/s
Iteration   4: 438458.372 ops/s
Iteration   5: 526514.100 ops/s
Iteration   6: 527021.967 ops/s
Iteration   7: 523688.771 ops/s
Iteration   8: 538023.346 ops/s
Iteration   9: 539894.849 ops/s
Iteration  10: 511882.603 ops/s
Iteration  11: 530996.558 ops/s
Iteration  12: 503634.402 ops/s
Iteration  13: 529981.399 ops/s
Iteration  14: 535002.467 ops/s
Iteration  15: 507786.448 ops/s
Iteration  16: 523477.697 ops/s
Iteration  17: 522831.306 ops/s
Iteration  18: 530560.599 ops/s
Iteration  19: 519055.338 ops/s
Iteration  20: 527923.685 ops/s
Iteration  21: 537525.943 ops/s
Iteration  22: 508418.053 ops/s
Iteration  23: 550066.662 ops/s
Iteration  24: 507148.469 ops/s
Iteration  25: 517797.934 ops/s
Iteration  26: 528867.662 ops/s
Iteration  27: 502636.428 ops/s
Iteration  28: 536476.455 ops/s
Iteration  29: 533139.608 ops/s
Iteration  30: 517473.357 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_fused":
  521769.020 ±(99.9%) 13119.972 ops/s [Average]
  (min, avg, max) = (438458.372, 521769.020, 550066.662), stdev = 19637.357
  CI (99.9%): [508649.048, 534888.991] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableDistinctUntilChangedTest._Benchmark.benchmark_fused  thrpt   30  521769.020 ± 13119.972  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32459.349 ops/s
# Warmup Iteration   2: 95910.198 ops/s
# Warmup Iteration   3: 368263.581 ops/s
# Warmup Iteration   4: 410804.096 ops/s
# Warmup Iteration   5: 408665.194 ops/s
# Warmup Iteration   6: 418110.398 ops/s
# Warmup Iteration   7: 377909.609 ops/s
# Warmup Iteration   8: 386549.398 ops/s
# Warmup Iteration   9: 412727.061 ops/s
# Warmup Iteration  10: 408082.336 ops/s
# Warmup Iteration  11: 427496.918 ops/s
# Warmup Iteration  12: 403340.476 ops/s
# Warmup Iteration  13: 412878.479 ops/s
# Warmup Iteration  14: 427503.514 ops/s
# Warmup Iteration  15: 412455.155 ops/s
# Warmup Iteration  16: 422732.172 ops/s
# Warmup Iteration  17: 429890.232 ops/s
# Warmup Iteration  18: 448957.321 ops/s
# Warmup Iteration  19: 425753.437 ops/s
# Warmup Iteration  20: 429434.930 ops/s
# Warmup Iteration  21: 432775.792 ops/s
# Warmup Iteration  22: 422386.712 ops/s
# Warmup Iteration  23: 442902.028 ops/s
# Warmup Iteration  24: 431040.238 ops/s
# Warmup Iteration  25: 428574.779 ops/s
# Warmup Iteration  26: 438667.887 ops/s
# Warmup Iteration  27: 427009.541 ops/s
# Warmup Iteration  28: 441827.796 ops/s
# Warmup Iteration  29: 424298.151 ops/s
# Warmup Iteration  30: 430189.524 ops/s
Iteration   1: 447073.976 ops/s
Iteration   2: 432319.350 ops/s
Iteration   3: 449011.394 ops/s
Iteration   4: 419111.305 ops/s
Iteration   5: 432316.293 ops/s
Iteration   6: 427324.337 ops/s
Iteration   7: 432036.739 ops/s
Iteration   8: 435573.594 ops/s
Iteration   9: 414499.894 ops/s
Iteration  10: 434997.426 ops/s
Iteration  11: 453564.466 ops/s
Iteration  12: 444374.636 ops/s
Iteration  13: 430208.449 ops/s
Iteration  14: 430872.160 ops/s
Iteration  15: 433684.109 ops/s
Iteration  16: 435759.645 ops/s
Iteration  17: 426793.160 ops/s
Iteration  18: 449087.424 ops/s
Iteration  19: 420218.079 ops/s
Iteration  20: 449128.017 ops/s
Iteration  21: 396281.957 ops/s
Iteration  22: 441204.129 ops/s
Iteration  23: 435986.776 ops/s
Iteration  24: 426497.933 ops/s
Iteration  25: 435255.294 ops/s
Iteration  26: 433883.711 ops/s
Iteration  27: 444401.842 ops/s
Iteration  28: 419517.601 ops/s
Iteration  29: 450000.799 ops/s
Iteration  30: 441756.698 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorTillEnd":
  434091.373 ±(99.9%) 8268.866 ops/s [Average]
  (min, avg, max) = (396281.957, 434091.373, 453564.466), stdev = 12376.450
  CI (99.9%): [425822.507, 442360.239] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ObservableConcatTest._Benchmark.benchmark_concatObservableDelayErrorTillEnd  thrpt   30  434091.373 ± 8268.866  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30749.204 ops/s
# Warmup Iteration   2: 137784.974 ops/s
# Warmup Iteration   3: 260675.883 ops/s
# Warmup Iteration   4: 428488.557 ops/s
# Warmup Iteration   5: 447713.009 ops/s
# Warmup Iteration   6: 431054.639 ops/s
# Warmup Iteration   7: 430512.777 ops/s
# Warmup Iteration   8: 449463.032 ops/s
# Warmup Iteration   9: 453449.673 ops/s
# Warmup Iteration  10: 452593.865 ops/s
# Warmup Iteration  11: 437522.704 ops/s
# Warmup Iteration  12: 460043.578 ops/s
# Warmup Iteration  13: 449266.468 ops/s
# Warmup Iteration  14: 466568.149 ops/s
# Warmup Iteration  15: 458463.420 ops/s
# Warmup Iteration  16: 445702.363 ops/s
# Warmup Iteration  17: 480357.819 ops/s
# Warmup Iteration  18: 466570.822 ops/s
# Warmup Iteration  19: 461198.212 ops/s
# Warmup Iteration  20: 483972.326 ops/s
# Warmup Iteration  21: 455761.851 ops/s
# Warmup Iteration  22: 477447.029 ops/s
# Warmup Iteration  23: 453773.320 ops/s
# Warmup Iteration  24: 466040.148 ops/s
# Warmup Iteration  25: 479145.983 ops/s
# Warmup Iteration  26: 469920.785 ops/s
# Warmup Iteration  27: 458628.282 ops/s
# Warmup Iteration  28: 398954.925 ops/s
# Warmup Iteration  29: 476088.117 ops/s
# Warmup Iteration  30: 447171.945 ops/s
Iteration   1: 479030.167 ops/s
Iteration   2: 463021.235 ops/s
Iteration   3: 473422.402 ops/s
Iteration   4: 465911.632 ops/s
Iteration   5: 469212.193 ops/s
Iteration   6: 479110.604 ops/s
Iteration   7: 457047.710 ops/s
Iteration   8: 491899.591 ops/s
Iteration   9: 484988.554 ops/s
Iteration  10: 471625.129 ops/s
Iteration  11: 482634.573 ops/s
Iteration  12: 441753.887 ops/s
Iteration  13: 463404.831 ops/s
Iteration  14: 476404.949 ops/s
Iteration  15: 468330.876 ops/s
Iteration  16: 476568.142 ops/s
Iteration  17: 458438.325 ops/s
Iteration  18: 465276.537 ops/s
Iteration  19: 468325.326 ops/s
Iteration  20: 470760.456 ops/s
Iteration  21: 456352.395 ops/s
Iteration  22: 458832.817 ops/s
Iteration  23: 477542.933 ops/s
Iteration  24: 472432.762 ops/s
Iteration  25: 460443.773 ops/s
Iteration  26: 484328.874 ops/s
Iteration  27: 462156.006 ops/s
Iteration  28: 465254.539 ops/s
Iteration  29: 489782.919 ops/s
Iteration  30: 458199.080 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorWithError":
  469749.774 ±(99.9%) 7492.822 ops/s [Average]
  (min, avg, max) = (441753.887, 469749.774, 491899.591), stdev = 11214.904
  CI (99.9%): [462256.952, 477242.596] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableConcatTest._Benchmark.benchmark_concatMapDelayErrorWithError  thrpt   30  469749.774 ± 7492.822  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_debounceFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_debounceFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 306731.619 ops/s
# Warmup Iteration   2: 522461.150 ops/s
# Warmup Iteration   3: 578162.172 ops/s
# Warmup Iteration   4: 544915.460 ops/s
# Warmup Iteration   5: 579945.782 ops/s
# Warmup Iteration   6: 591835.644 ops/s
# Warmup Iteration   7: 585230.712 ops/s
# Warmup Iteration   8: 607623.089 ops/s
# Warmup Iteration   9: 596867.588 ops/s
# Warmup Iteration  10: 598670.164 ops/s
# Warmup Iteration  11: 592575.270 ops/s
# Warmup Iteration  12: 592427.287 ops/s
# Warmup Iteration  13: 592137.705 ops/s
# Warmup Iteration  14: 620641.169 ops/s
# Warmup Iteration  15: 585654.662 ops/s
# Warmup Iteration  16: 588369.543 ops/s
# Warmup Iteration  17: 625532.912 ops/s
# Warmup Iteration  18: 638844.280 ops/s
# Warmup Iteration  19: 598698.797 ops/s
# Warmup Iteration  20: 640095.965 ops/s
# Warmup Iteration  21: 602447.447 ops/s
# Warmup Iteration  22: 634371.672 ops/s
# Warmup Iteration  23: 617030.695 ops/s
# Warmup Iteration  24: 613973.545 ops/s
# Warmup Iteration  25: 620922.280 ops/s
# Warmup Iteration  26: 639374.081 ops/s
# Warmup Iteration  27: 608077.798 ops/s
# Warmup Iteration  28: 631124.568 ops/s
# Warmup Iteration  29: 609805.134 ops/s
# Warmup Iteration  30: 611657.794 ops/s
Iteration   1: 622960.651 ops/s
Iteration   2: 619997.407 ops/s
Iteration   3: 636764.578 ops/s
Iteration   4: 614577.767 ops/s
Iteration   5: 646466.889 ops/s
Iteration   6: 640657.505 ops/s
Iteration   7: 612887.555 ops/s
Iteration   8: 651984.479 ops/s
Iteration   9: 600044.114 ops/s
Iteration  10: 654246.820 ops/s
Iteration  11: 614048.126 ops/s
Iteration  12: 618616.726 ops/s
Iteration  13: 649697.642 ops/s
Iteration  14: 620086.327 ops/s
Iteration  15: 607037.553 ops/s
Iteration  16: 631198.019 ops/s
Iteration  17: 590618.471 ops/s
Iteration  18: 635897.002 ops/s
Iteration  19: 599724.226 ops/s
Iteration  20: 627488.778 ops/s
Iteration  21: 638284.427 ops/s
Iteration  22: 596957.123 ops/s
Iteration  23: 618696.292 ops/s
Iteration  24: 610299.834 ops/s
Iteration  25: 638641.953 ops/s
Iteration  26: 606726.615 ops/s
Iteration  27: 637021.041 ops/s
Iteration  28: 624880.493 ops/s
Iteration  29: 616861.070 ops/s
Iteration  30: 627057.083 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_debounceFunctionReturnsNull":
  623680.886 ±(99.9%) 11329.106 ops/s [Average]
  (min, avg, max) = (590618.471, 623680.886, 654246.820), stdev = 16956.873
  CI (99.9%): [612351.780, 635009.991] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_debounceFunctionReturnsNull  thrpt   30  623680.886 ± 11329.106  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_withLatestFromCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_withLatestFromCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 222297.137 ops/s
# Warmup Iteration   2: 497649.466 ops/s
# Warmup Iteration   3: 521619.086 ops/s
# Warmup Iteration   4: 555290.838 ops/s
# Warmup Iteration   5: 578005.178 ops/s
# Warmup Iteration   6: 564866.310 ops/s
# Warmup Iteration   7: 515979.732 ops/s
# Warmup Iteration   8: 578536.154 ops/s
# Warmup Iteration   9: 532233.020 ops/s
# Warmup Iteration  10: 564941.508 ops/s
# Warmup Iteration  11: 566436.468 ops/s
# Warmup Iteration  12: 565702.838 ops/s
# Warmup Iteration  13: 537852.620 ops/s
# Warmup Iteration  14: 581349.235 ops/s
# Warmup Iteration  15: 556378.024 ops/s
# Warmup Iteration  16: 568366.835 ops/s
# Warmup Iteration  17: 579792.985 ops/s
# Warmup Iteration  18: 550793.513 ops/s
# Warmup Iteration  19: 606292.660 ops/s
# Warmup Iteration  20: 594148.445 ops/s
# Warmup Iteration  21: 560962.425 ops/s
# Warmup Iteration  22: 472882.361 ops/s
# Warmup Iteration  23: 571234.074 ops/s
# Warmup Iteration  24: 565110.598 ops/s
# Warmup Iteration  25: 579062.504 ops/s
# Warmup Iteration  26: 588366.447 ops/s
# Warmup Iteration  27: 568276.809 ops/s
# Warmup Iteration  28: 575315.085 ops/s
# Warmup Iteration  29: 603627.618 ops/s
# Warmup Iteration  30: 573124.929 ops/s
Iteration   1: 584595.939 ops/s
Iteration   2: 571654.242 ops/s
Iteration   3: 561617.259 ops/s
Iteration   4: 583695.265 ops/s
Iteration   5: 569776.155 ops/s
Iteration   6: 583687.958 ops/s
Iteration   7: 572492.197 ops/s
Iteration   8: 582565.872 ops/s
Iteration   9: 595655.307 ops/s
Iteration  10: 612026.588 ops/s
Iteration  11: 560642.539 ops/s
Iteration  12: 600677.341 ops/s
Iteration  13: 569040.213 ops/s
Iteration  14: 583922.215 ops/s
Iteration  15: 590282.077 ops/s
Iteration  16: 572844.140 ops/s
Iteration  17: 594711.369 ops/s
Iteration  18: 582887.305 ops/s
Iteration  19: 581497.975 ops/s
Iteration  20: 575476.463 ops/s
Iteration  21: 613894.851 ops/s
Iteration  22: 569449.184 ops/s
Iteration  23: 599198.697 ops/s
Iteration  24: 567005.973 ops/s
Iteration  25: 587201.252 ops/s
Iteration  26: 595897.005 ops/s
Iteration  27: 561194.051 ops/s
Iteration  28: 607094.610 ops/s
Iteration  29: 567815.093 ops/s
Iteration  30: 583579.823 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_withLatestFromCombinerReturnsNull":
  582735.965 ±(99.9%) 9896.563 ops/s [Average]
  (min, avg, max) = (560642.539, 582735.965, 613894.851), stdev = 14812.710
  CI (99.9%): [572839.403, 592632.528] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_withLatestFromCombinerReturnsNull  thrpt   30  582735.965 ± 9896.563  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35363.531 ops/s
# Warmup Iteration   2: 395478.985 ops/s
# Warmup Iteration   3: 734411.043 ops/s
# Warmup Iteration   4: 965011.750 ops/s
# Warmup Iteration   5: 937392.955 ops/s
# Warmup Iteration   6: 921635.150 ops/s
# Warmup Iteration   7: 967321.346 ops/s
# Warmup Iteration   8: 914458.709 ops/s
# Warmup Iteration   9: 955806.096 ops/s
# Warmup Iteration  10: 972632.730 ops/s
# Warmup Iteration  11: 937504.951 ops/s
# Warmup Iteration  12: 943133.595 ops/s
# Warmup Iteration  13: 960543.709 ops/s
# Warmup Iteration  14: 944246.504 ops/s
# Warmup Iteration  15: 972192.579 ops/s
# Warmup Iteration  16: 899612.942 ops/s
# Warmup Iteration  17: 946100.030 ops/s
# Warmup Iteration  18: 971105.475 ops/s
# Warmup Iteration  19: 957323.200 ops/s
# Warmup Iteration  20: 986488.416 ops/s
# Warmup Iteration  21: 958883.350 ops/s
# Warmup Iteration  22: 947645.530 ops/s
# Warmup Iteration  23: 989633.855 ops/s
# Warmup Iteration  24: 973762.909 ops/s
# Warmup Iteration  25: 936421.774 ops/s
# Warmup Iteration  26: 974632.667 ops/s
# Warmup Iteration  27: 932753.507 ops/s
# Warmup Iteration  28: 953967.796 ops/s
# Warmup Iteration  29: 976177.896 ops/s
# Warmup Iteration  30: 933140.746 ops/s
Iteration   1: 957598.433 ops/s
Iteration   2: 965413.154 ops/s
Iteration   3: 962227.045 ops/s
Iteration   4: 946413.110 ops/s
Iteration   5: 889940.928 ops/s
Iteration   6: 980832.375 ops/s
Iteration   7: 916981.700 ops/s
Iteration   8: 972710.809 ops/s
Iteration   9: 918134.100 ops/s
Iteration  10: 967834.630 ops/s
Iteration  11: 925475.709 ops/s
Iteration  12: 980987.731 ops/s
Iteration  13: 974442.697 ops/s
Iteration  14: 945849.125 ops/s
Iteration  15: 975700.630 ops/s
Iteration  16: 952259.610 ops/s
Iteration  17: 954891.694 ops/s
Iteration  18: 953353.961 ops/s
Iteration  19: 944133.093 ops/s
Iteration  20: 974714.299 ops/s
Iteration  21: 909200.706 ops/s
Iteration  22: 1003547.825 ops/s
Iteration  23: 964856.089 ops/s
Iteration  24: 976915.208 ops/s
Iteration  25: 919660.836 ops/s
Iteration  26: 972791.319 ops/s
Iteration  27: 925340.287 ops/s
Iteration  28: 955725.764 ops/s
Iteration  29: 962527.477 ops/s
Iteration  30: 941562.649 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness2":
  953067.433 ±(99.9%) 17092.691 ops/s [Average]
  (min, avg, max) = (889940.928, 953067.433, 1003547.825), stdev = 25583.537
  CI (99.9%): [935974.742, 970160.124] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness2  thrpt   30  953067.433 ± 17092.691  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness5$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness5

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 59062.186 ops/s
# Warmup Iteration   2: 337094.989 ops/s
# Warmup Iteration   3: 479859.741 ops/s
# Warmup Iteration   4: 536657.924 ops/s
# Warmup Iteration   5: 534815.447 ops/s
# Warmup Iteration   6: 523066.295 ops/s
# Warmup Iteration   7: 540324.281 ops/s
# Warmup Iteration   8: 531422.475 ops/s
# Warmup Iteration   9: 544839.999 ops/s
# Warmup Iteration  10: 537402.927 ops/s
# Warmup Iteration  11: 512749.401 ops/s
# Warmup Iteration  12: 551783.464 ops/s
# Warmup Iteration  13: 524977.440 ops/s
# Warmup Iteration  14: 543683.027 ops/s
# Warmup Iteration  15: 561803.301 ops/s
# Warmup Iteration  16: 551712.767 ops/s
# Warmup Iteration  17: 404865.982 ops/s
# Warmup Iteration  18: 541699.656 ops/s
# Warmup Iteration  19: 526811.972 ops/s
# Warmup Iteration  20: 550031.197 ops/s
# Warmup Iteration  21: 537515.809 ops/s
# Warmup Iteration  22: 507748.794 ops/s
# Warmup Iteration  23: 547294.852 ops/s
# Warmup Iteration  24: 539928.838 ops/s
# Warmup Iteration  25: 524874.627 ops/s
# Warmup Iteration  26: 548507.537 ops/s
# Warmup Iteration  27: 516846.479 ops/s
# Warmup Iteration  28: 538080.382 ops/s
# Warmup Iteration  29: 529554.903 ops/s
# Warmup Iteration  30: 552728.270 ops/s
Iteration   1: 541579.466 ops/s
Iteration   2: 525363.806 ops/s
Iteration   3: 544038.041 ops/s
Iteration   4: 539515.297 ops/s
Iteration   5: 524156.190 ops/s
Iteration   6: 535145.253 ops/s
Iteration   7: 530509.697 ops/s
Iteration   8: 541829.619 ops/s
Iteration   9: 514889.232 ops/s
Iteration  10: 533331.722 ops/s
Iteration  11: 544803.687 ops/s
Iteration  12: 510864.582 ops/s
Iteration  13: 545636.039 ops/s
Iteration  14: 531605.420 ops/s
Iteration  15: 510257.430 ops/s
Iteration  16: 541694.324 ops/s
Iteration  17: 525361.619 ops/s
Iteration  18: 544040.353 ops/s
Iteration  19: 528410.962 ops/s
Iteration  20: 527280.933 ops/s
Iteration  21: 537919.034 ops/s
Iteration  22: 528440.981 ops/s
Iteration  23: 541732.728 ops/s
Iteration  24: 522658.828 ops/s
Iteration  25: 533914.118 ops/s
Iteration  26: 526938.192 ops/s
Iteration  27: 540056.083 ops/s
Iteration  28: 518959.225 ops/s
Iteration  29: 531379.597 ops/s
Iteration  30: 543077.737 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness5":
  532179.673 ±(99.9%) 6801.823 ops/s [Average]
  (min, avg, max) = (510257.430, 532179.673, 545636.039), stdev = 10180.650
  CI (99.9%): [525377.850, 538981.496] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness5  thrpt   30  532179.673 ± 6801.823  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76385.582 ops/s
# Warmup Iteration   2: 228950.674 ops/s
# Warmup Iteration   3: 492556.447 ops/s
# Warmup Iteration   4: 619755.571 ops/s
# Warmup Iteration   5: 629560.619 ops/s
# Warmup Iteration   6: 605158.781 ops/s
# Warmup Iteration   7: 612482.013 ops/s
# Warmup Iteration   8: 628034.771 ops/s
# Warmup Iteration   9: 604207.804 ops/s
# Warmup Iteration  10: 621477.690 ops/s
# Warmup Iteration  11: 643212.084 ops/s
# Warmup Iteration  12: 619803.061 ops/s
# Warmup Iteration  13: 643141.128 ops/s
# Warmup Iteration  14: 607341.235 ops/s
# Warmup Iteration  15: 607483.350 ops/s
# Warmup Iteration  16: 626673.034 ops/s
# Warmup Iteration  17: 611024.096 ops/s
# Warmup Iteration  18: 605876.645 ops/s
# Warmup Iteration  19: 612012.477 ops/s
# Warmup Iteration  20: 628944.752 ops/s
# Warmup Iteration  21: 636818.562 ops/s
# Warmup Iteration  22: 606528.518 ops/s
# Warmup Iteration  23: 627108.910 ops/s
# Warmup Iteration  24: 626422.525 ops/s
# Warmup Iteration  25: 621699.201 ops/s
# Warmup Iteration  26: 597626.893 ops/s
# Warmup Iteration  27: 636719.222 ops/s
# Warmup Iteration  28: 639767.755 ops/s
# Warmup Iteration  29: 629149.255 ops/s
# Warmup Iteration  30: 624561.918 ops/s
Iteration   1: 617033.017 ops/s
Iteration   2: 641741.703 ops/s
Iteration   3: 615189.763 ops/s
Iteration   4: 626388.289 ops/s
Iteration   5: 601188.455 ops/s
Iteration   6: 640197.765 ops/s
Iteration   7: 619938.490 ops/s
Iteration   8: 603731.141 ops/s
Iteration   9: 643758.983 ops/s
Iteration  10: 593681.213 ops/s
Iteration  11: 619339.701 ops/s
Iteration  12: 641223.569 ops/s
Iteration  13: 605663.236 ops/s
Iteration  14: 623380.904 ops/s
Iteration  15: 626076.578 ops/s
Iteration  16: 614604.879 ops/s
Iteration  17: 627853.462 ops/s
Iteration  18: 612463.988 ops/s
Iteration  19: 626001.851 ops/s
Iteration  20: 602589.899 ops/s
Iteration  21: 624035.546 ops/s
Iteration  22: 632718.976 ops/s
Iteration  23: 598720.521 ops/s
Iteration  24: 651269.714 ops/s
Iteration  25: 609043.629 ops/s
Iteration  26: 624249.908 ops/s
Iteration  27: 635377.982 ops/s
Iteration  28: 601607.054 ops/s
Iteration  29: 631039.657 ops/s
Iteration  30: 602288.459 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness4":
  620413.278 ±(99.9%) 10210.076 ops/s [Average]
  (min, avg, max) = (593681.213, 620413.278, 651269.714), stdev = 15281.962
  CI (99.9%): [610203.202, 630623.354] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness4  thrpt   30  620413.278 ± 10210.076  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95567.047 ops/s
# Warmup Iteration   2: 478090.704 ops/s
# Warmup Iteration   3: 660468.234 ops/s
# Warmup Iteration   4: 748207.254 ops/s
# Warmup Iteration   5: 753991.814 ops/s
# Warmup Iteration   6: 787920.631 ops/s
# Warmup Iteration   7: 750776.665 ops/s
# Warmup Iteration   8: 730755.642 ops/s
# Warmup Iteration   9: 767653.663 ops/s
# Warmup Iteration  10: 750965.839 ops/s
# Warmup Iteration  11: 736157.818 ops/s
# Warmup Iteration  12: 568948.211 ops/s
# Warmup Iteration  13: 748496.763 ops/s
# Warmup Iteration  14: 782850.089 ops/s
# Warmup Iteration  15: 758224.354 ops/s
# Warmup Iteration  16: 777879.022 ops/s
# Warmup Iteration  17: 736915.838 ops/s
# Warmup Iteration  18: 821489.582 ops/s
# Warmup Iteration  19: 769401.306 ops/s
# Warmup Iteration  20: 750139.417 ops/s
# Warmup Iteration  21: 777862.995 ops/s
# Warmup Iteration  22: 778499.464 ops/s
# Warmup Iteration  23: 734372.357 ops/s
# Warmup Iteration  24: 782625.170 ops/s
# Warmup Iteration  25: 757100.344 ops/s
# Warmup Iteration  26: 756871.146 ops/s
# Warmup Iteration  27: 800042.806 ops/s
# Warmup Iteration  28: 739211.019 ops/s
# Warmup Iteration  29: 788264.924 ops/s
# Warmup Iteration  30: 792306.186 ops/s
Iteration   1: 758256.768 ops/s
Iteration   2: 781120.689 ops/s
Iteration   3: 795388.104 ops/s
Iteration   4: 754022.806 ops/s
Iteration   5: 764973.607 ops/s
Iteration   6: 774788.810 ops/s
Iteration   7: 800422.624 ops/s
Iteration   8: 751617.003 ops/s
Iteration   9: 799752.630 ops/s
Iteration  10: 746553.793 ops/s
Iteration  11: 782285.027 ops/s
Iteration  12: 761415.484 ops/s
Iteration  13: 762606.214 ops/s
Iteration  14: 779200.850 ops/s
Iteration  15: 759154.621 ops/s
Iteration  16: 757331.210 ops/s
Iteration  17: 817045.926 ops/s
Iteration  18: 781163.063 ops/s
Iteration  19: 750803.585 ops/s
Iteration  20: 792429.194 ops/s
Iteration  21: 734669.932 ops/s
Iteration  22: 807852.892 ops/s
Iteration  23: 742041.390 ops/s
Iteration  24: 785732.905 ops/s
Iteration  25: 749007.969 ops/s
Iteration  26: 770742.000 ops/s
Iteration  27: 777375.593 ops/s
Iteration  28: 766383.314 ops/s
Iteration  29: 735095.897 ops/s
Iteration  30: 795790.397 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness3":
  771167.477 ±(99.9%) 14585.520 ops/s [Average]
  (min, avg, max) = (734669.932, 771167.477, 817045.926), stdev = 21830.922
  CI (99.9%): [756581.956, 785752.997] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_eagerness3  thrpt   30  771167.477 ± 14585.520  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118902.679 ops/s
# Warmup Iteration   2: 506692.365 ops/s
# Warmup Iteration   3: 589933.818 ops/s
# Warmup Iteration   4: 583158.342 ops/s
# Warmup Iteration   5: 614767.322 ops/s
# Warmup Iteration   6: 555062.079 ops/s
# Warmup Iteration   7: 547193.607 ops/s
# Warmup Iteration   8: 605940.990 ops/s
# Warmup Iteration   9: 628559.364 ops/s
# Warmup Iteration  10: 611605.830 ops/s
# Warmup Iteration  11: 630867.114 ops/s
# Warmup Iteration  12: 628247.031 ops/s
# Warmup Iteration  13: 596966.344 ops/s
# Warmup Iteration  14: 608289.933 ops/s
# Warmup Iteration  15: 615973.540 ops/s
# Warmup Iteration  16: 617562.495 ops/s
# Warmup Iteration  17: 664195.116 ops/s
# Warmup Iteration  18: 625560.786 ops/s
# Warmup Iteration  19: 688280.832 ops/s
# Warmup Iteration  20: 627408.918 ops/s
# Warmup Iteration  21: 659328.420 ops/s
# Warmup Iteration  22: 640912.778 ops/s
# Warmup Iteration  23: 633826.971 ops/s
# Warmup Iteration  24: 657741.698 ops/s
# Warmup Iteration  25: 654479.598 ops/s
# Warmup Iteration  26: 636723.892 ops/s
# Warmup Iteration  27: 667919.187 ops/s
# Warmup Iteration  28: 641765.480 ops/s
# Warmup Iteration  29: 625252.291 ops/s
# Warmup Iteration  30: 680953.046 ops/s
Iteration   1: 640351.326 ops/s
Iteration   2: 667930.346 ops/s
Iteration   3: 626196.088 ops/s
Iteration   4: 644866.784 ops/s
Iteration   5: 677577.843 ops/s
Iteration   6: 642949.294 ops/s
Iteration   7: 666953.535 ops/s
Iteration   8: 642119.261 ops/s
Iteration   9: 641992.914 ops/s
Iteration  10: 664634.841 ops/s
Iteration  11: 635456.316 ops/s
Iteration  12: 670611.000 ops/s
Iteration  13: 654812.249 ops/s
Iteration  14: 632821.376 ops/s
Iteration  15: 671807.758 ops/s
Iteration  16: 632279.787 ops/s
Iteration  17: 647135.658 ops/s
Iteration  18: 667230.337 ops/s
Iteration  19: 622893.780 ops/s
Iteration  20: 678102.541 ops/s
Iteration  21: 674632.580 ops/s
Iteration  22: 642915.395 ops/s
Iteration  23: 656182.713 ops/s
Iteration  24: 639492.505 ops/s
Iteration  25: 656134.649 ops/s
Iteration  26: 642640.834 ops/s
Iteration  27: 664172.601 ops/s
Iteration  28: 637056.906 ops/s
Iteration  29: 652812.294 ops/s
Iteration  30: 653096.978 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerError":
  651595.350 ±(99.9%) 10546.527 ops/s [Average]
  (min, avg, max) = (622893.780, 651595.350, 678102.541), stdev = 15785.547
  CI (99.9%): [641048.822, 662141.877] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_concatMapInnerError  thrpt   30  651595.350 ± 10546.527  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_callableCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_callableCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81166.256 ops/s
# Warmup Iteration   2: 282490.230 ops/s
# Warmup Iteration   3: 391272.008 ops/s
# Warmup Iteration   4: 379358.117 ops/s
# Warmup Iteration   5: 361565.706 ops/s
# Warmup Iteration   6: 384636.179 ops/s
# Warmup Iteration   7: 377407.452 ops/s
# Warmup Iteration   8: 431559.839 ops/s
# Warmup Iteration   9: 420895.370 ops/s
# Warmup Iteration  10: 429746.224 ops/s
# Warmup Iteration  11: 418804.191 ops/s
# Warmup Iteration  12: 424265.204 ops/s
# Warmup Iteration  13: 409040.313 ops/s
# Warmup Iteration  14: 441742.410 ops/s
# Warmup Iteration  15: 436493.831 ops/s
# Warmup Iteration  16: 419091.304 ops/s
# Warmup Iteration  17: 512551.149 ops/s
# Warmup Iteration  18: 520558.890 ops/s
# Warmup Iteration  19: 492418.895 ops/s
# Warmup Iteration  20: 518711.153 ops/s
# Warmup Iteration  21: 487620.303 ops/s
# Warmup Iteration  22: 524585.805 ops/s
# Warmup Iteration  23: 480128.109 ops/s
# Warmup Iteration  24: 490544.530 ops/s
# Warmup Iteration  25: 509869.722 ops/s
# Warmup Iteration  26: 504061.965 ops/s
# Warmup Iteration  27: 520504.038 ops/s
# Warmup Iteration  28: 484333.725 ops/s
# Warmup Iteration  29: 505578.342 ops/s
# Warmup Iteration  30: 507701.955 ops/s
Iteration   1: 488769.394 ops/s
Iteration   2: 513901.871 ops/s
Iteration   3: 493011.941 ops/s
Iteration   4: 508464.192 ops/s
Iteration   5: 515824.655 ops/s
Iteration   6: 493918.443 ops/s
Iteration   7: 510780.441 ops/s
Iteration   8: 486682.312 ops/s
Iteration   9: 518014.947 ops/s
Iteration  10: 497042.665 ops/s
Iteration  11: 521347.800 ops/s
Iteration  12: 490161.428 ops/s
Iteration  13: 506049.083 ops/s
Iteration  14: 513600.943 ops/s
Iteration  15: 507626.106 ops/s
Iteration  16: 493135.430 ops/s
Iteration  17: 498159.817 ops/s
Iteration  18: 514897.690 ops/s
Iteration  19: 498794.365 ops/s
Iteration  20: 489903.585 ops/s
Iteration  21: 519115.315 ops/s
Iteration  22: 514793.956 ops/s
Iteration  23: 494998.402 ops/s
Iteration  24: 513735.243 ops/s
Iteration  25: 516971.718 ops/s
Iteration  26: 495232.569 ops/s
Iteration  27: 517599.867 ops/s
Iteration  28: 520617.465 ops/s
Iteration  29: 487354.596 ops/s
Iteration  30: 522103.592 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_callableCrash":
  505420.328 ±(99.9%) 8014.323 ops/s [Average]
  (min, avg, max) = (486682.312, 505420.328, 522103.592), stdev = 11995.462
  CI (99.9%): [497406.005, 513434.650] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_callableCrash  thrpt   30  505420.328 ± 8014.323  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51849.982 ops/s
# Warmup Iteration   2: 114533.615 ops/s
# Warmup Iteration   3: 305483.195 ops/s
# Warmup Iteration   4: 382741.404 ops/s
# Warmup Iteration   5: 398064.157 ops/s
# Warmup Iteration   6: 361951.647 ops/s
# Warmup Iteration   7: 380866.013 ops/s
# Warmup Iteration   8: 399750.038 ops/s
# Warmup Iteration   9: 367834.421 ops/s
# Warmup Iteration  10: 395406.915 ops/s
# Warmup Iteration  11: 401019.800 ops/s
# Warmup Iteration  12: 397001.205 ops/s
# Warmup Iteration  13: 399633.503 ops/s
# Warmup Iteration  14: 411790.593 ops/s
# Warmup Iteration  15: 387823.896 ops/s
# Warmup Iteration  16: 412193.400 ops/s
# Warmup Iteration  17: 469072.844 ops/s
# Warmup Iteration  18: 447513.177 ops/s
# Warmup Iteration  19: 453320.996 ops/s
# Warmup Iteration  20: 460884.538 ops/s
# Warmup Iteration  21: 476433.353 ops/s
# Warmup Iteration  22: 462848.011 ops/s
# Warmup Iteration  23: 471470.215 ops/s
# Warmup Iteration  24: 478943.097 ops/s
# Warmup Iteration  25: 469985.722 ops/s
# Warmup Iteration  26: 474494.426 ops/s
# Warmup Iteration  27: 458199.599 ops/s
# Warmup Iteration  28: 480511.778 ops/s
# Warmup Iteration  29: 459952.926 ops/s
# Warmup Iteration  30: 491078.323 ops/s
Iteration   1: 480307.989 ops/s
Iteration   2: 454940.022 ops/s
Iteration   3: 486225.217 ops/s
Iteration   4: 484999.853 ops/s
Iteration   5: 460849.011 ops/s
Iteration   6: 478758.974 ops/s
Iteration   7: 455611.068 ops/s
Iteration   8: 477294.601 ops/s
Iteration   9: 464037.045 ops/s
Iteration  10: 469841.449 ops/s
Iteration  11: 486211.490 ops/s
Iteration  12: 477321.225 ops/s
Iteration  13: 466829.434 ops/s
Iteration  14: 486517.293 ops/s
Iteration  15: 472468.501 ops/s
Iteration  16: 477844.684 ops/s
Iteration  17: 469343.599 ops/s
Iteration  18: 492837.356 ops/s
Iteration  19: 482227.615 ops/s
Iteration  20: 481792.466 ops/s
Iteration  21: 468256.887 ops/s
Iteration  22: 482042.118 ops/s
Iteration  23: 453253.456 ops/s
Iteration  24: 468897.269 ops/s
Iteration  25: 494329.886 ops/s
Iteration  26: 462713.439 ops/s
Iteration  27: 472740.556 ops/s
Iteration  28: 469538.337 ops/s
Iteration  29: 464372.320 ops/s
Iteration  30: 471795.866 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError2":
  473806.634 ±(99.9%) 7274.229 ops/s [Average]
  (min, avg, max) = (453253.456, 473806.634, 494329.886), stdev = 10887.724
  CI (99.9%): [466532.405, 481080.863] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_immediateInnerNextOuterError2  thrpt   30  473806.634 ± 7274.229  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastWithElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastWithElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 920563.839 ops/s
# Warmup Iteration   2: 4741406.294 ops/s
# Warmup Iteration   3: 8238061.452 ops/s
# Warmup Iteration   4: 7784249.593 ops/s
# Warmup Iteration   5: 7971114.359 ops/s
# Warmup Iteration   6: 6706043.157 ops/s
# Warmup Iteration   7: 8132101.001 ops/s
# Warmup Iteration   8: 8267369.600 ops/s
# Warmup Iteration   9: 7939090.760 ops/s
# Warmup Iteration  10: 8042037.247 ops/s
# Warmup Iteration  11: 8043036.708 ops/s
# Warmup Iteration  12: 8163996.700 ops/s
# Warmup Iteration  13: 8266320.403 ops/s
# Warmup Iteration  14: 8024195.940 ops/s
# Warmup Iteration  15: 8095314.817 ops/s
# Warmup Iteration  16: 8338051.486 ops/s
# Warmup Iteration  17: 7994696.431 ops/s
# Warmup Iteration  18: 7937092.415 ops/s
# Warmup Iteration  19: 8185157.472 ops/s
# Warmup Iteration  20: 7835889.898 ops/s
# Warmup Iteration  21: 8393882.130 ops/s
# Warmup Iteration  22: 7954843.097 ops/s
# Warmup Iteration  23: 8162947.555 ops/s
# Warmup Iteration  24: 7954451.148 ops/s
# Warmup Iteration  25: 7894616.967 ops/s
# Warmup Iteration  26: 8126877.547 ops/s
# Warmup Iteration  27: 7879488.134 ops/s
# Warmup Iteration  28: 8153778.852 ops/s
# Warmup Iteration  29: 7966393.795 ops/s
# Warmup Iteration  30: 8060093.696 ops/s
Iteration   1: 8500219.279 ops/s
Iteration   2: 8134368.550 ops/s
Iteration   3: 7924299.447 ops/s
Iteration   4: 8228930.535 ops/s
Iteration   5: 7836514.189 ops/s
Iteration   6: 8240021.534 ops/s
Iteration   7: 8283455.455 ops/s
Iteration   8: 7943517.706 ops/s
Iteration   9: 8182735.524 ops/s
Iteration  10: 7945083.828 ops/s
Iteration  11: 8180887.675 ops/s
Iteration  12: 7762928.919 ops/s
Iteration  13: 8168479.208 ops/s
Iteration  14: 8231890.741 ops/s
Iteration  15: 7846490.292 ops/s
Iteration  16: 8034896.091 ops/s
Iteration  17: 8211016.236 ops/s
Iteration  18: 7742200.460 ops/s
Iteration  19: 8058865.925 ops/s
Iteration  20: 7893012.956 ops/s
Iteration  21: 7949697.474 ops/s
Iteration  22: 8255281.378 ops/s
Iteration  23: 7951062.048 ops/s
Iteration  24: 8277623.715 ops/s
Iteration  25: 7865054.601 ops/s
Iteration  26: 8142646.546 ops/s
Iteration  27: 8119353.579 ops/s
Iteration  28: 8145648.398 ops/s
Iteration  29: 7901314.202 ops/s
Iteration  30: 7956319.560 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastWithElements":
  8063793.868 ±(99.9%) 121761.542 ops/s [Average]
  (min, avg, max) = (7742200.460, 8063793.868, 8500219.279), stdev = 182246.957
  CI (99.9%): [7942032.327, 8185555.410] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
FlowableLastTest._Benchmark.benchmark_lastWithElements  thrpt   30  8063793.868 ± 121761.542  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastMultiSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastMultiSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 820480.828 ops/s
# Warmup Iteration   2: 2714720.232 ops/s
# Warmup Iteration   3: 3421194.306 ops/s
# Warmup Iteration   4: 4044378.879 ops/s
# Warmup Iteration   5: 3910806.279 ops/s
# Warmup Iteration   6: 4038494.679 ops/s
# Warmup Iteration   7: 4111668.911 ops/s
# Warmup Iteration   8: 3926182.737 ops/s
# Warmup Iteration   9: 4035771.652 ops/s
# Warmup Iteration  10: 4007533.750 ops/s
# Warmup Iteration  11: 3926938.650 ops/s
# Warmup Iteration  12: 4155653.046 ops/s
# Warmup Iteration  13: 3871405.382 ops/s
# Warmup Iteration  14: 4055922.524 ops/s
# Warmup Iteration  15: 3955113.887 ops/s
# Warmup Iteration  16: 4035653.266 ops/s
# Warmup Iteration  17: 4054493.102 ops/s
# Warmup Iteration  18: 3933707.967 ops/s
# Warmup Iteration  19: 4186260.557 ops/s
# Warmup Iteration  20: 3937690.570 ops/s
# Warmup Iteration  21: 3988729.961 ops/s
# Warmup Iteration  22: 4100412.979 ops/s
# Warmup Iteration  23: 3923818.415 ops/s
# Warmup Iteration  24: 3944436.924 ops/s
# Warmup Iteration  25: 4070824.779 ops/s
# Warmup Iteration  26: 3778203.545 ops/s
# Warmup Iteration  27: 4041961.771 ops/s
# Warmup Iteration  28: 4014415.213 ops/s
# Warmup Iteration  29: 3917685.162 ops/s
# Warmup Iteration  30: 4110326.318 ops/s
Iteration   1: 3999003.182 ops/s
Iteration   2: 4065118.357 ops/s
Iteration   3: 4116427.761 ops/s
Iteration   4: 3967622.694 ops/s
Iteration   5: 3954327.695 ops/s
Iteration   6: 3921488.108 ops/s
Iteration   7: 4043732.882 ops/s
Iteration   8: 4116048.625 ops/s
Iteration   9: 3897552.415 ops/s
Iteration  10: 4125029.040 ops/s
Iteration  11: 4114901.943 ops/s
Iteration  12: 3956635.897 ops/s
Iteration  13: 4162855.084 ops/s
Iteration  14: 4067016.565 ops/s
Iteration  15: 3842428.318 ops/s
Iteration  16: 3972726.551 ops/s
Iteration  17: 4037080.693 ops/s
Iteration  18: 3995762.058 ops/s
Iteration  19: 4054861.690 ops/s
Iteration  20: 3971713.506 ops/s
Iteration  21: 4118672.870 ops/s
Iteration  22: 3938855.755 ops/s
Iteration  23: 4194380.070 ops/s
Iteration  24: 3839013.471 ops/s
Iteration  25: 3974089.595 ops/s
Iteration  26: 4145882.511 ops/s
Iteration  27: 3842099.583 ops/s
Iteration  28: 3346381.251 ops/s
Iteration  29: 4154135.603 ops/s
Iteration  30: 4014701.327 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableLastTest._Benchmark.benchmark_lastMultiSubscribe":
  3998351.503 ±(99.9%) 105637.329 ops/s [Average]
  (min, avg, max) = (3346381.251, 3998351.503, 4194380.070), stdev = 158112.994
  CI (99.9%): [3892714.174, 4103988.833] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
FlowableLastTest._Benchmark.benchmark_lastMultiSubscribe  thrpt   30  3998351.503 ± 105637.329  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToStringFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToStringFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 569472.072 ops/s
# Warmup Iteration   2: 2925148.979 ops/s
# Warmup Iteration   3: 3437388.095 ops/s
# Warmup Iteration   4: 3791785.226 ops/s
# Warmup Iteration   5: 3951619.882 ops/s
# Warmup Iteration   6: 3976482.832 ops/s
# Warmup Iteration   7: 3930135.612 ops/s
# Warmup Iteration   8: 3896356.764 ops/s
# Warmup Iteration   9: 3918850.545 ops/s
# Warmup Iteration  10: 3875218.869 ops/s
# Warmup Iteration  11: 3910774.599 ops/s
# Warmup Iteration  12: 3877386.886 ops/s
# Warmup Iteration  13: 3848491.920 ops/s
# Warmup Iteration  14: 3995880.910 ops/s
# Warmup Iteration  15: 3984010.436 ops/s
# Warmup Iteration  16: 3934765.354 ops/s
# Warmup Iteration  17: 3851506.705 ops/s
# Warmup Iteration  18: 3912188.679 ops/s
# Warmup Iteration  19: 3987774.596 ops/s
# Warmup Iteration  20: 3884636.349 ops/s
# Warmup Iteration  21: 3975777.592 ops/s
# Warmup Iteration  22: 3776580.708 ops/s
# Warmup Iteration  23: 4076960.859 ops/s
# Warmup Iteration  24: 3997888.760 ops/s
# Warmup Iteration  25: 3822189.856 ops/s
# Warmup Iteration  26: 4107594.897 ops/s
# Warmup Iteration  27: 3938119.782 ops/s
# Warmup Iteration  28: 3858414.877 ops/s
# Warmup Iteration  29: 3927519.882 ops/s
# Warmup Iteration  30: 3915927.850 ops/s
Iteration   1: 3923187.680 ops/s
Iteration   2: 3916520.618 ops/s
Iteration   3: 3920213.638 ops/s
Iteration   4: 3897655.217 ops/s
Iteration   5: 3872863.674 ops/s
Iteration   6: 4048500.163 ops/s
Iteration   7: 3768240.910 ops/s
Iteration   8: 3804226.737 ops/s
Iteration   9: 4031816.071 ops/s
Iteration  10: 3925879.626 ops/s
Iteration  11: 3802140.379 ops/s
Iteration  12: 4014406.525 ops/s
Iteration  13: 3852468.493 ops/s
Iteration  14: 3876714.182 ops/s
Iteration  15: 3863815.887 ops/s
Iteration  16: 3739806.259 ops/s
Iteration  17: 4015569.905 ops/s
Iteration  18: 3820171.115 ops/s
Iteration  19: 3829953.235 ops/s
Iteration  20: 4169924.629 ops/s
Iteration  21: 3803092.740 ops/s
Iteration  22: 3989567.452 ops/s
Iteration  23: 3881669.381 ops/s
Iteration  24: 3830363.983 ops/s
Iteration  25: 3938673.089 ops/s
Iteration  26: 3869458.533 ops/s
Iteration  27: 3863707.571 ops/s
Iteration  28: 4008566.670 ops/s
Iteration  29: 3838262.773 ops/s
Iteration  30: 4062104.553 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToStringFlowable":
  3905984.723 ±(99.9%) 66310.666 ops/s [Average]
  (min, avg, max) = (3739806.259, 3905984.723, 4169924.629), stdev = 99250.690
  CI (99.9%): [3839674.057, 3972295.389] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_collectToStringFlowable  thrpt   30  3905984.723 ± 66310.666  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_asyncFusion$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_asyncFusion

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 740283.564 ops/s
# Warmup Iteration   2: 3294959.065 ops/s
# Warmup Iteration   3: 4222698.561 ops/s
# Warmup Iteration   4: 4948857.758 ops/s
# Warmup Iteration   5: 5107468.362 ops/s
# Warmup Iteration   6: 4914018.504 ops/s
# Warmup Iteration   7: 5069755.523 ops/s
# Warmup Iteration   8: 5203034.678 ops/s
# Warmup Iteration   9: 4877107.028 ops/s
# Warmup Iteration  10: 5090498.208 ops/s
# Warmup Iteration  11: 4972314.707 ops/s
# Warmup Iteration  12: 5146852.662 ops/s
# Warmup Iteration  13: 4840068.708 ops/s
# Warmup Iteration  14: 5186051.462 ops/s
# Warmup Iteration  15: 5100003.665 ops/s
# Warmup Iteration  16: 5103644.455 ops/s
# Warmup Iteration  17: 5021382.714 ops/s
# Warmup Iteration  18: 4935462.820 ops/s
# Warmup Iteration  19: 5183920.668 ops/s
# Warmup Iteration  20: 4925595.776 ops/s
# Warmup Iteration  21: 5202226.229 ops/s
# Warmup Iteration  22: 5163320.376 ops/s
# Warmup Iteration  23: 5012111.808 ops/s
# Warmup Iteration  24: 4903947.267 ops/s
# Warmup Iteration  25: 5079388.092 ops/s
# Warmup Iteration  26: 5155189.433 ops/s
# Warmup Iteration  27: 4945431.599 ops/s
# Warmup Iteration  28: 5032462.912 ops/s
# Warmup Iteration  29: 5094494.316 ops/s
# Warmup Iteration  30: 5207110.555 ops/s
Iteration   1: 4979950.593 ops/s
Iteration   2: 5019202.585 ops/s
Iteration   3: 5086289.357 ops/s
Iteration   4: 5006986.459 ops/s
Iteration   5: 5132288.006 ops/s
Iteration   6: 4828404.806 ops/s
Iteration   7: 5127545.413 ops/s
Iteration   8: 5330350.481 ops/s
Iteration   9: 4926572.314 ops/s
Iteration  10: 5065244.454 ops/s
Iteration  11: 5235077.853 ops/s
Iteration  12: 4999722.360 ops/s
Iteration  13: 5156709.534 ops/s
Iteration  14: 5034746.688 ops/s
Iteration  15: 5006454.399 ops/s
Iteration  16: 5330501.530 ops/s
Iteration  17: 4957662.401 ops/s
Iteration  18: 5206216.671 ops/s
Iteration  19: 5242921.534 ops/s
Iteration  20: 5158115.809 ops/s
Iteration  21: 4967376.713 ops/s
Iteration  22: 4152087.069 ops/s
Iteration  23: 5059236.330 ops/s
Iteration  24: 5108240.868 ops/s
Iteration  25: 5041735.004 ops/s
Iteration  26: 5085472.169 ops/s
Iteration  27: 5000253.244 ops/s
Iteration  28: 4984010.795 ops/s
Iteration  29: 5047890.709 ops/s
Iteration  30: 5223230.488 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_asyncFusion":
  5050016.554 ±(99.9%) 137623.851 ops/s [Average]
  (min, avg, max) = (4152087.069, 5050016.554, 5330501.530), stdev = 205988.917
  CI (99.9%): [4912392.703, 5187640.406] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
FlowableFromMaybeTest._Benchmark.benchmark_asyncFusion  thrpt   30  5050016.554 ± 137623.851  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_followingFirstFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_followingFirstFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1692093.506 ops/s
# Warmup Iteration   2: 4532806.263 ops/s
# Warmup Iteration   3: 4478917.592 ops/s
# Warmup Iteration   4: 5363174.467 ops/s
# Warmup Iteration   5: 5394667.001 ops/s
# Warmup Iteration   6: 5288579.034 ops/s
# Warmup Iteration   7: 5248925.195 ops/s
# Warmup Iteration   8: 5591200.104 ops/s
# Warmup Iteration   9: 5580330.371 ops/s
# Warmup Iteration  10: 5070533.511 ops/s
# Warmup Iteration  11: 5379608.683 ops/s
# Warmup Iteration  12: 5496755.116 ops/s
# Warmup Iteration  13: 5206594.453 ops/s
# Warmup Iteration  14: 5414525.880 ops/s
# Warmup Iteration  15: 5605124.570 ops/s
# Warmup Iteration  16: 5267688.809 ops/s
# Warmup Iteration  17: 5386158.457 ops/s
# Warmup Iteration  18: 5540571.126 ops/s
# Warmup Iteration  19: 5186706.675 ops/s
# Warmup Iteration  20: 5504169.217 ops/s
# Warmup Iteration  21: 5296217.826 ops/s
# Warmup Iteration  22: 5407565.504 ops/s
# Warmup Iteration  23: 5129659.501 ops/s
# Warmup Iteration  24: 5360080.885 ops/s
# Warmup Iteration  25: 5466331.244 ops/s
# Warmup Iteration  26: 5256351.225 ops/s
# Warmup Iteration  27: 5437797.527 ops/s
# Warmup Iteration  28: 5343715.763 ops/s
# Warmup Iteration  29: 5408147.371 ops/s
# Warmup Iteration  30: 5502665.931 ops/s
Iteration   1: 5230057.394 ops/s
Iteration   2: 5287851.892 ops/s
Iteration   3: 5565608.649 ops/s
Iteration   4: 5376934.119 ops/s
Iteration   5: 5523269.662 ops/s
Iteration   6: 5522738.500 ops/s
Iteration   7: 5266405.102 ops/s
Iteration   8: 5577140.710 ops/s
Iteration   9: 5251016.076 ops/s
Iteration  10: 5360964.895 ops/s
Iteration  11: 5620323.674 ops/s
Iteration  12: 5398811.060 ops/s
Iteration  13: 5256410.344 ops/s
Iteration  14: 5460517.294 ops/s
Iteration  15: 5295238.827 ops/s
Iteration  16: 5385157.820 ops/s
Iteration  17: 5398339.628 ops/s
Iteration  18: 5235218.123 ops/s
Iteration  19: 5300822.528 ops/s
Iteration  20: 5473882.055 ops/s
Iteration  21: 5239022.524 ops/s
Iteration  22: 5344317.808 ops/s
Iteration  23: 5346514.113 ops/s
Iteration  24: 5376874.070 ops/s
Iteration  25: 5228879.134 ops/s
Iteration  26: 5172074.495 ops/s
Iteration  27: 5582672.249 ops/s
Iteration  28: 5543934.538 ops/s
Iteration  29: 5667004.201 ops/s
Iteration  30: 5201827.447 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_followingFirstFlowable":
  5382994.298 ±(99.9%) 93561.207 ops/s [Average]
  (min, avg, max) = (5172074.495, 5382994.298, 5667004.201), stdev = 140038.020
  CI (99.9%): [5289433.091, 5476555.504] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableAllTest._Benchmark.benchmark_followingFirstFlowable  thrpt   30  5382994.298 ± 93561.207  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToListFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToListFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 303724.736 ops/s
# Warmup Iteration   2: 1834019.486 ops/s
# Warmup Iteration   3: 2218236.247 ops/s
# Warmup Iteration   4: 2799323.005 ops/s
# Warmup Iteration   5: 2662205.152 ops/s
# Warmup Iteration   6: 2641017.576 ops/s
# Warmup Iteration   7: 2828851.304 ops/s
# Warmup Iteration   8: 2669023.491 ops/s
# Warmup Iteration   9: 2750163.560 ops/s
# Warmup Iteration  10: 2708485.295 ops/s
# Warmup Iteration  11: 2671242.139 ops/s
# Warmup Iteration  12: 2767549.594 ops/s
# Warmup Iteration  13: 2685853.783 ops/s
# Warmup Iteration  14: 2786541.591 ops/s
# Warmup Iteration  15: 2642828.278 ops/s
# Warmup Iteration  16: 2743524.622 ops/s
# Warmup Iteration  17: 2719079.758 ops/s
# Warmup Iteration  18: 2742246.690 ops/s
# Warmup Iteration  19: 2795908.370 ops/s
# Warmup Iteration  20: 2655150.517 ops/s
# Warmup Iteration  21: 2832933.599 ops/s
# Warmup Iteration  22: 2673493.534 ops/s
# Warmup Iteration  23: 2671201.540 ops/s
# Warmup Iteration  24: 2728117.416 ops/s
# Warmup Iteration  25: 2738027.693 ops/s
# Warmup Iteration  26: 2656414.473 ops/s
# Warmup Iteration  27: 2816532.921 ops/s
# Warmup Iteration  28: 2685281.227 ops/s
# Warmup Iteration  29: 2752220.046 ops/s
# Warmup Iteration  30: 2797394.541 ops/s
Iteration   1: 2657872.348 ops/s
Iteration   2: 2756089.589 ops/s
Iteration   3: 2690792.861 ops/s
Iteration   4: 2724612.083 ops/s
Iteration   5: 2786185.888 ops/s
Iteration   6: 2698640.477 ops/s
Iteration   7: 2703891.686 ops/s
Iteration   8: 2806455.066 ops/s
Iteration   9: 2638612.901 ops/s
Iteration  10: 2768411.620 ops/s
Iteration  11: 2692689.723 ops/s
Iteration  12: 2775863.423 ops/s
Iteration  13: 2768539.019 ops/s
Iteration  14: 2552812.262 ops/s
Iteration  15: 2820210.058 ops/s
Iteration  16: 2281118.877 ops/s
Iteration  17: 2442783.021 ops/s
Iteration  18: 2855533.856 ops/s
Iteration  19: 2721924.375 ops/s
Iteration  20: 2772326.444 ops/s
Iteration  21: 2609425.624 ops/s
Iteration  22: 2751883.864 ops/s
Iteration  23: 2812152.045 ops/s
Iteration  24: 2624464.199 ops/s
Iteration  25: 2794514.801 ops/s
Iteration  26: 2594117.708 ops/s
Iteration  27: 2897200.772 ops/s
Iteration  28: 2626004.613 ops/s
Iteration  29: 2704672.835 ops/s
Iteration  30: 2838682.384 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToListFlowable":
  2705616.147 ±(99.9%) 84417.254 ops/s [Average]
  (min, avg, max) = (2281118.877, 2705616.147, 2897200.772), stdev = 126351.781
  CI (99.9%): [2621198.893, 2790033.402] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_collectToListFlowable  thrpt   30  2705616.147 ± 84417.254  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingLastNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingLastNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2221850.876 ops/s
# Warmup Iteration   2: 6979547.715 ops/s
# Warmup Iteration   3: 9076900.424 ops/s
# Warmup Iteration   4: 8584661.277 ops/s
# Warmup Iteration   5: 8862248.406 ops/s
# Warmup Iteration   6: 8664946.132 ops/s
# Warmup Iteration   7: 8686787.816 ops/s
# Warmup Iteration   8: 8371417.989 ops/s
# Warmup Iteration   9: 8755345.607 ops/s
# Warmup Iteration  10: 9156917.648 ops/s
# Warmup Iteration  11: 7877616.597 ops/s
# Warmup Iteration  12: 8921350.791 ops/s
# Warmup Iteration  13: 8969968.246 ops/s
# Warmup Iteration  14: 8910683.657 ops/s
# Warmup Iteration  15: 8940641.199 ops/s
# Warmup Iteration  16: 9066798.087 ops/s
# Warmup Iteration  17: 8647987.333 ops/s
# Warmup Iteration  18: 8949318.529 ops/s
# Warmup Iteration  19: 8992449.813 ops/s
# Warmup Iteration  20: 8669129.022 ops/s
# Warmup Iteration  21: 8676445.081 ops/s
# Warmup Iteration  22: 8998961.370 ops/s
# Warmup Iteration  23: 8762011.643 ops/s
# Warmup Iteration  24: 8805869.137 ops/s
# Warmup Iteration  25: 9045941.272 ops/s
# Warmup Iteration  26: 8689674.431 ops/s
# Warmup Iteration  27: 8887246.354 ops/s
# Warmup Iteration  28: 8918883.101 ops/s
# Warmup Iteration  29: 9078912.277 ops/s
# Warmup Iteration  30: 9205195.823 ops/s
Iteration   1: 8809992.037 ops/s
Iteration   2: 9125324.471 ops/s
Iteration   3: 8682060.363 ops/s
Iteration   4: 9084066.572 ops/s
Iteration   5: 9283383.157 ops/s
Iteration   6: 8597542.266 ops/s
Iteration   7: 9302141.562 ops/s
Iteration   8: 8685448.724 ops/s
Iteration   9: 9161530.356 ops/s
Iteration  10: 8677963.166 ops/s
Iteration  11: 8871982.101 ops/s
Iteration  12: 9087786.932 ops/s
Iteration  13: 8559262.935 ops/s
Iteration  14: 9226125.818 ops/s
Iteration  15: 8864230.872 ops/s
Iteration  16: 8511695.335 ops/s
Iteration  17: 9311383.390 ops/s
Iteration  18: 8747576.221 ops/s
Iteration  19: 8854972.803 ops/s
Iteration  20: 9032554.837 ops/s
Iteration  21: 8831725.887 ops/s
Iteration  22: 8876696.189 ops/s
Iteration  23: 9077291.883 ops/s
Iteration  24: 8968528.149 ops/s
Iteration  25: 8558047.680 ops/s
Iteration  26: 9363426.946 ops/s
Iteration  27: 8770679.241 ops/s
Iteration  28: 8975341.630 ops/s
Iteration  29: 8942941.337 ops/s
Iteration  30: 8777932.170 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingLastNormal":
  8920654.501 ±(99.9%) 163002.086 ops/s [Average]
  (min, avg, max) = (8511695.335, 8920654.501, 9363426.946), stdev = 243973.867
  CI (99.9%): [8757652.415, 9083656.587] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
FlowableBlockingTest._Benchmark.benchmark_blockingLastNormal  thrpt   30  8920654.501 ± 163002.086  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceIntsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceIntsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 786264.836 ops/s
# Warmup Iteration   2: 4302262.380 ops/s
# Warmup Iteration   3: 5423074.365 ops/s
# Warmup Iteration   4: 5930740.329 ops/s
# Warmup Iteration   5: 6347288.243 ops/s
# Warmup Iteration   6: 6115573.967 ops/s
# Warmup Iteration   7: 6139820.554 ops/s
# Warmup Iteration   8: 6149708.077 ops/s
# Warmup Iteration   9: 6304441.115 ops/s
# Warmup Iteration  10: 6037888.934 ops/s
# Warmup Iteration  11: 6243648.313 ops/s
# Warmup Iteration  12: 6077431.588 ops/s
# Warmup Iteration  13: 6174750.390 ops/s
# Warmup Iteration  14: 6299075.017 ops/s
# Warmup Iteration  15: 6084183.377 ops/s
# Warmup Iteration  16: 6160144.463 ops/s
# Warmup Iteration  17: 5954526.631 ops/s
# Warmup Iteration  18: 6303395.732 ops/s
# Warmup Iteration  19: 5993578.053 ops/s
# Warmup Iteration  20: 6127305.743 ops/s
# Warmup Iteration  21: 6303852.962 ops/s
# Warmup Iteration  22: 6123371.891 ops/s
# Warmup Iteration  23: 6182073.213 ops/s
# Warmup Iteration  24: 5932609.871 ops/s
# Warmup Iteration  25: 5944729.709 ops/s
# Warmup Iteration  26: 6315270.470 ops/s
# Warmup Iteration  27: 6002145.619 ops/s
# Warmup Iteration  28: 5995864.978 ops/s
# Warmup Iteration  29: 6361908.276 ops/s
# Warmup Iteration  30: 5951783.242 ops/s
Iteration   1: 6423330.595 ops/s
Iteration   2: 6119537.574 ops/s
Iteration   3: 6007901.215 ops/s
Iteration   4: 6292521.875 ops/s
Iteration   5: 6213725.667 ops/s
Iteration   6: 6127396.853 ops/s
Iteration   7: 6127944.026 ops/s
Iteration   8: 6130285.058 ops/s
Iteration   9: 6317056.812 ops/s
Iteration  10: 5993309.293 ops/s
Iteration  11: 4954179.871 ops/s
Iteration  12: 6061882.460 ops/s
Iteration  13: 6414286.141 ops/s
Iteration  14: 6329373.702 ops/s
Iteration  15: 5935451.546 ops/s
Iteration  16: 6257394.023 ops/s
Iteration  17: 6078215.489 ops/s
Iteration  18: 6145270.438 ops/s
Iteration  19: 6277726.756 ops/s
Iteration  20: 6114560.105 ops/s
Iteration  21: 6237472.673 ops/s
Iteration  22: 6073265.706 ops/s
Iteration  23: 6313866.430 ops/s
Iteration  24: 6039488.918 ops/s
Iteration  25: 6077975.415 ops/s
Iteration  26: 6418920.142 ops/s
Iteration  27: 6099443.547 ops/s
Iteration  28: 6073158.286 ops/s
Iteration  29: 6312756.706 ops/s
Iteration  30: 6121459.509 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceIntsFlowable":
  6136305.228 ±(99.9%) 173442.446 ops/s [Average]
  (min, avg, max) = (4954179.871, 6136305.228, 6423330.595), stdev = 259600.508
  CI (99.9%): [5962862.782, 6309747.674] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
FlowableReduceTests._Benchmark.benchmark_reduceIntsFlowable  thrpt   30  6136305.228 ± 173442.446  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceInts$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceInts

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1158939.121 ops/s
# Warmup Iteration   2: 4742401.564 ops/s
# Warmup Iteration   3: 5375095.331 ops/s
# Warmup Iteration   4: 5997277.454 ops/s
# Warmup Iteration   5: 6322007.226 ops/s
# Warmup Iteration   6: 5988583.049 ops/s
# Warmup Iteration   7: 6210491.512 ops/s
# Warmup Iteration   8: 6427277.222 ops/s
# Warmup Iteration   9: 6061432.392 ops/s
# Warmup Iteration  10: 6409597.106 ops/s
# Warmup Iteration  11: 6037431.672 ops/s
# Warmup Iteration  12: 6168801.380 ops/s
# Warmup Iteration  13: 6442839.094 ops/s
# Warmup Iteration  14: 6137285.591 ops/s
# Warmup Iteration  15: 6028270.297 ops/s
# Warmup Iteration  16: 6434328.557 ops/s
# Warmup Iteration  17: 6040455.417 ops/s
# Warmup Iteration  18: 6131073.936 ops/s
# Warmup Iteration  19: 6215259.235 ops/s
# Warmup Iteration  20: 6270914.317 ops/s
# Warmup Iteration  21: 6352552.151 ops/s
# Warmup Iteration  22: 6093496.749 ops/s
# Warmup Iteration  23: 6115779.925 ops/s
# Warmup Iteration  24: 6334894.336 ops/s
# Warmup Iteration  25: 5867472.269 ops/s
# Warmup Iteration  26: 6159741.903 ops/s
# Warmup Iteration  27: 6298752.569 ops/s
# Warmup Iteration  28: 6259933.756 ops/s
# Warmup Iteration  29: 6109920.234 ops/s
# Warmup Iteration  30: 6287370.348 ops/s
Iteration   1: 6063771.669 ops/s
Iteration   2: 6280997.547 ops/s
Iteration   3: 5931018.787 ops/s
Iteration   4: 6409280.367 ops/s
Iteration   5: 6116252.731 ops/s
Iteration   6: 6080176.363 ops/s
Iteration   7: 6325949.704 ops/s
Iteration   8: 5978563.930 ops/s
Iteration   9: 6402552.172 ops/s
Iteration  10: 6026795.639 ops/s
Iteration  11: 6284536.673 ops/s
Iteration  12: 6270116.029 ops/s
Iteration  13: 6029546.501 ops/s
Iteration  14: 6482595.747 ops/s
Iteration  15: 6142016.347 ops/s
Iteration  16: 6226571.190 ops/s
Iteration  17: 6127824.434 ops/s
Iteration  18: 6387642.264 ops/s
Iteration  19: 6130669.625 ops/s
Iteration  20: 6440032.650 ops/s
Iteration  21: 6085720.820 ops/s
Iteration  22: 6264893.393 ops/s
Iteration  23: 6199389.915 ops/s
Iteration  24: 6124065.255 ops/s
Iteration  25: 6473516.109 ops/s
Iteration  26: 6094015.242 ops/s
Iteration  27: 6374838.491 ops/s
Iteration  28: 5976614.076 ops/s
Iteration  29: 6367699.111 ops/s
Iteration  30: 6201442.852 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableReduceTests._Benchmark.benchmark_reduceInts":
  6209970.188 ±(99.9%) 106807.628 ops/s [Average]
  (min, avg, max) = (5931018.787, 6209970.188, 6482595.747), stdev = 159864.641
  CI (99.9%): [6103162.560, 6316777.816] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
FlowableReduceTests._Benchmark.benchmark_reduceInts  thrpt   30  6209970.188 ± 106807.628  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBoundsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBoundsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1677053.018 ops/s
# Warmup Iteration   2: 5041484.167 ops/s
# Warmup Iteration   3: 5679860.556 ops/s
# Warmup Iteration   4: 7043576.473 ops/s
# Warmup Iteration   5: 7076411.485 ops/s
# Warmup Iteration   6: 6815831.098 ops/s
# Warmup Iteration   7: 6748457.829 ops/s
# Warmup Iteration   8: 7047552.745 ops/s
# Warmup Iteration   9: 6580394.472 ops/s
# Warmup Iteration  10: 7031316.764 ops/s
# Warmup Iteration  11: 6840787.324 ops/s
# Warmup Iteration  12: 6563355.238 ops/s
# Warmup Iteration  13: 7144385.755 ops/s
# Warmup Iteration  14: 7132443.602 ops/s
# Warmup Iteration  15: 6702857.423 ops/s
# Warmup Iteration  16: 7045679.513 ops/s
# Warmup Iteration  17: 6884100.382 ops/s
# Warmup Iteration  18: 6841931.964 ops/s
# Warmup Iteration  19: 7020661.525 ops/s
# Warmup Iteration  20: 6852250.330 ops/s
# Warmup Iteration  21: 6979917.302 ops/s
# Warmup Iteration  22: 6738655.438 ops/s
# Warmup Iteration  23: 6850232.322 ops/s
# Warmup Iteration  24: 7233134.406 ops/s
# Warmup Iteration  25: 6570306.176 ops/s
# Warmup Iteration  26: 6947639.003 ops/s
# Warmup Iteration  27: 6814283.261 ops/s
# Warmup Iteration  28: 6874597.882 ops/s
# Warmup Iteration  29: 6847984.352 ops/s
# Warmup Iteration  30: 6608175.988 ops/s
Iteration   1: 7116190.541 ops/s
Iteration   2: 6647187.793 ops/s
Iteration   3: 6952781.284 ops/s
Iteration   4: 6730282.920 ops/s
Iteration   5: 5562637.740 ops/s
Iteration   6: 6852834.365 ops/s
Iteration   7: 7200640.067 ops/s
Iteration   8: 7090959.398 ops/s
Iteration   9: 6779477.185 ops/s
Iteration  10: 6607542.433 ops/s
Iteration  11: 7047805.114 ops/s
Iteration  12: 6908935.389 ops/s
Iteration  13: 6799458.155 ops/s
Iteration  14: 6894289.739 ops/s
Iteration  15: 6796479.001 ops/s
Iteration  16: 6972261.188 ops/s
Iteration  17: 6811157.475 ops/s
Iteration  18: 7086601.176 ops/s
Iteration  19: 6895122.794 ops/s
Iteration  20: 7179067.844 ops/s
Iteration  21: 6672381.307 ops/s
Iteration  22: 7031831.659 ops/s
Iteration  23: 6789769.802 ops/s
Iteration  24: 6761223.343 ops/s
Iteration  25: 7077025.465 ops/s
Iteration  26: 6597610.272 ops/s
Iteration  27: 7162875.192 ops/s
Iteration  28: 6742652.947 ops/s
Iteration  29: 7143687.863 ops/s
Iteration  30: 6751709.509 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBoundsFlowable":
  6855415.965 ±(99.9%) 202630.190 ops/s [Average]
  (min, avg, max) = (5562637.740, 6855415.965, 7200640.067), stdev = 303287.352
  CI (99.9%): [6652785.775, 7058046.155] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBoundsFlowable  thrpt   30  6855415.965 ± 202630.190  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_withFollowingFirstFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_withFollowingFirstFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 785146.581 ops/s
# Warmup Iteration   2: 3833269.077 ops/s
# Warmup Iteration   3: 5237789.547 ops/s
# Warmup Iteration   4: 4955722.916 ops/s
# Warmup Iteration   5: 5271623.219 ops/s
# Warmup Iteration   6: 4898879.693 ops/s
# Warmup Iteration   7: 5117891.934 ops/s
# Warmup Iteration   8: 5200175.645 ops/s
# Warmup Iteration   9: 4964154.206 ops/s
# Warmup Iteration  10: 4656549.868 ops/s
# Warmup Iteration  11: 5079846.509 ops/s
# Warmup Iteration  12: 5206949.859 ops/s
# Warmup Iteration  13: 5224650.283 ops/s
# Warmup Iteration  14: 5156818.173 ops/s
# Warmup Iteration  15: 4953661.192 ops/s
# Warmup Iteration  16: 5024448.814 ops/s
# Warmup Iteration  17: 5364372.798 ops/s
# Warmup Iteration  18: 4776549.507 ops/s
# Warmup Iteration  19: 5312523.754 ops/s
# Warmup Iteration  20: 4991925.397 ops/s
# Warmup Iteration  21: 5335063.010 ops/s
# Warmup Iteration  22: 5056741.222 ops/s
# Warmup Iteration  23: 5044775.764 ops/s
# Warmup Iteration  24: 5157209.659 ops/s
# Warmup Iteration  25: 4915230.748 ops/s
# Warmup Iteration  26: 4977592.642 ops/s
# Warmup Iteration  27: 5287764.898 ops/s
# Warmup Iteration  28: 5022009.554 ops/s
# Warmup Iteration  29: 5293480.024 ops/s
# Warmup Iteration  30: 5054957.673 ops/s
Iteration   1: 5169715.378 ops/s
Iteration   2: 5104396.857 ops/s
Iteration   3: 5282615.878 ops/s
Iteration   4: 5078221.347 ops/s
Iteration   5: 5171866.858 ops/s
Iteration   6: 5106976.706 ops/s
Iteration   7: 5102798.009 ops/s
Iteration   8: 5226508.165 ops/s
Iteration   9: 5117542.615 ops/s
Iteration  10: 5027456.962 ops/s
Iteration  11: 5086054.084 ops/s
Iteration  12: 5375860.130 ops/s
Iteration  13: 5013501.810 ops/s
Iteration  14: 5127671.625 ops/s
Iteration  15: 5080131.445 ops/s
Iteration  16: 5196646.648 ops/s
Iteration  17: 5259400.738 ops/s
Iteration  18: 4963108.997 ops/s
Iteration  19: 5253957.605 ops/s
Iteration  20: 4973085.913 ops/s
Iteration  21: 5329661.514 ops/s
Iteration  22: 4956860.076 ops/s
Iteration  23: 5318008.943 ops/s
Iteration  24: 5366288.781 ops/s
Iteration  25: 5030336.418 ops/s
Iteration  26: 5115058.727 ops/s
Iteration  27: 5233461.647 ops/s
Iteration  28: 5063265.650 ops/s
Iteration  29: 5375421.849 ops/s
Iteration  30: 5010638.570 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_withFollowingFirstFlowable":
  5150550.665 ±(99.9%) 84767.334 ops/s [Average]
  (min, avg, max) = (4956860.076, 5150550.665, 5375860.130), stdev = 126875.765
  CI (99.9%): [5065783.331, 5235317.999] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableAnyTest._Benchmark.benchmark_withFollowingFirstFlowable  thrpt   30  5150550.665 ± 84767.334  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirstNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirstNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2605612.172 ops/s
# Warmup Iteration   2: 6158019.243 ops/s
# Warmup Iteration   3: 6953158.046 ops/s
# Warmup Iteration   4: 7715814.031 ops/s
# Warmup Iteration   5: 7828103.549 ops/s
# Warmup Iteration   6: 7899765.660 ops/s
# Warmup Iteration   7: 8212309.365 ops/s
# Warmup Iteration   8: 8068185.064 ops/s
# Warmup Iteration   9: 7841107.239 ops/s
# Warmup Iteration  10: 8175336.622 ops/s
# Warmup Iteration  11: 7981509.496 ops/s
# Warmup Iteration  12: 7867457.513 ops/s
# Warmup Iteration  13: 7822810.583 ops/s
# Warmup Iteration  14: 7746815.549 ops/s
# Warmup Iteration  15: 8043954.284 ops/s
# Warmup Iteration  16: 7871561.538 ops/s
# Warmup Iteration  17: 7870850.282 ops/s
# Warmup Iteration  18: 8163075.501 ops/s
# Warmup Iteration  19: 7850622.021 ops/s
# Warmup Iteration  20: 8314754.655 ops/s
# Warmup Iteration  21: 7669999.386 ops/s
# Warmup Iteration  22: 7984774.541 ops/s
# Warmup Iteration  23: 7784789.973 ops/s
# Warmup Iteration  24: 7765260.495 ops/s
# Warmup Iteration  25: 8291230.214 ops/s
# Warmup Iteration  26: 7809694.394 ops/s
# Warmup Iteration  27: 8090089.698 ops/s
# Warmup Iteration  28: 8114303.435 ops/s
# Warmup Iteration  29: 7850529.674 ops/s
# Warmup Iteration  30: 6280559.202 ops/s
Iteration   1: 8028741.129 ops/s
Iteration   2: 7730127.033 ops/s
Iteration   3: 8189378.725 ops/s
Iteration   4: 7773856.503 ops/s
Iteration   5: 7942174.238 ops/s
Iteration   6: 8032634.654 ops/s
Iteration   7: 7676622.265 ops/s
Iteration   8: 8045249.887 ops/s
Iteration   9: 7919182.199 ops/s
Iteration  10: 8294803.431 ops/s
Iteration  11: 7961210.823 ops/s
Iteration  12: 7628923.972 ops/s
Iteration  13: 8322207.824 ops/s
Iteration  14: 7727688.483 ops/s
Iteration  15: 7682376.216 ops/s
Iteration  16: 8008005.116 ops/s
Iteration  17: 8209432.904 ops/s
Iteration  18: 7787484.695 ops/s
Iteration  19: 8199299.258 ops/s
Iteration  20: 8290521.199 ops/s
Iteration  21: 8129048.707 ops/s
Iteration  22: 7774618.719 ops/s
Iteration  23: 8170104.685 ops/s
Iteration  24: 7914977.794 ops/s
Iteration  25: 8201478.248 ops/s
Iteration  26: 7814576.346 ops/s
Iteration  27: 7937727.210 ops/s
Iteration  28: 8150406.532 ops/s
Iteration  29: 8075690.459 ops/s
Iteration  30: 7691461.368 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableBlockingTest._Benchmark.benchmark_blockingFirstNormal":
  7977000.354 ±(99.9%) 140722.632 ops/s [Average]
  (min, avg, max) = (7628923.972, 7977000.354, 8322207.824), stdev = 210627.027
  CI (99.9%): [7836277.722, 8117722.986] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
FlowableBlockingTest._Benchmark.benchmark_blockingFirstNormal  thrpt   30  7977000.354 ± 140722.632  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_issue1527Flowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_issue1527Flowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1119975.956 ops/s
# Warmup Iteration   2: 4076158.913 ops/s
# Warmup Iteration   3: 4275785.387 ops/s
# Warmup Iteration   4: 5071663.617 ops/s
# Warmup Iteration   5: 5292545.094 ops/s
# Warmup Iteration   6: 5086774.393 ops/s
# Warmup Iteration   7: 5142516.189 ops/s
# Warmup Iteration   8: 5302914.056 ops/s
# Warmup Iteration   9: 4942477.936 ops/s
# Warmup Iteration  10: 5235167.499 ops/s
# Warmup Iteration  11: 5067276.442 ops/s
# Warmup Iteration  12: 5235058.379 ops/s
# Warmup Iteration  13: 5107674.598 ops/s
# Warmup Iteration  14: 4988522.293 ops/s
# Warmup Iteration  15: 5388324.447 ops/s
# Warmup Iteration  16: 5045311.458 ops/s
# Warmup Iteration  17: 5232542.437 ops/s
# Warmup Iteration  18: 5345539.760 ops/s
# Warmup Iteration  19: 5038488.207 ops/s
# Warmup Iteration  20: 5118098.366 ops/s
# Warmup Iteration  21: 5356782.104 ops/s
# Warmup Iteration  22: 4923983.310 ops/s
# Warmup Iteration  23: 5261337.460 ops/s
# Warmup Iteration  24: 5213270.373 ops/s
# Warmup Iteration  25: 5050859.289 ops/s
# Warmup Iteration  26: 5222710.022 ops/s
# Warmup Iteration  27: 5125853.290 ops/s
# Warmup Iteration  28: 5083994.183 ops/s
# Warmup Iteration  29: 5138749.757 ops/s
# Warmup Iteration  30: 5000297.796 ops/s
Iteration   1: 5348848.693 ops/s
Iteration   2: 4916003.522 ops/s
Iteration   3: 5194075.203 ops/s
Iteration   4: 5037029.129 ops/s
Iteration   5: 5197404.222 ops/s
Iteration   6: 4905301.701 ops/s
Iteration   7: 5314351.699 ops/s
Iteration   8: 5146728.689 ops/s
Iteration   9: 5102497.110 ops/s
Iteration  10: 5331722.815 ops/s
Iteration  11: 5115896.244 ops/s
Iteration  12: 5324142.552 ops/s
Iteration  13: 5021238.984 ops/s
Iteration  14: 5353234.533 ops/s
Iteration  15: 5085345.768 ops/s
Iteration  16: 5020072.498 ops/s
Iteration  17: 5356700.222 ops/s
Iteration  18: 5130128.249 ops/s
Iteration  19: 5340376.790 ops/s
Iteration  20: 5023570.929 ops/s
Iteration  21: 5175816.263 ops/s
Iteration  22: 5288564.549 ops/s
Iteration  23: 5194655.121 ops/s
Iteration  24: 5326179.653 ops/s
Iteration  25: 5185652.322 ops/s
Iteration  26: 5078201.633 ops/s
Iteration  27: 5191425.737 ops/s
Iteration  28: 5056113.856 ops/s
Iteration  29: 5042741.637 ops/s
Iteration  30: 5311741.818 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_issue1527Flowable":
  5170525.405 ±(99.9%) 90668.882 ops/s [Average]
  (min, avg, max) = (4905301.701, 5170525.405, 5356700.222), stdev = 135708.925
  CI (99.9%): [5079856.522, 5261194.287] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableSingleTest._Benchmark.benchmark_issue1527Flowable  thrpt   30  5170525.405 ± 90668.882  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartRequestsAreAdditiveAndOverflowBecomesMaxValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartRequestsAreAdditiveAndOverflowBecomesMaxValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1327407.356 ops/s
# Warmup Iteration   2: 3801698.151 ops/s
# Warmup Iteration   3: 4126975.945 ops/s
# Warmup Iteration   4: 4929735.436 ops/s
# Warmup Iteration   5: 5287154.366 ops/s
# Warmup Iteration   6: 4982890.601 ops/s
# Warmup Iteration   7: 4908567.799 ops/s
# Warmup Iteration   8: 5052750.110 ops/s
# Warmup Iteration   9: 5116590.507 ops/s
# Warmup Iteration  10: 4812037.812 ops/s
# Warmup Iteration  11: 5111119.604 ops/s
# Warmup Iteration  12: 5173068.103 ops/s
# Warmup Iteration  13: 4989987.783 ops/s
# Warmup Iteration  14: 5133666.603 ops/s
# Warmup Iteration  15: 4939236.895 ops/s
# Warmup Iteration  16: 5088763.864 ops/s
# Warmup Iteration  17: 5086745.972 ops/s
# Warmup Iteration  18: 4928844.378 ops/s
# Warmup Iteration  19: 5224627.160 ops/s
# Warmup Iteration  20: 4852027.044 ops/s
# Warmup Iteration  21: 5222037.865 ops/s
# Warmup Iteration  22: 5026623.734 ops/s
# Warmup Iteration  23: 4946775.621 ops/s
# Warmup Iteration  24: 4565721.903 ops/s
# Warmup Iteration  25: 4621268.905 ops/s
# Warmup Iteration  26: 4891214.584 ops/s
# Warmup Iteration  27: 5190290.911 ops/s
# Warmup Iteration  28: 4961915.094 ops/s
# Warmup Iteration  29: 4755418.818 ops/s
# Warmup Iteration  30: 5195046.816 ops/s
Iteration   1: 4893481.798 ops/s
Iteration   2: 5148527.166 ops/s
Iteration   3: 4963773.155 ops/s
Iteration   4: 4991906.096 ops/s
Iteration   5: 5098090.230 ops/s
Iteration   6: 4923232.208 ops/s
Iteration   7: 5254818.223 ops/s
Iteration   8: 4929563.303 ops/s
Iteration   9: 5273668.414 ops/s
Iteration  10: 4925344.766 ops/s
Iteration  11: 5138099.192 ops/s
Iteration  12: 5138939.725 ops/s
Iteration  13: 4803698.063 ops/s
Iteration  14: 5108424.622 ops/s
Iteration  15: 5077583.904 ops/s
Iteration  16: 4988498.241 ops/s
Iteration  17: 5253493.269 ops/s
Iteration  18: 5110308.312 ops/s
Iteration  19: 4930144.564 ops/s
Iteration  20: 5161888.714 ops/s
Iteration  21: 4941548.467 ops/s
Iteration  22: 5127165.483 ops/s
Iteration  23: 4961981.109 ops/s
Iteration  24: 4945306.110 ops/s
Iteration  25: 5223745.178 ops/s
Iteration  26: 4880690.284 ops/s
Iteration  27: 5336174.239 ops/s
Iteration  28: 5027561.800 ops/s
Iteration  29: 4911137.858 ops/s
Iteration  30: 5118330.264 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartRequestsAreAdditiveAndOverflowBecomesMaxValue":
  5052904.158 ±(99.9%) 91423.681 ops/s [Average]
  (min, avg, max) = (4803698.063, 5052904.158, 5336174.239), stdev = 136838.672
  CI (99.9%): [4961480.478, 5144327.839] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt        Score       Error  Units
FlowableSubscriberTest._Benchmark.benchmark_onStartRequestsAreAdditiveAndOverflowBecomesMaxValue  thrpt   30  5052904.158 ± 91423.681  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartRequestsAreAdditive$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartRequestsAreAdditive

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1280149.042 ops/s
# Warmup Iteration   2: 4113266.939 ops/s
# Warmup Iteration   3: 5412153.211 ops/s
# Warmup Iteration   4: 5120002.505 ops/s
# Warmup Iteration   5: 5264153.508 ops/s
# Warmup Iteration   6: 5286414.240 ops/s
# Warmup Iteration   7: 5154392.124 ops/s
# Warmup Iteration   8: 5285265.664 ops/s
# Warmup Iteration   9: 4882458.405 ops/s
# Warmup Iteration  10: 5050140.970 ops/s
# Warmup Iteration  11: 5541061.742 ops/s
# Warmup Iteration  12: 5154542.850 ops/s
# Warmup Iteration  13: 5245904.794 ops/s
# Warmup Iteration  14: 5498527.748 ops/s
# Warmup Iteration  15: 5061641.587 ops/s
# Warmup Iteration  16: 5323515.128 ops/s
# Warmup Iteration  17: 5096596.915 ops/s
# Warmup Iteration  18: 5493236.515 ops/s
# Warmup Iteration  19: 4828438.286 ops/s
# Warmup Iteration  20: 5230505.579 ops/s
# Warmup Iteration  21: 5521515.486 ops/s
# Warmup Iteration  22: 5277216.737 ops/s
# Warmup Iteration  23: 5421348.639 ops/s
# Warmup Iteration  24: 5226566.697 ops/s
# Warmup Iteration  25: 5302491.970 ops/s
# Warmup Iteration  26: 5275930.348 ops/s
# Warmup Iteration  27: 5247279.968 ops/s
# Warmup Iteration  28: 5354784.192 ops/s
# Warmup Iteration  29: 5255270.154 ops/s
# Warmup Iteration  30: 5473071.014 ops/s
Iteration   1: 5305006.809 ops/s
Iteration   2: 5293915.616 ops/s
Iteration   3: 5347883.670 ops/s
Iteration   4: 5300739.782 ops/s
Iteration   5: 5416703.882 ops/s
Iteration   6: 5340495.564 ops/s
Iteration   7: 5299773.918 ops/s
Iteration   8: 5331940.368 ops/s
Iteration   9: 5346102.692 ops/s
Iteration  10: 5538386.641 ops/s
Iteration  11: 5094105.699 ops/s
Iteration  12: 5361015.081 ops/s
Iteration  13: 5314389.847 ops/s
Iteration  14: 5316529.927 ops/s
Iteration  15: 5289150.722 ops/s
Iteration  16: 5518291.013 ops/s
Iteration  17: 5195620.641 ops/s
Iteration  18: 5374157.956 ops/s
Iteration  19: 5172322.481 ops/s
Iteration  20: 5445638.971 ops/s
Iteration  21: 5314444.959 ops/s
Iteration  22: 5234125.700 ops/s
Iteration  23: 5219651.695 ops/s
Iteration  24: 5492931.075 ops/s
Iteration  25: 5208700.033 ops/s
Iteration  26: 5362771.228 ops/s
Iteration  27: 5212293.558 ops/s
Iteration  28: 5463840.018 ops/s
Iteration  29: 5471361.895 ops/s
Iteration  30: 5177861.626 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartRequestsAreAdditive":
  5325338.436 ±(99.9%) 72969.034 ops/s [Average]
  (min, avg, max) = (5094105.699, 5325338.436, 5538386.641), stdev = 109216.623
  CI (99.9%): [5252369.401, 5398307.470] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableSubscriberTest._Benchmark.benchmark_onStartRequestsAreAdditive  thrpt   30  5325338.436 ± 72969.034  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_issue1527$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_issue1527

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1698397.938 ops/s
# Warmup Iteration   2: 5103780.314 ops/s
# Warmup Iteration   3: 5255415.894 ops/s
# Warmup Iteration   4: 6469141.618 ops/s
# Warmup Iteration   5: 6327029.378 ops/s
# Warmup Iteration   6: 6365116.939 ops/s
# Warmup Iteration   7: 6524855.525 ops/s
# Warmup Iteration   8: 6177344.134 ops/s
# Warmup Iteration   9: 6262075.089 ops/s
# Warmup Iteration  10: 6696804.578 ops/s
# Warmup Iteration  11: 6491022.813 ops/s
# Warmup Iteration  12: 6201357.503 ops/s
# Warmup Iteration  13: 6453487.536 ops/s
# Warmup Iteration  14: 6323830.321 ops/s
# Warmup Iteration  15: 6493862.215 ops/s
# Warmup Iteration  16: 6188796.866 ops/s
# Warmup Iteration  17: 6230482.060 ops/s
# Warmup Iteration  18: 6670534.273 ops/s
# Warmup Iteration  19: 6238109.708 ops/s
# Warmup Iteration  20: 5372196.817 ops/s
# Warmup Iteration  21: 6449130.472 ops/s
# Warmup Iteration  22: 6473705.491 ops/s
# Warmup Iteration  23: 6199849.867 ops/s
# Warmup Iteration  24: 6199898.704 ops/s
# Warmup Iteration  25: 6322309.256 ops/s
# Warmup Iteration  26: 6303646.408 ops/s
# Warmup Iteration  27: 6350703.006 ops/s
# Warmup Iteration  28: 6469845.841 ops/s
# Warmup Iteration  29: 6342517.035 ops/s
# Warmup Iteration  30: 6664036.903 ops/s
Iteration   1: 6247208.460 ops/s
Iteration   2: 6375390.247 ops/s
Iteration   3: 6548421.960 ops/s
Iteration   4: 6279994.429 ops/s
Iteration   5: 6490256.721 ops/s
Iteration   6: 6217572.568 ops/s
Iteration   7: 6554223.628 ops/s
Iteration   8: 6376949.220 ops/s
Iteration   9: 6491380.739 ops/s
Iteration  10: 6286878.478 ops/s
Iteration  11: 6354095.464 ops/s
Iteration  12: 6623659.668 ops/s
Iteration  13: 6208325.977 ops/s
Iteration  14: 6324059.142 ops/s
Iteration  15: 6346975.673 ops/s
Iteration  16: 6345511.418 ops/s
Iteration  17: 6344406.669 ops/s
Iteration  18: 6636579.685 ops/s
Iteration  19: 6407750.325 ops/s
Iteration  20: 6408969.507 ops/s
Iteration  21: 6505713.103 ops/s
Iteration  22: 6184306.184 ops/s
Iteration  23: 6566041.941 ops/s
Iteration  24: 6434000.086 ops/s
Iteration  25: 6344607.655 ops/s
Iteration  26: 6645818.771 ops/s
Iteration  27: 6172887.663 ops/s
Iteration  28: 6335232.225 ops/s
Iteration  29: 6437509.159 ops/s
Iteration  30: 6333358.210 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_issue1527":
  6394269.499 ±(99.9%) 89244.979 ops/s [Average]
  (min, avg, max) = (6172887.663, 6394269.499, 6645818.771), stdev = 133577.693
  CI (99.9%): [6305024.520, 6483514.478] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FlowableSingleTest._Benchmark.benchmark_issue1527  thrpt   30  6394269.499 ± 89244.979  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withOtherPublisherDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withOtherPublisherDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 997172.504 ops/s
# Warmup Iteration   2: 5830127.049 ops/s
# Warmup Iteration   3: 7194221.111 ops/s
# Warmup Iteration   4: 8058170.278 ops/s
# Warmup Iteration   5: 8220422.079 ops/s
# Warmup Iteration   6: 8166850.286 ops/s
# Warmup Iteration   7: 8011264.680 ops/s
# Warmup Iteration   8: 8074789.887 ops/s
# Warmup Iteration   9: 7968640.513 ops/s
# Warmup Iteration  10: 7934654.503 ops/s
# Warmup Iteration  11: 8286073.636 ops/s
# Warmup Iteration  12: 8311012.665 ops/s
# Warmup Iteration  13: 7886549.606 ops/s
# Warmup Iteration  14: 8211498.430 ops/s
# Warmup Iteration  15: 8050692.898 ops/s
# Warmup Iteration  16: 8369023.868 ops/s
# Warmup Iteration  17: 8419510.782 ops/s
# Warmup Iteration  18: 7961918.779 ops/s
# Warmup Iteration  19: 8266544.779 ops/s
# Warmup Iteration  20: 8121272.802 ops/s
# Warmup Iteration  21: 8432599.467 ops/s
# Warmup Iteration  22: 8288891.155 ops/s
# Warmup Iteration  23: 7957678.565 ops/s
# Warmup Iteration  24: 8360026.845 ops/s
# Warmup Iteration  25: 7912693.386 ops/s
# Warmup Iteration  26: 8296649.995 ops/s
# Warmup Iteration  27: 8374073.111 ops/s
# Warmup Iteration  28: 7749717.506 ops/s
# Warmup Iteration  29: 8370919.099 ops/s
# Warmup Iteration  30: 8054362.316 ops/s
Iteration   1: 8398648.760 ops/s
Iteration   2: 8125741.376 ops/s
Iteration   3: 8017120.698 ops/s
Iteration   4: 8412116.175 ops/s
Iteration   5: 8532203.657 ops/s
Iteration   6: 7979443.455 ops/s
Iteration   7: 8222638.249 ops/s
Iteration   8: 8433608.109 ops/s
Iteration   9: 8001310.880 ops/s
Iteration  10: 8279746.443 ops/s
Iteration  11: 7841328.304 ops/s
Iteration  12: 8032199.083 ops/s
Iteration  13: 8120023.568 ops/s
Iteration  14: 8098793.349 ops/s
Iteration  15: 8121888.774 ops/s
Iteration  16: 8158737.770 ops/s
Iteration  17: 7936524.379 ops/s
Iteration  18: 8262596.874 ops/s
Iteration  19: 8009493.015 ops/s
Iteration  20: 8323087.807 ops/s
Iteration  21: 8203950.889 ops/s
Iteration  22: 8200734.947 ops/s
Iteration  23: 8081844.704 ops/s
Iteration  24: 8137025.496 ops/s
Iteration  25: 8140840.399 ops/s
Iteration  26: 8222802.961 ops/s
Iteration  27: 8306912.394 ops/s
Iteration  28: 8006535.782 ops/s
Iteration  29: 8094350.769 ops/s
Iteration  30: 8322300.851 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_withOtherPublisherDispose":
  8167484.997 ±(99.9%) 107772.159 ops/s [Average]
  (min, avg, max) = (7841328.304, 8167484.997, 8532203.657), stdev = 161308.307
  CI (99.9%): [8059712.838, 8275257.156] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_withOtherPublisherDispose  thrpt   30  8167484.997 ± 107772.159  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_justTwoEmissionsObservableThrowsError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_justTwoEmissionsObservableThrowsError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 928882.814 ops/s
# Warmup Iteration   2: 3780522.609 ops/s
# Warmup Iteration   3: 4072603.171 ops/s
# Warmup Iteration   4: 4916183.261 ops/s
# Warmup Iteration   5: 5082364.515 ops/s
# Warmup Iteration   6: 4801821.318 ops/s
# Warmup Iteration   7: 4801525.049 ops/s
# Warmup Iteration   8: 4907077.698 ops/s
# Warmup Iteration   9: 4718577.519 ops/s
# Warmup Iteration  10: 4987991.221 ops/s
# Warmup Iteration  11: 4944892.531 ops/s
# Warmup Iteration  12: 4687694.211 ops/s
# Warmup Iteration  13: 5064114.007 ops/s
# Warmup Iteration  14: 4086413.954 ops/s
# Warmup Iteration  15: 4866416.871 ops/s
# Warmup Iteration  16: 4940703.169 ops/s
# Warmup Iteration  17: 4708411.662 ops/s
# Warmup Iteration  18: 5046055.917 ops/s
# Warmup Iteration  19: 5125372.376 ops/s
# Warmup Iteration  20: 4798019.962 ops/s
# Warmup Iteration  21: 4894454.525 ops/s
# Warmup Iteration  22: 5063913.132 ops/s
# Warmup Iteration  23: 4822452.533 ops/s
# Warmup Iteration  24: 4742418.270 ops/s
# Warmup Iteration  25: 4993840.767 ops/s
# Warmup Iteration  26: 4787031.650 ops/s
# Warmup Iteration  27: 4952566.216 ops/s
# Warmup Iteration  28: 4751193.855 ops/s
# Warmup Iteration  29: 4896869.515 ops/s
# Warmup Iteration  30: 4863072.307 ops/s
Iteration   1: 4883451.308 ops/s
Iteration   2: 5092863.970 ops/s
Iteration   3: 4826737.456 ops/s
Iteration   4: 5016618.835 ops/s
Iteration   5: 5101392.358 ops/s
Iteration   6: 4881463.209 ops/s
Iteration   7: 5049644.787 ops/s
Iteration   8: 4823193.576 ops/s
Iteration   9: 5046397.413 ops/s
Iteration  10: 5046228.414 ops/s
Iteration  11: 4771712.536 ops/s
Iteration  12: 5097518.917 ops/s
Iteration  13: 4934398.619 ops/s
Iteration  14: 4852934.464 ops/s
Iteration  15: 5015995.411 ops/s
Iteration  16: 4835929.895 ops/s
Iteration  17: 4935699.295 ops/s
Iteration  18: 4909149.306 ops/s
Iteration  19: 4970351.142 ops/s
Iteration  20: 4929905.023 ops/s
Iteration  21: 4698190.960 ops/s
Iteration  22: 4869866.890 ops/s
Iteration  23: 5011796.595 ops/s
Iteration  24: 4784010.738 ops/s
Iteration  25: 5000527.241 ops/s
Iteration  26: 4836406.075 ops/s
Iteration  27: 4979063.146 ops/s
Iteration  28: 4834120.671 ops/s
Iteration  29: 4907027.484 ops/s
Iteration  30: 5124851.760 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_justTwoEmissionsObservableThrowsError":
  4935581.583 ±(99.9%) 74131.938 ops/s [Average]
  (min, avg, max) = (4698190.960, 4935581.583, 5124851.760), stdev = 110957.204
  CI (99.9%): [4861449.645, 5009713.521] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
FlowableToCompletableTest._Benchmark.benchmark_justTwoEmissionsObservableThrowsError  thrpt   30  4935581.583 ± 74131.938  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1016437.368 ops/s
# Warmup Iteration   2: 4133222.073 ops/s
# Warmup Iteration   3: 5394795.662 ops/s
# Warmup Iteration   4: 5800184.673 ops/s
# Warmup Iteration   5: 5949427.359 ops/s
# Warmup Iteration   6: 6081306.886 ops/s
# Warmup Iteration   7: 5856201.100 ops/s
# Warmup Iteration   8: 5958807.417 ops/s
# Warmup Iteration   9: 5873910.052 ops/s
# Warmup Iteration  10: 5854086.858 ops/s
# Warmup Iteration  11: 5959445.119 ops/s
# Warmup Iteration  12: 5791461.811 ops/s
# Warmup Iteration  13: 5950455.365 ops/s
# Warmup Iteration  14: 5852219.078 ops/s
# Warmup Iteration  15: 5824685.480 ops/s
# Warmup Iteration  16: 6113887.337 ops/s
# Warmup Iteration  17: 5819268.008 ops/s
# Warmup Iteration  18: 5978702.173 ops/s
# Warmup Iteration  19: 6149646.966 ops/s
# Warmup Iteration  20: 5715947.862 ops/s
# Warmup Iteration  21: 6203480.470 ops/s
# Warmup Iteration  22: 5716216.555 ops/s
# Warmup Iteration  23: 6003232.364 ops/s
# Warmup Iteration  24: 5904686.193 ops/s
# Warmup Iteration  25: 5687040.473 ops/s
# Warmup Iteration  26: 5939449.504 ops/s
# Warmup Iteration  27: 5865401.682 ops/s
# Warmup Iteration  28: 5849948.504 ops/s
# Warmup Iteration  29: 5957613.273 ops/s
# Warmup Iteration  30: 5800659.891 ops/s
Iteration   1: 6134597.442 ops/s
Iteration   2: 6058184.024 ops/s
Iteration   3: 5819780.028 ops/s
Iteration   4: 6009981.172 ops/s
Iteration   5: 5882108.067 ops/s
Iteration   6: 5988216.560 ops/s
Iteration   7: 5904682.891 ops/s
Iteration   8: 5846008.817 ops/s
Iteration   9: 6154048.743 ops/s
Iteration  10: 5713520.154 ops/s
Iteration  11: 6004393.289 ops/s
Iteration  12: 5867334.817 ops/s
Iteration  13: 5955341.533 ops/s
Iteration  14: 5851208.702 ops/s
Iteration  15: 5827528.010 ops/s
Iteration  16: 5864622.362 ops/s
Iteration  17: 6207267.457 ops/s
Iteration  18: 5839993.074 ops/s
Iteration  19: 6099424.811 ops/s
Iteration  20: 5738444.129 ops/s
Iteration  21: 5869207.586 ops/s
Iteration  22: 6023852.210 ops/s
Iteration  23: 5762642.336 ops/s
Iteration  24: 5906962.966 ops/s
Iteration  25: 5657279.613 ops/s
Iteration  26: 5893547.063 ops/s
Iteration  27: 5999301.899 ops/s
Iteration  28: 5757275.183 ops/s
Iteration  29: 5898572.892 ops/s
Iteration  30: 5829579.352 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtFlowable":
  5912163.573 ±(99.9%) 89606.905 ops/s [Average]
  (min, avg, max) = (5657279.613, 5912163.573, 6207267.457), stdev = 134119.407
  CI (99.9%): [5822556.668, 6001770.478] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtFlowable  thrpt   30  5912163.573 ± 89606.905  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_followingFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_followingFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1756001.637 ops/s
# Warmup Iteration   2: 5671974.471 ops/s
# Warmup Iteration   3: 6179455.748 ops/s
# Warmup Iteration   4: 6800154.324 ops/s
# Warmup Iteration   5: 7236224.757 ops/s
# Warmup Iteration   6: 7019815.095 ops/s
# Warmup Iteration   7: 6820432.034 ops/s
# Warmup Iteration   8: 7127734.924 ops/s
# Warmup Iteration   9: 5591424.299 ops/s
# Warmup Iteration  10: 7026265.644 ops/s
# Warmup Iteration  11: 6927063.310 ops/s
# Warmup Iteration  12: 7366326.235 ops/s
# Warmup Iteration  13: 7162407.708 ops/s
# Warmup Iteration  14: 6850677.135 ops/s
# Warmup Iteration  15: 7410923.144 ops/s
# Warmup Iteration  16: 7362640.932 ops/s
# Warmup Iteration  17: 6898212.116 ops/s
# Warmup Iteration  18: 7102588.301 ops/s
# Warmup Iteration  19: 7339900.272 ops/s
# Warmup Iteration  20: 6945932.020 ops/s
# Warmup Iteration  21: 7240406.780 ops/s
# Warmup Iteration  22: 6985456.454 ops/s
# Warmup Iteration  23: 7038956.344 ops/s
# Warmup Iteration  24: 6877468.364 ops/s
# Warmup Iteration  25: 7126884.169 ops/s
# Warmup Iteration  26: 7135264.080 ops/s
# Warmup Iteration  27: 6983210.542 ops/s
# Warmup Iteration  28: 7345550.324 ops/s
# Warmup Iteration  29: 6937418.127 ops/s
# Warmup Iteration  30: 6892731.197 ops/s
Iteration   1: 7159627.653 ops/s
Iteration   2: 6828297.098 ops/s
Iteration   3: 6984735.924 ops/s
Iteration   4: 7159594.373 ops/s
Iteration   5: 6925429.084 ops/s
Iteration   6: 7164401.511 ops/s
Iteration   7: 7188970.270 ops/s
Iteration   8: 7006657.676 ops/s
Iteration   9: 7271840.034 ops/s
Iteration  10: 6867038.511 ops/s
Iteration  11: 7348972.537 ops/s
Iteration  12: 6878765.280 ops/s
Iteration  13: 7344347.507 ops/s
Iteration  14: 7241183.986 ops/s
Iteration  15: 6915753.821 ops/s
Iteration  16: 7070538.984 ops/s
Iteration  17: 7292757.690 ops/s
Iteration  18: 6876130.794 ops/s
Iteration  19: 7132105.623 ops/s
Iteration  20: 7218191.998 ops/s
Iteration  21: 6848374.188 ops/s
Iteration  22: 7101696.414 ops/s
Iteration  23: 6917328.152 ops/s
Iteration  24: 7225307.920 ops/s
Iteration  25: 6840731.009 ops/s
Iteration  26: 7025989.596 ops/s
Iteration  27: 7242086.472 ops/s
Iteration  28: 6711416.537 ops/s
Iteration  29: 7206214.875 ops/s
Iteration  30: 6991374.994 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAllTest._Benchmark.benchmark_followingFirst":
  7066195.350 ±(99.9%) 117829.278 ops/s [Average]
  (min, avg, max) = (6711416.537, 7066195.350, 7348972.537), stdev = 176361.330
  CI (99.9%): [6948366.072, 7184024.629] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
FlowableAllTest._Benchmark.benchmark_followingFirst  thrpt   30  7066195.350 ± 117829.278  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBoundsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBoundsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 562148.631 ops/s
# Warmup Iteration   2: 4383168.256 ops/s
# Warmup Iteration   3: 5502135.858 ops/s
# Warmup Iteration   4: 6240813.161 ops/s
# Warmup Iteration   5: 6474560.720 ops/s
# Warmup Iteration   6: 6133880.581 ops/s
# Warmup Iteration   7: 6405976.930 ops/s
# Warmup Iteration   8: 6216947.766 ops/s
# Warmup Iteration   9: 6114893.130 ops/s
# Warmup Iteration  10: 6222560.930 ops/s
# Warmup Iteration  11: 6386839.987 ops/s
# Warmup Iteration  12: 6345728.475 ops/s
# Warmup Iteration  13: 6128493.253 ops/s
# Warmup Iteration  14: 6577134.721 ops/s
# Warmup Iteration  15: 6062222.697 ops/s
# Warmup Iteration  16: 6569822.692 ops/s
# Warmup Iteration  17: 6360092.946 ops/s
# Warmup Iteration  18: 6159909.888 ops/s
# Warmup Iteration  19: 6286997.774 ops/s
# Warmup Iteration  20: 6521325.856 ops/s
# Warmup Iteration  21: 6115984.768 ops/s
# Warmup Iteration  22: 6550919.939 ops/s
# Warmup Iteration  23: 6085779.617 ops/s
# Warmup Iteration  24: 6217730.347 ops/s
# Warmup Iteration  25: 6516253.498 ops/s
# Warmup Iteration  26: 6185478.343 ops/s
# Warmup Iteration  27: 6336935.429 ops/s
# Warmup Iteration  28: 6184335.544 ops/s
# Warmup Iteration  29: 6185244.048 ops/s
# Warmup Iteration  30: 6358873.067 ops/s
Iteration   1: 6145756.071 ops/s
Iteration   2: 6356214.646 ops/s
Iteration   3: 6205222.268 ops/s
Iteration   4: 6159634.440 ops/s
Iteration   5: 6521984.650 ops/s
Iteration   6: 6246861.163 ops/s
Iteration   7: 6177714.988 ops/s
Iteration   8: 6337100.224 ops/s
Iteration   9: 6304298.886 ops/s
Iteration  10: 6581245.458 ops/s
Iteration  11: 6497711.195 ops/s
Iteration  12: 6134152.714 ops/s
Iteration  13: 6435187.140 ops/s
Iteration  14: 6183873.453 ops/s
Iteration  15: 6184350.286 ops/s
Iteration  16: 6368274.327 ops/s
Iteration  17: 6335849.634 ops/s
Iteration  18: 6111062.743 ops/s
Iteration  19: 6486079.058 ops/s
Iteration  20: 6225238.979 ops/s
Iteration  21: 6345729.257 ops/s
Iteration  22: 6458672.561 ops/s
Iteration  23: 6147919.727 ops/s
Iteration  24: 6442362.222 ops/s
Iteration  25: 6131645.884 ops/s
Iteration  26: 6361879.070 ops/s
Iteration  27: 6545298.908 ops/s
Iteration  28: 6064059.895 ops/s
Iteration  29: 6229206.782 ops/s
Iteration  30: 6367193.586 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBoundsFlowable":
  6303059.341 ±(99.9%) 98058.432 ops/s [Average]
  (min, avg, max) = (6064059.895, 6303059.341, 6581245.458), stdev = 146769.255
  CI (99.9%): [6205000.909, 6401117.772] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultWithIndexOutOfBoundsFlowable  thrpt   30  6303059.341 ± 98058.432  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToString$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToString

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 708241.920 ops/s
# Warmup Iteration   2: 3458229.512 ops/s
# Warmup Iteration   3: 4269743.407 ops/s
# Warmup Iteration   4: 3253355.781 ops/s
# Warmup Iteration   5: 4782813.812 ops/s
# Warmup Iteration   6: 4924892.324 ops/s
# Warmup Iteration   7: 4946027.540 ops/s
# Warmup Iteration   8: 4694076.108 ops/s
# Warmup Iteration   9: 4812352.336 ops/s
# Warmup Iteration  10: 4693353.970 ops/s
# Warmup Iteration  11: 4709202.386 ops/s
# Warmup Iteration  12: 4972341.458 ops/s
# Warmup Iteration  13: 4838539.417 ops/s
# Warmup Iteration  14: 4908169.266 ops/s
# Warmup Iteration  15: 4898432.865 ops/s
# Warmup Iteration  16: 4970787.645 ops/s
# Warmup Iteration  17: 4715435.975 ops/s
# Warmup Iteration  18: 4769680.627 ops/s
# Warmup Iteration  19: 4950822.738 ops/s
# Warmup Iteration  20: 4740776.063 ops/s
# Warmup Iteration  21: 4980364.428 ops/s
# Warmup Iteration  22: 4660621.093 ops/s
# Warmup Iteration  23: 4743381.007 ops/s
# Warmup Iteration  24: 4751800.233 ops/s
# Warmup Iteration  25: 5037108.957 ops/s
# Warmup Iteration  26: 4862591.642 ops/s
# Warmup Iteration  27: 4926875.277 ops/s
# Warmup Iteration  28: 4725999.546 ops/s
# Warmup Iteration  29: 4805215.066 ops/s
# Warmup Iteration  30: 5086269.264 ops/s
Iteration   1: 4872006.976 ops/s
Iteration   2: 5016357.485 ops/s
Iteration   3: 5051238.499 ops/s
Iteration   4: 4604243.210 ops/s
Iteration   5: 4880666.310 ops/s
Iteration   6: 4978743.415 ops/s
Iteration   7: 4807792.168 ops/s
Iteration   8: 4725241.567 ops/s
Iteration   9: 4947638.109 ops/s
Iteration  10: 4917138.158 ops/s
Iteration  11: 4763366.624 ops/s
Iteration  12: 4898003.814 ops/s
Iteration  13: 5014186.350 ops/s
Iteration  14: 4786062.016 ops/s
Iteration  15: 4825249.785 ops/s
Iteration  16: 5020532.184 ops/s
Iteration  17: 4766529.930 ops/s
Iteration  18: 4840558.777 ops/s
Iteration  19: 4986098.166 ops/s
Iteration  20: 4756904.443 ops/s
Iteration  21: 5120839.485 ops/s
Iteration  22: 4752353.090 ops/s
Iteration  23: 4872450.278 ops/s
Iteration  24: 5037060.855 ops/s
Iteration  25: 4760231.511 ops/s
Iteration  26: 5093116.605 ops/s
Iteration  27: 4803743.409 ops/s
Iteration  28: 4855647.969 ops/s
Iteration  29: 4862257.597 ops/s
Iteration  30: 4818598.458 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToString":
  4881161.908 ±(99.9%) 82526.747 ops/s [Average]
  (min, avg, max) = (4604243.210, 4881161.908, 5120839.485), stdev = 123522.159
  CI (99.9%): [4798635.161, 4963688.655] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_collectToString  thrpt   30  4881161.908 ± 82526.747  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_getAfterCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_getAfterCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 423696.694 ops/s
# Warmup Iteration   2: 643607.199 ops/s
# Warmup Iteration   3: 739720.440 ops/s
# Warmup Iteration   4: 635103.694 ops/s
# Warmup Iteration   5: 787240.950 ops/s
# Warmup Iteration   6: 734698.805 ops/s
# Warmup Iteration   7: 679351.316 ops/s
# Warmup Iteration   8: 775385.973 ops/s
# Warmup Iteration   9: 754317.579 ops/s
# Warmup Iteration  10: 773906.180 ops/s
# Warmup Iteration  11: 758287.711 ops/s
# Warmup Iteration  12: 739635.343 ops/s
# Warmup Iteration  13: 785580.522 ops/s
# Warmup Iteration  14: 792086.264 ops/s
# Warmup Iteration  15: 743967.545 ops/s
# Warmup Iteration  16: 774800.527 ops/s
# Warmup Iteration  17: 791721.085 ops/s
# Warmup Iteration  18: 807129.334 ops/s
# Warmup Iteration  19: 839017.402 ops/s
# Warmup Iteration  20: 784691.226 ops/s
# Warmup Iteration  21: 836209.990 ops/s
# Warmup Iteration  22: 794827.642 ops/s
# Warmup Iteration  23: 817180.542 ops/s
# Warmup Iteration  24: 803822.636 ops/s
# Warmup Iteration  25: 803165.561 ops/s
# Warmup Iteration  26: 831359.750 ops/s
# Warmup Iteration  27: 796125.566 ops/s
# Warmup Iteration  28: 829784.021 ops/s
# Warmup Iteration  29: 782924.856 ops/s
# Warmup Iteration  30: 832869.944 ops/s
Iteration   1: 806030.175 ops/s
Iteration   2: 803758.480 ops/s
Iteration   3: 792771.875 ops/s
Iteration   4: 810427.119 ops/s
Iteration   5: 810163.672 ops/s
Iteration   6: 791183.663 ops/s
Iteration   7: 821319.901 ops/s
Iteration   8: 787765.180 ops/s
Iteration   9: 797486.550 ops/s
Iteration  10: 771269.164 ops/s
Iteration  11: 807021.463 ops/s
Iteration  12: 801603.078 ops/s
Iteration  13: 787232.569 ops/s
Iteration  14: 806103.152 ops/s
Iteration  15: 822462.498 ops/s
Iteration  16: 777677.434 ops/s
Iteration  17: 840117.702 ops/s
Iteration  18: 795108.845 ops/s
Iteration  19: 810733.178 ops/s
Iteration  20: 809593.160 ops/s
Iteration  21: 822618.628 ops/s
Iteration  22: 813293.656 ops/s
Iteration  23: 794599.603 ops/s
Iteration  24: 822139.895 ops/s
Iteration  25: 785048.925 ops/s
Iteration  26: 835360.208 ops/s
Iteration  27: 785088.208 ops/s
Iteration  28: 792427.261 ops/s
Iteration  29: 837396.381 ops/s
Iteration  30: 768616.008 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_getAfterCancel":
  803547.254 ±(99.9%) 12338.912 ops/s [Average]
  (min, avg, max) = (768616.008, 803547.254, 840117.702), stdev = 18468.304
  CI (99.9%): [791208.342, 815886.166] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
BlockingFlowableToFutureTest._Benchmark.benchmark_getAfterCancel  thrpt   30  803547.254 ± 12338.912  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_getWithTimeoutAfterCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_getWithTimeoutAfterCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 278598.949 ops/s
# Warmup Iteration   2: 620561.393 ops/s
# Warmup Iteration   3: 774929.313 ops/s
# Warmup Iteration   4: 717287.836 ops/s
# Warmup Iteration   5: 774937.992 ops/s
# Warmup Iteration   6: 711262.110 ops/s
# Warmup Iteration   7: 744177.286 ops/s
# Warmup Iteration   8: 759190.880 ops/s
# Warmup Iteration   9: 734430.001 ops/s
# Warmup Iteration  10: 741230.049 ops/s
# Warmup Iteration  11: 750636.212 ops/s
# Warmup Iteration  12: 738910.829 ops/s
# Warmup Iteration  13: 777019.421 ops/s
# Warmup Iteration  14: 737537.096 ops/s
# Warmup Iteration  15: 731739.344 ops/s
# Warmup Iteration  16: 770603.477 ops/s
# Warmup Iteration  17: 760617.205 ops/s
# Warmup Iteration  18: 805280.894 ops/s
# Warmup Iteration  19: 766648.610 ops/s
# Warmup Iteration  20: 803304.469 ops/s
# Warmup Iteration  21: 781651.207 ops/s
# Warmup Iteration  22: 778536.629 ops/s
# Warmup Iteration  23: 823610.514 ops/s
# Warmup Iteration  24: 756640.272 ops/s
# Warmup Iteration  25: 808101.942 ops/s
# Warmup Iteration  26: 807029.831 ops/s
# Warmup Iteration  27: 795191.338 ops/s
# Warmup Iteration  28: 790234.865 ops/s
# Warmup Iteration  29: 784078.470 ops/s
# Warmup Iteration  30: 776238.197 ops/s
Iteration   1: 851380.173 ops/s
Iteration   2: 798195.364 ops/s
Iteration   3: 808943.423 ops/s
Iteration   4: 774790.575 ops/s
Iteration   5: 803939.697 ops/s
Iteration   6: 786391.675 ops/s
Iteration   7: 815755.683 ops/s
Iteration   8: 812891.600 ops/s
Iteration   9: 787310.687 ops/s
Iteration  10: 805092.781 ops/s
Iteration  11: 785720.892 ops/s
Iteration  12: 838489.837 ops/s
Iteration  13: 825253.583 ops/s
Iteration  14: 771460.509 ops/s
Iteration  15: 792308.919 ops/s
Iteration  16: 820179.387 ops/s
Iteration  17: 767740.649 ops/s
Iteration  18: 800988.098 ops/s
Iteration  19: 793307.241 ops/s
Iteration  20: 800601.232 ops/s
Iteration  21: 812798.193 ops/s
Iteration  22: 797586.267 ops/s
Iteration  23: 798337.234 ops/s
Iteration  24: 781904.186 ops/s
Iteration  25: 833390.647 ops/s
Iteration  26: 785041.138 ops/s
Iteration  27: 825159.570 ops/s
Iteration  28: 804615.654 ops/s
Iteration  29: 780229.988 ops/s
Iteration  30: 821045.221 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableToFutureTest._Benchmark.benchmark_getWithTimeoutAfterCancel":
  802695.003 ±(99.9%) 13568.165 ops/s [Average]
  (min, avg, max) = (767740.649, 802695.003, 851380.173), stdev = 20308.192
  CI (99.9%): [789126.838, 816263.168] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
BlockingFlowableToFutureTest._Benchmark.benchmark_getWithTimeoutAfterCancel  thrpt   30  802695.003 ± 13568.165  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1633219.378 ops/s
# Warmup Iteration   2: 4317724.840 ops/s
# Warmup Iteration   3: 5635849.933 ops/s
# Warmup Iteration   4: 5675698.271 ops/s
# Warmup Iteration   5: 5997961.206 ops/s
# Warmup Iteration   6: 6019305.183 ops/s
# Warmup Iteration   7: 5760304.638 ops/s
# Warmup Iteration   8: 5968178.879 ops/s
# Warmup Iteration   9: 5843111.103 ops/s
# Warmup Iteration  10: 5862025.012 ops/s
# Warmup Iteration  11: 5657914.133 ops/s
# Warmup Iteration  12: 5896713.192 ops/s
# Warmup Iteration  13: 5863470.354 ops/s
# Warmup Iteration  14: 5807242.324 ops/s
# Warmup Iteration  15: 6055164.784 ops/s
# Warmup Iteration  16: 5759428.134 ops/s
# Warmup Iteration  17: 6041157.104 ops/s
# Warmup Iteration  18: 5764948.634 ops/s
# Warmup Iteration  19: 5907406.938 ops/s
# Warmup Iteration  20: 5736154.774 ops/s
# Warmup Iteration  21: 5881206.231 ops/s
# Warmup Iteration  22: 6148865.224 ops/s
# Warmup Iteration  23: 5829078.659 ops/s
# Warmup Iteration  24: 5772756.235 ops/s
# Warmup Iteration  25: 6047546.795 ops/s
# Warmup Iteration  26: 5780706.070 ops/s
# Warmup Iteration  27: 5730280.464 ops/s
# Warmup Iteration  28: 6098395.068 ops/s
# Warmup Iteration  29: 5813476.300 ops/s
# Warmup Iteration  30: 6028455.251 ops/s
Iteration   1: 5801725.384 ops/s
Iteration   2: 5870130.012 ops/s
Iteration   3: 6112110.335 ops/s
Iteration   4: 5872062.915 ops/s
Iteration   5: 6017009.271 ops/s
Iteration   6: 5893570.762 ops/s
Iteration   7: 5864176.143 ops/s
Iteration   8: 5562812.017 ops/s
Iteration   9: 5999617.452 ops/s
Iteration  10: 5926829.977 ops/s
Iteration  11: 5953728.774 ops/s
Iteration  12: 6140205.142 ops/s
Iteration  13: 5820370.976 ops/s
Iteration  14: 5665016.366 ops/s
Iteration  15: 6013857.064 ops/s
Iteration  16: 5747251.549 ops/s
Iteration  17: 5803799.734 ops/s
Iteration  18: 6038202.196 ops/s
Iteration  19: 5891965.005 ops/s
Iteration  20: 6177664.830 ops/s
Iteration  21: 5765001.385 ops/s
Iteration  22: 6017698.032 ops/s
Iteration  23: 5947905.429 ops/s
Iteration  24: 5988724.168 ops/s
Iteration  25: 5088118.855 ops/s
Iteration  26: 5756050.539 ops/s
Iteration  27: 5935146.418 ops/s
Iteration  28: 5931886.883 ops/s
Iteration  29: 5978664.437 ops/s
Iteration  30: 5755147.129 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultFlowable":
  5877881.639 ±(99.9%) 135708.245 ops/s [Average]
  (min, avg, max) = (5088118.855, 5877881.639, 6177664.830), stdev = 203121.728
  CI (99.9%): [5742173.394, 6013589.885] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrDefaultFlowable  thrpt   30  5877881.639 ± 135708.245  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncArrayHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncArrayHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 461773.196 ops/s
# Warmup Iteration   2: 1740536.876 ops/s
# Warmup Iteration   3: 1813758.997 ops/s
# Warmup Iteration   4: 2137932.403 ops/s
# Warmup Iteration   5: 2157222.858 ops/s
# Warmup Iteration   6: 2214600.992 ops/s
# Warmup Iteration   7: 2284439.399 ops/s
# Warmup Iteration   8: 2203619.277 ops/s
# Warmup Iteration   9: 2249492.366 ops/s
# Warmup Iteration  10: 2219126.579 ops/s
# Warmup Iteration  11: 2228469.231 ops/s
# Warmup Iteration  12: 2226457.948 ops/s
# Warmup Iteration  13: 2222653.726 ops/s
# Warmup Iteration  14: 2267776.883 ops/s
# Warmup Iteration  15: 2221642.922 ops/s
# Warmup Iteration  16: 2239320.264 ops/s
# Warmup Iteration  17: 2228871.750 ops/s
# Warmup Iteration  18: 2211055.766 ops/s
# Warmup Iteration  19: 2249027.252 ops/s
# Warmup Iteration  20: 2193066.069 ops/s
# Warmup Iteration  21: 2308370.393 ops/s
# Warmup Iteration  22: 2194971.297 ops/s
# Warmup Iteration  23: 2210663.610 ops/s
# Warmup Iteration  24: 2188192.004 ops/s
# Warmup Iteration  25: 2094904.910 ops/s
# Warmup Iteration  26: 2317820.273 ops/s
# Warmup Iteration  27: 2283118.223 ops/s
# Warmup Iteration  28: 2155520.040 ops/s
# Warmup Iteration  29: 2308619.395 ops/s
# Warmup Iteration  30: 2297817.314 ops/s
Iteration   1: 2183678.206 ops/s
Iteration   2: 2220838.730 ops/s
Iteration   3: 2221317.941 ops/s
Iteration   4: 2328519.149 ops/s
Iteration   5: 2174480.450 ops/s
Iteration   6: 2157317.394 ops/s
Iteration   7: 2289350.279 ops/s
Iteration   8: 2232976.212 ops/s
Iteration   9: 2253730.931 ops/s
Iteration  10: 2240958.168 ops/s
Iteration  11: 2176551.384 ops/s
Iteration  12: 2333449.825 ops/s
Iteration  13: 2143333.089 ops/s
Iteration  14: 2228966.882 ops/s
Iteration  15: 2250942.220 ops/s
Iteration  16: 2172278.427 ops/s
Iteration  17: 2226109.365 ops/s
Iteration  18: 2224988.524 ops/s
Iteration  19: 2125416.187 ops/s
Iteration  20: 2248291.687 ops/s
Iteration  21: 2241976.297 ops/s
Iteration  22: 2255818.268 ops/s
Iteration  23: 2182564.874 ops/s
Iteration  24: 2292672.623 ops/s
Iteration  25: 2251315.301 ops/s
Iteration  26: 2170354.367 ops/s
Iteration  27: 2268177.603 ops/s
Iteration  28: 2202113.777 ops/s
Iteration  29: 2263222.359 ops/s
Iteration  30: 2216141.882 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableFuseableTest._Benchmark.benchmark_syncArrayHidden":
  2225928.413 ±(99.9%) 33926.422 ops/s [Average]
  (min, avg, max) = (2125416.187, 2225928.413, 2333449.825), stdev = 50779.475
  CI (99.9%): [2192001.991, 2259854.835] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableFuseableTest._Benchmark.benchmark_syncArrayHidden  thrpt   30  2225928.413 ± 33926.422  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToList$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToList

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 512503.185 ops/s
# Warmup Iteration   2: 2096955.064 ops/s
# Warmup Iteration   3: 2310716.526 ops/s
# Warmup Iteration   4: 2790986.955 ops/s
# Warmup Iteration   5: 2814687.864 ops/s
# Warmup Iteration   6: 2736052.391 ops/s
# Warmup Iteration   7: 2940537.491 ops/s
# Warmup Iteration   8: 2928169.211 ops/s
# Warmup Iteration   9: 2667045.263 ops/s
# Warmup Iteration  10: 2788173.655 ops/s
# Warmup Iteration  11: 2795002.067 ops/s
# Warmup Iteration  12: 2736386.765 ops/s
# Warmup Iteration  13: 2804006.284 ops/s
# Warmup Iteration  14: 2863617.995 ops/s
# Warmup Iteration  15: 2785797.466 ops/s
# Warmup Iteration  16: 2908350.808 ops/s
# Warmup Iteration  17: 2821912.784 ops/s
# Warmup Iteration  18: 2813216.839 ops/s
# Warmup Iteration  19: 2826609.917 ops/s
# Warmup Iteration  20: 2838918.839 ops/s
# Warmup Iteration  21: 2720168.336 ops/s
# Warmup Iteration  22: 2797283.079 ops/s
# Warmup Iteration  23: 2894163.952 ops/s
# Warmup Iteration  24: 2746223.927 ops/s
# Warmup Iteration  25: 2789230.854 ops/s
# Warmup Iteration  26: 2902500.565 ops/s
# Warmup Iteration  27: 2781511.562 ops/s
# Warmup Iteration  28: 2896681.547 ops/s
# Warmup Iteration  29: 2786741.243 ops/s
# Warmup Iteration  30: 2755577.325 ops/s
Iteration   1: 2750733.742 ops/s
Iteration   2: 2744446.015 ops/s
Iteration   3: 2924829.843 ops/s
Iteration   4: 2850499.108 ops/s
Iteration   5: 2742904.677 ops/s
Iteration   6: 2947804.895 ops/s
Iteration   7: 2896654.934 ops/s
Iteration   8: 2742845.069 ops/s
Iteration   9: 2825385.131 ops/s
Iteration  10: 2765468.732 ops/s
Iteration  11: 2833662.611 ops/s
Iteration  12: 2853253.975 ops/s
Iteration  13: 2832278.404 ops/s
Iteration  14: 2946248.355 ops/s
Iteration  15: 2708375.274 ops/s
Iteration  16: 2858062.930 ops/s
Iteration  17: 2754577.840 ops/s
Iteration  18: 2769200.890 ops/s
Iteration  19: 2209523.233 ops/s
Iteration  20: 2673514.201 ops/s
Iteration  21: 2920389.917 ops/s
Iteration  22: 2799279.784 ops/s
Iteration  23: 2850275.186 ops/s
Iteration  24: 2697369.067 ops/s
Iteration  25: 2782280.185 ops/s
Iteration  26: 2787564.543 ops/s
Iteration  27: 2814450.581 ops/s
Iteration  28: 2715706.096 ops/s
Iteration  29: 2786061.865 ops/s
Iteration  30: 2846923.148 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCollectTest._Benchmark.benchmark_collectToList":
  2787685.674 ±(99.9%) 87922.217 ops/s [Average]
  (min, avg, max) = (2209523.233, 2787685.674, 2947804.895), stdev = 131597.846
  CI (99.9%): [2699763.457, 2875607.892] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableCollectTest._Benchmark.benchmark_collectToList  thrpt   30  2787685.674 ± 87922.217  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBounds$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBounds

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2544287.885 ops/s
# Warmup Iteration   2: 6259762.921 ops/s
# Warmup Iteration   3: 7734068.923 ops/s
# Warmup Iteration   4: 8721733.115 ops/s
# Warmup Iteration   5: 8222267.879 ops/s
# Warmup Iteration   6: 8478307.725 ops/s
# Warmup Iteration   7: 8374725.262 ops/s
# Warmup Iteration   8: 8193275.146 ops/s
# Warmup Iteration   9: 8121705.443 ops/s
# Warmup Iteration  10: 8472555.889 ops/s
# Warmup Iteration  11: 8123666.751 ops/s
# Warmup Iteration  12: 8478422.189 ops/s
# Warmup Iteration  13: 8141827.379 ops/s
# Warmup Iteration  14: 8500030.425 ops/s
# Warmup Iteration  15: 8180702.922 ops/s
# Warmup Iteration  16: 8547838.768 ops/s
# Warmup Iteration  17: 8342161.098 ops/s
# Warmup Iteration  18: 8252339.117 ops/s
# Warmup Iteration  19: 8436384.272 ops/s
# Warmup Iteration  20: 8350249.252 ops/s
# Warmup Iteration  21: 8640366.767 ops/s
# Warmup Iteration  22: 8228699.045 ops/s
# Warmup Iteration  23: 8175662.073 ops/s
# Warmup Iteration  24: 8254921.117 ops/s
# Warmup Iteration  25: 8512124.662 ops/s
# Warmup Iteration  26: 8509676.467 ops/s
# Warmup Iteration  27: 8272604.411 ops/s
# Warmup Iteration  28: 8680678.276 ops/s
# Warmup Iteration  29: 8145537.735 ops/s
# Warmup Iteration  30: 8489083.007 ops/s
Iteration   1: 8469706.605 ops/s
Iteration   2: 8614488.554 ops/s
Iteration   3: 8350588.845 ops/s
Iteration   4: 8239257.394 ops/s
Iteration   5: 8363136.423 ops/s
Iteration   6: 8280899.950 ops/s
Iteration   7: 8451546.067 ops/s
Iteration   8: 8688005.853 ops/s
Iteration   9: 8290883.037 ops/s
Iteration  10: 8576192.004 ops/s
Iteration  11: 8757864.873 ops/s
Iteration  12: 8022720.686 ops/s
Iteration  13: 8787367.762 ops/s
Iteration  14: 8287659.049 ops/s
Iteration  15: 8204392.394 ops/s
Iteration  16: 8477455.771 ops/s
Iteration  17: 8421810.075 ops/s
Iteration  18: 8231828.448 ops/s
Iteration  19: 8746165.253 ops/s
Iteration  20: 8534600.427 ops/s
Iteration  21: 8075661.075 ops/s
Iteration  22: 8393840.869 ops/s
Iteration  23: 8238557.502 ops/s
Iteration  24: 8301556.050 ops/s
Iteration  25: 8638041.572 ops/s
Iteration  26: 8279330.042 ops/s
Iteration  27: 8681688.414 ops/s
Iteration  28: 8387697.434 ops/s
Iteration  29: 8231694.546 ops/s
Iteration  30: 8685707.565 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBounds":
  8423678.151 ±(99.9%) 138828.041 ops/s [Average]
  (min, avg, max) = (8022720.686, 8423678.151, 8787367.762), stdev = 207791.292
  CI (99.9%): [8284850.110, 8562506.192] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtWithIndexOutOfBounds  thrpt   30  8423678.151 ± 138828.041  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAt$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAt

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2205467.267 ops/s
# Warmup Iteration   2: 5599564.172 ops/s
# Warmup Iteration   3: 6459878.311 ops/s
# Warmup Iteration   4: 7274074.230 ops/s
# Warmup Iteration   5: 7454014.384 ops/s
# Warmup Iteration   6: 7324773.869 ops/s
# Warmup Iteration   7: 7339249.573 ops/s
# Warmup Iteration   8: 7715179.974 ops/s
# Warmup Iteration   9: 7347564.661 ops/s
# Warmup Iteration  10: 7175614.675 ops/s
# Warmup Iteration  11: 7523981.438 ops/s
# Warmup Iteration  12: 7496586.719 ops/s
# Warmup Iteration  13: 7331809.563 ops/s
# Warmup Iteration  14: 7691593.353 ops/s
# Warmup Iteration  15: 7294584.649 ops/s
# Warmup Iteration  16: 7514277.313 ops/s
# Warmup Iteration  17: 7385831.693 ops/s
# Warmup Iteration  18: 7370765.605 ops/s
# Warmup Iteration  19: 7666199.114 ops/s
# Warmup Iteration  20: 7224441.887 ops/s
# Warmup Iteration  21: 7539988.152 ops/s
# Warmup Iteration  22: 7487046.611 ops/s
# Warmup Iteration  23: 7254085.183 ops/s
# Warmup Iteration  24: 7535231.131 ops/s
# Warmup Iteration  25: 7352976.620 ops/s
# Warmup Iteration  26: 7656388.846 ops/s
# Warmup Iteration  27: 7374854.015 ops/s
# Warmup Iteration  28: 7348435.770 ops/s
# Warmup Iteration  29: 7533738.283 ops/s
# Warmup Iteration  30: 7207401.799 ops/s
Iteration   1: 7468107.507 ops/s
Iteration   2: 7481243.905 ops/s
Iteration   3: 7388651.981 ops/s
Iteration   4: 7322667.438 ops/s
Iteration   5: 7560309.267 ops/s
Iteration   6: 7510685.092 ops/s
Iteration   7: 7305497.712 ops/s
Iteration   8: 7334430.826 ops/s
Iteration   9: 7547792.634 ops/s
Iteration  10: 7179606.773 ops/s
Iteration  11: 7627223.719 ops/s
Iteration  12: 7183208.786 ops/s
Iteration  13: 7621705.901 ops/s
Iteration  14: 5946569.102 ops/s
Iteration  15: 7344859.845 ops/s
Iteration  16: 7757145.180 ops/s
Iteration  17: 7613825.018 ops/s
Iteration  18: 7303700.232 ops/s
Iteration  19: 7434471.797 ops/s
Iteration  20: 7257282.145 ops/s
Iteration  21: 7450673.818 ops/s
Iteration  22: 7385871.977 ops/s
Iteration  23: 7343516.829 ops/s
Iteration  24: 7607036.704 ops/s
Iteration  25: 7374903.235 ops/s
Iteration  26: 7489207.278 ops/s
Iteration  27: 7466150.310 ops/s
Iteration  28: 7452041.006 ops/s
Iteration  29: 7230513.548 ops/s
Iteration  30: 7375481.263 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAt":
  7378812.694 ±(99.9%) 203357.108 ops/s [Average]
  (min, avg, max) = (5946569.102, 7378812.694, 7757145.180), stdev = 304375.368
  CI (99.9%): [7175455.587, 7582169.802] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAt  thrpt   30  7378812.694 ± 203357.108  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_disposeOnNextAfterFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_disposeOnNextAfterFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 459329.089 ops/s
# Warmup Iteration   2: 1687491.935 ops/s
# Warmup Iteration   3: 2144071.996 ops/s
# Warmup Iteration   4: 2298863.806 ops/s
# Warmup Iteration   5: 2492225.147 ops/s
# Warmup Iteration   6: 2398342.935 ops/s
# Warmup Iteration   7: 2413739.094 ops/s
# Warmup Iteration   8: 2461716.814 ops/s
# Warmup Iteration   9: 2417885.652 ops/s
# Warmup Iteration  10: 2336248.300 ops/s
# Warmup Iteration  11: 2467451.321 ops/s
# Warmup Iteration  12: 2412014.226 ops/s
# Warmup Iteration  13: 2339450.892 ops/s
# Warmup Iteration  14: 2486142.879 ops/s
# Warmup Iteration  15: 2401323.415 ops/s
# Warmup Iteration  16: 2474360.820 ops/s
# Warmup Iteration  17: 2443608.523 ops/s
# Warmup Iteration  18: 2338644.085 ops/s
# Warmup Iteration  19: 2454828.733 ops/s
# Warmup Iteration  20: 2426403.539 ops/s
# Warmup Iteration  21: 2433827.934 ops/s
# Warmup Iteration  22: 2379968.038 ops/s
# Warmup Iteration  23: 2419885.963 ops/s
# Warmup Iteration  24: 2395425.508 ops/s
# Warmup Iteration  25: 2368838.849 ops/s
# Warmup Iteration  26: 2480663.155 ops/s
# Warmup Iteration  27: 2343021.009 ops/s
# Warmup Iteration  28: 2397608.031 ops/s
# Warmup Iteration  29: 2557942.056 ops/s
# Warmup Iteration  30: 2349875.371 ops/s
Iteration   1: 2462064.653 ops/s
Iteration   2: 2336031.841 ops/s
Iteration   3: 2480664.659 ops/s
Iteration   4: 2462203.656 ops/s
Iteration   5: 2416835.268 ops/s
Iteration   6: 2437211.554 ops/s
Iteration   7: 2311062.525 ops/s
Iteration   8: 2392222.959 ops/s
Iteration   9: 2475645.418 ops/s
Iteration  10: 2387320.497 ops/s
Iteration  11: 2486464.797 ops/s
Iteration  12: 2413472.244 ops/s
Iteration  13: 2369008.010 ops/s
Iteration  14: 2382989.351 ops/s
Iteration  15: 2415314.591 ops/s
Iteration  16: 2440047.132 ops/s
Iteration  17: 2404521.794 ops/s
Iteration  18: 2452342.990 ops/s
Iteration  19: 2368903.959 ops/s
Iteration  20: 2458444.219 ops/s
Iteration  21: 2482955.669 ops/s
Iteration  22: 2390421.455 ops/s
Iteration  23: 2403178.610 ops/s
Iteration  24: 2514794.391 ops/s
Iteration  25: 2331051.822 ops/s
Iteration  26: 2410903.074 ops/s
Iteration  27: 2419449.237 ops/s
Iteration  28: 2446892.570 ops/s
Iteration  29: 2407853.326 ops/s
Iteration  30: 2354326.682 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableSwitchMapMaybeTest._Benchmark.benchmark_disposeOnNextAfterFirst":
  2417153.298 ±(99.9%) 33442.967 ops/s [Average]
  (min, avg, max) = (2311062.525, 2417153.298, 2514794.391), stdev = 50055.863
  CI (99.9%): [2383710.331, 2450596.266] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableSwitchMapMaybeTest._Benchmark.benchmark_disposeOnNextAfterFirst  thrpt   30  2417153.298 ± 33442.967  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_withFollowingFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_withFollowingFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2404870.775 ops/s
# Warmup Iteration   2: 5698430.807 ops/s
# Warmup Iteration   3: 6443447.473 ops/s
# Warmup Iteration   4: 7109217.611 ops/s
# Warmup Iteration   5: 7126224.531 ops/s
# Warmup Iteration   6: 7600885.911 ops/s
# Warmup Iteration   7: 7605347.754 ops/s
# Warmup Iteration   8: 7175938.787 ops/s
# Warmup Iteration   9: 7286834.256 ops/s
# Warmup Iteration  10: 7191323.781 ops/s
# Warmup Iteration  11: 7304841.574 ops/s
# Warmup Iteration  12: 7318074.357 ops/s
# Warmup Iteration  13: 7088407.083 ops/s
# Warmup Iteration  14: 7535899.244 ops/s
# Warmup Iteration  15: 6879829.945 ops/s
# Warmup Iteration  16: 7476893.740 ops/s
# Warmup Iteration  17: 7074893.905 ops/s
# Warmup Iteration  18: 7177254.380 ops/s
# Warmup Iteration  19: 7525629.663 ops/s
# Warmup Iteration  20: 7162540.441 ops/s
# Warmup Iteration  21: 7176718.236 ops/s
# Warmup Iteration  22: 7483583.392 ops/s
# Warmup Iteration  23: 7167193.506 ops/s
# Warmup Iteration  24: 7245614.685 ops/s
# Warmup Iteration  25: 7410864.151 ops/s
# Warmup Iteration  26: 7247230.369 ops/s
# Warmup Iteration  27: 7333295.818 ops/s
# Warmup Iteration  28: 7217741.058 ops/s
# Warmup Iteration  29: 7056815.406 ops/s
# Warmup Iteration  30: 7473959.391 ops/s
Iteration   1: 7148945.241 ops/s
Iteration   2: 7426600.059 ops/s
Iteration   3: 7034658.094 ops/s
Iteration   4: 7300284.531 ops/s
Iteration   5: 7584362.313 ops/s
Iteration   6: 7183892.736 ops/s
Iteration   7: 7182554.892 ops/s
Iteration   8: 6111266.375 ops/s
Iteration   9: 7371477.550 ops/s
Iteration  10: 7306097.571 ops/s
Iteration  11: 7424477.515 ops/s
Iteration  12: 7258691.048 ops/s
Iteration  13: 7285361.558 ops/s
Iteration  14: 7488752.068 ops/s
Iteration  15: 7328368.744 ops/s
Iteration  16: 7347447.796 ops/s
Iteration  17: 7444730.015 ops/s
Iteration  18: 7010464.702 ops/s
Iteration  19: 7653198.085 ops/s
Iteration  20: 7068158.337 ops/s
Iteration  21: 7250244.939 ops/s
Iteration  22: 7582846.423 ops/s
Iteration  23: 7130562.731 ops/s
Iteration  24: 7416953.181 ops/s
Iteration  25: 7285759.496 ops/s
Iteration  26: 7334678.235 ops/s
Iteration  27: 7187805.561 ops/s
Iteration  28: 7485295.116 ops/s
Iteration  29: 7347919.983 ops/s
Iteration  30: 7071655.589 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAnyTest._Benchmark.benchmark_withFollowingFirst":
  7268450.349 ±(99.9%) 182876.229 ops/s [Average]
  (min, avg, max) = (6111266.375, 7268450.349, 7653198.085), stdev = 273720.552
  CI (99.9%): [7085574.120, 7451326.579] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
FlowableAnyTest._Benchmark.benchmark_withFollowingFirst  thrpt   30  7268450.349 ± 182876.229  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2355845.646 ops/s
# Warmup Iteration   2: 4988760.670 ops/s
# Warmup Iteration   3: 5313087.776 ops/s
# Warmup Iteration   4: 6527123.599 ops/s
# Warmup Iteration   5: 6328718.606 ops/s
# Warmup Iteration   6: 6494750.563 ops/s
# Warmup Iteration   7: 6609892.339 ops/s
# Warmup Iteration   8: 6395931.353 ops/s
# Warmup Iteration   9: 6592607.510 ops/s
# Warmup Iteration  10: 6380650.049 ops/s
# Warmup Iteration  11: 6663761.850 ops/s
# Warmup Iteration  12: 6577596.277 ops/s
# Warmup Iteration  13: 6269455.678 ops/s
# Warmup Iteration  14: 6471228.033 ops/s
# Warmup Iteration  15: 6605019.560 ops/s
# Warmup Iteration  16: 6582873.631 ops/s
# Warmup Iteration  17: 6760335.363 ops/s
# Warmup Iteration  18: 6399741.949 ops/s
# Warmup Iteration  19: 6766175.973 ops/s
# Warmup Iteration  20: 6445942.387 ops/s
# Warmup Iteration  21: 6627428.956 ops/s
# Warmup Iteration  22: 6390724.705 ops/s
# Warmup Iteration  23: 6411683.965 ops/s
# Warmup Iteration  24: 6672235.147 ops/s
# Warmup Iteration  25: 6433254.218 ops/s
# Warmup Iteration  26: 6430093.834 ops/s
# Warmup Iteration  27: 6600680.212 ops/s
# Warmup Iteration  28: 6622837.385 ops/s
# Warmup Iteration  29: 6707334.789 ops/s
# Warmup Iteration  30: 6693092.050 ops/s
Iteration   1: 6336274.203 ops/s
Iteration   2: 6556790.199 ops/s
Iteration   3: 6349088.853 ops/s
Iteration   4: 6587457.894 ops/s
Iteration   5: 6578982.951 ops/s
Iteration   6: 6344425.888 ops/s
Iteration   7: 6620717.033 ops/s
Iteration   8: 6292752.515 ops/s
Iteration   9: 6529238.563 ops/s
Iteration  10: 6592074.937 ops/s
Iteration  11: 6467111.818 ops/s
Iteration  12: 6701944.702 ops/s
Iteration  13: 6314911.506 ops/s
Iteration  14: 6441028.215 ops/s
Iteration  15: 6812005.119 ops/s
Iteration  16: 6275444.463 ops/s
Iteration  17: 6592876.952 ops/s
Iteration  18: 6528148.255 ops/s
Iteration  19: 6357303.761 ops/s
Iteration  20: 6807917.156 ops/s
Iteration  21: 6404900.954 ops/s
Iteration  22: 6612947.584 ops/s
Iteration  23: 6450040.003 ops/s
Iteration  24: 6566557.318 ops/s
Iteration  25: 6449831.961 ops/s
Iteration  26: 6376878.206 ops/s
Iteration  27: 6524633.286 ops/s
Iteration  28: 6220661.363 ops/s
Iteration  29: 6579118.396 ops/s
Iteration  30: 6410196.330 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaSubscribe":
  6489408.679 ±(99.9%) 99694.611 ops/s [Average]
  (min, avg, max) = (6220661.363, 6489408.679, 6812005.119), stdev = 149218.212
  CI (99.9%): [6389714.068, 6589103.291] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaSubscribe  thrpt   30  6489408.679 ± 99694.611  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaUnsafeSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaUnsafeSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2346666.763 ops/s
# Warmup Iteration   2: 4758841.196 ops/s
# Warmup Iteration   3: 5804603.648 ops/s
# Warmup Iteration   4: 6789395.155 ops/s
# Warmup Iteration   5: 6393276.357 ops/s
# Warmup Iteration   6: 6395078.944 ops/s
# Warmup Iteration   7: 6698619.039 ops/s
# Warmup Iteration   8: 6557622.264 ops/s
# Warmup Iteration   9: 6537127.742 ops/s
# Warmup Iteration  10: 6534521.235 ops/s
# Warmup Iteration  11: 6391010.574 ops/s
# Warmup Iteration  12: 6716960.805 ops/s
# Warmup Iteration  13: 6620864.137 ops/s
# Warmup Iteration  14: 6451060.962 ops/s
# Warmup Iteration  15: 6568928.441 ops/s
# Warmup Iteration  16: 6763705.522 ops/s
# Warmup Iteration  17: 6403002.743 ops/s
# Warmup Iteration  18: 6498744.963 ops/s
# Warmup Iteration  19: 6782740.559 ops/s
# Warmup Iteration  20: 6503540.827 ops/s
# Warmup Iteration  21: 6508818.439 ops/s
# Warmup Iteration  22: 6756166.500 ops/s
# Warmup Iteration  23: 6639709.489 ops/s
# Warmup Iteration  24: 6611432.256 ops/s
# Warmup Iteration  25: 6495652.304 ops/s
# Warmup Iteration  26: 6838208.069 ops/s
# Warmup Iteration  27: 6635706.301 ops/s
# Warmup Iteration  28: 6575984.466 ops/s
# Warmup Iteration  29: 6651104.953 ops/s
# Warmup Iteration  30: 6506516.426 ops/s
Iteration   1: 6852056.597 ops/s
Iteration   2: 6610903.642 ops/s
Iteration   3: 5271001.255 ops/s
Iteration   4: 6776572.059 ops/s
Iteration   5: 6333205.222 ops/s
Iteration   6: 6826414.431 ops/s
Iteration   7: 6666676.030 ops/s
Iteration   8: 6303879.792 ops/s
Iteration   9: 6667479.878 ops/s
Iteration  10: 6520215.338 ops/s
Iteration  11: 6781396.052 ops/s
Iteration  12: 6585824.898 ops/s
Iteration  13: 6484679.066 ops/s
Iteration  14: 6668535.192 ops/s
Iteration  15: 6801854.879 ops/s
Iteration  16: 6319291.000 ops/s
Iteration  17: 6577820.426 ops/s
Iteration  18: 6304183.946 ops/s
Iteration  19: 6595524.581 ops/s
Iteration  20: 6660914.279 ops/s
Iteration  21: 6649793.038 ops/s
Iteration  22: 6513904.350 ops/s
Iteration  23: 6420218.844 ops/s
Iteration  24: 6947186.740 ops/s
Iteration  25: 6581993.925 ops/s
Iteration  26: 6548890.196 ops/s
Iteration  27: 6345818.798 ops/s
Iteration  28: 6671838.196 ops/s
Iteration  29: 6669667.066 ops/s
Iteration  30: 6598972.979 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaUnsafeSubscribe":
  6551890.423 ±(99.9%) 196940.422 ops/s [Average]
  (min, avg, max) = (5271001.255, 6551890.423, 6947186.740), stdev = 294771.174
  CI (99.9%): [6354950.001, 6748830.845] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score        Error  Units
FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaUnsafeSubscribe  thrpt   30  6551890.423 ± 196940.422  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_just10Arguments$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_just10Arguments

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 439280.035 ops/s
# Warmup Iteration   2: 2075250.189 ops/s
# Warmup Iteration   3: 2492020.720 ops/s
# Warmup Iteration   4: 2907905.988 ops/s
# Warmup Iteration   5: 2961947.987 ops/s
# Warmup Iteration   6: 2987432.328 ops/s
# Warmup Iteration   7: 2944893.510 ops/s
# Warmup Iteration   8: 3023646.660 ops/s
# Warmup Iteration   9: 2921164.087 ops/s
# Warmup Iteration  10: 3032258.820 ops/s
# Warmup Iteration  11: 2968390.996 ops/s
# Warmup Iteration  12: 2980429.126 ops/s
# Warmup Iteration  13: 3089973.050 ops/s
# Warmup Iteration  14: 2895870.671 ops/s
# Warmup Iteration  15: 3042332.155 ops/s
# Warmup Iteration  16: 2880148.428 ops/s
# Warmup Iteration  17: 2948886.536 ops/s
# Warmup Iteration  18: 3006583.618 ops/s
# Warmup Iteration  19: 2875991.986 ops/s
# Warmup Iteration  20: 3069954.762 ops/s
# Warmup Iteration  21: 3066492.619 ops/s
# Warmup Iteration  22: 2854433.000 ops/s
# Warmup Iteration  23: 3040976.704 ops/s
# Warmup Iteration  24: 2963695.298 ops/s
# Warmup Iteration  25: 2981709.926 ops/s
# Warmup Iteration  26: 2955016.514 ops/s
# Warmup Iteration  27: 2991140.787 ops/s
# Warmup Iteration  28: 2897098.805 ops/s
# Warmup Iteration  29: 3023821.329 ops/s
# Warmup Iteration  30: 2982175.795 ops/s
Iteration   1: 3008143.606 ops/s
Iteration   2: 2953599.604 ops/s
Iteration   3: 3090972.244 ops/s
Iteration   4: 2899582.577 ops/s
Iteration   5: 2996195.451 ops/s
Iteration   6: 2990819.716 ops/s
Iteration   7: 2958996.997 ops/s
Iteration   8: 2965407.764 ops/s
Iteration   9: 3014108.820 ops/s
Iteration  10: 3058223.652 ops/s
Iteration  11: 2856648.813 ops/s
Iteration  12: 2930934.009 ops/s
Iteration  13: 2992179.705 ops/s
Iteration  14: 2899242.108 ops/s
Iteration  15: 2917389.734 ops/s
Iteration  16: 3028496.358 ops/s
Iteration  17: 2942256.419 ops/s
Iteration  18: 2995687.034 ops/s
Iteration  19: 2992742.881 ops/s
Iteration  20: 2989189.325 ops/s
Iteration  21: 3058835.148 ops/s
Iteration  22: 2983307.545 ops/s
Iteration  23: 2992135.869 ops/s
Iteration  24: 2998590.639 ops/s
Iteration  25: 2888756.229 ops/s
Iteration  26: 3048228.673 ops/s
Iteration  27: 2900116.272 ops/s
Iteration  28: 2899092.337 ops/s
Iteration  29: 2935756.412 ops/s
Iteration  30: 3102491.538 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_just10Arguments":
  2976270.916 ±(99.9%) 41192.821 ops/s [Average]
  (min, avg, max) = (2856648.813, 2976270.916, 3102491.538), stdev = 61655.481
  CI (99.9%): [2935078.095, 3017463.737] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableFromArrayTest._Benchmark.benchmark_just10Arguments  thrpt   30  2976270.916 ± 41192.821  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58800.664 ops/s
# Warmup Iteration   2: 211727.822 ops/s
# Warmup Iteration   3: 461553.436 ops/s
# Warmup Iteration   4: 440098.774 ops/s
# Warmup Iteration   5: 437740.470 ops/s
# Warmup Iteration   6: 432257.530 ops/s
# Warmup Iteration   7: 443173.593 ops/s
# Warmup Iteration   8: 468409.955 ops/s
# Warmup Iteration   9: 463929.318 ops/s
# Warmup Iteration  10: 479379.431 ops/s
# Warmup Iteration  11: 454823.530 ops/s
# Warmup Iteration  12: 482572.010 ops/s
# Warmup Iteration  13: 478310.574 ops/s
# Warmup Iteration  14: 454221.481 ops/s
# Warmup Iteration  15: 472852.256 ops/s
# Warmup Iteration  16: 465988.010 ops/s
# Warmup Iteration  17: 466460.025 ops/s
# Warmup Iteration  18: 512371.649 ops/s
# Warmup Iteration  19: 459534.485 ops/s
# Warmup Iteration  20: 483012.847 ops/s
# Warmup Iteration  21: 492341.615 ops/s
# Warmup Iteration  22: 497071.864 ops/s
# Warmup Iteration  23: 467600.883 ops/s
# Warmup Iteration  24: 493266.814 ops/s
# Warmup Iteration  25: 472439.130 ops/s
# Warmup Iteration  26: 477930.739 ops/s
# Warmup Iteration  27: 492586.455 ops/s
# Warmup Iteration  28: 401070.256 ops/s
# Warmup Iteration  29: 483500.541 ops/s
# Warmup Iteration  30: 488319.123 ops/s
Iteration   1: 493605.752 ops/s
Iteration   2: 472560.790 ops/s
Iteration   3: 494067.290 ops/s
Iteration   4: 495630.098 ops/s
Iteration   5: 490609.921 ops/s
Iteration   6: 439626.991 ops/s
Iteration   7: 494450.588 ops/s
Iteration   8: 486765.505 ops/s
Iteration   9: 502942.359 ops/s
Iteration  10: 482249.848 ops/s
Iteration  11: 473589.319 ops/s
Iteration  12: 512194.729 ops/s
Iteration  13: 472765.252 ops/s
Iteration  14: 469703.253 ops/s
Iteration  15: 499281.176 ops/s
Iteration  16: 497972.438 ops/s
Iteration  17: 478947.645 ops/s
Iteration  18: 507926.653 ops/s
Iteration  19: 467178.350 ops/s
Iteration  20: 489665.483 ops/s
Iteration  21: 470318.108 ops/s
Iteration  22: 486078.741 ops/s
Iteration  23: 473837.517 ops/s
Iteration  24: 488078.348 ops/s
Iteration  25: 506266.875 ops/s
Iteration  26: 478118.192 ops/s
Iteration  27: 485617.088 ops/s
Iteration  28: 486542.048 ops/s
Iteration  29: 482288.426 ops/s
Iteration  30: 493055.289 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableError":
  485731.136 ±(99.9%) 9904.141 ops/s [Average]
  (min, avg, max) = (439626.991, 485731.136, 512194.729), stdev = 14824.054
  CI (99.9%): [475826.994, 495635.277] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybeConcatEagerTest._Benchmark.benchmark_iterableError  thrpt   30  485731.136 ± 9904.141  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToFutureTest._Benchmark.benchmark_withTimeoutNoTimeout$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToFutureTest._Benchmark.benchmark_withTimeoutNoTimeout

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 687152.431 ops/s
# Warmup Iteration   2: 2829047.287 ops/s
# Warmup Iteration   3: 3739722.300 ops/s
# Warmup Iteration   4: 4522038.749 ops/s
# Warmup Iteration   5: 4520398.678 ops/s
# Warmup Iteration   6: 4387335.297 ops/s
# Warmup Iteration   7: 4490180.156 ops/s
# Warmup Iteration   8: 4420100.359 ops/s
# Warmup Iteration   9: 4479173.848 ops/s
# Warmup Iteration  10: 4702730.674 ops/s
# Warmup Iteration  11: 4616385.462 ops/s
# Warmup Iteration  12: 4337976.229 ops/s
# Warmup Iteration  13: 4624786.925 ops/s
# Warmup Iteration  14: 4491772.141 ops/s
# Warmup Iteration  15: 4512016.324 ops/s
# Warmup Iteration  16: 4382746.676 ops/s
# Warmup Iteration  17: 4461033.454 ops/s
# Warmup Iteration  18: 4554488.805 ops/s
# Warmup Iteration  19: 4520526.914 ops/s
# Warmup Iteration  20: 4485560.357 ops/s
# Warmup Iteration  21: 4441348.866 ops/s
# Warmup Iteration  22: 4595889.814 ops/s
# Warmup Iteration  23: 4553783.908 ops/s
# Warmup Iteration  24: 4494188.881 ops/s
# Warmup Iteration  25: 4496480.863 ops/s
# Warmup Iteration  26: 4754094.822 ops/s
# Warmup Iteration  27: 4615096.513 ops/s
# Warmup Iteration  28: 4541274.343 ops/s
# Warmup Iteration  29: 4445864.059 ops/s
# Warmup Iteration  30: 4627523.976 ops/s
Iteration   1: 4420771.230 ops/s
Iteration   2: 4497126.145 ops/s
Iteration   3: 4385459.435 ops/s
Iteration   4: 4548829.389 ops/s
Iteration   5: 4436674.036 ops/s
Iteration   6: 4489016.188 ops/s
Iteration   7: 4710764.649 ops/s
Iteration   8: 4475212.357 ops/s
Iteration   9: 4735688.420 ops/s
Iteration  10: 4326043.461 ops/s
Iteration  11: 4651447.445 ops/s
Iteration  12: 4510009.653 ops/s
Iteration  13: 4341911.922 ops/s
Iteration  14: 4587471.770 ops/s
Iteration  15: 4601406.381 ops/s
Iteration  16: 4341666.628 ops/s
Iteration  17: 4628789.443 ops/s
Iteration  18: 4494985.951 ops/s
Iteration  19: 4661596.671 ops/s
Iteration  20: 4399680.504 ops/s
Iteration  21: 4336924.254 ops/s
Iteration  22: 4546471.250 ops/s
Iteration  23: 4393666.523 ops/s
Iteration  24: 4407548.376 ops/s
Iteration  25: 4357924.860 ops/s
Iteration  26: 4248383.637 ops/s
Iteration  27: 4501300.001 ops/s
Iteration  28: 4268446.591 ops/s
Iteration  29: 4317442.342 ops/s
Iteration  30: 4664606.052 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToFutureTest._Benchmark.benchmark_withTimeoutNoTimeout":
  4476242.186 ±(99.9%) 90303.931 ops/s [Average]
  (min, avg, max) = (4248383.637, 4476242.186, 4735688.420), stdev = 135162.682
  CI (99.9%): [4385938.255, 4566546.116] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableToFutureTest._Benchmark.benchmark_withTimeoutNoTimeout  thrpt   30  4476242.186 ± 90303.931  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25726.688 ops/s
# Warmup Iteration   2: 179309.285 ops/s
# Warmup Iteration   3: 490176.048 ops/s
# Warmup Iteration   4: 479478.888 ops/s
# Warmup Iteration   5: 490900.484 ops/s
# Warmup Iteration   6: 548523.536 ops/s
# Warmup Iteration   7: 533264.944 ops/s
# Warmup Iteration   8: 544506.232 ops/s
# Warmup Iteration   9: 548206.059 ops/s
# Warmup Iteration  10: 528038.256 ops/s
# Warmup Iteration  11: 538416.087 ops/s
# Warmup Iteration  12: 545729.355 ops/s
# Warmup Iteration  13: 520520.228 ops/s
# Warmup Iteration  14: 551331.965 ops/s
# Warmup Iteration  15: 523312.503 ops/s
# Warmup Iteration  16: 529718.606 ops/s
# Warmup Iteration  17: 575730.669 ops/s
# Warmup Iteration  18: 535442.322 ops/s
# Warmup Iteration  19: 553923.725 ops/s
# Warmup Iteration  20: 552759.763 ops/s
# Warmup Iteration  21: 555443.046 ops/s
# Warmup Iteration  22: 488766.950 ops/s
# Warmup Iteration  23: 496656.537 ops/s
# Warmup Iteration  24: 585347.526 ops/s
# Warmup Iteration  25: 548848.095 ops/s
# Warmup Iteration  26: 570611.611 ops/s
# Warmup Iteration  27: 512921.485 ops/s
# Warmup Iteration  28: 608279.014 ops/s
# Warmup Iteration  29: 563071.174 ops/s
# Warmup Iteration  30: 582521.044 ops/s
Iteration   1: 571555.755 ops/s
Iteration   2: 613936.150 ops/s
Iteration   3: 580758.331 ops/s
Iteration   4: 564976.478 ops/s
Iteration   5: 633170.445 ops/s
Iteration   6: 594138.484 ops/s
Iteration   7: 567120.889 ops/s
Iteration   8: 557796.852 ops/s
Iteration   9: 614966.409 ops/s
Iteration  10: 583570.859 ops/s
Iteration  11: 571304.028 ops/s
Iteration  12: 519575.846 ops/s
Iteration  13: 647048.399 ops/s
Iteration  14: 574741.265 ops/s
Iteration  15: 585058.572 ops/s
Iteration  16: 546172.886 ops/s
Iteration  17: 563330.457 ops/s
Iteration  18: 572211.901 ops/s
Iteration  19: 550369.873 ops/s
Iteration  20: 582709.253 ops/s
Iteration  21: 565357.553 ops/s
Iteration  22: 563896.539 ops/s
Iteration  23: 570770.318 ops/s
Iteration  24: 568079.130 ops/s
Iteration  25: 561575.774 ops/s
Iteration  26: 566027.826 ops/s
Iteration  27: 559211.817 ops/s
Iteration  28: 562345.054 ops/s
Iteration  29: 587627.713 ops/s
Iteration  30: 559243.525 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableErrorMaxConcurrency":
  575288.279 ±(99.9%) 17018.483 ops/s [Average]
  (min, avg, max) = (519575.846, 575288.279, 647048.399), stdev = 25472.467
  CI (99.9%): [558269.796, 592306.763] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
MaybeConcatEagerTest._Benchmark.benchmark_iterableErrorMaxConcurrency  thrpt   30  575288.279 ± 17018.483  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32907.898 ops/s
# Warmup Iteration   2: 263261.322 ops/s
# Warmup Iteration   3: 373711.683 ops/s
# Warmup Iteration   4: 410124.463 ops/s
# Warmup Iteration   5: 388003.396 ops/s
# Warmup Iteration   6: 378306.531 ops/s
# Warmup Iteration   7: 387670.777 ops/s
# Warmup Iteration   8: 396142.650 ops/s
# Warmup Iteration   9: 375248.690 ops/s
# Warmup Iteration  10: 424641.387 ops/s
# Warmup Iteration  11: 392420.104 ops/s
# Warmup Iteration  12: 394538.146 ops/s
# Warmup Iteration  13: 410107.504 ops/s
# Warmup Iteration  14: 393658.825 ops/s
# Warmup Iteration  15: 396698.552 ops/s
# Warmup Iteration  16: 416731.659 ops/s
# Warmup Iteration  17: 407894.185 ops/s
# Warmup Iteration  18: 422993.577 ops/s
# Warmup Iteration  19: 420627.063 ops/s
# Warmup Iteration  20: 406523.465 ops/s
# Warmup Iteration  21: 417552.527 ops/s
# Warmup Iteration  22: 411577.852 ops/s
# Warmup Iteration  23: 400840.106 ops/s
# Warmup Iteration  24: 417062.210 ops/s
# Warmup Iteration  25: 387609.939 ops/s
# Warmup Iteration  26: 415723.565 ops/s
# Warmup Iteration  27: 421577.554 ops/s
# Warmup Iteration  28: 418259.916 ops/s
# Warmup Iteration  29: 423383.159 ops/s
# Warmup Iteration  30: 410817.577 ops/s
Iteration   1: 425773.584 ops/s
Iteration   2: 426011.446 ops/s
Iteration   3: 410066.262 ops/s
Iteration   4: 416211.654 ops/s
Iteration   5: 398322.431 ops/s
Iteration   6: 419735.834 ops/s
Iteration   7: 406444.537 ops/s
Iteration   8: 402782.664 ops/s
Iteration   9: 424139.528 ops/s
Iteration  10: 406944.855 ops/s
Iteration  11: 419152.461 ops/s
Iteration  12: 429044.500 ops/s
Iteration  13: 394925.765 ops/s
Iteration  14: 410294.828 ops/s
Iteration  15: 416804.315 ops/s
Iteration  16: 427670.945 ops/s
Iteration  17: 406706.258 ops/s
Iteration  18: 430535.378 ops/s
Iteration  19: 419334.258 ops/s
Iteration  20: 405779.302 ops/s
Iteration  21: 423770.518 ops/s
Iteration  22: 413963.984 ops/s
Iteration  23: 419999.128 ops/s
Iteration  24: 430099.015 ops/s
Iteration  25: 405976.916 ops/s
Iteration  26: 428242.387 ops/s
Iteration  27: 396616.377 ops/s
Iteration  28: 417483.466 ops/s
Iteration  29: 422419.943 ops/s
Iteration  30: 406364.653 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableDelayError":
  415387.240 ±(99.9%) 7027.983 ops/s [Average]
  (min, avg, max) = (394925.765, 415387.240, 430535.378), stdev = 10519.155
  CI (99.9%): [408359.257, 422415.223] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MaybeConcatEagerTest._Benchmark.benchmark_iterableDelayError  thrpt   30  415387.240 ± 7027.983  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_syncSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_syncSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 400946.126 ops/s
# Warmup Iteration   2: 2666562.745 ops/s
# Warmup Iteration   3: 4172579.121 ops/s
# Warmup Iteration   4: 5064653.919 ops/s
# Warmup Iteration   5: 4957190.754 ops/s
# Warmup Iteration   6: 5006636.975 ops/s
# Warmup Iteration   7: 5144186.171 ops/s
# Warmup Iteration   8: 4884744.702 ops/s
# Warmup Iteration   9: 5167408.270 ops/s
# Warmup Iteration  10: 5009412.795 ops/s
# Warmup Iteration  11: 5022918.789 ops/s
# Warmup Iteration  12: 4918819.624 ops/s
# Warmup Iteration  13: 5116342.058 ops/s
# Warmup Iteration  14: 5097460.073 ops/s
# Warmup Iteration  15: 4891477.709 ops/s
# Warmup Iteration  16: 5083702.583 ops/s
# Warmup Iteration  17: 4286020.694 ops/s
# Warmup Iteration  18: 4935034.783 ops/s
# Warmup Iteration  19: 4990932.167 ops/s
# Warmup Iteration  20: 5103232.308 ops/s
# Warmup Iteration  21: 5300905.166 ops/s
# Warmup Iteration  22: 4886251.936 ops/s
# Warmup Iteration  23: 5195666.445 ops/s
# Warmup Iteration  24: 5255273.345 ops/s
# Warmup Iteration  25: 4879279.729 ops/s
# Warmup Iteration  26: 5268406.952 ops/s
# Warmup Iteration  27: 4942807.975 ops/s
# Warmup Iteration  28: 4992149.617 ops/s
# Warmup Iteration  29: 5138098.730 ops/s
# Warmup Iteration  30: 4954534.553 ops/s
Iteration   1: 5102757.120 ops/s
Iteration   2: 4916981.180 ops/s
Iteration   3: 5104266.685 ops/s
Iteration   4: 5078652.665 ops/s
Iteration   5: 5000319.370 ops/s
Iteration   6: 5084789.106 ops/s
Iteration   7: 5203967.240 ops/s
Iteration   8: 4948804.733 ops/s
Iteration   9: 5217622.836 ops/s
Iteration  10: 5015698.242 ops/s
Iteration  11: 5133673.758 ops/s
Iteration  12: 5115397.182 ops/s
Iteration  13: 5084019.051 ops/s
Iteration  14: 5125488.563 ops/s
Iteration  15: 5058612.339 ops/s
Iteration  16: 5090751.425 ops/s
Iteration  17: 5292322.188 ops/s
Iteration  18: 4942800.757 ops/s
Iteration  19: 5207818.102 ops/s
Iteration  20: 5272678.257 ops/s
Iteration  21: 4964204.209 ops/s
Iteration  22: 5196200.728 ops/s
Iteration  23: 5020242.662 ops/s
Iteration  24: 5256300.689 ops/s
Iteration  25: 5292781.781 ops/s
Iteration  26: 4784603.258 ops/s
Iteration  27: 5163281.449 ops/s
Iteration  28: 4877228.402 ops/s
Iteration  29: 5159044.875 ops/s
Iteration  30: 4855247.358 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_syncSuccess":
  5085551.874 ±(99.9%) 88761.712 ops/s [Average]
  (min, avg, max) = (4784603.258, 5085551.874, 5292781.781), stdev = 132854.361
  CI (99.9%): [4996790.162, 5174313.585] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableFromCompletionStageTest._Benchmark.benchmark_syncSuccess  thrpt   30  5085551.874 ± 88761.712  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 55287.646 ops/s
# Warmup Iteration   2: 323468.914 ops/s
# Warmup Iteration   3: 418988.353 ops/s
# Warmup Iteration   4: 423383.710 ops/s
# Warmup Iteration   5: 420585.229 ops/s
# Warmup Iteration   6: 408238.969 ops/s
# Warmup Iteration   7: 419329.878 ops/s
# Warmup Iteration   8: 452897.747 ops/s
# Warmup Iteration   9: 433163.525 ops/s
# Warmup Iteration  10: 431614.026 ops/s
# Warmup Iteration  11: 440129.110 ops/s
# Warmup Iteration  12: 443533.988 ops/s
# Warmup Iteration  13: 431536.798 ops/s
# Warmup Iteration  14: 450133.782 ops/s
# Warmup Iteration  15: 417143.817 ops/s
# Warmup Iteration  16: 436548.169 ops/s
# Warmup Iteration  17: 477479.545 ops/s
# Warmup Iteration  18: 448263.640 ops/s
# Warmup Iteration  19: 451262.335 ops/s
# Warmup Iteration  20: 482280.615 ops/s
# Warmup Iteration  21: 447571.402 ops/s
# Warmup Iteration  22: 464949.665 ops/s
# Warmup Iteration  23: 452625.598 ops/s
# Warmup Iteration  24: 445770.849 ops/s
# Warmup Iteration  25: 452307.320 ops/s
# Warmup Iteration  26: 447115.371 ops/s
# Warmup Iteration  27: 453490.489 ops/s
# Warmup Iteration  28: 438704.862 ops/s
# Warmup Iteration  29: 472286.588 ops/s
# Warmup Iteration  30: 437963.628 ops/s
Iteration   1: 458322.335 ops/s
Iteration   2: 470925.162 ops/s
Iteration   3: 460666.301 ops/s
Iteration   4: 451632.482 ops/s
Iteration   5: 470529.398 ops/s
Iteration   6: 454902.544 ops/s
Iteration   7: 442249.769 ops/s
Iteration   8: 482282.057 ops/s
Iteration   9: 455260.077 ops/s
Iteration  10: 474465.030 ops/s
Iteration  11: 466887.107 ops/s
Iteration  12: 458789.168 ops/s
Iteration  13: 470043.314 ops/s
Iteration  14: 438872.371 ops/s
Iteration  15: 457200.964 ops/s
Iteration  16: 466650.502 ops/s
Iteration  17: 456867.942 ops/s
Iteration  18: 465409.506 ops/s
Iteration  19: 462776.687 ops/s
Iteration  20: 449481.384 ops/s
Iteration  21: 469509.310 ops/s
Iteration  22: 453159.818 ops/s
Iteration  23: 472495.387 ops/s
Iteration  24: 467066.955 ops/s
Iteration  25: 451719.170 ops/s
Iteration  26: 475135.824 ops/s
Iteration  27: 443907.585 ops/s
Iteration  28: 463888.102 ops/s
Iteration  29: 449893.475 ops/s
Iteration  30: 462383.843 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency":
  460779.119 ±(99.9%) 6999.573 ops/s [Average]
  (min, avg, max) = (438872.371, 460779.119, 482282.057), stdev = 10476.632
  CI (99.9%): [453779.546, 467778.692] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MaybeConcatEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency  thrpt   30  460779.119 ± 6999.573  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 568315.055 ops/s
# Warmup Iteration   2: 2275433.169 ops/s
# Warmup Iteration   3: 3678134.522 ops/s
# Warmup Iteration   4: 4094332.624 ops/s
# Warmup Iteration   5: 3873831.507 ops/s
# Warmup Iteration   6: 4042944.188 ops/s
# Warmup Iteration   7: 3874371.924 ops/s
# Warmup Iteration   8: 4048267.541 ops/s
# Warmup Iteration   9: 3948234.740 ops/s
# Warmup Iteration  10: 3723042.688 ops/s
# Warmup Iteration  11: 4131320.861 ops/s
# Warmup Iteration  12: 2981264.116 ops/s
# Warmup Iteration  13: 4088571.501 ops/s
# Warmup Iteration  14: 4047566.230 ops/s
# Warmup Iteration  15: 4006635.613 ops/s
# Warmup Iteration  16: 3954740.830 ops/s
# Warmup Iteration  17: 3879411.947 ops/s
# Warmup Iteration  18: 4117139.857 ops/s
# Warmup Iteration  19: 3876289.122 ops/s
# Warmup Iteration  20: 3997552.703 ops/s
# Warmup Iteration  21: 3868479.001 ops/s
# Warmup Iteration  22: 4017646.326 ops/s
# Warmup Iteration  23: 4090849.407 ops/s
# Warmup Iteration  24: 3775728.780 ops/s
# Warmup Iteration  25: 4113009.296 ops/s
# Warmup Iteration  26: 3902296.036 ops/s
# Warmup Iteration  27: 4041317.282 ops/s
# Warmup Iteration  28: 3903916.974 ops/s
# Warmup Iteration  29: 3989457.118 ops/s
# Warmup Iteration  30: 4247115.389 ops/s
Iteration   1: 3910966.664 ops/s
Iteration   2: 3902910.896 ops/s
Iteration   3: 4054178.989 ops/s
Iteration   4: 3933065.720 ops/s
Iteration   5: 4165936.460 ops/s
Iteration   6: 3939087.332 ops/s
Iteration   7: 4044539.985 ops/s
Iteration   8: 4058663.619 ops/s
Iteration   9: 3937177.618 ops/s
Iteration  10: 3866940.461 ops/s
Iteration  11: 3920967.606 ops/s
Iteration  12: 4006289.078 ops/s
Iteration  13: 4127478.673 ops/s
Iteration  14: 3890424.773 ops/s
Iteration  15: 3960527.894 ops/s
Iteration  16: 4175706.966 ops/s
Iteration  17: 3856340.974 ops/s
Iteration  18: 4050783.573 ops/s
Iteration  19: 3940272.077 ops/s
Iteration  20: 4034083.369 ops/s
Iteration  21: 4038708.826 ops/s
Iteration  22: 4128695.297 ops/s
Iteration  23: 4020854.939 ops/s
Iteration  24: 3983558.294 ops/s
Iteration  25: 4005952.677 ops/s
Iteration  26: 4071775.028 ops/s
Iteration  27: 4008107.984 ops/s
Iteration  28: 4109869.670 ops/s
Iteration  29: 3833514.095 ops/s
Iteration  30: 4171299.828 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_cancel":
  4004955.979 ±(99.9%) 64517.085 ops/s [Average]
  (min, avg, max) = (3833514.095, 4004955.979, 4175706.966), stdev = 96566.143
  CI (99.9%): [3940438.894, 4069473.064] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFromCompletionStageTest._Benchmark.benchmark_cancel  thrpt   30  4004955.979 ± 64517.085  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_cancelledUpFrontConnectAnyway$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_cancelledUpFrontConnectAnyway

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 717150.526 ops/s
# Warmup Iteration   2: 2611002.003 ops/s
# Warmup Iteration   3: 2838497.322 ops/s
# Warmup Iteration   4: 3256550.598 ops/s
# Warmup Iteration   5: 3428531.545 ops/s
# Warmup Iteration   6: 3240519.635 ops/s
# Warmup Iteration   7: 3198737.849 ops/s
# Warmup Iteration   8: 3309185.675 ops/s
# Warmup Iteration   9: 3385276.858 ops/s
# Warmup Iteration  10: 3267538.344 ops/s
# Warmup Iteration  11: 3371557.122 ops/s
# Warmup Iteration  12: 3284335.262 ops/s
# Warmup Iteration  13: 3298735.393 ops/s
# Warmup Iteration  14: 3430043.436 ops/s
# Warmup Iteration  15: 3312467.980 ops/s
# Warmup Iteration  16: 3414833.841 ops/s
# Warmup Iteration  17: 3412347.939 ops/s
# Warmup Iteration  18: 3230484.944 ops/s
# Warmup Iteration  19: 3369590.217 ops/s
# Warmup Iteration  20: 3355054.028 ops/s
# Warmup Iteration  21: 3295332.614 ops/s
# Warmup Iteration  22: 3422226.983 ops/s
# Warmup Iteration  23: 3231126.451 ops/s
# Warmup Iteration  24: 3276934.013 ops/s
# Warmup Iteration  25: 3340545.705 ops/s
# Warmup Iteration  26: 3317936.326 ops/s
# Warmup Iteration  27: 3401135.272 ops/s
# Warmup Iteration  28: 3237640.605 ops/s
# Warmup Iteration  29: 3294723.328 ops/s
# Warmup Iteration  30: 3354114.774 ops/s
Iteration   1: 3305572.175 ops/s
Iteration   2: 3336738.287 ops/s
Iteration   3: 3358035.186 ops/s
Iteration   4: 3245778.366 ops/s
Iteration   5: 3371401.792 ops/s
Iteration   6: 3305071.139 ops/s
Iteration   7: 3458755.464 ops/s
Iteration   8: 3226747.945 ops/s
Iteration   9: 3314523.582 ops/s
Iteration  10: 3398705.777 ops/s
Iteration  11: 3258950.575 ops/s
Iteration  12: 3377915.573 ops/s
Iteration  13: 3214384.184 ops/s
Iteration  14: 3470052.307 ops/s
Iteration  15: 3296356.370 ops/s
Iteration  16: 3423518.448 ops/s
Iteration  17: 3279854.582 ops/s
Iteration  18: 3392481.846 ops/s
Iteration  19: 3217230.204 ops/s
Iteration  20: 3399043.051 ops/s
Iteration  21: 3376685.950 ops/s
Iteration  22: 3260490.197 ops/s
Iteration  23: 3418589.936 ops/s
Iteration  24: 3375039.349 ops/s
Iteration  25: 3325969.326 ops/s
Iteration  26: 3328570.869 ops/s
Iteration  27: 3308187.650 ops/s
Iteration  28: 3293569.683 ops/s
Iteration  29: 3412464.025 ops/s
Iteration  30: 3258244.613 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_cancelledUpFrontConnectAnyway":
  3333630.948 ±(99.9%) 47636.023 ops/s [Average]
  (min, avg, max) = (3214384.184, 3333630.948, 3470052.307), stdev = 71299.362
  CI (99.9%): [3285994.925, 3381266.972] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableCacheTest._Benchmark.benchmark_cancelledUpFrontConnectAnyway  thrpt   30  3333630.948 ± 47636.023  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_as$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_as

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 538030.248 ops/s
# Warmup Iteration   2: 2372723.980 ops/s
# Warmup Iteration   3: 3734201.726 ops/s
# Warmup Iteration   4: 4504245.763 ops/s
# Warmup Iteration   5: 4567639.467 ops/s
# Warmup Iteration   6: 3350949.441 ops/s
# Warmup Iteration   7: 4554330.688 ops/s
# Warmup Iteration   8: 4454930.553 ops/s
# Warmup Iteration   9: 4511961.135 ops/s
# Warmup Iteration  10: 4698217.374 ops/s
# Warmup Iteration  11: 4520616.338 ops/s
# Warmup Iteration  12: 4427768.049 ops/s
# Warmup Iteration  13: 4598713.643 ops/s
# Warmup Iteration  14: 4460363.781 ops/s
# Warmup Iteration  15: 4594745.228 ops/s
# Warmup Iteration  16: 4504660.725 ops/s
# Warmup Iteration  17: 4665727.312 ops/s
# Warmup Iteration  18: 4491683.375 ops/s
# Warmup Iteration  19: 4512781.514 ops/s
# Warmup Iteration  20: 4668991.983 ops/s
# Warmup Iteration  21: 4517216.759 ops/s
# Warmup Iteration  22: 4616310.858 ops/s
# Warmup Iteration  23: 4673968.907 ops/s
# Warmup Iteration  24: 4408498.098 ops/s
# Warmup Iteration  25: 4545003.225 ops/s
# Warmup Iteration  26: 4780867.409 ops/s
# Warmup Iteration  27: 4428156.478 ops/s
# Warmup Iteration  28: 4537914.715 ops/s
# Warmup Iteration  29: 4798566.135 ops/s
# Warmup Iteration  30: 4411244.015 ops/s
Iteration   1: 4440459.146 ops/s
Iteration   2: 4546826.588 ops/s
Iteration   3: 4443191.249 ops/s
Iteration   4: 4712964.111 ops/s
Iteration   5: 4692257.116 ops/s
Iteration   6: 4478876.107 ops/s
Iteration   7: 4636338.455 ops/s
Iteration   8: 4429736.434 ops/s
Iteration   9: 4624615.854 ops/s
Iteration  10: 4571285.180 ops/s
Iteration  11: 4538319.738 ops/s
Iteration  12: 4551481.875 ops/s
Iteration  13: 4524208.983 ops/s
Iteration  14: 4431909.181 ops/s
Iteration  15: 4509531.236 ops/s
Iteration  16: 4736491.637 ops/s
Iteration  17: 4477923.802 ops/s
Iteration  18: 4542901.265 ops/s
Iteration  19: 4714918.574 ops/s
Iteration  20: 4493822.468 ops/s
Iteration  21: 4673616.202 ops/s
Iteration  22: 4524540.004 ops/s
Iteration  23: 4557922.903 ops/s
Iteration  24: 4460352.260 ops/s
Iteration  25: 4488856.451 ops/s
Iteration  26: 4670730.750 ops/s
Iteration  27: 4510293.561 ops/s
Iteration  28: 4652572.871 ops/s
Iteration  29: 4432615.631 ops/s
Iteration  30: 4662263.232 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_as":
  4557727.429 ±(99.9%) 64347.496 ops/s [Average]
  (min, avg, max) = (4429736.434, 4557727.429, 4736491.637), stdev = 96312.309
  CI (99.9%): [4493379.933, 4622074.924] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_as  thrpt   30  4557727.429 ± 64347.496  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_to$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_to

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 527371.402 ops/s
# Warmup Iteration   2: 3252275.997 ops/s
# Warmup Iteration   3: 4231542.289 ops/s
# Warmup Iteration   4: 4669676.495 ops/s
# Warmup Iteration   5: 4688901.233 ops/s
# Warmup Iteration   6: 4891768.933 ops/s
# Warmup Iteration   7: 4561119.185 ops/s
# Warmup Iteration   8: 4872785.948 ops/s
# Warmup Iteration   9: 4935377.713 ops/s
# Warmup Iteration  10: 4529073.528 ops/s
# Warmup Iteration  11: 4608148.042 ops/s
# Warmup Iteration  12: 4945957.913 ops/s
# Warmup Iteration  13: 4723814.777 ops/s
# Warmup Iteration  14: 4956789.814 ops/s
# Warmup Iteration  15: 4594942.177 ops/s
# Warmup Iteration  16: 4924783.206 ops/s
# Warmup Iteration  17: 4697382.779 ops/s
# Warmup Iteration  18: 4811811.494 ops/s
# Warmup Iteration  19: 4893818.668 ops/s
# Warmup Iteration  20: 4687083.854 ops/s
# Warmup Iteration  21: 4814452.400 ops/s
# Warmup Iteration  22: 4706148.410 ops/s
# Warmup Iteration  23: 5066203.701 ops/s
# Warmup Iteration  24: 4871456.051 ops/s
# Warmup Iteration  25: 4567756.329 ops/s
# Warmup Iteration  26: 4953970.497 ops/s
# Warmup Iteration  27: 4654132.128 ops/s
# Warmup Iteration  28: 4899528.941 ops/s
# Warmup Iteration  29: 4745831.700 ops/s
# Warmup Iteration  30: 4724169.895 ops/s
Iteration   1: 4966559.947 ops/s
Iteration   2: 4715578.209 ops/s
Iteration   3: 4843048.015 ops/s
Iteration   4: 4718477.424 ops/s
Iteration   5: 4774698.073 ops/s
Iteration   6: 4924645.661 ops/s
Iteration   7: 4769367.517 ops/s
Iteration   8: 4862218.359 ops/s
Iteration   9: 4702511.653 ops/s
Iteration  10: 4812898.104 ops/s
Iteration  11: 4882956.525 ops/s
Iteration  12: 4681037.454 ops/s
Iteration  13: 4884126.017 ops/s
Iteration  14: 4829822.630 ops/s
Iteration  15: 4633676.478 ops/s
Iteration  16: 4945648.337 ops/s
Iteration  17: 4948124.798 ops/s
Iteration  18: 4738417.960 ops/s
Iteration  19: 4770126.688 ops/s
Iteration  20: 4798398.873 ops/s
Iteration  21: 4808907.424 ops/s
Iteration  22: 4863848.821 ops/s
Iteration  23: 4768826.461 ops/s
Iteration  24: 4947050.600 ops/s
Iteration  25: 4904593.521 ops/s
Iteration  26: 4651531.449 ops/s
Iteration  27: 4841054.281 ops/s
Iteration  28: 4911717.580 ops/s
Iteration  29: 4691468.098 ops/s
Iteration  30: 4985623.045 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_to":
  4819232.000 ±(99.9%) 66530.808 ops/s [Average]
  (min, avg, max) = (4633676.478, 4819232.000, 4985623.045), stdev = 99580.188
  CI (99.9%): [4752701.193, 4885762.808] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                           Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_to  thrpt   30  4819232.000 ± 66530.808  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatArrayOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatArrayOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 684282.221 ops/s
# Warmup Iteration   2: 2582588.067 ops/s
# Warmup Iteration   3: 4612348.095 ops/s
# Warmup Iteration   4: 5171734.434 ops/s
# Warmup Iteration   5: 5037250.010 ops/s
# Warmup Iteration   6: 5142507.213 ops/s
# Warmup Iteration   7: 5226315.016 ops/s
# Warmup Iteration   8: 4949712.528 ops/s
# Warmup Iteration   9: 5131904.647 ops/s
# Warmup Iteration  10: 5015145.488 ops/s
# Warmup Iteration  11: 5026896.017 ops/s
# Warmup Iteration  12: 5099017.016 ops/s
# Warmup Iteration  13: 4982810.427 ops/s
# Warmup Iteration  14: 5095948.701 ops/s
# Warmup Iteration  15: 5190845.147 ops/s
# Warmup Iteration  16: 5117511.403 ops/s
# Warmup Iteration  17: 5181627.894 ops/s
# Warmup Iteration  18: 5051026.613 ops/s
# Warmup Iteration  19: 5290849.788 ops/s
# Warmup Iteration  20: 5051565.577 ops/s
# Warmup Iteration  21: 5202345.283 ops/s
# Warmup Iteration  22: 5106643.401 ops/s
# Warmup Iteration  23: 5094664.375 ops/s
# Warmup Iteration  24: 5190617.491 ops/s
# Warmup Iteration  25: 5109381.436 ops/s
# Warmup Iteration  26: 4992869.570 ops/s
# Warmup Iteration  27: 5247066.868 ops/s
# Warmup Iteration  28: 4930939.731 ops/s
# Warmup Iteration  29: 4983396.012 ops/s
# Warmup Iteration  30: 5363305.179 ops/s
Iteration   1: 5286570.351 ops/s
Iteration   2: 4962942.870 ops/s
Iteration   3: 5281734.436 ops/s
Iteration   4: 5053656.831 ops/s
Iteration   5: 4981559.262 ops/s
Iteration   6: 5296257.662 ops/s
Iteration   7: 4916827.364 ops/s
Iteration   8: 5088860.454 ops/s
Iteration   9: 5212247.068 ops/s
Iteration  10: 4988672.224 ops/s
Iteration  11: 5219716.939 ops/s
Iteration  12: 5039254.641 ops/s
Iteration  13: 5089066.760 ops/s
Iteration  14: 5313429.583 ops/s
Iteration  15: 5178265.079 ops/s
Iteration  16: 5092524.869 ops/s
Iteration  17: 5044971.777 ops/s
Iteration  18: 5162197.986 ops/s
Iteration  19: 5186264.456 ops/s
Iteration  20: 5157238.436 ops/s
Iteration  21: 4980692.207 ops/s
Iteration  22: 5336840.800 ops/s
Iteration  23: 4991614.878 ops/s
Iteration  24: 5335242.806 ops/s
Iteration  25: 5170242.357 ops/s
Iteration  26: 5154277.241 ops/s
Iteration  27: 5135714.042 ops/s
Iteration  28: 5023403.837 ops/s
Iteration  29: 5212986.826 ops/s
Iteration  30: 5046885.624 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatArrayOne":
  5131338.655 ±(99.9%) 80979.058 ops/s [Average]
  (min, avg, max) = (4916827.364, 5131338.655, 5336840.800), stdev = 121205.651
  CI (99.9%): [5050359.598, 5212317.713] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concatArrayOne  thrpt   30  5131338.655 ± 80979.058  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 741839.374 ops/s
# Warmup Iteration   2: 2683034.686 ops/s
# Warmup Iteration   3: 4225982.402 ops/s
# Warmup Iteration   4: 5083348.802 ops/s
# Warmup Iteration   5: 5189531.725 ops/s
# Warmup Iteration   6: 5187466.183 ops/s
# Warmup Iteration   7: 5094052.239 ops/s
# Warmup Iteration   8: 5125820.575 ops/s
# Warmup Iteration   9: 4963465.353 ops/s
# Warmup Iteration  10: 5131926.026 ops/s
# Warmup Iteration  11: 5007227.064 ops/s
# Warmup Iteration  12: 5117202.955 ops/s
# Warmup Iteration  13: 5250722.003 ops/s
# Warmup Iteration  14: 4969585.166 ops/s
# Warmup Iteration  15: 4931162.469 ops/s
# Warmup Iteration  16: 5064338.050 ops/s
# Warmup Iteration  17: 4951791.203 ops/s
# Warmup Iteration  18: 5334460.888 ops/s
# Warmup Iteration  19: 5115669.192 ops/s
# Warmup Iteration  20: 4965032.869 ops/s
# Warmup Iteration  21: 5298818.739 ops/s
# Warmup Iteration  22: 5049340.628 ops/s
# Warmup Iteration  23: 5315940.323 ops/s
# Warmup Iteration  24: 5083162.882 ops/s
# Warmup Iteration  25: 5168880.779 ops/s
# Warmup Iteration  26: 5269818.791 ops/s
# Warmup Iteration  27: 5016397.571 ops/s
# Warmup Iteration  28: 5189901.713 ops/s
# Warmup Iteration  29: 5053129.241 ops/s
# Warmup Iteration  30: 5070387.232 ops/s
Iteration   1: 5147825.255 ops/s
Iteration   2: 5114992.873 ops/s
Iteration   3: 5280140.562 ops/s
Iteration   4: 5035783.268 ops/s
Iteration   5: 5251050.457 ops/s
Iteration   6: 5034859.849 ops/s
Iteration   7: 5089464.172 ops/s
Iteration   8: 5346648.405 ops/s
Iteration   9: 5130489.117 ops/s
Iteration  10: 5163219.129 ops/s
Iteration  11: 5280401.455 ops/s
Iteration  12: 5053649.641 ops/s
Iteration  13: 5156185.477 ops/s
Iteration  14: 4931404.082 ops/s
Iteration  15: 4934714.876 ops/s
Iteration  16: 5243961.307 ops/s
Iteration  17: 5035160.025 ops/s
Iteration  18: 5169595.196 ops/s
Iteration  19: 5123073.999 ops/s
Iteration  20: 5210249.270 ops/s
Iteration  21: 5319299.138 ops/s
Iteration  22: 5055743.738 ops/s
Iteration  23: 5186428.804 ops/s
Iteration  24: 5250347.084 ops/s
Iteration  25: 5117340.101 ops/s
Iteration  26: 4131851.576 ops/s
Iteration  27: 4959939.812 ops/s
Iteration  28: 5216929.605 ops/s
Iteration  29: 5079266.732 ops/s
Iteration  30: 4909076.974 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_mergeArrayOne":
  5098636.399 ±(99.9%) 144466.965 ops/s [Average]
  (min, avg, max) = (4131851.576, 5098636.399, 5346648.405), stdev = 216231.369
  CI (99.9%): [4954169.434, 5243103.365] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_mergeArrayOne  thrpt   30  5098636.399 ± 144466.965  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_emptyToFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_emptyToFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 758061.887 ops/s
# Warmup Iteration   2: 2838798.824 ops/s
# Warmup Iteration   3: 4271023.922 ops/s
# Warmup Iteration   4: 4991168.272 ops/s
# Warmup Iteration   5: 4779148.306 ops/s
# Warmup Iteration   6: 4748669.800 ops/s
# Warmup Iteration   7: 4876648.361 ops/s
# Warmup Iteration   8: 4950676.339 ops/s
# Warmup Iteration   9: 4610523.438 ops/s
# Warmup Iteration  10: 5002100.638 ops/s
# Warmup Iteration  11: 4884055.878 ops/s
# Warmup Iteration  12: 4681037.639 ops/s
# Warmup Iteration  13: 4953324.785 ops/s
# Warmup Iteration  14: 4933375.837 ops/s
# Warmup Iteration  15: 4895799.110 ops/s
# Warmup Iteration  16: 4980433.020 ops/s
# Warmup Iteration  17: 4766627.345 ops/s
# Warmup Iteration  18: 4755633.941 ops/s
# Warmup Iteration  19: 5054330.752 ops/s
# Warmup Iteration  20: 4816159.912 ops/s
# Warmup Iteration  21: 4978320.404 ops/s
# Warmup Iteration  22: 4739476.170 ops/s
# Warmup Iteration  23: 4902536.386 ops/s
# Warmup Iteration  24: 4749332.027 ops/s
# Warmup Iteration  25: 4819300.495 ops/s
# Warmup Iteration  26: 4999731.394 ops/s
# Warmup Iteration  27: 5088944.635 ops/s
# Warmup Iteration  28: 4730614.383 ops/s
# Warmup Iteration  29: 5052659.357 ops/s
# Warmup Iteration  30: 4730434.164 ops/s
Iteration   1: 4920506.540 ops/s
Iteration   2: 4880646.843 ops/s
Iteration   3: 4730705.111 ops/s
Iteration   4: 4909477.562 ops/s
Iteration   5: 4898853.260 ops/s
Iteration   6: 4879610.945 ops/s
Iteration   7: 4923001.979 ops/s
Iteration   8: 4662502.495 ops/s
Iteration   9: 4940041.737 ops/s
Iteration  10: 4732633.367 ops/s
Iteration  11: 4852334.772 ops/s
Iteration  12: 4609819.624 ops/s
Iteration  13: 4818810.143 ops/s
Iteration  14: 5039861.230 ops/s
Iteration  15: 4652127.273 ops/s
Iteration  16: 4936057.448 ops/s
Iteration  17: 4838819.014 ops/s
Iteration  18: 4950746.656 ops/s
Iteration  19: 4835038.553 ops/s
Iteration  20: 4832258.655 ops/s
Iteration  21: 4915719.444 ops/s
Iteration  22: 4812860.860 ops/s
Iteration  23: 4773027.386 ops/s
Iteration  24: 4902945.709 ops/s
Iteration  25: 4838798.917 ops/s
Iteration  26: 4970645.540 ops/s
Iteration  27: 4707646.988 ops/s
Iteration  28: 4930511.442 ops/s
Iteration  29: 4993200.047 ops/s
Iteration  30: 4788816.818 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_emptyToFlowable":
  4849267.545 ±(99.9%) 70344.357 ops/s [Average]
  (min, avg, max) = (4609819.624, 4849267.545, 5039861.230), stdev = 105288.131
  CI (99.9%): [4778923.188, 4919611.903] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_emptyToFlowable  thrpt   30  4849267.545 ± 70344.357  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySourceObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySourceObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 746911.936 ops/s
# Warmup Iteration   2: 4020671.470 ops/s
# Warmup Iteration   3: 4630085.671 ops/s
# Warmup Iteration   4: 5210934.085 ops/s
# Warmup Iteration   5: 5377083.526 ops/s
# Warmup Iteration   6: 5194407.130 ops/s
# Warmup Iteration   7: 5031372.577 ops/s
# Warmup Iteration   8: 5297524.454 ops/s
# Warmup Iteration   9: 5282315.428 ops/s
# Warmup Iteration  10: 5214084.066 ops/s
# Warmup Iteration  11: 5101175.173 ops/s
# Warmup Iteration  12: 5463180.269 ops/s
# Warmup Iteration  13: 5155687.589 ops/s
# Warmup Iteration  14: 5519332.139 ops/s
# Warmup Iteration  15: 5171346.894 ops/s
# Warmup Iteration  16: 5327198.664 ops/s
# Warmup Iteration  17: 5413346.858 ops/s
# Warmup Iteration  18: 5235912.793 ops/s
# Warmup Iteration  19: 5418484.250 ops/s
# Warmup Iteration  20: 5295344.809 ops/s
# Warmup Iteration  21: 5201716.389 ops/s
# Warmup Iteration  22: 5241253.313 ops/s
# Warmup Iteration  23: 5427578.830 ops/s
# Warmup Iteration  24: 5110073.349 ops/s
# Warmup Iteration  25: 5490846.400 ops/s
# Warmup Iteration  26: 5238595.894 ops/s
# Warmup Iteration  27: 5211229.634 ops/s
# Warmup Iteration  28: 5227501.562 ops/s
# Warmup Iteration  29: 5470799.549 ops/s
# Warmup Iteration  30: 5194729.295 ops/s
Iteration   1: 5289827.909 ops/s
Iteration   2: 5272294.225 ops/s
Iteration   3: 5316427.650 ops/s
Iteration   4: 5213765.572 ops/s
Iteration   5: 5506170.170 ops/s
Iteration   6: 5205824.189 ops/s
Iteration   7: 5228623.069 ops/s
Iteration   8: 5302447.018 ops/s
Iteration   9: 5184133.134 ops/s
Iteration  10: 5462962.634 ops/s
Iteration  11: 5289351.635 ops/s
Iteration  12: 5277061.713 ops/s
Iteration  13: 5543522.534 ops/s
Iteration  14: 5292920.686 ops/s
Iteration  15: 5138473.631 ops/s
Iteration  16: 5349767.094 ops/s
Iteration  17: 5197416.854 ops/s
Iteration  18: 5218007.635 ops/s
Iteration  19: 5455020.610 ops/s
Iteration  20: 5353478.135 ops/s
Iteration  21: 4202501.207 ops/s
Iteration  22: 5417717.657 ops/s
Iteration  23: 5120037.263 ops/s
Iteration  24: 5387936.124 ops/s
Iteration  25: 5250527.113 ops/s
Iteration  26: 5593647.056 ops/s
Iteration  27: 5373657.888 ops/s
Iteration  28: 5250190.148 ops/s
Iteration  29: 5294983.415 ops/s
Iteration  30: 5443773.103 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySourceObservable":
  5281082.236 ±(99.9%) 157066.830 ops/s [Average]
  (min, avg, max) = (4202501.207, 5281082.236, 5593647.056), stdev = 235090.255
  CI (99.9%): [5124015.406, 5438149.066] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt        Score        Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtIndex1WithDefaultOnEmptySourceObservable  thrpt   30  5281082.236 ± 157066.830  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_simpleInequalObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_simpleInequalObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 495699.133 ops/s
# Warmup Iteration   2: 2317901.642 ops/s
# Warmup Iteration   3: 2658764.023 ops/s
# Warmup Iteration   4: 3091536.786 ops/s
# Warmup Iteration   5: 3141082.198 ops/s
# Warmup Iteration   6: 3024840.932 ops/s
# Warmup Iteration   7: 3110219.519 ops/s
# Warmup Iteration   8: 3046172.669 ops/s
# Warmup Iteration   9: 3041571.009 ops/s
# Warmup Iteration  10: 3062909.336 ops/s
# Warmup Iteration  11: 3047918.363 ops/s
# Warmup Iteration  12: 3126928.691 ops/s
# Warmup Iteration  13: 3064025.615 ops/s
# Warmup Iteration  14: 3053742.351 ops/s
# Warmup Iteration  15: 3078990.691 ops/s
# Warmup Iteration  16: 3073111.074 ops/s
# Warmup Iteration  17: 3033186.090 ops/s
# Warmup Iteration  18: 3185618.670 ops/s
# Warmup Iteration  19: 3035331.757 ops/s
# Warmup Iteration  20: 3164982.004 ops/s
# Warmup Iteration  21: 2994495.036 ops/s
# Warmup Iteration  22: 3133908.152 ops/s
# Warmup Iteration  23: 3205874.385 ops/s
# Warmup Iteration  24: 2987957.134 ops/s
# Warmup Iteration  25: 3208246.022 ops/s
# Warmup Iteration  26: 3060842.229 ops/s
# Warmup Iteration  27: 3136398.990 ops/s
# Warmup Iteration  28: 3129443.549 ops/s
# Warmup Iteration  29: 3114784.016 ops/s
# Warmup Iteration  30: 3147074.908 ops/s
Iteration   1: 3094560.619 ops/s
Iteration   2: 3171218.973 ops/s
Iteration   3: 3021985.312 ops/s
Iteration   4: 3197892.933 ops/s
Iteration   5: 3115269.827 ops/s
Iteration   6: 3018551.997 ops/s
Iteration   7: 3194405.791 ops/s
Iteration   8: 3080486.695 ops/s
Iteration   9: 3121071.891 ops/s
Iteration  10: 3180720.524 ops/s
Iteration  11: 3058708.904 ops/s
Iteration  12: 3233321.673 ops/s
Iteration  13: 3084448.900 ops/s
Iteration  14: 3107421.436 ops/s
Iteration  15: 3167405.662 ops/s
Iteration  16: 3213839.897 ops/s
Iteration  17: 3054777.662 ops/s
Iteration  18: 3178759.169 ops/s
Iteration  19: 3025240.201 ops/s
Iteration  20: 3132018.747 ops/s
Iteration  21: 3247209.243 ops/s
Iteration  22: 3033030.362 ops/s
Iteration  23: 3129091.293 ops/s
Iteration  24: 3068858.318 ops/s
Iteration  25: 3117887.436 ops/s
Iteration  26: 3000598.295 ops/s
Iteration  27: 3237202.812 ops/s
Iteration  28: 3057722.817 ops/s
Iteration  29: 3038495.247 ops/s
Iteration  30: 3160075.175 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_simpleInequalObservable":
  3118075.927 ±(99.9%) 48434.306 ops/s [Average]
  (min, avg, max) = (3000598.295, 3118075.927, 3247209.243), stdev = 72494.194
  CI (99.9%): [3069641.621, 3166510.233] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_simpleInequalObservable  thrpt   30  3118075.927 ± 48434.306  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_asyncSourceCompare$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_asyncSourceCompare

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 550690.078 ops/s
# Warmup Iteration   2: 1795777.913 ops/s
# Warmup Iteration   3: 2958073.354 ops/s
# Warmup Iteration   4: 3325898.267 ops/s
# Warmup Iteration   5: 3584848.651 ops/s
# Warmup Iteration   6: 3397095.156 ops/s
# Warmup Iteration   7: 3427026.682 ops/s
# Warmup Iteration   8: 3548375.845 ops/s
# Warmup Iteration   9: 3364860.596 ops/s
# Warmup Iteration  10: 3549649.760 ops/s
# Warmup Iteration  11: 3402384.990 ops/s
# Warmup Iteration  12: 3288848.800 ops/s
# Warmup Iteration  13: 3524937.822 ops/s
# Warmup Iteration  14: 3392974.490 ops/s
# Warmup Iteration  15: 3499951.146 ops/s
# Warmup Iteration  16: 3354680.193 ops/s
# Warmup Iteration  17: 3512915.948 ops/s
# Warmup Iteration  18: 3604350.867 ops/s
# Warmup Iteration  19: 3432269.887 ops/s
# Warmup Iteration  20: 3639885.452 ops/s
# Warmup Iteration  21: 3641658.606 ops/s
# Warmup Iteration  22: 3503574.706 ops/s
# Warmup Iteration  23: 3469057.670 ops/s
# Warmup Iteration  24: 3539606.503 ops/s
# Warmup Iteration  25: 3428938.215 ops/s
# Warmup Iteration  26: 3609770.097 ops/s
# Warmup Iteration  27: 3634920.365 ops/s
# Warmup Iteration  28: 3388998.327 ops/s
# Warmup Iteration  29: 3580038.709 ops/s
# Warmup Iteration  30: 3603934.977 ops/s
Iteration   1: 3448074.948 ops/s
Iteration   2: 3552608.873 ops/s
Iteration   3: 3371705.199 ops/s
Iteration   4: 3542329.186 ops/s
Iteration   5: 3586745.891 ops/s
Iteration   6: 3366907.363 ops/s
Iteration   7: 3569590.146 ops/s
Iteration   8: 3552907.368 ops/s
Iteration   9: 3456672.643 ops/s
Iteration  10: 3611609.272 ops/s
Iteration  11: 3404072.951 ops/s
Iteration  12: 3565215.092 ops/s
Iteration  13: 3580890.187 ops/s
Iteration  14: 3530066.534 ops/s
Iteration  15: 3397265.829 ops/s
Iteration  16: 2860338.519 ops/s
Iteration  17: 3519375.312 ops/s
Iteration  18: 3443182.745 ops/s
Iteration  19: 3579702.650 ops/s
Iteration  20: 3510503.909 ops/s
Iteration  21: 3467790.298 ops/s
Iteration  22: 3648108.398 ops/s
Iteration  23: 3455506.397 ops/s
Iteration  24: 3536309.727 ops/s
Iteration  25: 3415922.639 ops/s
Iteration  26: 3551875.406 ops/s
Iteration  27: 3391347.921 ops/s
Iteration  28: 3573724.161 ops/s
Iteration  29: 3601348.747 ops/s
Iteration  30: 3374450.520 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_asyncSourceCompare":
  3482204.961 ±(99.9%) 95411.569 ops/s [Average]
  (min, avg, max) = (2860338.519, 3482204.961, 3648108.398), stdev = 142807.556
  CI (99.9%): [3386793.392, 3577616.530] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_asyncSourceCompare  thrpt   30  3482204.961 ± 95411.569  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_doubleOnSubscribeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_doubleOnSubscribeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27374.488 ops/s
# Warmup Iteration   2: 422072.856 ops/s
# Warmup Iteration   3: 402736.522 ops/s
# Warmup Iteration   4: 487788.524 ops/s
# Warmup Iteration   5: 455078.803 ops/s
# Warmup Iteration   6: 459582.142 ops/s
# Warmup Iteration   7: 492473.989 ops/s
# Warmup Iteration   8: 472985.380 ops/s
# Warmup Iteration   9: 476189.493 ops/s
# Warmup Iteration  10: 483888.148 ops/s
# Warmup Iteration  11: 476540.180 ops/s
# Warmup Iteration  12: 492799.442 ops/s
# Warmup Iteration  13: 470351.475 ops/s
# Warmup Iteration  14: 498349.934 ops/s
# Warmup Iteration  15: 466780.129 ops/s
# Warmup Iteration  16: 479891.444 ops/s
# Warmup Iteration  17: 502843.930 ops/s
# Warmup Iteration  18: 526480.590 ops/s
# Warmup Iteration  19: 494384.579 ops/s
# Warmup Iteration  20: 506431.969 ops/s
# Warmup Iteration  21: 502946.398 ops/s
# Warmup Iteration  22: 501426.866 ops/s
# Warmup Iteration  23: 534139.253 ops/s
# Warmup Iteration  24: 498994.967 ops/s
# Warmup Iteration  25: 503987.152 ops/s
# Warmup Iteration  26: 487537.131 ops/s
# Warmup Iteration  27: 460914.630 ops/s
# Warmup Iteration  28: 510670.276 ops/s
# Warmup Iteration  29: 514988.218 ops/s
# Warmup Iteration  30: 519900.432 ops/s
Iteration   1: 531798.689 ops/s
Iteration   2: 510022.593 ops/s
Iteration   3: 501326.888 ops/s
Iteration   4: 530559.315 ops/s
Iteration   5: 505268.160 ops/s
Iteration   6: 494515.470 ops/s
Iteration   7: 526966.398 ops/s
Iteration   8: 496567.759 ops/s
Iteration   9: 519524.068 ops/s
Iteration  10: 492624.300 ops/s
Iteration  11: 514648.851 ops/s
Iteration  12: 504552.845 ops/s
Iteration  13: 511866.656 ops/s
Iteration  14: 516664.976 ops/s
Iteration  15: 526625.596 ops/s
Iteration  16: 496983.642 ops/s
Iteration  17: 517046.499 ops/s
Iteration  18: 497252.211 ops/s
Iteration  19: 507019.352 ops/s
Iteration  20: 508178.354 ops/s
Iteration  21: 515752.916 ops/s
Iteration  22: 514558.523 ops/s
Iteration  23: 525801.340 ops/s
Iteration  24: 499011.863 ops/s
Iteration  25: 517303.049 ops/s
Iteration  26: 502052.689 ops/s
Iteration  27: 505030.451 ops/s
Iteration  28: 514405.487 ops/s
Iteration  29: 497286.162 ops/s
Iteration  30: 514604.787 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_doubleOnSubscribeMain":
  510527.329 ±(99.9%) 7469.675 ops/s [Average]
  (min, avg, max) = (492624.300, 510527.329, 531798.689), stdev = 11180.258
  CI (99.9%): [503057.655, 517997.004] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_doubleOnSubscribeMain  thrpt   30  510527.329 ± 7469.675  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 396473.863 ops/s
# Warmup Iteration   2: 1831142.787 ops/s
# Warmup Iteration   3: 2514202.859 ops/s
# Warmup Iteration   4: 2656002.496 ops/s
# Warmup Iteration   5: 2858041.664 ops/s
# Warmup Iteration   6: 2454356.797 ops/s
# Warmup Iteration   7: 2725822.576 ops/s
# Warmup Iteration   8: 2883261.287 ops/s
# Warmup Iteration   9: 2731275.733 ops/s
# Warmup Iteration  10: 2828801.393 ops/s
# Warmup Iteration  11: 2829357.923 ops/s
# Warmup Iteration  12: 2703394.001 ops/s
# Warmup Iteration  13: 2772013.138 ops/s
# Warmup Iteration  14: 2893757.426 ops/s
# Warmup Iteration  15: 2718381.240 ops/s
# Warmup Iteration  16: 2844537.036 ops/s
# Warmup Iteration  17: 2720320.410 ops/s
# Warmup Iteration  18: 2811152.465 ops/s
# Warmup Iteration  19: 2801621.657 ops/s
# Warmup Iteration  20: 2809518.018 ops/s
# Warmup Iteration  21: 2895801.547 ops/s
# Warmup Iteration  22: 2844438.355 ops/s
# Warmup Iteration  23: 2699149.241 ops/s
# Warmup Iteration  24: 2754379.322 ops/s
# Warmup Iteration  25: 2870081.777 ops/s
# Warmup Iteration  26: 2727660.200 ops/s
# Warmup Iteration  27: 2765666.596 ops/s
# Warmup Iteration  28: 2910819.846 ops/s
# Warmup Iteration  29: 2680163.380 ops/s
# Warmup Iteration  30: 2776237.604 ops/s
Iteration   1: 2865934.600 ops/s
Iteration   2: 2875250.480 ops/s
Iteration   3: 2746285.631 ops/s
Iteration   4: 2852641.896 ops/s
Iteration   5: 2834688.077 ops/s
Iteration   6: 2741401.570 ops/s
Iteration   7: 2754993.012 ops/s
Iteration   8: 2870772.684 ops/s
Iteration   9: 2695734.914 ops/s
Iteration  10: 2505901.146 ops/s
Iteration  11: 2681955.707 ops/s
Iteration  12: 2682788.017 ops/s
Iteration  13: 2896384.754 ops/s
Iteration  14: 2732493.940 ops/s
Iteration  15: 2725261.497 ops/s
Iteration  16: 2832171.546 ops/s
Iteration  17: 2700858.524 ops/s
Iteration  18: 2799376.639 ops/s
Iteration  19: 2822139.537 ops/s
Iteration  20: 2675843.441 ops/s
Iteration  21: 2813484.862 ops/s
Iteration  22: 2745969.650 ops/s
Iteration  23: 2843459.694 ops/s
Iteration  24: 2723457.994 ops/s
Iteration  25: 2753465.641 ops/s
Iteration  26: 2856665.706 ops/s
Iteration  27: 2744020.477 ops/s
Iteration  28: 2773788.144 ops/s
Iteration  29: 2825103.033 ops/s
Iteration  30: 2820440.591 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_normal":
  2773091.113 ±(99.9%) 55198.636 ops/s [Average]
  (min, avg, max) = (2505901.146, 2773091.113, 2896384.754), stdev = 82618.727
  CI (99.9%): [2717892.477, 2828289.750] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
MaybeMergeArrayTest._Benchmark.benchmark_normal  thrpt   30  2773091.113 ± 55198.636  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 139477.273 ops/s
# Warmup Iteration   2: 484311.624 ops/s
# Warmup Iteration   3: 595359.552 ops/s
# Warmup Iteration   4: 576126.528 ops/s
# Warmup Iteration   5: 552514.647 ops/s
# Warmup Iteration   6: 634676.684 ops/s
# Warmup Iteration   7: 608208.110 ops/s
# Warmup Iteration   8: 621739.280 ops/s
# Warmup Iteration   9: 609364.567 ops/s
# Warmup Iteration  10: 640483.654 ops/s
# Warmup Iteration  11: 637957.769 ops/s
# Warmup Iteration  12: 610325.160 ops/s
# Warmup Iteration  13: 625379.303 ops/s
# Warmup Iteration  14: 621523.476 ops/s
# Warmup Iteration  15: 620928.826 ops/s
# Warmup Iteration  16: 639418.518 ops/s
# Warmup Iteration  17: 643737.826 ops/s
# Warmup Iteration  18: 665312.694 ops/s
# Warmup Iteration  19: 647204.919 ops/s
# Warmup Iteration  20: 653739.984 ops/s
# Warmup Iteration  21: 681568.149 ops/s
# Warmup Iteration  22: 638081.980 ops/s
# Warmup Iteration  23: 672697.934 ops/s
# Warmup Iteration  24: 656623.102 ops/s
# Warmup Iteration  25: 640754.252 ops/s
# Warmup Iteration  26: 648015.268 ops/s
# Warmup Iteration  27: 669288.120 ops/s
# Warmup Iteration  28: 663894.177 ops/s
# Warmup Iteration  29: 678208.370 ops/s
# Warmup Iteration  30: 678613.370 ops/s
Iteration   1: 688226.877 ops/s
Iteration   2: 628389.054 ops/s
Iteration   3: 679812.161 ops/s
Iteration   4: 650738.660 ops/s
Iteration   5: 666136.099 ops/s
Iteration   6: 662535.894 ops/s
Iteration   7: 646896.677 ops/s
Iteration   8: 652134.423 ops/s
Iteration   9: 675644.209 ops/s
Iteration  10: 620597.682 ops/s
Iteration  11: 666638.243 ops/s
Iteration  12: 641472.061 ops/s
Iteration  13: 658085.350 ops/s
Iteration  14: 634393.493 ops/s
Iteration  15: 635942.963 ops/s
Iteration  16: 685049.165 ops/s
Iteration  17: 636233.046 ops/s
Iteration  18: 684312.593 ops/s
Iteration  19: 638006.597 ops/s
Iteration  20: 646605.677 ops/s
Iteration  21: 688822.963 ops/s
Iteration  22: 653858.173 ops/s
Iteration  23: 631292.637 ops/s
Iteration  24: 682571.633 ops/s
Iteration  25: 631791.622 ops/s
Iteration  26: 668090.228 ops/s
Iteration  27: 649198.297 ops/s
Iteration  28: 669240.054 ops/s
Iteration  29: 661008.690 ops/s
Iteration  30: 648428.051 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_mainError":
  656071.776 ±(99.9%) 13222.449 ops/s [Average]
  (min, avg, max) = (620597.682, 656071.776, 688822.963), stdev = 19790.740
  CI (99.9%): [642849.327, 669294.224] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_mainError  thrpt   30  656071.776 ± 13222.449  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_fusedPollMixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_fusedPollMixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 235571.203 ops/s
# Warmup Iteration   2: 1354536.466 ops/s
# Warmup Iteration   3: 1680424.267 ops/s
# Warmup Iteration   4: 2212055.557 ops/s
# Warmup Iteration   5: 2514240.175 ops/s
# Warmup Iteration   6: 2401469.730 ops/s
# Warmup Iteration   7: 2396105.355 ops/s
# Warmup Iteration   8: 2491114.299 ops/s
# Warmup Iteration   9: 2517743.143 ops/s
# Warmup Iteration  10: 2304284.715 ops/s
# Warmup Iteration  11: 2468434.787 ops/s
# Warmup Iteration  12: 2374357.649 ops/s
# Warmup Iteration  13: 2527381.427 ops/s
# Warmup Iteration  14: 2495909.917 ops/s
# Warmup Iteration  15: 2355265.458 ops/s
# Warmup Iteration  16: 2481376.340 ops/s
# Warmup Iteration  17: 2364879.282 ops/s
# Warmup Iteration  18: 2341554.392 ops/s
# Warmup Iteration  19: 2448643.335 ops/s
# Warmup Iteration  20: 2486035.410 ops/s
# Warmup Iteration  21: 2371206.505 ops/s
# Warmup Iteration  22: 2516898.583 ops/s
# Warmup Iteration  23: 2476837.732 ops/s
# Warmup Iteration  24: 2357806.602 ops/s
# Warmup Iteration  25: 2400370.305 ops/s
# Warmup Iteration  26: 2443070.532 ops/s
# Warmup Iteration  27: 2385624.113 ops/s
# Warmup Iteration  28: 2376226.977 ops/s
# Warmup Iteration  29: 2462019.647 ops/s
# Warmup Iteration  30: 2431432.325 ops/s
Iteration   1: 2500150.071 ops/s
Iteration   2: 2369768.428 ops/s
Iteration   3: 2422427.641 ops/s
Iteration   4: 2425484.070 ops/s
Iteration   5: 1937038.460 ops/s
Iteration   6: 2445684.404 ops/s
Iteration   7: 2351309.994 ops/s
Iteration   8: 2367816.212 ops/s
Iteration   9: 2513313.465 ops/s
Iteration  10: 2298188.508 ops/s
Iteration  11: 2495149.687 ops/s
Iteration  12: 2397175.671 ops/s
Iteration  13: 2455164.780 ops/s
Iteration  14: 2406567.432 ops/s
Iteration  15: 2343103.537 ops/s
Iteration  16: 2442185.421 ops/s
Iteration  17: 2448690.385 ops/s
Iteration  18: 2451649.295 ops/s
Iteration  19: 2401843.046 ops/s
Iteration  20: 2454496.460 ops/s
Iteration  21: 2421644.625 ops/s
Iteration  22: 2434238.436 ops/s
Iteration  23: 2480445.866 ops/s
Iteration  24: 2295092.123 ops/s
Iteration  25: 2469396.209 ops/s
Iteration  26: 2427048.263 ops/s
Iteration  27: 2413445.506 ops/s
Iteration  28: 2520519.932 ops/s
Iteration  29: 2378006.577 ops/s
Iteration  30: 2408564.769 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeMergeArrayTest._Benchmark.benchmark_fusedPollMixed":
  2405853.642 ±(99.9%) 70094.834 ops/s [Average]
  (min, avg, max) = (1937038.460, 2405853.642, 2520519.932), stdev = 104914.656
  CI (99.9%): [2335758.809, 2475948.476] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MaybeMergeArrayTest._Benchmark.benchmark_fusedPollMixed  thrpt   30  2405853.642 ± 70094.834  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_completeAfterNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_completeAfterNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2116140.990 ops/s
# Warmup Iteration   2: 4110103.045 ops/s
# Warmup Iteration   3: 5916390.368 ops/s
# Warmup Iteration   4: 5834333.742 ops/s
# Warmup Iteration   5: 6072947.641 ops/s
# Warmup Iteration   6: 6190646.142 ops/s
# Warmup Iteration   7: 5857334.508 ops/s
# Warmup Iteration   8: 6048893.710 ops/s
# Warmup Iteration   9: 5927410.410 ops/s
# Warmup Iteration  10: 6077742.589 ops/s
# Warmup Iteration  11: 5999188.808 ops/s
# Warmup Iteration  12: 5762723.671 ops/s
# Warmup Iteration  13: 6060319.128 ops/s
# Warmup Iteration  14: 5902810.719 ops/s
# Warmup Iteration  15: 5941797.525 ops/s
# Warmup Iteration  16: 6165273.107 ops/s
# Warmup Iteration  17: 5969517.199 ops/s
# Warmup Iteration  18: 6101766.399 ops/s
# Warmup Iteration  19: 6132987.936 ops/s
# Warmup Iteration  20: 5884898.310 ops/s
# Warmup Iteration  21: 6037152.611 ops/s
# Warmup Iteration  22: 5881232.630 ops/s
# Warmup Iteration  23: 5981571.550 ops/s
# Warmup Iteration  24: 6183675.467 ops/s
# Warmup Iteration  25: 5946915.152 ops/s
# Warmup Iteration  26: 5876601.294 ops/s
# Warmup Iteration  27: 6157372.013 ops/s
# Warmup Iteration  28: 6097801.060 ops/s
# Warmup Iteration  29: 5873841.495 ops/s
# Warmup Iteration  30: 6132576.091 ops/s
Iteration   1: 5872349.547 ops/s
Iteration   2: 5962506.439 ops/s
Iteration   3: 5814702.662 ops/s
Iteration   4: 6071362.542 ops/s
Iteration   5: 6046688.541 ops/s
Iteration   6: 5852211.358 ops/s
Iteration   7: 6121086.860 ops/s
Iteration   8: 5846558.744 ops/s
Iteration   9: 6325251.240 ops/s
Iteration  10: 5939330.005 ops/s
Iteration  11: 6061180.825 ops/s
Iteration  12: 5897652.538 ops/s
Iteration  13: 6173983.931 ops/s
Iteration  14: 6006479.740 ops/s
Iteration  15: 5967044.282 ops/s
Iteration  16: 5962133.821 ops/s
Iteration  17: 6182918.122 ops/s
Iteration  18: 5879218.847 ops/s
Iteration  19: 5913347.979 ops/s
Iteration  20: 6079676.299 ops/s
Iteration  21: 5857307.579 ops/s
Iteration  22: 6015900.408 ops/s
Iteration  23: 5891206.237 ops/s
Iteration  24: 6127548.250 ops/s
Iteration  25: 5918984.518 ops/s
Iteration  26: 5942704.890 ops/s
Iteration  27: 6213275.008 ops/s
Iteration  28: 5783546.013 ops/s
Iteration  29: 6032271.025 ops/s
Iteration  30: 6322051.883 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_completeAfterNext":
  6002682.671 ±(99.9%) 95556.626 ops/s [Average]
  (min, avg, max) = (5783546.013, 6002682.671, 6325251.240), stdev = 143024.670
  CI (99.9%): [5907126.045, 6098239.297] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_completeAfterNext  thrpt   30  6002682.671 ± 95556.626  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToFutureTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToFutureTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 725029.468 ops/s
# Warmup Iteration   2: 3122633.059 ops/s
# Warmup Iteration   3: 3738998.226 ops/s
# Warmup Iteration   4: 4464543.270 ops/s
# Warmup Iteration   5: 4363215.822 ops/s
# Warmup Iteration   6: 4390266.397 ops/s
# Warmup Iteration   7: 4415407.740 ops/s
# Warmup Iteration   8: 4459212.310 ops/s
# Warmup Iteration   9: 4239842.817 ops/s
# Warmup Iteration  10: 4552439.127 ops/s
# Warmup Iteration  11: 4527291.377 ops/s
# Warmup Iteration  12: 4272607.716 ops/s
# Warmup Iteration  13: 4538280.887 ops/s
# Warmup Iteration  14: 4550433.282 ops/s
# Warmup Iteration  15: 4253415.501 ops/s
# Warmup Iteration  16: 4574426.399 ops/s
# Warmup Iteration  17: 4427385.538 ops/s
# Warmup Iteration  18: 4372724.223 ops/s
# Warmup Iteration  19: 4542791.256 ops/s
# Warmup Iteration  20: 4319181.528 ops/s
# Warmup Iteration  21: 4563778.830 ops/s
# Warmup Iteration  22: 4369225.744 ops/s
# Warmup Iteration  23: 4431639.339 ops/s
# Warmup Iteration  24: 4356245.691 ops/s
# Warmup Iteration  25: 4505403.440 ops/s
# Warmup Iteration  26: 4487128.608 ops/s
# Warmup Iteration  27: 4364504.060 ops/s
# Warmup Iteration  28: 4388520.492 ops/s
# Warmup Iteration  29: 4424910.450 ops/s
# Warmup Iteration  30: 3509793.995 ops/s
Iteration   1: 4315131.651 ops/s
Iteration   2: 4450340.218 ops/s
Iteration   3: 4339367.386 ops/s
Iteration   4: 4500458.377 ops/s
Iteration   5: 4404912.775 ops/s
Iteration   6: 4346252.478 ops/s
Iteration   7: 4373851.112 ops/s
Iteration   8: 4300334.372 ops/s
Iteration   9: 4499318.931 ops/s
Iteration  10: 4306843.733 ops/s
Iteration  11: 4270827.525 ops/s
Iteration  12: 4565665.488 ops/s
Iteration  13: 4386099.326 ops/s
Iteration  14: 4348037.879 ops/s
Iteration  15: 4446141.867 ops/s
Iteration  16: 4610988.848 ops/s
Iteration  17: 4242815.576 ops/s
Iteration  18: 4445531.854 ops/s
Iteration  19: 4287309.069 ops/s
Iteration  20: 4562810.851 ops/s
Iteration  21: 4329854.332 ops/s
Iteration  22: 4408384.754 ops/s
Iteration  23: 4461707.225 ops/s
Iteration  24: 4297886.939 ops/s
Iteration  25: 4483670.385 ops/s
Iteration  26: 4376309.372 ops/s
Iteration  27: 4414005.465 ops/s
Iteration  28: 4376937.367 ops/s
Iteration  29: 4484794.440 ops/s
Iteration  30: 4414223.734 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToFutureTest._Benchmark.benchmark_backpressure":
  4401693.778 ±(99.9%) 62039.565 ops/s [Average]
  (min, avg, max) = (4242815.576, 4401693.778, 4610988.848), stdev = 92857.907
  CI (99.9%): [4339654.213, 4463733.343] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableToFutureTest._Benchmark.benchmark_backpressure  thrpt   30  4401693.778 ± 62039.565  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_requestFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_requestFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1444064.540 ops/s
# Warmup Iteration   2: 4450021.564 ops/s
# Warmup Iteration   3: 5158721.911 ops/s
# Warmup Iteration   4: 5832465.423 ops/s
# Warmup Iteration   5: 5502610.948 ops/s
# Warmup Iteration   6: 5597384.494 ops/s
# Warmup Iteration   7: 5735854.988 ops/s
# Warmup Iteration   8: 5600644.493 ops/s
# Warmup Iteration   9: 5667803.908 ops/s
# Warmup Iteration  10: 5518049.922 ops/s
# Warmup Iteration  11: 5720674.368 ops/s
# Warmup Iteration  12: 5617973.380 ops/s
# Warmup Iteration  13: 5566872.181 ops/s
# Warmup Iteration  14: 5774057.641 ops/s
# Warmup Iteration  15: 5654152.147 ops/s
# Warmup Iteration  16: 5762939.054 ops/s
# Warmup Iteration  17: 5738285.855 ops/s
# Warmup Iteration  18: 5587414.082 ops/s
# Warmup Iteration  19: 5765176.114 ops/s
# Warmup Iteration  20: 5570717.777 ops/s
# Warmup Iteration  21: 5496909.720 ops/s
# Warmup Iteration  22: 5744729.317 ops/s
# Warmup Iteration  23: 5579931.281 ops/s
# Warmup Iteration  24: 5602763.739 ops/s
# Warmup Iteration  25: 5668505.258 ops/s
# Warmup Iteration  26: 5492023.187 ops/s
# Warmup Iteration  27: 5878414.789 ops/s
# Warmup Iteration  28: 5666392.700 ops/s
# Warmup Iteration  29: 5795403.394 ops/s
# Warmup Iteration  30: 5689320.192 ops/s
Iteration   1: 5598099.181 ops/s
Iteration   2: 5805719.082 ops/s
Iteration   3: 5594347.708 ops/s
Iteration   4: 5784465.305 ops/s
Iteration   5: 5634654.491 ops/s
Iteration   6: 5587429.525 ops/s
Iteration   7: 5852898.742 ops/s
Iteration   8: 5662830.698 ops/s
Iteration   9: 5652253.463 ops/s
Iteration  10: 5721180.239 ops/s
Iteration  11: 5569992.696 ops/s
Iteration  12: 5864712.719 ops/s
Iteration  13: 6067565.816 ops/s
Iteration  14: 5793888.004 ops/s
Iteration  15: 5393782.057 ops/s
Iteration  16: 5589433.785 ops/s
Iteration  17: 5517790.556 ops/s
Iteration  18: 5635105.002 ops/s
Iteration  19: 5886445.765 ops/s
Iteration  20: 5480212.712 ops/s
Iteration  21: 5756174.689 ops/s
Iteration  22: 5606200.152 ops/s
Iteration  23: 5940463.943 ops/s
Iteration  24: 5571373.358 ops/s
Iteration  25: 5768711.451 ops/s
Iteration  26: 5898723.636 ops/s
Iteration  27: 5597761.823 ops/s
Iteration  28: 5722864.278 ops/s
Iteration  29: 5687424.323 ops/s
Iteration  30: 5725395.300 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_requestFirst":
  5698930.017 ±(99.9%) 99329.218 ops/s [Average]
  (min, avg, max) = (5393782.057, 5698930.017, 6067565.816), stdev = 148671.308
  CI (99.9%): [5599600.799, 5798259.234] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_requestFirst  thrpt   30  5698930.017 ± 99329.218  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_doubleComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_doubleComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1753468.233 ops/s
# Warmup Iteration   2: 4097029.720 ops/s
# Warmup Iteration   3: 5222579.430 ops/s
# Warmup Iteration   4: 5491787.133 ops/s
# Warmup Iteration   5: 5445116.303 ops/s
# Warmup Iteration   6: 5675388.799 ops/s
# Warmup Iteration   7: 5353435.852 ops/s
# Warmup Iteration   8: 5304316.887 ops/s
# Warmup Iteration   9: 5371763.798 ops/s
# Warmup Iteration  10: 5544206.900 ops/s
# Warmup Iteration  11: 5326802.538 ops/s
# Warmup Iteration  12: 5573424.255 ops/s
# Warmup Iteration  13: 5465113.988 ops/s
# Warmup Iteration  14: 5429745.755 ops/s
# Warmup Iteration  15: 5565419.291 ops/s
# Warmup Iteration  16: 5348111.197 ops/s
# Warmup Iteration  17: 5559282.698 ops/s
# Warmup Iteration  18: 5397676.826 ops/s
# Warmup Iteration  19: 5364635.355 ops/s
# Warmup Iteration  20: 5663180.880 ops/s
# Warmup Iteration  21: 5371215.472 ops/s
# Warmup Iteration  22: 5421474.759 ops/s
# Warmup Iteration  23: 5626001.520 ops/s
# Warmup Iteration  24: 4298316.774 ops/s
# Warmup Iteration  25: 5252408.364 ops/s
# Warmup Iteration  26: 5404736.960 ops/s
# Warmup Iteration  27: 5629171.563 ops/s
# Warmup Iteration  28: 5350211.468 ops/s
# Warmup Iteration  29: 5579291.519 ops/s
# Warmup Iteration  30: 5247701.720 ops/s
Iteration   1: 5470474.293 ops/s
Iteration   2: 5334616.933 ops/s
Iteration   3: 5554257.863 ops/s
Iteration   4: 5544349.805 ops/s
Iteration   5: 5268042.054 ops/s
Iteration   6: 5552688.531 ops/s
Iteration   7: 5398124.919 ops/s
Iteration   8: 5486705.990 ops/s
Iteration   9: 5532065.645 ops/s
Iteration  10: 5520845.817 ops/s
Iteration  11: 5627716.548 ops/s
Iteration  12: 5256519.062 ops/s
Iteration  13: 5628636.109 ops/s
Iteration  14: 5537613.196 ops/s
Iteration  15: 5410906.694 ops/s
Iteration  16: 5502950.272 ops/s
Iteration  17: 5397271.399 ops/s
Iteration  18: 5616655.200 ops/s
Iteration  19: 5318431.861 ops/s
Iteration  20: 5559775.870 ops/s
Iteration  21: 5363813.818 ops/s
Iteration  22: 5659923.287 ops/s
Iteration  23: 5448831.183 ops/s
Iteration  24: 5406172.950 ops/s
Iteration  25: 5552348.078 ops/s
Iteration  26: 5343685.823 ops/s
Iteration  27: 5670786.814 ops/s
Iteration  28: 5470311.097 ops/s
Iteration  29: 5443605.476 ops/s
Iteration  30: 5386627.928 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_doubleComplete":
  5475491.817 ±(99.9%) 75945.814 ops/s [Average]
  (min, avg, max) = (5256519.062, 5475491.817, 5670786.814), stdev = 113672.128
  CI (99.9%): [5399546.003, 5551437.632] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_doubleComplete  thrpt   30  5475491.817 ± 75945.814  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_doubleOnSubscribePublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_doubleOnSubscribePublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58425.438 ops/s
# Warmup Iteration   2: 423110.939 ops/s
# Warmup Iteration   3: 502719.013 ops/s
# Warmup Iteration   4: 449488.077 ops/s
# Warmup Iteration   5: 478862.634 ops/s
# Warmup Iteration   6: 526205.255 ops/s
# Warmup Iteration   7: 526196.823 ops/s
# Warmup Iteration   8: 499489.680 ops/s
# Warmup Iteration   9: 517248.581 ops/s
# Warmup Iteration  10: 512617.768 ops/s
# Warmup Iteration  11: 509540.143 ops/s
# Warmup Iteration  12: 492064.614 ops/s
# Warmup Iteration  13: 511857.628 ops/s
# Warmup Iteration  14: 480679.629 ops/s
# Warmup Iteration  15: 503787.230 ops/s
# Warmup Iteration  16: 518603.916 ops/s
# Warmup Iteration  17: 489743.290 ops/s
# Warmup Iteration  18: 544317.235 ops/s
# Warmup Iteration  19: 529651.987 ops/s
# Warmup Iteration  20: 536891.698 ops/s
# Warmup Iteration  21: 535516.560 ops/s
# Warmup Iteration  22: 525973.387 ops/s
# Warmup Iteration  23: 536353.999 ops/s
# Warmup Iteration  24: 534464.593 ops/s
# Warmup Iteration  25: 530506.583 ops/s
# Warmup Iteration  26: 543419.923 ops/s
# Warmup Iteration  27: 547271.702 ops/s
# Warmup Iteration  28: 523997.245 ops/s
# Warmup Iteration  29: 542342.377 ops/s
# Warmup Iteration  30: 529506.844 ops/s
Iteration   1: 545902.551 ops/s
Iteration   2: 526736.892 ops/s
Iteration   3: 551493.151 ops/s
Iteration   4: 514533.473 ops/s
Iteration   5: 528586.973 ops/s
Iteration   6: 555585.125 ops/s
Iteration   7: 512677.113 ops/s
Iteration   8: 548374.044 ops/s
Iteration   9: 525926.630 ops/s
Iteration  10: 532824.630 ops/s
Iteration  11: 524963.438 ops/s
Iteration  12: 532685.673 ops/s
Iteration  13: 533037.044 ops/s
Iteration  14: 516304.710 ops/s
Iteration  15: 518998.505 ops/s
Iteration  16: 534570.176 ops/s
Iteration  17: 519543.729 ops/s
Iteration  18: 526571.728 ops/s
Iteration  19: 544222.249 ops/s
Iteration  20: 523702.830 ops/s
Iteration  21: 539802.755 ops/s
Iteration  22: 525616.781 ops/s
Iteration  23: 521585.224 ops/s
Iteration  24: 547210.020 ops/s
Iteration  25: 517749.530 ops/s
Iteration  26: 542629.473 ops/s
Iteration  27: 518850.049 ops/s
Iteration  28: 529807.511 ops/s
Iteration  29: 528879.734 ops/s
Iteration  30: 534796.076 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_doubleOnSubscribePublisher":
  530805.594 ±(99.9%) 7786.412 ops/s [Average]
  (min, avg, max) = (512677.113, 530805.594, 555585.125), stdev = 11654.336
  CI (99.9%): [523019.182, 538592.006] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
MaybeDelaySubscriptionTest._Benchmark.benchmark_doubleOnSubscribePublisher  thrpt   30  530805.594 ± 7786.412  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_streamCloseCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_streamCloseCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19124.413 ops/s
# Warmup Iteration   2: 120127.287 ops/s
# Warmup Iteration   3: 191040.822 ops/s
# Warmup Iteration   4: 197359.449 ops/s
# Warmup Iteration   5: 194241.417 ops/s
# Warmup Iteration   6: 212399.184 ops/s
# Warmup Iteration   7: 211766.155 ops/s
# Warmup Iteration   8: 217202.068 ops/s
# Warmup Iteration   9: 206641.893 ops/s
# Warmup Iteration  10: 211885.102 ops/s
# Warmup Iteration  11: 219551.473 ops/s
# Warmup Iteration  12: 220818.192 ops/s
# Warmup Iteration  13: 211084.219 ops/s
# Warmup Iteration  14: 220050.576 ops/s
# Warmup Iteration  15: 205886.938 ops/s
# Warmup Iteration  16: 209069.434 ops/s
# Warmup Iteration  17: 226157.918 ops/s
# Warmup Iteration  18: 214635.406 ops/s
# Warmup Iteration  19: 182451.720 ops/s
# Warmup Iteration  20: 224893.279 ops/s
# Warmup Iteration  21: 214934.004 ops/s
# Warmup Iteration  22: 217131.280 ops/s
# Warmup Iteration  23: 212394.937 ops/s
# Warmup Iteration  24: 216366.826 ops/s
# Warmup Iteration  25: 220235.549 ops/s
# Warmup Iteration  26: 222131.304 ops/s
# Warmup Iteration  27: 226181.914 ops/s
# Warmup Iteration  28: 217988.980 ops/s
# Warmup Iteration  29: 225512.570 ops/s
# Warmup Iteration  30: 218941.339 ops/s
Iteration   1: 225503.456 ops/s
Iteration   2: 227186.702 ops/s
Iteration   3: 209049.098 ops/s
Iteration   4: 226688.087 ops/s
Iteration   5: 219485.107 ops/s
Iteration   6: 223862.258 ops/s
Iteration   7: 231555.519 ops/s
Iteration   8: 212784.601 ops/s
Iteration   9: 221831.649 ops/s
Iteration  10: 222640.980 ops/s
Iteration  11: 226038.078 ops/s
Iteration  12: 214198.936 ops/s
Iteration  13: 227392.303 ops/s
Iteration  14: 224402.941 ops/s
Iteration  15: 215418.101 ops/s
Iteration  16: 226733.389 ops/s
Iteration  17: 214928.324 ops/s
Iteration  18: 226420.979 ops/s
Iteration  19: 216282.593 ops/s
Iteration  20: 225266.534 ops/s
Iteration  21: 219971.419 ops/s
Iteration  22: 217656.852 ops/s
Iteration  23: 224983.496 ops/s
Iteration  24: 215603.245 ops/s
Iteration  25: 223859.058 ops/s
Iteration  26: 217880.853 ops/s
Iteration  27: 225979.421 ops/s
Iteration  28: 222036.816 ops/s
Iteration  29: 232304.818 ops/s
Iteration  30: 215762.377 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_streamCloseCrash":
  221790.266 ±(99.9%) 3841.689 ops/s [Average]
  (min, avg, max) = (209049.098, 221790.266, 232304.818), stdev = 5750.059
  CI (99.9%): [217948.578, 225631.955] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_streamCloseCrash  thrpt   30  221790.266 ± 3841.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_callsAfterUnsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_callsAfterUnsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2031139.968 ops/s
# Warmup Iteration   2: 4269251.374 ops/s
# Warmup Iteration   3: 4918875.880 ops/s
# Warmup Iteration   4: 5248291.716 ops/s
# Warmup Iteration   5: 5439289.352 ops/s
# Warmup Iteration   6: 5253406.939 ops/s
# Warmup Iteration   7: 5383087.047 ops/s
# Warmup Iteration   8: 5241991.145 ops/s
# Warmup Iteration   9: 5424659.190 ops/s
# Warmup Iteration  10: 5486951.222 ops/s
# Warmup Iteration  11: 5111497.816 ops/s
# Warmup Iteration  12: 5498587.099 ops/s
# Warmup Iteration  13: 5201987.711 ops/s
# Warmup Iteration  14: 5471758.613 ops/s
# Warmup Iteration  15: 5520548.752 ops/s
# Warmup Iteration  16: 5166626.945 ops/s
# Warmup Iteration  17: 5366127.871 ops/s
# Warmup Iteration  18: 5364881.508 ops/s
# Warmup Iteration  19: 5264495.089 ops/s
# Warmup Iteration  20: 5391827.894 ops/s
# Warmup Iteration  21: 5382790.629 ops/s
# Warmup Iteration  22: 5298486.874 ops/s
# Warmup Iteration  23: 5314522.285 ops/s
# Warmup Iteration  24: 5331551.804 ops/s
# Warmup Iteration  25: 5277761.630 ops/s
# Warmup Iteration  26: 5190474.432 ops/s
# Warmup Iteration  27: 5372779.545 ops/s
# Warmup Iteration  28: 5370721.240 ops/s
# Warmup Iteration  29: 5466050.337 ops/s
# Warmup Iteration  30: 5194703.565 ops/s
Iteration   1: 5405229.435 ops/s
Iteration   2: 5182167.075 ops/s
Iteration   3: 5411435.932 ops/s
Iteration   4: 5161702.167 ops/s
Iteration   5: 5137323.176 ops/s
Iteration   6: 5412058.180 ops/s
Iteration   7: 5243399.262 ops/s
Iteration   8: 5517167.496 ops/s
Iteration   9: 5213483.707 ops/s
Iteration  10: 5274024.700 ops/s
Iteration  11: 5526195.041 ops/s
Iteration  12: 5315262.170 ops/s
Iteration  13: 5247167.435 ops/s
Iteration  14: 5357913.905 ops/s
Iteration  15: 5142276.542 ops/s
Iteration  16: 5308940.780 ops/s
Iteration  17: 5614868.977 ops/s
Iteration  18: 5133706.562 ops/s
Iteration  19: 5300867.885 ops/s
Iteration  20: 5589214.158 ops/s
Iteration  21: 5118277.279 ops/s
Iteration  22: 5331937.989 ops/s
Iteration  23: 5271648.628 ops/s
Iteration  24: 5409455.440 ops/s
Iteration  25: 5465031.681 ops/s
Iteration  26: 5258478.763 ops/s
Iteration  27: 5379057.561 ops/s
Iteration  28: 5435518.056 ops/s
Iteration  29: 5312729.845 ops/s
Iteration  30: 5334513.971 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_callsAfterUnsubscribe":
  5327035.127 ±(99.9%) 90049.396 ops/s [Average]
  (min, avg, max) = (5118277.279, 5327035.127, 5614868.977), stdev = 134781.707
  CI (99.9%): [5236985.730, 5417084.523] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_callsAfterUnsubscribe  thrpt   30  5327035.127 ± 90049.396  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_flowableMaybeFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_flowableMaybeFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 712784.140 ops/s
# Warmup Iteration   2: 3910926.198 ops/s
# Warmup Iteration   3: 4338644.641 ops/s
# Warmup Iteration   4: 4797559.874 ops/s
# Warmup Iteration   5: 5025538.340 ops/s
# Warmup Iteration   6: 4848715.058 ops/s
# Warmup Iteration   7: 5031725.541 ops/s
# Warmup Iteration   8: 4829074.323 ops/s
# Warmup Iteration   9: 4928836.235 ops/s
# Warmup Iteration  10: 4813823.726 ops/s
# Warmup Iteration  11: 4928801.028 ops/s
# Warmup Iteration  12: 4912115.380 ops/s
# Warmup Iteration  13: 4923868.993 ops/s
# Warmup Iteration  14: 3957882.326 ops/s
# Warmup Iteration  15: 5078080.797 ops/s
# Warmup Iteration  16: 4950927.895 ops/s
# Warmup Iteration  17: 4870677.127 ops/s
# Warmup Iteration  18: 4921267.793 ops/s
# Warmup Iteration  19: 4953993.862 ops/s
# Warmup Iteration  20: 4891992.112 ops/s
# Warmup Iteration  21: 4922993.210 ops/s
# Warmup Iteration  22: 4948440.117 ops/s
# Warmup Iteration  23: 4849117.423 ops/s
# Warmup Iteration  24: 4852497.766 ops/s
# Warmup Iteration  25: 5142180.900 ops/s
# Warmup Iteration  26: 5008702.726 ops/s
# Warmup Iteration  27: 4865634.305 ops/s
# Warmup Iteration  28: 4863790.266 ops/s
# Warmup Iteration  29: 5101153.833 ops/s
# Warmup Iteration  30: 4798880.496 ops/s
Iteration   1: 4976956.499 ops/s
Iteration   2: 4708751.964 ops/s
Iteration   3: 5010639.912 ops/s
Iteration   4: 4843762.404 ops/s
Iteration   5: 5015235.923 ops/s
Iteration   6: 5018667.412 ops/s
Iteration   7: 4829282.105 ops/s
Iteration   8: 5097563.334 ops/s
Iteration   9: 5107457.171 ops/s
Iteration  10: 4820043.994 ops/s
Iteration  11: 5011644.838 ops/s
Iteration  12: 4721563.461 ops/s
Iteration  13: 5015641.151 ops/s
Iteration  14: 5080866.907 ops/s
Iteration  15: 4979727.755 ops/s
Iteration  16: 4847666.777 ops/s
Iteration  17: 5044409.694 ops/s
Iteration  18: 4832472.509 ops/s
Iteration  19: 4961642.770 ops/s
Iteration  20: 4870989.973 ops/s
Iteration  21: 4933237.932 ops/s
Iteration  22: 4990501.517 ops/s
Iteration  23: 4888465.329 ops/s
Iteration  24: 5091170.959 ops/s
Iteration  25: 4869112.687 ops/s
Iteration  26: 4914620.841 ops/s
Iteration  27: 5044253.969 ops/s
Iteration  28: 4740159.668 ops/s
Iteration  29: 4823509.342 ops/s
Iteration  30: 5047253.023 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_flowableMaybeFlowable":
  4937909.061 ±(99.9%) 77099.430 ops/s [Average]
  (min, avg, max) = (4708751.964, 4937909.061, 5107457.171), stdev = 115398.805
  CI (99.9%): [4860809.631, 5015008.490] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_flowableMaybeFlowable  thrpt   30  4937909.061 ± 77099.430  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_completeAfterNextViaRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_completeAfterNextViaRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1393067.971 ops/s
# Warmup Iteration   2: 3177862.916 ops/s
# Warmup Iteration   3: 4302536.678 ops/s
# Warmup Iteration   4: 4102326.700 ops/s
# Warmup Iteration   5: 4239024.023 ops/s
# Warmup Iteration   6: 4141912.256 ops/s
# Warmup Iteration   7: 3809303.040 ops/s
# Warmup Iteration   8: 4188280.145 ops/s
# Warmup Iteration   9: 4165882.949 ops/s
# Warmup Iteration  10: 4196727.360 ops/s
# Warmup Iteration  11: 4063362.261 ops/s
# Warmup Iteration  12: 4312923.046 ops/s
# Warmup Iteration  13: 4105437.330 ops/s
# Warmup Iteration  14: 4139498.511 ops/s
# Warmup Iteration  15: 4065947.086 ops/s
# Warmup Iteration  16: 4310511.123 ops/s
# Warmup Iteration  17: 4008338.180 ops/s
# Warmup Iteration  18: 4329805.405 ops/s
# Warmup Iteration  19: 4111730.500 ops/s
# Warmup Iteration  20: 4279108.634 ops/s
# Warmup Iteration  21: 4328599.371 ops/s
# Warmup Iteration  22: 4060917.578 ops/s
# Warmup Iteration  23: 4297344.076 ops/s
# Warmup Iteration  24: 4379819.400 ops/s
# Warmup Iteration  25: 4068956.118 ops/s
# Warmup Iteration  26: 4243321.592 ops/s
# Warmup Iteration  27: 4187883.391 ops/s
# Warmup Iteration  28: 4101138.145 ops/s
# Warmup Iteration  29: 4327926.158 ops/s
# Warmup Iteration  30: 4032110.430 ops/s
Iteration   1: 4322239.018 ops/s
Iteration   2: 4252705.055 ops/s
Iteration   3: 4220839.411 ops/s
Iteration   4: 4335548.100 ops/s
Iteration   5: 4201011.070 ops/s
Iteration   6: 4129112.082 ops/s
Iteration   7: 4383935.228 ops/s
Iteration   8: 4055276.877 ops/s
Iteration   9: 4181125.341 ops/s
Iteration  10: 4122983.021 ops/s
Iteration  11: 4373115.522 ops/s
Iteration  12: 4355424.645 ops/s
Iteration  13: 4083859.325 ops/s
Iteration  14: 4262816.192 ops/s
Iteration  15: 4299829.213 ops/s
Iteration  16: 4113018.972 ops/s
Iteration  17: 4385630.612 ops/s
Iteration  18: 4256238.422 ops/s
Iteration  19: 4229073.912 ops/s
Iteration  20: 4219618.597 ops/s
Iteration  21: 4344118.245 ops/s
Iteration  22: 4038684.439 ops/s
Iteration  23: 4346785.914 ops/s
Iteration  24: 4308360.663 ops/s
Iteration  25: 4132194.279 ops/s
Iteration  26: 4188170.020 ops/s
Iteration  27: 4305818.441 ops/s
Iteration  28: 4000786.877 ops/s
Iteration  29: 4412179.184 ops/s
Iteration  30: 4129526.262 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_completeAfterNextViaRequest":
  4233000.831 ±(99.9%) 76838.399 ops/s [Average]
  (min, avg, max) = (4000786.877, 4233000.831, 4412179.184), stdev = 115008.107
  CI (99.9%): [4156162.432, 4309839.231] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_completeAfterNextViaRequest  thrpt   30  4233000.831 ± 76838.399  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19527.143 ops/s
# Warmup Iteration   2: 62917.815 ops/s
# Warmup Iteration   3: 34024.690 ops/s
# Warmup Iteration   4: 73945.967 ops/s
# Warmup Iteration   5: 121558.367 ops/s
# Warmup Iteration   6: 122471.366 ops/s
# Warmup Iteration   7: 123985.717 ops/s
# Warmup Iteration   8: 96530.854 ops/s
# Warmup Iteration   9: 124253.200 ops/s
# Warmup Iteration  10: 121401.390 ops/s
# Warmup Iteration  11: 122954.793 ops/s
# Warmup Iteration  12: 118144.348 ops/s
# Warmup Iteration  13: 122250.719 ops/s
# Warmup Iteration  14: 126109.819 ops/s
# Warmup Iteration  15: 118503.188 ops/s
# Warmup Iteration  16: 121896.387 ops/s
# Warmup Iteration  17: 124857.123 ops/s
# Warmup Iteration  18: 131354.584 ops/s
# Warmup Iteration  19: 128259.089 ops/s
# Warmup Iteration  20: 131964.105 ops/s
# Warmup Iteration  21: 127489.637 ops/s
# Warmup Iteration  22: 125522.339 ops/s
# Warmup Iteration  23: 126635.398 ops/s
# Warmup Iteration  24: 126337.136 ops/s
# Warmup Iteration  25: 131374.493 ops/s
# Warmup Iteration  26: 128865.284 ops/s
# Warmup Iteration  27: 130685.473 ops/s
# Warmup Iteration  28: 129334.017 ops/s
# Warmup Iteration  29: 128564.366 ops/s
# Warmup Iteration  30: 133706.614 ops/s
Iteration   1: 125422.815 ops/s
Iteration   2: 132671.098 ops/s
Iteration   3: 131859.432 ops/s
Iteration   4: 131113.674 ops/s
Iteration   5: 127799.720 ops/s
Iteration   6: 130003.636 ops/s
Iteration   7: 126887.821 ops/s
Iteration   8: 133159.825 ops/s
Iteration   9: 128922.331 ops/s
Iteration  10: 130745.468 ops/s
Iteration  11: 127294.966 ops/s
Iteration  12: 132764.093 ops/s
Iteration  13: 131634.379 ops/s
Iteration  14: 123416.767 ops/s
Iteration  15: 130358.808 ops/s
Iteration  16: 134365.734 ops/s
Iteration  17: 125942.776 ops/s
Iteration  18: 134549.467 ops/s
Iteration  19: 125503.062 ops/s
Iteration  20: 136488.072 ops/s
Iteration  21: 128784.598 ops/s
Iteration  22: 129709.329 ops/s
Iteration  23: 137263.311 ops/s
Iteration  24: 125723.325 ops/s
Iteration  25: 133810.964 ops/s
Iteration  26: 127225.451 ops/s
Iteration  27: 135218.802 ops/s
Iteration  28: 126970.054 ops/s
Iteration  29: 127021.098 ops/s
Iteration  30: 129967.675 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_doubleOnSubscribe":
  130086.618 ±(99.9%) 2413.827 ops/s [Average]
  (min, avg, max) = (123416.767, 130086.618, 137263.311), stdev = 3612.903
  CI (99.9%): [127672.791, 132500.446] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableSingleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  130086.618 ± 2413.827  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Mixed1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Mixed1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 356676.541 ops/s
# Warmup Iteration   2: 1746142.796 ops/s
# Warmup Iteration   3: 2315354.754 ops/s
# Warmup Iteration   4: 3097813.590 ops/s
# Warmup Iteration   5: 3016407.379 ops/s
# Warmup Iteration   6: 2961627.338 ops/s
# Warmup Iteration   7: 2935910.638 ops/s
# Warmup Iteration   8: 3121727.740 ops/s
# Warmup Iteration   9: 2942112.755 ops/s
# Warmup Iteration  10: 3043736.218 ops/s
# Warmup Iteration  11: 2966704.017 ops/s
# Warmup Iteration  12: 2967158.247 ops/s
# Warmup Iteration  13: 3087066.840 ops/s
# Warmup Iteration  14: 3050673.537 ops/s
# Warmup Iteration  15: 2918721.950 ops/s
# Warmup Iteration  16: 3022399.671 ops/s
# Warmup Iteration  17: 2972935.054 ops/s
# Warmup Iteration  18: 2935351.816 ops/s
# Warmup Iteration  19: 3066968.456 ops/s
# Warmup Iteration  20: 2952495.488 ops/s
# Warmup Iteration  21: 3090654.679 ops/s
# Warmup Iteration  22: 2995738.150 ops/s
# Warmup Iteration  23: 2931655.331 ops/s
# Warmup Iteration  24: 3041354.768 ops/s
# Warmup Iteration  25: 2968897.173 ops/s
# Warmup Iteration  26: 3039839.283 ops/s
# Warmup Iteration  27: 2966475.131 ops/s
# Warmup Iteration  28: 2975992.192 ops/s
# Warmup Iteration  29: 3037559.766 ops/s
# Warmup Iteration  30: 2968526.840 ops/s
Iteration   1: 2971145.735 ops/s
Iteration   2: 3091539.755 ops/s
Iteration   3: 3086007.380 ops/s
Iteration   4: 2830904.893 ops/s
Iteration   5: 3090000.663 ops/s
Iteration   6: 2871613.892 ops/s
Iteration   7: 2933715.269 ops/s
Iteration   8: 2956789.263 ops/s
Iteration   9: 3028525.489 ops/s
Iteration  10: 2961567.868 ops/s
Iteration  11: 2974120.477 ops/s
Iteration  12: 3055242.777 ops/s
Iteration  13: 2944311.114 ops/s
Iteration  14: 2954081.414 ops/s
Iteration  15: 2953553.468 ops/s
Iteration  16: 3102564.736 ops/s
Iteration  17: 2882653.831 ops/s
Iteration  18: 3102618.993 ops/s
Iteration  19: 3029516.922 ops/s
Iteration  20: 2950197.266 ops/s
Iteration  21: 2973843.422 ops/s
Iteration  22: 2879039.821 ops/s
Iteration  23: 3060543.225 ops/s
Iteration  24: 3035382.513 ops/s
Iteration  25: 2865018.699 ops/s
Iteration  26: 3044418.298 ops/s
Iteration  27: 2977773.378 ops/s
Iteration  28: 3035268.822 ops/s
Iteration  29: 2981090.210 ops/s
Iteration  30: 2915456.486 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Mixed1":
  2984616.869 ±(99.9%) 51178.671 ops/s [Average]
  (min, avg, max) = (2830904.893, 2984616.869, 3102618.993), stdev = 76601.832
  CI (99.9%): [2933438.198, 3035795.541] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concat3Mixed1  thrpt   30  2984616.869 ± 51178.671  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Mixed2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Mixed2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 208469.215 ops/s
# Warmup Iteration   2: 1141911.197 ops/s
# Warmup Iteration   3: 2257898.535 ops/s
# Warmup Iteration   4: 2712835.930 ops/s
# Warmup Iteration   5: 2509694.827 ops/s
# Warmup Iteration   6: 2825273.069 ops/s
# Warmup Iteration   7: 2807629.534 ops/s
# Warmup Iteration   8: 2912711.078 ops/s
# Warmup Iteration   9: 2836821.187 ops/s
# Warmup Iteration  10: 2947333.010 ops/s
# Warmup Iteration  11: 2782085.391 ops/s
# Warmup Iteration  12: 2844406.451 ops/s
# Warmup Iteration  13: 2908537.989 ops/s
# Warmup Iteration  14: 2755116.246 ops/s
# Warmup Iteration  15: 2894874.693 ops/s
# Warmup Iteration  16: 2839473.675 ops/s
# Warmup Iteration  17: 2941097.320 ops/s
# Warmup Iteration  18: 2868670.023 ops/s
# Warmup Iteration  19: 2859371.927 ops/s
# Warmup Iteration  20: 2942541.825 ops/s
# Warmup Iteration  21: 2839007.846 ops/s
# Warmup Iteration  22: 2939262.463 ops/s
# Warmup Iteration  23: 2825858.682 ops/s
# Warmup Iteration  24: 2780646.727 ops/s
# Warmup Iteration  25: 2908360.340 ops/s
# Warmup Iteration  26: 2788006.971 ops/s
# Warmup Iteration  27: 3008055.009 ops/s
# Warmup Iteration  28: 2819693.069 ops/s
# Warmup Iteration  29: 2968550.987 ops/s
# Warmup Iteration  30: 2784684.408 ops/s
Iteration   1: 2923218.672 ops/s
Iteration   2: 2877201.439 ops/s
Iteration   3: 2857867.608 ops/s
Iteration   4: 2837905.266 ops/s
Iteration   5: 2945681.858 ops/s
Iteration   6: 2797500.606 ops/s
Iteration   7: 2942140.051 ops/s
Iteration   8: 2820959.553 ops/s
Iteration   9: 2925561.586 ops/s
Iteration  10: 2849939.347 ops/s
Iteration  11: 2956671.125 ops/s
Iteration  12: 2918582.226 ops/s
Iteration  13: 2861056.474 ops/s
Iteration  14: 2839352.284 ops/s
Iteration  15: 2849589.940 ops/s
Iteration  16: 2974783.664 ops/s
Iteration  17: 2824894.147 ops/s
Iteration  18: 3013409.369 ops/s
Iteration  19: 2857556.915 ops/s
Iteration  20: 2897125.879 ops/s
Iteration  21: 2906088.183 ops/s
Iteration  22: 2779614.655 ops/s
Iteration  23: 2903450.936 ops/s
Iteration  24: 2789250.666 ops/s
Iteration  25: 2953772.533 ops/s
Iteration  26: 2797876.286 ops/s
Iteration  27: 2901899.932 ops/s
Iteration  28: 2748427.829 ops/s
Iteration  29: 2920065.281 ops/s
Iteration  30: 2861246.315 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concat3Mixed2":
  2877756.354 ±(99.9%) 42587.102 ops/s [Average]
  (min, avg, max) = (2748427.829, 2877756.354, 3013409.369), stdev = 63742.374
  CI (99.9%): [2835169.253, 2920343.456] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_concat3Mixed2  thrpt   30  2877756.354 ± 42587.102  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError3WithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError3WithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.790 ops/s
# Warmup Iteration   2: 12100.077 ops/s
# Warmup Iteration   3: 65575.537 ops/s
# Warmup Iteration   4: 83373.686 ops/s
# Warmup Iteration   5: 75117.220 ops/s
# Warmup Iteration   6: 104836.289 ops/s
# Warmup Iteration   7: 87045.377 ops/s
# Warmup Iteration   8: 83903.515 ops/s
# Warmup Iteration   9: 126196.824 ops/s
# Warmup Iteration  10: 241493.579 ops/s
# Warmup Iteration  11: 272082.947 ops/s
# Warmup Iteration  12: 271858.201 ops/s
# Warmup Iteration  13: 262212.797 ops/s
# Warmup Iteration  14: 279710.753 ops/s
# Warmup Iteration  15: 264917.265 ops/s
# Warmup Iteration  16: 269217.288 ops/s
# Warmup Iteration  17: 279767.497 ops/s
# Warmup Iteration  18: 285863.211 ops/s
# Warmup Iteration  19: 266114.965 ops/s
# Warmup Iteration  20: 277711.514 ops/s
# Warmup Iteration  21: 280669.275 ops/s
# Warmup Iteration  22: 263903.486 ops/s
# Warmup Iteration  23: 277280.786 ops/s
# Warmup Iteration  24: 273833.021 ops/s
# Warmup Iteration  25: 262210.857 ops/s
# Warmup Iteration  26: 287301.499 ops/s
# Warmup Iteration  27: 266091.759 ops/s
# Warmup Iteration  28: 268940.717 ops/s
# Warmup Iteration  29: 283082.676 ops/s
# Warmup Iteration  30: 261032.338 ops/s
Iteration   1: 278302.171 ops/s
Iteration   2: 273760.988 ops/s
Iteration   3: 276050.647 ops/s
Iteration   4: 276335.059 ops/s
Iteration   5: 265969.130 ops/s
Iteration   6: 279556.215 ops/s
Iteration   7: 265306.817 ops/s
Iteration   8: 274158.216 ops/s
Iteration   9: 279859.598 ops/s
Iteration  10: 269707.206 ops/s
Iteration  11: 280481.591 ops/s
Iteration  12: 266478.486 ops/s
Iteration  13: 278344.554 ops/s
Iteration  14: 271956.453 ops/s
Iteration  15: 263054.618 ops/s
Iteration  16: 270000.196 ops/s
Iteration  17: 276859.687 ops/s
Iteration  18: 262144.005 ops/s
Iteration  19: 280209.062 ops/s
Iteration  20: 277123.781 ops/s
Iteration  21: 279095.432 ops/s
Iteration  22: 274680.723 ops/s
Iteration  23: 268813.096 ops/s
Iteration  24: 287086.780 ops/s
Iteration  25: 270586.689 ops/s
Iteration  26: 270689.728 ops/s
Iteration  27: 285782.436 ops/s
Iteration  28: 269398.967 ops/s
Iteration  29: 263057.521 ops/s
Iteration  30: 227256.971 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError3WithError":
  272070.227 ±(99.9%) 7134.102 ops/s [Average]
  (min, avg, max) = (227256.971, 272070.227, 287086.780), stdev = 10677.989
  CI (99.9%): [264936.125, 279204.329] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayError3WithError  thrpt   30  272070.227 ± 7134.102  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorWithErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorWithErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.768 ops/s
# Warmup Iteration   2: 9680.104 ops/s
# Warmup Iteration   3: 54545.108 ops/s
# Warmup Iteration   4: 62617.460 ops/s
# Warmup Iteration   5: 68282.147 ops/s
# Warmup Iteration   6: 107143.250 ops/s
# Warmup Iteration   7: 107347.512 ops/s
# Warmup Iteration   8: 122745.373 ops/s
# Warmup Iteration   9: 219251.044 ops/s
# Warmup Iteration  10: 277164.009 ops/s
# Warmup Iteration  11: 261944.847 ops/s
# Warmup Iteration  12: 263833.629 ops/s
# Warmup Iteration  13: 268075.717 ops/s
# Warmup Iteration  14: 277894.482 ops/s
# Warmup Iteration  15: 260841.642 ops/s
# Warmup Iteration  16: 282659.438 ops/s
# Warmup Iteration  17: 289032.197 ops/s
# Warmup Iteration  18: 281267.170 ops/s
# Warmup Iteration  19: 281371.965 ops/s
# Warmup Iteration  20: 253956.490 ops/s
# Warmup Iteration  21: 281200.582 ops/s
# Warmup Iteration  22: 289782.004 ops/s
# Warmup Iteration  23: 271483.396 ops/s
# Warmup Iteration  24: 279130.097 ops/s
# Warmup Iteration  25: 273547.091 ops/s
# Warmup Iteration  26: 281446.317 ops/s
# Warmup Iteration  27: 295008.160 ops/s
# Warmup Iteration  28: 270113.309 ops/s
# Warmup Iteration  29: 282332.917 ops/s
# Warmup Iteration  30: 277450.864 ops/s
Iteration   1: 287868.061 ops/s
Iteration   2: 278682.869 ops/s
Iteration   3: 287120.377 ops/s
Iteration   4: 277723.526 ops/s
Iteration   5: 280393.723 ops/s
Iteration   6: 284032.958 ops/s
Iteration   7: 286481.759 ops/s
Iteration   8: 283118.991 ops/s
Iteration   9: 273035.784 ops/s
Iteration  10: 285350.302 ops/s
Iteration  11: 274993.041 ops/s
Iteration  12: 281063.628 ops/s
Iteration  13: 285543.087 ops/s
Iteration  14: 284239.609 ops/s
Iteration  15: 267751.507 ops/s
Iteration  16: 277845.648 ops/s
Iteration  17: 283099.483 ops/s
Iteration  18: 271534.351 ops/s
Iteration  19: 277211.827 ops/s
Iteration  20: 286165.519 ops/s
Iteration  21: 268877.982 ops/s
Iteration  22: 289284.272 ops/s
Iteration  23: 293065.366 ops/s
Iteration  24: 270409.246 ops/s
Iteration  25: 292228.314 ops/s
Iteration  26: 275934.338 ops/s
Iteration  27: 278288.685 ops/s
Iteration  28: 281061.419 ops/s
Iteration  29: 273333.679 ops/s
Iteration  30: 282761.314 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorWithErrorMaxConcurrency":
  280616.689 ±(99.9%) 4481.486 ops/s [Average]
  (min, avg, max) = (267751.507, 280616.689, 293065.366), stdev = 6707.678
  CI (99.9%): [276135.203, 285098.175] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeDelayErrorWithErrorMaxConcurrency  thrpt   30  280616.689 ± 4481.486  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipOverlapping$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipOverlapping

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6107.253 ops/s
# Warmup Iteration   2: 72336.797 ops/s
# Warmup Iteration   3: 96144.014 ops/s
# Warmup Iteration   4: 178365.798 ops/s
# Warmup Iteration   5: 183420.755 ops/s
# Warmup Iteration   6: 183799.652 ops/s
# Warmup Iteration   7: 183174.846 ops/s
# Warmup Iteration   8: 186810.529 ops/s
# Warmup Iteration   9: 170091.528 ops/s
# Warmup Iteration  10: 185507.900 ops/s
# Warmup Iteration  11: 185520.095 ops/s
# Warmup Iteration  12: 182304.775 ops/s
# Warmup Iteration  13: 188454.998 ops/s
# Warmup Iteration  14: 188862.485 ops/s
# Warmup Iteration  15: 184175.587 ops/s
# Warmup Iteration  16: 176978.428 ops/s
# Warmup Iteration  17: 189198.606 ops/s
# Warmup Iteration  18: 181910.584 ops/s
# Warmup Iteration  19: 187237.805 ops/s
# Warmup Iteration  20: 182952.959 ops/s
# Warmup Iteration  21: 189473.217 ops/s
# Warmup Iteration  22: 186570.019 ops/s
# Warmup Iteration  23: 180336.278 ops/s
# Warmup Iteration  24: 182995.781 ops/s
# Warmup Iteration  25: 184639.320 ops/s
# Warmup Iteration  26: 188429.381 ops/s
# Warmup Iteration  27: 185353.694 ops/s
# Warmup Iteration  28: 181176.163 ops/s
# Warmup Iteration  29: 186034.511 ops/s
# Warmup Iteration  30: 181880.595 ops/s
Iteration   1: 179013.315 ops/s
Iteration   2: 184208.193 ops/s
Iteration   3: 181775.113 ops/s
Iteration   4: 187770.548 ops/s
Iteration   5: 176704.672 ops/s
Iteration   6: 183960.162 ops/s
Iteration   7: 179982.911 ops/s
Iteration   8: 194515.464 ops/s
Iteration   9: 181063.723 ops/s
Iteration  10: 192301.857 ops/s
Iteration  11: 184015.428 ops/s
Iteration  12: 190715.508 ops/s
Iteration  13: 181081.970 ops/s
Iteration  14: 184306.057 ops/s
Iteration  15: 184700.566 ops/s
Iteration  16: 180209.973 ops/s
Iteration  17: 181974.667 ops/s
Iteration  18: 192826.538 ops/s
Iteration  19: 180099.100 ops/s
Iteration  20: 184069.496 ops/s
Iteration  21: 187651.345 ops/s
Iteration  22: 187239.625 ops/s
Iteration  23: 158096.539 ops/s
Iteration  24: 178936.603 ops/s
Iteration  25: 195605.486 ops/s
Iteration  26: 184565.259 ops/s
Iteration  27: 183236.175 ops/s
Iteration  28: 190594.791 ops/s
Iteration  29: 183923.143 ops/s
Iteration  30: 183400.247 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipOverlapping":
  183951.482 ±(99.9%) 4587.370 ops/s [Average]
  (min, avg, max) = (158096.539, 183951.482, 195605.486), stdev = 6866.160
  CI (99.9%): [179364.113, 188538.852] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_timeskipOverlapping  thrpt   30  183951.482 ± 4587.370  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_reentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_reentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16794.419 ops/s
# Warmup Iteration   2: 137039.189 ops/s
# Warmup Iteration   3: 215687.004 ops/s
# Warmup Iteration   4: 396889.333 ops/s
# Warmup Iteration   5: 463281.442 ops/s
# Warmup Iteration   6: 551710.247 ops/s
# Warmup Iteration   7: 574535.130 ops/s
# Warmup Iteration   8: 530295.205 ops/s
# Warmup Iteration   9: 555394.310 ops/s
# Warmup Iteration  10: 557452.868 ops/s
# Warmup Iteration  11: 548672.178 ops/s
# Warmup Iteration  12: 546730.815 ops/s
# Warmup Iteration  13: 541899.763 ops/s
# Warmup Iteration  14: 569812.837 ops/s
# Warmup Iteration  15: 543925.994 ops/s
# Warmup Iteration  16: 563227.813 ops/s
# Warmup Iteration  17: 548498.068 ops/s
# Warmup Iteration  18: 579348.096 ops/s
# Warmup Iteration  19: 544431.147 ops/s
# Warmup Iteration  20: 552082.226 ops/s
# Warmup Iteration  21: 551353.480 ops/s
# Warmup Iteration  22: 559437.528 ops/s
# Warmup Iteration  23: 555554.966 ops/s
# Warmup Iteration  24: 542557.400 ops/s
# Warmup Iteration  25: 543867.178 ops/s
# Warmup Iteration  26: 573764.053 ops/s
# Warmup Iteration  27: 529279.297 ops/s
# Warmup Iteration  28: 565826.297 ops/s
# Warmup Iteration  29: 555078.754 ops/s
# Warmup Iteration  30: 578295.435 ops/s
Iteration   1: 538690.408 ops/s
Iteration   2: 553699.501 ops/s
Iteration   3: 580379.469 ops/s
Iteration   4: 542431.767 ops/s
Iteration   5: 559180.082 ops/s
Iteration   6: 542858.032 ops/s
Iteration   7: 553273.764 ops/s
Iteration   8: 551476.257 ops/s
Iteration   9: 554521.198 ops/s
Iteration  10: 556687.053 ops/s
Iteration  11: 559677.387 ops/s
Iteration  12: 556219.907 ops/s
Iteration  13: 559653.667 ops/s
Iteration  14: 547349.659 ops/s
Iteration  15: 567599.286 ops/s
Iteration  16: 570407.782 ops/s
Iteration  17: 544987.698 ops/s
Iteration  18: 552740.314 ops/s
Iteration  19: 546353.111 ops/s
Iteration  20: 561579.666 ops/s
Iteration  21: 533224.320 ops/s
Iteration  22: 550377.844 ops/s
Iteration  23: 583836.605 ops/s
Iteration  24: 576864.198 ops/s
Iteration  25: 543456.403 ops/s
Iteration  26: 560569.995 ops/s
Iteration  27: 570259.478 ops/s
Iteration  28: 543707.747 ops/s
Iteration  29: 569867.476 ops/s
Iteration  30: 582515.008 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_reentrant":
  557148.169 ±(99.9%) 8899.664 ops/s [Average]
  (min, avg, max) = (533224.320, 557148.169, 583836.605), stdev = 13320.598
  CI (99.9%): [548248.506, 566047.833] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_reentrant  thrpt   30  557148.169 ± 8899.664  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12250.074 ops/s
# Warmup Iteration   2: 74497.207 ops/s
# Warmup Iteration   3: 206972.784 ops/s
# Warmup Iteration   4: 464744.740 ops/s
# Warmup Iteration   5: 528937.168 ops/s
# Warmup Iteration   6: 679728.233 ops/s
# Warmup Iteration   7: 630217.240 ops/s
# Warmup Iteration   8: 677006.573 ops/s
# Warmup Iteration   9: 676989.365 ops/s
# Warmup Iteration  10: 646271.558 ops/s
# Warmup Iteration  11: 670982.149 ops/s
# Warmup Iteration  12: 635851.073 ops/s
# Warmup Iteration  13: 645501.579 ops/s
# Warmup Iteration  14: 679670.595 ops/s
# Warmup Iteration  15: 649555.279 ops/s
# Warmup Iteration  16: 673360.780 ops/s
# Warmup Iteration  17: 638846.975 ops/s
# Warmup Iteration  18: 646931.749 ops/s
# Warmup Iteration  19: 667856.738 ops/s
# Warmup Iteration  20: 649736.202 ops/s
# Warmup Iteration  21: 676350.098 ops/s
# Warmup Iteration  22: 645082.771 ops/s
# Warmup Iteration  23: 651983.825 ops/s
# Warmup Iteration  24: 670412.165 ops/s
# Warmup Iteration  25: 623109.530 ops/s
# Warmup Iteration  26: 645657.392 ops/s
# Warmup Iteration  27: 647353.864 ops/s
# Warmup Iteration  28: 655658.841 ops/s
# Warmup Iteration  29: 658319.287 ops/s
# Warmup Iteration  30: 666199.495 ops/s
Iteration   1: 661379.979 ops/s
Iteration   2: 636903.064 ops/s
Iteration   3: 676522.138 ops/s
Iteration   4: 667301.423 ops/s
Iteration   5: 655142.040 ops/s
Iteration   6: 685498.389 ops/s
Iteration   7: 651940.581 ops/s
Iteration   8: 650288.326 ops/s
Iteration   9: 668152.964 ops/s
Iteration  10: 675797.860 ops/s
Iteration  11: 634802.019 ops/s
Iteration  12: 668460.672 ops/s
Iteration  13: 662683.681 ops/s
Iteration  14: 639004.093 ops/s
Iteration  15: 676657.169 ops/s
Iteration  16: 640913.040 ops/s
Iteration  17: 541502.988 ops/s
Iteration  18: 660110.136 ops/s
Iteration  19: 658971.806 ops/s
Iteration  20: 651886.184 ops/s
Iteration  21: 663134.713 ops/s
Iteration  22: 666494.228 ops/s
Iteration  23: 666550.939 ops/s
Iteration  24: 664218.367 ops/s
Iteration  25: 635690.606 ops/s
Iteration  26: 684876.555 ops/s
Iteration  27: 642129.436 ops/s
Iteration  28: 676787.865 ops/s
Iteration  29: 688712.699 ops/s
Iteration  30: 663572.233 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream":
  657202.873 ±(99.9%) 17738.179 ops/s [Average]
  (min, avg, max) = (541502.988, 657202.873, 688712.699), stdev = 26549.673
  CI (99.9%): [639464.694, 674941.052] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score       Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream  thrpt   30  657202.873 ± 17738.179  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 187252.828 ops/s
# Warmup Iteration   2: 318638.020 ops/s
# Warmup Iteration   3: 342700.782 ops/s
# Warmup Iteration   4: 314697.590 ops/s
# Warmup Iteration   5: 363779.067 ops/s
# Warmup Iteration   6: 355725.790 ops/s
# Warmup Iteration   7: 294686.148 ops/s
# Warmup Iteration   8: 360878.534 ops/s
# Warmup Iteration   9: 355474.509 ops/s
# Warmup Iteration  10: 372112.307 ops/s
# Warmup Iteration  11: 367704.193 ops/s
# Warmup Iteration  12: 358513.461 ops/s
# Warmup Iteration  13: 353807.348 ops/s
# Warmup Iteration  14: 368673.588 ops/s
# Warmup Iteration  15: 345447.932 ops/s
# Warmup Iteration  16: 356043.946 ops/s
# Warmup Iteration  17: 383770.543 ops/s
# Warmup Iteration  18: 396113.585 ops/s
# Warmup Iteration  19: 398535.455 ops/s
# Warmup Iteration  20: 382139.832 ops/s
# Warmup Iteration  21: 392572.328 ops/s
# Warmup Iteration  22: 380691.366 ops/s
# Warmup Iteration  23: 390962.923 ops/s
# Warmup Iteration  24: 385203.376 ops/s
# Warmup Iteration  25: 384300.155 ops/s
# Warmup Iteration  26: 393470.909 ops/s
# Warmup Iteration  27: 370990.969 ops/s
# Warmup Iteration  28: 391110.929 ops/s
# Warmup Iteration  29: 382601.996 ops/s
# Warmup Iteration  30: 380193.029 ops/s
Iteration   1: 397943.165 ops/s
Iteration   2: 373652.318 ops/s
Iteration   3: 395623.609 ops/s
Iteration   4: 394937.526 ops/s
Iteration   5: 380802.515 ops/s
Iteration   6: 393401.746 ops/s
Iteration   7: 385779.829 ops/s
Iteration   8: 380074.986 ops/s
Iteration   9: 387988.125 ops/s
Iteration  10: 381505.145 ops/s
Iteration  11: 382348.505 ops/s
Iteration  12: 403565.425 ops/s
Iteration  13: 377082.749 ops/s
Iteration  14: 386326.939 ops/s
Iteration  15: 380466.219 ops/s
Iteration  16: 390955.530 ops/s
Iteration  17: 394998.444 ops/s
Iteration  18: 371751.904 ops/s
Iteration  19: 389191.832 ops/s
Iteration  20: 387377.417 ops/s
Iteration  21: 399646.122 ops/s
Iteration  22: 396027.958 ops/s
Iteration  23: 373614.250 ops/s
Iteration  24: 403907.457 ops/s
Iteration  25: 387537.439 ops/s
Iteration  26: 380016.856 ops/s
Iteration  27: 400782.382 ops/s
Iteration  28: 377259.561 ops/s
Iteration  29: 382600.735 ops/s
Iteration  30: 378262.671 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleError":
  387180.979 ±(99.9%) 6184.599 ops/s [Average]
  (min, avg, max) = (371751.904, 387180.979, 403907.457), stdev = 9256.817
  CI (99.9%): [380996.380, 393365.578] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleError  thrpt   30  387180.979 ± 6184.599  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150262.216 ops/s
# Warmup Iteration   2: 325009.919 ops/s
# Warmup Iteration   3: 362084.618 ops/s
# Warmup Iteration   4: 363640.808 ops/s
# Warmup Iteration   5: 351759.973 ops/s
# Warmup Iteration   6: 341737.788 ops/s
# Warmup Iteration   7: 365766.797 ops/s
# Warmup Iteration   8: 379800.919 ops/s
# Warmup Iteration   9: 363991.753 ops/s
# Warmup Iteration  10: 363901.591 ops/s
# Warmup Iteration  11: 350996.721 ops/s
# Warmup Iteration  12: 366744.198 ops/s
# Warmup Iteration  13: 366116.230 ops/s
# Warmup Iteration  14: 372556.624 ops/s
# Warmup Iteration  15: 367493.182 ops/s
# Warmup Iteration  16: 376431.634 ops/s
# Warmup Iteration  17: 401162.179 ops/s
# Warmup Iteration  18: 383878.700 ops/s
# Warmup Iteration  19: 380393.083 ops/s
# Warmup Iteration  20: 411405.963 ops/s
# Warmup Iteration  21: 381824.540 ops/s
# Warmup Iteration  22: 403251.778 ops/s
# Warmup Iteration  23: 388959.711 ops/s
# Warmup Iteration  24: 380924.025 ops/s
# Warmup Iteration  25: 393924.184 ops/s
# Warmup Iteration  26: 381369.322 ops/s
# Warmup Iteration  27: 387193.277 ops/s
# Warmup Iteration  28: 399626.910 ops/s
# Warmup Iteration  29: 397194.803 ops/s
# Warmup Iteration  30: 378141.122 ops/s
Iteration   1: 390852.701 ops/s
Iteration   2: 388780.438 ops/s
Iteration   3: 384259.194 ops/s
Iteration   4: 401380.405 ops/s
Iteration   5: 400619.845 ops/s
Iteration   6: 389912.381 ops/s
Iteration   7: 379904.067 ops/s
Iteration   8: 401693.460 ops/s
Iteration   9: 377431.645 ops/s
Iteration  10: 398756.728 ops/s
Iteration  11: 374551.863 ops/s
Iteration  12: 313874.115 ops/s
Iteration  13: 400980.950 ops/s
Iteration  14: 393076.624 ops/s
Iteration  15: 389918.732 ops/s
Iteration  16: 386324.706 ops/s
Iteration  17: 401590.216 ops/s
Iteration  18: 381081.500 ops/s
Iteration  19: 401869.167 ops/s
Iteration  20: 387970.012 ops/s
Iteration  21: 395773.750 ops/s
Iteration  22: 384551.736 ops/s
Iteration  23: 395293.938 ops/s
Iteration  24: 380552.973 ops/s
Iteration  25: 406987.206 ops/s
Iteration  26: 388264.372 ops/s
Iteration  27: 389646.790 ops/s
Iteration  28: 392301.335 ops/s
Iteration  29: 394423.274 ops/s
Iteration  30: 389313.545 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastError":
  388731.256 ±(99.9%) 10912.151 ops/s [Average]
  (min, avg, max) = (313874.115, 388731.256, 406987.206), stdev = 16332.795
  CI (99.9%): [377819.105, 399643.406] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastError  thrpt   30  388731.256 ± 10912.151  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 138782.774 ops/s
# Warmup Iteration   2: 309965.865 ops/s
# Warmup Iteration   3: 350551.560 ops/s
# Warmup Iteration   4: 344574.386 ops/s
# Warmup Iteration   5: 355183.643 ops/s
# Warmup Iteration   6: 366523.094 ops/s
# Warmup Iteration   7: 321062.180 ops/s
# Warmup Iteration   8: 365086.101 ops/s
# Warmup Iteration   9: 370435.215 ops/s
# Warmup Iteration  10: 351589.835 ops/s
# Warmup Iteration  11: 377750.134 ops/s
# Warmup Iteration  12: 355789.634 ops/s
# Warmup Iteration  13: 369514.766 ops/s
# Warmup Iteration  14: 367248.054 ops/s
# Warmup Iteration  15: 364669.323 ops/s
# Warmup Iteration  16: 374325.334 ops/s
# Warmup Iteration  17: 382319.759 ops/s
# Warmup Iteration  18: 393343.432 ops/s
# Warmup Iteration  19: 405175.657 ops/s
# Warmup Iteration  20: 378056.252 ops/s
# Warmup Iteration  21: 398408.761 ops/s
# Warmup Iteration  22: 373949.122 ops/s
# Warmup Iteration  23: 399648.930 ops/s
# Warmup Iteration  24: 380439.625 ops/s
# Warmup Iteration  25: 381162.861 ops/s
# Warmup Iteration  26: 382292.883 ops/s
# Warmup Iteration  27: 398625.871 ops/s
# Warmup Iteration  28: 383206.473 ops/s
# Warmup Iteration  29: 392862.380 ops/s
# Warmup Iteration  30: 384910.119 ops/s
Iteration   1: 396404.360 ops/s
Iteration   2: 404767.226 ops/s
Iteration   3: 377501.402 ops/s
Iteration   4: 385962.980 ops/s
Iteration   5: 391857.943 ops/s
Iteration   6: 383637.913 ops/s
Iteration   7: 385207.089 ops/s
Iteration   8: 394227.551 ops/s
Iteration   9: 390838.711 ops/s
Iteration  10: 381382.857 ops/s
Iteration  11: 401108.198 ops/s
Iteration  12: 375278.948 ops/s
Iteration  13: 390253.429 ops/s
Iteration  14: 399102.036 ops/s
Iteration  15: 377315.378 ops/s
Iteration  16: 397453.842 ops/s
Iteration  17: 375847.053 ops/s
Iteration  18: 393098.090 ops/s
Iteration  19: 403440.173 ops/s
Iteration  20: 376338.020 ops/s
Iteration  21: 401478.348 ops/s
Iteration  22: 381850.869 ops/s
Iteration  23: 402363.666 ops/s
Iteration  24: 400466.149 ops/s
Iteration  25: 376678.904 ops/s
Iteration  26: 389626.462 ops/s
Iteration  27: 382628.915 ops/s
Iteration  28: 398743.245 ops/s
Iteration  29: 377693.136 ops/s
Iteration  30: 384330.700 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastError":
  389229.453 ±(99.9%) 6497.420 ops/s [Average]
  (min, avg, max) = (375278.948, 389229.453, 404767.226), stdev = 9725.033
  CI (99.9%): [382732.033, 395726.873] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastError  thrpt   30  389229.453 ± 6497.420  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_cancelOtherOnMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_cancelOtherOnMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93867.852 ops/s
# Warmup Iteration   2: 497455.691 ops/s
# Warmup Iteration   3: 611662.727 ops/s
# Warmup Iteration   4: 590889.436 ops/s
# Warmup Iteration   5: 624259.507 ops/s
# Warmup Iteration   6: 608537.837 ops/s
# Warmup Iteration   7: 634892.607 ops/s
# Warmup Iteration   8: 618981.896 ops/s
# Warmup Iteration   9: 614732.268 ops/s
# Warmup Iteration  10: 588706.391 ops/s
# Warmup Iteration  11: 617825.084 ops/s
# Warmup Iteration  12: 628398.980 ops/s
# Warmup Iteration  13: 602264.586 ops/s
# Warmup Iteration  14: 617450.672 ops/s
# Warmup Iteration  15: 649752.365 ops/s
# Warmup Iteration  16: 597986.288 ops/s
# Warmup Iteration  17: 680125.023 ops/s
# Warmup Iteration  18: 623212.677 ops/s
# Warmup Iteration  19: 646299.639 ops/s
# Warmup Iteration  20: 694890.416 ops/s
# Warmup Iteration  21: 648391.799 ops/s
# Warmup Iteration  22: 642992.918 ops/s
# Warmup Iteration  23: 678847.546 ops/s
# Warmup Iteration  24: 636845.880 ops/s
# Warmup Iteration  25: 666804.376 ops/s
# Warmup Iteration  26: 638193.778 ops/s
# Warmup Iteration  27: 644273.198 ops/s
# Warmup Iteration  28: 630789.543 ops/s
# Warmup Iteration  29: 640402.404 ops/s
# Warmup Iteration  30: 691645.422 ops/s
Iteration   1: 642682.210 ops/s
Iteration   2: 659631.907 ops/s
Iteration   3: 677252.209 ops/s
Iteration   4: 645270.145 ops/s
Iteration   5: 623404.023 ops/s
Iteration   6: 585907.971 ops/s
Iteration   7: 567324.654 ops/s
Iteration   8: 640775.557 ops/s
Iteration   9: 657984.452 ops/s
Iteration  10: 636472.357 ops/s
Iteration  11: 660396.370 ops/s
Iteration  12: 645197.029 ops/s
Iteration  13: 662043.882 ops/s
Iteration  14: 671255.537 ops/s
Iteration  15: 658829.976 ops/s
Iteration  16: 638616.468 ops/s
Iteration  17: 669557.347 ops/s
Iteration  18: 636221.684 ops/s
Iteration  19: 685560.555 ops/s
Iteration  20: 637062.590 ops/s
Iteration  21: 673525.645 ops/s
Iteration  22: 654024.757 ops/s
Iteration  23: 635850.271 ops/s
Iteration  24: 661981.456 ops/s
Iteration  25: 638436.709 ops/s
Iteration  26: 674507.043 ops/s
Iteration  27: 664739.179 ops/s
Iteration  28: 638772.568 ops/s
Iteration  29: 670755.929 ops/s
Iteration  30: 644078.847 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_cancelOtherOnMainError":
  648603.978 ±(99.9%) 16751.967 ops/s [Average]
  (min, avg, max) = (567324.654, 648603.978, 685560.555), stdev = 25073.558
  CI (99.9%): [631852.011, 665355.945] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
ObservableMergeWithCompletableTest._Benchmark.benchmark_cancelOtherOnMainError  thrpt   30  648603.978 ± 16751.967  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_windowOpenCloseCloseReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_windowOpenCloseCloseReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32003.911 ops/s
# Warmup Iteration   2: 344447.086 ops/s
# Warmup Iteration   3: 402110.480 ops/s
# Warmup Iteration   4: 418954.932 ops/s
# Warmup Iteration   5: 447749.359 ops/s
# Warmup Iteration   6: 424959.654 ops/s
# Warmup Iteration   7: 425434.251 ops/s
# Warmup Iteration   8: 427352.512 ops/s
# Warmup Iteration   9: 429252.943 ops/s
# Warmup Iteration  10: 396023.307 ops/s
# Warmup Iteration  11: 403916.850 ops/s
# Warmup Iteration  12: 438744.259 ops/s
# Warmup Iteration  13: 425090.329 ops/s
# Warmup Iteration  14: 427410.913 ops/s
# Warmup Iteration  15: 407574.659 ops/s
# Warmup Iteration  16: 421916.655 ops/s
# Warmup Iteration  17: 503322.385 ops/s
# Warmup Iteration  18: 515149.244 ops/s
# Warmup Iteration  19: 527128.364 ops/s
# Warmup Iteration  20: 496231.184 ops/s
# Warmup Iteration  21: 517462.837 ops/s
# Warmup Iteration  22: 515551.514 ops/s
# Warmup Iteration  23: 507435.581 ops/s
# Warmup Iteration  24: 492607.903 ops/s
# Warmup Iteration  25: 513824.828 ops/s
# Warmup Iteration  26: 517348.507 ops/s
# Warmup Iteration  27: 509773.895 ops/s
# Warmup Iteration  28: 522087.396 ops/s
# Warmup Iteration  29: 510616.072 ops/s
# Warmup Iteration  30: 488185.907 ops/s
Iteration   1: 521874.995 ops/s
Iteration   2: 504298.185 ops/s
Iteration   3: 520171.688 ops/s
Iteration   4: 497127.378 ops/s
Iteration   5: 526502.098 ops/s
Iteration   6: 509755.506 ops/s
Iteration   7: 508173.531 ops/s
Iteration   8: 513215.300 ops/s
Iteration   9: 527725.340 ops/s
Iteration  10: 503144.310 ops/s
Iteration  11: 507298.299 ops/s
Iteration  12: 529438.095 ops/s
Iteration  13: 500219.956 ops/s
Iteration  14: 504182.203 ops/s
Iteration  15: 516110.827 ops/s
Iteration  16: 511904.499 ops/s
Iteration  17: 511696.041 ops/s
Iteration  18: 513609.082 ops/s
Iteration  19: 497330.555 ops/s
Iteration  20: 525940.980 ops/s
Iteration  21: 507978.932 ops/s
Iteration  22: 490317.724 ops/s
Iteration  23: 531761.887 ops/s
Iteration  24: 484754.495 ops/s
Iteration  25: 513834.273 ops/s
Iteration  26: 493165.164 ops/s
Iteration  27: 519031.641 ops/s
Iteration  28: 513677.547 ops/s
Iteration  29: 506145.166 ops/s
Iteration  30: 522170.218 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_windowOpenCloseCloseReturnsNull":
  511085.197 ±(99.9%) 7943.402 ops/s [Average]
  (min, avg, max) = (484754.495, 511085.197, 531761.887), stdev = 11889.311
  CI (99.9%): [503141.796, 519028.599] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_windowOpenCloseCloseReturnsNull  thrpt   30  511085.197 ± 7943.402  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.702 ops/s
# Warmup Iteration   2: 39484.235 ops/s
# Warmup Iteration   3: 131623.912 ops/s
# Warmup Iteration   4: 121186.600 ops/s
# Warmup Iteration   5: 129773.174 ops/s
# Warmup Iteration   6: 122018.934 ops/s
# Warmup Iteration   7: 316931.268 ops/s
# Warmup Iteration   8: 364133.872 ops/s
# Warmup Iteration   9: 381208.823 ops/s
# Warmup Iteration  10: 362336.502 ops/s
# Warmup Iteration  11: 379652.450 ops/s
# Warmup Iteration  12: 365025.373 ops/s
# Warmup Iteration  13: 369458.789 ops/s
# Warmup Iteration  14: 386423.377 ops/s
# Warmup Iteration  15: 359715.320 ops/s
# Warmup Iteration  16: 374153.721 ops/s
# Warmup Iteration  17: 365260.718 ops/s
# Warmup Iteration  18: 382664.203 ops/s
# Warmup Iteration  19: 383261.095 ops/s
# Warmup Iteration  20: 354619.770 ops/s
# Warmup Iteration  21: 383981.591 ops/s
# Warmup Iteration  22: 361733.271 ops/s
# Warmup Iteration  23: 370474.515 ops/s
# Warmup Iteration  24: 372088.543 ops/s
# Warmup Iteration  25: 385809.594 ops/s
# Warmup Iteration  26: 364224.485 ops/s
# Warmup Iteration  27: 360811.794 ops/s
# Warmup Iteration  28: 385829.660 ops/s
# Warmup Iteration  29: 361406.409 ops/s
# Warmup Iteration  30: 383552.598 ops/s
Iteration   1: 300239.620 ops/s
Iteration   2: 363277.492 ops/s
Iteration   3: 383764.958 ops/s
Iteration   4: 367406.195 ops/s
Iteration   5: 388876.855 ops/s
Iteration   6: 386756.276 ops/s
Iteration   7: 372709.593 ops/s
Iteration   8: 378255.265 ops/s
Iteration   9: 368106.959 ops/s
Iteration  10: 383189.704 ops/s
Iteration  11: 385541.017 ops/s
Iteration  12: 368805.104 ops/s
Iteration  13: 384201.322 ops/s
Iteration  14: 367990.930 ops/s
Iteration  15: 368513.952 ops/s
Iteration  16: 383653.314 ops/s
Iteration  17: 367724.133 ops/s
Iteration  18: 380852.914 ops/s
Iteration  19: 356325.538 ops/s
Iteration  20: 384272.054 ops/s
Iteration  21: 371840.319 ops/s
Iteration  22: 393787.557 ops/s
Iteration  23: 370407.559 ops/s
Iteration  24: 381750.601 ops/s
Iteration  25: 368242.535 ops/s
Iteration  26: 368047.308 ops/s
Iteration  27: 382947.296 ops/s
Iteration  28: 374326.664 ops/s
Iteration  29: 381630.596 ops/s
Iteration  30: 371616.709 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_error":
  373502.011 ±(99.9%) 10970.981 ops/s [Average]
  (min, avg, max) = (300239.620, 373502.011, 393787.557), stdev = 16420.849
  CI (99.9%): [362531.031, 384472.992] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
ObservableDistinctTest._Benchmark.benchmark_error  thrpt   30  373502.011 ± 10970.981  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFusedRejecting$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFusedRejecting

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.695 ops/s
# Warmup Iteration   2: 46668.365 ops/s
# Warmup Iteration   3: 138480.649 ops/s
# Warmup Iteration   4: 177847.416 ops/s
# Warmup Iteration   5: 196633.721 ops/s
# Warmup Iteration   6: 200803.428 ops/s
# Warmup Iteration   7: 419390.034 ops/s
# Warmup Iteration   8: 653145.088 ops/s
# Warmup Iteration   9: 687686.387 ops/s
# Warmup Iteration  10: 626521.860 ops/s
# Warmup Iteration  11: 653781.425 ops/s
# Warmup Iteration  12: 738701.864 ops/s
# Warmup Iteration  13: 676257.091 ops/s
# Warmup Iteration  14: 727962.181 ops/s
# Warmup Iteration  15: 728094.521 ops/s
# Warmup Iteration  16: 696213.067 ops/s
# Warmup Iteration  17: 725613.870 ops/s
# Warmup Iteration  18: 687741.425 ops/s
# Warmup Iteration  19: 710766.723 ops/s
# Warmup Iteration  20: 706990.309 ops/s
# Warmup Iteration  21: 713091.119 ops/s
# Warmup Iteration  22: 705819.894 ops/s
# Warmup Iteration  23: 681013.710 ops/s
# Warmup Iteration  24: 714636.181 ops/s
# Warmup Iteration  25: 706375.903 ops/s
# Warmup Iteration  26: 701917.041 ops/s
# Warmup Iteration  27: 721027.543 ops/s
# Warmup Iteration  28: 697800.599 ops/s
# Warmup Iteration  29: 703793.795 ops/s
# Warmup Iteration  30: 723802.117 ops/s
Iteration   1: 701003.309 ops/s
Iteration   2: 708926.503 ops/s
Iteration   3: 725405.635 ops/s
Iteration   4: 687139.811 ops/s
Iteration   5: 723119.690 ops/s
Iteration   6: 696434.975 ops/s
Iteration   7: 714041.419 ops/s
Iteration   8: 718917.561 ops/s
Iteration   9: 708747.111 ops/s
Iteration  10: 718742.338 ops/s
Iteration  11: 724912.334 ops/s
Iteration  12: 701190.390 ops/s
Iteration  13: 696858.639 ops/s
Iteration  14: 729199.584 ops/s
Iteration  15: 685614.425 ops/s
Iteration  16: 696199.451 ops/s
Iteration  17: 734603.227 ops/s
Iteration  18: 694308.371 ops/s
Iteration  19: 702166.674 ops/s
Iteration  20: 686940.411 ops/s
Iteration  21: 719948.462 ops/s
Iteration  22: 685333.944 ops/s
Iteration  23: 696561.971 ops/s
Iteration  24: 719916.650 ops/s
Iteration  25: 688048.936 ops/s
Iteration  26: 719177.143 ops/s
Iteration  27: 669559.990 ops/s
Iteration  28: 703232.493 ops/s
Iteration  29: 685357.408 ops/s
Iteration  30: 690098.899 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFusedRejecting":
  704390.258 ±(99.9%) 10912.033 ops/s [Average]
  (min, avg, max) = (669559.990, 704390.258, 734603.227), stdev = 16332.619
  CI (99.9%): [693478.225, 715302.292] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_asyncFusedRejecting  thrpt   30  704390.258 ± 10912.033  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_mainCompleteWhileInnerActive$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_mainCompleteWhileInnerActive

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.685 ops/s
# Warmup Iteration   2: 33104.884 ops/s
# Warmup Iteration   3: 110490.644 ops/s
# Warmup Iteration   4: 102828.963 ops/s
# Warmup Iteration   5: 160884.522 ops/s
# Warmup Iteration   6: 259818.245 ops/s
# Warmup Iteration   7: 229280.843 ops/s
# Warmup Iteration   8: 589830.432 ops/s
# Warmup Iteration   9: 583588.352 ops/s
# Warmup Iteration  10: 610021.423 ops/s
# Warmup Iteration  11: 608632.554 ops/s
# Warmup Iteration  12: 596268.358 ops/s
# Warmup Iteration  13: 607770.497 ops/s
# Warmup Iteration  14: 601739.868 ops/s
# Warmup Iteration  15: 621595.807 ops/s
# Warmup Iteration  16: 605615.616 ops/s
# Warmup Iteration  17: 594360.810 ops/s
# Warmup Iteration  18: 595208.942 ops/s
# Warmup Iteration  19: 606787.376 ops/s
# Warmup Iteration  20: 603463.412 ops/s
# Warmup Iteration  21: 613118.269 ops/s
# Warmup Iteration  22: 631947.852 ops/s
# Warmup Iteration  23: 588354.689 ops/s
# Warmup Iteration  24: 525338.799 ops/s
# Warmup Iteration  25: 593522.100 ops/s
# Warmup Iteration  26: 587900.430 ops/s
# Warmup Iteration  27: 626941.383 ops/s
# Warmup Iteration  28: 598309.797 ops/s
# Warmup Iteration  29: 626573.439 ops/s
# Warmup Iteration  30: 595158.679 ops/s
Iteration   1: 612272.915 ops/s
Iteration   2: 612624.085 ops/s
Iteration   3: 595004.247 ops/s
Iteration   4: 618671.266 ops/s
Iteration   5: 621450.741 ops/s
Iteration   6: 578138.188 ops/s
Iteration   7: 622889.848 ops/s
Iteration   8: 624727.449 ops/s
Iteration   9: 602024.460 ops/s
Iteration  10: 609233.988 ops/s
Iteration  11: 601913.707 ops/s
Iteration  12: 604549.738 ops/s
Iteration  13: 613316.578 ops/s
Iteration  14: 591095.609 ops/s
Iteration  15: 606156.042 ops/s
Iteration  16: 578613.542 ops/s
Iteration  17: 612812.382 ops/s
Iteration  18: 580248.367 ops/s
Iteration  19: 588161.124 ops/s
Iteration  20: 632566.841 ops/s
Iteration  21: 595768.353 ops/s
Iteration  22: 609316.988 ops/s
Iteration  23: 595721.750 ops/s
Iteration  24: 606739.937 ops/s
Iteration  25: 596295.276 ops/s
Iteration  26: 607895.907 ops/s
Iteration  27: 607023.073 ops/s
Iteration  28: 602946.376 ops/s
Iteration  29: 609482.906 ops/s
Iteration  30: 603723.166 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_mainCompleteWhileInnerActive":
  604712.828 ±(99.9%) 8875.390 ops/s [Average]
  (min, avg, max) = (578138.188, 604712.828, 632566.841), stdev = 13284.267
  CI (99.9%): [595837.439, 613588.218] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_mainCompleteWhileInnerActive  thrpt   30  604712.828 ± 8875.390  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_syncFusedMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_syncFusedMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.663 ops/s
# Warmup Iteration   2: 26563.705 ops/s
# Warmup Iteration   3: 95169.403 ops/s
# Warmup Iteration   4: 122807.355 ops/s
# Warmup Iteration   5: 167410.865 ops/s
# Warmup Iteration   6: 163337.974 ops/s
# Warmup Iteration   7: 165265.061 ops/s
# Warmup Iteration   8: 245936.921 ops/s
# Warmup Iteration   9: 469368.424 ops/s
# Warmup Iteration  10: 471168.006 ops/s
# Warmup Iteration  11: 479565.193 ops/s
# Warmup Iteration  12: 495754.582 ops/s
# Warmup Iteration  13: 484426.546 ops/s
# Warmup Iteration  14: 478491.225 ops/s
# Warmup Iteration  15: 477336.383 ops/s
# Warmup Iteration  16: 489953.960 ops/s
# Warmup Iteration  17: 509909.104 ops/s
# Warmup Iteration  18: 470143.863 ops/s
# Warmup Iteration  19: 497496.687 ops/s
# Warmup Iteration  20: 491207.278 ops/s
# Warmup Iteration  21: 490421.097 ops/s
# Warmup Iteration  22: 492568.569 ops/s
# Warmup Iteration  23: 489502.086 ops/s
# Warmup Iteration  24: 494175.033 ops/s
# Warmup Iteration  25: 486515.970 ops/s
# Warmup Iteration  26: 484099.744 ops/s
# Warmup Iteration  27: 506521.831 ops/s
# Warmup Iteration  28: 471611.663 ops/s
# Warmup Iteration  29: 495337.111 ops/s
# Warmup Iteration  30: 497760.989 ops/s
Iteration   1: 488674.695 ops/s
Iteration   2: 501392.811 ops/s
Iteration   3: 481127.419 ops/s
Iteration   4: 483646.644 ops/s
Iteration   5: 503181.286 ops/s
Iteration   6: 485065.893 ops/s
Iteration   7: 495324.803 ops/s
Iteration   8: 481912.539 ops/s
Iteration   9: 508173.853 ops/s
Iteration  10: 472834.506 ops/s
Iteration  11: 486138.684 ops/s
Iteration  12: 501443.779 ops/s
Iteration  13: 487846.266 ops/s
Iteration  14: 491970.696 ops/s
Iteration  15: 486698.678 ops/s
Iteration  16: 497552.791 ops/s
Iteration  17: 513632.474 ops/s
Iteration  18: 468622.476 ops/s
Iteration  19: 506795.229 ops/s
Iteration  20: 479307.395 ops/s
Iteration  21: 487804.317 ops/s
Iteration  22: 484230.569 ops/s
Iteration  23: 484411.666 ops/s
Iteration  24: 475236.233 ops/s
Iteration  25: 497811.976 ops/s
Iteration  26: 509271.963 ops/s
Iteration  27: 482544.759 ops/s
Iteration  28: 485483.271 ops/s
Iteration  29: 500714.071 ops/s
Iteration  30: 490000.261 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_syncFusedMaybe":
  490628.400 ±(99.9%) 7546.956 ops/s [Average]
  (min, avg, max) = (468622.476, 490628.400, 513632.474), stdev = 11295.929
  CI (99.9%): [483081.444, 498175.356] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_syncFusedMaybe  thrpt   30  490628.400 ± 7546.956  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_syncFusedSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_syncFusedSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.664 ops/s
# Warmup Iteration   2: 25605.584 ops/s
# Warmup Iteration   3: 83085.343 ops/s
# Warmup Iteration   4: 168410.744 ops/s
# Warmup Iteration   5: 210572.999 ops/s
# Warmup Iteration   6: 212863.201 ops/s
# Warmup Iteration   7: 475429.862 ops/s
# Warmup Iteration   8: 456184.907 ops/s
# Warmup Iteration   9: 474907.854 ops/s
# Warmup Iteration  10: 476020.327 ops/s
# Warmup Iteration  11: 481058.932 ops/s
# Warmup Iteration  12: 490858.081 ops/s
# Warmup Iteration  13: 488783.727 ops/s
# Warmup Iteration  14: 453812.601 ops/s
# Warmup Iteration  15: 464055.447 ops/s
# Warmup Iteration  16: 476475.380 ops/s
# Warmup Iteration  17: 395891.453 ops/s
# Warmup Iteration  18: 491612.208 ops/s
# Warmup Iteration  19: 468829.775 ops/s
# Warmup Iteration  20: 484751.096 ops/s
# Warmup Iteration  21: 479169.032 ops/s
# Warmup Iteration  22: 480549.330 ops/s
# Warmup Iteration  23: 451180.931 ops/s
# Warmup Iteration  24: 489681.619 ops/s
# Warmup Iteration  25: 483039.596 ops/s
# Warmup Iteration  26: 472913.348 ops/s
# Warmup Iteration  27: 484431.756 ops/s
# Warmup Iteration  28: 467494.358 ops/s
# Warmup Iteration  29: 498202.946 ops/s
# Warmup Iteration  30: 473589.207 ops/s
Iteration   1: 491810.183 ops/s
Iteration   2: 496834.470 ops/s
Iteration   3: 471741.518 ops/s
Iteration   4: 505693.779 ops/s
Iteration   5: 497866.059 ops/s
Iteration   6: 471989.527 ops/s
Iteration   7: 495752.425 ops/s
Iteration   8: 474191.848 ops/s
Iteration   9: 501978.597 ops/s
Iteration  10: 484416.884 ops/s
Iteration  11: 469176.255 ops/s
Iteration  12: 502611.877 ops/s
Iteration  13: 470857.131 ops/s
Iteration  14: 492575.437 ops/s
Iteration  15: 497989.956 ops/s
Iteration  16: 496345.214 ops/s
Iteration  17: 467987.933 ops/s
Iteration  18: 494193.363 ops/s
Iteration  19: 482227.588 ops/s
Iteration  20: 488454.201 ops/s
Iteration  21: 483380.867 ops/s
Iteration  22: 492341.384 ops/s
Iteration  23: 495078.565 ops/s
Iteration  24: 483691.637 ops/s
Iteration  25: 498721.669 ops/s
Iteration  26: 470221.764 ops/s
Iteration  27: 481382.699 ops/s
Iteration  28: 498902.576 ops/s
Iteration  29: 484025.296 ops/s
Iteration  30: 485801.970 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_syncFusedSingle":
  487608.089 ±(99.9%) 7572.734 ops/s [Average]
  (min, avg, max) = (467987.933, 487608.089, 505693.779), stdev = 11334.512
  CI (99.9%): [480035.356, 495180.823] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_syncFusedSingle  thrpt   30  487608.089 ± 7572.734  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_rangeWithOverflow5$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_rangeWithOverflow5

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1259346.645 ops/s
# Warmup Iteration   2: 3060149.257 ops/s
# Warmup Iteration   3: 4104610.843 ops/s
# Warmup Iteration   4: 4086125.001 ops/s
# Warmup Iteration   5: 4141774.682 ops/s
# Warmup Iteration   6: 3948063.161 ops/s
# Warmup Iteration   7: 3957927.858 ops/s
# Warmup Iteration   8: 4191988.927 ops/s
# Warmup Iteration   9: 4045766.132 ops/s
# Warmup Iteration  10: 3749968.134 ops/s
# Warmup Iteration  11: 4145231.755 ops/s
# Warmup Iteration  12: 3920444.594 ops/s
# Warmup Iteration  13: 4200869.610 ops/s
# Warmup Iteration  14: 4039817.833 ops/s
# Warmup Iteration  15: 4101438.793 ops/s
# Warmup Iteration  16: 4078744.055 ops/s
# Warmup Iteration  17: 4169202.288 ops/s
# Warmup Iteration  18: 3912946.295 ops/s
# Warmup Iteration  19: 4049203.400 ops/s
# Warmup Iteration  20: 4069382.292 ops/s
# Warmup Iteration  21: 4247181.827 ops/s
# Warmup Iteration  22: 4122392.586 ops/s
# Warmup Iteration  23: 3934066.531 ops/s
# Warmup Iteration  24: 4185379.177 ops/s
# Warmup Iteration  25: 4262009.251 ops/s
# Warmup Iteration  26: 3963166.572 ops/s
# Warmup Iteration  27: 4247401.453 ops/s
# Warmup Iteration  28: 4067041.591 ops/s
# Warmup Iteration  29: 4197832.309 ops/s
# Warmup Iteration  30: 4167060.289 ops/s
Iteration   1: 3986659.878 ops/s
Iteration   2: 4193062.988 ops/s
Iteration   3: 3987324.510 ops/s
Iteration   4: 3937711.174 ops/s
Iteration   5: 4145451.576 ops/s
Iteration   6: 4111507.253 ops/s
Iteration   7: 4210514.991 ops/s
Iteration   8: 3958246.373 ops/s
Iteration   9: 4166958.568 ops/s
Iteration  10: 4026981.010 ops/s
Iteration  11: 4027512.611 ops/s
Iteration  12: 3990721.347 ops/s
Iteration  13: 4078192.896 ops/s
Iteration  14: 4109000.446 ops/s
Iteration  15: 4236713.714 ops/s
Iteration  16: 3939835.540 ops/s
Iteration  17: 4059518.080 ops/s
Iteration  18: 4094368.802 ops/s
Iteration  19: 4151081.841 ops/s
Iteration  20: 3947378.212 ops/s
Iteration  21: 3991225.849 ops/s
Iteration  22: 4248267.164 ops/s
Iteration  23: 4049648.774 ops/s
Iteration  24: 4185702.612 ops/s
Iteration  25: 3939773.825 ops/s
Iteration  26: 4237329.106 ops/s
Iteration  27: 4079563.041 ops/s
Iteration  28: 4038799.720 ops/s
Iteration  29: 4238547.098 ops/s
Iteration  30: 4056802.036 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRangeTest._Benchmark.benchmark_rangeWithOverflow5":
  4080813.368 ±(99.9%) 67605.789 ops/s [Average]
  (min, avg, max) = (3937711.174, 4080813.368, 4248267.164), stdev = 101189.169
  CI (99.9%): [4013207.579, 4148419.157] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableRangeTest._Benchmark.benchmark_rangeWithOverflow5  thrpt   30  4080813.368 ± 67605.789  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_rangeWithOverflow5$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_rangeWithOverflow5

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 996301.425 ops/s
# Warmup Iteration   2: 2930973.826 ops/s
# Warmup Iteration   3: 3502058.444 ops/s
# Warmup Iteration   4: 3608710.542 ops/s
# Warmup Iteration   5: 3893268.404 ops/s
# Warmup Iteration   6: 3739627.290 ops/s
# Warmup Iteration   7: 3590944.815 ops/s
# Warmup Iteration   8: 3592338.628 ops/s
# Warmup Iteration   9: 3473781.866 ops/s
# Warmup Iteration  10: 3735506.783 ops/s
# Warmup Iteration  11: 3681283.256 ops/s
# Warmup Iteration  12: 2755314.869 ops/s
# Warmup Iteration  13: 3792361.006 ops/s
# Warmup Iteration  14: 3686399.107 ops/s
# Warmup Iteration  15: 3742862.932 ops/s
# Warmup Iteration  16: 3764166.187 ops/s
# Warmup Iteration  17: 3489397.157 ops/s
# Warmup Iteration  18: 3693486.167 ops/s
# Warmup Iteration  19: 3574975.909 ops/s
# Warmup Iteration  20: 3802233.361 ops/s
# Warmup Iteration  21: 3591898.604 ops/s
# Warmup Iteration  22: 3661209.967 ops/s
# Warmup Iteration  23: 3734231.139 ops/s
# Warmup Iteration  24: 3680644.557 ops/s
# Warmup Iteration  25: 3801745.413 ops/s
# Warmup Iteration  26: 3636069.957 ops/s
# Warmup Iteration  27: 3719024.867 ops/s
# Warmup Iteration  28: 3679375.423 ops/s
# Warmup Iteration  29: 3610046.186 ops/s
# Warmup Iteration  30: 3750553.358 ops/s
Iteration   1: 3497605.687 ops/s
Iteration   2: 3555500.497 ops/s
Iteration   3: 3614606.769 ops/s
Iteration   4: 3583501.750 ops/s
Iteration   5: 3536859.883 ops/s
Iteration   6: 3718668.743 ops/s
Iteration   7: 3605904.708 ops/s
Iteration   8: 3615787.812 ops/s
Iteration   9: 3627181.011 ops/s
Iteration  10: 3520155.636 ops/s
Iteration  11: 3762881.412 ops/s
Iteration  12: 3540311.277 ops/s
Iteration  13: 3697281.247 ops/s
Iteration  14: 3545560.456 ops/s
Iteration  15: 3641963.080 ops/s
Iteration  16: 3777571.511 ops/s
Iteration  17: 3756257.940 ops/s
Iteration  18: 3598948.109 ops/s
Iteration  19: 3637632.111 ops/s
Iteration  20: 3655945.969 ops/s
Iteration  21: 3615366.367 ops/s
Iteration  22: 3779231.056 ops/s
Iteration  23: 3805277.744 ops/s
Iteration  24: 3480842.989 ops/s
Iteration  25: 3697640.789 ops/s
Iteration  26: 3591671.595 ops/s
Iteration  27: 3738892.087 ops/s
Iteration  28: 3625134.362 ops/s
Iteration  29: 3528718.441 ops/s
Iteration  30: 3652572.326 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRangeLongTest._Benchmark.benchmark_rangeWithOverflow5":
  3633515.779 ±(99.9%) 60214.937 ops/s [Average]
  (min, avg, max) = (3480842.989, 3633515.779, 3805277.744), stdev = 90126.890
  CI (99.9%): [3573300.842, 3693730.716] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableRangeLongTest._Benchmark.benchmark_rangeWithOverflow5  thrpt   30  3633515.779 ± 60214.937  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 222645.829 ops/s
# Warmup Iteration   2: 307610.802 ops/s
# Warmup Iteration   3: 359338.360 ops/s
# Warmup Iteration   4: 345023.074 ops/s
# Warmup Iteration   5: 388237.091 ops/s
# Warmup Iteration   6: 374629.083 ops/s
# Warmup Iteration   7: 380869.432 ops/s
# Warmup Iteration   8: 384027.831 ops/s
# Warmup Iteration   9: 369221.782 ops/s
# Warmup Iteration  10: 388084.978 ops/s
# Warmup Iteration  11: 394412.305 ops/s
# Warmup Iteration  12: 386148.160 ops/s
# Warmup Iteration  13: 394370.448 ops/s
# Warmup Iteration  14: 364719.687 ops/s
# Warmup Iteration  15: 387162.319 ops/s
# Warmup Iteration  16: 377006.329 ops/s
# Warmup Iteration  17: 414831.238 ops/s
# Warmup Iteration  18: 404862.723 ops/s
# Warmup Iteration  19: 406513.677 ops/s
# Warmup Iteration  20: 403585.217 ops/s
# Warmup Iteration  21: 416188.308 ops/s
# Warmup Iteration  22: 414231.498 ops/s
# Warmup Iteration  23: 366796.591 ops/s
# Warmup Iteration  24: 407374.787 ops/s
# Warmup Iteration  25: 414533.935 ops/s
# Warmup Iteration  26: 403396.605 ops/s
# Warmup Iteration  27: 388445.251 ops/s
# Warmup Iteration  28: 415609.506 ops/s
# Warmup Iteration  29: 398514.309 ops/s
# Warmup Iteration  30: 417682.594 ops/s
Iteration   1: 396115.311 ops/s
Iteration   2: 396558.928 ops/s
Iteration   3: 421598.297 ops/s
Iteration   4: 399043.622 ops/s
Iteration   5: 418246.307 ops/s
Iteration   6: 401259.988 ops/s
Iteration   7: 400925.786 ops/s
Iteration   8: 408375.220 ops/s
Iteration   9: 401891.338 ops/s
Iteration  10: 403206.290 ops/s
Iteration  11: 397074.413 ops/s
Iteration  12: 411752.158 ops/s
Iteration  13: 405894.437 ops/s
Iteration  14: 402535.275 ops/s
Iteration  15: 394639.058 ops/s
Iteration  16: 418701.037 ops/s
Iteration  17: 393559.457 ops/s
Iteration  18: 418926.777 ops/s
Iteration  19: 376252.467 ops/s
Iteration  20: 420431.479 ops/s
Iteration  21: 423561.694 ops/s
Iteration  22: 396819.495 ops/s
Iteration  23: 419177.693 ops/s
Iteration  24: 420918.210 ops/s
Iteration  25: 392119.036 ops/s
Iteration  26: 413896.660 ops/s
Iteration  27: 400366.403 ops/s
Iteration  28: 418661.377 ops/s
Iteration  29: 394821.972 ops/s
Iteration  30: 402533.756 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableMostRecentTest._Benchmark.benchmark_empty":
  405662.131 ±(99.9%) 7754.623 ops/s [Average]
  (min, avg, max) = (376252.467, 405662.131, 423561.694), stdev = 11606.755
  CI (99.9%): [397907.508, 413416.754] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
BlockingObservableMostRecentTest._Benchmark.benchmark_empty  thrpt   30  405662.131 ± 7754.623  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFusedPollCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFusedPollCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.720 ops/s
# Warmup Iteration   2: 19725.360 ops/s
# Warmup Iteration   3: 41078.476 ops/s
# Warmup Iteration   4: 54681.665 ops/s
# Warmup Iteration   5: 48711.246 ops/s
# Warmup Iteration   6: 46593.014 ops/s
# Warmup Iteration   7: 46855.198 ops/s
# Warmup Iteration   8: 63723.759 ops/s
# Warmup Iteration   9: 84907.057 ops/s
# Warmup Iteration  10: 91156.842 ops/s
# Warmup Iteration  11: 99004.196 ops/s
# Warmup Iteration  12: 183562.951 ops/s
# Warmup Iteration  13: 225316.562 ops/s
# Warmup Iteration  14: 237801.693 ops/s
# Warmup Iteration  15: 231512.275 ops/s
# Warmup Iteration  16: 235022.913 ops/s
# Warmup Iteration  17: 232110.493 ops/s
# Warmup Iteration  18: 239191.630 ops/s
# Warmup Iteration  19: 228654.952 ops/s
# Warmup Iteration  20: 232968.175 ops/s
# Warmup Iteration  21: 238557.826 ops/s
# Warmup Iteration  22: 227891.760 ops/s
# Warmup Iteration  23: 237600.156 ops/s
# Warmup Iteration  24: 246181.567 ops/s
# Warmup Iteration  25: 246778.379 ops/s
# Warmup Iteration  26: 231812.625 ops/s
# Warmup Iteration  27: 250124.861 ops/s
# Warmup Iteration  28: 228858.448 ops/s
# Warmup Iteration  29: 241239.828 ops/s
# Warmup Iteration  30: 247174.083 ops/s
Iteration   1: 230833.827 ops/s
Iteration   2: 244278.612 ops/s
Iteration   3: 233817.244 ops/s
Iteration   4: 245437.538 ops/s
Iteration   5: 242239.242 ops/s
Iteration   6: 224993.310 ops/s
Iteration   7: 249431.273 ops/s
Iteration   8: 221240.308 ops/s
Iteration   9: 249971.026 ops/s
Iteration  10: 236111.617 ops/s
Iteration  11: 248144.081 ops/s
Iteration  12: 236429.153 ops/s
Iteration  13: 245820.155 ops/s
Iteration  14: 242524.435 ops/s
Iteration  15: 249300.740 ops/s
Iteration  16: 246707.826 ops/s
Iteration  17: 240395.856 ops/s
Iteration  18: 251522.485 ops/s
Iteration  19: 251279.032 ops/s
Iteration  20: 251441.782 ops/s
Iteration  21: 242181.946 ops/s
Iteration  22: 240446.095 ops/s
Iteration  23: 252302.388 ops/s
Iteration  24: 234331.647 ops/s
Iteration  25: 241612.455 ops/s
Iteration  26: 245456.195 ops/s
Iteration  27: 230370.475 ops/s
Iteration  28: 253147.541 ops/s
Iteration  29: 239539.352 ops/s
Iteration  30: 247651.069 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_asyncFusedPollCrash":
  242298.624 ±(99.9%) 5526.503 ops/s [Average]
  (min, avg, max) = (221240.308, 242298.624, 253147.541), stdev = 8271.811
  CI (99.9%): [236772.120, 247825.127] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_asyncFusedPollCrash  thrpt   30  242298.624 ± 5526.503  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157747.433 ops/s
# Warmup Iteration   2: 327308.380 ops/s
# Warmup Iteration   3: 331605.900 ops/s
# Warmup Iteration   4: 355178.841 ops/s
# Warmup Iteration   5: 358176.731 ops/s
# Warmup Iteration   6: 355268.072 ops/s
# Warmup Iteration   7: 374731.449 ops/s
# Warmup Iteration   8: 356767.885 ops/s
# Warmup Iteration   9: 362025.480 ops/s
# Warmup Iteration  10: 375943.411 ops/s
# Warmup Iteration  11: 337525.332 ops/s
# Warmup Iteration  12: 366153.708 ops/s
# Warmup Iteration  13: 363650.112 ops/s
# Warmup Iteration  14: 358165.214 ops/s
# Warmup Iteration  15: 365562.609 ops/s
# Warmup Iteration  16: 373783.798 ops/s
# Warmup Iteration  17: 377156.090 ops/s
# Warmup Iteration  18: 395602.305 ops/s
# Warmup Iteration  19: 393886.368 ops/s
# Warmup Iteration  20: 374542.513 ops/s
# Warmup Iteration  21: 404943.178 ops/s
# Warmup Iteration  22: 380618.758 ops/s
# Warmup Iteration  23: 385917.774 ops/s
# Warmup Iteration  24: 384011.473 ops/s
# Warmup Iteration  25: 376703.866 ops/s
# Warmup Iteration  26: 386186.254 ops/s
# Warmup Iteration  27: 384862.093 ops/s
# Warmup Iteration  28: 388439.117 ops/s
# Warmup Iteration  29: 380490.780 ops/s
# Warmup Iteration  30: 385054.081 ops/s
Iteration   1: 376363.168 ops/s
Iteration   2: 393731.748 ops/s
Iteration   3: 388641.601 ops/s
Iteration   4: 377673.625 ops/s
Iteration   5: 391685.021 ops/s
Iteration   6: 392687.008 ops/s
Iteration   7: 382632.857 ops/s
Iteration   8: 393196.699 ops/s
Iteration   9: 368285.408 ops/s
Iteration  10: 396067.796 ops/s
Iteration  11: 393923.956 ops/s
Iteration  12: 366648.481 ops/s
Iteration  13: 394665.412 ops/s
Iteration  14: 368388.654 ops/s
Iteration  15: 382074.611 ops/s
Iteration  16: 395843.506 ops/s
Iteration  17: 376621.976 ops/s
Iteration  18: 396868.957 ops/s
Iteration  19: 390973.858 ops/s
Iteration  20: 369986.557 ops/s
Iteration  21: 394816.761 ops/s
Iteration  22: 366822.117 ops/s
Iteration  23: 380109.620 ops/s
Iteration  24: 372103.109 ops/s
Iteration  25: 392478.850 ops/s
Iteration  26: 379228.160 ops/s
Iteration  27: 378361.984 ops/s
Iteration  28: 391269.097 ops/s
Iteration  29: 376322.174 ops/s
Iteration  30: 381687.367 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleError":
  383672.005 ±(99.9%) 6799.100 ops/s [Average]
  (min, avg, max) = (366648.481, 383672.005, 396868.957), stdev = 10176.573
  CI (99.9%): [376872.905, 390471.104] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleError  thrpt   30  383672.005 ± 6799.100  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_nonNullConnection$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_nonNullConnection

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3641942.237 ops/s
# Warmup Iteration   2: 11074791.322 ops/s
# Warmup Iteration   3: 14417993.133 ops/s
# Warmup Iteration   4: 15614041.257 ops/s
# Warmup Iteration   5: 16157305.838 ops/s
# Warmup Iteration   6: 15854388.963 ops/s
# Warmup Iteration   7: 15265298.920 ops/s
# Warmup Iteration   8: 16057197.240 ops/s
# Warmup Iteration   9: 15651585.525 ops/s
# Warmup Iteration  10: 15080843.891 ops/s
# Warmup Iteration  11: 15638942.104 ops/s
# Warmup Iteration  12: 15593464.317 ops/s
# Warmup Iteration  13: 15751831.133 ops/s
# Warmup Iteration  14: 16159311.340 ops/s
# Warmup Iteration  15: 15263974.746 ops/s
# Warmup Iteration  16: 16206613.435 ops/s
# Warmup Iteration  17: 14918611.339 ops/s
# Warmup Iteration  18: 15736291.498 ops/s
# Warmup Iteration  19: 16060298.331 ops/s
# Warmup Iteration  20: 15748858.986 ops/s
# Warmup Iteration  21: 16142206.594 ops/s
# Warmup Iteration  22: 15727876.367 ops/s
# Warmup Iteration  23: 15536132.858 ops/s
# Warmup Iteration  24: 15577181.743 ops/s
# Warmup Iteration  25: 15451699.585 ops/s
# Warmup Iteration  26: 15448823.019 ops/s
# Warmup Iteration  27: 15980829.096 ops/s
# Warmup Iteration  28: 15936668.715 ops/s
# Warmup Iteration  29: 15739701.457 ops/s
# Warmup Iteration  30: 15703840.238 ops/s
Iteration   1: 15721974.515 ops/s
Iteration   2: 15536525.048 ops/s
Iteration   3: 15811138.355 ops/s
Iteration   4: 15330220.767 ops/s
Iteration   5: 16223788.848 ops/s
Iteration   6: 15370407.996 ops/s
Iteration   7: 15658197.371 ops/s
Iteration   8: 15978537.214 ops/s
Iteration   9: 15605986.433 ops/s
Iteration  10: 16410599.627 ops/s
Iteration  11: 15119420.066 ops/s
Iteration  12: 16194165.655 ops/s
Iteration  13: 16103061.717 ops/s
Iteration  14: 15448089.483 ops/s
Iteration  15: 15326847.822 ops/s
Iteration  16: 16434119.800 ops/s
Iteration  17: 15456121.749 ops/s
Iteration  18: 15479304.445 ops/s
Iteration  19: 16498565.305 ops/s
Iteration  20: 15405931.312 ops/s
Iteration  21: 16215517.970 ops/s
Iteration  22: 15521285.501 ops/s
Iteration  23: 15929508.933 ops/s
Iteration  24: 15259463.850 ops/s
Iteration  25: 15378247.110 ops/s
Iteration  26: 16102217.098 ops/s
Iteration  27: 15352912.474 ops/s
Iteration  28: 15172502.012 ops/s
Iteration  29: 16184363.459 ops/s
Iteration  30: 15299889.802 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_nonNullConnection":
  15717630.391 ±(99.9%) 279187.936 ops/s [Average]
  (min, avg, max) = (15119420.066, 15717630.391, 16498565.305), stdev = 417875.391
  CI (99.9%): [15438442.455, 15996818.327] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt         Score        Error  Units
ObservablePublishTest._Benchmark.benchmark_nonNullConnection  thrpt   30  15717630.391 ± 279187.936  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_toFutureWithException$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_toFutureWithException

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 167506.368 ops/s
# Warmup Iteration   2: 313632.958 ops/s
# Warmup Iteration   3: 341106.415 ops/s
# Warmup Iteration   4: 352354.291 ops/s
# Warmup Iteration   5: 350116.484 ops/s
# Warmup Iteration   6: 361891.763 ops/s
# Warmup Iteration   7: 350294.284 ops/s
# Warmup Iteration   8: 360219.637 ops/s
# Warmup Iteration   9: 351933.917 ops/s
# Warmup Iteration  10: 350002.206 ops/s
# Warmup Iteration  11: 356796.812 ops/s
# Warmup Iteration  12: 347452.428 ops/s
# Warmup Iteration  13: 364285.700 ops/s
# Warmup Iteration  14: 345183.186 ops/s
# Warmup Iteration  15: 352042.737 ops/s
# Warmup Iteration  16: 349846.078 ops/s
# Warmup Iteration  17: 373677.141 ops/s
# Warmup Iteration  18: 391192.532 ops/s
# Warmup Iteration  19: 388847.259 ops/s
# Warmup Iteration  20: 369977.537 ops/s
# Warmup Iteration  21: 385521.869 ops/s
# Warmup Iteration  22: 371944.876 ops/s
# Warmup Iteration  23: 383733.770 ops/s
# Warmup Iteration  24: 362042.340 ops/s
# Warmup Iteration  25: 366587.365 ops/s
# Warmup Iteration  26: 374812.522 ops/s
# Warmup Iteration  27: 382960.893 ops/s
# Warmup Iteration  28: 364456.853 ops/s
# Warmup Iteration  29: 370076.556 ops/s
# Warmup Iteration  30: 379986.263 ops/s
Iteration   1: 384873.089 ops/s
Iteration   2: 388616.734 ops/s
Iteration   3: 358219.223 ops/s
Iteration   4: 369393.297 ops/s
Iteration   5: 386760.148 ops/s
Iteration   6: 365648.100 ops/s
Iteration   7: 385754.479 ops/s
Iteration   8: 366986.624 ops/s
Iteration   9: 368020.932 ops/s
Iteration  10: 388316.789 ops/s
Iteration  11: 377742.102 ops/s
Iteration  12: 360638.587 ops/s
Iteration  13: 387504.973 ops/s
Iteration  14: 365540.995 ops/s
Iteration  15: 368732.117 ops/s
Iteration  16: 382053.745 ops/s
Iteration  17: 365395.957 ops/s
Iteration  18: 384317.520 ops/s
Iteration  19: 379160.762 ops/s
Iteration  20: 389272.308 ops/s
Iteration  21: 385474.757 ops/s
Iteration  22: 368505.678 ops/s
Iteration  23: 385873.636 ops/s
Iteration  24: 387219.162 ops/s
Iteration  25: 367977.825 ops/s
Iteration  26: 377523.103 ops/s
Iteration  27: 350042.620 ops/s
Iteration  28: 319299.334 ops/s
Iteration  29: 366335.991 ops/s
Iteration  30: 380118.843 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToFutureTest._Benchmark.benchmark_toFutureWithException":
  373710.648 ±(99.9%) 9947.132 ops/s [Average]
  (min, avg, max) = (319299.334, 373710.648, 389272.308), stdev = 14888.400
  CI (99.9%): [363763.515, 383657.780] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
BlockingObservableToFutureTest._Benchmark.benchmark_toFutureWithException  thrpt   30  373710.648 ± 9947.132  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 961638.106 ops/s
# Warmup Iteration   2: 2426663.800 ops/s
# Warmup Iteration   3: 2604402.484 ops/s
# Warmup Iteration   4: 2942115.228 ops/s
# Warmup Iteration   5: 3176551.603 ops/s
# Warmup Iteration   6: 3034842.296 ops/s
# Warmup Iteration   7: 3046355.123 ops/s
# Warmup Iteration   8: 3052598.670 ops/s
# Warmup Iteration   9: 3144432.400 ops/s
# Warmup Iteration  10: 2974994.181 ops/s
# Warmup Iteration  11: 3124066.312 ops/s
# Warmup Iteration  12: 2997070.839 ops/s
# Warmup Iteration  13: 3107747.472 ops/s
# Warmup Iteration  14: 2927094.459 ops/s
# Warmup Iteration  15: 3047650.226 ops/s
# Warmup Iteration  16: 3155384.245 ops/s
# Warmup Iteration  17: 2962826.382 ops/s
# Warmup Iteration  18: 3165963.523 ops/s
# Warmup Iteration  19: 2980050.306 ops/s
# Warmup Iteration  20: 3120705.516 ops/s
# Warmup Iteration  21: 3086855.303 ops/s
# Warmup Iteration  22: 3038602.785 ops/s
# Warmup Iteration  23: 3149249.022 ops/s
# Warmup Iteration  24: 3034721.953 ops/s
# Warmup Iteration  25: 3010493.691 ops/s
# Warmup Iteration  26: 3124807.583 ops/s
# Warmup Iteration  27: 3002775.892 ops/s
# Warmup Iteration  28: 3130805.054 ops/s
# Warmup Iteration  29: 3207131.492 ops/s
# Warmup Iteration  30: 3033142.405 ops/s
Iteration   1: 2984838.841 ops/s
Iteration   2: 3067867.463 ops/s
Iteration   3: 3073726.381 ops/s
Iteration   4: 3065215.152 ops/s
Iteration   5: 3078558.141 ops/s
Iteration   6: 3026567.908 ops/s
Iteration   7: 3181017.680 ops/s
Iteration   8: 3147256.474 ops/s
Iteration   9: 3032187.916 ops/s
Iteration  10: 3189752.843 ops/s
Iteration  11: 2982837.104 ops/s
Iteration  12: 3092417.759 ops/s
Iteration  13: 3224163.797 ops/s
Iteration  14: 3144689.911 ops/s
Iteration  15: 3023943.596 ops/s
Iteration  16: 3114819.488 ops/s
Iteration  17: 3090814.178 ops/s
Iteration  18: 3084830.804 ops/s
Iteration  19: 3168088.234 ops/s
Iteration  20: 2968888.556 ops/s
Iteration  21: 3068403.059 ops/s
Iteration  22: 3027753.810 ops/s
Iteration  23: 2986303.586 ops/s
Iteration  24: 3154313.511 ops/s
Iteration  25: 2955419.268 ops/s
Iteration  26: 3194258.520 ops/s
Iteration  27: 3057706.181 ops/s
Iteration  28: 3126941.681 ops/s
Iteration  29: 2976985.896 ops/s
Iteration  30: 3073378.157 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherDispose":
  3078798.197 ±(99.9%) 49563.278 ops/s [Average]
  (min, avg, max) = (2955419.268, 3078798.197, 3224163.797), stdev = 74183.986
  CI (99.9%): [3029234.919, 3128361.474] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherDispose  thrpt   30  3078798.197 ± 49563.278  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchShouldTriggerUnsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchShouldTriggerUnsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2805173.997 ops/s
# Warmup Iteration   2: 7196692.122 ops/s
# Warmup Iteration   3: 7470365.780 ops/s
# Warmup Iteration   4: 9057258.771 ops/s
# Warmup Iteration   5: 9230051.646 ops/s
# Warmup Iteration   6: 9003073.820 ops/s
# Warmup Iteration   7: 9225063.950 ops/s
# Warmup Iteration   8: 8942531.731 ops/s
# Warmup Iteration   9: 8923894.934 ops/s
# Warmup Iteration  10: 9303137.668 ops/s
# Warmup Iteration  11: 8703951.899 ops/s
# Warmup Iteration  12: 9026981.914 ops/s
# Warmup Iteration  13: 9522313.392 ops/s
# Warmup Iteration  14: 8414275.178 ops/s
# Warmup Iteration  15: 9341570.101 ops/s
# Warmup Iteration  16: 9188866.450 ops/s
# Warmup Iteration  17: 8951532.297 ops/s
# Warmup Iteration  18: 9057702.932 ops/s
# Warmup Iteration  19: 8784341.664 ops/s
# Warmup Iteration  20: 8962666.462 ops/s
# Warmup Iteration  21: 9099292.324 ops/s
# Warmup Iteration  22: 9320602.287 ops/s
# Warmup Iteration  23: 8957141.374 ops/s
# Warmup Iteration  24: 9115457.573 ops/s
# Warmup Iteration  25: 8750318.682 ops/s
# Warmup Iteration  26: 9141866.989 ops/s
# Warmup Iteration  27: 9177550.391 ops/s
# Warmup Iteration  28: 8779519.582 ops/s
# Warmup Iteration  29: 9343681.886 ops/s
# Warmup Iteration  30: 8829949.869 ops/s
Iteration   1: 9307095.519 ops/s
Iteration   2: 8887498.542 ops/s
Iteration   3: 9037579.118 ops/s
Iteration   4: 9134835.068 ops/s
Iteration   5: 8900360.355 ops/s
Iteration   6: 9276151.229 ops/s
Iteration   7: 8658238.262 ops/s
Iteration   8: 9205327.922 ops/s
Iteration   9: 8967598.815 ops/s
Iteration  10: 9085672.172 ops/s
Iteration  11: 9123239.095 ops/s
Iteration  12: 8652179.063 ops/s
Iteration  13: 9176243.702 ops/s
Iteration  14: 9288778.329 ops/s
Iteration  15: 8907069.997 ops/s
Iteration  16: 8835348.688 ops/s
Iteration  17: 9080757.097 ops/s
Iteration  18: 8741757.340 ops/s
Iteration  19: 9271312.277 ops/s
Iteration  20: 8933786.403 ops/s
Iteration  21: 8980749.150 ops/s
Iteration  22: 8144900.033 ops/s
Iteration  23: 8906704.174 ops/s
Iteration  24: 8890463.866 ops/s
Iteration  25: 8931436.883 ops/s
Iteration  26: 9301827.225 ops/s
Iteration  27: 8524256.580 ops/s
Iteration  28: 9208181.449 ops/s
Iteration  29: 8719495.370 ops/s
Iteration  30: 9071403.388 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchShouldTriggerUnsubscribe":
  8971674.904 ±(99.9%) 175240.900 ops/s [Average]
  (min, avg, max) = (8144900.033, 8971674.904, 9307095.519), stdev = 262292.349
  CI (99.9%): [8796434.004, 9146915.804] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score        Error  Units
ObservableSwitchIfEmptyTest._Benchmark.benchmark_switchShouldTriggerUnsubscribe  thrpt   30  8971674.904 ± 175240.900  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.InnerQueuedObserverTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.InnerQueuedObserverTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12408866.139 ops/s
# Warmup Iteration   2: 18671500.459 ops/s
# Warmup Iteration   3: 23693558.026 ops/s
# Warmup Iteration   4: 23359249.956 ops/s
# Warmup Iteration   5: 24678134.174 ops/s
# Warmup Iteration   6: 23327173.788 ops/s
# Warmup Iteration   7: 22843322.469 ops/s
# Warmup Iteration   8: 24012244.110 ops/s
# Warmup Iteration   9: 23038669.003 ops/s
# Warmup Iteration  10: 23481851.909 ops/s
# Warmup Iteration  11: 23961507.491 ops/s
# Warmup Iteration  12: 23683649.830 ops/s
# Warmup Iteration  13: 23990213.753 ops/s
# Warmup Iteration  14: 23877880.612 ops/s
# Warmup Iteration  15: 23876062.748 ops/s
# Warmup Iteration  16: 24951810.285 ops/s
# Warmup Iteration  17: 22925087.193 ops/s
# Warmup Iteration  18: 24183049.189 ops/s
# Warmup Iteration  19: 22549173.371 ops/s
# Warmup Iteration  20: 24653734.004 ops/s
# Warmup Iteration  21: 23898680.771 ops/s
# Warmup Iteration  22: 23315480.933 ops/s
# Warmup Iteration  23: 25185166.227 ops/s
# Warmup Iteration  24: 24154354.761 ops/s
# Warmup Iteration  25: 22916025.939 ops/s
# Warmup Iteration  26: 24206129.757 ops/s
# Warmup Iteration  27: 23271161.663 ops/s
# Warmup Iteration  28: 22989713.002 ops/s
# Warmup Iteration  29: 23982170.434 ops/s
# Warmup Iteration  30: 23140093.338 ops/s
Iteration   1: 24360965.819 ops/s
Iteration   2: 22913147.609 ops/s
Iteration   3: 24478356.804 ops/s
Iteration   4: 23656349.242 ops/s
Iteration   5: 23319454.347 ops/s
Iteration   6: 24664170.840 ops/s
Iteration   7: 23395059.269 ops/s
Iteration   8: 24599892.995 ops/s
Iteration   9: 23358373.797 ops/s
Iteration  10: 23650810.241 ops/s
Iteration  11: 24235770.276 ops/s
Iteration  12: 23536081.189 ops/s
Iteration  13: 22801016.079 ops/s
Iteration  14: 23857939.117 ops/s
Iteration  15: 24686927.707 ops/s
Iteration  16: 24419995.714 ops/s
Iteration  17: 22892769.213 ops/s
Iteration  18: 24373110.630 ops/s
Iteration  19: 23036613.599 ops/s
Iteration  20: 23995662.069 ops/s
Iteration  21: 23185243.467 ops/s
Iteration  22: 24019844.788 ops/s
Iteration  23: 24518418.984 ops/s
Iteration  24: 23933353.578 ops/s
Iteration  25: 23386146.932 ops/s
Iteration  26: 24422880.018 ops/s
Iteration  27: 23027408.257 ops/s
Iteration  28: 25012566.120 ops/s
Iteration  29: 24382766.817 ops/s
Iteration  30: 22970839.694 ops/s


Result "io.reactivex.rxjava3.internal.observers.InnerQueuedObserverTest._Benchmark.benchmark_dispose":
  23836397.840 ±(99.9%) 436161.903 ops/s [Average]
  (min, avg, max) = (22801016.079, 23836397.840, 25012566.120), stdev = 652826.653
  CI (99.9%): [23400235.937, 24272559.744] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt         Score        Error  Units
InnerQueuedObserverTest._Benchmark.benchmark_dispose  thrpt   30  23836397.840 ± 436161.903  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.SequentialDisposableTest._Benchmark.benchmark_unsubscribingWithoutUnderlyingDoesNothing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.SequentialDisposableTest._Benchmark.benchmark_unsubscribingWithoutUnderlyingDoesNothing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16851924.403 ops/s
# Warmup Iteration   2: 27094336.696 ops/s
# Warmup Iteration   3: 33782543.423 ops/s
# Warmup Iteration   4: 32000333.038 ops/s
# Warmup Iteration   5: 33642443.362 ops/s
# Warmup Iteration   6: 31982070.306 ops/s
# Warmup Iteration   7: 33682418.060 ops/s
# Warmup Iteration   8: 32035236.719 ops/s
# Warmup Iteration   9: 32400979.572 ops/s
# Warmup Iteration  10: 33079254.868 ops/s
# Warmup Iteration  11: 33235556.154 ops/s
# Warmup Iteration  12: 32057083.352 ops/s
# Warmup Iteration  13: 34406329.048 ops/s
# Warmup Iteration  14: 32590017.069 ops/s
# Warmup Iteration  15: 32145207.756 ops/s
# Warmup Iteration  16: 34070984.135 ops/s
# Warmup Iteration  17: 32466652.490 ops/s
# Warmup Iteration  18: 32529463.899 ops/s
# Warmup Iteration  19: 33362804.867 ops/s
# Warmup Iteration  20: 32166388.693 ops/s
# Warmup Iteration  21: 33459307.113 ops/s
# Warmup Iteration  22: 34040673.612 ops/s
# Warmup Iteration  23: 32225646.067 ops/s
# Warmup Iteration  24: 32233913.341 ops/s
# Warmup Iteration  25: 33957191.964 ops/s
# Warmup Iteration  26: 32820446.809 ops/s
# Warmup Iteration  27: 33186664.085 ops/s
# Warmup Iteration  28: 32288597.939 ops/s
# Warmup Iteration  29: 32952311.374 ops/s
# Warmup Iteration  30: 34056935.008 ops/s
Iteration   1: 32953188.292 ops/s
Iteration   2: 33323384.854 ops/s
Iteration   3: 34059081.714 ops/s
Iteration   4: 32290291.257 ops/s
Iteration   5: 33108786.734 ops/s
Iteration   6: 33545890.622 ops/s
Iteration   7: 33803469.709 ops/s
Iteration   8: 34326764.754 ops/s
Iteration   9: 32974064.149 ops/s
Iteration  10: 34018876.372 ops/s
Iteration  11: 31939826.230 ops/s
Iteration  12: 33532517.372 ops/s
Iteration  13: 33160646.547 ops/s
Iteration  14: 33234758.377 ops/s
Iteration  15: 33666740.700 ops/s
Iteration  16: 32724991.010 ops/s
Iteration  17: 25377178.140 ops/s
Iteration  18: 34169985.360 ops/s
Iteration  19: 33964676.128 ops/s
Iteration  20: 32638461.156 ops/s
Iteration  21: 34071771.265 ops/s
Iteration  22: 32329296.878 ops/s
Iteration  23: 33405370.281 ops/s
Iteration  24: 32239096.719 ops/s
Iteration  25: 33968883.979 ops/s
Iteration  26: 32912776.094 ops/s
Iteration  27: 33390392.648 ops/s
Iteration  28: 33789502.590 ops/s
Iteration  29: 32594812.229 ops/s
Iteration  30: 32018226.796 ops/s


Result "io.reactivex.rxjava3.disposables.SequentialDisposableTest._Benchmark.benchmark_unsubscribingWithoutUnderlyingDoesNothing":
  32984456.965 ±(99.9%) 1061593.793 ops/s [Average]
  (min, avg, max) = (25377178.140, 32984456.965, 34326764.754), stdev = 1588943.733
  CI (99.9%): [31922863.172, 34046050.758] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt         Score         Error  Units
SequentialDisposableTest._Benchmark.benchmark_unsubscribingWithoutUnderlyingDoesNothing  thrpt   30  32984456.965 ± 1061593.793  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1261879.311 ops/s
# Warmup Iteration   2: 4517858.355 ops/s
# Warmup Iteration   3: 6683017.757 ops/s
# Warmup Iteration   4: 6692996.296 ops/s
# Warmup Iteration   5: 6621719.839 ops/s
# Warmup Iteration   6: 6679069.720 ops/s
# Warmup Iteration   7: 6446543.564 ops/s
# Warmup Iteration   8: 6675161.507 ops/s
# Warmup Iteration   9: 6730576.761 ops/s
# Warmup Iteration  10: 6315083.640 ops/s
# Warmup Iteration  11: 6664747.667 ops/s
# Warmup Iteration  12: 6383442.264 ops/s
# Warmup Iteration  13: 6780550.927 ops/s
# Warmup Iteration  14: 6854500.542 ops/s
# Warmup Iteration  15: 6897728.467 ops/s
# Warmup Iteration  16: 6436669.803 ops/s
# Warmup Iteration  17: 6665455.460 ops/s
# Warmup Iteration  18: 6406523.135 ops/s
# Warmup Iteration  19: 6673644.935 ops/s
# Warmup Iteration  20: 6510799.349 ops/s
# Warmup Iteration  21: 6585991.534 ops/s
# Warmup Iteration  22: 6904209.949 ops/s
# Warmup Iteration  23: 6614344.434 ops/s
# Warmup Iteration  24: 6357185.568 ops/s
# Warmup Iteration  25: 6588786.554 ops/s
# Warmup Iteration  26: 6764533.325 ops/s
# Warmup Iteration  27: 6527529.519 ops/s
# Warmup Iteration  28: 6504950.455 ops/s
# Warmup Iteration  29: 6757442.132 ops/s
# Warmup Iteration  30: 6753532.877 ops/s
Iteration   1: 6494000.247 ops/s
Iteration   2: 6730947.754 ops/s
Iteration   3: 6456295.195 ops/s
Iteration   4: 6526836.167 ops/s
Iteration   5: 6463019.340 ops/s
Iteration   6: 6635917.233 ops/s
Iteration   7: 6310153.932 ops/s
Iteration   8: 6609519.536 ops/s
Iteration   9: 6655059.365 ops/s
Iteration  10: 6363741.501 ops/s
Iteration  11: 6778279.266 ops/s
Iteration  12: 6328919.556 ops/s
Iteration  13: 6760648.268 ops/s
Iteration  14: 6628192.668 ops/s
Iteration  15: 6454711.186 ops/s
Iteration  16: 6548650.344 ops/s
Iteration  17: 6490563.827 ops/s
Iteration  18: 6558435.480 ops/s
Iteration  19: 6830325.508 ops/s
Iteration  20: 6587570.295 ops/s
Iteration  21: 6645798.256 ops/s
Iteration  22: 6473896.881 ops/s
Iteration  23: 6656545.805 ops/s
Iteration  24: 6539811.109 ops/s
Iteration  25: 6411245.793 ops/s
Iteration  26: 6704892.764 ops/s
Iteration  27: 6520255.759 ops/s
Iteration  28: 6437308.921 ops/s
Iteration  29: 6731306.020 ops/s
Iteration  30: 6553456.544 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_disposed":
  6562876.817 ±(99.9%) 89658.906 ops/s [Average]
  (min, avg, max) = (6310153.932, 6562876.817, 6830325.508), stdev = 134197.240
  CI (99.9%): [6473217.911, 6652535.723] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ObservableAmbTest._Benchmark.benchmark_disposed  thrpt   30  6562876.817 ± 89658.906  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByWithElementSelector2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByWithElementSelector2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 34617.693 ops/s
# Warmup Iteration   2: 92743.450 ops/s
# Warmup Iteration   3: 329839.925 ops/s
# Warmup Iteration   4: 365423.580 ops/s
# Warmup Iteration   5: 455095.690 ops/s
# Warmup Iteration   6: 420416.905 ops/s
# Warmup Iteration   7: 437308.556 ops/s
# Warmup Iteration   8: 426341.015 ops/s
# Warmup Iteration   9: 426215.638 ops/s
# Warmup Iteration  10: 447837.283 ops/s
# Warmup Iteration  11: 430370.078 ops/s
# Warmup Iteration  12: 413678.921 ops/s
# Warmup Iteration  13: 443704.402 ops/s
# Warmup Iteration  14: 425457.826 ops/s
# Warmup Iteration  15: 427394.956 ops/s
# Warmup Iteration  16: 443843.646 ops/s
# Warmup Iteration  17: 429636.892 ops/s
# Warmup Iteration  18: 448933.330 ops/s
# Warmup Iteration  19: 446319.895 ops/s
# Warmup Iteration  20: 428487.775 ops/s
# Warmup Iteration  21: 440087.840 ops/s
# Warmup Iteration  22: 436326.049 ops/s
# Warmup Iteration  23: 439007.038 ops/s
# Warmup Iteration  24: 435641.557 ops/s
# Warmup Iteration  25: 440812.447 ops/s
# Warmup Iteration  26: 441971.329 ops/s
# Warmup Iteration  27: 435943.240 ops/s
# Warmup Iteration  28: 427727.280 ops/s
# Warmup Iteration  29: 443944.875 ops/s
# Warmup Iteration  30: 433691.080 ops/s
Iteration   1: 442502.330 ops/s
Iteration   2: 428179.028 ops/s
Iteration   3: 426135.348 ops/s
Iteration   4: 460195.254 ops/s
Iteration   5: 454716.783 ops/s
Iteration   6: 426114.072 ops/s
Iteration   7: 429757.140 ops/s
Iteration   8: 444722.011 ops/s
Iteration   9: 444065.422 ops/s
Iteration  10: 427670.634 ops/s
Iteration  11: 437747.322 ops/s
Iteration  12: 360448.657 ops/s
Iteration  13: 440347.297 ops/s
Iteration  14: 439638.536 ops/s
Iteration  15: 450373.569 ops/s
Iteration  16: 450701.986 ops/s
Iteration  17: 437937.842 ops/s
Iteration  18: 438963.408 ops/s
Iteration  19: 425810.478 ops/s
Iteration  20: 440391.004 ops/s
Iteration  21: 448426.660 ops/s
Iteration  22: 432977.890 ops/s
Iteration  23: 453651.452 ops/s
Iteration  24: 427883.229 ops/s
Iteration  25: 437175.454 ops/s
Iteration  26: 437901.809 ops/s
Iteration  27: 435314.239 ops/s
Iteration  28: 447033.995 ops/s
Iteration  29: 434032.121 ops/s
Iteration  30: 423295.155 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_groupByWithElementSelector2":
  436137.004 ±(99.9%) 11517.548 ops/s [Average]
  (min, avg, max) = (360448.657, 436137.004, 460195.254), stdev = 17238.925
  CI (99.9%): [424619.456, 447654.552] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableGroupByTest._Benchmark.benchmark_groupByWithElementSelector2  thrpt   30  436137.004 ± 11517.548  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1880386.453 ops/s
# Warmup Iteration   2: 5304477.857 ops/s
# Warmup Iteration   3: 7863447.858 ops/s
# Warmup Iteration   4: 7504766.942 ops/s
# Warmup Iteration   5: 7569069.579 ops/s
# Warmup Iteration   6: 7453170.584 ops/s
# Warmup Iteration   7: 8036189.521 ops/s
# Warmup Iteration   8: 7849026.686 ops/s
# Warmup Iteration   9: 7532317.391 ops/s
# Warmup Iteration  10: 7629636.815 ops/s
# Warmup Iteration  11: 7525580.865 ops/s
# Warmup Iteration  12: 7797785.179 ops/s
# Warmup Iteration  13: 7870508.901 ops/s
# Warmup Iteration  14: 7416022.710 ops/s
# Warmup Iteration  15: 7696962.841 ops/s
# Warmup Iteration  16: 7514379.279 ops/s
# Warmup Iteration  17: 7431739.692 ops/s
# Warmup Iteration  18: 7794757.247 ops/s
# Warmup Iteration  19: 7420538.657 ops/s
# Warmup Iteration  20: 7672329.434 ops/s
# Warmup Iteration  21: 7526302.102 ops/s
# Warmup Iteration  22: 7706337.706 ops/s
# Warmup Iteration  23: 7292048.445 ops/s
# Warmup Iteration  24: 7681392.584 ops/s
# Warmup Iteration  25: 7875617.042 ops/s
# Warmup Iteration  26: 7269107.200 ops/s
# Warmup Iteration  27: 7793327.704 ops/s
# Warmup Iteration  28: 7566107.290 ops/s
# Warmup Iteration  29: 7541702.989 ops/s
# Warmup Iteration  30: 7750628.695 ops/s
Iteration   1: 7590772.766 ops/s
Iteration   2: 7505174.761 ops/s
Iteration   3: 7761712.432 ops/s
Iteration   4: 7475884.888 ops/s
Iteration   5: 7618452.366 ops/s
Iteration   6: 7441607.357 ops/s
Iteration   7: 7707002.266 ops/s
Iteration   8: 7476088.043 ops/s
Iteration   9: 7497519.814 ops/s
Iteration  10: 7637370.639 ops/s
Iteration  11: 7538814.823 ops/s
Iteration  12: 7871311.323 ops/s
Iteration  13: 7602561.156 ops/s
Iteration  14: 7372105.910 ops/s
Iteration  15: 7511862.604 ops/s
Iteration  16: 7829245.275 ops/s
Iteration  17: 7747830.250 ops/s
Iteration  18: 7878795.050 ops/s
Iteration  19: 7443488.386 ops/s
Iteration  20: 7699115.046 ops/s
Iteration  21: 7636448.250 ops/s
Iteration  22: 7554759.578 ops/s
Iteration  23: 7847213.428 ops/s
Iteration  24: 7493340.241 ops/s
Iteration  25: 7372648.579 ops/s
Iteration  26: 7895013.073 ops/s
Iteration  27: 7312864.658 ops/s
Iteration  28: 7918474.151 ops/s
Iteration  29: 7924528.913 ops/s
Iteration  30: 7341319.369 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_empty":
  7616777.513 ±(99.9%) 124098.385 ops/s [Average]
  (min, avg, max) = (7312864.658, 7616777.513, 7924528.913), stdev = 185744.634
  CI (99.9%): [7492679.129, 7740875.898] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
ObservableFromStreamTest._Benchmark.benchmark_empty  thrpt   30  7616777.513 ± 124098.385  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_serializedDisposedBeforeOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_serializedDisposedBeforeOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1178573.656 ops/s
# Warmup Iteration   2: 3240397.647 ops/s
# Warmup Iteration   3: 4796160.568 ops/s
# Warmup Iteration   4: 4958038.613 ops/s
# Warmup Iteration   5: 5081145.752 ops/s
# Warmup Iteration   6: 4724774.034 ops/s
# Warmup Iteration   7: 4963941.776 ops/s
# Warmup Iteration   8: 4759983.787 ops/s
# Warmup Iteration   9: 4845568.575 ops/s
# Warmup Iteration  10: 5003888.391 ops/s
# Warmup Iteration  11: 4911603.780 ops/s
# Warmup Iteration  12: 4734742.478 ops/s
# Warmup Iteration  13: 5097329.737 ops/s
# Warmup Iteration  14: 5070350.504 ops/s
# Warmup Iteration  15: 4816351.168 ops/s
# Warmup Iteration  16: 4878298.146 ops/s
# Warmup Iteration  17: 4734796.857 ops/s
# Warmup Iteration  18: 4815612.652 ops/s
# Warmup Iteration  19: 5112904.297 ops/s
# Warmup Iteration  20: 5094676.777 ops/s
# Warmup Iteration  21: 4816320.440 ops/s
# Warmup Iteration  22: 4996152.738 ops/s
# Warmup Iteration  23: 5013276.174 ops/s
# Warmup Iteration  24: 4744064.558 ops/s
# Warmup Iteration  25: 4932453.468 ops/s
# Warmup Iteration  26: 5152582.633 ops/s
# Warmup Iteration  27: 4819128.994 ops/s
# Warmup Iteration  28: 4891354.315 ops/s
# Warmup Iteration  29: 4930496.777 ops/s
# Warmup Iteration  30: 4930725.251 ops/s
Iteration   1: 4891931.198 ops/s
Iteration   2: 4865920.838 ops/s
Iteration   3: 5062724.860 ops/s
Iteration   4: 5039088.261 ops/s
Iteration   5: 4645669.253 ops/s
Iteration   6: 3969216.723 ops/s
Iteration   7: 4830930.340 ops/s
Iteration   8: 4991344.009 ops/s
Iteration   9: 4997547.665 ops/s
Iteration  10: 4782124.509 ops/s
Iteration  11: 5038463.581 ops/s
Iteration  12: 4808159.000 ops/s
Iteration  13: 4883037.314 ops/s
Iteration  14: 4919461.033 ops/s
Iteration  15: 4763788.143 ops/s
Iteration  16: 5064581.307 ops/s
Iteration  17: 4868730.776 ops/s
Iteration  18: 4911841.113 ops/s
Iteration  19: 4961028.150 ops/s
Iteration  20: 5111797.990 ops/s
Iteration  21: 4755808.270 ops/s
Iteration  22: 5040296.851 ops/s
Iteration  23: 4919451.546 ops/s
Iteration  24: 5041768.378 ops/s
Iteration  25: 4978245.056 ops/s
Iteration  26: 4685989.497 ops/s
Iteration  27: 5002736.415 ops/s
Iteration  28: 4841479.735 ops/s
Iteration  29: 4880861.986 ops/s
Iteration  30: 5103340.622 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_serializedDisposedBeforeOnNext":
  4888578.814 ±(99.9%) 141613.311 ops/s [Average]
  (min, avg, max) = (3969216.723, 4888578.814, 5111797.990), stdev = 211960.154
  CI (99.9%): [4746965.503, 5030192.125] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score        Error  Units
ObservableCreateTest._Benchmark.benchmark_serializedDisposedBeforeOnNext  thrpt   30  4888578.814 ± 141613.311  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1753892.642 ops/s
# Warmup Iteration   2: 5043244.741 ops/s
# Warmup Iteration   3: 6768437.503 ops/s
# Warmup Iteration   4: 6872161.332 ops/s
# Warmup Iteration   5: 7241398.533 ops/s
# Warmup Iteration   6: 6893027.839 ops/s
# Warmup Iteration   7: 7412862.047 ops/s
# Warmup Iteration   8: 7002580.522 ops/s
# Warmup Iteration   9: 6976400.096 ops/s
# Warmup Iteration  10: 7202304.713 ops/s
# Warmup Iteration  11: 7011243.506 ops/s
# Warmup Iteration  12: 6745618.443 ops/s
# Warmup Iteration  13: 7348798.124 ops/s
# Warmup Iteration  14: 6830151.050 ops/s
# Warmup Iteration  15: 7244394.396 ops/s
# Warmup Iteration  16: 7190191.862 ops/s
# Warmup Iteration  17: 7020804.131 ops/s
# Warmup Iteration  18: 7256333.530 ops/s
# Warmup Iteration  19: 7248452.626 ops/s
# Warmup Iteration  20: 6925009.117 ops/s
# Warmup Iteration  21: 7325806.092 ops/s
# Warmup Iteration  22: 6995011.481 ops/s
# Warmup Iteration  23: 6955023.444 ops/s
# Warmup Iteration  24: 7189271.818 ops/s
# Warmup Iteration  25: 7053312.026 ops/s
# Warmup Iteration  26: 6993247.579 ops/s
# Warmup Iteration  27: 6993856.971 ops/s
# Warmup Iteration  28: 7045928.007 ops/s
# Warmup Iteration  29: 7023453.129 ops/s
# Warmup Iteration  30: 7315608.476 ops/s
Iteration   1: 6941467.732 ops/s
Iteration   2: 7027633.999 ops/s
Iteration   3: 7173683.800 ops/s
Iteration   4: 7054602.277 ops/s
Iteration   5: 7043808.797 ops/s
Iteration   6: 7087695.740 ops/s
Iteration   7: 7283790.076 ops/s
Iteration   8: 7095331.969 ops/s
Iteration   9: 7005121.035 ops/s
Iteration  10: 7063809.070 ops/s
Iteration  11: 7071421.529 ops/s
Iteration  12: 7100734.332 ops/s
Iteration  13: 7020169.899 ops/s
Iteration  14: 6954195.792 ops/s
Iteration  15: 7331303.212 ops/s
Iteration  16: 6819430.991 ops/s
Iteration  17: 7341314.259 ops/s
Iteration  18: 6906326.951 ops/s
Iteration  19: 7150109.361 ops/s
Iteration  20: 7099906.643 ops/s
Iteration  21: 6890683.675 ops/s
Iteration  22: 7247424.089 ops/s
Iteration  23: 6937623.329 ops/s
Iteration  24: 7029979.472 ops/s
Iteration  25: 7112374.806 ops/s
Iteration  26: 7087009.888 ops/s
Iteration  27: 7009822.312 ops/s
Iteration  28: 7358744.655 ops/s
Iteration  29: 6860024.292 ops/s
Iteration  30: 7007873.530 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnEmpty":
  7070447.250 ±(99.9%) 92534.556 ops/s [Average]
  (min, avg, max) = (6819430.991, 7070447.250, 7358744.655), stdev = 138501.378
  CI (99.9%): [6977912.694, 7162981.806] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnEmpty  thrpt   30  7070447.250 ± 92534.556  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ExecutorSchedulerDelayedRunnableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ExecutorSchedulerDelayedRunnableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7334440.404 ops/s
# Warmup Iteration   2: 8052550.630 ops/s
# Warmup Iteration   3: 11914611.090 ops/s
# Warmup Iteration   4: 11374322.427 ops/s
# Warmup Iteration   5: 11299633.917 ops/s
# Warmup Iteration   6: 11458559.648 ops/s
# Warmup Iteration   7: 11369910.055 ops/s
# Warmup Iteration   8: 11410610.353 ops/s
# Warmup Iteration   9: 11932206.391 ops/s
# Warmup Iteration  10: 10969053.660 ops/s
# Warmup Iteration  11: 11344600.054 ops/s
# Warmup Iteration  12: 11377868.801 ops/s
# Warmup Iteration  13: 11392364.492 ops/s
# Warmup Iteration  14: 11499994.278 ops/s
# Warmup Iteration  15: 11097386.209 ops/s
# Warmup Iteration  16: 11543071.377 ops/s
# Warmup Iteration  17: 11127853.924 ops/s
# Warmup Iteration  18: 11570144.188 ops/s
# Warmup Iteration  19: 11634481.138 ops/s
# Warmup Iteration  20: 11207721.366 ops/s
# Warmup Iteration  21: 11654190.330 ops/s
# Warmup Iteration  22: 11159258.874 ops/s
# Warmup Iteration  23: 11876438.431 ops/s
# Warmup Iteration  24: 11171132.404 ops/s
# Warmup Iteration  25: 11513759.684 ops/s
# Warmup Iteration  26: 11747090.214 ops/s
# Warmup Iteration  27: 11283875.426 ops/s
# Warmup Iteration  28: 11936926.537 ops/s
# Warmup Iteration  29: 11421108.989 ops/s
# Warmup Iteration  30: 9824269.433 ops/s
Iteration   1: 11459875.263 ops/s
Iteration   2: 11293441.653 ops/s
Iteration   3: 11443091.223 ops/s
Iteration   4: 11752373.142 ops/s
Iteration   5: 11222272.029 ops/s
Iteration   6: 11777949.465 ops/s
Iteration   7: 11423165.046 ops/s
Iteration   8: 11415553.943 ops/s
Iteration   9: 11479462.839 ops/s
Iteration  10: 11700801.401 ops/s
Iteration  11: 11400034.460 ops/s
Iteration  12: 11267435.877 ops/s
Iteration  13: 11652027.723 ops/s
Iteration  14: 11200547.252 ops/s
Iteration  15: 11875537.034 ops/s
Iteration  16: 11467115.177 ops/s
Iteration  17: 11165227.033 ops/s
Iteration  18: 11903143.447 ops/s
Iteration  19: 11590201.777 ops/s
Iteration  20: 11259646.359 ops/s
Iteration  21: 11794556.597 ops/s
Iteration  22: 11037691.519 ops/s
Iteration  23: 11731314.003 ops/s
Iteration  24: 11116820.758 ops/s
Iteration  25: 11481615.194 ops/s
Iteration  26: 11630760.035 ops/s
Iteration  27: 11033087.727 ops/s
Iteration  28: 11644499.582 ops/s
Iteration  29: 11188114.134 ops/s
Iteration  30: 11593847.450 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ExecutorSchedulerDelayedRunnableTest._Benchmark.benchmark_dispose":
  11466706.971 ±(99.9%) 166858.871 ops/s [Average]
  (min, avg, max) = (11033087.727, 11466706.971, 11903143.447), stdev = 249746.522
  CI (99.9%): [11299848.100, 11633565.842] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt         Score        Error  Units
ExecutorSchedulerDelayedRunnableTest._Benchmark.benchmark_dispose  thrpt   30  11466706.971 ± 166858.871  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerOnCompleteDisposerCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerOnCompleteDisposerCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 185683.816 ops/s
# Warmup Iteration   2: 478346.723 ops/s
# Warmup Iteration   3: 552160.708 ops/s
# Warmup Iteration   4: 490082.651 ops/s
# Warmup Iteration   5: 570493.412 ops/s
# Warmup Iteration   6: 480179.734 ops/s
# Warmup Iteration   7: 589348.577 ops/s
# Warmup Iteration   8: 545270.131 ops/s
# Warmup Iteration   9: 577713.461 ops/s
# Warmup Iteration  10: 588967.542 ops/s
# Warmup Iteration  11: 553100.007 ops/s
# Warmup Iteration  12: 583261.840 ops/s
# Warmup Iteration  13: 570163.899 ops/s
# Warmup Iteration  14: 557905.030 ops/s
# Warmup Iteration  15: 592134.652 ops/s
# Warmup Iteration  16: 585364.133 ops/s
# Warmup Iteration  17: 587759.820 ops/s
# Warmup Iteration  18: 606959.645 ops/s
# Warmup Iteration  19: 598494.335 ops/s
# Warmup Iteration  20: 614665.340 ops/s
# Warmup Iteration  21: 601520.178 ops/s
# Warmup Iteration  22: 595361.530 ops/s
# Warmup Iteration  23: 579232.010 ops/s
# Warmup Iteration  24: 604124.857 ops/s
# Warmup Iteration  25: 584543.874 ops/s
# Warmup Iteration  26: 612782.307 ops/s
# Warmup Iteration  27: 604803.059 ops/s
# Warmup Iteration  28: 581018.465 ops/s
# Warmup Iteration  29: 615171.130 ops/s
# Warmup Iteration  30: 594964.155 ops/s
Iteration   1: 587290.823 ops/s
Iteration   2: 602035.454 ops/s
Iteration   3: 601934.179 ops/s
Iteration   4: 592615.403 ops/s
Iteration   5: 588945.184 ops/s
Iteration   6: 612251.971 ops/s
Iteration   7: 585917.056 ops/s
Iteration   8: 587424.586 ops/s
Iteration   9: 623701.230 ops/s
Iteration  10: 583756.975 ops/s
Iteration  11: 608154.364 ops/s
Iteration  12: 602693.137 ops/s
Iteration  13: 598628.621 ops/s
Iteration  14: 595385.127 ops/s
Iteration  15: 597650.233 ops/s
Iteration  16: 608522.128 ops/s
Iteration  17: 583741.834 ops/s
Iteration  18: 604632.413 ops/s
Iteration  19: 594577.478 ops/s
Iteration  20: 601058.346 ops/s
Iteration  21: 589030.576 ops/s
Iteration  22: 568404.203 ops/s
Iteration  23: 610773.694 ops/s
Iteration  24: 608758.103 ops/s
Iteration  25: 619701.699 ops/s
Iteration  26: 581344.013 ops/s
Iteration  27: 607764.026 ops/s
Iteration  28: 574620.680 ops/s
Iteration  29: 613704.483 ops/s
Iteration  30: 601611.400 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerOnCompleteDisposerCrash":
  597887.647 ±(99.9%) 8753.640 ops/s [Average]
  (min, avg, max) = (568404.203, 597887.647, 623701.230), stdev = 13102.037
  CI (99.9%): [589134.007, 606641.287] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableUsingTest._Benchmark.benchmark_eagerOnCompleteDisposerCrash  thrpt   30  597887.647 ± 8753.640  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleTooManyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleTooManyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109242.809 ops/s
# Warmup Iteration   2: 281621.600 ops/s
# Warmup Iteration   3: 302746.524 ops/s
# Warmup Iteration   4: 324167.965 ops/s
# Warmup Iteration   5: 325303.805 ops/s
# Warmup Iteration   6: 329280.059 ops/s
# Warmup Iteration   7: 330864.894 ops/s
# Warmup Iteration   8: 328411.975 ops/s
# Warmup Iteration   9: 315233.453 ops/s
# Warmup Iteration  10: 331611.699 ops/s
# Warmup Iteration  11: 327991.802 ops/s
# Warmup Iteration  12: 307101.518 ops/s
# Warmup Iteration  13: 334807.081 ops/s
# Warmup Iteration  14: 317501.244 ops/s
# Warmup Iteration  15: 339741.503 ops/s
# Warmup Iteration  16: 317091.632 ops/s
# Warmup Iteration  17: 360332.296 ops/s
# Warmup Iteration  18: 355947.640 ops/s
# Warmup Iteration  19: 334708.699 ops/s
# Warmup Iteration  20: 366152.769 ops/s
# Warmup Iteration  21: 334829.467 ops/s
# Warmup Iteration  22: 331033.636 ops/s
# Warmup Iteration  23: 333725.103 ops/s
# Warmup Iteration  24: 343822.549 ops/s
# Warmup Iteration  25: 270041.102 ops/s
# Warmup Iteration  26: 345042.328 ops/s
# Warmup Iteration  27: 341580.124 ops/s
# Warmup Iteration  28: 344556.462 ops/s
# Warmup Iteration  29: 359160.592 ops/s
# Warmup Iteration  30: 328279.426 ops/s
Iteration   1: 356969.259 ops/s
Iteration   2: 340860.783 ops/s
Iteration   3: 349581.107 ops/s
Iteration   4: 344828.941 ops/s
Iteration   5: 340674.065 ops/s
Iteration   6: 347204.871 ops/s
Iteration   7: 356668.080 ops/s
Iteration   8: 330290.781 ops/s
Iteration   9: 356245.662 ops/s
Iteration  10: 336910.115 ops/s
Iteration  11: 337843.665 ops/s
Iteration  12: 349198.394 ops/s
Iteration  13: 345891.757 ops/s
Iteration  14: 346810.756 ops/s
Iteration  15: 335111.583 ops/s
Iteration  16: 354775.089 ops/s
Iteration  17: 349260.611 ops/s
Iteration  18: 339079.700 ops/s
Iteration  19: 349945.324 ops/s
Iteration  20: 347110.657 ops/s
Iteration  21: 351374.385 ops/s
Iteration  22: 349148.433 ops/s
Iteration  23: 343581.058 ops/s
Iteration  24: 348322.946 ops/s
Iteration  25: 343348.304 ops/s
Iteration  26: 360887.249 ops/s
Iteration  27: 333754.648 ops/s
Iteration  28: 349183.658 ops/s
Iteration  29: 346594.389 ops/s
Iteration  30: 344621.067 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleTooManyCancels":
  346202.578 ±(99.9%) 4848.175 ops/s [Average]
  (min, avg, max) = (330290.781, 346202.578, 360887.249), stdev = 7256.520
  CI (99.9%): [341354.403, 351050.753] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleTooManyCancels  thrpt   30  346202.578 ± 4848.175  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleTooManyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleTooManyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95966.446 ops/s
# Warmup Iteration   2: 263687.422 ops/s
# Warmup Iteration   3: 318849.672 ops/s
# Warmup Iteration   4: 293855.017 ops/s
# Warmup Iteration   5: 303046.581 ops/s
# Warmup Iteration   6: 310829.695 ops/s
# Warmup Iteration   7: 314554.066 ops/s
# Warmup Iteration   8: 314131.346 ops/s
# Warmup Iteration   9: 295852.739 ops/s
# Warmup Iteration  10: 330674.606 ops/s
# Warmup Iteration  11: 307206.403 ops/s
# Warmup Iteration  12: 329793.763 ops/s
# Warmup Iteration  13: 310697.967 ops/s
# Warmup Iteration  14: 325184.450 ops/s
# Warmup Iteration  15: 322910.828 ops/s
# Warmup Iteration  16: 310455.105 ops/s
# Warmup Iteration  17: 347193.088 ops/s
# Warmup Iteration  18: 326682.478 ops/s
# Warmup Iteration  19: 346101.722 ops/s
# Warmup Iteration  20: 332152.053 ops/s
# Warmup Iteration  21: 343846.316 ops/s
# Warmup Iteration  22: 347752.312 ops/s
# Warmup Iteration  23: 327468.386 ops/s
# Warmup Iteration  24: 341057.447 ops/s
# Warmup Iteration  25: 352036.494 ops/s
# Warmup Iteration  26: 328912.637 ops/s
# Warmup Iteration  27: 347377.282 ops/s
# Warmup Iteration  28: 332099.388 ops/s
# Warmup Iteration  29: 331583.660 ops/s
# Warmup Iteration  30: 340545.445 ops/s
Iteration   1: 329514.228 ops/s
Iteration   2: 342088.400 ops/s
Iteration   3: 337569.192 ops/s
Iteration   4: 338425.195 ops/s
Iteration   5: 344646.779 ops/s
Iteration   6: 334718.543 ops/s
Iteration   7: 336948.270 ops/s
Iteration   8: 347642.294 ops/s
Iteration   9: 323306.932 ops/s
Iteration  10: 347740.803 ops/s
Iteration  11: 324311.172 ops/s
Iteration  12: 328465.399 ops/s
Iteration  13: 333121.474 ops/s
Iteration  14: 341367.942 ops/s
Iteration  15: 334266.108 ops/s
Iteration  16: 345397.383 ops/s
Iteration  17: 333948.484 ops/s
Iteration  18: 333259.073 ops/s
Iteration  19: 340130.633 ops/s
Iteration  20: 339430.317 ops/s
Iteration  21: 343440.315 ops/s
Iteration  22: 321409.710 ops/s
Iteration  23: 337470.787 ops/s
Iteration  24: 343980.408 ops/s
Iteration  25: 325547.911 ops/s
Iteration  26: 331417.342 ops/s
Iteration  27: 323639.864 ops/s
Iteration  28: 332828.511 ops/s
Iteration  29: 342342.780 ops/s
Iteration  30: 330133.302 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleTooManyCancels":
  335616.985 ±(99.9%) 5053.391 ops/s [Average]
  (min, avg, max) = (321409.710, 335616.985, 347740.803), stdev = 7563.679
  CI (99.9%): [330563.594, 340670.376] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleTooManyCancels  thrpt   30  335616.985 ± 5053.391  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_asyncFusion$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_asyncFusion

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 672198.271 ops/s
# Warmup Iteration   2: 2708961.982 ops/s
# Warmup Iteration   3: 5223363.501 ops/s
# Warmup Iteration   4: 5778907.884 ops/s
# Warmup Iteration   5: 6096875.089 ops/s
# Warmup Iteration   6: 5949568.021 ops/s
# Warmup Iteration   7: 6144731.402 ops/s
# Warmup Iteration   8: 5998474.982 ops/s
# Warmup Iteration   9: 5875326.551 ops/s
# Warmup Iteration  10: 6175185.970 ops/s
# Warmup Iteration  11: 5731197.990 ops/s
# Warmup Iteration  12: 6075141.361 ops/s
# Warmup Iteration  13: 5848284.291 ops/s
# Warmup Iteration  14: 5910555.840 ops/s
# Warmup Iteration  15: 6253321.088 ops/s
# Warmup Iteration  16: 5772520.548 ops/s
# Warmup Iteration  17: 5665091.530 ops/s
# Warmup Iteration  18: 6236806.623 ops/s
# Warmup Iteration  19: 5533922.116 ops/s
# Warmup Iteration  20: 5007475.938 ops/s
# Warmup Iteration  21: 5870208.607 ops/s
# Warmup Iteration  22: 5962890.664 ops/s
# Warmup Iteration  23: 6040223.435 ops/s
# Warmup Iteration  24: 5941940.189 ops/s
# Warmup Iteration  25: 5909350.641 ops/s
# Warmup Iteration  26: 5793588.837 ops/s
# Warmup Iteration  27: 6188994.489 ops/s
# Warmup Iteration  28: 5802924.186 ops/s
# Warmup Iteration  29: 6096467.480 ops/s
# Warmup Iteration  30: 5916298.968 ops/s
Iteration   1: 5917589.953 ops/s
Iteration   2: 5985425.480 ops/s
Iteration   3: 5908341.097 ops/s
Iteration   4: 6081978.431 ops/s
Iteration   5: 6056814.563 ops/s
Iteration   6: 5783495.956 ops/s
Iteration   7: 6121051.452 ops/s
Iteration   8: 5751509.607 ops/s
Iteration   9: 6181469.970 ops/s
Iteration  10: 6068014.417 ops/s
Iteration  11: 5875366.280 ops/s
Iteration  12: 6101160.187 ops/s
Iteration  13: 5819180.058 ops/s
Iteration  14: 6103462.032 ops/s
Iteration  15: 6094012.155 ops/s
Iteration  16: 5847388.787 ops/s
Iteration  17: 5907576.314 ops/s
Iteration  18: 6003771.693 ops/s
Iteration  19: 5807548.547 ops/s
Iteration  20: 5951542.583 ops/s
Iteration  21: 5895311.957 ops/s
Iteration  22: 6119469.133 ops/s
Iteration  23: 5989454.341 ops/s
Iteration  24: 6031645.512 ops/s
Iteration  25: 5930948.438 ops/s
Iteration  26: 5933610.818 ops/s
Iteration  27: 6084857.644 ops/s
Iteration  28: 5908411.487 ops/s
Iteration  29: 5925225.184 ops/s
Iteration  30: 6196666.220 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_asyncFusion":
  5979410.010 ±(99.9%) 80219.991 ops/s [Average]
  (min, avg, max) = (5751509.607, 5979410.010, 6196666.220), stdev = 120069.515
  CI (99.9%): [5899190.019, 6059630.000] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableFromSingleTest._Benchmark.benchmark_asyncFusion  thrpt   30  5979410.010 ± 80219.991  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justObservableJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justObservableJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 163690.585 ops/s
# Warmup Iteration   2: 870690.833 ops/s
# Warmup Iteration   3: 2033315.199 ops/s
# Warmup Iteration   4: 2060525.751 ops/s
# Warmup Iteration   5: 1972099.528 ops/s
# Warmup Iteration   6: 1982901.723 ops/s
# Warmup Iteration   7: 1947121.546 ops/s
# Warmup Iteration   8: 2148219.380 ops/s
# Warmup Iteration   9: 2110217.464 ops/s
# Warmup Iteration  10: 2113205.719 ops/s
# Warmup Iteration  11: 2179770.919 ops/s
# Warmup Iteration  12: 2175395.993 ops/s
# Warmup Iteration  13: 2097546.767 ops/s
# Warmup Iteration  14: 2159690.120 ops/s
# Warmup Iteration  15: 2217083.659 ops/s
# Warmup Iteration  16: 2068736.281 ops/s
# Warmup Iteration  17: 2212163.061 ops/s
# Warmup Iteration  18: 2080581.359 ops/s
# Warmup Iteration  19: 2149054.921 ops/s
# Warmup Iteration  20: 2148283.645 ops/s
# Warmup Iteration  21: 2080490.690 ops/s
# Warmup Iteration  22: 2085032.624 ops/s
# Warmup Iteration  23: 2173144.873 ops/s
# Warmup Iteration  24: 2033343.444 ops/s
# Warmup Iteration  25: 2155683.616 ops/s
# Warmup Iteration  26: 2149850.304 ops/s
# Warmup Iteration  27: 2191473.093 ops/s
# Warmup Iteration  28: 2128475.533 ops/s
# Warmup Iteration  29: 2182581.109 ops/s
# Warmup Iteration  30: 2093819.373 ops/s
Iteration   1: 2146981.875 ops/s
Iteration   2: 2157095.043 ops/s
Iteration   3: 2085577.922 ops/s
Iteration   4: 2158428.719 ops/s
Iteration   5: 2215211.038 ops/s
Iteration   6: 2096765.865 ops/s
Iteration   7: 2224546.665 ops/s
Iteration   8: 2075289.660 ops/s
Iteration   9: 2129193.925 ops/s
Iteration  10: 2225556.542 ops/s
Iteration  11: 2104371.896 ops/s
Iteration  12: 2113508.729 ops/s
Iteration  13: 2226085.582 ops/s
Iteration  14: 2059182.884 ops/s
Iteration  15: 2143263.476 ops/s
Iteration  16: 2165708.989 ops/s
Iteration  17: 2116730.158 ops/s
Iteration  18: 2062684.690 ops/s
Iteration  19: 2197444.143 ops/s
Iteration  20: 2085566.921 ops/s
Iteration  21: 2207588.428 ops/s
Iteration  22: 2082243.882 ops/s
Iteration  23: 2188697.309 ops/s
Iteration  24: 2157919.389 ops/s
Iteration  25: 2068047.676 ops/s
Iteration  26: 2129937.813 ops/s
Iteration  27: 2092919.475 ops/s
Iteration  28: 2141296.271 ops/s
Iteration  29: 2087608.834 ops/s
Iteration  30: 2145834.268 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justObservableJust":
  2136376.269 ±(99.9%) 35043.912 ops/s [Average]
  (min, avg, max) = (2059182.884, 2136376.269, 2226085.582), stdev = 52452.081
  CI (99.9%): [2101332.357, 2171420.181] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justObservableJust  thrpt   30  2136376.269 ± 35043.912  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarQueueNoOverflowHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarQueueNoOverflowHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15456.519 ops/s
# Warmup Iteration   2: 75823.361 ops/s
# Warmup Iteration   3: 193120.318 ops/s
# Warmup Iteration   4: 214774.772 ops/s
# Warmup Iteration   5: 225893.433 ops/s
# Warmup Iteration   6: 211557.354 ops/s
# Warmup Iteration   7: 230411.376 ops/s
# Warmup Iteration   8: 198778.287 ops/s
# Warmup Iteration   9: 218763.781 ops/s
# Warmup Iteration  10: 223759.946 ops/s
# Warmup Iteration  11: 222245.714 ops/s
# Warmup Iteration  12: 223473.790 ops/s
# Warmup Iteration  13: 227090.824 ops/s
# Warmup Iteration  14: 169339.363 ops/s
# Warmup Iteration  15: 227659.460 ops/s
# Warmup Iteration  16: 219319.450 ops/s
# Warmup Iteration  17: 226560.664 ops/s
# Warmup Iteration  18: 224636.825 ops/s
# Warmup Iteration  19: 210223.728 ops/s
# Warmup Iteration  20: 237205.153 ops/s
# Warmup Iteration  21: 211860.863 ops/s
# Warmup Iteration  22: 227997.616 ops/s
# Warmup Iteration  23: 219724.732 ops/s
# Warmup Iteration  24: 221984.885 ops/s
# Warmup Iteration  25: 222559.690 ops/s
# Warmup Iteration  26: 215656.877 ops/s
# Warmup Iteration  27: 227769.348 ops/s
# Warmup Iteration  28: 210574.342 ops/s
# Warmup Iteration  29: 213151.130 ops/s
# Warmup Iteration  30: 232472.344 ops/s
Iteration   1: 222086.424 ops/s
Iteration   2: 223272.284 ops/s
Iteration   3: 231832.592 ops/s
Iteration   4: 221088.125 ops/s
Iteration   5: 219184.222 ops/s
Iteration   6: 227341.343 ops/s
Iteration   7: 216691.675 ops/s
Iteration   8: 228936.370 ops/s
Iteration   9: 221278.839 ops/s
Iteration  10: 219891.596 ops/s
Iteration  11: 219409.658 ops/s
Iteration  12: 229010.590 ops/s
Iteration  13: 230121.794 ops/s
Iteration  14: 221842.840 ops/s
Iteration  15: 229836.907 ops/s
Iteration  16: 221311.350 ops/s
Iteration  17: 223207.903 ops/s
Iteration  18: 224293.146 ops/s
Iteration  19: 214423.178 ops/s
Iteration  20: 233611.324 ops/s
Iteration  21: 216963.525 ops/s
Iteration  22: 222008.690 ops/s
Iteration  23: 219897.472 ops/s
Iteration  24: 221233.183 ops/s
Iteration  25: 221559.129 ops/s
Iteration  26: 212850.380 ops/s
Iteration  27: 226938.408 ops/s
Iteration  28: 228345.515 ops/s
Iteration  29: 226849.192 ops/s
Iteration  30: 228468.434 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapTest._Benchmark.benchmark_scalarQueueNoOverflowHidden":
  223459.536 ±(99.9%) 3464.794 ops/s [Average]
  (min, avg, max) = (212850.380, 223459.536, 233611.324), stdev = 5185.941
  CI (99.9%): [219994.742, 226924.330] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableFlatMapTest._Benchmark.benchmark_scalarQueueNoOverflowHidden  thrpt   30  223459.536 ± 3464.794  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justSingleJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justSingleJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 287736.911 ops/s
# Warmup Iteration   2: 1963087.688 ops/s
# Warmup Iteration   3: 2356247.494 ops/s
# Warmup Iteration   4: 2245551.058 ops/s
# Warmup Iteration   5: 2178529.216 ops/s
# Warmup Iteration   6: 2267798.850 ops/s
# Warmup Iteration   7: 2325661.188 ops/s
# Warmup Iteration   8: 2378256.227 ops/s
# Warmup Iteration   9: 2503354.384 ops/s
# Warmup Iteration  10: 2441121.599 ops/s
# Warmup Iteration  11: 2439573.031 ops/s
# Warmup Iteration  12: 2177920.110 ops/s
# Warmup Iteration  13: 2470499.370 ops/s
# Warmup Iteration  14: 2354969.757 ops/s
# Warmup Iteration  15: 2334133.818 ops/s
# Warmup Iteration  16: 2454158.929 ops/s
# Warmup Iteration  17: 2386866.757 ops/s
# Warmup Iteration  18: 2403062.317 ops/s
# Warmup Iteration  19: 2359064.267 ops/s
# Warmup Iteration  20: 2447266.040 ops/s
# Warmup Iteration  21: 2406559.397 ops/s
# Warmup Iteration  22: 2367741.269 ops/s
# Warmup Iteration  23: 2489967.236 ops/s
# Warmup Iteration  24: 2369476.138 ops/s
# Warmup Iteration  25: 2405917.927 ops/s
# Warmup Iteration  26: 2498079.155 ops/s
# Warmup Iteration  27: 2338674.176 ops/s
# Warmup Iteration  28: 2483943.637 ops/s
# Warmup Iteration  29: 2491142.507 ops/s
# Warmup Iteration  30: 2328999.813 ops/s
Iteration   1: 2398626.024 ops/s
Iteration   2: 2401968.736 ops/s
Iteration   3: 2397897.182 ops/s
Iteration   4: 2391210.467 ops/s
Iteration   5: 2477559.668 ops/s
Iteration   6: 2341479.512 ops/s
Iteration   7: 2395829.816 ops/s
Iteration   8: 2324602.791 ops/s
Iteration   9: 2422416.803 ops/s
Iteration  10: 2334830.460 ops/s
Iteration  11: 2410183.535 ops/s
Iteration  12: 2373924.599 ops/s
Iteration  13: 2380945.303 ops/s
Iteration  14: 2389401.903 ops/s
Iteration  15: 2460123.772 ops/s
Iteration  16: 2399769.653 ops/s
Iteration  17: 2377478.098 ops/s
Iteration  18: 2411364.407 ops/s
Iteration  19: 2355469.100 ops/s
Iteration  20: 2439409.879 ops/s
Iteration  21: 2397958.627 ops/s
Iteration  22: 2473316.219 ops/s
Iteration  23: 2389679.461 ops/s
Iteration  24: 2460932.327 ops/s
Iteration  25: 2344187.882 ops/s
Iteration  26: 2489376.863 ops/s
Iteration  27: 2439680.143 ops/s
Iteration  28: 2299830.645 ops/s
Iteration  29: 2462413.455 ops/s
Iteration  30: 2325596.125 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableStartWithTest._Benchmark.benchmark_justSingleJust":
  2398915.448 ±(99.9%) 32902.428 ops/s [Average]
  (min, avg, max) = (2299830.645, 2398915.448, 2489376.863), stdev = 49246.809
  CI (99.9%): [2366013.021, 2431817.876] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableStartWithTest._Benchmark.benchmark_justSingleJust  thrpt   30  2398915.448 ± 32902.428  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_syncFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_syncFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1538260.990 ops/s
# Warmup Iteration   2: 3826232.205 ops/s
# Warmup Iteration   3: 5831150.105 ops/s
# Warmup Iteration   4: 5802661.193 ops/s
# Warmup Iteration   5: 5916507.257 ops/s
# Warmup Iteration   6: 5829764.181 ops/s
# Warmup Iteration   7: 5856693.956 ops/s
# Warmup Iteration   8: 5611168.331 ops/s
# Warmup Iteration   9: 5010426.544 ops/s
# Warmup Iteration  10: 5709080.970 ops/s
# Warmup Iteration  11: 5707136.663 ops/s
# Warmup Iteration  12: 6102482.584 ops/s
# Warmup Iteration  13: 5604198.233 ops/s
# Warmup Iteration  14: 6024304.134 ops/s
# Warmup Iteration  15: 5644619.683 ops/s
# Warmup Iteration  16: 6003779.010 ops/s
# Warmup Iteration  17: 5924294.708 ops/s
# Warmup Iteration  18: 5752064.023 ops/s
# Warmup Iteration  19: 6152217.131 ops/s
# Warmup Iteration  20: 5733479.241 ops/s
# Warmup Iteration  21: 6076866.697 ops/s
# Warmup Iteration  22: 5898598.428 ops/s
# Warmup Iteration  23: 5850028.843 ops/s
# Warmup Iteration  24: 5734803.173 ops/s
# Warmup Iteration  25: 5898127.695 ops/s
# Warmup Iteration  26: 6084980.419 ops/s
# Warmup Iteration  27: 5973887.514 ops/s
# Warmup Iteration  28: 5804634.090 ops/s
# Warmup Iteration  29: 6037674.072 ops/s
# Warmup Iteration  30: 5893476.368 ops/s
Iteration   1: 5865774.283 ops/s
Iteration   2: 6022467.301 ops/s
Iteration   3: 5855412.352 ops/s
Iteration   4: 6061674.659 ops/s
Iteration   5: 5987203.429 ops/s
Iteration   6: 5768019.660 ops/s
Iteration   7: 5941014.562 ops/s
Iteration   8: 5760664.622 ops/s
Iteration   9: 5868645.015 ops/s
Iteration  10: 6100116.732 ops/s
Iteration  11: 5858195.730 ops/s
Iteration  12: 6029564.537 ops/s
Iteration  13: 5920595.357 ops/s
Iteration  14: 5820171.469 ops/s
Iteration  15: 5985593.190 ops/s
Iteration  16: 5716888.806 ops/s
Iteration  17: 6151064.652 ops/s
Iteration  18: 5819888.088 ops/s
Iteration  19: 5780678.917 ops/s
Iteration  20: 6040075.238 ops/s
Iteration  21: 5774403.898 ops/s
Iteration  22: 6059698.341 ops/s
Iteration  23: 5739969.538 ops/s
Iteration  24: 5814356.989 ops/s
Iteration  25: 6076240.479 ops/s
Iteration  26: 5799950.105 ops/s
Iteration  27: 6184363.681 ops/s
Iteration  28: 5715270.944 ops/s
Iteration  29: 6184739.004 ops/s
Iteration  30: 5783389.143 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSingleTest._Benchmark.benchmark_syncFusionRejected":
  5916203.024 ±(99.9%) 97533.287 ops/s [Average]
  (min, avg, max) = (5715270.944, 5916203.024, 6184739.004), stdev = 145983.243
  CI (99.9%): [5818669.737, 6013736.311] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservableFromSingleTest._Benchmark.benchmark_syncFusionRejected  thrpt   30  5916203.024 ± 97533.287  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_withFollowingFirstObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_withFollowingFirstObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 246823.732 ops/s
# Warmup Iteration   2: 1453146.706 ops/s
# Warmup Iteration   3: 3095979.020 ops/s
# Warmup Iteration   4: 3358899.737 ops/s
# Warmup Iteration   5: 2716794.752 ops/s
# Warmup Iteration   6: 3406245.890 ops/s
# Warmup Iteration   7: 3327665.045 ops/s
# Warmup Iteration   8: 3480516.462 ops/s
# Warmup Iteration   9: 3316364.127 ops/s
# Warmup Iteration  10: 3389871.599 ops/s
# Warmup Iteration  11: 3294666.644 ops/s
# Warmup Iteration  12: 3326643.134 ops/s
# Warmup Iteration  13: 3359486.530 ops/s
# Warmup Iteration  14: 3299623.905 ops/s
# Warmup Iteration  15: 3481157.956 ops/s
# Warmup Iteration  16: 3271141.386 ops/s
# Warmup Iteration  17: 3439483.249 ops/s
# Warmup Iteration  18: 3352772.819 ops/s
# Warmup Iteration  19: 3408765.511 ops/s
# Warmup Iteration  20: 3342132.392 ops/s
# Warmup Iteration  21: 3374622.240 ops/s
# Warmup Iteration  22: 3359566.866 ops/s
# Warmup Iteration  23: 3284323.104 ops/s
# Warmup Iteration  24: 3407331.512 ops/s
# Warmup Iteration  25: 3446235.339 ops/s
# Warmup Iteration  26: 3288046.919 ops/s
# Warmup Iteration  27: 3297255.577 ops/s
# Warmup Iteration  28: 3441567.367 ops/s
# Warmup Iteration  29: 3243178.808 ops/s
# Warmup Iteration  30: 3456860.745 ops/s
Iteration   1: 3298745.054 ops/s
Iteration   2: 3409677.518 ops/s
Iteration   3: 3503497.810 ops/s
Iteration   4: 3256594.375 ops/s
Iteration   5: 3474820.525 ops/s
Iteration   6: 3372851.525 ops/s
Iteration   7: 3296924.102 ops/s
Iteration   8: 3477002.020 ops/s
Iteration   9: 3293895.349 ops/s
Iteration  10: 3504311.586 ops/s
Iteration  11: 3343102.923 ops/s
Iteration  12: 3381675.300 ops/s
Iteration  13: 3354617.205 ops/s
Iteration  14: 3449341.959 ops/s
Iteration  15: 3332942.593 ops/s
Iteration  16: 3343112.272 ops/s
Iteration  17: 3435973.096 ops/s
Iteration  18: 3405968.536 ops/s
Iteration  19: 3325548.271 ops/s
Iteration  20: 3484371.528 ops/s
Iteration  21: 3321812.537 ops/s
Iteration  22: 3570011.564 ops/s
Iteration  23: 3315662.797 ops/s
Iteration  24: 3418573.034 ops/s
Iteration  25: 3435796.637 ops/s
Iteration  26: 3303001.776 ops/s
Iteration  27: 3472933.784 ops/s
Iteration  28: 3257225.816 ops/s
Iteration  29: 3566411.855 ops/s
Iteration  30: 3307962.277 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToSortedListTest._Benchmark.benchmark_withFollowingFirstObservable":
  3390478.854 ±(99.9%) 59338.570 ops/s [Average]
  (min, avg, max) = (3256594.375, 3390478.854, 3570011.564), stdev = 88815.185
  CI (99.9%): [3331140.284, 3449817.425] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
ObservableToSortedListTest._Benchmark.benchmark_withFollowingFirstObservable  thrpt   30  3390478.854 ± 59338.570  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.699 ops/s
# Warmup Iteration   2: 11364.711 ops/s
# Warmup Iteration   3: 57672.239 ops/s
# Warmup Iteration   4: 68481.049 ops/s
# Warmup Iteration   5: 97057.200 ops/s
# Warmup Iteration   6: 87610.218 ops/s
# Warmup Iteration   7: 151810.835 ops/s
# Warmup Iteration   8: 275184.435 ops/s
# Warmup Iteration   9: 281264.118 ops/s
# Warmup Iteration  10: 277935.507 ops/s
# Warmup Iteration  11: 272075.344 ops/s
# Warmup Iteration  12: 283073.269 ops/s
# Warmup Iteration  13: 285163.401 ops/s
# Warmup Iteration  14: 277539.128 ops/s
# Warmup Iteration  15: 282159.318 ops/s
# Warmup Iteration  16: 269397.524 ops/s
# Warmup Iteration  17: 275567.233 ops/s
# Warmup Iteration  18: 282668.164 ops/s
# Warmup Iteration  19: 285626.392 ops/s
# Warmup Iteration  20: 275456.288 ops/s
# Warmup Iteration  21: 291536.384 ops/s
# Warmup Iteration  22: 273257.567 ops/s
# Warmup Iteration  23: 275031.564 ops/s
# Warmup Iteration  24: 289553.721 ops/s
# Warmup Iteration  25: 281316.545 ops/s
# Warmup Iteration  26: 289318.479 ops/s
# Warmup Iteration  27: 285397.935 ops/s
# Warmup Iteration  28: 282089.471 ops/s
# Warmup Iteration  29: 290104.582 ops/s
# Warmup Iteration  30: 283134.236 ops/s
Iteration   1: 289444.736 ops/s
Iteration   2: 278644.066 ops/s
Iteration   3: 288353.259 ops/s
Iteration   4: 293984.604 ops/s
Iteration   5: 286261.638 ops/s
Iteration   6: 284473.078 ops/s
Iteration   7: 279070.998 ops/s
Iteration   8: 290476.786 ops/s
Iteration   9: 286158.399 ops/s
Iteration  10: 282720.164 ops/s
Iteration  11: 292955.073 ops/s
Iteration  12: 278738.341 ops/s
Iteration  13: 289615.376 ops/s
Iteration  14: 279654.407 ops/s
Iteration  15: 278819.677 ops/s
Iteration  16: 290647.360 ops/s
Iteration  17: 279546.965 ops/s
Iteration  18: 289933.877 ops/s
Iteration  19: 282554.823 ops/s
Iteration  20: 288128.640 ops/s
Iteration  21: 286664.904 ops/s
Iteration  22: 291271.574 ops/s
Iteration  23: 283781.084 ops/s
Iteration  24: 283696.674 ops/s
Iteration  25: 288758.163 ops/s
Iteration  26: 288793.368 ops/s
Iteration  27: 290213.871 ops/s
Iteration  28: 289763.641 ops/s
Iteration  29: 278920.795 ops/s
Iteration  30: 283457.616 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorWithError":
  285850.132 ±(99.9%) 3185.645 ops/s [Average]
  (min, avg, max) = (278644.066, 285850.132, 293984.604), stdev = 4768.123
  CI (99.9%): [282664.487, 289035.777] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableMergeDelayErrorTest._Benchmark.benchmark_mergeIterableDelayErrorWithError  thrpt   30  285850.132 ± 3185.645  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_boundarySelectorNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_boundarySelectorNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5478.976 ops/s
# Warmup Iteration   2: 68945.452 ops/s
# Warmup Iteration   3: 97749.764 ops/s
# Warmup Iteration   4: 220533.541 ops/s
# Warmup Iteration   5: 237831.385 ops/s
# Warmup Iteration   6: 232727.417 ops/s
# Warmup Iteration   7: 233947.301 ops/s
# Warmup Iteration   8: 219039.521 ops/s
# Warmup Iteration   9: 221137.133 ops/s
# Warmup Iteration  10: 217318.634 ops/s
# Warmup Iteration  11: 224150.026 ops/s
# Warmup Iteration  12: 211834.756 ops/s
# Warmup Iteration  13: 227054.366 ops/s
# Warmup Iteration  14: 239203.862 ops/s
# Warmup Iteration  15: 230432.499 ops/s
# Warmup Iteration  16: 228084.244 ops/s
# Warmup Iteration  17: 232860.619 ops/s
# Warmup Iteration  18: 228523.888 ops/s
# Warmup Iteration  19: 236970.892 ops/s
# Warmup Iteration  20: 225335.678 ops/s
# Warmup Iteration  21: 227748.016 ops/s
# Warmup Iteration  22: 238039.660 ops/s
# Warmup Iteration  23: 223120.165 ops/s
# Warmup Iteration  24: 231966.898 ops/s
# Warmup Iteration  25: 236017.664 ops/s
# Warmup Iteration  26: 226396.782 ops/s
# Warmup Iteration  27: 229277.496 ops/s
# Warmup Iteration  28: 232299.206 ops/s
# Warmup Iteration  29: 232627.212 ops/s
# Warmup Iteration  30: 233957.910 ops/s
Iteration   1: 223459.568 ops/s
Iteration   2: 228044.633 ops/s
Iteration   3: 235255.819 ops/s
Iteration   4: 221362.731 ops/s
Iteration   5: 238746.764 ops/s
Iteration   6: 229078.037 ops/s
Iteration   7: 230777.442 ops/s
Iteration   8: 241117.950 ops/s
Iteration   9: 227902.120 ops/s
Iteration  10: 235455.271 ops/s
Iteration  11: 226935.683 ops/s
Iteration  12: 233678.022 ops/s
Iteration  13: 233156.467 ops/s
Iteration  14: 229642.552 ops/s
Iteration  15: 235813.308 ops/s
Iteration  16: 230815.977 ops/s
Iteration  17: 232264.041 ops/s
Iteration  18: 226797.913 ops/s
Iteration  19: 231371.832 ops/s
Iteration  20: 228108.090 ops/s
Iteration  21: 229456.647 ops/s
Iteration  22: 239900.408 ops/s
Iteration  23: 228110.175 ops/s
Iteration  24: 237895.630 ops/s
Iteration  25: 226117.163 ops/s
Iteration  26: 228391.453 ops/s
Iteration  27: 239427.529 ops/s
Iteration  28: 224643.799 ops/s
Iteration  29: 194411.285 ops/s
Iteration  30: 229243.118 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_boundarySelectorNormal":
  229912.714 ±(99.9%) 5602.519 ops/s [Average]
  (min, avg, max) = (194411.285, 229912.714, 241117.950), stdev = 8385.588
  CI (99.9%): [224310.195, 235515.234] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_boundarySelectorNormal  thrpt   30  229912.714 ± 5602.519  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_errorLastOrErrorObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_errorLastOrErrorObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 211261.307 ops/s
# Warmup Iteration   2: 546720.936 ops/s
# Warmup Iteration   3: 633901.032 ops/s
# Warmup Iteration   4: 666322.873 ops/s
# Warmup Iteration   5: 714004.067 ops/s
# Warmup Iteration   6: 672440.456 ops/s
# Warmup Iteration   7: 673072.047 ops/s
# Warmup Iteration   8: 701602.665 ops/s
# Warmup Iteration   9: 664887.202 ops/s
# Warmup Iteration  10: 704169.576 ops/s
# Warmup Iteration  11: 663222.271 ops/s
# Warmup Iteration  12: 674568.890 ops/s
# Warmup Iteration  13: 682974.066 ops/s
# Warmup Iteration  14: 705058.340 ops/s
# Warmup Iteration  15: 681232.223 ops/s
# Warmup Iteration  16: 710892.749 ops/s
# Warmup Iteration  17: 715619.251 ops/s
# Warmup Iteration  18: 691703.031 ops/s
# Warmup Iteration  19: 735761.621 ops/s
# Warmup Iteration  20: 711082.020 ops/s
# Warmup Iteration  21: 733843.804 ops/s
# Warmup Iteration  22: 715906.281 ops/s
# Warmup Iteration  23: 749660.315 ops/s
# Warmup Iteration  24: 702949.593 ops/s
# Warmup Iteration  25: 740865.502 ops/s
# Warmup Iteration  26: 718663.362 ops/s
# Warmup Iteration  27: 730615.685 ops/s
# Warmup Iteration  28: 745753.875 ops/s
# Warmup Iteration  29: 714228.867 ops/s
# Warmup Iteration  30: 726022.539 ops/s
Iteration   1: 724561.270 ops/s
Iteration   2: 727914.657 ops/s
Iteration   3: 755937.685 ops/s
Iteration   4: 723448.900 ops/s
Iteration   5: 696237.535 ops/s
Iteration   6: 701874.287 ops/s
Iteration   7: 710247.551 ops/s
Iteration   8: 736717.670 ops/s
Iteration   9: 708996.461 ops/s
Iteration  10: 719882.127 ops/s
Iteration  11: 749888.621 ops/s
Iteration  12: 706933.590 ops/s
Iteration  13: 737002.776 ops/s
Iteration  14: 702912.026 ops/s
Iteration  15: 701392.184 ops/s
Iteration  16: 747894.011 ops/s
Iteration  17: 738461.693 ops/s
Iteration  18: 694147.338 ops/s
Iteration  19: 718386.832 ops/s
Iteration  20: 710577.468 ops/s
Iteration  21: 730280.199 ops/s
Iteration  22: 734540.229 ops/s
Iteration  23: 703799.971 ops/s
Iteration  24: 723773.487 ops/s
Iteration  25: 730312.982 ops/s
Iteration  26: 716935.117 ops/s
Iteration  27: 734558.463 ops/s
Iteration  28: 699800.094 ops/s
Iteration  29: 733201.993 ops/s
Iteration  30: 727940.129 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_errorLastOrErrorObservable":
  721618.578 ±(99.9%) 11189.342 ops/s [Average]
  (min, avg, max) = (694147.338, 721618.578, 755937.685), stdev = 16747.682
  CI (99.9%): [710429.236, 732807.920] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableLastTest._Benchmark.benchmark_errorLastOrErrorObservable  thrpt   30  721618.578 ± 11189.342  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_errorGetWithTimeout$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_errorGetWithTimeout

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 195786.781 ops/s
# Warmup Iteration   2: 291946.934 ops/s
# Warmup Iteration   3: 351215.201 ops/s
# Warmup Iteration   4: 357155.974 ops/s
# Warmup Iteration   5: 366008.221 ops/s
# Warmup Iteration   6: 354076.313 ops/s
# Warmup Iteration   7: 342374.614 ops/s
# Warmup Iteration   8: 354996.675 ops/s
# Warmup Iteration   9: 356659.152 ops/s
# Warmup Iteration  10: 352968.181 ops/s
# Warmup Iteration  11: 351660.952 ops/s
# Warmup Iteration  12: 358891.727 ops/s
# Warmup Iteration  13: 348506.595 ops/s
# Warmup Iteration  14: 369139.084 ops/s
# Warmup Iteration  15: 335100.989 ops/s
# Warmup Iteration  16: 353766.429 ops/s
# Warmup Iteration  17: 377171.504 ops/s
# Warmup Iteration  18: 374834.168 ops/s
# Warmup Iteration  19: 390360.392 ops/s
# Warmup Iteration  20: 383932.456 ops/s
# Warmup Iteration  21: 373674.995 ops/s
# Warmup Iteration  22: 377750.388 ops/s
# Warmup Iteration  23: 378283.418 ops/s
# Warmup Iteration  24: 375890.524 ops/s
# Warmup Iteration  25: 380153.655 ops/s
# Warmup Iteration  26: 378860.967 ops/s
# Warmup Iteration  27: 380273.736 ops/s
# Warmup Iteration  28: 375261.798 ops/s
# Warmup Iteration  29: 379097.904 ops/s
# Warmup Iteration  30: 382305.996 ops/s
Iteration   1: 361287.935 ops/s
Iteration   2: 373310.126 ops/s
Iteration   3: 372006.557 ops/s
Iteration   4: 389405.616 ops/s
Iteration   5: 369608.191 ops/s
Iteration   6: 384456.482 ops/s
Iteration   7: 393351.813 ops/s
Iteration   8: 368448.599 ops/s
Iteration   9: 393173.411 ops/s
Iteration  10: 382609.867 ops/s
Iteration  11: 377681.039 ops/s
Iteration  12: 391273.210 ops/s
Iteration  13: 368329.406 ops/s
Iteration  14: 384242.282 ops/s
Iteration  15: 368812.873 ops/s
Iteration  16: 389361.096 ops/s
Iteration  17: 387886.562 ops/s
Iteration  18: 373239.907 ops/s
Iteration  19: 381621.155 ops/s
Iteration  20: 394256.142 ops/s
Iteration  21: 365208.126 ops/s
Iteration  22: 396348.450 ops/s
Iteration  23: 370249.435 ops/s
Iteration  24: 308029.919 ops/s
Iteration  25: 377816.894 ops/s
Iteration  26: 382482.194 ops/s
Iteration  27: 369122.548 ops/s
Iteration  28: 384674.334 ops/s
Iteration  29: 379789.914 ops/s
Iteration  30: 390990.762 ops/s


Result "io.reactivex.rxjava3.internal.observers.FutureSingleObserverTest._Benchmark.benchmark_errorGetWithTimeout":
  377635.828 ±(99.9%) 10989.051 ops/s [Average]
  (min, avg, max) = (308029.919, 377635.828, 396348.450), stdev = 16447.895
  CI (99.9%): [366646.777, 388624.879] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FutureSingleObserverTest._Benchmark.benchmark_errorGetWithTimeout  thrpt   30  377635.828 ± 10989.051  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 585674.783 ops/s
# Warmup Iteration   2: 2065491.011 ops/s
# Warmup Iteration   3: 2335896.578 ops/s
# Warmup Iteration   4: 2607623.645 ops/s
# Warmup Iteration   5: 2719147.488 ops/s
# Warmup Iteration   6: 2664723.842 ops/s
# Warmup Iteration   7: 2679926.054 ops/s
# Warmup Iteration   8: 2703151.447 ops/s
# Warmup Iteration   9: 2636060.854 ops/s
# Warmup Iteration  10: 2612037.374 ops/s
# Warmup Iteration  11: 2719046.472 ops/s
# Warmup Iteration  12: 2537144.640 ops/s
# Warmup Iteration  13: 2625400.940 ops/s
# Warmup Iteration  14: 2758757.702 ops/s
# Warmup Iteration  15: 2636477.043 ops/s
# Warmup Iteration  16: 2776184.841 ops/s
# Warmup Iteration  17: 2603913.882 ops/s
# Warmup Iteration  18: 2619917.271 ops/s
# Warmup Iteration  19: 2789300.593 ops/s
# Warmup Iteration  20: 2658589.216 ops/s
# Warmup Iteration  21: 2686389.266 ops/s
# Warmup Iteration  22: 2619189.915 ops/s
# Warmup Iteration  23: 2769110.467 ops/s
# Warmup Iteration  24: 2687256.946 ops/s
# Warmup Iteration  25: 2655156.406 ops/s
# Warmup Iteration  26: 2674355.217 ops/s
# Warmup Iteration  27: 2760893.589 ops/s
# Warmup Iteration  28: 2644613.436 ops/s
# Warmup Iteration  29: 2652981.655 ops/s
# Warmup Iteration  30: 2792210.289 ops/s
Iteration   1: 2623229.012 ops/s
Iteration   2: 2722326.738 ops/s
Iteration   3: 2777340.946 ops/s
Iteration   4: 2673529.996 ops/s
Iteration   5: 2619633.097 ops/s
Iteration   6: 2820572.682 ops/s
Iteration   7: 2609499.189 ops/s
Iteration   8: 2704330.490 ops/s
Iteration   9: 2650725.941 ops/s
Iteration  10: 2727336.936 ops/s
Iteration  11: 2672222.204 ops/s
Iteration  12: 2664981.966 ops/s
Iteration  13: 2745901.481 ops/s
Iteration  14: 2618652.922 ops/s
Iteration  15: 2658565.575 ops/s
Iteration  16: 2610841.723 ops/s
Iteration  17: 2590439.591 ops/s
Iteration  18: 2740579.324 ops/s
Iteration  19: 2717598.835 ops/s
Iteration  20: 2543144.001 ops/s
Iteration  21: 2737044.566 ops/s
Iteration  22: 2631126.255 ops/s
Iteration  23: 2747045.773 ops/s
Iteration  24: 2615798.860 ops/s
Iteration  25: 2634220.523 ops/s
Iteration  26: 2711787.682 ops/s
Iteration  27: 2701702.306 ops/s
Iteration  28: 2652395.185 ops/s
Iteration  29: 2693443.634 ops/s
Iteration  30: 2625762.201 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_cancel":
  2674725.988 ±(99.9%) 41696.405 ops/s [Average]
  (min, avg, max) = (2543144.001, 2674725.988, 2820572.682), stdev = 62409.220
  CI (99.9%): [2633029.583, 2716422.393] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_cancel  thrpt   30  2674725.988 ± 41696.405  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 197278.406 ops/s
# Warmup Iteration   2: 576305.771 ops/s
# Warmup Iteration   3: 693475.922 ops/s
# Warmup Iteration   4: 712795.974 ops/s
# Warmup Iteration   5: 635790.310 ops/s
# Warmup Iteration   6: 631760.879 ops/s
# Warmup Iteration   7: 702665.936 ops/s
# Warmup Iteration   8: 712957.781 ops/s
# Warmup Iteration   9: 729129.357 ops/s
# Warmup Iteration  10: 693974.418 ops/s
# Warmup Iteration  11: 702739.621 ops/s
# Warmup Iteration  12: 712606.218 ops/s
# Warmup Iteration  13: 708265.045 ops/s
# Warmup Iteration  14: 735333.441 ops/s
# Warmup Iteration  15: 701832.170 ops/s
# Warmup Iteration  16: 716818.447 ops/s
# Warmup Iteration  17: 763595.333 ops/s
# Warmup Iteration  18: 752534.400 ops/s
# Warmup Iteration  19: 742243.472 ops/s
# Warmup Iteration  20: 712712.168 ops/s
# Warmup Iteration  21: 757282.292 ops/s
# Warmup Iteration  22: 757176.649 ops/s
# Warmup Iteration  23: 744850.894 ops/s
# Warmup Iteration  24: 743812.108 ops/s
# Warmup Iteration  25: 768362.975 ops/s
# Warmup Iteration  26: 728341.862 ops/s
# Warmup Iteration  27: 742076.551 ops/s
# Warmup Iteration  28: 755021.374 ops/s
# Warmup Iteration  29: 761205.094 ops/s
# Warmup Iteration  30: 739562.508 ops/s
Iteration   1: 762525.769 ops/s
Iteration   2: 748024.022 ops/s
Iteration   3: 740405.816 ops/s
Iteration   4: 749918.279 ops/s
Iteration   5: 745253.700 ops/s
Iteration   6: 769601.231 ops/s
Iteration   7: 708056.288 ops/s
Iteration   8: 769689.193 ops/s
Iteration   9: 741404.105 ops/s
Iteration  10: 768129.117 ops/s
Iteration  11: 718716.396 ops/s
Iteration  12: 754792.978 ops/s
Iteration  13: 760210.535 ops/s
Iteration  14: 723693.291 ops/s
Iteration  15: 745031.009 ops/s
Iteration  16: 780392.807 ops/s
Iteration  17: 725094.750 ops/s
Iteration  18: 738788.434 ops/s
Iteration  19: 662792.218 ops/s
Iteration  20: 745450.449 ops/s
Iteration  21: 754891.300 ops/s
Iteration  22: 729406.370 ops/s
Iteration  23: 766814.963 ops/s
Iteration  24: 735736.616 ops/s
Iteration  25: 757094.825 ops/s
Iteration  26: 742554.176 ops/s
Iteration  27: 748897.586 ops/s
Iteration  28: 753148.656 ops/s
Iteration  29: 752394.664 ops/s
Iteration  30: 755764.376 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_error":
  745155.797 ±(99.9%) 15048.984 ops/s [Average]
  (min, avg, max) = (662792.218, 745155.797, 780392.807), stdev = 22524.613
  CI (99.9%): [730106.813, 760204.781] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_error  thrpt   30  745155.797 ± 15048.984  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180977.688 ops/s
# Warmup Iteration   2: 566511.527 ops/s
# Warmup Iteration   3: 599625.775 ops/s
# Warmup Iteration   4: 683162.719 ops/s
# Warmup Iteration   5: 603827.116 ops/s
# Warmup Iteration   6: 684058.550 ops/s
# Warmup Iteration   7: 677772.932 ops/s
# Warmup Iteration   8: 695422.834 ops/s
# Warmup Iteration   9: 698942.410 ops/s
# Warmup Iteration  10: 672086.879 ops/s
# Warmup Iteration  11: 676154.194 ops/s
# Warmup Iteration  12: 680036.061 ops/s
# Warmup Iteration  13: 722741.384 ops/s
# Warmup Iteration  14: 704687.160 ops/s
# Warmup Iteration  15: 680106.310 ops/s
# Warmup Iteration  16: 711174.130 ops/s
# Warmup Iteration  17: 728162.749 ops/s
# Warmup Iteration  18: 742625.283 ops/s
# Warmup Iteration  19: 721399.921 ops/s
# Warmup Iteration  20: 757587.497 ops/s
# Warmup Iteration  21: 728000.548 ops/s
# Warmup Iteration  22: 749327.582 ops/s
# Warmup Iteration  23: 728578.811 ops/s
# Warmup Iteration  24: 698012.471 ops/s
# Warmup Iteration  25: 751207.529 ops/s
# Warmup Iteration  26: 711648.209 ops/s
# Warmup Iteration  27: 740998.599 ops/s
# Warmup Iteration  28: 747991.191 ops/s
# Warmup Iteration  29: 693581.621 ops/s
# Warmup Iteration  30: 753030.626 ops/s
Iteration   1: 751605.886 ops/s
Iteration   2: 746970.355 ops/s
Iteration   3: 709690.353 ops/s
Iteration   4: 740558.310 ops/s
Iteration   5: 708741.560 ops/s
Iteration   6: 755505.532 ops/s
Iteration   7: 747861.459 ops/s
Iteration   8: 701744.211 ops/s
Iteration   9: 757114.085 ops/s
Iteration  10: 722482.728 ops/s
Iteration  11: 738330.389 ops/s
Iteration  12: 724282.558 ops/s
Iteration  13: 752399.544 ops/s
Iteration  14: 730170.353 ops/s
Iteration  15: 723404.380 ops/s
Iteration  16: 756987.509 ops/s
Iteration  17: 719530.639 ops/s
Iteration  18: 752740.056 ops/s
Iteration  19: 722264.997 ops/s
Iteration  20: 730926.135 ops/s
Iteration  21: 722360.868 ops/s
Iteration  22: 728068.373 ops/s
Iteration  23: 763599.044 ops/s
Iteration  24: 702099.962 ops/s
Iteration  25: 746854.149 ops/s
Iteration  26: 720510.903 ops/s
Iteration  27: 749349.232 ops/s
Iteration  28: 705157.907 ops/s
Iteration  29: 749247.760 ops/s
Iteration  30: 715824.492 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_error":
  733212.791 ±(99.9%) 12375.611 ops/s [Average]
  (min, avg, max) = (701744.211, 733212.791, 763599.044), stdev = 18523.233
  CI (99.9%): [720837.180, 745588.402] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
ObservableToListTest._Benchmark.benchmark_error  thrpt   30  733212.791 ± 12375.611  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130391.935 ops/s
# Warmup Iteration   2: 610788.413 ops/s
# Warmup Iteration   3: 712048.481 ops/s
# Warmup Iteration   4: 680292.349 ops/s
# Warmup Iteration   5: 705070.027 ops/s
# Warmup Iteration   6: 693470.014 ops/s
# Warmup Iteration   7: 685457.782 ops/s
# Warmup Iteration   8: 712996.650 ops/s
# Warmup Iteration   9: 669755.104 ops/s
# Warmup Iteration  10: 692027.731 ops/s
# Warmup Iteration  11: 697194.210 ops/s
# Warmup Iteration  12: 714314.095 ops/s
# Warmup Iteration  13: 697132.805 ops/s
# Warmup Iteration  14: 673064.644 ops/s
# Warmup Iteration  15: 720989.675 ops/s
# Warmup Iteration  16: 743031.691 ops/s
# Warmup Iteration  17: 763271.545 ops/s
# Warmup Iteration  18: 730831.599 ops/s
# Warmup Iteration  19: 742203.202 ops/s
# Warmup Iteration  20: 742234.172 ops/s
# Warmup Iteration  21: 755365.809 ops/s
# Warmup Iteration  22: 745573.428 ops/s
# Warmup Iteration  23: 735414.811 ops/s
# Warmup Iteration  24: 737344.462 ops/s
# Warmup Iteration  25: 774067.603 ops/s
# Warmup Iteration  26: 727915.760 ops/s
# Warmup Iteration  27: 754079.396 ops/s
# Warmup Iteration  28: 745798.023 ops/s
# Warmup Iteration  29: 728209.758 ops/s
# Warmup Iteration  30: 762803.430 ops/s
Iteration   1: 730989.051 ops/s
Iteration   2: 761827.708 ops/s
Iteration   3: 775900.609 ops/s
Iteration   4: 728025.609 ops/s
Iteration   5: 759337.801 ops/s
Iteration   6: 741118.899 ops/s
Iteration   7: 746547.866 ops/s
Iteration   8: 754563.192 ops/s
Iteration   9: 729653.817 ops/s
Iteration  10: 756348.208 ops/s
Iteration  11: 776912.223 ops/s
Iteration  12: 704792.824 ops/s
Iteration  13: 541431.528 ops/s
Iteration  14: 693301.328 ops/s
Iteration  15: 776067.920 ops/s
Iteration  16: 763701.645 ops/s
Iteration  17: 744110.840 ops/s
Iteration  18: 731393.726 ops/s
Iteration  19: 774377.424 ops/s
Iteration  20: 727816.347 ops/s
Iteration  21: 784404.645 ops/s
Iteration  22: 743565.005 ops/s
Iteration  23: 754252.504 ops/s
Iteration  24: 738691.885 ops/s
Iteration  25: 764715.009 ops/s
Iteration  26: 768268.717 ops/s
Iteration  27: 746588.712 ops/s
Iteration  28: 762619.001 ops/s
Iteration  29: 731189.614 ops/s
Iteration  30: 751506.167 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_lastOrErrorError":
  742133.994 ±(99.9%) 29021.293 ops/s [Average]
  (min, avg, max) = (541431.528, 742133.994, 784404.645), stdev = 43437.709
  CI (99.9%): [713112.701, 771155.288] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
ObservableLastTest._Benchmark.benchmark_lastOrErrorError  thrpt   30  742133.994 ± 29021.293  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 644403.002 ops/s
# Warmup Iteration   2: 2855550.374 ops/s
# Warmup Iteration   3: 3712551.114 ops/s
# Warmup Iteration   4: 4551000.312 ops/s
# Warmup Iteration   5: 4682213.739 ops/s
# Warmup Iteration   6: 4555228.539 ops/s
# Warmup Iteration   7: 4568423.383 ops/s
# Warmup Iteration   8: 4551411.241 ops/s
# Warmup Iteration   9: 4555761.712 ops/s
# Warmup Iteration  10: 4515992.288 ops/s
# Warmup Iteration  11: 4723663.981 ops/s
# Warmup Iteration  12: 4329809.829 ops/s
# Warmup Iteration  13: 4725758.694 ops/s
# Warmup Iteration  14: 4603650.171 ops/s
# Warmup Iteration  15: 4636995.221 ops/s
# Warmup Iteration  16: 4485673.511 ops/s
# Warmup Iteration  17: 4566920.000 ops/s
# Warmup Iteration  18: 4719108.020 ops/s
# Warmup Iteration  19: 4479082.109 ops/s
# Warmup Iteration  20: 4675839.448 ops/s
# Warmup Iteration  21: 4519143.467 ops/s
# Warmup Iteration  22: 4450328.352 ops/s
# Warmup Iteration  23: 4596219.011 ops/s
# Warmup Iteration  24: 4479149.309 ops/s
# Warmup Iteration  25: 4656594.661 ops/s
# Warmup Iteration  26: 4495495.235 ops/s
# Warmup Iteration  27: 4576165.000 ops/s
# Warmup Iteration  28: 4597262.382 ops/s
# Warmup Iteration  29: 4674932.519 ops/s
# Warmup Iteration  30: 4635205.610 ops/s
Iteration   1: 4540362.027 ops/s
Iteration   2: 4570096.243 ops/s
Iteration   3: 4700609.084 ops/s
Iteration   4: 4473150.849 ops/s
Iteration   5: 4569020.474 ops/s
Iteration   6: 4516021.376 ops/s
Iteration   7: 4662080.365 ops/s
Iteration   8: 4686150.502 ops/s
Iteration   9: 4560904.401 ops/s
Iteration  10: 4659712.884 ops/s
Iteration  11: 4501624.264 ops/s
Iteration  12: 4731018.966 ops/s
Iteration  13: 4441863.654 ops/s
Iteration  14: 4562633.028 ops/s
Iteration  15: 4575697.696 ops/s
Iteration  16: 4568569.802 ops/s
Iteration  17: 4739492.371 ops/s
Iteration  18: 4485305.602 ops/s
Iteration  19: 4734170.909 ops/s
Iteration  20: 4537193.373 ops/s
Iteration  21: 4800763.695 ops/s
Iteration  22: 4506567.913 ops/s
Iteration  23: 4810509.332 ops/s
Iteration  24: 4594642.504 ops/s
Iteration  25: 4629504.876 ops/s
Iteration  26: 4588841.820 ops/s
Iteration  27: 4351629.968 ops/s
Iteration  28: 4615610.760 ops/s
Iteration  29: 4627281.446 ops/s
Iteration  30: 4553856.750 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fused":
  4596496.231 ±(99.9%) 70536.535 ops/s [Average]
  (min, avg, max) = (4351629.968, 4596496.231, 4810509.332), stdev = 105575.772
  CI (99.9%): [4525959.696, 4667032.766] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fused  thrpt   30  4596496.231 ± 70536.535  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withSingleErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withSingleErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 282515.554 ops/s
# Warmup Iteration   2: 590863.397 ops/s
# Warmup Iteration   3: 651207.268 ops/s
# Warmup Iteration   4: 697630.760 ops/s
# Warmup Iteration   5: 598547.942 ops/s
# Warmup Iteration   6: 715565.076 ops/s
# Warmup Iteration   7: 728846.656 ops/s
# Warmup Iteration   8: 698106.924 ops/s
# Warmup Iteration   9: 719900.136 ops/s
# Warmup Iteration  10: 747056.682 ops/s
# Warmup Iteration  11: 695960.581 ops/s
# Warmup Iteration  12: 698350.640 ops/s
# Warmup Iteration  13: 709261.540 ops/s
# Warmup Iteration  14: 748095.008 ops/s
# Warmup Iteration  15: 683333.854 ops/s
# Warmup Iteration  16: 710830.564 ops/s
# Warmup Iteration  17: 786275.028 ops/s
# Warmup Iteration  18: 736889.882 ops/s
# Warmup Iteration  19: 769198.673 ops/s
# Warmup Iteration  20: 776550.618 ops/s
# Warmup Iteration  21: 722676.231 ops/s
# Warmup Iteration  22: 765942.789 ops/s
# Warmup Iteration  23: 766585.754 ops/s
# Warmup Iteration  24: 741290.534 ops/s
# Warmup Iteration  25: 711166.142 ops/s
# Warmup Iteration  26: 748184.762 ops/s
# Warmup Iteration  27: 755053.946 ops/s
# Warmup Iteration  28: 755365.886 ops/s
# Warmup Iteration  29: 767135.666 ops/s
# Warmup Iteration  30: 748214.266 ops/s
Iteration   1: 768068.441 ops/s
Iteration   2: 738312.042 ops/s
Iteration   3: 760668.060 ops/s
Iteration   4: 747486.307 ops/s
Iteration   5: 735848.651 ops/s
Iteration   6: 756502.797 ops/s
Iteration   7: 777927.439 ops/s
Iteration   8: 574002.538 ops/s
Iteration   9: 737657.974 ops/s
Iteration  10: 768066.538 ops/s
Iteration  11: 777809.034 ops/s
Iteration  12: 731205.655 ops/s
Iteration  13: 761347.281 ops/s
Iteration  14: 749363.672 ops/s
Iteration  15: 751981.358 ops/s
Iteration  16: 782694.654 ops/s
Iteration  17: 750546.742 ops/s
Iteration  18: 742099.275 ops/s
Iteration  19: 746980.233 ops/s
Iteration  20: 733230.578 ops/s
Iteration  21: 765328.180 ops/s
Iteration  22: 768953.047 ops/s
Iteration  23: 743693.862 ops/s
Iteration  24: 762417.384 ops/s
Iteration  25: 764279.394 ops/s
Iteration  26: 727612.942 ops/s
Iteration  27: 766487.698 ops/s
Iteration  28: 734274.584 ops/s
Iteration  29: 764503.953 ops/s
Iteration  30: 728233.761 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withSingleErrors":
  747252.802 ±(99.9%) 24251.938 ops/s [Average]
  (min, avg, max) = (574002.538, 747252.802, 782694.654), stdev = 36299.161
  CI (99.9%): [723000.865, 771504.740] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
SingleDelayTest._Benchmark.benchmark_withSingleErrors  thrpt   30  747252.802 ± 24251.938  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_errorObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_errorObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229049.443 ops/s
# Warmup Iteration   2: 559903.543 ops/s
# Warmup Iteration   3: 647655.767 ops/s
# Warmup Iteration   4: 704755.859 ops/s
# Warmup Iteration   5: 710037.601 ops/s
# Warmup Iteration   6: 695193.466 ops/s
# Warmup Iteration   7: 705264.752 ops/s
# Warmup Iteration   8: 733649.302 ops/s
# Warmup Iteration   9: 687535.937 ops/s
# Warmup Iteration  10: 724067.622 ops/s
# Warmup Iteration  11: 698544.786 ops/s
# Warmup Iteration  12: 681380.766 ops/s
# Warmup Iteration  13: 732022.911 ops/s
# Warmup Iteration  14: 690982.683 ops/s
# Warmup Iteration  15: 703272.272 ops/s
# Warmup Iteration  16: 716059.755 ops/s
# Warmup Iteration  17: 753327.501 ops/s
# Warmup Iteration  18: 795330.588 ops/s
# Warmup Iteration  19: 741759.497 ops/s
# Warmup Iteration  20: 756803.089 ops/s
# Warmup Iteration  21: 727655.535 ops/s
# Warmup Iteration  22: 747011.469 ops/s
# Warmup Iteration  23: 765942.637 ops/s
# Warmup Iteration  24: 709378.574 ops/s
# Warmup Iteration  25: 744790.821 ops/s
# Warmup Iteration  26: 749589.402 ops/s
# Warmup Iteration  27: 748711.809 ops/s
# Warmup Iteration  28: 778095.875 ops/s
# Warmup Iteration  29: 729112.444 ops/s
# Warmup Iteration  30: 775146.733 ops/s
Iteration   1: 752301.097 ops/s
Iteration   2: 773707.437 ops/s
Iteration   3: 737921.170 ops/s
Iteration   4: 763908.104 ops/s
Iteration   5: 751369.809 ops/s
Iteration   6: 752266.574 ops/s
Iteration   7: 761308.519 ops/s
Iteration   8: 748576.254 ops/s
Iteration   9: 747459.396 ops/s
Iteration  10: 731116.040 ops/s
Iteration  11: 688111.516 ops/s
Iteration  12: 782051.975 ops/s
Iteration  13: 727810.170 ops/s
Iteration  14: 751788.507 ops/s
Iteration  15: 742184.699 ops/s
Iteration  16: 780653.122 ops/s
Iteration  17: 751838.409 ops/s
Iteration  18: 748515.759 ops/s
Iteration  19: 788300.015 ops/s
Iteration  20: 721485.278 ops/s
Iteration  21: 780034.709 ops/s
Iteration  22: 749100.291 ops/s
Iteration  23: 752406.434 ops/s
Iteration  24: 738178.762 ops/s
Iteration  25: 760293.318 ops/s
Iteration  26: 744222.843 ops/s
Iteration  27: 746217.907 ops/s
Iteration  28: 783893.088 ops/s
Iteration  29: 717568.161 ops/s
Iteration  30: 765072.461 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_errorObservable":
  751322.061 ±(99.9%) 14480.823 ops/s [Average]
  (min, avg, max) = (688111.516, 751322.061, 788300.015), stdev = 21674.216
  CI (99.9%): [736841.238, 765802.884] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableElementAtTest._Benchmark.benchmark_errorObservable  thrpt   30  751322.061 ± 14480.823  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_cancelMainOnOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_cancelMainOnOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81535.199 ops/s
# Warmup Iteration   2: 322786.721 ops/s
# Warmup Iteration   3: 598946.923 ops/s
# Warmup Iteration   4: 616921.651 ops/s
# Warmup Iteration   5: 610799.350 ops/s
# Warmup Iteration   6: 593201.299 ops/s
# Warmup Iteration   7: 601413.828 ops/s
# Warmup Iteration   8: 570479.789 ops/s
# Warmup Iteration   9: 603128.498 ops/s
# Warmup Iteration  10: 570540.862 ops/s
# Warmup Iteration  11: 603207.464 ops/s
# Warmup Iteration  12: 637254.797 ops/s
# Warmup Iteration  13: 606727.019 ops/s
# Warmup Iteration  14: 622799.926 ops/s
# Warmup Iteration  15: 611244.847 ops/s
# Warmup Iteration  16: 615748.865 ops/s
# Warmup Iteration  17: 650947.065 ops/s
# Warmup Iteration  18: 623721.135 ops/s
# Warmup Iteration  19: 623016.578 ops/s
# Warmup Iteration  20: 650266.420 ops/s
# Warmup Iteration  21: 623629.112 ops/s
# Warmup Iteration  22: 636115.645 ops/s
# Warmup Iteration  23: 617971.253 ops/s
# Warmup Iteration  24: 622661.655 ops/s
# Warmup Iteration  25: 626738.788 ops/s
# Warmup Iteration  26: 624871.336 ops/s
# Warmup Iteration  27: 643823.524 ops/s
# Warmup Iteration  28: 634317.221 ops/s
# Warmup Iteration  29: 664339.444 ops/s
# Warmup Iteration  30: 631732.186 ops/s
Iteration   1: 630783.304 ops/s
Iteration   2: 661726.929 ops/s
Iteration   3: 488290.350 ops/s
Iteration   4: 617211.428 ops/s
Iteration   5: 640006.258 ops/s
Iteration   6: 664702.115 ops/s
Iteration   7: 622043.229 ops/s
Iteration   8: 629291.518 ops/s
Iteration   9: 628327.951 ops/s
Iteration  10: 641267.040 ops/s
Iteration  11: 640450.940 ops/s
Iteration  12: 650226.635 ops/s
Iteration  13: 620888.158 ops/s
Iteration  14: 645351.173 ops/s
Iteration  15: 627519.950 ops/s
Iteration  16: 669816.933 ops/s
Iteration  17: 619071.445 ops/s
Iteration  18: 638788.078 ops/s
Iteration  19: 633852.900 ops/s
Iteration  20: 656499.025 ops/s
Iteration  21: 627838.760 ops/s
Iteration  22: 651415.563 ops/s
Iteration  23: 617743.054 ops/s
Iteration  24: 663566.222 ops/s
Iteration  25: 633153.588 ops/s
Iteration  26: 627173.171 ops/s
Iteration  27: 660891.414 ops/s
Iteration  28: 630402.423 ops/s
Iteration  29: 642132.444 ops/s
Iteration  30: 612441.211 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_cancelMainOnOtherError":
  633095.774 ±(99.9%) 21117.806 ops/s [Average]
  (min, avg, max) = (488290.350, 633095.774, 669816.933), stdev = 31608.140
  CI (99.9%): [611977.968, 654213.579] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_cancelMainOnOtherError  thrpt   30  633095.774 ± 21117.806  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_cancelOtherOnMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_cancelOtherOnMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95152.283 ops/s
# Warmup Iteration   2: 475465.024 ops/s
# Warmup Iteration   3: 585271.690 ops/s
# Warmup Iteration   4: 540542.125 ops/s
# Warmup Iteration   5: 629231.165 ops/s
# Warmup Iteration   6: 591554.958 ops/s
# Warmup Iteration   7: 570096.758 ops/s
# Warmup Iteration   8: 558167.855 ops/s
# Warmup Iteration   9: 595687.956 ops/s
# Warmup Iteration  10: 631187.121 ops/s
# Warmup Iteration  11: 589419.727 ops/s
# Warmup Iteration  12: 620563.992 ops/s
# Warmup Iteration  13: 631104.766 ops/s
# Warmup Iteration  14: 614117.184 ops/s
# Warmup Iteration  15: 599845.506 ops/s
# Warmup Iteration  16: 629272.879 ops/s
# Warmup Iteration  17: 634900.992 ops/s
# Warmup Iteration  18: 669041.702 ops/s
# Warmup Iteration  19: 626871.320 ops/s
# Warmup Iteration  20: 651646.691 ops/s
# Warmup Iteration  21: 668239.805 ops/s
# Warmup Iteration  22: 636200.857 ops/s
# Warmup Iteration  23: 662096.510 ops/s
# Warmup Iteration  24: 630046.349 ops/s
# Warmup Iteration  25: 640406.092 ops/s
# Warmup Iteration  26: 631687.702 ops/s
# Warmup Iteration  27: 652641.170 ops/s
# Warmup Iteration  28: 635414.108 ops/s
# Warmup Iteration  29: 658397.256 ops/s
# Warmup Iteration  30: 664169.525 ops/s
Iteration   1: 655114.422 ops/s
Iteration   2: 641634.109 ops/s
Iteration   3: 656552.779 ops/s
Iteration   4: 652146.222 ops/s
Iteration   5: 649909.274 ops/s
Iteration   6: 666186.073 ops/s
Iteration   7: 652520.921 ops/s
Iteration   8: 634189.488 ops/s
Iteration   9: 666933.351 ops/s
Iteration  10: 640587.479 ops/s
Iteration  11: 648553.964 ops/s
Iteration  12: 660480.830 ops/s
Iteration  13: 637596.449 ops/s
Iteration  14: 663221.043 ops/s
Iteration  15: 652777.570 ops/s
Iteration  16: 640401.399 ops/s
Iteration  17: 662643.862 ops/s
Iteration  18: 629799.582 ops/s
Iteration  19: 633168.566 ops/s
Iteration  20: 663902.927 ops/s
Iteration  21: 653861.411 ops/s
Iteration  22: 652258.066 ops/s
Iteration  23: 666731.862 ops/s
Iteration  24: 645285.824 ops/s
Iteration  25: 671776.889 ops/s
Iteration  26: 680507.975 ops/s
Iteration  27: 643369.858 ops/s
Iteration  28: 640165.440 ops/s
Iteration  29: 634076.391 ops/s
Iteration  30: 649807.734 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_cancelOtherOnMainError":
  651538.725 ±(99.9%) 8480.756 ops/s [Average]
  (min, avg, max) = (629799.582, 651538.725, 680507.975), stdev = 12693.598
  CI (99.9%): [643057.969, 660019.482] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_cancelOtherOnMainError  thrpt   30  651538.725 ± 8480.756  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 164546.878 ops/s
# Warmup Iteration   2: 842266.325 ops/s
# Warmup Iteration   3: 1275637.165 ops/s
# Warmup Iteration   4: 1566935.599 ops/s
# Warmup Iteration   5: 1568172.425 ops/s
# Warmup Iteration   6: 1549231.867 ops/s
# Warmup Iteration   7: 1491161.601 ops/s
# Warmup Iteration   8: 1572593.491 ops/s
# Warmup Iteration   9: 1489409.211 ops/s
# Warmup Iteration  10: 1526373.436 ops/s
# Warmup Iteration  11: 1545045.849 ops/s
# Warmup Iteration  12: 1543687.389 ops/s
# Warmup Iteration  13: 1568825.910 ops/s
# Warmup Iteration  14: 1494947.281 ops/s
# Warmup Iteration  15: 1574743.000 ops/s
# Warmup Iteration  16: 1592942.115 ops/s
# Warmup Iteration  17: 1469479.754 ops/s
# Warmup Iteration  18: 1556997.631 ops/s
# Warmup Iteration  19: 1518421.472 ops/s
# Warmup Iteration  20: 1579720.997 ops/s
# Warmup Iteration  21: 1516685.779 ops/s
# Warmup Iteration  22: 1488698.727 ops/s
# Warmup Iteration  23: 1549327.205 ops/s
# Warmup Iteration  24: 1492207.754 ops/s
# Warmup Iteration  25: 1539860.602 ops/s
# Warmup Iteration  26: 1555938.113 ops/s
# Warmup Iteration  27: 1259138.521 ops/s
# Warmup Iteration  28: 1499141.077 ops/s
# Warmup Iteration  29: 1584348.176 ops/s
# Warmup Iteration  30: 1475657.063 ops/s
Iteration   1: 1596528.443 ops/s
Iteration   2: 1500379.936 ops/s
Iteration   3: 1515405.424 ops/s
Iteration   4: 1588474.565 ops/s
Iteration   5: 1450047.705 ops/s
Iteration   6: 1505845.790 ops/s
Iteration   7: 1580855.661 ops/s
Iteration   8: 1468645.577 ops/s
Iteration   9: 1535903.761 ops/s
Iteration  10: 1567186.231 ops/s
Iteration  11: 1503795.474 ops/s
Iteration  12: 1506960.978 ops/s
Iteration  13: 1586825.613 ops/s
Iteration  14: 1449143.368 ops/s
Iteration  15: 1500639.173 ops/s
Iteration  16: 1561589.653 ops/s
Iteration  17: 1493997.289 ops/s
Iteration  18: 1564045.006 ops/s
Iteration  19: 1528972.231 ops/s
Iteration  20: 1529250.949 ops/s
Iteration  21: 1544901.852 ops/s
Iteration  22: 1567110.050 ops/s
Iteration  23: 1559249.174 ops/s
Iteration  24: 1479119.292 ops/s
Iteration  25: 1532575.545 ops/s
Iteration  26: 1533458.434 ops/s
Iteration  27: 1528864.928 ops/s
Iteration  28: 1559826.584 ops/s
Iteration  29: 1497778.822 ops/s
Iteration  30: 1607399.560 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothEmpty":
  1531492.569 ±(99.9%) 28263.024 ops/s [Average]
  (min, avg, max) = (1449143.368, 1531492.569, 1607399.560), stdev = 42302.767
  CI (99.9%): [1503229.545, 1559755.593] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_bothEmpty  thrpt   30  1531492.569 ± 28263.024  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onErrorMainOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onErrorMainOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32071.032 ops/s
# Warmup Iteration   2: 118339.116 ops/s
# Warmup Iteration   3: 164149.767 ops/s
# Warmup Iteration   4: 183886.819 ops/s
# Warmup Iteration   5: 164617.639 ops/s
# Warmup Iteration   6: 187457.438 ops/s
# Warmup Iteration   7: 189335.792 ops/s
# Warmup Iteration   8: 197741.650 ops/s
# Warmup Iteration   9: 197155.265 ops/s
# Warmup Iteration  10: 178466.194 ops/s
# Warmup Iteration  11: 189174.813 ops/s
# Warmup Iteration  12: 189897.686 ops/s
# Warmup Iteration  13: 191984.383 ops/s
# Warmup Iteration  14: 190187.922 ops/s
# Warmup Iteration  15: 186519.184 ops/s
# Warmup Iteration  16: 197065.131 ops/s
# Warmup Iteration  17: 194017.207 ops/s
# Warmup Iteration  18: 201895.649 ops/s
# Warmup Iteration  19: 204155.113 ops/s
# Warmup Iteration  20: 199970.188 ops/s
# Warmup Iteration  21: 202340.779 ops/s
# Warmup Iteration  22: 204369.267 ops/s
# Warmup Iteration  23: 194554.666 ops/s
# Warmup Iteration  24: 202273.871 ops/s
# Warmup Iteration  25: 198093.223 ops/s
# Warmup Iteration  26: 198301.172 ops/s
# Warmup Iteration  27: 201716.949 ops/s
# Warmup Iteration  28: 196261.923 ops/s
# Warmup Iteration  29: 198761.651 ops/s
# Warmup Iteration  30: 205128.254 ops/s
Iteration   1: 196279.519 ops/s
Iteration   2: 202148.141 ops/s
Iteration   3: 195351.503 ops/s
Iteration   4: 204508.322 ops/s
Iteration   5: 205373.613 ops/s
Iteration   6: 193955.455 ops/s
Iteration   7: 204265.381 ops/s
Iteration   8: 192583.186 ops/s
Iteration   9: 201079.092 ops/s
Iteration  10: 199251.458 ops/s
Iteration  11: 195700.698 ops/s
Iteration  12: 202659.755 ops/s
Iteration  13: 200049.839 ops/s
Iteration  14: 194753.834 ops/s
Iteration  15: 192189.020 ops/s
Iteration  16: 189697.724 ops/s
Iteration  17: 198667.449 ops/s
Iteration  18: 196716.276 ops/s
Iteration  19: 199844.838 ops/s
Iteration  20: 196626.080 ops/s
Iteration  21: 203309.860 ops/s
Iteration  22: 204000.292 ops/s
Iteration  23: 192342.889 ops/s
Iteration  24: 202213.110 ops/s
Iteration  25: 199761.546 ops/s
Iteration  26: 204588.791 ops/s
Iteration  27: 208549.357 ops/s
Iteration  28: 192860.093 ops/s
Iteration  29: 200121.921 ops/s
Iteration  30: 191231.460 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onErrorMainOverflow":
  198689.350 ±(99.9%) 3296.420 ops/s [Average]
  (min, avg, max) = (189697.724, 198689.350, 208549.357), stdev = 4933.926
  CI (99.9%): [195392.930, 201985.770] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_onErrorMainOverflow  thrpt   30  198689.350 ± 3296.420  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_errorConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_errorConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 248592.053 ops/s
# Warmup Iteration   2: 595112.680 ops/s
# Warmup Iteration   3: 617240.835 ops/s
# Warmup Iteration   4: 702703.091 ops/s
# Warmup Iteration   5: 615335.948 ops/s
# Warmup Iteration   6: 669646.013 ops/s
# Warmup Iteration   7: 722025.266 ops/s
# Warmup Iteration   8: 677622.323 ops/s
# Warmup Iteration   9: 708243.841 ops/s
# Warmup Iteration  10: 680538.205 ops/s
# Warmup Iteration  11: 693480.587 ops/s
# Warmup Iteration  12: 726047.516 ops/s
# Warmup Iteration  13: 685910.477 ops/s
# Warmup Iteration  14: 684584.399 ops/s
# Warmup Iteration  15: 711383.019 ops/s
# Warmup Iteration  16: 697052.917 ops/s
# Warmup Iteration  17: 756595.773 ops/s
# Warmup Iteration  18: 768260.366 ops/s
# Warmup Iteration  19: 717260.184 ops/s
# Warmup Iteration  20: 707988.597 ops/s
# Warmup Iteration  21: 754521.579 ops/s
# Warmup Iteration  22: 588061.544 ops/s
# Warmup Iteration  23: 738214.161 ops/s
# Warmup Iteration  24: 724041.319 ops/s
# Warmup Iteration  25: 740262.639 ops/s
# Warmup Iteration  26: 717472.091 ops/s
# Warmup Iteration  27: 731024.675 ops/s
# Warmup Iteration  28: 748487.413 ops/s
# Warmup Iteration  29: 725079.480 ops/s
# Warmup Iteration  30: 735495.187 ops/s
Iteration   1: 736364.347 ops/s
Iteration   2: 733011.458 ops/s
Iteration   3: 760070.350 ops/s
Iteration   4: 718290.121 ops/s
Iteration   5: 727311.648 ops/s
Iteration   6: 762621.097 ops/s
Iteration   7: 688338.283 ops/s
Iteration   8: 753139.500 ops/s
Iteration   9: 725347.127 ops/s
Iteration  10: 761248.431 ops/s
Iteration  11: 712820.016 ops/s
Iteration  12: 738648.350 ops/s
Iteration  13: 719273.005 ops/s
Iteration  14: 742071.708 ops/s
Iteration  15: 717594.274 ops/s
Iteration  16: 759307.828 ops/s
Iteration  17: 728791.493 ops/s
Iteration  18: 748063.984 ops/s
Iteration  19: 726069.931 ops/s
Iteration  20: 739843.100 ops/s
Iteration  21: 762529.516 ops/s
Iteration  22: 699311.757 ops/s
Iteration  23: 741725.830 ops/s
Iteration  24: 711125.622 ops/s
Iteration  25: 733441.995 ops/s
Iteration  26: 714896.675 ops/s
Iteration  27: 742367.290 ops/s
Iteration  28: 741112.188 ops/s
Iteration  29: 713411.598 ops/s
Iteration  30: 731990.791 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_errorConditional":
  733004.644 ±(99.9%) 12733.243 ops/s [Average]
  (min, avg, max) = (688338.283, 733004.644, 762621.097), stdev = 19058.521
  CI (99.9%): [720271.400, 745737.887] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
SingleDoAfterSuccessTest._Benchmark.benchmark_errorConditional  thrpt   30  733004.644 ± 12733.243  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_errorEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_errorEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 253214.131 ops/s
# Warmup Iteration   2: 585194.187 ops/s
# Warmup Iteration   3: 589687.786 ops/s
# Warmup Iteration   4: 681946.432 ops/s
# Warmup Iteration   5: 611246.943 ops/s
# Warmup Iteration   6: 669479.767 ops/s
# Warmup Iteration   7: 697402.448 ops/s
# Warmup Iteration   8: 696226.834 ops/s
# Warmup Iteration   9: 667983.768 ops/s
# Warmup Iteration  10: 710914.322 ops/s
# Warmup Iteration  11: 664581.760 ops/s
# Warmup Iteration  12: 701210.348 ops/s
# Warmup Iteration  13: 704917.855 ops/s
# Warmup Iteration  14: 668580.880 ops/s
# Warmup Iteration  15: 727098.794 ops/s
# Warmup Iteration  16: 666603.757 ops/s
# Warmup Iteration  17: 736321.922 ops/s
# Warmup Iteration  18: 714576.342 ops/s
# Warmup Iteration  19: 714384.788 ops/s
# Warmup Iteration  20: 742055.189 ops/s
# Warmup Iteration  21: 719757.829 ops/s
# Warmup Iteration  22: 752241.005 ops/s
# Warmup Iteration  23: 710104.740 ops/s
# Warmup Iteration  24: 701243.658 ops/s
# Warmup Iteration  25: 765057.855 ops/s
# Warmup Iteration  26: 744451.504 ops/s
# Warmup Iteration  27: 705312.006 ops/s
# Warmup Iteration  28: 710355.545 ops/s
# Warmup Iteration  29: 732288.024 ops/s
# Warmup Iteration  30: 710493.914 ops/s
Iteration   1: 728646.152 ops/s
Iteration   2: 711953.247 ops/s
Iteration   3: 693863.818 ops/s
Iteration   4: 737659.792 ops/s
Iteration   5: 707509.661 ops/s
Iteration   6: 712534.233 ops/s
Iteration   7: 757519.964 ops/s
Iteration   8: 672956.352 ops/s
Iteration   9: 746441.846 ops/s
Iteration  10: 693674.438 ops/s
Iteration  11: 719181.760 ops/s
Iteration  12: 715648.396 ops/s
Iteration  13: 710842.185 ops/s
Iteration  14: 719806.515 ops/s
Iteration  15: 707528.155 ops/s
Iteration  16: 719010.077 ops/s
Iteration  17: 755957.935 ops/s
Iteration  18: 700073.591 ops/s
Iteration  19: 741002.259 ops/s
Iteration  20: 709739.715 ops/s
Iteration  21: 730316.189 ops/s
Iteration  22: 737464.561 ops/s
Iteration  23: 710857.464 ops/s
Iteration  24: 738990.007 ops/s
Iteration  25: 714250.025 ops/s
Iteration  26: 735482.304 ops/s
Iteration  27: 704231.215 ops/s
Iteration  28: 719704.215 ops/s
Iteration  29: 729764.557 ops/s
Iteration  30: 708036.267 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_errorEager":
  719688.230 ±(99.9%) 12693.798 ops/s [Average]
  (min, avg, max) = (672956.352, 719688.230, 757519.964), stdev = 18999.480
  CI (99.9%): [706994.432, 732382.028] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
SingleUsingTest._Benchmark.benchmark_errorEager  thrpt   30  719688.230 ± 12693.798  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeArrayOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeArrayOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 179098.824 ops/s
# Warmup Iteration   2: 449450.130 ops/s
# Warmup Iteration   3: 531066.627 ops/s
# Warmup Iteration   4: 435317.448 ops/s
# Warmup Iteration   5: 550260.821 ops/s
# Warmup Iteration   6: 478934.016 ops/s
# Warmup Iteration   7: 530702.745 ops/s
# Warmup Iteration   8: 545191.452 ops/s
# Warmup Iteration   9: 535262.827 ops/s
# Warmup Iteration  10: 514721.798 ops/s
# Warmup Iteration  11: 529689.511 ops/s
# Warmup Iteration  12: 527332.662 ops/s
# Warmup Iteration  13: 552288.432 ops/s
# Warmup Iteration  14: 549071.566 ops/s
# Warmup Iteration  15: 520336.370 ops/s
# Warmup Iteration  16: 544653.082 ops/s
# Warmup Iteration  17: 443656.375 ops/s
# Warmup Iteration  18: 542966.236 ops/s
# Warmup Iteration  19: 549857.180 ops/s
# Warmup Iteration  20: 543276.238 ops/s
# Warmup Iteration  21: 556952.714 ops/s
# Warmup Iteration  22: 543660.899 ops/s
# Warmup Iteration  23: 563083.143 ops/s
# Warmup Iteration  24: 549373.830 ops/s
# Warmup Iteration  25: 566542.030 ops/s
# Warmup Iteration  26: 544036.588 ops/s
# Warmup Iteration  27: 550555.922 ops/s
# Warmup Iteration  28: 548904.767 ops/s
# Warmup Iteration  29: 554928.505 ops/s
# Warmup Iteration  30: 569746.378 ops/s
Iteration   1: 554491.576 ops/s
Iteration   2: 556436.900 ops/s
Iteration   3: 543537.855 ops/s
Iteration   4: 549884.606 ops/s
Iteration   5: 553833.048 ops/s
Iteration   6: 567251.137 ops/s
Iteration   7: 547313.029 ops/s
Iteration   8: 538503.411 ops/s
Iteration   9: 581206.686 ops/s
Iteration  10: 532105.112 ops/s
Iteration  11: 569035.456 ops/s
Iteration  12: 547645.182 ops/s
Iteration  13: 550404.898 ops/s
Iteration  14: 562112.439 ops/s
Iteration  15: 554370.865 ops/s
Iteration  16: 537289.370 ops/s
Iteration  17: 565002.920 ops/s
Iteration  18: 542409.089 ops/s
Iteration  19: 561087.031 ops/s
Iteration  20: 555395.551 ops/s
Iteration  21: 547141.829 ops/s
Iteration  22: 558142.535 ops/s
Iteration  23: 547071.894 ops/s
Iteration  24: 554212.215 ops/s
Iteration  25: 562985.938 ops/s
Iteration  26: 545134.388 ops/s
Iteration  27: 548956.673 ops/s
Iteration  28: 556224.528 ops/s
Iteration  29: 558487.980 ops/s
Iteration  30: 540196.644 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeArrayOneIsNull":
  552929.026 ±(99.9%) 7043.413 ops/s [Average]
  (min, avg, max) = (532105.112, 552929.026, 581206.686), stdev = 10542.250
  CI (99.9%): [545885.613, 559972.439] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_mergeArrayOneIsNull  thrpt   30  552929.026 ± 7043.413  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeDelayErrorArrayOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeDelayErrorArrayOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135628.607 ops/s
# Warmup Iteration   2: 475242.547 ops/s
# Warmup Iteration   3: 512874.784 ops/s
# Warmup Iteration   4: 520665.456 ops/s
# Warmup Iteration   5: 541330.811 ops/s
# Warmup Iteration   6: 531358.105 ops/s
# Warmup Iteration   7: 534880.974 ops/s
# Warmup Iteration   8: 559100.248 ops/s
# Warmup Iteration   9: 542012.444 ops/s
# Warmup Iteration  10: 521676.511 ops/s
# Warmup Iteration  11: 535733.178 ops/s
# Warmup Iteration  12: 523573.694 ops/s
# Warmup Iteration  13: 541630.782 ops/s
# Warmup Iteration  14: 542955.936 ops/s
# Warmup Iteration  15: 534044.979 ops/s
# Warmup Iteration  16: 538989.337 ops/s
# Warmup Iteration  17: 543113.821 ops/s
# Warmup Iteration  18: 553850.954 ops/s
# Warmup Iteration  19: 571594.495 ops/s
# Warmup Iteration  20: 554024.290 ops/s
# Warmup Iteration  21: 557815.543 ops/s
# Warmup Iteration  22: 558609.856 ops/s
# Warmup Iteration  23: 547718.912 ops/s
# Warmup Iteration  24: 565822.675 ops/s
# Warmup Iteration  25: 538380.745 ops/s
# Warmup Iteration  26: 552292.759 ops/s
# Warmup Iteration  27: 572859.149 ops/s
# Warmup Iteration  28: 528840.744 ops/s
# Warmup Iteration  29: 558947.436 ops/s
# Warmup Iteration  30: 527468.382 ops/s
Iteration   1: 560088.441 ops/s
Iteration   2: 577898.087 ops/s
Iteration   3: 541659.848 ops/s
Iteration   4: 567336.199 ops/s
Iteration   5: 556111.206 ops/s
Iteration   6: 538270.283 ops/s
Iteration   7: 588919.629 ops/s
Iteration   8: 548738.633 ops/s
Iteration   9: 568742.952 ops/s
Iteration  10: 544496.418 ops/s
Iteration  11: 581346.513 ops/s
Iteration  12: 579702.025 ops/s
Iteration  13: 547397.254 ops/s
Iteration  14: 548571.469 ops/s
Iteration  15: 557360.101 ops/s
Iteration  16: 552818.805 ops/s
Iteration  17: 573966.345 ops/s
Iteration  18: 549405.536 ops/s
Iteration  19: 575619.970 ops/s
Iteration  20: 564379.924 ops/s
Iteration  21: 562087.985 ops/s
Iteration  22: 550517.490 ops/s
Iteration  23: 557181.779 ops/s
Iteration  24: 563241.704 ops/s
Iteration  25: 569859.040 ops/s
Iteration  26: 547711.581 ops/s
Iteration  27: 553331.735 ops/s
Iteration  28: 546702.669 ops/s
Iteration  29: 550728.695 ops/s
Iteration  30: 574043.425 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_mergeDelayErrorArrayOneIsNull":
  559941.191 ±(99.9%) 8864.716 ops/s [Average]
  (min, avg, max) = (538270.283, 559941.191, 588919.629), stdev = 13268.291
  CI (99.9%): [551076.475, 568805.908] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_mergeDelayErrorArrayOneIsNull  thrpt   30  559941.191 ± 8864.716  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNullHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNullHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 77568.905 ops/s
# Warmup Iteration   2: 311182.256 ops/s
# Warmup Iteration   3: 403614.121 ops/s
# Warmup Iteration   4: 419715.624 ops/s
# Warmup Iteration   5: 390877.069 ops/s
# Warmup Iteration   6: 424091.712 ops/s
# Warmup Iteration   7: 411380.139 ops/s
# Warmup Iteration   8: 414949.680 ops/s
# Warmup Iteration   9: 417146.206 ops/s
# Warmup Iteration  10: 407322.960 ops/s
# Warmup Iteration  11: 311169.888 ops/s
# Warmup Iteration  12: 406520.365 ops/s
# Warmup Iteration  13: 404032.288 ops/s
# Warmup Iteration  14: 428497.826 ops/s
# Warmup Iteration  15: 408700.181 ops/s
# Warmup Iteration  16: 424974.962 ops/s
# Warmup Iteration  17: 489036.301 ops/s
# Warmup Iteration  18: 475708.025 ops/s
# Warmup Iteration  19: 498921.042 ops/s
# Warmup Iteration  20: 475215.409 ops/s
# Warmup Iteration  21: 499332.239 ops/s
# Warmup Iteration  22: 492326.542 ops/s
# Warmup Iteration  23: 476528.503 ops/s
# Warmup Iteration  24: 508488.953 ops/s
# Warmup Iteration  25: 506952.612 ops/s
# Warmup Iteration  26: 496597.470 ops/s
# Warmup Iteration  27: 502672.299 ops/s
# Warmup Iteration  28: 478947.796 ops/s
# Warmup Iteration  29: 497523.127 ops/s
# Warmup Iteration  30: 492056.027 ops/s
Iteration   1: 483989.807 ops/s
Iteration   2: 500391.330 ops/s
Iteration   3: 496576.870 ops/s
Iteration   4: 502089.447 ops/s
Iteration   5: 499596.379 ops/s
Iteration   6: 488483.081 ops/s
Iteration   7: 499070.034 ops/s
Iteration   8: 504498.035 ops/s
Iteration   9: 491797.439 ops/s
Iteration  10: 496230.512 ops/s
Iteration  11: 492816.189 ops/s
Iteration  12: 511186.950 ops/s
Iteration  13: 498970.221 ops/s
Iteration  14: 502310.319 ops/s
Iteration  15: 480284.799 ops/s
Iteration  16: 504829.052 ops/s
Iteration  17: 489848.830 ops/s
Iteration  18: 497038.939 ops/s
Iteration  19: 485346.733 ops/s
Iteration  20: 482511.498 ops/s
Iteration  21: 490384.468 ops/s
Iteration  22: 510763.143 ops/s
Iteration  23: 489210.684 ops/s
Iteration  24: 485839.458 ops/s
Iteration  25: 504601.871 ops/s
Iteration  26: 490295.450 ops/s
Iteration  27: 505097.175 ops/s
Iteration  28: 481680.098 ops/s
Iteration  29: 505279.499 ops/s
Iteration  30: 508610.895 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNullHidden":
  495987.640 ±(99.9%) 6022.908 ops/s [Average]
  (min, avg, max) = (480284.799, 495987.640, 511186.950), stdev = 9014.805
  CI (99.9%): [489964.733, 502010.548] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapNullHidden  thrpt   30  495987.640 ± 6022.908  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapNullHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapNullHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75242.854 ops/s
# Warmup Iteration   2: 315634.250 ops/s
# Warmup Iteration   3: 404282.327 ops/s
# Warmup Iteration   4: 406106.561 ops/s
# Warmup Iteration   5: 420537.717 ops/s
# Warmup Iteration   6: 406759.225 ops/s
# Warmup Iteration   7: 402580.094 ops/s
# Warmup Iteration   8: 424412.968 ops/s
# Warmup Iteration   9: 408716.181 ops/s
# Warmup Iteration  10: 419106.596 ops/s
# Warmup Iteration  11: 427281.349 ops/s
# Warmup Iteration  12: 407755.417 ops/s
# Warmup Iteration  13: 411713.837 ops/s
# Warmup Iteration  14: 430399.170 ops/s
# Warmup Iteration  15: 414977.211 ops/s
# Warmup Iteration  16: 431400.209 ops/s
# Warmup Iteration  17: 476003.383 ops/s
# Warmup Iteration  18: 510255.844 ops/s
# Warmup Iteration  19: 498273.986 ops/s
# Warmup Iteration  20: 477589.573 ops/s
# Warmup Iteration  21: 509121.869 ops/s
# Warmup Iteration  22: 481040.309 ops/s
# Warmup Iteration  23: 497472.571 ops/s
# Warmup Iteration  24: 508941.535 ops/s
# Warmup Iteration  25: 481860.355 ops/s
# Warmup Iteration  26: 497719.688 ops/s
# Warmup Iteration  27: 501452.413 ops/s
# Warmup Iteration  28: 479088.794 ops/s
# Warmup Iteration  29: 513386.816 ops/s
# Warmup Iteration  30: 483571.310 ops/s
Iteration   1: 490266.583 ops/s
Iteration   2: 507231.415 ops/s
Iteration   3: 476921.708 ops/s
Iteration   4: 482960.161 ops/s
Iteration   5: 502519.081 ops/s
Iteration   6: 495675.300 ops/s
Iteration   7: 506762.355 ops/s
Iteration   8: 503190.099 ops/s
Iteration   9: 480808.315 ops/s
Iteration  10: 517766.291 ops/s
Iteration  11: 487597.182 ops/s
Iteration  12: 497010.795 ops/s
Iteration  13: 494212.451 ops/s
Iteration  14: 486663.949 ops/s
Iteration  15: 497550.531 ops/s
Iteration  16: 504024.448 ops/s
Iteration  17: 489213.249 ops/s
Iteration  18: 508581.869 ops/s
Iteration  19: 473400.400 ops/s
Iteration  20: 522324.272 ops/s
Iteration  21: 515202.027 ops/s
Iteration  22: 477392.548 ops/s
Iteration  23: 498732.082 ops/s
Iteration  24: 494452.055 ops/s
Iteration  25: 489245.516 ops/s
Iteration  26: 463521.361 ops/s
Iteration  27: 488442.211 ops/s
Iteration  28: 516601.784 ops/s
Iteration  29: 483033.302 ops/s
Iteration  30: 502338.772 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapNullHidden":
  495121.404 ±(99.9%) 9396.752 ops/s [Average]
  (min, avg, max) = (463521.361, 495121.404, 522324.272), stdev = 14064.617
  CI (99.9%): [485724.652, 504518.156] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapNullHidden  thrpt   30  495121.404 ± 9396.752  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayErrorFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayErrorFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 64801.490 ops/s
# Warmup Iteration   2: 190337.155 ops/s
# Warmup Iteration   3: 467073.238 ops/s
# Warmup Iteration   4: 494094.059 ops/s
# Warmup Iteration   5: 454656.055 ops/s
# Warmup Iteration   6: 374115.855 ops/s
# Warmup Iteration   7: 453319.918 ops/s
# Warmup Iteration   8: 498504.331 ops/s
# Warmup Iteration   9: 517002.936 ops/s
# Warmup Iteration  10: 485236.229 ops/s
# Warmup Iteration  11: 504138.540 ops/s
# Warmup Iteration  12: 521468.402 ops/s
# Warmup Iteration  13: 485826.605 ops/s
# Warmup Iteration  14: 502483.652 ops/s
# Warmup Iteration  15: 481385.872 ops/s
# Warmup Iteration  16: 494122.402 ops/s
# Warmup Iteration  17: 526422.516 ops/s
# Warmup Iteration  18: 487266.535 ops/s
# Warmup Iteration  19: 532868.078 ops/s
# Warmup Iteration  20: 513606.312 ops/s
# Warmup Iteration  21: 520467.618 ops/s
# Warmup Iteration  22: 518231.862 ops/s
# Warmup Iteration  23: 535018.168 ops/s
# Warmup Iteration  24: 496643.477 ops/s
# Warmup Iteration  25: 522908.094 ops/s
# Warmup Iteration  26: 529258.569 ops/s
# Warmup Iteration  27: 505251.205 ops/s
# Warmup Iteration  28: 519789.870 ops/s
# Warmup Iteration  29: 529083.764 ops/s
# Warmup Iteration  30: 492440.246 ops/s
Iteration   1: 522733.492 ops/s
Iteration   2: 529463.298 ops/s
Iteration   3: 495228.945 ops/s
Iteration   4: 525767.224 ops/s
Iteration   5: 529796.229 ops/s
Iteration   6: 506101.789 ops/s
Iteration   7: 530739.951 ops/s
Iteration   8: 510677.772 ops/s
Iteration   9: 520202.034 ops/s
Iteration  10: 529774.265 ops/s
Iteration  11: 494912.037 ops/s
Iteration  12: 521246.356 ops/s
Iteration  13: 518905.843 ops/s
Iteration  14: 495898.565 ops/s
Iteration  15: 518196.132 ops/s
Iteration  16: 529092.051 ops/s
Iteration  17: 521272.483 ops/s
Iteration  18: 528998.147 ops/s
Iteration  19: 490284.355 ops/s
Iteration  20: 529418.584 ops/s
Iteration  21: 518942.366 ops/s
Iteration  22: 525304.544 ops/s
Iteration  23: 517258.371 ops/s
Iteration  24: 516742.465 ops/s
Iteration  25: 517111.309 ops/s
Iteration  26: 519669.953 ops/s
Iteration  27: 529713.325 ops/s
Iteration  28: 510388.958 ops/s
Iteration  29: 513760.257 ops/s
Iteration  30: 500783.077 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayErrorFirst":
  517279.473 ±(99.9%) 7956.515 ops/s [Average]
  (min, avg, max) = (490284.355, 517279.473, 530739.951), stdev = 11908.938
  CI (99.9%): [509322.957, 525235.988] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_maxConcurrencyOneDelayErrorFirst  thrpt   30  517279.473 ± 7956.515  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_interrupted$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_interrupted

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 159878.870 ops/s
# Warmup Iteration   2: 279429.539 ops/s
# Warmup Iteration   3: 316046.042 ops/s
# Warmup Iteration   4: 292136.956 ops/s
# Warmup Iteration   5: 332934.250 ops/s
# Warmup Iteration   6: 291972.372 ops/s
# Warmup Iteration   7: 309753.325 ops/s
# Warmup Iteration   8: 333090.682 ops/s
# Warmup Iteration   9: 336259.124 ops/s
# Warmup Iteration  10: 314873.394 ops/s
# Warmup Iteration  11: 331045.723 ops/s
# Warmup Iteration  12: 322440.222 ops/s
# Warmup Iteration  13: 320868.577 ops/s
# Warmup Iteration  14: 339619.197 ops/s
# Warmup Iteration  15: 323694.171 ops/s
# Warmup Iteration  16: 336737.537 ops/s
# Warmup Iteration  17: 349704.179 ops/s
# Warmup Iteration  18: 338347.589 ops/s
# Warmup Iteration  19: 345548.029 ops/s
# Warmup Iteration  20: 359216.115 ops/s
# Warmup Iteration  21: 350035.817 ops/s
# Warmup Iteration  22: 340207.154 ops/s
# Warmup Iteration  23: 337608.000 ops/s
# Warmup Iteration  24: 345207.482 ops/s
# Warmup Iteration  25: 353177.351 ops/s
# Warmup Iteration  26: 337575.219 ops/s
# Warmup Iteration  27: 346136.704 ops/s
# Warmup Iteration  28: 339568.035 ops/s
# Warmup Iteration  29: 338968.439 ops/s
# Warmup Iteration  30: 353821.371 ops/s
Iteration   1: 338685.964 ops/s
Iteration   2: 354404.821 ops/s
Iteration   3: 330530.939 ops/s
Iteration   4: 337415.365 ops/s
Iteration   5: 346004.924 ops/s
Iteration   6: 330974.374 ops/s
Iteration   7: 343966.066 ops/s
Iteration   8: 334420.181 ops/s
Iteration   9: 333568.310 ops/s
Iteration  10: 350466.046 ops/s
Iteration  11: 328116.948 ops/s
Iteration  12: 360867.056 ops/s
Iteration  13: 321795.059 ops/s
Iteration  14: 343084.735 ops/s
Iteration  15: 332409.673 ops/s
Iteration  16: 348887.871 ops/s
Iteration  17: 350834.896 ops/s
Iteration  18: 338347.075 ops/s
Iteration  19: 349073.525 ops/s
Iteration  20: 345127.426 ops/s
Iteration  21: 346063.488 ops/s
Iteration  22: 345482.791 ops/s
Iteration  23: 335562.784 ops/s
Iteration  24: 349141.488 ops/s
Iteration  25: 336792.819 ops/s
Iteration  26: 345254.174 ops/s
Iteration  27: 349753.379 ops/s
Iteration  28: 342031.479 ops/s
Iteration  29: 336505.962 ops/s
Iteration  30: 351007.269 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_interrupted":
  341885.896 ±(99.9%) 5868.820 ops/s [Average]
  (min, avg, max) = (321795.059, 341885.896, 360867.056), stdev = 8784.174
  CI (99.9%): [336017.077, 347754.716] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_interrupted  thrpt   30  341885.896 ± 5868.820  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithRequestOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithRequestOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 242195.452 ops/s
# Warmup Iteration   2: 941535.421 ops/s
# Warmup Iteration   3: 1778098.987 ops/s
# Warmup Iteration   4: 1909966.369 ops/s
# Warmup Iteration   5: 2057828.621 ops/s
# Warmup Iteration   6: 1887991.137 ops/s
# Warmup Iteration   7: 1967538.033 ops/s
# Warmup Iteration   8: 2003917.242 ops/s
# Warmup Iteration   9: 1976355.493 ops/s
# Warmup Iteration  10: 1974366.106 ops/s
# Warmup Iteration  11: 1961289.597 ops/s
# Warmup Iteration  12: 1944064.448 ops/s
# Warmup Iteration  13: 1998109.036 ops/s
# Warmup Iteration  14: 2006045.429 ops/s
# Warmup Iteration  15: 1962030.459 ops/s
# Warmup Iteration  16: 1977297.109 ops/s
# Warmup Iteration  17: 1950108.085 ops/s
# Warmup Iteration  18: 1985050.983 ops/s
# Warmup Iteration  19: 2019349.269 ops/s
# Warmup Iteration  20: 1934173.483 ops/s
# Warmup Iteration  21: 2076013.042 ops/s
# Warmup Iteration  22: 1905547.593 ops/s
# Warmup Iteration  23: 1954689.902 ops/s
# Warmup Iteration  24: 1992357.229 ops/s
# Warmup Iteration  25: 1976444.054 ops/s
# Warmup Iteration  26: 2022698.673 ops/s
# Warmup Iteration  27: 2037347.884 ops/s
# Warmup Iteration  28: 1993156.359 ops/s
# Warmup Iteration  29: 2010861.279 ops/s
# Warmup Iteration  30: 1915335.545 ops/s
Iteration   1: 1961430.251 ops/s
Iteration   2: 2036021.746 ops/s
Iteration   3: 1910545.394 ops/s
Iteration   4: 1956557.671 ops/s
Iteration   5: 1912405.667 ops/s
Iteration   6: 1952831.015 ops/s
Iteration   7: 2062139.109 ops/s
Iteration   8: 1924120.577 ops/s
Iteration   9: 1973671.627 ops/s
Iteration  10: 1990060.203 ops/s
Iteration  11: 2055317.862 ops/s
Iteration  12: 1950094.602 ops/s
Iteration  13: 1950527.708 ops/s
Iteration  14: 1985516.773 ops/s
Iteration  15: 1897233.898 ops/s
Iteration  16: 2027334.107 ops/s
Iteration  17: 1904927.214 ops/s
Iteration  18: 1992903.698 ops/s
Iteration  19: 1996851.134 ops/s
Iteration  20: 2030424.745 ops/s
Iteration  21: 1977533.399 ops/s
Iteration  22: 1987526.244 ops/s
Iteration  23: 2106443.656 ops/s
Iteration  24: 1917575.368 ops/s
Iteration  25: 1984537.472 ops/s
Iteration  26: 1926425.658 ops/s
Iteration  27: 2082922.947 ops/s
Iteration  28: 1966812.988 ops/s
Iteration  29: 1980886.857 ops/s
Iteration  30: 2026166.068 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithRequestOne":
  1980924.855 ±(99.9%) 36186.359 ops/s [Average]
  (min, avg, max) = (1897233.898, 1980924.855, 2106443.656), stdev = 54162.043
  CI (99.9%): [1944738.496, 2017111.214] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableScanTest._Benchmark.benchmark_scanWithRequestOne  thrpt   30  1980924.855 ± 36186.359  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_middleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_middleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25808.587 ops/s
# Warmup Iteration   2: 100582.552 ops/s
# Warmup Iteration   3: 285299.529 ops/s
# Warmup Iteration   4: 277459.499 ops/s
# Warmup Iteration   5: 285414.606 ops/s
# Warmup Iteration   6: 290986.634 ops/s
# Warmup Iteration   7: 307218.486 ops/s
# Warmup Iteration   8: 295845.907 ops/s
# Warmup Iteration   9: 312707.340 ops/s
# Warmup Iteration  10: 311412.810 ops/s
# Warmup Iteration  11: 297706.500 ops/s
# Warmup Iteration  12: 303260.075 ops/s
# Warmup Iteration  13: 312841.845 ops/s
# Warmup Iteration  14: 302045.856 ops/s
# Warmup Iteration  15: 298524.375 ops/s
# Warmup Iteration  16: 316791.197 ops/s
# Warmup Iteration  17: 304602.581 ops/s
# Warmup Iteration  18: 311181.653 ops/s
# Warmup Iteration  19: 305450.772 ops/s
# Warmup Iteration  20: 312306.344 ops/s
# Warmup Iteration  21: 303529.911 ops/s
# Warmup Iteration  22: 315089.713 ops/s
# Warmup Iteration  23: 297107.543 ops/s
# Warmup Iteration  24: 312949.461 ops/s
# Warmup Iteration  25: 311392.326 ops/s
# Warmup Iteration  26: 301553.712 ops/s
# Warmup Iteration  27: 325315.659 ops/s
# Warmup Iteration  28: 298893.908 ops/s
# Warmup Iteration  29: 296920.025 ops/s
# Warmup Iteration  30: 291796.345 ops/s
Iteration   1: 317674.954 ops/s
Iteration   2: 307678.944 ops/s
Iteration   3: 316148.890 ops/s
Iteration   4: 314793.481 ops/s
Iteration   5: 308079.293 ops/s
Iteration   6: 306510.773 ops/s
Iteration   7: 320265.601 ops/s
Iteration   8: 302988.356 ops/s
Iteration   9: 310766.468 ops/s
Iteration  10: 320281.360 ops/s
Iteration  11: 304668.446 ops/s
Iteration  12: 307260.413 ops/s
Iteration  13: 318194.019 ops/s
Iteration  14: 310200.047 ops/s
Iteration  15: 300699.640 ops/s
Iteration  16: 315287.580 ops/s
Iteration  17: 309520.140 ops/s
Iteration  18: 307559.988 ops/s
Iteration  19: 320403.270 ops/s
Iteration  20: 307920.892 ops/s
Iteration  21: 316976.635 ops/s
Iteration  22: 304094.388 ops/s
Iteration  23: 324298.697 ops/s
Iteration  24: 298301.029 ops/s
Iteration  25: 311350.652 ops/s
Iteration  26: 308657.357 ops/s
Iteration  27: 255383.105 ops/s
Iteration  28: 318494.179 ops/s
Iteration  29: 304774.942 ops/s
Iteration  30: 311934.768 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_middleError":
  309372.277 ±(99.9%) 8079.471 ops/s [Average]
  (min, avg, max) = (255383.105, 309372.277, 324298.697), stdev = 12092.973
  CI (99.9%): [301292.806, 317451.748] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_middleError  thrpt   30  309372.277 ± 8079.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90881.524 ops/s
# Warmup Iteration   2: 461367.451 ops/s
# Warmup Iteration   3: 540093.034 ops/s
# Warmup Iteration   4: 586214.002 ops/s
# Warmup Iteration   5: 500478.915 ops/s
# Warmup Iteration   6: 597820.674 ops/s
# Warmup Iteration   7: 577747.687 ops/s
# Warmup Iteration   8: 621173.256 ops/s
# Warmup Iteration   9: 597064.903 ops/s
# Warmup Iteration  10: 577270.078 ops/s
# Warmup Iteration  11: 580691.637 ops/s
# Warmup Iteration  12: 606040.930 ops/s
# Warmup Iteration  13: 581986.609 ops/s
# Warmup Iteration  14: 601109.520 ops/s
# Warmup Iteration  15: 584341.776 ops/s
# Warmup Iteration  16: 586104.729 ops/s
# Warmup Iteration  17: 634338.470 ops/s
# Warmup Iteration  18: 606947.822 ops/s
# Warmup Iteration  19: 610162.932 ops/s
# Warmup Iteration  20: 641593.539 ops/s
# Warmup Iteration  21: 619606.721 ops/s
# Warmup Iteration  22: 626708.006 ops/s
# Warmup Iteration  23: 608211.518 ops/s
# Warmup Iteration  24: 620177.506 ops/s
# Warmup Iteration  25: 618547.345 ops/s
# Warmup Iteration  26: 603134.884 ops/s
# Warmup Iteration  27: 630306.606 ops/s
# Warmup Iteration  28: 612213.244 ops/s
# Warmup Iteration  29: 629569.428 ops/s
# Warmup Iteration  30: 608599.272 ops/s
Iteration   1: 614187.541 ops/s
Iteration   2: 631869.183 ops/s
Iteration   3: 593590.936 ops/s
Iteration   4: 612390.233 ops/s
Iteration   5: 618278.752 ops/s
Iteration   6: 600366.790 ops/s
Iteration   7: 627740.939 ops/s
Iteration   8: 635341.159 ops/s
Iteration   9: 623013.640 ops/s
Iteration  10: 634658.440 ops/s
Iteration  11: 623849.893 ops/s
Iteration  12: 623922.139 ops/s
Iteration  13: 612920.989 ops/s
Iteration  14: 610688.837 ops/s
Iteration  15: 639934.394 ops/s
Iteration  16: 609642.997 ops/s
Iteration  17: 627493.483 ops/s
Iteration  18: 617453.746 ops/s
Iteration  19: 624653.641 ops/s
Iteration  20: 616085.369 ops/s
Iteration  21: 611678.051 ops/s
Iteration  22: 639155.616 ops/s
Iteration  23: 597736.108 ops/s
Iteration  24: 647620.768 ops/s
Iteration  25: 616786.971 ops/s
Iteration  26: 621419.593 ops/s
Iteration  27: 629677.364 ops/s
Iteration  28: 614025.174 ops/s
Iteration  29: 614584.164 ops/s
Iteration  30: 639837.952 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError":
  621020.162 ±(99.9%) 8628.626 ops/s [Average]
  (min, avg, max) = (593590.936, 621020.162, 647620.768), stdev = 12914.923
  CI (99.9%): [612391.536, 629648.789] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError  thrpt   30  621020.162 ± 8628.626  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 98324.665 ops/s
# Warmup Iteration   2: 437376.161 ops/s
# Warmup Iteration   3: 573471.947 ops/s
# Warmup Iteration   4: 529824.167 ops/s
# Warmup Iteration   5: 585991.693 ops/s
# Warmup Iteration   6: 536849.257 ops/s
# Warmup Iteration   7: 579016.971 ops/s
# Warmup Iteration   8: 568491.218 ops/s
# Warmup Iteration   9: 596576.192 ops/s
# Warmup Iteration  10: 599990.208 ops/s
# Warmup Iteration  11: 578543.631 ops/s
# Warmup Iteration  12: 614220.882 ops/s
# Warmup Iteration  13: 581765.716 ops/s
# Warmup Iteration  14: 611525.839 ops/s
# Warmup Iteration  15: 601024.597 ops/s
# Warmup Iteration  16: 583073.476 ops/s
# Warmup Iteration  17: 619581.495 ops/s
# Warmup Iteration  18: 626301.905 ops/s
# Warmup Iteration  19: 644214.259 ops/s
# Warmup Iteration  20: 614838.174 ops/s
# Warmup Iteration  21: 658542.381 ops/s
# Warmup Iteration  22: 649397.611 ops/s
# Warmup Iteration  23: 604311.861 ops/s
# Warmup Iteration  24: 635687.982 ops/s
# Warmup Iteration  25: 636899.119 ops/s
# Warmup Iteration  26: 626524.211 ops/s
# Warmup Iteration  27: 617048.819 ops/s
# Warmup Iteration  28: 640899.666 ops/s
# Warmup Iteration  29: 616515.231 ops/s
# Warmup Iteration  30: 621221.885 ops/s
Iteration   1: 641493.035 ops/s
Iteration   2: 647394.504 ops/s
Iteration   3: 618047.235 ops/s
Iteration   4: 638097.035 ops/s
Iteration   5: 617244.358 ops/s
Iteration   6: 618404.494 ops/s
Iteration   7: 656051.104 ops/s
Iteration   8: 616996.414 ops/s
Iteration   9: 653721.730 ops/s
Iteration  10: 608928.173 ops/s
Iteration  11: 629261.473 ops/s
Iteration  12: 649345.311 ops/s
Iteration  13: 614180.837 ops/s
Iteration  14: 625424.394 ops/s
Iteration  15: 632197.764 ops/s
Iteration  16: 640903.803 ops/s
Iteration  17: 628491.058 ops/s
Iteration  18: 645799.845 ops/s
Iteration  19: 604771.539 ops/s
Iteration  20: 640620.529 ops/s
Iteration  21: 642150.720 ops/s
Iteration  22: 483215.197 ops/s
Iteration  23: 659507.717 ops/s
Iteration  24: 638340.184 ops/s
Iteration  25: 625513.643 ops/s
Iteration  26: 642224.467 ops/s
Iteration  27: 622138.893 ops/s
Iteration  28: 649444.806 ops/s
Iteration  29: 644081.666 ops/s
Iteration  30: 626311.963 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainError":
  628676.796 ±(99.9%) 20748.304 ops/s [Average]
  (min, avg, max) = (483215.197, 628676.796, 659507.717), stdev = 31055.088
  CI (99.9%): [607928.492, 649425.101] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_untilPublisherMainError  thrpt   30  628676.796 ± 20748.304  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_delayErrorCallableEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_delayErrorCallableEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81824.308 ops/s
# Warmup Iteration   2: 316048.016 ops/s
# Warmup Iteration   3: 425650.995 ops/s
# Warmup Iteration   4: 461818.252 ops/s
# Warmup Iteration   5: 406076.588 ops/s
# Warmup Iteration   6: 466463.976 ops/s
# Warmup Iteration   7: 459837.886 ops/s
# Warmup Iteration   8: 479020.448 ops/s
# Warmup Iteration   9: 468874.675 ops/s
# Warmup Iteration  10: 492099.797 ops/s
# Warmup Iteration  11: 477961.461 ops/s
# Warmup Iteration  12: 472697.194 ops/s
# Warmup Iteration  13: 473560.453 ops/s
# Warmup Iteration  14: 452079.123 ops/s
# Warmup Iteration  15: 470267.675 ops/s
# Warmup Iteration  16: 486029.876 ops/s
# Warmup Iteration  17: 488234.115 ops/s
# Warmup Iteration  18: 493134.629 ops/s
# Warmup Iteration  19: 496750.679 ops/s
# Warmup Iteration  20: 496245.366 ops/s
# Warmup Iteration  21: 519950.166 ops/s
# Warmup Iteration  22: 487376.809 ops/s
# Warmup Iteration  23: 489148.102 ops/s
# Warmup Iteration  24: 497186.553 ops/s
# Warmup Iteration  25: 508999.298 ops/s
# Warmup Iteration  26: 494639.575 ops/s
# Warmup Iteration  27: 500515.881 ops/s
# Warmup Iteration  28: 496243.509 ops/s
# Warmup Iteration  29: 501547.242 ops/s
# Warmup Iteration  30: 516639.529 ops/s
Iteration   1: 474424.815 ops/s
Iteration   2: 489429.208 ops/s
Iteration   3: 517911.717 ops/s
Iteration   4: 498628.677 ops/s
Iteration   5: 478711.028 ops/s
Iteration   6: 501868.434 ops/s
Iteration   7: 469614.937 ops/s
Iteration   8: 488031.320 ops/s
Iteration   9: 507777.709 ops/s
Iteration  10: 489925.169 ops/s
Iteration  11: 511637.985 ops/s
Iteration  12: 494316.155 ops/s
Iteration  13: 506201.381 ops/s
Iteration  14: 498032.007 ops/s
Iteration  15: 491762.637 ops/s
Iteration  16: 505780.489 ops/s
Iteration  17: 507026.443 ops/s
Iteration  18: 500676.018 ops/s
Iteration  19: 496663.504 ops/s
Iteration  20: 491374.802 ops/s
Iteration  21: 498662.176 ops/s
Iteration  22: 493251.665 ops/s
Iteration  23: 499036.145 ops/s
Iteration  24: 490967.875 ops/s
Iteration  25: 515670.725 ops/s
Iteration  26: 494007.911 ops/s
Iteration  27: 500324.410 ops/s
Iteration  28: 485499.143 ops/s
Iteration  29: 503135.898 ops/s
Iteration  30: 506061.309 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_delayErrorCallableEager":
  496880.390 ±(99.9%) 7440.576 ops/s [Average]
  (min, avg, max) = (469614.937, 496880.390, 517911.717), stdev = 11136.705
  CI (99.9%): [489439.813, 504320.966] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_delayErrorCallableEager  thrpt   30  496880.390 ± 7440.576  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106247.102 ops/s
# Warmup Iteration   2: 528044.771 ops/s
# Warmup Iteration   3: 608237.897 ops/s
# Warmup Iteration   4: 633578.101 ops/s
# Warmup Iteration   5: 649234.307 ops/s
# Warmup Iteration   6: 627424.671 ops/s
# Warmup Iteration   7: 607711.799 ops/s
# Warmup Iteration   8: 647136.914 ops/s
# Warmup Iteration   9: 619105.690 ops/s
# Warmup Iteration  10: 613686.590 ops/s
# Warmup Iteration  11: 626758.248 ops/s
# Warmup Iteration  12: 628872.601 ops/s
# Warmup Iteration  13: 631405.639 ops/s
# Warmup Iteration  14: 604993.580 ops/s
# Warmup Iteration  15: 620476.865 ops/s
# Warmup Iteration  16: 644638.902 ops/s
# Warmup Iteration  17: 671733.249 ops/s
# Warmup Iteration  18: 663102.726 ops/s
# Warmup Iteration  19: 670355.545 ops/s
# Warmup Iteration  20: 677145.045 ops/s
# Warmup Iteration  21: 664769.462 ops/s
# Warmup Iteration  22: 665975.746 ops/s
# Warmup Iteration  23: 645977.891 ops/s
# Warmup Iteration  24: 657745.736 ops/s
# Warmup Iteration  25: 702137.349 ops/s
# Warmup Iteration  26: 634784.361 ops/s
# Warmup Iteration  27: 681032.596 ops/s
# Warmup Iteration  28: 679618.527 ops/s
# Warmup Iteration  29: 653815.808 ops/s
# Warmup Iteration  30: 653482.333 ops/s
Iteration   1: 684822.255 ops/s
Iteration   2: 648333.898 ops/s
Iteration   3: 675553.932 ops/s
Iteration   4: 657545.984 ops/s
Iteration   5: 681997.341 ops/s
Iteration   6: 653176.303 ops/s
Iteration   7: 668488.223 ops/s
Iteration   8: 676833.683 ops/s
Iteration   9: 659307.152 ops/s
Iteration  10: 674524.923 ops/s
Iteration  11: 641332.791 ops/s
Iteration  12: 678591.573 ops/s
Iteration  13: 660677.412 ops/s
Iteration  14: 678175.684 ops/s
Iteration  15: 666511.145 ops/s
Iteration  16: 561921.447 ops/s
Iteration  17: 638555.602 ops/s
Iteration  18: 686053.304 ops/s
Iteration  19: 659585.327 ops/s
Iteration  20: 691893.237 ops/s
Iteration  21: 659243.595 ops/s
Iteration  22: 631832.979 ops/s
Iteration  23: 689332.550 ops/s
Iteration  24: 653458.276 ops/s
Iteration  25: 684213.755 ops/s
Iteration  26: 647752.699 ops/s
Iteration  27: 686335.108 ops/s
Iteration  28: 681071.060 ops/s
Iteration  29: 699769.735 ops/s
Iteration  30: 645365.159 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_otherError":
  664075.204 ±(99.9%) 17461.431 ops/s [Average]
  (min, avg, max) = (561921.447, 664075.204, 699769.735), stdev = 26135.449
  CI (99.9%): [646613.774, 681536.635] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_otherError  thrpt   30  664075.204 ± 17461.431  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_cancelMainOnOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_cancelMainOnOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122017.571 ops/s
# Warmup Iteration   2: 396331.239 ops/s
# Warmup Iteration   3: 568253.564 ops/s
# Warmup Iteration   4: 547481.994 ops/s
# Warmup Iteration   5: 577496.078 ops/s
# Warmup Iteration   6: 574025.293 ops/s
# Warmup Iteration   7: 546903.915 ops/s
# Warmup Iteration   8: 512871.172 ops/s
# Warmup Iteration   9: 539961.393 ops/s
# Warmup Iteration  10: 553325.498 ops/s
# Warmup Iteration  11: 538724.230 ops/s
# Warmup Iteration  12: 587100.079 ops/s
# Warmup Iteration  13: 564050.990 ops/s
# Warmup Iteration  14: 582271.852 ops/s
# Warmup Iteration  15: 545664.237 ops/s
# Warmup Iteration  16: 596603.094 ops/s
# Warmup Iteration  17: 594485.017 ops/s
# Warmup Iteration  18: 574285.767 ops/s
# Warmup Iteration  19: 613406.401 ops/s
# Warmup Iteration  20: 597715.648 ops/s
# Warmup Iteration  21: 597758.908 ops/s
# Warmup Iteration  22: 602248.070 ops/s
# Warmup Iteration  23: 604597.014 ops/s
# Warmup Iteration  24: 579536.451 ops/s
# Warmup Iteration  25: 621928.920 ops/s
# Warmup Iteration  26: 576934.047 ops/s
# Warmup Iteration  27: 616795.659 ops/s
# Warmup Iteration  28: 579402.674 ops/s
# Warmup Iteration  29: 608962.681 ops/s
# Warmup Iteration  30: 608285.357 ops/s
Iteration   1: 586824.747 ops/s
Iteration   2: 616203.025 ops/s
Iteration   3: 592432.744 ops/s
Iteration   4: 589165.613 ops/s
Iteration   5: 601026.586 ops/s
Iteration   6: 594431.593 ops/s
Iteration   7: 609226.555 ops/s
Iteration   8: 592849.425 ops/s
Iteration   9: 595626.117 ops/s
Iteration  10: 624648.284 ops/s
Iteration  11: 581719.724 ops/s
Iteration  12: 610307.359 ops/s
Iteration  13: 582292.211 ops/s
Iteration  14: 592210.233 ops/s
Iteration  15: 604317.269 ops/s
Iteration  16: 593428.405 ops/s
Iteration  17: 613147.826 ops/s
Iteration  18: 589664.962 ops/s
Iteration  19: 606026.932 ops/s
Iteration  20: 620664.442 ops/s
Iteration  21: 576563.025 ops/s
Iteration  22: 610944.547 ops/s
Iteration  23: 587267.366 ops/s
Iteration  24: 607870.392 ops/s
Iteration  25: 614829.169 ops/s
Iteration  26: 583420.454 ops/s
Iteration  27: 611278.392 ops/s
Iteration  28: 590821.135 ops/s
Iteration  29: 615279.861 ops/s
Iteration  30: 601131.077 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_cancelMainOnOtherError":
  599853.982 ±(99.9%) 8647.955 ops/s [Average]
  (min, avg, max) = (576563.025, 599853.982, 624648.284), stdev = 12943.852
  CI (99.9%): [591206.028, 608501.937] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_cancelMainOnOtherError  thrpt   30  599853.982 ± 8647.955  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_cancelOtherOnMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_cancelOtherOnMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 98193.487 ops/s
# Warmup Iteration   2: 455033.632 ops/s
# Warmup Iteration   3: 533487.708 ops/s
# Warmup Iteration   4: 553080.473 ops/s
# Warmup Iteration   5: 508408.598 ops/s
# Warmup Iteration   6: 596899.426 ops/s
# Warmup Iteration   7: 575647.050 ops/s
# Warmup Iteration   8: 597423.230 ops/s
# Warmup Iteration   9: 578689.995 ops/s
# Warmup Iteration  10: 590672.530 ops/s
# Warmup Iteration  11: 569269.341 ops/s
# Warmup Iteration  12: 572503.293 ops/s
# Warmup Iteration  13: 602275.514 ops/s
# Warmup Iteration  14: 587317.671 ops/s
# Warmup Iteration  15: 574887.476 ops/s
# Warmup Iteration  16: 586971.105 ops/s
# Warmup Iteration  17: 610315.957 ops/s
# Warmup Iteration  18: 595180.859 ops/s
# Warmup Iteration  19: 595486.805 ops/s
# Warmup Iteration  20: 627891.162 ops/s
# Warmup Iteration  21: 598808.934 ops/s
# Warmup Iteration  22: 615729.860 ops/s
# Warmup Iteration  23: 606470.489 ops/s
# Warmup Iteration  24: 600057.373 ops/s
# Warmup Iteration  25: 618138.542 ops/s
# Warmup Iteration  26: 602501.820 ops/s
# Warmup Iteration  27: 616077.068 ops/s
# Warmup Iteration  28: 596400.512 ops/s
# Warmup Iteration  29: 621009.442 ops/s
# Warmup Iteration  30: 617702.604 ops/s
Iteration   1: 594710.337 ops/s
Iteration   2: 616360.218 ops/s
Iteration   3: 596523.008 ops/s
Iteration   4: 599202.220 ops/s
Iteration   5: 610527.726 ops/s
Iteration   6: 588919.496 ops/s
Iteration   7: 611252.051 ops/s
Iteration   8: 604325.606 ops/s
Iteration   9: 614021.574 ops/s
Iteration  10: 608038.079 ops/s
Iteration  11: 502511.566 ops/s
Iteration  12: 640043.847 ops/s
Iteration  13: 611342.534 ops/s
Iteration  14: 593604.249 ops/s
Iteration  15: 604344.982 ops/s
Iteration  16: 614659.289 ops/s
Iteration  17: 600277.689 ops/s
Iteration  18: 627145.819 ops/s
Iteration  19: 594705.013 ops/s
Iteration  20: 608673.387 ops/s
Iteration  21: 625047.057 ops/s
Iteration  22: 580276.241 ops/s
Iteration  23: 617000.923 ops/s
Iteration  24: 608426.625 ops/s
Iteration  25: 610605.793 ops/s
Iteration  26: 606448.497 ops/s
Iteration  27: 594034.129 ops/s
Iteration  28: 636569.201 ops/s
Iteration  29: 590028.232 ops/s
Iteration  30: 624435.044 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_cancelOtherOnMainError":
  604468.681 ±(99.9%) 15839.811 ops/s [Average]
  (min, avg, max) = (502511.566, 604468.681, 640043.847), stdev = 23708.286
  CI (99.9%): [588628.870, 620308.493] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_cancelOtherOnMainError  thrpt   30  604468.681 ± 15839.811  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90895.317 ops/s
# Warmup Iteration   2: 514613.057 ops/s
# Warmup Iteration   3: 594322.884 ops/s
# Warmup Iteration   4: 642137.382 ops/s
# Warmup Iteration   5: 578908.762 ops/s
# Warmup Iteration   6: 645270.539 ops/s
# Warmup Iteration   7: 635667.800 ops/s
# Warmup Iteration   8: 654073.775 ops/s
# Warmup Iteration   9: 634776.564 ops/s
# Warmup Iteration  10: 682102.703 ops/s
# Warmup Iteration  11: 664410.618 ops/s
# Warmup Iteration  12: 635916.853 ops/s
# Warmup Iteration  13: 663955.056 ops/s
# Warmup Iteration  14: 657639.656 ops/s
# Warmup Iteration  15: 647821.013 ops/s
# Warmup Iteration  16: 639624.143 ops/s
# Warmup Iteration  17: 690295.806 ops/s
# Warmup Iteration  18: 701325.336 ops/s
# Warmup Iteration  19: 675640.779 ops/s
# Warmup Iteration  20: 686411.067 ops/s
# Warmup Iteration  21: 669818.326 ops/s
# Warmup Iteration  22: 673426.273 ops/s
# Warmup Iteration  23: 709912.504 ops/s
# Warmup Iteration  24: 701969.422 ops/s
# Warmup Iteration  25: 655507.951 ops/s
# Warmup Iteration  26: 706900.437 ops/s
# Warmup Iteration  27: 677341.909 ops/s
# Warmup Iteration  28: 711383.185 ops/s
# Warmup Iteration  29: 685521.033 ops/s
# Warmup Iteration  30: 691224.460 ops/s
Iteration   1: 686778.880 ops/s
Iteration   2: 701252.997 ops/s
Iteration   3: 677335.260 ops/s
Iteration   4: 686466.851 ops/s
Iteration   5: 692164.472 ops/s
Iteration   6: 681266.141 ops/s
Iteration   7: 685294.059 ops/s
Iteration   8: 695383.729 ops/s
Iteration   9: 688047.618 ops/s
Iteration  10: 692378.406 ops/s
Iteration  11: 683941.554 ops/s
Iteration  12: 695917.949 ops/s
Iteration  13: 686163.430 ops/s
Iteration  14: 700818.023 ops/s
Iteration  15: 683895.058 ops/s
Iteration  16: 657269.019 ops/s
Iteration  17: 713379.400 ops/s
Iteration  18: 677715.064 ops/s
Iteration  19: 698223.505 ops/s
Iteration  20: 683008.635 ops/s
Iteration  21: 700020.826 ops/s
Iteration  22: 691306.727 ops/s
Iteration  23: 664812.675 ops/s
Iteration  24: 695449.595 ops/s
Iteration  25: 722420.526 ops/s
Iteration  26: 676660.252 ops/s
Iteration  27: 699185.213 ops/s
Iteration  28: 687977.706 ops/s
Iteration  29: 687748.233 ops/s
Iteration  30: 714067.455 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_error":
  690211.642 ±(99.9%) 8984.449 ops/s [Average]
  (min, avg, max) = (657269.019, 690211.642, 722420.526), stdev = 13447.501
  CI (99.9%): [681227.193, 699196.091] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_error  thrpt   30  690211.642 ± 8984.449  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 173180.723 ops/s
# Warmup Iteration   2: 433165.729 ops/s
# Warmup Iteration   3: 486401.816 ops/s
# Warmup Iteration   4: 466752.783 ops/s
# Warmup Iteration   5: 488117.216 ops/s
# Warmup Iteration   6: 517919.496 ops/s
# Warmup Iteration   7: 496467.861 ops/s
# Warmup Iteration   8: 504688.583 ops/s
# Warmup Iteration   9: 500775.876 ops/s
# Warmup Iteration  10: 475987.800 ops/s
# Warmup Iteration  11: 511192.483 ops/s
# Warmup Iteration  12: 495435.032 ops/s
# Warmup Iteration  13: 504550.933 ops/s
# Warmup Iteration  14: 492033.934 ops/s
# Warmup Iteration  15: 496178.074 ops/s
# Warmup Iteration  16: 498679.608 ops/s
# Warmup Iteration  17: 513114.310 ops/s
# Warmup Iteration  18: 521002.399 ops/s
# Warmup Iteration  19: 519839.993 ops/s
# Warmup Iteration  20: 522647.983 ops/s
# Warmup Iteration  21: 499478.032 ops/s
# Warmup Iteration  22: 529903.892 ops/s
# Warmup Iteration  23: 516344.515 ops/s
# Warmup Iteration  24: 514744.084 ops/s
# Warmup Iteration  25: 531066.640 ops/s
# Warmup Iteration  26: 512666.761 ops/s
# Warmup Iteration  27: 530087.738 ops/s
# Warmup Iteration  28: 513742.741 ops/s
# Warmup Iteration  29: 533052.851 ops/s
# Warmup Iteration  30: 520828.469 ops/s
Iteration   1: 520609.401 ops/s
Iteration   2: 535882.675 ops/s
Iteration   3: 505282.586 ops/s
Iteration   4: 529234.513 ops/s
Iteration   5: 532121.813 ops/s
Iteration   6: 421949.693 ops/s
Iteration   7: 544231.243 ops/s
Iteration   8: 508499.145 ops/s
Iteration   9: 516070.435 ops/s
Iteration  10: 542563.039 ops/s
Iteration  11: 506951.470 ops/s
Iteration  12: 547678.089 ops/s
Iteration  13: 540224.885 ops/s
Iteration  14: 518851.522 ops/s
Iteration  15: 513572.655 ops/s
Iteration  16: 519838.638 ops/s
Iteration  17: 519649.517 ops/s
Iteration  18: 513317.616 ops/s
Iteration  19: 541523.221 ops/s
Iteration  20: 510039.164 ops/s
Iteration  21: 525122.872 ops/s
Iteration  22: 504693.066 ops/s
Iteration  23: 530165.193 ops/s
Iteration  24: 521552.834 ops/s
Iteration  25: 516814.756 ops/s
Iteration  26: 532742.130 ops/s
Iteration  27: 511028.519 ops/s
Iteration  28: 535907.164 ops/s
Iteration  29: 524988.227 ops/s
Iteration  30: 521097.510 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithCombinerReturnsNull":
  520406.786 ±(99.9%) 14912.644 ops/s [Average]
  (min, avg, max) = (421949.693, 520406.786, 547678.089), stdev = 22320.546
  CI (99.9%): [505494.142, 535319.431] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_zipWithCombinerReturnsNull  thrpt   30  520406.786 ± 14912.644  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberTerminated$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberTerminated

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4851967.945 ops/s
# Warmup Iteration   2: 6972430.582 ops/s
# Warmup Iteration   3: 9099463.980 ops/s
# Warmup Iteration   4: 8827663.423 ops/s
# Warmup Iteration   5: 9161164.865 ops/s
# Warmup Iteration   6: 8576169.658 ops/s
# Warmup Iteration   7: 9212242.345 ops/s
# Warmup Iteration   8: 8779973.217 ops/s
# Warmup Iteration   9: 8815729.583 ops/s
# Warmup Iteration  10: 9235542.015 ops/s
# Warmup Iteration  11: 8699214.267 ops/s
# Warmup Iteration  12: 9050846.019 ops/s
# Warmup Iteration  13: 8645014.344 ops/s
# Warmup Iteration  14: 9216023.694 ops/s
# Warmup Iteration  15: 9286906.183 ops/s
# Warmup Iteration  16: 8638331.107 ops/s
# Warmup Iteration  17: 9365547.935 ops/s
# Warmup Iteration  18: 8744493.706 ops/s
# Warmup Iteration  19: 9394958.931 ops/s
# Warmup Iteration  20: 8924789.323 ops/s
# Warmup Iteration  21: 8646827.503 ops/s
# Warmup Iteration  22: 9296844.215 ops/s
# Warmup Iteration  23: 8423847.223 ops/s
# Warmup Iteration  24: 8755433.224 ops/s
# Warmup Iteration  25: 8934943.988 ops/s
# Warmup Iteration  26: 8628398.862 ops/s
# Warmup Iteration  27: 9082435.970 ops/s
# Warmup Iteration  28: 9149528.790 ops/s
# Warmup Iteration  29: 9045953.343 ops/s
# Warmup Iteration  30: 8918403.453 ops/s
Iteration   1: 9395927.206 ops/s
Iteration   2: 8739375.938 ops/s
Iteration   3: 9247659.675 ops/s
Iteration   4: 8544978.985 ops/s
Iteration   5: 9388516.835 ops/s
Iteration   6: 8907124.021 ops/s
Iteration   7: 8778371.281 ops/s
Iteration   8: 9122312.464 ops/s
Iteration   9: 9050008.057 ops/s
Iteration  10: 8932094.901 ops/s
Iteration  11: 9176771.150 ops/s
Iteration  12: 8911815.897 ops/s
Iteration  13: 8737312.841 ops/s
Iteration  14: 9170019.274 ops/s
Iteration  15: 9070657.861 ops/s
Iteration  16: 8830980.889 ops/s
Iteration  17: 9271218.713 ops/s
Iteration  18: 8577689.781 ops/s
Iteration  19: 9230954.296 ops/s
Iteration  20: 8725463.945 ops/s
Iteration  21: 8711593.531 ops/s
Iteration  22: 9045924.510 ops/s
Iteration  23: 8843583.741 ops/s
Iteration  24: 9248512.063 ops/s
Iteration  25: 8701523.356 ops/s
Iteration  26: 9219323.508 ops/s
Iteration  27: 8726244.394 ops/s
Iteration  28: 9154408.935 ops/s
Iteration  29: 9152087.695 ops/s
Iteration  30: 8706455.381 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberTerminated":
  8977297.037 ±(99.9%) 165349.965 ops/s [Average]
  (min, avg, max) = (8544978.985, 8977297.037, 9395927.206), stdev = 247488.063
  CI (99.9%): [8811947.072, 9142647.003] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSubscriberTerminated  thrpt   30  8977297.037 ± 165349.965  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 240847.661 ops/s
# Warmup Iteration   2: 553507.191 ops/s
# Warmup Iteration   3: 701443.334 ops/s
# Warmup Iteration   4: 682270.601 ops/s
# Warmup Iteration   5: 657975.997 ops/s
# Warmup Iteration   6: 664725.821 ops/s
# Warmup Iteration   7: 667634.791 ops/s
# Warmup Iteration   8: 684443.593 ops/s
# Warmup Iteration   9: 687357.222 ops/s
# Warmup Iteration  10: 638909.496 ops/s
# Warmup Iteration  11: 626380.296 ops/s
# Warmup Iteration  12: 703046.817 ops/s
# Warmup Iteration  13: 656896.966 ops/s
# Warmup Iteration  14: 679833.979 ops/s
# Warmup Iteration  15: 653232.137 ops/s
# Warmup Iteration  16: 666285.912 ops/s
# Warmup Iteration  17: 742249.786 ops/s
# Warmup Iteration  18: 682644.206 ops/s
# Warmup Iteration  19: 704278.648 ops/s
# Warmup Iteration  20: 710702.362 ops/s
# Warmup Iteration  21: 705238.511 ops/s
# Warmup Iteration  22: 720285.319 ops/s
# Warmup Iteration  23: 683414.219 ops/s
# Warmup Iteration  24: 725094.582 ops/s
# Warmup Iteration  25: 693551.676 ops/s
# Warmup Iteration  26: 727119.461 ops/s
# Warmup Iteration  27: 720742.873 ops/s
# Warmup Iteration  28: 674799.289 ops/s
# Warmup Iteration  29: 738340.410 ops/s
# Warmup Iteration  30: 564933.198 ops/s
Iteration   1: 637289.837 ops/s
Iteration   2: 708131.275 ops/s
Iteration   3: 715585.988 ops/s
Iteration   4: 742241.484 ops/s
Iteration   5: 674435.972 ops/s
Iteration   6: 728495.415 ops/s
Iteration   7: 705572.131 ops/s
Iteration   8: 709570.068 ops/s
Iteration   9: 740901.825 ops/s
Iteration  10: 679000.061 ops/s
Iteration  11: 682071.187 ops/s
Iteration  12: 713466.590 ops/s
Iteration  13: 713585.624 ops/s
Iteration  14: 711834.506 ops/s
Iteration  15: 711872.706 ops/s
Iteration  16: 690284.074 ops/s
Iteration  17: 717218.221 ops/s
Iteration  18: 715344.794 ops/s
Iteration  19: 731368.883 ops/s
Iteration  20: 689371.624 ops/s
Iteration  21: 730399.049 ops/s
Iteration  22: 709815.900 ops/s
Iteration  23: 710315.355 ops/s
Iteration  24: 723179.677 ops/s
Iteration  25: 710525.941 ops/s
Iteration  26: 722788.713 ops/s
Iteration  27: 705642.547 ops/s
Iteration  28: 730991.829 ops/s
Iteration  29: 699538.767 ops/s
Iteration  30: 695462.475 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureWithError":
  708543.417 ±(99.9%) 14435.076 ops/s [Average]
  (min, avg, max) = (637289.837, 708543.417, 742241.484), stdev = 21605.744
  CI (99.9%): [694108.341, 722978.493] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
FlowableMaterializeTest._Benchmark.benchmark_backpressureWithError  thrpt   30  708543.417 ± 14435.076  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onErrorOtherOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onErrorOtherOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19797.614 ops/s
# Warmup Iteration   2: 141513.483 ops/s
# Warmup Iteration   3: 151808.282 ops/s
# Warmup Iteration   4: 182166.190 ops/s
# Warmup Iteration   5: 153401.943 ops/s
# Warmup Iteration   6: 183468.151 ops/s
# Warmup Iteration   7: 176886.337 ops/s
# Warmup Iteration   8: 184320.340 ops/s
# Warmup Iteration   9: 186897.315 ops/s
# Warmup Iteration  10: 178840.502 ops/s
# Warmup Iteration  11: 180784.822 ops/s
# Warmup Iteration  12: 177168.865 ops/s
# Warmup Iteration  13: 183001.366 ops/s
# Warmup Iteration  14: 178844.403 ops/s
# Warmup Iteration  15: 174428.408 ops/s
# Warmup Iteration  16: 187067.773 ops/s
# Warmup Iteration  17: 184920.972 ops/s
# Warmup Iteration  18: 187049.717 ops/s
# Warmup Iteration  19: 192692.390 ops/s
# Warmup Iteration  20: 184527.699 ops/s
# Warmup Iteration  21: 190306.624 ops/s
# Warmup Iteration  22: 191757.369 ops/s
# Warmup Iteration  23: 186095.424 ops/s
# Warmup Iteration  24: 190075.196 ops/s
# Warmup Iteration  25: 184708.816 ops/s
# Warmup Iteration  26: 191072.510 ops/s
# Warmup Iteration  27: 180443.216 ops/s
# Warmup Iteration  28: 188289.986 ops/s
# Warmup Iteration  29: 192467.874 ops/s
# Warmup Iteration  30: 185306.289 ops/s
Iteration   1: 190783.242 ops/s
Iteration   2: 183190.710 ops/s
Iteration   3: 192166.539 ops/s
Iteration   4: 184848.205 ops/s
Iteration   5: 185542.129 ops/s
Iteration   6: 194763.005 ops/s
Iteration   7: 182898.446 ops/s
Iteration   8: 193781.933 ops/s
Iteration   9: 182418.676 ops/s
Iteration  10: 188877.188 ops/s
Iteration  11: 189316.031 ops/s
Iteration  12: 183961.615 ops/s
Iteration  13: 191834.015 ops/s
Iteration  14: 188776.505 ops/s
Iteration  15: 191898.260 ops/s
Iteration  16: 180944.870 ops/s
Iteration  17: 185705.928 ops/s
Iteration  18: 194346.618 ops/s
Iteration  19: 185800.679 ops/s
Iteration  20: 189062.192 ops/s
Iteration  21: 190424.354 ops/s
Iteration  22: 186259.788 ops/s
Iteration  23: 187005.117 ops/s
Iteration  24: 192372.716 ops/s
Iteration  25: 186863.607 ops/s
Iteration  26: 188025.161 ops/s
Iteration  27: 185208.247 ops/s
Iteration  28: 182840.959 ops/s
Iteration  29: 193449.514 ops/s
Iteration  30: 184310.786 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_onErrorOtherOverflow":
  187922.568 ±(99.9%) 2657.995 ops/s [Average]
  (min, avg, max) = (180944.870, 187922.568, 194763.005), stdev = 3978.362
  CI (99.9%): [185264.573, 190580.563] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_onErrorOtherOverflow  thrpt   30  187922.568 ± 2657.995  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarSupplierMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarSupplierMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65148.558 ops/s
# Warmup Iteration   2: 296900.552 ops/s
# Warmup Iteration   3: 471751.084 ops/s
# Warmup Iteration   4: 389547.159 ops/s
# Warmup Iteration   5: 491852.134 ops/s
# Warmup Iteration   6: 442986.651 ops/s
# Warmup Iteration   7: 480853.082 ops/s
# Warmup Iteration   8: 508888.204 ops/s
# Warmup Iteration   9: 502187.745 ops/s
# Warmup Iteration  10: 480334.211 ops/s
# Warmup Iteration  11: 494136.319 ops/s
# Warmup Iteration  12: 505387.935 ops/s
# Warmup Iteration  13: 483590.890 ops/s
# Warmup Iteration  14: 490138.065 ops/s
# Warmup Iteration  15: 490605.936 ops/s
# Warmup Iteration  16: 475249.775 ops/s
# Warmup Iteration  17: 531731.565 ops/s
# Warmup Iteration  18: 511432.126 ops/s
# Warmup Iteration  19: 526062.214 ops/s
# Warmup Iteration  20: 503814.481 ops/s
# Warmup Iteration  21: 520562.375 ops/s
# Warmup Iteration  22: 518334.565 ops/s
# Warmup Iteration  23: 514132.245 ops/s
# Warmup Iteration  24: 514246.122 ops/s
# Warmup Iteration  25: 420573.199 ops/s
# Warmup Iteration  26: 476943.121 ops/s
# Warmup Iteration  27: 538832.601 ops/s
# Warmup Iteration  28: 515075.028 ops/s
# Warmup Iteration  29: 533228.150 ops/s
# Warmup Iteration  30: 493816.021 ops/s
Iteration   1: 514560.582 ops/s
Iteration   2: 497768.748 ops/s
Iteration   3: 519062.575 ops/s
Iteration   4: 504967.253 ops/s
Iteration   5: 499430.786 ops/s
Iteration   6: 510522.280 ops/s
Iteration   7: 506392.402 ops/s
Iteration   8: 515903.003 ops/s
Iteration   9: 528202.934 ops/s
Iteration  10: 504404.149 ops/s
Iteration  11: 505180.543 ops/s
Iteration  12: 530277.071 ops/s
Iteration  13: 506788.912 ops/s
Iteration  14: 498512.093 ops/s
Iteration  15: 510003.188 ops/s
Iteration  16: 513889.418 ops/s
Iteration  17: 494088.111 ops/s
Iteration  18: 527688.596 ops/s
Iteration  19: 500896.142 ops/s
Iteration  20: 513017.621 ops/s
Iteration  21: 529365.758 ops/s
Iteration  22: 499434.064 ops/s
Iteration  23: 531547.455 ops/s
Iteration  24: 503035.053 ops/s
Iteration  25: 526186.687 ops/s
Iteration  26: 517678.539 ops/s
Iteration  27: 512148.540 ops/s
Iteration  28: 521605.450 ops/s
Iteration  29: 509778.707 ops/s
Iteration  30: 524172.769 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarSupplierMainError":
  512550.314 ±(99.9%) 7356.318 ops/s [Average]
  (min, avg, max) = (494088.111, 512550.314, 531547.455), stdev = 11010.592
  CI (99.9%): [505193.996, 519906.633] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_scalarSupplierMainError  thrpt   30  512550.314 ± 7356.318  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectPrint$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectPrint

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16966.402 ops/s
# Warmup Iteration   2: 21688.778 ops/s
# Warmup Iteration   3: 20504.878 ops/s
# Warmup Iteration   4: 19124.189 ops/s
# Warmup Iteration   5: 21783.505 ops/s
# Warmup Iteration   6: 26600.787 ops/s
# Warmup Iteration   7: 23841.804 ops/s
# Warmup Iteration   8: 22265.974 ops/s
# Warmup Iteration   9: 21801.028 ops/s
# Warmup Iteration  10: 21952.814 ops/s
# Warmup Iteration  11: 22081.654 ops/s
# Warmup Iteration  12: 22010.801 ops/s
# Warmup Iteration  13: 22275.033 ops/s
# Warmup Iteration  14: 22084.972 ops/s
# Warmup Iteration  15: 21816.809 ops/s
# Warmup Iteration  16: 22332.631 ops/s
# Warmup Iteration  17: 21530.397 ops/s
# Warmup Iteration  18: 21986.779 ops/s
# Warmup Iteration  19: 21978.476 ops/s
# Warmup Iteration  20: 22157.441 ops/s
# Warmup Iteration  21: 22084.600 ops/s
# Warmup Iteration  22: 21462.365 ops/s
# Warmup Iteration  23: 22051.512 ops/s
# Warmup Iteration  24: 22075.948 ops/s
# Warmup Iteration  25: 22123.879 ops/s
# Warmup Iteration  26: 22393.947 ops/s
# Warmup Iteration  27: 21920.515 ops/s
# Warmup Iteration  28: 22208.116 ops/s
# Warmup Iteration  29: 22279.266 ops/s
# Warmup Iteration  30: 21598.810 ops/s
Iteration   1: 22078.840 ops/s
Iteration   2: 21332.804 ops/s
Iteration   3: 22349.171 ops/s
Iteration   4: 21758.032 ops/s
Iteration   5: 22379.065 ops/s
Iteration   6: 21810.228 ops/s
Iteration   7: 21738.810 ops/s
Iteration   8: 22017.974 ops/s
Iteration   9: 22247.376 ops/s
Iteration  10: 22279.789 ops/s
Iteration  11: 22223.191 ops/s
Iteration  12: 22023.985 ops/s
Iteration  13: 22023.378 ops/s
Iteration  14: 21858.099 ops/s
Iteration  15: 22213.489 ops/s
Iteration  16: 22428.775 ops/s
Iteration  17: 21589.046 ops/s
Iteration  18: 22324.471 ops/s
Iteration  19: 22079.594 ops/s
Iteration  20: 22170.906 ops/s
Iteration  21: 22459.340 ops/s
Iteration  22: 22240.825 ops/s
Iteration  23: 22266.812 ops/s
Iteration  24: 21938.674 ops/s
Iteration  25: 22486.412 ops/s
Iteration  26: 21265.021 ops/s
Iteration  27: 22047.505 ops/s
Iteration  28: 22447.505 ops/s
Iteration  29: 21679.633 ops/s
Iteration  30: 21551.808 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.SingleSchedulerTest._Benchmark.benchmark_scheduleDirectPrint":
  22043.685 ±(99.9%) 221.910 ops/s [Average]
  (min, avg, max) = (21265.021, 22043.685, 22486.412), stdev = 332.144
  CI (99.9%): [21821.775, 22265.595] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt      Score     Error  Units
SingleSchedulerTest._Benchmark.benchmark_scheduleDirectPrint  thrpt   30  22043.685 ± 221.910  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38081.412 ops/s
# Warmup Iteration   2: 170589.764 ops/s
# Warmup Iteration   3: 148084.476 ops/s
# Warmup Iteration   4: 190803.325 ops/s
# Warmup Iteration   5: 192763.172 ops/s
# Warmup Iteration   6: 174881.795 ops/s
# Warmup Iteration   7: 201620.653 ops/s
# Warmup Iteration   8: 156809.120 ops/s
# Warmup Iteration   9: 187980.986 ops/s
# Warmup Iteration  10: 190169.131 ops/s
# Warmup Iteration  11: 174464.666 ops/s
# Warmup Iteration  12: 207594.618 ops/s
# Warmup Iteration  13: 197406.261 ops/s
# Warmup Iteration  14: 206346.826 ops/s
# Warmup Iteration  15: 210948.127 ops/s
# Warmup Iteration  16: 194339.903 ops/s
# Warmup Iteration  17: 201472.271 ops/s
# Warmup Iteration  18: 192434.707 ops/s
# Warmup Iteration  19: 173693.738 ops/s
# Warmup Iteration  20: 153748.044 ops/s
# Warmup Iteration  21: 211746.354 ops/s
# Warmup Iteration  22: 198191.575 ops/s
# Warmup Iteration  23: 218534.981 ops/s
# Warmup Iteration  24: 213667.344 ops/s
# Warmup Iteration  25: 205004.746 ops/s
# Warmup Iteration  26: 185265.349 ops/s
# Warmup Iteration  27: 194641.341 ops/s
# Warmup Iteration  28: 200950.479 ops/s
# Warmup Iteration  29: 193407.075 ops/s
# Warmup Iteration  30: 187399.626 ops/s
Iteration   1: 190907.217 ops/s
Iteration   2: 192370.753 ops/s
Iteration   3: 187063.785 ops/s
Iteration   4: 204904.164 ops/s
Iteration   5: 208155.238 ops/s
Iteration   6: 195213.653 ops/s
Iteration   7: 204248.655 ops/s
Iteration   8: 201263.603 ops/s
Iteration   9: 217051.335 ops/s
Iteration  10: 198746.137 ops/s
Iteration  11: 197574.693 ops/s
Iteration  12: 197148.723 ops/s
Iteration  13: 191170.126 ops/s
Iteration  14: 199850.926 ops/s
Iteration  15: 200344.382 ops/s
Iteration  16: 191064.361 ops/s
Iteration  17: 189099.524 ops/s
Iteration  18: 199090.949 ops/s
Iteration  19: 211034.420 ops/s
Iteration  20: 191800.220 ops/s
Iteration  21: 201019.763 ops/s
Iteration  22: 206994.029 ops/s
Iteration  23: 187651.228 ops/s
Iteration  24: 198407.656 ops/s
Iteration  25: 179327.681 ops/s
Iteration  26: 207849.491 ops/s
Iteration  27: 191077.862 ops/s
Iteration  28: 207979.568 ops/s
Iteration  29: 167358.988 ops/s
Iteration  30: 193075.096 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_dispose":
  196961.474 ±(99.9%) 6667.181 ops/s [Average]
  (min, avg, max) = (167358.988, 196961.474, 217051.335), stdev = 9979.124
  CI (99.9%): [190294.293, 203628.655] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ObservableUnsubscribeOnTest._Benchmark.benchmark_dispose  thrpt   30  196961.474 ± 6667.181  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastOtherEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastOtherEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.828 ops/s
# Warmup Iteration   2: 4751.507 ops/s
# Warmup Iteration   3: 28805.146 ops/s
# Warmup Iteration   4: 26069.591 ops/s
# Warmup Iteration   5: 31463.824 ops/s
# Warmup Iteration   6: 32069.978 ops/s
# Warmup Iteration   7: 31986.723 ops/s
# Warmup Iteration   8: 36379.597 ops/s
# Warmup Iteration   9: 37647.658 ops/s
# Warmup Iteration  10: 34667.051 ops/s
# Warmup Iteration  11: 52263.591 ops/s
# Warmup Iteration  12: 34986.211 ops/s
# Warmup Iteration  13: 56162.817 ops/s
# Warmup Iteration  14: 104934.228 ops/s
# Warmup Iteration  15: 103280.570 ops/s
# Warmup Iteration  16: 96484.643 ops/s
# Warmup Iteration  17: 108078.025 ops/s
# Warmup Iteration  18: 103839.723 ops/s
# Warmup Iteration  19: 114858.424 ops/s
# Warmup Iteration  20: 108189.250 ops/s
# Warmup Iteration  21: 101928.905 ops/s
# Warmup Iteration  22: 105815.258 ops/s
# Warmup Iteration  23: 111614.949 ops/s
# Warmup Iteration  24: 134592.384 ops/s
# Warmup Iteration  25: 119395.829 ops/s
# Warmup Iteration  26: 107200.113 ops/s
# Warmup Iteration  27: 111736.571 ops/s
# Warmup Iteration  28: 122732.089 ops/s
# Warmup Iteration  29: 114317.750 ops/s
# Warmup Iteration  30: 103554.934 ops/s
Iteration   1: 106177.821 ops/s
Iteration   2: 105240.230 ops/s
Iteration   3: 108064.183 ops/s
Iteration   4: 105384.137 ops/s
Iteration   5: 118666.985 ops/s
Iteration   6: 107262.264 ops/s
Iteration   7: 113159.356 ops/s
Iteration   8: 129932.405 ops/s
Iteration   9: 85233.266 ops/s
Iteration  10: 111646.403 ops/s
Iteration  11: 116432.759 ops/s
Iteration  12: 113597.505 ops/s
Iteration  13: 114664.397 ops/s
Iteration  14: 112092.735 ops/s
Iteration  15: 106203.510 ops/s
Iteration  16: 108275.537 ops/s
Iteration  17: 109412.573 ops/s
Iteration  18: 110611.954 ops/s
Iteration  19: 108904.905 ops/s
Iteration  20: 103226.523 ops/s
Iteration  21: 107749.454 ops/s
Iteration  22: 117237.602 ops/s
Iteration  23: 121675.330 ops/s
Iteration  24: 124092.487 ops/s
Iteration  25: 101675.133 ops/s
Iteration  26: 98510.951 ops/s
Iteration  27: 97421.045 ops/s
Iteration  28: 97738.364 ops/s
Iteration  29: 125642.967 ops/s
Iteration  30: 104919.945 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastOtherEmpty":
  109695.091 ±(99.9%) 6183.288 ops/s [Average]
  (min, avg, max) = (85233.266, 109695.091, 129932.405), stdev = 9254.854
  CI (99.9%): [103511.803, 115878.378] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableSampleTest._Benchmark.benchmark_emitLastOtherEmpty  thrpt   30  109695.091 ± 6183.288  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_replayBoundedSelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_replayBoundedSelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 235936.579 ops/s
# Warmup Iteration   2: 569207.143 ops/s
# Warmup Iteration   3: 634425.982 ops/s
# Warmup Iteration   4: 634369.500 ops/s
# Warmup Iteration   5: 612892.087 ops/s
# Warmup Iteration   6: 624832.663 ops/s
# Warmup Iteration   7: 666004.562 ops/s
# Warmup Iteration   8: 641018.144 ops/s
# Warmup Iteration   9: 640121.986 ops/s
# Warmup Iteration  10: 671671.893 ops/s
# Warmup Iteration  11: 638243.291 ops/s
# Warmup Iteration  12: 499200.882 ops/s
# Warmup Iteration  13: 666262.517 ops/s
# Warmup Iteration  14: 633554.664 ops/s
# Warmup Iteration  15: 646913.222 ops/s
# Warmup Iteration  16: 647109.284 ops/s
# Warmup Iteration  17: 664143.092 ops/s
# Warmup Iteration  18: 697249.774 ops/s
# Warmup Iteration  19: 661118.220 ops/s
# Warmup Iteration  20: 680076.348 ops/s
# Warmup Iteration  21: 663962.687 ops/s
# Warmup Iteration  22: 669262.168 ops/s
# Warmup Iteration  23: 693111.072 ops/s
# Warmup Iteration  24: 665857.349 ops/s
# Warmup Iteration  25: 686488.599 ops/s
# Warmup Iteration  26: 681471.828 ops/s
# Warmup Iteration  27: 672194.075 ops/s
# Warmup Iteration  28: 668185.706 ops/s
# Warmup Iteration  29: 632092.084 ops/s
# Warmup Iteration  30: 699645.516 ops/s
Iteration   1: 665928.215 ops/s
Iteration   2: 682307.384 ops/s
Iteration   3: 694711.372 ops/s
Iteration   4: 686786.261 ops/s
Iteration   5: 682116.162 ops/s
Iteration   6: 693716.996 ops/s
Iteration   7: 693262.640 ops/s
Iteration   8: 667828.819 ops/s
Iteration   9: 670912.902 ops/s
Iteration  10: 705823.957 ops/s
Iteration  11: 680462.561 ops/s
Iteration  12: 700785.405 ops/s
Iteration  13: 714617.866 ops/s
Iteration  14: 664814.794 ops/s
Iteration  15: 661157.188 ops/s
Iteration  16: 699877.799 ops/s
Iteration  17: 668511.005 ops/s
Iteration  18: 680808.906 ops/s
Iteration  19: 702111.502 ops/s
Iteration  20: 675184.615 ops/s
Iteration  21: 704533.729 ops/s
Iteration  22: 668428.280 ops/s
Iteration  23: 692291.955 ops/s
Iteration  24: 690130.706 ops/s
Iteration  25: 669982.255 ops/s
Iteration  26: 694108.552 ops/s
Iteration  27: 684367.156 ops/s
Iteration  28: 671705.487 ops/s
Iteration  29: 702037.104 ops/s
Iteration  30: 672723.206 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_replayBoundedSelectorReturnsNull":
  684734.493 ±(99.9%) 9793.348 ops/s [Average]
  (min, avg, max) = (661157.188, 684734.493, 714617.866), stdev = 14658.223
  CI (99.9%): [674941.145, 694527.840] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_replayBoundedSelectorReturnsNull  thrpt   30  684734.493 ± 9793.348  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 98919.459 ops/s
# Warmup Iteration   2: 382037.630 ops/s
# Warmup Iteration   3: 502576.031 ops/s
# Warmup Iteration   4: 495544.021 ops/s
# Warmup Iteration   5: 501025.248 ops/s
# Warmup Iteration   6: 500566.319 ops/s
# Warmup Iteration   7: 490810.708 ops/s
# Warmup Iteration   8: 504417.407 ops/s
# Warmup Iteration   9: 503892.398 ops/s
# Warmup Iteration  10: 522385.477 ops/s
# Warmup Iteration  11: 526388.747 ops/s
# Warmup Iteration  12: 501793.052 ops/s
# Warmup Iteration  13: 543364.124 ops/s
# Warmup Iteration  14: 499616.210 ops/s
# Warmup Iteration  15: 527737.900 ops/s
# Warmup Iteration  16: 508335.756 ops/s
# Warmup Iteration  17: 529191.583 ops/s
# Warmup Iteration  18: 547770.380 ops/s
# Warmup Iteration  19: 563819.742 ops/s
# Warmup Iteration  20: 534114.367 ops/s
# Warmup Iteration  21: 556726.628 ops/s
# Warmup Iteration  22: 502899.765 ops/s
# Warmup Iteration  23: 552007.793 ops/s
# Warmup Iteration  24: 533269.572 ops/s
# Warmup Iteration  25: 521660.687 ops/s
# Warmup Iteration  26: 561364.225 ops/s
# Warmup Iteration  27: 514034.016 ops/s
# Warmup Iteration  28: 545461.121 ops/s
# Warmup Iteration  29: 550147.047 ops/s
# Warmup Iteration  30: 535610.329 ops/s
Iteration   1: 551031.060 ops/s
Iteration   2: 526199.541 ops/s
Iteration   3: 566307.671 ops/s
Iteration   4: 525403.884 ops/s
Iteration   5: 543270.614 ops/s
Iteration   6: 547836.849 ops/s
Iteration   7: 548049.894 ops/s
Iteration   8: 538744.641 ops/s
Iteration   9: 526997.248 ops/s
Iteration  10: 551665.392 ops/s
Iteration  11: 530896.587 ops/s
Iteration  12: 569885.478 ops/s
Iteration  13: 431203.557 ops/s
Iteration  14: 542759.865 ops/s
Iteration  15: 528853.882 ops/s
Iteration  16: 551739.645 ops/s
Iteration  17: 533335.643 ops/s
Iteration  18: 533001.246 ops/s
Iteration  19: 531909.301 ops/s
Iteration  20: 553104.069 ops/s
Iteration  21: 543456.840 ops/s
Iteration  22: 545872.129 ops/s
Iteration  23: 547521.461 ops/s
Iteration  24: 522880.087 ops/s
Iteration  25: 532048.482 ops/s
Iteration  26: 534509.958 ops/s
Iteration  27: 520051.780 ops/s
Iteration  28: 541664.704 ops/s
Iteration  29: 544513.069 ops/s
Iteration  30: 532108.549 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe":
  536560.771 ±(99.9%) 15541.298 ops/s [Average]
  (min, avg, max) = (431203.557, 536560.771, 569885.478), stdev = 23261.485
  CI (99.9%): [521019.473, 552102.069] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MaybeUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  536560.771 ± 15541.298  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.841 ops/s
# Warmup Iteration   2: 15347.835 ops/s
# Warmup Iteration   3: 32891.904 ops/s
# Warmup Iteration   4: 35393.816 ops/s
# Warmup Iteration   5: 16521.410 ops/s
# Warmup Iteration   6: 11040.279 ops/s
# Warmup Iteration   7: 9776.132 ops/s
# Warmup Iteration   8: 19450.753 ops/s
# Warmup Iteration   9: 18594.449 ops/s
# Warmup Iteration  10: 16918.710 ops/s
# Warmup Iteration  11: 44435.309 ops/s
# Warmup Iteration  12: 50969.016 ops/s
# Warmup Iteration  13: 11779.971 ops/s
# Warmup Iteration  14: 7355.227 ops/s
# Warmup Iteration  15: 8622.769 ops/s
# Warmup Iteration  16: 4341.873 ops/s
# Warmup Iteration  17: 5559.316 ops/s
# Warmup Iteration  18: 4800.763 ops/s
# Warmup Iteration  19: 5171.071 ops/s
# Warmup Iteration  20: 4900.684 ops/s
# Warmup Iteration  21: 4020.281 ops/s
# Warmup Iteration  22: 5340.184 ops/s
# Warmup Iteration  23: 4697.441 ops/s
# Warmup Iteration  24: 5156.164 ops/s
# Warmup Iteration  25: 3333.199 ops/s
# Warmup Iteration  26: 5090.801 ops/s
# Warmup Iteration  27: 4855.128 ops/s
# Warmup Iteration  28: 6577.178 ops/s
# Warmup Iteration  29: 7742.173 ops/s
# Warmup Iteration  30: 5285.312 ops/s
Iteration   1: 4821.464 ops/s
Iteration   2: 4636.833 ops/s
Iteration   3: 8061.023 ops/s
Iteration   4: 7830.588 ops/s
Iteration   5: 4088.850 ops/s
Iteration   6: 6322.631 ops/s
Iteration   7: 4023.633 ops/s
Iteration   8: 7239.783 ops/s
Iteration   9: 4499.609 ops/s
Iteration  10: 4494.877 ops/s
Iteration  11: 7073.302 ops/s
Iteration  12: 4490.603 ops/s
Iteration  13: 5433.685 ops/s
Iteration  14: 5834.371 ops/s
Iteration  15: 6038.645 ops/s
Iteration  16: 5466.803 ops/s
Iteration  17: 5793.238 ops/s
Iteration  18: 8669.585 ops/s
Iteration  19: 6864.084 ops/s
Iteration  20: 5447.305 ops/s
Iteration  21: 7232.158 ops/s
Iteration  22: 659.825 ops/s
Iteration  23: 8394.699 ops/s
Iteration  24: 4312.972 ops/s
Iteration  25: 4540.528 ops/s
Iteration  26: 5545.494 ops/s
Iteration  27: 5690.636 ops/s
Iteration  28: 6449.423 ops/s
Iteration  29: 7473.349 ops/s
Iteration  30: 4413.034 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedDoubleOnSubscribe":
  5728.101 ±(99.9%) 1113.621 ops/s [Average]
  (min, avg, max) = (659.825, 5728.101, 8669.585), stdev = 1666.816
  CI (99.9%): [4614.479, 6841.722] (assumes normal distribution)


# Run complete. Total time: 00:01:09

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt     Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_timedDoubleOnSubscribe  thrpt   30  5728.101 ± 1113.621  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18549.855 ops/s
# Warmup Iteration   2: 71232.952 ops/s
# Warmup Iteration   3: 74042.520 ops/s
# Warmup Iteration   4: 195945.247 ops/s
# Warmup Iteration   5: 217032.850 ops/s
# Warmup Iteration   6: 205395.177 ops/s
# Warmup Iteration   7: 214412.831 ops/s
# Warmup Iteration   8: 216454.130 ops/s
# Warmup Iteration   9: 209043.939 ops/s
# Warmup Iteration  10: 220415.459 ops/s
# Warmup Iteration  11: 217652.789 ops/s
# Warmup Iteration  12: 215033.218 ops/s
# Warmup Iteration  13: 228765.252 ops/s
# Warmup Iteration  14: 213591.322 ops/s
# Warmup Iteration  15: 218546.541 ops/s
# Warmup Iteration  16: 208202.998 ops/s
# Warmup Iteration  17: 220408.920 ops/s
# Warmup Iteration  18: 226939.331 ops/s
# Warmup Iteration  19: 216213.828 ops/s
# Warmup Iteration  20: 226525.757 ops/s
# Warmup Iteration  21: 218771.857 ops/s
# Warmup Iteration  22: 214538.590 ops/s
# Warmup Iteration  23: 224588.534 ops/s
# Warmup Iteration  24: 216621.182 ops/s
# Warmup Iteration  25: 224705.781 ops/s
# Warmup Iteration  26: 217044.577 ops/s
# Warmup Iteration  27: 217999.910 ops/s
# Warmup Iteration  28: 231465.894 ops/s
# Warmup Iteration  29: 217446.515 ops/s
# Warmup Iteration  30: 225843.365 ops/s
Iteration   1: 217133.243 ops/s
Iteration   2: 227344.672 ops/s
Iteration   3: 215642.013 ops/s
Iteration   4: 224203.201 ops/s
Iteration   5: 224208.262 ops/s
Iteration   6: 220110.224 ops/s
Iteration   7: 226304.878 ops/s
Iteration   8: 215232.970 ops/s
Iteration   9: 225431.935 ops/s
Iteration  10: 213165.491 ops/s
Iteration  11: 222307.105 ops/s
Iteration  12: 227977.796 ops/s
Iteration  13: 222173.950 ops/s
Iteration  14: 224182.859 ops/s
Iteration  15: 219947.727 ops/s
Iteration  16: 227882.261 ops/s
Iteration  17: 226008.035 ops/s
Iteration  18: 220408.150 ops/s
Iteration  19: 214559.188 ops/s
Iteration  20: 225789.155 ops/s
Iteration  21: 218292.984 ops/s
Iteration  22: 228413.044 ops/s
Iteration  23: 232412.968 ops/s
Iteration  24: 217755.614 ops/s
Iteration  25: 226963.007 ops/s
Iteration  26: 217540.883 ops/s
Iteration  27: 221114.496 ops/s
Iteration  28: 218108.511 ops/s
Iteration  29: 223586.287 ops/s
Iteration  30: 221716.655 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayError":
  222197.252 ±(99.9%) 3213.923 ops/s [Average]
  (min, avg, max) = (213165.491, 222197.252, 232412.968), stdev = 4810.449
  CI (99.9%): [218983.329, 225411.175] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayError  thrpt   30  222197.252 ± 3213.923  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_syncNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_syncNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 194456.187 ops/s
# Warmup Iteration   2: 509278.299 ops/s
# Warmup Iteration   3: 550607.376 ops/s
# Warmup Iteration   4: 572705.027 ops/s
# Warmup Iteration   5: 548889.175 ops/s
# Warmup Iteration   6: 537472.351 ops/s
# Warmup Iteration   7: 580340.791 ops/s
# Warmup Iteration   8: 552032.081 ops/s
# Warmup Iteration   9: 585395.860 ops/s
# Warmup Iteration  10: 568058.569 ops/s
# Warmup Iteration  11: 544055.841 ops/s
# Warmup Iteration  12: 578155.767 ops/s
# Warmup Iteration  13: 550102.192 ops/s
# Warmup Iteration  14: 592563.310 ops/s
# Warmup Iteration  15: 573331.327 ops/s
# Warmup Iteration  16: 595671.347 ops/s
# Warmup Iteration  17: 606576.736 ops/s
# Warmup Iteration  18: 587865.262 ops/s
# Warmup Iteration  19: 610967.699 ops/s
# Warmup Iteration  20: 576384.587 ops/s
# Warmup Iteration  21: 619636.311 ops/s
# Warmup Iteration  22: 575419.510 ops/s
# Warmup Iteration  23: 602026.583 ops/s
# Warmup Iteration  24: 598152.018 ops/s
# Warmup Iteration  25: 586478.622 ops/s
# Warmup Iteration  26: 585478.339 ops/s
# Warmup Iteration  27: 581677.470 ops/s
# Warmup Iteration  28: 591601.256 ops/s
# Warmup Iteration  29: 621847.448 ops/s
# Warmup Iteration  30: 580822.263 ops/s
Iteration   1: 587139.941 ops/s
Iteration   2: 594586.724 ops/s
Iteration   3: 602774.600 ops/s
Iteration   4: 612260.767 ops/s
Iteration   5: 593189.940 ops/s
Iteration   6: 615874.360 ops/s
Iteration   7: 585478.800 ops/s
Iteration   8: 609174.700 ops/s
Iteration   9: 595269.706 ops/s
Iteration  10: 598606.901 ops/s
Iteration  11: 621379.172 ops/s
Iteration  12: 598378.278 ops/s
Iteration  13: 594706.569 ops/s
Iteration  14: 572870.063 ops/s
Iteration  15: 601129.871 ops/s
Iteration  16: 588612.705 ops/s
Iteration  17: 610521.457 ops/s
Iteration  18: 588715.432 ops/s
Iteration  19: 614871.336 ops/s
Iteration  20: 619036.713 ops/s
Iteration  21: 592445.229 ops/s
Iteration  22: 601466.435 ops/s
Iteration  23: 417829.827 ops/s
Iteration  24: 598860.334 ops/s
Iteration  25: 606113.316 ops/s
Iteration  26: 601428.557 ops/s
Iteration  27: 600947.573 ops/s
Iteration  28: 581938.679 ops/s
Iteration  29: 585413.888 ops/s
Iteration  30: 614851.375 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_syncNull":
  593529.108 ±(99.9%) 23519.124 ops/s [Average]
  (min, avg, max) = (417829.827, 593529.108, 621379.172), stdev = 35202.320
  CI (99.9%): [570009.984, 617048.232] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
ObservableFromCompletionStageTest._Benchmark.benchmark_syncNull  thrpt   30  593529.108 ± 23519.124  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_syncFailure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_syncFailure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101255.432 ops/s
# Warmup Iteration   2: 300576.270 ops/s
# Warmup Iteration   3: 290689.648 ops/s
# Warmup Iteration   4: 321113.957 ops/s
# Warmup Iteration   5: 315518.531 ops/s
# Warmup Iteration   6: 312781.911 ops/s
# Warmup Iteration   7: 325383.010 ops/s
# Warmup Iteration   8: 316796.430 ops/s
# Warmup Iteration   9: 317302.462 ops/s
# Warmup Iteration  10: 310790.948 ops/s
# Warmup Iteration  11: 318053.550 ops/s
# Warmup Iteration  12: 313649.747 ops/s
# Warmup Iteration  13: 314797.894 ops/s
# Warmup Iteration  14: 316063.706 ops/s
# Warmup Iteration  15: 313986.533 ops/s
# Warmup Iteration  16: 320219.006 ops/s
# Warmup Iteration  17: 330910.408 ops/s
# Warmup Iteration  18: 345322.482 ops/s
# Warmup Iteration  19: 359284.260 ops/s
# Warmup Iteration  20: 324742.691 ops/s
# Warmup Iteration  21: 358856.818 ops/s
# Warmup Iteration  22: 343300.214 ops/s
# Warmup Iteration  23: 333447.417 ops/s
# Warmup Iteration  24: 352020.529 ops/s
# Warmup Iteration  25: 353027.293 ops/s
# Warmup Iteration  26: 359984.487 ops/s
# Warmup Iteration  27: 335482.115 ops/s
# Warmup Iteration  28: 345015.025 ops/s
# Warmup Iteration  29: 333133.585 ops/s
# Warmup Iteration  30: 346784.970 ops/s
Iteration   1: 344170.823 ops/s
Iteration   2: 329438.343 ops/s
Iteration   3: 356634.279 ops/s
Iteration   4: 343673.961 ops/s
Iteration   5: 336374.506 ops/s
Iteration   6: 350478.244 ops/s
Iteration   7: 348888.259 ops/s
Iteration   8: 346037.690 ops/s
Iteration   9: 339088.905 ops/s
Iteration  10: 353588.225 ops/s
Iteration  11: 344780.550 ops/s
Iteration  12: 334286.918 ops/s
Iteration  13: 352608.120 ops/s
Iteration  14: 339041.031 ops/s
Iteration  15: 339489.564 ops/s
Iteration  16: 350421.487 ops/s
Iteration  17: 341823.305 ops/s
Iteration  18: 344002.486 ops/s
Iteration  19: 351371.569 ops/s
Iteration  20: 351383.834 ops/s
Iteration  21: 348789.997 ops/s
Iteration  22: 347334.351 ops/s
Iteration  23: 352686.125 ops/s
Iteration  24: 338222.205 ops/s
Iteration  25: 345908.395 ops/s
Iteration  26: 349397.365 ops/s
Iteration  27: 347273.767 ops/s
Iteration  28: 351543.380 ops/s
Iteration  29: 339399.050 ops/s
Iteration  30: 344457.727 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_syncFailure":
  345419.815 ±(99.9%) 4278.065 ops/s [Average]
  (min, avg, max) = (329438.343, 345419.815, 356634.279), stdev = 6403.206
  CI (99.9%): [341141.751, 349697.880] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableFromCompletionStageTest._Benchmark.benchmark_syncFailure  thrpt   30  345419.815 ± 4278.065  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_errorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_errorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61795.689 ops/s
# Warmup Iteration   2: 446012.786 ops/s
# Warmup Iteration   3: 500891.981 ops/s
# Warmup Iteration   4: 569526.942 ops/s
# Warmup Iteration   5: 438682.690 ops/s
# Warmup Iteration   6: 501075.365 ops/s
# Warmup Iteration   7: 536048.658 ops/s
# Warmup Iteration   8: 555084.816 ops/s
# Warmup Iteration   9: 529458.853 ops/s
# Warmup Iteration  10: 535550.872 ops/s
# Warmup Iteration  11: 539280.275 ops/s
# Warmup Iteration  12: 550256.545 ops/s
# Warmup Iteration  13: 528041.335 ops/s
# Warmup Iteration  14: 544967.673 ops/s
# Warmup Iteration  15: 544771.171 ops/s
# Warmup Iteration  16: 559553.402 ops/s
# Warmup Iteration  17: 601942.325 ops/s
# Warmup Iteration  18: 573075.838 ops/s
# Warmup Iteration  19: 571715.456 ops/s
# Warmup Iteration  20: 594259.259 ops/s
# Warmup Iteration  21: 565521.991 ops/s
# Warmup Iteration  22: 587532.596 ops/s
# Warmup Iteration  23: 547813.472 ops/s
# Warmup Iteration  24: 574628.485 ops/s
# Warmup Iteration  25: 606065.351 ops/s
# Warmup Iteration  26: 593011.209 ops/s
# Warmup Iteration  27: 573572.474 ops/s
# Warmup Iteration  28: 565160.080 ops/s
# Warmup Iteration  29: 598801.468 ops/s
# Warmup Iteration  30: 589226.748 ops/s
Iteration   1: 558179.991 ops/s
Iteration   2: 592941.060 ops/s
Iteration   3: 570833.379 ops/s
Iteration   4: 585699.238 ops/s
Iteration   5: 555559.672 ops/s
Iteration   6: 562094.226 ops/s
Iteration   7: 596645.234 ops/s
Iteration   8: 575325.243 ops/s
Iteration   9: 576190.270 ops/s
Iteration  10: 587180.911 ops/s
Iteration  11: 574302.304 ops/s
Iteration  12: 594181.888 ops/s
Iteration  13: 558769.257 ops/s
Iteration  14: 603164.500 ops/s
Iteration  15: 591202.984 ops/s
Iteration  16: 559364.483 ops/s
Iteration  17: 569747.945 ops/s
Iteration  18: 600430.467 ops/s
Iteration  19: 552204.620 ops/s
Iteration  20: 578978.911 ops/s
Iteration  21: 567811.646 ops/s
Iteration  22: 574519.145 ops/s
Iteration  23: 601112.011 ops/s
Iteration  24: 546109.259 ops/s
Iteration  25: 600073.866 ops/s
Iteration  26: 557703.896 ops/s
Iteration  27: 597074.123 ops/s
Iteration  28: 557051.195 ops/s
Iteration  29: 578186.088 ops/s
Iteration  30: 570791.404 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipLastTimedTest._Benchmark.benchmark_errorDelayed":
  576447.641 ±(99.9%) 11311.126 ops/s [Average]
  (min, avg, max) = (546109.259, 576447.641, 603164.500), stdev = 16929.962
  CI (99.9%): [565136.515, 587758.766] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableSkipLastTimedTest._Benchmark.benchmark_errorDelayed  thrpt   30  576447.641 ± 11311.126  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservableTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservableTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204714.443 ops/s
# Warmup Iteration   2: 556043.632 ops/s
# Warmup Iteration   3: 679470.239 ops/s
# Warmup Iteration   4: 658929.383 ops/s
# Warmup Iteration   5: 708779.852 ops/s
# Warmup Iteration   6: 664521.877 ops/s
# Warmup Iteration   7: 656758.819 ops/s
# Warmup Iteration   8: 677876.846 ops/s
# Warmup Iteration   9: 672152.959 ops/s
# Warmup Iteration  10: 650116.889 ops/s
# Warmup Iteration  11: 658225.779 ops/s
# Warmup Iteration  12: 674327.526 ops/s
# Warmup Iteration  13: 660259.985 ops/s
# Warmup Iteration  14: 664311.010 ops/s
# Warmup Iteration  15: 699421.367 ops/s
# Warmup Iteration  16: 658703.203 ops/s
# Warmup Iteration  17: 748209.933 ops/s
# Warmup Iteration  18: 730733.479 ops/s
# Warmup Iteration  19: 690079.412 ops/s
# Warmup Iteration  20: 720231.747 ops/s
# Warmup Iteration  21: 717398.462 ops/s
# Warmup Iteration  22: 709824.843 ops/s
# Warmup Iteration  23: 690626.269 ops/s
# Warmup Iteration  24: 729125.239 ops/s
# Warmup Iteration  25: 718437.453 ops/s
# Warmup Iteration  26: 727733.457 ops/s
# Warmup Iteration  27: 744875.750 ops/s
# Warmup Iteration  28: 690786.405 ops/s
# Warmup Iteration  29: 731826.147 ops/s
# Warmup Iteration  30: 679160.990 ops/s
Iteration   1: 726735.150 ops/s
Iteration   2: 739917.649 ops/s
Iteration   3: 677985.299 ops/s
Iteration   4: 758851.148 ops/s
Iteration   5: 717760.323 ops/s
Iteration   6: 737706.127 ops/s
Iteration   7: 693221.144 ops/s
Iteration   8: 753617.649 ops/s
Iteration   9: 684885.139 ops/s
Iteration  10: 717777.700 ops/s
Iteration  11: 718748.734 ops/s
Iteration  12: 730350.425 ops/s
Iteration  13: 749342.235 ops/s
Iteration  14: 697793.861 ops/s
Iteration  15: 632502.636 ops/s
Iteration  16: 698124.959 ops/s
Iteration  17: 737062.731 ops/s
Iteration  18: 730747.506 ops/s
Iteration  19: 711927.047 ops/s
Iteration  20: 752751.091 ops/s
Iteration  21: 699510.766 ops/s
Iteration  22: 745266.737 ops/s
Iteration  23: 697054.775 ops/s
Iteration  24: 730705.446 ops/s
Iteration  25: 721992.135 ops/s
Iteration  26: 703711.801 ops/s
Iteration  27: 713231.392 ops/s
Iteration  28: 705933.113 ops/s
Iteration  29: 698325.976 ops/s
Iteration  30: 742008.951 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromObservableTest._Benchmark.benchmark_error":
  717518.322 ±(99.9%) 18082.807 ops/s [Average]
  (min, avg, max) = (632502.636, 717518.322, 758851.148), stdev = 27065.497
  CI (99.9%): [699435.514, 735601.129] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
FlowableFromObservableTest._Benchmark.benchmark_error  thrpt   30  717518.322 ± 18082.807  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_fromActionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_fromActionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 159919.052 ops/s
# Warmup Iteration   2: 563884.319 ops/s
# Warmup Iteration   3: 650342.163 ops/s
# Warmup Iteration   4: 660397.743 ops/s
# Warmup Iteration   5: 693907.033 ops/s
# Warmup Iteration   6: 628169.291 ops/s
# Warmup Iteration   7: 608856.450 ops/s
# Warmup Iteration   8: 699794.817 ops/s
# Warmup Iteration   9: 590910.394 ops/s
# Warmup Iteration  10: 681488.134 ops/s
# Warmup Iteration  11: 663878.943 ops/s
# Warmup Iteration  12: 692796.812 ops/s
# Warmup Iteration  13: 663782.190 ops/s
# Warmup Iteration  14: 689479.438 ops/s
# Warmup Iteration  15: 673037.293 ops/s
# Warmup Iteration  16: 701059.164 ops/s
# Warmup Iteration  17: 705652.062 ops/s
# Warmup Iteration  18: 710068.869 ops/s
# Warmup Iteration  19: 731721.404 ops/s
# Warmup Iteration  20: 696144.782 ops/s
# Warmup Iteration  21: 717393.943 ops/s
# Warmup Iteration  22: 691303.914 ops/s
# Warmup Iteration  23: 728615.014 ops/s
# Warmup Iteration  24: 704928.351 ops/s
# Warmup Iteration  25: 741544.079 ops/s
# Warmup Iteration  26: 706198.159 ops/s
# Warmup Iteration  27: 720600.559 ops/s
# Warmup Iteration  28: 724470.694 ops/s
# Warmup Iteration  29: 710327.001 ops/s
# Warmup Iteration  30: 733056.684 ops/s
Iteration   1: 701086.387 ops/s
Iteration   2: 727207.292 ops/s
Iteration   3: 698894.698 ops/s
Iteration   4: 725528.367 ops/s
Iteration   5: 726148.408 ops/s
Iteration   6: 703730.685 ops/s
Iteration   7: 719139.497 ops/s
Iteration   8: 702320.803 ops/s
Iteration   9: 719961.093 ops/s
Iteration  10: 706721.537 ops/s
Iteration  11: 722461.821 ops/s
Iteration  12: 717774.689 ops/s
Iteration  13: 708667.971 ops/s
Iteration  14: 731003.379 ops/s
Iteration  15: 720980.510 ops/s
Iteration  16: 685125.768 ops/s
Iteration  17: 703118.371 ops/s
Iteration  18: 731800.954 ops/s
Iteration  19: 697027.433 ops/s
Iteration  20: 735124.947 ops/s
Iteration  21: 740891.011 ops/s
Iteration  22: 694888.698 ops/s
Iteration  23: 722632.382 ops/s
Iteration  24: 704766.243 ops/s
Iteration  25: 723673.442 ops/s
Iteration  26: 724125.256 ops/s
Iteration  27: 701393.499 ops/s
Iteration  28: 713341.353 ops/s
Iteration  29: 705775.030 ops/s
Iteration  30: 706063.868 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_fromActionThrows":
  714045.846 ±(99.9%) 9113.763 ops/s [Average]
  (min, avg, max) = (685125.768, 714045.846, 740891.011), stdev = 13641.052
  CI (99.9%): [704932.084, 723159.609] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableFromActionTest._Benchmark.benchmark_fromActionThrows  thrpt   30  714045.846 ± 9113.763  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_supplierFusedError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_supplierFusedError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 297425.592 ops/s
# Warmup Iteration   2: 567928.434 ops/s
# Warmup Iteration   3: 663757.015 ops/s
# Warmup Iteration   4: 656133.662 ops/s
# Warmup Iteration   5: 699795.708 ops/s
# Warmup Iteration   6: 647501.640 ops/s
# Warmup Iteration   7: 657949.291 ops/s
# Warmup Iteration   8: 699358.897 ops/s
# Warmup Iteration   9: 667868.932 ops/s
# Warmup Iteration  10: 678140.677 ops/s
# Warmup Iteration  11: 678490.024 ops/s
# Warmup Iteration  12: 635880.465 ops/s
# Warmup Iteration  13: 712442.606 ops/s
# Warmup Iteration  14: 658361.812 ops/s
# Warmup Iteration  15: 704585.671 ops/s
# Warmup Iteration  16: 673770.161 ops/s
# Warmup Iteration  17: 698925.626 ops/s
# Warmup Iteration  18: 732504.742 ops/s
# Warmup Iteration  19: 700114.329 ops/s
# Warmup Iteration  20: 701567.773 ops/s
# Warmup Iteration  21: 739727.813 ops/s
# Warmup Iteration  22: 684616.966 ops/s
# Warmup Iteration  23: 693853.694 ops/s
# Warmup Iteration  24: 737275.134 ops/s
# Warmup Iteration  25: 697874.295 ops/s
# Warmup Iteration  26: 703443.575 ops/s
# Warmup Iteration  27: 736606.873 ops/s
# Warmup Iteration  28: 711350.204 ops/s
# Warmup Iteration  29: 744375.692 ops/s
# Warmup Iteration  30: 748438.405 ops/s
Iteration   1: 695706.245 ops/s
Iteration   2: 728418.976 ops/s
Iteration   3: 704395.533 ops/s
Iteration   4: 710299.064 ops/s
Iteration   5: 738367.898 ops/s
Iteration   6: 692038.430 ops/s
Iteration   7: 721250.416 ops/s
Iteration   8: 694351.420 ops/s
Iteration   9: 502446.747 ops/s
Iteration  10: 723839.384 ops/s
Iteration  11: 723097.897 ops/s
Iteration  12: 703757.923 ops/s
Iteration  13: 726439.446 ops/s
Iteration  14: 691593.818 ops/s
Iteration  15: 708834.753 ops/s
Iteration  16: 702885.097 ops/s
Iteration  17: 713001.056 ops/s
Iteration  18: 732429.325 ops/s
Iteration  19: 696646.571 ops/s
Iteration  20: 718658.577 ops/s
Iteration  21: 715210.853 ops/s
Iteration  22: 728378.482 ops/s
Iteration  23: 709710.953 ops/s
Iteration  24: 732774.051 ops/s
Iteration  25: 690481.136 ops/s
Iteration  26: 723279.310 ops/s
Iteration  27: 725695.340 ops/s
Iteration  28: 695885.721 ops/s
Iteration  29: 716739.016 ops/s
Iteration  30: 700081.187 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_supplierFusedError":
  705556.488 ±(99.9%) 27299.660 ops/s [Average]
  (min, avg, max) = (502446.747, 705556.488, 738367.898), stdev = 40860.850
  CI (99.9%): [678256.827, 732856.148] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_supplierFusedError  thrpt   30  705556.488 ± 27299.660  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_disposedAfterOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_disposedAfterOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2148078.645 ops/s
# Warmup Iteration   2: 4573445.652 ops/s
# Warmup Iteration   3: 6096535.090 ops/s
# Warmup Iteration   4: 6212592.517 ops/s
# Warmup Iteration   5: 6302394.621 ops/s
# Warmup Iteration   6: 6175872.468 ops/s
# Warmup Iteration   7: 5999252.365 ops/s
# Warmup Iteration   8: 6574935.571 ops/s
# Warmup Iteration   9: 6334578.378 ops/s
# Warmup Iteration  10: 5945807.001 ops/s
# Warmup Iteration  11: 6176845.747 ops/s
# Warmup Iteration  12: 6143528.244 ops/s
# Warmup Iteration  13: 6350146.105 ops/s
# Warmup Iteration  14: 6164464.109 ops/s
# Warmup Iteration  15: 6252621.907 ops/s
# Warmup Iteration  16: 6006533.513 ops/s
# Warmup Iteration  17: 6055147.982 ops/s
# Warmup Iteration  18: 6297681.383 ops/s
# Warmup Iteration  19: 5932234.516 ops/s
# Warmup Iteration  20: 6234804.530 ops/s
# Warmup Iteration  21: 6102678.301 ops/s
# Warmup Iteration  22: 6161265.007 ops/s
# Warmup Iteration  23: 6192968.493 ops/s
# Warmup Iteration  24: 6001395.486 ops/s
# Warmup Iteration  25: 6450534.735 ops/s
# Warmup Iteration  26: 6192981.881 ops/s
# Warmup Iteration  27: 6135460.682 ops/s
# Warmup Iteration  28: 6216671.095 ops/s
# Warmup Iteration  29: 6005537.472 ops/s
# Warmup Iteration  30: 6218340.399 ops/s
Iteration   1: 6268723.997 ops/s
Iteration   2: 6004235.958 ops/s
Iteration   3: 6437602.109 ops/s
Iteration   4: 6443283.960 ops/s
Iteration   5: 6106646.022 ops/s
Iteration   6: 6224208.767 ops/s
Iteration   7: 6320518.385 ops/s
Iteration   8: 6243814.350 ops/s
Iteration   9: 6114159.300 ops/s
Iteration  10: 6464613.686 ops/s
Iteration  11: 5957052.877 ops/s
Iteration  12: 6484470.844 ops/s
Iteration  13: 6098457.306 ops/s
Iteration  14: 6091488.187 ops/s
Iteration  15: 6152824.690 ops/s
Iteration  16: 6161461.791 ops/s
Iteration  17: 6266775.543 ops/s
Iteration  18: 6158987.311 ops/s
Iteration  19: 6102962.463 ops/s
Iteration  20: 6406922.300 ops/s
Iteration  21: 6075908.064 ops/s
Iteration  22: 6261732.709 ops/s
Iteration  23: 6004185.136 ops/s
Iteration  24: 6172527.493 ops/s
Iteration  25: 6221795.807 ops/s
Iteration  26: 6114996.229 ops/s
Iteration  27: 6125910.125 ops/s
Iteration  28: 6034908.831 ops/s
Iteration  29: 6219047.764 ops/s
Iteration  30: 5998716.489 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_disposedAfterOnNext":
  6191297.950 ±(99.9%) 97948.828 ops/s [Average]
  (min, avg, max) = (5957052.877, 6191297.950, 6484470.844), stdev = 146605.206
  CI (99.9%): [6093349.122, 6289246.778] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_disposedAfterOnNext  thrpt   30  6191297.950 ± 97948.828  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_multipleOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_multipleOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2045949.781 ops/s
# Warmup Iteration   2: 5054761.998 ops/s
# Warmup Iteration   3: 6897418.520 ops/s
# Warmup Iteration   4: 6888331.901 ops/s
# Warmup Iteration   5: 7260603.911 ops/s
# Warmup Iteration   6: 6935987.402 ops/s
# Warmup Iteration   7: 6929083.885 ops/s
# Warmup Iteration   8: 7060697.199 ops/s
# Warmup Iteration   9: 6893188.326 ops/s
# Warmup Iteration  10: 6881312.543 ops/s
# Warmup Iteration  11: 7033329.098 ops/s
# Warmup Iteration  12: 6853183.338 ops/s
# Warmup Iteration  13: 7117532.114 ops/s
# Warmup Iteration  14: 6735469.329 ops/s
# Warmup Iteration  15: 7073998.348 ops/s
# Warmup Iteration  16: 6916022.878 ops/s
# Warmup Iteration  17: 7078696.724 ops/s
# Warmup Iteration  18: 7267834.911 ops/s
# Warmup Iteration  19: 6903476.268 ops/s
# Warmup Iteration  20: 7168503.390 ops/s
# Warmup Iteration  21: 6927946.540 ops/s
# Warmup Iteration  22: 7122081.150 ops/s
# Warmup Iteration  23: 7211212.095 ops/s
# Warmup Iteration  24: 6925206.596 ops/s
# Warmup Iteration  25: 7237443.358 ops/s
# Warmup Iteration  26: 7238252.977 ops/s
# Warmup Iteration  27: 6951998.776 ops/s
# Warmup Iteration  28: 6948125.663 ops/s
# Warmup Iteration  29: 7217128.842 ops/s
# Warmup Iteration  30: 6853286.592 ops/s
Iteration   1: 7235452.022 ops/s
Iteration   2: 7006253.671 ops/s
Iteration   3: 7214121.913 ops/s
Iteration   4: 5682867.084 ops/s
Iteration   5: 6851993.271 ops/s
Iteration   6: 6846417.857 ops/s
Iteration   7: 7368601.187 ops/s
Iteration   8: 6870854.472 ops/s
Iteration   9: 7130446.895 ops/s
Iteration  10: 6968254.632 ops/s
Iteration  11: 7076202.864 ops/s
Iteration  12: 7216301.255 ops/s
Iteration  13: 7009519.286 ops/s
Iteration  14: 7124319.758 ops/s
Iteration  15: 6977187.905 ops/s
Iteration  16: 7050939.714 ops/s
Iteration  17: 7040788.946 ops/s
Iteration  18: 6954643.848 ops/s
Iteration  19: 7448187.507 ops/s
Iteration  20: 6863936.485 ops/s
Iteration  21: 7233440.647 ops/s
Iteration  22: 7212382.910 ops/s
Iteration  23: 6906188.094 ops/s
Iteration  24: 7157435.644 ops/s
Iteration  25: 7319708.684 ops/s
Iteration  26: 6764813.229 ops/s
Iteration  27: 7211502.361 ops/s
Iteration  28: 6947319.526 ops/s
Iteration  29: 7101303.674 ops/s
Iteration  30: 6985000.011 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_multipleOnComplete":
  7025879.512 ±(99.9%) 202922.130 ops/s [Average]
  (min, avg, max) = (5682867.084, 7025879.512, 7448187.507), stdev = 303724.314
  CI (99.9%): [6822957.382, 7228801.642] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
ObservableGenerateTest._Benchmark.benchmark_multipleOnComplete  thrpt   30  7025879.512 ± 202922.130  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_onNextAfterOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_onNextAfterOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1904410.165 ops/s
# Warmup Iteration   2: 4953928.531 ops/s
# Warmup Iteration   3: 7028325.239 ops/s
# Warmup Iteration   4: 6973636.593 ops/s
# Warmup Iteration   5: 6969344.902 ops/s
# Warmup Iteration   6: 6759530.341 ops/s
# Warmup Iteration   7: 6955587.723 ops/s
# Warmup Iteration   8: 7103191.830 ops/s
# Warmup Iteration   9: 6720693.113 ops/s
# Warmup Iteration  10: 7143502.703 ops/s
# Warmup Iteration  11: 6595887.140 ops/s
# Warmup Iteration  12: 6765154.860 ops/s
# Warmup Iteration  13: 7418098.360 ops/s
# Warmup Iteration  14: 7139072.180 ops/s
# Warmup Iteration  15: 7379886.681 ops/s
# Warmup Iteration  16: 6616048.722 ops/s
# Warmup Iteration  17: 7250195.734 ops/s
# Warmup Iteration  18: 7112753.652 ops/s
# Warmup Iteration  19: 6883525.372 ops/s
# Warmup Iteration  20: 7147065.999 ops/s
# Warmup Iteration  21: 7240985.734 ops/s
# Warmup Iteration  22: 6725126.905 ops/s
# Warmup Iteration  23: 7244016.469 ops/s
# Warmup Iteration  24: 7027794.121 ops/s
# Warmup Iteration  25: 6983654.825 ops/s
# Warmup Iteration  26: 7154529.109 ops/s
# Warmup Iteration  27: 6947014.000 ops/s
# Warmup Iteration  28: 7141856.632 ops/s
# Warmup Iteration  29: 7132912.004 ops/s
# Warmup Iteration  30: 7075212.922 ops/s
Iteration   1: 7093894.995 ops/s
Iteration   2: 7206369.002 ops/s
Iteration   3: 6846860.894 ops/s
Iteration   4: 7214237.740 ops/s
Iteration   5: 6804407.947 ops/s
Iteration   6: 6927067.760 ops/s
Iteration   7: 7147339.955 ops/s
Iteration   8: 7063259.349 ops/s
Iteration   9: 7071184.369 ops/s
Iteration  10: 6928321.412 ops/s
Iteration  11: 7014184.401 ops/s
Iteration  12: 7108672.616 ops/s
Iteration  13: 6983855.704 ops/s
Iteration  14: 7108559.672 ops/s
Iteration  15: 6883202.142 ops/s
Iteration  16: 7084697.564 ops/s
Iteration  17: 7073964.018 ops/s
Iteration  18: 6736543.988 ops/s
Iteration  19: 7216546.025 ops/s
Iteration  20: 7249764.940 ops/s
Iteration  21: 6902605.967 ops/s
Iteration  22: 6980359.725 ops/s
Iteration  23: 7266748.098 ops/s
Iteration  24: 6988984.879 ops/s
Iteration  25: 7017044.883 ops/s
Iteration  26: 6994421.244 ops/s
Iteration  27: 7259832.945 ops/s
Iteration  28: 6842163.946 ops/s
Iteration  29: 7059117.010 ops/s
Iteration  30: 7067954.452 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_onNextAfterOnComplete":
  7038072.255 ±(99.9%) 93485.902 ops/s [Average]
  (min, avg, max) = (6736543.988, 7038072.255, 7266748.098), stdev = 139925.308
  CI (99.9%): [6944586.353, 7131558.157] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
ObservableGenerateTest._Benchmark.benchmark_onNextAfterOnComplete  thrpt   30  7038072.255 ± 93485.902  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_iteratorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_iteratorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 152609.011 ops/s
# Warmup Iteration   2: 547316.916 ops/s
# Warmup Iteration   3: 601262.726 ops/s
# Warmup Iteration   4: 569224.851 ops/s
# Warmup Iteration   5: 652365.187 ops/s
# Warmup Iteration   6: 614749.969 ops/s
# Warmup Iteration   7: 657749.752 ops/s
# Warmup Iteration   8: 646477.050 ops/s
# Warmup Iteration   9: 634207.354 ops/s
# Warmup Iteration  10: 642320.658 ops/s
# Warmup Iteration  11: 635533.141 ops/s
# Warmup Iteration  12: 647064.048 ops/s
# Warmup Iteration  13: 635841.560 ops/s
# Warmup Iteration  14: 644924.342 ops/s
# Warmup Iteration  15: 629978.995 ops/s
# Warmup Iteration  16: 658966.612 ops/s
# Warmup Iteration  17: 659999.088 ops/s
# Warmup Iteration  18: 666626.347 ops/s
# Warmup Iteration  19: 693264.955 ops/s
# Warmup Iteration  20: 680180.190 ops/s
# Warmup Iteration  21: 643179.424 ops/s
# Warmup Iteration  22: 690385.384 ops/s
# Warmup Iteration  23: 651241.830 ops/s
# Warmup Iteration  24: 673545.083 ops/s
# Warmup Iteration  25: 661497.851 ops/s
# Warmup Iteration  26: 672104.541 ops/s
# Warmup Iteration  27: 690820.402 ops/s
# Warmup Iteration  28: 632663.970 ops/s
# Warmup Iteration  29: 567890.159 ops/s
# Warmup Iteration  30: 707701.097 ops/s
Iteration   1: 664569.755 ops/s
Iteration   2: 660234.172 ops/s
Iteration   3: 700432.146 ops/s
Iteration   4: 656861.570 ops/s
Iteration   5: 686162.578 ops/s
Iteration   6: 673999.608 ops/s
Iteration   7: 689785.560 ops/s
Iteration   8: 657721.935 ops/s
Iteration   9: 699834.005 ops/s
Iteration  10: 692349.422 ops/s
Iteration  11: 654705.078 ops/s
Iteration  12: 687932.948 ops/s
Iteration  13: 652981.808 ops/s
Iteration  14: 669066.357 ops/s
Iteration  15: 659032.032 ops/s
Iteration  16: 655699.826 ops/s
Iteration  17: 685232.042 ops/s
Iteration  18: 670313.399 ops/s
Iteration  19: 694556.879 ops/s
Iteration  20: 672774.090 ops/s
Iteration  21: 702423.191 ops/s
Iteration  22: 658923.498 ops/s
Iteration  23: 686820.609 ops/s
Iteration  24: 664340.334 ops/s
Iteration  25: 680079.159 ops/s
Iteration  26: 677052.444 ops/s
Iteration  27: 665609.336 ops/s
Iteration  28: 700381.982 ops/s
Iteration  29: 660585.470 ops/s
Iteration  30: 655075.243 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_iteratorThrows":
  674517.883 ±(99.9%) 10906.396 ops/s [Average]
  (min, avg, max) = (652981.808, 674517.883, 702423.191), stdev = 16324.182
  CI (99.9%): [663611.486, 685424.279] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableFromIterableTest._Benchmark.benchmark_iteratorThrows  thrpt   30  674517.883 ± 10906.396  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_nullError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_nullError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161135.196 ops/s
# Warmup Iteration   2: 478169.288 ops/s
# Warmup Iteration   3: 509783.620 ops/s
# Warmup Iteration   4: 561452.746 ops/s
# Warmup Iteration   5: 487867.192 ops/s
# Warmup Iteration   6: 548594.461 ops/s
# Warmup Iteration   7: 557726.999 ops/s
# Warmup Iteration   8: 577132.605 ops/s
# Warmup Iteration   9: 538633.113 ops/s
# Warmup Iteration  10: 563854.168 ops/s
# Warmup Iteration  11: 570791.142 ops/s
# Warmup Iteration  12: 553964.134 ops/s
# Warmup Iteration  13: 568974.932 ops/s
# Warmup Iteration  14: 547280.346 ops/s
# Warmup Iteration  15: 569705.591 ops/s
# Warmup Iteration  16: 564681.508 ops/s
# Warmup Iteration  17: 582196.113 ops/s
# Warmup Iteration  18: 614253.080 ops/s
# Warmup Iteration  19: 564174.511 ops/s
# Warmup Iteration  20: 609868.133 ops/s
# Warmup Iteration  21: 570308.373 ops/s
# Warmup Iteration  22: 594583.450 ops/s
# Warmup Iteration  23: 584140.680 ops/s
# Warmup Iteration  24: 586599.169 ops/s
# Warmup Iteration  25: 588563.861 ops/s
# Warmup Iteration  26: 580571.102 ops/s
# Warmup Iteration  27: 603790.063 ops/s
# Warmup Iteration  28: 578796.953 ops/s
# Warmup Iteration  29: 589369.072 ops/s
# Warmup Iteration  30: 590644.525 ops/s
Iteration   1: 583672.644 ops/s
Iteration   2: 588417.020 ops/s
Iteration   3: 585248.936 ops/s
Iteration   4: 571802.620 ops/s
Iteration   5: 593750.957 ops/s
Iteration   6: 579003.927 ops/s
Iteration   7: 603746.185 ops/s
Iteration   8: 583549.779 ops/s
Iteration   9: 601522.952 ops/s
Iteration  10: 612068.611 ops/s
Iteration  11: 574400.513 ops/s
Iteration  12: 602506.438 ops/s
Iteration  13: 588931.488 ops/s
Iteration  14: 592498.477 ops/s
Iteration  15: 578795.331 ops/s
Iteration  16: 578199.225 ops/s
Iteration  17: 582214.374 ops/s
Iteration  18: 569727.549 ops/s
Iteration  19: 583827.272 ops/s
Iteration  20: 575630.422 ops/s
Iteration  21: 612621.083 ops/s
Iteration  22: 580912.648 ops/s
Iteration  23: 587474.565 ops/s
Iteration  24: 595688.078 ops/s
Iteration  25: 585301.173 ops/s
Iteration  26: 600482.853 ops/s
Iteration  27: 564290.100 ops/s
Iteration  28: 584693.541 ops/s
Iteration  29: 572890.050 ops/s
Iteration  30: 595783.080 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_nullError":
  586988.396 ±(99.9%) 8114.656 ops/s [Average]
  (min, avg, max) = (564290.100, 586988.396, 612621.083), stdev = 12145.637
  CI (99.9%): [578873.740, 595103.053] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ObservableGenerateTest._Benchmark.benchmark_nullError  thrpt   30  586988.396 ± 8114.656  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_errorMatches$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_errorMatches

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83416.646 ops/s
# Warmup Iteration   2: 428004.252 ops/s
# Warmup Iteration   3: 557659.339 ops/s
# Warmup Iteration   4: 587241.137 ops/s
# Warmup Iteration   5: 547692.754 ops/s
# Warmup Iteration   6: 582397.588 ops/s
# Warmup Iteration   7: 547602.760 ops/s
# Warmup Iteration   8: 590916.929 ops/s
# Warmup Iteration   9: 573692.278 ops/s
# Warmup Iteration  10: 555381.465 ops/s
# Warmup Iteration  11: 576249.346 ops/s
# Warmup Iteration  12: 567119.137 ops/s
# Warmup Iteration  13: 573203.931 ops/s
# Warmup Iteration  14: 566001.262 ops/s
# Warmup Iteration  15: 582110.674 ops/s
# Warmup Iteration  16: 589164.099 ops/s
# Warmup Iteration  17: 573843.856 ops/s
# Warmup Iteration  18: 611784.609 ops/s
# Warmup Iteration  19: 600253.993 ops/s
# Warmup Iteration  20: 611842.709 ops/s
# Warmup Iteration  21: 612672.280 ops/s
# Warmup Iteration  22: 582192.117 ops/s
# Warmup Iteration  23: 601263.982 ops/s
# Warmup Iteration  24: 456004.772 ops/s
# Warmup Iteration  25: 597929.663 ops/s
# Warmup Iteration  26: 602458.371 ops/s
# Warmup Iteration  27: 572195.314 ops/s
# Warmup Iteration  28: 572415.699 ops/s
# Warmup Iteration  29: 617814.102 ops/s
# Warmup Iteration  30: 584106.491 ops/s
Iteration   1: 594133.191 ops/s
Iteration   2: 581669.247 ops/s
Iteration   3: 600402.219 ops/s
Iteration   4: 575073.727 ops/s
Iteration   5: 587494.886 ops/s
Iteration   6: 612290.220 ops/s
Iteration   7: 578983.419 ops/s
Iteration   8: 596963.403 ops/s
Iteration   9: 589845.288 ops/s
Iteration  10: 574118.138 ops/s
Iteration  11: 613356.457 ops/s
Iteration  12: 585449.971 ops/s
Iteration  13: 586539.181 ops/s
Iteration  14: 585508.859 ops/s
Iteration  15: 601922.151 ops/s
Iteration  16: 573511.864 ops/s
Iteration  17: 594158.511 ops/s
Iteration  18: 576476.918 ops/s
Iteration  19: 603120.415 ops/s
Iteration  20: 597843.650 ops/s
Iteration  21: 582212.669 ops/s
Iteration  22: 606697.402 ops/s
Iteration  23: 577654.882 ops/s
Iteration  24: 590102.317 ops/s
Iteration  25: 613797.366 ops/s
Iteration  26: 590039.160 ops/s
Iteration  27: 600206.226 ops/s
Iteration  28: 560438.976 ops/s
Iteration  29: 602210.604 ops/s
Iteration  30: 586285.296 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_errorMatches":
  590616.887 ±(99.9%) 8752.207 ops/s [Average]
  (min, avg, max) = (560438.976, 590616.887, 613797.366), stdev = 13099.892
  CI (99.9%): [581864.680, 599369.094] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableOnErrorCompleteTest._Benchmark.benchmark_errorMatches  thrpt   30  590616.887 ± 8752.207  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_noErrorLoss$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_noErrorLoss

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162902.890 ops/s
# Warmup Iteration   2: 534871.822 ops/s
# Warmup Iteration   3: 608739.672 ops/s
# Warmup Iteration   4: 570234.776 ops/s
# Warmup Iteration   5: 674966.284 ops/s
# Warmup Iteration   6: 648773.104 ops/s
# Warmup Iteration   7: 678241.486 ops/s
# Warmup Iteration   8: 642199.047 ops/s
# Warmup Iteration   9: 652344.414 ops/s
# Warmup Iteration  10: 686528.312 ops/s
# Warmup Iteration  11: 620975.452 ops/s
# Warmup Iteration  12: 659962.338 ops/s
# Warmup Iteration  13: 647938.931 ops/s
# Warmup Iteration  14: 680239.225 ops/s
# Warmup Iteration  15: 643489.480 ops/s
# Warmup Iteration  16: 648199.708 ops/s
# Warmup Iteration  17: 726761.661 ops/s
# Warmup Iteration  18: 670236.507 ops/s
# Warmup Iteration  19: 685976.997 ops/s
# Warmup Iteration  20: 713900.578 ops/s
# Warmup Iteration  21: 673583.902 ops/s
# Warmup Iteration  22: 718761.780 ops/s
# Warmup Iteration  23: 684271.053 ops/s
# Warmup Iteration  24: 690898.625 ops/s
# Warmup Iteration  25: 720989.976 ops/s
# Warmup Iteration  26: 710477.774 ops/s
# Warmup Iteration  27: 531029.185 ops/s
# Warmup Iteration  28: 705017.638 ops/s
# Warmup Iteration  29: 698850.240 ops/s
# Warmup Iteration  30: 710488.808 ops/s
Iteration   1: 688554.315 ops/s
Iteration   2: 631905.564 ops/s
Iteration   3: 704673.617 ops/s
Iteration   4: 690758.581 ops/s
Iteration   5: 704005.154 ops/s
Iteration   6: 696294.388 ops/s
Iteration   7: 692845.664 ops/s
Iteration   8: 714706.121 ops/s
Iteration   9: 689185.811 ops/s
Iteration  10: 714035.305 ops/s
Iteration  11: 684796.841 ops/s
Iteration  12: 713658.240 ops/s
Iteration  13: 683354.918 ops/s
Iteration  14: 689764.894 ops/s
Iteration  15: 700265.749 ops/s
Iteration  16: 672493.833 ops/s
Iteration  17: 690310.090 ops/s
Iteration  18: 709840.243 ops/s
Iteration  19: 686832.657 ops/s
Iteration  20: 698811.982 ops/s
Iteration  21: 663823.502 ops/s
Iteration  22: 697803.306 ops/s
Iteration  23: 697484.515 ops/s
Iteration  24: 678542.379 ops/s
Iteration  25: 718389.508 ops/s
Iteration  26: 708562.331 ops/s
Iteration  27: 658485.957 ops/s
Iteration  28: 720054.065 ops/s
Iteration  29: 665058.574 ops/s
Iteration  30: 715300.251 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_noErrorLoss":
  692686.612 ±(99.9%) 13348.291 ops/s [Average]
  (min, avg, max) = (631905.564, 692686.612, 720054.065), stdev = 19979.095
  CI (99.9%): [679338.321, 706034.903] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_noErrorLoss  thrpt   30  692686.612 ± 13348.291  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_predicateThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_predicateThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25089.775 ops/s
# Warmup Iteration   2: 126513.984 ops/s
# Warmup Iteration   3: 181553.199 ops/s
# Warmup Iteration   4: 170487.212 ops/s
# Warmup Iteration   5: 183179.464 ops/s
# Warmup Iteration   6: 178544.785 ops/s
# Warmup Iteration   7: 169067.351 ops/s
# Warmup Iteration   8: 192627.065 ops/s
# Warmup Iteration   9: 192250.916 ops/s
# Warmup Iteration  10: 189447.996 ops/s
# Warmup Iteration  11: 191709.211 ops/s
# Warmup Iteration  12: 191049.537 ops/s
# Warmup Iteration  13: 194667.435 ops/s
# Warmup Iteration  14: 199680.028 ops/s
# Warmup Iteration  15: 189186.629 ops/s
# Warmup Iteration  16: 197083.672 ops/s
# Warmup Iteration  17: 203486.220 ops/s
# Warmup Iteration  18: 190989.075 ops/s
# Warmup Iteration  19: 198464.920 ops/s
# Warmup Iteration  20: 202762.572 ops/s
# Warmup Iteration  21: 195234.800 ops/s
# Warmup Iteration  22: 194082.836 ops/s
# Warmup Iteration  23: 211187.892 ops/s
# Warmup Iteration  24: 199325.314 ops/s
# Warmup Iteration  25: 196708.225 ops/s
# Warmup Iteration  26: 206235.226 ops/s
# Warmup Iteration  27: 205170.025 ops/s
# Warmup Iteration  28: 210359.470 ops/s
# Warmup Iteration  29: 202043.722 ops/s
# Warmup Iteration  30: 203732.857 ops/s
Iteration   1: 203104.168 ops/s
Iteration   2: 197976.471 ops/s
Iteration   3: 212075.984 ops/s
Iteration   4: 199191.417 ops/s
Iteration   5: 204696.865 ops/s
Iteration   6: 208276.154 ops/s
Iteration   7: 201360.131 ops/s
Iteration   8: 202859.484 ops/s
Iteration   9: 207807.260 ops/s
Iteration  10: 201519.604 ops/s
Iteration  11: 204862.184 ops/s
Iteration  12: 201235.633 ops/s
Iteration  13: 209653.341 ops/s
Iteration  14: 198933.168 ops/s
Iteration  15: 197288.400 ops/s
Iteration  16: 212032.688 ops/s
Iteration  17: 208272.852 ops/s
Iteration  18: 199389.117 ops/s
Iteration  19: 205359.998 ops/s
Iteration  20: 199565.618 ops/s
Iteration  21: 202567.020 ops/s
Iteration  22: 204881.958 ops/s
Iteration  23: 199379.408 ops/s
Iteration  24: 198954.502 ops/s
Iteration  25: 215318.221 ops/s
Iteration  26: 197115.594 ops/s
Iteration  27: 209242.719 ops/s
Iteration  28: 196876.214 ops/s
Iteration  29: 207975.081 ops/s
Iteration  30: 202881.835 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_predicateThrows":
  203688.436 ±(99.9%) 3345.734 ops/s [Average]
  (min, avg, max) = (196876.214, 203688.436, 215318.221), stdev = 5007.738
  CI (99.9%): [200342.702, 207034.170] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableRetryWithPredicateTest._Benchmark.benchmark_predicateThrows  thrpt   30  203688.436 ± 3345.734  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromFutureReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromFutureReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 250386.849 ops/s
# Warmup Iteration   2: 491118.105 ops/s
# Warmup Iteration   3: 563025.175 ops/s
# Warmup Iteration   4: 584759.689 ops/s
# Warmup Iteration   5: 553429.417 ops/s
# Warmup Iteration   6: 612217.059 ops/s
# Warmup Iteration   7: 588926.425 ops/s
# Warmup Iteration   8: 634773.816 ops/s
# Warmup Iteration   9: 627408.612 ops/s
# Warmup Iteration  10: 585635.643 ops/s
# Warmup Iteration  11: 616758.717 ops/s
# Warmup Iteration  12: 621650.173 ops/s
# Warmup Iteration  13: 603439.665 ops/s
# Warmup Iteration  14: 629660.901 ops/s
# Warmup Iteration  15: 589644.863 ops/s
# Warmup Iteration  16: 482822.483 ops/s
# Warmup Iteration  17: 617777.649 ops/s
# Warmup Iteration  18: 620222.188 ops/s
# Warmup Iteration  19: 675996.757 ops/s
# Warmup Iteration  20: 631017.680 ops/s
# Warmup Iteration  21: 632600.416 ops/s
# Warmup Iteration  22: 656536.834 ops/s
# Warmup Iteration  23: 632072.440 ops/s
# Warmup Iteration  24: 630460.881 ops/s
# Warmup Iteration  25: 655001.163 ops/s
# Warmup Iteration  26: 638138.553 ops/s
# Warmup Iteration  27: 644411.084 ops/s
# Warmup Iteration  28: 629455.796 ops/s
# Warmup Iteration  29: 654766.283 ops/s
# Warmup Iteration  30: 640623.422 ops/s
Iteration   1: 616964.909 ops/s
Iteration   2: 671855.830 ops/s
Iteration   3: 627651.544 ops/s
Iteration   4: 630180.821 ops/s
Iteration   5: 642501.992 ops/s
Iteration   6: 621110.684 ops/s
Iteration   7: 650031.948 ops/s
Iteration   8: 638172.390 ops/s
Iteration   9: 633374.488 ops/s
Iteration  10: 647517.091 ops/s
Iteration  11: 638066.111 ops/s
Iteration  12: 650957.155 ops/s
Iteration  13: 624765.033 ops/s
Iteration  14: 642170.688 ops/s
Iteration  15: 647727.172 ops/s
Iteration  16: 635010.970 ops/s
Iteration  17: 670612.064 ops/s
Iteration  18: 642218.584 ops/s
Iteration  19: 609491.704 ops/s
Iteration  20: 668000.692 ops/s
Iteration  21: 635501.206 ops/s
Iteration  22: 652865.650 ops/s
Iteration  23: 620559.357 ops/s
Iteration  24: 654447.256 ops/s
Iteration  25: 627662.198 ops/s
Iteration  26: 633381.229 ops/s
Iteration  27: 659436.696 ops/s
Iteration  28: 625146.362 ops/s
Iteration  29: 632794.965 ops/s
Iteration  30: 657799.281 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_fromFutureReturnsNull":
  640265.869 ±(99.9%) 10670.543 ops/s [Average]
  (min, avg, max) = (609491.704, 640265.869, 671855.830), stdev = 15971.168
  CI (99.9%): [629595.326, 650936.412] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_fromFutureReturnsNull  thrpt   30  640265.869 ± 10670.543  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_whileErrorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_whileErrorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42261.657 ops/s
# Warmup Iteration   2: 108414.342 ops/s
# Warmup Iteration   3: 174308.146 ops/s
# Warmup Iteration   4: 179765.511 ops/s
# Warmup Iteration   5: 174458.414 ops/s
# Warmup Iteration   6: 188567.359 ops/s
# Warmup Iteration   7: 181512.561 ops/s
# Warmup Iteration   8: 192985.495 ops/s
# Warmup Iteration   9: 189393.937 ops/s
# Warmup Iteration  10: 182484.961 ops/s
# Warmup Iteration  11: 193376.921 ops/s
# Warmup Iteration  12: 180081.093 ops/s
# Warmup Iteration  13: 195978.013 ops/s
# Warmup Iteration  14: 183232.149 ops/s
# Warmup Iteration  15: 191571.346 ops/s
# Warmup Iteration  16: 194002.571 ops/s
# Warmup Iteration  17: 188505.691 ops/s
# Warmup Iteration  18: 202750.062 ops/s
# Warmup Iteration  19: 192207.904 ops/s
# Warmup Iteration  20: 201863.489 ops/s
# Warmup Iteration  21: 196707.372 ops/s
# Warmup Iteration  22: 188607.145 ops/s
# Warmup Iteration  23: 200247.801 ops/s
# Warmup Iteration  24: 188917.583 ops/s
# Warmup Iteration  25: 196082.039 ops/s
# Warmup Iteration  26: 203952.066 ops/s
# Warmup Iteration  27: 195786.083 ops/s
# Warmup Iteration  28: 189736.197 ops/s
# Warmup Iteration  29: 195433.314 ops/s
# Warmup Iteration  30: 195383.320 ops/s
Iteration   1: 205741.904 ops/s
Iteration   2: 191969.659 ops/s
Iteration   3: 201333.631 ops/s
Iteration   4: 192575.067 ops/s
Iteration   5: 196835.679 ops/s
Iteration   6: 192120.603 ops/s
Iteration   7: 201082.614 ops/s
Iteration   8: 195620.462 ops/s
Iteration   9: 198557.743 ops/s
Iteration  10: 207676.327 ops/s
Iteration  11: 202059.230 ops/s
Iteration  12: 192366.724 ops/s
Iteration  13: 202234.308 ops/s
Iteration  14: 198367.195 ops/s
Iteration  15: 195407.440 ops/s
Iteration  16: 196146.888 ops/s
Iteration  17: 205492.090 ops/s
Iteration  18: 192167.536 ops/s
Iteration  19: 206912.106 ops/s
Iteration  20: 198794.262 ops/s
Iteration  21: 193669.242 ops/s
Iteration  22: 200573.781 ops/s
Iteration  23: 196960.189 ops/s
Iteration  24: 197508.985 ops/s
Iteration  25: 197951.215 ops/s
Iteration  26: 197554.119 ops/s
Iteration  27: 197199.704 ops/s
Iteration  28: 195107.429 ops/s
Iteration  29: 200349.073 ops/s
Iteration  30: 194751.853 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_whileErrorThrows":
  198169.569 ±(99.9%) 2986.934 ops/s [Average]
  (min, avg, max) = (191969.659, 198169.569, 207676.327), stdev = 4470.702
  CI (99.9%): [195182.635, 201156.502] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableForEachTest._Benchmark.benchmark_whileErrorThrows  thrpt   30  198169.569 ± 2986.934  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerOnErrorDisposerCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerOnErrorDisposerCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31200.515 ops/s
# Warmup Iteration   2: 150326.213 ops/s
# Warmup Iteration   3: 176565.097 ops/s
# Warmup Iteration   4: 166385.792 ops/s
# Warmup Iteration   5: 191206.660 ops/s
# Warmup Iteration   6: 175725.601 ops/s
# Warmup Iteration   7: 174119.233 ops/s
# Warmup Iteration   8: 191295.043 ops/s
# Warmup Iteration   9: 184024.382 ops/s
# Warmup Iteration  10: 156576.324 ops/s
# Warmup Iteration  11: 171673.981 ops/s
# Warmup Iteration  12: 194046.931 ops/s
# Warmup Iteration  13: 181034.909 ops/s
# Warmup Iteration  14: 182856.642 ops/s
# Warmup Iteration  15: 193133.738 ops/s
# Warmup Iteration  16: 183476.058 ops/s
# Warmup Iteration  17: 195364.854 ops/s
# Warmup Iteration  18: 199577.859 ops/s
# Warmup Iteration  19: 191564.718 ops/s
# Warmup Iteration  20: 197826.403 ops/s
# Warmup Iteration  21: 195511.353 ops/s
# Warmup Iteration  22: 202701.211 ops/s
# Warmup Iteration  23: 199293.849 ops/s
# Warmup Iteration  24: 188181.035 ops/s
# Warmup Iteration  25: 199756.471 ops/s
# Warmup Iteration  26: 194666.102 ops/s
# Warmup Iteration  27: 198323.231 ops/s
# Warmup Iteration  28: 192540.582 ops/s
# Warmup Iteration  29: 199914.951 ops/s
# Warmup Iteration  30: 195980.255 ops/s
Iteration   1: 192431.227 ops/s
Iteration   2: 196971.507 ops/s
Iteration   3: 194961.526 ops/s
Iteration   4: 194387.436 ops/s
Iteration   5: 203312.999 ops/s
Iteration   6: 202940.573 ops/s
Iteration   7: 190619.756 ops/s
Iteration   8: 195678.368 ops/s
Iteration   9: 191069.969 ops/s
Iteration  10: 200870.586 ops/s
Iteration  11: 188558.136 ops/s
Iteration  12: 195283.100 ops/s
Iteration  13: 190876.180 ops/s
Iteration  14: 191336.157 ops/s
Iteration  15: 190552.317 ops/s
Iteration  16: 201094.057 ops/s
Iteration  17: 196199.042 ops/s
Iteration  18: 192739.113 ops/s
Iteration  19: 203287.795 ops/s
Iteration  20: 189230.132 ops/s
Iteration  21: 201398.585 ops/s
Iteration  22: 192529.679 ops/s
Iteration  23: 192873.204 ops/s
Iteration  24: 202404.159 ops/s
Iteration  25: 189576.935 ops/s
Iteration  26: 201280.939 ops/s
Iteration  27: 190247.339 ops/s
Iteration  28: 204071.177 ops/s
Iteration  29: 199517.695 ops/s
Iteration  30: 193318.432 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerOnErrorDisposerCrash":
  195653.937 ±(99.9%) 3376.228 ops/s [Average]
  (min, avg, max) = (188558.136, 195653.937, 204071.177), stdev = 5053.380
  CI (99.9%): [192277.709, 199030.166] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableUsingTest._Benchmark.benchmark_eagerOnErrorDisposerCrash  thrpt   30  195653.937 ± 3376.228  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrashConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrashConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 137872.843 ops/s
# Warmup Iteration   2: 449667.243 ops/s
# Warmup Iteration   3: 514143.585 ops/s
# Warmup Iteration   4: 541279.572 ops/s
# Warmup Iteration   5: 555200.624 ops/s
# Warmup Iteration   6: 569602.399 ops/s
# Warmup Iteration   7: 550187.252 ops/s
# Warmup Iteration   8: 553556.614 ops/s
# Warmup Iteration   9: 542842.431 ops/s
# Warmup Iteration  10: 548777.332 ops/s
# Warmup Iteration  11: 566395.379 ops/s
# Warmup Iteration  12: 528283.052 ops/s
# Warmup Iteration  13: 570622.769 ops/s
# Warmup Iteration  14: 535067.511 ops/s
# Warmup Iteration  15: 552699.402 ops/s
# Warmup Iteration  16: 544636.075 ops/s
# Warmup Iteration  17: 589371.926 ops/s
# Warmup Iteration  18: 559425.538 ops/s
# Warmup Iteration  19: 597634.629 ops/s
# Warmup Iteration  20: 568294.610 ops/s
# Warmup Iteration  21: 594287.392 ops/s
# Warmup Iteration  22: 568564.774 ops/s
# Warmup Iteration  23: 566986.107 ops/s
# Warmup Iteration  24: 575103.130 ops/s
# Warmup Iteration  25: 584169.033 ops/s
# Warmup Iteration  26: 558194.442 ops/s
# Warmup Iteration  27: 592656.207 ops/s
# Warmup Iteration  28: 593704.628 ops/s
# Warmup Iteration  29: 575685.328 ops/s
# Warmup Iteration  30: 589364.497 ops/s
Iteration   1: 571548.547 ops/s
Iteration   2: 607173.751 ops/s
Iteration   3: 567267.750 ops/s
Iteration   4: 585082.428 ops/s
Iteration   5: 564366.536 ops/s
Iteration   6: 567920.846 ops/s
Iteration   7: 589436.834 ops/s
Iteration   8: 554356.929 ops/s
Iteration   9: 597316.275 ops/s
Iteration  10: 574958.646 ops/s
Iteration  11: 589090.935 ops/s
Iteration  12: 568667.854 ops/s
Iteration  13: 578124.457 ops/s
Iteration  14: 593545.935 ops/s
Iteration  15: 591415.621 ops/s
Iteration  16: 564672.297 ops/s
Iteration  17: 606953.740 ops/s
Iteration  18: 581305.705 ops/s
Iteration  19: 567834.405 ops/s
Iteration  20: 590971.338 ops/s
Iteration  21: 565907.094 ops/s
Iteration  22: 582309.706 ops/s
Iteration  23: 567180.976 ops/s
Iteration  24: 598630.376 ops/s
Iteration  25: 580301.767 ops/s
Iteration  26: 571179.105 ops/s
Iteration  27: 586488.869 ops/s
Iteration  28: 576451.609 ops/s
Iteration  29: 588368.350 ops/s
Iteration  30: 562466.575 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrashConditional":
  579709.842 ±(99.9%) 9152.948 ops/s [Average]
  (min, avg, max) = (554356.929, 579709.842, 607173.751), stdev = 13699.702
  CI (99.9%): [570556.894, 588862.789] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObservableFromStreamTest._Benchmark.benchmark_closeCalledOnItemCrashConditional  thrpt   30  579709.842 ± 9152.948  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 34119.041 ops/s
# Warmup Iteration   2: 118394.877 ops/s
# Warmup Iteration   3: 180118.461 ops/s
# Warmup Iteration   4: 187766.203 ops/s
# Warmup Iteration   5: 150069.956 ops/s
# Warmup Iteration   6: 175738.109 ops/s
# Warmup Iteration   7: 181501.729 ops/s
# Warmup Iteration   8: 187030.020 ops/s
# Warmup Iteration   9: 179572.092 ops/s
# Warmup Iteration  10: 184149.907 ops/s
# Warmup Iteration  11: 186991.222 ops/s
# Warmup Iteration  12: 192623.683 ops/s
# Warmup Iteration  13: 186572.729 ops/s
# Warmup Iteration  14: 192583.611 ops/s
# Warmup Iteration  15: 183158.453 ops/s
# Warmup Iteration  16: 187012.895 ops/s
# Warmup Iteration  17: 192290.957 ops/s
# Warmup Iteration  18: 205865.965 ops/s
# Warmup Iteration  19: 195627.936 ops/s
# Warmup Iteration  20: 197086.625 ops/s
# Warmup Iteration  21: 198668.962 ops/s
# Warmup Iteration  22: 193319.225 ops/s
# Warmup Iteration  23: 200960.963 ops/s
# Warmup Iteration  24: 191013.023 ops/s
# Warmup Iteration  25: 197937.741 ops/s
# Warmup Iteration  26: 199873.050 ops/s
# Warmup Iteration  27: 195336.148 ops/s
# Warmup Iteration  28: 199596.920 ops/s
# Warmup Iteration  29: 196588.758 ops/s
# Warmup Iteration  30: 205416.101 ops/s
Iteration   1: 193873.858 ops/s
Iteration   2: 194997.318 ops/s
Iteration   3: 197883.306 ops/s
Iteration   4: 192589.988 ops/s
Iteration   5: 203737.839 ops/s
Iteration   6: 196217.182 ops/s
Iteration   7: 193398.132 ops/s
Iteration   8: 200168.867 ops/s
Iteration   9: 190481.316 ops/s
Iteration  10: 199801.303 ops/s
Iteration  11: 191914.109 ops/s
Iteration  12: 199503.588 ops/s
Iteration  13: 201081.724 ops/s
Iteration  14: 196913.300 ops/s
Iteration  15: 190822.631 ops/s
Iteration  16: 198304.150 ops/s
Iteration  17: 194535.337 ops/s
Iteration  18: 197952.649 ops/s
Iteration  19: 204351.297 ops/s
Iteration  20: 190605.281 ops/s
Iteration  21: 203909.278 ops/s
Iteration  22: 195505.354 ops/s
Iteration  23: 196645.464 ops/s
Iteration  24: 203289.189 ops/s
Iteration  25: 191744.164 ops/s
Iteration  26: 196861.902 ops/s
Iteration  27: 194885.456 ops/s
Iteration  28: 202542.275 ops/s
Iteration  29: 192157.474 ops/s
Iteration  30: 196104.703 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash":
  196759.281 ±(99.9%) 2826.280 ops/s [Average]
  (min, avg, max) = (190481.316, 196759.281, 204351.297), stdev = 4230.244
  CI (99.9%): [193933.001, 199585.561] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableOnErrorCompleteTest._Benchmark.benchmark_errorPredicateCrash  thrpt   30  196759.281 ± 2826.280  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 212069.878 ops/s
# Warmup Iteration   2: 431734.042 ops/s
# Warmup Iteration   3: 463386.938 ops/s
# Warmup Iteration   4: 490521.539 ops/s
# Warmup Iteration   5: 490664.683 ops/s
# Warmup Iteration   6: 501319.903 ops/s
# Warmup Iteration   7: 519108.789 ops/s
# Warmup Iteration   8: 533136.386 ops/s
# Warmup Iteration   9: 511518.047 ops/s
# Warmup Iteration  10: 509410.411 ops/s
# Warmup Iteration  11: 514746.068 ops/s
# Warmup Iteration  12: 511039.055 ops/s
# Warmup Iteration  13: 530705.348 ops/s
# Warmup Iteration  14: 513297.647 ops/s
# Warmup Iteration  15: 507507.164 ops/s
# Warmup Iteration  16: 524156.906 ops/s
# Warmup Iteration  17: 526240.213 ops/s
# Warmup Iteration  18: 562927.410 ops/s
# Warmup Iteration  19: 558465.865 ops/s
# Warmup Iteration  20: 525139.000 ops/s
# Warmup Iteration  21: 534359.207 ops/s
# Warmup Iteration  22: 531885.165 ops/s
# Warmup Iteration  23: 529635.476 ops/s
# Warmup Iteration  24: 533288.010 ops/s
# Warmup Iteration  25: 567513.365 ops/s
# Warmup Iteration  26: 553145.959 ops/s
# Warmup Iteration  27: 526054.378 ops/s
# Warmup Iteration  28: 544003.862 ops/s
# Warmup Iteration  29: 525496.368 ops/s
# Warmup Iteration  30: 554981.994 ops/s
Iteration   1: 546276.856 ops/s
Iteration   2: 524354.510 ops/s
Iteration   3: 535950.887 ops/s
Iteration   4: 533030.958 ops/s
Iteration   5: 529203.204 ops/s
Iteration   6: 549018.967 ops/s
Iteration   7: 528681.954 ops/s
Iteration   8: 539356.954 ops/s
Iteration   9: 562822.105 ops/s
Iteration  10: 511422.648 ops/s
Iteration  11: 562862.978 ops/s
Iteration  12: 554165.111 ops/s
Iteration  13: 517525.625 ops/s
Iteration  14: 535096.104 ops/s
Iteration  15: 543238.754 ops/s
Iteration  16: 529851.674 ops/s
Iteration  17: 536511.468 ops/s
Iteration  18: 536465.042 ops/s
Iteration  19: 549409.203 ops/s
Iteration  20: 533123.232 ops/s
Iteration  21: 529016.217 ops/s
Iteration  22: 552391.214 ops/s
Iteration  23: 542130.416 ops/s
Iteration  24: 521336.657 ops/s
Iteration  25: 544948.292 ops/s
Iteration  26: 530652.135 ops/s
Iteration  27: 545518.682 ops/s
Iteration  28: 545431.886 ops/s
Iteration  29: 506366.114 ops/s
Iteration  30: 546058.557 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleDoubleOnSubscribe":
  537407.280 ±(99.9%) 9036.115 ops/s [Average]
  (min, avg, max) = (506366.114, 537407.280, 562862.978), stdev = 13524.833
  CI (99.9%): [528371.165, 546443.396] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleDoubleOnSubscribe  thrpt   30  537407.280 ± 9036.115  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperChashConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperChashConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 79392.309 ops/s
# Warmup Iteration   2: 407932.615 ops/s
# Warmup Iteration   3: 493675.115 ops/s
# Warmup Iteration   4: 418224.200 ops/s
# Warmup Iteration   5: 501013.219 ops/s
# Warmup Iteration   6: 510592.457 ops/s
# Warmup Iteration   7: 501151.747 ops/s
# Warmup Iteration   8: 509368.348 ops/s
# Warmup Iteration   9: 517531.072 ops/s
# Warmup Iteration  10: 489389.032 ops/s
# Warmup Iteration  11: 510976.586 ops/s
# Warmup Iteration  12: 497311.043 ops/s
# Warmup Iteration  13: 509942.627 ops/s
# Warmup Iteration  14: 514840.767 ops/s
# Warmup Iteration  15: 506883.643 ops/s
# Warmup Iteration  16: 501293.611 ops/s
# Warmup Iteration  17: 536305.426 ops/s
# Warmup Iteration  18: 514575.565 ops/s
# Warmup Iteration  19: 538255.523 ops/s
# Warmup Iteration  20: 518410.775 ops/s
# Warmup Iteration  21: 529882.637 ops/s
# Warmup Iteration  22: 549401.542 ops/s
# Warmup Iteration  23: 515110.425 ops/s
# Warmup Iteration  24: 527014.103 ops/s
# Warmup Iteration  25: 529755.592 ops/s
# Warmup Iteration  26: 525150.116 ops/s
# Warmup Iteration  27: 533554.321 ops/s
# Warmup Iteration  28: 517280.025 ops/s
# Warmup Iteration  29: 530596.249 ops/s
# Warmup Iteration  30: 518848.928 ops/s
Iteration   1: 515539.255 ops/s
Iteration   2: 532955.879 ops/s
Iteration   3: 516771.714 ops/s
Iteration   4: 545560.165 ops/s
Iteration   5: 535692.135 ops/s
Iteration   6: 513616.151 ops/s
Iteration   7: 528637.766 ops/s
Iteration   8: 530968.532 ops/s
Iteration   9: 539247.624 ops/s
Iteration  10: 514871.370 ops/s
Iteration  11: 523526.970 ops/s
Iteration  12: 537288.522 ops/s
Iteration  13: 518085.425 ops/s
Iteration  14: 523771.889 ops/s
Iteration  15: 522421.190 ops/s
Iteration  16: 545313.162 ops/s
Iteration  17: 510390.774 ops/s
Iteration  18: 535256.575 ops/s
Iteration  19: 517500.327 ops/s
Iteration  20: 533611.286 ops/s
Iteration  21: 508547.955 ops/s
Iteration  22: 543086.213 ops/s
Iteration  23: 533268.944 ops/s
Iteration  24: 510039.407 ops/s
Iteration  25: 532947.799 ops/s
Iteration  26: 529089.499 ops/s
Iteration  27: 531521.140 ops/s
Iteration  28: 525494.211 ops/s
Iteration  29: 524751.339 ops/s
Iteration  30: 538336.236 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperChashConditional":
  527270.315 ±(99.9%) 7178.988 ops/s [Average]
  (min, avg, max) = (508547.955, 527270.315, 545560.165), stdev = 10745.172
  CI (99.9%): [520091.327, 534449.303] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_mapperChashConditional  thrpt   30  527270.315 ± 7178.988  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 103258.194 ops/s
# Warmup Iteration   2: 374905.820 ops/s
# Warmup Iteration   3: 466809.209 ops/s
# Warmup Iteration   4: 489776.345 ops/s
# Warmup Iteration   5: 480215.071 ops/s
# Warmup Iteration   6: 499735.020 ops/s
# Warmup Iteration   7: 442845.647 ops/s
# Warmup Iteration   8: 531311.966 ops/s
# Warmup Iteration   9: 460878.791 ops/s
# Warmup Iteration  10: 501433.956 ops/s
# Warmup Iteration  11: 526307.421 ops/s
# Warmup Iteration  12: 490714.898 ops/s
# Warmup Iteration  13: 529312.336 ops/s
# Warmup Iteration  14: 455405.703 ops/s
# Warmup Iteration  15: 459724.759 ops/s
# Warmup Iteration  16: 520361.330 ops/s
# Warmup Iteration  17: 514651.742 ops/s
# Warmup Iteration  18: 524451.645 ops/s
# Warmup Iteration  19: 546635.027 ops/s
# Warmup Iteration  20: 529581.710 ops/s
# Warmup Iteration  21: 534926.230 ops/s
# Warmup Iteration  22: 537850.771 ops/s
# Warmup Iteration  23: 527830.378 ops/s
# Warmup Iteration  24: 532912.397 ops/s
# Warmup Iteration  25: 530589.547 ops/s
# Warmup Iteration  26: 539126.551 ops/s
# Warmup Iteration  27: 526438.116 ops/s
# Warmup Iteration  28: 529959.405 ops/s
# Warmup Iteration  29: 532871.003 ops/s
# Warmup Iteration  30: 521633.865 ops/s
Iteration   1: 544161.847 ops/s
Iteration   2: 541917.911 ops/s
Iteration   3: 520798.546 ops/s
Iteration   4: 542727.220 ops/s
Iteration   5: 539088.616 ops/s
Iteration   6: 519860.040 ops/s
Iteration   7: 543230.461 ops/s
Iteration   8: 504720.476 ops/s
Iteration   9: 512021.299 ops/s
Iteration  10: 549879.083 ops/s
Iteration  11: 539975.077 ops/s
Iteration  12: 510899.071 ops/s
Iteration  13: 544571.272 ops/s
Iteration  14: 526569.096 ops/s
Iteration  15: 533525.969 ops/s
Iteration  16: 538290.115 ops/s
Iteration  17: 529769.466 ops/s
Iteration  18: 541396.159 ops/s
Iteration  19: 524830.497 ops/s
Iteration  20: 538652.402 ops/s
Iteration  21: 523031.119 ops/s
Iteration  22: 543600.140 ops/s
Iteration  23: 521807.259 ops/s
Iteration  24: 524588.772 ops/s
Iteration  25: 540662.920 ops/s
Iteration  26: 538670.798 ops/s
Iteration  27: 508915.849 ops/s
Iteration  28: 548315.952 ops/s
Iteration  29: 535649.975 ops/s
Iteration  30: 520412.283 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableMapOptionalTest._Benchmark.benchmark_mapperNull":
  531751.323 ±(99.9%) 8450.077 ops/s [Average]
  (min, avg, max) = (504720.476, 531751.323, 549879.083), stdev = 12647.678
  CI (99.9%): [523301.246, 540201.400] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableMapOptionalTest._Benchmark.benchmark_mapperNull  thrpt   30  531751.323 ± 8450.077  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.682 ops/s
# Warmup Iteration   2: 22216.177 ops/s
# Warmup Iteration   3: 54034.954 ops/s
# Warmup Iteration   4: 52947.636 ops/s
# Warmup Iteration   5: 75145.064 ops/s
# Warmup Iteration   6: 47611.644 ops/s
# Warmup Iteration   7: 120135.343 ops/s
# Warmup Iteration   8: 157760.695 ops/s
# Warmup Iteration   9: 181888.214 ops/s
# Warmup Iteration  10: 176706.926 ops/s
# Warmup Iteration  11: 171710.041 ops/s
# Warmup Iteration  12: 184902.337 ops/s
# Warmup Iteration  13: 178055.768 ops/s
# Warmup Iteration  14: 181573.796 ops/s
# Warmup Iteration  15: 170148.131 ops/s
# Warmup Iteration  16: 180534.570 ops/s
# Warmup Iteration  17: 184110.519 ops/s
# Warmup Iteration  18: 175644.202 ops/s
# Warmup Iteration  19: 177821.394 ops/s
# Warmup Iteration  20: 180851.955 ops/s
# Warmup Iteration  21: 175483.818 ops/s
# Warmup Iteration  22: 181045.370 ops/s
# Warmup Iteration  23: 178490.566 ops/s
# Warmup Iteration  24: 175852.480 ops/s
# Warmup Iteration  25: 180848.549 ops/s
# Warmup Iteration  26: 174394.007 ops/s
# Warmup Iteration  27: 182862.777 ops/s
# Warmup Iteration  28: 173277.762 ops/s
# Warmup Iteration  29: 179946.760 ops/s
# Warmup Iteration  30: 179399.792 ops/s
Iteration   1: 173439.744 ops/s
Iteration   2: 182922.083 ops/s
Iteration   3: 178086.591 ops/s
Iteration   4: 172966.939 ops/s
Iteration   5: 183292.525 ops/s
Iteration   6: 177413.311 ops/s
Iteration   7: 180397.469 ops/s
Iteration   8: 181397.942 ops/s
Iteration   9: 174339.191 ops/s
Iteration  10: 185330.487 ops/s
Iteration  11: 174374.188 ops/s
Iteration  12: 183866.007 ops/s
Iteration  13: 179062.398 ops/s
Iteration  14: 176191.915 ops/s
Iteration  15: 175639.732 ops/s
Iteration  16: 180009.196 ops/s
Iteration  17: 178802.779 ops/s
Iteration  18: 184661.383 ops/s
Iteration  19: 187831.337 ops/s
Iteration  20: 174964.164 ops/s
Iteration  21: 181819.817 ops/s
Iteration  22: 176661.245 ops/s
Iteration  23: 141441.938 ops/s
Iteration  24: 183731.935 ops/s
Iteration  25: 175034.466 ops/s
Iteration  26: 179089.528 ops/s
Iteration  27: 181188.779 ops/s
Iteration  28: 173864.823 ops/s
Iteration  29: 184084.034 ops/s
Iteration  30: 176154.490 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctTest._Benchmark.benchmark_badSource":
  177935.348 ±(99.9%) 5349.043 ops/s [Average]
  (min, avg, max) = (141441.938, 177935.348, 187831.337), stdev = 8006.196
  CI (99.9%): [172586.305, 183284.391] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ObservableDistinctTest._Benchmark.benchmark_badSource  thrpt   30  177935.348 ± 5349.043  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 171128.871 ops/s
# Warmup Iteration   2: 470156.467 ops/s
# Warmup Iteration   3: 513360.711 ops/s
# Warmup Iteration   4: 515505.463 ops/s
# Warmup Iteration   5: 533271.621 ops/s
# Warmup Iteration   6: 499793.600 ops/s
# Warmup Iteration   7: 498435.033 ops/s
# Warmup Iteration   8: 504948.172 ops/s
# Warmup Iteration   9: 538425.073 ops/s
# Warmup Iteration  10: 511249.660 ops/s
# Warmup Iteration  11: 512548.515 ops/s
# Warmup Iteration  12: 527122.106 ops/s
# Warmup Iteration  13: 511735.456 ops/s
# Warmup Iteration  14: 542846.089 ops/s
# Warmup Iteration  15: 503701.931 ops/s
# Warmup Iteration  16: 520256.184 ops/s
# Warmup Iteration  17: 551308.746 ops/s
# Warmup Iteration  18: 543282.575 ops/s
# Warmup Iteration  19: 574644.252 ops/s
# Warmup Iteration  20: 510469.436 ops/s
# Warmup Iteration  21: 555568.146 ops/s
# Warmup Iteration  22: 525871.008 ops/s
# Warmup Iteration  23: 556728.502 ops/s
# Warmup Iteration  24: 561332.964 ops/s
# Warmup Iteration  25: 526350.729 ops/s
# Warmup Iteration  26: 565837.040 ops/s
# Warmup Iteration  27: 559989.577 ops/s
# Warmup Iteration  28: 547495.421 ops/s
# Warmup Iteration  29: 568734.905 ops/s
# Warmup Iteration  30: 542344.440 ops/s
Iteration   1: 526420.674 ops/s
Iteration   2: 564663.179 ops/s
Iteration   3: 553380.658 ops/s
Iteration   4: 537398.695 ops/s
Iteration   5: 564141.026 ops/s
Iteration   6: 536144.025 ops/s
Iteration   7: 554584.835 ops/s
Iteration   8: 553713.277 ops/s
Iteration   9: 546047.936 ops/s
Iteration  10: 546893.083 ops/s
Iteration  11: 578443.217 ops/s
Iteration  12: 532430.416 ops/s
Iteration  13: 565427.321 ops/s
Iteration  14: 544771.186 ops/s
Iteration  15: 548678.872 ops/s
Iteration  16: 562454.613 ops/s
Iteration  17: 536493.526 ops/s
Iteration  18: 568089.280 ops/s
Iteration  19: 535631.550 ops/s
Iteration  20: 565820.876 ops/s
Iteration  21: 539274.144 ops/s
Iteration  22: 550814.652 ops/s
Iteration  23: 571823.754 ops/s
Iteration  24: 563790.717 ops/s
Iteration  25: 537419.385 ops/s
Iteration  26: 558059.513 ops/s
Iteration  27: 552628.438 ops/s
Iteration  28: 562159.144 ops/s
Iteration  29: 548621.612 ops/s
Iteration  30: 535549.614 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_normal":
  551392.307 ±(99.9%) 8957.037 ops/s [Average]
  (min, avg, max) = (526420.674, 551392.307, 578443.217), stdev = 13406.472
  CI (99.9%): [542435.270, 560349.344] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_normal  thrpt   30  551392.307 ± 8957.037  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_eventsAfterDematerializedTerminal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_eventsAfterDematerializedTerminal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17789.054 ops/s
# Warmup Iteration   2: 88520.093 ops/s
# Warmup Iteration   3: 121093.251 ops/s
# Warmup Iteration   4: 122488.416 ops/s
# Warmup Iteration   5: 122886.131 ops/s
# Warmup Iteration   6: 123874.350 ops/s
# Warmup Iteration   7: 122176.124 ops/s
# Warmup Iteration   8: 127900.172 ops/s
# Warmup Iteration   9: 121459.138 ops/s
# Warmup Iteration  10: 121495.119 ops/s
# Warmup Iteration  11: 127859.382 ops/s
# Warmup Iteration  12: 125621.335 ops/s
# Warmup Iteration  13: 120476.200 ops/s
# Warmup Iteration  14: 125777.630 ops/s
# Warmup Iteration  15: 120689.230 ops/s
# Warmup Iteration  16: 127985.798 ops/s
# Warmup Iteration  17: 127839.585 ops/s
# Warmup Iteration  18: 128648.897 ops/s
# Warmup Iteration  19: 126034.628 ops/s
# Warmup Iteration  20: 127255.222 ops/s
# Warmup Iteration  21: 127856.161 ops/s
# Warmup Iteration  22: 129618.424 ops/s
# Warmup Iteration  23: 134567.100 ops/s
# Warmup Iteration  24: 131679.605 ops/s
# Warmup Iteration  25: 127802.748 ops/s
# Warmup Iteration  26: 131033.182 ops/s
# Warmup Iteration  27: 124613.126 ops/s
# Warmup Iteration  28: 132718.998 ops/s
# Warmup Iteration  29: 129495.238 ops/s
# Warmup Iteration  30: 127497.409 ops/s
Iteration   1: 130031.822 ops/s
Iteration   2: 129210.709 ops/s
Iteration   3: 132900.718 ops/s
Iteration   4: 130306.358 ops/s
Iteration   5: 131217.004 ops/s
Iteration   6: 130888.178 ops/s
Iteration   7: 128413.197 ops/s
Iteration   8: 131952.971 ops/s
Iteration   9: 125506.334 ops/s
Iteration  10: 136146.437 ops/s
Iteration  11: 128006.094 ops/s
Iteration  12: 128552.532 ops/s
Iteration  13: 132557.435 ops/s
Iteration  14: 125364.903 ops/s
Iteration  15: 127294.433 ops/s
Iteration  16: 133423.970 ops/s
Iteration  17: 108778.488 ops/s
Iteration  18: 114778.361 ops/s
Iteration  19: 128022.586 ops/s
Iteration  20: 121460.124 ops/s
Iteration  21: 136363.587 ops/s
Iteration  22: 131835.152 ops/s
Iteration  23: 136061.895 ops/s
Iteration  24: 135831.165 ops/s
Iteration  25: 127560.853 ops/s
Iteration  26: 132550.705 ops/s
Iteration  27: 128598.150 ops/s
Iteration  28: 137058.656 ops/s
Iteration  29: 131576.948 ops/s
Iteration  30: 131423.445 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_eventsAfterDematerializedTerminal":
  129455.774 ±(99.9%) 4043.506 ops/s [Average]
  (min, avg, max) = (108778.488, 129455.774, 137058.656), stdev = 6052.131
  CI (99.9%): [125412.267, 133499.280] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
ObservableDematerializeTest._Benchmark.benchmark_eventsAfterDematerializedTerminal  thrpt   30  129455.774 ± 4043.506  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 203402.927 ops/s
# Warmup Iteration   2: 536960.795 ops/s
# Warmup Iteration   3: 704325.926 ops/s
# Warmup Iteration   4: 680883.200 ops/s
# Warmup Iteration   5: 709652.857 ops/s
# Warmup Iteration   6: 697910.142 ops/s
# Warmup Iteration   7: 708944.614 ops/s
# Warmup Iteration   8: 701919.227 ops/s
# Warmup Iteration   9: 700432.012 ops/s
# Warmup Iteration  10: 654429.202 ops/s
# Warmup Iteration  11: 676064.928 ops/s
# Warmup Iteration  12: 691380.118 ops/s
# Warmup Iteration  13: 669225.851 ops/s
# Warmup Iteration  14: 714705.359 ops/s
# Warmup Iteration  15: 678963.017 ops/s
# Warmup Iteration  16: 718085.164 ops/s
# Warmup Iteration  17: 672020.997 ops/s
# Warmup Iteration  18: 761677.564 ops/s
# Warmup Iteration  19: 761712.564 ops/s
# Warmup Iteration  20: 753813.330 ops/s
# Warmup Iteration  21: 765537.685 ops/s
# Warmup Iteration  22: 752816.691 ops/s
# Warmup Iteration  23: 701991.437 ops/s
# Warmup Iteration  24: 754272.998 ops/s
# Warmup Iteration  25: 740061.103 ops/s
# Warmup Iteration  26: 767646.169 ops/s
# Warmup Iteration  27: 766219.100 ops/s
# Warmup Iteration  28: 730892.766 ops/s
# Warmup Iteration  29: 787136.264 ops/s
# Warmup Iteration  30: 737597.430 ops/s
Iteration   1: 757222.305 ops/s
Iteration   2: 788754.860 ops/s
Iteration   3: 739637.244 ops/s
Iteration   4: 762865.974 ops/s
Iteration   5: 770389.857 ops/s
Iteration   6: 716719.968 ops/s
Iteration   7: 755745.274 ops/s
Iteration   8: 740773.529 ops/s
Iteration   9: 759300.930 ops/s
Iteration  10: 738231.806 ops/s
Iteration  11: 748213.660 ops/s
Iteration  12: 776329.854 ops/s
Iteration  13: 733555.519 ops/s
Iteration  14: 738729.701 ops/s
Iteration  15: 779183.857 ops/s
Iteration  16: 737518.446 ops/s
Iteration  17: 790803.277 ops/s
Iteration  18: 744554.021 ops/s
Iteration  19: 739719.441 ops/s
Iteration  20: 779440.904 ops/s
Iteration  21: 746181.113 ops/s
Iteration  22: 770690.846 ops/s
Iteration  23: 744381.903 ops/s
Iteration  24: 746025.421 ops/s
Iteration  25: 777922.491 ops/s
Iteration  26: 759992.357 ops/s
Iteration  27: 751621.887 ops/s
Iteration  28: 759484.199 ops/s
Iteration  29: 746858.831 ops/s
Iteration  30: 742688.390 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableError":
  754784.595 ±(99.9%) 11964.804 ops/s [Average]
  (min, avg, max) = (716719.968, 754784.595, 790803.277), stdev = 17908.357
  CI (99.9%): [742819.791, 766749.400] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_fromObservableError  thrpt   30  754784.595 ± 11964.804  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorDropSignalsToObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorDropSignalsToObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11197.500 ops/s
# Warmup Iteration   2: 38698.358 ops/s
# Warmup Iteration   3: 150342.699 ops/s
# Warmup Iteration   4: 155039.919 ops/s
# Warmup Iteration   5: 171110.906 ops/s
# Warmup Iteration   6: 164979.916 ops/s
# Warmup Iteration   7: 167633.580 ops/s
# Warmup Iteration   8: 174990.130 ops/s
# Warmup Iteration   9: 160362.723 ops/s
# Warmup Iteration  10: 165042.264 ops/s
# Warmup Iteration  11: 167306.694 ops/s
# Warmup Iteration  12: 160809.926 ops/s
# Warmup Iteration  13: 175466.676 ops/s
# Warmup Iteration  14: 164315.925 ops/s
# Warmup Iteration  15: 174568.034 ops/s
# Warmup Iteration  16: 166647.060 ops/s
# Warmup Iteration  17: 180204.968 ops/s
# Warmup Iteration  18: 172267.941 ops/s
# Warmup Iteration  19: 177102.616 ops/s
# Warmup Iteration  20: 181510.160 ops/s
# Warmup Iteration  21: 171303.205 ops/s
# Warmup Iteration  22: 174264.724 ops/s
# Warmup Iteration  23: 175202.638 ops/s
# Warmup Iteration  24: 172145.269 ops/s
# Warmup Iteration  25: 177260.854 ops/s
# Warmup Iteration  26: 179175.151 ops/s
# Warmup Iteration  27: 173636.241 ops/s
# Warmup Iteration  28: 182936.350 ops/s
# Warmup Iteration  29: 181833.241 ops/s
# Warmup Iteration  30: 170934.189 ops/s
Iteration   1: 178310.412 ops/s
Iteration   2: 177265.137 ops/s
Iteration   3: 171842.481 ops/s
Iteration   4: 183071.848 ops/s
Iteration   5: 172147.664 ops/s
Iteration   6: 175341.252 ops/s
Iteration   7: 182300.376 ops/s
Iteration   8: 171375.395 ops/s
Iteration   9: 181491.814 ops/s
Iteration  10: 171805.553 ops/s
Iteration  11: 184050.269 ops/s
Iteration  12: 139243.329 ops/s
Iteration  13: 181277.075 ops/s
Iteration  14: 178195.240 ops/s
Iteration  15: 174580.884 ops/s
Iteration  16: 171076.036 ops/s
Iteration  17: 179232.722 ops/s
Iteration  18: 173656.762 ops/s
Iteration  19: 175299.794 ops/s
Iteration  20: 183719.273 ops/s
Iteration  21: 173126.812 ops/s
Iteration  22: 176972.226 ops/s
Iteration  23: 167703.370 ops/s
Iteration  24: 181274.432 ops/s
Iteration  25: 174296.462 ops/s
Iteration  26: 176039.847 ops/s
Iteration  27: 182833.249 ops/s
Iteration  28: 173973.335 ops/s
Iteration  29: 179688.601 ops/s
Iteration  30: 174842.970 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorDropSignalsToObservable":
  175534.487 ±(99.9%) 5432.240 ops/s [Average]
  (min, avg, max) = (139243.329, 175534.487, 184050.269), stdev = 8130.721
  CI (99.9%): [170102.247, 180966.727] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt       Score      Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_collectorAccumulatorDropSignalsToObservable  thrpt   30  175534.487 ± 5432.240  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_nonfusedTerminateMore$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_nonfusedTerminateMore

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74747.426 ops/s
# Warmup Iteration   2: 209105.924 ops/s
# Warmup Iteration   3: 236619.739 ops/s
# Warmup Iteration   4: 213315.536 ops/s
# Warmup Iteration   5: 257568.830 ops/s
# Warmup Iteration   6: 271170.220 ops/s
# Warmup Iteration   7: 265727.578 ops/s
# Warmup Iteration   8: 251762.083 ops/s
# Warmup Iteration   9: 255822.272 ops/s
# Warmup Iteration  10: 261736.668 ops/s
# Warmup Iteration  11: 250912.356 ops/s
# Warmup Iteration  12: 260041.029 ops/s
# Warmup Iteration  13: 263094.414 ops/s
# Warmup Iteration  14: 254068.898 ops/s
# Warmup Iteration  15: 266804.895 ops/s
# Warmup Iteration  16: 251790.020 ops/s
# Warmup Iteration  17: 270094.789 ops/s
# Warmup Iteration  18: 268485.410 ops/s
# Warmup Iteration  19: 268428.001 ops/s
# Warmup Iteration  20: 271090.646 ops/s
# Warmup Iteration  21: 268711.487 ops/s
# Warmup Iteration  22: 274621.670 ops/s
# Warmup Iteration  23: 261168.048 ops/s
# Warmup Iteration  24: 265325.795 ops/s
# Warmup Iteration  25: 273244.260 ops/s
# Warmup Iteration  26: 268766.208 ops/s
# Warmup Iteration  27: 273130.588 ops/s
# Warmup Iteration  28: 260925.790 ops/s
# Warmup Iteration  29: 263186.818 ops/s
# Warmup Iteration  30: 270485.250 ops/s
Iteration   1: 269091.676 ops/s
Iteration   2: 273453.566 ops/s
Iteration   3: 257582.045 ops/s
Iteration   4: 279627.045 ops/s
Iteration   5: 259565.140 ops/s
Iteration   6: 264237.909 ops/s
Iteration   7: 279286.436 ops/s
Iteration   8: 261745.710 ops/s
Iteration   9: 274621.606 ops/s
Iteration  10: 268664.532 ops/s
Iteration  11: 259854.126 ops/s
Iteration  12: 276843.636 ops/s
Iteration  13: 263119.580 ops/s
Iteration  14: 267337.695 ops/s
Iteration  15: 259387.974 ops/s
Iteration  16: 269250.787 ops/s
Iteration  17: 269972.017 ops/s
Iteration  18: 269010.513 ops/s
Iteration  19: 273048.232 ops/s
Iteration  20: 267560.980 ops/s
Iteration  21: 266245.099 ops/s
Iteration  22: 276571.254 ops/s
Iteration  23: 266040.154 ops/s
Iteration  24: 275006.074 ops/s
Iteration  25: 263897.971 ops/s
Iteration  26: 275623.120 ops/s
Iteration  27: 265898.863 ops/s
Iteration  28: 267671.065 ops/s
Iteration  29: 269332.858 ops/s
Iteration  30: 268044.373 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_nonfusedTerminateMore":
  268586.401 ±(99.9%) 4013.052 ops/s [Average]
  (min, avg, max) = (257582.045, 268586.401, 279627.045), stdev = 6006.547
  CI (99.9%): [264573.349, 272599.453] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_nonfusedTerminateMore  thrpt   30  268586.401 ± 4013.052  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74429.529 ops/s
# Warmup Iteration   2: 805632.740 ops/s
# Warmup Iteration   3: 1201050.451 ops/s
# Warmup Iteration   4: 1258471.571 ops/s
# Warmup Iteration   5: 1339397.050 ops/s
# Warmup Iteration   6: 1227099.040 ops/s
# Warmup Iteration   7: 1306621.310 ops/s
# Warmup Iteration   8: 1287169.556 ops/s
# Warmup Iteration   9: 1237105.982 ops/s
# Warmup Iteration  10: 1262276.402 ops/s
# Warmup Iteration  11: 1252674.204 ops/s
# Warmup Iteration  12: 1292840.375 ops/s
# Warmup Iteration  13: 1236935.248 ops/s
# Warmup Iteration  14: 1272556.140 ops/s
# Warmup Iteration  15: 1313286.905 ops/s
# Warmup Iteration  16: 1313874.825 ops/s
# Warmup Iteration  17: 1241449.626 ops/s
# Warmup Iteration  18: 1329001.389 ops/s
# Warmup Iteration  19: 1245768.647 ops/s
# Warmup Iteration  20: 1275280.731 ops/s
# Warmup Iteration  21: 1306470.229 ops/s
# Warmup Iteration  22: 1233807.640 ops/s
# Warmup Iteration  23: 1220364.838 ops/s
# Warmup Iteration  24: 1229219.764 ops/s
# Warmup Iteration  25: 1245537.811 ops/s
# Warmup Iteration  26: 1260790.843 ops/s
# Warmup Iteration  27: 1276010.622 ops/s
# Warmup Iteration  28: 1318193.385 ops/s
# Warmup Iteration  29: 1272877.307 ops/s
# Warmup Iteration  30: 1325610.035 ops/s
Iteration   1: 1266080.887 ops/s
Iteration   2: 1293610.721 ops/s
Iteration   3: 1266306.089 ops/s
Iteration   4: 1294139.959 ops/s
Iteration   5: 1237836.300 ops/s
Iteration   6: 1305887.539 ops/s
Iteration   7: 1100697.362 ops/s
Iteration   8: 1261362.289 ops/s
Iteration   9: 1246535.495 ops/s
Iteration  10: 1315237.193 ops/s
Iteration  11: 1261950.932 ops/s
Iteration  12: 1298342.184 ops/s
Iteration  13: 1273309.916 ops/s
Iteration  14: 1262617.154 ops/s
Iteration  15: 1277739.315 ops/s
Iteration  16: 1245011.754 ops/s
Iteration  17: 1289664.366 ops/s
Iteration  18: 1255955.949 ops/s
Iteration  19: 1253360.614 ops/s
Iteration  20: 1287637.218 ops/s
Iteration  21: 1221359.746 ops/s
Iteration  22: 1326046.307 ops/s
Iteration  23: 1248908.592 ops/s
Iteration  24: 1328560.601 ops/s
Iteration  25: 1264507.158 ops/s
Iteration  26: 1289140.203 ops/s
Iteration  27: 1305544.611 ops/s
Iteration  28: 1267422.494 ops/s
Iteration  29: 1310488.446 ops/s
Iteration  30: 1318635.138 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance":
  1272463.218 ±(99.9%) 28423.395 ops/s [Average]
  (min, avg, max) = (1100697.362, 1272463.218, 1328560.601), stdev = 42542.803
  CI (99.9%): [1244039.823, 1300886.613] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableMergeTests._Benchmark.benchmark_mergeCovariance  thrpt   30  1272463.218 ± 28423.395  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 159462.071 ops/s
# Warmup Iteration   2: 850241.262 ops/s
# Warmup Iteration   3: 1132161.977 ops/s
# Warmup Iteration   4: 1267928.164 ops/s
# Warmup Iteration   5: 1489190.753 ops/s
# Warmup Iteration   6: 1189429.520 ops/s
# Warmup Iteration   7: 1409647.709 ops/s
# Warmup Iteration   8: 1264631.869 ops/s
# Warmup Iteration   9: 1341550.774 ops/s
# Warmup Iteration  10: 1428333.153 ops/s
# Warmup Iteration  11: 1398346.826 ops/s
# Warmup Iteration  12: 1405157.542 ops/s
# Warmup Iteration  13: 1331056.561 ops/s
# Warmup Iteration  14: 1289181.192 ops/s
# Warmup Iteration  15: 1319253.220 ops/s
# Warmup Iteration  16: 1265975.238 ops/s
# Warmup Iteration  17: 1351272.250 ops/s
# Warmup Iteration  18: 1250878.712 ops/s
# Warmup Iteration  19: 1324297.657 ops/s
# Warmup Iteration  20: 1283497.378 ops/s
# Warmup Iteration  21: 1318582.458 ops/s
# Warmup Iteration  22: 1328855.263 ops/s
# Warmup Iteration  23: 1276952.175 ops/s
# Warmup Iteration  24: 1317663.301 ops/s
# Warmup Iteration  25: 1276585.394 ops/s
# Warmup Iteration  26: 1284225.321 ops/s
# Warmup Iteration  27: 1305668.776 ops/s
# Warmup Iteration  28: 1353639.646 ops/s
# Warmup Iteration  29: 1264713.636 ops/s
# Warmup Iteration  30: 1363524.830 ops/s
Iteration   1: 1256575.344 ops/s
Iteration   2: 1321542.987 ops/s
Iteration   3: 1341442.197 ops/s
Iteration   4: 1246286.282 ops/s
Iteration   5: 1327896.009 ops/s
Iteration   6: 1282415.022 ops/s
Iteration   7: 1283613.011 ops/s
Iteration   8: 1306131.983 ops/s
Iteration   9: 1239741.876 ops/s
Iteration  10: 1315394.838 ops/s
Iteration  11: 1276362.281 ops/s
Iteration  12: 1343517.975 ops/s
Iteration  13: 1314884.509 ops/s
Iteration  14: 1268107.196 ops/s
Iteration  15: 1274801.010 ops/s
Iteration  16: 1301395.277 ops/s
Iteration  17: 1288336.259 ops/s
Iteration  18: 1351948.304 ops/s
Iteration  19: 1296176.979 ops/s
Iteration  20: 1299887.016 ops/s
Iteration  21: 1364791.658 ops/s
Iteration  22: 1267141.327 ops/s
Iteration  23: 1334398.348 ops/s
Iteration  24: 1293696.826 ops/s
Iteration  25: 1324392.587 ops/s
Iteration  26: 1312882.420 ops/s
Iteration  27: 1306693.423 ops/s
Iteration  28: 1352748.289 ops/s
Iteration  29: 1257207.985 ops/s
Iteration  30: 1328800.407 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance3":
  1302640.321 ±(99.9%) 22169.823 ops/s [Average]
  (min, avg, max) = (1239741.876, 1302640.321, 1364791.658), stdev = 33182.750
  CI (99.9%): [1280470.498, 1324810.144] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableMergeTests._Benchmark.benchmark_mergeCovariance3  thrpt   30  1302640.321 ± 22169.823  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161438.559 ops/s
# Warmup Iteration   2: 765235.693 ops/s
# Warmup Iteration   3: 1156167.965 ops/s
# Warmup Iteration   4: 1062219.737 ops/s
# Warmup Iteration   5: 1302758.146 ops/s
# Warmup Iteration   6: 1219786.275 ops/s
# Warmup Iteration   7: 1270382.536 ops/s
# Warmup Iteration   8: 1285762.808 ops/s
# Warmup Iteration   9: 1249316.570 ops/s
# Warmup Iteration  10: 1308286.860 ops/s
# Warmup Iteration  11: 1232008.238 ops/s
# Warmup Iteration  12: 1250418.459 ops/s
# Warmup Iteration  13: 1292433.510 ops/s
# Warmup Iteration  14: 1248849.610 ops/s
# Warmup Iteration  15: 1239728.769 ops/s
# Warmup Iteration  16: 1237567.568 ops/s
# Warmup Iteration  17: 1251177.951 ops/s
# Warmup Iteration  18: 1286201.235 ops/s
# Warmup Iteration  19: 1231160.815 ops/s
# Warmup Iteration  20: 1312764.545 ops/s
# Warmup Iteration  21: 1233180.062 ops/s
# Warmup Iteration  22: 1297399.241 ops/s
# Warmup Iteration  23: 1268597.299 ops/s
# Warmup Iteration  24: 1225669.954 ops/s
# Warmup Iteration  25: 1248747.530 ops/s
# Warmup Iteration  26: 1321240.866 ops/s
# Warmup Iteration  27: 1228180.495 ops/s
# Warmup Iteration  28: 1290650.819 ops/s
# Warmup Iteration  29: 1251699.790 ops/s
# Warmup Iteration  30: 1248954.242 ops/s
Iteration   1: 1265698.991 ops/s
Iteration   2: 919166.999 ops/s
Iteration   3: 1253790.319 ops/s
Iteration   4: 1292480.675 ops/s
Iteration   5: 1262488.176 ops/s
Iteration   6: 1275254.821 ops/s
Iteration   7: 1264661.296 ops/s
Iteration   8: 1255811.940 ops/s
Iteration   9: 1307467.859 ops/s
Iteration  10: 1240668.465 ops/s
Iteration  11: 1265532.736 ops/s
Iteration  12: 1245103.347 ops/s
Iteration  13: 1298762.447 ops/s
Iteration  14: 1304250.298 ops/s
Iteration  15: 1236189.617 ops/s
Iteration  16: 1271765.327 ops/s
Iteration  17: 1318165.278 ops/s
Iteration  18: 1228843.454 ops/s
Iteration  19: 1291090.793 ops/s
Iteration  20: 1255295.609 ops/s
Iteration  21: 1246850.801 ops/s
Iteration  22: 1313626.558 ops/s
Iteration  23: 1247225.427 ops/s
Iteration  24: 1281207.508 ops/s
Iteration  25: 1304922.477 ops/s
Iteration  26: 1231333.883 ops/s
Iteration  27: 1318728.867 ops/s
Iteration  28: 1278366.724 ops/s
Iteration  29: 1220756.533 ops/s
Iteration  30: 1293670.102 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance2":
  1259639.244 ±(99.9%) 46902.172 ops/s [Average]
  (min, avg, max) = (919166.999, 1259639.244, 1318728.867), stdev = 70200.969
  CI (99.9%): [1212737.072, 1306541.417] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableMergeTests._Benchmark.benchmark_mergeCovariance2  thrpt   30  1259639.244 ± 46902.172  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76728.349 ops/s
# Warmup Iteration   2: 456686.313 ops/s
# Warmup Iteration   3: 1011839.591 ops/s
# Warmup Iteration   4: 1279218.642 ops/s
# Warmup Iteration   5: 1242880.946 ops/s
# Warmup Iteration   6: 1248970.215 ops/s
# Warmup Iteration   7: 1302654.303 ops/s
# Warmup Iteration   8: 1249023.695 ops/s
# Warmup Iteration   9: 1171506.745 ops/s
# Warmup Iteration  10: 1169625.404 ops/s
# Warmup Iteration  11: 1225464.961 ops/s
# Warmup Iteration  12: 1269430.031 ops/s
# Warmup Iteration  13: 1274197.673 ops/s
# Warmup Iteration  14: 1277238.836 ops/s
# Warmup Iteration  15: 1291491.316 ops/s
# Warmup Iteration  16: 1308478.638 ops/s
# Warmup Iteration  17: 1284804.564 ops/s
# Warmup Iteration  18: 1255457.267 ops/s
# Warmup Iteration  19: 1283144.116 ops/s
# Warmup Iteration  20: 1255761.688 ops/s
# Warmup Iteration  21: 1304921.567 ops/s
# Warmup Iteration  22: 1232981.842 ops/s
# Warmup Iteration  23: 1285966.573 ops/s
# Warmup Iteration  24: 1267298.929 ops/s
# Warmup Iteration  25: 1290832.057 ops/s
# Warmup Iteration  26: 1227336.349 ops/s
# Warmup Iteration  27: 1289988.455 ops/s
# Warmup Iteration  28: 1283763.849 ops/s
# Warmup Iteration  29: 1251764.509 ops/s
# Warmup Iteration  30: 1269680.529 ops/s
Iteration   1: 1217895.599 ops/s
Iteration   2: 1222271.958 ops/s
Iteration   3: 1263271.306 ops/s
Iteration   4: 1296445.076 ops/s
Iteration   5: 1268555.723 ops/s
Iteration   6: 1274823.021 ops/s
Iteration   7: 1284042.963 ops/s
Iteration   8: 1240382.456 ops/s
Iteration   9: 1294818.777 ops/s
Iteration  10: 1271941.323 ops/s
Iteration  11: 1194378.465 ops/s
Iteration  12: 1307051.426 ops/s
Iteration  13: 1243914.636 ops/s
Iteration  14: 1297202.683 ops/s
Iteration  15: 1245421.193 ops/s
Iteration  16: 1262885.120 ops/s
Iteration  17: 1322512.520 ops/s
Iteration  18: 1232741.773 ops/s
Iteration  19: 1292827.434 ops/s
Iteration  20: 1249321.012 ops/s
Iteration  21: 1292448.781 ops/s
Iteration  22: 1261499.838 ops/s
Iteration  23: 1315938.500 ops/s
Iteration  24: 1315842.262 ops/s
Iteration  25: 1232196.301 ops/s
Iteration  26: 1291792.058 ops/s
Iteration  27: 1224691.033 ops/s
Iteration  28: 1247843.454 ops/s
Iteration  29: 1320408.112 ops/s
Iteration  30: 1240243.760 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableMergeTests._Benchmark.benchmark_mergeCovariance4":
  1267520.285 ±(99.9%) 22942.322 ops/s [Average]
  (min, avg, max) = (1194378.465, 1267520.285, 1322512.520), stdev = 34338.991
  CI (99.9%): [1244577.963, 1290462.608] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableMergeTests._Benchmark.benchmark_mergeCovariance4  thrpt   30  1267520.285 ± 22942.322  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapperMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapperMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 160051.101 ops/s
# Warmup Iteration   2: 640467.182 ops/s
# Warmup Iteration   3: 1162744.485 ops/s
# Warmup Iteration   4: 1057250.539 ops/s
# Warmup Iteration   5: 1188582.906 ops/s
# Warmup Iteration   6: 1222368.541 ops/s
# Warmup Iteration   7: 1216469.396 ops/s
# Warmup Iteration   8: 1273360.925 ops/s
# Warmup Iteration   9: 1198105.060 ops/s
# Warmup Iteration  10: 1223895.249 ops/s
# Warmup Iteration  11: 1259037.049 ops/s
# Warmup Iteration  12: 1262784.508 ops/s
# Warmup Iteration  13: 1219079.389 ops/s
# Warmup Iteration  14: 1272815.283 ops/s
# Warmup Iteration  15: 1199835.771 ops/s
# Warmup Iteration  16: 1274877.637 ops/s
# Warmup Iteration  17: 1254894.090 ops/s
# Warmup Iteration  18: 1202158.945 ops/s
# Warmup Iteration  19: 1252002.073 ops/s
# Warmup Iteration  20: 1233833.664 ops/s
# Warmup Iteration  21: 1243469.633 ops/s
# Warmup Iteration  22: 1226441.514 ops/s
# Warmup Iteration  23: 1177173.939 ops/s
# Warmup Iteration  24: 1215428.753 ops/s
# Warmup Iteration  25: 1218092.907 ops/s
# Warmup Iteration  26: 1022865.535 ops/s
# Warmup Iteration  27: 1112989.535 ops/s
# Warmup Iteration  28: 1231047.166 ops/s
# Warmup Iteration  29: 1233755.894 ops/s
# Warmup Iteration  30: 1235787.608 ops/s
Iteration   1: 1234057.194 ops/s
Iteration   2: 1199845.227 ops/s
Iteration   3: 1224330.057 ops/s
Iteration   4: 1231115.088 ops/s
Iteration   5: 1216271.929 ops/s
Iteration   6: 1264847.755 ops/s
Iteration   7: 1269359.345 ops/s
Iteration   8: 1207146.230 ops/s
Iteration   9: 1257877.464 ops/s
Iteration  10: 1210738.081 ops/s
Iteration  11: 1265459.565 ops/s
Iteration  12: 1196067.547 ops/s
Iteration  13: 1219968.441 ops/s
Iteration  14: 1249747.801 ops/s
Iteration  15: 1245312.693 ops/s
Iteration  16: 1259210.380 ops/s
Iteration  17: 1200952.268 ops/s
Iteration  18: 1275841.234 ops/s
Iteration  19: 1191494.719 ops/s
Iteration  20: 1247587.458 ops/s
Iteration  21: 1202151.009 ops/s
Iteration  22: 1285046.095 ops/s
Iteration  23: 1217946.830 ops/s
Iteration  24: 1251662.078 ops/s
Iteration  25: 1205208.137 ops/s
Iteration  26: 1240732.369 ops/s
Iteration  27: 1253436.348 ops/s
Iteration  28: 1197140.040 ops/s
Iteration  29: 1222413.731 ops/s
Iteration  30: 1216674.878 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapperMaxConcurrency":
  1231988.066 ±(99.9%) 18064.827 ops/s [Average]
  (min, avg, max) = (1191494.719, 1231988.066, 1285046.095), stdev = 27038.585
  CI (99.9%): [1213923.239, 1250052.894] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_flatMapBiMapperMaxConcurrency  thrpt   30  1231988.066 ± 18064.827  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 278424.871 ops/s
# Warmup Iteration   2: 1024335.984 ops/s
# Warmup Iteration   3: 1548907.782 ops/s
# Warmup Iteration   4: 1495613.118 ops/s
# Warmup Iteration   5: 1681836.083 ops/s
# Warmup Iteration   6: 1778299.995 ops/s
# Warmup Iteration   7: 1804153.158 ops/s
# Warmup Iteration   8: 1658578.195 ops/s
# Warmup Iteration   9: 1865076.507 ops/s
# Warmup Iteration  10: 1686496.356 ops/s
# Warmup Iteration  11: 1768089.081 ops/s
# Warmup Iteration  12: 1705053.227 ops/s
# Warmup Iteration  13: 1727598.025 ops/s
# Warmup Iteration  14: 1791959.142 ops/s
# Warmup Iteration  15: 1690029.969 ops/s
# Warmup Iteration  16: 1722986.573 ops/s
# Warmup Iteration  17: 1796259.376 ops/s
# Warmup Iteration  18: 1793657.824 ops/s
# Warmup Iteration  19: 1718378.284 ops/s
# Warmup Iteration  20: 1770469.073 ops/s
# Warmup Iteration  21: 1719962.074 ops/s
# Warmup Iteration  22: 1824503.130 ops/s
# Warmup Iteration  23: 1636351.197 ops/s
# Warmup Iteration  24: 1752936.419 ops/s
# Warmup Iteration  25: 1829495.526 ops/s
# Warmup Iteration  26: 1756401.660 ops/s
# Warmup Iteration  27: 1727634.035 ops/s
# Warmup Iteration  28: 1796817.485 ops/s
# Warmup Iteration  29: 1690256.651 ops/s
# Warmup Iteration  30: 1800919.933 ops/s
Iteration   1: 1726783.981 ops/s
Iteration   2: 1717717.103 ops/s
Iteration   3: 1804469.664 ops/s
Iteration   4: 1661229.855 ops/s
Iteration   5: 1760914.364 ops/s
Iteration   6: 1786636.174 ops/s
Iteration   7: 1746836.071 ops/s
Iteration   8: 1788926.459 ops/s
Iteration   9: 1725884.128 ops/s
Iteration  10: 1784328.195 ops/s
Iteration  11: 1727319.747 ops/s
Iteration  12: 1757621.272 ops/s
Iteration  13: 1735799.943 ops/s
Iteration  14: 1709040.145 ops/s
Iteration  15: 1749896.469 ops/s
Iteration  16: 1704677.083 ops/s
Iteration  17: 1808308.280 ops/s
Iteration  18: 1742252.366 ops/s
Iteration  19: 1763742.479 ops/s
Iteration  20: 1775889.880 ops/s
Iteration  21: 1767585.463 ops/s
Iteration  22: 1763329.964 ops/s
Iteration  23: 1791527.333 ops/s
Iteration  24: 1756228.320 ops/s
Iteration  25: 1701520.178 ops/s
Iteration  26: 1815773.765 ops/s
Iteration  27: 1670508.323 ops/s
Iteration  28: 1761690.804 ops/s
Iteration  29: 1688780.300 ops/s
Iteration  30: 1749534.973 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrency":
  1748158.436 ±(99.9%) 26326.604 ops/s [Average]
  (min, avg, max) = (1661229.855, 1748158.436, 1815773.765), stdev = 39404.425
  CI (99.9%): [1721831.832, 1774485.040] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_allConcurrency  thrpt   30  1748158.436 ± 26326.604  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 207360.065 ops/s
# Warmup Iteration   2: 999040.173 ops/s
# Warmup Iteration   3: 1543157.074 ops/s
# Warmup Iteration   4: 1425808.132 ops/s
# Warmup Iteration   5: 1728349.582 ops/s
# Warmup Iteration   6: 1774170.120 ops/s
# Warmup Iteration   7: 1638109.156 ops/s
# Warmup Iteration   8: 1733221.000 ops/s
# Warmup Iteration   9: 1655376.588 ops/s
# Warmup Iteration  10: 1707801.022 ops/s
# Warmup Iteration  11: 1661770.344 ops/s
# Warmup Iteration  12: 1701820.833 ops/s
# Warmup Iteration  13: 1711232.990 ops/s
# Warmup Iteration  14: 1677187.764 ops/s
# Warmup Iteration  15: 1769511.185 ops/s
# Warmup Iteration  16: 1655887.409 ops/s
# Warmup Iteration  17: 1620882.525 ops/s
# Warmup Iteration  18: 1652136.014 ops/s
# Warmup Iteration  19: 1763345.079 ops/s
# Warmup Iteration  20: 1674406.827 ops/s
# Warmup Iteration  21: 1416955.029 ops/s
# Warmup Iteration  22: 1655493.057 ops/s
# Warmup Iteration  23: 1671774.996 ops/s
# Warmup Iteration  24: 1713210.426 ops/s
# Warmup Iteration  25: 1673182.587 ops/s
# Warmup Iteration  26: 1678743.490 ops/s
# Warmup Iteration  27: 1732116.027 ops/s
# Warmup Iteration  28: 1645516.898 ops/s
# Warmup Iteration  29: 1712295.047 ops/s
# Warmup Iteration  30: 1693697.236 ops/s
Iteration   1: 1768676.973 ops/s
Iteration   2: 1762741.021 ops/s
Iteration   3: 1649398.696 ops/s
Iteration   4: 1734235.422 ops/s
Iteration   5: 1700255.988 ops/s
Iteration   6: 1698305.478 ops/s
Iteration   7: 1700559.486 ops/s
Iteration   8: 1738136.076 ops/s
Iteration   9: 1660105.927 ops/s
Iteration  10: 1723159.152 ops/s
Iteration  11: 1694605.834 ops/s
Iteration  12: 1684252.795 ops/s
Iteration  13: 1731957.856 ops/s
Iteration  14: 1653891.856 ops/s
Iteration  15: 1691541.871 ops/s
Iteration  16: 1692207.831 ops/s
Iteration  17: 1727335.854 ops/s
Iteration  18: 1651665.904 ops/s
Iteration  19: 1719145.758 ops/s
Iteration  20: 1726329.634 ops/s
Iteration  21: 1663915.581 ops/s
Iteration  22: 1695765.019 ops/s
Iteration  23: 1650844.383 ops/s
Iteration  24: 1700237.068 ops/s
Iteration  25: 1753779.176 ops/s
Iteration  26: 1633684.994 ops/s
Iteration  27: 1717967.847 ops/s
Iteration  28: 1663235.711 ops/s
Iteration  29: 1685136.155 ops/s
Iteration  30: 1686266.720 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_just":
  1698644.736 ±(99.9%) 23775.930 ops/s [Average]
  (min, avg, max) = (1633684.994, 1698644.736, 1768676.973), stdev = 35586.695
  CI (99.9%): [1674868.806, 1722420.665] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableMapNotificationTest._Benchmark.benchmark_just  thrpt   30  1698644.736 ± 23775.930  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecutionHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecutionHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 378843.958 ops/s
# Warmup Iteration   2: 1661690.297 ops/s
# Warmup Iteration   3: 2421832.077 ops/s
# Warmup Iteration   4: 2760960.995 ops/s
# Warmup Iteration   5: 2751475.226 ops/s
# Warmup Iteration   6: 2817988.757 ops/s
# Warmup Iteration   7: 2701998.649 ops/s
# Warmup Iteration   8: 2852035.040 ops/s
# Warmup Iteration   9: 2730409.098 ops/s
# Warmup Iteration  10: 2743235.365 ops/s
# Warmup Iteration  11: 2737480.015 ops/s
# Warmup Iteration  12: 2828085.919 ops/s
# Warmup Iteration  13: 2741071.130 ops/s
# Warmup Iteration  14: 2855679.357 ops/s
# Warmup Iteration  15: 2711534.615 ops/s
# Warmup Iteration  16: 2840665.827 ops/s
# Warmup Iteration  17: 2727901.435 ops/s
# Warmup Iteration  18: 2872659.117 ops/s
# Warmup Iteration  19: 2728712.518 ops/s
# Warmup Iteration  20: 2778754.224 ops/s
# Warmup Iteration  21: 2813497.264 ops/s
# Warmup Iteration  22: 2739956.840 ops/s
# Warmup Iteration  23: 2793295.539 ops/s
# Warmup Iteration  24: 2653818.950 ops/s
# Warmup Iteration  25: 2787676.721 ops/s
# Warmup Iteration  26: 2771848.894 ops/s
# Warmup Iteration  27: 2761035.572 ops/s
# Warmup Iteration  28: 2874354.565 ops/s
# Warmup Iteration  29: 2910025.591 ops/s
# Warmup Iteration  30: 2719428.868 ops/s
Iteration   1: 2892067.929 ops/s
Iteration   2: 2774747.959 ops/s
Iteration   3: 2697493.135 ops/s
Iteration   4: 2852621.431 ops/s
Iteration   5: 2710902.658 ops/s
Iteration   6: 2763224.981 ops/s
Iteration   7: 2907296.574 ops/s
Iteration   8: 2902639.046 ops/s
Iteration   9: 2734279.120 ops/s
Iteration  10: 2861958.670 ops/s
Iteration  11: 2696489.359 ops/s
Iteration  12: 2882867.520 ops/s
Iteration  13: 2612443.847 ops/s
Iteration  14: 2817422.872 ops/s
Iteration  15: 2815393.718 ops/s
Iteration  16: 2820822.586 ops/s
Iteration  17: 2722836.204 ops/s
Iteration  18: 2818453.048 ops/s
Iteration  19: 2710206.177 ops/s
Iteration  20: 2825378.229 ops/s
Iteration  21: 2826934.102 ops/s
Iteration  22: 2698242.306 ops/s
Iteration  23: 2825100.044 ops/s
Iteration  24: 2800322.437 ops/s
Iteration  25: 2741853.400 ops/s
Iteration  26: 2938250.522 ops/s
Iteration  27: 2670259.646 ops/s
Iteration  28: 2759562.453 ops/s
Iteration  29: 2861592.290 ops/s
Iteration  30: 2732517.363 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecutionHidden":
  2789139.321 ±(99.9%) 53808.192 ops/s [Average]
  (min, avg, max) = (2612443.847, 2789139.321, 2938250.522), stdev = 80537.575
  CI (99.9%): [2735331.129, 2842947.513] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableFromSupplierTest._Benchmark.benchmark_fusedFlatMapExecutionHidden  thrpt   30  2789139.321 ± 53808.192  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecutionHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecutionHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 332006.974 ops/s
# Warmup Iteration   2: 1709441.649 ops/s
# Warmup Iteration   3: 2295132.540 ops/s
# Warmup Iteration   4: 2639360.086 ops/s
# Warmup Iteration   5: 2866627.368 ops/s
# Warmup Iteration   6: 2668143.076 ops/s
# Warmup Iteration   7: 2781025.581 ops/s
# Warmup Iteration   8: 2705333.972 ops/s
# Warmup Iteration   9: 2805961.443 ops/s
# Warmup Iteration  10: 2724814.180 ops/s
# Warmup Iteration  11: 2744009.701 ops/s
# Warmup Iteration  12: 2816536.522 ops/s
# Warmup Iteration  13: 2656599.891 ops/s
# Warmup Iteration  14: 2857212.731 ops/s
# Warmup Iteration  15: 2035910.568 ops/s
# Warmup Iteration  16: 2700536.761 ops/s
# Warmup Iteration  17: 2749869.263 ops/s
# Warmup Iteration  18: 2784541.800 ops/s
# Warmup Iteration  19: 2800109.776 ops/s
# Warmup Iteration  20: 2728429.502 ops/s
# Warmup Iteration  21: 2763421.183 ops/s
# Warmup Iteration  22: 2690644.337 ops/s
# Warmup Iteration  23: 2802773.330 ops/s
# Warmup Iteration  24: 2740563.511 ops/s
# Warmup Iteration  25: 2665016.391 ops/s
# Warmup Iteration  26: 2906435.330 ops/s
# Warmup Iteration  27: 2687854.393 ops/s
# Warmup Iteration  28: 2800768.991 ops/s
# Warmup Iteration  29: 2749147.319 ops/s
# Warmup Iteration  30: 2799868.831 ops/s
Iteration   1: 2813488.316 ops/s
Iteration   2: 2753050.723 ops/s
Iteration   3: 2794283.229 ops/s
Iteration   4: 2700016.086 ops/s
Iteration   5: 2749473.701 ops/s
Iteration   6: 2830102.320 ops/s
Iteration   7: 2722129.902 ops/s
Iteration   8: 2669099.088 ops/s
Iteration   9: 2738774.867 ops/s
Iteration  10: 2839732.041 ops/s
Iteration  11: 2720407.256 ops/s
Iteration  12: 2790094.672 ops/s
Iteration  13: 2806596.301 ops/s
Iteration  14: 2658298.696 ops/s
Iteration  15: 2702246.087 ops/s
Iteration  16: 2810907.099 ops/s
Iteration  17: 2654773.567 ops/s
Iteration  18: 2766656.479 ops/s
Iteration  19: 2643831.004 ops/s
Iteration  20: 2719094.672 ops/s
Iteration  21: 2852015.609 ops/s
Iteration  22: 2706993.135 ops/s
Iteration  23: 2820170.814 ops/s
Iteration  24: 2695870.258 ops/s
Iteration  25: 2707578.403 ops/s
Iteration  26: 2795308.185 ops/s
Iteration  27: 2661887.187 ops/s
Iteration  28: 2860715.393 ops/s
Iteration  29: 2711524.071 ops/s
Iteration  30: 2759723.465 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecutionHidden":
  2748494.754 ±(99.9%) 42539.396 ops/s [Average]
  (min, avg, max) = (2643831.004, 2748494.754, 2860715.393), stdev = 63670.970
  CI (99.9%): [2705955.359, 2791034.150] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableFromCallableTest._Benchmark.benchmark_fusedFlatMapExecutionHidden  thrpt   30  2748494.754 ± 42539.396  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_withResultSelectorMaxConcurrent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_withResultSelectorMaxConcurrent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85448.780 ops/s
# Warmup Iteration   2: 293728.272 ops/s
# Warmup Iteration   3: 515847.308 ops/s
# Warmup Iteration   4: 539531.692 ops/s
# Warmup Iteration   5: 566837.056 ops/s
# Warmup Iteration   6: 549344.374 ops/s
# Warmup Iteration   7: 551227.898 ops/s
# Warmup Iteration   8: 566135.349 ops/s
# Warmup Iteration   9: 506491.528 ops/s
# Warmup Iteration  10: 559991.299 ops/s
# Warmup Iteration  11: 546087.741 ops/s
# Warmup Iteration  12: 552745.994 ops/s
# Warmup Iteration  13: 562752.303 ops/s
# Warmup Iteration  14: 551486.019 ops/s
# Warmup Iteration  15: 571378.467 ops/s
# Warmup Iteration  16: 540940.072 ops/s
# Warmup Iteration  17: 565875.561 ops/s
# Warmup Iteration  18: 532762.691 ops/s
# Warmup Iteration  19: 570554.653 ops/s
# Warmup Iteration  20: 562221.483 ops/s
# Warmup Iteration  21: 555835.816 ops/s
# Warmup Iteration  22: 551347.026 ops/s
# Warmup Iteration  23: 594800.258 ops/s
# Warmup Iteration  24: 543403.178 ops/s
# Warmup Iteration  25: 547010.831 ops/s
# Warmup Iteration  26: 575595.597 ops/s
# Warmup Iteration  27: 514622.859 ops/s
# Warmup Iteration  28: 560847.745 ops/s
# Warmup Iteration  29: 567416.048 ops/s
# Warmup Iteration  30: 551286.385 ops/s
Iteration   1: 564056.597 ops/s
Iteration   2: 569983.826 ops/s
Iteration   3: 541716.430 ops/s
Iteration   4: 580886.207 ops/s
Iteration   5: 520012.088 ops/s
Iteration   6: 573511.618 ops/s
Iteration   7: 550310.148 ops/s
Iteration   8: 559353.527 ops/s
Iteration   9: 563426.706 ops/s
Iteration  10: 554421.973 ops/s
Iteration  11: 556962.513 ops/s
Iteration  12: 579609.907 ops/s
Iteration  13: 538878.722 ops/s
Iteration  14: 566874.125 ops/s
Iteration  15: 578090.078 ops/s
Iteration  16: 573107.276 ops/s
Iteration  17: 557299.200 ops/s
Iteration  18: 572770.815 ops/s
Iteration  19: 554528.196 ops/s
Iteration  20: 563401.840 ops/s
Iteration  21: 559599.419 ops/s
Iteration  22: 560503.729 ops/s
Iteration  23: 541747.557 ops/s
Iteration  24: 580290.109 ops/s
Iteration  25: 554172.164 ops/s
Iteration  26: 558150.149 ops/s
Iteration  27: 557945.943 ops/s
Iteration  28: 553696.776 ops/s
Iteration  29: 585016.587 ops/s
Iteration  30: 546345.781 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_withResultSelectorMaxConcurrent":
  560555.667 ±(99.9%) 9636.543 ops/s [Average]
  (min, avg, max) = (520012.088, 560555.667, 585016.587), stdev = 14423.525
  CI (99.9%): [550919.124, 570192.210] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_withResultSelectorMaxConcurrent  thrpt   30  560555.667 ± 9636.543  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyScalarInnerEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyScalarInnerEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 434549.727 ops/s
# Warmup Iteration   2: 2090392.344 ops/s
# Warmup Iteration   3: 3090532.510 ops/s
# Warmup Iteration   4: 3130127.448 ops/s
# Warmup Iteration   5: 3009341.588 ops/s
# Warmup Iteration   6: 2926468.307 ops/s
# Warmup Iteration   7: 2832566.312 ops/s
# Warmup Iteration   8: 2999829.004 ops/s
# Warmup Iteration   9: 2767359.503 ops/s
# Warmup Iteration  10: 2860864.439 ops/s
# Warmup Iteration  11: 3027036.745 ops/s
# Warmup Iteration  12: 3190853.405 ops/s
# Warmup Iteration  13: 3006767.876 ops/s
# Warmup Iteration  14: 3075375.551 ops/s
# Warmup Iteration  15: 3088856.265 ops/s
# Warmup Iteration  16: 3022134.348 ops/s
# Warmup Iteration  17: 3231996.104 ops/s
# Warmup Iteration  18: 3116895.798 ops/s
# Warmup Iteration  19: 3015235.734 ops/s
# Warmup Iteration  20: 3158762.110 ops/s
# Warmup Iteration  21: 3038905.771 ops/s
# Warmup Iteration  22: 3100394.149 ops/s
# Warmup Iteration  23: 3181247.940 ops/s
# Warmup Iteration  24: 3175430.354 ops/s
# Warmup Iteration  25: 3223541.862 ops/s
# Warmup Iteration  26: 3199731.241 ops/s
# Warmup Iteration  27: 2891263.033 ops/s
# Warmup Iteration  28: 3195507.998 ops/s
# Warmup Iteration  29: 2964541.363 ops/s
# Warmup Iteration  30: 3062901.659 ops/s
Iteration   1: 3141480.740 ops/s
Iteration   2: 2980007.712 ops/s
Iteration   3: 3121877.552 ops/s
Iteration   4: 3055678.848 ops/s
Iteration   5: 3104227.610 ops/s
Iteration   6: 3119754.366 ops/s
Iteration   7: 3114436.467 ops/s
Iteration   8: 3157142.182 ops/s
Iteration   9: 3005382.218 ops/s
Iteration  10: 3122687.137 ops/s
Iteration  11: 3012628.386 ops/s
Iteration  12: 3091575.207 ops/s
Iteration  13: 3068319.712 ops/s
Iteration  14: 3048312.485 ops/s
Iteration  15: 3040857.142 ops/s
Iteration  16: 3226449.248 ops/s
Iteration  17: 3021434.096 ops/s
Iteration  18: 3125638.212 ops/s
Iteration  19: 3153024.052 ops/s
Iteration  20: 3037581.312 ops/s
Iteration  21: 3093007.621 ops/s
Iteration  22: 3204281.613 ops/s
Iteration  23: 3051192.464 ops/s
Iteration  24: 3108584.147 ops/s
Iteration  25: 3172384.611 ops/s
Iteration  26: 3055515.948 ops/s
Iteration  27: 3167185.814 ops/s
Iteration  28: 3077527.456 ops/s
Iteration  29: 2991397.538 ops/s
Iteration  30: 3074244.125 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyScalarInnerEmpty":
  3091460.534 ±(99.9%) 41557.768 ops/s [Average]
  (min, avg, max) = (2980007.712, 3091460.534, 3226449.248), stdev = 62201.715
  CI (99.9%): [3049902.766, 3133018.302] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyScalarInnerEmpty  thrpt   30  3091460.534 ± 41557.768  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_maxConcurrencySustained$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_maxConcurrencySustained

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107205.152 ops/s
# Warmup Iteration   2: 280643.835 ops/s
# Warmup Iteration   3: 565582.749 ops/s
# Warmup Iteration   4: 527996.334 ops/s
# Warmup Iteration   5: 533067.212 ops/s
# Warmup Iteration   6: 585515.844 ops/s
# Warmup Iteration   7: 595869.209 ops/s
# Warmup Iteration   8: 611741.184 ops/s
# Warmup Iteration   9: 624572.175 ops/s
# Warmup Iteration  10: 617812.953 ops/s
# Warmup Iteration  11: 590285.114 ops/s
# Warmup Iteration  12: 617888.880 ops/s
# Warmup Iteration  13: 599288.912 ops/s
# Warmup Iteration  14: 606046.423 ops/s
# Warmup Iteration  15: 622156.139 ops/s
# Warmup Iteration  16: 601868.065 ops/s
# Warmup Iteration  17: 607600.595 ops/s
# Warmup Iteration  18: 599367.314 ops/s
# Warmup Iteration  19: 612360.337 ops/s
# Warmup Iteration  20: 611282.480 ops/s
# Warmup Iteration  21: 608917.239 ops/s
# Warmup Iteration  22: 602264.499 ops/s
# Warmup Iteration  23: 603773.453 ops/s
# Warmup Iteration  24: 588301.271 ops/s
# Warmup Iteration  25: 621029.503 ops/s
# Warmup Iteration  26: 593292.368 ops/s
# Warmup Iteration  27: 613610.808 ops/s
# Warmup Iteration  28: 593648.756 ops/s
# Warmup Iteration  29: 612112.926 ops/s
# Warmup Iteration  30: 596417.465 ops/s
Iteration   1: 591276.553 ops/s
Iteration   2: 609201.071 ops/s
Iteration   3: 595716.959 ops/s
Iteration   4: 601756.479 ops/s
Iteration   5: 614388.067 ops/s
Iteration   6: 590312.490 ops/s
Iteration   7: 613576.347 ops/s
Iteration   8: 613150.266 ops/s
Iteration   9: 586744.262 ops/s
Iteration  10: 617608.268 ops/s
Iteration  11: 585334.294 ops/s
Iteration  12: 636505.608 ops/s
Iteration  13: 583641.846 ops/s
Iteration  14: 591964.644 ops/s
Iteration  15: 609104.384 ops/s
Iteration  16: 604574.521 ops/s
Iteration  17: 600652.449 ops/s
Iteration  18: 611936.396 ops/s
Iteration  19: 595414.134 ops/s
Iteration  20: 623636.033 ops/s
Iteration  21: 605191.921 ops/s
Iteration  22: 618468.110 ops/s
Iteration  23: 596910.202 ops/s
Iteration  24: 605092.122 ops/s
Iteration  25: 610348.764 ops/s
Iteration  26: 604743.277 ops/s
Iteration  27: 585249.240 ops/s
Iteration  28: 592535.924 ops/s
Iteration  29: 614140.407 ops/s
Iteration  30: 594268.773 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_maxConcurrencySustained":
  603448.127 ±(99.9%) 8518.954 ops/s [Average]
  (min, avg, max) = (583641.846, 603448.127, 636505.608), stdev = 12750.770
  CI (99.9%): [594929.173, 611967.081] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_maxConcurrencySustained  thrpt   30  603448.127 ± 8518.954  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyScalarInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyScalarInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 681746.497 ops/s
# Warmup Iteration   2: 1967627.577 ops/s
# Warmup Iteration   3: 2573434.177 ops/s
# Warmup Iteration   4: 1944670.705 ops/s
# Warmup Iteration   5: 2896779.601 ops/s
# Warmup Iteration   6: 2730664.102 ops/s
# Warmup Iteration   7: 2762112.822 ops/s
# Warmup Iteration   8: 2875313.254 ops/s
# Warmup Iteration   9: 2852103.073 ops/s
# Warmup Iteration  10: 2699610.222 ops/s
# Warmup Iteration  11: 2810950.374 ops/s
# Warmup Iteration  12: 2786131.427 ops/s
# Warmup Iteration  13: 2861691.556 ops/s
# Warmup Iteration  14: 2829172.692 ops/s
# Warmup Iteration  15: 2756226.843 ops/s
# Warmup Iteration  16: 2861434.342 ops/s
# Warmup Iteration  17: 2770536.204 ops/s
# Warmup Iteration  18: 2646927.836 ops/s
# Warmup Iteration  19: 2832089.610 ops/s
# Warmup Iteration  20: 2927960.110 ops/s
# Warmup Iteration  21: 2890326.130 ops/s
# Warmup Iteration  22: 2759687.937 ops/s
# Warmup Iteration  23: 2764494.844 ops/s
# Warmup Iteration  24: 2709989.423 ops/s
# Warmup Iteration  25: 2868627.655 ops/s
# Warmup Iteration  26: 2736085.780 ops/s
# Warmup Iteration  27: 2858566.619 ops/s
# Warmup Iteration  28: 2721985.388 ops/s
# Warmup Iteration  29: 2745394.236 ops/s
# Warmup Iteration  30: 2803088.948 ops/s
Iteration   1: 2749379.771 ops/s
Iteration   2: 2756088.583 ops/s
Iteration   3: 2863204.644 ops/s
Iteration   4: 2748488.917 ops/s
Iteration   5: 2711737.882 ops/s
Iteration   6: 2784123.205 ops/s
Iteration   7: 2908643.413 ops/s
Iteration   8: 2844248.102 ops/s
Iteration   9: 2786966.954 ops/s
Iteration  10: 2885187.936 ops/s
Iteration  11: 2767273.110 ops/s
Iteration  12: 2773856.980 ops/s
Iteration  13: 2786126.109 ops/s
Iteration  14: 2715801.223 ops/s
Iteration  15: 2778699.025 ops/s
Iteration  16: 2798052.064 ops/s
Iteration  17: 2737969.525 ops/s
Iteration  18: 2844356.607 ops/s
Iteration  19: 2765468.019 ops/s
Iteration  20: 2802847.405 ops/s
Iteration  21: 2910161.491 ops/s
Iteration  22: 2668937.650 ops/s
Iteration  23: 2872349.256 ops/s
Iteration  24: 2728132.111 ops/s
Iteration  25: 2808209.644 ops/s
Iteration  26: 2875194.713 ops/s
Iteration  27: 2664213.711 ops/s
Iteration  28: 2813812.466 ops/s
Iteration  29: 2791344.524 ops/s
Iteration  30: 2827519.657 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyScalarInner":
  2792279.823 ±(99.9%) 42975.009 ops/s [Average]
  (min, avg, max) = (2664213.711, 2792279.823, 2910161.491), stdev = 64322.975
  CI (99.9%): [2749304.814, 2835254.832] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_allConcurrencyScalarInner  thrpt   30  2792279.823 ± 42975.009  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_someConcurrencyScalarInnerCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_someConcurrencyScalarInnerCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 394035.528 ops/s
# Warmup Iteration   2: 1778201.878 ops/s
# Warmup Iteration   3: 2325953.043 ops/s
# Warmup Iteration   4: 2935340.440 ops/s
# Warmup Iteration   5: 2814445.978 ops/s
# Warmup Iteration   6: 2865212.938 ops/s
# Warmup Iteration   7: 2995523.413 ops/s
# Warmup Iteration   8: 2788367.846 ops/s
# Warmup Iteration   9: 2952549.700 ops/s
# Warmup Iteration  10: 2939328.154 ops/s
# Warmup Iteration  11: 2814347.715 ops/s
# Warmup Iteration  12: 3003338.380 ops/s
# Warmup Iteration  13: 2805166.614 ops/s
# Warmup Iteration  14: 2848927.527 ops/s
# Warmup Iteration  15: 3025635.830 ops/s
# Warmup Iteration  16: 2827775.713 ops/s
# Warmup Iteration  17: 2861459.900 ops/s
# Warmup Iteration  18: 2817081.594 ops/s
# Warmup Iteration  19: 2956434.364 ops/s
# Warmup Iteration  20: 2903666.084 ops/s
# Warmup Iteration  21: 2801619.884 ops/s
# Warmup Iteration  22: 2874454.555 ops/s
# Warmup Iteration  23: 2780331.588 ops/s
# Warmup Iteration  24: 2821777.401 ops/s
# Warmup Iteration  25: 2954044.479 ops/s
# Warmup Iteration  26: 2792179.917 ops/s
# Warmup Iteration  27: 2939111.957 ops/s
# Warmup Iteration  28: 2878718.688 ops/s
# Warmup Iteration  29: 2948204.576 ops/s
# Warmup Iteration  30: 2972868.412 ops/s
Iteration   1: 2816460.430 ops/s
Iteration   2: 3018280.477 ops/s
Iteration   3: 2850248.229 ops/s
Iteration   4: 2926422.989 ops/s
Iteration   5: 2841868.099 ops/s
Iteration   6: 2861877.986 ops/s
Iteration   7: 3017573.238 ops/s
Iteration   8: 2898438.257 ops/s
Iteration   9: 2870037.846 ops/s
Iteration  10: 2852297.463 ops/s
Iteration  11: 2904011.826 ops/s
Iteration  12: 2844898.974 ops/s
Iteration  13: 2775496.530 ops/s
Iteration  14: 2974943.396 ops/s
Iteration  15: 3011496.397 ops/s
Iteration  16: 2957724.643 ops/s
Iteration  17: 2844451.309 ops/s
Iteration  18: 3022993.359 ops/s
Iteration  19: 2856535.787 ops/s
Iteration  20: 2905381.138 ops/s
Iteration  21: 2846161.471 ops/s
Iteration  22: 2882645.422 ops/s
Iteration  23: 3016400.493 ops/s
Iteration  24: 2711821.190 ops/s
Iteration  25: 2979142.787 ops/s
Iteration  26: 2831377.957 ops/s
Iteration  27: 2977728.660 ops/s
Iteration  28: 2878760.653 ops/s
Iteration  29: 2877406.968 ops/s
Iteration  30: 2584675.224 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_someConcurrencyScalarInnerCancel":
  2887918.640 ±(99.9%) 64612.468 ops/s [Average]
  (min, avg, max) = (2584675.224, 2887918.640, 3022993.359), stdev = 96708.908
  CI (99.9%): [2823306.172, 2952531.108] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_someConcurrencyScalarInnerCancel  thrpt   30  2887918.640 ± 64612.468  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaLift$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaLift

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1237783.783 ops/s
# Warmup Iteration   2: 5076029.219 ops/s
# Warmup Iteration   3: 5244145.219 ops/s
# Warmup Iteration   4: 5227773.141 ops/s
# Warmup Iteration   5: 6291253.449 ops/s
# Warmup Iteration   6: 6046008.481 ops/s
# Warmup Iteration   7: 6152449.399 ops/s
# Warmup Iteration   8: 6173914.353 ops/s
# Warmup Iteration   9: 5920607.979 ops/s
# Warmup Iteration  10: 6061412.613 ops/s
# Warmup Iteration  11: 6144282.628 ops/s
# Warmup Iteration  12: 6355165.869 ops/s
# Warmup Iteration  13: 5970886.722 ops/s
# Warmup Iteration  14: 6173398.726 ops/s
# Warmup Iteration  15: 5999183.743 ops/s
# Warmup Iteration  16: 6183909.755 ops/s
# Warmup Iteration  17: 5932558.754 ops/s
# Warmup Iteration  18: 6327812.697 ops/s
# Warmup Iteration  19: 5987869.406 ops/s
# Warmup Iteration  20: 6099758.582 ops/s
# Warmup Iteration  21: 6268759.923 ops/s
# Warmup Iteration  22: 5853826.141 ops/s
# Warmup Iteration  23: 6295707.970 ops/s
# Warmup Iteration  24: 5932967.700 ops/s
# Warmup Iteration  25: 5899030.804 ops/s
# Warmup Iteration  26: 6200148.051 ops/s
# Warmup Iteration  27: 6065258.876 ops/s
# Warmup Iteration  28: 5776532.921 ops/s
# Warmup Iteration  29: 6072877.863 ops/s
# Warmup Iteration  30: 6232442.071 ops/s
Iteration   1: 5945404.654 ops/s
Iteration   2: 6158427.807 ops/s
Iteration   3: 5863800.946 ops/s
Iteration   4: 6011640.856 ops/s
Iteration   5: 6250119.052 ops/s
Iteration   6: 6066285.644 ops/s
Iteration   7: 5842576.234 ops/s
Iteration   8: 6260151.826 ops/s
Iteration   9: 6023538.201 ops/s
Iteration  10: 5983633.577 ops/s
Iteration  11: 6195444.947 ops/s
Iteration  12: 6029271.773 ops/s
Iteration  13: 6172932.091 ops/s
Iteration  14: 6051749.516 ops/s
Iteration  15: 6003828.711 ops/s
Iteration  16: 6196007.593 ops/s
Iteration  17: 5923727.420 ops/s
Iteration  18: 6116648.726 ops/s
Iteration  19: 5904014.771 ops/s
Iteration  20: 6237118.816 ops/s
Iteration  21: 6066009.646 ops/s
Iteration  22: 6077177.046 ops/s
Iteration  23: 6044225.663 ops/s
Iteration  24: 6069552.353 ops/s
Iteration  25: 6230148.649 ops/s
Iteration  26: 5971558.431 ops/s
Iteration  27: 6277411.696 ops/s
Iteration  28: 5862768.295 ops/s
Iteration  29: 5990441.185 ops/s
Iteration  30: 6217090.407 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaLift":
  6068090.218 ±(99.9%) 85662.967 ops/s [Average]
  (min, avg, max) = (5842576.234, 6068090.218, 6277411.696), stdev = 128216.306
  CI (99.9%): [5982427.250, 6153753.185] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableSubscriberTest._Benchmark.benchmark_onStartCalledOnceViaLift  thrpt   30  6068090.218 ± 85662.967  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalarEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalarEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 417135.196 ops/s
# Warmup Iteration   2: 2016382.880 ops/s
# Warmup Iteration   3: 2899798.111 ops/s
# Warmup Iteration   4: 2882831.820 ops/s
# Warmup Iteration   5: 2750583.243 ops/s
# Warmup Iteration   6: 2827694.705 ops/s
# Warmup Iteration   7: 2895939.792 ops/s
# Warmup Iteration   8: 2754385.431 ops/s
# Warmup Iteration   9: 2952630.171 ops/s
# Warmup Iteration  10: 2886258.683 ops/s
# Warmup Iteration  11: 2788041.304 ops/s
# Warmup Iteration  12: 2899416.437 ops/s
# Warmup Iteration  13: 2816957.427 ops/s
# Warmup Iteration  14: 2793802.158 ops/s
# Warmup Iteration  15: 2886360.953 ops/s
# Warmup Iteration  16: 2724518.581 ops/s
# Warmup Iteration  17: 2744080.315 ops/s
# Warmup Iteration  18: 2827299.900 ops/s
# Warmup Iteration  19: 2908780.404 ops/s
# Warmup Iteration  20: 2906436.523 ops/s
# Warmup Iteration  21: 2636650.092 ops/s
# Warmup Iteration  22: 2939687.271 ops/s
# Warmup Iteration  23: 2841406.866 ops/s
# Warmup Iteration  24: 2842101.386 ops/s
# Warmup Iteration  25: 2995001.223 ops/s
# Warmup Iteration  26: 2869622.090 ops/s
# Warmup Iteration  27: 2903671.929 ops/s
# Warmup Iteration  28: 2798943.225 ops/s
# Warmup Iteration  29: 2962946.445 ops/s
# Warmup Iteration  30: 2941716.358 ops/s
Iteration   1: 2696479.959 ops/s
Iteration   2: 2923967.350 ops/s
Iteration   3: 2941712.848 ops/s
Iteration   4: 2875080.878 ops/s
Iteration   5: 2966897.342 ops/s
Iteration   6: 2788068.988 ops/s
Iteration   7: 2996388.420 ops/s
Iteration   8: 2912370.156 ops/s
Iteration   9: 2808035.419 ops/s
Iteration  10: 2972178.390 ops/s
Iteration  11: 2778932.193 ops/s
Iteration  12: 2878387.869 ops/s
Iteration  13: 2899119.646 ops/s
Iteration  14: 2846857.808 ops/s
Iteration  15: 2896082.526 ops/s
Iteration  16: 2936379.850 ops/s
Iteration  17: 2895989.579 ops/s
Iteration  18: 2825994.894 ops/s
Iteration  19: 2925480.519 ops/s
Iteration  20: 2863079.225 ops/s
Iteration  21: 2821083.917 ops/s
Iteration  22: 2863551.031 ops/s
Iteration  23: 2766936.117 ops/s
Iteration  24: 2889105.954 ops/s
Iteration  25: 2264150.781 ops/s
Iteration  26: 2853096.776 ops/s
Iteration  27: 2862606.060 ops/s
Iteration  28: 2821918.287 ops/s
Iteration  29: 2787351.160 ops/s
Iteration  30: 2876824.907 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_mergeScalarEmpty":
  2847803.628 ±(99.9%) 86146.204 ops/s [Average]
  (min, avg, max) = (2264150.781, 2847803.628, 2996388.420), stdev = 128939.592
  CI (99.9%): [2761657.425, 2933949.832] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_mergeScalarEmpty  thrpt   30  2847803.628 ± 86146.204  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipOne$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipOne

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69106.847 ops/s
# Warmup Iteration   2: 294683.246 ops/s
# Warmup Iteration   3: 407398.940 ops/s
# Warmup Iteration   4: 859928.118 ops/s
# Warmup Iteration   5: 973252.708 ops/s
# Warmup Iteration   6: 923360.686 ops/s
# Warmup Iteration   7: 988811.123 ops/s
# Warmup Iteration   8: 922712.188 ops/s
# Warmup Iteration   9: 969497.362 ops/s
# Warmup Iteration  10: 962331.745 ops/s
# Warmup Iteration  11: 914093.336 ops/s
# Warmup Iteration  12: 979990.965 ops/s
# Warmup Iteration  13: 942219.048 ops/s
# Warmup Iteration  14: 941185.373 ops/s
# Warmup Iteration  15: 990493.153 ops/s
# Warmup Iteration  16: 922246.683 ops/s
# Warmup Iteration  17: 894305.084 ops/s
# Warmup Iteration  18: 1000353.018 ops/s
# Warmup Iteration  19: 947054.378 ops/s
# Warmup Iteration  20: 989211.102 ops/s
# Warmup Iteration  21: 961462.767 ops/s
# Warmup Iteration  22: 882819.400 ops/s
# Warmup Iteration  23: 993939.277 ops/s
# Warmup Iteration  24: 973243.343 ops/s
# Warmup Iteration  25: 957984.697 ops/s
# Warmup Iteration  26: 971173.214 ops/s
# Warmup Iteration  27: 955170.656 ops/s
# Warmup Iteration  28: 983157.456 ops/s
# Warmup Iteration  29: 972398.620 ops/s
# Warmup Iteration  30: 986521.599 ops/s
Iteration   1: 956186.724 ops/s
Iteration   2: 980915.559 ops/s
Iteration   3: 976401.018 ops/s
Iteration   4: 967805.619 ops/s
Iteration   5: 952554.561 ops/s
Iteration   6: 949584.075 ops/s
Iteration   7: 973390.210 ops/s
Iteration   8: 936865.267 ops/s
Iteration   9: 933347.917 ops/s
Iteration  10: 1009532.919 ops/s
Iteration  11: 952133.098 ops/s
Iteration  12: 1004255.024 ops/s
Iteration  13: 942782.157 ops/s
Iteration  14: 972313.589 ops/s
Iteration  15: 981403.908 ops/s
Iteration  16: 942822.374 ops/s
Iteration  17: 985277.045 ops/s
Iteration  18: 978732.872 ops/s
Iteration  19: 949185.317 ops/s
Iteration  20: 1006849.229 ops/s
Iteration  21: 940019.175 ops/s
Iteration  22: 982251.297 ops/s
Iteration  23: 943972.916 ops/s
Iteration  24: 981621.304 ops/s
Iteration  25: 954289.026 ops/s
Iteration  26: 996111.126 ops/s
Iteration  27: 1004814.256 ops/s
Iteration  28: 945864.494 ops/s
Iteration  29: 994474.145 ops/s
Iteration  30: 952900.172 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipOne":
  968288.546 ±(99.9%) 15539.845 ops/s [Average]
  (min, avg, max) = (933347.917, 968288.546, 1009532.919), stdev = 23259.310
  CI (99.9%): [952748.701, 983828.391] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_skipOne  thrpt   30  968288.546 ± 15539.845  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15796.183 ops/s
# Warmup Iteration   2: 94299.835 ops/s
# Warmup Iteration   3: 150973.758 ops/s
# Warmup Iteration   4: 264013.795 ops/s
# Warmup Iteration   5: 402197.308 ops/s
# Warmup Iteration   6: 411216.243 ops/s
# Warmup Iteration   7: 402949.675 ops/s
# Warmup Iteration   8: 408780.401 ops/s
# Warmup Iteration   9: 401352.665 ops/s
# Warmup Iteration  10: 381218.179 ops/s
# Warmup Iteration  11: 373897.947 ops/s
# Warmup Iteration  12: 407696.769 ops/s
# Warmup Iteration  13: 424707.016 ops/s
# Warmup Iteration  14: 389929.835 ops/s
# Warmup Iteration  15: 401405.242 ops/s
# Warmup Iteration  16: 429861.633 ops/s
# Warmup Iteration  17: 402290.282 ops/s
# Warmup Iteration  18: 411310.730 ops/s
# Warmup Iteration  19: 412344.929 ops/s
# Warmup Iteration  20: 415222.171 ops/s
# Warmup Iteration  21: 414652.783 ops/s
# Warmup Iteration  22: 409938.518 ops/s
# Warmup Iteration  23: 424233.203 ops/s
# Warmup Iteration  24: 411467.953 ops/s
# Warmup Iteration  25: 398596.210 ops/s
# Warmup Iteration  26: 429096.448 ops/s
# Warmup Iteration  27: 429985.046 ops/s
# Warmup Iteration  28: 400083.904 ops/s
# Warmup Iteration  29: 415001.451 ops/s
# Warmup Iteration  30: 412811.359 ops/s
Iteration   1: 397987.582 ops/s
Iteration   2: 413879.396 ops/s
Iteration   3: 404884.349 ops/s
Iteration   4: 404682.225 ops/s
Iteration   5: 422300.129 ops/s
Iteration   6: 409534.374 ops/s
Iteration   7: 419223.795 ops/s
Iteration   8: 402535.356 ops/s
Iteration   9: 420453.944 ops/s
Iteration  10: 418626.083 ops/s
Iteration  11: 404193.160 ops/s
Iteration  12: 429630.052 ops/s
Iteration  13: 412564.395 ops/s
Iteration  14: 396083.169 ops/s
Iteration  15: 414445.646 ops/s
Iteration  16: 411122.433 ops/s
Iteration  17: 413426.141 ops/s
Iteration  18: 413717.402 ops/s
Iteration  19: 370776.352 ops/s
Iteration  20: 357987.333 ops/s
Iteration  21: 398369.786 ops/s
Iteration  22: 402954.362 ops/s
Iteration  23: 427648.495 ops/s
Iteration  24: 398469.657 ops/s
Iteration  25: 430965.066 ops/s
Iteration  26: 397880.409 ops/s
Iteration  27: 420975.711 ops/s
Iteration  28: 417720.305 ops/s
Iteration  29: 398703.385 ops/s
Iteration  30: 406905.027 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant2":
  407954.851 ±(99.9%) 10385.270 ops/s [Average]
  (min, avg, max) = (357987.333, 407954.851, 430965.066), stdev = 15544.184
  CI (99.9%): [397569.581, 418340.121] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant2  thrpt   30  407954.851 ± 10385.270  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16874.532 ops/s
# Warmup Iteration   2: 61029.565 ops/s
# Warmup Iteration   3: 145821.829 ops/s
# Warmup Iteration   4: 159896.079 ops/s
# Warmup Iteration   5: 164957.354 ops/s
# Warmup Iteration   6: 163513.257 ops/s
# Warmup Iteration   7: 167811.582 ops/s
# Warmup Iteration   8: 158079.730 ops/s
# Warmup Iteration   9: 163387.054 ops/s
# Warmup Iteration  10: 171056.394 ops/s
# Warmup Iteration  11: 146727.161 ops/s
# Warmup Iteration  12: 156343.318 ops/s
# Warmup Iteration  13: 169669.272 ops/s
# Warmup Iteration  14: 152640.153 ops/s
# Warmup Iteration  15: 169383.493 ops/s
# Warmup Iteration  16: 164362.835 ops/s
# Warmup Iteration  17: 166905.326 ops/s
# Warmup Iteration  18: 170001.518 ops/s
# Warmup Iteration  19: 167446.155 ops/s
# Warmup Iteration  20: 169975.512 ops/s
# Warmup Iteration  21: 167757.605 ops/s
# Warmup Iteration  22: 170856.594 ops/s
# Warmup Iteration  23: 166972.103 ops/s
# Warmup Iteration  24: 171792.834 ops/s
# Warmup Iteration  25: 167309.471 ops/s
# Warmup Iteration  26: 163482.765 ops/s
# Warmup Iteration  27: 173879.449 ops/s
# Warmup Iteration  28: 166186.592 ops/s
# Warmup Iteration  29: 170844.248 ops/s
# Warmup Iteration  30: 167183.501 ops/s
Iteration   1: 171969.398 ops/s
Iteration   2: 173295.948 ops/s
Iteration   3: 169400.482 ops/s
Iteration   4: 161890.409 ops/s
Iteration   5: 173717.200 ops/s
Iteration   6: 163842.879 ops/s
Iteration   7: 171266.437 ops/s
Iteration   8: 171611.051 ops/s
Iteration   9: 177388.070 ops/s
Iteration  10: 164457.289 ops/s
Iteration  11: 168076.687 ops/s
Iteration  12: 170666.750 ops/s
Iteration  13: 168281.048 ops/s
Iteration  14: 171246.937 ops/s
Iteration  15: 167702.523 ops/s
Iteration  16: 163705.234 ops/s
Iteration  17: 175352.657 ops/s
Iteration  18: 165583.861 ops/s
Iteration  19: 172606.286 ops/s
Iteration  20: 163187.687 ops/s
Iteration  21: 171969.470 ops/s
Iteration  22: 165294.932 ops/s
Iteration  23: 167680.784 ops/s
Iteration  24: 170623.361 ops/s
Iteration  25: 166225.936 ops/s
Iteration  26: 173026.420 ops/s
Iteration  27: 174150.077 ops/s
Iteration  28: 160172.723 ops/s
Iteration  29: 167627.194 ops/s
Iteration  30: 168324.812 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_badSource":
  169011.485 ±(99.9%) 2843.008 ops/s [Average]
  (min, avg, max) = (160172.723, 169011.485, 177388.070), stdev = 4255.281
  CI (99.9%): [166168.477, 171854.493] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableWindowWithFlowableTest._Benchmark.benchmark_badSource  thrpt   30  169011.485 ± 2843.008  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_delayErrorCompleteMoreWorkInGroup$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_delayErrorCompleteMoreWorkInGroup

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40065.931 ops/s
# Warmup Iteration   2: 123906.138 ops/s
# Warmup Iteration   3: 211105.932 ops/s
# Warmup Iteration   4: 548626.466 ops/s
# Warmup Iteration   5: 609833.454 ops/s
# Warmup Iteration   6: 657726.983 ops/s
# Warmup Iteration   7: 733346.998 ops/s
# Warmup Iteration   8: 708941.192 ops/s
# Warmup Iteration   9: 723073.241 ops/s
# Warmup Iteration  10: 706583.790 ops/s
# Warmup Iteration  11: 692795.102 ops/s
# Warmup Iteration  12: 744155.729 ops/s
# Warmup Iteration  13: 719174.993 ops/s
# Warmup Iteration  14: 726898.766 ops/s
# Warmup Iteration  15: 704677.121 ops/s
# Warmup Iteration  16: 715208.340 ops/s
# Warmup Iteration  17: 709998.165 ops/s
# Warmup Iteration  18: 718520.816 ops/s
# Warmup Iteration  19: 746874.986 ops/s
# Warmup Iteration  20: 683947.451 ops/s
# Warmup Iteration  21: 733338.691 ops/s
# Warmup Iteration  22: 725738.528 ops/s
# Warmup Iteration  23: 703889.420 ops/s
# Warmup Iteration  24: 692837.779 ops/s
# Warmup Iteration  25: 699972.616 ops/s
# Warmup Iteration  26: 711171.770 ops/s
# Warmup Iteration  27: 743979.334 ops/s
# Warmup Iteration  28: 691447.355 ops/s
# Warmup Iteration  29: 737030.088 ops/s
# Warmup Iteration  30: 698840.458 ops/s
Iteration   1: 736116.301 ops/s
Iteration   2: 687194.121 ops/s
Iteration   3: 725234.710 ops/s
Iteration   4: 715836.978 ops/s
Iteration   5: 711475.740 ops/s
Iteration   6: 732235.029 ops/s
Iteration   7: 712605.830 ops/s
Iteration   8: 734347.624 ops/s
Iteration   9: 721305.472 ops/s
Iteration  10: 729025.338 ops/s
Iteration  11: 707266.016 ops/s
Iteration  12: 711557.811 ops/s
Iteration  13: 744847.553 ops/s
Iteration  14: 544812.060 ops/s
Iteration  15: 679752.873 ops/s
Iteration  16: 720128.884 ops/s
Iteration  17: 699992.815 ops/s
Iteration  18: 740354.312 ops/s
Iteration  19: 700511.803 ops/s
Iteration  20: 718233.021 ops/s
Iteration  21: 723232.978 ops/s
Iteration  22: 697273.046 ops/s
Iteration  23: 739257.880 ops/s
Iteration  24: 690875.315 ops/s
Iteration  25: 710066.896 ops/s
Iteration  26: 701715.175 ops/s
Iteration  27: 737119.999 ops/s
Iteration  28: 742744.030 ops/s
Iteration  29: 710232.610 ops/s
Iteration  30: 732280.394 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_delayErrorCompleteMoreWorkInGroup":
  711921.087 ±(99.9%) 24051.852 ops/s [Average]
  (min, avg, max) = (544812.060, 711921.087, 744847.553), stdev = 35999.683
  CI (99.9%): [687869.235, 735972.940] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
FlowableGroupByTest._Benchmark.benchmark_delayErrorCompleteMoreWorkInGroup  thrpt   30  711921.087 ± 24051.852  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9222.081 ops/s
# Warmup Iteration   2: 39095.926 ops/s
# Warmup Iteration   3: 48255.197 ops/s
# Warmup Iteration   4: 158727.350 ops/s
# Warmup Iteration   5: 173481.523 ops/s
# Warmup Iteration   6: 178657.489 ops/s
# Warmup Iteration   7: 187790.146 ops/s
# Warmup Iteration   8: 187560.836 ops/s
# Warmup Iteration   9: 179220.445 ops/s
# Warmup Iteration  10: 187685.049 ops/s
# Warmup Iteration  11: 179911.943 ops/s
# Warmup Iteration  12: 167883.843 ops/s
# Warmup Iteration  13: 182271.777 ops/s
# Warmup Iteration  14: 177715.228 ops/s
# Warmup Iteration  15: 185529.719 ops/s
# Warmup Iteration  16: 188114.808 ops/s
# Warmup Iteration  17: 170267.613 ops/s
# Warmup Iteration  18: 192697.404 ops/s
# Warmup Iteration  19: 187325.985 ops/s
# Warmup Iteration  20: 188450.422 ops/s
# Warmup Iteration  21: 191680.794 ops/s
# Warmup Iteration  22: 195948.172 ops/s
# Warmup Iteration  23: 181520.935 ops/s
# Warmup Iteration  24: 189757.202 ops/s
# Warmup Iteration  25: 181457.530 ops/s
# Warmup Iteration  26: 188104.562 ops/s
# Warmup Iteration  27: 195256.193 ops/s
# Warmup Iteration  28: 184591.821 ops/s
# Warmup Iteration  29: 194148.437 ops/s
# Warmup Iteration  30: 181951.446 ops/s
Iteration   1: 191418.416 ops/s
Iteration   2: 189613.433 ops/s
Iteration   3: 186962.465 ops/s
Iteration   4: 192314.840 ops/s
Iteration   5: 193453.429 ops/s
Iteration   6: 184580.633 ops/s
Iteration   7: 193150.146 ops/s
Iteration   8: 186790.541 ops/s
Iteration   9: 187052.624 ops/s
Iteration  10: 181762.536 ops/s
Iteration  11: 180292.711 ops/s
Iteration  12: 194772.410 ops/s
Iteration  13: 188758.478 ops/s
Iteration  14: 192062.589 ops/s
Iteration  15: 186054.346 ops/s
Iteration  16: 186119.452 ops/s
Iteration  17: 198180.289 ops/s
Iteration  18: 186833.096 ops/s
Iteration  19: 195481.922 ops/s
Iteration  20: 194660.009 ops/s
Iteration  21: 186657.715 ops/s
Iteration  22: 194568.610 ops/s
Iteration  23: 188900.005 ops/s
Iteration  24: 185309.162 ops/s
Iteration  25: 193453.007 ops/s
Iteration  26: 187199.128 ops/s
Iteration  27: 197186.030 ops/s
Iteration  28: 183846.067 ops/s
Iteration  29: 193685.913 ops/s
Iteration  30: 200355.911 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipOnError":
  190049.197 ±(99.9%) 3334.213 ops/s [Average]
  (min, avg, max) = (180292.711, 190049.197, 200355.911), stdev = 4990.494
  CI (99.9%): [186714.984, 193383.410] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_skipOnError  thrpt   30  190049.197 ± 3334.213  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7987.531 ops/s
# Warmup Iteration   2: 36213.061 ops/s
# Warmup Iteration   3: 56269.647 ops/s
# Warmup Iteration   4: 77728.461 ops/s
# Warmup Iteration   5: 86021.475 ops/s
# Warmup Iteration   6: 109839.435 ops/s
# Warmup Iteration   7: 121563.923 ops/s
# Warmup Iteration   8: 114972.716 ops/s
# Warmup Iteration   9: 111456.083 ops/s
# Warmup Iteration  10: 118691.281 ops/s
# Warmup Iteration  11: 116782.779 ops/s
# Warmup Iteration  12: 114049.713 ops/s
# Warmup Iteration  13: 115142.730 ops/s
# Warmup Iteration  14: 113655.619 ops/s
# Warmup Iteration  15: 126531.911 ops/s
# Warmup Iteration  16: 110397.093 ops/s
# Warmup Iteration  17: 115633.579 ops/s
# Warmup Iteration  18: 128815.360 ops/s
# Warmup Iteration  19: 120615.316 ops/s
# Warmup Iteration  20: 124197.850 ops/s
# Warmup Iteration  21: 109856.516 ops/s
# Warmup Iteration  22: 113703.090 ops/s
# Warmup Iteration  23: 142736.124 ops/s
# Warmup Iteration  24: 119654.793 ops/s
# Warmup Iteration  25: 121062.022 ops/s
# Warmup Iteration  26: 117828.089 ops/s
# Warmup Iteration  27: 122703.791 ops/s
# Warmup Iteration  28: 111086.987 ops/s
# Warmup Iteration  29: 132044.642 ops/s
# Warmup Iteration  30: 117898.588 ops/s
Iteration   1: 122720.798 ops/s
Iteration   2: 126500.646 ops/s
Iteration   3: 113191.113 ops/s
Iteration   4: 127899.005 ops/s
Iteration   5: 118267.136 ops/s
Iteration   6: 138748.502 ops/s
Iteration   7: 132335.041 ops/s
Iteration   8: 95922.359 ops/s
Iteration   9: 134164.175 ops/s
Iteration  10: 136948.174 ops/s
Iteration  11: 139092.466 ops/s
Iteration  12: 135939.970 ops/s
Iteration  13: 113785.605 ops/s
Iteration  14: 121368.325 ops/s
Iteration  15: 121701.069 ops/s
Iteration  16: 116041.559 ops/s
Iteration  17: 110986.231 ops/s
Iteration  18: 119489.118 ops/s
Iteration  19: 112637.859 ops/s
Iteration  20: 116346.752 ops/s
Iteration  21: 117881.829 ops/s
Iteration  22: 131355.940 ops/s
Iteration  23: 125451.526 ops/s
Iteration  24: 97925.541 ops/s
Iteration  25: 119129.616 ops/s
Iteration  26: 131710.181 ops/s
Iteration  27: 118752.101 ops/s
Iteration  28: 129811.998 ops/s
Iteration  29: 114322.851 ops/s
Iteration  30: 113222.874 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTime":
  121788.345 ±(99.9%) 7263.678 ops/s [Average]
  (min, avg, max) = (95922.359, 121788.345, 139092.466), stdev = 10871.933
  CI (99.9%): [114524.667, 129052.024] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTime  thrpt   30  121788.345 ± 7263.678  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48899.474 ops/s
# Warmup Iteration   2: 217340.481 ops/s
# Warmup Iteration   3: 232374.437 ops/s
# Warmup Iteration   4: 242314.004 ops/s
# Warmup Iteration   5: 253090.825 ops/s
# Warmup Iteration   6: 247749.565 ops/s
# Warmup Iteration   7: 239594.665 ops/s
# Warmup Iteration   8: 270061.192 ops/s
# Warmup Iteration   9: 244481.310 ops/s
# Warmup Iteration  10: 239240.778 ops/s
# Warmup Iteration  11: 256760.337 ops/s
# Warmup Iteration  12: 258903.402 ops/s
# Warmup Iteration  13: 256865.141 ops/s
# Warmup Iteration  14: 263936.204 ops/s
# Warmup Iteration  15: 250529.453 ops/s
# Warmup Iteration  16: 264113.666 ops/s
# Warmup Iteration  17: 255897.316 ops/s
# Warmup Iteration  18: 278803.802 ops/s
# Warmup Iteration  19: 258720.111 ops/s
# Warmup Iteration  20: 273768.338 ops/s
# Warmup Iteration  21: 266827.642 ops/s
# Warmup Iteration  22: 271242.831 ops/s
# Warmup Iteration  23: 266777.524 ops/s
# Warmup Iteration  24: 268938.479 ops/s
# Warmup Iteration  25: 265892.456 ops/s
# Warmup Iteration  26: 273303.435 ops/s
# Warmup Iteration  27: 261377.909 ops/s
# Warmup Iteration  28: 271452.975 ops/s
# Warmup Iteration  29: 268198.123 ops/s
# Warmup Iteration  30: 258601.408 ops/s
Iteration   1: 278877.647 ops/s
Iteration   2: 265842.769 ops/s
Iteration   3: 275937.177 ops/s
Iteration   4: 260393.794 ops/s
Iteration   5: 269386.856 ops/s
Iteration   6: 270620.760 ops/s
Iteration   7: 275800.514 ops/s
Iteration   8: 263809.040 ops/s
Iteration   9: 272233.099 ops/s
Iteration  10: 279140.460 ops/s
Iteration  11: 255806.744 ops/s
Iteration  12: 273305.158 ops/s
Iteration  13: 267635.605 ops/s
Iteration  14: 269241.416 ops/s
Iteration  15: 276595.096 ops/s
Iteration  16: 260718.586 ops/s
Iteration  17: 268316.884 ops/s
Iteration  18: 259981.482 ops/s
Iteration  19: 279316.975 ops/s
Iteration  20: 260355.837 ops/s
Iteration  21: 263767.660 ops/s
Iteration  22: 274209.849 ops/s
Iteration  23: 266070.031 ops/s
Iteration  24: 273989.168 ops/s
Iteration  25: 265347.896 ops/s
Iteration  26: 275580.305 ops/s
Iteration  27: 267079.815 ops/s
Iteration  28: 264533.555 ops/s
Iteration  29: 276919.284 ops/s
Iteration  30: 263044.233 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_doubleOnSubscribe":
  269128.590 ±(99.9%) 4419.038 ops/s [Average]
  (min, avg, max) = (255806.744, 269128.590, 279316.975), stdev = 6614.209
  CI (99.9%): [264709.552, 273547.628] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  269128.590 ± 4419.038  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122893.714 ops/s
# Warmup Iteration   2: 412866.131 ops/s
# Warmup Iteration   3: 460856.719 ops/s
# Warmup Iteration   4: 437535.459 ops/s
# Warmup Iteration   5: 471871.877 ops/s
# Warmup Iteration   6: 436094.373 ops/s
# Warmup Iteration   7: 490648.791 ops/s
# Warmup Iteration   8: 499147.751 ops/s
# Warmup Iteration   9: 466362.665 ops/s
# Warmup Iteration  10: 504547.747 ops/s
# Warmup Iteration  11: 481326.934 ops/s
# Warmup Iteration  12: 508318.612 ops/s
# Warmup Iteration  13: 483692.063 ops/s
# Warmup Iteration  14: 492035.480 ops/s
# Warmup Iteration  15: 471833.513 ops/s
# Warmup Iteration  16: 492594.637 ops/s
# Warmup Iteration  17: 515005.947 ops/s
# Warmup Iteration  18: 486391.770 ops/s
# Warmup Iteration  19: 514198.784 ops/s
# Warmup Iteration  20: 508463.861 ops/s
# Warmup Iteration  21: 521888.941 ops/s
# Warmup Iteration  22: 523891.222 ops/s
# Warmup Iteration  23: 487926.112 ops/s
# Warmup Iteration  24: 493991.460 ops/s
# Warmup Iteration  25: 523696.831 ops/s
# Warmup Iteration  26: 498606.507 ops/s
# Warmup Iteration  27: 518588.282 ops/s
# Warmup Iteration  28: 515517.882 ops/s
# Warmup Iteration  29: 502703.706 ops/s
# Warmup Iteration  30: 502601.697 ops/s
Iteration   1: 509716.115 ops/s
Iteration   2: 469313.811 ops/s
Iteration   3: 448974.760 ops/s
Iteration   4: 493899.946 ops/s
Iteration   5: 501944.366 ops/s
Iteration   6: 521434.794 ops/s
Iteration   7: 501991.067 ops/s
Iteration   8: 524969.629 ops/s
Iteration   9: 496978.464 ops/s
Iteration  10: 508124.416 ops/s
Iteration  11: 528310.302 ops/s
Iteration  12: 498461.117 ops/s
Iteration  13: 526600.094 ops/s
Iteration  14: 483177.145 ops/s
Iteration  15: 511842.292 ops/s
Iteration  16: 508412.123 ops/s
Iteration  17: 501690.410 ops/s
Iteration  18: 512779.502 ops/s
Iteration  19: 490327.932 ops/s
Iteration  20: 534703.918 ops/s
Iteration  21: 514810.483 ops/s
Iteration  22: 503082.290 ops/s
Iteration  23: 505929.346 ops/s
Iteration  24: 520511.776 ops/s
Iteration  25: 500747.148 ops/s
Iteration  26: 530964.494 ops/s
Iteration  27: 501680.929 ops/s
Iteration  28: 515508.376 ops/s
Iteration  29: 509793.175 ops/s
Iteration  30: 502373.187 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_doubleOnSubscribe":
  505968.447 ±(99.9%) 11920.907 ops/s [Average]
  (min, avg, max) = (448974.760, 505968.447, 534703.918), stdev = 17842.654
  CI (99.9%): [494047.540, 517889.354] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
CompletableConcatTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  505968.447 ± 11920.907  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148988.895 ops/s
# Warmup Iteration   2: 449341.614 ops/s
# Warmup Iteration   3: 460807.113 ops/s
# Warmup Iteration   4: 525405.149 ops/s
# Warmup Iteration   5: 492612.689 ops/s
# Warmup Iteration   6: 510152.636 ops/s
# Warmup Iteration   7: 500969.044 ops/s
# Warmup Iteration   8: 517320.988 ops/s
# Warmup Iteration   9: 500415.653 ops/s
# Warmup Iteration  10: 450468.970 ops/s
# Warmup Iteration  11: 502482.826 ops/s
# Warmup Iteration  12: 507887.123 ops/s
# Warmup Iteration  13: 514903.698 ops/s
# Warmup Iteration  14: 520412.372 ops/s
# Warmup Iteration  15: 502333.011 ops/s
# Warmup Iteration  16: 527464.103 ops/s
# Warmup Iteration  17: 521481.133 ops/s
# Warmup Iteration  18: 544137.432 ops/s
# Warmup Iteration  19: 526428.092 ops/s
# Warmup Iteration  20: 539968.721 ops/s
# Warmup Iteration  21: 545528.995 ops/s
# Warmup Iteration  22: 531119.307 ops/s
# Warmup Iteration  23: 549330.346 ops/s
# Warmup Iteration  24: 547183.825 ops/s
# Warmup Iteration  25: 526004.157 ops/s
# Warmup Iteration  26: 533253.650 ops/s
# Warmup Iteration  27: 527850.777 ops/s
# Warmup Iteration  28: 532093.607 ops/s
# Warmup Iteration  29: 527623.801 ops/s
# Warmup Iteration  30: 518007.222 ops/s
Iteration   1: 557531.901 ops/s
Iteration   2: 556271.339 ops/s
Iteration   3: 528413.774 ops/s
Iteration   4: 515573.214 ops/s
Iteration   5: 549457.555 ops/s
Iteration   6: 532340.110 ops/s
Iteration   7: 531495.355 ops/s
Iteration   8: 527592.932 ops/s
Iteration   9: 554348.806 ops/s
Iteration  10: 536084.541 ops/s
Iteration  11: 527211.477 ops/s
Iteration  12: 524919.193 ops/s
Iteration  13: 544898.112 ops/s
Iteration  14: 528564.628 ops/s
Iteration  15: 523426.275 ops/s
Iteration  16: 554656.822 ops/s
Iteration  17: 528833.685 ops/s
Iteration  18: 545743.443 ops/s
Iteration  19: 535136.242 ops/s
Iteration  20: 530582.639 ops/s
Iteration  21: 550516.466 ops/s
Iteration  22: 530794.241 ops/s
Iteration  23: 535814.675 ops/s
Iteration  24: 516856.789 ops/s
Iteration  25: 531655.119 ops/s
Iteration  26: 526666.680 ops/s
Iteration  27: 542378.614 ops/s
Iteration  28: 519635.913 ops/s
Iteration  29: 547745.654 ops/s
Iteration  30: 527664.024 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_doubleOnSubscribe":
  535427.007 ±(99.9%) 8045.085 ops/s [Average]
  (min, avg, max) = (515573.214, 535427.007, 557531.901), stdev = 12041.506
  CI (99.9%): [527381.922, 543472.092] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
CompletableMergeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  535427.007 ± 8045.085  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109340.265 ops/s
# Warmup Iteration   2: 428977.712 ops/s
# Warmup Iteration   3: 462438.090 ops/s
# Warmup Iteration   4: 475184.415 ops/s
# Warmup Iteration   5: 489507.123 ops/s
# Warmup Iteration   6: 498940.608 ops/s
# Warmup Iteration   7: 437717.166 ops/s
# Warmup Iteration   8: 524354.194 ops/s
# Warmup Iteration   9: 507432.751 ops/s
# Warmup Iteration  10: 523976.888 ops/s
# Warmup Iteration  11: 518938.445 ops/s
# Warmup Iteration  12: 532055.138 ops/s
# Warmup Iteration  13: 507807.800 ops/s
# Warmup Iteration  14: 535315.762 ops/s
# Warmup Iteration  15: 507784.964 ops/s
# Warmup Iteration  16: 527694.482 ops/s
# Warmup Iteration  17: 519033.416 ops/s
# Warmup Iteration  18: 544086.295 ops/s
# Warmup Iteration  19: 533158.038 ops/s
# Warmup Iteration  20: 530968.912 ops/s
# Warmup Iteration  21: 559123.182 ops/s
# Warmup Iteration  22: 532635.939 ops/s
# Warmup Iteration  23: 546577.431 ops/s
# Warmup Iteration  24: 529503.949 ops/s
# Warmup Iteration  25: 527373.281 ops/s
# Warmup Iteration  26: 447746.875 ops/s
# Warmup Iteration  27: 537622.378 ops/s
# Warmup Iteration  28: 544766.307 ops/s
# Warmup Iteration  29: 532151.208 ops/s
# Warmup Iteration  30: 553262.212 ops/s
Iteration   1: 522295.842 ops/s
Iteration   2: 537355.016 ops/s
Iteration   3: 541489.475 ops/s
Iteration   4: 531988.162 ops/s
Iteration   5: 527006.522 ops/s
Iteration   6: 526348.140 ops/s
Iteration   7: 523637.624 ops/s
Iteration   8: 538612.308 ops/s
Iteration   9: 520050.926 ops/s
Iteration  10: 538563.337 ops/s
Iteration  11: 507436.540 ops/s
Iteration  12: 553648.526 ops/s
Iteration  13: 535665.821 ops/s
Iteration  14: 527828.272 ops/s
Iteration  15: 541720.241 ops/s
Iteration  16: 530067.210 ops/s
Iteration  17: 560085.005 ops/s
Iteration  18: 515479.487 ops/s
Iteration  19: 540724.101 ops/s
Iteration  20: 549039.229 ops/s
Iteration  21: 522868.995 ops/s
Iteration  22: 540694.107 ops/s
Iteration  23: 526888.930 ops/s
Iteration  24: 540257.592 ops/s
Iteration  25: 544500.116 ops/s
Iteration  26: 527996.636 ops/s
Iteration  27: 537302.733 ops/s
Iteration  28: 538629.376 ops/s
Iteration  29: 555187.928 ops/s
Iteration  30: 517952.465 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTest._Benchmark.benchmark_doubleOnSubscribe":
  534044.022 ±(99.9%) 8141.002 ops/s [Average]
  (min, avg, max) = (507436.540, 534044.022, 560085.005), stdev = 12185.069
  CI (99.9%): [525903.020, 542185.024] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableSkipTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  534044.022 ± 8141.002  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedNone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedNone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 220367.580 ops/s
# Warmup Iteration   2: 996926.955 ops/s
# Warmup Iteration   3: 1353339.156 ops/s
# Warmup Iteration   4: 1509749.663 ops/s
# Warmup Iteration   5: 1537121.834 ops/s
# Warmup Iteration   6: 1481048.050 ops/s
# Warmup Iteration   7: 1546971.791 ops/s
# Warmup Iteration   8: 1483608.858 ops/s
# Warmup Iteration   9: 1508076.881 ops/s
# Warmup Iteration  10: 1527920.925 ops/s
# Warmup Iteration  11: 1479279.557 ops/s
# Warmup Iteration  12: 1567167.212 ops/s
# Warmup Iteration  13: 1496072.966 ops/s
# Warmup Iteration  14: 1533392.935 ops/s
# Warmup Iteration  15: 1538881.806 ops/s
# Warmup Iteration  16: 1461744.897 ops/s
# Warmup Iteration  17: 1567305.373 ops/s
# Warmup Iteration  18: 1551191.759 ops/s
# Warmup Iteration  19: 1470716.862 ops/s
# Warmup Iteration  20: 1546254.419 ops/s
# Warmup Iteration  21: 1490790.688 ops/s
# Warmup Iteration  22: 1556536.289 ops/s
# Warmup Iteration  23: 1458591.504 ops/s
# Warmup Iteration  24: 1496664.701 ops/s
# Warmup Iteration  25: 1511247.338 ops/s
# Warmup Iteration  26: 1499930.296 ops/s
# Warmup Iteration  27: 1550638.999 ops/s
# Warmup Iteration  28: 1504525.296 ops/s
# Warmup Iteration  29: 1522314.550 ops/s
# Warmup Iteration  30: 1537476.172 ops/s
Iteration   1: 1517794.758 ops/s
Iteration   2: 1489784.231 ops/s
Iteration   3: 1499483.315 ops/s
Iteration   4: 1590153.013 ops/s
Iteration   5: 1487902.605 ops/s
Iteration   6: 1553166.344 ops/s
Iteration   7: 1535875.205 ops/s
Iteration   8: 1484405.359 ops/s
Iteration   9: 1553358.445 ops/s
Iteration  10: 1484193.505 ops/s
Iteration  11: 1540829.981 ops/s
Iteration  12: 1529247.441 ops/s
Iteration  13: 1591871.438 ops/s
Iteration  14: 1534715.131 ops/s
Iteration  15: 1540723.941 ops/s
Iteration  16: 1521331.698 ops/s
Iteration  17: 1541632.112 ops/s
Iteration  18: 1472236.798 ops/s
Iteration  19: 1531554.001 ops/s
Iteration  20: 1478096.448 ops/s
Iteration  21: 1537731.221 ops/s
Iteration  22: 1533175.237 ops/s
Iteration  23: 1474909.269 ops/s
Iteration  24: 1542222.216 ops/s
Iteration  25: 1483016.015 ops/s
Iteration  26: 1421976.821 ops/s
Iteration  27: 1558988.765 ops/s
Iteration  28: 1439005.974 ops/s
Iteration  29: 1589479.194 ops/s
Iteration  30: 1486696.647 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedNone":
  1518185.238 ±(99.9%) 28068.671 ops/s [Average]
  (min, avg, max) = (1421976.821, 1518185.238, 1591871.438), stdev = 42011.869
  CI (99.9%): [1490116.566, 1546253.909] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedNone  thrpt   30  1518185.238 ± 28068.671  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46357.845 ops/s
# Warmup Iteration   2: 133417.416 ops/s
# Warmup Iteration   3: 307573.193 ops/s
# Warmup Iteration   4: 418215.150 ops/s
# Warmup Iteration   5: 420468.321 ops/s
# Warmup Iteration   6: 417392.405 ops/s
# Warmup Iteration   7: 401026.751 ops/s
# Warmup Iteration   8: 411953.169 ops/s
# Warmup Iteration   9: 403820.559 ops/s
# Warmup Iteration  10: 437329.595 ops/s
# Warmup Iteration  11: 425548.524 ops/s
# Warmup Iteration  12: 395367.360 ops/s
# Warmup Iteration  13: 410292.095 ops/s
# Warmup Iteration  14: 408589.732 ops/s
# Warmup Iteration  15: 451931.048 ops/s
# Warmup Iteration  16: 440635.134 ops/s
# Warmup Iteration  17: 425433.302 ops/s
# Warmup Iteration  18: 462188.943 ops/s
# Warmup Iteration  19: 438724.641 ops/s
# Warmup Iteration  20: 447088.122 ops/s
# Warmup Iteration  21: 314578.067 ops/s
# Warmup Iteration  22: 429091.641 ops/s
# Warmup Iteration  23: 463206.136 ops/s
# Warmup Iteration  24: 451838.641 ops/s
# Warmup Iteration  25: 424247.913 ops/s
# Warmup Iteration  26: 453395.426 ops/s
# Warmup Iteration  27: 429184.166 ops/s
# Warmup Iteration  28: 444640.005 ops/s
# Warmup Iteration  29: 447889.128 ops/s
# Warmup Iteration  30: 436585.016 ops/s
Iteration   1: 463612.580 ops/s
Iteration   2: 437489.277 ops/s
Iteration   3: 428079.192 ops/s
Iteration   4: 445956.817 ops/s
Iteration   5: 450141.299 ops/s
Iteration   6: 429670.759 ops/s
Iteration   7: 433795.056 ops/s
Iteration   8: 423746.300 ops/s
Iteration   9: 443818.009 ops/s
Iteration  10: 449636.408 ops/s
Iteration  11: 441971.530 ops/s
Iteration  12: 427128.198 ops/s
Iteration  13: 444834.856 ops/s
Iteration  14: 447393.394 ops/s
Iteration  15: 437370.963 ops/s
Iteration  16: 423496.107 ops/s
Iteration  17: 457747.457 ops/s
Iteration  18: 428124.659 ops/s
Iteration  19: 436552.106 ops/s
Iteration  20: 460064.495 ops/s
Iteration  21: 409133.755 ops/s
Iteration  22: 448894.416 ops/s
Iteration  23: 435692.920 ops/s
Iteration  24: 456035.825 ops/s
Iteration  25: 452245.063 ops/s
Iteration  26: 440498.824 ops/s
Iteration  27: 445189.929 ops/s
Iteration  28: 442965.408 ops/s
Iteration  29: 450232.827 ops/s
Iteration  30: 430377.657 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_badRequest":
  440729.870 ±(99.9%) 8260.604 ops/s [Average]
  (min, avg, max) = (409133.755, 440729.870, 463612.580), stdev = 12364.085
  CI (99.9%): [432469.265, 448990.474] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_badRequest  thrpt   30  440729.870 ± 8260.604  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71886.515 ops/s
# Warmup Iteration   2: 444800.320 ops/s
# Warmup Iteration   3: 502745.080 ops/s
# Warmup Iteration   4: 458733.594 ops/s
# Warmup Iteration   5: 530089.973 ops/s
# Warmup Iteration   6: 447495.267 ops/s
# Warmup Iteration   7: 514077.565 ops/s
# Warmup Iteration   8: 540831.755 ops/s
# Warmup Iteration   9: 467633.969 ops/s
# Warmup Iteration  10: 548760.500 ops/s
# Warmup Iteration  11: 535879.519 ops/s
# Warmup Iteration  12: 513987.812 ops/s
# Warmup Iteration  13: 534887.859 ops/s
# Warmup Iteration  14: 515495.841 ops/s
# Warmup Iteration  15: 553542.946 ops/s
# Warmup Iteration  16: 526868.826 ops/s
# Warmup Iteration  17: 544208.705 ops/s
# Warmup Iteration  18: 553937.702 ops/s
# Warmup Iteration  19: 542735.941 ops/s
# Warmup Iteration  20: 556506.301 ops/s
# Warmup Iteration  21: 550328.135 ops/s
# Warmup Iteration  22: 540757.618 ops/s
# Warmup Iteration  23: 573223.728 ops/s
# Warmup Iteration  24: 527131.512 ops/s
# Warmup Iteration  25: 550431.024 ops/s
# Warmup Iteration  26: 546536.550 ops/s
# Warmup Iteration  27: 546277.326 ops/s
# Warmup Iteration  28: 546049.611 ops/s
# Warmup Iteration  29: 566547.165 ops/s
# Warmup Iteration  30: 530150.211 ops/s
Iteration   1: 559350.140 ops/s
Iteration   2: 560163.980 ops/s
Iteration   3: 524643.875 ops/s
Iteration   4: 569645.093 ops/s
Iteration   5: 566400.359 ops/s
Iteration   6: 560490.767 ops/s
Iteration   7: 539912.936 ops/s
Iteration   8: 561363.809 ops/s
Iteration   9: 540943.883 ops/s
Iteration  10: 558403.841 ops/s
Iteration  11: 531366.648 ops/s
Iteration  12: 545466.590 ops/s
Iteration  13: 556950.957 ops/s
Iteration  14: 530221.656 ops/s
Iteration  15: 552462.631 ops/s
Iteration  16: 549303.150 ops/s
Iteration  17: 546433.961 ops/s
Iteration  18: 565031.121 ops/s
Iteration  19: 537494.409 ops/s
Iteration  20: 547449.351 ops/s
Iteration  21: 542027.378 ops/s
Iteration  22: 557309.497 ops/s
Iteration  23: 540057.530 ops/s
Iteration  24: 558196.340 ops/s
Iteration  25: 563005.001 ops/s
Iteration  26: 540842.883 ops/s
Iteration  27: 562415.588 ops/s
Iteration  28: 560792.313 ops/s
Iteration  29: 540993.048 ops/s
Iteration  30: 566447.633 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_doubleOnSubscribe":
  551186.212 ±(99.9%) 8148.332 ops/s [Average]
  (min, avg, max) = (524643.875, 551186.212, 569645.093), stdev = 12196.041
  CI (99.9%): [543037.880, 559334.545] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableDetachTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  551186.212 ± 8148.332  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedNoneConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedNoneConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204025.139 ops/s
# Warmup Iteration   2: 744494.647 ops/s
# Warmup Iteration   3: 1260521.244 ops/s
# Warmup Iteration   4: 1273497.193 ops/s
# Warmup Iteration   5: 1474210.665 ops/s
# Warmup Iteration   6: 1410059.069 ops/s
# Warmup Iteration   7: 1460357.816 ops/s
# Warmup Iteration   8: 1497519.396 ops/s
# Warmup Iteration   9: 1411504.342 ops/s
# Warmup Iteration  10: 1420731.279 ops/s
# Warmup Iteration  11: 1448245.968 ops/s
# Warmup Iteration  12: 1497200.022 ops/s
# Warmup Iteration  13: 1426490.894 ops/s
# Warmup Iteration  14: 1430592.388 ops/s
# Warmup Iteration  15: 1482191.006 ops/s
# Warmup Iteration  16: 1057307.478 ops/s
# Warmup Iteration  17: 1426111.620 ops/s
# Warmup Iteration  18: 1517513.056 ops/s
# Warmup Iteration  19: 1471956.437 ops/s
# Warmup Iteration  20: 1455512.049 ops/s
# Warmup Iteration  21: 1517125.130 ops/s
# Warmup Iteration  22: 1420041.011 ops/s
# Warmup Iteration  23: 1476577.687 ops/s
# Warmup Iteration  24: 1486601.028 ops/s
# Warmup Iteration  25: 1454530.091 ops/s
# Warmup Iteration  26: 1451211.356 ops/s
# Warmup Iteration  27: 1542520.799 ops/s
# Warmup Iteration  28: 1409620.865 ops/s
# Warmup Iteration  29: 1467972.451 ops/s
# Warmup Iteration  30: 1469367.052 ops/s
Iteration   1: 1417349.338 ops/s
Iteration   2: 1507258.670 ops/s
Iteration   3: 1419558.567 ops/s
Iteration   4: 1504757.152 ops/s
Iteration   5: 1416397.047 ops/s
Iteration   6: 1485385.749 ops/s
Iteration   7: 1483753.193 ops/s
Iteration   8: 1465427.200 ops/s
Iteration   9: 1473789.779 ops/s
Iteration  10: 1505638.103 ops/s
Iteration  11: 1456559.624 ops/s
Iteration  12: 1460621.660 ops/s
Iteration  13: 1500415.939 ops/s
Iteration  14: 1489351.957 ops/s
Iteration  15: 1470058.478 ops/s
Iteration  16: 1451254.063 ops/s
Iteration  17: 1458868.471 ops/s
Iteration  18: 1493103.582 ops/s
Iteration  19: 1501239.253 ops/s
Iteration  20: 1460746.946 ops/s
Iteration  21: 1493928.533 ops/s
Iteration  22: 1420178.152 ops/s
Iteration  23: 1483681.679 ops/s
Iteration  24: 1457752.546 ops/s
Iteration  25: 1460576.806 ops/s
Iteration  26: 1513454.861 ops/s
Iteration  27: 1442580.319 ops/s
Iteration  28: 1474572.952 ops/s
Iteration  29: 1478386.535 ops/s
Iteration  30: 1500414.633 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedNoneConditional":
  1471568.726 ±(99.9%) 18905.001 ops/s [Average]
  (min, avg, max) = (1416397.047, 1471568.726, 1513454.861), stdev = 28296.117
  CI (99.9%): [1452663.725, 1490473.727] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedNoneConditional  thrpt   30  1471568.726 ± 18905.001  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135260.090 ops/s
# Warmup Iteration   2: 455552.816 ops/s
# Warmup Iteration   3: 549782.928 ops/s
# Warmup Iteration   4: 580394.740 ops/s
# Warmup Iteration   5: 593458.316 ops/s
# Warmup Iteration   6: 550728.888 ops/s
# Warmup Iteration   7: 513187.010 ops/s
# Warmup Iteration   8: 621742.104 ops/s
# Warmup Iteration   9: 571461.355 ops/s
# Warmup Iteration  10: 592919.285 ops/s
# Warmup Iteration  11: 599633.020 ops/s
# Warmup Iteration  12: 580620.528 ops/s
# Warmup Iteration  13: 606103.192 ops/s
# Warmup Iteration  14: 604148.317 ops/s
# Warmup Iteration  15: 579542.435 ops/s
# Warmup Iteration  16: 616082.881 ops/s
# Warmup Iteration  17: 601599.739 ops/s
# Warmup Iteration  18: 633885.452 ops/s
# Warmup Iteration  19: 604730.256 ops/s
# Warmup Iteration  20: 615110.615 ops/s
# Warmup Iteration  21: 634395.379 ops/s
# Warmup Iteration  22: 603407.547 ops/s
# Warmup Iteration  23: 621679.065 ops/s
# Warmup Iteration  24: 618590.427 ops/s
# Warmup Iteration  25: 618710.940 ops/s
# Warmup Iteration  26: 619938.794 ops/s
# Warmup Iteration  27: 612242.539 ops/s
# Warmup Iteration  28: 629062.027 ops/s
# Warmup Iteration  29: 632296.328 ops/s
# Warmup Iteration  30: 593534.016 ops/s
Iteration   1: 641134.679 ops/s
Iteration   2: 640686.028 ops/s
Iteration   3: 603188.940 ops/s
Iteration   4: 624989.904 ops/s
Iteration   5: 609533.006 ops/s
Iteration   6: 619266.747 ops/s
Iteration   7: 632873.667 ops/s
Iteration   8: 614720.283 ops/s
Iteration   9: 623271.787 ops/s
Iteration  10: 606297.039 ops/s
Iteration  11: 632081.049 ops/s
Iteration  12: 608102.509 ops/s
Iteration  13: 600330.322 ops/s
Iteration  14: 629037.358 ops/s
Iteration  15: 622710.819 ops/s
Iteration  16: 621760.126 ops/s
Iteration  17: 626467.929 ops/s
Iteration  18: 608782.613 ops/s
Iteration  19: 616855.361 ops/s
Iteration  20: 634978.820 ops/s
Iteration  21: 610707.035 ops/s
Iteration  22: 616348.217 ops/s
Iteration  23: 618922.808 ops/s
Iteration  24: 635420.820 ops/s
Iteration  25: 638198.338 ops/s
Iteration  26: 606240.824 ops/s
Iteration  27: 641555.879 ops/s
Iteration  28: 626924.046 ops/s
Iteration  29: 610174.930 ops/s
Iteration  30: 619539.844 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_mainError":
  621370.058 ±(99.9%) 8102.237 ops/s [Average]
  (min, avg, max) = (600330.322, 621370.058, 641555.879), stdev = 12127.048
  CI (99.9%): [613267.821, 629472.295] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_mainError  thrpt   30  621370.058 ± 8102.237  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableToFutureTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableToFutureTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27678.006 ops/s
# Warmup Iteration   2: 19783.089 ops/s
# Warmup Iteration   3: 20840.931 ops/s
# Warmup Iteration   4: 29872.776 ops/s
# Warmup Iteration   5: 25308.836 ops/s
# Warmup Iteration   6: 22409.850 ops/s
# Warmup Iteration   7: 22362.221 ops/s
# Warmup Iteration   8: 22288.066 ops/s
# Warmup Iteration   9: 22212.476 ops/s
# Warmup Iteration  10: 18834.559 ops/s
# Warmup Iteration  11: 22264.629 ops/s
# Warmup Iteration  12: 21766.774 ops/s
# Warmup Iteration  13: 21906.035 ops/s
# Warmup Iteration  14: 22430.565 ops/s
# Warmup Iteration  15: 22834.027 ops/s
# Warmup Iteration  16: 21763.650 ops/s
# Warmup Iteration  17: 22399.679 ops/s
# Warmup Iteration  18: 21868.745 ops/s
# Warmup Iteration  19: 22366.772 ops/s
# Warmup Iteration  20: 22034.653 ops/s
# Warmup Iteration  21: 21896.755 ops/s
# Warmup Iteration  22: 22450.062 ops/s
# Warmup Iteration  23: 26697.432 ops/s
# Warmup Iteration  24: 22501.926 ops/s
# Warmup Iteration  25: 22120.867 ops/s
# Warmup Iteration  26: 22281.523 ops/s
# Warmup Iteration  27: 21942.258 ops/s
# Warmup Iteration  28: 22517.904 ops/s
# Warmup Iteration  29: 21740.892 ops/s
# Warmup Iteration  30: 22357.009 ops/s
Iteration   1: 21837.265 ops/s
Iteration   2: 22057.978 ops/s
Iteration   3: 22020.945 ops/s
Iteration   4: 22089.128 ops/s
Iteration   5: 21879.453 ops/s
Iteration   6: 22205.273 ops/s
Iteration   7: 22220.233 ops/s
Iteration   8: 21924.138 ops/s
Iteration   9: 21984.189 ops/s
Iteration  10: 21789.227 ops/s
Iteration  11: 22048.234 ops/s
Iteration  12: 20816.323 ops/s
Iteration  13: 22682.569 ops/s
Iteration  14: 21946.281 ops/s
Iteration  15: 21914.905 ops/s
Iteration  16: 22070.911 ops/s
Iteration  17: 22161.387 ops/s
Iteration  18: 22142.775 ops/s
Iteration  19: 22010.392 ops/s
Iteration  20: 21659.171 ops/s
Iteration  21: 22478.646 ops/s
Iteration  22: 21907.866 ops/s
Iteration  23: 22166.292 ops/s
Iteration  24: 22452.046 ops/s
Iteration  25: 22287.188 ops/s
Iteration  26: 22117.925 ops/s
Iteration  27: 21697.596 ops/s
Iteration  28: 22195.124 ops/s
Iteration  29: 22279.857 ops/s
Iteration  30: 22194.059 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableToFutureTest._Benchmark.benchmark_empty":
  22041.246 ±(99.9%) 214.939 ops/s [Average]
  (min, avg, max) = (20816.323, 22041.246, 22682.569), stdev = 321.711
  CI (99.9%): [21826.307, 22256.185] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt      Score     Error  Units
CompletableToFutureTest._Benchmark.benchmark_empty  thrpt   30  22041.246 ± 214.939  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71947.979 ops/s
# Warmup Iteration   2: 133788.278 ops/s
# Warmup Iteration   3: 170563.491 ops/s
# Warmup Iteration   4: 196130.538 ops/s
# Warmup Iteration   5: 173065.187 ops/s
# Warmup Iteration   6: 183874.950 ops/s
# Warmup Iteration   7: 189435.389 ops/s
# Warmup Iteration   8: 203357.496 ops/s
# Warmup Iteration   9: 186541.689 ops/s
# Warmup Iteration  10: 200249.072 ops/s
# Warmup Iteration  11: 199536.811 ops/s
# Warmup Iteration  12: 196701.667 ops/s
# Warmup Iteration  13: 211022.171 ops/s
# Warmup Iteration  14: 204656.668 ops/s
# Warmup Iteration  15: 196706.388 ops/s
# Warmup Iteration  16: 191076.380 ops/s
# Warmup Iteration  17: 199829.695 ops/s
# Warmup Iteration  18: 184510.907 ops/s
# Warmup Iteration  19: 202152.739 ops/s
# Warmup Iteration  20: 177835.814 ops/s
# Warmup Iteration  21: 200700.523 ops/s
# Warmup Iteration  22: 199818.128 ops/s
# Warmup Iteration  23: 201502.322 ops/s
# Warmup Iteration  24: 190853.396 ops/s
# Warmup Iteration  25: 203949.313 ops/s
# Warmup Iteration  26: 201779.364 ops/s
# Warmup Iteration  27: 189629.887 ops/s
# Warmup Iteration  28: 199231.405 ops/s
# Warmup Iteration  29: 195293.610 ops/s
# Warmup Iteration  30: 205695.312 ops/s
Iteration   1: 180594.145 ops/s
Iteration   2: 195128.158 ops/s
Iteration   3: 192503.312 ops/s
Iteration   4: 179548.139 ops/s
Iteration   5: 197814.341 ops/s
Iteration   6: 207591.904 ops/s
Iteration   7: 187607.257 ops/s
Iteration   8: 210368.904 ops/s
Iteration   9: 186267.611 ops/s
Iteration  10: 192090.740 ops/s
Iteration  11: 194974.824 ops/s
Iteration  12: 202956.840 ops/s
Iteration  13: 194416.792 ops/s
Iteration  14: 207019.617 ops/s
Iteration  15: 188208.745 ops/s
Iteration  16: 195040.641 ops/s
Iteration  17: 203357.239 ops/s
Iteration  18: 204974.214 ops/s
Iteration  19: 196874.900 ops/s
Iteration  20: 188830.252 ops/s
Iteration  21: 184111.803 ops/s
Iteration  22: 186781.854 ops/s
Iteration  23: 202927.423 ops/s
Iteration  24: 206375.261 ops/s
Iteration  25: 191424.240 ops/s
Iteration  26: 198623.989 ops/s
Iteration  27: 191276.838 ops/s
Iteration  28: 198922.946 ops/s
Iteration  29: 199770.708 ops/s
Iteration  30: 174923.691 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUnsubscribeOnTest._Benchmark.benchmark_dispose":
  194710.244 ±(99.9%) 5971.333 ops/s [Average]
  (min, avg, max) = (174923.691, 194710.244, 210368.904), stdev = 8937.612
  CI (99.9%): [188738.911, 200681.578] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeUnsubscribeOnTest._Benchmark.benchmark_dispose  thrpt   30  194710.244 ± 5971.333  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70160.111 ops/s
# Warmup Iteration   2: 109691.949 ops/s
# Warmup Iteration   3: 184016.713 ops/s
# Warmup Iteration   4: 179924.447 ops/s
# Warmup Iteration   5: 189775.105 ops/s
# Warmup Iteration   6: 200441.881 ops/s
# Warmup Iteration   7: 186934.481 ops/s
# Warmup Iteration   8: 205712.471 ops/s
# Warmup Iteration   9: 205044.754 ops/s
# Warmup Iteration  10: 202856.984 ops/s
# Warmup Iteration  11: 207482.694 ops/s
# Warmup Iteration  12: 189581.270 ops/s
# Warmup Iteration  13: 184921.212 ops/s
# Warmup Iteration  14: 186307.536 ops/s
# Warmup Iteration  15: 201115.130 ops/s
# Warmup Iteration  16: 191708.256 ops/s
# Warmup Iteration  17: 190874.586 ops/s
# Warmup Iteration  18: 192952.566 ops/s
# Warmup Iteration  19: 192293.651 ops/s
# Warmup Iteration  20: 186347.543 ops/s
# Warmup Iteration  21: 194734.739 ops/s
# Warmup Iteration  22: 199934.053 ops/s
# Warmup Iteration  23: 200723.450 ops/s
# Warmup Iteration  24: 191352.431 ops/s
# Warmup Iteration  25: 193701.995 ops/s
# Warmup Iteration  26: 201895.570 ops/s
# Warmup Iteration  27: 183601.586 ops/s
# Warmup Iteration  28: 202161.408 ops/s
# Warmup Iteration  29: 210426.446 ops/s
# Warmup Iteration  30: 183345.103 ops/s
Iteration   1: 190232.385 ops/s
Iteration   2: 199736.773 ops/s
Iteration   3: 203001.366 ops/s
Iteration   4: 192549.632 ops/s
Iteration   5: 188147.032 ops/s
Iteration   6: 194837.193 ops/s
Iteration   7: 199476.993 ops/s
Iteration   8: 206677.170 ops/s
Iteration   9: 191029.845 ops/s
Iteration  10: 197412.246 ops/s
Iteration  11: 202792.086 ops/s
Iteration  12: 185547.889 ops/s
Iteration  13: 194734.839 ops/s
Iteration  14: 187144.748 ops/s
Iteration  15: 185040.522 ops/s
Iteration  16: 212971.023 ops/s
Iteration  17: 205795.999 ops/s
Iteration  18: 199950.418 ops/s
Iteration  19: 197586.158 ops/s
Iteration  20: 196854.668 ops/s
Iteration  21: 194676.403 ops/s
Iteration  22: 187469.660 ops/s
Iteration  23: 189637.898 ops/s
Iteration  24: 197709.756 ops/s
Iteration  25: 191883.993 ops/s
Iteration  26: 186330.552 ops/s
Iteration  27: 206757.178 ops/s
Iteration  28: 203537.849 ops/s
Iteration  29: 169721.471 ops/s
Iteration  30: 201882.876 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUnsubscribeOnTest._Benchmark.benchmark_dispose":
  195370.887 ±(99.9%) 5814.538 ops/s [Average]
  (min, avg, max) = (169721.471, 195370.887, 212971.023), stdev = 8702.927
  CI (99.9%): [189556.350, 201185.425] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
SingleUnsubscribeOnTest._Benchmark.benchmark_dispose  thrpt   30  195370.887 ± 5814.538  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 143942.166 ops/s
# Warmup Iteration   2: 462163.604 ops/s
# Warmup Iteration   3: 466736.658 ops/s
# Warmup Iteration   4: 470442.379 ops/s
# Warmup Iteration   5: 486806.068 ops/s
# Warmup Iteration   6: 524623.149 ops/s
# Warmup Iteration   7: 480362.049 ops/s
# Warmup Iteration   8: 530847.351 ops/s
# Warmup Iteration   9: 518443.645 ops/s
# Warmup Iteration  10: 507246.076 ops/s
# Warmup Iteration  11: 544432.792 ops/s
# Warmup Iteration  12: 542527.095 ops/s
# Warmup Iteration  13: 505111.395 ops/s
# Warmup Iteration  14: 524653.598 ops/s
# Warmup Iteration  15: 505636.356 ops/s
# Warmup Iteration  16: 539213.700 ops/s
# Warmup Iteration  17: 546860.365 ops/s
# Warmup Iteration  18: 538087.832 ops/s
# Warmup Iteration  19: 559750.668 ops/s
# Warmup Iteration  20: 530927.055 ops/s
# Warmup Iteration  21: 545096.966 ops/s
# Warmup Iteration  22: 527831.366 ops/s
# Warmup Iteration  23: 547151.378 ops/s
# Warmup Iteration  24: 536755.932 ops/s
# Warmup Iteration  25: 539634.047 ops/s
# Warmup Iteration  26: 539035.211 ops/s
# Warmup Iteration  27: 541724.088 ops/s
# Warmup Iteration  28: 567211.869 ops/s
# Warmup Iteration  29: 564365.213 ops/s
# Warmup Iteration  30: 532281.102 ops/s
Iteration   1: 559579.915 ops/s
Iteration   2: 546237.730 ops/s
Iteration   3: 535005.680 ops/s
Iteration   4: 545422.638 ops/s
Iteration   5: 547860.124 ops/s
Iteration   6: 549354.501 ops/s
Iteration   7: 543015.383 ops/s
Iteration   8: 545539.062 ops/s
Iteration   9: 531876.042 ops/s
Iteration  10: 545254.779 ops/s
Iteration  11: 539169.600 ops/s
Iteration  12: 567346.882 ops/s
Iteration  13: 558093.917 ops/s
Iteration  14: 530221.132 ops/s
Iteration  15: 543181.223 ops/s
Iteration  16: 535590.544 ops/s
Iteration  17: 544719.497 ops/s
Iteration  18: 542083.308 ops/s
Iteration  19: 551915.746 ops/s
Iteration  20: 535493.852 ops/s
Iteration  21: 553512.138 ops/s
Iteration  22: 571407.840 ops/s
Iteration  23: 528676.613 ops/s
Iteration  24: 570164.832 ops/s
Iteration  25: 536086.315 ops/s
Iteration  26: 560861.335 ops/s
Iteration  27: 542229.325 ops/s
Iteration  28: 495183.895 ops/s
Iteration  29: 496097.345 ops/s
Iteration  30: 525770.318 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_doubleOnSubscribe":
  542565.050 ±(99.9%) 11607.252 ops/s [Average]
  (min, avg, max) = (495183.895, 542565.050, 571407.840), stdev = 17373.189
  CI (99.9%): [530957.799, 554172.302] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
CompletableDisposeOnTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  542565.050 ± 11607.252  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastTimedCustomScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastTimedCustomScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.731 ops/s
# Warmup Iteration   2: 5166.258 ops/s
# Warmup Iteration   3: 44162.131 ops/s
# Warmup Iteration   4: 51017.022 ops/s
# Warmup Iteration   5: 32441.754 ops/s
# Warmup Iteration   6: 63356.387 ops/s
# Warmup Iteration   7: 116875.021 ops/s
# Warmup Iteration   8: 144122.181 ops/s
# Warmup Iteration   9: 160615.761 ops/s
# Warmup Iteration  10: 157437.819 ops/s
# Warmup Iteration  11: 138474.665 ops/s
# Warmup Iteration  12: 149542.071 ops/s
# Warmup Iteration  13: 160434.148 ops/s
# Warmup Iteration  14: 159006.556 ops/s
# Warmup Iteration  15: 140128.286 ops/s
# Warmup Iteration  16: 164890.596 ops/s
# Warmup Iteration  17: 166877.195 ops/s
# Warmup Iteration  18: 159912.304 ops/s
# Warmup Iteration  19: 154673.328 ops/s
# Warmup Iteration  20: 156199.554 ops/s
# Warmup Iteration  21: 166790.306 ops/s
# Warmup Iteration  22: 163898.793 ops/s
# Warmup Iteration  23: 142332.768 ops/s
# Warmup Iteration  24: 150256.640 ops/s
# Warmup Iteration  25: 164217.484 ops/s
# Warmup Iteration  26: 154671.101 ops/s
# Warmup Iteration  27: 164508.387 ops/s
# Warmup Iteration  28: 155331.381 ops/s
# Warmup Iteration  29: 165825.945 ops/s
# Warmup Iteration  30: 154011.734 ops/s
Iteration   1: 140856.463 ops/s
Iteration   2: 150522.180 ops/s
Iteration   3: 177176.551 ops/s
Iteration   4: 151391.375 ops/s
Iteration   5: 158834.832 ops/s
Iteration   6: 158161.326 ops/s
Iteration   7: 159002.516 ops/s
Iteration   8: 149312.616 ops/s
Iteration   9: 156908.354 ops/s
Iteration  10: 150057.733 ops/s
Iteration  11: 156803.727 ops/s
Iteration  12: 158334.630 ops/s
Iteration  13: 159072.285 ops/s
Iteration  14: 146990.065 ops/s
Iteration  15: 154877.157 ops/s
Iteration  16: 158200.888 ops/s
Iteration  17: 158974.345 ops/s
Iteration  18: 154606.558 ops/s
Iteration  19: 169141.790 ops/s
Iteration  20: 172325.975 ops/s
Iteration  21: 136988.316 ops/s
Iteration  22: 152516.648 ops/s
Iteration  23: 169891.224 ops/s
Iteration  24: 143927.186 ops/s
Iteration  25: 152231.777 ops/s
Iteration  26: 161969.567 ops/s
Iteration  27: 166259.595 ops/s
Iteration  28: 163801.293 ops/s
Iteration  29: 168321.201 ops/s
Iteration  30: 158793.453 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_emitLastTimedCustomScheduler":
  157208.388 ±(99.9%) 6113.936 ops/s [Average]
  (min, avg, max) = (136988.316, 157208.388, 177176.551), stdev = 9151.052
  CI (99.9%): [151094.452, 163322.323] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableSampleTest._Benchmark.benchmark_emitLastTimedCustomScheduler  thrpt   30  157208.388 ± 6113.936  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 142292.501 ops/s
# Warmup Iteration   2: 433404.511 ops/s
# Warmup Iteration   3: 500521.680 ops/s
# Warmup Iteration   4: 463340.060 ops/s
# Warmup Iteration   5: 523834.953 ops/s
# Warmup Iteration   6: 523792.736 ops/s
# Warmup Iteration   7: 492839.205 ops/s
# Warmup Iteration   8: 518901.665 ops/s
# Warmup Iteration   9: 532552.780 ops/s
# Warmup Iteration  10: 508425.407 ops/s
# Warmup Iteration  11: 498578.900 ops/s
# Warmup Iteration  12: 542670.799 ops/s
# Warmup Iteration  13: 503270.759 ops/s
# Warmup Iteration  14: 533671.530 ops/s
# Warmup Iteration  15: 492705.812 ops/s
# Warmup Iteration  16: 526557.096 ops/s
# Warmup Iteration  17: 534725.920 ops/s
# Warmup Iteration  18: 529906.793 ops/s
# Warmup Iteration  19: 551640.272 ops/s
# Warmup Iteration  20: 509994.435 ops/s
# Warmup Iteration  21: 529181.215 ops/s
# Warmup Iteration  22: 520465.769 ops/s
# Warmup Iteration  23: 526693.094 ops/s
# Warmup Iteration  24: 561948.975 ops/s
# Warmup Iteration  25: 521819.691 ops/s
# Warmup Iteration  26: 558358.372 ops/s
# Warmup Iteration  27: 529757.159 ops/s
# Warmup Iteration  28: 537945.904 ops/s
# Warmup Iteration  29: 555355.433 ops/s
# Warmup Iteration  30: 518967.098 ops/s
Iteration   1: 562278.365 ops/s
Iteration   2: 544857.721 ops/s
Iteration   3: 533823.956 ops/s
Iteration   4: 552525.308 ops/s
Iteration   5: 527155.325 ops/s
Iteration   6: 539156.550 ops/s
Iteration   7: 548031.587 ops/s
Iteration   8: 532975.618 ops/s
Iteration   9: 524832.061 ops/s
Iteration  10: 543160.505 ops/s
Iteration  11: 525981.498 ops/s
Iteration  12: 552761.876 ops/s
Iteration  13: 526358.143 ops/s
Iteration  14: 541521.922 ops/s
Iteration  15: 533173.078 ops/s
Iteration  16: 538306.320 ops/s
Iteration  17: 559616.585 ops/s
Iteration  18: 546606.495 ops/s
Iteration  19: 533253.935 ops/s
Iteration  20: 547709.663 ops/s
Iteration  21: 439316.908 ops/s
Iteration  22: 553314.125 ops/s
Iteration  23: 545426.322 ops/s
Iteration  24: 500406.303 ops/s
Iteration  25: 562804.320 ops/s
Iteration  26: 525343.261 ops/s
Iteration  27: 516729.046 ops/s
Iteration  28: 528825.843 ops/s
Iteration  29: 553549.746 ops/s
Iteration  30: 527737.189 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDelayTest._Benchmark.benchmark_doubleOnSubscribe":
  535584.652 ±(99.9%) 15409.637 ops/s [Average]
  (min, avg, max) = (439316.908, 535584.652, 562804.320), stdev = 23064.420
  CI (99.9%): [520175.016, 550994.289] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
CompletableDelayTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  535584.652 ± 15409.637  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_doubleOnXCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_doubleOnXCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 34636.302 ops/s
# Warmup Iteration   2: 118012.391 ops/s
# Warmup Iteration   3: 155629.128 ops/s
# Warmup Iteration   4: 160416.588 ops/s
# Warmup Iteration   5: 154871.313 ops/s
# Warmup Iteration   6: 174345.109 ops/s
# Warmup Iteration   7: 167958.684 ops/s
# Warmup Iteration   8: 168988.845 ops/s
# Warmup Iteration   9: 178198.909 ops/s
# Warmup Iteration  10: 166736.457 ops/s
# Warmup Iteration  11: 174518.483 ops/s
# Warmup Iteration  12: 178709.561 ops/s
# Warmup Iteration  13: 164856.659 ops/s
# Warmup Iteration  14: 178017.925 ops/s
# Warmup Iteration  15: 175641.309 ops/s
# Warmup Iteration  16: 167211.141 ops/s
# Warmup Iteration  17: 181659.389 ops/s
# Warmup Iteration  18: 175976.182 ops/s
# Warmup Iteration  19: 177435.056 ops/s
# Warmup Iteration  20: 188676.805 ops/s
# Warmup Iteration  21: 171707.063 ops/s
# Warmup Iteration  22: 181230.645 ops/s
# Warmup Iteration  23: 176619.351 ops/s
# Warmup Iteration  24: 176986.845 ops/s
# Warmup Iteration  25: 183694.624 ops/s
# Warmup Iteration  26: 172952.224 ops/s
# Warmup Iteration  27: 181444.950 ops/s
# Warmup Iteration  28: 181587.022 ops/s
# Warmup Iteration  29: 183633.630 ops/s
# Warmup Iteration  30: 182736.068 ops/s
Iteration   1: 170211.779 ops/s
Iteration   2: 182061.764 ops/s
Iteration   3: 179034.380 ops/s
Iteration   4: 182006.194 ops/s
Iteration   5: 182214.974 ops/s
Iteration   6: 187209.926 ops/s
Iteration   7: 174079.045 ops/s
Iteration   8: 183084.979 ops/s
Iteration   9: 174936.090 ops/s
Iteration  10: 185601.898 ops/s
Iteration  11: 173603.047 ops/s
Iteration  12: 178925.248 ops/s
Iteration  13: 185448.797 ops/s
Iteration  14: 178171.131 ops/s
Iteration  15: 174089.857 ops/s
Iteration  16: 185173.260 ops/s
Iteration  17: 183973.618 ops/s
Iteration  18: 172850.760 ops/s
Iteration  19: 182938.843 ops/s
Iteration  20: 178095.760 ops/s
Iteration  21: 178442.503 ops/s
Iteration  22: 183370.070 ops/s
Iteration  23: 180238.716 ops/s
Iteration  24: 171931.218 ops/s
Iteration  25: 179733.210 ops/s
Iteration  26: 187812.618 ops/s
Iteration  27: 176725.097 ops/s
Iteration  28: 175738.855 ops/s
Iteration  29: 184619.278 ops/s
Iteration  30: 175523.493 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_doubleOnXCount":
  179594.880 ±(99.9%) 3246.776 ops/s [Average]
  (min, avg, max) = (170211.779, 179594.880, 187812.618), stdev = 4859.622
  CI (99.9%): [176348.104, 182841.656] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableRefCountTest._Benchmark.benchmark_doubleOnXCount  thrpt   30  179594.880 ± 3246.776  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayErrorCustomScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayErrorCustomScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21654.145 ops/s
# Warmup Iteration   2: 68253.468 ops/s
# Warmup Iteration   3: 88080.724 ops/s
# Warmup Iteration   4: 211056.754 ops/s
# Warmup Iteration   5: 205391.614 ops/s
# Warmup Iteration   6: 215258.879 ops/s
# Warmup Iteration   7: 211754.793 ops/s
# Warmup Iteration   8: 212401.493 ops/s
# Warmup Iteration   9: 223093.905 ops/s
# Warmup Iteration  10: 208957.906 ops/s
# Warmup Iteration  11: 216674.759 ops/s
# Warmup Iteration  12: 219640.524 ops/s
# Warmup Iteration  13: 212756.428 ops/s
# Warmup Iteration  14: 220059.516 ops/s
# Warmup Iteration  15: 215059.998 ops/s
# Warmup Iteration  16: 216200.419 ops/s
# Warmup Iteration  17: 217130.850 ops/s
# Warmup Iteration  18: 222592.368 ops/s
# Warmup Iteration  19: 232325.524 ops/s
# Warmup Iteration  20: 226915.273 ops/s
# Warmup Iteration  21: 218241.308 ops/s
# Warmup Iteration  22: 227326.015 ops/s
# Warmup Iteration  23: 225076.267 ops/s
# Warmup Iteration  24: 219263.192 ops/s
# Warmup Iteration  25: 223441.488 ops/s
# Warmup Iteration  26: 222472.788 ops/s
# Warmup Iteration  27: 219598.479 ops/s
# Warmup Iteration  28: 226259.417 ops/s
# Warmup Iteration  29: 214504.658 ops/s
# Warmup Iteration  30: 217036.096 ops/s
Iteration   1: 233429.389 ops/s
Iteration   2: 227849.932 ops/s
Iteration   3: 214868.693 ops/s
Iteration   4: 220110.871 ops/s
Iteration   5: 218988.577 ops/s
Iteration   6: 220934.190 ops/s
Iteration   7: 226146.345 ops/s
Iteration   8: 220356.444 ops/s
Iteration   9: 221961.146 ops/s
Iteration  10: 227442.142 ops/s
Iteration  11: 217077.544 ops/s
Iteration  12: 231491.752 ops/s
Iteration  13: 212960.742 ops/s
Iteration  14: 228766.058 ops/s
Iteration  15: 173710.980 ops/s
Iteration  16: 220757.350 ops/s
Iteration  17: 217768.367 ops/s
Iteration  18: 228071.448 ops/s
Iteration  19: 224660.888 ops/s
Iteration  20: 210114.096 ops/s
Iteration  21: 227401.280 ops/s
Iteration  22: 216403.836 ops/s
Iteration  23: 225254.295 ops/s
Iteration  24: 221153.487 ops/s
Iteration  25: 225863.211 ops/s
Iteration  26: 217016.981 ops/s
Iteration  27: 225822.029 ops/s
Iteration  28: 229807.664 ops/s
Iteration  29: 220033.992 ops/s
Iteration  30: 221324.220 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayErrorCustomScheduler":
  220918.265 ±(99.9%) 7033.144 ops/s [Average]
  (min, avg, max) = (173710.980, 220918.265, 233429.389), stdev = 10526.880
  CI (99.9%): [213885.121, 227951.409] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score      Error  Units
ObservableTakeLastTimedTest._Benchmark.benchmark_takeLastTimeDelayErrorCustomScheduler  thrpt   30  220918.265 ± 7033.144  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 320939.183 ops/s
# Warmup Iteration   2: 555751.264 ops/s
# Warmup Iteration   3: 651811.708 ops/s
# Warmup Iteration   4: 677105.783 ops/s
# Warmup Iteration   5: 583214.084 ops/s
# Warmup Iteration   6: 736785.207 ops/s
# Warmup Iteration   7: 683528.520 ops/s
# Warmup Iteration   8: 707998.668 ops/s
# Warmup Iteration   9: 695682.270 ops/s
# Warmup Iteration  10: 726976.555 ops/s
# Warmup Iteration  11: 709889.987 ops/s
# Warmup Iteration  12: 676438.309 ops/s
# Warmup Iteration  13: 736102.673 ops/s
# Warmup Iteration  14: 693383.883 ops/s
# Warmup Iteration  15: 720561.874 ops/s
# Warmup Iteration  16: 709731.998 ops/s
# Warmup Iteration  17: 725122.638 ops/s
# Warmup Iteration  18: 760794.375 ops/s
# Warmup Iteration  19: 723056.499 ops/s
# Warmup Iteration  20: 753061.748 ops/s
# Warmup Iteration  21: 733017.803 ops/s
# Warmup Iteration  22: 740665.838 ops/s
# Warmup Iteration  23: 726456.776 ops/s
# Warmup Iteration  24: 739676.754 ops/s
# Warmup Iteration  25: 760727.412 ops/s
# Warmup Iteration  26: 759030.848 ops/s
# Warmup Iteration  27: 710132.126 ops/s
# Warmup Iteration  28: 736914.337 ops/s
# Warmup Iteration  29: 763938.462 ops/s
# Warmup Iteration  30: 717203.063 ops/s
Iteration   1: 766887.038 ops/s
Iteration   2: 757569.228 ops/s
Iteration   3: 711995.490 ops/s
Iteration   4: 768617.190 ops/s
Iteration   5: 758098.370 ops/s
Iteration   6: 718384.772 ops/s
Iteration   7: 760520.196 ops/s
Iteration   8: 762660.715 ops/s
Iteration   9: 702895.717 ops/s
Iteration  10: 767461.647 ops/s
Iteration  11: 724978.393 ops/s
Iteration  12: 754387.050 ops/s
Iteration  13: 714150.560 ops/s
Iteration  14: 711869.175 ops/s
Iteration  15: 762362.706 ops/s
Iteration  16: 724772.363 ops/s
Iteration  17: 724692.435 ops/s
Iteration  18: 775055.133 ops/s
Iteration  19: 712103.977 ops/s
Iteration  20: 757274.998 ops/s
Iteration  21: 735078.558 ops/s
Iteration  22: 724623.157 ops/s
Iteration  23: 741973.028 ops/s
Iteration  24: 729940.698 ops/s
Iteration  25: 767877.381 ops/s
Iteration  26: 720807.535 ops/s
Iteration  27: 753668.143 ops/s
Iteration  28: 727281.871 ops/s
Iteration  29: 762697.289 ops/s
Iteration  30: 756536.833 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorComplete":
  741907.388 ±(99.9%) 14783.200 ops/s [Average]
  (min, avg, max) = (702895.717, 741907.388, 775055.133), stdev = 22126.799
  CI (99.9%): [727124.188, 756690.588] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score       Error  Units
CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorComplete  thrpt   30  741907.388 ± 14783.200  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOnTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOnTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 273796.848 ops/s
# Warmup Iteration   2: 1114826.083 ops/s
# Warmup Iteration   3: 1337784.617 ops/s
# Warmup Iteration   4: 1427029.029 ops/s
# Warmup Iteration   5: 1394554.554 ops/s
# Warmup Iteration   6: 1416430.199 ops/s
# Warmup Iteration   7: 1396307.197 ops/s
# Warmup Iteration   8: 1379778.355 ops/s
# Warmup Iteration   9: 1464517.392 ops/s
# Warmup Iteration  10: 1361086.667 ops/s
# Warmup Iteration  11: 1402507.768 ops/s
# Warmup Iteration  12: 1438575.533 ops/s
# Warmup Iteration  13: 1455452.340 ops/s
# Warmup Iteration  14: 1463125.061 ops/s
# Warmup Iteration  15: 1421365.223 ops/s
# Warmup Iteration  16: 1442364.877 ops/s
# Warmup Iteration  17: 1411734.850 ops/s
# Warmup Iteration  18: 1471150.417 ops/s
# Warmup Iteration  19: 1486374.293 ops/s
# Warmup Iteration  20: 1480598.799 ops/s
# Warmup Iteration  21: 1456669.935 ops/s
# Warmup Iteration  22: 1462388.481 ops/s
# Warmup Iteration  23: 1505303.670 ops/s
# Warmup Iteration  24: 1544347.890 ops/s
# Warmup Iteration  25: 1483658.974 ops/s
# Warmup Iteration  26: 1511864.723 ops/s
# Warmup Iteration  27: 1515804.219 ops/s
# Warmup Iteration  28: 1515815.898 ops/s
# Warmup Iteration  29: 1509102.547 ops/s
# Warmup Iteration  30: 1498994.952 ops/s
Iteration   1: 1538302.236 ops/s
Iteration   2: 1497944.591 ops/s
Iteration   3: 1476563.026 ops/s
Iteration   4: 1510344.664 ops/s
Iteration   5: 1488818.781 ops/s
Iteration   6: 1528948.258 ops/s
Iteration   7: 1487100.975 ops/s
Iteration   8: 1582268.038 ops/s
Iteration   9: 1452653.220 ops/s
Iteration  10: 1230429.743 ops/s
Iteration  11: 1528231.481 ops/s
Iteration  12: 1446643.836 ops/s
Iteration  13: 1528726.113 ops/s
Iteration  14: 1451913.296 ops/s
Iteration  15: 1454547.568 ops/s
Iteration  16: 1558262.313 ops/s
Iteration  17: 1526497.879 ops/s
Iteration  18: 1465483.376 ops/s
Iteration  19: 1541344.831 ops/s
Iteration  20: 1517770.499 ops/s
Iteration  21: 1468558.477 ops/s
Iteration  22: 1527000.922 ops/s
Iteration  23: 1459857.595 ops/s
Iteration  24: 1560289.639 ops/s
Iteration  25: 1488699.386 ops/s
Iteration  26: 1483005.582 ops/s
Iteration  27: 1562531.932 ops/s
Iteration  28: 1418848.776 ops/s
Iteration  29: 1523843.271 ops/s
Iteration  30: 1542326.248 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableSubscribeOnTest._Benchmark.benchmark_normal":
  1494925.218 ±(99.9%) 43077.516 ops/s [Average]
  (min, avg, max) = (1230429.743, 1494925.218, 1582268.038), stdev = 64476.402
  CI (99.9%): [1451847.703, 1538002.734] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
CompletableSubscribeOnTest._Benchmark.benchmark_normal  thrpt   30  1494925.218 ± 43077.516  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 341220.817 ops/s
# Warmup Iteration   2: 594176.579 ops/s
# Warmup Iteration   3: 695330.617 ops/s
# Warmup Iteration   4: 713044.033 ops/s
# Warmup Iteration   5: 741679.634 ops/s
# Warmup Iteration   6: 734640.986 ops/s
# Warmup Iteration   7: 688420.551 ops/s
# Warmup Iteration   8: 697106.195 ops/s
# Warmup Iteration   9: 696324.562 ops/s
# Warmup Iteration  10: 689073.211 ops/s
# Warmup Iteration  11: 714643.956 ops/s
# Warmup Iteration  12: 734837.012 ops/s
# Warmup Iteration  13: 723682.741 ops/s
# Warmup Iteration  14: 714734.645 ops/s
# Warmup Iteration  15: 700055.326 ops/s
# Warmup Iteration  16: 707190.949 ops/s
# Warmup Iteration  17: 786566.878 ops/s
# Warmup Iteration  18: 790711.407 ops/s
# Warmup Iteration  19: 744280.239 ops/s
# Warmup Iteration  20: 805111.819 ops/s
# Warmup Iteration  21: 761266.854 ops/s
# Warmup Iteration  22: 766403.051 ops/s
# Warmup Iteration  23: 767478.844 ops/s
# Warmup Iteration  24: 756752.032 ops/s
# Warmup Iteration  25: 813910.570 ops/s
# Warmup Iteration  26: 754787.293 ops/s
# Warmup Iteration  27: 761523.529 ops/s
# Warmup Iteration  28: 751358.165 ops/s
# Warmup Iteration  29: 779737.734 ops/s
# Warmup Iteration  30: 774243.118 ops/s
Iteration   1: 745187.062 ops/s
Iteration   2: 765649.944 ops/s
Iteration   3: 767582.306 ops/s
Iteration   4: 758171.016 ops/s
Iteration   5: 793027.697 ops/s
Iteration   6: 750075.969 ops/s
Iteration   7: 798605.350 ops/s
Iteration   8: 759461.605 ops/s
Iteration   9: 778214.043 ops/s
Iteration  10: 778667.998 ops/s
Iteration  11: 761236.698 ops/s
Iteration  12: 803411.119 ops/s
Iteration  13: 791126.230 ops/s
Iteration  14: 746826.933 ops/s
Iteration  15: 765631.554 ops/s
Iteration  16: 756685.788 ops/s
Iteration  17: 816800.421 ops/s
Iteration  18: 741060.319 ops/s
Iteration  19: 758472.487 ops/s
Iteration  20: 801983.715 ops/s
Iteration  21: 769642.452 ops/s
Iteration  22: 768427.478 ops/s
Iteration  23: 768254.984 ops/s
Iteration  24: 779084.418 ops/s
Iteration  25: 787711.021 ops/s
Iteration  26: 765107.431 ops/s
Iteration  27: 784254.688 ops/s
Iteration  28: 766087.121 ops/s
Iteration  29: 745544.045 ops/s
Iteration  30: 811549.225 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_error":
  772784.704 ±(99.9%) 13631.412 ops/s [Average]
  (min, avg, max) = (741060.319, 772784.704, 816800.421), stdev = 20402.857
  CI (99.9%): [759153.292, 786416.116] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
CompletableHideTest._Benchmark.benchmark_error  thrpt   30  772784.704 ± 13631.412  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 171413.583 ops/s
# Warmup Iteration   2: 314795.632 ops/s
# Warmup Iteration   3: 367666.895 ops/s
# Warmup Iteration   4: 357354.151 ops/s
# Warmup Iteration   5: 367869.104 ops/s
# Warmup Iteration   6: 354940.438 ops/s
# Warmup Iteration   7: 355417.878 ops/s
# Warmup Iteration   8: 368950.513 ops/s
# Warmup Iteration   9: 360305.276 ops/s
# Warmup Iteration  10: 353131.961 ops/s
# Warmup Iteration  11: 363415.576 ops/s
# Warmup Iteration  12: 354546.677 ops/s
# Warmup Iteration  13: 352935.072 ops/s
# Warmup Iteration  14: 372628.784 ops/s
# Warmup Iteration  15: 350736.546 ops/s
# Warmup Iteration  16: 351645.805 ops/s
# Warmup Iteration  17: 383294.260 ops/s
# Warmup Iteration  18: 375370.657 ops/s
# Warmup Iteration  19: 377298.179 ops/s
# Warmup Iteration  20: 402004.764 ops/s
# Warmup Iteration  21: 372093.640 ops/s
# Warmup Iteration  22: 390439.518 ops/s
# Warmup Iteration  23: 376817.610 ops/s
# Warmup Iteration  24: 376258.040 ops/s
# Warmup Iteration  25: 392688.838 ops/s
# Warmup Iteration  26: 380230.944 ops/s
# Warmup Iteration  27: 387901.580 ops/s
# Warmup Iteration  28: 382413.933 ops/s
# Warmup Iteration  29: 387639.992 ops/s
# Warmup Iteration  30: 389079.661 ops/s
Iteration   1: 381939.677 ops/s
Iteration   2: 374349.428 ops/s
Iteration   3: 369327.230 ops/s
Iteration   4: 333217.790 ops/s
Iteration   5: 338959.836 ops/s
Iteration   6: 384254.291 ops/s
Iteration   7: 378652.031 ops/s
Iteration   8: 383235.720 ops/s
Iteration   9: 375710.658 ops/s
Iteration  10: 381916.497 ops/s
Iteration  11: 373300.349 ops/s
Iteration  12: 379322.800 ops/s
Iteration  13: 394516.616 ops/s
Iteration  14: 376873.671 ops/s
Iteration  15: 367910.134 ops/s
Iteration  16: 392417.669 ops/s
Iteration  17: 379405.089 ops/s
Iteration  18: 397233.926 ops/s
Iteration  19: 380443.047 ops/s
Iteration  20: 389415.418 ops/s
Iteration  21: 371165.239 ops/s
Iteration  22: 376453.773 ops/s
Iteration  23: 384470.464 ops/s
Iteration  24: 373900.242 ops/s
Iteration  25: 394387.569 ops/s
Iteration  26: 366189.928 ops/s
Iteration  27: 388851.768 ops/s
Iteration  28: 376481.139 ops/s
Iteration  29: 387556.313 ops/s
Iteration  30: 389013.515 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorError":
  378029.061 ±(99.9%) 9354.756 ops/s [Average]
  (min, avg, max) = (333217.790, 378029.061, 397233.926), stdev = 14001.760
  CI (99.9%): [368674.304, 387383.817] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorError  thrpt   30  378029.061 ± 9354.756  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorNever$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorNever

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 165224.623 ops/s
# Warmup Iteration   2: 588332.101 ops/s
# Warmup Iteration   3: 694757.440 ops/s
# Warmup Iteration   4: 677921.573 ops/s
# Warmup Iteration   5: 699655.889 ops/s
# Warmup Iteration   6: 714104.360 ops/s
# Warmup Iteration   7: 696074.816 ops/s
# Warmup Iteration   8: 705733.114 ops/s
# Warmup Iteration   9: 649227.823 ops/s
# Warmup Iteration  10: 711429.051 ops/s
# Warmup Iteration  11: 706492.495 ops/s
# Warmup Iteration  12: 697931.318 ops/s
# Warmup Iteration  13: 721457.620 ops/s
# Warmup Iteration  14: 686757.858 ops/s
# Warmup Iteration  15: 705827.176 ops/s
# Warmup Iteration  16: 742392.012 ops/s
# Warmup Iteration  17: 721712.181 ops/s
# Warmup Iteration  18: 718887.726 ops/s
# Warmup Iteration  19: 755338.432 ops/s
# Warmup Iteration  20: 743184.735 ops/s
# Warmup Iteration  21: 756031.177 ops/s
# Warmup Iteration  22: 744514.828 ops/s
# Warmup Iteration  23: 737603.312 ops/s
# Warmup Iteration  24: 757086.990 ops/s
# Warmup Iteration  25: 768842.235 ops/s
# Warmup Iteration  26: 718734.117 ops/s
# Warmup Iteration  27: 756823.939 ops/s
# Warmup Iteration  28: 735499.267 ops/s
# Warmup Iteration  29: 755662.392 ops/s
# Warmup Iteration  30: 741954.417 ops/s
Iteration   1: 721656.534 ops/s
Iteration   2: 768423.887 ops/s
Iteration   3: 773336.375 ops/s
Iteration   4: 735337.995 ops/s
Iteration   5: 738260.294 ops/s
Iteration   6: 735526.472 ops/s
Iteration   7: 766297.363 ops/s
Iteration   8: 742389.954 ops/s
Iteration   9: 744699.807 ops/s
Iteration  10: 763347.011 ops/s
Iteration  11: 693349.897 ops/s
Iteration  12: 773298.734 ops/s
Iteration  13: 734787.462 ops/s
Iteration  14: 749693.382 ops/s
Iteration  15: 725004.971 ops/s
Iteration  16: 728681.410 ops/s
Iteration  17: 763311.297 ops/s
Iteration  18: 740910.933 ops/s
Iteration  19: 754098.945 ops/s
Iteration  20: 774503.610 ops/s
Iteration  21: 735970.697 ops/s
Iteration  22: 756147.263 ops/s
Iteration  23: 703972.422 ops/s
Iteration  24: 769024.036 ops/s
Iteration  25: 740818.314 ops/s
Iteration  26: 744708.343 ops/s
Iteration  27: 767958.643 ops/s
Iteration  28: 728552.338 ops/s
Iteration  29: 738357.058 ops/s
Iteration  30: 768186.658 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorNever":
  746020.403 ±(99.9%) 13770.891 ops/s [Average]
  (min, avg, max) = (693349.897, 746020.403, 774503.610), stdev = 20611.623
  CI (99.9%): [732249.512, 759791.295] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCompletableErrorNever  thrpt   30  746020.403 ± 13770.891  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnFunctionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnFunctionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38946.379 ops/s
# Warmup Iteration   2: 121162.909 ops/s
# Warmup Iteration   3: 202902.585 ops/s
# Warmup Iteration   4: 187228.725 ops/s
# Warmup Iteration   5: 187982.559 ops/s
# Warmup Iteration   6: 197382.471 ops/s
# Warmup Iteration   7: 182241.415 ops/s
# Warmup Iteration   8: 190108.425 ops/s
# Warmup Iteration   9: 203262.754 ops/s
# Warmup Iteration  10: 192416.673 ops/s
# Warmup Iteration  11: 187953.440 ops/s
# Warmup Iteration  12: 206284.136 ops/s
# Warmup Iteration  13: 185445.986 ops/s
# Warmup Iteration  14: 197973.689 ops/s
# Warmup Iteration  15: 203556.384 ops/s
# Warmup Iteration  16: 194003.435 ops/s
# Warmup Iteration  17: 208585.517 ops/s
# Warmup Iteration  18: 207117.793 ops/s
# Warmup Iteration  19: 204901.527 ops/s
# Warmup Iteration  20: 202460.107 ops/s
# Warmup Iteration  21: 206667.177 ops/s
# Warmup Iteration  22: 206941.742 ops/s
# Warmup Iteration  23: 192931.848 ops/s
# Warmup Iteration  24: 209594.708 ops/s
# Warmup Iteration  25: 202552.639 ops/s
# Warmup Iteration  26: 204238.511 ops/s
# Warmup Iteration  27: 213721.132 ops/s
# Warmup Iteration  28: 198037.307 ops/s
# Warmup Iteration  29: 183171.751 ops/s
# Warmup Iteration  30: 193938.442 ops/s
Iteration   1: 202053.389 ops/s
Iteration   2: 211519.040 ops/s
Iteration   3: 200924.337 ops/s
Iteration   4: 207037.596 ops/s
Iteration   5: 204015.667 ops/s
Iteration   6: 202701.835 ops/s
Iteration   7: 205727.297 ops/s
Iteration   8: 203761.575 ops/s
Iteration   9: 209019.063 ops/s
Iteration  10: 203441.931 ops/s
Iteration  11: 213044.905 ops/s
Iteration  12: 200316.162 ops/s
Iteration  13: 206087.271 ops/s
Iteration  14: 208604.690 ops/s
Iteration  15: 206146.704 ops/s
Iteration  16: 203850.175 ops/s
Iteration  17: 207913.219 ops/s
Iteration  18: 202885.599 ops/s
Iteration  19: 212984.472 ops/s
Iteration  20: 204058.740 ops/s
Iteration  21: 208549.190 ops/s
Iteration  22: 212897.944 ops/s
Iteration  23: 201665.411 ops/s
Iteration  24: 207422.431 ops/s
Iteration  25: 206324.480 ops/s
Iteration  26: 213780.877 ops/s
Iteration  27: 204723.435 ops/s
Iteration  28: 200360.120 ops/s
Iteration  29: 211609.215 ops/s
Iteration  30: 200086.804 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnFunctionThrows":
  206117.119 ±(99.9%) 2781.700 ops/s [Average]
  (min, avg, max) = (200086.804, 206117.119, 213780.877), stdev = 4163.517
  CI (99.9%): [203335.420, 208898.819] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnFunctionThrows  thrpt   30  206117.119 ± 2781.700  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateStateFunctionInitialStateNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateStateFunctionInitialStateNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 467349.899 ops/s
# Warmup Iteration   2: 648840.357 ops/s
# Warmup Iteration   3: 693459.990 ops/s
# Warmup Iteration   4: 658154.180 ops/s
# Warmup Iteration   5: 770478.125 ops/s
# Warmup Iteration   6: 720651.852 ops/s
# Warmup Iteration   7: 768656.941 ops/s
# Warmup Iteration   8: 707732.204 ops/s
# Warmup Iteration   9: 764305.203 ops/s
# Warmup Iteration  10: 748608.638 ops/s
# Warmup Iteration  11: 722138.088 ops/s
# Warmup Iteration  12: 769618.196 ops/s
# Warmup Iteration  13: 710781.008 ops/s
# Warmup Iteration  14: 714950.381 ops/s
# Warmup Iteration  15: 767313.433 ops/s
# Warmup Iteration  16: 727449.550 ops/s
# Warmup Iteration  17: 803083.330 ops/s
# Warmup Iteration  18: 764316.788 ops/s
# Warmup Iteration  19: 831699.118 ops/s
# Warmup Iteration  20: 785326.191 ops/s
# Warmup Iteration  21: 777666.982 ops/s
# Warmup Iteration  22: 806494.929 ops/s
# Warmup Iteration  23: 777748.617 ops/s
# Warmup Iteration  24: 778297.452 ops/s
# Warmup Iteration  25: 804555.968 ops/s
# Warmup Iteration  26: 767024.795 ops/s
# Warmup Iteration  27: 789671.429 ops/s
# Warmup Iteration  28: 812351.430 ops/s
# Warmup Iteration  29: 761593.396 ops/s
# Warmup Iteration  30: 806569.509 ops/s
Iteration   1: 760698.827 ops/s
Iteration   2: 791097.547 ops/s
Iteration   3: 824742.234 ops/s
Iteration   4: 769306.342 ops/s
Iteration   5: 790724.352 ops/s
Iteration   6: 793269.099 ops/s
Iteration   7: 798812.843 ops/s
Iteration   8: 801781.628 ops/s
Iteration   9: 770198.992 ops/s
Iteration  10: 792542.782 ops/s
Iteration  11: 771628.988 ops/s
Iteration  12: 793198.091 ops/s
Iteration  13: 756514.315 ops/s
Iteration  14: 808799.164 ops/s
Iteration  15: 794876.505 ops/s
Iteration  16: 753312.939 ops/s
Iteration  17: 795842.591 ops/s
Iteration  18: 813181.998 ops/s
Iteration  19: 757460.861 ops/s
Iteration  20: 805732.059 ops/s
Iteration  21: 772662.066 ops/s
Iteration  22: 783352.969 ops/s
Iteration  23: 801953.111 ops/s
Iteration  24: 751095.085 ops/s
Iteration  25: 811708.304 ops/s
Iteration  26: 789021.572 ops/s
Iteration  27: 776012.857 ops/s
Iteration  28: 769093.033 ops/s
Iteration  29: 788223.625 ops/s
Iteration  30: 793419.420 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_generateStateFunctionInitialStateNull":
  786008.807 ±(99.9%) 12913.768 ops/s [Average]
  (min, avg, max) = (751095.085, 786008.807, 824742.234), stdev = 19328.722
  CI (99.9%): [773095.039, 798922.575] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_generateStateFunctionInitialStateNull  thrpt   30  786008.807 ± 12913.768  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_noArgError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_noArgError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100006.505 ops/s
# Warmup Iteration   2: 219199.407 ops/s
# Warmup Iteration   3: 262817.499 ops/s
# Warmup Iteration   4: 255118.360 ops/s
# Warmup Iteration   5: 246949.373 ops/s
# Warmup Iteration   6: 256210.505 ops/s
# Warmup Iteration   7: 252444.808 ops/s
# Warmup Iteration   8: 243260.355 ops/s
# Warmup Iteration   9: 268599.509 ops/s
# Warmup Iteration  10: 250134.735 ops/s
# Warmup Iteration  11: 256333.620 ops/s
# Warmup Iteration  12: 262724.985 ops/s
# Warmup Iteration  13: 255369.771 ops/s
# Warmup Iteration  14: 263883.100 ops/s
# Warmup Iteration  15: 251909.915 ops/s
# Warmup Iteration  16: 251591.168 ops/s
# Warmup Iteration  17: 276412.043 ops/s
# Warmup Iteration  18: 265251.807 ops/s
# Warmup Iteration  19: 275778.672 ops/s
# Warmup Iteration  20: 270021.398 ops/s
# Warmup Iteration  21: 271257.180 ops/s
# Warmup Iteration  22: 264449.424 ops/s
# Warmup Iteration  23: 267099.326 ops/s
# Warmup Iteration  24: 212216.643 ops/s
# Warmup Iteration  25: 280196.068 ops/s
# Warmup Iteration  26: 267902.393 ops/s
# Warmup Iteration  27: 253833.032 ops/s
# Warmup Iteration  28: 283585.575 ops/s
# Warmup Iteration  29: 257007.774 ops/s
# Warmup Iteration  30: 278423.547 ops/s
Iteration   1: 268697.084 ops/s
Iteration   2: 276273.341 ops/s
Iteration   3: 264604.620 ops/s
Iteration   4: 271007.041 ops/s
Iteration   5: 267899.104 ops/s
Iteration   6: 274632.000 ops/s
Iteration   7: 265023.914 ops/s
Iteration   8: 275889.736 ops/s
Iteration   9: 271337.911 ops/s
Iteration  10: 279991.421 ops/s
Iteration  11: 264824.208 ops/s
Iteration  12: 280578.056 ops/s
Iteration  13: 266033.018 ops/s
Iteration  14: 266301.812 ops/s
Iteration  15: 275684.416 ops/s
Iteration  16: 267062.463 ops/s
Iteration  17: 274746.531 ops/s
Iteration  18: 279998.540 ops/s
Iteration  19: 264485.968 ops/s
Iteration  20: 282031.865 ops/s
Iteration  21: 261064.599 ops/s
Iteration  22: 280251.463 ops/s
Iteration  23: 266531.432 ops/s
Iteration  24: 275410.856 ops/s
Iteration  25: 277655.505 ops/s
Iteration  26: 265907.731 ops/s
Iteration  27: 269411.347 ops/s
Iteration  28: 265896.306 ops/s
Iteration  29: 282253.388 ops/s
Iteration  30: 271278.895 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_noArgError":
  271758.819 ±(99.9%) 4193.678 ops/s [Average]
  (min, avg, max) = (261064.599, 271758.819, 282253.388), stdev = 6276.901
  CI (99.9%): [267565.141, 275952.497] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
CompletableBlockingSubscribeTest._Benchmark.benchmark_noArgError  thrpt   30  271758.819 ± 4193.678  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 64328.819 ops/s
# Warmup Iteration   2: 359333.643 ops/s
# Warmup Iteration   3: 491957.290 ops/s
# Warmup Iteration   4: 532032.347 ops/s
# Warmup Iteration   5: 572144.438 ops/s
# Warmup Iteration   6: 567328.759 ops/s
# Warmup Iteration   7: 540426.168 ops/s
# Warmup Iteration   8: 560839.187 ops/s
# Warmup Iteration   9: 548858.846 ops/s
# Warmup Iteration  10: 567481.624 ops/s
# Warmup Iteration  11: 514920.517 ops/s
# Warmup Iteration  12: 502960.742 ops/s
# Warmup Iteration  13: 572786.529 ops/s
# Warmup Iteration  14: 542320.838 ops/s
# Warmup Iteration  15: 553365.674 ops/s
# Warmup Iteration  16: 572476.625 ops/s
# Warmup Iteration  17: 581847.509 ops/s
# Warmup Iteration  18: 597737.807 ops/s
# Warmup Iteration  19: 575210.547 ops/s
# Warmup Iteration  20: 591044.206 ops/s
# Warmup Iteration  21: 569645.406 ops/s
# Warmup Iteration  22: 600106.070 ops/s
# Warmup Iteration  23: 589945.185 ops/s
# Warmup Iteration  24: 571988.212 ops/s
# Warmup Iteration  25: 598360.662 ops/s
# Warmup Iteration  26: 580977.206 ops/s
# Warmup Iteration  27: 587509.206 ops/s
# Warmup Iteration  28: 594593.316 ops/s
# Warmup Iteration  29: 572074.832 ops/s
# Warmup Iteration  30: 589255.026 ops/s
Iteration   1: 569513.225 ops/s
Iteration   2: 595796.392 ops/s
Iteration   3: 575835.688 ops/s
Iteration   4: 591083.281 ops/s
Iteration   5: 579598.488 ops/s
Iteration   6: 568677.174 ops/s
Iteration   7: 606683.762 ops/s
Iteration   8: 573999.313 ops/s
Iteration   9: 602572.530 ops/s
Iteration  10: 565571.720 ops/s
Iteration  11: 578918.733 ops/s
Iteration  12: 581861.200 ops/s
Iteration  13: 568965.165 ops/s
Iteration  14: 585628.780 ops/s
Iteration  15: 603913.321 ops/s
Iteration  16: 565860.251 ops/s
Iteration  17: 593961.368 ops/s
Iteration  18: 578246.429 ops/s
Iteration  19: 591140.823 ops/s
Iteration  20: 582709.236 ops/s
Iteration  21: 589242.639 ops/s
Iteration  22: 608712.202 ops/s
Iteration  23: 569353.274 ops/s
Iteration  24: 593805.629 ops/s
Iteration  25: 580166.782 ops/s
Iteration  26: 593236.078 ops/s
Iteration  27: 607514.572 ops/s
Iteration  28: 583728.294 ops/s
Iteration  29: 582876.395 ops/s
Iteration  30: 608895.879 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCacheTest._Benchmark.benchmark_error":
  585935.621 ±(99.9%) 9031.526 ops/s [Average]
  (min, avg, max) = (565571.720, 585935.621, 608895.879), stdev = 13517.963
  CI (99.9%): [576904.095, 594967.146] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
CompletableCacheTest._Benchmark.benchmark_error  thrpt   30  585935.621 ± 9031.526  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_tryScalarXMap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_tryScalarXMap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 327195.702 ops/s
# Warmup Iteration   2: 547974.006 ops/s
# Warmup Iteration   3: 644158.672 ops/s
# Warmup Iteration   4: 632775.029 ops/s
# Warmup Iteration   5: 689593.788 ops/s
# Warmup Iteration   6: 683677.848 ops/s
# Warmup Iteration   7: 658607.051 ops/s
# Warmup Iteration   8: 663819.070 ops/s
# Warmup Iteration   9: 675875.519 ops/s
# Warmup Iteration  10: 649480.078 ops/s
# Warmup Iteration  11: 686340.889 ops/s
# Warmup Iteration  12: 662397.664 ops/s
# Warmup Iteration  13: 663059.151 ops/s
# Warmup Iteration  14: 670909.461 ops/s
# Warmup Iteration  15: 650471.343 ops/s
# Warmup Iteration  16: 667868.872 ops/s
# Warmup Iteration  17: 687690.980 ops/s
# Warmup Iteration  18: 615655.896 ops/s
# Warmup Iteration  19: 607559.435 ops/s
# Warmup Iteration  20: 687140.523 ops/s
# Warmup Iteration  21: 715137.652 ops/s
# Warmup Iteration  22: 684095.400 ops/s
# Warmup Iteration  23: 701268.125 ops/s
# Warmup Iteration  24: 725200.566 ops/s
# Warmup Iteration  25: 712854.452 ops/s
# Warmup Iteration  26: 690795.626 ops/s
# Warmup Iteration  27: 699845.136 ops/s
# Warmup Iteration  28: 717711.645 ops/s
# Warmup Iteration  29: 695302.762 ops/s
# Warmup Iteration  30: 710511.742 ops/s
Iteration   1: 727199.466 ops/s
Iteration   2: 713129.780 ops/s
Iteration   3: 668528.642 ops/s
Iteration   4: 717511.694 ops/s
Iteration   5: 679684.603 ops/s
Iteration   6: 703308.510 ops/s
Iteration   7: 710687.211 ops/s
Iteration   8: 678254.738 ops/s
Iteration   9: 729916.012 ops/s
Iteration  10: 682634.419 ops/s
Iteration  11: 706404.930 ops/s
Iteration  12: 700752.777 ops/s
Iteration  13: 685608.328 ops/s
Iteration  14: 726958.652 ops/s
Iteration  15: 648760.453 ops/s
Iteration  16: 699132.914 ops/s
Iteration  17: 716723.827 ops/s
Iteration  18: 695887.576 ops/s
Iteration  19: 723270.532 ops/s
Iteration  20: 691342.803 ops/s
Iteration  21: 725826.344 ops/s
Iteration  22: 705399.770 ops/s
Iteration  23: 701051.857 ops/s
Iteration  24: 720675.563 ops/s
Iteration  25: 674461.021 ops/s
Iteration  26: 716975.878 ops/s
Iteration  27: 689486.268 ops/s
Iteration  28: 727138.755 ops/s
Iteration  29: 710497.944 ops/s
Iteration  30: 687728.380 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScalarXMapTest._Benchmark.benchmark_tryScalarXMap":
  702164.655 ±(99.9%) 13570.174 ops/s [Average]
  (min, avg, max) = (648760.453, 702164.655, 729916.012), stdev = 20311.199
  CI (99.9%): [688594.481, 715734.829] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
ObservableScalarXMapTest._Benchmark.benchmark_tryScalarXMap  thrpt   30  702164.655 ± 13570.174  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactState$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactState

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.894 ops/s
# Warmup Iteration   2: 96240.874 ops/s
# Warmup Iteration   3: 148072.131 ops/s
# Warmup Iteration   4: 242816.341 ops/s
# Warmup Iteration   5: 385504.659 ops/s
# Warmup Iteration   6: 621866.844 ops/s
# Warmup Iteration   7: 813189.609 ops/s
# Warmup Iteration   8: 866898.991 ops/s
# Warmup Iteration   9: 934418.420 ops/s
# Warmup Iteration  10: 951633.226 ops/s
# Warmup Iteration  11: 964835.623 ops/s
# Warmup Iteration  12: 940623.115 ops/s
# Warmup Iteration  13: 954752.830 ops/s
# Warmup Iteration  14: 1007741.000 ops/s
# Warmup Iteration  15: 935151.648 ops/s
# Warmup Iteration  16: 977670.082 ops/s
# Warmup Iteration  17: 952609.216 ops/s
# Warmup Iteration  18: 933554.500 ops/s
# Warmup Iteration  19: 957146.616 ops/s
# Warmup Iteration  20: 976227.178 ops/s
# Warmup Iteration  21: 968607.860 ops/s
# Warmup Iteration  22: 928669.370 ops/s
# Warmup Iteration  23: 970014.376 ops/s
# Warmup Iteration  24: 953558.700 ops/s
# Warmup Iteration  25: 941866.833 ops/s
# Warmup Iteration  26: 932440.193 ops/s
# Warmup Iteration  27: 973905.296 ops/s
# Warmup Iteration  28: 968592.024 ops/s
# Warmup Iteration  29: 970110.448 ops/s
# Warmup Iteration  30: 923122.256 ops/s
Iteration   1: 981343.633 ops/s
Iteration   2: 960756.675 ops/s
Iteration   3: 935134.586 ops/s
Iteration   4: 986784.327 ops/s
Iteration   5: 929038.653 ops/s
Iteration   6: 983605.949 ops/s
Iteration   7: 948521.183 ops/s
Iteration   8: 943364.154 ops/s
Iteration   9: 946320.767 ops/s
Iteration  10: 953528.469 ops/s
Iteration  11: 984024.117 ops/s
Iteration  12: 951082.402 ops/s
Iteration  13: 993420.839 ops/s
Iteration  14: 937456.675 ops/s
Iteration  15: 945304.379 ops/s
Iteration  16: 985633.247 ops/s
Iteration  17: 952131.391 ops/s
Iteration  18: 954793.496 ops/s
Iteration  19: 992824.501 ops/s
Iteration  20: 913721.846 ops/s
Iteration  21: 961518.022 ops/s
Iteration  22: 946215.950 ops/s
Iteration  23: 948140.808 ops/s
Iteration  24: 972993.379 ops/s
Iteration  25: 960514.544 ops/s
Iteration  26: 987656.575 ops/s
Iteration  27: 981928.814 ops/s
Iteration  28: 949490.086 ops/s
Iteration  29: 977155.830 ops/s
Iteration  30: 928331.029 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactState":
  959757.878 ±(99.9%) 14448.121 ops/s [Average]
  (min, avg, max) = (913721.846, 959757.878, 993420.839), stdev = 21625.269
  CI (99.9%): [945309.757, 974205.999] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferExactState  thrpt   30  959757.878 ± 14448.121  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherErrorLate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherErrorLate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 47811.411 ops/s
# Warmup Iteration   2: 195888.086 ops/s
# Warmup Iteration   3: 236021.593 ops/s
# Warmup Iteration   4: 207278.577 ops/s
# Warmup Iteration   5: 252336.338 ops/s
# Warmup Iteration   6: 241603.137 ops/s
# Warmup Iteration   7: 249330.742 ops/s
# Warmup Iteration   8: 258798.550 ops/s
# Warmup Iteration   9: 244712.939 ops/s
# Warmup Iteration  10: 249605.644 ops/s
# Warmup Iteration  11: 250557.424 ops/s
# Warmup Iteration  12: 248540.856 ops/s
# Warmup Iteration  13: 164661.602 ops/s
# Warmup Iteration  14: 251908.275 ops/s
# Warmup Iteration  15: 238492.381 ops/s
# Warmup Iteration  16: 253663.639 ops/s
# Warmup Iteration  17: 259479.738 ops/s
# Warmup Iteration  18: 257507.320 ops/s
# Warmup Iteration  19: 254652.320 ops/s
# Warmup Iteration  20: 265797.878 ops/s
# Warmup Iteration  21: 263399.432 ops/s
# Warmup Iteration  22: 251212.995 ops/s
# Warmup Iteration  23: 264461.335 ops/s
# Warmup Iteration  24: 248631.151 ops/s
# Warmup Iteration  25: 259542.610 ops/s
# Warmup Iteration  26: 265993.830 ops/s
# Warmup Iteration  27: 267135.063 ops/s
# Warmup Iteration  28: 247441.665 ops/s
# Warmup Iteration  29: 253839.111 ops/s
# Warmup Iteration  30: 265678.449 ops/s
Iteration   1: 246964.017 ops/s
Iteration   2: 261834.803 ops/s
Iteration   3: 252954.179 ops/s
Iteration   4: 262721.016 ops/s
Iteration   5: 267754.831 ops/s
Iteration   6: 252778.185 ops/s
Iteration   7: 263040.137 ops/s
Iteration   8: 249088.139 ops/s
Iteration   9: 266745.125 ops/s
Iteration  10: 253959.847 ops/s
Iteration  11: 263690.670 ops/s
Iteration  12: 246795.866 ops/s
Iteration  13: 264868.867 ops/s
Iteration  14: 252128.609 ops/s
Iteration  15: 253186.373 ops/s
Iteration  16: 263940.316 ops/s
Iteration  17: 256169.826 ops/s
Iteration  18: 250138.080 ops/s
Iteration  19: 264441.021 ops/s
Iteration  20: 242947.389 ops/s
Iteration  21: 263814.101 ops/s
Iteration  22: 255606.066 ops/s
Iteration  23: 246652.214 ops/s
Iteration  24: 260481.423 ops/s
Iteration  25: 248417.144 ops/s
Iteration  26: 261822.832 ops/s
Iteration  27: 251328.699 ops/s
Iteration  28: 251118.411 ops/s
Iteration  29: 262683.151 ops/s
Iteration  30: 247824.097 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTakeUntilTest._Benchmark.benchmark_otherErrorLate":
  256196.514 ±(99.9%) 4862.714 ops/s [Average]
  (min, avg, max) = (242947.389, 256196.514, 267754.831), stdev = 7278.281
  CI (99.9%): [251333.801, 261059.228] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
CompletableTakeUntilTest._Benchmark.benchmark_otherErrorLate  thrpt   30  256196.514 ± 4862.714  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_disposeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_disposeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 278839.721 ops/s
# Warmup Iteration   2: 1287239.520 ops/s
# Warmup Iteration   3: 2006681.000 ops/s
# Warmup Iteration   4: 2091734.012 ops/s
# Warmup Iteration   5: 2093966.454 ops/s
# Warmup Iteration   6: 2070997.639 ops/s
# Warmup Iteration   7: 1819387.782 ops/s
# Warmup Iteration   8: 2041279.234 ops/s
# Warmup Iteration   9: 2165496.223 ops/s
# Warmup Iteration  10: 2178101.995 ops/s
# Warmup Iteration  11: 2002115.405 ops/s
# Warmup Iteration  12: 2205134.508 ops/s
# Warmup Iteration  13: 2046805.124 ops/s
# Warmup Iteration  14: 2101308.517 ops/s
# Warmup Iteration  15: 2059009.744 ops/s
# Warmup Iteration  16: 2107983.956 ops/s
# Warmup Iteration  17: 2084066.693 ops/s
# Warmup Iteration  18: 2080723.911 ops/s
# Warmup Iteration  19: 2193785.059 ops/s
# Warmup Iteration  20: 2034499.814 ops/s
# Warmup Iteration  21: 2177194.943 ops/s
# Warmup Iteration  22: 2079510.566 ops/s
# Warmup Iteration  23: 2146563.912 ops/s
# Warmup Iteration  24: 2072091.193 ops/s
# Warmup Iteration  25: 2082859.445 ops/s
# Warmup Iteration  26: 2091922.867 ops/s
# Warmup Iteration  27: 2139657.916 ops/s
# Warmup Iteration  28: 2116447.632 ops/s
# Warmup Iteration  29: 2173162.831 ops/s
# Warmup Iteration  30: 2016631.475 ops/s
Iteration   1: 2123257.128 ops/s
Iteration   2: 2186142.313 ops/s
Iteration   3: 2055050.130 ops/s
Iteration   4: 2180628.585 ops/s
Iteration   5: 2059975.916 ops/s
Iteration   6: 2098576.160 ops/s
Iteration   7: 2062496.423 ops/s
Iteration   8: 2097079.202 ops/s
Iteration   9: 2140712.587 ops/s
Iteration  10: 2054917.373 ops/s
Iteration  11: 2142014.634 ops/s
Iteration  12: 2190457.323 ops/s
Iteration  13: 2097140.161 ops/s
Iteration  14: 2104066.006 ops/s
Iteration  15: 2059892.008 ops/s
Iteration  16: 2107703.951 ops/s
Iteration  17: 2184099.474 ops/s
Iteration  18: 2062794.452 ops/s
Iteration  19: 2177195.426 ops/s
Iteration  20: 2068129.523 ops/s
Iteration  21: 2150681.491 ops/s
Iteration  22: 2041688.926 ops/s
Iteration  23: 2050515.490 ops/s
Iteration  24: 2115939.090 ops/s
Iteration  25: 2174756.543 ops/s
Iteration  26: 2171526.451 ops/s
Iteration  27: 2064475.353 ops/s
Iteration  28: 2149186.651 ops/s
Iteration  29: 2083022.714 ops/s
Iteration  30: 2129541.254 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_disposeMain":
  2112788.758 ±(99.9%) 32725.053 ops/s [Average]
  (min, avg, max) = (2041688.926, 2112788.758, 2190457.323), stdev = 48981.323
  CI (99.9%): [2080063.705, 2145513.811] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
CompletableDelaySubscriptionTest._Benchmark.benchmark_disposeMain  thrpt   30  2112788.758 ± 32725.053  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_ambIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_ambIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 235739.295 ops/s
# Warmup Iteration   2: 517636.512 ops/s
# Warmup Iteration   3: 670504.247 ops/s
# Warmup Iteration   4: 619555.528 ops/s
# Warmup Iteration   5: 646493.134 ops/s
# Warmup Iteration   6: 625167.423 ops/s
# Warmup Iteration   7: 602240.420 ops/s
# Warmup Iteration   8: 544467.880 ops/s
# Warmup Iteration   9: 565645.798 ops/s
# Warmup Iteration  10: 666325.262 ops/s
# Warmup Iteration  11: 641501.714 ops/s
# Warmup Iteration  12: 658710.924 ops/s
# Warmup Iteration  13: 623380.473 ops/s
# Warmup Iteration  14: 655418.498 ops/s
# Warmup Iteration  15: 657479.971 ops/s
# Warmup Iteration  16: 631053.540 ops/s
# Warmup Iteration  17: 695216.969 ops/s
# Warmup Iteration  18: 682759.935 ops/s
# Warmup Iteration  19: 664050.768 ops/s
# Warmup Iteration  20: 706233.055 ops/s
# Warmup Iteration  21: 644445.051 ops/s
# Warmup Iteration  22: 696326.902 ops/s
# Warmup Iteration  23: 699560.310 ops/s
# Warmup Iteration  24: 648457.990 ops/s
# Warmup Iteration  25: 692497.985 ops/s
# Warmup Iteration  26: 702321.211 ops/s
# Warmup Iteration  27: 649694.124 ops/s
# Warmup Iteration  28: 680250.572 ops/s
# Warmup Iteration  29: 686039.661 ops/s
# Warmup Iteration  30: 662702.701 ops/s
Iteration   1: 681547.055 ops/s
Iteration   2: 677085.875 ops/s
Iteration   3: 705355.370 ops/s
Iteration   4: 666890.897 ops/s
Iteration   5: 695523.250 ops/s
Iteration   6: 676552.889 ops/s
Iteration   7: 668045.185 ops/s
Iteration   8: 708551.323 ops/s
Iteration   9: 669352.530 ops/s
Iteration  10: 699035.079 ops/s
Iteration  11: 674768.793 ops/s
Iteration  12: 683753.157 ops/s
Iteration  13: 701945.166 ops/s
Iteration  14: 698605.141 ops/s
Iteration  15: 671237.894 ops/s
Iteration  16: 698780.821 ops/s
Iteration  17: 697483.125 ops/s
Iteration  18: 670062.075 ops/s
Iteration  19: 687726.839 ops/s
Iteration  20: 649773.825 ops/s
Iteration  21: 670429.982 ops/s
Iteration  22: 666488.812 ops/s
Iteration  23: 681618.632 ops/s
Iteration  24: 698825.238 ops/s
Iteration  25: 672716.360 ops/s
Iteration  26: 696529.132 ops/s
Iteration  27: 686660.915 ops/s
Iteration  28: 699267.022 ops/s
Iteration  29: 672461.668 ops/s
Iteration  30: 693386.595 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_ambIterableOneIsNull":
  684015.355 ±(99.9%) 9858.362 ops/s [Average]
  (min, avg, max) = (649773.825, 684015.355, 708551.323), stdev = 14755.534
  CI (99.9%): [674156.992, 693873.717] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_ambIterableOneIsNull  thrpt   30  684015.355 ± 9858.362  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_supplierDisposerCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_supplierDisposerCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32564.376 ops/s
# Warmup Iteration   2: 122349.229 ops/s
# Warmup Iteration   3: 175184.305 ops/s
# Warmup Iteration   4: 180642.904 ops/s
# Warmup Iteration   5: 187886.011 ops/s
# Warmup Iteration   6: 170339.831 ops/s
# Warmup Iteration   7: 186816.428 ops/s
# Warmup Iteration   8: 190964.700 ops/s
# Warmup Iteration   9: 186475.375 ops/s
# Warmup Iteration  10: 175644.140 ops/s
# Warmup Iteration  11: 187867.714 ops/s
# Warmup Iteration  12: 194098.169 ops/s
# Warmup Iteration  13: 185881.169 ops/s
# Warmup Iteration  14: 193961.967 ops/s
# Warmup Iteration  15: 188551.852 ops/s
# Warmup Iteration  16: 189610.228 ops/s
# Warmup Iteration  17: 203703.063 ops/s
# Warmup Iteration  18: 202795.687 ops/s
# Warmup Iteration  19: 195100.261 ops/s
# Warmup Iteration  20: 205293.555 ops/s
# Warmup Iteration  21: 193821.144 ops/s
# Warmup Iteration  22: 200933.446 ops/s
# Warmup Iteration  23: 199891.641 ops/s
# Warmup Iteration  24: 195488.108 ops/s
# Warmup Iteration  25: 206788.299 ops/s
# Warmup Iteration  26: 197178.030 ops/s
# Warmup Iteration  27: 194050.389 ops/s
# Warmup Iteration  28: 204251.662 ops/s
# Warmup Iteration  29: 197829.179 ops/s
# Warmup Iteration  30: 199448.575 ops/s
Iteration   1: 201789.983 ops/s
Iteration   2: 193092.948 ops/s
Iteration   3: 205313.631 ops/s
Iteration   4: 197670.576 ops/s
Iteration   5: 195956.416 ops/s
Iteration   6: 199243.440 ops/s
Iteration   7: 191960.064 ops/s
Iteration   8: 196342.764 ops/s
Iteration   9: 207609.305 ops/s
Iteration  10: 190946.738 ops/s
Iteration  11: 204539.087 ops/s
Iteration  12: 200799.446 ops/s
Iteration  13: 194252.542 ops/s
Iteration  14: 198673.804 ops/s
Iteration  15: 197238.456 ops/s
Iteration  16: 194570.560 ops/s
Iteration  17: 205222.338 ops/s
Iteration  18: 193118.827 ops/s
Iteration  19: 205953.167 ops/s
Iteration  20: 191496.442 ops/s
Iteration  21: 199421.979 ops/s
Iteration  22: 205308.115 ops/s
Iteration  23: 192017.552 ops/s
Iteration  24: 206206.973 ops/s
Iteration  25: 189349.664 ops/s
Iteration  26: 200296.636 ops/s
Iteration  27: 194634.808 ops/s
Iteration  28: 201146.993 ops/s
Iteration  29: 195158.153 ops/s
Iteration  30: 192607.553 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_supplierDisposerCrash":
  198064.632 ±(99.9%) 3585.008 ops/s [Average]
  (min, avg, max) = (189349.664, 198064.632, 207609.305), stdev = 5365.872
  CI (99.9%): [194479.624, 201649.640] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableUsingTest._Benchmark.benchmark_supplierDisposerCrash  thrpt   30  198064.632 ± 3585.008  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 97550.756 ops/s
# Warmup Iteration   2: 454965.074 ops/s
# Warmup Iteration   3: 294643.061 ops/s
# Warmup Iteration   4: 469695.583 ops/s
# Warmup Iteration   5: 474189.581 ops/s
# Warmup Iteration   6: 484988.879 ops/s
# Warmup Iteration   7: 459060.389 ops/s
# Warmup Iteration   8: 509301.842 ops/s
# Warmup Iteration   9: 490972.898 ops/s
# Warmup Iteration  10: 520385.680 ops/s
# Warmup Iteration  11: 486356.408 ops/s
# Warmup Iteration  12: 513721.883 ops/s
# Warmup Iteration  13: 512649.165 ops/s
# Warmup Iteration  14: 516682.650 ops/s
# Warmup Iteration  15: 501532.116 ops/s
# Warmup Iteration  16: 498773.462 ops/s
# Warmup Iteration  17: 517288.164 ops/s
# Warmup Iteration  18: 529191.612 ops/s
# Warmup Iteration  19: 521074.201 ops/s
# Warmup Iteration  20: 539962.898 ops/s
# Warmup Iteration  21: 503769.672 ops/s
# Warmup Iteration  22: 543180.314 ops/s
# Warmup Iteration  23: 532068.987 ops/s
# Warmup Iteration  24: 511858.321 ops/s
# Warmup Iteration  25: 535780.341 ops/s
# Warmup Iteration  26: 510010.358 ops/s
# Warmup Iteration  27: 529403.216 ops/s
# Warmup Iteration  28: 534635.013 ops/s
# Warmup Iteration  29: 506818.635 ops/s
# Warmup Iteration  30: 532175.781 ops/s
Iteration   1: 522492.664 ops/s
Iteration   2: 517326.821 ops/s
Iteration   3: 512598.428 ops/s
Iteration   4: 507808.801 ops/s
Iteration   5: 534925.204 ops/s
Iteration   6: 502262.359 ops/s
Iteration   7: 528232.217 ops/s
Iteration   8: 509705.362 ops/s
Iteration   9: 535243.210 ops/s
Iteration  10: 512540.032 ops/s
Iteration  11: 527773.198 ops/s
Iteration  12: 541867.377 ops/s
Iteration  13: 500583.743 ops/s
Iteration  14: 518718.162 ops/s
Iteration  15: 515087.890 ops/s
Iteration  16: 534133.789 ops/s
Iteration  17: 535854.124 ops/s
Iteration  18: 493056.806 ops/s
Iteration  19: 522398.694 ops/s
Iteration  20: 522284.322 ops/s
Iteration  21: 531568.062 ops/s
Iteration  22: 504837.048 ops/s
Iteration  23: 543080.215 ops/s
Iteration  24: 519826.629 ops/s
Iteration  25: 528194.235 ops/s
Iteration  26: 509210.605 ops/s
Iteration  27: 538809.155 ops/s
Iteration  28: 526989.070 ops/s
Iteration  29: 532921.391 ops/s
Iteration  30: 520746.035 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_doubleOnSubscribe":
  521702.522 ±(99.9%) 8692.122 ops/s [Average]
  (min, avg, max) = (493056.806, 521702.522, 543080.215), stdev = 13009.960
  CI (99.9%): [513010.400, 530394.643] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableGroupByTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  521702.522 ± 8692.122  ops/s
----------------------------------------
