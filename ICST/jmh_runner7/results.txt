=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableResourceWrapperTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableResourceWrapperTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4963319.632 ops/s
# Warmup Iteration   2: 6989732.471 ops/s
# Warmup Iteration   3: 8004100.244 ops/s
# Warmup Iteration   4: 8006301.496 ops/s
# Warmup Iteration   5: 7959244.560 ops/s
# Warmup Iteration   6: 7969292.839 ops/s
# Warmup Iteration   7: 7954122.460 ops/s
# Warmup Iteration   8: 7959191.169 ops/s
# Warmup Iteration   9: 7948573.315 ops/s
# Warmup Iteration  10: 7968144.852 ops/s
# Warmup Iteration  11: 7956189.485 ops/s
# Warmup Iteration  12: 7960946.830 ops/s
# Warmup Iteration  13: 7961290.557 ops/s
# Warmup Iteration  14: 7982712.232 ops/s
# Warmup Iteration  15: 7963165.581 ops/s
# Warmup Iteration  16: 7919295.304 ops/s
# Warmup Iteration  17: 7976233.395 ops/s
# Warmup Iteration  18: 7952104.612 ops/s
# Warmup Iteration  19: 7960749.227 ops/s
# Warmup Iteration  20: 7934062.256 ops/s
# Warmup Iteration  21: 7957261.407 ops/s
# Warmup Iteration  22: 7915729.081 ops/s
# Warmup Iteration  23: 7916330.557 ops/s
# Warmup Iteration  24: 7963968.779 ops/s
# Warmup Iteration  25: 8005017.281 ops/s
# Warmup Iteration  26: 7960067.389 ops/s
# Warmup Iteration  27: 7941855.090 ops/s
# Warmup Iteration  28: 7942193.558 ops/s
# Warmup Iteration  29: 7960863.409 ops/s
# Warmup Iteration  30: 7965926.812 ops/s
Iteration   1: 7976623.982 ops/s
Iteration   2: 7969898.457 ops/s
Iteration   3: 7989095.263 ops/s
Iteration   4: 7962915.542 ops/s
Iteration   5: 7962947.308 ops/s
Iteration   6: 7979747.841 ops/s
Iteration   7: 7991513.086 ops/s
Iteration   8: 7947194.155 ops/s
Iteration   9: 7967893.669 ops/s
Iteration  10: 7957236.421 ops/s
Iteration  11: 8011104.766 ops/s
Iteration  12: 7950810.902 ops/s
Iteration  13: 7990397.109 ops/s
Iteration  14: 7973250.040 ops/s
Iteration  15: 7982310.406 ops/s
Iteration  16: 7945429.959 ops/s
Iteration  17: 7986899.356 ops/s
Iteration  18: 7951825.981 ops/s
Iteration  19: 8003280.681 ops/s
Iteration  20: 7997674.194 ops/s
Iteration  21: 7965143.192 ops/s
Iteration  22: 7965744.730 ops/s
Iteration  23: 7980542.690 ops/s
Iteration  24: 7948417.564 ops/s
Iteration  25: 7947758.010 ops/s
Iteration  26: 7970669.161 ops/s
Iteration  27: 7983568.261 ops/s
Iteration  28: 7978901.508 ops/s
Iteration  29: 7961447.711 ops/s
Iteration  30: 7959323.611 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableResourceWrapperTest._Benchmark.benchmark_disposed":
  7971985.519 ±(99.9%) 11723.190 ops/s [Average]
  (min, avg, max) = (7945429.959, 7971985.519, 8011104.766), stdev = 17546.720
  CI (99.9%): [7960262.329, 7983708.708] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservableResourceWrapperTest._Benchmark.benchmark_disposed  thrpt   30  7971985.519 ± 11723.190  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_rebatchRequestsArgumentCheck$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_rebatchRequestsArgumentCheck

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 750034.521 ops/s
# Warmup Iteration   2: 931561.128 ops/s
# Warmup Iteration   3: 911237.231 ops/s
# Warmup Iteration   4: 981862.550 ops/s
# Warmup Iteration   5: 982583.937 ops/s
# Warmup Iteration   6: 985102.425 ops/s
# Warmup Iteration   7: 984714.988 ops/s
# Warmup Iteration   8: 981202.544 ops/s
# Warmup Iteration   9: 983779.018 ops/s
# Warmup Iteration  10: 983567.566 ops/s
# Warmup Iteration  11: 983407.718 ops/s
# Warmup Iteration  12: 984077.553 ops/s
# Warmup Iteration  13: 978704.007 ops/s
# Warmup Iteration  14: 979140.232 ops/s
# Warmup Iteration  15: 974997.886 ops/s
# Warmup Iteration  16: 975470.260 ops/s
# Warmup Iteration  17: 1026666.466 ops/s
# Warmup Iteration  18: 1030546.815 ops/s
# Warmup Iteration  19: 1029848.310 ops/s
# Warmup Iteration  20: 1033551.851 ops/s
# Warmup Iteration  21: 1036591.725 ops/s
# Warmup Iteration  22: 1037607.148 ops/s
# Warmup Iteration  23: 1027221.783 ops/s
# Warmup Iteration  24: 1033499.414 ops/s
# Warmup Iteration  25: 1032830.979 ops/s
# Warmup Iteration  26: 1030226.407 ops/s
# Warmup Iteration  27: 1026832.235 ops/s
# Warmup Iteration  28: 1034169.779 ops/s
# Warmup Iteration  29: 1035542.542 ops/s
# Warmup Iteration  30: 1032031.286 ops/s
Iteration   1: 1029401.840 ops/s
Iteration   2: 1035832.983 ops/s
Iteration   3: 1038599.621 ops/s
Iteration   4: 1037213.521 ops/s
Iteration   5: 1034752.842 ops/s
Iteration   6: 1025829.551 ops/s
Iteration   7: 1035601.957 ops/s
Iteration   8: 1027279.008 ops/s
Iteration   9: 1030953.724 ops/s
Iteration  10: 1035116.162 ops/s
Iteration  11: 1025148.221 ops/s
Iteration  12: 1031870.319 ops/s
Iteration  13: 1033813.218 ops/s
Iteration  14: 1038513.816 ops/s
Iteration  15: 1037682.963 ops/s
Iteration  16: 1031748.409 ops/s
Iteration  17: 1026643.464 ops/s
Iteration  18: 1033928.617 ops/s
Iteration  19: 1029787.242 ops/s
Iteration  20: 1032382.354 ops/s
Iteration  21: 1035253.126 ops/s
Iteration  22: 1033636.139 ops/s
Iteration  23: 1032608.664 ops/s
Iteration  24: 1028606.985 ops/s
Iteration  25: 1029143.678 ops/s
Iteration  26: 1029998.482 ops/s
Iteration  27: 1036435.285 ops/s
Iteration  28: 1031743.302 ops/s
Iteration  29: 1027792.573 ops/s
Iteration  30: 1030700.869 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_rebatchRequestsArgumentCheck":
  1032267.298 ±(99.9%) 2544.656 ops/s [Average]
  (min, avg, max) = (1025148.221, 1032267.298, 1038599.621), stdev = 3808.722
  CI (99.9%): [1029722.641, 1034811.954] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_rebatchRequestsArgumentCheck  thrpt   30  1032267.298 ± 2544.656  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorNonEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorNonEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6853050.838 ops/s
# Warmup Iteration   2: 10320738.400 ops/s
# Warmup Iteration   3: 10431078.182 ops/s
# Warmup Iteration   4: 10501898.373 ops/s
# Warmup Iteration   5: 10428604.058 ops/s
# Warmup Iteration   6: 10418734.260 ops/s
# Warmup Iteration   7: 10482115.578 ops/s
# Warmup Iteration   8: 10452722.557 ops/s
# Warmup Iteration   9: 10500437.499 ops/s
# Warmup Iteration  10: 10490935.796 ops/s
# Warmup Iteration  11: 10350070.146 ops/s
# Warmup Iteration  12: 10533732.316 ops/s
# Warmup Iteration  13: 10462615.208 ops/s
# Warmup Iteration  14: 10510960.432 ops/s
# Warmup Iteration  15: 10504443.914 ops/s
# Warmup Iteration  16: 10444374.241 ops/s
# Warmup Iteration  17: 10354177.216 ops/s
# Warmup Iteration  18: 10417754.272 ops/s
# Warmup Iteration  19: 10345968.972 ops/s
# Warmup Iteration  20: 10479427.385 ops/s
# Warmup Iteration  21: 10408790.519 ops/s
# Warmup Iteration  22: 10338969.429 ops/s
# Warmup Iteration  23: 10424464.698 ops/s
# Warmup Iteration  24: 10475739.993 ops/s
# Warmup Iteration  25: 10450329.144 ops/s
# Warmup Iteration  26: 10443011.377 ops/s
# Warmup Iteration  27: 10415520.264 ops/s
# Warmup Iteration  28: 10446592.750 ops/s
# Warmup Iteration  29: 10355938.752 ops/s
# Warmup Iteration  30: 10351749.305 ops/s
Iteration   1: 10437827.713 ops/s
Iteration   2: 10327947.555 ops/s
Iteration   3: 10421275.107 ops/s
Iteration   4: 10381014.622 ops/s
Iteration   5: 10366334.835 ops/s
Iteration   6: 10470163.627 ops/s
Iteration   7: 10425918.739 ops/s
Iteration   8: 10292880.670 ops/s
Iteration   9: 10373601.319 ops/s
Iteration  10: 10340046.214 ops/s
Iteration  11: 10436881.232 ops/s
Iteration  12: 10429205.159 ops/s
Iteration  13: 10434455.074 ops/s
Iteration  14: 10414030.870 ops/s
Iteration  15: 10409328.087 ops/s
Iteration  16: 10386901.434 ops/s
Iteration  17: 10362160.085 ops/s
Iteration  18: 10412981.977 ops/s
Iteration  19: 10422005.645 ops/s
Iteration  20: 10440061.040 ops/s
Iteration  21: 10396353.326 ops/s
Iteration  22: 10393030.074 ops/s
Iteration  23: 10391206.046 ops/s
Iteration  24: 10393323.057 ops/s
Iteration  25: 10393853.994 ops/s
Iteration  26: 10374568.771 ops/s
Iteration  27: 10439649.308 ops/s
Iteration  28: 10446702.480 ops/s
Iteration  29: 10393555.126 ops/s
Iteration  30: 10475070.875 ops/s


Result "io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorNonEmpty":
  10402744.469 ±(99.9%) 27052.963 ops/s [Average]
  (min, avg, max) = (10292880.670, 10402744.469, 10475070.875), stdev = 40491.604
  CI (99.9%): [10375691.506, 10429797.432] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt         Score       Error  Units
QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorNonEmpty  thrpt   30  10402744.469 ± 27052.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_complete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_complete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7024697.920 ops/s
# Warmup Iteration   2: 9415531.506 ops/s
# Warmup Iteration   3: 10249725.077 ops/s
# Warmup Iteration   4: 10243974.886 ops/s
# Warmup Iteration   5: 10237663.187 ops/s
# Warmup Iteration   6: 10248599.311 ops/s
# Warmup Iteration   7: 10226762.952 ops/s
# Warmup Iteration   8: 10301196.724 ops/s
# Warmup Iteration   9: 10194368.429 ops/s
# Warmup Iteration  10: 10252279.688 ops/s
# Warmup Iteration  11: 10191375.855 ops/s
# Warmup Iteration  12: 10224079.605 ops/s
# Warmup Iteration  13: 10241549.156 ops/s
# Warmup Iteration  14: 10291422.404 ops/s
# Warmup Iteration  15: 10150800.230 ops/s
# Warmup Iteration  16: 10288604.550 ops/s
# Warmup Iteration  17: 10249096.947 ops/s
# Warmup Iteration  18: 10160475.302 ops/s
# Warmup Iteration  19: 10195210.742 ops/s
# Warmup Iteration  20: 10190044.415 ops/s
# Warmup Iteration  21: 10186643.651 ops/s
# Warmup Iteration  22: 10280750.180 ops/s
# Warmup Iteration  23: 10211659.178 ops/s
# Warmup Iteration  24: 10222712.065 ops/s
# Warmup Iteration  25: 10167524.754 ops/s
# Warmup Iteration  26: 10205757.976 ops/s
# Warmup Iteration  27: 10181498.801 ops/s
# Warmup Iteration  28: 10212188.756 ops/s
# Warmup Iteration  29: 10160768.358 ops/s
# Warmup Iteration  30: 10199601.414 ops/s
Iteration   1: 10186528.961 ops/s
Iteration   2: 10204864.595 ops/s
Iteration   3: 10209146.429 ops/s
Iteration   4: 10218325.691 ops/s
Iteration   5: 10186879.644 ops/s
Iteration   6: 10204485.815 ops/s
Iteration   7: 10156771.788 ops/s
Iteration   8: 10188480.804 ops/s
Iteration   9: 10174096.088 ops/s
Iteration  10: 10239057.897 ops/s
Iteration  11: 10179509.407 ops/s
Iteration  12: 10207281.169 ops/s
Iteration  13: 10255847.439 ops/s
Iteration  14: 10162034.976 ops/s
Iteration  15: 10217950.000 ops/s
Iteration  16: 10230378.203 ops/s
Iteration  17: 10213955.090 ops/s
Iteration  18: 10170015.353 ops/s
Iteration  19: 10187628.467 ops/s
Iteration  20: 10207692.993 ops/s
Iteration  21: 10214599.701 ops/s
Iteration  22: 10201339.060 ops/s
Iteration  23: 10192539.805 ops/s
Iteration  24: 10183834.065 ops/s
Iteration  25: 10205661.362 ops/s
Iteration  26: 10247743.228 ops/s
Iteration  27: 10203480.030 ops/s
Iteration  28: 10149173.472 ops/s
Iteration  29: 10199798.987 ops/s
Iteration  30: 10161823.576 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_complete":
  10198697.470 ±(99.9%) 17300.116 ops/s [Average]
  (min, avg, max) = (10149173.472, 10198697.470, 10255847.439), stdev = 25894.001
  CI (99.9%): [10181397.354, 10215997.586] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score       Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_complete  thrpt   30  10198697.470 ± 17300.116  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableResourceWrapperTest._Benchmark.benchmark_onErrorDisposes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableResourceWrapperTest._Benchmark.benchmark_onErrorDisposes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 741820.304 ops/s
# Warmup Iteration   2: 820928.390 ops/s
# Warmup Iteration   3: 904984.002 ops/s
# Warmup Iteration   4: 835057.048 ops/s
# Warmup Iteration   5: 922978.280 ops/s
# Warmup Iteration   6: 926042.268 ops/s
# Warmup Iteration   7: 925421.980 ops/s
# Warmup Iteration   8: 924219.581 ops/s
# Warmup Iteration   9: 925355.453 ops/s
# Warmup Iteration  10: 925094.736 ops/s
# Warmup Iteration  11: 925841.314 ops/s
# Warmup Iteration  12: 925073.835 ops/s
# Warmup Iteration  13: 923425.779 ops/s
# Warmup Iteration  14: 920063.753 ops/s
# Warmup Iteration  15: 919787.663 ops/s
# Warmup Iteration  16: 920649.502 ops/s
# Warmup Iteration  17: 971344.449 ops/s
# Warmup Iteration  18: 961861.757 ops/s
# Warmup Iteration  19: 970819.152 ops/s
# Warmup Iteration  20: 973859.723 ops/s
# Warmup Iteration  21: 964059.144 ops/s
# Warmup Iteration  22: 963676.850 ops/s
# Warmup Iteration  23: 965469.923 ops/s
# Warmup Iteration  24: 972140.296 ops/s
# Warmup Iteration  25: 970791.376 ops/s
# Warmup Iteration  26: 965196.324 ops/s
# Warmup Iteration  27: 968139.114 ops/s
# Warmup Iteration  28: 965786.688 ops/s
# Warmup Iteration  29: 968013.408 ops/s
# Warmup Iteration  30: 967968.934 ops/s
Iteration   1: 969259.812 ops/s
Iteration   2: 970141.167 ops/s
Iteration   3: 966002.981 ops/s
Iteration   4: 978241.081 ops/s
Iteration   5: 970529.876 ops/s
Iteration   6: 971700.149 ops/s
Iteration   7: 966912.654 ops/s
Iteration   8: 973781.607 ops/s
Iteration   9: 967657.701 ops/s
Iteration  10: 966769.279 ops/s
Iteration  11: 969662.518 ops/s
Iteration  12: 965539.546 ops/s
Iteration  13: 965133.896 ops/s
Iteration  14: 960007.315 ops/s
Iteration  15: 967716.011 ops/s
Iteration  16: 963706.052 ops/s
Iteration  17: 968367.211 ops/s
Iteration  18: 964718.226 ops/s
Iteration  19: 973383.422 ops/s
Iteration  20: 967881.751 ops/s
Iteration  21: 966474.064 ops/s
Iteration  22: 969871.171 ops/s
Iteration  23: 965635.767 ops/s
Iteration  24: 969570.802 ops/s
Iteration  25: 965646.057 ops/s
Iteration  26: 971366.184 ops/s
Iteration  27: 965206.694 ops/s
Iteration  28: 969193.629 ops/s
Iteration  29: 968788.537 ops/s
Iteration  30: 967476.311 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableResourceWrapperTest._Benchmark.benchmark_onErrorDisposes":
  968211.382 ±(99.9%) 2321.874 ops/s [Average]
  (min, avg, max) = (960007.315, 968211.382, 978241.081), stdev = 3475.273
  CI (99.9%): [965889.508, 970533.257] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableResourceWrapperTest._Benchmark.benchmark_onErrorDisposes  thrpt   30  968211.382 ± 2321.874  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_delayedUpstreamOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_delayedUpstreamOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7314667.193 ops/s
# Warmup Iteration   2: 9572976.870 ops/s
# Warmup Iteration   3: 10711201.189 ops/s
# Warmup Iteration   4: 10806139.038 ops/s
# Warmup Iteration   5: 10809909.365 ops/s
# Warmup Iteration   6: 10758252.334 ops/s
# Warmup Iteration   7: 10789306.302 ops/s
# Warmup Iteration   8: 10768522.414 ops/s
# Warmup Iteration   9: 10765178.642 ops/s
# Warmup Iteration  10: 10754298.176 ops/s
# Warmup Iteration  11: 10759811.210 ops/s
# Warmup Iteration  12: 10765954.422 ops/s
# Warmup Iteration  13: 10754702.731 ops/s
# Warmup Iteration  14: 10780985.949 ops/s
# Warmup Iteration  15: 10766481.571 ops/s
# Warmup Iteration  16: 10735394.008 ops/s
# Warmup Iteration  17: 10769130.088 ops/s
# Warmup Iteration  18: 10778813.910 ops/s
# Warmup Iteration  19: 10792962.399 ops/s
# Warmup Iteration  20: 10813118.701 ops/s
# Warmup Iteration  21: 10753156.766 ops/s
# Warmup Iteration  22: 10748140.126 ops/s
# Warmup Iteration  23: 10795394.166 ops/s
# Warmup Iteration  24: 10783720.168 ops/s
# Warmup Iteration  25: 10751137.346 ops/s
# Warmup Iteration  26: 10787183.080 ops/s
# Warmup Iteration  27: 10803935.533 ops/s
# Warmup Iteration  28: 10798937.379 ops/s
# Warmup Iteration  29: 10781403.972 ops/s
# Warmup Iteration  30: 10793376.963 ops/s
Iteration   1: 10774047.308 ops/s
Iteration   2: 10768300.435 ops/s
Iteration   3: 10796268.642 ops/s
Iteration   4: 10768833.204 ops/s
Iteration   5: 10730316.438 ops/s
Iteration   6: 10776171.613 ops/s
Iteration   7: 10731125.522 ops/s
Iteration   8: 10744446.825 ops/s
Iteration   9: 10818582.685 ops/s
Iteration  10: 10770663.953 ops/s
Iteration  11: 10785533.691 ops/s
Iteration  12: 10775427.201 ops/s
Iteration  13: 10773564.748 ops/s
Iteration  14: 10770806.052 ops/s
Iteration  15: 10790431.482 ops/s
Iteration  16: 10739597.981 ops/s
Iteration  17: 10783769.905 ops/s
Iteration  18: 10796458.029 ops/s
Iteration  19: 10759731.875 ops/s
Iteration  20: 10797194.641 ops/s
Iteration  21: 10788370.134 ops/s
Iteration  22: 10766378.074 ops/s
Iteration  23: 10761588.787 ops/s
Iteration  24: 10794311.431 ops/s
Iteration  25: 10743312.518 ops/s
Iteration  26: 10789261.363 ops/s
Iteration  27: 10805077.277 ops/s
Iteration  28: 10772849.135 ops/s
Iteration  29: 10779078.088 ops/s
Iteration  30: 10758905.487 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_delayedUpstreamOnSubscribe":
  10773680.151 ±(99.9%) 14330.625 ops/s [Average]
  (min, avg, max) = (10730316.438, 10773680.151, 10818582.685), stdev = 21449.406
  CI (99.9%): [10759349.526, 10788010.776] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_delayedUpstreamOnSubscribe  thrpt   30  10773680.151 ± 14330.625  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_nonNotificationInstanceAfterDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_nonNotificationInstanceAfterDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6145774.915 ops/s
# Warmup Iteration   2: 8687244.323 ops/s
# Warmup Iteration   3: 9738139.099 ops/s
# Warmup Iteration   4: 9720779.255 ops/s
# Warmup Iteration   5: 9772875.461 ops/s
# Warmup Iteration   6: 9741135.093 ops/s
# Warmup Iteration   7: 9734984.133 ops/s
# Warmup Iteration   8: 9694036.617 ops/s
# Warmup Iteration   9: 9725181.023 ops/s
# Warmup Iteration  10: 9583045.105 ops/s
# Warmup Iteration  11: 9764818.002 ops/s
# Warmup Iteration  12: 9731229.567 ops/s
# Warmup Iteration  13: 9711465.308 ops/s
# Warmup Iteration  14: 9731596.186 ops/s
# Warmup Iteration  15: 9767711.946 ops/s
# Warmup Iteration  16: 9681375.113 ops/s
# Warmup Iteration  17: 9737438.800 ops/s
# Warmup Iteration  18: 9724405.083 ops/s
# Warmup Iteration  19: 9765335.429 ops/s
# Warmup Iteration  20: 9741883.397 ops/s
# Warmup Iteration  21: 9767632.404 ops/s
# Warmup Iteration  22: 9781251.584 ops/s
# Warmup Iteration  23: 9757185.623 ops/s
# Warmup Iteration  24: 9774631.335 ops/s
# Warmup Iteration  25: 9758672.385 ops/s
# Warmup Iteration  26: 9747503.342 ops/s
# Warmup Iteration  27: 9797876.540 ops/s
# Warmup Iteration  28: 9739057.478 ops/s
# Warmup Iteration  29: 9769128.482 ops/s
# Warmup Iteration  30: 9793036.588 ops/s
Iteration   1: 9720684.100 ops/s
Iteration   2: 9746678.375 ops/s
Iteration   3: 9742032.929 ops/s
Iteration   4: 9727423.789 ops/s
Iteration   5: 9739742.229 ops/s
Iteration   6: 9766679.655 ops/s
Iteration   7: 9744309.318 ops/s
Iteration   8: 9723468.285 ops/s
Iteration   9: 9760656.882 ops/s
Iteration  10: 9687230.245 ops/s
Iteration  11: 9746912.200 ops/s
Iteration  12: 9739917.622 ops/s
Iteration  13: 9781384.115 ops/s
Iteration  14: 9777118.415 ops/s
Iteration  15: 9775562.698 ops/s
Iteration  16: 9723531.646 ops/s
Iteration  17: 9737440.777 ops/s
Iteration  18: 9761570.150 ops/s
Iteration  19: 9767324.467 ops/s
Iteration  20: 9695885.685 ops/s
Iteration  21: 9759376.487 ops/s
Iteration  22: 9710092.603 ops/s
Iteration  23: 9756723.301 ops/s
Iteration  24: 9782848.706 ops/s
Iteration  25: 9725808.621 ops/s
Iteration  26: 9718529.187 ops/s
Iteration  27: 9768483.886 ops/s
Iteration  28: 9719494.068 ops/s
Iteration  29: 9772567.385 ops/s
Iteration  30: 9720284.787 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDematerializeTest._Benchmark.benchmark_nonNotificationInstanceAfterDispose":
  9743325.420 ±(99.9%) 17115.232 ops/s [Average]
  (min, avg, max) = (9687230.245, 9743325.420, 9782848.706), stdev = 25617.275
  CI (99.9%): [9726210.189, 9760440.652] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
ObservableDematerializeTest._Benchmark.benchmark_nonNotificationInstanceAfterDispose  thrpt   30  9743325.420 ± 17115.232  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_nonfusedEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_nonfusedEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6788211.688 ops/s
# Warmup Iteration   2: 9304931.673 ops/s
# Warmup Iteration   3: 10072374.512 ops/s
# Warmup Iteration   4: 10050280.887 ops/s
# Warmup Iteration   5: 10069276.687 ops/s
# Warmup Iteration   6: 10047535.650 ops/s
# Warmup Iteration   7: 10129137.906 ops/s
# Warmup Iteration   8: 10125818.302 ops/s
# Warmup Iteration   9: 10128312.282 ops/s
# Warmup Iteration  10: 10126581.700 ops/s
# Warmup Iteration  11: 10109144.267 ops/s
# Warmup Iteration  12: 10096541.576 ops/s
# Warmup Iteration  13: 10128355.519 ops/s
# Warmup Iteration  14: 10088125.812 ops/s
# Warmup Iteration  15: 10066292.849 ops/s
# Warmup Iteration  16: 10101309.288 ops/s
# Warmup Iteration  17: 10132473.343 ops/s
# Warmup Iteration  18: 10108615.764 ops/s
# Warmup Iteration  19: 10157481.304 ops/s
# Warmup Iteration  20: 10131084.119 ops/s
# Warmup Iteration  21: 10090903.226 ops/s
# Warmup Iteration  22: 10115644.874 ops/s
# Warmup Iteration  23: 10162069.409 ops/s
# Warmup Iteration  24: 10138019.415 ops/s
# Warmup Iteration  25: 10184407.606 ops/s
# Warmup Iteration  26: 10114233.407 ops/s
# Warmup Iteration  27: 10172936.606 ops/s
# Warmup Iteration  28: 10119389.312 ops/s
# Warmup Iteration  29: 10135570.276 ops/s
# Warmup Iteration  30: 10155896.975 ops/s
Iteration   1: 10181007.833 ops/s
Iteration   2: 10158229.343 ops/s
Iteration   3: 10159014.180 ops/s
Iteration   4: 10148256.267 ops/s
Iteration   5: 10139261.180 ops/s
Iteration   6: 10170413.596 ops/s
Iteration   7: 10176794.162 ops/s
Iteration   8: 10085852.788 ops/s
Iteration   9: 10178208.036 ops/s
Iteration  10: 10112103.959 ops/s
Iteration  11: 10185662.317 ops/s
Iteration  12: 10137631.189 ops/s
Iteration  13: 10134449.622 ops/s
Iteration  14: 10127238.381 ops/s
Iteration  15: 10128677.388 ops/s
Iteration  16: 10164178.074 ops/s
Iteration  17: 10126804.080 ops/s
Iteration  18: 10161117.416 ops/s
Iteration  19: 10155856.383 ops/s
Iteration  20: 10105207.909 ops/s
Iteration  21: 10186506.236 ops/s
Iteration  22: 10185551.484 ops/s
Iteration  23: 10144072.604 ops/s
Iteration  24: 10088066.579 ops/s
Iteration  25: 10201578.921 ops/s
Iteration  26: 10173022.315 ops/s
Iteration  27: 10140558.074 ops/s
Iteration  28: 10142980.217 ops/s
Iteration  29: 10148677.379 ops/s
Iteration  30: 10177075.915 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_nonfusedEmpty":
  10150801.794 ±(99.9%) 19523.929 ops/s [Average]
  (min, avg, max) = (10085852.788, 10150801.794, 10201578.921), stdev = 29222.501
  CI (99.9%): [10131277.865, 10170325.724] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score       Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_nonfusedEmpty  thrpt   30  10150801.794 ± 19523.929  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6054994.928 ops/s
# Warmup Iteration   2: 9301384.289 ops/s
# Warmup Iteration   3: 9611879.305 ops/s
# Warmup Iteration   4: 9534692.979 ops/s
# Warmup Iteration   5: 9596513.646 ops/s
# Warmup Iteration   6: 9430410.655 ops/s
# Warmup Iteration   7: 9538756.330 ops/s
# Warmup Iteration   8: 9521110.990 ops/s
# Warmup Iteration   9: 9522941.851 ops/s
# Warmup Iteration  10: 9492768.541 ops/s
# Warmup Iteration  11: 9460988.331 ops/s
# Warmup Iteration  12: 9592686.041 ops/s
# Warmup Iteration  13: 9573588.501 ops/s
# Warmup Iteration  14: 9403008.253 ops/s
# Warmup Iteration  15: 9559259.373 ops/s
# Warmup Iteration  16: 9485277.659 ops/s
# Warmup Iteration  17: 9453944.863 ops/s
# Warmup Iteration  18: 9489224.336 ops/s
# Warmup Iteration  19: 9473203.758 ops/s
# Warmup Iteration  20: 9505033.841 ops/s
# Warmup Iteration  21: 9371130.370 ops/s
# Warmup Iteration  22: 9561849.941 ops/s
# Warmup Iteration  23: 9485224.828 ops/s
# Warmup Iteration  24: 9446658.354 ops/s
# Warmup Iteration  25: 9324476.820 ops/s
# Warmup Iteration  26: 9455308.341 ops/s
# Warmup Iteration  27: 9481838.992 ops/s
# Warmup Iteration  28: 9565054.213 ops/s
# Warmup Iteration  29: 9347659.519 ops/s
# Warmup Iteration  30: 9526732.881 ops/s
Iteration   1: 9418592.359 ops/s
Iteration   2: 9392204.610 ops/s
Iteration   3: 9472869.790 ops/s
Iteration   4: 9421779.638 ops/s
Iteration   5: 9521566.091 ops/s
Iteration   6: 9472544.656 ops/s
Iteration   7: 9529676.918 ops/s
Iteration   8: 9449463.851 ops/s
Iteration   9: 9480056.886 ops/s
Iteration  10: 9433845.039 ops/s
Iteration  11: 9425475.885 ops/s
Iteration  12: 9579914.012 ops/s
Iteration  13: 9427393.592 ops/s
Iteration  14: 9432981.133 ops/s
Iteration  15: 9386044.620 ops/s
Iteration  16: 9442214.211 ops/s
Iteration  17: 9414015.045 ops/s
Iteration  18: 9437536.065 ops/s
Iteration  19: 9364263.065 ops/s
Iteration  20: 9459006.808 ops/s
Iteration  21: 9449706.079 ops/s
Iteration  22: 9470552.846 ops/s
Iteration  23: 9661804.670 ops/s
Iteration  24: 9442833.130 ops/s
Iteration  25: 9472590.880 ops/s
Iteration  26: 9493909.484 ops/s
Iteration  27: 9434389.911 ops/s
Iteration  28: 9414010.694 ops/s
Iteration  29: 9491233.892 ops/s
Iteration  30: 9457006.681 ops/s


Result "io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmpty":
  9458316.085 ±(99.9%) 39053.848 ops/s [Average]
  (min, avg, max) = (9364263.065, 9458316.085, 9661804.670), stdev = 58453.965
  CI (99.9%): [9419262.237, 9497369.932] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmpty  thrpt   30  9458316.085 ± 39053.848  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 481777.965 ops/s
# Warmup Iteration   2: 624706.756 ops/s
# Warmup Iteration   3: 619552.831 ops/s
# Warmup Iteration   4: 670561.505 ops/s
# Warmup Iteration   5: 677537.838 ops/s
# Warmup Iteration   6: 678350.819 ops/s
# Warmup Iteration   7: 678832.856 ops/s
# Warmup Iteration   8: 680539.701 ops/s
# Warmup Iteration   9: 677050.103 ops/s
# Warmup Iteration  10: 675523.280 ops/s
# Warmup Iteration  11: 679462.546 ops/s
# Warmup Iteration  12: 677418.219 ops/s
# Warmup Iteration  13: 676767.250 ops/s
# Warmup Iteration  14: 672230.109 ops/s
# Warmup Iteration  15: 672069.153 ops/s
# Warmup Iteration  16: 674302.695 ops/s
# Warmup Iteration  17: 700456.197 ops/s
# Warmup Iteration  18: 700939.180 ops/s
# Warmup Iteration  19: 700534.738 ops/s
# Warmup Iteration  20: 702408.356 ops/s
# Warmup Iteration  21: 699674.885 ops/s
# Warmup Iteration  22: 699661.140 ops/s
# Warmup Iteration  23: 702505.036 ops/s
# Warmup Iteration  24: 697320.451 ops/s
# Warmup Iteration  25: 701232.963 ops/s
# Warmup Iteration  26: 690186.506 ops/s
# Warmup Iteration  27: 698432.088 ops/s
# Warmup Iteration  28: 703961.882 ops/s
# Warmup Iteration  29: 703946.739 ops/s
# Warmup Iteration  30: 701093.264 ops/s
Iteration   1: 695008.484 ops/s
Iteration   2: 701409.769 ops/s
Iteration   3: 687576.317 ops/s
Iteration   4: 697794.747 ops/s
Iteration   5: 703290.429 ops/s
Iteration   6: 704262.839 ops/s
Iteration   7: 701349.808 ops/s
Iteration   8: 696764.956 ops/s
Iteration   9: 701801.480 ops/s
Iteration  10: 703326.847 ops/s
Iteration  11: 701201.451 ops/s
Iteration  12: 703728.437 ops/s
Iteration  13: 700321.083 ops/s
Iteration  14: 699436.157 ops/s
Iteration  15: 699233.600 ops/s
Iteration  16: 701642.935 ops/s
Iteration  17: 700845.939 ops/s
Iteration  18: 693888.764 ops/s
Iteration  19: 702083.307 ops/s
Iteration  20: 700836.275 ops/s
Iteration  21: 702846.915 ops/s
Iteration  22: 693022.595 ops/s
Iteration  23: 693065.295 ops/s
Iteration  24: 695909.681 ops/s
Iteration  25: 700029.764 ops/s
Iteration  26: 705577.221 ops/s
Iteration  27: 697396.512 ops/s
Iteration  28: 696862.852 ops/s
Iteration  29: 694162.130 ops/s
Iteration  30: 701047.343 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_doubleOnSubscribe":
  699190.798 ±(99.9%) 2742.765 ops/s [Average]
  (min, avg, max) = (687576.317, 699190.798, 705577.221), stdev = 4105.242
  CI (99.9%): [696448.033, 701933.563] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
CompletableAndThenCompletableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  699190.798 ± 2742.765  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissionsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissionsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 658140.059 ops/s
# Warmup Iteration   2: 856241.093 ops/s
# Warmup Iteration   3: 829405.975 ops/s
# Warmup Iteration   4: 942903.163 ops/s
# Warmup Iteration   5: 945203.930 ops/s
# Warmup Iteration   6: 946258.387 ops/s
# Warmup Iteration   7: 937303.225 ops/s
# Warmup Iteration   8: 943317.926 ops/s
# Warmup Iteration   9: 939908.239 ops/s
# Warmup Iteration  10: 941653.695 ops/s
# Warmup Iteration  11: 941635.786 ops/s
# Warmup Iteration  12: 936507.361 ops/s
# Warmup Iteration  13: 942961.703 ops/s
# Warmup Iteration  14: 935514.543 ops/s
# Warmup Iteration  15: 934706.523 ops/s
# Warmup Iteration  16: 930428.074 ops/s
# Warmup Iteration  17: 995556.076 ops/s
# Warmup Iteration  18: 986388.281 ops/s
# Warmup Iteration  19: 987972.801 ops/s
# Warmup Iteration  20: 990486.344 ops/s
# Warmup Iteration  21: 991315.542 ops/s
# Warmup Iteration  22: 995493.916 ops/s
# Warmup Iteration  23: 991000.324 ops/s
# Warmup Iteration  24: 994413.924 ops/s
# Warmup Iteration  25: 987794.167 ops/s
# Warmup Iteration  26: 997571.092 ops/s
# Warmup Iteration  27: 989081.383 ops/s
# Warmup Iteration  28: 987375.914 ops/s
# Warmup Iteration  29: 994909.110 ops/s
# Warmup Iteration  30: 989971.691 ops/s
Iteration   1: 990247.772 ops/s
Iteration   2: 991249.775 ops/s
Iteration   3: 992158.266 ops/s
Iteration   4: 995400.535 ops/s
Iteration   5: 990367.965 ops/s
Iteration   6: 996948.537 ops/s
Iteration   7: 987573.886 ops/s
Iteration   8: 995067.168 ops/s
Iteration   9: 993657.046 ops/s
Iteration  10: 995121.201 ops/s
Iteration  11: 993717.100 ops/s
Iteration  12: 991431.759 ops/s
Iteration  13: 995296.413 ops/s
Iteration  14: 989697.264 ops/s
Iteration  15: 993031.126 ops/s
Iteration  16: 994949.936 ops/s
Iteration  17: 992572.114 ops/s
Iteration  18: 988092.434 ops/s
Iteration  19: 994805.830 ops/s
Iteration  20: 995229.676 ops/s
Iteration  21: 991590.358 ops/s
Iteration  22: 989647.424 ops/s
Iteration  23: 993791.555 ops/s
Iteration  24: 994159.683 ops/s
Iteration  25: 993969.304 ops/s
Iteration  26: 995573.655 ops/s
Iteration  27: 986885.549 ops/s
Iteration  28: 988818.230 ops/s
Iteration  29: 987472.099 ops/s
Iteration  30: 993722.762 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissionsObservable":
  992408.214 ±(99.9%) 1889.472 ops/s [Average]
  (min, avg, max) = (986885.549, 992408.214, 996948.537), stdev = 2828.073
  CI (99.9%): [990518.742, 994297.686] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                        Mode  Cnt       Score      Error  Units
ObservableCollectTest._Benchmark.benchmark_collectorFailureDoesNotResultInErrorAndCompletedEmissionsObservable  thrpt   30  992408.214 ± 1889.472  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 539264.823 ops/s
# Warmup Iteration   2: 635034.777 ops/s
# Warmup Iteration   3: 677954.102 ops/s
# Warmup Iteration   4: 680228.682 ops/s
# Warmup Iteration   5: 692948.868 ops/s
# Warmup Iteration   6: 692760.812 ops/s
# Warmup Iteration   7: 691126.069 ops/s
# Warmup Iteration   8: 689830.540 ops/s
# Warmup Iteration   9: 694028.538 ops/s
# Warmup Iteration  10: 687302.215 ops/s
# Warmup Iteration  11: 688353.991 ops/s
# Warmup Iteration  12: 686509.962 ops/s
# Warmup Iteration  13: 685689.201 ops/s
# Warmup Iteration  14: 686985.367 ops/s
# Warmup Iteration  15: 688334.466 ops/s
# Warmup Iteration  16: 690835.068 ops/s
# Warmup Iteration  17: 716610.884 ops/s
# Warmup Iteration  18: 715093.326 ops/s
# Warmup Iteration  19: 720774.500 ops/s
# Warmup Iteration  20: 719897.162 ops/s
# Warmup Iteration  21: 718036.892 ops/s
# Warmup Iteration  22: 717053.552 ops/s
# Warmup Iteration  23: 713920.612 ops/s
# Warmup Iteration  24: 716004.186 ops/s
# Warmup Iteration  25: 719497.128 ops/s
# Warmup Iteration  26: 717095.712 ops/s
# Warmup Iteration  27: 719707.617 ops/s
# Warmup Iteration  28: 718066.564 ops/s
# Warmup Iteration  29: 715128.491 ops/s
# Warmup Iteration  30: 715004.718 ops/s
Iteration   1: 719831.689 ops/s
Iteration   2: 718116.712 ops/s
Iteration   3: 719546.320 ops/s
Iteration   4: 715478.544 ops/s
Iteration   5: 714535.086 ops/s
Iteration   6: 718465.044 ops/s
Iteration   7: 716810.839 ops/s
Iteration   8: 716034.105 ops/s
Iteration   9: 714147.758 ops/s
Iteration  10: 718080.568 ops/s
Iteration  11: 716886.808 ops/s
Iteration  12: 713823.059 ops/s
Iteration  13: 713583.175 ops/s
Iteration  14: 714362.792 ops/s
Iteration  15: 719545.632 ops/s
Iteration  16: 717021.590 ops/s
Iteration  17: 720196.655 ops/s
Iteration  18: 713626.589 ops/s
Iteration  19: 714573.889 ops/s
Iteration  20: 720205.061 ops/s
Iteration  21: 715299.555 ops/s
Iteration  22: 718685.778 ops/s
Iteration  23: 713970.036 ops/s
Iteration  24: 716245.371 ops/s
Iteration  25: 718605.138 ops/s
Iteration  26: 713124.392 ops/s
Iteration  27: 719412.425 ops/s
Iteration  28: 720181.410 ops/s
Iteration  29: 716916.967 ops/s
Iteration  30: 718150.358 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe":
  716848.778 ±(99.9%) 1565.372 ops/s [Average]
  (min, avg, max) = (713124.392, 716848.778, 720205.061), stdev = 2342.976
  CI (99.9%): [715283.406, 718414.150] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
CompletableToCompletionStageTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  716848.778 ± 1565.372  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_fusedEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_fusedEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7262886.907 ops/s
# Warmup Iteration   2: 10467891.904 ops/s
# Warmup Iteration   3: 11127907.839 ops/s
# Warmup Iteration   4: 11072962.228 ops/s
# Warmup Iteration   5: 11065089.385 ops/s
# Warmup Iteration   6: 11120470.005 ops/s
# Warmup Iteration   7: 11071156.952 ops/s
# Warmup Iteration   8: 11099105.039 ops/s
# Warmup Iteration   9: 11088968.400 ops/s
# Warmup Iteration  10: 11106189.235 ops/s
# Warmup Iteration  11: 11072190.002 ops/s
# Warmup Iteration  12: 11084734.830 ops/s
# Warmup Iteration  13: 11096818.153 ops/s
# Warmup Iteration  14: 11116543.314 ops/s
# Warmup Iteration  15: 11073508.006 ops/s
# Warmup Iteration  16: 11106826.814 ops/s
# Warmup Iteration  17: 11088718.889 ops/s
# Warmup Iteration  18: 11131334.051 ops/s
# Warmup Iteration  19: 11083911.257 ops/s
# Warmup Iteration  20: 11074206.061 ops/s
# Warmup Iteration  21: 11114126.393 ops/s
# Warmup Iteration  22: 11137818.399 ops/s
# Warmup Iteration  23: 11144452.704 ops/s
# Warmup Iteration  24: 11105556.748 ops/s
# Warmup Iteration  25: 11165444.709 ops/s
# Warmup Iteration  26: 11087726.149 ops/s
# Warmup Iteration  27: 11095701.744 ops/s
# Warmup Iteration  28: 11096759.994 ops/s
# Warmup Iteration  29: 11056694.358 ops/s
# Warmup Iteration  30: 11140407.877 ops/s
Iteration   1: 11125691.848 ops/s
Iteration   2: 11133599.894 ops/s
Iteration   3: 11188371.393 ops/s
Iteration   4: 11150516.567 ops/s
Iteration   5: 11135694.095 ops/s
Iteration   6: 11137629.771 ops/s
Iteration   7: 11117275.307 ops/s
Iteration   8: 11155409.076 ops/s
Iteration   9: 11124038.407 ops/s
Iteration  10: 11119351.062 ops/s
Iteration  11: 11143916.675 ops/s
Iteration  12: 11143575.128 ops/s
Iteration  13: 11093470.635 ops/s
Iteration  14: 11135166.163 ops/s
Iteration  15: 11175766.007 ops/s
Iteration  16: 11074072.988 ops/s
Iteration  17: 11147459.296 ops/s
Iteration  18: 11133653.138 ops/s
Iteration  19: 11166868.385 ops/s
Iteration  20: 11150295.314 ops/s
Iteration  21: 11096410.365 ops/s
Iteration  22: 11108834.550 ops/s
Iteration  23: 11160676.744 ops/s
Iteration  24: 11100290.829 ops/s
Iteration  25: 11125536.633 ops/s
Iteration  26: 11069578.723 ops/s
Iteration  27: 11139616.521 ops/s
Iteration  28: 11131918.778 ops/s
Iteration  29: 11115332.371 ops/s
Iteration  30: 11120337.372 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_fusedEmpty":
  11130678.468 ±(99.9%) 18157.257 ops/s [Average]
  (min, avg, max) = (11069578.723, 11130678.468, 11188371.393), stdev = 27176.929
  CI (99.9%): [11112521.211, 11148835.725] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt         Score       Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_fusedEmpty  thrpt   30  11130678.468 ± 18157.257  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmptyResource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmptyResource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5262803.743 ops/s
# Warmup Iteration   2: 6975202.879 ops/s
# Warmup Iteration   3: 7241498.999 ops/s
# Warmup Iteration   4: 7211843.785 ops/s
# Warmup Iteration   5: 7198737.784 ops/s
# Warmup Iteration   6: 7192995.286 ops/s
# Warmup Iteration   7: 7146278.833 ops/s
# Warmup Iteration   8: 7245646.923 ops/s
# Warmup Iteration   9: 7186245.364 ops/s
# Warmup Iteration  10: 7247814.137 ops/s
# Warmup Iteration  11: 7312103.497 ops/s
# Warmup Iteration  12: 7196733.285 ops/s
# Warmup Iteration  13: 7188430.193 ops/s
# Warmup Iteration  14: 7196273.452 ops/s
# Warmup Iteration  15: 7202466.511 ops/s
# Warmup Iteration  16: 7193089.606 ops/s
# Warmup Iteration  17: 7202904.913 ops/s
# Warmup Iteration  18: 7121964.439 ops/s
# Warmup Iteration  19: 7172142.416 ops/s
# Warmup Iteration  20: 7194448.272 ops/s
# Warmup Iteration  21: 7237082.993 ops/s
# Warmup Iteration  22: 7166965.938 ops/s
# Warmup Iteration  23: 7148685.313 ops/s
# Warmup Iteration  24: 7157404.474 ops/s
# Warmup Iteration  25: 7313206.625 ops/s
# Warmup Iteration  26: 7134222.153 ops/s
# Warmup Iteration  27: 7209268.695 ops/s
# Warmup Iteration  28: 7213757.248 ops/s
# Warmup Iteration  29: 7234287.432 ops/s
# Warmup Iteration  30: 7190806.641 ops/s
Iteration   1: 7190790.353 ops/s
Iteration   2: 7198363.354 ops/s
Iteration   3: 7170920.076 ops/s
Iteration   4: 7212489.628 ops/s
Iteration   5: 7215118.992 ops/s
Iteration   6: 7177502.992 ops/s
Iteration   7: 7211352.346 ops/s
Iteration   8: 7152914.192 ops/s
Iteration   9: 7169920.672 ops/s
Iteration  10: 7247081.621 ops/s
Iteration  11: 7269067.926 ops/s
Iteration  12: 7201732.018 ops/s
Iteration  13: 7265639.106 ops/s
Iteration  14: 7210560.716 ops/s
Iteration  15: 7215777.397 ops/s
Iteration  16: 7192558.845 ops/s
Iteration  17: 7212629.538 ops/s
Iteration  18: 7154035.844 ops/s
Iteration  19: 7237925.222 ops/s
Iteration  20: 7237152.231 ops/s
Iteration  21: 7243582.875 ops/s
Iteration  22: 7197725.471 ops/s
Iteration  23: 7194985.632 ops/s
Iteration  24: 7188170.207 ops/s
Iteration  25: 7228549.711 ops/s
Iteration  26: 7185360.050 ops/s
Iteration  27: 7209312.417 ops/s
Iteration  28: 7204523.978 ops/s
Iteration  29: 7214408.555 ops/s
Iteration  30: 7148494.930 ops/s


Result "io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmptyResource":
  7205288.230 ±(99.9%) 20426.571 ops/s [Average]
  (min, avg, max) = (7148494.930, 7205288.230, 7269067.926), stdev = 30573.532
  CI (99.9%): [7184861.659, 7225714.801] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt        Score       Error  Units
QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedDelayErrorEmptyResource  thrpt   30  7205288.230 ± 20426.571  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 532895.362 ops/s
# Warmup Iteration   2: 633910.260 ops/s
# Warmup Iteration   3: 606655.652 ops/s
# Warmup Iteration   4: 693782.304 ops/s
# Warmup Iteration   5: 704380.706 ops/s
# Warmup Iteration   6: 703111.716 ops/s
# Warmup Iteration   7: 704319.213 ops/s
# Warmup Iteration   8: 702896.141 ops/s
# Warmup Iteration   9: 702255.167 ops/s
# Warmup Iteration  10: 703799.579 ops/s
# Warmup Iteration  11: 701692.905 ops/s
# Warmup Iteration  12: 701940.339 ops/s
# Warmup Iteration  13: 703793.945 ops/s
# Warmup Iteration  14: 704085.353 ops/s
# Warmup Iteration  15: 702333.160 ops/s
# Warmup Iteration  16: 702815.773 ops/s
# Warmup Iteration  17: 730602.519 ops/s
# Warmup Iteration  18: 727541.267 ops/s
# Warmup Iteration  19: 726235.298 ops/s
# Warmup Iteration  20: 727941.734 ops/s
# Warmup Iteration  21: 726059.632 ops/s
# Warmup Iteration  22: 724529.533 ops/s
# Warmup Iteration  23: 727387.107 ops/s
# Warmup Iteration  24: 725443.771 ops/s
# Warmup Iteration  25: 726096.695 ops/s
# Warmup Iteration  26: 722143.113 ops/s
# Warmup Iteration  27: 718325.630 ops/s
# Warmup Iteration  28: 725893.945 ops/s
# Warmup Iteration  29: 721441.848 ops/s
# Warmup Iteration  30: 722623.952 ops/s
Iteration   1: 724994.729 ops/s
Iteration   2: 724462.274 ops/s
Iteration   3: 725512.550 ops/s
Iteration   4: 721429.055 ops/s
Iteration   5: 730388.816 ops/s
Iteration   6: 725900.034 ops/s
Iteration   7: 716870.392 ops/s
Iteration   8: 722882.290 ops/s
Iteration   9: 723040.788 ops/s
Iteration  10: 727226.841 ops/s
Iteration  11: 721044.512 ops/s
Iteration  12: 727892.898 ops/s
Iteration  13: 726452.405 ops/s
Iteration  14: 727337.951 ops/s
Iteration  15: 724500.052 ops/s
Iteration  16: 724495.238 ops/s
Iteration  17: 725129.619 ops/s
Iteration  18: 720716.211 ops/s
Iteration  19: 728171.256 ops/s
Iteration  20: 729401.119 ops/s
Iteration  21: 730553.026 ops/s
Iteration  22: 723912.153 ops/s
Iteration  23: 721483.040 ops/s
Iteration  24: 728404.654 ops/s
Iteration  25: 727529.295 ops/s
Iteration  26: 724650.433 ops/s
Iteration  27: 727943.019 ops/s
Iteration  28: 727249.356 ops/s
Iteration  29: 726547.167 ops/s
Iteration  30: 726733.499 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe":
  725428.489 ±(99.9%) 2070.541 ops/s [Average]
  (min, avg, max) = (716870.392, 725428.489, 730553.026), stdev = 3099.089
  CI (99.9%): [723357.948, 727499.030] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
CompletableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  725428.489 ± 2070.541  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 551018.145 ops/s
# Warmup Iteration   2: 658111.155 ops/s
# Warmup Iteration   3: 652133.517 ops/s
# Warmup Iteration   4: 709491.411 ops/s
# Warmup Iteration   5: 720601.161 ops/s
# Warmup Iteration   6: 719068.188 ops/s
# Warmup Iteration   7: 719869.707 ops/s
# Warmup Iteration   8: 719063.229 ops/s
# Warmup Iteration   9: 719965.623 ops/s
# Warmup Iteration  10: 717794.486 ops/s
# Warmup Iteration  11: 718239.390 ops/s
# Warmup Iteration  12: 717929.232 ops/s
# Warmup Iteration  13: 716123.930 ops/s
# Warmup Iteration  14: 714372.973 ops/s
# Warmup Iteration  15: 713329.822 ops/s
# Warmup Iteration  16: 715545.187 ops/s
# Warmup Iteration  17: 743839.041 ops/s
# Warmup Iteration  18: 743548.335 ops/s
# Warmup Iteration  19: 741735.135 ops/s
# Warmup Iteration  20: 743763.898 ops/s
# Warmup Iteration  21: 742727.093 ops/s
# Warmup Iteration  22: 746377.829 ops/s
# Warmup Iteration  23: 744423.284 ops/s
# Warmup Iteration  24: 742352.057 ops/s
# Warmup Iteration  25: 745589.052 ops/s
# Warmup Iteration  26: 743734.262 ops/s
# Warmup Iteration  27: 743028.888 ops/s
# Warmup Iteration  28: 747140.426 ops/s
# Warmup Iteration  29: 739675.375 ops/s
# Warmup Iteration  30: 742443.157 ops/s
Iteration   1: 742299.245 ops/s
Iteration   2: 741924.419 ops/s
Iteration   3: 743486.337 ops/s
Iteration   4: 741250.404 ops/s
Iteration   5: 744179.129 ops/s
Iteration   6: 746895.507 ops/s
Iteration   7: 742664.427 ops/s
Iteration   8: 740289.977 ops/s
Iteration   9: 742466.204 ops/s
Iteration  10: 742922.569 ops/s
Iteration  11: 744387.229 ops/s
Iteration  12: 741146.911 ops/s
Iteration  13: 741630.500 ops/s
Iteration  14: 747976.992 ops/s
Iteration  15: 744671.294 ops/s
Iteration  16: 745339.669 ops/s
Iteration  17: 743774.806 ops/s
Iteration  18: 742558.532 ops/s
Iteration  19: 743604.040 ops/s
Iteration  20: 745726.552 ops/s
Iteration  21: 740261.136 ops/s
Iteration  22: 743274.119 ops/s
Iteration  23: 744796.090 ops/s
Iteration  24: 742609.003 ops/s
Iteration  25: 743524.359 ops/s
Iteration  26: 739933.231 ops/s
Iteration  27: 744287.473 ops/s
Iteration  28: 741415.848 ops/s
Iteration  29: 742623.546 ops/s
Iteration  30: 741960.473 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe":
  743129.334 ±(99.9%) 1263.078 ops/s [Average]
  (min, avg, max) = (739933.231, 743129.334, 747976.992), stdev = 1890.515
  CI (99.9%): [741866.256, 744392.412] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
CompletableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  743129.334 ± 1263.078  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 239842.988 ops/s
# Warmup Iteration   2: 300174.304 ops/s
# Warmup Iteration   3: 290656.490 ops/s
# Warmup Iteration   4: 321894.577 ops/s
# Warmup Iteration   5: 325551.526 ops/s
# Warmup Iteration   6: 324825.332 ops/s
# Warmup Iteration   7: 327118.640 ops/s
# Warmup Iteration   8: 325662.758 ops/s
# Warmup Iteration   9: 324928.152 ops/s
# Warmup Iteration  10: 324403.921 ops/s
# Warmup Iteration  11: 324579.151 ops/s
# Warmup Iteration  12: 323786.877 ops/s
# Warmup Iteration  13: 322348.973 ops/s
# Warmup Iteration  14: 322558.480 ops/s
# Warmup Iteration  15: 322538.168 ops/s
# Warmup Iteration  16: 321469.991 ops/s
# Warmup Iteration  17: 336428.943 ops/s
# Warmup Iteration  18: 334681.565 ops/s
# Warmup Iteration  19: 335622.319 ops/s
# Warmup Iteration  20: 334262.726 ops/s
# Warmup Iteration  21: 334664.786 ops/s
# Warmup Iteration  22: 334945.413 ops/s
# Warmup Iteration  23: 334561.910 ops/s
# Warmup Iteration  24: 333037.312 ops/s
# Warmup Iteration  25: 336310.910 ops/s
# Warmup Iteration  26: 333873.003 ops/s
# Warmup Iteration  27: 335280.992 ops/s
# Warmup Iteration  28: 335065.028 ops/s
# Warmup Iteration  29: 333608.180 ops/s
# Warmup Iteration  30: 335527.477 ops/s
Iteration   1: 336305.393 ops/s
Iteration   2: 335531.210 ops/s
Iteration   3: 335445.899 ops/s
Iteration   4: 334825.605 ops/s
Iteration   5: 334627.813 ops/s
Iteration   6: 334180.592 ops/s
Iteration   7: 333788.136 ops/s
Iteration   8: 335606.790 ops/s
Iteration   9: 334409.594 ops/s
Iteration  10: 334754.442 ops/s
Iteration  11: 335207.185 ops/s
Iteration  12: 333541.369 ops/s
Iteration  13: 334561.409 ops/s
Iteration  14: 334346.210 ops/s
Iteration  15: 335208.854 ops/s
Iteration  16: 336375.505 ops/s
Iteration  17: 334010.215 ops/s
Iteration  18: 335301.795 ops/s
Iteration  19: 334088.085 ops/s
Iteration  20: 335374.221 ops/s
Iteration  21: 336645.977 ops/s
Iteration  22: 334848.475 ops/s
Iteration  23: 334390.742 ops/s
Iteration  24: 334856.968 ops/s
Iteration  25: 336663.809 ops/s
Iteration  26: 336182.899 ops/s
Iteration  27: 333678.313 ops/s
Iteration  28: 334647.815 ops/s
Iteration  29: 334924.568 ops/s
Iteration  30: 334277.741 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.CompletableToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel":
  334953.588 ±(99.9%) 577.464 ops/s [Average]
  (min, avg, max) = (333541.369, 334953.588, 336663.809), stdev = 864.321
  CI (99.9%): [334376.124, 335531.051] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
CompletableToCompletionStageTest._Benchmark.benchmark_sourceIgnoresCancel  thrpt   30  334953.588 ± 577.464  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 539765.009 ops/s
# Warmup Iteration   2: 648531.010 ops/s
# Warmup Iteration   3: 644017.179 ops/s
# Warmup Iteration   4: 696311.865 ops/s
# Warmup Iteration   5: 709428.298 ops/s
# Warmup Iteration   6: 710707.240 ops/s
# Warmup Iteration   7: 708450.803 ops/s
# Warmup Iteration   8: 705762.082 ops/s
# Warmup Iteration   9: 710917.416 ops/s
# Warmup Iteration  10: 705791.261 ops/s
# Warmup Iteration  11: 704455.458 ops/s
# Warmup Iteration  12: 707110.648 ops/s
# Warmup Iteration  13: 710245.117 ops/s
# Warmup Iteration  14: 703545.865 ops/s
# Warmup Iteration  15: 699685.943 ops/s
# Warmup Iteration  16: 700647.673 ops/s
# Warmup Iteration  17: 731618.987 ops/s
# Warmup Iteration  18: 731713.100 ops/s
# Warmup Iteration  19: 730524.380 ops/s
# Warmup Iteration  20: 730110.296 ops/s
# Warmup Iteration  21: 730615.079 ops/s
# Warmup Iteration  22: 731656.627 ops/s
# Warmup Iteration  23: 733157.446 ops/s
# Warmup Iteration  24: 735241.894 ops/s
# Warmup Iteration  25: 735001.940 ops/s
# Warmup Iteration  26: 733864.391 ops/s
# Warmup Iteration  27: 733467.381 ops/s
# Warmup Iteration  28: 732058.047 ops/s
# Warmup Iteration  29: 731556.548 ops/s
# Warmup Iteration  30: 727348.920 ops/s
Iteration   1: 730763.158 ops/s
Iteration   2: 733298.197 ops/s
Iteration   3: 734166.327 ops/s
Iteration   4: 734017.911 ops/s
Iteration   5: 732195.208 ops/s
Iteration   6: 728631.011 ops/s
Iteration   7: 735072.150 ops/s
Iteration   8: 733394.335 ops/s
Iteration   9: 729140.586 ops/s
Iteration  10: 732860.414 ops/s
Iteration  11: 730437.633 ops/s
Iteration  12: 733897.287 ops/s
Iteration  13: 735168.277 ops/s
Iteration  14: 731618.993 ops/s
Iteration  15: 730965.701 ops/s
Iteration  16: 731638.690 ops/s
Iteration  17: 734421.182 ops/s
Iteration  18: 731194.643 ops/s
Iteration  19: 732030.160 ops/s
Iteration  20: 731285.821 ops/s
Iteration  21: 728943.027 ops/s
Iteration  22: 729478.161 ops/s
Iteration  23: 733384.031 ops/s
Iteration  24: 734284.347 ops/s
Iteration  25: 733035.106 ops/s
Iteration  26: 732676.474 ops/s
Iteration  27: 733272.486 ops/s
Iteration  28: 731069.712 ops/s
Iteration  29: 726871.957 ops/s
Iteration  30: 729026.934 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_doubleOnSubscribe":
  731941.331 ±(99.9%) 1414.552 ops/s [Average]
  (min, avg, max) = (726871.957, 731941.331, 735168.277), stdev = 2117.235
  CI (99.9%): [730526.779, 733355.883] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MaybeFromCompletableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  731941.331 ± 1414.552  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_onSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_onSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 539929.704 ops/s
# Warmup Iteration   2: 650099.221 ops/s
# Warmup Iteration   3: 617271.264 ops/s
# Warmup Iteration   4: 694613.877 ops/s
# Warmup Iteration   5: 708966.404 ops/s
# Warmup Iteration   6: 707633.545 ops/s
# Warmup Iteration   7: 706914.035 ops/s
# Warmup Iteration   8: 706726.551 ops/s
# Warmup Iteration   9: 704552.222 ops/s
# Warmup Iteration  10: 707218.033 ops/s
# Warmup Iteration  11: 705762.221 ops/s
# Warmup Iteration  12: 708810.198 ops/s
# Warmup Iteration  13: 708321.536 ops/s
# Warmup Iteration  14: 708162.650 ops/s
# Warmup Iteration  15: 707557.751 ops/s
# Warmup Iteration  16: 705696.669 ops/s
# Warmup Iteration  17: 748539.666 ops/s
# Warmup Iteration  18: 748193.057 ops/s
# Warmup Iteration  19: 746745.364 ops/s
# Warmup Iteration  20: 743424.630 ops/s
# Warmup Iteration  21: 739968.968 ops/s
# Warmup Iteration  22: 744597.986 ops/s
# Warmup Iteration  23: 746718.227 ops/s
# Warmup Iteration  24: 743507.182 ops/s
# Warmup Iteration  25: 740958.439 ops/s
# Warmup Iteration  26: 745947.864 ops/s
# Warmup Iteration  27: 741108.252 ops/s
# Warmup Iteration  28: 743983.208 ops/s
# Warmup Iteration  29: 743474.021 ops/s
# Warmup Iteration  30: 741572.080 ops/s
Iteration   1: 743095.484 ops/s
Iteration   2: 738461.936 ops/s
Iteration   3: 740409.718 ops/s
Iteration   4: 731632.523 ops/s
Iteration   5: 738055.782 ops/s
Iteration   6: 729013.258 ops/s
Iteration   7: 742209.064 ops/s
Iteration   8: 729910.244 ops/s
Iteration   9: 743977.404 ops/s
Iteration  10: 737351.058 ops/s
Iteration  11: 743003.508 ops/s
Iteration  12: 740138.338 ops/s
Iteration  13: 739220.263 ops/s
Iteration  14: 741367.484 ops/s
Iteration  15: 746370.099 ops/s
Iteration  16: 745386.309 ops/s
Iteration  17: 745086.084 ops/s
Iteration  18: 745969.720 ops/s
Iteration  19: 740968.912 ops/s
Iteration  20: 740343.520 ops/s
Iteration  21: 741203.323 ops/s
Iteration  22: 740628.057 ops/s
Iteration  23: 740489.536 ops/s
Iteration  24: 742194.219 ops/s
Iteration  25: 743381.712 ops/s
Iteration  26: 742620.002 ops/s
Iteration  27: 737567.632 ops/s
Iteration  28: 743229.784 ops/s
Iteration  29: 742161.122 ops/s
Iteration  30: 742792.991 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_onSubscribe":
  740607.970 ±(99.9%) 2836.564 ops/s [Average]
  (min, avg, max) = (729013.258, 740607.970, 746370.099), stdev = 4245.635
  CI (99.9%): [737771.406, 743444.533] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableOnErrorCompleteTest._Benchmark.benchmark_onSubscribe  thrpt   30  740607.970 ± 2836.564  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_delayedUpstreamOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_delayedUpstreamOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5306026.129 ops/s
# Warmup Iteration   2: 6935612.161 ops/s
# Warmup Iteration   3: 7888974.408 ops/s
# Warmup Iteration   4: 7882037.768 ops/s
# Warmup Iteration   5: 7880320.425 ops/s
# Warmup Iteration   6: 7861696.527 ops/s
# Warmup Iteration   7: 7862642.946 ops/s
# Warmup Iteration   8: 7886506.625 ops/s
# Warmup Iteration   9: 7869697.130 ops/s
# Warmup Iteration  10: 7874932.608 ops/s
# Warmup Iteration  11: 7861996.548 ops/s
# Warmup Iteration  12: 7863451.672 ops/s
# Warmup Iteration  13: 7925123.418 ops/s
# Warmup Iteration  14: 7911859.408 ops/s
# Warmup Iteration  15: 7882506.644 ops/s
# Warmup Iteration  16: 7878448.221 ops/s
# Warmup Iteration  17: 7860725.705 ops/s
# Warmup Iteration  18: 7848636.376 ops/s
# Warmup Iteration  19: 7836160.803 ops/s
# Warmup Iteration  20: 7867629.697 ops/s
# Warmup Iteration  21: 7898872.273 ops/s
# Warmup Iteration  22: 7842412.041 ops/s
# Warmup Iteration  23: 7848366.644 ops/s
# Warmup Iteration  24: 7861185.364 ops/s
# Warmup Iteration  25: 7820164.078 ops/s
# Warmup Iteration  26: 7856793.755 ops/s
# Warmup Iteration  27: 7834414.296 ops/s
# Warmup Iteration  28: 7850842.990 ops/s
# Warmup Iteration  29: 7830155.902 ops/s
# Warmup Iteration  30: 7853438.600 ops/s
Iteration   1: 7840588.850 ops/s
Iteration   2: 7847678.743 ops/s
Iteration   3: 7856254.707 ops/s
Iteration   4: 7844487.052 ops/s
Iteration   5: 7836956.555 ops/s
Iteration   6: 7852409.355 ops/s
Iteration   7: 7847511.532 ops/s
Iteration   8: 7909424.143 ops/s
Iteration   9: 7854712.270 ops/s
Iteration  10: 7842434.304 ops/s
Iteration  11: 7771740.305 ops/s
Iteration  12: 7867384.586 ops/s
Iteration  13: 7832253.870 ops/s
Iteration  14: 7820209.735 ops/s
Iteration  15: 7820759.634 ops/s
Iteration  16: 7794236.588 ops/s
Iteration  17: 7834686.243 ops/s
Iteration  18: 7851889.635 ops/s
Iteration  19: 7801589.711 ops/s
Iteration  20: 7846184.028 ops/s
Iteration  21: 7832174.683 ops/s
Iteration  22: 7822482.780 ops/s
Iteration  23: 7826564.218 ops/s
Iteration  24: 7828670.784 ops/s
Iteration  25: 7841472.647 ops/s
Iteration  26: 7833840.826 ops/s
Iteration  27: 7805731.694 ops/s
Iteration  28: 7878290.845 ops/s
Iteration  29: 7840242.897 ops/s
Iteration  30: 7813785.868 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_delayedUpstreamOnSubscribe":
  7836554.970 ±(99.9%) 17236.982 ops/s [Average]
  (min, avg, max) = (7771740.305, 7836554.970, 7909424.143), stdev = 25799.505
  CI (99.9%): [7819317.988, 7853791.952] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_delayedUpstreamOnSubscribe  thrpt   30  7836554.970 ± 17236.982  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_ambRace$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_ambRace

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 263455.179 ops/s
# Warmup Iteration   2: 318232.573 ops/s
# Warmup Iteration   3: 310712.093 ops/s
# Warmup Iteration   4: 345248.120 ops/s
# Warmup Iteration   5: 348802.846 ops/s
# Warmup Iteration   6: 349522.452 ops/s
# Warmup Iteration   7: 349701.095 ops/s
# Warmup Iteration   8: 350134.013 ops/s
# Warmup Iteration   9: 348414.101 ops/s
# Warmup Iteration  10: 347798.683 ops/s
# Warmup Iteration  11: 347171.859 ops/s
# Warmup Iteration  12: 348310.971 ops/s
# Warmup Iteration  13: 346943.993 ops/s
# Warmup Iteration  14: 347400.284 ops/s
# Warmup Iteration  15: 345900.250 ops/s
# Warmup Iteration  16: 349315.929 ops/s
# Warmup Iteration  17: 358826.014 ops/s
# Warmup Iteration  18: 358117.464 ops/s
# Warmup Iteration  19: 359985.441 ops/s
# Warmup Iteration  20: 361233.361 ops/s
# Warmup Iteration  21: 360112.846 ops/s
# Warmup Iteration  22: 360756.709 ops/s
# Warmup Iteration  23: 358496.619 ops/s
# Warmup Iteration  24: 359890.014 ops/s
# Warmup Iteration  25: 360426.789 ops/s
# Warmup Iteration  26: 359428.843 ops/s
# Warmup Iteration  27: 359362.809 ops/s
# Warmup Iteration  28: 358220.356 ops/s
# Warmup Iteration  29: 358935.656 ops/s
# Warmup Iteration  30: 359956.371 ops/s
Iteration   1: 359380.329 ops/s
Iteration   2: 359423.090 ops/s
Iteration   3: 359259.045 ops/s
Iteration   4: 358757.691 ops/s
Iteration   5: 358992.729 ops/s
Iteration   6: 358902.652 ops/s
Iteration   7: 356918.190 ops/s
Iteration   8: 358763.431 ops/s
Iteration   9: 355881.110 ops/s
Iteration  10: 358785.824 ops/s
Iteration  11: 360107.756 ops/s
Iteration  12: 358087.017 ops/s
Iteration  13: 359836.964 ops/s
Iteration  14: 359837.455 ops/s
Iteration  15: 358745.778 ops/s
Iteration  16: 361674.498 ops/s
Iteration  17: 359476.055 ops/s
Iteration  18: 359127.612 ops/s
Iteration  19: 358855.712 ops/s
Iteration  20: 358135.402 ops/s
Iteration  21: 360247.959 ops/s
Iteration  22: 358856.020 ops/s
Iteration  23: 359035.392 ops/s
Iteration  24: 357874.978 ops/s
Iteration  25: 358986.913 ops/s
Iteration  26: 357979.678 ops/s
Iteration  27: 358905.727 ops/s
Iteration  28: 361052.730 ops/s
Iteration  29: 359516.052 ops/s
Iteration  30: 358212.716 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_ambRace":
  358987.217 ±(99.9%) 737.158 ops/s [Average]
  (min, avg, max) = (355881.110, 358987.217, 361674.498), stdev = 1103.344
  CI (99.9%): [358250.058, 359724.375] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score     Error  Units
CompletableTimeoutTest._Benchmark.benchmark_ambRace  thrpt   30  358987.217 ± 737.158  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_delayedUpstreamOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_delayedUpstreamOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5207333.741 ops/s
# Warmup Iteration   2: 6928887.231 ops/s
# Warmup Iteration   3: 7888196.971 ops/s
# Warmup Iteration   4: 7871125.128 ops/s
# Warmup Iteration   5: 7826940.731 ops/s
# Warmup Iteration   6: 7821135.757 ops/s
# Warmup Iteration   7: 7842909.597 ops/s
# Warmup Iteration   8: 7882015.589 ops/s
# Warmup Iteration   9: 7855287.341 ops/s
# Warmup Iteration  10: 7807224.264 ops/s
# Warmup Iteration  11: 7862785.244 ops/s
# Warmup Iteration  12: 7841213.427 ops/s
# Warmup Iteration  13: 7834821.846 ops/s
# Warmup Iteration  14: 7824158.901 ops/s
# Warmup Iteration  15: 7863901.422 ops/s
# Warmup Iteration  16: 7828167.286 ops/s
# Warmup Iteration  17: 7860773.121 ops/s
# Warmup Iteration  18: 7835046.562 ops/s
# Warmup Iteration  19: 7829398.549 ops/s
# Warmup Iteration  20: 7784673.769 ops/s
# Warmup Iteration  21: 7864399.075 ops/s
# Warmup Iteration  22: 7865352.843 ops/s
# Warmup Iteration  23: 7845471.081 ops/s
# Warmup Iteration  24: 7815570.178 ops/s
# Warmup Iteration  25: 7862038.635 ops/s
# Warmup Iteration  26: 7831234.174 ops/s
# Warmup Iteration  27: 7831109.060 ops/s
# Warmup Iteration  28: 7814707.082 ops/s
# Warmup Iteration  29: 7803494.738 ops/s
# Warmup Iteration  30: 7824068.734 ops/s
Iteration   1: 7796751.796 ops/s
Iteration   2: 7834508.216 ops/s
Iteration   3: 7823652.380 ops/s
Iteration   4: 7829609.050 ops/s
Iteration   5: 7814659.189 ops/s
Iteration   6: 7838248.336 ops/s
Iteration   7: 7834723.753 ops/s
Iteration   8: 7839818.037 ops/s
Iteration   9: 7848972.359 ops/s
Iteration  10: 7822734.213 ops/s
Iteration  11: 7797857.336 ops/s
Iteration  12: 7830315.729 ops/s
Iteration  13: 7809658.118 ops/s
Iteration  14: 7794722.368 ops/s
Iteration  15: 7830111.223 ops/s
Iteration  16: 7834282.409 ops/s
Iteration  17: 7829777.818 ops/s
Iteration  18: 7819912.421 ops/s
Iteration  19: 7823795.002 ops/s
Iteration  20: 7818979.215 ops/s
Iteration  21: 7843500.035 ops/s
Iteration  22: 7851967.236 ops/s
Iteration  23: 7830716.013 ops/s
Iteration  24: 7831346.057 ops/s
Iteration  25: 7873122.644 ops/s
Iteration  26: 7806727.651 ops/s
Iteration  27: 7817915.654 ops/s
Iteration  28: 7788186.301 ops/s
Iteration  29: 7805390.111 ops/s
Iteration  30: 7834563.706 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_delayedUpstreamOnSubscribe":
  7825217.479 ±(99.9%) 12329.214 ops/s [Average]
  (min, avg, max) = (7788186.301, 7825217.479, 7873122.644), stdev = 18453.788
  CI (99.9%): [7812888.266, 7837546.693] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_delayedUpstreamOnSubscribe  thrpt   30  7825217.479 ± 12329.214  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSkipCancelWhenSecondBuffer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSkipCancelWhenSecondBuffer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 37477.784 ops/s
# Warmup Iteration   2: 447098.701 ops/s
# Warmup Iteration   3: 800809.730 ops/s
# Warmup Iteration   4: 938655.058 ops/s
# Warmup Iteration   5: 952421.339 ops/s
# Warmup Iteration   6: 953650.269 ops/s
# Warmup Iteration   7: 948593.133 ops/s
# Warmup Iteration   8: 946026.822 ops/s
# Warmup Iteration   9: 947903.645 ops/s
# Warmup Iteration  10: 936731.476 ops/s
# Warmup Iteration  11: 944725.812 ops/s
# Warmup Iteration  12: 948892.315 ops/s
# Warmup Iteration  13: 942410.980 ops/s
# Warmup Iteration  14: 952100.669 ops/s
# Warmup Iteration  15: 954031.608 ops/s
# Warmup Iteration  16: 946375.427 ops/s
# Warmup Iteration  17: 949278.652 ops/s
# Warmup Iteration  18: 947309.683 ops/s
# Warmup Iteration  19: 948016.605 ops/s
# Warmup Iteration  20: 948918.897 ops/s
# Warmup Iteration  21: 947574.608 ops/s
# Warmup Iteration  22: 943740.780 ops/s
# Warmup Iteration  23: 952972.009 ops/s
# Warmup Iteration  24: 950558.095 ops/s
# Warmup Iteration  25: 949158.403 ops/s
# Warmup Iteration  26: 952921.302 ops/s
# Warmup Iteration  27: 946882.821 ops/s
# Warmup Iteration  28: 945146.323 ops/s
# Warmup Iteration  29: 946864.262 ops/s
# Warmup Iteration  30: 948431.666 ops/s
Iteration   1: 952396.841 ops/s
Iteration   2: 948321.413 ops/s
Iteration   3: 944360.582 ops/s
Iteration   4: 942424.531 ops/s
Iteration   5: 947504.296 ops/s
Iteration   6: 946810.125 ops/s
Iteration   7: 943571.940 ops/s
Iteration   8: 948861.736 ops/s
Iteration   9: 943459.230 ops/s
Iteration  10: 944257.120 ops/s
Iteration  11: 944878.116 ops/s
Iteration  12: 941439.073 ops/s
Iteration  13: 947708.463 ops/s
Iteration  14: 940625.649 ops/s
Iteration  15: 945668.046 ops/s
Iteration  16: 940529.939 ops/s
Iteration  17: 944911.457 ops/s
Iteration  18: 951752.081 ops/s
Iteration  19: 945845.218 ops/s
Iteration  20: 942232.351 ops/s
Iteration  21: 945119.447 ops/s
Iteration  22: 941894.638 ops/s
Iteration  23: 947731.253 ops/s
Iteration  24: 940596.165 ops/s
Iteration  25: 943194.962 ops/s
Iteration  26: 942913.097 ops/s
Iteration  27: 945658.445 ops/s
Iteration  28: 946725.804 ops/s
Iteration  29: 942842.221 ops/s
Iteration  30: 943595.163 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSkipCancelWhenSecondBuffer":
  944927.647 ±(99.9%) 2037.804 ops/s [Average]
  (min, avg, max) = (940529.939, 944927.647, 952396.841), stdev = 3050.089
  CI (99.9%): [942889.843, 946965.451] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_timedSkipCancelWhenSecondBuffer  thrpt   30  944927.647 ± 2037.804  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 531747.177 ops/s
# Warmup Iteration   2: 637620.410 ops/s
# Warmup Iteration   3: 633386.220 ops/s
# Warmup Iteration   4: 688218.119 ops/s
# Warmup Iteration   5: 692642.445 ops/s
# Warmup Iteration   6: 700297.075 ops/s
# Warmup Iteration   7: 697589.188 ops/s
# Warmup Iteration   8: 698294.505 ops/s
# Warmup Iteration   9: 694503.626 ops/s
# Warmup Iteration  10: 696466.415 ops/s
# Warmup Iteration  11: 696263.121 ops/s
# Warmup Iteration  12: 695834.309 ops/s
# Warmup Iteration  13: 696358.867 ops/s
# Warmup Iteration  14: 691895.026 ops/s
# Warmup Iteration  15: 691926.661 ops/s
# Warmup Iteration  16: 694171.604 ops/s
# Warmup Iteration  17: 722920.596 ops/s
# Warmup Iteration  18: 722013.797 ops/s
# Warmup Iteration  19: 716212.588 ops/s
# Warmup Iteration  20: 720517.517 ops/s
# Warmup Iteration  21: 721372.640 ops/s
# Warmup Iteration  22: 719704.937 ops/s
# Warmup Iteration  23: 721994.174 ops/s
# Warmup Iteration  24: 720673.474 ops/s
# Warmup Iteration  25: 721180.981 ops/s
# Warmup Iteration  26: 720758.722 ops/s
# Warmup Iteration  27: 724658.542 ops/s
# Warmup Iteration  28: 720021.032 ops/s
# Warmup Iteration  29: 717716.256 ops/s
# Warmup Iteration  30: 719796.218 ops/s
Iteration   1: 723322.806 ops/s
Iteration   2: 724849.775 ops/s
Iteration   3: 719530.743 ops/s
Iteration   4: 720417.161 ops/s
Iteration   5: 721298.627 ops/s
Iteration   6: 722541.759 ops/s
Iteration   7: 720499.122 ops/s
Iteration   8: 722844.266 ops/s
Iteration   9: 722410.566 ops/s
Iteration  10: 720259.887 ops/s
Iteration  11: 721587.854 ops/s
Iteration  12: 720731.321 ops/s
Iteration  13: 723468.570 ops/s
Iteration  14: 723461.310 ops/s
Iteration  15: 721475.482 ops/s
Iteration  16: 722091.039 ops/s
Iteration  17: 722067.490 ops/s
Iteration  18: 721662.906 ops/s
Iteration  19: 718528.314 ops/s
Iteration  20: 722474.194 ops/s
Iteration  21: 720173.671 ops/s
Iteration  22: 720892.027 ops/s
Iteration  23: 722076.076 ops/s
Iteration  24: 720795.963 ops/s
Iteration  25: 717987.760 ops/s
Iteration  26: 723214.412 ops/s
Iteration  27: 723443.240 ops/s
Iteration  28: 723579.062 ops/s
Iteration  29: 722669.581 ops/s
Iteration  30: 718330.567 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe":
  721622.852 ±(99.9%) 1123.360 ops/s [Average]
  (min, avg, max) = (717987.760, 721622.852, 724849.775), stdev = 1681.392
  CI (99.9%): [720499.492, 722746.212] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableMaterializeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  721622.852 ± 1123.360  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 536001.947 ops/s
# Warmup Iteration   2: 657319.824 ops/s
# Warmup Iteration   3: 615388.346 ops/s
# Warmup Iteration   4: 703482.719 ops/s
# Warmup Iteration   5: 714191.816 ops/s
# Warmup Iteration   6: 711666.392 ops/s
# Warmup Iteration   7: 713089.734 ops/s
# Warmup Iteration   8: 713459.134 ops/s
# Warmup Iteration   9: 711715.909 ops/s
# Warmup Iteration  10: 712775.779 ops/s
# Warmup Iteration  11: 713278.062 ops/s
# Warmup Iteration  12: 711208.601 ops/s
# Warmup Iteration  13: 711029.180 ops/s
# Warmup Iteration  14: 712665.079 ops/s
# Warmup Iteration  15: 709588.144 ops/s
# Warmup Iteration  16: 711256.977 ops/s
# Warmup Iteration  17: 744330.097 ops/s
# Warmup Iteration  18: 740701.560 ops/s
# Warmup Iteration  19: 737830.968 ops/s
# Warmup Iteration  20: 742717.605 ops/s
# Warmup Iteration  21: 741408.424 ops/s
# Warmup Iteration  22: 740657.510 ops/s
# Warmup Iteration  23: 738522.887 ops/s
# Warmup Iteration  24: 740486.883 ops/s
# Warmup Iteration  25: 739277.212 ops/s
# Warmup Iteration  26: 741474.553 ops/s
# Warmup Iteration  27: 739779.805 ops/s
# Warmup Iteration  28: 739277.036 ops/s
# Warmup Iteration  29: 740476.593 ops/s
# Warmup Iteration  30: 742392.160 ops/s
Iteration   1: 741394.905 ops/s
Iteration   2: 738225.257 ops/s
Iteration   3: 739149.040 ops/s
Iteration   4: 741267.315 ops/s
Iteration   5: 742697.808 ops/s
Iteration   6: 740886.216 ops/s
Iteration   7: 740032.736 ops/s
Iteration   8: 742287.998 ops/s
Iteration   9: 740427.982 ops/s
Iteration  10: 738550.902 ops/s
Iteration  11: 733608.921 ops/s
Iteration  12: 742706.302 ops/s
Iteration  13: 741413.954 ops/s
Iteration  14: 738800.729 ops/s
Iteration  15: 740203.765 ops/s
Iteration  16: 738062.534 ops/s
Iteration  17: 738847.535 ops/s
Iteration  18: 739161.573 ops/s
Iteration  19: 742074.092 ops/s
Iteration  20: 740384.346 ops/s
Iteration  21: 736965.382 ops/s
Iteration  22: 743151.390 ops/s
Iteration  23: 742410.121 ops/s
Iteration  24: 739454.133 ops/s
Iteration  25: 739275.494 ops/s
Iteration  26: 742068.844 ops/s
Iteration  27: 740147.667 ops/s
Iteration  28: 740552.550 ops/s
Iteration  29: 738012.050 ops/s
Iteration  30: 740371.248 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDetachTest._Benchmark.benchmark_doubleOnSubscribe":
  740086.426 ±(99.9%) 1354.170 ops/s [Average]
  (min, avg, max) = (733608.921, 740086.426, 743151.390), stdev = 2026.858
  CI (99.9%): [738732.256, 741440.596] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableDetachTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  740086.426 ± 1354.170  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteCrashConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteCrashConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53686.999 ops/s
# Warmup Iteration   2: 247108.033 ops/s
# Warmup Iteration   3: 335955.437 ops/s
# Warmup Iteration   4: 362084.436 ops/s
# Warmup Iteration   5: 364255.450 ops/s
# Warmup Iteration   6: 363023.792 ops/s
# Warmup Iteration   7: 362287.413 ops/s
# Warmup Iteration   8: 362249.727 ops/s
# Warmup Iteration   9: 359891.058 ops/s
# Warmup Iteration  10: 360911.982 ops/s
# Warmup Iteration  11: 360607.145 ops/s
# Warmup Iteration  12: 360446.555 ops/s
# Warmup Iteration  13: 362323.792 ops/s
# Warmup Iteration  14: 361465.664 ops/s
# Warmup Iteration  15: 361171.610 ops/s
# Warmup Iteration  16: 357261.721 ops/s
# Warmup Iteration  17: 361795.819 ops/s
# Warmup Iteration  18: 361707.393 ops/s
# Warmup Iteration  19: 364902.511 ops/s
# Warmup Iteration  20: 364106.156 ops/s
# Warmup Iteration  21: 363382.321 ops/s
# Warmup Iteration  22: 359455.043 ops/s
# Warmup Iteration  23: 363333.969 ops/s
# Warmup Iteration  24: 362351.323 ops/s
# Warmup Iteration  25: 362159.534 ops/s
# Warmup Iteration  26: 363659.326 ops/s
# Warmup Iteration  27: 362522.455 ops/s
# Warmup Iteration  28: 362112.369 ops/s
# Warmup Iteration  29: 357493.622 ops/s
# Warmup Iteration  30: 362185.715 ops/s
Iteration   1: 360733.760 ops/s
Iteration   2: 363223.735 ops/s
Iteration   3: 364785.659 ops/s
Iteration   4: 361286.786 ops/s
Iteration   5: 364756.042 ops/s
Iteration   6: 362436.590 ops/s
Iteration   7: 363730.028 ops/s
Iteration   8: 363504.060 ops/s
Iteration   9: 362137.113 ops/s
Iteration  10: 364565.592 ops/s
Iteration  11: 361986.401 ops/s
Iteration  12: 358698.124 ops/s
Iteration  13: 362390.928 ops/s
Iteration  14: 361663.708 ops/s
Iteration  15: 362817.150 ops/s
Iteration  16: 364257.324 ops/s
Iteration  17: 362777.771 ops/s
Iteration  18: 363659.934 ops/s
Iteration  19: 362600.089 ops/s
Iteration  20: 362930.944 ops/s
Iteration  21: 363564.005 ops/s
Iteration  22: 364127.637 ops/s
Iteration  23: 364432.781 ops/s
Iteration  24: 364112.698 ops/s
Iteration  25: 365185.331 ops/s
Iteration  26: 361398.760 ops/s
Iteration  27: 360386.249 ops/s
Iteration  28: 364343.837 ops/s
Iteration  29: 361534.321 ops/s
Iteration  30: 362951.257 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnEachTest._Benchmark.benchmark_onCompleteCrashConditional":
  362899.287 ±(99.9%) 1002.949 ops/s [Average]
  (min, avg, max) = (358698.124, 362899.287, 365185.331), stdev = 1501.167
  CI (99.9%): [361896.338, 363902.236] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableDoOnEachTest._Benchmark.benchmark_onCompleteCrashConditional  thrpt   30  362899.287 ± 1002.949  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58390.379 ops/s
# Warmup Iteration   2: 175294.929 ops/s
# Warmup Iteration   3: 182698.095 ops/s
# Warmup Iteration   4: 275289.812 ops/s
# Warmup Iteration   5: 336898.418 ops/s
# Warmup Iteration   6: 335286.824 ops/s
# Warmup Iteration   7: 335063.264 ops/s
# Warmup Iteration   8: 336173.072 ops/s
# Warmup Iteration   9: 333820.276 ops/s
# Warmup Iteration  10: 332392.917 ops/s
# Warmup Iteration  11: 332909.511 ops/s
# Warmup Iteration  12: 333973.657 ops/s
# Warmup Iteration  13: 331675.951 ops/s
# Warmup Iteration  14: 334266.043 ops/s
# Warmup Iteration  15: 333750.940 ops/s
# Warmup Iteration  16: 333238.318 ops/s
# Warmup Iteration  17: 337476.600 ops/s
# Warmup Iteration  18: 338724.386 ops/s
# Warmup Iteration  19: 337565.400 ops/s
# Warmup Iteration  20: 338649.333 ops/s
# Warmup Iteration  21: 337320.587 ops/s
# Warmup Iteration  22: 338308.985 ops/s
# Warmup Iteration  23: 338203.958 ops/s
# Warmup Iteration  24: 338151.476 ops/s
# Warmup Iteration  25: 338538.063 ops/s
# Warmup Iteration  26: 339456.132 ops/s
# Warmup Iteration  27: 340433.096 ops/s
# Warmup Iteration  28: 338787.394 ops/s
# Warmup Iteration  29: 337576.951 ops/s
# Warmup Iteration  30: 338700.085 ops/s
Iteration   1: 337478.620 ops/s
Iteration   2: 338807.026 ops/s
Iteration   3: 339724.994 ops/s
Iteration   4: 337946.566 ops/s
Iteration   5: 338297.884 ops/s
Iteration   6: 337972.674 ops/s
Iteration   7: 337639.794 ops/s
Iteration   8: 336339.658 ops/s
Iteration   9: 338377.284 ops/s
Iteration  10: 338206.280 ops/s
Iteration  11: 339210.521 ops/s
Iteration  12: 339196.666 ops/s
Iteration  13: 338351.698 ops/s
Iteration  14: 336878.593 ops/s
Iteration  15: 336715.204 ops/s
Iteration  16: 338787.511 ops/s
Iteration  17: 339121.591 ops/s
Iteration  18: 337268.043 ops/s
Iteration  19: 338331.463 ops/s
Iteration  20: 338910.978 ops/s
Iteration  21: 339331.097 ops/s
Iteration  22: 339347.803 ops/s
Iteration  23: 338504.062 ops/s
Iteration  24: 339079.591 ops/s
Iteration  25: 337436.638 ops/s
Iteration  26: 336357.495 ops/s
Iteration  27: 339143.972 ops/s
Iteration  28: 338442.827 ops/s
Iteration  29: 337738.496 ops/s
Iteration  30: 337560.847 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMapTest._Benchmark.benchmark_doubleOnSubscribe":
  338216.863 ±(99.9%) 616.890 ops/s [Average]
  (min, avg, max) = (336339.658, 338216.863, 339724.994), stdev = 923.332
  CI (99.9%): [337599.972, 338833.753] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
ObservableMapTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  338216.863 ± 616.890  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDefaultObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDefaultObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 298965.638 ops/s
# Warmup Iteration   2: 388211.359 ops/s
# Warmup Iteration   3: 426459.866 ops/s
# Warmup Iteration   4: 433491.952 ops/s
# Warmup Iteration   5: 443770.156 ops/s
# Warmup Iteration   6: 443375.784 ops/s
# Warmup Iteration   7: 442386.670 ops/s
# Warmup Iteration   8: 443013.626 ops/s
# Warmup Iteration   9: 442698.654 ops/s
# Warmup Iteration  10: 443729.056 ops/s
# Warmup Iteration  11: 445750.458 ops/s
# Warmup Iteration  12: 442281.640 ops/s
# Warmup Iteration  13: 443797.604 ops/s
# Warmup Iteration  14: 444972.689 ops/s
# Warmup Iteration  15: 441933.059 ops/s
# Warmup Iteration  16: 442551.528 ops/s
# Warmup Iteration  17: 455549.220 ops/s
# Warmup Iteration  18: 458448.036 ops/s
# Warmup Iteration  19: 455663.475 ops/s
# Warmup Iteration  20: 454242.692 ops/s
# Warmup Iteration  21: 455159.228 ops/s
# Warmup Iteration  22: 458017.053 ops/s
# Warmup Iteration  23: 456145.410 ops/s
# Warmup Iteration  24: 453441.663 ops/s
# Warmup Iteration  25: 454724.372 ops/s
# Warmup Iteration  26: 455146.643 ops/s
# Warmup Iteration  27: 454833.845 ops/s
# Warmup Iteration  28: 460080.975 ops/s
# Warmup Iteration  29: 458356.903 ops/s
# Warmup Iteration  30: 455975.762 ops/s
Iteration   1: 456705.442 ops/s
Iteration   2: 453089.979 ops/s
Iteration   3: 454744.078 ops/s
Iteration   4: 456409.892 ops/s
Iteration   5: 453551.013 ops/s
Iteration   6: 455229.132 ops/s
Iteration   7: 455652.024 ops/s
Iteration   8: 455765.690 ops/s
Iteration   9: 454562.217 ops/s
Iteration  10: 451596.050 ops/s
Iteration  11: 458258.999 ops/s
Iteration  12: 454601.009 ops/s
Iteration  13: 452686.028 ops/s
Iteration  14: 458085.849 ops/s
Iteration  15: 454900.029 ops/s
Iteration  16: 453590.213 ops/s
Iteration  17: 452363.901 ops/s
Iteration  18: 454476.974 ops/s
Iteration  19: 455983.058 ops/s
Iteration  20: 453495.569 ops/s
Iteration  21: 454358.624 ops/s
Iteration  22: 455846.438 ops/s
Iteration  23: 457831.923 ops/s
Iteration  24: 457167.191 ops/s
Iteration  25: 452912.471 ops/s
Iteration  26: 456979.063 ops/s
Iteration  27: 454008.416 ops/s
Iteration  28: 456907.088 ops/s
Iteration  29: 454788.443 ops/s
Iteration  30: 454301.587 ops/s


Result "io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDefaultObserver":
  455028.280 ±(99.9%) 1169.817 ops/s [Average]
  (min, avg, max) = (451596.050, 455028.280, 458258.999), stdev = 1750.926
  CI (99.9%): [453858.463, 456198.096] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDefaultObserver  thrpt   30  455028.280 ± 1169.817  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 285635.726 ops/s
# Warmup Iteration   2: 386885.749 ops/s
# Warmup Iteration   3: 422185.297 ops/s
# Warmup Iteration   4: 428364.426 ops/s
# Warmup Iteration   5: 440568.578 ops/s
# Warmup Iteration   6: 438066.184 ops/s
# Warmup Iteration   7: 439673.763 ops/s
# Warmup Iteration   8: 440782.774 ops/s
# Warmup Iteration   9: 440897.924 ops/s
# Warmup Iteration  10: 440080.085 ops/s
# Warmup Iteration  11: 438797.261 ops/s
# Warmup Iteration  12: 438400.865 ops/s
# Warmup Iteration  13: 438198.081 ops/s
# Warmup Iteration  14: 440599.887 ops/s
# Warmup Iteration  15: 441377.682 ops/s
# Warmup Iteration  16: 434233.919 ops/s
# Warmup Iteration  17: 449488.921 ops/s
# Warmup Iteration  18: 450864.320 ops/s
# Warmup Iteration  19: 451591.088 ops/s
# Warmup Iteration  20: 451365.219 ops/s
# Warmup Iteration  21: 450531.721 ops/s
# Warmup Iteration  22: 451567.295 ops/s
# Warmup Iteration  23: 448896.620 ops/s
# Warmup Iteration  24: 452290.670 ops/s
# Warmup Iteration  25: 452138.746 ops/s
# Warmup Iteration  26: 446994.986 ops/s
# Warmup Iteration  27: 450287.262 ops/s
# Warmup Iteration  28: 458302.877 ops/s
# Warmup Iteration  29: 453359.086 ops/s
# Warmup Iteration  30: 452524.581 ops/s
Iteration   1: 449120.995 ops/s
Iteration   2: 452588.829 ops/s
Iteration   3: 454857.464 ops/s
Iteration   4: 450235.917 ops/s
Iteration   5: 450729.378 ops/s
Iteration   6: 451347.538 ops/s
Iteration   7: 450327.988 ops/s
Iteration   8: 452246.219 ops/s
Iteration   9: 450338.807 ops/s
Iteration  10: 450930.214 ops/s
Iteration  11: 452584.179 ops/s
Iteration  12: 451979.977 ops/s
Iteration  13: 450901.964 ops/s
Iteration  14: 451371.992 ops/s
Iteration  15: 446153.693 ops/s
Iteration  16: 450902.855 ops/s
Iteration  17: 448260.320 ops/s
Iteration  18: 452873.265 ops/s
Iteration  19: 453190.581 ops/s
Iteration  20: 451639.751 ops/s
Iteration  21: 454022.568 ops/s
Iteration  22: 450700.112 ops/s
Iteration  23: 451259.344 ops/s
Iteration  24: 452899.727 ops/s
Iteration  25: 450669.921 ops/s
Iteration  26: 453085.098 ops/s
Iteration  27: 447487.565 ops/s
Iteration  28: 452706.112 ops/s
Iteration  29: 452681.935 ops/s
Iteration  30: 453364.535 ops/s


Result "io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableObserver":
  451381.961 ±(99.9%) 1266.114 ops/s [Average]
  (min, avg, max) = (446153.693, 451381.961, 454857.464), stdev = 1895.060
  CI (99.9%): [450115.847, 452648.076] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableObserver  thrpt   30  451381.961 ± 1266.114  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 236564.295 ops/s
# Warmup Iteration   2: 292970.249 ops/s
# Warmup Iteration   3: 291268.343 ops/s
# Warmup Iteration   4: 314772.943 ops/s
# Warmup Iteration   5: 318537.721 ops/s
# Warmup Iteration   6: 317499.852 ops/s
# Warmup Iteration   7: 318000.391 ops/s
# Warmup Iteration   8: 317218.550 ops/s
# Warmup Iteration   9: 316186.163 ops/s
# Warmup Iteration  10: 318517.823 ops/s
# Warmup Iteration  11: 316518.471 ops/s
# Warmup Iteration  12: 316619.754 ops/s
# Warmup Iteration  13: 316922.233 ops/s
# Warmup Iteration  14: 315869.731 ops/s
# Warmup Iteration  15: 317125.120 ops/s
# Warmup Iteration  16: 315972.916 ops/s
# Warmup Iteration  17: 328575.821 ops/s
# Warmup Iteration  18: 327756.270 ops/s
# Warmup Iteration  19: 328876.414 ops/s
# Warmup Iteration  20: 327854.874 ops/s
# Warmup Iteration  21: 325464.779 ops/s
# Warmup Iteration  22: 327588.465 ops/s
# Warmup Iteration  23: 328993.171 ops/s
# Warmup Iteration  24: 327815.636 ops/s
# Warmup Iteration  25: 327869.735 ops/s
# Warmup Iteration  26: 327407.864 ops/s
# Warmup Iteration  27: 327985.392 ops/s
# Warmup Iteration  28: 328283.217 ops/s
# Warmup Iteration  29: 328065.832 ops/s
# Warmup Iteration  30: 327467.766 ops/s
Iteration   1: 329426.369 ops/s
Iteration   2: 329445.872 ops/s
Iteration   3: 328338.466 ops/s
Iteration   4: 327611.862 ops/s
Iteration   5: 328344.452 ops/s
Iteration   6: 330450.036 ops/s
Iteration   7: 329635.393 ops/s
Iteration   8: 329113.013 ops/s
Iteration   9: 328133.964 ops/s
Iteration  10: 328016.691 ops/s
Iteration  11: 327489.949 ops/s
Iteration  12: 326492.537 ops/s
Iteration  13: 328754.624 ops/s
Iteration  14: 326184.782 ops/s
Iteration  15: 327611.923 ops/s
Iteration  16: 326854.136 ops/s
Iteration  17: 327204.678 ops/s
Iteration  18: 329255.291 ops/s
Iteration  19: 328595.324 ops/s
Iteration  20: 327082.381 ops/s
Iteration  21: 327047.815 ops/s
Iteration  22: 328169.548 ops/s
Iteration  23: 328322.530 ops/s
Iteration  24: 329001.379 ops/s
Iteration  25: 327261.058 ops/s
Iteration  26: 328898.931 ops/s
Iteration  27: 330166.320 ops/s
Iteration  28: 328203.539 ops/s
Iteration  29: 328660.096 ops/s
Iteration  30: 327751.603 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe":
  328250.819 ±(99.9%) 706.730 ops/s [Average]
  (min, avg, max) = (326184.782, 328250.819, 330450.036), stdev = 1057.801
  CI (99.9%): [327544.088, 328957.549] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score     Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  328250.819 ± 706.730  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 234098.817 ops/s
# Warmup Iteration   2: 303280.248 ops/s
# Warmup Iteration   3: 293226.058 ops/s
# Warmup Iteration   4: 326227.868 ops/s
# Warmup Iteration   5: 330112.309 ops/s
# Warmup Iteration   6: 330864.060 ops/s
# Warmup Iteration   7: 329069.200 ops/s
# Warmup Iteration   8: 329229.276 ops/s
# Warmup Iteration   9: 329428.198 ops/s
# Warmup Iteration  10: 328041.738 ops/s
# Warmup Iteration  11: 328672.289 ops/s
# Warmup Iteration  12: 327977.826 ops/s
# Warmup Iteration  13: 327643.221 ops/s
# Warmup Iteration  14: 329973.026 ops/s
# Warmup Iteration  15: 328897.805 ops/s
# Warmup Iteration  16: 328082.523 ops/s
# Warmup Iteration  17: 339945.442 ops/s
# Warmup Iteration  18: 339346.019 ops/s
# Warmup Iteration  19: 337937.881 ops/s
# Warmup Iteration  20: 339242.278 ops/s
# Warmup Iteration  21: 340465.470 ops/s
# Warmup Iteration  22: 340074.200 ops/s
# Warmup Iteration  23: 341485.403 ops/s
# Warmup Iteration  24: 341128.565 ops/s
# Warmup Iteration  25: 340180.260 ops/s
# Warmup Iteration  26: 342027.023 ops/s
# Warmup Iteration  27: 339836.192 ops/s
# Warmup Iteration  28: 341341.455 ops/s
# Warmup Iteration  29: 341424.835 ops/s
# Warmup Iteration  30: 341017.790 ops/s
Iteration   1: 343102.727 ops/s
Iteration   2: 340796.360 ops/s
Iteration   3: 341258.575 ops/s
Iteration   4: 341355.909 ops/s
Iteration   5: 340651.366 ops/s
Iteration   6: 342351.724 ops/s
Iteration   7: 341050.836 ops/s
Iteration   8: 341702.596 ops/s
Iteration   9: 341239.582 ops/s
Iteration  10: 341269.251 ops/s
Iteration  11: 341831.981 ops/s
Iteration  12: 340928.587 ops/s
Iteration  13: 343014.631 ops/s
Iteration  14: 342343.714 ops/s
Iteration  15: 340205.844 ops/s
Iteration  16: 340640.434 ops/s
Iteration  17: 342298.595 ops/s
Iteration  18: 341202.168 ops/s
Iteration  19: 340703.818 ops/s
Iteration  20: 343078.348 ops/s
Iteration  21: 340808.584 ops/s
Iteration  22: 342402.969 ops/s
Iteration  23: 343064.581 ops/s
Iteration  24: 342079.614 ops/s
Iteration  25: 341125.607 ops/s
Iteration  26: 341865.635 ops/s
Iteration  27: 342407.840 ops/s
Iteration  28: 339523.606 ops/s
Iteration  29: 343992.788 ops/s
Iteration  30: 342250.639 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_badSource":
  341684.964 ±(99.9%) 673.766 ops/s [Average]
  (min, avg, max) = (339523.606, 341684.964, 343992.788), stdev = 1008.461
  CI (99.9%): [341011.198, 342358.730] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score     Error  Units
ObservableTakeUntilPredicateTest._Benchmark.benchmark_badSource  thrpt   30  341684.964 ± 673.766  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_badSourceObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_badSourceObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216003.349 ops/s
# Warmup Iteration   2: 303147.746 ops/s
# Warmup Iteration   3: 291415.221 ops/s
# Warmup Iteration   4: 325378.858 ops/s
# Warmup Iteration   5: 330502.967 ops/s
# Warmup Iteration   6: 331075.776 ops/s
# Warmup Iteration   7: 330342.179 ops/s
# Warmup Iteration   8: 329384.574 ops/s
# Warmup Iteration   9: 328932.078 ops/s
# Warmup Iteration  10: 328263.279 ops/s
# Warmup Iteration  11: 327627.417 ops/s
# Warmup Iteration  12: 325499.712 ops/s
# Warmup Iteration  13: 327637.915 ops/s
# Warmup Iteration  14: 327981.799 ops/s
# Warmup Iteration  15: 327643.744 ops/s
# Warmup Iteration  16: 327611.467 ops/s
# Warmup Iteration  17: 339220.828 ops/s
# Warmup Iteration  18: 340728.453 ops/s
# Warmup Iteration  19: 340869.946 ops/s
# Warmup Iteration  20: 341635.506 ops/s
# Warmup Iteration  21: 340522.648 ops/s
# Warmup Iteration  22: 340630.259 ops/s
# Warmup Iteration  23: 339528.161 ops/s
# Warmup Iteration  24: 341237.646 ops/s
# Warmup Iteration  25: 340589.397 ops/s
# Warmup Iteration  26: 340036.631 ops/s
# Warmup Iteration  27: 340506.157 ops/s
# Warmup Iteration  28: 340612.070 ops/s
# Warmup Iteration  29: 341507.520 ops/s
# Warmup Iteration  30: 340646.776 ops/s
Iteration   1: 340870.719 ops/s
Iteration   2: 339610.926 ops/s
Iteration   3: 340323.843 ops/s
Iteration   4: 340770.300 ops/s
Iteration   5: 340203.768 ops/s
Iteration   6: 340068.012 ops/s
Iteration   7: 341888.560 ops/s
Iteration   8: 340502.676 ops/s
Iteration   9: 340276.449 ops/s
Iteration  10: 338286.420 ops/s
Iteration  11: 337642.828 ops/s
Iteration  12: 339437.198 ops/s
Iteration  13: 341492.402 ops/s
Iteration  14: 340679.189 ops/s
Iteration  15: 341199.432 ops/s
Iteration  16: 340286.486 ops/s
Iteration  17: 340294.323 ops/s
Iteration  18: 341336.426 ops/s
Iteration  19: 340970.378 ops/s
Iteration  20: 340703.475 ops/s
Iteration  21: 342054.834 ops/s
Iteration  22: 340527.053 ops/s
Iteration  23: 340350.180 ops/s
Iteration  24: 340924.642 ops/s
Iteration  25: 341410.073 ops/s
Iteration  26: 341421.017 ops/s
Iteration  27: 340709.594 ops/s
Iteration  28: 341545.592 ops/s
Iteration  29: 341078.781 ops/s
Iteration  30: 340767.392 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_badSourceObservable":
  340587.766 ±(99.9%) 628.264 ops/s [Average]
  (min, avg, max) = (337642.828, 340587.766, 342054.834), stdev = 940.355
  CI (99.9%): [339959.502, 341216.029] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score     Error  Units
ObservableElementAtTest._Benchmark.benchmark_badSourceObservable  thrpt   30  340587.766 ± 628.264  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_predicateThrowsSuppressOthers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_predicateThrowsSuppressOthers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 159879.259 ops/s
# Warmup Iteration   2: 214714.468 ops/s
# Warmup Iteration   3: 211889.533 ops/s
# Warmup Iteration   4: 236502.154 ops/s
# Warmup Iteration   5: 236936.893 ops/s
# Warmup Iteration   6: 236737.298 ops/s
# Warmup Iteration   7: 236758.612 ops/s
# Warmup Iteration   8: 236551.159 ops/s
# Warmup Iteration   9: 236423.069 ops/s
# Warmup Iteration  10: 236446.686 ops/s
# Warmup Iteration  11: 236870.752 ops/s
# Warmup Iteration  12: 236246.587 ops/s
# Warmup Iteration  13: 236527.009 ops/s
# Warmup Iteration  14: 234966.436 ops/s
# Warmup Iteration  15: 234353.433 ops/s
# Warmup Iteration  16: 235495.659 ops/s
# Warmup Iteration  17: 245554.087 ops/s
# Warmup Iteration  18: 244946.305 ops/s
# Warmup Iteration  19: 245059.792 ops/s
# Warmup Iteration  20: 244821.237 ops/s
# Warmup Iteration  21: 246188.430 ops/s
# Warmup Iteration  22: 246466.605 ops/s
# Warmup Iteration  23: 246456.923 ops/s
# Warmup Iteration  24: 242522.542 ops/s
# Warmup Iteration  25: 245504.943 ops/s
# Warmup Iteration  26: 245857.762 ops/s
# Warmup Iteration  27: 244655.339 ops/s
# Warmup Iteration  28: 246803.811 ops/s
# Warmup Iteration  29: 246682.037 ops/s
# Warmup Iteration  30: 246716.951 ops/s
Iteration   1: 245343.103 ops/s
Iteration   2: 245131.022 ops/s
Iteration   3: 245190.906 ops/s
Iteration   4: 245309.637 ops/s
Iteration   5: 245136.722 ops/s
Iteration   6: 246349.206 ops/s
Iteration   7: 246327.799 ops/s
Iteration   8: 245312.710 ops/s
Iteration   9: 245793.001 ops/s
Iteration  10: 245356.800 ops/s
Iteration  11: 244349.342 ops/s
Iteration  12: 243708.883 ops/s
Iteration  13: 245727.579 ops/s
Iteration  14: 245493.546 ops/s
Iteration  15: 244610.205 ops/s
Iteration  16: 245128.494 ops/s
Iteration  17: 246144.226 ops/s
Iteration  18: 245108.633 ops/s
Iteration  19: 244511.959 ops/s
Iteration  20: 245991.996 ops/s
Iteration  21: 246191.409 ops/s
Iteration  22: 244730.007 ops/s
Iteration  23: 246015.472 ops/s
Iteration  24: 244947.435 ops/s
Iteration  25: 245102.650 ops/s
Iteration  26: 244190.080 ops/s
Iteration  27: 244894.640 ops/s
Iteration  28: 246501.735 ops/s
Iteration  29: 246126.477 ops/s
Iteration  30: 244121.325 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAnyTest._Benchmark.benchmark_predicateThrowsSuppressOthers":
  245294.900 ±(99.9%) 483.528 ops/s [Average]
  (min, avg, max) = (243708.883, 245294.900, 246501.735), stdev = 723.722
  CI (99.9%): [244811.372, 245778.428] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
ObservableAnyTest._Benchmark.benchmark_predicateThrowsSuppressOthers  thrpt   30  245294.900 ± 483.528  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 108818.116 ops/s
# Warmup Iteration   2: 331862.305 ops/s
# Warmup Iteration   3: 122138.996 ops/s
# Warmup Iteration   4: 260103.380 ops/s
# Warmup Iteration   5: 303220.601 ops/s
# Warmup Iteration   6: 200556.130 ops/s
# Warmup Iteration   7: 303850.759 ops/s
# Warmup Iteration   8: 347941.631 ops/s
# Warmup Iteration   9: 372751.325 ops/s
# Warmup Iteration  10: 355388.375 ops/s
# Warmup Iteration  11: 231461.636 ops/s
# Warmup Iteration  12: 384244.367 ops/s
# Warmup Iteration  13: 374469.249 ops/s
# Warmup Iteration  14: 118656.408 ops/s
# Warmup Iteration  15: 242845.380 ops/s
# Warmup Iteration  16: 143731.553 ops/s
# Warmup Iteration  17: 121283.243 ops/s
# Warmup Iteration  18: 113255.631 ops/s
# Warmup Iteration  19: 347104.797 ops/s
# Warmup Iteration  20: 392416.309 ops/s
# Warmup Iteration  21: 373813.090 ops/s
# Warmup Iteration  22: 361000.526 ops/s
# Warmup Iteration  23: 218735.772 ops/s
# Warmup Iteration  24: 407056.809 ops/s
# Warmup Iteration  25: 403444.281 ops/s
# Warmup Iteration  26: 396037.926 ops/s
# Warmup Iteration  27: 343906.974 ops/s
# Warmup Iteration  28: 373125.030 ops/s
# Warmup Iteration  29: 356080.110 ops/s
# Warmup Iteration  30: 361065.146 ops/s
Iteration   1: 373006.156 ops/s
Iteration   2: 361164.503 ops/s
Iteration   3: 126582.914 ops/s
Iteration   4: 117555.266 ops/s
Iteration   5: 225301.382 ops/s
Iteration   6: 375374.226 ops/s
Iteration   7: 385583.657 ops/s
Iteration   8: 385316.832 ops/s
Iteration   9: 368578.369 ops/s
Iteration  10: 313441.087 ops/s
Iteration  11: 109601.186 ops/s
Iteration  12: 116041.350 ops/s
Iteration  13: 118279.302 ops/s
Iteration  14: 133447.261 ops/s
Iteration  15: 280798.799 ops/s
Iteration  16: 393202.625 ops/s
Iteration  17: 373850.543 ops/s
Iteration  18: 370003.131 ops/s
Iteration  19: 150606.588 ops/s
Iteration  20: 114697.096 ops/s
Iteration  21: 123739.641 ops/s
Iteration  22: 115207.612 ops/s
Iteration  23: 114777.463 ops/s
Iteration  24: 179476.190 ops/s
Iteration  25: 115839.711 ops/s
Iteration  26: 105715.293 ops/s
Iteration  27: 293265.391 ops/s
Iteration  28: 367066.327 ops/s
Iteration  29: 371961.500 ops/s
Iteration  30: 372476.669 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normal":
  245065.269 ±(99.9%) 80427.493 ops/s [Average]
  (min, avg, max) = (105715.293, 245065.269, 393202.625), stdev = 120380.094
  CI (99.9%): [164637.776, 325492.762] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
MaybeTimeoutTest._Benchmark.benchmark_normal  thrpt   30  245065.269 ± 80427.493  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalMaybeFallback$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalMaybeFallback

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93778.886 ops/s
# Warmup Iteration   2: 197441.553 ops/s
# Warmup Iteration   3: 380889.883 ops/s
# Warmup Iteration   4: 315442.876 ops/s
# Warmup Iteration   5: 117940.972 ops/s
# Warmup Iteration   6: 114254.429 ops/s
# Warmup Iteration   7: 112384.761 ops/s
# Warmup Iteration   8: 372972.033 ops/s
# Warmup Iteration   9: 385953.072 ops/s
# Warmup Iteration  10: 357185.315 ops/s
# Warmup Iteration  11: 379155.327 ops/s
# Warmup Iteration  12: 365821.884 ops/s
# Warmup Iteration  13: 336619.521 ops/s
# Warmup Iteration  14: 383526.314 ops/s
# Warmup Iteration  15: 380762.356 ops/s
# Warmup Iteration  16: 367509.783 ops/s
# Warmup Iteration  17: 375872.643 ops/s
# Warmup Iteration  18: 363736.691 ops/s
# Warmup Iteration  19: 362905.725 ops/s
# Warmup Iteration  20: 374284.548 ops/s
# Warmup Iteration  21: 349222.939 ops/s
# Warmup Iteration  22: 370760.404 ops/s
# Warmup Iteration  23: 348024.852 ops/s
# Warmup Iteration  24: 374048.312 ops/s
# Warmup Iteration  25: 365537.679 ops/s
# Warmup Iteration  26: 369062.084 ops/s
# Warmup Iteration  27: 384780.448 ops/s
# Warmup Iteration  28: 366625.487 ops/s
# Warmup Iteration  29: 370342.022 ops/s
# Warmup Iteration  30: 325374.002 ops/s
Iteration   1: 340743.574 ops/s
Iteration   2: 357525.540 ops/s
Iteration   3: 370159.531 ops/s
Iteration   4: 325749.059 ops/s
Iteration   5: 343864.992 ops/s
Iteration   6: 374644.339 ops/s
Iteration   7: 367044.558 ops/s
Iteration   8: 184162.985 ops/s
Iteration   9: 341562.829 ops/s
Iteration  10: 330196.380 ops/s
Iteration  11: 336379.233 ops/s
Iteration  12: 382094.438 ops/s
Iteration  13: 385894.619 ops/s
Iteration  14: 367180.278 ops/s
Iteration  15: 381515.156 ops/s
Iteration  16: 365189.879 ops/s
Iteration  17: 359121.446 ops/s
Iteration  18: 373129.429 ops/s
Iteration  19: 379935.518 ops/s
Iteration  20: 363249.449 ops/s
Iteration  21: 374385.700 ops/s
Iteration  22: 375444.330 ops/s
Iteration  23: 128142.196 ops/s
Iteration  24: 258161.988 ops/s
Iteration  25: 377774.159 ops/s
Iteration  26: 373262.787 ops/s
Iteration  27: 371186.587 ops/s
Iteration  28: 389561.990 ops/s
Iteration  29: 370178.756 ops/s
Iteration  30: 367935.176 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalMaybeFallback":
  347179.230 ±(99.9%) 38930.561 ops/s [Average]
  (min, avg, max) = (128142.196, 347179.230, 389561.990), stdev = 58269.435
  CI (99.9%): [308248.669, 386109.791] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
MaybeTimeoutTest._Benchmark.benchmark_normalMaybeFallback  thrpt   30  347179.230 ± 38930.561  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 545456.128 ops/s
# Warmup Iteration   2: 660834.404 ops/s
# Warmup Iteration   3: 618834.330 ops/s
# Warmup Iteration   4: 709475.370 ops/s
# Warmup Iteration   5: 723068.187 ops/s
# Warmup Iteration   6: 719339.249 ops/s
# Warmup Iteration   7: 720296.234 ops/s
# Warmup Iteration   8: 723643.172 ops/s
# Warmup Iteration   9: 720447.273 ops/s
# Warmup Iteration  10: 722038.071 ops/s
# Warmup Iteration  11: 722311.196 ops/s
# Warmup Iteration  12: 719511.601 ops/s
# Warmup Iteration  13: 719983.508 ops/s
# Warmup Iteration  14: 720299.707 ops/s
# Warmup Iteration  15: 719816.061 ops/s
# Warmup Iteration  16: 721393.367 ops/s
# Warmup Iteration  17: 751419.948 ops/s
# Warmup Iteration  18: 751312.030 ops/s
# Warmup Iteration  19: 752466.369 ops/s
# Warmup Iteration  20: 745253.358 ops/s
# Warmup Iteration  21: 747618.400 ops/s
# Warmup Iteration  22: 746965.878 ops/s
# Warmup Iteration  23: 749044.623 ops/s
# Warmup Iteration  24: 744619.291 ops/s
# Warmup Iteration  25: 744567.872 ops/s
# Warmup Iteration  26: 751558.149 ops/s
# Warmup Iteration  27: 748903.876 ops/s
# Warmup Iteration  28: 744979.954 ops/s
# Warmup Iteration  29: 748164.246 ops/s
# Warmup Iteration  30: 745395.699 ops/s
Iteration   1: 747215.009 ops/s
Iteration   2: 746377.514 ops/s
Iteration   3: 749770.844 ops/s
Iteration   4: 745699.641 ops/s
Iteration   5: 745735.347 ops/s
Iteration   6: 748368.823 ops/s
Iteration   7: 746953.501 ops/s
Iteration   8: 749121.282 ops/s
Iteration   9: 749101.707 ops/s
Iteration  10: 746860.508 ops/s
Iteration  11: 751124.981 ops/s
Iteration  12: 749661.371 ops/s
Iteration  13: 749668.814 ops/s
Iteration  14: 749053.131 ops/s
Iteration  15: 748855.308 ops/s
Iteration  16: 748613.834 ops/s
Iteration  17: 744917.353 ops/s
Iteration  18: 751948.473 ops/s
Iteration  19: 754071.627 ops/s
Iteration  20: 751001.521 ops/s
Iteration  21: 751673.353 ops/s
Iteration  22: 750901.311 ops/s
Iteration  23: 747556.268 ops/s
Iteration  24: 748455.948 ops/s
Iteration  25: 745144.166 ops/s
Iteration  26: 748878.668 ops/s
Iteration  27: 747693.211 ops/s
Iteration  28: 746855.107 ops/s
Iteration  29: 750388.117 ops/s
Iteration  30: 748413.422 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimestampTest._Benchmark.benchmark_doubleOnSubscribe":
  748669.339 ±(99.9%) 1443.552 ops/s [Average]
  (min, avg, max) = (744917.353, 748669.339, 754071.627), stdev = 2160.641
  CI (99.9%): [747225.786, 750112.891] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MaybeTimestampTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  748669.339 ± 1443.552  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_doubleOnXTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_doubleOnXTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 158785.791 ops/s
# Warmup Iteration   2: 209429.567 ops/s
# Warmup Iteration   3: 229371.093 ops/s
# Warmup Iteration   4: 232285.191 ops/s
# Warmup Iteration   5: 235380.769 ops/s
# Warmup Iteration   6: 237229.381 ops/s
# Warmup Iteration   7: 236369.483 ops/s
# Warmup Iteration   8: 235399.370 ops/s
# Warmup Iteration   9: 234136.142 ops/s
# Warmup Iteration  10: 235636.319 ops/s
# Warmup Iteration  11: 235460.527 ops/s
# Warmup Iteration  12: 235713.103 ops/s
# Warmup Iteration  13: 235771.694 ops/s
# Warmup Iteration  14: 234928.200 ops/s
# Warmup Iteration  15: 234216.864 ops/s
# Warmup Iteration  16: 236564.036 ops/s
# Warmup Iteration  17: 246268.281 ops/s
# Warmup Iteration  18: 246570.945 ops/s
# Warmup Iteration  19: 246180.343 ops/s
# Warmup Iteration  20: 246808.882 ops/s
# Warmup Iteration  21: 246723.677 ops/s
# Warmup Iteration  22: 246107.804 ops/s
# Warmup Iteration  23: 246713.520 ops/s
# Warmup Iteration  24: 246396.578 ops/s
# Warmup Iteration  25: 247163.104 ops/s
# Warmup Iteration  26: 246512.778 ops/s
# Warmup Iteration  27: 246528.063 ops/s
# Warmup Iteration  28: 245558.206 ops/s
# Warmup Iteration  29: 247228.643 ops/s
# Warmup Iteration  30: 245985.977 ops/s
Iteration   1: 246202.221 ops/s
Iteration   2: 247143.979 ops/s
Iteration   3: 247068.232 ops/s
Iteration   4: 246333.046 ops/s
Iteration   5: 246795.146 ops/s
Iteration   6: 246711.261 ops/s
Iteration   7: 246017.977 ops/s
Iteration   8: 246990.361 ops/s
Iteration   9: 247014.363 ops/s
Iteration  10: 246493.399 ops/s
Iteration  11: 246696.965 ops/s
Iteration  12: 246610.729 ops/s
Iteration  13: 246498.501 ops/s
Iteration  14: 246016.059 ops/s
Iteration  15: 245937.166 ops/s
Iteration  16: 245847.760 ops/s
Iteration  17: 246421.706 ops/s
Iteration  18: 246879.603 ops/s
Iteration  19: 246430.768 ops/s
Iteration  20: 245781.406 ops/s
Iteration  21: 245939.737 ops/s
Iteration  22: 245705.170 ops/s
Iteration  23: 245513.985 ops/s
Iteration  24: 246153.702 ops/s
Iteration  25: 246627.187 ops/s
Iteration  26: 246243.830 ops/s
Iteration  27: 245925.959 ops/s
Iteration  28: 245139.638 ops/s
Iteration  29: 247309.452 ops/s
Iteration  30: 245471.372 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_doubleOnXTime":
  246330.689 ±(99.9%) 363.306 ops/s [Average]
  (min, avg, max) = (245139.638, 246330.689, 247309.452), stdev = 543.779
  CI (99.9%): [245967.384, 246693.995] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score     Error  Units
ObservableRefCountTest._Benchmark.benchmark_doubleOnXTime  thrpt   30  246330.689 ± 363.306  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85550.096 ops/s
# Warmup Iteration   2: 59578.722 ops/s
# Warmup Iteration   3: 129266.575 ops/s
# Warmup Iteration   4: 1391.559 ops/s
# Warmup Iteration   5: 22329.699 ops/s
# Warmup Iteration   6: 9959.468 ops/s
# Warmup Iteration   7: 15466.784 ops/s
# Warmup Iteration   8: 4484.498 ops/s
# Warmup Iteration   9: 15479.204 ops/s
# Warmup Iteration  10: 4133.953 ops/s
# Warmup Iteration  11: 17356.929 ops/s
# Warmup Iteration  12: 4311.891 ops/s
# Warmup Iteration  13: 16410.937 ops/s
# Warmup Iteration  14: 2807.418 ops/s
# Warmup Iteration  15: 17033.563 ops/s
# Warmup Iteration  16: 4295.379 ops/s
# Warmup Iteration  17: 15462.529 ops/s
# Warmup Iteration  18: 4446.034 ops/s
# Warmup Iteration  19: 15992.841 ops/s
# Warmup Iteration  20: 4409.775 ops/s
# Warmup Iteration  21: 12974.280 ops/s
# Warmup Iteration  22: 5778.187 ops/s
# Warmup Iteration  23: 14249.975 ops/s
# Warmup Iteration  24: 5693.130 ops/s
# Warmup Iteration  25: 16217.348 ops/s
# Warmup Iteration  26: 5354.746 ops/s
# Warmup Iteration  27: 15389.625 ops/s
# Warmup Iteration  28: 4581.792 ops/s
# Warmup Iteration  29: 15273.760 ops/s
# Warmup Iteration  30: 4339.897 ops/s
Iteration   1: 16071.444 ops/s
Iteration   2: 3921.358 ops/s
Iteration   3: 17649.062 ops/s
Iteration   4: 3666.646 ops/s
Iteration   5: 6659.241 ops/s
Iteration   6: 6670.377 ops/s
Iteration   7: 8219.900 ops/s
Iteration   8: 6827.466 ops/s
Iteration   9: 7252.874 ops/s
Iteration  10: 6847.609 ops/s
Iteration  11: 6655.697 ops/s
Iteration  12: 5750.599 ops/s
Iteration  13: 8089.846 ops/s
Iteration  14: 6131.911 ops/s
Iteration  15: 7047.624 ops/s
Iteration  16: 5902.398 ops/s
Iteration  17: 4413.093 ops/s
Iteration  18: 4036.714 ops/s
Iteration  19: 4054.967 ops/s
Iteration  20: 4433.337 ops/s
Iteration  21: 3718.570 ops/s
Iteration  22: 3429.158 ops/s
Iteration  23: 3371.941 ops/s
Iteration  24: 5006.889 ops/s
Iteration  25: 3946.691 ops/s
Iteration  26: 4315.557 ops/s
Iteration  27: 3841.349 ops/s
Iteration  28: 3285.381 ops/s
Iteration  29: 3579.398 ops/s
Iteration  30: 3790.096 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_doubleOnSubscribe":
  5952.906 ±(99.9%) 2232.299 ops/s [Average]
  (min, avg, max) = (3285.381, 5952.906, 17649.062), stdev = 3341.201
  CI (99.9%): [3720.607, 8185.206] (assumes normal distribution)


# Run complete. Total time: 00:01:38

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt     Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  5952.906 ± 2232.299  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onErrorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onErrorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 412765.652 ops/s
# Warmup Iteration   2: 451544.106 ops/s
# Warmup Iteration   3: 448749.381 ops/s
# Warmup Iteration   4: 479695.891 ops/s
# Warmup Iteration   5: 482238.359 ops/s
# Warmup Iteration   6: 482351.527 ops/s
# Warmup Iteration   7: 482616.700 ops/s
# Warmup Iteration   8: 481200.951 ops/s
# Warmup Iteration   9: 480095.728 ops/s
# Warmup Iteration  10: 481720.273 ops/s
# Warmup Iteration  11: 482978.372 ops/s
# Warmup Iteration  12: 481365.569 ops/s
# Warmup Iteration  13: 481322.476 ops/s
# Warmup Iteration  14: 480584.261 ops/s
# Warmup Iteration  15: 479778.235 ops/s
# Warmup Iteration  16: 479556.463 ops/s
# Warmup Iteration  17: 504693.411 ops/s
# Warmup Iteration  18: 504588.398 ops/s
# Warmup Iteration  19: 507472.230 ops/s
# Warmup Iteration  20: 504379.515 ops/s
# Warmup Iteration  21: 506907.543 ops/s
# Warmup Iteration  22: 505317.788 ops/s
# Warmup Iteration  23: 504909.303 ops/s
# Warmup Iteration  24: 507348.750 ops/s
# Warmup Iteration  25: 508091.393 ops/s
# Warmup Iteration  26: 504670.990 ops/s
# Warmup Iteration  27: 502750.061 ops/s
# Warmup Iteration  28: 505462.628 ops/s
# Warmup Iteration  29: 505954.719 ops/s
# Warmup Iteration  30: 506579.230 ops/s
Iteration   1: 502422.615 ops/s
Iteration   2: 504294.335 ops/s
Iteration   3: 507738.750 ops/s
Iteration   4: 507216.245 ops/s
Iteration   5: 505744.232 ops/s
Iteration   6: 505786.467 ops/s
Iteration   7: 507029.017 ops/s
Iteration   8: 506706.772 ops/s
Iteration   9: 505829.101 ops/s
Iteration  10: 506617.391 ops/s
Iteration  11: 505167.420 ops/s
Iteration  12: 506797.336 ops/s
Iteration  13: 507918.839 ops/s
Iteration  14: 507617.611 ops/s
Iteration  15: 505903.924 ops/s
Iteration  16: 505375.780 ops/s
Iteration  17: 507194.065 ops/s
Iteration  18: 505395.883 ops/s
Iteration  19: 505961.210 ops/s
Iteration  20: 505467.306 ops/s
Iteration  21: 506231.245 ops/s
Iteration  22: 506981.124 ops/s
Iteration  23: 504350.128 ops/s
Iteration  24: 508819.906 ops/s
Iteration  25: 505127.475 ops/s
Iteration  26: 501428.812 ops/s
Iteration  27: 507238.239 ops/s
Iteration  28: 509671.647 ops/s
Iteration  29: 508257.627 ops/s
Iteration  30: 507223.565 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCreateTest._Benchmark.benchmark_onErrorThrows":
  506250.469 ±(99.9%) 1146.951 ops/s [Average]
  (min, avg, max) = (501428.812, 506250.469, 509671.647), stdev = 1716.703
  CI (99.9%): [505103.518, 507397.420] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
MaybeCreateTest._Benchmark.benchmark_onErrorThrows  thrpt   30  506250.469 ± 1146.951  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 709960.080 ops/s
# Warmup Iteration   2: 789506.515 ops/s
# Warmup Iteration   3: 861534.494 ops/s
# Warmup Iteration   4: 883064.402 ops/s
# Warmup Iteration   5: 885121.494 ops/s
# Warmup Iteration   6: 883205.945 ops/s
# Warmup Iteration   7: 881958.494 ops/s
# Warmup Iteration   8: 881122.556 ops/s
# Warmup Iteration   9: 882701.758 ops/s
# Warmup Iteration  10: 884430.237 ops/s
# Warmup Iteration  11: 882452.604 ops/s
# Warmup Iteration  12: 881452.472 ops/s
# Warmup Iteration  13: 876653.291 ops/s
# Warmup Iteration  14: 876344.593 ops/s
# Warmup Iteration  15: 880338.881 ops/s
# Warmup Iteration  16: 877008.625 ops/s
# Warmup Iteration  17: 931317.252 ops/s
# Warmup Iteration  18: 938701.113 ops/s
# Warmup Iteration  19: 929649.599 ops/s
# Warmup Iteration  20: 936271.566 ops/s
# Warmup Iteration  21: 933696.091 ops/s
# Warmup Iteration  22: 932666.117 ops/s
# Warmup Iteration  23: 930681.577 ops/s
# Warmup Iteration  24: 933246.695 ops/s
# Warmup Iteration  25: 936213.209 ops/s
# Warmup Iteration  26: 936115.390 ops/s
# Warmup Iteration  27: 931820.708 ops/s
# Warmup Iteration  28: 933045.936 ops/s
# Warmup Iteration  29: 930493.959 ops/s
# Warmup Iteration  30: 932185.627 ops/s
Iteration   1: 930553.798 ops/s
Iteration   2: 933903.740 ops/s
Iteration   3: 933721.980 ops/s
Iteration   4: 929953.881 ops/s
Iteration   5: 929708.438 ops/s
Iteration   6: 937501.923 ops/s
Iteration   7: 930389.493 ops/s
Iteration   8: 930599.430 ops/s
Iteration   9: 932609.149 ops/s
Iteration  10: 937559.423 ops/s
Iteration  11: 936754.781 ops/s
Iteration  12: 933548.287 ops/s
Iteration  13: 931801.555 ops/s
Iteration  14: 929909.607 ops/s
Iteration  15: 935752.320 ops/s
Iteration  16: 933870.718 ops/s
Iteration  17: 933533.530 ops/s
Iteration  18: 908172.201 ops/s
Iteration  19: 933614.603 ops/s
Iteration  20: 933016.193 ops/s
Iteration  21: 936174.590 ops/s
Iteration  22: 931709.474 ops/s
Iteration  23: 932027.986 ops/s
Iteration  24: 935100.234 ops/s
Iteration  25: 933379.428 ops/s
Iteration  26: 930733.258 ops/s
Iteration  27: 933054.494 ops/s
Iteration  28: 928242.010 ops/s
Iteration  29: 930428.793 ops/s
Iteration  30: 931655.659 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCallableTest._Benchmark.benchmark_fromCallableThrows":
  931966.033 ±(99.9%) 3405.345 ops/s [Average]
  (min, avg, max) = (908172.201, 931966.033, 937559.423), stdev = 5096.960
  CI (99.9%): [928560.688, 935371.377] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeFromCallableTest._Benchmark.benchmark_fromCallableThrows  thrpt   30  931966.033 ± 3405.345  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_cancelWhileRunning$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_cancelWhileRunning

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6419529.442 ops/s
# Warmup Iteration   2: 8192520.696 ops/s
# Warmup Iteration   3: 9303937.718 ops/s
# Warmup Iteration   4: 9263477.667 ops/s
# Warmup Iteration   5: 9253325.340 ops/s
# Warmup Iteration   6: 9247763.475 ops/s
# Warmup Iteration   7: 9272568.746 ops/s
# Warmup Iteration   8: 9319020.673 ops/s
# Warmup Iteration   9: 9276423.725 ops/s
# Warmup Iteration  10: 9262118.222 ops/s
# Warmup Iteration  11: 9272670.893 ops/s
# Warmup Iteration  12: 9268129.748 ops/s
# Warmup Iteration  13: 9265129.231 ops/s
# Warmup Iteration  14: 9250442.203 ops/s
# Warmup Iteration  15: 9296170.852 ops/s
# Warmup Iteration  16: 9276442.231 ops/s
# Warmup Iteration  17: 9285980.347 ops/s
# Warmup Iteration  18: 9295673.306 ops/s
# Warmup Iteration  19: 9307719.253 ops/s
# Warmup Iteration  20: 9284390.325 ops/s
# Warmup Iteration  21: 9264791.270 ops/s
# Warmup Iteration  22: 9303979.600 ops/s
# Warmup Iteration  23: 9239557.336 ops/s
# Warmup Iteration  24: 9289846.761 ops/s
# Warmup Iteration  25: 9281354.676 ops/s
# Warmup Iteration  26: 9299295.828 ops/s
# Warmup Iteration  27: 9308229.470 ops/s
# Warmup Iteration  28: 9248255.654 ops/s
# Warmup Iteration  29: 9300714.680 ops/s
# Warmup Iteration  30: 9282637.283 ops/s
Iteration   1: 9281023.633 ops/s
Iteration   2: 9272127.703 ops/s
Iteration   3: 9307701.273 ops/s
Iteration   4: 9295054.424 ops/s
Iteration   5: 9284867.196 ops/s
Iteration   6: 9314728.447 ops/s
Iteration   7: 9245372.769 ops/s
Iteration   8: 9301533.548 ops/s
Iteration   9: 9287678.546 ops/s
Iteration  10: 9261386.228 ops/s
Iteration  11: 9287199.524 ops/s
Iteration  12: 9312379.801 ops/s
Iteration  13: 9251231.691 ops/s
Iteration  14: 9241168.474 ops/s
Iteration  15: 9303409.535 ops/s
Iteration  16: 9252843.678 ops/s
Iteration  17: 9302694.363 ops/s
Iteration  18: 9259625.175 ops/s
Iteration  19: 9285573.106 ops/s
Iteration  20: 9283618.036 ops/s
Iteration  21: 9281547.853 ops/s
Iteration  22: 9322819.973 ops/s
Iteration  23: 9268866.977 ops/s
Iteration  24: 9289023.424 ops/s
Iteration  25: 9278178.975 ops/s
Iteration  26: 9243301.413 ops/s
Iteration  27: 9283412.683 ops/s
Iteration  28: 9262159.161 ops/s
Iteration  29: 9290281.484 ops/s
Iteration  30: 9339582.085 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_cancelWhileRunning":
  9283013.039 ±(99.9%) 16249.855 ops/s [Average]
  (min, avg, max) = (9241168.474, 9283013.039, 9339582.085), stdev = 24322.020
  CI (99.9%): [9266763.184, 9299262.894] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MaybeFromActionTest._Benchmark.benchmark_cancelWhileRunning  thrpt   30  9283013.039 ± 16249.855  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_cancelWhileRunning$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_cancelWhileRunning

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6374906.937 ops/s
# Warmup Iteration   2: 8255160.471 ops/s
# Warmup Iteration   3: 9308392.197 ops/s
# Warmup Iteration   4: 9248514.987 ops/s
# Warmup Iteration   5: 9223239.996 ops/s
# Warmup Iteration   6: 9244895.568 ops/s
# Warmup Iteration   7: 9233505.536 ops/s
# Warmup Iteration   8: 9249649.728 ops/s
# Warmup Iteration   9: 9252996.024 ops/s
# Warmup Iteration  10: 9244431.559 ops/s
# Warmup Iteration  11: 9219568.972 ops/s
# Warmup Iteration  12: 9238713.327 ops/s
# Warmup Iteration  13: 9225460.071 ops/s
# Warmup Iteration  14: 9216855.408 ops/s
# Warmup Iteration  15: 9175303.664 ops/s
# Warmup Iteration  16: 9272972.591 ops/s
# Warmup Iteration  17: 9285998.899 ops/s
# Warmup Iteration  18: 9217865.901 ops/s
# Warmup Iteration  19: 9228331.673 ops/s
# Warmup Iteration  20: 9238338.468 ops/s
# Warmup Iteration  21: 9251997.630 ops/s
# Warmup Iteration  22: 9242377.861 ops/s
# Warmup Iteration  23: 9234332.346 ops/s
# Warmup Iteration  24: 9211423.915 ops/s
# Warmup Iteration  25: 9240757.963 ops/s
# Warmup Iteration  26: 9255927.208 ops/s
# Warmup Iteration  27: 9261320.791 ops/s
# Warmup Iteration  28: 9214049.800 ops/s
# Warmup Iteration  29: 9237527.353 ops/s
# Warmup Iteration  30: 9228001.477 ops/s
Iteration   1: 9219901.164 ops/s
Iteration   2: 9236272.991 ops/s
Iteration   3: 9252064.174 ops/s
Iteration   4: 9229085.201 ops/s
Iteration   5: 9223635.669 ops/s
Iteration   6: 9265726.292 ops/s
Iteration   7: 9215445.744 ops/s
Iteration   8: 9218041.616 ops/s
Iteration   9: 9277315.230 ops/s
Iteration  10: 9244984.543 ops/s
Iteration  11: 9226783.970 ops/s
Iteration  12: 9196998.217 ops/s
Iteration  13: 9239000.947 ops/s
Iteration  14: 9222303.361 ops/s
Iteration  15: 9245899.424 ops/s
Iteration  16: 9221959.929 ops/s
Iteration  17: 9183871.049 ops/s
Iteration  18: 9257036.400 ops/s
Iteration  19: 9261590.308 ops/s
Iteration  20: 9224657.729 ops/s
Iteration  21: 9248431.291 ops/s
Iteration  22: 9261841.886 ops/s
Iteration  23: 9256365.161 ops/s
Iteration  24: 9221915.702 ops/s
Iteration  25: 9186346.680 ops/s
Iteration  26: 9260476.970 ops/s
Iteration  27: 9275875.611 ops/s
Iteration  28: 9232070.853 ops/s
Iteration  29: 9214165.969 ops/s
Iteration  30: 9222938.384 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_cancelWhileRunning":
  9234766.749 ±(99.9%) 16120.297 ops/s [Average]
  (min, avg, max) = (9183871.049, 9234766.749, 9277315.230), stdev = 24128.103
  CI (99.9%): [9218646.452, 9250887.046] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MaybeFromRunnableTest._Benchmark.benchmark_cancelWhileRunning  thrpt   30  9234766.749 ± 16120.297  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7616104.809 ops/s
# Warmup Iteration   2: 9991120.004 ops/s
# Warmup Iteration   3: 11451743.511 ops/s
# Warmup Iteration   4: 11436576.405 ops/s
# Warmup Iteration   5: 11399002.465 ops/s
# Warmup Iteration   6: 11418476.893 ops/s
# Warmup Iteration   7: 11425228.587 ops/s
# Warmup Iteration   8: 11350133.573 ops/s
# Warmup Iteration   9: 11411085.768 ops/s
# Warmup Iteration  10: 11493668.945 ops/s
# Warmup Iteration  11: 11358183.753 ops/s
# Warmup Iteration  12: 11429671.491 ops/s
# Warmup Iteration  13: 11390111.544 ops/s
# Warmup Iteration  14: 11449955.011 ops/s
# Warmup Iteration  15: 11433537.265 ops/s
# Warmup Iteration  16: 11388188.692 ops/s
# Warmup Iteration  17: 11395810.738 ops/s
# Warmup Iteration  18: 11359127.271 ops/s
# Warmup Iteration  19: 11392421.177 ops/s
# Warmup Iteration  20: 11397470.211 ops/s
# Warmup Iteration  21: 11389085.409 ops/s
# Warmup Iteration  22: 11386157.097 ops/s
# Warmup Iteration  23: 11338723.626 ops/s
# Warmup Iteration  24: 11348675.936 ops/s
# Warmup Iteration  25: 11344033.563 ops/s
# Warmup Iteration  26: 11423637.606 ops/s
# Warmup Iteration  27: 11352254.972 ops/s
# Warmup Iteration  28: 11362681.889 ops/s
# Warmup Iteration  29: 11431505.154 ops/s
# Warmup Iteration  30: 11366284.154 ops/s
Iteration   1: 11324518.404 ops/s
Iteration   2: 11383908.631 ops/s
Iteration   3: 11365383.056 ops/s
Iteration   4: 11357012.008 ops/s
Iteration   5: 11356917.633 ops/s
Iteration   6: 11371214.042 ops/s
Iteration   7: 11347902.079 ops/s
Iteration   8: 11389725.639 ops/s
Iteration   9: 11381126.644 ops/s
Iteration  10: 11326325.797 ops/s
Iteration  11: 11421165.524 ops/s
Iteration  12: 11363898.087 ops/s
Iteration  13: 11411635.036 ops/s
Iteration  14: 11380465.385 ops/s
Iteration  15: 11397570.403 ops/s
Iteration  16: 11340873.102 ops/s
Iteration  17: 11399615.757 ops/s
Iteration  18: 11362202.801 ops/s
Iteration  19: 11327263.599 ops/s
Iteration  20: 11399673.418 ops/s
Iteration  21: 11404287.431 ops/s
Iteration  22: 11393956.379 ops/s
Iteration  23: 11349298.947 ops/s
Iteration  24: 11345294.218 ops/s
Iteration  25: 11372169.973 ops/s
Iteration  26: 11351362.772 ops/s
Iteration  27: 11429890.438 ops/s
Iteration  28: 11378975.151 ops/s
Iteration  29: 11334647.339 ops/s
Iteration  30: 11375439.995 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnable":
  11371457.323 ±(99.9%) 18941.169 ops/s [Average]
  (min, avg, max) = (11324518.404, 11371457.323, 11429890.438), stdev = 28350.252
  CI (99.9%): [11352516.154, 11390398.492] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
MaybeFromRunnableTest._Benchmark.benchmark_fromRunnable  thrpt   30  11371457.323 ± 18941.169  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromAction$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromAction

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7666501.161 ops/s
# Warmup Iteration   2: 9952832.719 ops/s
# Warmup Iteration   3: 11390496.159 ops/s
# Warmup Iteration   4: 11367440.850 ops/s
# Warmup Iteration   5: 11370980.034 ops/s
# Warmup Iteration   6: 11320811.486 ops/s
# Warmup Iteration   7: 11299449.460 ops/s
# Warmup Iteration   8: 11328882.185 ops/s
# Warmup Iteration   9: 11305646.269 ops/s
# Warmup Iteration  10: 11365349.724 ops/s
# Warmup Iteration  11: 11357151.145 ops/s
# Warmup Iteration  12: 11388773.114 ops/s
# Warmup Iteration  13: 11389094.795 ops/s
# Warmup Iteration  14: 11334421.025 ops/s
# Warmup Iteration  15: 11272297.948 ops/s
# Warmup Iteration  16: 11350926.528 ops/s
# Warmup Iteration  17: 11347756.841 ops/s
# Warmup Iteration  18: 11285741.239 ops/s
# Warmup Iteration  19: 11285208.804 ops/s
# Warmup Iteration  20: 11343407.941 ops/s
# Warmup Iteration  21: 11292107.640 ops/s
# Warmup Iteration  22: 11294460.172 ops/s
# Warmup Iteration  23: 11287803.340 ops/s
# Warmup Iteration  24: 11336528.317 ops/s
# Warmup Iteration  25: 11312202.116 ops/s
# Warmup Iteration  26: 11336459.230 ops/s
# Warmup Iteration  27: 11281213.377 ops/s
# Warmup Iteration  28: 11245933.340 ops/s
# Warmup Iteration  29: 11309550.043 ops/s
# Warmup Iteration  30: 11316812.342 ops/s
Iteration   1: 11313412.063 ops/s
Iteration   2: 11327860.502 ops/s
Iteration   3: 11310097.632 ops/s
Iteration   4: 11328964.127 ops/s
Iteration   5: 11220767.027 ops/s
Iteration   6: 11338488.773 ops/s
Iteration   7: 11318747.776 ops/s
Iteration   8: 11339805.217 ops/s
Iteration   9: 11410718.138 ops/s
Iteration  10: 11248875.758 ops/s
Iteration  11: 11139673.685 ops/s
Iteration  12: 11275132.948 ops/s
Iteration  13: 11306644.466 ops/s
Iteration  14: 11356108.206 ops/s
Iteration  15: 11257259.553 ops/s
Iteration  16: 11365170.909 ops/s
Iteration  17: 11353357.359 ops/s
Iteration  18: 11295336.238 ops/s
Iteration  19: 11318973.517 ops/s
Iteration  20: 11350587.657 ops/s
Iteration  21: 11367981.831 ops/s
Iteration  22: 11304717.993 ops/s
Iteration  23: 11305418.882 ops/s
Iteration  24: 11334088.463 ops/s
Iteration  25: 11322917.947 ops/s
Iteration  26: 11211242.431 ops/s
Iteration  27: 11355158.300 ops/s
Iteration  28: 11283045.814 ops/s
Iteration  29: 11336887.229 ops/s
Iteration  30: 11325449.781 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromAction":
  11310763.007 ±(99.9%) 35945.311 ops/s [Average]
  (min, avg, max) = (11139673.685, 11310763.007, 11410718.138), stdev = 53801.254
  CI (99.9%): [11274817.696, 11346708.319] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score       Error  Units
MaybeFromActionTest._Benchmark.benchmark_fromAction  thrpt   30  11310763.007 ± 35945.311  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8344639.784 ops/s
# Warmup Iteration   2: 13501740.629 ops/s
# Warmup Iteration   3: 14342034.074 ops/s
# Warmup Iteration   4: 14237521.007 ops/s
# Warmup Iteration   5: 14374426.215 ops/s
# Warmup Iteration   6: 14296464.286 ops/s
# Warmup Iteration   7: 14287001.946 ops/s
# Warmup Iteration   8: 14420115.166 ops/s
# Warmup Iteration   9: 14417632.504 ops/s
# Warmup Iteration  10: 14347359.002 ops/s
# Warmup Iteration  11: 14250172.476 ops/s
# Warmup Iteration  12: 14409198.977 ops/s
# Warmup Iteration  13: 14397791.199 ops/s
# Warmup Iteration  14: 14240747.301 ops/s
# Warmup Iteration  15: 14347963.878 ops/s
# Warmup Iteration  16: 14435130.560 ops/s
# Warmup Iteration  17: 14365146.930 ops/s
# Warmup Iteration  18: 14372956.919 ops/s
# Warmup Iteration  19: 14278810.054 ops/s
# Warmup Iteration  20: 14428104.750 ops/s
# Warmup Iteration  21: 14314381.867 ops/s
# Warmup Iteration  22: 14383237.885 ops/s
# Warmup Iteration  23: 14407302.166 ops/s
# Warmup Iteration  24: 14341611.369 ops/s
# Warmup Iteration  25: 14001161.756 ops/s
# Warmup Iteration  26: 14341938.726 ops/s
# Warmup Iteration  27: 14374624.687 ops/s
# Warmup Iteration  28: 14371408.168 ops/s
# Warmup Iteration  29: 14173080.937 ops/s
# Warmup Iteration  30: 14361857.181 ops/s
Iteration   1: 14225049.912 ops/s
Iteration   2: 14363716.663 ops/s
Iteration   3: 14373955.632 ops/s
Iteration   4: 14378099.311 ops/s
Iteration   5: 14359727.351 ops/s
Iteration   6: 14290910.539 ops/s
Iteration   7: 14384454.830 ops/s
Iteration   8: 14408945.418 ops/s
Iteration   9: 14254596.206 ops/s
Iteration  10: 14299846.915 ops/s
Iteration  11: 14317396.989 ops/s
Iteration  12: 14403575.834 ops/s
Iteration  13: 14447625.016 ops/s
Iteration  14: 14369243.446 ops/s
Iteration  15: 14442592.497 ops/s
Iteration  16: 14371119.516 ops/s
Iteration  17: 14428251.189 ops/s
Iteration  18: 14335389.870 ops/s
Iteration  19: 14384816.604 ops/s
Iteration  20: 14391299.741 ops/s
Iteration  21: 14286549.715 ops/s
Iteration  22: 14373006.554 ops/s
Iteration  23: 14363846.441 ops/s
Iteration  24: 14377912.905 ops/s
Iteration  25: 14436137.496 ops/s
Iteration  26: 14302004.694 ops/s
Iteration  27: 14382600.902 ops/s
Iteration  28: 14369643.617 ops/s
Iteration  29: 14333391.271 ops/s
Iteration  30: 14339229.667 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy":
  14359831.225 ±(99.9%) 35813.406 ops/s [Average]
  (min, avg, max) = (14225049.912, 14359831.225, 14447625.016), stdev = 53603.825
  CI (99.9%): [14324017.818, 14395644.631] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableInvokesLazy  thrpt   30  14359831.225 ± 35813.406  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromActionInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromActionInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7680167.922 ops/s
# Warmup Iteration   2: 11393417.705 ops/s
# Warmup Iteration   3: 12194165.912 ops/s
# Warmup Iteration   4: 12127781.951 ops/s
# Warmup Iteration   5: 12092714.723 ops/s
# Warmup Iteration   6: 12175654.184 ops/s
# Warmup Iteration   7: 12076116.340 ops/s
# Warmup Iteration   8: 12101852.363 ops/s
# Warmup Iteration   9: 12181302.787 ops/s
# Warmup Iteration  10: 12120503.951 ops/s
# Warmup Iteration  11: 12121918.044 ops/s
# Warmup Iteration  12: 12145013.949 ops/s
# Warmup Iteration  13: 12154554.874 ops/s
# Warmup Iteration  14: 12103212.083 ops/s
# Warmup Iteration  15: 12116556.244 ops/s
# Warmup Iteration  16: 12098291.379 ops/s
# Warmup Iteration  17: 12174912.923 ops/s
# Warmup Iteration  18: 12161187.912 ops/s
# Warmup Iteration  19: 12149591.978 ops/s
# Warmup Iteration  20: 12197239.318 ops/s
# Warmup Iteration  21: 12184144.489 ops/s
# Warmup Iteration  22: 12197601.126 ops/s
# Warmup Iteration  23: 12178213.728 ops/s
# Warmup Iteration  24: 12192674.235 ops/s
# Warmup Iteration  25: 12183426.643 ops/s
# Warmup Iteration  26: 12165318.518 ops/s
# Warmup Iteration  27: 12227152.799 ops/s
# Warmup Iteration  28: 12132612.902 ops/s
# Warmup Iteration  29: 12189845.845 ops/s
# Warmup Iteration  30: 12135964.520 ops/s
Iteration   1: 12173689.632 ops/s
Iteration   2: 12181125.715 ops/s
Iteration   3: 12179668.525 ops/s
Iteration   4: 12154051.358 ops/s
Iteration   5: 12188410.860 ops/s
Iteration   6: 12169357.122 ops/s
Iteration   7: 12135679.915 ops/s
Iteration   8: 12134568.983 ops/s
Iteration   9: 12161278.214 ops/s
Iteration  10: 12139020.118 ops/s
Iteration  11: 12174209.494 ops/s
Iteration  12: 12157232.720 ops/s
Iteration  13: 12124220.899 ops/s
Iteration  14: 12216550.318 ops/s
Iteration  15: 12219714.607 ops/s
Iteration  16: 12217079.343 ops/s
Iteration  17: 12181542.625 ops/s
Iteration  18: 12209619.909 ops/s
Iteration  19: 12211782.552 ops/s
Iteration  20: 12235635.196 ops/s
Iteration  21: 12192774.358 ops/s
Iteration  22: 12166349.936 ops/s
Iteration  23: 12171243.811 ops/s
Iteration  24: 12193373.604 ops/s
Iteration  25: 12191075.508 ops/s
Iteration  26: 12194091.497 ops/s
Iteration  27: 12205076.246 ops/s
Iteration  28: 12155986.664 ops/s
Iteration  29: 12183932.021 ops/s
Iteration  30: 12209376.497 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromActionInvokesLazy":
  12180923.942 ±(99.9%) 18765.312 ops/s [Average]
  (min, avg, max) = (12124220.899, 12180923.942, 12235635.196), stdev = 28087.038
  CI (99.9%): [12162158.630, 12199689.254] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score       Error  Units
MaybeFromActionTest._Benchmark.benchmark_fromActionInvokesLazy  thrpt   30  12180923.942 ± 18765.312  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromActionTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromActionTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3761771.558 ops/s
# Warmup Iteration   2: 5246866.342 ops/s
# Warmup Iteration   3: 5938078.692 ops/s
# Warmup Iteration   4: 5938977.240 ops/s
# Warmup Iteration   5: 5942232.624 ops/s
# Warmup Iteration   6: 5944565.804 ops/s
# Warmup Iteration   7: 5961595.227 ops/s
# Warmup Iteration   8: 5951476.422 ops/s
# Warmup Iteration   9: 5952879.769 ops/s
# Warmup Iteration  10: 5933115.627 ops/s
# Warmup Iteration  11: 5967942.975 ops/s
# Warmup Iteration  12: 5982207.143 ops/s
# Warmup Iteration  13: 5950500.280 ops/s
# Warmup Iteration  14: 5979189.050 ops/s
# Warmup Iteration  15: 5976938.406 ops/s
# Warmup Iteration  16: 5987328.339 ops/s
# Warmup Iteration  17: 5965832.371 ops/s
# Warmup Iteration  18: 5974455.457 ops/s
# Warmup Iteration  19: 5973174.574 ops/s
# Warmup Iteration  20: 5946227.980 ops/s
# Warmup Iteration  21: 5932370.039 ops/s
# Warmup Iteration  22: 5977791.185 ops/s
# Warmup Iteration  23: 5966087.118 ops/s
# Warmup Iteration  24: 5950957.101 ops/s
# Warmup Iteration  25: 5945751.591 ops/s
# Warmup Iteration  26: 5926889.457 ops/s
# Warmup Iteration  27: 5931352.799 ops/s
# Warmup Iteration  28: 5925046.754 ops/s
# Warmup Iteration  29: 5955465.667 ops/s
# Warmup Iteration  30: 5950909.415 ops/s
Iteration   1: 5983186.134 ops/s
Iteration   2: 5948521.303 ops/s
Iteration   3: 5935864.555 ops/s
Iteration   4: 5957984.328 ops/s
Iteration   5: 5952193.682 ops/s
Iteration   6: 5934273.626 ops/s
Iteration   7: 5957196.488 ops/s
Iteration   8: 5938517.244 ops/s
Iteration   9: 5960754.402 ops/s
Iteration  10: 5936755.972 ops/s
Iteration  11: 5950211.618 ops/s
Iteration  12: 5921388.370 ops/s
Iteration  13: 5975728.005 ops/s
Iteration  14: 5921709.723 ops/s
Iteration  15: 5942418.298 ops/s
Iteration  16: 5949785.221 ops/s
Iteration  17: 5973962.185 ops/s
Iteration  18: 5940318.692 ops/s
Iteration  19: 5980958.645 ops/s
Iteration  20: 5931722.575 ops/s
Iteration  21: 5934926.148 ops/s
Iteration  22: 5926307.332 ops/s
Iteration  23: 5964194.648 ops/s
Iteration  24: 5946886.700 ops/s
Iteration  25: 5957350.149 ops/s
Iteration  26: 5974305.918 ops/s
Iteration  27: 5952189.745 ops/s
Iteration  28: 5938174.099 ops/s
Iteration  29: 5967626.697 ops/s
Iteration  30: 5957198.157 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromActionTest._Benchmark.benchmark_fromActionTwice":
  5950420.355 ±(99.9%) 11464.609 ops/s [Average]
  (min, avg, max) = (5921388.370, 5950420.355, 5983186.134), stdev = 17159.689
  CI (99.9%): [5938955.746, 5961884.965] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MaybeFromActionTest._Benchmark.benchmark_fromActionTwice  thrpt   30  5950420.355 ± 11464.609  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplier$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplier

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7739016.626 ops/s
# Warmup Iteration   2: 11581037.969 ops/s
# Warmup Iteration   3: 12214800.911 ops/s
# Warmup Iteration   4: 12155112.314 ops/s
# Warmup Iteration   5: 12204105.570 ops/s
# Warmup Iteration   6: 12176259.010 ops/s
# Warmup Iteration   7: 12131182.054 ops/s
# Warmup Iteration   8: 12183594.317 ops/s
# Warmup Iteration   9: 12120415.355 ops/s
# Warmup Iteration  10: 12245391.293 ops/s
# Warmup Iteration  11: 12143287.796 ops/s
# Warmup Iteration  12: 12161980.074 ops/s
# Warmup Iteration  13: 12167897.417 ops/s
# Warmup Iteration  14: 12152384.273 ops/s
# Warmup Iteration  15: 12145736.861 ops/s
# Warmup Iteration  16: 12167377.089 ops/s
# Warmup Iteration  17: 12176609.530 ops/s
# Warmup Iteration  18: 12138994.669 ops/s
# Warmup Iteration  19: 12238166.138 ops/s
# Warmup Iteration  20: 12142875.514 ops/s
# Warmup Iteration  21: 12198944.861 ops/s
# Warmup Iteration  22: 12143774.418 ops/s
# Warmup Iteration  23: 12179022.335 ops/s
# Warmup Iteration  24: 12118338.512 ops/s
# Warmup Iteration  25: 12250730.706 ops/s
# Warmup Iteration  26: 12117949.671 ops/s
# Warmup Iteration  27: 12192067.279 ops/s
# Warmup Iteration  28: 12178373.910 ops/s
# Warmup Iteration  29: 12210685.658 ops/s
# Warmup Iteration  30: 12195545.153 ops/s
Iteration   1: 12161341.798 ops/s
Iteration   2: 12219291.362 ops/s
Iteration   3: 12159820.619 ops/s
Iteration   4: 12191233.521 ops/s
Iteration   5: 12224877.410 ops/s
Iteration   6: 12181129.965 ops/s
Iteration   7: 12169271.483 ops/s
Iteration   8: 12220471.766 ops/s
Iteration   9: 12209353.971 ops/s
Iteration  10: 12165599.889 ops/s
Iteration  11: 12167927.126 ops/s
Iteration  12: 12203271.174 ops/s
Iteration  13: 12214836.363 ops/s
Iteration  14: 12188876.938 ops/s
Iteration  15: 12142359.250 ops/s
Iteration  16: 12178844.204 ops/s
Iteration  17: 12216877.394 ops/s
Iteration  18: 12197557.773 ops/s
Iteration  19: 12136805.231 ops/s
Iteration  20: 12135623.179 ops/s
Iteration  21: 12180640.674 ops/s
Iteration  22: 12186356.486 ops/s
Iteration  23: 12164812.313 ops/s
Iteration  24: 12177671.874 ops/s
Iteration  25: 12159909.238 ops/s
Iteration  26: 12157761.170 ops/s
Iteration  27: 12171977.318 ops/s
Iteration  28: 12211382.963 ops/s
Iteration  29: 12206794.730 ops/s
Iteration  30: 12147932.868 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplier":
  12181687.002 ±(99.9%) 17567.012 ops/s [Average]
  (min, avg, max) = (12135623.179, 12181687.002, 12224877.410), stdev = 26293.479
  CI (99.9%): [12164119.989, 12199254.014] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
MaybeFromSupplierTest._Benchmark.benchmark_fromSupplier  thrpt   30  12181687.002 ± 17567.012  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3825880.123 ops/s
# Warmup Iteration   2: 5457761.428 ops/s
# Warmup Iteration   3: 5975671.448 ops/s
# Warmup Iteration   4: 5950916.718 ops/s
# Warmup Iteration   5: 5947791.215 ops/s
# Warmup Iteration   6: 5976803.042 ops/s
# Warmup Iteration   7: 5992882.675 ops/s
# Warmup Iteration   8: 5961982.387 ops/s
# Warmup Iteration   9: 5969474.174 ops/s
# Warmup Iteration  10: 5964792.128 ops/s
# Warmup Iteration  11: 5968933.890 ops/s
# Warmup Iteration  12: 5963466.172 ops/s
# Warmup Iteration  13: 5968070.905 ops/s
# Warmup Iteration  14: 5963151.219 ops/s
# Warmup Iteration  15: 5970895.616 ops/s
# Warmup Iteration  16: 5950637.193 ops/s
# Warmup Iteration  17: 5940863.054 ops/s
# Warmup Iteration  18: 5867913.732 ops/s
# Warmup Iteration  19: 5895354.922 ops/s
# Warmup Iteration  20: 5969037.099 ops/s
# Warmup Iteration  21: 5921091.005 ops/s
# Warmup Iteration  22: 5967430.399 ops/s
# Warmup Iteration  23: 5936781.304 ops/s
# Warmup Iteration  24: 5946610.709 ops/s
# Warmup Iteration  25: 5949590.134 ops/s
# Warmup Iteration  26: 5907404.952 ops/s
# Warmup Iteration  27: 5921212.460 ops/s
# Warmup Iteration  28: 5985668.750 ops/s
# Warmup Iteration  29: 5941498.740 ops/s
# Warmup Iteration  30: 5973631.938 ops/s
Iteration   1: 5946265.323 ops/s
Iteration   2: 5954997.708 ops/s
Iteration   3: 5953528.729 ops/s
Iteration   4: 5972359.978 ops/s
Iteration   5: 5941870.309 ops/s
Iteration   6: 5966846.050 ops/s
Iteration   7: 5933687.753 ops/s
Iteration   8: 5953681.574 ops/s
Iteration   9: 5937652.269 ops/s
Iteration  10: 5933803.869 ops/s
Iteration  11: 5935018.359 ops/s
Iteration  12: 5960404.132 ops/s
Iteration  13: 5963001.565 ops/s
Iteration  14: 5906999.811 ops/s
Iteration  15: 5938107.294 ops/s
Iteration  16: 5969496.653 ops/s
Iteration  17: 5981193.327 ops/s
Iteration  18: 5945599.065 ops/s
Iteration  19: 5947846.809 ops/s
Iteration  20: 5915990.621 ops/s
Iteration  21: 5954354.393 ops/s
Iteration  22: 5930637.942 ops/s
Iteration  23: 5927126.750 ops/s
Iteration  24: 5930355.084 ops/s
Iteration  25: 5954628.027 ops/s
Iteration  26: 5941469.997 ops/s
Iteration  27: 5973773.174 ops/s
Iteration  28: 5958198.739 ops/s
Iteration  29: 5957178.126 ops/s
Iteration  30: 5911107.097 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableTwice":
  5946572.684 ±(99.9%) 12321.227 ops/s [Average]
  (min, avg, max) = (5906999.811, 5946572.684, 5981193.327), stdev = 18441.833
  CI (99.9%): [5934251.458, 5958893.911] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MaybeFromRunnableTest._Benchmark.benchmark_fromRunnableTwice  thrpt   30  5946572.684 ± 12321.227  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7501908.651 ops/s
# Warmup Iteration   2: 9953931.870 ops/s
# Warmup Iteration   3: 11323870.197 ops/s
# Warmup Iteration   4: 11345625.022 ops/s
# Warmup Iteration   5: 11263233.275 ops/s
# Warmup Iteration   6: 11308983.907 ops/s
# Warmup Iteration   7: 11305777.073 ops/s
# Warmup Iteration   8: 11252283.961 ops/s
# Warmup Iteration   9: 11291227.503 ops/s
# Warmup Iteration  10: 11323504.265 ops/s
# Warmup Iteration  11: 11281071.568 ops/s
# Warmup Iteration  12: 11325089.694 ops/s
# Warmup Iteration  13: 11298527.192 ops/s
# Warmup Iteration  14: 11355056.361 ops/s
# Warmup Iteration  15: 11310452.298 ops/s
# Warmup Iteration  16: 11312192.971 ops/s
# Warmup Iteration  17: 11066389.821 ops/s
# Warmup Iteration  18: 11242634.921 ops/s
# Warmup Iteration  19: 11309877.877 ops/s
# Warmup Iteration  20: 11288654.608 ops/s
# Warmup Iteration  21: 11249587.805 ops/s
# Warmup Iteration  22: 11234777.327 ops/s
# Warmup Iteration  23: 11267751.851 ops/s
# Warmup Iteration  24: 11255648.965 ops/s
# Warmup Iteration  25: 11288849.098 ops/s
# Warmup Iteration  26: 11275129.690 ops/s
# Warmup Iteration  27: 11340848.391 ops/s
# Warmup Iteration  28: 11271846.107 ops/s
# Warmup Iteration  29: 11254043.497 ops/s
# Warmup Iteration  30: 11228494.256 ops/s
Iteration   1: 11231102.421 ops/s
Iteration   2: 11317044.059 ops/s
Iteration   3: 11273940.438 ops/s
Iteration   4: 11242685.203 ops/s
Iteration   5: 11270524.181 ops/s
Iteration   6: 11259635.465 ops/s
Iteration   7: 11265569.663 ops/s
Iteration   8: 11343352.037 ops/s
Iteration   9: 11245264.529 ops/s
Iteration  10: 11281386.409 ops/s
Iteration  11: 11268163.183 ops/s
Iteration  12: 11263867.912 ops/s
Iteration  13: 11316710.602 ops/s
Iteration  14: 11263048.365 ops/s
Iteration  15: 11262777.785 ops/s
Iteration  16: 11236634.992 ops/s
Iteration  17: 11299752.506 ops/s
Iteration  18: 11269484.577 ops/s
Iteration  19: 11278315.383 ops/s
Iteration  20: 11279653.439 ops/s
Iteration  21: 11358535.588 ops/s
Iteration  22: 11275983.943 ops/s
Iteration  23: 11260641.905 ops/s
Iteration  24: 11256508.435 ops/s
Iteration  25: 11290293.131 ops/s
Iteration  26: 11306093.523 ops/s
Iteration  27: 11265297.134 ops/s
Iteration  28: 11252094.317 ops/s
Iteration  29: 11099551.611 ops/s
Iteration  30: 11300946.946 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierInvokesLazy":
  11271161.989 ±(99.9%) 29199.590 ops/s [Average]
  (min, avg, max) = (11099551.611, 11271161.989, 11358535.588), stdev = 43704.576
  CI (99.9%): [11241962.399, 11300361.580] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score       Error  Units
MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierInvokesLazy  thrpt   30  11271161.989 ± 29199.590  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3702228.622 ops/s
# Warmup Iteration   2: 5489738.213 ops/s
# Warmup Iteration   3: 5975056.932 ops/s
# Warmup Iteration   4: 5976742.129 ops/s
# Warmup Iteration   5: 5959374.890 ops/s
# Warmup Iteration   6: 5969563.865 ops/s
# Warmup Iteration   7: 5938796.932 ops/s
# Warmup Iteration   8: 5950840.408 ops/s
# Warmup Iteration   9: 5908773.914 ops/s
# Warmup Iteration  10: 5899065.452 ops/s
# Warmup Iteration  11: 5944196.158 ops/s
# Warmup Iteration  12: 5965591.368 ops/s
# Warmup Iteration  13: 5961599.171 ops/s
# Warmup Iteration  14: 5957664.314 ops/s
# Warmup Iteration  15: 5957063.753 ops/s
# Warmup Iteration  16: 5950476.023 ops/s
# Warmup Iteration  17: 5928143.168 ops/s
# Warmup Iteration  18: 5928228.538 ops/s
# Warmup Iteration  19: 5955736.836 ops/s
# Warmup Iteration  20: 5927299.728 ops/s
# Warmup Iteration  21: 5913642.985 ops/s
# Warmup Iteration  22: 5942292.492 ops/s
# Warmup Iteration  23: 5932579.218 ops/s
# Warmup Iteration  24: 5932311.651 ops/s
# Warmup Iteration  25: 5923230.942 ops/s
# Warmup Iteration  26: 5937216.820 ops/s
# Warmup Iteration  27: 5912666.235 ops/s
# Warmup Iteration  28: 5970463.332 ops/s
# Warmup Iteration  29: 5940183.952 ops/s
# Warmup Iteration  30: 5907526.738 ops/s
Iteration   1: 5948742.892 ops/s
Iteration   2: 5958114.643 ops/s
Iteration   3: 5954392.143 ops/s
Iteration   4: 5965450.090 ops/s
Iteration   5: 5928930.135 ops/s
Iteration   6: 5964711.327 ops/s
Iteration   7: 5932720.217 ops/s
Iteration   8: 5907718.297 ops/s
Iteration   9: 5961811.939 ops/s
Iteration  10: 5961738.189 ops/s
Iteration  11: 5941929.796 ops/s
Iteration  12: 5944203.941 ops/s
Iteration  13: 5921940.823 ops/s
Iteration  14: 5943041.492 ops/s
Iteration  15: 5960646.307 ops/s
Iteration  16: 5935284.724 ops/s
Iteration  17: 5955614.870 ops/s
Iteration  18: 5948648.710 ops/s
Iteration  19: 5926137.494 ops/s
Iteration  20: 5965283.006 ops/s
Iteration  21: 5948104.523 ops/s
Iteration  22: 5929300.113 ops/s
Iteration  23: 5955197.194 ops/s
Iteration  24: 5952038.348 ops/s
Iteration  25: 5946178.647 ops/s
Iteration  26: 5957539.461 ops/s
Iteration  27: 5921797.663 ops/s
Iteration  28: 5934062.922 ops/s
Iteration  29: 5936754.065 ops/s
Iteration  30: 5940856.476 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierTwice":
  5944963.015 ±(99.9%) 10027.135 ops/s [Average]
  (min, avg, max) = (5907718.297, 5944963.015, 5965450.090), stdev = 15008.144
  CI (99.9%): [5934935.880, 5954990.150] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
MaybeFromSupplierTest._Benchmark.benchmark_fromSupplierTwice  thrpt   30  5944963.015 ± 10027.135  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_success$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_success

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6029155.758 ops/s
# Warmup Iteration   2: 7890085.403 ops/s
# Warmup Iteration   3: 9003036.132 ops/s
# Warmup Iteration   4: 8928522.748 ops/s
# Warmup Iteration   5: 8950225.295 ops/s
# Warmup Iteration   6: 8971637.192 ops/s
# Warmup Iteration   7: 8960559.002 ops/s
# Warmup Iteration   8: 8987870.342 ops/s
# Warmup Iteration   9: 8956314.216 ops/s
# Warmup Iteration  10: 9014895.916 ops/s
# Warmup Iteration  11: 9003456.746 ops/s
# Warmup Iteration  12: 8957102.903 ops/s
# Warmup Iteration  13: 8965124.280 ops/s
# Warmup Iteration  14: 8936561.066 ops/s
# Warmup Iteration  15: 8963513.354 ops/s
# Warmup Iteration  16: 8956352.246 ops/s
# Warmup Iteration  17: 8996264.711 ops/s
# Warmup Iteration  18: 8961166.311 ops/s
# Warmup Iteration  19: 9016205.938 ops/s
# Warmup Iteration  20: 8965657.967 ops/s
# Warmup Iteration  21: 9002935.791 ops/s
# Warmup Iteration  22: 8975183.222 ops/s
# Warmup Iteration  23: 8999015.129 ops/s
# Warmup Iteration  24: 8885994.039 ops/s
# Warmup Iteration  25: 8951346.981 ops/s
# Warmup Iteration  26: 8990802.385 ops/s
# Warmup Iteration  27: 8913149.628 ops/s
# Warmup Iteration  28: 9016578.310 ops/s
# Warmup Iteration  29: 8976146.533 ops/s
# Warmup Iteration  30: 8973460.253 ops/s
Iteration   1: 8990726.365 ops/s
Iteration   2: 8968717.871 ops/s
Iteration   3: 8974888.791 ops/s
Iteration   4: 8969794.270 ops/s
Iteration   5: 9003865.381 ops/s
Iteration   6: 8946629.172 ops/s
Iteration   7: 8989191.109 ops/s
Iteration   8: 8912866.995 ops/s
Iteration   9: 8960254.368 ops/s
Iteration  10: 9035056.670 ops/s
Iteration  11: 8996156.877 ops/s
Iteration  12: 8980345.717 ops/s
Iteration  13: 9016104.942 ops/s
Iteration  14: 8937191.741 ops/s
Iteration  15: 8946893.439 ops/s
Iteration  16: 8922999.023 ops/s
Iteration  17: 9019157.131 ops/s
Iteration  18: 8970903.438 ops/s
Iteration  19: 8991685.448 ops/s
Iteration  20: 9021949.569 ops/s
Iteration  21: 8956494.401 ops/s
Iteration  22: 8943168.402 ops/s
Iteration  23: 9019304.694 ops/s
Iteration  24: 9017221.017 ops/s
Iteration  25: 8987292.873 ops/s
Iteration  26: 8936724.259 ops/s
Iteration  27: 8961306.521 ops/s
Iteration  28: 8997496.857 ops/s
Iteration  29: 8944867.416 ops/s
Iteration  30: 8929044.784 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromSupplierTest._Benchmark.benchmark_success":
  8974943.318 ±(99.9%) 22126.665 ops/s [Average]
  (min, avg, max) = (8912866.995, 8974943.318, 9035056.670), stdev = 33118.153
  CI (99.9%): [8952816.653, 8997069.983] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MaybeFromSupplierTest._Benchmark.benchmark_success  thrpt   30  8974943.318 ± 22126.665  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_cancelledAndRun$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_cancelledAndRun

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102072.969 ops/s
# Warmup Iteration   2: 512074.479 ops/s
# Warmup Iteration   3: 739425.997 ops/s
# Warmup Iteration   4: 735849.238 ops/s
# Warmup Iteration   5: 734937.289 ops/s
# Warmup Iteration   6: 733872.901 ops/s
# Warmup Iteration   7: 734140.453 ops/s
# Warmup Iteration   8: 737879.748 ops/s
# Warmup Iteration   9: 735635.178 ops/s
# Warmup Iteration  10: 735801.168 ops/s
# Warmup Iteration  11: 737468.210 ops/s
# Warmup Iteration  12: 734504.931 ops/s
# Warmup Iteration  13: 736808.971 ops/s
# Warmup Iteration  14: 736240.538 ops/s
# Warmup Iteration  15: 738835.145 ops/s
# Warmup Iteration  16: 734781.955 ops/s
# Warmup Iteration  17: 733252.887 ops/s
# Warmup Iteration  18: 722050.860 ops/s
# Warmup Iteration  19: 734382.363 ops/s
# Warmup Iteration  20: 732380.953 ops/s
# Warmup Iteration  21: 733662.403 ops/s
# Warmup Iteration  22: 733177.075 ops/s
# Warmup Iteration  23: 736658.181 ops/s
# Warmup Iteration  24: 732209.798 ops/s
# Warmup Iteration  25: 732114.400 ops/s
# Warmup Iteration  26: 732956.478 ops/s
# Warmup Iteration  27: 733112.680 ops/s
# Warmup Iteration  28: 731757.685 ops/s
# Warmup Iteration  29: 732219.277 ops/s
# Warmup Iteration  30: 734681.816 ops/s
Iteration   1: 733443.680 ops/s
Iteration   2: 732912.524 ops/s
Iteration   3: 733464.302 ops/s
Iteration   4: 733992.447 ops/s
Iteration   5: 735096.538 ops/s
Iteration   6: 731833.118 ops/s
Iteration   7: 736394.764 ops/s
Iteration   8: 730379.537 ops/s
Iteration   9: 734232.616 ops/s
Iteration  10: 734265.283 ops/s
Iteration  11: 734676.019 ops/s
Iteration  12: 732188.796 ops/s
Iteration  13: 731663.700 ops/s
Iteration  14: 732480.875 ops/s
Iteration  15: 733871.673 ops/s
Iteration  16: 734818.284 ops/s
Iteration  17: 733278.283 ops/s
Iteration  18: 733797.823 ops/s
Iteration  19: 732186.901 ops/s
Iteration  20: 736452.067 ops/s
Iteration  21: 732542.870 ops/s
Iteration  22: 734388.774 ops/s
Iteration  23: 737090.799 ops/s
Iteration  24: 734896.107 ops/s
Iteration  25: 733441.998 ops/s
Iteration  26: 735761.891 ops/s
Iteration  27: 734851.881 ops/s
Iteration  28: 728975.040 ops/s
Iteration  29: 733816.346 ops/s
Iteration  30: 734670.019 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_cancelledAndRun":
  733728.832 ±(99.9%) 1170.391 ops/s [Average]
  (min, avg, max) = (728975.040, 733728.832, 737090.799), stdev = 1751.787
  CI (99.9%): [732558.441, 734899.223] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
ObservableTimerTest._Benchmark.benchmark_cancelledAndRun  thrpt   30  733728.832 ± 1170.391  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.SerialDisposableTests._Benchmark.benchmark_disposeState$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.SerialDisposableTests._Benchmark.benchmark_disposeState

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11740849.034 ops/s
# Warmup Iteration   2: 14032530.084 ops/s
# Warmup Iteration   3: 15941199.909 ops/s
# Warmup Iteration   4: 16069445.336 ops/s
# Warmup Iteration   5: 16039347.721 ops/s
# Warmup Iteration   6: 16029407.292 ops/s
# Warmup Iteration   7: 15950882.638 ops/s
# Warmup Iteration   8: 15962817.638 ops/s
# Warmup Iteration   9: 16019850.526 ops/s
# Warmup Iteration  10: 15964316.081 ops/s
# Warmup Iteration  11: 15964325.773 ops/s
# Warmup Iteration  12: 15937000.907 ops/s
# Warmup Iteration  13: 16008206.604 ops/s
# Warmup Iteration  14: 15901285.175 ops/s
# Warmup Iteration  15: 15974416.226 ops/s
# Warmup Iteration  16: 15952835.453 ops/s
# Warmup Iteration  17: 15992350.685 ops/s
# Warmup Iteration  18: 15980084.338 ops/s
# Warmup Iteration  19: 15964906.458 ops/s
# Warmup Iteration  20: 16016534.615 ops/s
# Warmup Iteration  21: 16013225.762 ops/s
# Warmup Iteration  22: 15954000.783 ops/s
# Warmup Iteration  23: 15988373.577 ops/s
# Warmup Iteration  24: 15991477.957 ops/s
# Warmup Iteration  25: 15958344.820 ops/s
# Warmup Iteration  26: 15967054.091 ops/s
# Warmup Iteration  27: 15947264.430 ops/s
# Warmup Iteration  28: 15961708.786 ops/s
# Warmup Iteration  29: 15945602.209 ops/s
# Warmup Iteration  30: 15926817.766 ops/s
Iteration   1: 15997478.790 ops/s
Iteration   2: 15963351.718 ops/s
Iteration   3: 15994569.948 ops/s
Iteration   4: 16048761.384 ops/s
Iteration   5: 15997808.351 ops/s
Iteration   6: 15884160.930 ops/s
Iteration   7: 15956005.441 ops/s
Iteration   8: 15980518.999 ops/s
Iteration   9: 15932239.753 ops/s
Iteration  10: 16023839.684 ops/s
Iteration  11: 15956836.418 ops/s
Iteration  12: 15960857.959 ops/s
Iteration  13: 15962291.941 ops/s
Iteration  14: 15990511.539 ops/s
Iteration  15: 15882875.775 ops/s
Iteration  16: 15981065.782 ops/s
Iteration  17: 15949538.879 ops/s
Iteration  18: 16059257.726 ops/s
Iteration  19: 15952026.194 ops/s
Iteration  20: 15990109.354 ops/s
Iteration  21: 15991696.161 ops/s
Iteration  22: 15948021.260 ops/s
Iteration  23: 16048473.403 ops/s
Iteration  24: 16006641.890 ops/s
Iteration  25: 15957301.768 ops/s
Iteration  26: 15944396.874 ops/s
Iteration  27: 15971438.266 ops/s
Iteration  28: 15931587.934 ops/s
Iteration  29: 15944807.840 ops/s
Iteration  30: 16004796.087 ops/s


Result "io.reactivex.rxjava3.disposables.SerialDisposableTests._Benchmark.benchmark_disposeState":
  15973775.602 ±(99.9%) 27772.018 ops/s [Average]
  (min, avg, max) = (15882875.775, 15973775.602, 16059257.726), stdev = 41567.853
  CI (99.9%): [15946003.583, 16001547.620] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score       Error  Units
SerialDisposableTests._Benchmark.benchmark_disposeState  thrpt   30  15973775.602 ± 27772.018  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction9$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction9

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 882551.826 ops/s
# Warmup Iteration   2: 923263.809 ops/s
# Warmup Iteration   3: 928345.936 ops/s
# Warmup Iteration   4: 982275.377 ops/s
# Warmup Iteration   5: 990656.753 ops/s
# Warmup Iteration   6: 987451.230 ops/s
# Warmup Iteration   7: 986845.228 ops/s
# Warmup Iteration   8: 983603.361 ops/s
# Warmup Iteration   9: 984725.495 ops/s
# Warmup Iteration  10: 984528.552 ops/s
# Warmup Iteration  11: 987527.150 ops/s
# Warmup Iteration  12: 984319.638 ops/s
# Warmup Iteration  13: 981382.172 ops/s
# Warmup Iteration  14: 976534.659 ops/s
# Warmup Iteration  15: 981322.619 ops/s
# Warmup Iteration  16: 978524.297 ops/s
# Warmup Iteration  17: 1035716.430 ops/s
# Warmup Iteration  18: 1043273.716 ops/s
# Warmup Iteration  19: 1034947.282 ops/s
# Warmup Iteration  20: 1044889.509 ops/s
# Warmup Iteration  21: 1040400.587 ops/s
# Warmup Iteration  22: 1042614.963 ops/s
# Warmup Iteration  23: 1039334.939 ops/s
# Warmup Iteration  24: 1036457.916 ops/s
# Warmup Iteration  25: 1042368.429 ops/s
# Warmup Iteration  26: 1038458.860 ops/s
# Warmup Iteration  27: 1042913.833 ops/s
# Warmup Iteration  28: 1039878.116 ops/s
# Warmup Iteration  29: 1031899.520 ops/s
# Warmup Iteration  30: 1038618.958 ops/s
Iteration   1: 1038655.505 ops/s
Iteration   2: 1038477.324 ops/s
Iteration   3: 1040059.114 ops/s
Iteration   4: 1037145.319 ops/s
Iteration   5: 1039510.443 ops/s
Iteration   6: 1040084.543 ops/s
Iteration   7: 1044112.821 ops/s
Iteration   8: 1037815.547 ops/s
Iteration   9: 1037568.547 ops/s
Iteration  10: 1029867.688 ops/s
Iteration  11: 1040447.489 ops/s
Iteration  12: 1040321.308 ops/s
Iteration  13: 1041308.112 ops/s
Iteration  14: 1041669.607 ops/s
Iteration  15: 1042372.886 ops/s
Iteration  16: 1038663.881 ops/s
Iteration  17: 1036429.749 ops/s
Iteration  18: 1034527.907 ops/s
Iteration  19: 1034812.710 ops/s
Iteration  20: 1040900.918 ops/s
Iteration  21: 1034927.735 ops/s
Iteration  22: 1041213.235 ops/s
Iteration  23: 1040641.335 ops/s
Iteration  24: 1036125.397 ops/s
Iteration  25: 1040176.069 ops/s
Iteration  26: 1033667.435 ops/s
Iteration  27: 1036280.735 ops/s
Iteration  28: 1040359.792 ops/s
Iteration  29: 1033466.803 ops/s
Iteration  30: 1037236.660 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction9":
  1038294.887 ±(99.9%) 2095.317 ops/s [Average]
  (min, avg, max) = (1029867.688, 1038294.887, 1044112.821), stdev = 3136.171
  CI (99.9%): [1036199.571, 1040390.204] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score      Error  Units
FunctionsTest._Benchmark.benchmark_toFunction9  thrpt   30  1038294.887 ± 2095.317  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnConst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnConst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 755655.582 ops/s
# Warmup Iteration   2: 862721.770 ops/s
# Warmup Iteration   3: 907292.966 ops/s
# Warmup Iteration   4: 901232.110 ops/s
# Warmup Iteration   5: 962789.400 ops/s
# Warmup Iteration   6: 961515.258 ops/s
# Warmup Iteration   7: 965333.174 ops/s
# Warmup Iteration   8: 961016.982 ops/s
# Warmup Iteration   9: 962573.481 ops/s
# Warmup Iteration  10: 959509.828 ops/s
# Warmup Iteration  11: 957701.171 ops/s
# Warmup Iteration  12: 964065.992 ops/s
# Warmup Iteration  13: 960466.141 ops/s
# Warmup Iteration  14: 963812.740 ops/s
# Warmup Iteration  15: 958167.137 ops/s
# Warmup Iteration  16: 958807.985 ops/s
# Warmup Iteration  17: 1006145.827 ops/s
# Warmup Iteration  18: 1008309.827 ops/s
# Warmup Iteration  19: 1010482.029 ops/s
# Warmup Iteration  20: 1009304.455 ops/s
# Warmup Iteration  21: 1011901.679 ops/s
# Warmup Iteration  22: 1013948.122 ops/s
# Warmup Iteration  23: 1004199.497 ops/s
# Warmup Iteration  24: 1002162.482 ops/s
# Warmup Iteration  25: 1008368.693 ops/s
# Warmup Iteration  26: 1010131.420 ops/s
# Warmup Iteration  27: 1008355.639 ops/s
# Warmup Iteration  28: 1008169.227 ops/s
# Warmup Iteration  29: 1008566.376 ops/s
# Warmup Iteration  30: 1007421.475 ops/s
Iteration   1: 1013311.202 ops/s
Iteration   2: 1008365.322 ops/s
Iteration   3: 1005725.849 ops/s
Iteration   4: 1010706.245 ops/s
Iteration   5: 1004491.701 ops/s
Iteration   6: 1011185.209 ops/s
Iteration   7: 1006461.786 ops/s
Iteration   8: 1004611.796 ops/s
Iteration   9: 1012499.487 ops/s
Iteration  10: 1012341.353 ops/s
Iteration  11: 999725.392 ops/s
Iteration  12: 1012890.106 ops/s
Iteration  13: 1009349.097 ops/s
Iteration  14: 1006672.152 ops/s
Iteration  15: 1006014.221 ops/s
Iteration  16: 1000181.286 ops/s
Iteration  17: 1001832.028 ops/s
Iteration  18: 1008114.997 ops/s
Iteration  19: 1003473.115 ops/s
Iteration  20: 1008708.690 ops/s
Iteration  21: 1007555.153 ops/s
Iteration  22: 997624.082 ops/s
Iteration  23: 1003910.592 ops/s
Iteration  24: 1008427.986 ops/s
Iteration  25: 1004911.933 ops/s
Iteration  26: 1012143.980 ops/s
Iteration  27: 1009942.660 ops/s
Iteration  28: 1005307.537 ops/s
Iteration  29: 1009741.368 ops/s
Iteration  30: 1007393.269 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnConst":
  1007120.653 ±(99.9%) 2715.369 ops/s [Average]
  (min, avg, max) = (997624.082, 1007120.653, 1013311.202), stdev = 4064.236
  CI (99.9%): [1004405.285, 1009836.022] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnConst  thrpt   30  1007120.653 ± 2715.369  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 748679.318 ops/s
# Warmup Iteration   2: 861230.385 ops/s
# Warmup Iteration   3: 906255.794 ops/s
# Warmup Iteration   4: 901623.797 ops/s
# Warmup Iteration   5: 965105.364 ops/s
# Warmup Iteration   6: 965076.948 ops/s
# Warmup Iteration   7: 962378.490 ops/s
# Warmup Iteration   8: 944707.973 ops/s
# Warmup Iteration   9: 961898.169 ops/s
# Warmup Iteration  10: 947711.533 ops/s
# Warmup Iteration  11: 958906.928 ops/s
# Warmup Iteration  12: 958020.542 ops/s
# Warmup Iteration  13: 957999.761 ops/s
# Warmup Iteration  14: 956011.756 ops/s
# Warmup Iteration  15: 959609.654 ops/s
# Warmup Iteration  16: 948602.882 ops/s
# Warmup Iteration  17: 1012976.574 ops/s
# Warmup Iteration  18: 1010849.947 ops/s
# Warmup Iteration  19: 1018169.329 ops/s
# Warmup Iteration  20: 1012152.094 ops/s
# Warmup Iteration  21: 1017117.941 ops/s
# Warmup Iteration  22: 1012526.269 ops/s
# Warmup Iteration  23: 1017855.696 ops/s
# Warmup Iteration  24: 1010696.382 ops/s
# Warmup Iteration  25: 1015137.294 ops/s
# Warmup Iteration  26: 1012241.697 ops/s
# Warmup Iteration  27: 1025323.549 ops/s
# Warmup Iteration  28: 1017611.415 ops/s
# Warmup Iteration  29: 1014959.193 ops/s
# Warmup Iteration  30: 1011852.611 ops/s
Iteration   1: 1017644.726 ops/s
Iteration   2: 1012132.429 ops/s
Iteration   3: 1020864.372 ops/s
Iteration   4: 1016838.943 ops/s
Iteration   5: 1013026.067 ops/s
Iteration   6: 1016329.089 ops/s
Iteration   7: 1017623.612 ops/s
Iteration   8: 1014305.136 ops/s
Iteration   9: 1010560.023 ops/s
Iteration  10: 1015806.169 ops/s
Iteration  11: 1009676.068 ops/s
Iteration  12: 1017495.603 ops/s
Iteration  13: 1014373.859 ops/s
Iteration  14: 1011736.581 ops/s
Iteration  15: 1014843.858 ops/s
Iteration  16: 1006334.374 ops/s
Iteration  17: 1013667.849 ops/s
Iteration  18: 1011766.852 ops/s
Iteration  19: 1011637.280 ops/s
Iteration  20: 1013262.703 ops/s
Iteration  21: 1013051.802 ops/s
Iteration  22: 1014169.691 ops/s
Iteration  23: 1020074.667 ops/s
Iteration  24: 1018496.300 ops/s
Iteration  25: 1013645.301 ops/s
Iteration  26: 1010679.889 ops/s
Iteration  27: 1020301.068 ops/s
Iteration  28: 1013326.055 ops/s
Iteration  29: 1016279.899 ops/s
Iteration  30: 1020201.318 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateError":
  1014671.719 ±(99.9%) 2330.946 ops/s [Average]
  (min, avg, max) = (1006334.374, 1014671.719, 1020864.372), stdev = 3488.850
  CI (99.9%): [1012340.774, 1017002.665] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score      Error  Units
MaybeDoOnTerminateTest._Benchmark.benchmark_doOnTerminateError  thrpt   30  1014671.719 ± 2330.946  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 534701.085 ops/s
# Warmup Iteration   2: 641844.047 ops/s
# Warmup Iteration   3: 604028.989 ops/s
# Warmup Iteration   4: 691428.506 ops/s
# Warmup Iteration   5: 703677.014 ops/s
# Warmup Iteration   6: 700966.165 ops/s
# Warmup Iteration   7: 702423.273 ops/s
# Warmup Iteration   8: 699675.803 ops/s
# Warmup Iteration   9: 701260.990 ops/s
# Warmup Iteration  10: 699343.280 ops/s
# Warmup Iteration  11: 703460.252 ops/s
# Warmup Iteration  12: 705076.933 ops/s
# Warmup Iteration  13: 697647.640 ops/s
# Warmup Iteration  14: 700888.920 ops/s
# Warmup Iteration  15: 701848.586 ops/s
# Warmup Iteration  16: 697267.376 ops/s
# Warmup Iteration  17: 728855.114 ops/s
# Warmup Iteration  18: 723927.466 ops/s
# Warmup Iteration  19: 724857.440 ops/s
# Warmup Iteration  20: 725310.332 ops/s
# Warmup Iteration  21: 723523.871 ops/s
# Warmup Iteration  22: 723477.826 ops/s
# Warmup Iteration  23: 724582.974 ops/s
# Warmup Iteration  24: 726032.927 ops/s
# Warmup Iteration  25: 722888.958 ops/s
# Warmup Iteration  26: 725578.432 ops/s
# Warmup Iteration  27: 723173.185 ops/s
# Warmup Iteration  28: 724575.015 ops/s
# Warmup Iteration  29: 721767.136 ops/s
# Warmup Iteration  30: 721977.690 ops/s
Iteration   1: 724221.338 ops/s
Iteration   2: 724304.083 ops/s
Iteration   3: 722111.152 ops/s
Iteration   4: 727066.920 ops/s
Iteration   5: 729004.615 ops/s
Iteration   6: 724360.360 ops/s
Iteration   7: 722727.016 ops/s
Iteration   8: 726560.694 ops/s
Iteration   9: 724068.446 ops/s
Iteration  10: 724845.773 ops/s
Iteration  11: 721978.141 ops/s
Iteration  12: 724542.817 ops/s
Iteration  13: 723400.831 ops/s
Iteration  14: 725362.805 ops/s
Iteration  15: 723361.829 ops/s
Iteration  16: 725804.987 ops/s
Iteration  17: 724032.963 ops/s
Iteration  18: 724805.835 ops/s
Iteration  19: 725339.135 ops/s
Iteration  20: 721898.016 ops/s
Iteration  21: 724607.903 ops/s
Iteration  22: 724934.101 ops/s
Iteration  23: 725295.320 ops/s
Iteration  24: 716132.034 ops/s
Iteration  25: 723004.418 ops/s
Iteration  26: 723280.592 ops/s
Iteration  27: 725173.047 ops/s
Iteration  28: 723669.840 ops/s
Iteration  29: 723585.231 ops/s
Iteration  30: 724955.025 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementTest._Benchmark.benchmark_doubleOnSubscribe":
  724147.842 ±(99.9%) 1428.435 ops/s [Average]
  (min, avg, max) = (716132.034, 724147.842, 729004.615), stdev = 2138.014
  CI (99.9%): [722719.408, 725576.277] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeIgnoreElementTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  724147.842 ± 1428.435  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 716182.014 ops/s
# Warmup Iteration   2: 849197.352 ops/s
# Warmup Iteration   3: 879784.207 ops/s
# Warmup Iteration   4: 898837.324 ops/s
# Warmup Iteration   5: 948893.721 ops/s
# Warmup Iteration   6: 948468.292 ops/s
# Warmup Iteration   7: 950636.258 ops/s
# Warmup Iteration   8: 949244.262 ops/s
# Warmup Iteration   9: 947590.522 ops/s
# Warmup Iteration  10: 944094.209 ops/s
# Warmup Iteration  11: 945343.432 ops/s
# Warmup Iteration  12: 945118.897 ops/s
# Warmup Iteration  13: 948636.719 ops/s
# Warmup Iteration  14: 944182.638 ops/s
# Warmup Iteration  15: 945800.545 ops/s
# Warmup Iteration  16: 940443.246 ops/s
# Warmup Iteration  17: 993960.570 ops/s
# Warmup Iteration  18: 999035.536 ops/s
# Warmup Iteration  19: 994728.498 ops/s
# Warmup Iteration  20: 1000012.043 ops/s
# Warmup Iteration  21: 994811.504 ops/s
# Warmup Iteration  22: 1000111.470 ops/s
# Warmup Iteration  23: 995381.683 ops/s
# Warmup Iteration  24: 1000170.096 ops/s
# Warmup Iteration  25: 997812.053 ops/s
# Warmup Iteration  26: 1001885.583 ops/s
# Warmup Iteration  27: 995533.331 ops/s
# Warmup Iteration  28: 1000021.645 ops/s
# Warmup Iteration  29: 996585.271 ops/s
# Warmup Iteration  30: 999661.559 ops/s
Iteration   1: 1003846.384 ops/s
Iteration   2: 998189.696 ops/s
Iteration   3: 995677.318 ops/s
Iteration   4: 996093.803 ops/s
Iteration   5: 999637.405 ops/s
Iteration   6: 998151.514 ops/s
Iteration   7: 995724.395 ops/s
Iteration   8: 999822.252 ops/s
Iteration   9: 1000803.668 ops/s
Iteration  10: 996617.234 ops/s
Iteration  11: 998887.664 ops/s
Iteration  12: 1002075.625 ops/s
Iteration  13: 1000092.227 ops/s
Iteration  14: 995919.657 ops/s
Iteration  15: 999803.547 ops/s
Iteration  16: 1003502.330 ops/s
Iteration  17: 999070.885 ops/s
Iteration  18: 997269.366 ops/s
Iteration  19: 998665.384 ops/s
Iteration  20: 997500.547 ops/s
Iteration  21: 995905.491 ops/s
Iteration  22: 997462.657 ops/s
Iteration  23: 997681.463 ops/s
Iteration  24: 996277.259 ops/s
Iteration  25: 996420.151 ops/s
Iteration  26: 994503.841 ops/s
Iteration  27: 1000006.773 ops/s
Iteration  28: 998922.122 ops/s
Iteration  29: 997270.860 ops/s
Iteration  30: 999558.222 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_error":
  998378.658 ±(99.9%) 1530.714 ops/s [Average]
  (min, avg, max) = (994503.841, 998378.658, 1003846.384), stdev = 2291.101
  CI (99.9%): [996847.944, 999909.372] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt       Score      Error  Units
MaybeOfTypeTest._Benchmark.benchmark_error  thrpt   30  998378.658 ± 1530.714  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_errorNotInstance$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_errorNotInstance

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 713258.557 ops/s
# Warmup Iteration   2: 852543.766 ops/s
# Warmup Iteration   3: 950487.795 ops/s
# Warmup Iteration   4: 947626.201 ops/s
# Warmup Iteration   5: 949402.629 ops/s
# Warmup Iteration   6: 949290.847 ops/s
# Warmup Iteration   7: 946989.800 ops/s
# Warmup Iteration   8: 945922.710 ops/s
# Warmup Iteration   9: 942689.475 ops/s
# Warmup Iteration  10: 945479.227 ops/s
# Warmup Iteration  11: 942930.873 ops/s
# Warmup Iteration  12: 947282.881 ops/s
# Warmup Iteration  13: 946043.443 ops/s
# Warmup Iteration  14: 950445.193 ops/s
# Warmup Iteration  15: 942747.603 ops/s
# Warmup Iteration  16: 945438.386 ops/s
# Warmup Iteration  17: 1002634.997 ops/s
# Warmup Iteration  18: 1001752.263 ops/s
# Warmup Iteration  19: 1000913.749 ops/s
# Warmup Iteration  20: 1002137.106 ops/s
# Warmup Iteration  21: 1001627.118 ops/s
# Warmup Iteration  22: 1002089.188 ops/s
# Warmup Iteration  23: 1002523.354 ops/s
# Warmup Iteration  24: 1002862.770 ops/s
# Warmup Iteration  25: 1000448.500 ops/s
# Warmup Iteration  26: 1004555.993 ops/s
# Warmup Iteration  27: 998241.000 ops/s
# Warmup Iteration  28: 1007631.678 ops/s
# Warmup Iteration  29: 999980.737 ops/s
# Warmup Iteration  30: 1000272.653 ops/s
Iteration   1: 997874.635 ops/s
Iteration   2: 1002731.010 ops/s
Iteration   3: 997239.043 ops/s
Iteration   4: 1002639.814 ops/s
Iteration   5: 1001149.794 ops/s
Iteration   6: 1007941.781 ops/s
Iteration   7: 1003228.973 ops/s
Iteration   8: 1000223.620 ops/s
Iteration   9: 1000862.517 ops/s
Iteration  10: 995516.886 ops/s
Iteration  11: 996183.643 ops/s
Iteration  12: 1001939.135 ops/s
Iteration  13: 1000643.274 ops/s
Iteration  14: 1004189.870 ops/s
Iteration  15: 1001451.059 ops/s
Iteration  16: 999798.396 ops/s
Iteration  17: 997613.988 ops/s
Iteration  18: 1000796.939 ops/s
Iteration  19: 1004111.571 ops/s
Iteration  20: 1002711.458 ops/s
Iteration  21: 995678.007 ops/s
Iteration  22: 999079.708 ops/s
Iteration  23: 1002047.410 ops/s
Iteration  24: 1001351.410 ops/s
Iteration  25: 1003921.233 ops/s
Iteration  26: 1000644.528 ops/s
Iteration  27: 1004095.845 ops/s
Iteration  28: 1000273.125 ops/s
Iteration  29: 1002381.268 ops/s
Iteration  30: 999142.342 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_errorNotInstance":
  1000915.409 ±(99.9%) 1884.644 ops/s [Average]
  (min, avg, max) = (995516.886, 1000915.409, 1007941.781), stdev = 2820.847
  CI (99.9%): [999030.765, 1002800.054] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score      Error  Units
MaybeOfTypeTest._Benchmark.benchmark_errorNotInstance  thrpt   30  1000915.409 ± 1884.644  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_doubleSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_doubleSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 551573.625 ops/s
# Warmup Iteration   2: 655150.419 ops/s
# Warmup Iteration   3: 646805.268 ops/s
# Warmup Iteration   4: 703534.686 ops/s
# Warmup Iteration   5: 711335.249 ops/s
# Warmup Iteration   6: 708618.872 ops/s
# Warmup Iteration   7: 710957.123 ops/s
# Warmup Iteration   8: 711605.730 ops/s
# Warmup Iteration   9: 710681.092 ops/s
# Warmup Iteration  10: 708969.847 ops/s
# Warmup Iteration  11: 709060.647 ops/s
# Warmup Iteration  12: 707247.319 ops/s
# Warmup Iteration  13: 709936.436 ops/s
# Warmup Iteration  14: 708108.327 ops/s
# Warmup Iteration  15: 708248.435 ops/s
# Warmup Iteration  16: 702759.205 ops/s
# Warmup Iteration  17: 734709.804 ops/s
# Warmup Iteration  18: 734928.076 ops/s
# Warmup Iteration  19: 739753.566 ops/s
# Warmup Iteration  20: 733293.928 ops/s
# Warmup Iteration  21: 736042.982 ops/s
# Warmup Iteration  22: 735730.584 ops/s
# Warmup Iteration  23: 737294.551 ops/s
# Warmup Iteration  24: 733657.214 ops/s
# Warmup Iteration  25: 736676.351 ops/s
# Warmup Iteration  26: 733228.619 ops/s
# Warmup Iteration  27: 735990.477 ops/s
# Warmup Iteration  28: 735560.427 ops/s
# Warmup Iteration  29: 736310.148 ops/s
# Warmup Iteration  30: 732699.631 ops/s
Iteration   1: 735136.970 ops/s
Iteration   2: 737063.594 ops/s
Iteration   3: 736851.455 ops/s
Iteration   4: 736345.661 ops/s
Iteration   5: 735853.831 ops/s
Iteration   6: 737074.037 ops/s
Iteration   7: 737310.608 ops/s
Iteration   8: 736062.820 ops/s
Iteration   9: 733400.075 ops/s
Iteration  10: 737894.409 ops/s
Iteration  11: 737445.016 ops/s
Iteration  12: 734208.464 ops/s
Iteration  13: 736515.759 ops/s
Iteration  14: 732299.615 ops/s
Iteration  15: 735478.320 ops/s
Iteration  16: 733692.038 ops/s
Iteration  17: 735300.651 ops/s
Iteration  18: 734802.094 ops/s
Iteration  19: 732594.444 ops/s
Iteration  20: 734703.376 ops/s
Iteration  21: 731605.983 ops/s
Iteration  22: 734397.150 ops/s
Iteration  23: 736336.132 ops/s
Iteration  24: 732891.848 ops/s
Iteration  25: 735805.172 ops/s
Iteration  26: 733198.772 ops/s
Iteration  27: 734637.297 ops/s
Iteration  28: 728535.603 ops/s
Iteration  29: 728862.014 ops/s
Iteration  30: 734936.675 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_doubleSubscribe":
  734707.996 ±(99.9%) 1545.282 ops/s [Average]
  (min, avg, max) = (728535.603, 734707.996, 737894.409), stdev = 2312.905
  CI (99.9%): [733162.715, 736253.278] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
MaybeDetachTest._Benchmark.benchmark_doubleSubscribe  thrpt   30  734707.996 ± 1545.282  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 535949.762 ops/s
# Warmup Iteration   2: 643967.281 ops/s
# Warmup Iteration   3: 628454.509 ops/s
# Warmup Iteration   4: 686067.714 ops/s
# Warmup Iteration   5: 693641.407 ops/s
# Warmup Iteration   6: 691333.403 ops/s
# Warmup Iteration   7: 693747.866 ops/s
# Warmup Iteration   8: 695251.630 ops/s
# Warmup Iteration   9: 692646.892 ops/s
# Warmup Iteration  10: 689869.960 ops/s
# Warmup Iteration  11: 689671.630 ops/s
# Warmup Iteration  12: 689579.063 ops/s
# Warmup Iteration  13: 687176.788 ops/s
# Warmup Iteration  14: 690563.891 ops/s
# Warmup Iteration  15: 685949.092 ops/s
# Warmup Iteration  16: 691241.404 ops/s
# Warmup Iteration  17: 726318.406 ops/s
# Warmup Iteration  18: 723668.178 ops/s
# Warmup Iteration  19: 731390.499 ops/s
# Warmup Iteration  20: 726728.398 ops/s
# Warmup Iteration  21: 725434.439 ops/s
# Warmup Iteration  22: 727256.229 ops/s
# Warmup Iteration  23: 728744.276 ops/s
# Warmup Iteration  24: 728397.790 ops/s
# Warmup Iteration  25: 727456.333 ops/s
# Warmup Iteration  26: 727003.852 ops/s
# Warmup Iteration  27: 726803.631 ops/s
# Warmup Iteration  28: 727242.105 ops/s
# Warmup Iteration  29: 728558.983 ops/s
# Warmup Iteration  30: 732131.621 ops/s
Iteration   1: 725556.223 ops/s
Iteration   2: 730123.858 ops/s
Iteration   3: 727782.059 ops/s
Iteration   4: 729010.387 ops/s
Iteration   5: 730157.998 ops/s
Iteration   6: 725689.590 ops/s
Iteration   7: 726629.994 ops/s
Iteration   8: 723473.898 ops/s
Iteration   9: 730266.460 ops/s
Iteration  10: 729668.264 ops/s
Iteration  11: 728337.280 ops/s
Iteration  12: 725302.138 ops/s
Iteration  13: 725234.610 ops/s
Iteration  14: 726628.084 ops/s
Iteration  15: 725595.513 ops/s
Iteration  16: 727314.592 ops/s
Iteration  17: 726741.026 ops/s
Iteration  18: 727393.595 ops/s
Iteration  19: 723384.245 ops/s
Iteration  20: 732869.233 ops/s
Iteration  21: 731100.813 ops/s
Iteration  22: 731301.058 ops/s
Iteration  23: 728936.487 ops/s
Iteration  24: 725448.241 ops/s
Iteration  25: 729649.846 ops/s
Iteration  26: 726232.768 ops/s
Iteration  27: 726187.742 ops/s
Iteration  28: 726524.885 ops/s
Iteration  29: 731638.833 ops/s
Iteration  30: 727180.270 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_doubleOnSubscribe":
  727712.000 ±(99.9%) 1629.937 ops/s [Average]
  (min, avg, max) = (723384.245, 727712.000, 732869.233), stdev = 2439.613
  CI (99.9%): [726082.063, 729341.937] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybeFlattenTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  727712.000 ± 1629.937  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 536149.980 ops/s
# Warmup Iteration   2: 631332.751 ops/s
# Warmup Iteration   3: 635084.628 ops/s
# Warmup Iteration   4: 690674.352 ops/s
# Warmup Iteration   5: 698710.521 ops/s
# Warmup Iteration   6: 699761.558 ops/s
# Warmup Iteration   7: 700892.358 ops/s
# Warmup Iteration   8: 700321.255 ops/s
# Warmup Iteration   9: 700288.034 ops/s
# Warmup Iteration  10: 701583.913 ops/s
# Warmup Iteration  11: 700234.271 ops/s
# Warmup Iteration  12: 699239.152 ops/s
# Warmup Iteration  13: 700410.094 ops/s
# Warmup Iteration  14: 696473.556 ops/s
# Warmup Iteration  15: 690846.782 ops/s
# Warmup Iteration  16: 692830.130 ops/s
# Warmup Iteration  17: 729126.338 ops/s
# Warmup Iteration  18: 729295.123 ops/s
# Warmup Iteration  19: 731574.439 ops/s
# Warmup Iteration  20: 729112.450 ops/s
# Warmup Iteration  21: 730625.056 ops/s
# Warmup Iteration  22: 732929.645 ops/s
# Warmup Iteration  23: 730763.445 ops/s
# Warmup Iteration  24: 727953.115 ops/s
# Warmup Iteration  25: 729667.264 ops/s
# Warmup Iteration  26: 730264.703 ops/s
# Warmup Iteration  27: 728586.304 ops/s
# Warmup Iteration  28: 733105.946 ops/s
# Warmup Iteration  29: 727672.201 ops/s
# Warmup Iteration  30: 730965.824 ops/s
Iteration   1: 729154.086 ops/s
Iteration   2: 707359.620 ops/s
Iteration   3: 727329.523 ops/s
Iteration   4: 725467.208 ops/s
Iteration   5: 726955.919 ops/s
Iteration   6: 729879.466 ops/s
Iteration   7: 730654.331 ops/s
Iteration   8: 731697.844 ops/s
Iteration   9: 732876.718 ops/s
Iteration  10: 721944.379 ops/s
Iteration  11: 730747.143 ops/s
Iteration  12: 730595.389 ops/s
Iteration  13: 730910.601 ops/s
Iteration  14: 730579.730 ops/s
Iteration  15: 733321.795 ops/s
Iteration  16: 727402.692 ops/s
Iteration  17: 729533.473 ops/s
Iteration  18: 729569.070 ops/s
Iteration  19: 729609.394 ops/s
Iteration  20: 732003.297 ops/s
Iteration  21: 732915.342 ops/s
Iteration  22: 731050.157 ops/s
Iteration  23: 730372.286 ops/s
Iteration  24: 729554.067 ops/s
Iteration  25: 730371.752 ops/s
Iteration  26: 730163.865 ops/s
Iteration  27: 730541.917 ops/s
Iteration  28: 728568.322 ops/s
Iteration  29: 732010.317 ops/s
Iteration  30: 730761.015 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_doubleOnSubscribe":
  729130.024 ±(99.9%) 3152.167 ops/s [Average]
  (min, avg, max) = (707359.620, 729130.024, 733321.795), stdev = 4718.016
  CI (99.9%): [725977.857, 732282.191] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MaybeFlatMapSingleElementTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  729130.024 ± 3152.167  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 534414.352 ops/s
# Warmup Iteration   2: 646243.364 ops/s
# Warmup Iteration   3: 645983.466 ops/s
# Warmup Iteration   4: 699108.733 ops/s
# Warmup Iteration   5: 712833.958 ops/s
# Warmup Iteration   6: 708873.150 ops/s
# Warmup Iteration   7: 710325.681 ops/s
# Warmup Iteration   8: 711926.178 ops/s
# Warmup Iteration   9: 709657.079 ops/s
# Warmup Iteration  10: 709528.645 ops/s
# Warmup Iteration  11: 706634.854 ops/s
# Warmup Iteration  12: 708372.350 ops/s
# Warmup Iteration  13: 705136.062 ops/s
# Warmup Iteration  14: 707356.140 ops/s
# Warmup Iteration  15: 702496.848 ops/s
# Warmup Iteration  16: 705178.765 ops/s
# Warmup Iteration  17: 732364.415 ops/s
# Warmup Iteration  18: 731889.081 ops/s
# Warmup Iteration  19: 736351.216 ops/s
# Warmup Iteration  20: 734246.853 ops/s
# Warmup Iteration  21: 731363.247 ops/s
# Warmup Iteration  22: 734507.333 ops/s
# Warmup Iteration  23: 734250.462 ops/s
# Warmup Iteration  24: 731742.478 ops/s
# Warmup Iteration  25: 729438.177 ops/s
# Warmup Iteration  26: 731316.042 ops/s
# Warmup Iteration  27: 735374.751 ops/s
# Warmup Iteration  28: 734132.637 ops/s
# Warmup Iteration  29: 730425.183 ops/s
# Warmup Iteration  30: 732556.261 ops/s
Iteration   1: 734577.984 ops/s
Iteration   2: 731795.482 ops/s
Iteration   3: 733615.066 ops/s
Iteration   4: 732388.336 ops/s
Iteration   5: 732568.145 ops/s
Iteration   6: 730556.814 ops/s
Iteration   7: 733900.172 ops/s
Iteration   8: 735978.622 ops/s
Iteration   9: 730620.375 ops/s
Iteration  10: 734537.628 ops/s
Iteration  11: 731118.519 ops/s
Iteration  12: 736966.207 ops/s
Iteration  13: 731884.086 ops/s
Iteration  14: 736037.182 ops/s
Iteration  15: 733899.371 ops/s
Iteration  16: 735136.524 ops/s
Iteration  17: 734490.193 ops/s
Iteration  18: 737002.189 ops/s
Iteration  19: 734761.964 ops/s
Iteration  20: 732221.733 ops/s
Iteration  21: 735277.868 ops/s
Iteration  22: 737278.358 ops/s
Iteration  23: 730932.030 ops/s
Iteration  24: 732474.519 ops/s
Iteration  25: 733259.575 ops/s
Iteration  26: 736542.361 ops/s
Iteration  27: 734460.903 ops/s
Iteration  28: 733383.094 ops/s
Iteration  29: 733477.745 ops/s
Iteration  30: 730513.181 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_doubleOnSubscribe":
  733721.874 ±(99.9%) 1355.342 ops/s [Average]
  (min, avg, max) = (730513.181, 733721.874, 737278.358), stdev = 2028.612
  CI (99.9%): [732366.532, 735077.216] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MaybeConcatMapTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  733721.874 ± 1355.342  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 536620.769 ops/s
# Warmup Iteration   2: 631736.565 ops/s
# Warmup Iteration   3: 624597.893 ops/s
# Warmup Iteration   4: 677983.195 ops/s
# Warmup Iteration   5: 689258.977 ops/s
# Warmup Iteration   6: 689492.744 ops/s
# Warmup Iteration   7: 688331.835 ops/s
# Warmup Iteration   8: 684312.047 ops/s
# Warmup Iteration   9: 687983.446 ops/s
# Warmup Iteration  10: 688616.287 ops/s
# Warmup Iteration  11: 686988.131 ops/s
# Warmup Iteration  12: 685352.351 ops/s
# Warmup Iteration  13: 686449.819 ops/s
# Warmup Iteration  14: 688023.790 ops/s
# Warmup Iteration  15: 682746.151 ops/s
# Warmup Iteration  16: 684123.089 ops/s
# Warmup Iteration  17: 710265.133 ops/s
# Warmup Iteration  18: 715833.271 ops/s
# Warmup Iteration  19: 713380.379 ops/s
# Warmup Iteration  20: 712146.553 ops/s
# Warmup Iteration  21: 711039.709 ops/s
# Warmup Iteration  22: 716162.171 ops/s
# Warmup Iteration  23: 714230.523 ops/s
# Warmup Iteration  24: 712950.292 ops/s
# Warmup Iteration  25: 711137.240 ops/s
# Warmup Iteration  26: 716686.205 ops/s
# Warmup Iteration  27: 712769.211 ops/s
# Warmup Iteration  28: 710193.718 ops/s
# Warmup Iteration  29: 712580.932 ops/s
# Warmup Iteration  30: 711837.498 ops/s
Iteration   1: 711816.862 ops/s
Iteration   2: 714562.835 ops/s
Iteration   3: 711963.952 ops/s
Iteration   4: 714624.093 ops/s
Iteration   5: 717072.622 ops/s
Iteration   6: 712262.194 ops/s
Iteration   7: 712951.265 ops/s
Iteration   8: 710312.306 ops/s
Iteration   9: 714041.539 ops/s
Iteration  10: 711559.045 ops/s
Iteration  11: 710525.644 ops/s
Iteration  12: 714110.570 ops/s
Iteration  13: 713261.876 ops/s
Iteration  14: 711970.514 ops/s
Iteration  15: 714138.849 ops/s
Iteration  16: 711867.469 ops/s
Iteration  17: 713704.822 ops/s
Iteration  18: 713365.545 ops/s
Iteration  19: 713311.242 ops/s
Iteration  20: 713038.227 ops/s
Iteration  21: 710380.735 ops/s
Iteration  22: 713222.932 ops/s
Iteration  23: 712029.673 ops/s
Iteration  24: 714583.715 ops/s
Iteration  25: 714922.156 ops/s
Iteration  26: 711554.990 ops/s
Iteration  27: 711186.512 ops/s
Iteration  28: 714878.518 ops/s
Iteration  29: 711363.915 ops/s
Iteration  30: 712932.611 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe":
  712917.241 ±(99.9%) 1054.920 ops/s [Average]
  (min, avg, max) = (710312.306, 712917.241, 717072.622), stdev = 1578.955
  CI (99.9%): [711862.321, 713972.161] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  712917.241 ± 1054.920  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 548621.958 ops/s
# Warmup Iteration   2: 655603.403 ops/s
# Warmup Iteration   3: 646634.650 ops/s
# Warmup Iteration   4: 705807.386 ops/s
# Warmup Iteration   5: 716337.338 ops/s
# Warmup Iteration   6: 713530.062 ops/s
# Warmup Iteration   7: 713625.813 ops/s
# Warmup Iteration   8: 715268.426 ops/s
# Warmup Iteration   9: 713555.088 ops/s
# Warmup Iteration  10: 711164.134 ops/s
# Warmup Iteration  11: 714939.982 ops/s
# Warmup Iteration  12: 713058.089 ops/s
# Warmup Iteration  13: 710501.208 ops/s
# Warmup Iteration  14: 710913.311 ops/s
# Warmup Iteration  15: 707113.724 ops/s
# Warmup Iteration  16: 709656.366 ops/s
# Warmup Iteration  17: 741048.805 ops/s
# Warmup Iteration  18: 740958.822 ops/s
# Warmup Iteration  19: 743306.903 ops/s
# Warmup Iteration  20: 739861.797 ops/s
# Warmup Iteration  21: 739803.642 ops/s
# Warmup Iteration  22: 742647.326 ops/s
# Warmup Iteration  23: 736926.867 ops/s
# Warmup Iteration  24: 738130.616 ops/s
# Warmup Iteration  25: 741743.361 ops/s
# Warmup Iteration  26: 739758.747 ops/s
# Warmup Iteration  27: 737847.179 ops/s
# Warmup Iteration  28: 739851.974 ops/s
# Warmup Iteration  29: 742806.021 ops/s
# Warmup Iteration  30: 740163.610 ops/s
Iteration   1: 740599.041 ops/s
Iteration   2: 736609.844 ops/s
Iteration   3: 741350.327 ops/s
Iteration   4: 741112.718 ops/s
Iteration   5: 726792.771 ops/s
Iteration   6: 742733.844 ops/s
Iteration   7: 740309.310 ops/s
Iteration   8: 738244.361 ops/s
Iteration   9: 743047.020 ops/s
Iteration  10: 741998.747 ops/s
Iteration  11: 739493.788 ops/s
Iteration  12: 740117.329 ops/s
Iteration  13: 740264.619 ops/s
Iteration  14: 741707.726 ops/s
Iteration  15: 741775.591 ops/s
Iteration  16: 740588.116 ops/s
Iteration  17: 737931.797 ops/s
Iteration  18: 739816.885 ops/s
Iteration  19: 738719.381 ops/s
Iteration  20: 738149.094 ops/s
Iteration  21: 740760.218 ops/s
Iteration  22: 738567.809 ops/s
Iteration  23: 738859.714 ops/s
Iteration  24: 742413.615 ops/s
Iteration  25: 739860.014 ops/s
Iteration  26: 743324.918 ops/s
Iteration  27: 741625.358 ops/s
Iteration  28: 736778.952 ops/s
Iteration  29: 737743.460 ops/s
Iteration  30: 743363.607 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeMapOptionalTest._Benchmark.benchmark_doubleOnSubscribe":
  739821.999 ±(99.9%) 2071.221 ops/s [Average]
  (min, avg, max) = (726792.771, 739821.999, 743363.607), stdev = 3100.107
  CI (99.9%): [737750.778, 741893.220] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
MaybeMapOptionalTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  739821.999 ± 2071.221  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 518154.430 ops/s
# Warmup Iteration   2: 651306.214 ops/s
# Warmup Iteration   3: 640154.029 ops/s
# Warmup Iteration   4: 697073.052 ops/s
# Warmup Iteration   5: 708114.944 ops/s
# Warmup Iteration   6: 705316.774 ops/s
# Warmup Iteration   7: 708621.043 ops/s
# Warmup Iteration   8: 703845.178 ops/s
# Warmup Iteration   9: 707051.419 ops/s
# Warmup Iteration  10: 706718.607 ops/s
# Warmup Iteration  11: 704524.570 ops/s
# Warmup Iteration  12: 705137.766 ops/s
# Warmup Iteration  13: 705129.887 ops/s
# Warmup Iteration  14: 703631.592 ops/s
# Warmup Iteration  15: 700392.011 ops/s
# Warmup Iteration  16: 699959.752 ops/s
# Warmup Iteration  17: 725206.142 ops/s
# Warmup Iteration  18: 730762.256 ops/s
# Warmup Iteration  19: 730004.722 ops/s
# Warmup Iteration  20: 727886.795 ops/s
# Warmup Iteration  21: 732637.513 ops/s
# Warmup Iteration  22: 727665.070 ops/s
# Warmup Iteration  23: 725336.291 ops/s
# Warmup Iteration  24: 728877.568 ops/s
# Warmup Iteration  25: 728202.258 ops/s
# Warmup Iteration  26: 731107.898 ops/s
# Warmup Iteration  27: 730768.099 ops/s
# Warmup Iteration  28: 726788.237 ops/s
# Warmup Iteration  29: 729265.874 ops/s
# Warmup Iteration  30: 727464.829 ops/s
Iteration   1: 724687.708 ops/s
Iteration   2: 731731.447 ops/s
Iteration   3: 726449.850 ops/s
Iteration   4: 729182.565 ops/s
Iteration   5: 730194.240 ops/s
Iteration   6: 729515.570 ops/s
Iteration   7: 715541.193 ops/s
Iteration   8: 728071.062 ops/s
Iteration   9: 726955.871 ops/s
Iteration  10: 724004.323 ops/s
Iteration  11: 725350.253 ops/s
Iteration  12: 731638.505 ops/s
Iteration  13: 726450.171 ops/s
Iteration  14: 728181.860 ops/s
Iteration  15: 729299.999 ops/s
Iteration  16: 727114.330 ops/s
Iteration  17: 727243.053 ops/s
Iteration  18: 725204.969 ops/s
Iteration  19: 727976.284 ops/s
Iteration  20: 728484.331 ops/s
Iteration  21: 729213.345 ops/s
Iteration  22: 730147.377 ops/s
Iteration  23: 728339.788 ops/s
Iteration  24: 727240.205 ops/s
Iteration  25: 729384.497 ops/s
Iteration  26: 721796.449 ops/s
Iteration  27: 729740.124 ops/s
Iteration  28: 726030.931 ops/s
Iteration  29: 726484.841 ops/s
Iteration  30: 728873.808 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_doubleOnSubscribe":
  727350.965 ±(99.9%) 2099.547 ops/s [Average]
  (min, avg, max) = (715541.193, 727350.965, 731731.447), stdev = 3142.503
  CI (99.9%): [725251.418, 729450.512] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
MaybeFlatMapNotificationTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  727350.965 ± 2099.547  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 535504.429 ops/s
# Warmup Iteration   2: 649535.302 ops/s
# Warmup Iteration   3: 642996.966 ops/s
# Warmup Iteration   4: 699224.779 ops/s
# Warmup Iteration   5: 710914.299 ops/s
# Warmup Iteration   6: 710494.648 ops/s
# Warmup Iteration   7: 709503.026 ops/s
# Warmup Iteration   8: 707536.621 ops/s
# Warmup Iteration   9: 708425.382 ops/s
# Warmup Iteration  10: 707027.782 ops/s
# Warmup Iteration  11: 696721.403 ops/s
# Warmup Iteration  12: 707366.764 ops/s
# Warmup Iteration  13: 705127.505 ops/s
# Warmup Iteration  14: 704548.787 ops/s
# Warmup Iteration  15: 704209.600 ops/s
# Warmup Iteration  16: 704102.334 ops/s
# Warmup Iteration  17: 741942.456 ops/s
# Warmup Iteration  18: 732008.052 ops/s
# Warmup Iteration  19: 742453.365 ops/s
# Warmup Iteration  20: 741535.576 ops/s
# Warmup Iteration  21: 743865.717 ops/s
# Warmup Iteration  22: 744783.485 ops/s
# Warmup Iteration  23: 743526.384 ops/s
# Warmup Iteration  24: 740310.280 ops/s
# Warmup Iteration  25: 742868.067 ops/s
# Warmup Iteration  26: 740425.112 ops/s
# Warmup Iteration  27: 746767.827 ops/s
# Warmup Iteration  28: 745023.472 ops/s
# Warmup Iteration  29: 743917.643 ops/s
# Warmup Iteration  30: 745336.966 ops/s
Iteration   1: 747708.101 ops/s
Iteration   2: 745273.756 ops/s
Iteration   3: 743200.678 ops/s
Iteration   4: 742204.338 ops/s
Iteration   5: 742934.105 ops/s
Iteration   6: 741334.023 ops/s
Iteration   7: 743493.585 ops/s
Iteration   8: 746539.648 ops/s
Iteration   9: 740944.004 ops/s
Iteration  10: 742333.049 ops/s
Iteration  11: 744534.827 ops/s
Iteration  12: 742986.727 ops/s
Iteration  13: 741707.800 ops/s
Iteration  14: 745094.945 ops/s
Iteration  15: 742900.516 ops/s
Iteration  16: 736994.399 ops/s
Iteration  17: 743621.784 ops/s
Iteration  18: 743948.725 ops/s
Iteration  19: 744538.827 ops/s
Iteration  20: 743655.688 ops/s
Iteration  21: 743058.314 ops/s
Iteration  22: 744504.902 ops/s
Iteration  23: 744615.240 ops/s
Iteration  24: 744454.464 ops/s
Iteration  25: 744125.823 ops/s
Iteration  26: 728522.883 ops/s
Iteration  27: 741231.485 ops/s
Iteration  28: 744158.725 ops/s
Iteration  29: 742423.332 ops/s
Iteration  30: 739837.882 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnDoubleOnSubscribe":
  742762.753 ±(99.9%) 2246.134 ops/s [Average]
  (min, avg, max) = (728522.883, 742762.753, 747708.101), stdev = 3361.909
  CI (99.9%): [740516.618, 745008.887] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnDoubleOnSubscribe  thrpt   30  742762.753 ± 2246.134  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_eventsIgnoredAfterCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_eventsIgnoredAfterCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 568267.007 ops/s
# Warmup Iteration   2: 689953.972 ops/s
# Warmup Iteration   3: 686394.474 ops/s
# Warmup Iteration   4: 742090.927 ops/s
# Warmup Iteration   5: 744308.927 ops/s
# Warmup Iteration   6: 744669.278 ops/s
# Warmup Iteration   7: 741976.960 ops/s
# Warmup Iteration   8: 742076.139 ops/s
# Warmup Iteration   9: 741486.680 ops/s
# Warmup Iteration  10: 740824.895 ops/s
# Warmup Iteration  11: 740031.090 ops/s
# Warmup Iteration  12: 737710.068 ops/s
# Warmup Iteration  13: 734431.557 ops/s
# Warmup Iteration  14: 735044.877 ops/s
# Warmup Iteration  15: 738353.557 ops/s
# Warmup Iteration  16: 738283.338 ops/s
# Warmup Iteration  17: 768023.648 ops/s
# Warmup Iteration  18: 771235.773 ops/s
# Warmup Iteration  19: 772715.272 ops/s
# Warmup Iteration  20: 770005.434 ops/s
# Warmup Iteration  21: 769249.862 ops/s
# Warmup Iteration  22: 768865.495 ops/s
# Warmup Iteration  23: 774281.343 ops/s
# Warmup Iteration  24: 770682.003 ops/s
# Warmup Iteration  25: 770534.445 ops/s
# Warmup Iteration  26: 770240.726 ops/s
# Warmup Iteration  27: 770488.959 ops/s
# Warmup Iteration  28: 768982.990 ops/s
# Warmup Iteration  29: 768641.518 ops/s
# Warmup Iteration  30: 770429.299 ops/s
Iteration   1: 769507.706 ops/s
Iteration   2: 768489.152 ops/s
Iteration   3: 766319.993 ops/s
Iteration   4: 773208.284 ops/s
Iteration   5: 771006.192 ops/s
Iteration   6: 770167.485 ops/s
Iteration   7: 770383.655 ops/s
Iteration   8: 768867.622 ops/s
Iteration   9: 763870.959 ops/s
Iteration  10: 768997.826 ops/s
Iteration  11: 768658.808 ops/s
Iteration  12: 768109.328 ops/s
Iteration  13: 769083.180 ops/s
Iteration  14: 769284.842 ops/s
Iteration  15: 768482.669 ops/s
Iteration  16: 770360.962 ops/s
Iteration  17: 770862.004 ops/s
Iteration  18: 769997.550 ops/s
Iteration  19: 764212.411 ops/s
Iteration  20: 771403.217 ops/s
Iteration  21: 773189.645 ops/s
Iteration  22: 769365.960 ops/s
Iteration  23: 768182.614 ops/s
Iteration  24: 768186.969 ops/s
Iteration  25: 764496.261 ops/s
Iteration  26: 768124.638 ops/s
Iteration  27: 765679.171 ops/s
Iteration  28: 771057.417 ops/s
Iteration  29: 768806.254 ops/s
Iteration  30: 764677.720 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_eventsIgnoredAfterCrash":
  768768.016 ±(99.9%) 1606.856 ops/s [Average]
  (min, avg, max) = (763870.959, 768768.016, 773208.284), stdev = 2405.067
  CI (99.9%): [767161.160, 770374.873] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_eventsIgnoredAfterCrash  thrpt   30  768768.016 ± 1606.856  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 478586.715 ops/s
# Warmup Iteration   2: 650501.419 ops/s
# Warmup Iteration   3: 607662.987 ops/s
# Warmup Iteration   4: 707322.351 ops/s
# Warmup Iteration   5: 719254.282 ops/s
# Warmup Iteration   6: 714297.572 ops/s
# Warmup Iteration   7: 718548.202 ops/s
# Warmup Iteration   8: 717803.477 ops/s
# Warmup Iteration   9: 717393.358 ops/s
# Warmup Iteration  10: 716404.724 ops/s
# Warmup Iteration  11: 717093.801 ops/s
# Warmup Iteration  12: 715485.707 ops/s
# Warmup Iteration  13: 717729.815 ops/s
# Warmup Iteration  14: 716696.511 ops/s
# Warmup Iteration  15: 712768.700 ops/s
# Warmup Iteration  16: 712581.308 ops/s
# Warmup Iteration  17: 743671.890 ops/s
# Warmup Iteration  18: 740818.414 ops/s
# Warmup Iteration  19: 740738.859 ops/s
# Warmup Iteration  20: 738070.467 ops/s
# Warmup Iteration  21: 738531.511 ops/s
# Warmup Iteration  22: 738395.667 ops/s
# Warmup Iteration  23: 742351.998 ops/s
# Warmup Iteration  24: 741194.399 ops/s
# Warmup Iteration  25: 736586.883 ops/s
# Warmup Iteration  26: 740266.595 ops/s
# Warmup Iteration  27: 740251.295 ops/s
# Warmup Iteration  28: 739911.674 ops/s
# Warmup Iteration  29: 740910.596 ops/s
# Warmup Iteration  30: 735190.224 ops/s
Iteration   1: 739652.624 ops/s
Iteration   2: 735956.137 ops/s
Iteration   3: 740423.175 ops/s
Iteration   4: 740936.292 ops/s
Iteration   5: 742221.803 ops/s
Iteration   6: 739636.685 ops/s
Iteration   7: 738854.692 ops/s
Iteration   8: 744975.935 ops/s
Iteration   9: 738949.497 ops/s
Iteration  10: 743047.706 ops/s
Iteration  11: 740058.101 ops/s
Iteration  12: 740613.682 ops/s
Iteration  13: 735527.534 ops/s
Iteration  14: 738651.173 ops/s
Iteration  15: 716127.075 ops/s
Iteration  16: 750406.729 ops/s
Iteration  17: 735417.593 ops/s
Iteration  18: 740029.633 ops/s
Iteration  19: 737771.704 ops/s
Iteration  20: 740959.218 ops/s
Iteration  21: 739976.684 ops/s
Iteration  22: 742022.234 ops/s
Iteration  23: 739389.979 ops/s
Iteration  24: 736651.654 ops/s
Iteration  25: 737630.674 ops/s
Iteration  26: 739483.686 ops/s
Iteration  27: 739092.625 ops/s
Iteration  28: 742412.976 ops/s
Iteration  29: 738401.423 ops/s
Iteration  30: 738025.887 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastOneTest._Benchmark.benchmark_doubleOnSubscribe":
  739110.160 ±(99.9%) 3503.092 ops/s [Average]
  (min, avg, max) = (716127.075, 739110.160, 750406.729), stdev = 5243.264
  CI (99.9%): [735607.068, 742613.252] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
ObservableTakeLastOneTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  739110.160 ± 3503.092  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEventTest._Benchmark.benchmark_onSubscribeCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEventTest._Benchmark.benchmark_onSubscribeCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 156123.620 ops/s
# Warmup Iteration   2: 196975.769 ops/s
# Warmup Iteration   3: 213111.254 ops/s
# Warmup Iteration   4: 213230.925 ops/s
# Warmup Iteration   5: 223097.360 ops/s
# Warmup Iteration   6: 221737.139 ops/s
# Warmup Iteration   7: 222804.311 ops/s
# Warmup Iteration   8: 221750.072 ops/s
# Warmup Iteration   9: 222010.070 ops/s
# Warmup Iteration  10: 222254.845 ops/s
# Warmup Iteration  11: 221730.316 ops/s
# Warmup Iteration  12: 221874.471 ops/s
# Warmup Iteration  13: 221615.355 ops/s
# Warmup Iteration  14: 221237.285 ops/s
# Warmup Iteration  15: 220882.792 ops/s
# Warmup Iteration  16: 221000.098 ops/s
# Warmup Iteration  17: 231915.301 ops/s
# Warmup Iteration  18: 232157.309 ops/s
# Warmup Iteration  19: 230830.774 ops/s
# Warmup Iteration  20: 231926.410 ops/s
# Warmup Iteration  21: 233209.312 ops/s
# Warmup Iteration  22: 231795.455 ops/s
# Warmup Iteration  23: 231804.318 ops/s
# Warmup Iteration  24: 232535.756 ops/s
# Warmup Iteration  25: 232894.026 ops/s
# Warmup Iteration  26: 231184.005 ops/s
# Warmup Iteration  27: 231333.198 ops/s
# Warmup Iteration  28: 232121.490 ops/s
# Warmup Iteration  29: 231703.244 ops/s
# Warmup Iteration  30: 233095.415 ops/s
Iteration   1: 231672.065 ops/s
Iteration   2: 231481.658 ops/s
Iteration   3: 231411.279 ops/s
Iteration   4: 232513.903 ops/s
Iteration   5: 233668.489 ops/s
Iteration   6: 231746.829 ops/s
Iteration   7: 232489.857 ops/s
Iteration   8: 231093.835 ops/s
Iteration   9: 232732.960 ops/s
Iteration  10: 233306.798 ops/s
Iteration  11: 231824.033 ops/s
Iteration  12: 232333.899 ops/s
Iteration  13: 233123.588 ops/s
Iteration  14: 232792.810 ops/s
Iteration  15: 231635.080 ops/s
Iteration  16: 232579.764 ops/s
Iteration  17: 232068.576 ops/s
Iteration  18: 231298.484 ops/s
Iteration  19: 231653.962 ops/s
Iteration  20: 231374.545 ops/s
Iteration  21: 231223.016 ops/s
Iteration  22: 231230.748 ops/s
Iteration  23: 233892.184 ops/s
Iteration  24: 232359.853 ops/s
Iteration  25: 231243.922 ops/s
Iteration  26: 231599.788 ops/s
Iteration  27: 231940.108 ops/s
Iteration  28: 232282.865 ops/s
Iteration  29: 232667.550 ops/s
Iteration  30: 232222.760 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnEventTest._Benchmark.benchmark_onSubscribeCrash":
  232115.507 ±(99.9%) 503.454 ops/s [Average]
  (min, avg, max) = (231093.835, 232115.507, 233892.184), stdev = 753.546
  CI (99.9%): [231612.053, 232618.961] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score     Error  Units
MaybeDoOnEventTest._Benchmark.benchmark_onSubscribeCrash  thrpt   30  232115.507 ± 503.454  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromCallableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromCallableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 677934.756 ops/s
# Warmup Iteration   2: 782476.805 ops/s
# Warmup Iteration   3: 827559.527 ops/s
# Warmup Iteration   4: 802477.866 ops/s
# Warmup Iteration   5: 875127.394 ops/s
# Warmup Iteration   6: 875907.916 ops/s
# Warmup Iteration   7: 872264.678 ops/s
# Warmup Iteration   8: 876065.814 ops/s
# Warmup Iteration   9: 872815.532 ops/s
# Warmup Iteration  10: 857450.623 ops/s
# Warmup Iteration  11: 874586.752 ops/s
# Warmup Iteration  12: 872751.468 ops/s
# Warmup Iteration  13: 872951.195 ops/s
# Warmup Iteration  14: 873379.110 ops/s
# Warmup Iteration  15: 868793.220 ops/s
# Warmup Iteration  16: 869650.656 ops/s
# Warmup Iteration  17: 912762.304 ops/s
# Warmup Iteration  18: 917948.886 ops/s
# Warmup Iteration  19: 911035.523 ops/s
# Warmup Iteration  20: 907643.895 ops/s
# Warmup Iteration  21: 913967.360 ops/s
# Warmup Iteration  22: 911888.701 ops/s
# Warmup Iteration  23: 911145.793 ops/s
# Warmup Iteration  24: 914805.378 ops/s
# Warmup Iteration  25: 908953.459 ops/s
# Warmup Iteration  26: 913327.549 ops/s
# Warmup Iteration  27: 917831.504 ops/s
# Warmup Iteration  28: 913504.158 ops/s
# Warmup Iteration  29: 914311.826 ops/s
# Warmup Iteration  30: 910476.255 ops/s
Iteration   1: 915817.592 ops/s
Iteration   2: 908357.604 ops/s
Iteration   3: 913115.833 ops/s
Iteration   4: 916272.248 ops/s
Iteration   5: 916516.811 ops/s
Iteration   6: 914065.036 ops/s
Iteration   7: 917480.688 ops/s
Iteration   8: 914838.462 ops/s
Iteration   9: 911954.079 ops/s
Iteration  10: 917665.690 ops/s
Iteration  11: 916698.258 ops/s
Iteration  12: 912213.146 ops/s
Iteration  13: 917391.225 ops/s
Iteration  14: 912899.921 ops/s
Iteration  15: 912969.517 ops/s
Iteration  16: 913376.975 ops/s
Iteration  17: 917346.930 ops/s
Iteration  18: 914876.175 ops/s
Iteration  19: 916314.990 ops/s
Iteration  20: 909837.313 ops/s
Iteration  21: 917786.273 ops/s
Iteration  22: 912487.814 ops/s
Iteration  23: 909686.896 ops/s
Iteration  24: 908627.726 ops/s
Iteration  25: 912874.341 ops/s
Iteration  26: 909865.220 ops/s
Iteration  27: 910875.007 ops/s
Iteration  28: 914250.752 ops/s
Iteration  29: 909491.467 ops/s
Iteration  30: 910292.548 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromCallableThrows":
  913541.551 ±(99.9%) 1989.700 ops/s [Average]
  (min, avg, max) = (908357.604, 913541.551, 917786.273), stdev = 2978.089
  CI (99.9%): [911551.852, 915531.251] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_fromCallableThrows  thrpt   30  913541.551 ± 1989.700  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableMaybeObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableMaybeObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 278248.517 ops/s
# Warmup Iteration   2: 391629.348 ops/s
# Warmup Iteration   3: 427197.076 ops/s
# Warmup Iteration   4: 435913.479 ops/s
# Warmup Iteration   5: 440847.214 ops/s
# Warmup Iteration   6: 443658.391 ops/s
# Warmup Iteration   7: 442298.601 ops/s
# Warmup Iteration   8: 442470.879 ops/s
# Warmup Iteration   9: 441613.679 ops/s
# Warmup Iteration  10: 445701.631 ops/s
# Warmup Iteration  11: 444789.607 ops/s
# Warmup Iteration  12: 443342.730 ops/s
# Warmup Iteration  13: 444666.362 ops/s
# Warmup Iteration  14: 443570.618 ops/s
# Warmup Iteration  15: 444440.724 ops/s
# Warmup Iteration  16: 445872.178 ops/s
# Warmup Iteration  17: 456729.404 ops/s
# Warmup Iteration  18: 454223.504 ops/s
# Warmup Iteration  19: 453464.644 ops/s
# Warmup Iteration  20: 457524.178 ops/s
# Warmup Iteration  21: 452343.100 ops/s
# Warmup Iteration  22: 457303.936 ops/s
# Warmup Iteration  23: 458239.096 ops/s
# Warmup Iteration  24: 457072.126 ops/s
# Warmup Iteration  25: 456673.264 ops/s
# Warmup Iteration  26: 459344.734 ops/s
# Warmup Iteration  27: 455837.327 ops/s
# Warmup Iteration  28: 455513.534 ops/s
# Warmup Iteration  29: 449761.845 ops/s
# Warmup Iteration  30: 455591.292 ops/s
Iteration   1: 457831.525 ops/s
Iteration   2: 458074.987 ops/s
Iteration   3: 456444.169 ops/s
Iteration   4: 458335.063 ops/s
Iteration   5: 455080.847 ops/s
Iteration   6: 456015.631 ops/s
Iteration   7: 457366.477 ops/s
Iteration   8: 458491.222 ops/s
Iteration   9: 455919.100 ops/s
Iteration  10: 458573.360 ops/s
Iteration  11: 455155.970 ops/s
Iteration  12: 455004.671 ops/s
Iteration  13: 455964.915 ops/s
Iteration  14: 453649.705 ops/s
Iteration  15: 454310.512 ops/s
Iteration  16: 457285.722 ops/s
Iteration  17: 454819.936 ops/s
Iteration  18: 456383.700 ops/s
Iteration  19: 457175.215 ops/s
Iteration  20: 454074.291 ops/s
Iteration  21: 457691.181 ops/s
Iteration  22: 454350.134 ops/s
Iteration  23: 456646.637 ops/s
Iteration  24: 455769.763 ops/s
Iteration  25: 455246.307 ops/s
Iteration  26: 453550.753 ops/s
Iteration  27: 456355.754 ops/s
Iteration  28: 456956.240 ops/s
Iteration  29: 453821.893 ops/s
Iteration  30: 456675.723 ops/s


Result "io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableMaybeObserver":
  456100.713 ±(99.9%) 1006.228 ops/s [Average]
  (min, avg, max) = (453550.753, 456100.713, 458573.360), stdev = 1506.075
  CI (99.9%): [455094.485, 457106.941] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableMaybeObserver  thrpt   30  456100.713 ± 1006.228  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 206258.994 ops/s
# Warmup Iteration   2: 296534.684 ops/s
# Warmup Iteration   3: 285969.570 ops/s
# Warmup Iteration   4: 317771.689 ops/s
# Warmup Iteration   5: 322240.223 ops/s
# Warmup Iteration   6: 320343.042 ops/s
# Warmup Iteration   7: 319437.531 ops/s
# Warmup Iteration   8: 321017.353 ops/s
# Warmup Iteration   9: 320149.690 ops/s
# Warmup Iteration  10: 319748.272 ops/s
# Warmup Iteration  11: 320756.570 ops/s
# Warmup Iteration  12: 320138.461 ops/s
# Warmup Iteration  13: 318683.442 ops/s
# Warmup Iteration  14: 318584.842 ops/s
# Warmup Iteration  15: 319528.805 ops/s
# Warmup Iteration  16: 319978.346 ops/s
# Warmup Iteration  17: 334704.484 ops/s
# Warmup Iteration  18: 327283.946 ops/s
# Warmup Iteration  19: 333472.485 ops/s
# Warmup Iteration  20: 335246.947 ops/s
# Warmup Iteration  21: 333779.592 ops/s
# Warmup Iteration  22: 335057.766 ops/s
# Warmup Iteration  23: 333066.397 ops/s
# Warmup Iteration  24: 331569.327 ops/s
# Warmup Iteration  25: 331972.843 ops/s
# Warmup Iteration  26: 331408.042 ops/s
# Warmup Iteration  27: 332416.211 ops/s
# Warmup Iteration  28: 331941.517 ops/s
# Warmup Iteration  29: 332364.839 ops/s
# Warmup Iteration  30: 332417.180 ops/s
Iteration   1: 330460.208 ops/s
Iteration   2: 334397.397 ops/s
Iteration   3: 331097.162 ops/s
Iteration   4: 330139.814 ops/s
Iteration   5: 331348.858 ops/s
Iteration   6: 331873.823 ops/s
Iteration   7: 331407.755 ops/s
Iteration   8: 331412.350 ops/s
Iteration   9: 331172.446 ops/s
Iteration  10: 332225.610 ops/s
Iteration  11: 331816.710 ops/s
Iteration  12: 334407.589 ops/s
Iteration  13: 331474.443 ops/s
Iteration  14: 330899.834 ops/s
Iteration  15: 331523.599 ops/s
Iteration  16: 330429.625 ops/s
Iteration  17: 330206.858 ops/s
Iteration  18: 329027.542 ops/s
Iteration  19: 334015.960 ops/s
Iteration  20: 331920.431 ops/s
Iteration  21: 331754.492 ops/s
Iteration  22: 329574.999 ops/s
Iteration  23: 331667.044 ops/s
Iteration  24: 332146.087 ops/s
Iteration  25: 332762.865 ops/s
Iteration  26: 330470.337 ops/s
Iteration  27: 329979.599 ops/s
Iteration  28: 332120.687 ops/s
Iteration  29: 331463.176 ops/s
Iteration  30: 332029.548 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_badSource":
  331507.562 ±(99.9%) 846.035 ops/s [Average]
  (min, avg, max) = (329027.542, 331507.562, 334407.589), stdev = 1266.305
  CI (99.9%): [330661.527, 332353.596] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score     Error  Units
ObservableElementAtTest._Benchmark.benchmark_badSource  thrpt   30  331507.562 ± 846.035  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastSourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastSourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229387.137 ops/s
# Warmup Iteration   2: 301654.757 ops/s
# Warmup Iteration   3: 287074.921 ops/s
# Warmup Iteration   4: 318469.316 ops/s
# Warmup Iteration   5: 323393.532 ops/s
# Warmup Iteration   6: 322151.873 ops/s
# Warmup Iteration   7: 321482.062 ops/s
# Warmup Iteration   8: 320838.425 ops/s
# Warmup Iteration   9: 321699.654 ops/s
# Warmup Iteration  10: 321921.927 ops/s
# Warmup Iteration  11: 321889.821 ops/s
# Warmup Iteration  12: 321276.926 ops/s
# Warmup Iteration  13: 319890.098 ops/s
# Warmup Iteration  14: 319780.160 ops/s
# Warmup Iteration  15: 319756.387 ops/s
# Warmup Iteration  16: 320568.573 ops/s
# Warmup Iteration  17: 338166.531 ops/s
# Warmup Iteration  18: 337983.676 ops/s
# Warmup Iteration  19: 336259.900 ops/s
# Warmup Iteration  20: 338163.379 ops/s
# Warmup Iteration  21: 336810.690 ops/s
# Warmup Iteration  22: 337283.973 ops/s
# Warmup Iteration  23: 337495.347 ops/s
# Warmup Iteration  24: 336671.068 ops/s
# Warmup Iteration  25: 338113.720 ops/s
# Warmup Iteration  26: 337707.472 ops/s
# Warmup Iteration  27: 339148.613 ops/s
# Warmup Iteration  28: 339803.317 ops/s
# Warmup Iteration  29: 338652.470 ops/s
# Warmup Iteration  30: 339325.706 ops/s
Iteration   1: 342234.463 ops/s
Iteration   2: 338544.243 ops/s
Iteration   3: 332876.581 ops/s
Iteration   4: 338256.617 ops/s
Iteration   5: 340121.924 ops/s
Iteration   6: 338770.517 ops/s
Iteration   7: 338154.396 ops/s
Iteration   8: 339738.450 ops/s
Iteration   9: 338694.959 ops/s
Iteration  10: 340106.092 ops/s
Iteration  11: 339056.463 ops/s
Iteration  12: 332377.926 ops/s
Iteration  13: 340096.278 ops/s
Iteration  14: 339923.144 ops/s
Iteration  15: 339355.177 ops/s
Iteration  16: 339924.446 ops/s
Iteration  17: 339202.340 ops/s
Iteration  18: 338335.230 ops/s
Iteration  19: 338913.449 ops/s
Iteration  20: 339582.358 ops/s
Iteration  21: 333819.407 ops/s
Iteration  22: 337926.786 ops/s
Iteration  23: 337034.330 ops/s
Iteration  24: 339309.078 ops/s
Iteration  25: 340700.297 ops/s
Iteration  26: 339286.622 ops/s
Iteration  27: 339115.547 ops/s
Iteration  28: 340489.526 ops/s
Iteration  29: 338697.306 ops/s
Iteration  30: 339616.710 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastSourceIgnoresCancel":
  338675.355 ±(99.9%) 1440.394 ops/s [Average]
  (min, avg, max) = (332377.926, 338675.355, 342234.463), stdev = 2155.914
  CI (99.9%): [337234.962, 340115.749] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastSourceIgnoresCancel  thrpt   30  338675.355 ± 1440.394  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 531961.529 ops/s
# Warmup Iteration   2: 662491.015 ops/s
# Warmup Iteration   3: 670772.906 ops/s
# Warmup Iteration   4: 766345.802 ops/s
# Warmup Iteration   5: 839881.276 ops/s
# Warmup Iteration   6: 838477.109 ops/s
# Warmup Iteration   7: 839814.588 ops/s
# Warmup Iteration   8: 818385.449 ops/s
# Warmup Iteration   9: 836948.764 ops/s
# Warmup Iteration  10: 836224.501 ops/s
# Warmup Iteration  11: 834880.680 ops/s
# Warmup Iteration  12: 833801.567 ops/s
# Warmup Iteration  13: 833962.047 ops/s
# Warmup Iteration  14: 832436.234 ops/s
# Warmup Iteration  15: 832665.669 ops/s
# Warmup Iteration  16: 834370.567 ops/s
# Warmup Iteration  17: 828280.916 ops/s
# Warmup Iteration  18: 828602.026 ops/s
# Warmup Iteration  19: 828159.069 ops/s
# Warmup Iteration  20: 829651.208 ops/s
# Warmup Iteration  21: 832331.956 ops/s
# Warmup Iteration  22: 828163.223 ops/s
# Warmup Iteration  23: 826120.570 ops/s
# Warmup Iteration  24: 830362.830 ops/s
# Warmup Iteration  25: 826333.289 ops/s
# Warmup Iteration  26: 828762.701 ops/s
# Warmup Iteration  27: 832203.052 ops/s
# Warmup Iteration  28: 830060.880 ops/s
# Warmup Iteration  29: 830994.787 ops/s
# Warmup Iteration  30: 828685.206 ops/s
Iteration   1: 831787.635 ops/s
Iteration   2: 828582.870 ops/s
Iteration   3: 829793.591 ops/s
Iteration   4: 829250.317 ops/s
Iteration   5: 829161.698 ops/s
Iteration   6: 828071.814 ops/s
Iteration   7: 827576.341 ops/s
Iteration   8: 829729.393 ops/s
Iteration   9: 830734.934 ops/s
Iteration  10: 827808.608 ops/s
Iteration  11: 831990.899 ops/s
Iteration  12: 830652.364 ops/s
Iteration  13: 828151.762 ops/s
Iteration  14: 830090.950 ops/s
Iteration  15: 829456.463 ops/s
Iteration  16: 828584.059 ops/s
Iteration  17: 829103.908 ops/s
Iteration  18: 827474.538 ops/s
Iteration  19: 829644.167 ops/s
Iteration  20: 828325.617 ops/s
Iteration  21: 828879.916 ops/s
Iteration  22: 827809.573 ops/s
Iteration  23: 828961.363 ops/s
Iteration  24: 829152.675 ops/s
Iteration  25: 828516.035 ops/s
Iteration  26: 829786.928 ops/s
Iteration  27: 829990.160 ops/s
Iteration  28: 830326.001 ops/s
Iteration  29: 829499.337 ops/s
Iteration  30: 829243.592 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normal":
  829271.250 ±(99.9%) 753.002 ops/s [Average]
  (min, avg, max) = (827474.538, 829271.250, 831990.899), stdev = 1127.058
  CI (99.9%): [828518.248, 830024.252] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_normal  thrpt   30  829271.250 ± 753.002  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 523224.050 ops/s
# Warmup Iteration   2: 697690.744 ops/s
# Warmup Iteration   3: 690934.538 ops/s
# Warmup Iteration   4: 770678.383 ops/s
# Warmup Iteration   5: 843283.519 ops/s
# Warmup Iteration   6: 842719.048 ops/s
# Warmup Iteration   7: 840042.428 ops/s
# Warmup Iteration   8: 841061.833 ops/s
# Warmup Iteration   9: 839345.963 ops/s
# Warmup Iteration  10: 839003.022 ops/s
# Warmup Iteration  11: 831319.438 ops/s
# Warmup Iteration  12: 840921.640 ops/s
# Warmup Iteration  13: 839216.073 ops/s
# Warmup Iteration  14: 837305.349 ops/s
# Warmup Iteration  15: 835131.732 ops/s
# Warmup Iteration  16: 838579.015 ops/s
# Warmup Iteration  17: 846230.658 ops/s
# Warmup Iteration  18: 841154.962 ops/s
# Warmup Iteration  19: 843687.374 ops/s
# Warmup Iteration  20: 843700.352 ops/s
# Warmup Iteration  21: 841524.691 ops/s
# Warmup Iteration  22: 842411.138 ops/s
# Warmup Iteration  23: 843478.195 ops/s
# Warmup Iteration  24: 842475.938 ops/s
# Warmup Iteration  25: 842446.214 ops/s
# Warmup Iteration  26: 841123.624 ops/s
# Warmup Iteration  27: 842338.268 ops/s
# Warmup Iteration  28: 844432.790 ops/s
# Warmup Iteration  29: 841708.347 ops/s
# Warmup Iteration  30: 841738.517 ops/s
Iteration   1: 834959.287 ops/s
Iteration   2: 844293.480 ops/s
Iteration   3: 838577.846 ops/s
Iteration   4: 842435.912 ops/s
Iteration   5: 843407.571 ops/s
Iteration   6: 840851.025 ops/s
Iteration   7: 842094.665 ops/s
Iteration   8: 842373.664 ops/s
Iteration   9: 847104.778 ops/s
Iteration  10: 839670.561 ops/s
Iteration  11: 842961.376 ops/s
Iteration  12: 843898.978 ops/s
Iteration  13: 843347.887 ops/s
Iteration  14: 841891.120 ops/s
Iteration  15: 841178.247 ops/s
Iteration  16: 840180.499 ops/s
Iteration  17: 840999.699 ops/s
Iteration  18: 839860.954 ops/s
Iteration  19: 842180.530 ops/s
Iteration  20: 844142.220 ops/s
Iteration  21: 841953.796 ops/s
Iteration  22: 840705.265 ops/s
Iteration  23: 841806.454 ops/s
Iteration  24: 840031.129 ops/s
Iteration  25: 846017.720 ops/s
Iteration  26: 842484.568 ops/s
Iteration  27: 840240.835 ops/s
Iteration  28: 835194.962 ops/s
Iteration  29: 842054.046 ops/s
Iteration  30: 839144.345 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_normalDelayError":
  841534.781 ±(99.9%) 1733.580 ops/s [Average]
  (min, avg, max) = (834959.287, 841534.781, 847104.778), stdev = 2594.742
  CI (99.9%): [839801.200, 843268.361] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_normalDelayError  thrpt   30  841534.781 ± 1733.580  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError2ErrorFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError2ErrorFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 451362.497 ops/s
# Warmup Iteration   2: 578629.334 ops/s
# Warmup Iteration   3: 630619.460 ops/s
# Warmup Iteration   4: 625352.716 ops/s
# Warmup Iteration   5: 661369.497 ops/s
# Warmup Iteration   6: 674447.696 ops/s
# Warmup Iteration   7: 670229.957 ops/s
# Warmup Iteration   8: 672159.727 ops/s
# Warmup Iteration   9: 673139.743 ops/s
# Warmup Iteration  10: 669117.027 ops/s
# Warmup Iteration  11: 670065.311 ops/s
# Warmup Iteration  12: 669921.360 ops/s
# Warmup Iteration  13: 671335.020 ops/s
# Warmup Iteration  14: 661564.539 ops/s
# Warmup Iteration  15: 670371.655 ops/s
# Warmup Iteration  16: 669290.327 ops/s
# Warmup Iteration  17: 697517.841 ops/s
# Warmup Iteration  18: 697621.711 ops/s
# Warmup Iteration  19: 698625.261 ops/s
# Warmup Iteration  20: 696543.349 ops/s
# Warmup Iteration  21: 697750.075 ops/s
# Warmup Iteration  22: 698335.215 ops/s
# Warmup Iteration  23: 698102.498 ops/s
# Warmup Iteration  24: 700251.276 ops/s
# Warmup Iteration  25: 698848.371 ops/s
# Warmup Iteration  26: 698756.515 ops/s
# Warmup Iteration  27: 699117.011 ops/s
# Warmup Iteration  28: 698779.681 ops/s
# Warmup Iteration  29: 699711.690 ops/s
# Warmup Iteration  30: 701622.245 ops/s
Iteration   1: 698627.773 ops/s
Iteration   2: 700357.931 ops/s
Iteration   3: 694635.276 ops/s
Iteration   4: 698691.827 ops/s
Iteration   5: 701825.464 ops/s
Iteration   6: 698743.666 ops/s
Iteration   7: 696552.503 ops/s
Iteration   8: 699805.825 ops/s
Iteration   9: 698987.395 ops/s
Iteration  10: 700095.465 ops/s
Iteration  11: 696869.938 ops/s
Iteration  12: 697735.550 ops/s
Iteration  13: 696652.861 ops/s
Iteration  14: 700368.218 ops/s
Iteration  15: 693231.408 ops/s
Iteration  16: 701771.331 ops/s
Iteration  17: 697663.204 ops/s
Iteration  18: 701706.903 ops/s
Iteration  19: 699796.838 ops/s
Iteration  20: 700172.407 ops/s
Iteration  21: 697994.524 ops/s
Iteration  22: 699557.235 ops/s
Iteration  23: 700029.922 ops/s
Iteration  24: 700701.363 ops/s
Iteration  25: 696409.110 ops/s
Iteration  26: 700639.386 ops/s
Iteration  27: 685907.154 ops/s
Iteration  28: 698969.757 ops/s
Iteration  29: 696038.600 ops/s
Iteration  30: 694763.121 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError2ErrorFirst":
  698176.732 ±(99.9%) 2131.268 ops/s [Average]
  (min, avg, max) = (685907.154, 698176.732, 701825.464), stdev = 3189.982
  CI (99.9%): [696045.464, 700308.000] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
SingleMergeTest._Benchmark.benchmark_mergeDelayError2ErrorFirst  thrpt   30  698176.732 ± 2131.268  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 431412.007 ops/s
# Warmup Iteration   2: 578338.163 ops/s
# Warmup Iteration   3: 636221.200 ops/s
# Warmup Iteration   4: 625280.164 ops/s
# Warmup Iteration   5: 680403.178 ops/s
# Warmup Iteration   6: 680080.741 ops/s
# Warmup Iteration   7: 680247.856 ops/s
# Warmup Iteration   8: 680816.598 ops/s
# Warmup Iteration   9: 678615.139 ops/s
# Warmup Iteration  10: 679548.150 ops/s
# Warmup Iteration  11: 676423.635 ops/s
# Warmup Iteration  12: 678781.864 ops/s
# Warmup Iteration  13: 677173.985 ops/s
# Warmup Iteration  14: 674808.774 ops/s
# Warmup Iteration  15: 675212.446 ops/s
# Warmup Iteration  16: 670043.602 ops/s
# Warmup Iteration  17: 708498.301 ops/s
# Warmup Iteration  18: 709411.996 ops/s
# Warmup Iteration  19: 707862.740 ops/s
# Warmup Iteration  20: 704358.092 ops/s
# Warmup Iteration  21: 706509.565 ops/s
# Warmup Iteration  22: 702781.085 ops/s
# Warmup Iteration  23: 708328.250 ops/s
# Warmup Iteration  24: 705967.698 ops/s
# Warmup Iteration  25: 707861.249 ops/s
# Warmup Iteration  26: 696247.091 ops/s
# Warmup Iteration  27: 708975.939 ops/s
# Warmup Iteration  28: 709032.545 ops/s
# Warmup Iteration  29: 706059.082 ops/s
# Warmup Iteration  30: 707953.223 ops/s
Iteration   1: 705613.604 ops/s
Iteration   2: 704959.095 ops/s
Iteration   3: 703945.833 ops/s
Iteration   4: 712630.237 ops/s
Iteration   5: 708012.435 ops/s
Iteration   6: 708833.127 ops/s
Iteration   7: 708458.015 ops/s
Iteration   8: 706808.341 ops/s
Iteration   9: 705735.735 ops/s
Iteration  10: 709051.527 ops/s
Iteration  11: 711215.228 ops/s
Iteration  12: 706891.489 ops/s
Iteration  13: 711505.427 ops/s
Iteration  14: 706404.490 ops/s
Iteration  15: 706104.347 ops/s
Iteration  16: 705103.242 ops/s
Iteration  17: 705013.684 ops/s
Iteration  18: 707389.665 ops/s
Iteration  19: 708275.948 ops/s
Iteration  20: 705260.591 ops/s
Iteration  21: 703503.087 ops/s
Iteration  22: 706249.623 ops/s
Iteration  23: 707459.812 ops/s
Iteration  24: 708286.168 ops/s
Iteration  25: 707791.581 ops/s
Iteration  26: 706255.860 ops/s
Iteration  27: 707446.717 ops/s
Iteration  28: 708503.684 ops/s
Iteration  29: 706196.040 ops/s
Iteration  30: 709043.711 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMergeTest._Benchmark.benchmark_mergeDelayError2":
  707264.945 ±(99.9%) 1425.778 ops/s [Average]
  (min, avg, max) = (703503.087, 707264.945, 712630.237), stdev = 2134.038
  CI (99.9%): [705839.166, 708690.723] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
SingleMergeTest._Benchmark.benchmark_mergeDelayError2  thrpt   30  707264.945 ± 1425.778  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1179521.772 ops/s
# Warmup Iteration   2: 1633772.451 ops/s
# Warmup Iteration   3: 1842132.856 ops/s
# Warmup Iteration   4: 1965556.451 ops/s
# Warmup Iteration   5: 2082132.029 ops/s
# Warmup Iteration   6: 2069595.558 ops/s
# Warmup Iteration   7: 2072709.662 ops/s
# Warmup Iteration   8: 2071229.901 ops/s
# Warmup Iteration   9: 2058784.580 ops/s
# Warmup Iteration  10: 2033703.242 ops/s
# Warmup Iteration  11: 2067754.198 ops/s
# Warmup Iteration  12: 2077744.236 ops/s
# Warmup Iteration  13: 2061775.306 ops/s
# Warmup Iteration  14: 2049027.003 ops/s
# Warmup Iteration  15: 2066809.642 ops/s
# Warmup Iteration  16: 2065650.880 ops/s
# Warmup Iteration  17: 2062797.431 ops/s
# Warmup Iteration  18: 2074926.248 ops/s
# Warmup Iteration  19: 2073922.961 ops/s
# Warmup Iteration  20: 2078620.452 ops/s
# Warmup Iteration  21: 2074040.536 ops/s
# Warmup Iteration  22: 2069792.062 ops/s
# Warmup Iteration  23: 2076828.699 ops/s
# Warmup Iteration  24: 2078881.730 ops/s
# Warmup Iteration  25: 2080303.275 ops/s
# Warmup Iteration  26: 2075051.099 ops/s
# Warmup Iteration  27: 2068207.576 ops/s
# Warmup Iteration  28: 2080003.802 ops/s
# Warmup Iteration  29: 2071133.057 ops/s
# Warmup Iteration  30: 2076322.117 ops/s
Iteration   1: 2057953.857 ops/s
Iteration   2: 2077952.106 ops/s
Iteration   3: 2079032.830 ops/s
Iteration   4: 2067684.614 ops/s
Iteration   5: 2067103.640 ops/s
Iteration   6: 2080244.855 ops/s
Iteration   7: 2074165.385 ops/s
Iteration   8: 2074269.201 ops/s
Iteration   9: 2073222.315 ops/s
Iteration  10: 2082145.350 ops/s
Iteration  11: 2063659.167 ops/s
Iteration  12: 2068991.961 ops/s
Iteration  13: 2078237.386 ops/s
Iteration  14: 2069815.709 ops/s
Iteration  15: 2064788.173 ops/s
Iteration  16: 2078009.982 ops/s
Iteration  17: 2075545.705 ops/s
Iteration  18: 2077112.525 ops/s
Iteration  19: 2078659.925 ops/s
Iteration  20: 2070424.225 ops/s
Iteration  21: 2070016.612 ops/s
Iteration  22: 2070658.256 ops/s
Iteration  23: 2076506.106 ops/s
Iteration  24: 2076961.087 ops/s
Iteration  25: 2082215.218 ops/s
Iteration  26: 2075265.639 ops/s
Iteration  27: 2063720.661 ops/s
Iteration  28: 2076378.947 ops/s
Iteration  29: 2079099.613 ops/s
Iteration  30: 2064739.612 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_take":
  2073152.689 ±(99.9%) 4151.348 ops/s [Average]
  (min, avg, max) = (2057953.857, 2073152.689, 2082215.218), stdev = 6213.543
  CI (99.9%): [2069001.341, 2077304.037] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_take  thrpt   30  2073152.689 ± 4151.348  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_emissionQueueTrigger$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_emissionQueueTrigger

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 748293.344 ops/s
# Warmup Iteration   2: 1180663.914 ops/s
# Warmup Iteration   3: 1422258.249 ops/s
# Warmup Iteration   4: 1431819.836 ops/s
# Warmup Iteration   5: 1458389.690 ops/s
# Warmup Iteration   6: 1442071.969 ops/s
# Warmup Iteration   7: 1449284.865 ops/s
# Warmup Iteration   8: 1430934.891 ops/s
# Warmup Iteration   9: 1458082.485 ops/s
# Warmup Iteration  10: 1458583.807 ops/s
# Warmup Iteration  11: 1460394.599 ops/s
# Warmup Iteration  12: 1462130.501 ops/s
# Warmup Iteration  13: 1456508.638 ops/s
# Warmup Iteration  14: 1463838.567 ops/s
# Warmup Iteration  15: 1456432.621 ops/s
# Warmup Iteration  16: 1449874.216 ops/s
# Warmup Iteration  17: 1457785.610 ops/s
# Warmup Iteration  18: 1458526.100 ops/s
# Warmup Iteration  19: 1462023.814 ops/s
# Warmup Iteration  20: 1446947.909 ops/s
# Warmup Iteration  21: 1452302.653 ops/s
# Warmup Iteration  22: 1451009.176 ops/s
# Warmup Iteration  23: 1451783.155 ops/s
# Warmup Iteration  24: 1460710.533 ops/s
# Warmup Iteration  25: 1453549.439 ops/s
# Warmup Iteration  26: 1454944.881 ops/s
# Warmup Iteration  27: 1461624.416 ops/s
# Warmup Iteration  28: 1455199.843 ops/s
# Warmup Iteration  29: 1455324.650 ops/s
# Warmup Iteration  30: 1452974.606 ops/s
Iteration   1: 1453742.976 ops/s
Iteration   2: 1454623.765 ops/s
Iteration   3: 1451865.869 ops/s
Iteration   4: 1452692.676 ops/s
Iteration   5: 1453832.936 ops/s
Iteration   6: 1459235.975 ops/s
Iteration   7: 1454285.124 ops/s
Iteration   8: 1454056.717 ops/s
Iteration   9: 1449591.139 ops/s
Iteration  10: 1454821.363 ops/s
Iteration  11: 1454062.177 ops/s
Iteration  12: 1458530.289 ops/s
Iteration  13: 1454998.540 ops/s
Iteration  14: 1460856.042 ops/s
Iteration  15: 1454573.178 ops/s
Iteration  16: 1451108.671 ops/s
Iteration  17: 1446681.904 ops/s
Iteration  18: 1458695.447 ops/s
Iteration  19: 1456457.835 ops/s
Iteration  20: 1457812.927 ops/s
Iteration  21: 1461537.680 ops/s
Iteration  22: 1459233.189 ops/s
Iteration  23: 1451507.071 ops/s
Iteration  24: 1458108.312 ops/s
Iteration  25: 1462459.713 ops/s
Iteration  26: 1457210.230 ops/s
Iteration  27: 1447706.857 ops/s
Iteration  28: 1461789.172 ops/s
Iteration  29: 1453742.134 ops/s
Iteration  30: 1465355.473 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_emissionQueueTrigger":
  1455705.846 ±(99.9%) 2933.085 ops/s [Average]
  (min, avg, max) = (1446681.904, 1455705.846, 1465355.473), stdev = 4390.104
  CI (99.9%): [1452772.761, 1458638.931] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_emissionQueueTrigger  thrpt   30  1455705.846 ± 2933.085  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipAndCountGaplessWindows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipAndCountGaplessWindows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 442948.862 ops/s
# Warmup Iteration   2: 653409.308 ops/s
# Warmup Iteration   3: 774130.928 ops/s
# Warmup Iteration   4: 778503.282 ops/s
# Warmup Iteration   5: 785656.435 ops/s
# Warmup Iteration   6: 784429.615 ops/s
# Warmup Iteration   7: 778707.326 ops/s
# Warmup Iteration   8: 776387.879 ops/s
# Warmup Iteration   9: 778584.603 ops/s
# Warmup Iteration  10: 781494.688 ops/s
# Warmup Iteration  11: 772562.964 ops/s
# Warmup Iteration  12: 786397.550 ops/s
# Warmup Iteration  13: 783170.012 ops/s
# Warmup Iteration  14: 784222.900 ops/s
# Warmup Iteration  15: 788029.686 ops/s
# Warmup Iteration  16: 772574.875 ops/s
# Warmup Iteration  17: 787771.155 ops/s
# Warmup Iteration  18: 787752.961 ops/s
# Warmup Iteration  19: 786191.094 ops/s
# Warmup Iteration  20: 784240.058 ops/s
# Warmup Iteration  21: 785929.770 ops/s
# Warmup Iteration  22: 785952.373 ops/s
# Warmup Iteration  23: 782872.286 ops/s
# Warmup Iteration  24: 781423.389 ops/s
# Warmup Iteration  25: 785615.361 ops/s
# Warmup Iteration  26: 785081.809 ops/s
# Warmup Iteration  27: 785838.069 ops/s
# Warmup Iteration  28: 782863.951 ops/s
# Warmup Iteration  29: 783552.710 ops/s
# Warmup Iteration  30: 783900.300 ops/s
Iteration   1: 784520.448 ops/s
Iteration   2: 782265.482 ops/s
Iteration   3: 781208.151 ops/s
Iteration   4: 783245.815 ops/s
Iteration   5: 784754.571 ops/s
Iteration   6: 782919.442 ops/s
Iteration   7: 784393.115 ops/s
Iteration   8: 782221.475 ops/s
Iteration   9: 779238.804 ops/s
Iteration  10: 780408.253 ops/s
Iteration  11: 785608.973 ops/s
Iteration  12: 783291.276 ops/s
Iteration  13: 782473.616 ops/s
Iteration  14: 782719.084 ops/s
Iteration  15: 787523.521 ops/s
Iteration  16: 781222.979 ops/s
Iteration  17: 780044.164 ops/s
Iteration  18: 785841.147 ops/s
Iteration  19: 785864.416 ops/s
Iteration  20: 780657.116 ops/s
Iteration  21: 785767.783 ops/s
Iteration  22: 780971.719 ops/s
Iteration  23: 783309.569 ops/s
Iteration  24: 786551.114 ops/s
Iteration  25: 780546.128 ops/s
Iteration  26: 782348.338 ops/s
Iteration  27: 782802.292 ops/s
Iteration  28: 785477.717 ops/s
Iteration  29: 785419.772 ops/s
Iteration  30: 782273.340 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipAndCountGaplessWindows":
  783196.321 ±(99.9%) 1448.545 ops/s [Average]
  (min, avg, max) = (779238.804, 783196.321, 787523.521), stdev = 2168.115
  CI (99.9%): [781747.775, 784644.866] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_skipAndCountGaplessWindows  thrpt   30  783196.321 ± 1448.545  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_nonOverlappingWindows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_nonOverlappingWindows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 417869.303 ops/s
# Warmup Iteration   2: 654665.578 ops/s
# Warmup Iteration   3: 778262.227 ops/s
# Warmup Iteration   4: 789123.410 ops/s
# Warmup Iteration   5: 788487.368 ops/s
# Warmup Iteration   6: 794403.812 ops/s
# Warmup Iteration   7: 789841.079 ops/s
# Warmup Iteration   8: 796639.663 ops/s
# Warmup Iteration   9: 794946.027 ops/s
# Warmup Iteration  10: 792418.773 ops/s
# Warmup Iteration  11: 793090.737 ops/s
# Warmup Iteration  12: 797907.084 ops/s
# Warmup Iteration  13: 789377.230 ops/s
# Warmup Iteration  14: 788606.392 ops/s
# Warmup Iteration  15: 787194.113 ops/s
# Warmup Iteration  16: 795233.109 ops/s
# Warmup Iteration  17: 792966.124 ops/s
# Warmup Iteration  18: 787139.482 ops/s
# Warmup Iteration  19: 790815.964 ops/s
# Warmup Iteration  20: 792682.844 ops/s
# Warmup Iteration  21: 792234.093 ops/s
# Warmup Iteration  22: 783390.933 ops/s
# Warmup Iteration  23: 787512.708 ops/s
# Warmup Iteration  24: 792634.922 ops/s
# Warmup Iteration  25: 782082.219 ops/s
# Warmup Iteration  26: 793950.354 ops/s
# Warmup Iteration  27: 785917.550 ops/s
# Warmup Iteration  28: 788313.259 ops/s
# Warmup Iteration  29: 789211.975 ops/s
# Warmup Iteration  30: 791108.973 ops/s
Iteration   1: 789859.078 ops/s
Iteration   2: 794039.816 ops/s
Iteration   3: 788821.185 ops/s
Iteration   4: 788540.039 ops/s
Iteration   5: 791867.547 ops/s
Iteration   6: 785369.673 ops/s
Iteration   7: 792034.005 ops/s
Iteration   8: 790173.209 ops/s
Iteration   9: 790674.226 ops/s
Iteration  10: 785693.215 ops/s
Iteration  11: 788005.349 ops/s
Iteration  12: 792410.019 ops/s
Iteration  13: 789636.072 ops/s
Iteration  14: 784771.061 ops/s
Iteration  15: 791198.459 ops/s
Iteration  16: 790547.793 ops/s
Iteration  17: 781528.875 ops/s
Iteration  18: 788532.009 ops/s
Iteration  19: 792753.829 ops/s
Iteration  20: 789469.584 ops/s
Iteration  21: 790254.976 ops/s
Iteration  22: 787777.195 ops/s
Iteration  23: 787805.782 ops/s
Iteration  24: 787091.627 ops/s
Iteration  25: 789809.499 ops/s
Iteration  26: 788844.498 ops/s
Iteration  27: 790843.435 ops/s
Iteration  28: 787991.081 ops/s
Iteration  29: 791280.494 ops/s
Iteration  30: 789161.312 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_nonOverlappingWindows":
  789226.165 ±(99.9%) 1743.604 ops/s [Average]
  (min, avg, max) = (781528.875, 789226.165, 794039.816), stdev = 2609.745
  CI (99.9%): [787482.560, 790969.769] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_nonOverlappingWindows  thrpt   30  789226.165 ± 1743.604  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipAndCountWindowsWithGaps$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipAndCountWindowsWithGaps

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 411566.483 ops/s
# Warmup Iteration   2: 672316.475 ops/s
# Warmup Iteration   3: 794583.715 ops/s
# Warmup Iteration   4: 802377.020 ops/s
# Warmup Iteration   5: 816975.669 ops/s
# Warmup Iteration   6: 810010.061 ops/s
# Warmup Iteration   7: 814642.919 ops/s
# Warmup Iteration   8: 817150.801 ops/s
# Warmup Iteration   9: 816808.226 ops/s
# Warmup Iteration  10: 811942.751 ops/s
# Warmup Iteration  11: 815363.729 ops/s
# Warmup Iteration  12: 812858.729 ops/s
# Warmup Iteration  13: 808674.050 ops/s
# Warmup Iteration  14: 814507.646 ops/s
# Warmup Iteration  15: 814005.662 ops/s
# Warmup Iteration  16: 812593.584 ops/s
# Warmup Iteration  17: 808257.811 ops/s
# Warmup Iteration  18: 817726.509 ops/s
# Warmup Iteration  19: 814667.704 ops/s
# Warmup Iteration  20: 812879.902 ops/s
# Warmup Iteration  21: 818123.599 ops/s
# Warmup Iteration  22: 810093.014 ops/s
# Warmup Iteration  23: 811427.610 ops/s
# Warmup Iteration  24: 813997.819 ops/s
# Warmup Iteration  25: 814687.185 ops/s
# Warmup Iteration  26: 816560.496 ops/s
# Warmup Iteration  27: 817048.510 ops/s
# Warmup Iteration  28: 810177.861 ops/s
# Warmup Iteration  29: 817271.558 ops/s
# Warmup Iteration  30: 819833.152 ops/s
Iteration   1: 815859.811 ops/s
Iteration   2: 815163.838 ops/s
Iteration   3: 816369.571 ops/s
Iteration   4: 819668.493 ops/s
Iteration   5: 811997.008 ops/s
Iteration   6: 814061.058 ops/s
Iteration   7: 813921.350 ops/s
Iteration   8: 821887.894 ops/s
Iteration   9: 811351.917 ops/s
Iteration  10: 817091.040 ops/s
Iteration  11: 814703.309 ops/s
Iteration  12: 817498.165 ops/s
Iteration  13: 814519.560 ops/s
Iteration  14: 816372.478 ops/s
Iteration  15: 813673.281 ops/s
Iteration  16: 817527.885 ops/s
Iteration  17: 814087.908 ops/s
Iteration  18: 810815.748 ops/s
Iteration  19: 815572.570 ops/s
Iteration  20: 818170.048 ops/s
Iteration  21: 816076.441 ops/s
Iteration  22: 814151.090 ops/s
Iteration  23: 814069.130 ops/s
Iteration  24: 813006.198 ops/s
Iteration  25: 819965.422 ops/s
Iteration  26: 820672.938 ops/s
Iteration  27: 811314.700 ops/s
Iteration  28: 815470.018 ops/s
Iteration  29: 814818.982 ops/s
Iteration  30: 816107.262 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_skipAndCountWindowsWithGaps":
  815532.171 ±(99.9%) 1823.628 ops/s [Average]
  (min, avg, max) = (810815.748, 815532.171, 821887.894), stdev = 2729.521
  CI (99.9%): [813708.543, 817355.798] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_skipAndCountWindowsWithGaps  thrpt   30  815532.171 ± 1823.628  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_badInnerSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_badInnerSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 117536.648 ops/s
# Warmup Iteration   2: 165514.811 ops/s
# Warmup Iteration   3: 190017.497 ops/s
# Warmup Iteration   4: 190378.243 ops/s
# Warmup Iteration   5: 192211.024 ops/s
# Warmup Iteration   6: 190953.364 ops/s
# Warmup Iteration   7: 191430.663 ops/s
# Warmup Iteration   8: 191390.943 ops/s
# Warmup Iteration   9: 189647.627 ops/s
# Warmup Iteration  10: 190257.057 ops/s
# Warmup Iteration  11: 190431.031 ops/s
# Warmup Iteration  12: 190826.098 ops/s
# Warmup Iteration  13: 190875.759 ops/s
# Warmup Iteration  14: 190572.923 ops/s
# Warmup Iteration  15: 189634.158 ops/s
# Warmup Iteration  16: 191034.867 ops/s
# Warmup Iteration  17: 195545.047 ops/s
# Warmup Iteration  18: 195195.231 ops/s
# Warmup Iteration  19: 197166.673 ops/s
# Warmup Iteration  20: 196254.866 ops/s
# Warmup Iteration  21: 195571.017 ops/s
# Warmup Iteration  22: 196270.977 ops/s
# Warmup Iteration  23: 195662.874 ops/s
# Warmup Iteration  24: 195892.111 ops/s
# Warmup Iteration  25: 195351.135 ops/s
# Warmup Iteration  26: 195955.094 ops/s
# Warmup Iteration  27: 195788.068 ops/s
# Warmup Iteration  28: 195887.517 ops/s
# Warmup Iteration  29: 195841.439 ops/s
# Warmup Iteration  30: 196146.979 ops/s
Iteration   1: 195294.471 ops/s
Iteration   2: 196056.045 ops/s
Iteration   3: 194676.883 ops/s
Iteration   4: 194891.450 ops/s
Iteration   5: 195961.405 ops/s
Iteration   6: 195145.443 ops/s
Iteration   7: 195984.775 ops/s
Iteration   8: 195132.582 ops/s
Iteration   9: 195780.707 ops/s
Iteration  10: 195645.809 ops/s
Iteration  11: 195423.559 ops/s
Iteration  12: 195025.931 ops/s
Iteration  13: 193093.420 ops/s
Iteration  14: 195368.983 ops/s
Iteration  15: 196160.332 ops/s
Iteration  16: 195075.425 ops/s
Iteration  17: 195063.684 ops/s
Iteration  18: 195498.559 ops/s
Iteration  19: 195037.687 ops/s
Iteration  20: 195981.267 ops/s
Iteration  21: 195205.987 ops/s
Iteration  22: 195200.360 ops/s
Iteration  23: 195692.633 ops/s
Iteration  24: 195132.291 ops/s
Iteration  25: 195599.205 ops/s
Iteration  26: 194709.494 ops/s
Iteration  27: 196069.265 ops/s
Iteration  28: 195176.603 ops/s
Iteration  29: 195402.994 ops/s
Iteration  30: 194278.750 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_badInnerSource":
  195292.200 ±(99.9%) 413.656 ops/s [Average]
  (min, avg, max) = (193093.420, 195292.200, 196160.332), stdev = 619.141
  CI (99.9%): [194878.544, 195705.856] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score     Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_badInnerSource  thrpt   30  195292.200 ± 413.656  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 482996.284 ops/s
# Warmup Iteration   2: 629634.554 ops/s
# Warmup Iteration   3: 620068.088 ops/s
# Warmup Iteration   4: 676583.346 ops/s
# Warmup Iteration   5: 686915.856 ops/s
# Warmup Iteration   6: 684565.324 ops/s
# Warmup Iteration   7: 679026.006 ops/s
# Warmup Iteration   8: 675780.762 ops/s
# Warmup Iteration   9: 685761.555 ops/s
# Warmup Iteration  10: 685246.739 ops/s
# Warmup Iteration  11: 683011.996 ops/s
# Warmup Iteration  12: 682700.857 ops/s
# Warmup Iteration  13: 684384.588 ops/s
# Warmup Iteration  14: 678521.174 ops/s
# Warmup Iteration  15: 679939.582 ops/s
# Warmup Iteration  16: 682260.662 ops/s
# Warmup Iteration  17: 711344.598 ops/s
# Warmup Iteration  18: 706722.020 ops/s
# Warmup Iteration  19: 706056.184 ops/s
# Warmup Iteration  20: 707602.754 ops/s
# Warmup Iteration  21: 707927.430 ops/s
# Warmup Iteration  22: 705812.688 ops/s
# Warmup Iteration  23: 704728.638 ops/s
# Warmup Iteration  24: 704535.732 ops/s
# Warmup Iteration  25: 710172.349 ops/s
# Warmup Iteration  26: 707981.925 ops/s
# Warmup Iteration  27: 705036.841 ops/s
# Warmup Iteration  28: 707159.880 ops/s
# Warmup Iteration  29: 706735.504 ops/s
# Warmup Iteration  30: 706637.016 ops/s
Iteration   1: 705665.445 ops/s
Iteration   2: 710464.178 ops/s
Iteration   3: 709580.952 ops/s
Iteration   4: 706251.901 ops/s
Iteration   5: 708470.128 ops/s
Iteration   6: 703330.259 ops/s
Iteration   7: 706683.617 ops/s
Iteration   8: 708264.774 ops/s
Iteration   9: 705056.721 ops/s
Iteration  10: 696501.332 ops/s
Iteration  11: 704142.584 ops/s
Iteration  12: 706829.214 ops/s
Iteration  13: 705686.546 ops/s
Iteration  14: 708117.241 ops/s
Iteration  15: 705580.573 ops/s
Iteration  16: 708370.213 ops/s
Iteration  17: 704639.847 ops/s
Iteration  18: 703814.474 ops/s
Iteration  19: 709013.808 ops/s
Iteration  20: 709554.402 ops/s
Iteration  21: 695680.210 ops/s
Iteration  22: 705591.762 ops/s
Iteration  23: 707619.565 ops/s
Iteration  24: 707582.189 ops/s
Iteration  25: 705735.488 ops/s
Iteration  26: 706738.296 ops/s
Iteration  27: 707710.616 ops/s
Iteration  28: 706424.267 ops/s
Iteration  29: 710073.854 ops/s
Iteration  30: 705151.610 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe":
  706144.202 ±(99.9%) 2212.153 ops/s [Average]
  (min, avg, max) = (695680.210, 706144.202, 710464.178), stdev = 3311.046
  CI (99.9%): [703932.049, 708356.355] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  706144.202 ± 2212.153  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableWindowTests._Benchmark.benchmark_timeSizeWindowAlternatingBounds$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableWindowTests._Benchmark.benchmark_timeSizeWindowAlternatingBounds

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 108552.269 ops/s
# Warmup Iteration   2: 246306.599 ops/s
# Warmup Iteration   3: 268335.401 ops/s
# Warmup Iteration   4: 290866.117 ops/s
# Warmup Iteration   5: 293608.534 ops/s
# Warmup Iteration   6: 295067.842 ops/s
# Warmup Iteration   7: 293511.564 ops/s
# Warmup Iteration   8: 292888.962 ops/s
# Warmup Iteration   9: 292810.881 ops/s
# Warmup Iteration  10: 291937.174 ops/s
# Warmup Iteration  11: 291782.212 ops/s
# Warmup Iteration  12: 291662.695 ops/s
# Warmup Iteration  13: 292118.044 ops/s
# Warmup Iteration  14: 291736.225 ops/s
# Warmup Iteration  15: 296702.203 ops/s
# Warmup Iteration  16: 292978.317 ops/s
# Warmup Iteration  17: 292627.487 ops/s
# Warmup Iteration  18: 292439.717 ops/s
# Warmup Iteration  19: 292805.826 ops/s
# Warmup Iteration  20: 291518.545 ops/s
# Warmup Iteration  21: 292078.033 ops/s
# Warmup Iteration  22: 292260.935 ops/s
# Warmup Iteration  23: 293588.291 ops/s
# Warmup Iteration  24: 291098.433 ops/s
# Warmup Iteration  25: 292168.097 ops/s
# Warmup Iteration  26: 292503.085 ops/s
# Warmup Iteration  27: 291895.789 ops/s
# Warmup Iteration  28: 293660.306 ops/s
# Warmup Iteration  29: 290995.678 ops/s
# Warmup Iteration  30: 292048.212 ops/s
Iteration   1: 291694.605 ops/s
Iteration   2: 292527.226 ops/s
Iteration   3: 291741.721 ops/s
Iteration   4: 292920.456 ops/s
Iteration   5: 292295.861 ops/s
Iteration   6: 293388.979 ops/s
Iteration   7: 291377.799 ops/s
Iteration   8: 291381.132 ops/s
Iteration   9: 292946.244 ops/s
Iteration  10: 291735.404 ops/s
Iteration  11: 293867.539 ops/s
Iteration  12: 292477.337 ops/s
Iteration  13: 291561.474 ops/s
Iteration  14: 291693.695 ops/s
Iteration  15: 291429.176 ops/s
Iteration  16: 293196.209 ops/s
Iteration  17: 292532.832 ops/s
Iteration  18: 293984.197 ops/s
Iteration  19: 293332.489 ops/s
Iteration  20: 293310.265 ops/s
Iteration  21: 290570.545 ops/s
Iteration  22: 292238.734 ops/s
Iteration  23: 290785.799 ops/s
Iteration  24: 291657.326 ops/s
Iteration  25: 290977.560 ops/s
Iteration  26: 292019.886 ops/s
Iteration  27: 291704.501 ops/s
Iteration  28: 291452.071 ops/s
Iteration  29: 292866.290 ops/s
Iteration  30: 292729.650 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableWindowTests._Benchmark.benchmark_timeSizeWindowAlternatingBounds":
  292213.233 ±(99.9%) 602.112 ops/s [Average]
  (min, avg, max) = (290570.545, 292213.233, 293984.197), stdev = 901.213
  CI (99.9%): [291611.121, 292815.345] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score     Error  Units
FlowableWindowTests._Benchmark.benchmark_timeSizeWindowAlternatingBounds  thrpt   30  292213.233 ± 602.112  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainAndBoundaryDisposeOnNoWindows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainAndBoundaryDisposeOnNoWindows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 277956.591 ops/s
# Warmup Iteration   2: 550852.800 ops/s
# Warmup Iteration   3: 677864.076 ops/s
# Warmup Iteration   4: 680806.994 ops/s
# Warmup Iteration   5: 688632.318 ops/s
# Warmup Iteration   6: 688082.513 ops/s
# Warmup Iteration   7: 683950.332 ops/s
# Warmup Iteration   8: 680225.544 ops/s
# Warmup Iteration   9: 683091.806 ops/s
# Warmup Iteration  10: 683964.358 ops/s
# Warmup Iteration  11: 687319.499 ops/s
# Warmup Iteration  12: 687804.084 ops/s
# Warmup Iteration  13: 687737.599 ops/s
# Warmup Iteration  14: 684853.359 ops/s
# Warmup Iteration  15: 689140.763 ops/s
# Warmup Iteration  16: 687976.976 ops/s
# Warmup Iteration  17: 686420.908 ops/s
# Warmup Iteration  18: 684703.396 ops/s
# Warmup Iteration  19: 687314.852 ops/s
# Warmup Iteration  20: 687020.604 ops/s
# Warmup Iteration  21: 689983.751 ops/s
# Warmup Iteration  22: 688895.226 ops/s
# Warmup Iteration  23: 688763.188 ops/s
# Warmup Iteration  24: 686972.900 ops/s
# Warmup Iteration  25: 689896.916 ops/s
# Warmup Iteration  26: 687292.000 ops/s
# Warmup Iteration  27: 684668.748 ops/s
# Warmup Iteration  28: 685753.530 ops/s
# Warmup Iteration  29: 684812.102 ops/s
# Warmup Iteration  30: 681986.978 ops/s
Iteration   1: 685977.256 ops/s
Iteration   2: 689029.673 ops/s
Iteration   3: 687021.404 ops/s
Iteration   4: 686775.875 ops/s
Iteration   5: 689289.099 ops/s
Iteration   6: 688231.405 ops/s
Iteration   7: 687074.220 ops/s
Iteration   8: 689597.939 ops/s
Iteration   9: 686947.840 ops/s
Iteration  10: 687052.061 ops/s
Iteration  11: 691184.552 ops/s
Iteration  12: 685438.351 ops/s
Iteration  13: 686905.673 ops/s
Iteration  14: 686728.746 ops/s
Iteration  15: 689031.744 ops/s
Iteration  16: 687791.056 ops/s
Iteration  17: 685502.890 ops/s
Iteration  18: 685952.510 ops/s
Iteration  19: 687423.367 ops/s
Iteration  20: 684802.236 ops/s
Iteration  21: 686927.366 ops/s
Iteration  22: 682392.072 ops/s
Iteration  23: 685524.564 ops/s
Iteration  24: 688638.066 ops/s
Iteration  25: 685020.619 ops/s
Iteration  26: 688710.312 ops/s
Iteration  27: 685709.715 ops/s
Iteration  28: 684821.722 ops/s
Iteration  29: 685093.359 ops/s
Iteration  30: 683372.991 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainAndBoundaryDisposeOnNoWindows":
  686798.956 ±(99.9%) 1282.116 ops/s [Average]
  (min, avg, max) = (682392.072, 686798.956, 691184.552), stdev = 1919.011
  CI (99.9%): [685516.840, 688081.072] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainAndBoundaryDisposeOnNoWindows  thrpt   30  686798.956 ± 1282.116  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable1SignalsError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable1SignalsError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 424891.190 ops/s
# Warmup Iteration   2: 580249.757 ops/s
# Warmup Iteration   3: 597681.986 ops/s
# Warmup Iteration   4: 651575.619 ops/s
# Warmup Iteration   5: 665977.952 ops/s
# Warmup Iteration   6: 667363.019 ops/s
# Warmup Iteration   7: 665090.389 ops/s
# Warmup Iteration   8: 660085.947 ops/s
# Warmup Iteration   9: 664676.791 ops/s
# Warmup Iteration  10: 661953.777 ops/s
# Warmup Iteration  11: 666286.881 ops/s
# Warmup Iteration  12: 649374.377 ops/s
# Warmup Iteration  13: 662205.423 ops/s
# Warmup Iteration  14: 661547.947 ops/s
# Warmup Iteration  15: 660155.746 ops/s
# Warmup Iteration  16: 659922.993 ops/s
# Warmup Iteration  17: 690676.739 ops/s
# Warmup Iteration  18: 688063.169 ops/s
# Warmup Iteration  19: 686196.552 ops/s
# Warmup Iteration  20: 693132.184 ops/s
# Warmup Iteration  21: 693428.210 ops/s
# Warmup Iteration  22: 687147.762 ops/s
# Warmup Iteration  23: 691161.006 ops/s
# Warmup Iteration  24: 690449.468 ops/s
# Warmup Iteration  25: 688117.623 ops/s
# Warmup Iteration  26: 689097.834 ops/s
# Warmup Iteration  27: 691591.704 ops/s
# Warmup Iteration  28: 688876.240 ops/s
# Warmup Iteration  29: 687003.420 ops/s
# Warmup Iteration  30: 692263.617 ops/s
Iteration   1: 692533.007 ops/s
Iteration   2: 688306.620 ops/s
Iteration   3: 688665.949 ops/s
Iteration   4: 688310.367 ops/s
Iteration   5: 687300.034 ops/s
Iteration   6: 689737.205 ops/s
Iteration   7: 691469.711 ops/s
Iteration   8: 689971.677 ops/s
Iteration   9: 689048.052 ops/s
Iteration  10: 688058.380 ops/s
Iteration  11: 687775.705 ops/s
Iteration  12: 690277.362 ops/s
Iteration  13: 689443.317 ops/s
Iteration  14: 688174.595 ops/s
Iteration  15: 688884.439 ops/s
Iteration  16: 691124.667 ops/s
Iteration  17: 688226.777 ops/s
Iteration  18: 690847.775 ops/s
Iteration  19: 689835.215 ops/s
Iteration  20: 687525.703 ops/s
Iteration  21: 692047.095 ops/s
Iteration  22: 686855.588 ops/s
Iteration  23: 690733.092 ops/s
Iteration  24: 692371.416 ops/s
Iteration  25: 675185.718 ops/s
Iteration  26: 687702.092 ops/s
Iteration  27: 692538.001 ops/s
Iteration  28: 688652.786 ops/s
Iteration  29: 689165.341 ops/s
Iteration  30: 687293.985 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable1SignalsError":
  688935.389 ±(99.9%) 2063.213 ops/s [Average]
  (min, avg, max) = (675185.718, 688935.389, 692538.001), stdev = 3088.120
  CI (99.9%): [686872.176, 690998.602] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_ambIterable1SignalsError  thrpt   30  688935.389 ± 2063.213  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 379244.237 ops/s
# Warmup Iteration   2: 479378.108 ops/s
# Warmup Iteration   3: 538487.979 ops/s
# Warmup Iteration   4: 543526.418 ops/s
# Warmup Iteration   5: 543909.718 ops/s
# Warmup Iteration   6: 540077.057 ops/s
# Warmup Iteration   7: 543447.796 ops/s
# Warmup Iteration   8: 541556.499 ops/s
# Warmup Iteration   9: 538631.334 ops/s
# Warmup Iteration  10: 534705.988 ops/s
# Warmup Iteration  11: 538662.363 ops/s
# Warmup Iteration  12: 538580.795 ops/s
# Warmup Iteration  13: 538746.389 ops/s
# Warmup Iteration  14: 537434.267 ops/s
# Warmup Iteration  15: 539703.918 ops/s
# Warmup Iteration  16: 539841.381 ops/s
# Warmup Iteration  17: 649845.299 ops/s
# Warmup Iteration  18: 648629.445 ops/s
# Warmup Iteration  19: 648921.655 ops/s
# Warmup Iteration  20: 652933.964 ops/s
# Warmup Iteration  21: 651530.964 ops/s
# Warmup Iteration  22: 649904.164 ops/s
# Warmup Iteration  23: 652155.161 ops/s
# Warmup Iteration  24: 648876.035 ops/s
# Warmup Iteration  25: 651277.857 ops/s
# Warmup Iteration  26: 649845.903 ops/s
# Warmup Iteration  27: 648753.087 ops/s
# Warmup Iteration  28: 650709.889 ops/s
# Warmup Iteration  29: 650957.571 ops/s
# Warmup Iteration  30: 651605.192 ops/s
Iteration   1: 649324.224 ops/s
Iteration   2: 651182.249 ops/s
Iteration   3: 648358.188 ops/s
Iteration   4: 647069.716 ops/s
Iteration   5: 650983.315 ops/s
Iteration   6: 649846.911 ops/s
Iteration   7: 650923.351 ops/s
Iteration   8: 652023.354 ops/s
Iteration   9: 645818.770 ops/s
Iteration  10: 653760.569 ops/s
Iteration  11: 652117.233 ops/s
Iteration  12: 650963.811 ops/s
Iteration  13: 651314.578 ops/s
Iteration  14: 649904.287 ops/s
Iteration  15: 650002.040 ops/s
Iteration  16: 649079.183 ops/s
Iteration  17: 648143.652 ops/s
Iteration  18: 648306.244 ops/s
Iteration  19: 648981.279 ops/s
Iteration  20: 653641.331 ops/s
Iteration  21: 650096.203 ops/s
Iteration  22: 651190.905 ops/s
Iteration  23: 652250.363 ops/s
Iteration  24: 647914.409 ops/s
Iteration  25: 650966.802 ops/s
Iteration  26: 651704.821 ops/s
Iteration  27: 649900.141 ops/s
Iteration  28: 648468.041 ops/s
Iteration  29: 649584.829 ops/s
Iteration  30: 648590.680 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerNull":
  650080.383 ±(99.9%) 1230.131 ops/s [Average]
  (min, avg, max) = (645818.770, 650080.383, 653760.569), stdev = 1841.202
  CI (99.9%): [648850.252, 651310.513] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_innerNull  thrpt   30  650080.383 ± 1230.131  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 372121.171 ops/s
# Warmup Iteration   2: 473529.041 ops/s
# Warmup Iteration   3: 538879.898 ops/s
# Warmup Iteration   4: 536943.920 ops/s
# Warmup Iteration   5: 534226.145 ops/s
# Warmup Iteration   6: 533735.312 ops/s
# Warmup Iteration   7: 534960.085 ops/s
# Warmup Iteration   8: 523292.620 ops/s
# Warmup Iteration   9: 532959.660 ops/s
# Warmup Iteration  10: 531860.496 ops/s
# Warmup Iteration  11: 530569.361 ops/s
# Warmup Iteration  12: 534166.943 ops/s
# Warmup Iteration  13: 532524.353 ops/s
# Warmup Iteration  14: 531835.332 ops/s
# Warmup Iteration  15: 532596.975 ops/s
# Warmup Iteration  16: 529311.597 ops/s
# Warmup Iteration  17: 544658.571 ops/s
# Warmup Iteration  18: 550178.708 ops/s
# Warmup Iteration  19: 550152.314 ops/s
# Warmup Iteration  20: 548348.646 ops/s
# Warmup Iteration  21: 551020.687 ops/s
# Warmup Iteration  22: 547059.659 ops/s
# Warmup Iteration  23: 551002.083 ops/s
# Warmup Iteration  24: 547079.184 ops/s
# Warmup Iteration  25: 550027.103 ops/s
# Warmup Iteration  26: 547757.154 ops/s
# Warmup Iteration  27: 547606.265 ops/s
# Warmup Iteration  28: 546776.639 ops/s
# Warmup Iteration  29: 549884.076 ops/s
# Warmup Iteration  30: 549683.912 ops/s
Iteration   1: 548331.882 ops/s
Iteration   2: 548599.126 ops/s
Iteration   3: 547698.569 ops/s
Iteration   4: 550672.064 ops/s
Iteration   5: 547191.334 ops/s
Iteration   6: 551642.096 ops/s
Iteration   7: 551168.440 ops/s
Iteration   8: 550773.804 ops/s
Iteration   9: 548096.832 ops/s
Iteration  10: 547047.569 ops/s
Iteration  11: 549448.551 ops/s
Iteration  12: 550326.308 ops/s
Iteration  13: 547923.461 ops/s
Iteration  14: 551363.832 ops/s
Iteration  15: 551354.021 ops/s
Iteration  16: 550468.043 ops/s
Iteration  17: 551124.408 ops/s
Iteration  18: 550745.592 ops/s
Iteration  19: 548887.978 ops/s
Iteration  20: 548652.423 ops/s
Iteration  21: 549963.557 ops/s
Iteration  22: 548558.744 ops/s
Iteration  23: 550991.909 ops/s
Iteration  24: 549304.446 ops/s
Iteration  25: 546962.954 ops/s
Iteration  26: 551223.673 ops/s
Iteration  27: 550738.617 ops/s
Iteration  28: 549245.173 ops/s
Iteration  29: 552498.482 ops/s
Iteration  30: 549890.353 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerThrows":
  549696.475 ±(99.9%) 1021.280 ops/s [Average]
  (min, avg, max) = (546962.954, 549696.475, 552498.482), stdev = 1528.605
  CI (99.9%): [548675.194, 550717.755] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_innerThrows  thrpt   30  549696.475 ± 1021.280  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDefaultIfEmptyTest._Benchmark.benchmark_backpressureEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDefaultIfEmptyTest._Benchmark.benchmark_backpressureEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3016308.040 ops/s
# Warmup Iteration   2: 4310069.124 ops/s
# Warmup Iteration   3: 4903149.575 ops/s
# Warmup Iteration   4: 4876448.178 ops/s
# Warmup Iteration   5: 4894390.220 ops/s
# Warmup Iteration   6: 4898578.342 ops/s
# Warmup Iteration   7: 4909643.019 ops/s
# Warmup Iteration   8: 4890731.086 ops/s
# Warmup Iteration   9: 4888874.431 ops/s
# Warmup Iteration  10: 4905485.637 ops/s
# Warmup Iteration  11: 4916706.074 ops/s
# Warmup Iteration  12: 4888702.449 ops/s
# Warmup Iteration  13: 4872927.431 ops/s
# Warmup Iteration  14: 4889392.603 ops/s
# Warmup Iteration  15: 4879885.822 ops/s
# Warmup Iteration  16: 4892546.042 ops/s
# Warmup Iteration  17: 4888720.526 ops/s
# Warmup Iteration  18: 4906095.927 ops/s
# Warmup Iteration  19: 4910042.333 ops/s
# Warmup Iteration  20: 4887361.265 ops/s
# Warmup Iteration  21: 4888301.508 ops/s
# Warmup Iteration  22: 4864844.731 ops/s
# Warmup Iteration  23: 4901003.324 ops/s
# Warmup Iteration  24: 4909072.904 ops/s
# Warmup Iteration  25: 4892628.180 ops/s
# Warmup Iteration  26: 4901622.204 ops/s
# Warmup Iteration  27: 4909971.532 ops/s
# Warmup Iteration  28: 4892424.725 ops/s
# Warmup Iteration  29: 4824252.530 ops/s
# Warmup Iteration  30: 4896416.593 ops/s
Iteration   1: 4893832.995 ops/s
Iteration   2: 4891920.809 ops/s
Iteration   3: 4885548.084 ops/s
Iteration   4: 4907733.637 ops/s
Iteration   5: 4895952.651 ops/s
Iteration   6: 4906394.332 ops/s
Iteration   7: 4902881.971 ops/s
Iteration   8: 4896968.428 ops/s
Iteration   9: 4888912.825 ops/s
Iteration  10: 4887711.266 ops/s
Iteration  11: 4885063.603 ops/s
Iteration  12: 4888998.360 ops/s
Iteration  13: 4925568.822 ops/s
Iteration  14: 4900473.890 ops/s
Iteration  15: 4888851.403 ops/s
Iteration  16: 4880601.643 ops/s
Iteration  17: 4883080.366 ops/s
Iteration  18: 4901464.759 ops/s
Iteration  19: 4889607.385 ops/s
Iteration  20: 4888264.575 ops/s
Iteration  21: 4903366.536 ops/s
Iteration  22: 4907127.543 ops/s
Iteration  23: 4892572.297 ops/s
Iteration  24: 4896221.559 ops/s
Iteration  25: 4916629.695 ops/s
Iteration  26: 4906846.403 ops/s
Iteration  27: 4882909.240 ops/s
Iteration  28: 4909035.800 ops/s
Iteration  29: 4914943.958 ops/s
Iteration  30: 4891979.737 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDefaultIfEmptyTest._Benchmark.benchmark_backpressureEmpty":
  4897048.819 ±(99.9%) 7452.850 ops/s [Average]
  (min, avg, max) = (4880601.643, 4897048.819, 4925568.822), stdev = 11155.075
  CI (99.9%): [4889595.970, 4904501.669] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FlowableDefaultIfEmptyTest._Benchmark.benchmark_backpressureEmpty  thrpt   30  4897048.819 ± 7452.850  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 369149.657 ops/s
# Warmup Iteration   2: 519640.061 ops/s
# Warmup Iteration   3: 566371.035 ops/s
# Warmup Iteration   4: 513428.427 ops/s
# Warmup Iteration   5: 582394.736 ops/s
# Warmup Iteration   6: 581309.955 ops/s
# Warmup Iteration   7: 580715.392 ops/s
# Warmup Iteration   8: 578976.888 ops/s
# Warmup Iteration   9: 582730.636 ops/s
# Warmup Iteration  10: 582685.258 ops/s
# Warmup Iteration  11: 583414.486 ops/s
# Warmup Iteration  12: 580297.668 ops/s
# Warmup Iteration  13: 583259.852 ops/s
# Warmup Iteration  14: 579640.931 ops/s
# Warmup Iteration  15: 576790.217 ops/s
# Warmup Iteration  16: 580503.145 ops/s
# Warmup Iteration  17: 596756.331 ops/s
# Warmup Iteration  18: 598073.505 ops/s
# Warmup Iteration  19: 596973.795 ops/s
# Warmup Iteration  20: 600323.608 ops/s
# Warmup Iteration  21: 599594.326 ops/s
# Warmup Iteration  22: 597491.265 ops/s
# Warmup Iteration  23: 599103.758 ops/s
# Warmup Iteration  24: 599532.561 ops/s
# Warmup Iteration  25: 598926.531 ops/s
# Warmup Iteration  26: 597297.654 ops/s
# Warmup Iteration  27: 595821.293 ops/s
# Warmup Iteration  28: 594981.956 ops/s
# Warmup Iteration  29: 596753.375 ops/s
# Warmup Iteration  30: 597849.306 ops/s
Iteration   1: 596170.278 ops/s
Iteration   2: 599170.278 ops/s
Iteration   3: 599500.862 ops/s
Iteration   4: 599104.103 ops/s
Iteration   5: 597001.127 ops/s
Iteration   6: 598760.789 ops/s
Iteration   7: 597822.694 ops/s
Iteration   8: 600064.271 ops/s
Iteration   9: 597984.853 ops/s
Iteration  10: 599560.316 ops/s
Iteration  11: 596771.845 ops/s
Iteration  12: 597929.488 ops/s
Iteration  13: 598952.879 ops/s
Iteration  14: 599019.757 ops/s
Iteration  15: 597898.939 ops/s
Iteration  16: 598954.115 ops/s
Iteration  17: 599364.430 ops/s
Iteration  18: 598719.775 ops/s
Iteration  19: 595638.812 ops/s
Iteration  20: 598888.955 ops/s
Iteration  21: 600857.017 ops/s
Iteration  22: 599773.192 ops/s
Iteration  23: 598924.611 ops/s
Iteration  24: 597903.470 ops/s
Iteration  25: 597375.812 ops/s
Iteration  26: 597751.106 ops/s
Iteration  27: 599129.185 ops/s
Iteration  28: 597099.376 ops/s
Iteration  29: 594025.428 ops/s
Iteration  30: 588128.536 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorWithError":
  597941.543 ±(99.9%) 1556.857 ops/s [Average]
  (min, avg, max) = (588128.536, 597941.543, 600857.017), stdev = 2330.231
  CI (99.9%): [596384.686, 599498.400] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_concatObservableDelayErrorWithError  thrpt   30  597941.543 ± 1556.857  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustSourceDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustSourceDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1964538.981 ops/s
# Warmup Iteration   2: 2940640.396 ops/s
# Warmup Iteration   3: 3301203.842 ops/s
# Warmup Iteration   4: 3320411.322 ops/s
# Warmup Iteration   5: 3307140.621 ops/s
# Warmup Iteration   6: 3270441.304 ops/s
# Warmup Iteration   7: 3308786.811 ops/s
# Warmup Iteration   8: 3300983.163 ops/s
# Warmup Iteration   9: 3300062.514 ops/s
# Warmup Iteration  10: 3317812.732 ops/s
# Warmup Iteration  11: 3312051.177 ops/s
# Warmup Iteration  12: 3316840.513 ops/s
# Warmup Iteration  13: 3311428.051 ops/s
# Warmup Iteration  14: 3196281.427 ops/s
# Warmup Iteration  15: 3298672.558 ops/s
# Warmup Iteration  16: 3307150.004 ops/s
# Warmup Iteration  17: 3326256.532 ops/s
# Warmup Iteration  18: 3336977.612 ops/s
# Warmup Iteration  19: 3319743.092 ops/s
# Warmup Iteration  20: 3281668.689 ops/s
# Warmup Iteration  21: 3228770.663 ops/s
# Warmup Iteration  22: 3332137.505 ops/s
# Warmup Iteration  23: 3335085.332 ops/s
# Warmup Iteration  24: 3338903.073 ops/s
# Warmup Iteration  25: 3327387.703 ops/s
# Warmup Iteration  26: 3337842.093 ops/s
# Warmup Iteration  27: 3342319.956 ops/s
# Warmup Iteration  28: 3328902.325 ops/s
# Warmup Iteration  29: 3339223.913 ops/s
# Warmup Iteration  30: 3291680.671 ops/s
Iteration   1: 3341207.070 ops/s
Iteration   2: 3338565.896 ops/s
Iteration   3: 3328633.782 ops/s
Iteration   4: 3334057.662 ops/s
Iteration   5: 3339385.498 ops/s
Iteration   6: 3350946.521 ops/s
Iteration   7: 3339795.021 ops/s
Iteration   8: 3335893.397 ops/s
Iteration   9: 3318061.731 ops/s
Iteration  10: 3333078.271 ops/s
Iteration  11: 3347667.610 ops/s
Iteration  12: 3343525.647 ops/s
Iteration  13: 3331361.087 ops/s
Iteration  14: 3335285.291 ops/s
Iteration  15: 3340892.695 ops/s
Iteration  16: 3330548.352 ops/s
Iteration  17: 3340588.805 ops/s
Iteration  18: 3333891.301 ops/s
Iteration  19: 3337772.588 ops/s
Iteration  20: 3335698.700 ops/s
Iteration  21: 3318406.780 ops/s
Iteration  22: 3327117.269 ops/s
Iteration  23: 3347616.143 ops/s
Iteration  24: 3335540.374 ops/s
Iteration  25: 3325756.205 ops/s
Iteration  26: 3359672.218 ops/s
Iteration  27: 3352511.696 ops/s
Iteration  28: 3332375.554 ops/s
Iteration  29: 3314547.342 ops/s
Iteration  30: 3331424.564 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapJustSourceDelayError":
  3336060.836 ±(99.9%) 6708.958 ops/s [Average]
  (min, avg, max) = (3314547.342, 3336060.836, 3359672.218), stdev = 10041.654
  CI (99.9%): [3329351.877, 3342769.794] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapJustSourceDelayError  thrpt   30  3336060.836 ± 6708.958  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorIterableError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorIterableError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 131895.908 ops/s
# Warmup Iteration   2: 191042.124 ops/s
# Warmup Iteration   3: 197098.346 ops/s
# Warmup Iteration   4: 208116.940 ops/s
# Warmup Iteration   5: 207561.258 ops/s
# Warmup Iteration   6: 208182.025 ops/s
# Warmup Iteration   7: 207897.864 ops/s
# Warmup Iteration   8: 207981.531 ops/s
# Warmup Iteration   9: 207369.258 ops/s
# Warmup Iteration  10: 208896.524 ops/s
# Warmup Iteration  11: 206516.517 ops/s
# Warmup Iteration  12: 206250.616 ops/s
# Warmup Iteration  13: 206062.935 ops/s
# Warmup Iteration  14: 205200.218 ops/s
# Warmup Iteration  15: 205527.445 ops/s
# Warmup Iteration  16: 207014.005 ops/s
# Warmup Iteration  17: 213606.091 ops/s
# Warmup Iteration  18: 213996.748 ops/s
# Warmup Iteration  19: 214673.776 ops/s
# Warmup Iteration  20: 213181.581 ops/s
# Warmup Iteration  21: 212735.329 ops/s
# Warmup Iteration  22: 213089.379 ops/s
# Warmup Iteration  23: 214106.792 ops/s
# Warmup Iteration  24: 213135.967 ops/s
# Warmup Iteration  25: 212612.314 ops/s
# Warmup Iteration  26: 212711.865 ops/s
# Warmup Iteration  27: 214086.589 ops/s
# Warmup Iteration  28: 214228.915 ops/s
# Warmup Iteration  29: 213833.647 ops/s
# Warmup Iteration  30: 215414.460 ops/s
Iteration   1: 213904.960 ops/s
Iteration   2: 213096.262 ops/s
Iteration   3: 215132.986 ops/s
Iteration   4: 213121.035 ops/s
Iteration   5: 213587.128 ops/s
Iteration   6: 213105.865 ops/s
Iteration   7: 213927.564 ops/s
Iteration   8: 213541.279 ops/s
Iteration   9: 214903.007 ops/s
Iteration  10: 214701.532 ops/s
Iteration  11: 213266.712 ops/s
Iteration  12: 211079.944 ops/s
Iteration  13: 211001.146 ops/s
Iteration  14: 213689.668 ops/s
Iteration  15: 213709.339 ops/s
Iteration  16: 213864.271 ops/s
Iteration  17: 210158.214 ops/s
Iteration  18: 213818.943 ops/s
Iteration  19: 214179.655 ops/s
Iteration  20: 214582.568 ops/s
Iteration  21: 214544.398 ops/s
Iteration  22: 212963.448 ops/s
Iteration  23: 214262.248 ops/s
Iteration  24: 214613.772 ops/s
Iteration  25: 213983.320 ops/s
Iteration  26: 213837.356 ops/s
Iteration  27: 214260.895 ops/s
Iteration  28: 212976.992 ops/s
Iteration  29: 214739.945 ops/s
Iteration  30: 213573.029 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorIterableError":
  213604.249 ±(99.9%) 762.621 ops/s [Average]
  (min, avg, max) = (210158.214, 213604.249, 215132.986), stdev = 1141.455
  CI (99.9%): [212841.629, 214366.870] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score     Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_concatDelayErrorIterableError  thrpt   30  213604.249 ± 762.621  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapScalarBackpressuredDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapScalarBackpressuredDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1651874.812 ops/s
# Warmup Iteration   2: 2074289.738 ops/s
# Warmup Iteration   3: 2563026.854 ops/s
# Warmup Iteration   4: 2577070.672 ops/s
# Warmup Iteration   5: 2585169.650 ops/s
# Warmup Iteration   6: 2574247.949 ops/s
# Warmup Iteration   7: 2573201.110 ops/s
# Warmup Iteration   8: 2559194.882 ops/s
# Warmup Iteration   9: 2566539.629 ops/s
# Warmup Iteration  10: 2574067.189 ops/s
# Warmup Iteration  11: 2561196.852 ops/s
# Warmup Iteration  12: 2567228.534 ops/s
# Warmup Iteration  13: 2564256.416 ops/s
# Warmup Iteration  14: 2564992.804 ops/s
# Warmup Iteration  15: 2572461.793 ops/s
# Warmup Iteration  16: 2573596.420 ops/s
# Warmup Iteration  17: 2566298.591 ops/s
# Warmup Iteration  18: 2570655.473 ops/s
# Warmup Iteration  19: 2563111.724 ops/s
# Warmup Iteration  20: 2563928.560 ops/s
# Warmup Iteration  21: 2572932.019 ops/s
# Warmup Iteration  22: 2559682.831 ops/s
# Warmup Iteration  23: 2571306.699 ops/s
# Warmup Iteration  24: 2570315.233 ops/s
# Warmup Iteration  25: 2565803.544 ops/s
# Warmup Iteration  26: 2565293.852 ops/s
# Warmup Iteration  27: 2566801.083 ops/s
# Warmup Iteration  28: 2568371.486 ops/s
# Warmup Iteration  29: 2579550.539 ops/s
# Warmup Iteration  30: 2563085.262 ops/s
Iteration   1: 2569160.621 ops/s
Iteration   2: 2580902.626 ops/s
Iteration   3: 2574283.112 ops/s
Iteration   4: 2562631.935 ops/s
Iteration   5: 2561471.420 ops/s
Iteration   6: 2570352.321 ops/s
Iteration   7: 2560681.726 ops/s
Iteration   8: 2566463.630 ops/s
Iteration   9: 2566329.121 ops/s
Iteration  10: 2526183.109 ops/s
Iteration  11: 2569368.626 ops/s
Iteration  12: 2572782.971 ops/s
Iteration  13: 2570832.010 ops/s
Iteration  14: 2566061.968 ops/s
Iteration  15: 2567807.520 ops/s
Iteration  16: 2565765.628 ops/s
Iteration  17: 2568320.023 ops/s
Iteration  18: 2565910.595 ops/s
Iteration  19: 2576131.391 ops/s
Iteration  20: 2570990.331 ops/s
Iteration  21: 2569719.106 ops/s
Iteration  22: 2561878.933 ops/s
Iteration  23: 2569873.394 ops/s
Iteration  24: 2563844.775 ops/s
Iteration  25: 2563813.475 ops/s
Iteration  26: 2550748.121 ops/s
Iteration  27: 2568140.308 ops/s
Iteration  28: 2563729.256 ops/s
Iteration  29: 2570372.076 ops/s
Iteration  30: 2573716.961 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapScalarBackpressuredDelayError":
  2566275.570 ±(99.9%) 6272.896 ops/s [Average]
  (min, avg, max) = (2526183.109, 2566275.570, 2580902.626), stdev = 9388.976
  CI (99.9%): [2560002.674, 2572548.466] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapScalarBackpressuredDelayError  thrpt   30  2566275.570 ± 6272.896  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatIterableDelayErrorWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatIterableDelayErrorWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 387525.774 ops/s
# Warmup Iteration   2: 495452.387 ops/s
# Warmup Iteration   3: 574699.589 ops/s
# Warmup Iteration   4: 576039.199 ops/s
# Warmup Iteration   5: 575662.238 ops/s
# Warmup Iteration   6: 576266.706 ops/s
# Warmup Iteration   7: 576891.679 ops/s
# Warmup Iteration   8: 575963.487 ops/s
# Warmup Iteration   9: 574917.231 ops/s
# Warmup Iteration  10: 573250.789 ops/s
# Warmup Iteration  11: 575450.882 ops/s
# Warmup Iteration  12: 574209.528 ops/s
# Warmup Iteration  13: 573957.228 ops/s
# Warmup Iteration  14: 575842.458 ops/s
# Warmup Iteration  15: 575090.953 ops/s
# Warmup Iteration  16: 571406.513 ops/s
# Warmup Iteration  17: 593688.372 ops/s
# Warmup Iteration  18: 593860.357 ops/s
# Warmup Iteration  19: 594806.985 ops/s
# Warmup Iteration  20: 594693.218 ops/s
# Warmup Iteration  21: 595262.685 ops/s
# Warmup Iteration  22: 593767.309 ops/s
# Warmup Iteration  23: 594439.181 ops/s
# Warmup Iteration  24: 590783.076 ops/s
# Warmup Iteration  25: 593882.904 ops/s
# Warmup Iteration  26: 592519.618 ops/s
# Warmup Iteration  27: 593445.638 ops/s
# Warmup Iteration  28: 595244.548 ops/s
# Warmup Iteration  29: 592402.891 ops/s
# Warmup Iteration  30: 592707.045 ops/s
Iteration   1: 592787.117 ops/s
Iteration   2: 592367.222 ops/s
Iteration   3: 591586.449 ops/s
Iteration   4: 595298.411 ops/s
Iteration   5: 593735.707 ops/s
Iteration   6: 591499.852 ops/s
Iteration   7: 593455.000 ops/s
Iteration   8: 591961.822 ops/s
Iteration   9: 592108.013 ops/s
Iteration  10: 593723.886 ops/s
Iteration  11: 595159.302 ops/s
Iteration  12: 592540.070 ops/s
Iteration  13: 593850.659 ops/s
Iteration  14: 592167.741 ops/s
Iteration  15: 594766.194 ops/s
Iteration  16: 591327.826 ops/s
Iteration  17: 593541.831 ops/s
Iteration  18: 593104.529 ops/s
Iteration  19: 593857.482 ops/s
Iteration  20: 593686.952 ops/s
Iteration  21: 590923.884 ops/s
Iteration  22: 594094.144 ops/s
Iteration  23: 591514.259 ops/s
Iteration  24: 590417.352 ops/s
Iteration  25: 595472.994 ops/s
Iteration  26: 595523.231 ops/s
Iteration  27: 593170.007 ops/s
Iteration  28: 595391.843 ops/s
Iteration  29: 593387.798 ops/s
Iteration  30: 591122.673 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatIterableDelayErrorWithError":
  593118.142 ±(99.9%) 982.498 ops/s [Average]
  (min, avg, max) = (590417.352, 593118.142, 595523.231), stdev = 1470.557
  CI (99.9%): [592135.644, 594100.640] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score     Error  Units
FlowableConcatTest._Benchmark.benchmark_concatIterableDelayErrorWithError  thrpt   30  593118.142 ± 982.498  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 142320.772 ops/s
# Warmup Iteration   2: 208694.931 ops/s
# Warmup Iteration   3: 227147.433 ops/s
# Warmup Iteration   4: 227876.965 ops/s
# Warmup Iteration   5: 230461.370 ops/s
# Warmup Iteration   6: 230119.612 ops/s
# Warmup Iteration   7: 229054.223 ops/s
# Warmup Iteration   8: 228890.078 ops/s
# Warmup Iteration   9: 230515.726 ops/s
# Warmup Iteration  10: 229730.002 ops/s
# Warmup Iteration  11: 227467.902 ops/s
# Warmup Iteration  12: 229029.285 ops/s
# Warmup Iteration  13: 229278.645 ops/s
# Warmup Iteration  14: 228973.703 ops/s
# Warmup Iteration  15: 229322.437 ops/s
# Warmup Iteration  16: 228901.711 ops/s
# Warmup Iteration  17: 234740.877 ops/s
# Warmup Iteration  18: 235096.023 ops/s
# Warmup Iteration  19: 233706.898 ops/s
# Warmup Iteration  20: 234269.360 ops/s
# Warmup Iteration  21: 234997.281 ops/s
# Warmup Iteration  22: 235046.196 ops/s
# Warmup Iteration  23: 235003.189 ops/s
# Warmup Iteration  24: 234936.659 ops/s
# Warmup Iteration  25: 236030.341 ops/s
# Warmup Iteration  26: 234835.578 ops/s
# Warmup Iteration  27: 235004.330 ops/s
# Warmup Iteration  28: 234159.807 ops/s
# Warmup Iteration  29: 234766.003 ops/s
# Warmup Iteration  30: 234498.871 ops/s
Iteration   1: 234844.904 ops/s
Iteration   2: 234789.649 ops/s
Iteration   3: 235151.898 ops/s
Iteration   4: 234265.108 ops/s
Iteration   5: 234567.915 ops/s
Iteration   6: 234325.276 ops/s
Iteration   7: 233981.793 ops/s
Iteration   8: 234838.594 ops/s
Iteration   9: 235990.527 ops/s
Iteration  10: 235482.593 ops/s
Iteration  11: 234781.374 ops/s
Iteration  12: 235292.027 ops/s
Iteration  13: 234590.409 ops/s
Iteration  14: 234234.393 ops/s
Iteration  15: 235814.791 ops/s
Iteration  16: 234858.275 ops/s
Iteration  17: 235928.028 ops/s
Iteration  18: 234214.795 ops/s
Iteration  19: 234273.584 ops/s
Iteration  20: 234291.737 ops/s
Iteration  21: 236360.563 ops/s
Iteration  22: 235681.381 ops/s
Iteration  23: 234274.160 ops/s
Iteration  24: 234521.648 ops/s
Iteration  25: 233326.286 ops/s
Iteration  26: 235066.633 ops/s
Iteration  27: 233490.058 ops/s
Iteration  28: 233615.673 ops/s
Iteration  29: 235543.805 ops/s
Iteration  30: 235435.032 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd":
  234794.430 ±(99.9%) 510.309 ops/s [Average]
  (min, avg, max) = (233326.286, 234794.430, 236360.563), stdev = 763.807
  CI (99.9%): [234284.121, 235304.740] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score     Error  Units
FlowableConcatMapTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd  thrpt   30  234794.430 ± 510.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_composeIfNotEmptyNotFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_composeIfNotEmptyNotFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 386561.777 ops/s
# Warmup Iteration   2: 652387.141 ops/s
# Warmup Iteration   3: 653084.283 ops/s
# Warmup Iteration   4: 723959.019 ops/s
# Warmup Iteration   5: 719352.582 ops/s
# Warmup Iteration   6: 717896.703 ops/s
# Warmup Iteration   7: 719535.398 ops/s
# Warmup Iteration   8: 715783.906 ops/s
# Warmup Iteration   9: 710121.786 ops/s
# Warmup Iteration  10: 715057.985 ops/s
# Warmup Iteration  11: 713246.536 ops/s
# Warmup Iteration  12: 713593.329 ops/s
# Warmup Iteration  13: 716957.091 ops/s
# Warmup Iteration  14: 714463.957 ops/s
# Warmup Iteration  15: 711505.158 ops/s
# Warmup Iteration  16: 711755.616 ops/s
# Warmup Iteration  17: 714083.079 ops/s
# Warmup Iteration  18: 714111.816 ops/s
# Warmup Iteration  19: 717390.124 ops/s
# Warmup Iteration  20: 711237.000 ops/s
# Warmup Iteration  21: 716056.279 ops/s
# Warmup Iteration  22: 717285.148 ops/s
# Warmup Iteration  23: 712701.692 ops/s
# Warmup Iteration  24: 718096.529 ops/s
# Warmup Iteration  25: 715012.936 ops/s
# Warmup Iteration  26: 711711.985 ops/s
# Warmup Iteration  27: 714532.952 ops/s
# Warmup Iteration  28: 714835.876 ops/s
# Warmup Iteration  29: 717145.426 ops/s
# Warmup Iteration  30: 714589.402 ops/s
Iteration   1: 714727.477 ops/s
Iteration   2: 716931.114 ops/s
Iteration   3: 716819.672 ops/s
Iteration   4: 719406.088 ops/s
Iteration   5: 713368.838 ops/s
Iteration   6: 716072.130 ops/s
Iteration   7: 715755.168 ops/s
Iteration   8: 710706.408 ops/s
Iteration   9: 716784.953 ops/s
Iteration  10: 719437.770 ops/s
Iteration  11: 716060.618 ops/s
Iteration  12: 717547.189 ops/s
Iteration  13: 714229.208 ops/s
Iteration  14: 714742.701 ops/s
Iteration  15: 712474.740 ops/s
Iteration  16: 716841.099 ops/s
Iteration  17: 715074.912 ops/s
Iteration  18: 713368.730 ops/s
Iteration  19: 718091.340 ops/s
Iteration  20: 711926.430 ops/s
Iteration  21: 714753.940 ops/s
Iteration  22: 718340.355 ops/s
Iteration  23: 718531.224 ops/s
Iteration  24: 718305.145 ops/s
Iteration  25: 715948.474 ops/s
Iteration  26: 718688.896 ops/s
Iteration  27: 717764.461 ops/s
Iteration  28: 715434.244 ops/s
Iteration  29: 718175.533 ops/s
Iteration  30: 716952.226 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_composeIfNotEmptyNotFused":
  716108.703 ±(99.9%) 1498.587 ops/s [Average]
  (min, avg, max) = (710706.408, 716108.703, 719437.770), stdev = 2243.015
  CI (99.9%): [714610.116, 717607.290] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_composeIfNotEmptyNotFused  thrpt   30  716108.703 ± 1498.587  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badSourceDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badSourceDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 133001.253 ops/s
# Warmup Iteration   2: 184774.289 ops/s
# Warmup Iteration   3: 186769.278 ops/s
# Warmup Iteration   4: 208186.077 ops/s
# Warmup Iteration   5: 210363.138 ops/s
# Warmup Iteration   6: 210864.965 ops/s
# Warmup Iteration   7: 209710.191 ops/s
# Warmup Iteration   8: 209944.500 ops/s
# Warmup Iteration   9: 210961.501 ops/s
# Warmup Iteration  10: 209729.700 ops/s
# Warmup Iteration  11: 209552.756 ops/s
# Warmup Iteration  12: 208554.158 ops/s
# Warmup Iteration  13: 208891.193 ops/s
# Warmup Iteration  14: 207942.327 ops/s
# Warmup Iteration  15: 207005.560 ops/s
# Warmup Iteration  16: 207398.802 ops/s
# Warmup Iteration  17: 215495.563 ops/s
# Warmup Iteration  18: 215135.278 ops/s
# Warmup Iteration  19: 214302.458 ops/s
# Warmup Iteration  20: 216156.568 ops/s
# Warmup Iteration  21: 215246.165 ops/s
# Warmup Iteration  22: 215565.970 ops/s
# Warmup Iteration  23: 216287.641 ops/s
# Warmup Iteration  24: 215211.250 ops/s
# Warmup Iteration  25: 215617.519 ops/s
# Warmup Iteration  26: 215005.100 ops/s
# Warmup Iteration  27: 214343.692 ops/s
# Warmup Iteration  28: 215825.225 ops/s
# Warmup Iteration  29: 215027.060 ops/s
# Warmup Iteration  30: 213743.789 ops/s
Iteration   1: 214472.316 ops/s
Iteration   2: 215438.665 ops/s
Iteration   3: 216071.929 ops/s
Iteration   4: 214922.923 ops/s
Iteration   5: 212708.012 ops/s
Iteration   6: 215969.102 ops/s
Iteration   7: 215890.471 ops/s
Iteration   8: 215195.527 ops/s
Iteration   9: 214091.630 ops/s
Iteration  10: 214768.708 ops/s
Iteration  11: 216501.246 ops/s
Iteration  12: 214917.497 ops/s
Iteration  13: 215573.298 ops/s
Iteration  14: 215964.003 ops/s
Iteration  15: 215027.387 ops/s
Iteration  16: 215921.579 ops/s
Iteration  17: 216528.181 ops/s
Iteration  18: 214677.442 ops/s
Iteration  19: 216314.763 ops/s
Iteration  20: 215117.130 ops/s
Iteration  21: 216009.253 ops/s
Iteration  22: 215496.220 ops/s
Iteration  23: 216173.233 ops/s
Iteration  24: 215665.317 ops/s
Iteration  25: 215109.064 ops/s
Iteration  26: 216510.628 ops/s
Iteration  27: 215644.480 ops/s
Iteration  28: 214369.047 ops/s
Iteration  29: 216696.206 ops/s
Iteration  30: 215365.804 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_badSourceDelayError":
  215437.035 ±(99.9%) 575.943 ops/s [Average]
  (min, avg, max) = (212708.012, 215437.035, 216696.206), stdev = 862.045
  CI (99.9%): [214861.092, 216012.979] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score     Error  Units
FlowableConcatTest._Benchmark.benchmark_badSourceDelayError  thrpt   30  215437.035 ± 575.943  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryPredicate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryPredicate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 314716.152 ops/s
# Warmup Iteration   2: 405401.072 ops/s
# Warmup Iteration   3: 408765.342 ops/s
# Warmup Iteration   4: 449240.302 ops/s
# Warmup Iteration   5: 454140.850 ops/s
# Warmup Iteration   6: 453450.124 ops/s
# Warmup Iteration   7: 454018.221 ops/s
# Warmup Iteration   8: 455432.412 ops/s
# Warmup Iteration   9: 453981.976 ops/s
# Warmup Iteration  10: 452991.937 ops/s
# Warmup Iteration  11: 452465.382 ops/s
# Warmup Iteration  12: 454106.665 ops/s
# Warmup Iteration  13: 454979.401 ops/s
# Warmup Iteration  14: 451330.893 ops/s
# Warmup Iteration  15: 447956.403 ops/s
# Warmup Iteration  16: 449491.247 ops/s
# Warmup Iteration  17: 462176.409 ops/s
# Warmup Iteration  18: 463563.449 ops/s
# Warmup Iteration  19: 462202.065 ops/s
# Warmup Iteration  20: 462041.495 ops/s
# Warmup Iteration  21: 463933.018 ops/s
# Warmup Iteration  22: 463224.802 ops/s
# Warmup Iteration  23: 467306.493 ops/s
# Warmup Iteration  24: 466054.267 ops/s
# Warmup Iteration  25: 462295.026 ops/s
# Warmup Iteration  26: 461966.285 ops/s
# Warmup Iteration  27: 462790.843 ops/s
# Warmup Iteration  28: 464922.169 ops/s
# Warmup Iteration  29: 465536.314 ops/s
# Warmup Iteration  30: 463609.941 ops/s
Iteration   1: 462772.567 ops/s
Iteration   2: 462566.884 ops/s
Iteration   3: 461843.324 ops/s
Iteration   4: 461410.238 ops/s
Iteration   5: 465196.397 ops/s
Iteration   6: 462027.992 ops/s
Iteration   7: 460082.997 ops/s
Iteration   8: 464261.597 ops/s
Iteration   9: 463136.566 ops/s
Iteration  10: 463827.953 ops/s
Iteration  11: 461030.045 ops/s
Iteration  12: 462018.451 ops/s
Iteration  13: 463608.244 ops/s
Iteration  14: 462411.056 ops/s
Iteration  15: 465674.255 ops/s
Iteration  16: 462207.922 ops/s
Iteration  17: 464857.055 ops/s
Iteration  18: 461724.207 ops/s
Iteration  19: 464531.363 ops/s
Iteration  20: 463156.680 ops/s
Iteration  21: 462816.887 ops/s
Iteration  22: 463080.950 ops/s
Iteration  23: 462067.473 ops/s
Iteration  24: 463653.361 ops/s
Iteration  25: 464419.627 ops/s
Iteration  26: 464240.972 ops/s
Iteration  27: 462838.049 ops/s
Iteration  28: 465192.314 ops/s
Iteration  29: 464255.440 ops/s
Iteration  30: 460976.577 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryPredicate":
  463062.915 ±(99.9%) 934.536 ops/s [Average]
  (min, avg, max) = (460082.997, 463062.915, 465674.255), stdev = 1398.770
  CI (99.9%): [462128.379, 463997.451] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score     Error  Units
FlowableRetryTest._Benchmark.benchmark_retryPredicate  thrpt   30  463062.915 ± 934.536  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147544.722 ops/s
# Warmup Iteration   2: 208813.732 ops/s
# Warmup Iteration   3: 217602.190 ops/s
# Warmup Iteration   4: 236117.416 ops/s
# Warmup Iteration   5: 238731.092 ops/s
# Warmup Iteration   6: 239345.205 ops/s
# Warmup Iteration   7: 240225.950 ops/s
# Warmup Iteration   8: 239777.141 ops/s
# Warmup Iteration   9: 240223.589 ops/s
# Warmup Iteration  10: 238404.152 ops/s
# Warmup Iteration  11: 234930.731 ops/s
# Warmup Iteration  12: 237253.639 ops/s
# Warmup Iteration  13: 238398.959 ops/s
# Warmup Iteration  14: 237686.243 ops/s
# Warmup Iteration  15: 237420.033 ops/s
# Warmup Iteration  16: 237539.468 ops/s
# Warmup Iteration  17: 255417.531 ops/s
# Warmup Iteration  18: 254136.508 ops/s
# Warmup Iteration  19: 254657.873 ops/s
# Warmup Iteration  20: 255539.865 ops/s
# Warmup Iteration  21: 256631.650 ops/s
# Warmup Iteration  22: 254402.601 ops/s
# Warmup Iteration  23: 255950.554 ops/s
# Warmup Iteration  24: 253977.566 ops/s
# Warmup Iteration  25: 255165.700 ops/s
# Warmup Iteration  26: 256802.734 ops/s
# Warmup Iteration  27: 255529.137 ops/s
# Warmup Iteration  28: 255821.030 ops/s
# Warmup Iteration  29: 254643.846 ops/s
# Warmup Iteration  30: 255463.891 ops/s
Iteration   1: 256908.529 ops/s
Iteration   2: 255763.371 ops/s
Iteration   3: 255289.358 ops/s
Iteration   4: 255540.514 ops/s
Iteration   5: 254909.817 ops/s
Iteration   6: 256330.835 ops/s
Iteration   7: 255482.836 ops/s
Iteration   8: 256435.102 ops/s
Iteration   9: 255111.356 ops/s
Iteration  10: 256962.984 ops/s
Iteration  11: 255731.750 ops/s
Iteration  12: 257007.346 ops/s
Iteration  13: 255449.825 ops/s
Iteration  14: 256059.778 ops/s
Iteration  15: 256597.210 ops/s
Iteration  16: 255553.451 ops/s
Iteration  17: 257751.699 ops/s
Iteration  18: 255472.784 ops/s
Iteration  19: 254524.569 ops/s
Iteration  20: 257075.035 ops/s
Iteration  21: 254496.175 ops/s
Iteration  22: 255978.743 ops/s
Iteration  23: 255161.673 ops/s
Iteration  24: 255871.960 ops/s
Iteration  25: 256614.141 ops/s
Iteration  26: 255054.909 ops/s
Iteration  27: 254152.305 ops/s
Iteration  28: 255234.091 ops/s
Iteration  29: 255218.841 ops/s
Iteration  30: 256477.199 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  255807.273 ±(99.9%) 577.578 ops/s [Average]
  (min, avg, max) = (254152.305, 255807.273, 257751.699), stdev = 864.492
  CI (99.9%): [255229.695, 256384.851] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score     Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  255807.273 ± 577.578  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorSkipInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorSkipInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 304452.166 ops/s
# Warmup Iteration   2: 503823.813 ops/s
# Warmup Iteration   3: 481914.465 ops/s
# Warmup Iteration   4: 542064.716 ops/s
# Warmup Iteration   5: 543411.393 ops/s
# Warmup Iteration   6: 541330.920 ops/s
# Warmup Iteration   7: 537378.575 ops/s
# Warmup Iteration   8: 538961.891 ops/s
# Warmup Iteration   9: 542871.223 ops/s
# Warmup Iteration  10: 542452.624 ops/s
# Warmup Iteration  11: 539439.742 ops/s
# Warmup Iteration  12: 540309.807 ops/s
# Warmup Iteration  13: 538188.180 ops/s
# Warmup Iteration  14: 538959.847 ops/s
# Warmup Iteration  15: 539962.016 ops/s
# Warmup Iteration  16: 538223.523 ops/s
# Warmup Iteration  17: 561964.181 ops/s
# Warmup Iteration  18: 561129.305 ops/s
# Warmup Iteration  19: 566036.536 ops/s
# Warmup Iteration  20: 561819.109 ops/s
# Warmup Iteration  21: 562070.595 ops/s
# Warmup Iteration  22: 563326.908 ops/s
# Warmup Iteration  23: 564338.465 ops/s
# Warmup Iteration  24: 562723.146 ops/s
# Warmup Iteration  25: 563957.543 ops/s
# Warmup Iteration  26: 561237.023 ops/s
# Warmup Iteration  27: 565901.532 ops/s
# Warmup Iteration  28: 562553.569 ops/s
# Warmup Iteration  29: 562725.274 ops/s
# Warmup Iteration  30: 562207.521 ops/s
Iteration   1: 560877.370 ops/s
Iteration   2: 564946.133 ops/s
Iteration   3: 564164.977 ops/s
Iteration   4: 564829.173 ops/s
Iteration   5: 564082.081 ops/s
Iteration   6: 564834.968 ops/s
Iteration   7: 566141.293 ops/s
Iteration   8: 564422.345 ops/s
Iteration   9: 565717.989 ops/s
Iteration  10: 531523.051 ops/s
Iteration  11: 565890.232 ops/s
Iteration  12: 561077.443 ops/s
Iteration  13: 562942.656 ops/s
Iteration  14: 562734.930 ops/s
Iteration  15: 565248.598 ops/s
Iteration  16: 566423.257 ops/s
Iteration  17: 564702.358 ops/s
Iteration  18: 563358.388 ops/s
Iteration  19: 561158.648 ops/s
Iteration  20: 562775.720 ops/s
Iteration  21: 563603.000 ops/s
Iteration  22: 560930.495 ops/s
Iteration  23: 563071.442 ops/s
Iteration  24: 563044.297 ops/s
Iteration  25: 565979.449 ops/s
Iteration  26: 561734.781 ops/s
Iteration  27: 563790.474 ops/s
Iteration  28: 561155.496 ops/s
Iteration  29: 560929.672 ops/s
Iteration  30: 564016.723 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorSkipInner":
  562536.915 ±(99.9%) 4079.134 ops/s [Average]
  (min, avg, max) = (531523.051, 562536.915, 566423.257), stdev = 6105.456
  CI (99.9%): [558457.781, 566616.048] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_errorSkipInner  thrpt   30  562536.915 ± 4079.134  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 344714.256 ops/s
# Warmup Iteration   2: 510615.237 ops/s
# Warmup Iteration   3: 548400.231 ops/s
# Warmup Iteration   4: 547687.231 ops/s
# Warmup Iteration   5: 546908.573 ops/s
# Warmup Iteration   6: 543668.282 ops/s
# Warmup Iteration   7: 545887.115 ops/s
# Warmup Iteration   8: 539107.761 ops/s
# Warmup Iteration   9: 546875.995 ops/s
# Warmup Iteration  10: 545696.349 ops/s
# Warmup Iteration  11: 542830.114 ops/s
# Warmup Iteration  12: 544838.109 ops/s
# Warmup Iteration  13: 546731.104 ops/s
# Warmup Iteration  14: 542027.554 ops/s
# Warmup Iteration  15: 548000.115 ops/s
# Warmup Iteration  16: 548377.901 ops/s
# Warmup Iteration  17: 566813.457 ops/s
# Warmup Iteration  18: 566382.277 ops/s
# Warmup Iteration  19: 567343.966 ops/s
# Warmup Iteration  20: 564709.679 ops/s
# Warmup Iteration  21: 568570.260 ops/s
# Warmup Iteration  22: 570320.447 ops/s
# Warmup Iteration  23: 567242.968 ops/s
# Warmup Iteration  24: 567094.028 ops/s
# Warmup Iteration  25: 567306.045 ops/s
# Warmup Iteration  26: 567927.755 ops/s
# Warmup Iteration  27: 567634.018 ops/s
# Warmup Iteration  28: 568008.804 ops/s
# Warmup Iteration  29: 567981.977 ops/s
# Warmup Iteration  30: 567297.270 ops/s
Iteration   1: 567626.191 ops/s
Iteration   2: 565287.652 ops/s
Iteration   3: 567375.476 ops/s
Iteration   4: 569031.266 ops/s
Iteration   5: 567045.425 ops/s
Iteration   6: 568037.359 ops/s
Iteration   7: 568406.962 ops/s
Iteration   8: 567495.463 ops/s
Iteration   9: 565148.091 ops/s
Iteration  10: 564164.391 ops/s
Iteration  11: 566208.276 ops/s
Iteration  12: 569956.444 ops/s
Iteration  13: 568898.358 ops/s
Iteration  14: 564406.503 ops/s
Iteration  15: 569548.790 ops/s
Iteration  16: 568159.362 ops/s
Iteration  17: 567148.861 ops/s
Iteration  18: 568559.109 ops/s
Iteration  19: 569658.556 ops/s
Iteration  20: 565308.226 ops/s
Iteration  21: 564400.269 ops/s
Iteration  22: 567804.425 ops/s
Iteration  23: 562934.399 ops/s
Iteration  24: 562250.217 ops/s
Iteration  25: 566607.224 ops/s
Iteration  26: 565489.010 ops/s
Iteration  27: 566291.089 ops/s
Iteration  28: 567909.119 ops/s
Iteration  29: 567645.547 ops/s
Iteration  30: 567451.156 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherDelayError":
  566875.107 ±(99.9%) 1317.079 ops/s [Average]
  (min, avg, max) = (562250.217, 566875.107, 569956.444), stdev = 1971.343
  CI (99.9%): [565558.028, 568192.186] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
MaybeConcatEagerTest._Benchmark.benchmark_publisherDelayError  thrpt   30  566875.107 ± 1317.079  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 376090.468 ops/s
# Warmup Iteration   2: 578973.403 ops/s
# Warmup Iteration   3: 559404.588 ops/s
# Warmup Iteration   4: 629419.966 ops/s
# Warmup Iteration   5: 629608.326 ops/s
# Warmup Iteration   6: 627692.400 ops/s
# Warmup Iteration   7: 628474.473 ops/s
# Warmup Iteration   8: 624775.814 ops/s
# Warmup Iteration   9: 628970.559 ops/s
# Warmup Iteration  10: 626401.603 ops/s
# Warmup Iteration  11: 630150.764 ops/s
# Warmup Iteration  12: 625236.363 ops/s
# Warmup Iteration  13: 627875.611 ops/s
# Warmup Iteration  14: 628885.706 ops/s
# Warmup Iteration  15: 625409.143 ops/s
# Warmup Iteration  16: 622492.257 ops/s
# Warmup Iteration  17: 651729.465 ops/s
# Warmup Iteration  18: 651159.943 ops/s
# Warmup Iteration  19: 649231.347 ops/s
# Warmup Iteration  20: 651818.001 ops/s
# Warmup Iteration  21: 652659.152 ops/s
# Warmup Iteration  22: 652623.528 ops/s
# Warmup Iteration  23: 649641.381 ops/s
# Warmup Iteration  24: 652658.920 ops/s
# Warmup Iteration  25: 651924.835 ops/s
# Warmup Iteration  26: 647443.819 ops/s
# Warmup Iteration  27: 647825.534 ops/s
# Warmup Iteration  28: 648607.221 ops/s
# Warmup Iteration  29: 650703.104 ops/s
# Warmup Iteration  30: 647086.122 ops/s
Iteration   1: 649646.507 ops/s
Iteration   2: 650485.921 ops/s
Iteration   3: 652092.597 ops/s
Iteration   4: 652367.597 ops/s
Iteration   5: 649792.421 ops/s
Iteration   6: 652592.073 ops/s
Iteration   7: 647971.123 ops/s
Iteration   8: 645354.191 ops/s
Iteration   9: 649135.146 ops/s
Iteration  10: 642764.476 ops/s
Iteration  11: 650387.988 ops/s
Iteration  12: 650589.663 ops/s
Iteration  13: 653228.578 ops/s
Iteration  14: 649878.667 ops/s
Iteration  15: 639631.104 ops/s
Iteration  16: 651921.709 ops/s
Iteration  17: 651214.811 ops/s
Iteration  18: 654030.756 ops/s
Iteration  19: 651375.107 ops/s
Iteration  20: 651437.562 ops/s
Iteration  21: 649388.063 ops/s
Iteration  22: 651561.365 ops/s
Iteration  23: 650930.385 ops/s
Iteration  24: 647415.493 ops/s
Iteration  25: 651408.462 ops/s
Iteration  26: 651198.883 ops/s
Iteration  27: 650431.949 ops/s
Iteration  28: 650333.810 ops/s
Iteration  29: 651065.310 ops/s
Iteration  30: 651088.963 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_publisherError":
  650024.023 ±(99.9%) 1985.482 ops/s [Average]
  (min, avg, max) = (639631.104, 650024.023, 654030.756), stdev = 2971.776
  CI (99.9%): [648038.541, 652009.505] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
MaybeConcatEagerTest._Benchmark.benchmark_publisherError  thrpt   30  650024.023 ± 1985.482  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 362847.443 ops/s
# Warmup Iteration   2: 649272.673 ops/s
# Warmup Iteration   3: 791244.981 ops/s
# Warmup Iteration   4: 794660.267 ops/s
# Warmup Iteration   5: 796669.886 ops/s
# Warmup Iteration   6: 792941.491 ops/s
# Warmup Iteration   7: 795395.374 ops/s
# Warmup Iteration   8: 792298.280 ops/s
# Warmup Iteration   9: 791923.905 ops/s
# Warmup Iteration  10: 788060.747 ops/s
# Warmup Iteration  11: 794629.386 ops/s
# Warmup Iteration  12: 792202.230 ops/s
# Warmup Iteration  13: 793512.480 ops/s
# Warmup Iteration  14: 790073.285 ops/s
# Warmup Iteration  15: 795714.015 ops/s
# Warmup Iteration  16: 791243.969 ops/s
# Warmup Iteration  17: 789943.381 ops/s
# Warmup Iteration  18: 790407.601 ops/s
# Warmup Iteration  19: 792803.642 ops/s
# Warmup Iteration  20: 791710.054 ops/s
# Warmup Iteration  21: 793597.729 ops/s
# Warmup Iteration  22: 796799.992 ops/s
# Warmup Iteration  23: 790775.781 ops/s
# Warmup Iteration  24: 788665.360 ops/s
# Warmup Iteration  25: 785729.572 ops/s
# Warmup Iteration  26: 790443.870 ops/s
# Warmup Iteration  27: 792417.089 ops/s
# Warmup Iteration  28: 793840.866 ops/s
# Warmup Iteration  29: 793503.411 ops/s
# Warmup Iteration  30: 791019.894 ops/s
Iteration   1: 786331.200 ops/s
Iteration   2: 793109.345 ops/s
Iteration   3: 795379.369 ops/s
Iteration   4: 793302.058 ops/s
Iteration   5: 790248.026 ops/s
Iteration   6: 793769.225 ops/s
Iteration   7: 792215.049 ops/s
Iteration   8: 789798.389 ops/s
Iteration   9: 781981.499 ops/s
Iteration  10: 791712.563 ops/s
Iteration  11: 793212.240 ops/s
Iteration  12: 794370.089 ops/s
Iteration  13: 792355.131 ops/s
Iteration  14: 793112.219 ops/s
Iteration  15: 794233.866 ops/s
Iteration  16: 788997.104 ops/s
Iteration  17: 790803.750 ops/s
Iteration  18: 786011.292 ops/s
Iteration  19: 784519.269 ops/s
Iteration  20: 790998.756 ops/s
Iteration  21: 792480.069 ops/s
Iteration  22: 792646.693 ops/s
Iteration  23: 787388.896 ops/s
Iteration  24: 794019.722 ops/s
Iteration  25: 786325.083 ops/s
Iteration  26: 789987.046 ops/s
Iteration  27: 791866.538 ops/s
Iteration  28: 791753.101 ops/s
Iteration  29: 794502.952 ops/s
Iteration  30: 788713.458 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipReentrant":
  790871.467 ±(99.9%) 2205.186 ops/s [Average]
  (min, avg, max) = (781981.499, 790871.467, 795379.369), stdev = 3300.619
  CI (99.9%): [788666.281, 793076.653] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_skipReentrant  thrpt   30  790871.467 ± 2205.186  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactUnboundedReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactUnboundedReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 387062.849 ops/s
# Warmup Iteration   2: 684215.829 ops/s
# Warmup Iteration   3: 842941.924 ops/s
# Warmup Iteration   4: 840563.141 ops/s
# Warmup Iteration   5: 839399.245 ops/s
# Warmup Iteration   6: 834187.130 ops/s
# Warmup Iteration   7: 837925.668 ops/s
# Warmup Iteration   8: 837830.988 ops/s
# Warmup Iteration   9: 840915.512 ops/s
# Warmup Iteration  10: 837763.418 ops/s
# Warmup Iteration  11: 838863.216 ops/s
# Warmup Iteration  12: 835776.901 ops/s
# Warmup Iteration  13: 833248.833 ops/s
# Warmup Iteration  14: 836093.674 ops/s
# Warmup Iteration  15: 837783.059 ops/s
# Warmup Iteration  16: 836847.002 ops/s
# Warmup Iteration  17: 838897.440 ops/s
# Warmup Iteration  18: 837618.753 ops/s
# Warmup Iteration  19: 837833.973 ops/s
# Warmup Iteration  20: 837803.437 ops/s
# Warmup Iteration  21: 841485.174 ops/s
# Warmup Iteration  22: 837244.664 ops/s
# Warmup Iteration  23: 837822.229 ops/s
# Warmup Iteration  24: 840188.040 ops/s
# Warmup Iteration  25: 840214.127 ops/s
# Warmup Iteration  26: 836164.509 ops/s
# Warmup Iteration  27: 838554.644 ops/s
# Warmup Iteration  28: 837893.959 ops/s
# Warmup Iteration  29: 841170.029 ops/s
# Warmup Iteration  30: 840731.668 ops/s
Iteration   1: 842414.456 ops/s
Iteration   2: 837210.313 ops/s
Iteration   3: 839002.625 ops/s
Iteration   4: 839161.411 ops/s
Iteration   5: 839233.562 ops/s
Iteration   6: 837446.499 ops/s
Iteration   7: 840196.325 ops/s
Iteration   8: 838800.068 ops/s
Iteration   9: 844531.344 ops/s
Iteration  10: 845134.368 ops/s
Iteration  11: 837506.323 ops/s
Iteration  12: 840539.751 ops/s
Iteration  13: 835536.467 ops/s
Iteration  14: 835112.520 ops/s
Iteration  15: 837470.340 ops/s
Iteration  16: 839687.443 ops/s
Iteration  17: 840329.582 ops/s
Iteration  18: 841831.177 ops/s
Iteration  19: 841130.449 ops/s
Iteration  20: 841277.153 ops/s
Iteration  21: 836155.587 ops/s
Iteration  22: 842792.967 ops/s
Iteration  23: 841619.570 ops/s
Iteration  24: 838140.573 ops/s
Iteration  25: 841073.284 ops/s
Iteration  26: 833748.344 ops/s
Iteration  27: 838124.138 ops/s
Iteration  28: 838135.456 ops/s
Iteration  29: 839472.959 ops/s
Iteration  30: 838154.260 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactUnboundedReentrant":
  839365.644 ±(99.9%) 1761.041 ops/s [Average]
  (min, avg, max) = (833748.344, 839365.644, 845134.368), stdev = 2635.844
  CI (99.9%): [837604.603, 841126.685] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_exactUnboundedReentrant  thrpt   30  839365.644 ± 1761.041  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 316496.368 ops/s
# Warmup Iteration   2: 641220.121 ops/s
# Warmup Iteration   3: 774859.424 ops/s
# Warmup Iteration   4: 792427.569 ops/s
# Warmup Iteration   5: 788748.626 ops/s
# Warmup Iteration   6: 787437.423 ops/s
# Warmup Iteration   7: 786594.798 ops/s
# Warmup Iteration   8: 786574.277 ops/s
# Warmup Iteration   9: 787090.021 ops/s
# Warmup Iteration  10: 772035.591 ops/s
# Warmup Iteration  11: 784065.434 ops/s
# Warmup Iteration  12: 785601.355 ops/s
# Warmup Iteration  13: 786328.930 ops/s
# Warmup Iteration  14: 782837.788 ops/s
# Warmup Iteration  15: 783945.175 ops/s
# Warmup Iteration  16: 782158.255 ops/s
# Warmup Iteration  17: 785244.920 ops/s
# Warmup Iteration  18: 783199.180 ops/s
# Warmup Iteration  19: 787028.850 ops/s
# Warmup Iteration  20: 783115.060 ops/s
# Warmup Iteration  21: 783802.829 ops/s
# Warmup Iteration  22: 789107.513 ops/s
# Warmup Iteration  23: 787595.619 ops/s
# Warmup Iteration  24: 784978.401 ops/s
# Warmup Iteration  25: 782285.969 ops/s
# Warmup Iteration  26: 785321.294 ops/s
# Warmup Iteration  27: 779927.540 ops/s
# Warmup Iteration  28: 789541.159 ops/s
# Warmup Iteration  29: 786363.600 ops/s
# Warmup Iteration  30: 784819.570 ops/s
Iteration   1: 773741.418 ops/s
Iteration   2: 784463.103 ops/s
Iteration   3: 785343.097 ops/s
Iteration   4: 784821.976 ops/s
Iteration   5: 784693.359 ops/s
Iteration   6: 787906.936 ops/s
Iteration   7: 784225.790 ops/s
Iteration   8: 782589.482 ops/s
Iteration   9: 787082.812 ops/s
Iteration  10: 786814.141 ops/s
Iteration  11: 785490.922 ops/s
Iteration  12: 787939.132 ops/s
Iteration  13: 787989.649 ops/s
Iteration  14: 786681.349 ops/s
Iteration  15: 781772.832 ops/s
Iteration  16: 790715.589 ops/s
Iteration  17: 783057.709 ops/s
Iteration  18: 784961.888 ops/s
Iteration  19: 784200.051 ops/s
Iteration  20: 784975.162 ops/s
Iteration  21: 786893.440 ops/s
Iteration  22: 788816.661 ops/s
Iteration  23: 785801.757 ops/s
Iteration  24: 788214.780 ops/s
Iteration  25: 789684.123 ops/s
Iteration  26: 786441.337 ops/s
Iteration  27: 790396.728 ops/s
Iteration  28: 788073.539 ops/s
Iteration  29: 784238.666 ops/s
Iteration  30: 787401.670 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant":
  785847.637 ±(99.9%) 2128.837 ops/s [Average]
  (min, avg, max) = (773741.418, 785847.637, 790715.589), stdev = 3186.344
  CI (99.9%): [783718.799, 787976.474] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant  thrpt   30  785847.637 ± 2128.837  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipJustOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipJustOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94327.574 ops/s
# Warmup Iteration   2: 167086.415 ops/s
# Warmup Iteration   3: 160422.014 ops/s
# Warmup Iteration   4: 148665.907 ops/s
# Warmup Iteration   5: 166649.014 ops/s
# Warmup Iteration   6: 167506.922 ops/s
# Warmup Iteration   7: 163117.221 ops/s
# Warmup Iteration   8: 165212.254 ops/s
# Warmup Iteration   9: 166182.169 ops/s
# Warmup Iteration  10: 167265.919 ops/s
# Warmup Iteration  11: 164729.667 ops/s
# Warmup Iteration  12: 163589.903 ops/s
# Warmup Iteration  13: 165651.212 ops/s
# Warmup Iteration  14: 165498.220 ops/s
# Warmup Iteration  15: 167593.872 ops/s
# Warmup Iteration  16: 166084.624 ops/s
# Warmup Iteration  17: 166884.098 ops/s
# Warmup Iteration  18: 163507.175 ops/s
# Warmup Iteration  19: 168061.265 ops/s
# Warmup Iteration  20: 164851.399 ops/s
# Warmup Iteration  21: 165180.097 ops/s
# Warmup Iteration  22: 168287.624 ops/s
# Warmup Iteration  23: 166290.688 ops/s
# Warmup Iteration  24: 160376.797 ops/s
# Warmup Iteration  25: 162828.531 ops/s
# Warmup Iteration  26: 164438.938 ops/s
# Warmup Iteration  27: 162643.861 ops/s
# Warmup Iteration  28: 164887.446 ops/s
# Warmup Iteration  29: 164610.821 ops/s
# Warmup Iteration  30: 165054.146 ops/s
Iteration   1: 162895.464 ops/s
Iteration   2: 164177.375 ops/s
Iteration   3: 160690.501 ops/s
Iteration   4: 162676.071 ops/s
Iteration   5: 163912.481 ops/s
Iteration   6: 163305.458 ops/s
Iteration   7: 163528.690 ops/s
Iteration   8: 162137.909 ops/s
Iteration   9: 163491.518 ops/s
Iteration  10: 162062.070 ops/s
Iteration  11: 163507.974 ops/s
Iteration  12: 164550.753 ops/s
Iteration  13: 169290.933 ops/s
Iteration  14: 163144.297 ops/s
Iteration  15: 168104.884 ops/s
Iteration  16: 163340.979 ops/s
Iteration  17: 163447.762 ops/s
Iteration  18: 160112.895 ops/s
Iteration  19: 162032.394 ops/s
Iteration  20: 161842.700 ops/s
Iteration  21: 162644.865 ops/s
Iteration  22: 163712.026 ops/s
Iteration  23: 162413.108 ops/s
Iteration  24: 163756.914 ops/s
Iteration  25: 163581.994 ops/s
Iteration  26: 163015.308 ops/s
Iteration  27: 164571.666 ops/s
Iteration  28: 167794.340 ops/s
Iteration  29: 161723.125 ops/s
Iteration  30: 164526.843 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipJustOverlap":
  163533.110 ±(99.9%) 1312.596 ops/s [Average]
  (min, avg, max) = (160112.895, 163533.110, 169290.933), stdev = 1964.632
  CI (99.9%): [162220.514, 164845.706] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipJustOverlap  thrpt   30  163533.110 ± 1312.596  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipJustSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipJustSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65972.840 ops/s
# Warmup Iteration   2: 148407.339 ops/s
# Warmup Iteration   3: 165719.822 ops/s
# Warmup Iteration   4: 170978.570 ops/s
# Warmup Iteration   5: 175665.370 ops/s
# Warmup Iteration   6: 178506.445 ops/s
# Warmup Iteration   7: 167453.876 ops/s
# Warmup Iteration   8: 179233.539 ops/s
# Warmup Iteration   9: 177012.775 ops/s
# Warmup Iteration  10: 172750.130 ops/s
# Warmup Iteration  11: 178358.664 ops/s
# Warmup Iteration  12: 176762.487 ops/s
# Warmup Iteration  13: 170309.160 ops/s
# Warmup Iteration  14: 175650.538 ops/s
# Warmup Iteration  15: 176142.687 ops/s
# Warmup Iteration  16: 176761.004 ops/s
# Warmup Iteration  17: 171811.338 ops/s
# Warmup Iteration  18: 173801.838 ops/s
# Warmup Iteration  19: 176232.457 ops/s
# Warmup Iteration  20: 173012.930 ops/s
# Warmup Iteration  21: 178390.875 ops/s
# Warmup Iteration  22: 175397.966 ops/s
# Warmup Iteration  23: 169768.585 ops/s
# Warmup Iteration  24: 177815.022 ops/s
# Warmup Iteration  25: 170865.333 ops/s
# Warmup Iteration  26: 171918.885 ops/s
# Warmup Iteration  27: 173297.249 ops/s
# Warmup Iteration  28: 172855.501 ops/s
# Warmup Iteration  29: 172284.434 ops/s
# Warmup Iteration  30: 173155.252 ops/s
Iteration   1: 169400.456 ops/s
Iteration   2: 171816.323 ops/s
Iteration   3: 173500.158 ops/s
Iteration   4: 173755.363 ops/s
Iteration   5: 175208.028 ops/s
Iteration   6: 170635.014 ops/s
Iteration   7: 168719.015 ops/s
Iteration   8: 174235.775 ops/s
Iteration   9: 171712.650 ops/s
Iteration  10: 179109.920 ops/s
Iteration  11: 176366.147 ops/s
Iteration  12: 175674.094 ops/s
Iteration  13: 173021.263 ops/s
Iteration  14: 167560.538 ops/s
Iteration  15: 170571.193 ops/s
Iteration  16: 170086.740 ops/s
Iteration  17: 171662.848 ops/s
Iteration  18: 173618.751 ops/s
Iteration  19: 170381.481 ops/s
Iteration  20: 168196.852 ops/s
Iteration  21: 176414.489 ops/s
Iteration  22: 175974.396 ops/s
Iteration  23: 173328.311 ops/s
Iteration  24: 177333.185 ops/s
Iteration  25: 175007.530 ops/s
Iteration  26: 171977.852 ops/s
Iteration  27: 175829.470 ops/s
Iteration  28: 174921.965 ops/s
Iteration  29: 173147.173 ops/s
Iteration  30: 171204.626 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipJustSkip":
  173012.387 ±(99.9%) 1915.791 ops/s [Average]
  (min, avg, max) = (167560.538, 173012.387, 179109.920), stdev = 2867.466
  CI (99.9%): [171096.596, 174928.178] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_timeskipJustSkip  thrpt   30  173012.387 ± 1915.791  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80404.562 ops/s
# Warmup Iteration   2: 184607.471 ops/s
# Warmup Iteration   3: 197854.792 ops/s
# Warmup Iteration   4: 204390.089 ops/s
# Warmup Iteration   5: 202112.001 ops/s
# Warmup Iteration   6: 206258.264 ops/s
# Warmup Iteration   7: 200370.900 ops/s
# Warmup Iteration   8: 204285.275 ops/s
# Warmup Iteration   9: 205104.322 ops/s
# Warmup Iteration  10: 205132.856 ops/s
# Warmup Iteration  11: 205033.982 ops/s
# Warmup Iteration  12: 200850.546 ops/s
# Warmup Iteration  13: 198982.578 ops/s
# Warmup Iteration  14: 204243.806 ops/s
# Warmup Iteration  15: 202443.094 ops/s
# Warmup Iteration  16: 200787.276 ops/s
# Warmup Iteration  17: 200125.530 ops/s
# Warmup Iteration  18: 203375.639 ops/s
# Warmup Iteration  19: 197575.939 ops/s
# Warmup Iteration  20: 201281.527 ops/s
# Warmup Iteration  21: 201864.727 ops/s
# Warmup Iteration  22: 205676.341 ops/s
# Warmup Iteration  23: 194400.032 ops/s
# Warmup Iteration  24: 204258.460 ops/s
# Warmup Iteration  25: 200932.784 ops/s
# Warmup Iteration  26: 196361.457 ops/s
# Warmup Iteration  27: 204493.069 ops/s
# Warmup Iteration  28: 202115.044 ops/s
# Warmup Iteration  29: 201857.582 ops/s
# Warmup Iteration  30: 203099.479 ops/s
Iteration   1: 210482.427 ops/s
Iteration   2: 199854.930 ops/s
Iteration   3: 200075.036 ops/s
Iteration   4: 207100.693 ops/s
Iteration   5: 202472.963 ops/s
Iteration   6: 204076.310 ops/s
Iteration   7: 203762.009 ops/s
Iteration   8: 199748.187 ops/s
Iteration   9: 204835.305 ops/s
Iteration  10: 206244.903 ops/s
Iteration  11: 201388.987 ops/s
Iteration  12: 202433.409 ops/s
Iteration  13: 198623.216 ops/s
Iteration  14: 204597.675 ops/s
Iteration  15: 202119.155 ops/s
Iteration  16: 203460.265 ops/s
Iteration  17: 203384.636 ops/s
Iteration  18: 201442.466 ops/s
Iteration  19: 201413.879 ops/s
Iteration  20: 202340.866 ops/s
Iteration  21: 199347.902 ops/s
Iteration  22: 202627.116 ops/s
Iteration  23: 201085.759 ops/s
Iteration  24: 200665.413 ops/s
Iteration  25: 201858.742 ops/s
Iteration  26: 201451.875 ops/s
Iteration  27: 201832.045 ops/s
Iteration  28: 202912.803 ops/s
Iteration  29: 200713.753 ops/s
Iteration  30: 202022.424 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomScheduler":
  202479.172 ±(99.9%) 1639.272 ops/s [Average]
  (min, avg, max) = (198623.216, 202479.172, 210482.427), stdev = 2453.585
  CI (99.9%): [200839.900, 204118.443] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomScheduler  thrpt   30  202479.172 ± 1639.272  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 688128.272 ops/s
# Warmup Iteration   2: 804517.018 ops/s
# Warmup Iteration   3: 935620.260 ops/s
# Warmup Iteration   4: 855591.088 ops/s
# Warmup Iteration   5: 937244.220 ops/s
# Warmup Iteration   6: 940127.638 ops/s
# Warmup Iteration   7: 941776.480 ops/s
# Warmup Iteration   8: 940772.895 ops/s
# Warmup Iteration   9: 935958.304 ops/s
# Warmup Iteration  10: 940334.893 ops/s
# Warmup Iteration  11: 936946.050 ops/s
# Warmup Iteration  12: 938033.930 ops/s
# Warmup Iteration  13: 938565.606 ops/s
# Warmup Iteration  14: 931079.303 ops/s
# Warmup Iteration  15: 937378.131 ops/s
# Warmup Iteration  16: 934213.837 ops/s
# Warmup Iteration  17: 987649.123 ops/s
# Warmup Iteration  18: 988647.687 ops/s
# Warmup Iteration  19: 983697.217 ops/s
# Warmup Iteration  20: 989864.735 ops/s
# Warmup Iteration  21: 985280.199 ops/s
# Warmup Iteration  22: 987007.049 ops/s
# Warmup Iteration  23: 991050.386 ops/s
# Warmup Iteration  24: 992239.205 ops/s
# Warmup Iteration  25: 989350.136 ops/s
# Warmup Iteration  26: 985332.414 ops/s
# Warmup Iteration  27: 992025.232 ops/s
# Warmup Iteration  28: 987932.473 ops/s
# Warmup Iteration  29: 990794.555 ops/s
# Warmup Iteration  30: 995244.645 ops/s
Iteration   1: 988729.602 ops/s
Iteration   2: 987204.789 ops/s
Iteration   3: 991897.515 ops/s
Iteration   4: 988772.672 ops/s
Iteration   5: 986631.473 ops/s
Iteration   6: 989710.801 ops/s
Iteration   7: 989622.393 ops/s
Iteration   8: 992799.083 ops/s
Iteration   9: 981456.837 ops/s
Iteration  10: 986954.384 ops/s
Iteration  11: 988663.623 ops/s
Iteration  12: 992245.395 ops/s
Iteration  13: 987636.754 ops/s
Iteration  14: 988206.967 ops/s
Iteration  15: 989976.922 ops/s
Iteration  16: 989779.293 ops/s
Iteration  17: 987564.739 ops/s
Iteration  18: 989812.822 ops/s
Iteration  19: 986729.228 ops/s
Iteration  20: 987199.314 ops/s
Iteration  21: 988801.355 ops/s
Iteration  22: 991206.613 ops/s
Iteration  23: 989977.378 ops/s
Iteration  24: 987953.053 ops/s
Iteration  25: 989429.031 ops/s
Iteration  26: 986881.982 ops/s
Iteration  27: 985978.521 ops/s
Iteration  28: 988183.121 ops/s
Iteration  29: 988977.220 ops/s
Iteration  30: 990124.840 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_error":
  988636.924 ±(99.9%) 1459.099 ops/s [Average]
  (min, avg, max) = (981456.837, 988636.924, 992799.083), stdev = 2183.911
  CI (99.9%): [987177.825, 990096.023] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
FlowableTakeLastOneTest._Benchmark.benchmark_error  thrpt   30  988636.924 ± 1459.099  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_badSourceObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_badSourceObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 194553.600 ops/s
# Warmup Iteration   2: 286338.127 ops/s
# Warmup Iteration   3: 275364.743 ops/s
# Warmup Iteration   4: 304811.009 ops/s
# Warmup Iteration   5: 309031.505 ops/s
# Warmup Iteration   6: 308082.637 ops/s
# Warmup Iteration   7: 308482.966 ops/s
# Warmup Iteration   8: 308872.279 ops/s
# Warmup Iteration   9: 308699.362 ops/s
# Warmup Iteration  10: 304027.351 ops/s
# Warmup Iteration  11: 307693.837 ops/s
# Warmup Iteration  12: 307577.541 ops/s
# Warmup Iteration  13: 306840.484 ops/s
# Warmup Iteration  14: 307041.984 ops/s
# Warmup Iteration  15: 307121.502 ops/s
# Warmup Iteration  16: 307035.322 ops/s
# Warmup Iteration  17: 318674.655 ops/s
# Warmup Iteration  18: 320813.009 ops/s
# Warmup Iteration  19: 319299.847 ops/s
# Warmup Iteration  20: 318863.052 ops/s
# Warmup Iteration  21: 318059.718 ops/s
# Warmup Iteration  22: 319201.540 ops/s
# Warmup Iteration  23: 318699.184 ops/s
# Warmup Iteration  24: 317942.192 ops/s
# Warmup Iteration  25: 318834.648 ops/s
# Warmup Iteration  26: 318181.524 ops/s
# Warmup Iteration  27: 320102.880 ops/s
# Warmup Iteration  28: 318359.043 ops/s
# Warmup Iteration  29: 321244.072 ops/s
# Warmup Iteration  30: 320477.011 ops/s
Iteration   1: 312591.183 ops/s
Iteration   2: 321585.700 ops/s
Iteration   3: 319589.763 ops/s
Iteration   4: 319866.782 ops/s
Iteration   5: 319439.782 ops/s
Iteration   6: 319957.939 ops/s
Iteration   7: 318679.026 ops/s
Iteration   8: 320327.159 ops/s
Iteration   9: 320240.013 ops/s
Iteration  10: 319134.886 ops/s
Iteration  11: 319831.926 ops/s
Iteration  12: 320848.948 ops/s
Iteration  13: 320809.590 ops/s
Iteration  14: 320637.920 ops/s
Iteration  15: 319111.484 ops/s
Iteration  16: 317432.667 ops/s
Iteration  17: 319294.036 ops/s
Iteration  18: 318998.344 ops/s
Iteration  19: 318495.174 ops/s
Iteration  20: 316472.499 ops/s
Iteration  21: 319919.044 ops/s
Iteration  22: 317923.389 ops/s
Iteration  23: 321579.499 ops/s
Iteration  24: 319716.459 ops/s
Iteration  25: 318708.329 ops/s
Iteration  26: 314086.184 ops/s
Iteration  27: 320584.906 ops/s
Iteration  28: 317813.821 ops/s
Iteration  29: 319643.325 ops/s
Iteration  30: 318532.129 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_badSourceObservable":
  319061.730 ±(99.9%) 1304.132 ops/s [Average]
  (min, avg, max) = (312591.183, 319061.730, 321585.700), stdev = 1951.964
  CI (99.9%): [317757.598, 320365.862] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableElementAtTest._Benchmark.benchmark_badSourceObservable  thrpt   30  319061.730 ± 1304.132  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_fusionRejectedFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_fusionRejectedFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2177945.130 ops/s
# Warmup Iteration   2: 3698514.372 ops/s
# Warmup Iteration   3: 3869727.075 ops/s
# Warmup Iteration   4: 3846752.752 ops/s
# Warmup Iteration   5: 3872949.972 ops/s
# Warmup Iteration   6: 3840679.070 ops/s
# Warmup Iteration   7: 3828288.037 ops/s
# Warmup Iteration   8: 3865739.438 ops/s
# Warmup Iteration   9: 3854416.973 ops/s
# Warmup Iteration  10: 3862642.414 ops/s
# Warmup Iteration  11: 3853863.638 ops/s
# Warmup Iteration  12: 3863440.380 ops/s
# Warmup Iteration  13: 3865706.652 ops/s
# Warmup Iteration  14: 3881938.131 ops/s
# Warmup Iteration  15: 3851912.842 ops/s
# Warmup Iteration  16: 3875279.208 ops/s
# Warmup Iteration  17: 3868945.352 ops/s
# Warmup Iteration  18: 3860233.645 ops/s
# Warmup Iteration  19: 3844324.615 ops/s
# Warmup Iteration  20: 3878998.287 ops/s
# Warmup Iteration  21: 3879601.435 ops/s
# Warmup Iteration  22: 3863576.168 ops/s
# Warmup Iteration  23: 3883725.131 ops/s
# Warmup Iteration  24: 3909193.855 ops/s
# Warmup Iteration  25: 3888399.053 ops/s
# Warmup Iteration  26: 3881293.789 ops/s
# Warmup Iteration  27: 3905254.346 ops/s
# Warmup Iteration  28: 3878896.865 ops/s
# Warmup Iteration  29: 3870301.230 ops/s
# Warmup Iteration  30: 3893874.040 ops/s
Iteration   1: 3894054.276 ops/s
Iteration   2: 3879717.030 ops/s
Iteration   3: 3863683.903 ops/s
Iteration   4: 3828958.750 ops/s
Iteration   5: 3887024.792 ops/s
Iteration   6: 3898363.025 ops/s
Iteration   7: 3900689.437 ops/s
Iteration   8: 3849774.540 ops/s
Iteration   9: 3877801.602 ops/s
Iteration  10: 3880073.689 ops/s
Iteration  11: 3851904.529 ops/s
Iteration  12: 3890921.745 ops/s
Iteration  13: 3878991.385 ops/s
Iteration  14: 3899981.763 ops/s
Iteration  15: 3898196.140 ops/s
Iteration  16: 3839502.963 ops/s
Iteration  17: 3876354.720 ops/s
Iteration  18: 3884979.457 ops/s
Iteration  19: 3869503.007 ops/s
Iteration  20: 3865006.034 ops/s
Iteration  21: 3882241.287 ops/s
Iteration  22: 3870469.661 ops/s
Iteration  23: 3878942.536 ops/s
Iteration  24: 3900562.414 ops/s
Iteration  25: 3880660.389 ops/s
Iteration  26: 3847146.694 ops/s
Iteration  27: 3886019.402 ops/s
Iteration  28: 3883542.079 ops/s
Iteration  29: 3887737.440 ops/s
Iteration  30: 3868274.408 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_fusionRejectedFlowable":
  3876702.637 ±(99.9%) 12390.833 ops/s [Average]
  (min, avg, max) = (3828958.750, 3876702.637, 3900689.437), stdev = 18546.017
  CI (99.9%): [3864311.803, 3889093.470] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_fusionRejectedFlowable  thrpt   30  3876702.637 ± 12390.833  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_basic$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_basic

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 408988.983 ops/s
# Warmup Iteration   2: 673343.429 ops/s
# Warmup Iteration   3: 651822.096 ops/s
# Warmup Iteration   4: 737712.267 ops/s
# Warmup Iteration   5: 737089.453 ops/s
# Warmup Iteration   6: 735006.117 ops/s
# Warmup Iteration   7: 730065.735 ops/s
# Warmup Iteration   8: 735199.624 ops/s
# Warmup Iteration   9: 733222.042 ops/s
# Warmup Iteration  10: 730920.427 ops/s
# Warmup Iteration  11: 732360.818 ops/s
# Warmup Iteration  12: 731044.761 ops/s
# Warmup Iteration  13: 734105.215 ops/s
# Warmup Iteration  14: 734867.987 ops/s
# Warmup Iteration  15: 729326.762 ops/s
# Warmup Iteration  16: 730280.787 ops/s
# Warmup Iteration  17: 726369.811 ops/s
# Warmup Iteration  18: 733467.617 ops/s
# Warmup Iteration  19: 731668.344 ops/s
# Warmup Iteration  20: 730635.355 ops/s
# Warmup Iteration  21: 731304.529 ops/s
# Warmup Iteration  22: 725786.633 ops/s
# Warmup Iteration  23: 733930.438 ops/s
# Warmup Iteration  24: 733469.824 ops/s
# Warmup Iteration  25: 734373.925 ops/s
# Warmup Iteration  26: 727620.327 ops/s
# Warmup Iteration  27: 724589.111 ops/s
# Warmup Iteration  28: 734686.761 ops/s
# Warmup Iteration  29: 728227.355 ops/s
# Warmup Iteration  30: 731699.357 ops/s
Iteration   1: 728002.492 ops/s
Iteration   2: 728838.303 ops/s
Iteration   3: 732950.180 ops/s
Iteration   4: 728680.211 ops/s
Iteration   5: 730097.028 ops/s
Iteration   6: 726800.963 ops/s
Iteration   7: 733282.006 ops/s
Iteration   8: 729865.889 ops/s
Iteration   9: 728752.993 ops/s
Iteration  10: 718309.938 ops/s
Iteration  11: 734662.860 ops/s
Iteration  12: 728978.438 ops/s
Iteration  13: 733761.817 ops/s
Iteration  14: 730777.094 ops/s
Iteration  15: 731198.088 ops/s
Iteration  16: 729504.062 ops/s
Iteration  17: 730496.352 ops/s
Iteration  18: 731537.027 ops/s
Iteration  19: 729407.617 ops/s
Iteration  20: 733173.422 ops/s
Iteration  21: 733918.617 ops/s
Iteration  22: 730102.095 ops/s
Iteration  23: 732786.001 ops/s
Iteration  24: 732441.406 ops/s
Iteration  25: 731950.834 ops/s
Iteration  26: 732941.960 ops/s
Iteration  27: 729288.801 ops/s
Iteration  28: 732002.295 ops/s
Iteration  29: 731027.962 ops/s
Iteration  30: 729249.261 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_basic":
  730492.867 ±(99.9%) 2029.826 ops/s [Average]
  (min, avg, max) = (718309.938, 730492.867, 734662.860), stdev = 3038.148
  CI (99.9%): [728463.041, 732522.693] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ParallelCollectorTest._Benchmark.benchmark_basic  thrpt   30  730492.867 ± 2029.826  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 635106.861 ops/s
# Warmup Iteration   2: 848728.106 ops/s
# Warmup Iteration   3: 834503.950 ops/s
# Warmup Iteration   4: 948006.729 ops/s
# Warmup Iteration   5: 951310.528 ops/s
# Warmup Iteration   6: 941578.452 ops/s
# Warmup Iteration   7: 948015.789 ops/s
# Warmup Iteration   8: 943787.231 ops/s
# Warmup Iteration   9: 941936.065 ops/s
# Warmup Iteration  10: 944639.672 ops/s
# Warmup Iteration  11: 943183.939 ops/s
# Warmup Iteration  12: 940590.867 ops/s
# Warmup Iteration  13: 939974.637 ops/s
# Warmup Iteration  14: 941346.132 ops/s
# Warmup Iteration  15: 935512.188 ops/s
# Warmup Iteration  16: 936335.150 ops/s
# Warmup Iteration  17: 918153.072 ops/s
# Warmup Iteration  18: 935020.745 ops/s
# Warmup Iteration  19: 933955.336 ops/s
# Warmup Iteration  20: 931717.832 ops/s
# Warmup Iteration  21: 942441.291 ops/s
# Warmup Iteration  22: 941300.838 ops/s
# Warmup Iteration  23: 938115.248 ops/s
# Warmup Iteration  24: 936655.518 ops/s
# Warmup Iteration  25: 937202.169 ops/s
# Warmup Iteration  26: 943397.400 ops/s
# Warmup Iteration  27: 938414.140 ops/s
# Warmup Iteration  28: 932822.789 ops/s
# Warmup Iteration  29: 937627.195 ops/s
# Warmup Iteration  30: 937328.077 ops/s
Iteration   1: 935151.813 ops/s
Iteration   2: 934759.382 ops/s
Iteration   3: 939127.095 ops/s
Iteration   4: 934651.738 ops/s
Iteration   5: 935402.243 ops/s
Iteration   6: 939063.182 ops/s
Iteration   7: 923035.257 ops/s
Iteration   8: 937272.308 ops/s
Iteration   9: 934771.376 ops/s
Iteration  10: 937791.017 ops/s
Iteration  11: 938354.924 ops/s
Iteration  12: 934720.747 ops/s
Iteration  13: 931876.924 ops/s
Iteration  14: 933708.418 ops/s
Iteration  15: 936787.695 ops/s
Iteration  16: 936744.548 ops/s
Iteration  17: 935681.629 ops/s
Iteration  18: 940946.036 ops/s
Iteration  19: 932943.878 ops/s
Iteration  20: 935178.988 ops/s
Iteration  21: 936278.408 ops/s
Iteration  22: 937140.369 ops/s
Iteration  23: 938599.261 ops/s
Iteration  24: 936310.475 ops/s
Iteration  25: 935420.667 ops/s
Iteration  26: 938374.842 ops/s
Iteration  27: 934078.730 ops/s
Iteration  28: 920543.495 ops/s
Iteration  29: 933544.542 ops/s
Iteration  30: 925428.439 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelCollectorTest._Benchmark.benchmark_empty":
  934789.614 ±(99.9%) 3023.329 ops/s [Average]
  (min, avg, max) = (920543.495, 934789.614, 940946.036), stdev = 4525.177
  CI (99.9%): [931766.285, 937812.944] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
ParallelCollectorTest._Benchmark.benchmark_empty  thrpt   30  934789.614 ± 3023.329  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3362935.290 ops/s
# Warmup Iteration   2: 5436508.693 ops/s
# Warmup Iteration   3: 6182136.634 ops/s
# Warmup Iteration   4: 6146505.506 ops/s
# Warmup Iteration   5: 6149551.618 ops/s
# Warmup Iteration   6: 6139692.217 ops/s
# Warmup Iteration   7: 6149443.776 ops/s
# Warmup Iteration   8: 6157826.664 ops/s
# Warmup Iteration   9: 6131992.884 ops/s
# Warmup Iteration  10: 6134829.863 ops/s
# Warmup Iteration  11: 6149874.333 ops/s
# Warmup Iteration  12: 6144944.458 ops/s
# Warmup Iteration  13: 6134971.912 ops/s
# Warmup Iteration  14: 6148563.045 ops/s
# Warmup Iteration  15: 6129053.826 ops/s
# Warmup Iteration  16: 6165996.638 ops/s
# Warmup Iteration  17: 6150938.032 ops/s
# Warmup Iteration  18: 6123529.791 ops/s
# Warmup Iteration  19: 6162128.034 ops/s
# Warmup Iteration  20: 6136300.819 ops/s
# Warmup Iteration  21: 6133547.805 ops/s
# Warmup Iteration  22: 6148684.549 ops/s
# Warmup Iteration  23: 6170268.672 ops/s
# Warmup Iteration  24: 6144931.730 ops/s
# Warmup Iteration  25: 6082418.551 ops/s
# Warmup Iteration  26: 6153438.776 ops/s
# Warmup Iteration  27: 6160755.457 ops/s
# Warmup Iteration  28: 6151479.586 ops/s
# Warmup Iteration  29: 6149106.057 ops/s
# Warmup Iteration  30: 6158325.239 ops/s
Iteration   1: 6144273.600 ops/s
Iteration   2: 6122219.568 ops/s
Iteration   3: 6160640.308 ops/s
Iteration   4: 6150285.550 ops/s
Iteration   5: 6155679.719 ops/s
Iteration   6: 6146054.252 ops/s
Iteration   7: 6124388.293 ops/s
Iteration   8: 6148953.012 ops/s
Iteration   9: 6058373.677 ops/s
Iteration  10: 6137257.176 ops/s
Iteration  11: 6122891.569 ops/s
Iteration  12: 6158929.224 ops/s
Iteration  13: 6169184.764 ops/s
Iteration  14: 6160300.690 ops/s
Iteration  15: 6121581.361 ops/s
Iteration  16: 6172225.314 ops/s
Iteration  17: 6123966.131 ops/s
Iteration  18: 6138212.823 ops/s
Iteration  19: 6145395.302 ops/s
Iteration  20: 6146294.605 ops/s
Iteration  21: 6148284.231 ops/s
Iteration  22: 6122093.752 ops/s
Iteration  23: 6142277.832 ops/s
Iteration  24: 6140568.058 ops/s
Iteration  25: 6133868.006 ops/s
Iteration  26: 6129703.865 ops/s
Iteration  27: 6130244.369 ops/s
Iteration  28: 6140846.328 ops/s
Iteration  29: 6144892.231 ops/s
Iteration  30: 6147042.032 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fused":
  6139564.255 ±(99.9%) 13852.452 ops/s [Average]
  (min, avg, max) = (6058373.677, 6139564.255, 6172225.314), stdev = 20733.700
  CI (99.9%): [6125711.803, 6153416.707] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MaybeFlattenStreamAsFlowableTest._Benchmark.benchmark_fused  thrpt   30  6139564.255 ± 13852.452  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_doubleRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_doubleRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5159228.078 ops/s
# Warmup Iteration   2: 6579741.440 ops/s
# Warmup Iteration   3: 7302870.953 ops/s
# Warmup Iteration   4: 7309143.308 ops/s
# Warmup Iteration   5: 7174099.078 ops/s
# Warmup Iteration   6: 7342122.890 ops/s
# Warmup Iteration   7: 7311478.753 ops/s
# Warmup Iteration   8: 7291663.419 ops/s
# Warmup Iteration   9: 7333698.815 ops/s
# Warmup Iteration  10: 7319814.742 ops/s
# Warmup Iteration  11: 7323549.413 ops/s
# Warmup Iteration  12: 7351215.898 ops/s
# Warmup Iteration  13: 7296137.031 ops/s
# Warmup Iteration  14: 7298198.906 ops/s
# Warmup Iteration  15: 7335464.131 ops/s
# Warmup Iteration  16: 7309350.704 ops/s
# Warmup Iteration  17: 7324576.961 ops/s
# Warmup Iteration  18: 7360920.080 ops/s
# Warmup Iteration  19: 7335604.641 ops/s
# Warmup Iteration  20: 7323023.618 ops/s
# Warmup Iteration  21: 7350939.578 ops/s
# Warmup Iteration  22: 7292931.052 ops/s
# Warmup Iteration  23: 7332534.752 ops/s
# Warmup Iteration  24: 7337086.469 ops/s
# Warmup Iteration  25: 7339327.685 ops/s
# Warmup Iteration  26: 7263583.119 ops/s
# Warmup Iteration  27: 7316259.117 ops/s
# Warmup Iteration  28: 7344310.171 ops/s
# Warmup Iteration  29: 7342381.483 ops/s
# Warmup Iteration  30: 7333598.918 ops/s
Iteration   1: 7364560.222 ops/s
Iteration   2: 7319699.326 ops/s
Iteration   3: 7322085.816 ops/s
Iteration   4: 7259019.996 ops/s
Iteration   5: 7367840.586 ops/s
Iteration   6: 7361686.510 ops/s
Iteration   7: 7332786.723 ops/s
Iteration   8: 7362387.753 ops/s
Iteration   9: 7351675.954 ops/s
Iteration  10: 7363875.374 ops/s
Iteration  11: 7344557.255 ops/s
Iteration  12: 7355370.946 ops/s
Iteration  13: 7330308.875 ops/s
Iteration  14: 7399468.148 ops/s
Iteration  15: 7364660.853 ops/s
Iteration  16: 7351431.180 ops/s
Iteration  17: 7311368.985 ops/s
Iteration  18: 7341447.800 ops/s
Iteration  19: 7367964.212 ops/s
Iteration  20: 7317508.634 ops/s
Iteration  21: 7364165.673 ops/s
Iteration  22: 7357064.643 ops/s
Iteration  23: 7327202.704 ops/s
Iteration  24: 7344528.327 ops/s
Iteration  25: 7327640.053 ops/s
Iteration  26: 7316395.235 ops/s
Iteration  27: 7378941.121 ops/s
Iteration  28: 7342244.603 ops/s
Iteration  29: 7345304.139 ops/s
Iteration  30: 7344318.563 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_doubleRequest":
  7344583.674 ±(99.9%) 17476.187 ops/s [Average]
  (min, avg, max) = (7259019.996, 7344583.674, 7399468.148), stdev = 26157.535
  CI (99.9%): [7327107.487, 7362059.860] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_doubleRequest  thrpt   30  7344583.674 ± 17476.187  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_refCountSynchronousTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_refCountSynchronousTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 895523.017 ops/s
# Warmup Iteration   2: 1152421.971 ops/s
# Warmup Iteration   3: 1382577.713 ops/s
# Warmup Iteration   4: 1434098.077 ops/s
# Warmup Iteration   5: 1488396.408 ops/s
# Warmup Iteration   6: 1487335.300 ops/s
# Warmup Iteration   7: 1476858.957 ops/s
# Warmup Iteration   8: 1469857.696 ops/s
# Warmup Iteration   9: 1486930.227 ops/s
# Warmup Iteration  10: 1471150.709 ops/s
# Warmup Iteration  11: 1473835.018 ops/s
# Warmup Iteration  12: 1476432.069 ops/s
# Warmup Iteration  13: 1481351.143 ops/s
# Warmup Iteration  14: 1479098.445 ops/s
# Warmup Iteration  15: 1476812.819 ops/s
# Warmup Iteration  16: 1482542.177 ops/s
# Warmup Iteration  17: 1482714.565 ops/s
# Warmup Iteration  18: 1483795.730 ops/s
# Warmup Iteration  19: 1490340.055 ops/s
# Warmup Iteration  20: 1479634.756 ops/s
# Warmup Iteration  21: 1475193.092 ops/s
# Warmup Iteration  22: 1481262.021 ops/s
# Warmup Iteration  23: 1488145.951 ops/s
# Warmup Iteration  24: 1483202.612 ops/s
# Warmup Iteration  25: 1483335.122 ops/s
# Warmup Iteration  26: 1484429.849 ops/s
# Warmup Iteration  27: 1483349.173 ops/s
# Warmup Iteration  28: 1484597.001 ops/s
# Warmup Iteration  29: 1475416.897 ops/s
# Warmup Iteration  30: 1480984.425 ops/s
Iteration   1: 1478059.456 ops/s
Iteration   2: 1478716.909 ops/s
Iteration   3: 1479505.334 ops/s
Iteration   4: 1479871.283 ops/s
Iteration   5: 1474216.470 ops/s
Iteration   6: 1479496.265 ops/s
Iteration   7: 1483653.946 ops/s
Iteration   8: 1490995.177 ops/s
Iteration   9: 1479818.003 ops/s
Iteration  10: 1476354.025 ops/s
Iteration  11: 1472437.278 ops/s
Iteration  12: 1482597.052 ops/s
Iteration  13: 1482768.909 ops/s
Iteration  14: 1483514.435 ops/s
Iteration  15: 1487005.081 ops/s
Iteration  16: 1485223.239 ops/s
Iteration  17: 1474136.812 ops/s
Iteration  18: 1474343.221 ops/s
Iteration  19: 1480683.674 ops/s
Iteration  20: 1477934.925 ops/s
Iteration  21: 1477336.571 ops/s
Iteration  22: 1475476.687 ops/s
Iteration  23: 1473548.082 ops/s
Iteration  24: 1483064.486 ops/s
Iteration  25: 1481311.968 ops/s
Iteration  26: 1478843.760 ops/s
Iteration  27: 1467208.184 ops/s
Iteration  28: 1470222.686 ops/s
Iteration  29: 1480879.810 ops/s
Iteration  30: 1488207.243 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_refCountSynchronousTake":
  1479247.699 ±(99.9%) 3531.789 ops/s [Average]
  (min, avg, max) = (1467208.184, 1479247.699, 1490995.177), stdev = 5286.215
  CI (99.9%): [1475715.910, 1482779.487] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score      Error  Units
FlowableRefCountTest._Benchmark.benchmark_refCountSynchronousTake  thrpt   30  1479247.699 ± 3531.789  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onErrorOtherOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onErrorOtherOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157926.641 ops/s
# Warmup Iteration   2: 221505.004 ops/s
# Warmup Iteration   3: 217705.550 ops/s
# Warmup Iteration   4: 242857.763 ops/s
# Warmup Iteration   5: 245715.617 ops/s
# Warmup Iteration   6: 245330.462 ops/s
# Warmup Iteration   7: 245197.781 ops/s
# Warmup Iteration   8: 245728.623 ops/s
# Warmup Iteration   9: 245190.114 ops/s
# Warmup Iteration  10: 244893.066 ops/s
# Warmup Iteration  11: 244451.270 ops/s
# Warmup Iteration  12: 243557.743 ops/s
# Warmup Iteration  13: 244185.407 ops/s
# Warmup Iteration  14: 243704.190 ops/s
# Warmup Iteration  15: 245134.194 ops/s
# Warmup Iteration  16: 243742.952 ops/s
# Warmup Iteration  17: 254786.541 ops/s
# Warmup Iteration  18: 254906.604 ops/s
# Warmup Iteration  19: 255291.717 ops/s
# Warmup Iteration  20: 250068.310 ops/s
# Warmup Iteration  21: 255097.776 ops/s
# Warmup Iteration  22: 255114.634 ops/s
# Warmup Iteration  23: 255428.645 ops/s
# Warmup Iteration  24: 254852.764 ops/s
# Warmup Iteration  25: 255013.184 ops/s
# Warmup Iteration  26: 255045.368 ops/s
# Warmup Iteration  27: 253480.121 ops/s
# Warmup Iteration  28: 256427.959 ops/s
# Warmup Iteration  29: 255095.540 ops/s
# Warmup Iteration  30: 254166.046 ops/s
Iteration   1: 254385.393 ops/s
Iteration   2: 254795.498 ops/s
Iteration   3: 254659.557 ops/s
Iteration   4: 255803.127 ops/s
Iteration   5: 253815.931 ops/s
Iteration   6: 255811.433 ops/s
Iteration   7: 256600.286 ops/s
Iteration   8: 254698.194 ops/s
Iteration   9: 255635.166 ops/s
Iteration  10: 254829.893 ops/s
Iteration  11: 255825.166 ops/s
Iteration  12: 255019.347 ops/s
Iteration  13: 254731.684 ops/s
Iteration  14: 254199.515 ops/s
Iteration  15: 254284.942 ops/s
Iteration  16: 255785.164 ops/s
Iteration  17: 254529.018 ops/s
Iteration  18: 256006.113 ops/s
Iteration  19: 252919.949 ops/s
Iteration  20: 256127.528 ops/s
Iteration  21: 255471.982 ops/s
Iteration  22: 254350.074 ops/s
Iteration  23: 255560.443 ops/s
Iteration  24: 254554.457 ops/s
Iteration  25: 253672.981 ops/s
Iteration  26: 254286.002 ops/s
Iteration  27: 254507.874 ops/s
Iteration  28: 257276.407 ops/s
Iteration  29: 255204.141 ops/s
Iteration  30: 253857.928 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onErrorOtherOverflow":
  254973.506 ±(99.9%) 630.868 ops/s [Average]
  (min, avg, max) = (252919.949, 254973.506, 257276.407), stdev = 944.254
  CI (99.9%): [254342.638, 255604.375] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score     Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_onErrorOtherOverflow  thrpt   30  254973.506 ± 630.868  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatArrayDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatArrayDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 263019.538 ops/s
# Warmup Iteration   2: 336524.595 ops/s
# Warmup Iteration   3: 371614.823 ops/s
# Warmup Iteration   4: 340372.738 ops/s
# Warmup Iteration   5: 380897.830 ops/s
# Warmup Iteration   6: 380944.096 ops/s
# Warmup Iteration   7: 379928.516 ops/s
# Warmup Iteration   8: 377214.869 ops/s
# Warmup Iteration   9: 380491.505 ops/s
# Warmup Iteration  10: 381407.286 ops/s
# Warmup Iteration  11: 381501.673 ops/s
# Warmup Iteration  12: 381238.765 ops/s
# Warmup Iteration  13: 379763.123 ops/s
# Warmup Iteration  14: 378578.334 ops/s
# Warmup Iteration  15: 380780.755 ops/s
# Warmup Iteration  16: 380364.200 ops/s
# Warmup Iteration  17: 397195.208 ops/s
# Warmup Iteration  18: 395247.174 ops/s
# Warmup Iteration  19: 394465.689 ops/s
# Warmup Iteration  20: 398102.150 ops/s
# Warmup Iteration  21: 398746.293 ops/s
# Warmup Iteration  22: 396699.863 ops/s
# Warmup Iteration  23: 396053.950 ops/s
# Warmup Iteration  24: 394925.205 ops/s
# Warmup Iteration  25: 394977.565 ops/s
# Warmup Iteration  26: 395692.701 ops/s
# Warmup Iteration  27: 397233.343 ops/s
# Warmup Iteration  28: 396042.646 ops/s
# Warmup Iteration  29: 394315.648 ops/s
# Warmup Iteration  30: 396331.942 ops/s
Iteration   1: 395745.712 ops/s
Iteration   2: 396300.531 ops/s
Iteration   3: 395080.430 ops/s
Iteration   4: 395994.493 ops/s
Iteration   5: 397377.212 ops/s
Iteration   6: 395927.072 ops/s
Iteration   7: 396707.294 ops/s
Iteration   8: 397861.196 ops/s
Iteration   9: 396584.053 ops/s
Iteration  10: 396186.551 ops/s
Iteration  11: 396997.954 ops/s
Iteration  12: 395914.873 ops/s
Iteration  13: 397955.029 ops/s
Iteration  14: 397493.596 ops/s
Iteration  15: 397425.993 ops/s
Iteration  16: 388485.429 ops/s
Iteration  17: 394087.568 ops/s
Iteration  18: 397928.434 ops/s
Iteration  19: 397020.918 ops/s
Iteration  20: 397247.338 ops/s
Iteration  21: 387900.887 ops/s
Iteration  22: 396267.497 ops/s
Iteration  23: 393281.025 ops/s
Iteration  24: 396878.065 ops/s
Iteration  25: 396138.394 ops/s
Iteration  26: 395980.015 ops/s
Iteration  27: 397798.511 ops/s
Iteration  28: 392511.994 ops/s
Iteration  29: 396036.364 ops/s
Iteration  30: 396105.107 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_concatArrayDelayError":
  395773.984 ±(99.9%) 1620.025 ops/s [Average]
  (min, avg, max) = (387900.887, 395773.984, 397955.029), stdev = 2424.778
  CI (99.9%): [394153.959, 397394.010] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_concatArrayDelayError  thrpt   30  395773.984 ± 1620.025  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_cancelMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_cancelMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3813948.933 ops/s
# Warmup Iteration   2: 5153587.216 ops/s
# Warmup Iteration   3: 5905715.288 ops/s
# Warmup Iteration   4: 5877870.050 ops/s
# Warmup Iteration   5: 5890021.282 ops/s
# Warmup Iteration   6: 5914619.842 ops/s
# Warmup Iteration   7: 5922489.085 ops/s
# Warmup Iteration   8: 5883034.751 ops/s
# Warmup Iteration   9: 5900185.170 ops/s
# Warmup Iteration  10: 5877989.214 ops/s
# Warmup Iteration  11: 5896638.675 ops/s
# Warmup Iteration  12: 5877916.658 ops/s
# Warmup Iteration  13: 5903102.294 ops/s
# Warmup Iteration  14: 5910888.731 ops/s
# Warmup Iteration  15: 5903407.009 ops/s
# Warmup Iteration  16: 5923480.343 ops/s
# Warmup Iteration  17: 5881990.136 ops/s
# Warmup Iteration  18: 5894613.174 ops/s
# Warmup Iteration  19: 5903032.985 ops/s
# Warmup Iteration  20: 5901444.487 ops/s
# Warmup Iteration  21: 5866072.988 ops/s
# Warmup Iteration  22: 5902588.987 ops/s
# Warmup Iteration  23: 5909518.107 ops/s
# Warmup Iteration  24: 5890434.538 ops/s
# Warmup Iteration  25: 5908394.851 ops/s
# Warmup Iteration  26: 5866350.778 ops/s
# Warmup Iteration  27: 5905720.021 ops/s
# Warmup Iteration  28: 5890660.815 ops/s
# Warmup Iteration  29: 5853819.668 ops/s
# Warmup Iteration  30: 5885765.764 ops/s
Iteration   1: 5899404.549 ops/s
Iteration   2: 5864302.427 ops/s
Iteration   3: 5917860.278 ops/s
Iteration   4: 5901313.519 ops/s
Iteration   5: 5864425.795 ops/s
Iteration   6: 5901276.199 ops/s
Iteration   7: 5900504.388 ops/s
Iteration   8: 5873084.828 ops/s
Iteration   9: 5871727.973 ops/s
Iteration  10: 5878961.202 ops/s
Iteration  11: 5888054.305 ops/s
Iteration  12: 5898115.386 ops/s
Iteration  13: 5874533.522 ops/s
Iteration  14: 5917100.377 ops/s
Iteration  15: 5901723.908 ops/s
Iteration  16: 5877485.666 ops/s
Iteration  17: 5891964.558 ops/s
Iteration  18: 5900371.781 ops/s
Iteration  19: 5866922.142 ops/s
Iteration  20: 5895049.677 ops/s
Iteration  21: 5915248.554 ops/s
Iteration  22: 5899525.994 ops/s
Iteration  23: 5919355.411 ops/s
Iteration  24: 5886595.158 ops/s
Iteration  25: 5889952.469 ops/s
Iteration  26: 5914445.446 ops/s
Iteration  27: 5915037.601 ops/s
Iteration  28: 5891960.891 ops/s
Iteration  29: 5864967.098 ops/s
Iteration  30: 5910979.261 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_cancelMain":
  5893075.012 ±(99.9%) 11708.406 ops/s [Average]
  (min, avg, max) = (5864302.427, 5893075.012, 5919355.411), stdev = 17524.592
  CI (99.9%): [5881366.607, 5904783.418] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
SingleFlatMapObservableTest._Benchmark.benchmark_cancelMain  thrpt   30  5893075.012 ± 11708.406  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_cancelOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_cancelOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2703467.631 ops/s
# Warmup Iteration   2: 3762271.407 ops/s
# Warmup Iteration   3: 4260633.958 ops/s
# Warmup Iteration   4: 4316496.909 ops/s
# Warmup Iteration   5: 4299901.216 ops/s
# Warmup Iteration   6: 4293573.035 ops/s
# Warmup Iteration   7: 4269515.976 ops/s
# Warmup Iteration   8: 4291620.984 ops/s
# Warmup Iteration   9: 4274499.664 ops/s
# Warmup Iteration  10: 4281815.075 ops/s
# Warmup Iteration  11: 4286246.977 ops/s
# Warmup Iteration  12: 4297248.277 ops/s
# Warmup Iteration  13: 4278028.459 ops/s
# Warmup Iteration  14: 4275959.014 ops/s
# Warmup Iteration  15: 4284139.333 ops/s
# Warmup Iteration  16: 4281486.235 ops/s
# Warmup Iteration  17: 4263345.913 ops/s
# Warmup Iteration  18: 4248957.594 ops/s
# Warmup Iteration  19: 4276463.973 ops/s
# Warmup Iteration  20: 4265486.466 ops/s
# Warmup Iteration  21: 4277824.427 ops/s
# Warmup Iteration  22: 4284614.379 ops/s
# Warmup Iteration  23: 4260079.679 ops/s
# Warmup Iteration  24: 4285101.295 ops/s
# Warmup Iteration  25: 4290857.899 ops/s
# Warmup Iteration  26: 4272691.473 ops/s
# Warmup Iteration  27: 4279030.640 ops/s
# Warmup Iteration  28: 4290547.768 ops/s
# Warmup Iteration  29: 4274588.748 ops/s
# Warmup Iteration  30: 4264464.850 ops/s
Iteration   1: 4291911.290 ops/s
Iteration   2: 4282093.469 ops/s
Iteration   3: 4277002.907 ops/s
Iteration   4: 4272855.811 ops/s
Iteration   5: 4281491.041 ops/s
Iteration   6: 4292175.811 ops/s
Iteration   7: 4280396.897 ops/s
Iteration   8: 4300711.502 ops/s
Iteration   9: 4287500.125 ops/s
Iteration  10: 4264578.333 ops/s
Iteration  11: 4290114.980 ops/s
Iteration  12: 4278731.045 ops/s
Iteration  13: 4290174.310 ops/s
Iteration  14: 4265073.926 ops/s
Iteration  15: 4278710.671 ops/s
Iteration  16: 4292967.513 ops/s
Iteration  17: 4284148.807 ops/s
Iteration  18: 4279047.711 ops/s
Iteration  19: 4267183.529 ops/s
Iteration  20: 4298402.912 ops/s
Iteration  21: 4294406.544 ops/s
Iteration  22: 4276186.410 ops/s
Iteration  23: 4266387.022 ops/s
Iteration  24: 4276777.593 ops/s
Iteration  25: 4273709.640 ops/s
Iteration  26: 4271013.306 ops/s
Iteration  27: 4285922.978 ops/s
Iteration  28: 4272771.568 ops/s
Iteration  29: 4270017.892 ops/s
Iteration  30: 4281599.381 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_cancelOther":
  4280802.164 ±(99.9%) 6691.950 ops/s [Average]
  (min, avg, max) = (4264578.333, 4280802.164, 4300711.502), stdev = 10016.197
  CI (99.9%): [4274110.214, 4287494.115] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score      Error  Units
SingleFlatMapObservableTest._Benchmark.benchmark_cancelOther  thrpt   30  4280802.164 ± 6691.950  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_mapsToEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_mapsToEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5905017.962 ops/s
# Warmup Iteration   2: 8693756.807 ops/s
# Warmup Iteration   3: 9309559.854 ops/s
# Warmup Iteration   4: 9301473.320 ops/s
# Warmup Iteration   5: 9323391.968 ops/s
# Warmup Iteration   6: 9270431.221 ops/s
# Warmup Iteration   7: 9308471.010 ops/s
# Warmup Iteration   8: 9314950.041 ops/s
# Warmup Iteration   9: 9267794.856 ops/s
# Warmup Iteration  10: 9271535.765 ops/s
# Warmup Iteration  11: 9237727.727 ops/s
# Warmup Iteration  12: 9328048.038 ops/s
# Warmup Iteration  13: 9310304.061 ops/s
# Warmup Iteration  14: 9299602.718 ops/s
# Warmup Iteration  15: 9299153.657 ops/s
# Warmup Iteration  16: 9312338.450 ops/s
# Warmup Iteration  17: 9318646.029 ops/s
# Warmup Iteration  18: 9350034.653 ops/s
# Warmup Iteration  19: 9322782.462 ops/s
# Warmup Iteration  20: 9322992.660 ops/s
# Warmup Iteration  21: 9343313.525 ops/s
# Warmup Iteration  22: 9325771.804 ops/s
# Warmup Iteration  23: 9354738.881 ops/s
# Warmup Iteration  24: 9340979.553 ops/s
# Warmup Iteration  25: 9303902.121 ops/s
# Warmup Iteration  26: 9327446.272 ops/s
# Warmup Iteration  27: 9283322.112 ops/s
# Warmup Iteration  28: 9328878.915 ops/s
# Warmup Iteration  29: 9320632.527 ops/s
# Warmup Iteration  30: 9301719.471 ops/s
Iteration   1: 9330228.900 ops/s
Iteration   2: 9336461.087 ops/s
Iteration   3: 9255597.464 ops/s
Iteration   4: 9296736.546 ops/s
Iteration   5: 9275424.012 ops/s
Iteration   6: 9311897.455 ops/s
Iteration   7: 9355795.681 ops/s
Iteration   8: 9314336.463 ops/s
Iteration   9: 9332953.696 ops/s
Iteration  10: 9344248.733 ops/s
Iteration  11: 9313955.631 ops/s
Iteration  12: 9310292.553 ops/s
Iteration  13: 9345394.153 ops/s
Iteration  14: 9300322.816 ops/s
Iteration  15: 9340981.915 ops/s
Iteration  16: 9340569.403 ops/s
Iteration  17: 9316404.415 ops/s
Iteration  18: 9342466.784 ops/s
Iteration  19: 9182259.658 ops/s
Iteration  20: 9372097.387 ops/s
Iteration  21: 9314253.473 ops/s
Iteration  22: 9332485.917 ops/s
Iteration  23: 9319545.672 ops/s
Iteration  24: 9319680.823 ops/s
Iteration  25: 9293963.461 ops/s
Iteration  26: 9316544.262 ops/s
Iteration  27: 9294512.772 ops/s
Iteration  28: 9331017.763 ops/s
Iteration  29: 9296921.687 ops/s
Iteration  30: 9346599.957 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_mapsToEmpty":
  9316131.685 ±(99.9%) 23493.309 ops/s [Average]
  (min, avg, max) = (9182259.658, 9316131.685, 9372097.387), stdev = 35163.681
  CI (99.9%): [9292638.376, 9339624.993] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
SingleFlatMapMaybeTest._Benchmark.benchmark_mapsToEmpty  thrpt   30  9316131.685 ± 23493.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_mapsToEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_mapsToEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6412701.050 ops/s
# Warmup Iteration   2: 9747450.000 ops/s
# Warmup Iteration   3: 10518079.496 ops/s
# Warmup Iteration   4: 10531719.242 ops/s
# Warmup Iteration   5: 10526284.160 ops/s
# Warmup Iteration   6: 10535313.847 ops/s
# Warmup Iteration   7: 10556633.353 ops/s
# Warmup Iteration   8: 10492182.687 ops/s
# Warmup Iteration   9: 10575293.238 ops/s
# Warmup Iteration  10: 10564310.159 ops/s
# Warmup Iteration  11: 10440115.254 ops/s
# Warmup Iteration  12: 10561437.767 ops/s
# Warmup Iteration  13: 10542512.106 ops/s
# Warmup Iteration  14: 10582550.113 ops/s
# Warmup Iteration  15: 10517473.764 ops/s
# Warmup Iteration  16: 10530675.389 ops/s
# Warmup Iteration  17: 10575507.024 ops/s
# Warmup Iteration  18: 10525539.089 ops/s
# Warmup Iteration  19: 10537996.725 ops/s
# Warmup Iteration  20: 10540793.607 ops/s
# Warmup Iteration  21: 10487644.763 ops/s
# Warmup Iteration  22: 10509017.743 ops/s
# Warmup Iteration  23: 10570919.831 ops/s
# Warmup Iteration  24: 10519173.094 ops/s
# Warmup Iteration  25: 10555446.547 ops/s
# Warmup Iteration  26: 10593357.491 ops/s
# Warmup Iteration  27: 10517630.802 ops/s
# Warmup Iteration  28: 10565192.304 ops/s
# Warmup Iteration  29: 10539794.545 ops/s
# Warmup Iteration  30: 10535330.427 ops/s
Iteration   1: 10553226.817 ops/s
Iteration   2: 10598829.963 ops/s
Iteration   3: 10463794.675 ops/s
Iteration   4: 10558939.691 ops/s
Iteration   5: 10545588.854 ops/s
Iteration   6: 10572764.765 ops/s
Iteration   7: 10554362.950 ops/s
Iteration   8: 10557925.942 ops/s
Iteration   9: 10529617.072 ops/s
Iteration  10: 10555440.613 ops/s
Iteration  11: 10533583.839 ops/s
Iteration  12: 10512231.752 ops/s
Iteration  13: 10571321.657 ops/s
Iteration  14: 10563167.977 ops/s
Iteration  15: 10506910.738 ops/s
Iteration  16: 10523553.025 ops/s
Iteration  17: 10530063.753 ops/s
Iteration  18: 10571516.284 ops/s
Iteration  19: 10528299.243 ops/s
Iteration  20: 10571474.615 ops/s
Iteration  21: 10570686.514 ops/s
Iteration  22: 10533370.456 ops/s
Iteration  23: 10516984.819 ops/s
Iteration  24: 10572550.456 ops/s
Iteration  25: 10535103.538 ops/s
Iteration  26: 10559994.863 ops/s
Iteration  27: 10531611.654 ops/s
Iteration  28: 10568687.777 ops/s
Iteration  29: 10530366.107 ops/s
Iteration  30: 10511379.132 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_mapsToEmpty":
  10544444.985 ±(99.9%) 18362.818 ops/s [Average]
  (min, avg, max) = (10463794.675, 10544444.985, 10598829.963), stdev = 27484.604
  CI (99.9%): [10526082.167, 10562807.803] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score       Error  Units
SingleConcatMapMaybeTest._Benchmark.benchmark_mapsToEmpty  thrpt   30  10544444.985 ± 18362.818  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 618300.307 ops/s
# Warmup Iteration   2: 745232.069 ops/s
# Warmup Iteration   3: 767946.269 ops/s
# Warmup Iteration   4: 826599.884 ops/s
# Warmup Iteration   5: 827804.115 ops/s
# Warmup Iteration   6: 825002.461 ops/s
# Warmup Iteration   7: 818802.326 ops/s
# Warmup Iteration   8: 824518.778 ops/s
# Warmup Iteration   9: 825026.814 ops/s
# Warmup Iteration  10: 823181.737 ops/s
# Warmup Iteration  11: 826100.464 ops/s
# Warmup Iteration  12: 820705.686 ops/s
# Warmup Iteration  13: 821129.771 ops/s
# Warmup Iteration  14: 820596.723 ops/s
# Warmup Iteration  15: 820239.895 ops/s
# Warmup Iteration  16: 815346.966 ops/s
# Warmup Iteration  17: 866437.232 ops/s
# Warmup Iteration  18: 866222.552 ops/s
# Warmup Iteration  19: 866574.878 ops/s
# Warmup Iteration  20: 863414.077 ops/s
# Warmup Iteration  21: 864072.531 ops/s
# Warmup Iteration  22: 868705.528 ops/s
# Warmup Iteration  23: 866499.973 ops/s
# Warmup Iteration  24: 852876.817 ops/s
# Warmup Iteration  25: 865205.899 ops/s
# Warmup Iteration  26: 867109.597 ops/s
# Warmup Iteration  27: 862574.376 ops/s
# Warmup Iteration  28: 870583.626 ops/s
# Warmup Iteration  29: 865328.386 ops/s
# Warmup Iteration  30: 863612.241 ops/s
Iteration   1: 865601.509 ops/s
Iteration   2: 865544.184 ops/s
Iteration   3: 867918.798 ops/s
Iteration   4: 864868.629 ops/s
Iteration   5: 868789.219 ops/s
Iteration   6: 868409.258 ops/s
Iteration   7: 869297.164 ops/s
Iteration   8: 863385.612 ops/s
Iteration   9: 870028.930 ops/s
Iteration  10: 869041.683 ops/s
Iteration  11: 864714.008 ops/s
Iteration  12: 867740.807 ops/s
Iteration  13: 864765.367 ops/s
Iteration  14: 870976.858 ops/s
Iteration  15: 868981.848 ops/s
Iteration  16: 865698.700 ops/s
Iteration  17: 868507.440 ops/s
Iteration  18: 866592.337 ops/s
Iteration  19: 866570.879 ops/s
Iteration  20: 865534.387 ops/s
Iteration  21: 867594.836 ops/s
Iteration  22: 869210.800 ops/s
Iteration  23: 866808.010 ops/s
Iteration  24: 866714.182 ops/s
Iteration  25: 859971.841 ops/s
Iteration  26: 867673.424 ops/s
Iteration  27: 863647.504 ops/s
Iteration  28: 867058.432 ops/s
Iteration  29: 868347.709 ops/s
Iteration  30: 862737.070 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageObservable":
  866757.714 ±(99.9%) 1608.012 ops/s [Average]
  (min, avg, max) = (859971.841, 866757.714, 870976.858), stdev = 2406.797
  CI (99.9%): [865149.702, 868365.726] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt       Score      Error  Units
ObservableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessageObservable  thrpt   30  866757.714 ± 1608.012  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 676848.986 ops/s
# Warmup Iteration   2: 828998.767 ops/s
# Warmup Iteration   3: 889290.291 ops/s
# Warmup Iteration   4: 864359.537 ops/s
# Warmup Iteration   5: 923001.193 ops/s
# Warmup Iteration   6: 934279.688 ops/s
# Warmup Iteration   7: 932888.015 ops/s
# Warmup Iteration   8: 941156.383 ops/s
# Warmup Iteration   9: 935061.541 ops/s
# Warmup Iteration  10: 935442.630 ops/s
# Warmup Iteration  11: 936698.627 ops/s
# Warmup Iteration  12: 937836.555 ops/s
# Warmup Iteration  13: 932405.254 ops/s
# Warmup Iteration  14: 934474.803 ops/s
# Warmup Iteration  15: 936856.763 ops/s
# Warmup Iteration  16: 929526.134 ops/s
# Warmup Iteration  17: 983494.225 ops/s
# Warmup Iteration  18: 984916.959 ops/s
# Warmup Iteration  19: 988672.655 ops/s
# Warmup Iteration  20: 982882.027 ops/s
# Warmup Iteration  21: 983683.767 ops/s
# Warmup Iteration  22: 988342.814 ops/s
# Warmup Iteration  23: 989238.501 ops/s
# Warmup Iteration  24: 988147.812 ops/s
# Warmup Iteration  25: 990320.078 ops/s
# Warmup Iteration  26: 984006.853 ops/s
# Warmup Iteration  27: 988610.074 ops/s
# Warmup Iteration  28: 981589.753 ops/s
# Warmup Iteration  29: 983892.269 ops/s
# Warmup Iteration  30: 984400.704 ops/s
Iteration   1: 985383.922 ops/s
Iteration   2: 989556.224 ops/s
Iteration   3: 982950.241 ops/s
Iteration   4: 989062.416 ops/s
Iteration   5: 983916.410 ops/s
Iteration   6: 982979.382 ops/s
Iteration   7: 984554.423 ops/s
Iteration   8: 983205.219 ops/s
Iteration   9: 981644.065 ops/s
Iteration  10: 984641.673 ops/s
Iteration  11: 982732.345 ops/s
Iteration  12: 982739.453 ops/s
Iteration  13: 984575.420 ops/s
Iteration  14: 987107.638 ops/s
Iteration  15: 983030.250 ops/s
Iteration  16: 989522.269 ops/s
Iteration  17: 986144.818 ops/s
Iteration  18: 983420.736 ops/s
Iteration  19: 985021.497 ops/s
Iteration  20: 980937.933 ops/s
Iteration  21: 989906.821 ops/s
Iteration  22: 981910.250 ops/s
Iteration  23: 984053.937 ops/s
Iteration  24: 985900.343 ops/s
Iteration  25: 984418.854 ops/s
Iteration  26: 987962.871 ops/s
Iteration  27: 983843.326 ops/s
Iteration  28: 986840.082 ops/s
Iteration  29: 985668.657 ops/s
Iteration  30: 988589.417 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage":
  985074.030 ±(99.9%) 1680.736 ops/s [Average]
  (min, avg, max) = (980937.933, 985074.030, 989906.821), stdev = 2515.646
  CI (99.9%): [983393.294, 986754.765] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
ObservableAllTest._Benchmark.benchmark_predicateThrowsExceptionAndValueInCauseMessage  thrpt   30  985074.030 ± 1680.736  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1373593.922 ops/s
# Warmup Iteration   2: 2208169.295 ops/s
# Warmup Iteration   3: 2392492.955 ops/s
# Warmup Iteration   4: 2380671.486 ops/s
# Warmup Iteration   5: 2379448.991 ops/s
# Warmup Iteration   6: 2366762.770 ops/s
# Warmup Iteration   7: 2371826.416 ops/s
# Warmup Iteration   8: 2386632.107 ops/s
# Warmup Iteration   9: 2396757.329 ops/s
# Warmup Iteration  10: 2381312.089 ops/s
# Warmup Iteration  11: 2400349.037 ops/s
# Warmup Iteration  12: 2376859.188 ops/s
# Warmup Iteration  13: 2382445.679 ops/s
# Warmup Iteration  14: 2382736.864 ops/s
# Warmup Iteration  15: 2405938.568 ops/s
# Warmup Iteration  16: 2391259.986 ops/s
# Warmup Iteration  17: 2402150.279 ops/s
# Warmup Iteration  18: 2405995.274 ops/s
# Warmup Iteration  19: 2413270.762 ops/s
# Warmup Iteration  20: 2379542.509 ops/s
# Warmup Iteration  21: 2394401.301 ops/s
# Warmup Iteration  22: 2396518.969 ops/s
# Warmup Iteration  23: 2383601.418 ops/s
# Warmup Iteration  24: 2409456.902 ops/s
# Warmup Iteration  25: 2378954.723 ops/s
# Warmup Iteration  26: 2417034.685 ops/s
# Warmup Iteration  27: 2390773.232 ops/s
# Warmup Iteration  28: 2391614.226 ops/s
# Warmup Iteration  29: 2406559.950 ops/s
# Warmup Iteration  30: 2417571.298 ops/s
Iteration   1: 2397327.224 ops/s
Iteration   2: 2401398.040 ops/s
Iteration   3: 2398852.884 ops/s
Iteration   4: 2408755.788 ops/s
Iteration   5: 2387834.743 ops/s
Iteration   6: 2405267.986 ops/s
Iteration   7: 2405874.973 ops/s
Iteration   8: 2413539.435 ops/s
Iteration   9: 2414313.601 ops/s
Iteration  10: 2412351.020 ops/s
Iteration  11: 2411001.669 ops/s
Iteration  12: 2412534.810 ops/s
Iteration  13: 2402754.500 ops/s
Iteration  14: 2409788.942 ops/s
Iteration  15: 2409455.223 ops/s
Iteration  16: 2393992.669 ops/s
Iteration  17: 2406980.525 ops/s
Iteration  18: 2389135.847 ops/s
Iteration  19: 2408782.276 ops/s
Iteration  20: 2382555.454 ops/s
Iteration  21: 2373160.592 ops/s
Iteration  22: 2408251.504 ops/s
Iteration  23: 2394514.801 ops/s
Iteration  24: 2410670.059 ops/s
Iteration  25: 2411932.202 ops/s
Iteration  26: 2408427.476 ops/s
Iteration  27: 2394198.652 ops/s
Iteration  28: 2393438.343 ops/s
Iteration  29: 2405799.022 ops/s
Iteration  30: 2393867.413 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_disposed":
  2402225.256 ±(99.9%) 6838.822 ops/s [Average]
  (min, avg, max) = (2373160.592, 2402225.256, 2414313.601), stdev = 10236.028
  CI (99.9%): [2395386.434, 2409064.078] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score      Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_disposed  thrpt   30  2402225.256 ± 6838.822  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_errorOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_errorOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 561818.038 ops/s
# Warmup Iteration   2: 677964.988 ops/s
# Warmup Iteration   3: 772311.400 ops/s
# Warmup Iteration   4: 778619.300 ops/s
# Warmup Iteration   5: 780174.279 ops/s
# Warmup Iteration   6: 778128.344 ops/s
# Warmup Iteration   7: 780873.002 ops/s
# Warmup Iteration   8: 778120.181 ops/s
# Warmup Iteration   9: 777397.543 ops/s
# Warmup Iteration  10: 776996.448 ops/s
# Warmup Iteration  11: 776422.470 ops/s
# Warmup Iteration  12: 774790.565 ops/s
# Warmup Iteration  13: 776455.196 ops/s
# Warmup Iteration  14: 775415.418 ops/s
# Warmup Iteration  15: 772334.359 ops/s
# Warmup Iteration  16: 774290.291 ops/s
# Warmup Iteration  17: 811144.389 ops/s
# Warmup Iteration  18: 810520.874 ops/s
# Warmup Iteration  19: 814044.511 ops/s
# Warmup Iteration  20: 809895.810 ops/s
# Warmup Iteration  21: 807547.234 ops/s
# Warmup Iteration  22: 812192.331 ops/s
# Warmup Iteration  23: 816019.560 ops/s
# Warmup Iteration  24: 810247.357 ops/s
# Warmup Iteration  25: 811531.658 ops/s
# Warmup Iteration  26: 809952.081 ops/s
# Warmup Iteration  27: 805756.548 ops/s
# Warmup Iteration  28: 811118.726 ops/s
# Warmup Iteration  29: 812804.082 ops/s
# Warmup Iteration  30: 811208.874 ops/s
Iteration   1: 806175.821 ops/s
Iteration   2: 812136.623 ops/s
Iteration   3: 811138.236 ops/s
Iteration   4: 811935.057 ops/s
Iteration   5: 810447.635 ops/s
Iteration   6: 810066.746 ops/s
Iteration   7: 813795.785 ops/s
Iteration   8: 811729.536 ops/s
Iteration   9: 811137.295 ops/s
Iteration  10: 810340.088 ops/s
Iteration  11: 808718.707 ops/s
Iteration  12: 815152.910 ops/s
Iteration  13: 809101.823 ops/s
Iteration  14: 811972.549 ops/s
Iteration  15: 810468.644 ops/s
Iteration  16: 812311.883 ops/s
Iteration  17: 812201.484 ops/s
Iteration  18: 812835.149 ops/s
Iteration  19: 810926.577 ops/s
Iteration  20: 812235.098 ops/s
Iteration  21: 812704.687 ops/s
Iteration  22: 809113.512 ops/s
Iteration  23: 812034.575 ops/s
Iteration  24: 811178.624 ops/s
Iteration  25: 808478.956 ops/s
Iteration  26: 809637.445 ops/s
Iteration  27: 808599.106 ops/s
Iteration  28: 815022.262 ops/s
Iteration  29: 813400.234 ops/s
Iteration  30: 809813.985 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_errorOther":
  811160.368 ±(99.9%) 1329.880 ops/s [Average]
  (min, avg, max) = (806175.821, 811160.368, 815152.910), stdev = 1990.503
  CI (99.9%): [809830.487, 812490.248] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
SingleFlatMapObservableTest._Benchmark.benchmark_errorOther  thrpt   30  811160.368 ± 1329.880  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_errorMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_errorMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 614872.021 ops/s
# Warmup Iteration   2: 756141.252 ops/s
# Warmup Iteration   3: 871505.980 ops/s
# Warmup Iteration   4: 809522.982 ops/s
# Warmup Iteration   5: 884101.822 ops/s
# Warmup Iteration   6: 886437.584 ops/s
# Warmup Iteration   7: 884586.524 ops/s
# Warmup Iteration   8: 882555.916 ops/s
# Warmup Iteration   9: 884038.594 ops/s
# Warmup Iteration  10: 882304.343 ops/s
# Warmup Iteration  11: 880898.473 ops/s
# Warmup Iteration  12: 880588.793 ops/s
# Warmup Iteration  13: 878452.338 ops/s
# Warmup Iteration  14: 881205.050 ops/s
# Warmup Iteration  15: 882138.890 ops/s
# Warmup Iteration  16: 879609.201 ops/s
# Warmup Iteration  17: 918321.524 ops/s
# Warmup Iteration  18: 919137.801 ops/s
# Warmup Iteration  19: 918777.523 ops/s
# Warmup Iteration  20: 918302.589 ops/s
# Warmup Iteration  21: 918626.816 ops/s
# Warmup Iteration  22: 922691.230 ops/s
# Warmup Iteration  23: 917911.330 ops/s
# Warmup Iteration  24: 921398.770 ops/s
# Warmup Iteration  25: 915351.440 ops/s
# Warmup Iteration  26: 918415.592 ops/s
# Warmup Iteration  27: 919151.011 ops/s
# Warmup Iteration  28: 919646.016 ops/s
# Warmup Iteration  29: 923449.771 ops/s
# Warmup Iteration  30: 920124.029 ops/s
Iteration   1: 916344.177 ops/s
Iteration   2: 917244.914 ops/s
Iteration   3: 919935.195 ops/s
Iteration   4: 917633.321 ops/s
Iteration   5: 896718.592 ops/s
Iteration   6: 917759.654 ops/s
Iteration   7: 919353.859 ops/s
Iteration   8: 917173.953 ops/s
Iteration   9: 918657.967 ops/s
Iteration  10: 918573.732 ops/s
Iteration  11: 921135.725 ops/s
Iteration  12: 917155.346 ops/s
Iteration  13: 920968.377 ops/s
Iteration  14: 920303.698 ops/s
Iteration  15: 919026.426 ops/s
Iteration  16: 915451.235 ops/s
Iteration  17: 922620.427 ops/s
Iteration  18: 922060.676 ops/s
Iteration  19: 914565.086 ops/s
Iteration  20: 917806.407 ops/s
Iteration  21: 914841.006 ops/s
Iteration  22: 921757.599 ops/s
Iteration  23: 921563.679 ops/s
Iteration  24: 916588.740 ops/s
Iteration  25: 917598.050 ops/s
Iteration  26: 918078.238 ops/s
Iteration  27: 924993.252 ops/s
Iteration  28: 917944.616 ops/s
Iteration  29: 916763.723 ops/s
Iteration  30: 919152.790 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.SingleFlatMapObservableTest._Benchmark.benchmark_errorMain":
  917992.349 ±(99.9%) 3128.897 ops/s [Average]
  (min, avg, max) = (896718.592, 917992.349, 924993.252), stdev = 4683.186
  CI (99.9%): [914863.452, 921121.246] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
SingleFlatMapObservableTest._Benchmark.benchmark_errorMain  thrpt   30  917992.349 ± 3128.897  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_mapsToError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_mapsToError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 618537.157 ops/s
# Warmup Iteration   2: 748267.905 ops/s
# Warmup Iteration   3: 745054.461 ops/s
# Warmup Iteration   4: 792565.214 ops/s
# Warmup Iteration   5: 796550.261 ops/s
# Warmup Iteration   6: 800978.732 ops/s
# Warmup Iteration   7: 800339.077 ops/s
# Warmup Iteration   8: 794122.278 ops/s
# Warmup Iteration   9: 799016.206 ops/s
# Warmup Iteration  10: 786801.690 ops/s
# Warmup Iteration  11: 794009.449 ops/s
# Warmup Iteration  12: 795292.992 ops/s
# Warmup Iteration  13: 793060.763 ops/s
# Warmup Iteration  14: 792637.980 ops/s
# Warmup Iteration  15: 796636.782 ops/s
# Warmup Iteration  16: 798050.071 ops/s
# Warmup Iteration  17: 836543.300 ops/s
# Warmup Iteration  18: 838678.481 ops/s
# Warmup Iteration  19: 836440.610 ops/s
# Warmup Iteration  20: 837590.626 ops/s
# Warmup Iteration  21: 835759.999 ops/s
# Warmup Iteration  22: 836416.822 ops/s
# Warmup Iteration  23: 833565.758 ops/s
# Warmup Iteration  24: 833184.186 ops/s
# Warmup Iteration  25: 836424.288 ops/s
# Warmup Iteration  26: 832251.146 ops/s
# Warmup Iteration  27: 835949.942 ops/s
# Warmup Iteration  28: 834188.743 ops/s
# Warmup Iteration  29: 834075.209 ops/s
# Warmup Iteration  30: 829843.577 ops/s
Iteration   1: 838021.899 ops/s
Iteration   2: 835086.630 ops/s
Iteration   3: 834466.000 ops/s
Iteration   4: 835874.343 ops/s
Iteration   5: 833487.488 ops/s
Iteration   6: 836099.996 ops/s
Iteration   7: 834503.996 ops/s
Iteration   8: 832472.490 ops/s
Iteration   9: 837283.747 ops/s
Iteration  10: 835979.592 ops/s
Iteration  11: 832920.766 ops/s
Iteration  12: 835661.537 ops/s
Iteration  13: 837039.360 ops/s
Iteration  14: 838609.441 ops/s
Iteration  15: 842243.464 ops/s
Iteration  16: 837320.562 ops/s
Iteration  17: 839400.636 ops/s
Iteration  18: 835627.091 ops/s
Iteration  19: 833057.230 ops/s
Iteration  20: 838664.370 ops/s
Iteration  21: 836871.242 ops/s
Iteration  22: 836245.796 ops/s
Iteration  23: 836527.088 ops/s
Iteration  24: 837213.298 ops/s
Iteration  25: 834820.399 ops/s
Iteration  26: 837773.373 ops/s
Iteration  27: 836436.108 ops/s
Iteration  28: 833084.809 ops/s
Iteration  29: 835732.299 ops/s
Iteration  30: 832356.534 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapMaybeTest._Benchmark.benchmark_mapsToError":
  836029.386 ±(99.9%) 1492.560 ops/s [Average]
  (min, avg, max) = (832356.534, 836029.386, 842243.464), stdev = 2233.994
  CI (99.9%): [834536.826, 837521.946] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
SingleFlatMapMaybeTest._Benchmark.benchmark_mapsToError  thrpt   30  836029.386 ± 1492.560  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_mapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_mapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 645754.019 ops/s
# Warmup Iteration   2: 769143.142 ops/s
# Warmup Iteration   3: 779738.025 ops/s
# Warmup Iteration   4: 829702.583 ops/s
# Warmup Iteration   5: 832279.340 ops/s
# Warmup Iteration   6: 829995.612 ops/s
# Warmup Iteration   7: 826543.800 ops/s
# Warmup Iteration   8: 826284.798 ops/s
# Warmup Iteration   9: 828841.973 ops/s
# Warmup Iteration  10: 828064.614 ops/s
# Warmup Iteration  11: 826831.564 ops/s
# Warmup Iteration  12: 826286.349 ops/s
# Warmup Iteration  13: 824003.513 ops/s
# Warmup Iteration  14: 823143.462 ops/s
# Warmup Iteration  15: 821717.518 ops/s
# Warmup Iteration  16: 826371.712 ops/s
# Warmup Iteration  17: 868877.417 ops/s
# Warmup Iteration  18: 864268.602 ops/s
# Warmup Iteration  19: 864879.358 ops/s
# Warmup Iteration  20: 868365.550 ops/s
# Warmup Iteration  21: 867674.873 ops/s
# Warmup Iteration  22: 867557.130 ops/s
# Warmup Iteration  23: 864549.752 ops/s
# Warmup Iteration  24: 868223.219 ops/s
# Warmup Iteration  25: 868641.397 ops/s
# Warmup Iteration  26: 853541.211 ops/s
# Warmup Iteration  27: 868074.295 ops/s
# Warmup Iteration  28: 868610.283 ops/s
# Warmup Iteration  29: 870112.833 ops/s
# Warmup Iteration  30: 861863.270 ops/s
Iteration   1: 870600.820 ops/s
Iteration   2: 863960.744 ops/s
Iteration   3: 863582.398 ops/s
Iteration   4: 863042.458 ops/s
Iteration   5: 865817.643 ops/s
Iteration   6: 866783.214 ops/s
Iteration   7: 867000.033 ops/s
Iteration   8: 861410.747 ops/s
Iteration   9: 870401.201 ops/s
Iteration  10: 866782.861 ops/s
Iteration  11: 866899.955 ops/s
Iteration  12: 862956.797 ops/s
Iteration  13: 871912.207 ops/s
Iteration  14: 869809.561 ops/s
Iteration  15: 855967.907 ops/s
Iteration  16: 868110.466 ops/s
Iteration  17: 869084.249 ops/s
Iteration  18: 868798.323 ops/s
Iteration  19: 867942.328 ops/s
Iteration  20: 865155.093 ops/s
Iteration  21: 868845.688 ops/s
Iteration  22: 865167.222 ops/s
Iteration  23: 865874.607 ops/s
Iteration  24: 865753.242 ops/s
Iteration  25: 867848.680 ops/s
Iteration  26: 865130.409 ops/s
Iteration  27: 864546.649 ops/s
Iteration  28: 867017.695 ops/s
Iteration  29: 867594.278 ops/s
Iteration  30: 865627.614 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_mapperReturnsNull":
  866314.170 ±(99.9%) 2094.404 ops/s [Average]
  (min, avg, max) = (855967.907, 866314.170, 871912.207), stdev = 3134.805
  CI (99.9%): [864219.766, 868408.574] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SingleFlatMapTest._Benchmark.benchmark_mapperReturnsNull  thrpt   30  866314.170 ± 2094.404  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_mapsToError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_mapsToError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 658983.053 ops/s
# Warmup Iteration   2: 759859.124 ops/s
# Warmup Iteration   3: 806930.202 ops/s
# Warmup Iteration   4: 842567.616 ops/s
# Warmup Iteration   5: 844676.944 ops/s
# Warmup Iteration   6: 846432.218 ops/s
# Warmup Iteration   7: 842723.912 ops/s
# Warmup Iteration   8: 846323.174 ops/s
# Warmup Iteration   9: 843996.494 ops/s
# Warmup Iteration  10: 836270.271 ops/s
# Warmup Iteration  11: 840837.887 ops/s
# Warmup Iteration  12: 838914.910 ops/s
# Warmup Iteration  13: 840328.391 ops/s
# Warmup Iteration  14: 839583.939 ops/s
# Warmup Iteration  15: 836563.717 ops/s
# Warmup Iteration  16: 823316.085 ops/s
# Warmup Iteration  17: 881828.953 ops/s
# Warmup Iteration  18: 881657.326 ops/s
# Warmup Iteration  19: 881874.118 ops/s
# Warmup Iteration  20: 885915.049 ops/s
# Warmup Iteration  21: 883524.948 ops/s
# Warmup Iteration  22: 879929.292 ops/s
# Warmup Iteration  23: 884406.213 ops/s
# Warmup Iteration  24: 883041.381 ops/s
# Warmup Iteration  25: 881253.929 ops/s
# Warmup Iteration  26: 880540.629 ops/s
# Warmup Iteration  27: 883752.921 ops/s
# Warmup Iteration  28: 882493.995 ops/s
# Warmup Iteration  29: 885040.452 ops/s
# Warmup Iteration  30: 884193.540 ops/s
Iteration   1: 882160.451 ops/s
Iteration   2: 884527.944 ops/s
Iteration   3: 884467.099 ops/s
Iteration   4: 883513.093 ops/s
Iteration   5: 880039.655 ops/s
Iteration   6: 881202.326 ops/s
Iteration   7: 883499.072 ops/s
Iteration   8: 885368.254 ops/s
Iteration   9: 882558.816 ops/s
Iteration  10: 883822.687 ops/s
Iteration  11: 881605.538 ops/s
Iteration  12: 881613.666 ops/s
Iteration  13: 884443.192 ops/s
Iteration  14: 886993.118 ops/s
Iteration  15: 884796.971 ops/s
Iteration  16: 882626.860 ops/s
Iteration  17: 881258.318 ops/s
Iteration  18: 886629.556 ops/s
Iteration  19: 883984.289 ops/s
Iteration  20: 882303.148 ops/s
Iteration  21: 878418.130 ops/s
Iteration  22: 885769.217 ops/s
Iteration  23: 882668.754 ops/s
Iteration  24: 883648.811 ops/s
Iteration  25: 883355.607 ops/s
Iteration  26: 885291.364 ops/s
Iteration  27: 882235.312 ops/s
Iteration  28: 881705.502 ops/s
Iteration  29: 888153.284 ops/s
Iteration  30: 881693.890 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleConcatMapMaybeTest._Benchmark.benchmark_mapsToError":
  883345.131 ±(99.9%) 1407.049 ops/s [Average]
  (min, avg, max) = (878418.130, 883345.131, 888153.284), stdev = 2106.006
  CI (99.9%): [881938.081, 884752.180] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
SingleConcatMapMaybeTest._Benchmark.benchmark_mapsToError  thrpt   30  883345.131 ± 1407.049  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 685279.081 ops/s
# Warmup Iteration   2: 779446.112 ops/s
# Warmup Iteration   3: 840301.969 ops/s
# Warmup Iteration   4: 867118.489 ops/s
# Warmup Iteration   5: 868191.356 ops/s
# Warmup Iteration   6: 868404.448 ops/s
# Warmup Iteration   7: 869683.210 ops/s
# Warmup Iteration   8: 863779.321 ops/s
# Warmup Iteration   9: 868416.142 ops/s
# Warmup Iteration  10: 865057.006 ops/s
# Warmup Iteration  11: 862851.335 ops/s
# Warmup Iteration  12: 862089.024 ops/s
# Warmup Iteration  13: 861309.900 ops/s
# Warmup Iteration  14: 861099.594 ops/s
# Warmup Iteration  15: 859693.444 ops/s
# Warmup Iteration  16: 862850.563 ops/s
# Warmup Iteration  17: 913059.536 ops/s
# Warmup Iteration  18: 911222.069 ops/s
# Warmup Iteration  19: 910821.430 ops/s
# Warmup Iteration  20: 909324.048 ops/s
# Warmup Iteration  21: 900682.971 ops/s
# Warmup Iteration  22: 909624.682 ops/s
# Warmup Iteration  23: 908258.126 ops/s
# Warmup Iteration  24: 906129.414 ops/s
# Warmup Iteration  25: 911272.878 ops/s
# Warmup Iteration  26: 913210.320 ops/s
# Warmup Iteration  27: 911588.499 ops/s
# Warmup Iteration  28: 909116.766 ops/s
# Warmup Iteration  29: 899740.654 ops/s
# Warmup Iteration  30: 908873.628 ops/s
Iteration   1: 909857.047 ops/s
Iteration   2: 908892.715 ops/s
Iteration   3: 908491.572 ops/s
Iteration   4: 913203.992 ops/s
Iteration   5: 911867.824 ops/s
Iteration   6: 909728.905 ops/s
Iteration   7: 907333.647 ops/s
Iteration   8: 907326.730 ops/s
Iteration   9: 911918.521 ops/s
Iteration  10: 908857.350 ops/s
Iteration  11: 913400.827 ops/s
Iteration  12: 913043.308 ops/s
Iteration  13: 910769.017 ops/s
Iteration  14: 908849.583 ops/s
Iteration  15: 904332.853 ops/s
Iteration  16: 910562.724 ops/s
Iteration  17: 914368.644 ops/s
Iteration  18: 909691.219 ops/s
Iteration  19: 909748.013 ops/s
Iteration  20: 910603.681 ops/s
Iteration  21: 910705.303 ops/s
Iteration  22: 912178.648 ops/s
Iteration  23: 915632.420 ops/s
Iteration  24: 912754.592 ops/s
Iteration  25: 912642.847 ops/s
Iteration  26: 912938.121 ops/s
Iteration  27: 905611.265 ops/s
Iteration  28: 914194.117 ops/s
Iteration  29: 912178.339 ops/s
Iteration  30: 909864.739 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapTest._Benchmark.benchmark_mapperThrows":
  910718.285 ±(99.9%) 1744.370 ops/s [Average]
  (min, avg, max) = (904332.853, 910718.285, 915632.420), stdev = 2610.891
  CI (99.9%): [908973.916, 912462.655] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
SingleFlatMapTest._Benchmark.benchmark_mapperThrows  thrpt   30  910718.285 ± 1744.370  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 702827.098 ops/s
# Warmup Iteration   2: 829562.040 ops/s
# Warmup Iteration   3: 897725.162 ops/s
# Warmup Iteration   4: 870870.019 ops/s
# Warmup Iteration   5: 940064.780 ops/s
# Warmup Iteration   6: 903378.129 ops/s
# Warmup Iteration   7: 927166.524 ops/s
# Warmup Iteration   8: 936281.863 ops/s
# Warmup Iteration   9: 938272.949 ops/s
# Warmup Iteration  10: 940697.662 ops/s
# Warmup Iteration  11: 939917.261 ops/s
# Warmup Iteration  12: 937895.408 ops/s
# Warmup Iteration  13: 937020.788 ops/s
# Warmup Iteration  14: 932840.400 ops/s
# Warmup Iteration  15: 937839.029 ops/s
# Warmup Iteration  16: 934730.460 ops/s
# Warmup Iteration  17: 987149.366 ops/s
# Warmup Iteration  18: 988538.279 ops/s
# Warmup Iteration  19: 989221.149 ops/s
# Warmup Iteration  20: 990258.729 ops/s
# Warmup Iteration  21: 986014.972 ops/s
# Warmup Iteration  22: 987279.465 ops/s
# Warmup Iteration  23: 991271.898 ops/s
# Warmup Iteration  24: 988740.733 ops/s
# Warmup Iteration  25: 987232.618 ops/s
# Warmup Iteration  26: 984955.892 ops/s
# Warmup Iteration  27: 988990.413 ops/s
# Warmup Iteration  28: 984507.409 ops/s
# Warmup Iteration  29: 988981.287 ops/s
# Warmup Iteration  30: 989471.118 ops/s
Iteration   1: 992257.582 ops/s
Iteration   2: 986647.758 ops/s
Iteration   3: 992574.004 ops/s
Iteration   4: 993679.545 ops/s
Iteration   5: 992540.829 ops/s
Iteration   6: 985499.189 ops/s
Iteration   7: 986306.337 ops/s
Iteration   8: 990625.304 ops/s
Iteration   9: 981852.285 ops/s
Iteration  10: 989984.524 ops/s
Iteration  11: 989857.509 ops/s
Iteration  12: 989252.749 ops/s
Iteration  13: 988961.773 ops/s
Iteration  14: 985603.200 ops/s
Iteration  15: 990962.179 ops/s
Iteration  16: 987786.254 ops/s
Iteration  17: 986444.701 ops/s
Iteration  18: 988683.416 ops/s
Iteration  19: 989426.507 ops/s
Iteration  20: 989975.410 ops/s
Iteration  21: 981956.307 ops/s
Iteration  22: 993083.183 ops/s
Iteration  23: 989957.450 ops/s
Iteration  24: 982961.843 ops/s
Iteration  25: 987850.012 ops/s
Iteration  26: 988061.090 ops/s
Iteration  27: 987693.184 ops/s
Iteration  28: 991613.171 ops/s
Iteration  29: 987608.344 ops/s
Iteration  30: 984258.508 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withObservableError":
  988465.472 ±(99.9%) 2124.531 ops/s [Average]
  (min, avg, max) = (981852.285, 988465.472, 993679.545), stdev = 3179.899
  CI (99.9%): [986340.940, 990590.003] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
SingleDelayTest._Benchmark.benchmark_withObservableError  thrpt   30  988465.472 ± 2124.531  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_secondCompletesBeforeFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_secondCompletesBeforeFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1175069.989 ops/s
# Warmup Iteration   2: 1677421.580 ops/s
# Warmup Iteration   3: 1886580.451 ops/s
# Warmup Iteration   4: 1872639.999 ops/s
# Warmup Iteration   5: 1883530.083 ops/s
# Warmup Iteration   6: 1896629.118 ops/s
# Warmup Iteration   7: 1876148.425 ops/s
# Warmup Iteration   8: 1881039.042 ops/s
# Warmup Iteration   9: 1889726.278 ops/s
# Warmup Iteration  10: 1886857.959 ops/s
# Warmup Iteration  11: 1889314.297 ops/s
# Warmup Iteration  12: 1857791.719 ops/s
# Warmup Iteration  13: 1891334.317 ops/s
# Warmup Iteration  14: 1868414.443 ops/s
# Warmup Iteration  15: 1870391.116 ops/s
# Warmup Iteration  16: 1892869.089 ops/s
# Warmup Iteration  17: 1880497.232 ops/s
# Warmup Iteration  18: 1884567.132 ops/s
# Warmup Iteration  19: 1886249.300 ops/s
# Warmup Iteration  20: 1891431.360 ops/s
# Warmup Iteration  21: 1871803.901 ops/s
# Warmup Iteration  22: 1879830.863 ops/s
# Warmup Iteration  23: 1881569.839 ops/s
# Warmup Iteration  24: 1878738.276 ops/s
# Warmup Iteration  25: 1863900.486 ops/s
# Warmup Iteration  26: 1878244.207 ops/s
# Warmup Iteration  27: 1898142.219 ops/s
# Warmup Iteration  28: 1889350.807 ops/s
# Warmup Iteration  29: 1879101.663 ops/s
# Warmup Iteration  30: 1869762.511 ops/s
Iteration   1: 1886429.871 ops/s
Iteration   2: 1875893.867 ops/s
Iteration   3: 1901878.958 ops/s
Iteration   4: 1882580.855 ops/s
Iteration   5: 1891660.296 ops/s
Iteration   6: 1887356.450 ops/s
Iteration   7: 1873402.910 ops/s
Iteration   8: 1884940.322 ops/s
Iteration   9: 1878543.848 ops/s
Iteration  10: 1889336.023 ops/s
Iteration  11: 1879087.990 ops/s
Iteration  12: 1869735.334 ops/s
Iteration  13: 1875403.002 ops/s
Iteration  14: 1872788.776 ops/s
Iteration  15: 1878313.952 ops/s
Iteration  16: 1897290.242 ops/s
Iteration  17: 1878614.493 ops/s
Iteration  18: 1883723.236 ops/s
Iteration  19: 1883094.095 ops/s
Iteration  20: 1881348.430 ops/s
Iteration  21: 1877504.647 ops/s
Iteration  22: 1884280.622 ops/s
Iteration  23: 1886131.846 ops/s
Iteration  24: 1869799.619 ops/s
Iteration  25: 1879467.333 ops/s
Iteration  26: 1855463.545 ops/s
Iteration  27: 1873504.142 ops/s
Iteration  28: 1878048.022 ops/s
Iteration  29: 1894328.103 ops/s
Iteration  30: 1898325.958 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_secondCompletesBeforeFirst":
  1881609.226 ±(99.9%) 6419.250 ops/s [Average]
  (min, avg, max) = (1855463.545, 1881609.226, 1901878.958), stdev = 9608.032
  CI (99.9%): [1875189.976, 1888028.476] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score      Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_secondCompletesBeforeFirst  thrpt   30  1881609.226 ± 6419.250  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4581220.172 ops/s
# Warmup Iteration   2: 7122218.350 ops/s
# Warmup Iteration   3: 7813619.364 ops/s
# Warmup Iteration   4: 7782470.105 ops/s
# Warmup Iteration   5: 7815290.000 ops/s
# Warmup Iteration   6: 7792903.697 ops/s
# Warmup Iteration   7: 7800365.114 ops/s
# Warmup Iteration   8: 7808244.412 ops/s
# Warmup Iteration   9: 7819870.760 ops/s
# Warmup Iteration  10: 7806208.296 ops/s
# Warmup Iteration  11: 7814746.852 ops/s
# Warmup Iteration  12: 7817711.598 ops/s
# Warmup Iteration  13: 7818962.146 ops/s
# Warmup Iteration  14: 7825811.671 ops/s
# Warmup Iteration  15: 7796725.977 ops/s
# Warmup Iteration  16: 7820017.727 ops/s
# Warmup Iteration  17: 7767724.994 ops/s
# Warmup Iteration  18: 7776453.203 ops/s
# Warmup Iteration  19: 7821563.802 ops/s
# Warmup Iteration  20: 7784063.198 ops/s
# Warmup Iteration  21: 7849393.773 ops/s
# Warmup Iteration  22: 7791777.578 ops/s
# Warmup Iteration  23: 7829027.273 ops/s
# Warmup Iteration  24: 7826891.686 ops/s
# Warmup Iteration  25: 7798264.426 ops/s
# Warmup Iteration  26: 7814875.957 ops/s
# Warmup Iteration  27: 7852263.635 ops/s
# Warmup Iteration  28: 7816237.862 ops/s
# Warmup Iteration  29: 7814008.861 ops/s
# Warmup Iteration  30: 7825748.286 ops/s
Iteration   1: 7834567.166 ops/s
Iteration   2: 7731589.931 ops/s
Iteration   3: 7826784.682 ops/s
Iteration   4: 7791263.927 ops/s
Iteration   5: 7801126.665 ops/s
Iteration   6: 7861155.772 ops/s
Iteration   7: 7847549.890 ops/s
Iteration   8: 7815397.095 ops/s
Iteration   9: 7845933.497 ops/s
Iteration  10: 7817409.808 ops/s
Iteration  11: 7832649.922 ops/s
Iteration  12: 7811436.107 ops/s
Iteration  13: 7817264.747 ops/s
Iteration  14: 7836160.915 ops/s
Iteration  15: 7825078.714 ops/s
Iteration  16: 7831224.897 ops/s
Iteration  17: 7832907.706 ops/s
Iteration  18: 7818231.589 ops/s
Iteration  19: 7810503.927 ops/s
Iteration  20: 7831688.804 ops/s
Iteration  21: 7850486.030 ops/s
Iteration  22: 7828401.628 ops/s
Iteration  23: 7836664.100 ops/s
Iteration  24: 7842637.566 ops/s
Iteration  25: 7790572.536 ops/s
Iteration  26: 7800923.876 ops/s
Iteration  27: 7838400.085 ops/s
Iteration  28: 7833779.990 ops/s
Iteration  29: 7816376.670 ops/s
Iteration  30: 7825268.483 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_normal":
  7822781.224 ±(99.9%) 16089.053 ops/s [Average]
  (min, avg, max) = (7731589.931, 7822781.224, 7861155.772), stdev = 24081.339
  CI (99.9%): [7806692.171, 7838870.277] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
SingleOfTypeTest._Benchmark.benchmark_normal  thrpt   30  7822781.224 ± 16089.053  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_normalDowncast$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_normalDowncast

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4814173.506 ops/s
# Warmup Iteration   2: 7388752.915 ops/s
# Warmup Iteration   3: 8021685.962 ops/s
# Warmup Iteration   4: 7994984.171 ops/s
# Warmup Iteration   5: 8036651.836 ops/s
# Warmup Iteration   6: 7973709.951 ops/s
# Warmup Iteration   7: 8005767.548 ops/s
# Warmup Iteration   8: 7966194.238 ops/s
# Warmup Iteration   9: 8040273.661 ops/s
# Warmup Iteration  10: 8004179.493 ops/s
# Warmup Iteration  11: 8008697.701 ops/s
# Warmup Iteration  12: 7975803.778 ops/s
# Warmup Iteration  13: 8002394.247 ops/s
# Warmup Iteration  14: 7972190.630 ops/s
# Warmup Iteration  15: 7998544.801 ops/s
# Warmup Iteration  16: 7962335.134 ops/s
# Warmup Iteration  17: 8014680.427 ops/s
# Warmup Iteration  18: 8064007.827 ops/s
# Warmup Iteration  19: 8013682.362 ops/s
# Warmup Iteration  20: 8059936.774 ops/s
# Warmup Iteration  21: 8035087.688 ops/s
# Warmup Iteration  22: 8010883.299 ops/s
# Warmup Iteration  23: 7917813.008 ops/s
# Warmup Iteration  24: 8043393.037 ops/s
# Warmup Iteration  25: 8064000.036 ops/s
# Warmup Iteration  26: 8046252.441 ops/s
# Warmup Iteration  27: 8039812.935 ops/s
# Warmup Iteration  28: 8048424.174 ops/s
# Warmup Iteration  29: 8028074.095 ops/s
# Warmup Iteration  30: 8093448.305 ops/s
Iteration   1: 8000460.347 ops/s
Iteration   2: 8059006.087 ops/s
Iteration   3: 8047203.188 ops/s
Iteration   4: 8038804.463 ops/s
Iteration   5: 8026901.614 ops/s
Iteration   6: 8051512.110 ops/s
Iteration   7: 8061342.154 ops/s
Iteration   8: 8040586.400 ops/s
Iteration   9: 8031440.108 ops/s
Iteration  10: 8035110.744 ops/s
Iteration  11: 8064606.394 ops/s
Iteration  12: 8044604.643 ops/s
Iteration  13: 8038297.714 ops/s
Iteration  14: 8037189.674 ops/s
Iteration  15: 8086033.229 ops/s
Iteration  16: 8059136.035 ops/s
Iteration  17: 8039674.907 ops/s
Iteration  18: 8046714.667 ops/s
Iteration  19: 8062075.155 ops/s
Iteration  20: 7932364.752 ops/s
Iteration  21: 8035359.720 ops/s
Iteration  22: 8055898.149 ops/s
Iteration  23: 8072145.472 ops/s
Iteration  24: 8017344.749 ops/s
Iteration  25: 8069396.463 ops/s
Iteration  26: 8041102.625 ops/s
Iteration  27: 8011496.054 ops/s
Iteration  28: 8061889.545 ops/s
Iteration  29: 8041919.839 ops/s
Iteration  30: 8036935.194 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_normalDowncast":
  8041551.740 ±(99.9%) 18399.503 ops/s [Average]
  (min, avg, max) = (7932364.752, 8041551.740, 8086033.229), stdev = 27539.512
  CI (99.9%): [8023152.237, 8059951.243] (assumes normal distribution)


# Run complete. Total time: 00:01:00

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
SingleOfTypeTest._Benchmark.benchmark_normalDowncast  thrpt   30  8041551.740 ± 18399.503  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 175575.008 ops/s
# Warmup Iteration   2: 251390.110 ops/s
# Warmup Iteration   3: 276741.091 ops/s
# Warmup Iteration   4: 277507.417 ops/s
# Warmup Iteration   5: 282833.057 ops/s
# Warmup Iteration   6: 284183.917 ops/s
# Warmup Iteration   7: 282337.141 ops/s
# Warmup Iteration   8: 280796.550 ops/s
# Warmup Iteration   9: 281458.243 ops/s
# Warmup Iteration  10: 282294.990 ops/s
# Warmup Iteration  11: 279519.768 ops/s
# Warmup Iteration  12: 280605.830 ops/s
# Warmup Iteration  13: 282611.587 ops/s
# Warmup Iteration  14: 282023.756 ops/s
# Warmup Iteration  15: 281958.075 ops/s
# Warmup Iteration  16: 282266.145 ops/s
# Warmup Iteration  17: 235784.180 ops/s
# Warmup Iteration  18: 212346.766 ops/s
# Warmup Iteration  19: 210341.848 ops/s
# Warmup Iteration  20: 216665.131 ops/s
# Warmup Iteration  21: 208755.225 ops/s
# Warmup Iteration  22: 208255.193 ops/s
# Warmup Iteration  23: 213674.980 ops/s
# Warmup Iteration  24: 208574.569 ops/s
# Warmup Iteration  25: 217889.184 ops/s
# Warmup Iteration  26: 220628.769 ops/s
# Warmup Iteration  27: 220474.997 ops/s
# Warmup Iteration  28: 207984.301 ops/s
# Warmup Iteration  29: 217329.474 ops/s
# Warmup Iteration  30: 207985.288 ops/s
Iteration   1: 206045.646 ops/s
Iteration   2: 216656.510 ops/s
Iteration   3: 210540.184 ops/s
Iteration   4: 217102.147 ops/s
Iteration   5: 211692.835 ops/s
Iteration   6: 212196.285 ops/s
Iteration   7: 212521.616 ops/s
Iteration   8: 211749.824 ops/s
Iteration   9: 216758.168 ops/s
Iteration  10: 218918.894 ops/s
Iteration  11: 206284.831 ops/s
Iteration  12: 206397.116 ops/s
Iteration  13: 222734.346 ops/s
Iteration  14: 204336.456 ops/s
Iteration  15: 208653.802 ops/s
Iteration  16: 216670.358 ops/s
Iteration  17: 209843.013 ops/s
Iteration  18: 216935.038 ops/s
Iteration  19: 212977.026 ops/s
Iteration  20: 217876.242 ops/s
Iteration  21: 211592.965 ops/s
Iteration  22: 213483.029 ops/s
Iteration  23: 212372.482 ops/s
Iteration  24: 219530.812 ops/s
Iteration  25: 211402.420 ops/s
Iteration  26: 212355.287 ops/s
Iteration  27: 221476.078 ops/s
Iteration  28: 211025.041 ops/s
Iteration  29: 205409.895 ops/s
Iteration  30: 219324.367 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_undeliverableUponCancel":
  213162.090 ±(99.9%) 3279.651 ops/s [Average]
  (min, avg, max) = (204336.456, 213162.090, 222734.346), stdev = 4908.828
  CI (99.9%): [209882.439, 216441.741] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  213162.090 ± 3279.651  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapValueNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapValueNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 186684.445 ops/s
# Warmup Iteration   2: 488682.658 ops/s
# Warmup Iteration   3: 555439.832 ops/s
# Warmup Iteration   4: 514586.040 ops/s
# Warmup Iteration   5: 562734.508 ops/s
# Warmup Iteration   6: 510606.961 ops/s
# Warmup Iteration   7: 574969.364 ops/s
# Warmup Iteration   8: 574838.523 ops/s
# Warmup Iteration   9: 598486.032 ops/s
# Warmup Iteration  10: 562849.780 ops/s
# Warmup Iteration  11: 569163.856 ops/s
# Warmup Iteration  12: 588512.054 ops/s
# Warmup Iteration  13: 562366.757 ops/s
# Warmup Iteration  14: 599097.839 ops/s
# Warmup Iteration  15: 602706.216 ops/s
# Warmup Iteration  16: 563759.286 ops/s
# Warmup Iteration  17: 607859.836 ops/s
# Warmup Iteration  18: 611605.142 ops/s
# Warmup Iteration  19: 604126.675 ops/s
# Warmup Iteration  20: 614399.838 ops/s
# Warmup Iteration  21: 606489.978 ops/s
# Warmup Iteration  22: 617445.534 ops/s
# Warmup Iteration  23: 587617.166 ops/s
# Warmup Iteration  24: 599785.982 ops/s
# Warmup Iteration  25: 638606.277 ops/s
# Warmup Iteration  26: 585385.334 ops/s
# Warmup Iteration  27: 613873.523 ops/s
# Warmup Iteration  28: 599886.851 ops/s
# Warmup Iteration  29: 606089.873 ops/s
# Warmup Iteration  30: 620607.045 ops/s
Iteration   1: 603865.518 ops/s
Iteration   2: 606358.633 ops/s
Iteration   3: 631291.196 ops/s
Iteration   4: 609414.840 ops/s
Iteration   5: 592652.851 ops/s
Iteration   6: 612216.976 ops/s
Iteration   7: 607618.746 ops/s
Iteration   8: 627429.829 ops/s
Iteration   9: 625090.216 ops/s
Iteration  10: 581214.947 ops/s
Iteration  11: 604333.044 ops/s
Iteration  12: 604193.670 ops/s
Iteration  13: 625111.528 ops/s
Iteration  14: 592393.853 ops/s
Iteration  15: 607134.753 ops/s
Iteration  16: 626400.033 ops/s
Iteration  17: 617940.280 ops/s
Iteration  18: 614939.818 ops/s
Iteration  19: 612869.089 ops/s
Iteration  20: 617013.457 ops/s
Iteration  21: 614864.770 ops/s
Iteration  22: 604220.285 ops/s
Iteration  23: 611639.003 ops/s
Iteration  24: 612700.869 ops/s
Iteration  25: 598478.422 ops/s
Iteration  26: 595718.607 ops/s
Iteration  27: 627202.431 ops/s
Iteration  28: 491334.351 ops/s
Iteration  29: 618116.023 ops/s
Iteration  30: 584573.863 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapValueNull":
  605944.397 ±(99.9%) 16738.490 ops/s [Average]
  (min, avg, max) = (491334.351, 605944.397, 631291.196), stdev = 25053.386
  CI (99.9%): [589205.907, 622682.887] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
SingleMapTest._Benchmark.benchmark_mapValueNull  thrpt   30  605944.397 ± 16738.490  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapValueErrorThrown$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapValueErrorThrown

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 232855.401 ops/s
# Warmup Iteration   2: 508180.964 ops/s
# Warmup Iteration   3: 588100.694 ops/s
# Warmup Iteration   4: 589840.645 ops/s
# Warmup Iteration   5: 569384.996 ops/s
# Warmup Iteration   6: 589231.099 ops/s
# Warmup Iteration   7: 598871.108 ops/s
# Warmup Iteration   8: 559791.238 ops/s
# Warmup Iteration   9: 590141.757 ops/s
# Warmup Iteration  10: 557168.994 ops/s
# Warmup Iteration  11: 574604.158 ops/s
# Warmup Iteration  12: 594965.030 ops/s
# Warmup Iteration  13: 570964.776 ops/s
# Warmup Iteration  14: 583201.945 ops/s
# Warmup Iteration  15: 597032.185 ops/s
# Warmup Iteration  16: 571915.852 ops/s
# Warmup Iteration  17: 624922.020 ops/s
# Warmup Iteration  18: 600669.038 ops/s
# Warmup Iteration  19: 605641.893 ops/s
# Warmup Iteration  20: 619586.002 ops/s
# Warmup Iteration  21: 643888.339 ops/s
# Warmup Iteration  22: 580493.802 ops/s
# Warmup Iteration  23: 643976.957 ops/s
# Warmup Iteration  24: 618672.236 ops/s
# Warmup Iteration  25: 594016.937 ops/s
# Warmup Iteration  26: 630446.803 ops/s
# Warmup Iteration  27: 614386.252 ops/s
# Warmup Iteration  28: 601334.096 ops/s
# Warmup Iteration  29: 610186.342 ops/s
# Warmup Iteration  30: 588588.935 ops/s
Iteration   1: 620595.754 ops/s
Iteration   2: 597801.565 ops/s
Iteration   3: 611995.154 ops/s
Iteration   4: 611748.015 ops/s
Iteration   5: 604564.724 ops/s
Iteration   6: 629744.580 ops/s
Iteration   7: 605965.340 ops/s
Iteration   8: 620370.515 ops/s
Iteration   9: 588457.273 ops/s
Iteration  10: 629675.587 ops/s
Iteration  11: 600680.343 ops/s
Iteration  12: 598804.746 ops/s
Iteration  13: 616822.638 ops/s
Iteration  14: 602239.628 ops/s
Iteration  15: 586297.387 ops/s
Iteration  16: 620858.388 ops/s
Iteration  17: 591452.107 ops/s
Iteration  18: 643177.155 ops/s
Iteration  19: 620913.827 ops/s
Iteration  20: 617126.596 ops/s
Iteration  21: 615711.571 ops/s
Iteration  22: 608270.392 ops/s
Iteration  23: 628022.035 ops/s
Iteration  24: 607071.812 ops/s
Iteration  25: 605415.744 ops/s
Iteration  26: 634699.781 ops/s
Iteration  27: 596582.481 ops/s
Iteration  28: 647543.299 ops/s
Iteration  29: 596793.253 ops/s
Iteration  30: 620784.453 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMapTest._Benchmark.benchmark_mapValueErrorThrown":
  612672.871 ±(99.9%) 10336.872 ops/s [Average]
  (min, avg, max) = (586297.387, 612672.871, 647543.299), stdev = 15471.744
  CI (99.9%): [602336.000, 623009.743] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
SingleMapTest._Benchmark.benchmark_mapValueErrorThrown  thrpt   30  612672.871 ± 10336.872  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_normalBehavior$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_normalBehavior

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9912.485 ops/s
# Warmup Iteration   2: 27138.911 ops/s
# Warmup Iteration   3: 61982.399 ops/s
# Warmup Iteration   4: 114004.446 ops/s
# Warmup Iteration   5: 119647.837 ops/s
# Warmup Iteration   6: 106691.293 ops/s
# Warmup Iteration   7: 108506.950 ops/s
# Warmup Iteration   8: 125958.277 ops/s
# Warmup Iteration   9: 119603.323 ops/s
# Warmup Iteration  10: 121875.121 ops/s
# Warmup Iteration  11: 122585.788 ops/s
# Warmup Iteration  12: 127995.848 ops/s
# Warmup Iteration  13: 117710.737 ops/s
# Warmup Iteration  14: 127223.943 ops/s
# Warmup Iteration  15: 117934.525 ops/s
# Warmup Iteration  16: 120219.589 ops/s
# Warmup Iteration  17: 125633.036 ops/s
# Warmup Iteration  18: 120902.855 ops/s
# Warmup Iteration  19: 121207.714 ops/s
# Warmup Iteration  20: 118532.936 ops/s
# Warmup Iteration  21: 121549.562 ops/s
# Warmup Iteration  22: 124005.440 ops/s
# Warmup Iteration  23: 121940.169 ops/s
# Warmup Iteration  24: 119545.177 ops/s
# Warmup Iteration  25: 128425.817 ops/s
# Warmup Iteration  26: 119437.981 ops/s
# Warmup Iteration  27: 120371.270 ops/s
# Warmup Iteration  28: 128843.885 ops/s
# Warmup Iteration  29: 118198.563 ops/s
# Warmup Iteration  30: 125284.086 ops/s
Iteration   1: 119857.048 ops/s
Iteration   2: 121166.681 ops/s
Iteration   3: 127986.866 ops/s
Iteration   4: 118563.457 ops/s
Iteration   5: 123214.419 ops/s
Iteration   6: 121482.100 ops/s
Iteration   7: 124893.549 ops/s
Iteration   8: 116212.181 ops/s
Iteration   9: 124237.855 ops/s
Iteration  10: 120757.359 ops/s
Iteration  11: 125658.410 ops/s
Iteration  12: 124749.733 ops/s
Iteration  13: 120610.679 ops/s
Iteration  14: 124166.102 ops/s
Iteration  15: 121136.633 ops/s
Iteration  16: 120472.770 ops/s
Iteration  17: 124028.895 ops/s
Iteration  18: 123950.598 ops/s
Iteration  19: 122080.390 ops/s
Iteration  20: 128856.098 ops/s
Iteration  21: 118803.251 ops/s
Iteration  22: 124442.674 ops/s
Iteration  23: 95868.368 ops/s
Iteration  24: 122847.001 ops/s
Iteration  25: 123162.203 ops/s
Iteration  26: 120983.857 ops/s
Iteration  27: 122097.015 ops/s
Iteration  28: 121679.944 ops/s
Iteration  29: 123966.821 ops/s
Iteration  30: 123159.454 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_normalBehavior":
  121703.080 ±(99.9%) 3708.526 ops/s [Average]
  (min, avg, max) = (95868.368, 121703.080, 128856.098), stdev = 5550.747
  CI (99.9%): [117994.555, 125411.606] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableGroupByTest._Benchmark.benchmark_normalBehavior  thrpt   30  121703.080 ± 3708.526  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38533.463 ops/s
# Warmup Iteration   2: 223943.342 ops/s
# Warmup Iteration   3: 537030.378 ops/s
# Warmup Iteration   4: 849129.696 ops/s
# Warmup Iteration   5: 818958.575 ops/s
# Warmup Iteration   6: 802255.417 ops/s
# Warmup Iteration   7: 905212.594 ops/s
# Warmup Iteration   8: 843841.617 ops/s
# Warmup Iteration   9: 860206.253 ops/s
# Warmup Iteration  10: 856814.599 ops/s
# Warmup Iteration  11: 891733.953 ops/s
# Warmup Iteration  12: 891754.292 ops/s
# Warmup Iteration  13: 881714.391 ops/s
# Warmup Iteration  14: 912507.677 ops/s
# Warmup Iteration  15: 881129.939 ops/s
# Warmup Iteration  16: 905899.594 ops/s
# Warmup Iteration  17: 883528.222 ops/s
# Warmup Iteration  18: 847087.404 ops/s
# Warmup Iteration  19: 870721.387 ops/s
# Warmup Iteration  20: 867093.142 ops/s
# Warmup Iteration  21: 897031.082 ops/s
# Warmup Iteration  22: 928798.302 ops/s
# Warmup Iteration  23: 863937.173 ops/s
# Warmup Iteration  24: 889133.182 ops/s
# Warmup Iteration  25: 930995.518 ops/s
# Warmup Iteration  26: 862376.601 ops/s
# Warmup Iteration  27: 900892.470 ops/s
# Warmup Iteration  28: 848633.759 ops/s
# Warmup Iteration  29: 897902.845 ops/s
# Warmup Iteration  30: 870322.023 ops/s
Iteration   1: 843467.639 ops/s
Iteration   2: 901815.616 ops/s
Iteration   3: 868208.903 ops/s
Iteration   4: 904813.659 ops/s
Iteration   5: 926997.960 ops/s
Iteration   6: 880997.208 ops/s
Iteration   7: 896593.920 ops/s
Iteration   8: 889035.510 ops/s
Iteration   9: 891105.473 ops/s
Iteration  10: 910987.568 ops/s
Iteration  11: 863640.003 ops/s
Iteration  12: 911028.443 ops/s
Iteration  13: 870618.942 ops/s
Iteration  14: 880577.040 ops/s
Iteration  15: 903691.857 ops/s
Iteration  16: 874079.313 ops/s
Iteration  17: 876227.873 ops/s
Iteration  18: 913277.078 ops/s
Iteration  19: 870963.516 ops/s
Iteration  20: 905264.169 ops/s
Iteration  21: 854973.647 ops/s
Iteration  22: 880918.792 ops/s
Iteration  23: 904425.643 ops/s
Iteration  24: 871839.281 ops/s
Iteration  25: 877518.567 ops/s
Iteration  26: 939462.204 ops/s
Iteration  27: 862014.034 ops/s
Iteration  28: 896696.147 ops/s
Iteration  29: 868940.358 ops/s
Iteration  30: 917069.773 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream":
  888575.005 ±(99.9%) 15040.798 ops/s [Average]
  (min, avg, max) = (843467.639, 888575.005, 939462.204), stdev = 22512.361
  CI (99.9%): [873534.206, 903615.803] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score       Error  Units
ObservableWindowWithObservableTest._Benchmark.benchmark_cancellingWindowCancelsUpstream  thrpt   30  888575.005 ± 15040.798  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_upstreamDisposedWhenOutputsDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_upstreamDisposedWhenOutputsDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30360.734 ops/s
# Warmup Iteration   2: 103280.102 ops/s
# Warmup Iteration   3: 175366.165 ops/s
# Warmup Iteration   4: 385861.624 ops/s
# Warmup Iteration   5: 641884.639 ops/s
# Warmup Iteration   6: 813333.670 ops/s
# Warmup Iteration   7: 866136.417 ops/s
# Warmup Iteration   8: 787725.817 ops/s
# Warmup Iteration   9: 867211.670 ops/s
# Warmup Iteration  10: 830491.212 ops/s
# Warmup Iteration  11: 811882.047 ops/s
# Warmup Iteration  12: 787223.853 ops/s
# Warmup Iteration  13: 867137.998 ops/s
# Warmup Iteration  14: 827903.687 ops/s
# Warmup Iteration  15: 801887.058 ops/s
# Warmup Iteration  16: 857786.626 ops/s
# Warmup Iteration  17: 821862.978 ops/s
# Warmup Iteration  18: 800629.140 ops/s
# Warmup Iteration  19: 842126.106 ops/s
# Warmup Iteration  20: 795297.395 ops/s
# Warmup Iteration  21: 824761.941 ops/s
# Warmup Iteration  22: 827273.963 ops/s
# Warmup Iteration  23: 787791.047 ops/s
# Warmup Iteration  24: 841213.986 ops/s
# Warmup Iteration  25: 844453.663 ops/s
# Warmup Iteration  26: 798007.213 ops/s
# Warmup Iteration  27: 853004.549 ops/s
# Warmup Iteration  28: 853129.686 ops/s
# Warmup Iteration  29: 802087.260 ops/s
# Warmup Iteration  30: 851780.282 ops/s
Iteration   1: 800376.176 ops/s
Iteration   2: 850320.300 ops/s
Iteration   3: 790072.116 ops/s
Iteration   4: 806632.703 ops/s
Iteration   5: 850498.520 ops/s
Iteration   6: 802556.765 ops/s
Iteration   7: 810939.966 ops/s
Iteration   8: 812235.205 ops/s
Iteration   9: 835519.978 ops/s
Iteration  10: 844734.577 ops/s
Iteration  11: 800484.796 ops/s
Iteration  12: 838679.994 ops/s
Iteration  13: 808145.292 ops/s
Iteration  14: 832490.740 ops/s
Iteration  15: 802438.284 ops/s
Iteration  16: 857447.455 ops/s
Iteration  17: 788602.227 ops/s
Iteration  18: 685704.676 ops/s
Iteration  19: 840525.013 ops/s
Iteration  20: 793686.475 ops/s
Iteration  21: 836012.311 ops/s
Iteration  22: 795493.841 ops/s
Iteration  23: 781995.883 ops/s
Iteration  24: 852049.156 ops/s
Iteration  25: 815911.740 ops/s
Iteration  26: 833228.216 ops/s
Iteration  27: 827949.402 ops/s
Iteration  28: 796468.712 ops/s
Iteration  29: 830625.394 ops/s
Iteration  30: 838419.004 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_upstreamDisposedWhenOutputsDisposed":
  815341.497 ±(99.9%) 21990.816 ops/s [Average]
  (min, avg, max) = (685704.676, 815341.497, 857447.455), stdev = 32914.820
  CI (99.9%): [793350.682, 837332.313] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score       Error  Units
ObservableWindowWithObservableTest._Benchmark.benchmark_upstreamDisposedWhenOutputsDisposed  thrpt   30  815341.497 ± 21990.816  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 639135.638 ops/s
# Warmup Iteration   2: 1941802.384 ops/s
# Warmup Iteration   3: 2962481.028 ops/s
# Warmup Iteration   4: 3383934.052 ops/s
# Warmup Iteration   5: 3292582.655 ops/s
# Warmup Iteration   6: 3337731.075 ops/s
# Warmup Iteration   7: 3515148.253 ops/s
# Warmup Iteration   8: 3371601.776 ops/s
# Warmup Iteration   9: 3415212.516 ops/s
# Warmup Iteration  10: 3490136.779 ops/s
# Warmup Iteration  11: 3477716.856 ops/s
# Warmup Iteration  12: 3442202.463 ops/s
# Warmup Iteration  13: 3470897.629 ops/s
# Warmup Iteration  14: 3356007.438 ops/s
# Warmup Iteration  15: 3491424.758 ops/s
# Warmup Iteration  16: 3479180.984 ops/s
# Warmup Iteration  17: 3407296.830 ops/s
# Warmup Iteration  18: 3426292.424 ops/s
# Warmup Iteration  19: 3421804.844 ops/s
# Warmup Iteration  20: 3511907.854 ops/s
# Warmup Iteration  21: 3449973.855 ops/s
# Warmup Iteration  22: 3492438.679 ops/s
# Warmup Iteration  23: 3433662.493 ops/s
# Warmup Iteration  24: 3369681.523 ops/s
# Warmup Iteration  25: 3618510.734 ops/s
# Warmup Iteration  26: 3362931.771 ops/s
# Warmup Iteration  27: 3425464.140 ops/s
# Warmup Iteration  28: 3525631.500 ops/s
# Warmup Iteration  29: 3385901.135 ops/s
# Warmup Iteration  30: 3401401.044 ops/s
Iteration   1: 3553083.929 ops/s
Iteration   2: 3381217.649 ops/s
Iteration   3: 3431322.725 ops/s
Iteration   4: 3501908.439 ops/s
Iteration   5: 3423501.144 ops/s
Iteration   6: 3363260.469 ops/s
Iteration   7: 3611324.664 ops/s
Iteration   8: 3363916.023 ops/s
Iteration   9: 3495795.139 ops/s
Iteration  10: 3541576.934 ops/s
Iteration  11: 3471442.380 ops/s
Iteration  12: 3438913.787 ops/s
Iteration  13: 3376047.817 ops/s
Iteration  14: 3375267.889 ops/s
Iteration  15: 3404891.866 ops/s
Iteration  16: 3370255.641 ops/s
Iteration  17: 3424103.943 ops/s
Iteration  18: 3569637.933 ops/s
Iteration  19: 3370839.875 ops/s
Iteration  20: 3493988.244 ops/s
Iteration  21: 3454617.753 ops/s
Iteration  22: 3482157.626 ops/s
Iteration  23: 3404009.461 ops/s
Iteration  24: 3483478.347 ops/s
Iteration  25: 3490397.793 ops/s
Iteration  26: 3289788.836 ops/s
Iteration  27: 3449663.925 ops/s
Iteration  28: 3563682.694 ops/s
Iteration  29: 3562369.327 ops/s
Iteration  30: 3324173.728 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_isDisposed":
  3448887.866 ±(99.9%) 53606.981 ops/s [Average]
  (min, avg, max) = (3289788.836, 3448887.866, 3611324.664), stdev = 80236.412
  CI (99.9%): [3395280.885, 3502494.847] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableMergeWithCompletableTest._Benchmark.benchmark_isDisposed  thrpt   30  3448887.866 ± 53606.981  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomSchedulerBufferSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomSchedulerBufferSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5946.256 ops/s
# Warmup Iteration   2: 34118.642 ops/s
# Warmup Iteration   3: 86768.315 ops/s
# Warmup Iteration   4: 76391.478 ops/s
# Warmup Iteration   5: 85855.999 ops/s
# Warmup Iteration   6: 83372.702 ops/s
# Warmup Iteration   7: 93050.916 ops/s
# Warmup Iteration   8: 84595.935 ops/s
# Warmup Iteration   9: 83591.484 ops/s
# Warmup Iteration  10: 103073.032 ops/s
# Warmup Iteration  11: 78009.788 ops/s
# Warmup Iteration  12: 98086.845 ops/s
# Warmup Iteration  13: 86713.509 ops/s
# Warmup Iteration  14: 99456.872 ops/s
# Warmup Iteration  15: 97184.042 ops/s
# Warmup Iteration  16: 100493.305 ops/s
# Warmup Iteration  17: 106561.779 ops/s
# Warmup Iteration  18: 103228.158 ops/s
# Warmup Iteration  19: 93619.565 ops/s
# Warmup Iteration  20: 92752.982 ops/s
# Warmup Iteration  21: 99772.664 ops/s
# Warmup Iteration  22: 89982.065 ops/s
# Warmup Iteration  23: 87380.234 ops/s
# Warmup Iteration  24: 101195.487 ops/s
# Warmup Iteration  25: 101068.097 ops/s
# Warmup Iteration  26: 94233.438 ops/s
# Warmup Iteration  27: 98017.461 ops/s
# Warmup Iteration  28: 109944.819 ops/s
# Warmup Iteration  29: 107496.647 ops/s
# Warmup Iteration  30: 106622.542 ops/s
Iteration   1: 103518.153 ops/s
Iteration   2: 100536.551 ops/s
Iteration   3: 104561.564 ops/s
Iteration   4: 101224.952 ops/s
Iteration   5: 100480.696 ops/s
Iteration   6: 95705.568 ops/s
Iteration   7: 94308.137 ops/s
Iteration   8: 105314.032 ops/s
Iteration   9: 103523.468 ops/s
Iteration  10: 106194.361 ops/s
Iteration  11: 87167.314 ops/s
Iteration  12: 94457.597 ops/s
Iteration  13: 97528.434 ops/s
Iteration  14: 95234.391 ops/s
Iteration  15: 103474.296 ops/s
Iteration  16: 89683.300 ops/s
Iteration  17: 93710.572 ops/s
Iteration  18: 105375.396 ops/s
Iteration  19: 88166.699 ops/s
Iteration  20: 101375.154 ops/s
Iteration  21: 96816.464 ops/s
Iteration  22: 94064.134 ops/s
Iteration  23: 92111.871 ops/s
Iteration  24: 103581.676 ops/s
Iteration  25: 99367.253 ops/s
Iteration  26: 96464.880 ops/s
Iteration  27: 95077.929 ops/s
Iteration  28: 92395.068 ops/s
Iteration  29: 95225.721 ops/s
Iteration  30: 94900.595 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomSchedulerBufferSize":
  97718.208 ±(99.9%) 3565.967 ops/s [Average]
  (min, avg, max) = (87167.314, 97718.208, 106194.361), stdev = 5337.372
  CI (99.9%): [94152.241, 101284.175] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt      Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomSchedulerBufferSize  thrpt   30  97718.208 ± 3565.967  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeAndSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeAndSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6404.508 ops/s
# Warmup Iteration   2: 37611.655 ops/s
# Warmup Iteration   3: 71757.614 ops/s
# Warmup Iteration   4: 81161.071 ops/s
# Warmup Iteration   5: 113928.329 ops/s
# Warmup Iteration   6: 112349.500 ops/s
# Warmup Iteration   7: 113512.046 ops/s
# Warmup Iteration   8: 117224.195 ops/s
# Warmup Iteration   9: 115139.630 ops/s
# Warmup Iteration  10: 119456.858 ops/s
# Warmup Iteration  11: 120697.744 ops/s
# Warmup Iteration  12: 106392.293 ops/s
# Warmup Iteration  13: 124359.929 ops/s
# Warmup Iteration  14: 117776.143 ops/s
# Warmup Iteration  15: 128149.414 ops/s
# Warmup Iteration  16: 134722.216 ops/s
# Warmup Iteration  17: 123670.615 ops/s
# Warmup Iteration  18: 134528.563 ops/s
# Warmup Iteration  19: 124176.844 ops/s
# Warmup Iteration  20: 121041.005 ops/s
# Warmup Iteration  21: 127050.086 ops/s
# Warmup Iteration  22: 130178.372 ops/s
# Warmup Iteration  23: 110279.668 ops/s
# Warmup Iteration  24: 123316.438 ops/s
# Warmup Iteration  25: 123724.758 ops/s
# Warmup Iteration  26: 113198.815 ops/s
# Warmup Iteration  27: 126643.409 ops/s
# Warmup Iteration  28: 128179.706 ops/s
# Warmup Iteration  29: 116320.601 ops/s
# Warmup Iteration  30: 104310.420 ops/s
Iteration   1: 121930.351 ops/s
Iteration   2: 105921.229 ops/s
Iteration   3: 126725.532 ops/s
Iteration   4: 132461.817 ops/s
Iteration   5: 124798.736 ops/s
Iteration   6: 114454.154 ops/s
Iteration   7: 115036.004 ops/s
Iteration   8: 118122.836 ops/s
Iteration   9: 110923.094 ops/s
Iteration  10: 114378.817 ops/s
Iteration  11: 123230.181 ops/s
Iteration  12: 120536.782 ops/s
Iteration  13: 105196.741 ops/s
Iteration  14: 118446.283 ops/s
Iteration  15: 123971.215 ops/s
Iteration  16: 106659.746 ops/s
Iteration  17: 124829.128 ops/s
Iteration  18: 119636.352 ops/s
Iteration  19: 106215.268 ops/s
Iteration  20: 132666.296 ops/s
Iteration  21: 118211.164 ops/s
Iteration  22: 118313.757 ops/s
Iteration  23: 114886.807 ops/s
Iteration  24: 128964.360 ops/s
Iteration  25: 113393.124 ops/s
Iteration  26: 128832.441 ops/s
Iteration  27: 134603.814 ops/s
Iteration  28: 114042.320 ops/s
Iteration  29: 137258.525 ops/s
Iteration  30: 115604.888 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeAndSize":
  119675.059 ±(99.9%) 5812.965 ops/s [Average]
  (min, avg, max) = (105196.741, 119675.059, 137258.525), stdev = 8700.573
  CI (99.9%): [113862.094, 125488.024] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeAndSize  thrpt   30  119675.059 ± 5812.965  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83266.656 ops/s
# Warmup Iteration   2: 346794.723 ops/s
# Warmup Iteration   3: 553855.662 ops/s
# Warmup Iteration   4: 543869.016 ops/s
# Warmup Iteration   5: 524576.539 ops/s
# Warmup Iteration   6: 614862.299 ops/s
# Warmup Iteration   7: 578786.939 ops/s
# Warmup Iteration   8: 584941.390 ops/s
# Warmup Iteration   9: 597296.827 ops/s
# Warmup Iteration  10: 546855.447 ops/s
# Warmup Iteration  11: 596855.804 ops/s
# Warmup Iteration  12: 598205.747 ops/s
# Warmup Iteration  13: 586637.888 ops/s
# Warmup Iteration  14: 594250.409 ops/s
# Warmup Iteration  15: 605310.517 ops/s
# Warmup Iteration  16: 568980.757 ops/s
# Warmup Iteration  17: 615754.659 ops/s
# Warmup Iteration  18: 644994.104 ops/s
# Warmup Iteration  19: 607561.082 ops/s
# Warmup Iteration  20: 626691.049 ops/s
# Warmup Iteration  21: 614443.669 ops/s
# Warmup Iteration  22: 621324.245 ops/s
# Warmup Iteration  23: 612190.808 ops/s
# Warmup Iteration  24: 626079.461 ops/s
# Warmup Iteration  25: 612704.805 ops/s
# Warmup Iteration  26: 611382.236 ops/s
# Warmup Iteration  27: 643771.361 ops/s
# Warmup Iteration  28: 596171.557 ops/s
# Warmup Iteration  29: 645350.429 ops/s
# Warmup Iteration  30: 625758.998 ops/s
Iteration   1: 597367.899 ops/s
Iteration   2: 635797.335 ops/s
Iteration   3: 622226.180 ops/s
Iteration   4: 514614.431 ops/s
Iteration   5: 604730.670 ops/s
Iteration   6: 620672.303 ops/s
Iteration   7: 643847.653 ops/s
Iteration   8: 620156.062 ops/s
Iteration   9: 623451.850 ops/s
Iteration  10: 607993.578 ops/s
Iteration  11: 622562.782 ops/s
Iteration  12: 633898.105 ops/s
Iteration  13: 620431.127 ops/s
Iteration  14: 633165.462 ops/s
Iteration  15: 594584.862 ops/s
Iteration  16: 625505.043 ops/s
Iteration  17: 633515.928 ops/s
Iteration  18: 610294.163 ops/s
Iteration  19: 637281.779 ops/s
Iteration  20: 610130.039 ops/s
Iteration  21: 620516.465 ops/s
Iteration  22: 646330.924 ops/s
Iteration  23: 598533.201 ops/s
Iteration  24: 641682.524 ops/s
Iteration  25: 614983.285 ops/s
Iteration  26: 627485.119 ops/s
Iteration  27: 616390.844 ops/s
Iteration  28: 625307.171 ops/s
Iteration  29: 626107.962 ops/s
Iteration  30: 622886.231 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperThrows":
  618415.033 ±(99.9%) 15825.464 ops/s [Average]
  (min, avg, max) = (514614.431, 618415.033, 646330.924), stdev = 23686.811
  CI (99.9%): [602589.569, 634240.496] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableFlatMapCompletableTest._Benchmark.benchmark_mapperThrows  thrpt   30  618415.033 ± 15825.464  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2101610.876 ops/s
# Warmup Iteration   2: 5282997.926 ops/s
# Warmup Iteration   3: 7529807.223 ops/s
# Warmup Iteration   4: 7439121.541 ops/s
# Warmup Iteration   5: 7514754.601 ops/s
# Warmup Iteration   6: 7778576.008 ops/s
# Warmup Iteration   7: 7252271.048 ops/s
# Warmup Iteration   8: 7559872.399 ops/s
# Warmup Iteration   9: 7798635.698 ops/s
# Warmup Iteration  10: 7342523.255 ops/s
# Warmup Iteration  11: 7432069.724 ops/s
# Warmup Iteration  12: 7571559.237 ops/s
# Warmup Iteration  13: 7746571.996 ops/s
# Warmup Iteration  14: 7509566.230 ops/s
# Warmup Iteration  15: 7409035.431 ops/s
# Warmup Iteration  16: 7753605.247 ops/s
# Warmup Iteration  17: 7488853.221 ops/s
# Warmup Iteration  18: 7493539.098 ops/s
# Warmup Iteration  19: 7644056.925 ops/s
# Warmup Iteration  20: 7440687.457 ops/s
# Warmup Iteration  21: 7572410.632 ops/s
# Warmup Iteration  22: 7685476.795 ops/s
# Warmup Iteration  23: 7528544.113 ops/s
# Warmup Iteration  24: 7421777.730 ops/s
# Warmup Iteration  25: 7612045.279 ops/s
# Warmup Iteration  26: 7654958.225 ops/s
# Warmup Iteration  27: 7594400.260 ops/s
# Warmup Iteration  28: 7402784.447 ops/s
# Warmup Iteration  29: 7473660.185 ops/s
# Warmup Iteration  30: 7750255.587 ops/s
Iteration   1: 7334533.728 ops/s
Iteration   2: 7498020.753 ops/s
Iteration   3: 7747537.810 ops/s
Iteration   4: 7607769.013 ops/s
Iteration   5: 7617622.363 ops/s
Iteration   6: 7505489.992 ops/s
Iteration   7: 7645871.552 ops/s
Iteration   8: 7434499.790 ops/s
Iteration   9: 7548378.963 ops/s
Iteration  10: 7488810.476 ops/s
Iteration  11: 7746550.135 ops/s
Iteration  12: 7570537.184 ops/s
Iteration  13: 7379834.014 ops/s
Iteration  14: 7580088.151 ops/s
Iteration  15: 7488883.907 ops/s
Iteration  16: 7595969.006 ops/s
Iteration  17: 7851176.950 ops/s
Iteration  18: 7393788.470 ops/s
Iteration  19: 7598634.237 ops/s
Iteration  20: 7548927.056 ops/s
Iteration  21: 7706908.343 ops/s
Iteration  22: 7462636.506 ops/s
Iteration  23: 7487403.014 ops/s
Iteration  24: 7663003.104 ops/s
Iteration  25: 7359432.445 ops/s
Iteration  26: 7750435.601 ops/s
Iteration  27: 7406403.782 ops/s
Iteration  28: 7691603.260 ops/s
Iteration  29: 7392424.951 ops/s
Iteration  30: 7427590.649 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancel":
  7551025.507 ±(99.9%) 89674.786 ops/s [Average]
  (min, avg, max) = (7334533.728, 7551025.507, 7851176.950), stdev = 134221.008
  CI (99.9%): [7461350.721, 7640700.292] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_delayErrorIterableCancel  thrpt   30  7551025.507 ± 89674.786  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_cancelMainOnOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_cancelMainOnOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105919.296 ops/s
# Warmup Iteration   2: 446167.566 ops/s
# Warmup Iteration   3: 582272.085 ops/s
# Warmup Iteration   4: 616446.302 ops/s
# Warmup Iteration   5: 610192.490 ops/s
# Warmup Iteration   6: 621715.667 ops/s
# Warmup Iteration   7: 599984.639 ops/s
# Warmup Iteration   8: 602188.085 ops/s
# Warmup Iteration   9: 615113.191 ops/s
# Warmup Iteration  10: 599234.717 ops/s
# Warmup Iteration  11: 614427.987 ops/s
# Warmup Iteration  12: 589686.829 ops/s
# Warmup Iteration  13: 590788.688 ops/s
# Warmup Iteration  14: 624954.649 ops/s
# Warmup Iteration  15: 589301.825 ops/s
# Warmup Iteration  16: 601379.324 ops/s
# Warmup Iteration  17: 656151.643 ops/s
# Warmup Iteration  18: 627462.627 ops/s
# Warmup Iteration  19: 662794.797 ops/s
# Warmup Iteration  20: 632504.516 ops/s
# Warmup Iteration  21: 649203.624 ops/s
# Warmup Iteration  22: 629155.162 ops/s
# Warmup Iteration  23: 638808.518 ops/s
# Warmup Iteration  24: 629760.996 ops/s
# Warmup Iteration  25: 645122.307 ops/s
# Warmup Iteration  26: 645207.721 ops/s
# Warmup Iteration  27: 629644.481 ops/s
# Warmup Iteration  28: 639345.555 ops/s
# Warmup Iteration  29: 511857.037 ops/s
# Warmup Iteration  30: 631781.483 ops/s
Iteration   1: 657178.333 ops/s
Iteration   2: 666543.991 ops/s
Iteration   3: 643038.922 ops/s
Iteration   4: 645772.228 ops/s
Iteration   5: 633458.383 ops/s
Iteration   6: 646452.688 ops/s
Iteration   7: 670478.371 ops/s
Iteration   8: 635012.150 ops/s
Iteration   9: 643942.568 ops/s
Iteration  10: 636651.215 ops/s
Iteration  11: 671659.464 ops/s
Iteration  12: 625712.899 ops/s
Iteration  13: 660686.116 ops/s
Iteration  14: 644483.299 ops/s
Iteration  15: 621462.337 ops/s
Iteration  16: 661090.951 ops/s
Iteration  17: 634153.364 ops/s
Iteration  18: 665180.798 ops/s
Iteration  19: 634060.363 ops/s
Iteration  20: 655836.627 ops/s
Iteration  21: 626382.392 ops/s
Iteration  22: 651245.186 ops/s
Iteration  23: 666295.766 ops/s
Iteration  24: 632835.130 ops/s
Iteration  25: 660420.383 ops/s
Iteration  26: 640178.350 ops/s
Iteration  27: 645573.616 ops/s
Iteration  28: 653838.500 ops/s
Iteration  29: 629980.308 ops/s
Iteration  30: 645943.292 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_cancelMainOnOtherError":
  646851.600 ±(99.9%) 9550.759 ops/s [Average]
  (min, avg, max) = (621462.337, 646851.600, 671659.464), stdev = 14295.127
  CI (99.9%): [637300.841, 656402.358] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ObservableMergeWithCompletableTest._Benchmark.benchmark_cancelMainOnOtherError  thrpt   30  646851.600 ± 9550.759  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29469.630 ops/s
# Warmup Iteration   2: 145649.004 ops/s
# Warmup Iteration   3: 186893.346 ops/s
# Warmup Iteration   4: 181432.041 ops/s
# Warmup Iteration   5: 200156.649 ops/s
# Warmup Iteration   6: 187215.183 ops/s
# Warmup Iteration   7: 193399.342 ops/s
# Warmup Iteration   8: 190985.561 ops/s
# Warmup Iteration   9: 184603.403 ops/s
# Warmup Iteration  10: 191759.254 ops/s
# Warmup Iteration  11: 186387.611 ops/s
# Warmup Iteration  12: 191504.039 ops/s
# Warmup Iteration  13: 194238.374 ops/s
# Warmup Iteration  14: 187857.155 ops/s
# Warmup Iteration  15: 195872.587 ops/s
# Warmup Iteration  16: 185503.394 ops/s
# Warmup Iteration  17: 202826.662 ops/s
# Warmup Iteration  18: 202392.727 ops/s
# Warmup Iteration  19: 207999.767 ops/s
# Warmup Iteration  20: 216501.330 ops/s
# Warmup Iteration  21: 203258.854 ops/s
# Warmup Iteration  22: 207771.504 ops/s
# Warmup Iteration  23: 215941.224 ops/s
# Warmup Iteration  24: 209100.393 ops/s
# Warmup Iteration  25: 207456.571 ops/s
# Warmup Iteration  26: 206239.873 ops/s
# Warmup Iteration  27: 206246.379 ops/s
# Warmup Iteration  28: 207734.952 ops/s
# Warmup Iteration  29: 222455.065 ops/s
# Warmup Iteration  30: 203817.341 ops/s
Iteration   1: 213251.002 ops/s
Iteration   2: 206832.077 ops/s
Iteration   3: 214581.136 ops/s
Iteration   4: 206570.232 ops/s
Iteration   5: 203939.222 ops/s
Iteration   6: 217026.406 ops/s
Iteration   7: 218059.828 ops/s
Iteration   8: 200370.315 ops/s
Iteration   9: 214606.724 ops/s
Iteration  10: 197561.036 ops/s
Iteration  11: 207848.769 ops/s
Iteration  12: 211267.073 ops/s
Iteration  13: 206338.662 ops/s
Iteration  14: 211307.244 ops/s
Iteration  15: 209073.718 ops/s
Iteration  16: 202361.488 ops/s
Iteration  17: 209235.790 ops/s
Iteration  18: 220211.759 ops/s
Iteration  19: 202268.014 ops/s
Iteration  20: 212669.926 ops/s
Iteration  21: 205818.561 ops/s
Iteration  22: 215252.500 ops/s
Iteration  23: 204123.412 ops/s
Iteration  24: 205214.926 ops/s
Iteration  25: 217569.834 ops/s
Iteration  26: 202546.714 ops/s
Iteration  27: 210704.255 ops/s
Iteration  28: 220261.016 ops/s
Iteration  29: 208471.627 ops/s
Iteration  30: 203976.817 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithCompletableTest._Benchmark.benchmark_undeliverableUponCancel":
  209310.669 ±(99.9%) 4060.051 ops/s [Average]
  (min, avg, max) = (197561.036, 209310.669, 220261.016), stdev = 6076.893
  CI (99.9%): [205250.619, 213370.720] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObservableMergeWithCompletableTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  209310.669 ± 4060.051  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35177.271 ops/s
# Warmup Iteration   2: 158884.370 ops/s
# Warmup Iteration   3: 179128.847 ops/s
# Warmup Iteration   4: 191527.260 ops/s
# Warmup Iteration   5: 193169.916 ops/s
# Warmup Iteration   6: 210470.531 ops/s
# Warmup Iteration   7: 203667.367 ops/s
# Warmup Iteration   8: 206089.555 ops/s
# Warmup Iteration   9: 214781.451 ops/s
# Warmup Iteration  10: 202399.421 ops/s
# Warmup Iteration  11: 210505.485 ops/s
# Warmup Iteration  12: 205664.790 ops/s
# Warmup Iteration  13: 207259.881 ops/s
# Warmup Iteration  14: 214636.443 ops/s
# Warmup Iteration  15: 200455.141 ops/s
# Warmup Iteration  16: 213882.600 ops/s
# Warmup Iteration  17: 215789.400 ops/s
# Warmup Iteration  18: 210569.297 ops/s
# Warmup Iteration  19: 212495.299 ops/s
# Warmup Iteration  20: 215506.970 ops/s
# Warmup Iteration  21: 221282.863 ops/s
# Warmup Iteration  22: 212178.031 ops/s
# Warmup Iteration  23: 194130.778 ops/s
# Warmup Iteration  24: 196520.842 ops/s
# Warmup Iteration  25: 220445.487 ops/s
# Warmup Iteration  26: 205177.908 ops/s
# Warmup Iteration  27: 212630.508 ops/s
# Warmup Iteration  28: 223130.203 ops/s
# Warmup Iteration  29: 207028.511 ops/s
# Warmup Iteration  30: 221482.995 ops/s
Iteration   1: 212539.496 ops/s
Iteration   2: 216234.701 ops/s
Iteration   3: 218660.280 ops/s
Iteration   4: 208076.226 ops/s
Iteration   5: 212148.290 ops/s
Iteration   6: 224793.443 ops/s
Iteration   7: 206765.106 ops/s
Iteration   8: 222137.715 ops/s
Iteration   9: 207468.765 ops/s
Iteration  10: 218225.405 ops/s
Iteration  11: 207365.896 ops/s
Iteration  12: 216659.200 ops/s
Iteration  13: 212051.586 ops/s
Iteration  14: 208749.818 ops/s
Iteration  15: 221442.166 ops/s
Iteration  16: 209883.985 ops/s
Iteration  17: 219732.152 ops/s
Iteration  18: 214373.015 ops/s
Iteration  19: 214661.130 ops/s
Iteration  20: 219855.825 ops/s
Iteration  21: 213929.186 ops/s
Iteration  22: 214467.736 ops/s
Iteration  23: 209400.679 ops/s
Iteration  24: 218025.635 ops/s
Iteration  25: 219157.096 ops/s
Iteration  26: 210287.214 ops/s
Iteration  27: 210903.856 ops/s
Iteration  28: 221322.965 ops/s
Iteration  29: 211882.560 ops/s
Iteration  30: 216606.671 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  214593.593 ±(99.9%) 3345.904 ops/s [Average]
  (min, avg, max) = (206765.106, 214593.593, 224793.443), stdev = 5007.991
  CI (99.9%): [211247.690, 217939.497] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
ObservableConcatMapCompletableTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  214593.593 ± 3345.904  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_skipAndCountWindowsWithGaps$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_skipAndCountWindowsWithGaps

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12328.053 ops/s
# Warmup Iteration   2: 92067.632 ops/s
# Warmup Iteration   3: 226761.100 ops/s
# Warmup Iteration   4: 383431.474 ops/s
# Warmup Iteration   5: 358611.844 ops/s
# Warmup Iteration   6: 373616.969 ops/s
# Warmup Iteration   7: 420589.001 ops/s
# Warmup Iteration   8: 393663.643 ops/s
# Warmup Iteration   9: 415395.183 ops/s
# Warmup Iteration  10: 405400.924 ops/s
# Warmup Iteration  11: 418460.574 ops/s
# Warmup Iteration  12: 416218.464 ops/s
# Warmup Iteration  13: 407532.308 ops/s
# Warmup Iteration  14: 404137.117 ops/s
# Warmup Iteration  15: 413284.655 ops/s
# Warmup Iteration  16: 410238.703 ops/s
# Warmup Iteration  17: 406800.174 ops/s
# Warmup Iteration  18: 421751.232 ops/s
# Warmup Iteration  19: 399666.374 ops/s
# Warmup Iteration  20: 404597.515 ops/s
# Warmup Iteration  21: 415941.037 ops/s
# Warmup Iteration  22: 404745.681 ops/s
# Warmup Iteration  23: 403319.785 ops/s
# Warmup Iteration  24: 409677.270 ops/s
# Warmup Iteration  25: 402528.059 ops/s
# Warmup Iteration  26: 401978.846 ops/s
# Warmup Iteration  27: 401543.493 ops/s
# Warmup Iteration  28: 416105.641 ops/s
# Warmup Iteration  29: 390862.758 ops/s
# Warmup Iteration  30: 411350.537 ops/s
Iteration   1: 399574.071 ops/s
Iteration   2: 416389.189 ops/s
Iteration   3: 400061.036 ops/s
Iteration   4: 399245.145 ops/s
Iteration   5: 409383.971 ops/s
Iteration   6: 394333.114 ops/s
Iteration   7: 421450.037 ops/s
Iteration   8: 419206.962 ops/s
Iteration   9: 404445.185 ops/s
Iteration  10: 404452.013 ops/s
Iteration  11: 402035.681 ops/s
Iteration  12: 402270.709 ops/s
Iteration  13: 396675.742 ops/s
Iteration  14: 408765.107 ops/s
Iteration  15: 391028.152 ops/s
Iteration  16: 406665.669 ops/s
Iteration  17: 399254.508 ops/s
Iteration  18: 405507.386 ops/s
Iteration  19: 413938.980 ops/s
Iteration  20: 405947.470 ops/s
Iteration  21: 414848.508 ops/s
Iteration  22: 406077.624 ops/s
Iteration  23: 408729.401 ops/s
Iteration  24: 418971.689 ops/s
Iteration  25: 388157.337 ops/s
Iteration  26: 425261.780 ops/s
Iteration  27: 401549.325 ops/s
Iteration  28: 377338.656 ops/s
Iteration  29: 406453.436 ops/s
Iteration  30: 405088.140 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_skipAndCountWindowsWithGaps":
  405103.534 ±(99.9%) 6812.111 ops/s [Average]
  (min, avg, max) = (377338.656, 405103.534, 425261.780), stdev = 10196.048
  CI (99.9%): [398291.423, 411915.645] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_skipAndCountWindowsWithGaps  thrpt   30  405103.534 ± 6812.111  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnableTest._Benchmark.benchmark_fromRunnable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnableTest._Benchmark.benchmark_fromRunnable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2566749.993 ops/s
# Warmup Iteration   2: 6788321.892 ops/s
# Warmup Iteration   3: 9813371.964 ops/s
# Warmup Iteration   4: 8827063.142 ops/s
# Warmup Iteration   5: 9294894.557 ops/s
# Warmup Iteration   6: 9180503.923 ops/s
# Warmup Iteration   7: 9236642.883 ops/s
# Warmup Iteration   8: 9398820.101 ops/s
# Warmup Iteration   9: 9237323.264 ops/s
# Warmup Iteration  10: 9159969.776 ops/s
# Warmup Iteration  11: 9594245.609 ops/s
# Warmup Iteration  12: 9365946.641 ops/s
# Warmup Iteration  13: 8914669.637 ops/s
# Warmup Iteration  14: 9412313.521 ops/s
# Warmup Iteration  15: 9153076.016 ops/s
# Warmup Iteration  16: 9375887.761 ops/s
# Warmup Iteration  17: 9628977.565 ops/s
# Warmup Iteration  18: 7314305.334 ops/s
# Warmup Iteration  19: 9080014.144 ops/s
# Warmup Iteration  20: 9365514.417 ops/s
# Warmup Iteration  21: 8919541.145 ops/s
# Warmup Iteration  22: 9381307.473 ops/s
# Warmup Iteration  23: 9656149.013 ops/s
# Warmup Iteration  24: 9233855.470 ops/s
# Warmup Iteration  25: 8781479.853 ops/s
# Warmup Iteration  26: 9533582.304 ops/s
# Warmup Iteration  27: 9571941.674 ops/s
# Warmup Iteration  28: 9006261.904 ops/s
# Warmup Iteration  29: 9555846.180 ops/s
# Warmup Iteration  30: 9442658.566 ops/s
Iteration   1: 9103185.461 ops/s
Iteration   2: 9487704.492 ops/s
Iteration   3: 9284676.534 ops/s
Iteration   4: 9093221.680 ops/s
Iteration   5: 9858896.990 ops/s
Iteration   6: 9485116.165 ops/s
Iteration   7: 9138216.097 ops/s
Iteration   8: 9364257.233 ops/s
Iteration   9: 9437768.620 ops/s
Iteration  10: 9080396.683 ops/s
Iteration  11: 9145387.062 ops/s
Iteration  12: 9566614.670 ops/s
Iteration  13: 9107385.731 ops/s
Iteration  14: 9227121.305 ops/s
Iteration  15: 9131218.381 ops/s
Iteration  16: 9727665.730 ops/s
Iteration  17: 9290918.512 ops/s
Iteration  18: 9178365.148 ops/s
Iteration  19: 9456049.431 ops/s
Iteration  20: 9097353.792 ops/s
Iteration  21: 9424288.603 ops/s
Iteration  22: 9357851.579 ops/s
Iteration  23: 9299942.127 ops/s
Iteration  24: 9370756.231 ops/s
Iteration  25: 9098678.227 ops/s
Iteration  26: 9503561.033 ops/s
Iteration  27: 8983426.816 ops/s
Iteration  28: 9388536.615 ops/s
Iteration  29: 9510467.767 ops/s
Iteration  30: 9124581.855 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnableTest._Benchmark.benchmark_fromRunnable":
  9310787.019 ±(99.9%) 140121.840 ops/s [Average]
  (min, avg, max) = (8983426.816, 9310787.019, 9858896.990), stdev = 209727.789
  CI (99.9%): [9170665.179, 9450908.858] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
ObservableFromRunnableTest._Benchmark.benchmark_fromRunnable  thrpt   30  9310787.019 ± 140121.840  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_fromAction$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_fromAction

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1891393.750 ops/s
# Warmup Iteration   2: 6580461.092 ops/s
# Warmup Iteration   3: 8747094.066 ops/s
# Warmup Iteration   4: 8945571.376 ops/s
# Warmup Iteration   5: 9438174.922 ops/s
# Warmup Iteration   6: 9156946.893 ops/s
# Warmup Iteration   7: 9360690.665 ops/s
# Warmup Iteration   8: 9132765.827 ops/s
# Warmup Iteration   9: 8991562.692 ops/s
# Warmup Iteration  10: 9370857.664 ops/s
# Warmup Iteration  11: 9106276.290 ops/s
# Warmup Iteration  12: 9635363.867 ops/s
# Warmup Iteration  13: 9175160.494 ops/s
# Warmup Iteration  14: 9519097.551 ops/s
# Warmup Iteration  15: 8958964.036 ops/s
# Warmup Iteration  16: 9017641.083 ops/s
# Warmup Iteration  17: 9625769.793 ops/s
# Warmup Iteration  18: 8782471.004 ops/s
# Warmup Iteration  19: 9303452.469 ops/s
# Warmup Iteration  20: 9156005.802 ops/s
# Warmup Iteration  21: 9306852.499 ops/s
# Warmup Iteration  22: 9080172.228 ops/s
# Warmup Iteration  23: 9258815.632 ops/s
# Warmup Iteration  24: 9209245.468 ops/s
# Warmup Iteration  25: 9168035.822 ops/s
# Warmup Iteration  26: 9225619.820 ops/s
# Warmup Iteration  27: 8952082.573 ops/s
# Warmup Iteration  28: 8865556.432 ops/s
# Warmup Iteration  29: 9264851.621 ops/s
# Warmup Iteration  30: 9335385.540 ops/s
Iteration   1: 8943749.839 ops/s
Iteration   2: 9468693.963 ops/s
Iteration   3: 9093773.722 ops/s
Iteration   4: 9319914.132 ops/s
Iteration   5: 8965409.744 ops/s
Iteration   6: 9254677.712 ops/s
Iteration   7: 9501258.925 ops/s
Iteration   8: 8997954.753 ops/s
Iteration   9: 9475083.090 ops/s
Iteration  10: 9073147.778 ops/s
Iteration  11: 9411217.069 ops/s
Iteration  12: 9498793.118 ops/s
Iteration  13: 8973444.947 ops/s
Iteration  14: 9191671.820 ops/s
Iteration  15: 9273742.738 ops/s
Iteration  16: 8815270.061 ops/s
Iteration  17: 9396601.608 ops/s
Iteration  18: 9112266.085 ops/s
Iteration  19: 9174691.207 ops/s
Iteration  20: 9527762.889 ops/s
Iteration  21: 8967276.897 ops/s
Iteration  22: 9278369.400 ops/s
Iteration  23: 9309201.328 ops/s
Iteration  24: 9101717.280 ops/s
Iteration  25: 9350977.152 ops/s
Iteration  26: 9157876.608 ops/s
Iteration  27: 9174270.309 ops/s
Iteration  28: 9181296.408 ops/s
Iteration  29: 9030291.658 ops/s
Iteration  30: 9519501.483 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_fromAction":
  9217996.791 ±(99.9%) 134006.763 ops/s [Average]
  (min, avg, max) = (8815270.061, 9217996.791, 9527762.889), stdev = 200575.029
  CI (99.9%): [9083990.028, 9352003.553] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
ObservableFromActionTest._Benchmark.benchmark_fromAction  thrpt   30  9217996.791 ± 134006.763  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72501.503 ops/s
# Warmup Iteration   2: 298015.447 ops/s
# Warmup Iteration   3: 383659.908 ops/s
# Warmup Iteration   4: 410100.165 ops/s
# Warmup Iteration   5: 444712.786 ops/s
# Warmup Iteration   6: 415691.048 ops/s
# Warmup Iteration   7: 477660.579 ops/s
# Warmup Iteration   8: 463549.876 ops/s
# Warmup Iteration   9: 485408.883 ops/s
# Warmup Iteration  10: 448145.061 ops/s
# Warmup Iteration  11: 460006.393 ops/s
# Warmup Iteration  12: 456834.525 ops/s
# Warmup Iteration  13: 370629.861 ops/s
# Warmup Iteration  14: 477967.916 ops/s
# Warmup Iteration  15: 466056.012 ops/s
# Warmup Iteration  16: 454965.153 ops/s
# Warmup Iteration  17: 493792.065 ops/s
# Warmup Iteration  18: 474252.592 ops/s
# Warmup Iteration  19: 483701.888 ops/s
# Warmup Iteration  20: 485169.478 ops/s
# Warmup Iteration  21: 491864.861 ops/s
# Warmup Iteration  22: 482652.286 ops/s
# Warmup Iteration  23: 485487.519 ops/s
# Warmup Iteration  24: 497151.260 ops/s
# Warmup Iteration  25: 486227.889 ops/s
# Warmup Iteration  26: 477512.647 ops/s
# Warmup Iteration  27: 508757.147 ops/s
# Warmup Iteration  28: 473741.208 ops/s
# Warmup Iteration  29: 487722.372 ops/s
# Warmup Iteration  30: 482004.940 ops/s
Iteration   1: 501195.843 ops/s
Iteration   2: 470027.327 ops/s
Iteration   3: 476511.728 ops/s
Iteration   4: 498497.676 ops/s
Iteration   5: 474620.964 ops/s
Iteration   6: 497566.429 ops/s
Iteration   7: 475470.782 ops/s
Iteration   8: 497950.557 ops/s
Iteration   9: 476844.977 ops/s
Iteration  10: 484258.892 ops/s
Iteration  11: 504483.403 ops/s
Iteration  12: 464098.167 ops/s
Iteration  13: 481068.019 ops/s
Iteration  14: 494007.241 ops/s
Iteration  15: 478710.943 ops/s
Iteration  16: 488478.987 ops/s
Iteration  17: 466229.325 ops/s
Iteration  18: 498749.283 ops/s
Iteration  19: 480514.808 ops/s
Iteration  20: 490415.478 ops/s
Iteration  21: 476136.117 ops/s
Iteration  22: 491592.080 ops/s
Iteration  23: 496866.025 ops/s
Iteration  24: 480676.782 ops/s
Iteration  25: 489648.383 ops/s
Iteration  26: 477169.536 ops/s
Iteration  27: 476196.665 ops/s
Iteration  28: 502541.941 ops/s
Iteration  29: 478361.719 ops/s
Iteration  30: 486107.638 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen2":
  485166.590 ±(99.9%) 7527.841 ops/s [Average]
  (min, avg, max) = (464098.167, 485166.590, 504483.403), stdev = 11267.319
  CI (99.9%): [477638.750, 492694.431] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen2  thrpt   30  485166.590 ± 7527.841  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2356901.111 ops/s
# Warmup Iteration   2: 6300995.076 ops/s
# Warmup Iteration   3: 8755795.912 ops/s
# Warmup Iteration   4: 8433736.253 ops/s
# Warmup Iteration   5: 8949063.303 ops/s
# Warmup Iteration   6: 8649567.205 ops/s
# Warmup Iteration   7: 8683272.660 ops/s
# Warmup Iteration   8: 8797257.286 ops/s
# Warmup Iteration   9: 8493647.857 ops/s
# Warmup Iteration  10: 9005403.533 ops/s
# Warmup Iteration  11: 8518534.310 ops/s
# Warmup Iteration  12: 8588434.262 ops/s
# Warmup Iteration  13: 8689315.716 ops/s
# Warmup Iteration  14: 8644084.002 ops/s
# Warmup Iteration  15: 8701805.113 ops/s
# Warmup Iteration  16: 8681925.460 ops/s
# Warmup Iteration  17: 8591569.308 ops/s
# Warmup Iteration  18: 9042700.281 ops/s
# Warmup Iteration  19: 8424919.278 ops/s
# Warmup Iteration  20: 8990629.740 ops/s
# Warmup Iteration  21: 8713556.191 ops/s
# Warmup Iteration  22: 8434944.282 ops/s
# Warmup Iteration  23: 8896591.091 ops/s
# Warmup Iteration  24: 8532212.542 ops/s
# Warmup Iteration  25: 8786499.999 ops/s
# Warmup Iteration  26: 8564313.164 ops/s
# Warmup Iteration  27: 8707182.391 ops/s
# Warmup Iteration  28: 8517901.743 ops/s
# Warmup Iteration  29: 8771289.566 ops/s
# Warmup Iteration  30: 8851153.154 ops/s
Iteration   1: 8497743.553 ops/s
Iteration   2: 8923245.790 ops/s
Iteration   3: 8680068.214 ops/s
Iteration   4: 8651805.838 ops/s
Iteration   5: 8734081.285 ops/s
Iteration   6: 8506439.214 ops/s
Iteration   7: 8882180.669 ops/s
Iteration   8: 8750347.549 ops/s
Iteration   9: 8342544.030 ops/s
Iteration  10: 9089743.087 ops/s
Iteration  11: 8646668.898 ops/s
Iteration  12: 8513769.104 ops/s
Iteration  13: 8604332.619 ops/s
Iteration  14: 8821216.960 ops/s
Iteration  15: 8782225.125 ops/s
Iteration  16: 8460565.155 ops/s
Iteration  17: 8881659.640 ops/s
Iteration  18: 8667144.408 ops/s
Iteration  19: 8470664.062 ops/s
Iteration  20: 8813337.560 ops/s
Iteration  21: 8504213.613 ops/s
Iteration  22: 8692869.048 ops/s
Iteration  23: 8480371.285 ops/s
Iteration  24: 8563790.552 ops/s
Iteration  25: 8825951.051 ops/s
Iteration  26: 8452526.269 ops/s
Iteration  27: 8551764.683 ops/s
Iteration  28: 8960285.386 ops/s
Iteration  29: 8929194.867 ops/s
Iteration  30: 8308931.315 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy":
  8666322.694 ±(99.9%) 131058.986 ops/s [Average]
  (min, avg, max) = (8308931.315, 8666322.694, 9089743.087), stdev = 196162.936
  CI (99.9%): [8535263.708, 8797381.680] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
ObservableFromActionTest._Benchmark.benchmark_fromActionInvokesLazy  thrpt   30  8666322.694 ± 131058.986  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_concatArrayOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_concatArrayOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 121985.925 ops/s
# Warmup Iteration   2: 507435.356 ops/s
# Warmup Iteration   3: 562857.938 ops/s
# Warmup Iteration   4: 574463.075 ops/s
# Warmup Iteration   5: 573213.641 ops/s
# Warmup Iteration   6: 562072.002 ops/s
# Warmup Iteration   7: 499699.266 ops/s
# Warmup Iteration   8: 518857.186 ops/s
# Warmup Iteration   9: 536619.852 ops/s
# Warmup Iteration  10: 581627.792 ops/s
# Warmup Iteration  11: 570771.091 ops/s
# Warmup Iteration  12: 563611.118 ops/s
# Warmup Iteration  13: 571288.568 ops/s
# Warmup Iteration  14: 570233.936 ops/s
# Warmup Iteration  15: 550952.190 ops/s
# Warmup Iteration  16: 585182.302 ops/s
# Warmup Iteration  17: 569615.451 ops/s
# Warmup Iteration  18: 622177.451 ops/s
# Warmup Iteration  19: 624786.890 ops/s
# Warmup Iteration  20: 581210.233 ops/s
# Warmup Iteration  21: 615287.774 ops/s
# Warmup Iteration  22: 596110.923 ops/s
# Warmup Iteration  23: 595357.381 ops/s
# Warmup Iteration  24: 575841.955 ops/s
# Warmup Iteration  25: 614445.215 ops/s
# Warmup Iteration  26: 562804.018 ops/s
# Warmup Iteration  27: 607192.533 ops/s
# Warmup Iteration  28: 606411.800 ops/s
# Warmup Iteration  29: 600656.644 ops/s
# Warmup Iteration  30: 620685.895 ops/s
Iteration   1: 585522.469 ops/s
Iteration   2: 615592.751 ops/s
Iteration   3: 594454.843 ops/s
Iteration   4: 595794.621 ops/s
Iteration   5: 609073.736 ops/s
Iteration   6: 598257.618 ops/s
Iteration   7: 624664.578 ops/s
Iteration   8: 618515.529 ops/s
Iteration   9: 581302.239 ops/s
Iteration  10: 617366.148 ops/s
Iteration  11: 594185.168 ops/s
Iteration  12: 607858.119 ops/s
Iteration  13: 588552.553 ops/s
Iteration  14: 597001.826 ops/s
Iteration  15: 609159.364 ops/s
Iteration  16: 604942.674 ops/s
Iteration  17: 604437.670 ops/s
Iteration  18: 588504.222 ops/s
Iteration  19: 595969.572 ops/s
Iteration  20: 602518.372 ops/s
Iteration  21: 582402.133 ops/s
Iteration  22: 611424.135 ops/s
Iteration  23: 593458.984 ops/s
Iteration  24: 609303.693 ops/s
Iteration  25: 617004.458 ops/s
Iteration  26: 602188.153 ops/s
Iteration  27: 566423.923 ops/s
Iteration  28: 609962.260 ops/s
Iteration  29: 602305.199 ops/s
Iteration  30: 613260.955 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_concatArrayOneIsNull":
  601380.265 ±(99.9%) 8703.467 ops/s [Average]
  (min, avg, max) = (566423.923, 601380.265, 624664.578), stdev = 13026.940
  CI (99.9%): [592676.799, 610083.732] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_concatArrayOneIsNull  thrpt   30  601380.265 ± 8703.467  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 369921.742 ops/s
# Warmup Iteration   2: 2486684.124 ops/s
# Warmup Iteration   3: 3834056.942 ops/s
# Warmup Iteration   4: 3790006.799 ops/s
# Warmup Iteration   5: 3724810.275 ops/s
# Warmup Iteration   6: 3728756.690 ops/s
# Warmup Iteration   7: 3892251.615 ops/s
# Warmup Iteration   8: 3429475.629 ops/s
# Warmup Iteration   9: 3698228.016 ops/s
# Warmup Iteration  10: 3675728.996 ops/s
# Warmup Iteration  11: 3910124.696 ops/s
# Warmup Iteration  12: 3886598.391 ops/s
# Warmup Iteration  13: 3784291.716 ops/s
# Warmup Iteration  14: 4054746.411 ops/s
# Warmup Iteration  15: 3688604.801 ops/s
# Warmup Iteration  16: 3902889.652 ops/s
# Warmup Iteration  17: 3949614.591 ops/s
# Warmup Iteration  18: 3814805.335 ops/s
# Warmup Iteration  19: 3963920.213 ops/s
# Warmup Iteration  20: 3751882.613 ops/s
# Warmup Iteration  21: 3920293.890 ops/s
# Warmup Iteration  22: 3741520.782 ops/s
# Warmup Iteration  23: 4030838.285 ops/s
# Warmup Iteration  24: 3930037.050 ops/s
# Warmup Iteration  25: 3779240.863 ops/s
# Warmup Iteration  26: 3984652.474 ops/s
# Warmup Iteration  27: 3909266.776 ops/s
# Warmup Iteration  28: 3869523.157 ops/s
# Warmup Iteration  29: 3822738.351 ops/s
# Warmup Iteration  30: 3963290.976 ops/s
Iteration   1: 3788481.370 ops/s
Iteration   2: 3865532.636 ops/s
Iteration   3: 3779361.616 ops/s
Iteration   4: 3713393.731 ops/s
Iteration   5: 3951450.377 ops/s
Iteration   6: 3714885.104 ops/s
Iteration   7: 3879565.606 ops/s
Iteration   8: 3710716.068 ops/s
Iteration   9: 3948839.363 ops/s
Iteration  10: 3759815.173 ops/s
Iteration  11: 3910618.242 ops/s
Iteration  12: 3949938.841 ops/s
Iteration  13: 3801503.069 ops/s
Iteration  14: 3788739.501 ops/s
Iteration  15: 3710104.397 ops/s
Iteration  16: 4065432.130 ops/s
Iteration  17: 3694057.415 ops/s
Iteration  18: 3816237.621 ops/s
Iteration  19: 4037425.091 ops/s
Iteration  20: 3798620.348 ops/s
Iteration  21: 3787321.898 ops/s
Iteration  22: 3934256.133 ops/s
Iteration  23: 3714219.929 ops/s
Iteration  24: 3902910.123 ops/s
Iteration  25: 3808555.555 ops/s
Iteration  26: 3910919.662 ops/s
Iteration  27: 3889188.999 ops/s
Iteration  28: 3756635.897 ops/s
Iteration  29: 4015311.683 ops/s
Iteration  30: 3879709.927 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarSource":
  3842791.584 ±(99.9%) 69959.417 ops/s [Average]
  (min, avg, max) = (3694057.415, 3842791.584, 4065432.130), stdev = 104711.971
  CI (99.9%): [3772832.166, 3912751.001] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableSwitchMapMaybeTest._Benchmark.benchmark_scalarSource  thrpt   30  3842791.584 ± 69959.417  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_justAndRetry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_justAndRetry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 160042.263 ops/s
# Warmup Iteration   2: 316364.548 ops/s
# Warmup Iteration   3: 411806.455 ops/s
# Warmup Iteration   4: 426141.839 ops/s
# Warmup Iteration   5: 377323.141 ops/s
# Warmup Iteration   6: 463766.148 ops/s
# Warmup Iteration   7: 437169.794 ops/s
# Warmup Iteration   8: 449228.872 ops/s
# Warmup Iteration   9: 447460.031 ops/s
# Warmup Iteration  10: 437927.715 ops/s
# Warmup Iteration  11: 458529.605 ops/s
# Warmup Iteration  12: 429959.772 ops/s
# Warmup Iteration  13: 454396.296 ops/s
# Warmup Iteration  14: 440054.965 ops/s
# Warmup Iteration  15: 459144.868 ops/s
# Warmup Iteration  16: 440685.708 ops/s
# Warmup Iteration  17: 526857.353 ops/s
# Warmup Iteration  18: 557170.863 ops/s
# Warmup Iteration  19: 564028.676 ops/s
# Warmup Iteration  20: 523037.629 ops/s
# Warmup Iteration  21: 550171.274 ops/s
# Warmup Iteration  22: 537503.838 ops/s
# Warmup Iteration  23: 534998.577 ops/s
# Warmup Iteration  24: 555317.910 ops/s
# Warmup Iteration  25: 520493.469 ops/s
# Warmup Iteration  26: 560005.187 ops/s
# Warmup Iteration  27: 531167.790 ops/s
# Warmup Iteration  28: 550558.210 ops/s
# Warmup Iteration  29: 529341.466 ops/s
# Warmup Iteration  30: 546527.684 ops/s
Iteration   1: 561603.251 ops/s
Iteration   2: 542674.753 ops/s
Iteration   3: 533854.361 ops/s
Iteration   4: 544638.226 ops/s
Iteration   5: 531466.825 ops/s
Iteration   6: 532344.698 ops/s
Iteration   7: 549947.042 ops/s
Iteration   8: 529953.040 ops/s
Iteration   9: 553337.846 ops/s
Iteration  10: 530744.229 ops/s
Iteration  11: 536593.636 ops/s
Iteration  12: 554760.041 ops/s
Iteration  13: 532764.336 ops/s
Iteration  14: 527902.592 ops/s
Iteration  15: 547106.716 ops/s
Iteration  16: 527682.778 ops/s
Iteration  17: 538271.453 ops/s
Iteration  18: 547666.896 ops/s
Iteration  19: 522823.280 ops/s
Iteration  20: 556431.857 ops/s
Iteration  21: 521278.401 ops/s
Iteration  22: 550038.003 ops/s
Iteration  23: 540112.250 ops/s
Iteration  24: 541797.884 ops/s
Iteration  25: 535601.700 ops/s
Iteration  26: 543571.191 ops/s
Iteration  27: 557106.895 ops/s
Iteration  28: 540978.087 ops/s
Iteration  29: 518985.433 ops/s
Iteration  30: 539764.301 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_justAndRetry":
  539726.733 ±(99.9%) 7448.929 ops/s [Average]
  (min, avg, max) = (518985.433, 539726.733, 561603.251), stdev = 11149.207
  CI (99.9%): [532277.805, 547175.662] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableRetryWithPredicateTest._Benchmark.benchmark_justAndRetry  thrpt   30  539726.733 ± 7448.929  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_obervableMaybeobervable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_obervableMaybeobervable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 986676.353 ops/s
# Warmup Iteration   2: 3383751.733 ops/s
# Warmup Iteration   3: 4704728.965 ops/s
# Warmup Iteration   4: 5098351.705 ops/s
# Warmup Iteration   5: 5272163.867 ops/s
# Warmup Iteration   6: 5154148.656 ops/s
# Warmup Iteration   7: 4937649.189 ops/s
# Warmup Iteration   8: 5239945.652 ops/s
# Warmup Iteration   9: 4888983.366 ops/s
# Warmup Iteration  10: 5263135.440 ops/s
# Warmup Iteration  11: 4900514.356 ops/s
# Warmup Iteration  12: 5055703.810 ops/s
# Warmup Iteration  13: 5165665.277 ops/s
# Warmup Iteration  14: 4878546.418 ops/s
# Warmup Iteration  15: 5189061.498 ops/s
# Warmup Iteration  16: 4989338.802 ops/s
# Warmup Iteration  17: 5002552.784 ops/s
# Warmup Iteration  18: 5214114.178 ops/s
# Warmup Iteration  19: 5004757.809 ops/s
# Warmup Iteration  20: 5199723.191 ops/s
# Warmup Iteration  21: 4912199.177 ops/s
# Warmup Iteration  22: 5071238.484 ops/s
# Warmup Iteration  23: 5082315.014 ops/s
# Warmup Iteration  24: 4979461.233 ops/s
# Warmup Iteration  25: 5079775.889 ops/s
# Warmup Iteration  26: 5273076.541 ops/s
# Warmup Iteration  27: 4900338.984 ops/s
# Warmup Iteration  28: 5007911.520 ops/s
# Warmup Iteration  29: 5120763.566 ops/s
# Warmup Iteration  30: 5079085.559 ops/s
Iteration   1: 5186129.117 ops/s
Iteration   2: 5051074.064 ops/s
Iteration   3: 5293806.364 ops/s
Iteration   4: 4935301.028 ops/s
Iteration   5: 4932175.559 ops/s
Iteration   6: 5091943.486 ops/s
Iteration   7: 5092366.402 ops/s
Iteration   8: 5018428.941 ops/s
Iteration   9: 5256769.408 ops/s
Iteration  10: 5090343.042 ops/s
Iteration  11: 5153090.528 ops/s
Iteration  12: 4965519.266 ops/s
Iteration  13: 5266858.891 ops/s
Iteration  14: 5230545.313 ops/s
Iteration  15: 4948510.965 ops/s
Iteration  16: 5073162.071 ops/s
Iteration  17: 5161198.406 ops/s
Iteration  18: 5144594.459 ops/s
Iteration  19: 5194461.781 ops/s
Iteration  20: 4981134.000 ops/s
Iteration  21: 5253340.596 ops/s
Iteration  22: 5065027.581 ops/s
Iteration  23: 5118116.465 ops/s
Iteration  24: 5257170.016 ops/s
Iteration  25: 5102750.754 ops/s
Iteration  26: 5145183.382 ops/s
Iteration  27: 5012898.539 ops/s
Iteration  28: 5186528.297 ops/s
Iteration  29: 4106346.206 ops/s
Iteration  30: 4984567.218 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_obervableMaybeobervable":
  5076644.738 ±(99.9%) 141649.495 ops/s [Average]
  (min, avg, max) = (4106346.206, 5076644.738, 5293806.364), stdev = 212014.312
  CI (99.9%): [4934995.243, 5218294.233] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_obervableMaybeobervable  thrpt   30  5076644.738 ± 141649.495  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_replayIsUnsubscribed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_replayIsUnsubscribed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2574523.679 ops/s
# Warmup Iteration   2: 9246466.455 ops/s
# Warmup Iteration   3: 13120261.388 ops/s
# Warmup Iteration   4: 13778586.352 ops/s
# Warmup Iteration   5: 14294923.115 ops/s
# Warmup Iteration   6: 13516193.377 ops/s
# Warmup Iteration   7: 13421497.660 ops/s
# Warmup Iteration   8: 14467428.410 ops/s
# Warmup Iteration   9: 13711232.672 ops/s
# Warmup Iteration  10: 13338699.742 ops/s
# Warmup Iteration  11: 13804654.970 ops/s
# Warmup Iteration  12: 13737984.319 ops/s
# Warmup Iteration  13: 13827113.722 ops/s
# Warmup Iteration  14: 14594478.243 ops/s
# Warmup Iteration  15: 13342684.054 ops/s
# Warmup Iteration  16: 14221780.508 ops/s
# Warmup Iteration  17: 13669237.739 ops/s
# Warmup Iteration  18: 14346059.110 ops/s
# Warmup Iteration  19: 13825856.622 ops/s
# Warmup Iteration  20: 13958494.620 ops/s
# Warmup Iteration  21: 14082261.650 ops/s
# Warmup Iteration  22: 13503727.128 ops/s
# Warmup Iteration  23: 13737554.885 ops/s
# Warmup Iteration  24: 14270893.191 ops/s
# Warmup Iteration  25: 13545919.039 ops/s
# Warmup Iteration  26: 14370901.548 ops/s
# Warmup Iteration  27: 13468409.204 ops/s
# Warmup Iteration  28: 13999835.446 ops/s
# Warmup Iteration  29: 13704470.347 ops/s
# Warmup Iteration  30: 13883481.363 ops/s
Iteration   1: 14317454.709 ops/s
Iteration   2: 13432102.482 ops/s
Iteration   3: 13960327.866 ops/s
Iteration   4: 13613872.267 ops/s
Iteration   5: 13795043.151 ops/s
Iteration   6: 14329565.021 ops/s
Iteration   7: 13622961.960 ops/s
Iteration   8: 14029578.097 ops/s
Iteration   9: 14117630.200 ops/s
Iteration  10: 13382700.515 ops/s
Iteration  11: 14608153.974 ops/s
Iteration  12: 13523841.952 ops/s
Iteration  13: 14424054.371 ops/s
Iteration  14: 14224177.806 ops/s
Iteration  15: 13466186.351 ops/s
Iteration  16: 13883705.049 ops/s
Iteration  17: 13927369.994 ops/s
Iteration  18: 13845718.471 ops/s
Iteration  19: 14326512.206 ops/s
Iteration  20: 13600443.698 ops/s
Iteration  21: 14037822.108 ops/s
Iteration  22: 13885626.898 ops/s
Iteration  23: 13426650.746 ops/s
Iteration  24: 13938727.399 ops/s
Iteration  25: 13610615.757 ops/s
Iteration  26: 14406468.643 ops/s
Iteration  27: 13395058.010 ops/s
Iteration  28: 13976098.592 ops/s
Iteration  29: 14188354.878 ops/s
Iteration  30: 14118661.358 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_replayIsUnsubscribed":
  13913849.484 ±(99.9%) 233435.386 ops/s [Average]
  (min, avg, max) = (13382700.515, 13913849.484, 14608153.974), stdev = 349395.122
  CI (99.9%): [13680414.099, 14147284.870] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
ObservableRefCountTest._Benchmark.benchmark_replayIsUnsubscribed  thrpt   30  13913849.484 ± 233435.386  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_usingWithResourceFactoryErrorDisposeEagerly$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_usingWithResourceFactoryErrorDisposeEagerly

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 363144.651 ops/s
# Warmup Iteration   2: 581895.611 ops/s
# Warmup Iteration   3: 649556.148 ops/s
# Warmup Iteration   4: 590136.615 ops/s
# Warmup Iteration   5: 674895.170 ops/s
# Warmup Iteration   6: 587816.013 ops/s
# Warmup Iteration   7: 662425.805 ops/s
# Warmup Iteration   8: 657767.976 ops/s
# Warmup Iteration   9: 653842.131 ops/s
# Warmup Iteration  10: 678987.858 ops/s
# Warmup Iteration  11: 675369.240 ops/s
# Warmup Iteration  12: 675009.202 ops/s
# Warmup Iteration  13: 678157.667 ops/s
# Warmup Iteration  14: 658856.606 ops/s
# Warmup Iteration  15: 657305.432 ops/s
# Warmup Iteration  16: 690064.644 ops/s
# Warmup Iteration  17: 680606.040 ops/s
# Warmup Iteration  18: 725229.561 ops/s
# Warmup Iteration  19: 717317.123 ops/s
# Warmup Iteration  20: 691493.116 ops/s
# Warmup Iteration  21: 720127.770 ops/s
# Warmup Iteration  22: 711715.059 ops/s
# Warmup Iteration  23: 712386.880 ops/s
# Warmup Iteration  24: 701275.275 ops/s
# Warmup Iteration  25: 681492.938 ops/s
# Warmup Iteration  26: 731851.060 ops/s
# Warmup Iteration  27: 687294.097 ops/s
# Warmup Iteration  28: 701983.835 ops/s
# Warmup Iteration  29: 718695.894 ops/s
# Warmup Iteration  30: 680514.156 ops/s
Iteration   1: 719774.443 ops/s
Iteration   2: 693387.197 ops/s
Iteration   3: 709454.678 ops/s
Iteration   4: 689312.277 ops/s
Iteration   5: 695393.829 ops/s
Iteration   6: 722994.429 ops/s
Iteration   7: 731554.439 ops/s
Iteration   8: 700022.810 ops/s
Iteration   9: 700057.365 ops/s
Iteration  10: 703775.078 ops/s
Iteration  11: 696804.621 ops/s
Iteration  12: 698964.857 ops/s
Iteration  13: 685325.131 ops/s
Iteration  14: 702969.959 ops/s
Iteration  15: 680151.831 ops/s
Iteration  16: 707831.659 ops/s
Iteration  17: 720438.748 ops/s
Iteration  18: 696731.752 ops/s
Iteration  19: 713583.673 ops/s
Iteration  20: 726412.771 ops/s
Iteration  21: 685085.995 ops/s
Iteration  22: 721954.550 ops/s
Iteration  23: 691165.651 ops/s
Iteration  24: 587830.127 ops/s
Iteration  25: 688681.316 ops/s
Iteration  26: 705433.166 ops/s
Iteration  27: 731641.359 ops/s
Iteration  28: 696605.107 ops/s
Iteration  29: 690967.588 ops/s
Iteration  30: 706492.681 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_usingWithResourceFactoryErrorDisposeEagerly":
  700026.636 ±(99.9%) 17037.306 ops/s [Average]
  (min, avg, max) = (587830.127, 700026.636, 731641.359), stdev = 25500.639
  CI (99.9%): [682989.331, 717063.942] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score       Error  Units
ObservableUsingTest._Benchmark.benchmark_usingWithResourceFactoryErrorDisposeEagerly  thrpt   30  700026.636 ± 17037.306  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_usingWithResourceFactoryError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_usingWithResourceFactoryError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 378970.222 ops/s
# Warmup Iteration   2: 581937.522 ops/s
# Warmup Iteration   3: 669452.564 ops/s
# Warmup Iteration   4: 645894.064 ops/s
# Warmup Iteration   5: 663889.478 ops/s
# Warmup Iteration   6: 659151.843 ops/s
# Warmup Iteration   7: 691691.489 ops/s
# Warmup Iteration   8: 661574.403 ops/s
# Warmup Iteration   9: 652238.550 ops/s
# Warmup Iteration  10: 665938.076 ops/s
# Warmup Iteration  11: 693058.005 ops/s
# Warmup Iteration  12: 649656.164 ops/s
# Warmup Iteration  13: 680760.506 ops/s
# Warmup Iteration  14: 686450.788 ops/s
# Warmup Iteration  15: 655087.921 ops/s
# Warmup Iteration  16: 680900.007 ops/s
# Warmup Iteration  17: 702531.330 ops/s
# Warmup Iteration  18: 712497.076 ops/s
# Warmup Iteration  19: 728084.631 ops/s
# Warmup Iteration  20: 704748.375 ops/s
# Warmup Iteration  21: 725711.867 ops/s
# Warmup Iteration  22: 705611.577 ops/s
# Warmup Iteration  23: 689164.608 ops/s
# Warmup Iteration  24: 713294.089 ops/s
# Warmup Iteration  25: 738251.834 ops/s
# Warmup Iteration  26: 688495.833 ops/s
# Warmup Iteration  27: 734997.548 ops/s
# Warmup Iteration  28: 686123.995 ops/s
# Warmup Iteration  29: 730408.675 ops/s
# Warmup Iteration  30: 681876.691 ops/s
Iteration   1: 699832.237 ops/s
Iteration   2: 710858.038 ops/s
Iteration   3: 707196.351 ops/s
Iteration   4: 704511.243 ops/s
Iteration   5: 716723.880 ops/s
Iteration   6: 717297.072 ops/s
Iteration   7: 730768.799 ops/s
Iteration   8: 706763.142 ops/s
Iteration   9: 682647.519 ops/s
Iteration  10: 721434.463 ops/s
Iteration  11: 711978.261 ops/s
Iteration  12: 699490.134 ops/s
Iteration  13: 718950.013 ops/s
Iteration  14: 698771.216 ops/s
Iteration  15: 722035.682 ops/s
Iteration  16: 677736.932 ops/s
Iteration  17: 725830.590 ops/s
Iteration  18: 714793.499 ops/s
Iteration  19: 706810.021 ops/s
Iteration  20: 702244.476 ops/s
Iteration  21: 734388.946 ops/s
Iteration  22: 729565.001 ops/s
Iteration  23: 695470.852 ops/s
Iteration  24: 724835.749 ops/s
Iteration  25: 683914.361 ops/s
Iteration  26: 721559.616 ops/s
Iteration  27: 694423.697 ops/s
Iteration  28: 710070.012 ops/s
Iteration  29: 721979.805 ops/s
Iteration  30: 686821.969 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_usingWithResourceFactoryError":
  709323.452 ±(99.9%) 10036.307 ops/s [Average]
  (min, avg, max) = (677736.932, 709323.452, 734388.946), stdev = 15021.873
  CI (99.9%): [699287.145, 719359.760] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableUsingTest._Benchmark.benchmark_usingWithResourceFactoryError  thrpt   30  709323.452 ± 10036.307  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 96454.353 ops/s
# Warmup Iteration   2: 428350.145 ops/s
# Warmup Iteration   3: 464148.815 ops/s
# Warmup Iteration   4: 496919.352 ops/s
# Warmup Iteration   5: 492688.952 ops/s
# Warmup Iteration   6: 515118.857 ops/s
# Warmup Iteration   7: 495530.071 ops/s
# Warmup Iteration   8: 503630.510 ops/s
# Warmup Iteration   9: 491897.339 ops/s
# Warmup Iteration  10: 508780.565 ops/s
# Warmup Iteration  11: 481005.199 ops/s
# Warmup Iteration  12: 501664.843 ops/s
# Warmup Iteration  13: 513568.019 ops/s
# Warmup Iteration  14: 512332.077 ops/s
# Warmup Iteration  15: 492273.476 ops/s
# Warmup Iteration  16: 521156.276 ops/s
# Warmup Iteration  17: 507043.181 ops/s
# Warmup Iteration  18: 539687.701 ops/s
# Warmup Iteration  19: 519910.452 ops/s
# Warmup Iteration  20: 518610.058 ops/s
# Warmup Iteration  21: 531337.255 ops/s
# Warmup Iteration  22: 514579.786 ops/s
# Warmup Iteration  23: 546161.818 ops/s
# Warmup Iteration  24: 527980.546 ops/s
# Warmup Iteration  25: 516856.159 ops/s
# Warmup Iteration  26: 527934.190 ops/s
# Warmup Iteration  27: 518160.740 ops/s
# Warmup Iteration  28: 516444.037 ops/s
# Warmup Iteration  29: 541529.089 ops/s
# Warmup Iteration  30: 516195.553 ops/s
Iteration   1: 521207.434 ops/s
Iteration   2: 529062.026 ops/s
Iteration   3: 513947.325 ops/s
Iteration   4: 529111.174 ops/s
Iteration   5: 537332.522 ops/s
Iteration   6: 506634.723 ops/s
Iteration   7: 543720.155 ops/s
Iteration   8: 506102.058 ops/s
Iteration   9: 546484.833 ops/s
Iteration  10: 504682.124 ops/s
Iteration  11: 533063.858 ops/s
Iteration  12: 538344.666 ops/s
Iteration  13: 510550.450 ops/s
Iteration  14: 539269.169 ops/s
Iteration  15: 522729.253 ops/s
Iteration  16: 503879.795 ops/s
Iteration  17: 539634.558 ops/s
Iteration  18: 520243.607 ops/s
Iteration  19: 432096.367 ops/s
Iteration  20: 537106.380 ops/s
Iteration  21: 516204.557 ops/s
Iteration  22: 536659.178 ops/s
Iteration  23: 512871.753 ops/s
Iteration  24: 539113.254 ops/s
Iteration  25: 491490.924 ops/s
Iteration  26: 519904.078 ops/s
Iteration  27: 542460.231 ops/s
Iteration  28: 533227.193 ops/s
Iteration  29: 519967.081 ops/s
Iteration  30: 534494.427 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeToObservableTest._Benchmark.benchmark_doubleOnSubscribe":
  522053.172 ±(99.9%) 14835.233 ops/s [Average]
  (min, avg, max) = (432096.367, 522053.172, 546484.833), stdev = 22204.680
  CI (99.9%): [507217.938, 536888.405] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
MaybeToObservableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  522053.172 ± 14835.233  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceMaybeBadSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceMaybeBadSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.778 ops/s
# Warmup Iteration   2: 16040.096 ops/s
# Warmup Iteration   3: 33614.575 ops/s
# Warmup Iteration   4: 47277.869 ops/s
# Warmup Iteration   5: 79648.376 ops/s
# Warmup Iteration   6: 149904.510 ops/s
# Warmup Iteration   7: 141311.553 ops/s
# Warmup Iteration   8: 145703.518 ops/s
# Warmup Iteration   9: 140451.221 ops/s
# Warmup Iteration  10: 149832.172 ops/s
# Warmup Iteration  11: 151018.691 ops/s
# Warmup Iteration  12: 150425.042 ops/s
# Warmup Iteration  13: 151460.162 ops/s
# Warmup Iteration  14: 156253.163 ops/s
# Warmup Iteration  15: 140823.523 ops/s
# Warmup Iteration  16: 150900.200 ops/s
# Warmup Iteration  17: 157323.780 ops/s
# Warmup Iteration  18: 153106.046 ops/s
# Warmup Iteration  19: 152663.941 ops/s
# Warmup Iteration  20: 157922.015 ops/s
# Warmup Iteration  21: 141227.314 ops/s
# Warmup Iteration  22: 152851.440 ops/s
# Warmup Iteration  23: 160117.701 ops/s
# Warmup Iteration  24: 151668.461 ops/s
# Warmup Iteration  25: 149965.021 ops/s
# Warmup Iteration  26: 155430.443 ops/s
# Warmup Iteration  27: 160372.155 ops/s
# Warmup Iteration  28: 148718.914 ops/s
# Warmup Iteration  29: 158046.684 ops/s
# Warmup Iteration  30: 148102.276 ops/s
Iteration   1: 159569.791 ops/s
Iteration   2: 157576.288 ops/s
Iteration   3: 148371.502 ops/s
Iteration   4: 157181.597 ops/s
Iteration   5: 146895.918 ops/s
Iteration   6: 148518.263 ops/s
Iteration   7: 152692.967 ops/s
Iteration   8: 145619.087 ops/s
Iteration   9: 155358.274 ops/s
Iteration  10: 150328.002 ops/s
Iteration  11: 151745.584 ops/s
Iteration  12: 151760.941 ops/s
Iteration  13: 157255.773 ops/s
Iteration  14: 150273.483 ops/s
Iteration  15: 155464.226 ops/s
Iteration  16: 149678.896 ops/s
Iteration  17: 143976.374 ops/s
Iteration  18: 151973.951 ops/s
Iteration  19: 150835.354 ops/s
Iteration  20: 158015.438 ops/s
Iteration  21: 154192.612 ops/s
Iteration  22: 150885.452 ops/s
Iteration  23: 160533.510 ops/s
Iteration  24: 148939.311 ops/s
Iteration  25: 152210.399 ops/s
Iteration  26: 149267.530 ops/s
Iteration  27: 153544.646 ops/s
Iteration  28: 153188.852 ops/s
Iteration  29: 150483.603 ops/s
Iteration  30: 153189.761 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReduceTest._Benchmark.benchmark_reduceMaybeBadSource":
  152317.579 ±(99.9%) 2695.759 ops/s [Average]
  (min, avg, max) = (143976.374, 152317.579, 160533.510), stdev = 4034.885
  CI (99.9%): [149621.821, 155013.338] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableReduceTest._Benchmark.benchmark_reduceMaybeBadSource  thrpt   30  152317.579 ± 2695.759  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 590310.712 ops/s
# Warmup Iteration   2: 2481688.894 ops/s
# Warmup Iteration   3: 3759755.057 ops/s
# Warmup Iteration   4: 4253819.329 ops/s
# Warmup Iteration   5: 4115743.121 ops/s
# Warmup Iteration   6: 4269302.238 ops/s
# Warmup Iteration   7: 4343811.303 ops/s
# Warmup Iteration   8: 4142785.034 ops/s
# Warmup Iteration   9: 4399016.243 ops/s
# Warmup Iteration  10: 4206054.823 ops/s
# Warmup Iteration  11: 4134403.436 ops/s
# Warmup Iteration  12: 4336210.312 ops/s
# Warmup Iteration  13: 4205331.477 ops/s
# Warmup Iteration  14: 4478596.944 ops/s
# Warmup Iteration  15: 4383871.371 ops/s
# Warmup Iteration  16: 4266857.044 ops/s
# Warmup Iteration  17: 4296134.583 ops/s
# Warmup Iteration  18: 4374176.651 ops/s
# Warmup Iteration  19: 4104194.102 ops/s
# Warmup Iteration  20: 4350058.116 ops/s
# Warmup Iteration  21: 4142504.842 ops/s
# Warmup Iteration  22: 4315506.175 ops/s
# Warmup Iteration  23: 4439357.293 ops/s
# Warmup Iteration  24: 4186056.338 ops/s
# Warmup Iteration  25: 4141111.934 ops/s
# Warmup Iteration  26: 4403525.069 ops/s
# Warmup Iteration  27: 4322654.114 ops/s
# Warmup Iteration  28: 4243563.660 ops/s
# Warmup Iteration  29: 4464910.942 ops/s
# Warmup Iteration  30: 4154433.132 ops/s
Iteration   1: 4334331.172 ops/s
Iteration   2: 4236019.994 ops/s
Iteration   3: 4235743.085 ops/s
Iteration   4: 4216509.562 ops/s
Iteration   5: 4284637.555 ops/s
Iteration   6: 4252323.573 ops/s
Iteration   7: 4257917.396 ops/s
Iteration   8: 4311952.420 ops/s
Iteration   9: 4315041.354 ops/s
Iteration  10: 4274483.916 ops/s
Iteration  11: 4288634.967 ops/s
Iteration  12: 4254997.713 ops/s
Iteration  13: 3533734.290 ops/s
Iteration  14: 4275341.161 ops/s
Iteration  15: 4088137.674 ops/s
Iteration  16: 4398910.725 ops/s
Iteration  17: 4126669.814 ops/s
Iteration  18: 4403103.601 ops/s
Iteration  19: 4323850.257 ops/s
Iteration  20: 4330153.205 ops/s
Iteration  21: 4420569.683 ops/s
Iteration  22: 4380301.683 ops/s
Iteration  23: 4233726.477 ops/s
Iteration  24: 4397777.965 ops/s
Iteration  25: 4087057.784 ops/s
Iteration  26: 4277726.325 ops/s
Iteration  27: 4218560.475 ops/s
Iteration  28: 4272455.894 ops/s
Iteration  29: 4334163.162 ops/s
Iteration  30: 4246675.821 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_dispose":
  4253716.957 ±(99.9%) 106460.505 ops/s [Average]
  (min, avg, max) = (3533734.290, 4253716.957, 4420569.683), stdev = 159345.085
  CI (99.9%): [4147256.451, 4360177.462] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
MaybeDoAfterSuccessTest._Benchmark.benchmark_dispose  thrpt   30  4253716.957 ± 106460.505  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapErrorEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapErrorEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90542529.952 ops/s
# Warmup Iteration   2: 161027798.793 ops/s
# Warmup Iteration   3: 199797326.657 ops/s
# Warmup Iteration   4: 194990365.961 ops/s
# Warmup Iteration   5: 195307236.773 ops/s
# Warmup Iteration   6: 193824221.562 ops/s
# Warmup Iteration   7: 190575737.187 ops/s
# Warmup Iteration   8: 196098831.733 ops/s
# Warmup Iteration   9: 192469302.207 ops/s
# Warmup Iteration  10: 190154719.323 ops/s
# Warmup Iteration  11: 196697309.435 ops/s
# Warmup Iteration  12: 198510712.988 ops/s
# Warmup Iteration  13: 189945163.484 ops/s
# Warmup Iteration  14: 202041339.731 ops/s
# Warmup Iteration  15: 190347177.826 ops/s
# Warmup Iteration  16: 194158394.580 ops/s
# Warmup Iteration  17: 195810314.111 ops/s
# Warmup Iteration  18: 192154778.880 ops/s
# Warmup Iteration  19: 197260638.349 ops/s
# Warmup Iteration  20: 193510468.568 ops/s
# Warmup Iteration  21: 193286663.051 ops/s
# Warmup Iteration  22: 194271764.021 ops/s
# Warmup Iteration  23: 196897027.783 ops/s
# Warmup Iteration  24: 193361231.244 ops/s
# Warmup Iteration  25: 187381533.027 ops/s
# Warmup Iteration  26: 204808642.495 ops/s
# Warmup Iteration  27: 185945866.389 ops/s
# Warmup Iteration  28: 190099776.656 ops/s
# Warmup Iteration  29: 196162975.394 ops/s
# Warmup Iteration  30: 191165363.317 ops/s
Iteration   1: 196969748.145 ops/s
Iteration   2: 196763245.718 ops/s
Iteration   3: 204363930.605 ops/s
Iteration   4: 184966108.408 ops/s
Iteration   5: 189561637.486 ops/s
Iteration   6: 202065441.043 ops/s
Iteration   7: 192195246.963 ops/s
Iteration   8: 189824866.111 ops/s
Iteration   9: 201508161.128 ops/s
Iteration  10: 189680026.645 ops/s
Iteration  11: 202362703.349 ops/s
Iteration  12: 187210547.290 ops/s
Iteration  13: 197415857.166 ops/s
Iteration  14: 192212723.084 ops/s
Iteration  15: 191664304.391 ops/s
Iteration  16: 198997071.011 ops/s
Iteration  17: 197815489.764 ops/s
Iteration  18: 200352215.591 ops/s
Iteration  19: 198012272.698 ops/s
Iteration  20: 184656760.635 ops/s
Iteration  21: 203587630.329 ops/s
Iteration  22: 205677250.812 ops/s
Iteration  23: 186982396.016 ops/s
Iteration  24: 193692413.913 ops/s
Iteration  25: 194808372.092 ops/s
Iteration  26: 191194707.893 ops/s
Iteration  27: 198325148.251 ops/s
Iteration  28: 192640484.809 ops/s
Iteration  29: 192556402.863 ops/s
Iteration  30: 196379216.700 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapErrorEmptySource":
  195148079.364 ±(99.9%) 3884807.745 ops/s [Average]
  (min, avg, max) = (184656760.635, 195148079.364, 205677250.812), stdev = 5814597.788
  CI (99.9%): [191263271.619, 199032887.108] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt          Score         Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapErrorEmptySource  thrpt   30  195148079.364 ± 3884807.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableJust$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableJust

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 801466.431 ops/s
# Warmup Iteration   2: 4262691.037 ops/s
# Warmup Iteration   3: 6287143.676 ops/s
# Warmup Iteration   4: 4979716.916 ops/s
# Warmup Iteration   5: 6160935.242 ops/s
# Warmup Iteration   6: 6086939.310 ops/s
# Warmup Iteration   7: 6052724.870 ops/s
# Warmup Iteration   8: 6140486.690 ops/s
# Warmup Iteration   9: 6391413.064 ops/s
# Warmup Iteration  10: 5927747.152 ops/s
# Warmup Iteration  11: 6020228.443 ops/s
# Warmup Iteration  12: 6106176.420 ops/s
# Warmup Iteration  13: 6188194.660 ops/s
# Warmup Iteration  14: 6248611.139 ops/s
# Warmup Iteration  15: 5907204.679 ops/s
# Warmup Iteration  16: 6176231.894 ops/s
# Warmup Iteration  17: 5982681.516 ops/s
# Warmup Iteration  18: 6168250.916 ops/s
# Warmup Iteration  19: 6343119.190 ops/s
# Warmup Iteration  20: 6151740.814 ops/s
# Warmup Iteration  21: 6235585.408 ops/s
# Warmup Iteration  22: 6087212.792 ops/s
# Warmup Iteration  23: 6136519.652 ops/s
# Warmup Iteration  24: 5970449.262 ops/s
# Warmup Iteration  25: 6333776.092 ops/s
# Warmup Iteration  26: 6146817.292 ops/s
# Warmup Iteration  27: 6293697.020 ops/s
# Warmup Iteration  28: 6230633.347 ops/s
# Warmup Iteration  29: 6043630.690 ops/s
# Warmup Iteration  30: 6298929.045 ops/s
Iteration   1: 6135428.048 ops/s
Iteration   2: 6195426.221 ops/s
Iteration   3: 6407589.834 ops/s
Iteration   4: 6239255.818 ops/s
Iteration   5: 6057302.641 ops/s
Iteration   6: 6297122.302 ops/s
Iteration   7: 4776744.651 ops/s
Iteration   8: 6410408.510 ops/s
Iteration   9: 5984020.578 ops/s
Iteration  10: 6217512.506 ops/s
Iteration  11: 6125551.863 ops/s
Iteration  12: 6042406.896 ops/s
Iteration  13: 6199428.268 ops/s
Iteration  14: 6137334.524 ops/s
Iteration  15: 5934878.143 ops/s
Iteration  16: 5990580.956 ops/s
Iteration  17: 6381656.894 ops/s
Iteration  18: 6295940.237 ops/s
Iteration  19: 6138047.258 ops/s
Iteration  20: 6030393.086 ops/s
Iteration  21: 6396108.487 ops/s
Iteration  22: 6088303.952 ops/s
Iteration  23: 6201395.016 ops/s
Iteration  24: 6120977.404 ops/s
Iteration  25: 6340030.879 ops/s
Iteration  26: 5976014.973 ops/s
Iteration  27: 6073897.236 ops/s
Iteration  28: 6353699.768 ops/s
Iteration  29: 6020205.349 ops/s
Iteration  30: 6215934.841 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromObservableJust":
  6126119.905 ±(99.9%) 194354.689 ops/s [Average]
  (min, avg, max) = (4776744.651, 6126119.905, 6410408.510), stdev = 290900.971
  CI (99.9%): [5931765.216, 6320474.594] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_fromObservableJust  thrpt   30  6126119.905 ± 194354.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81550.093 ops/s
# Warmup Iteration   2: 359550.916 ops/s
# Warmup Iteration   3: 426042.320 ops/s
# Warmup Iteration   4: 434615.786 ops/s
# Warmup Iteration   5: 439174.731 ops/s
# Warmup Iteration   6: 422352.473 ops/s
# Warmup Iteration   7: 430555.490 ops/s
# Warmup Iteration   8: 422286.618 ops/s
# Warmup Iteration   9: 402110.426 ops/s
# Warmup Iteration  10: 434756.554 ops/s
# Warmup Iteration  11: 447481.293 ops/s
# Warmup Iteration  12: 424699.731 ops/s
# Warmup Iteration  13: 441503.729 ops/s
# Warmup Iteration  14: 430411.729 ops/s
# Warmup Iteration  15: 439513.665 ops/s
# Warmup Iteration  16: 444411.405 ops/s
# Warmup Iteration  17: 438597.580 ops/s
# Warmup Iteration  18: 436331.899 ops/s
# Warmup Iteration  19: 468433.418 ops/s
# Warmup Iteration  20: 439538.187 ops/s
# Warmup Iteration  21: 446925.133 ops/s
# Warmup Iteration  22: 452201.254 ops/s
# Warmup Iteration  23: 449619.032 ops/s
# Warmup Iteration  24: 447272.246 ops/s
# Warmup Iteration  25: 460107.322 ops/s
# Warmup Iteration  26: 437977.333 ops/s
# Warmup Iteration  27: 456542.625 ops/s
# Warmup Iteration  28: 434602.709 ops/s
# Warmup Iteration  29: 450676.918 ops/s
# Warmup Iteration  30: 442090.881 ops/s
Iteration   1: 451042.607 ops/s
Iteration   2: 464606.408 ops/s
Iteration   3: 466482.868 ops/s
Iteration   4: 439972.068 ops/s
Iteration   5: 448121.461 ops/s
Iteration   6: 455810.161 ops/s
Iteration   7: 438339.646 ops/s
Iteration   8: 449590.290 ops/s
Iteration   9: 456214.389 ops/s
Iteration  10: 436993.991 ops/s
Iteration  11: 458481.770 ops/s
Iteration  12: 433501.740 ops/s
Iteration  13: 442170.987 ops/s
Iteration  14: 456304.663 ops/s
Iteration  15: 454159.290 ops/s
Iteration  16: 431264.711 ops/s
Iteration  17: 453936.135 ops/s
Iteration  18: 444035.998 ops/s
Iteration  19: 450707.418 ops/s
Iteration  20: 465135.537 ops/s
Iteration  21: 437369.092 ops/s
Iteration  22: 451332.761 ops/s
Iteration  23: 458311.904 ops/s
Iteration  24: 445235.790 ops/s
Iteration  25: 456093.979 ops/s
Iteration  26: 467910.273 ops/s
Iteration  27: 437814.508 ops/s
Iteration  28: 453929.126 ops/s
Iteration  29: 470484.003 ops/s
Iteration  30: 432538.053 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableFunctionReturnsNull":
  450263.054 ±(99.9%) 7401.815 ops/s [Average]
  (min, avg, max) = (431264.711, 450263.054, 470484.003), stdev = 11078.690
  CI (99.9%): [442861.239, 457664.870] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableFunctionReturnsNull  thrpt   30  450263.054 ± 7401.815  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestIterableFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestIterableFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90676.734 ops/s
# Warmup Iteration   2: 363714.478 ops/s
# Warmup Iteration   3: 435823.876 ops/s
# Warmup Iteration   4: 416019.730 ops/s
# Warmup Iteration   5: 457192.632 ops/s
# Warmup Iteration   6: 443946.981 ops/s
# Warmup Iteration   7: 424910.905 ops/s
# Warmup Iteration   8: 413138.707 ops/s
# Warmup Iteration   9: 432382.055 ops/s
# Warmup Iteration  10: 463388.699 ops/s
# Warmup Iteration  11: 434474.178 ops/s
# Warmup Iteration  12: 449630.561 ops/s
# Warmup Iteration  13: 429264.967 ops/s
# Warmup Iteration  14: 449424.104 ops/s
# Warmup Iteration  15: 431425.838 ops/s
# Warmup Iteration  16: 438368.398 ops/s
# Warmup Iteration  17: 444215.908 ops/s
# Warmup Iteration  18: 455140.622 ops/s
# Warmup Iteration  19: 443045.147 ops/s
# Warmup Iteration  20: 470110.232 ops/s
# Warmup Iteration  21: 427419.540 ops/s
# Warmup Iteration  22: 442817.999 ops/s
# Warmup Iteration  23: 450354.972 ops/s
# Warmup Iteration  24: 451836.157 ops/s
# Warmup Iteration  25: 478602.302 ops/s
# Warmup Iteration  26: 464139.008 ops/s
# Warmup Iteration  27: 427536.958 ops/s
# Warmup Iteration  28: 465633.494 ops/s
# Warmup Iteration  29: 446402.898 ops/s
# Warmup Iteration  30: 472628.966 ops/s
Iteration   1: 423199.958 ops/s
Iteration   2: 388607.163 ops/s
Iteration   3: 447094.720 ops/s
Iteration   4: 448548.364 ops/s
Iteration   5: 470753.134 ops/s
Iteration   6: 444414.365 ops/s
Iteration   7: 446244.528 ops/s
Iteration   8: 460788.033 ops/s
Iteration   9: 479543.403 ops/s
Iteration  10: 442260.111 ops/s
Iteration  11: 454115.655 ops/s
Iteration  12: 471389.291 ops/s
Iteration  13: 457611.057 ops/s
Iteration  14: 456685.716 ops/s
Iteration  15: 447088.120 ops/s
Iteration  16: 451878.275 ops/s
Iteration  17: 457488.237 ops/s
Iteration  18: 463224.874 ops/s
Iteration  19: 460669.511 ops/s
Iteration  20: 455349.948 ops/s
Iteration  21: 457092.029 ops/s
Iteration  22: 467099.797 ops/s
Iteration  23: 471790.258 ops/s
Iteration  24: 448240.786 ops/s
Iteration  25: 467509.532 ops/s
Iteration  26: 440303.389 ops/s
Iteration  27: 473649.029 ops/s
Iteration  28: 478249.454 ops/s
Iteration  29: 449246.045 ops/s
Iteration  30: 460918.634 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_combineLatestIterableFunctionReturnsNull":
  454701.780 ±(99.9%) 11783.332 ops/s [Average]
  (min, avg, max) = (388607.163, 454701.780, 479543.403), stdev = 17636.738
  CI (99.9%): [442918.449, 466485.112] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_combineLatestIterableFunctionReturnsNull  thrpt   30  454701.780 ± 11783.332  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejectedDelayErrorr$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejectedDelayErrorr

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2321911.659 ops/s
# Warmup Iteration   2: 4655131.033 ops/s
# Warmup Iteration   3: 6685060.383 ops/s
# Warmup Iteration   4: 6281681.629 ops/s
# Warmup Iteration   5: 6738920.694 ops/s
# Warmup Iteration   6: 6194547.833 ops/s
# Warmup Iteration   7: 6402422.407 ops/s
# Warmup Iteration   8: 6433801.857 ops/s
# Warmup Iteration   9: 6472288.855 ops/s
# Warmup Iteration  10: 6394858.973 ops/s
# Warmup Iteration  11: 6844826.443 ops/s
# Warmup Iteration  12: 6680805.316 ops/s
# Warmup Iteration  13: 6513936.014 ops/s
# Warmup Iteration  14: 6396849.096 ops/s
# Warmup Iteration  15: 6607734.950 ops/s
# Warmup Iteration  16: 6183028.765 ops/s
# Warmup Iteration  17: 6747956.812 ops/s
# Warmup Iteration  18: 6421795.179 ops/s
# Warmup Iteration  19: 6371247.230 ops/s
# Warmup Iteration  20: 6590517.589 ops/s
# Warmup Iteration  21: 6419375.159 ops/s
# Warmup Iteration  22: 6453040.481 ops/s
# Warmup Iteration  23: 6706753.613 ops/s
# Warmup Iteration  24: 6371050.909 ops/s
# Warmup Iteration  25: 6285089.689 ops/s
# Warmup Iteration  26: 6425018.423 ops/s
# Warmup Iteration  27: 6770538.221 ops/s
# Warmup Iteration  28: 6484862.004 ops/s
# Warmup Iteration  29: 6328552.243 ops/s
# Warmup Iteration  30: 6767373.799 ops/s
Iteration   1: 6500388.856 ops/s
Iteration   2: 6383046.476 ops/s
Iteration   3: 6504070.022 ops/s
Iteration   4: 6568290.764 ops/s
Iteration   5: 6474868.450 ops/s
Iteration   6: 6829683.737 ops/s
Iteration   7: 6380034.904 ops/s
Iteration   8: 6149178.709 ops/s
Iteration   9: 6562261.853 ops/s
Iteration  10: 6432132.831 ops/s
Iteration  11: 6582793.997 ops/s
Iteration  12: 6398132.038 ops/s
Iteration  13: 6501415.333 ops/s
Iteration  14: 6605079.792 ops/s
Iteration  15: 6324067.091 ops/s
Iteration  16: 6446166.107 ops/s
Iteration  17: 6312858.742 ops/s
Iteration  18: 6630235.799 ops/s
Iteration  19: 6391113.608 ops/s
Iteration  20: 6655544.812 ops/s
Iteration  21: 6194044.785 ops/s
Iteration  22: 6638033.357 ops/s
Iteration  23: 6357426.922 ops/s
Iteration  24: 6444049.881 ops/s
Iteration  25: 6884058.484 ops/s
Iteration  26: 6171423.160 ops/s
Iteration  27: 6558036.033 ops/s
Iteration  28: 6531149.322 ops/s
Iteration  29: 6752207.343 ops/s
Iteration  30: 6896919.716 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejectedDelayErrorr":
  6501957.098 ±(99.9%) 126568.119 ops/s [Average]
  (min, avg, max) = (6149178.709, 6501957.098, 6896919.716), stdev = 189441.217
  CI (99.9%): [6375388.978, 6628525.217] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score        Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_fusionRejectedDelayErrorr  thrpt   30  6501957.098 ± 126568.119  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 574482.114 ops/s
# Warmup Iteration   2: 3080719.844 ops/s
# Warmup Iteration   3: 4146732.070 ops/s
# Warmup Iteration   4: 3409617.724 ops/s
# Warmup Iteration   5: 3905265.170 ops/s
# Warmup Iteration   6: 4214266.364 ops/s
# Warmup Iteration   7: 3996044.470 ops/s
# Warmup Iteration   8: 4051506.169 ops/s
# Warmup Iteration   9: 4162428.220 ops/s
# Warmup Iteration  10: 3962225.996 ops/s
# Warmup Iteration  11: 3942377.499 ops/s
# Warmup Iteration  12: 4194815.595 ops/s
# Warmup Iteration  13: 3950634.199 ops/s
# Warmup Iteration  14: 4103579.133 ops/s
# Warmup Iteration  15: 4056894.678 ops/s
# Warmup Iteration  16: 4135267.571 ops/s
# Warmup Iteration  17: 4217587.827 ops/s
# Warmup Iteration  18: 3923603.507 ops/s
# Warmup Iteration  19: 4215864.875 ops/s
# Warmup Iteration  20: 4116069.525 ops/s
# Warmup Iteration  21: 4196077.110 ops/s
# Warmup Iteration  22: 4006917.938 ops/s
# Warmup Iteration  23: 4305015.784 ops/s
# Warmup Iteration  24: 4071248.962 ops/s
# Warmup Iteration  25: 4037320.266 ops/s
# Warmup Iteration  26: 3503524.318 ops/s
# Warmup Iteration  27: 3735002.858 ops/s
# Warmup Iteration  28: 4180981.340 ops/s
# Warmup Iteration  29: 4004455.911 ops/s
# Warmup Iteration  30: 4106812.650 ops/s
Iteration   1: 4095823.408 ops/s
Iteration   2: 4026990.112 ops/s
Iteration   3: 4103272.693 ops/s
Iteration   4: 4098777.855 ops/s
Iteration   5: 4118848.110 ops/s
Iteration   6: 4203138.660 ops/s
Iteration   7: 4179689.027 ops/s
Iteration   8: 3931322.574 ops/s
Iteration   9: 4229440.788 ops/s
Iteration  10: 3943484.294 ops/s
Iteration  11: 4032451.288 ops/s
Iteration  12: 4238229.375 ops/s
Iteration  13: 4015350.625 ops/s
Iteration  14: 4151136.264 ops/s
Iteration  15: 4236253.674 ops/s
Iteration  16: 3946299.287 ops/s
Iteration  17: 4131227.180 ops/s
Iteration  18: 3976127.849 ops/s
Iteration  19: 4193258.674 ops/s
Iteration  20: 4000233.667 ops/s
Iteration  21: 4109874.580 ops/s
Iteration  22: 3975050.019 ops/s
Iteration  23: 4069989.358 ops/s
Iteration  24: 4263302.223 ops/s
Iteration  25: 4040951.423 ops/s
Iteration  26: 4179901.417 ops/s
Iteration  27: 4142848.877 ops/s
Iteration  28: 4006509.562 ops/s
Iteration  29: 4267149.499 ops/s
Iteration  30: 4021584.092 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError":
  4097617.215 ±(99.9%) 68028.195 ops/s [Average]
  (min, avg, max) = (3931322.574, 4097617.215, 4267149.499), stdev = 101821.407
  CI (99.9%): [4029589.021, 4165645.410] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_scalarInnerJustDisposeDelayError  thrpt   30  4097617.215 ± 68028.195  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_actionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_actionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71731.971 ops/s
# Warmup Iteration   2: 194163.447 ops/s
# Warmup Iteration   3: 192037.606 ops/s
# Warmup Iteration   4: 211769.835 ops/s
# Warmup Iteration   5: 231786.494 ops/s
# Warmup Iteration   6: 224580.574 ops/s
# Warmup Iteration   7: 230575.889 ops/s
# Warmup Iteration   8: 229624.183 ops/s
# Warmup Iteration   9: 235621.683 ops/s
# Warmup Iteration  10: 231251.151 ops/s
# Warmup Iteration  11: 221996.437 ops/s
# Warmup Iteration  12: 231286.291 ops/s
# Warmup Iteration  13: 221974.132 ops/s
# Warmup Iteration  14: 224647.736 ops/s
# Warmup Iteration  15: 238188.557 ops/s
# Warmup Iteration  16: 222571.920 ops/s
# Warmup Iteration  17: 237275.935 ops/s
# Warmup Iteration  18: 224974.825 ops/s
# Warmup Iteration  19: 242789.621 ops/s
# Warmup Iteration  20: 242022.353 ops/s
# Warmup Iteration  21: 224337.635 ops/s
# Warmup Iteration  22: 230564.438 ops/s
# Warmup Iteration  23: 242687.381 ops/s
# Warmup Iteration  24: 226896.982 ops/s
# Warmup Iteration  25: 233018.764 ops/s
# Warmup Iteration  26: 245070.710 ops/s
# Warmup Iteration  27: 244409.079 ops/s
# Warmup Iteration  28: 233598.703 ops/s
# Warmup Iteration  29: 243258.478 ops/s
# Warmup Iteration  30: 232292.033 ops/s
Iteration   1: 238801.826 ops/s
Iteration   2: 236168.162 ops/s
Iteration   3: 238815.956 ops/s
Iteration   4: 244895.079 ops/s
Iteration   5: 232477.133 ops/s
Iteration   6: 241216.320 ops/s
Iteration   7: 241991.329 ops/s
Iteration   8: 231448.845 ops/s
Iteration   9: 237012.604 ops/s
Iteration  10: 240104.940 ops/s
Iteration  11: 233059.317 ops/s
Iteration  12: 244527.986 ops/s
Iteration  13: 231724.086 ops/s
Iteration  14: 232597.554 ops/s
Iteration  15: 238228.025 ops/s
Iteration  16: 234813.012 ops/s
Iteration  17: 242994.305 ops/s
Iteration  18: 244367.043 ops/s
Iteration  19: 230400.330 ops/s
Iteration  20: 235276.653 ops/s
Iteration  21: 246960.662 ops/s
Iteration  22: 232570.031 ops/s
Iteration  23: 234402.516 ops/s
Iteration  24: 244980.964 ops/s
Iteration  25: 230571.559 ops/s
Iteration  26: 239468.941 ops/s
Iteration  27: 233679.283 ops/s
Iteration  28: 241814.298 ops/s
Iteration  29: 239053.484 ops/s
Iteration  30: 232397.564 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoFinallyTest._Benchmark.benchmark_actionThrows":
  237560.660 ±(99.9%) 3334.767 ops/s [Average]
  (min, avg, max) = (230400.330, 237560.660, 246960.662), stdev = 4991.323
  CI (99.9%): [234225.893, 240895.428] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
ObservableDoFinallyTest._Benchmark.benchmark_actionThrows  thrpt   30  237560.660 ± 3334.767  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycleTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycleTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1960962.786 ops/s
# Warmup Iteration   2: 4812202.892 ops/s
# Warmup Iteration   3: 4863994.678 ops/s
# Warmup Iteration   4: 6082578.527 ops/s
# Warmup Iteration   5: 5925808.425 ops/s
# Warmup Iteration   6: 5987922.758 ops/s
# Warmup Iteration   7: 6405277.768 ops/s
# Warmup Iteration   8: 6055519.146 ops/s
# Warmup Iteration   9: 5840053.572 ops/s
# Warmup Iteration  10: 6163259.882 ops/s
# Warmup Iteration  11: 6093784.404 ops/s
# Warmup Iteration  12: 5894331.202 ops/s
# Warmup Iteration  13: 6227379.683 ops/s
# Warmup Iteration  14: 6135424.236 ops/s
# Warmup Iteration  15: 5860075.308 ops/s
# Warmup Iteration  16: 6285322.952 ops/s
# Warmup Iteration  17: 5951295.703 ops/s
# Warmup Iteration  18: 5930886.218 ops/s
# Warmup Iteration  19: 6090574.431 ops/s
# Warmup Iteration  20: 5633448.194 ops/s
# Warmup Iteration  21: 5379318.009 ops/s
# Warmup Iteration  22: 6054962.864 ops/s
# Warmup Iteration  23: 5881667.922 ops/s
# Warmup Iteration  24: 6010090.563 ops/s
# Warmup Iteration  25: 6078167.467 ops/s
# Warmup Iteration  26: 6054029.106 ops/s
# Warmup Iteration  27: 6054187.577 ops/s
# Warmup Iteration  28: 6046592.985 ops/s
# Warmup Iteration  29: 6150426.315 ops/s
# Warmup Iteration  30: 5871556.770 ops/s
Iteration   1: 6043106.672 ops/s
Iteration   2: 6127686.816 ops/s
Iteration   3: 5912354.772 ops/s
Iteration   4: 6232991.629 ops/s
Iteration   5: 5899311.800 ops/s
Iteration   6: 5912821.859 ops/s
Iteration   7: 6181707.840 ops/s
Iteration   8: 5696934.362 ops/s
Iteration   9: 6150694.943 ops/s
Iteration  10: 5721826.936 ops/s
Iteration  11: 5961129.795 ops/s
Iteration  12: 6206103.548 ops/s
Iteration  13: 5781941.927 ops/s
Iteration  14: 5843558.552 ops/s
Iteration  15: 6022114.823 ops/s
Iteration  16: 5734140.278 ops/s
Iteration  17: 5941654.552 ops/s
Iteration  18: 6070922.193 ops/s
Iteration  19: 5803108.028 ops/s
Iteration  20: 6033776.737 ops/s
Iteration  21: 5877973.948 ops/s
Iteration  22: 6233743.798 ops/s
Iteration  23: 6241269.886 ops/s
Iteration  24: 5807185.020 ops/s
Iteration  25: 6046826.979 ops/s
Iteration  26: 6036403.357 ops/s
Iteration  27: 6215349.596 ops/s
Iteration  28: 5975751.270 ops/s
Iteration  29: 5898994.635 ops/s
Iteration  30: 6215109.992 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoOnLifecycleTest._Benchmark.benchmark_isDisposed":
  5994216.551 ±(99.9%) 112975.552 ops/s [Average]
  (min, avg, max) = (5696934.362, 5994216.551, 6241269.886), stdev = 169096.501
  CI (99.9%): [5881240.999, 6107192.104] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
MaybeDoOnLifecycleTest._Benchmark.benchmark_isDisposed  thrpt   30  5994216.551 ± 112975.552  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_flowableConverterThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_flowableConverterThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 489596.514 ops/s
# Warmup Iteration   2: 620306.227 ops/s
# Warmup Iteration   3: 720963.645 ops/s
# Warmup Iteration   4: 746006.273 ops/s
# Warmup Iteration   5: 735271.019 ops/s
# Warmup Iteration   6: 754464.495 ops/s
# Warmup Iteration   7: 752949.168 ops/s
# Warmup Iteration   8: 757920.019 ops/s
# Warmup Iteration   9: 726477.389 ops/s
# Warmup Iteration  10: 744481.690 ops/s
# Warmup Iteration  11: 782210.779 ops/s
# Warmup Iteration  12: 730974.805 ops/s
# Warmup Iteration  13: 747683.028 ops/s
# Warmup Iteration  14: 744704.629 ops/s
# Warmup Iteration  15: 736998.746 ops/s
# Warmup Iteration  16: 746919.429 ops/s
# Warmup Iteration  17: 814931.664 ops/s
# Warmup Iteration  18: 764961.763 ops/s
# Warmup Iteration  19: 820173.235 ops/s
# Warmup Iteration  20: 783170.870 ops/s
# Warmup Iteration  21: 799939.185 ops/s
# Warmup Iteration  22: 801889.730 ops/s
# Warmup Iteration  23: 825502.071 ops/s
# Warmup Iteration  24: 768223.630 ops/s
# Warmup Iteration  25: 828163.473 ops/s
# Warmup Iteration  26: 784420.082 ops/s
# Warmup Iteration  27: 772904.607 ops/s
# Warmup Iteration  28: 833844.442 ops/s
# Warmup Iteration  29: 791822.517 ops/s
# Warmup Iteration  30: 804223.954 ops/s
Iteration   1: 812623.058 ops/s
Iteration   2: 777356.871 ops/s
Iteration   3: 835158.829 ops/s
Iteration   4: 764718.738 ops/s
Iteration   5: 795903.812 ops/s
Iteration   6: 802850.907 ops/s
Iteration   7: 803630.702 ops/s
Iteration   8: 800224.121 ops/s
Iteration   9: 783432.178 ops/s
Iteration  10: 808200.834 ops/s
Iteration  11: 799585.840 ops/s
Iteration  12: 798592.060 ops/s
Iteration  13: 789718.221 ops/s
Iteration  14: 796155.336 ops/s
Iteration  15: 776654.540 ops/s
Iteration  16: 791948.139 ops/s
Iteration  17: 833096.518 ops/s
Iteration  18: 767147.081 ops/s
Iteration  19: 811917.612 ops/s
Iteration  20: 802628.033 ops/s
Iteration  21: 792276.168 ops/s
Iteration  22: 816660.579 ops/s
Iteration  23: 775338.929 ops/s
Iteration  24: 813134.768 ops/s
Iteration  25: 766384.713 ops/s
Iteration  26: 815994.064 ops/s
Iteration  27: 773225.994 ops/s
Iteration  28: 786175.837 ops/s
Iteration  29: 803363.975 ops/s
Iteration  30: 765373.261 ops/s


Result "io.reactivex.rxjava3.core.ConverterTest._Benchmark.benchmark_flowableConverterThrows":
  795315.724 ±(99.9%) 12744.790 ops/s [Average]
  (min, avg, max) = (764718.738, 795315.724, 835158.829), stdev = 19075.803
  CI (99.9%): [782570.934, 808060.514] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
ConverterTest._Benchmark.benchmark_flowableConverterThrows  thrpt   30  795315.724 ± 12744.790  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_flowableGenericsSignatureTest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_flowableGenericsSignatureTest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15667646.900 ops/s
# Warmup Iteration   2: 32111717.788 ops/s
# Warmup Iteration   3: 37953578.095 ops/s
# Warmup Iteration   4: 41160660.288 ops/s
# Warmup Iteration   5: 40089065.638 ops/s
# Warmup Iteration   6: 38875072.516 ops/s
# Warmup Iteration   7: 40229081.488 ops/s
# Warmup Iteration   8: 40511089.849 ops/s
# Warmup Iteration   9: 40036407.510 ops/s
# Warmup Iteration  10: 39503531.398 ops/s
# Warmup Iteration  11: 40118416.044 ops/s
# Warmup Iteration  12: 38992057.018 ops/s
# Warmup Iteration  13: 41173608.931 ops/s
# Warmup Iteration  14: 38772036.071 ops/s
# Warmup Iteration  15: 35048838.399 ops/s
# Warmup Iteration  16: 38494098.712 ops/s
# Warmup Iteration  17: 39283484.962 ops/s
# Warmup Iteration  18: 39805484.888 ops/s
# Warmup Iteration  19: 41796710.618 ops/s
# Warmup Iteration  20: 39590841.146 ops/s
# Warmup Iteration  21: 41724918.207 ops/s
# Warmup Iteration  22: 39276479.477 ops/s
# Warmup Iteration  23: 39574848.830 ops/s
# Warmup Iteration  24: 40214037.647 ops/s
# Warmup Iteration  25: 39462629.071 ops/s
# Warmup Iteration  26: 40068285.522 ops/s
# Warmup Iteration  27: 40049367.342 ops/s
# Warmup Iteration  28: 38239334.397 ops/s
# Warmup Iteration  29: 42449002.987 ops/s
# Warmup Iteration  30: 41488862.288 ops/s
Iteration   1: 39194841.377 ops/s
Iteration   2: 41829802.317 ops/s
Iteration   3: 40729362.667 ops/s
Iteration   4: 39585333.219 ops/s
Iteration   5: 39584162.038 ops/s
Iteration   6: 39098704.097 ops/s
Iteration   7: 41110730.079 ops/s
Iteration   8: 39743321.385 ops/s
Iteration   9: 40246651.465 ops/s
Iteration  10: 42080293.562 ops/s
Iteration  11: 39908320.004 ops/s
Iteration  12: 40708409.065 ops/s
Iteration  13: 39199687.340 ops/s
Iteration  14: 40499764.985 ops/s
Iteration  15: 39451200.292 ops/s
Iteration  16: 40383375.331 ops/s
Iteration  17: 41090899.253 ops/s
Iteration  18: 39702280.509 ops/s
Iteration  19: 39479135.587 ops/s
Iteration  20: 42458993.404 ops/s
Iteration  21: 39008831.795 ops/s
Iteration  22: 40379880.434 ops/s
Iteration  23: 39704709.017 ops/s
Iteration  24: 40520627.596 ops/s
Iteration  25: 38894197.220 ops/s
Iteration  26: 39347339.820 ops/s
Iteration  27: 41634674.968 ops/s
Iteration  28: 39734461.444 ops/s
Iteration  29: 39035564.932 ops/s
Iteration  30: 40556240.715 ops/s


Result "io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_flowableGenericsSignatureTest":
  40163393.197 ±(99.9%) 646261.233 ops/s [Average]
  (min, avg, max) = (38894197.220, 40163393.197, 42458993.404), stdev = 967293.462
  CI (99.9%): [39517131.965, 40809654.430] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score        Error  Units
TransformerTest._Benchmark.benchmark_flowableGenericsSignatureTest  thrpt   30  40163393.197 ± 646261.233  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11615006.038 ops/s
# Warmup Iteration   2: 25424685.895 ops/s
# Warmup Iteration   3: 27783414.035 ops/s
# Warmup Iteration   4: 29300536.631 ops/s
# Warmup Iteration   5: 30012242.195 ops/s
# Warmup Iteration   6: 29124134.015 ops/s
# Warmup Iteration   7: 28767065.144 ops/s
# Warmup Iteration   8: 29227095.230 ops/s
# Warmup Iteration   9: 28386499.290 ops/s
# Warmup Iteration  10: 30162541.106 ops/s
# Warmup Iteration  11: 29231992.746 ops/s
# Warmup Iteration  12: 29589313.738 ops/s
# Warmup Iteration  13: 28737114.565 ops/s
# Warmup Iteration  14: 29227113.697 ops/s
# Warmup Iteration  15: 29572102.517 ops/s
# Warmup Iteration  16: 29258870.947 ops/s
# Warmup Iteration  17: 29760359.322 ops/s
# Warmup Iteration  18: 29236117.688 ops/s
# Warmup Iteration  19: 29407084.579 ops/s
# Warmup Iteration  20: 30956774.566 ops/s
# Warmup Iteration  21: 28801125.250 ops/s
# Warmup Iteration  22: 30115494.475 ops/s
# Warmup Iteration  23: 30797208.034 ops/s
# Warmup Iteration  24: 29237803.140 ops/s
# Warmup Iteration  25: 28784351.382 ops/s
# Warmup Iteration  26: 30281531.051 ops/s
# Warmup Iteration  27: 28665235.966 ops/s
# Warmup Iteration  28: 30620394.901 ops/s
# Warmup Iteration  29: 29400912.248 ops/s
# Warmup Iteration  30: 29646576.775 ops/s
Iteration   1: 28856798.448 ops/s
Iteration   2: 31021294.706 ops/s
Iteration   3: 29049618.675 ops/s
Iteration   4: 29157393.948 ops/s
Iteration   5: 30021027.028 ops/s
Iteration   6: 29219443.138 ops/s
Iteration   7: 29638975.830 ops/s
Iteration   8: 29411943.147 ops/s
Iteration   9: 29665604.439 ops/s
Iteration  10: 29436967.339 ops/s
Iteration  11: 29190412.462 ops/s
Iteration  12: 29726994.583 ops/s
Iteration  13: 29699895.237 ops/s
Iteration  14: 29385840.957 ops/s
Iteration  15: 29068287.325 ops/s
Iteration  16: 29931300.783 ops/s
Iteration  17: 29370373.385 ops/s
Iteration  18: 29675632.582 ops/s
Iteration  19: 29347948.737 ops/s
Iteration  20: 30803465.510 ops/s
Iteration  21: 30424081.108 ops/s
Iteration  22: 28847842.272 ops/s
Iteration  23: 30345976.425 ops/s
Iteration  24: 29544232.411 ops/s
Iteration  25: 29240657.928 ops/s
Iteration  26: 29379324.536 ops/s
Iteration  27: 28966821.270 ops/s
Iteration  28: 29876156.806 ops/s
Iteration  29: 28687033.648 ops/s
Iteration  30: 29962635.481 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose2":
  29565132.671 ±(99.9%) 373261.900 ops/s [Average]
  (min, avg, max) = (28687033.648, 29565132.671, 31021294.706), stdev = 558680.882
  CI (99.9%): [29191870.772, 29938394.571] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt         Score        Error  Units
FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose2  thrpt   30  29565132.671 ± 373261.900  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 13997817.111 ops/s
# Warmup Iteration   2: 23087786.394 ops/s
# Warmup Iteration   3: 32565515.641 ops/s
# Warmup Iteration   4: 30894671.064 ops/s
# Warmup Iteration   5: 32054140.925 ops/s
# Warmup Iteration   6: 32177664.254 ops/s
# Warmup Iteration   7: 30917781.439 ops/s
# Warmup Iteration   8: 32812569.480 ops/s
# Warmup Iteration   9: 31071383.252 ops/s
# Warmup Iteration  10: 24266039.586 ops/s
# Warmup Iteration  11: 31081533.468 ops/s
# Warmup Iteration  12: 31491645.109 ops/s
# Warmup Iteration  13: 30927528.869 ops/s
# Warmup Iteration  14: 31255435.663 ops/s
# Warmup Iteration  15: 32467849.326 ops/s
# Warmup Iteration  16: 31636795.597 ops/s
# Warmup Iteration  17: 30649876.615 ops/s
# Warmup Iteration  18: 32279682.319 ops/s
# Warmup Iteration  19: 30924339.577 ops/s
# Warmup Iteration  20: 32223956.009 ops/s
# Warmup Iteration  21: 30428446.252 ops/s
# Warmup Iteration  22: 31558739.731 ops/s
# Warmup Iteration  23: 32115468.373 ops/s
# Warmup Iteration  24: 32178912.827 ops/s
# Warmup Iteration  25: 30074276.577 ops/s
# Warmup Iteration  26: 31842406.290 ops/s
# Warmup Iteration  27: 30988629.824 ops/s
# Warmup Iteration  28: 31552351.162 ops/s
# Warmup Iteration  29: 31643220.924 ops/s
# Warmup Iteration  30: 30765214.490 ops/s
Iteration   1: 32688460.661 ops/s
Iteration   2: 30641796.867 ops/s
Iteration   3: 32366178.609 ops/s
Iteration   4: 30685019.250 ops/s
Iteration   5: 31648390.445 ops/s
Iteration   6: 31452095.762 ops/s
Iteration   7: 30437029.557 ops/s
Iteration   8: 32640115.778 ops/s
Iteration   9: 31083371.540 ops/s
Iteration  10: 30938372.782 ops/s
Iteration  11: 32009611.390 ops/s
Iteration  12: 32286450.642 ops/s
Iteration  13: 30618122.455 ops/s
Iteration  14: 31883522.602 ops/s
Iteration  15: 31393336.349 ops/s
Iteration  16: 30195537.806 ops/s
Iteration  17: 32517263.079 ops/s
Iteration  18: 31077179.687 ops/s
Iteration  19: 32161975.594 ops/s
Iteration  20: 31746507.972 ops/s
Iteration  21: 31449161.982 ops/s
Iteration  22: 31264922.576 ops/s
Iteration  23: 31496532.512 ops/s
Iteration  24: 31495855.877 ops/s
Iteration  25: 32369263.251 ops/s
Iteration  26: 31010100.411 ops/s
Iteration  27: 31327378.201 ops/s
Iteration  28: 31950366.073 ops/s
Iteration  29: 31680602.999 ops/s
Iteration  30: 31417316.040 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose":
  31531061.292 ±(99.9%) 447869.681 ops/s [Average]
  (min, avg, max) = (30195537.806, 31531061.292, 32688460.661), stdev = 670350.305
  CI (99.9%): [31083191.611, 31978930.972] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
FlowableCovarianceTest._Benchmark.benchmark_covarianceOfCompose  thrpt   30  31531061.292 ± 447869.681  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_skipNegativeElements$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_skipNegativeElements

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 376859.524 ops/s
# Warmup Iteration   2: 623509.208 ops/s
# Warmup Iteration   3: 642641.333 ops/s
# Warmup Iteration   4: 789441.909 ops/s
# Warmup Iteration   5: 632851.756 ops/s
# Warmup Iteration   6: 760349.603 ops/s
# Warmup Iteration   7: 770027.146 ops/s
# Warmup Iteration   8: 719947.006 ops/s
# Warmup Iteration   9: 761771.441 ops/s
# Warmup Iteration  10: 745078.122 ops/s
# Warmup Iteration  11: 750612.132 ops/s
# Warmup Iteration  12: 738603.770 ops/s
# Warmup Iteration  13: 745918.236 ops/s
# Warmup Iteration  14: 754315.682 ops/s
# Warmup Iteration  15: 730229.733 ops/s
# Warmup Iteration  16: 776951.594 ops/s
# Warmup Iteration  17: 768888.715 ops/s
# Warmup Iteration  18: 813426.782 ops/s
# Warmup Iteration  19: 778326.764 ops/s
# Warmup Iteration  20: 789949.627 ops/s
# Warmup Iteration  21: 824396.110 ops/s
# Warmup Iteration  22: 803424.260 ops/s
# Warmup Iteration  23: 772987.122 ops/s
# Warmup Iteration  24: 783793.322 ops/s
# Warmup Iteration  25: 804666.415 ops/s
# Warmup Iteration  26: 770783.061 ops/s
# Warmup Iteration  27: 785726.014 ops/s
# Warmup Iteration  28: 779731.454 ops/s
# Warmup Iteration  29: 807965.206 ops/s
# Warmup Iteration  30: 784775.004 ops/s
Iteration   1: 810868.647 ops/s
Iteration   2: 802486.451 ops/s
Iteration   3: 785088.221 ops/s
Iteration   4: 748904.167 ops/s
Iteration   5: 700038.624 ops/s
Iteration   6: 788356.660 ops/s
Iteration   7: 832132.128 ops/s
Iteration   8: 779785.656 ops/s
Iteration   9: 803202.500 ops/s
Iteration  10: 804619.912 ops/s
Iteration  11: 790133.408 ops/s
Iteration  12: 813822.450 ops/s
Iteration  13: 770086.580 ops/s
Iteration  14: 782508.715 ops/s
Iteration  15: 780991.562 ops/s
Iteration  16: 819072.688 ops/s
Iteration  17: 774914.287 ops/s
Iteration  18: 828418.991 ops/s
Iteration  19: 788454.288 ops/s
Iteration  20: 783862.703 ops/s
Iteration  21: 835565.092 ops/s
Iteration  22: 783472.421 ops/s
Iteration  23: 822701.215 ops/s
Iteration  24: 836284.303 ops/s
Iteration  25: 766067.754 ops/s
Iteration  26: 831343.123 ops/s
Iteration  27: 785850.634 ops/s
Iteration  28: 789347.350 ops/s
Iteration  29: 802160.844 ops/s
Iteration  30: 782485.504 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipTest._Benchmark.benchmark_skipNegativeElements":
  794100.896 ±(99.9%) 19094.694 ops/s [Average]
  (min, avg, max) = (700038.624, 794100.896, 836284.303), stdev = 28580.042
  CI (99.9%): [775006.202, 813195.590] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableSkipTest._Benchmark.benchmark_skipNegativeElements  thrpt   30  794100.896 ± 19094.694  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107846.008 ops/s
# Warmup Iteration   2: 515135.262 ops/s
# Warmup Iteration   3: 549011.016 ops/s
# Warmup Iteration   4: 584929.199 ops/s
# Warmup Iteration   5: 604578.086 ops/s
# Warmup Iteration   6: 564553.861 ops/s
# Warmup Iteration   7: 583058.322 ops/s
# Warmup Iteration   8: 598624.427 ops/s
# Warmup Iteration   9: 573971.646 ops/s
# Warmup Iteration  10: 563000.097 ops/s
# Warmup Iteration  11: 583920.604 ops/s
# Warmup Iteration  12: 563176.511 ops/s
# Warmup Iteration  13: 600636.008 ops/s
# Warmup Iteration  14: 591888.778 ops/s
# Warmup Iteration  15: 577667.808 ops/s
# Warmup Iteration  16: 598275.652 ops/s
# Warmup Iteration  17: 601522.668 ops/s
# Warmup Iteration  18: 603645.588 ops/s
# Warmup Iteration  19: 626592.612 ops/s
# Warmup Iteration  20: 637823.954 ops/s
# Warmup Iteration  21: 604289.065 ops/s
# Warmup Iteration  22: 620294.362 ops/s
# Warmup Iteration  23: 610486.130 ops/s
# Warmup Iteration  24: 595145.129 ops/s
# Warmup Iteration  25: 605620.724 ops/s
# Warmup Iteration  26: 598734.021 ops/s
# Warmup Iteration  27: 614717.402 ops/s
# Warmup Iteration  28: 594997.783 ops/s
# Warmup Iteration  29: 608520.668 ops/s
# Warmup Iteration  30: 611795.620 ops/s
Iteration   1: 624878.521 ops/s
Iteration   2: 554756.013 ops/s
Iteration   3: 613255.321 ops/s
Iteration   4: 582165.495 ops/s
Iteration   5: 604199.197 ops/s
Iteration   6: 604274.243 ops/s
Iteration   7: 534339.825 ops/s
Iteration   8: 578318.473 ops/s
Iteration   9: 618165.402 ops/s
Iteration  10: 601378.991 ops/s
Iteration  11: 580683.918 ops/s
Iteration  12: 640572.980 ops/s
Iteration  13: 610663.142 ops/s
Iteration  14: 592759.741 ops/s
Iteration  15: 622964.167 ops/s
Iteration  16: 594205.152 ops/s
Iteration  17: 594743.882 ops/s
Iteration  18: 640372.500 ops/s
Iteration  19: 632280.128 ops/s
Iteration  20: 592034.941 ops/s
Iteration  21: 606284.656 ops/s
Iteration  22: 594864.995 ops/s
Iteration  23: 605204.654 ops/s
Iteration  24: 608790.262 ops/s
Iteration  25: 594482.722 ops/s
Iteration  26: 611727.299 ops/s
Iteration  27: 621428.267 ops/s
Iteration  28: 602567.340 ops/s
Iteration  29: 644065.492 ops/s
Iteration  30: 609487.758 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithIterableOneIsNull":
  603863.849 ±(99.9%) 15793.914 ops/s [Average]
  (min, avg, max) = (534339.825, 603863.849, 644065.492), stdev = 23639.588
  CI (99.9%): [588069.936, 619657.763] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_zipWithIterableOneIsNull  thrpt   30  603863.849 ± 15793.914  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_singleIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_singleIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1308961.747 ops/s
# Warmup Iteration   2: 3287411.182 ops/s
# Warmup Iteration   3: 4811879.591 ops/s
# Warmup Iteration   4: 4653975.647 ops/s
# Warmup Iteration   5: 4859557.352 ops/s
# Warmup Iteration   6: 4689434.356 ops/s
# Warmup Iteration   7: 4798679.973 ops/s
# Warmup Iteration   8: 4731441.739 ops/s
# Warmup Iteration   9: 5090822.982 ops/s
# Warmup Iteration  10: 4751440.157 ops/s
# Warmup Iteration  11: 4937854.184 ops/s
# Warmup Iteration  12: 4835107.615 ops/s
# Warmup Iteration  13: 5030825.751 ops/s
# Warmup Iteration  14: 4606269.920 ops/s
# Warmup Iteration  15: 4973878.188 ops/s
# Warmup Iteration  16: 4884987.263 ops/s
# Warmup Iteration  17: 4798088.664 ops/s
# Warmup Iteration  18: 4930924.858 ops/s
# Warmup Iteration  19: 4840197.009 ops/s
# Warmup Iteration  20: 4958447.318 ops/s
# Warmup Iteration  21: 4591870.836 ops/s
# Warmup Iteration  22: 4881805.048 ops/s
# Warmup Iteration  23: 4918663.211 ops/s
# Warmup Iteration  24: 4939561.235 ops/s
# Warmup Iteration  25: 4838972.920 ops/s
# Warmup Iteration  26: 4904559.336 ops/s
# Warmup Iteration  27: 4884849.969 ops/s
# Warmup Iteration  28: 4768696.896 ops/s
# Warmup Iteration  29: 4794098.017 ops/s
# Warmup Iteration  30: 4757851.093 ops/s
Iteration   1: 4803966.296 ops/s
Iteration   2: 5128132.777 ops/s
Iteration   3: 4787184.379 ops/s
Iteration   4: 4720032.962 ops/s
Iteration   5: 4810638.079 ops/s
Iteration   6: 5094377.086 ops/s
Iteration   7: 4775560.286 ops/s
Iteration   8: 4800511.961 ops/s
Iteration   9: 4922070.774 ops/s
Iteration  10: 4730771.066 ops/s
Iteration  11: 4977813.253 ops/s
Iteration  12: 4875966.120 ops/s
Iteration  13: 4775449.304 ops/s
Iteration  14: 4814495.917 ops/s
Iteration  15: 4856064.302 ops/s
Iteration  16: 4973920.504 ops/s
Iteration  17: 4845747.324 ops/s
Iteration  18: 4935641.916 ops/s
Iteration  19: 4737566.707 ops/s
Iteration  20: 4904873.540 ops/s
Iteration  21: 4882568.654 ops/s
Iteration  22: 4840328.645 ops/s
Iteration  23: 4959837.374 ops/s
Iteration  24: 4915155.220 ops/s
Iteration  25: 4776412.896 ops/s
Iteration  26: 5017096.946 ops/s
Iteration  27: 4817363.964 ops/s
Iteration  28: 4836629.819 ops/s
Iteration  29: 5031666.053 ops/s
Iteration  30: 4732908.550 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableAmbTest._Benchmark.benchmark_singleIterable":
  4869358.422 ±(99.9%) 72206.215 ops/s [Average]
  (min, avg, max) = (4720032.962, 4869358.422, 5128132.777), stdev = 108074.872
  CI (99.9%): [4797152.207, 4941564.637] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
ObservableAmbTest._Benchmark.benchmark_singleIterable  thrpt   30  4869358.422 ± 72206.215  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_errorIncludesLastValueAsCause$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_errorIncludesLastValueAsCause

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 196076.654 ops/s
# Warmup Iteration   2: 563260.384 ops/s
# Warmup Iteration   3: 614951.406 ops/s
# Warmup Iteration   4: 674937.826 ops/s
# Warmup Iteration   5: 523640.950 ops/s
# Warmup Iteration   6: 666300.195 ops/s
# Warmup Iteration   7: 639123.005 ops/s
# Warmup Iteration   8: 657240.523 ops/s
# Warmup Iteration   9: 674363.405 ops/s
# Warmup Iteration  10: 651181.720 ops/s
# Warmup Iteration  11: 666372.074 ops/s
# Warmup Iteration  12: 647121.226 ops/s
# Warmup Iteration  13: 673503.631 ops/s
# Warmup Iteration  14: 651826.986 ops/s
# Warmup Iteration  15: 664233.543 ops/s
# Warmup Iteration  16: 668414.121 ops/s
# Warmup Iteration  17: 716516.576 ops/s
# Warmup Iteration  18: 665514.385 ops/s
# Warmup Iteration  19: 691263.437 ops/s
# Warmup Iteration  20: 705020.067 ops/s
# Warmup Iteration  21: 695473.780 ops/s
# Warmup Iteration  22: 693628.583 ops/s
# Warmup Iteration  23: 697215.484 ops/s
# Warmup Iteration  24: 682541.552 ops/s
# Warmup Iteration  25: 684629.587 ops/s
# Warmup Iteration  26: 716853.013 ops/s
# Warmup Iteration  27: 683204.593 ops/s
# Warmup Iteration  28: 712190.962 ops/s
# Warmup Iteration  29: 711084.779 ops/s
# Warmup Iteration  30: 703107.653 ops/s
Iteration   1: 706439.190 ops/s
Iteration   2: 680507.695 ops/s
Iteration   3: 721946.498 ops/s
Iteration   4: 673444.588 ops/s
Iteration   5: 696266.920 ops/s
Iteration   6: 701179.873 ops/s
Iteration   7: 695728.704 ops/s
Iteration   8: 699398.304 ops/s
Iteration   9: 683104.581 ops/s
Iteration  10: 722385.637 ops/s
Iteration  11: 715394.366 ops/s
Iteration  12: 682580.179 ops/s
Iteration  13: 717927.920 ops/s
Iteration  14: 689238.611 ops/s
Iteration  15: 674314.523 ops/s
Iteration  16: 697936.545 ops/s
Iteration  17: 716535.315 ops/s
Iteration  18: 695461.636 ops/s
Iteration  19: 698678.297 ops/s
Iteration  20: 691708.541 ops/s
Iteration  21: 695328.240 ops/s
Iteration  22: 703883.823 ops/s
Iteration  23: 694180.746 ops/s
Iteration  24: 680635.401 ops/s
Iteration  25: 727181.795 ops/s
Iteration  26: 670159.542 ops/s
Iteration  27: 699144.511 ops/s
Iteration  28: 722331.859 ops/s
Iteration  29: 670967.507 ops/s
Iteration  30: 704272.785 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilPredicateTest._Benchmark.benchmark_errorIncludesLastValueAsCause":
  697608.804 ±(99.9%) 10886.019 ops/s [Average]
  (min, avg, max) = (670159.542, 697608.804, 727181.795), stdev = 16293.682
  CI (99.9%): [686722.786, 708494.823] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
ObservableTakeUntilPredicateTest._Benchmark.benchmark_errorIncludesLastValueAsCause  thrpt   30  697608.804 ± 10886.019  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_observableTransformerThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_observableTransformerThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 529124.533 ops/s
# Warmup Iteration   2: 629883.014 ops/s
# Warmup Iteration   3: 726688.501 ops/s
# Warmup Iteration   4: 748645.247 ops/s
# Warmup Iteration   5: 727670.864 ops/s
# Warmup Iteration   6: 678878.663 ops/s
# Warmup Iteration   7: 734825.427 ops/s
# Warmup Iteration   8: 789815.475 ops/s
# Warmup Iteration   9: 742357.261 ops/s
# Warmup Iteration  10: 758029.345 ops/s
# Warmup Iteration  11: 708775.575 ops/s
# Warmup Iteration  12: 743460.667 ops/s
# Warmup Iteration  13: 764688.249 ops/s
# Warmup Iteration  14: 736793.735 ops/s
# Warmup Iteration  15: 755040.425 ops/s
# Warmup Iteration  16: 744189.680 ops/s
# Warmup Iteration  17: 778019.772 ops/s
# Warmup Iteration  18: 796643.826 ops/s
# Warmup Iteration  19: 786730.331 ops/s
# Warmup Iteration  20: 809396.945 ops/s
# Warmup Iteration  21: 768239.352 ops/s
# Warmup Iteration  22: 796207.647 ops/s
# Warmup Iteration  23: 772775.348 ops/s
# Warmup Iteration  24: 781264.495 ops/s
# Warmup Iteration  25: 792853.050 ops/s
# Warmup Iteration  26: 771559.401 ops/s
# Warmup Iteration  27: 819496.873 ops/s
# Warmup Iteration  28: 782502.090 ops/s
# Warmup Iteration  29: 813264.773 ops/s
# Warmup Iteration  30: 781363.341 ops/s
Iteration   1: 780939.906 ops/s
Iteration   2: 819860.765 ops/s
Iteration   3: 780374.468 ops/s
Iteration   4: 807551.642 ops/s
Iteration   5: 769375.388 ops/s
Iteration   6: 779183.584 ops/s
Iteration   7: 806409.638 ops/s
Iteration   8: 777323.685 ops/s
Iteration   9: 824552.287 ops/s
Iteration  10: 765551.074 ops/s
Iteration  11: 793450.104 ops/s
Iteration  12: 801248.813 ops/s
Iteration  13: 783183.507 ops/s
Iteration  14: 766890.462 ops/s
Iteration  15: 776750.603 ops/s
Iteration  16: 801646.711 ops/s
Iteration  17: 753320.295 ops/s
Iteration  18: 796306.983 ops/s
Iteration  19: 766839.954 ops/s
Iteration  20: 790175.614 ops/s
Iteration  21: 812483.317 ops/s
Iteration  22: 764146.476 ops/s
Iteration  23: 818135.496 ops/s
Iteration  24: 769858.935 ops/s
Iteration  25: 653987.470 ops/s
Iteration  26: 814818.668 ops/s
Iteration  27: 776936.258 ops/s
Iteration  28: 812061.555 ops/s
Iteration  29: 786049.291 ops/s
Iteration  30: 773093.270 ops/s


Result "io.reactivex.rxjava3.core.TransformerTest._Benchmark.benchmark_observableTransformerThrows":
  784083.541 ±(99.9%) 20939.287 ops/s [Average]
  (min, avg, max) = (653987.470, 784083.541, 824552.287), stdev = 31340.941
  CI (99.9%): [763144.254, 805022.827] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
TransformerTest._Benchmark.benchmark_observableTransformerThrows  thrpt   30  784083.541 ± 20939.287  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 25498886.265 ops/s
# Warmup Iteration   2: 40624625.258 ops/s
# Warmup Iteration   3: 58783840.312 ops/s
# Warmup Iteration   4: 56621564.897 ops/s
# Warmup Iteration   5: 58392344.044 ops/s
# Warmup Iteration   6: 55518410.831 ops/s
# Warmup Iteration   7: 58527454.935 ops/s
# Warmup Iteration   8: 57762403.351 ops/s
# Warmup Iteration   9: 56856985.656 ops/s
# Warmup Iteration  10: 58148517.258 ops/s
# Warmup Iteration  11: 55695228.670 ops/s
# Warmup Iteration  12: 57429058.392 ops/s
# Warmup Iteration  13: 58171622.760 ops/s
# Warmup Iteration  14: 58579174.067 ops/s
# Warmup Iteration  15: 55207745.691 ops/s
# Warmup Iteration  16: 58013710.867 ops/s
# Warmup Iteration  17: 56216256.340 ops/s
# Warmup Iteration  18: 59061619.280 ops/s
# Warmup Iteration  19: 57393912.876 ops/s
# Warmup Iteration  20: 56358009.217 ops/s
# Warmup Iteration  21: 59085094.486 ops/s
# Warmup Iteration  22: 58288859.878 ops/s
# Warmup Iteration  23: 56471074.316 ops/s
# Warmup Iteration  24: 57390608.382 ops/s
# Warmup Iteration  25: 58478956.813 ops/s
# Warmup Iteration  26: 58973203.589 ops/s
# Warmup Iteration  27: 57352166.162 ops/s
# Warmup Iteration  28: 58869872.695 ops/s
# Warmup Iteration  29: 57645381.074 ops/s
# Warmup Iteration  30: 56817733.580 ops/s
Iteration   1: 57970121.723 ops/s
Iteration   2: 59029108.909 ops/s
Iteration   3: 57455916.865 ops/s
Iteration   4: 59772712.703 ops/s
Iteration   5: 59074186.489 ops/s
Iteration   6: 57466860.560 ops/s
Iteration   7: 56230085.628 ops/s
Iteration   8: 57537674.376 ops/s
Iteration   9: 56130714.420 ops/s
Iteration  10: 59283375.375 ops/s
Iteration  11: 58220723.088 ops/s
Iteration  12: 56798805.001 ops/s
Iteration  13: 57744295.137 ops/s
Iteration  14: 59240080.307 ops/s
Iteration  15: 58469282.282 ops/s
Iteration  16: 55022765.122 ops/s
Iteration  17: 59087041.157 ops/s
Iteration  18: 56672399.043 ops/s
Iteration  19: 56947161.535 ops/s
Iteration  20: 59456358.065 ops/s
Iteration  21: 56239583.280 ops/s
Iteration  22: 58592380.078 ops/s
Iteration  23: 60150147.754 ops/s
Iteration  24: 58084581.593 ops/s
Iteration  25: 59106468.663 ops/s
Iteration  26: 56831604.753 ops/s
Iteration  27: 56698245.090 ops/s
Iteration  28: 57715192.276 ops/s
Iteration  29: 57387507.297 ops/s
Iteration  30: 59429052.255 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_empty":
  57928147.694 ±(99.9%) 854923.616 ops/s [Average]
  (min, avg, max) = (55022765.122, 57928147.694, 60150147.754), stdev = 1279609.518
  CI (99.9%): [57073224.078, 58783071.310] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt         Score        Error  Units
FlowableFromArrayTest._Benchmark.benchmark_empty  thrpt   30  57928147.694 ± 854923.616  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeNegative$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeNegative

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 369058.006 ops/s
# Warmup Iteration   2: 606830.516 ops/s
# Warmup Iteration   3: 687178.159 ops/s
# Warmup Iteration   4: 719450.457 ops/s
# Warmup Iteration   5: 636545.133 ops/s
# Warmup Iteration   6: 721306.267 ops/s
# Warmup Iteration   7: 717029.264 ops/s
# Warmup Iteration   8: 753516.436 ops/s
# Warmup Iteration   9: 754780.313 ops/s
# Warmup Iteration  10: 728953.794 ops/s
# Warmup Iteration  11: 737538.063 ops/s
# Warmup Iteration  12: 732916.380 ops/s
# Warmup Iteration  13: 738313.365 ops/s
# Warmup Iteration  14: 736607.656 ops/s
# Warmup Iteration  15: 726368.577 ops/s
# Warmup Iteration  16: 743391.791 ops/s
# Warmup Iteration  17: 787135.034 ops/s
# Warmup Iteration  18: 769591.912 ops/s
# Warmup Iteration  19: 820267.953 ops/s
# Warmup Iteration  20: 765514.222 ops/s
# Warmup Iteration  21: 786191.218 ops/s
# Warmup Iteration  22: 769841.050 ops/s
# Warmup Iteration  23: 788573.670 ops/s
# Warmup Iteration  24: 768618.422 ops/s
# Warmup Iteration  25: 820506.986 ops/s
# Warmup Iteration  26: 763699.068 ops/s
# Warmup Iteration  27: 812881.542 ops/s
# Warmup Iteration  28: 776012.398 ops/s
# Warmup Iteration  29: 791343.735 ops/s
# Warmup Iteration  30: 808179.753 ops/s
Iteration   1: 777901.938 ops/s
Iteration   2: 801148.443 ops/s
Iteration   3: 770907.177 ops/s
Iteration   4: 820888.583 ops/s
Iteration   5: 760500.457 ops/s
Iteration   6: 785120.167 ops/s
Iteration   7: 804118.538 ops/s
Iteration   8: 770532.125 ops/s
Iteration   9: 811418.063 ops/s
Iteration  10: 777765.044 ops/s
Iteration  11: 777044.420 ops/s
Iteration  12: 819595.755 ops/s
Iteration  13: 766373.871 ops/s
Iteration  14: 802042.701 ops/s
Iteration  15: 775608.189 ops/s
Iteration  16: 770611.354 ops/s
Iteration  17: 801526.868 ops/s
Iteration  18: 757596.038 ops/s
Iteration  19: 825541.202 ops/s
Iteration  20: 551372.838 ops/s
Iteration  21: 806288.585 ops/s
Iteration  22: 754410.667 ops/s
Iteration  23: 774300.209 ops/s
Iteration  24: 803397.382 ops/s
Iteration  25: 782324.151 ops/s
Iteration  26: 787558.333 ops/s
Iteration  27: 783638.193 ops/s
Iteration  28: 803172.252 ops/s
Iteration  29: 783052.547 ops/s
Iteration  30: 779591.433 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_takeNegative":
  779511.584 ±(99.9%) 31504.379 ops/s [Average]
  (min, avg, max) = (551372.838, 779511.584, 825541.202), stdev = 47154.275
  CI (99.9%): [748007.205, 811015.963] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
FlowableTakeTest._Benchmark.benchmark_takeNegative  thrpt   30  779511.584 ± 31504.379  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryLongPredicateInvalid$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryLongPredicateInvalid

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 413507.594 ops/s
# Warmup Iteration   2: 630786.907 ops/s
# Warmup Iteration   3: 684639.915 ops/s
# Warmup Iteration   4: 725250.926 ops/s
# Warmup Iteration   5: 628382.084 ops/s
# Warmup Iteration   6: 732191.511 ops/s
# Warmup Iteration   7: 741139.038 ops/s
# Warmup Iteration   8: 766912.107 ops/s
# Warmup Iteration   9: 727524.385 ops/s
# Warmup Iteration  10: 764996.204 ops/s
# Warmup Iteration  11: 726853.120 ops/s
# Warmup Iteration  12: 731843.190 ops/s
# Warmup Iteration  13: 766878.830 ops/s
# Warmup Iteration  14: 775120.492 ops/s
# Warmup Iteration  15: 732266.664 ops/s
# Warmup Iteration  16: 745352.699 ops/s
# Warmup Iteration  17: 775139.182 ops/s
# Warmup Iteration  18: 770416.990 ops/s
# Warmup Iteration  19: 798251.106 ops/s
# Warmup Iteration  20: 771487.223 ops/s
# Warmup Iteration  21: 802957.159 ops/s
# Warmup Iteration  22: 778934.245 ops/s
# Warmup Iteration  23: 799112.646 ops/s
# Warmup Iteration  24: 779935.373 ops/s
# Warmup Iteration  25: 803517.105 ops/s
# Warmup Iteration  26: 787489.588 ops/s
# Warmup Iteration  27: 761891.312 ops/s
# Warmup Iteration  28: 823034.211 ops/s
# Warmup Iteration  29: 771283.177 ops/s
# Warmup Iteration  30: 811725.157 ops/s
Iteration   1: 813415.143 ops/s
Iteration   2: 810206.464 ops/s
Iteration   3: 794859.657 ops/s
Iteration   4: 816461.082 ops/s
Iteration   5: 793515.872 ops/s
Iteration   6: 778983.570 ops/s
Iteration   7: 810115.620 ops/s
Iteration   8: 804722.657 ops/s
Iteration   9: 770250.638 ops/s
Iteration  10: 789388.204 ops/s
Iteration  11: 786463.487 ops/s
Iteration  12: 777913.834 ops/s
Iteration  13: 825221.519 ops/s
Iteration  14: 763501.063 ops/s
Iteration  15: 774935.833 ops/s
Iteration  16: 772450.554 ops/s
Iteration  17: 802172.350 ops/s
Iteration  18: 770958.430 ops/s
Iteration  19: 818112.294 ops/s
Iteration  20: 757643.387 ops/s
Iteration  21: 775831.847 ops/s
Iteration  22: 809476.406 ops/s
Iteration  23: 776479.426 ops/s
Iteration  24: 792033.736 ops/s
Iteration  25: 769927.625 ops/s
Iteration  26: 802479.753 ops/s
Iteration  27: 762309.592 ops/s
Iteration  28: 812096.691 ops/s
Iteration  29: 780462.316 ops/s
Iteration  30: 781959.586 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryLongPredicateInvalid":
  789811.621 ±(99.9%) 12740.364 ops/s [Average]
  (min, avg, max) = (757643.387, 789811.621, 825221.519), stdev = 19069.179
  CI (99.9%): [777071.257, 802551.986] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableRetryTest._Benchmark.benchmark_retryLongPredicateInvalid  thrpt   30  789811.621 ± 12740.364  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatLongPredicateInvalid$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatLongPredicateInvalid

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 362136.270 ops/s
# Warmup Iteration   2: 616404.803 ops/s
# Warmup Iteration   3: 718488.528 ops/s
# Warmup Iteration   4: 712044.096 ops/s
# Warmup Iteration   5: 691146.585 ops/s
# Warmup Iteration   6: 635100.449 ops/s
# Warmup Iteration   7: 736952.085 ops/s
# Warmup Iteration   8: 727998.792 ops/s
# Warmup Iteration   9: 726762.762 ops/s
# Warmup Iteration  10: 729224.085 ops/s
# Warmup Iteration  11: 719469.166 ops/s
# Warmup Iteration  12: 747248.817 ops/s
# Warmup Iteration  13: 720030.037 ops/s
# Warmup Iteration  14: 761591.533 ops/s
# Warmup Iteration  15: 748234.038 ops/s
# Warmup Iteration  16: 730865.295 ops/s
# Warmup Iteration  17: 791490.255 ops/s
# Warmup Iteration  18: 752437.851 ops/s
# Warmup Iteration  19: 792298.710 ops/s
# Warmup Iteration  20: 788266.669 ops/s
# Warmup Iteration  21: 776865.200 ops/s
# Warmup Iteration  22: 750475.953 ops/s
# Warmup Iteration  23: 768994.994 ops/s
# Warmup Iteration  24: 792227.369 ops/s
# Warmup Iteration  25: 759449.355 ops/s
# Warmup Iteration  26: 805354.296 ops/s
# Warmup Iteration  27: 796220.138 ops/s
# Warmup Iteration  28: 751640.479 ops/s
# Warmup Iteration  29: 777074.179 ops/s
# Warmup Iteration  30: 786747.379 ops/s
Iteration   1: 772955.927 ops/s
Iteration   2: 800010.669 ops/s
Iteration   3: 776726.473 ops/s
Iteration   4: 779592.003 ops/s
Iteration   5: 767885.597 ops/s
Iteration   6: 762284.827 ops/s
Iteration   7: 801358.889 ops/s
Iteration   8: 757776.652 ops/s
Iteration   9: 798890.062 ops/s
Iteration  10: 816909.668 ops/s
Iteration  11: 747468.706 ops/s
Iteration  12: 793888.701 ops/s
Iteration  13: 782856.354 ops/s
Iteration  14: 773441.619 ops/s
Iteration  15: 605414.025 ops/s
Iteration  16: 802135.451 ops/s
Iteration  17: 760525.992 ops/s
Iteration  18: 783920.687 ops/s
Iteration  19: 769785.207 ops/s
Iteration  20: 797859.805 ops/s
Iteration  21: 793036.208 ops/s
Iteration  22: 758698.706 ops/s
Iteration  23: 777804.563 ops/s
Iteration  24: 781797.617 ops/s
Iteration  25: 764365.084 ops/s
Iteration  26: 803165.594 ops/s
Iteration  27: 759418.430 ops/s
Iteration  28: 797700.860 ops/s
Iteration  29: 771365.638 ops/s
Iteration  30: 747810.640 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatLongPredicateInvalid":
  773561.688 ±(99.9%) 24405.971 ops/s [Average]
  (min, avg, max) = (605414.025, 773561.688, 816909.668), stdev = 36529.712
  CI (99.9%): [749155.717, 797967.660] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableRepeatTest._Benchmark.benchmark_repeatLongPredicateInvalid  thrpt   30  773561.688 ± 24405.971  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithIterableCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithIterableCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 270996.981 ops/s
# Warmup Iteration   2: 505913.093 ops/s
# Warmup Iteration   3: 594598.471 ops/s
# Warmup Iteration   4: 524548.899 ops/s
# Warmup Iteration   5: 613972.693 ops/s
# Warmup Iteration   6: 502221.275 ops/s
# Warmup Iteration   7: 617291.664 ops/s
# Warmup Iteration   8: 585878.098 ops/s
# Warmup Iteration   9: 604474.742 ops/s
# Warmup Iteration  10: 602034.947 ops/s
# Warmup Iteration  11: 586512.647 ops/s
# Warmup Iteration  12: 619578.618 ops/s
# Warmup Iteration  13: 570403.021 ops/s
# Warmup Iteration  14: 611460.810 ops/s
# Warmup Iteration  15: 608970.880 ops/s
# Warmup Iteration  16: 621847.710 ops/s
# Warmup Iteration  17: 617994.708 ops/s
# Warmup Iteration  18: 629041.247 ops/s
# Warmup Iteration  19: 644352.302 ops/s
# Warmup Iteration  20: 620688.069 ops/s
# Warmup Iteration  21: 659485.844 ops/s
# Warmup Iteration  22: 617186.203 ops/s
# Warmup Iteration  23: 653617.410 ops/s
# Warmup Iteration  24: 621350.305 ops/s
# Warmup Iteration  25: 658725.286 ops/s
# Warmup Iteration  26: 605827.382 ops/s
# Warmup Iteration  27: 631813.089 ops/s
# Warmup Iteration  28: 632730.374 ops/s
# Warmup Iteration  29: 618536.137 ops/s
# Warmup Iteration  30: 634113.682 ops/s
Iteration   1: 624530.095 ops/s
Iteration   2: 636235.568 ops/s
Iteration   3: 634436.325 ops/s
Iteration   4: 617818.792 ops/s
Iteration   5: 640887.002 ops/s
Iteration   6: 607942.118 ops/s
Iteration   7: 622307.087 ops/s
Iteration   8: 658066.924 ops/s
Iteration   9: 623065.733 ops/s
Iteration  10: 637397.674 ops/s
Iteration  11: 618980.452 ops/s
Iteration  12: 631732.093 ops/s
Iteration  13: 623430.888 ops/s
Iteration  14: 630325.270 ops/s
Iteration  15: 636917.537 ops/s
Iteration  16: 625802.560 ops/s
Iteration  17: 625874.063 ops/s
Iteration  18: 645244.077 ops/s
Iteration  19: 621831.304 ops/s
Iteration  20: 646864.609 ops/s
Iteration  21: 653975.554 ops/s
Iteration  22: 617734.208 ops/s
Iteration  23: 655425.361 ops/s
Iteration  24: 648996.156 ops/s
Iteration  25: 617734.903 ops/s
Iteration  26: 625904.066 ops/s
Iteration  27: 640137.500 ops/s
Iteration  28: 625848.044 ops/s
Iteration  29: 627423.227 ops/s
Iteration  30: 649036.035 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithIterableCombinerReturnsNull":
  632396.841 ±(99.9%) 8632.900 ops/s [Average]
  (min, avg, max) = (607942.118, 632396.841, 658066.924), stdev = 12921.320
  CI (99.9%): [623763.941, 641029.741] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_zipWithIterableCombinerReturnsNull  thrpt   30  632396.841 ± 8632.900  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justSingleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justSingleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 146651.128 ops/s
# Warmup Iteration   2: 508317.065 ops/s
# Warmup Iteration   3: 564473.788 ops/s
# Warmup Iteration   4: 643313.400 ops/s
# Warmup Iteration   5: 539051.524 ops/s
# Warmup Iteration   6: 621728.524 ops/s
# Warmup Iteration   7: 640667.477 ops/s
# Warmup Iteration   8: 660322.902 ops/s
# Warmup Iteration   9: 636009.914 ops/s
# Warmup Iteration  10: 635916.882 ops/s
# Warmup Iteration  11: 665801.580 ops/s
# Warmup Iteration  12: 657192.669 ops/s
# Warmup Iteration  13: 634943.903 ops/s
# Warmup Iteration  14: 653978.062 ops/s
# Warmup Iteration  15: 633410.066 ops/s
# Warmup Iteration  16: 656700.172 ops/s
# Warmup Iteration  17: 693936.232 ops/s
# Warmup Iteration  18: 657911.545 ops/s
# Warmup Iteration  19: 683046.128 ops/s
# Warmup Iteration  20: 689120.648 ops/s
# Warmup Iteration  21: 684707.232 ops/s
# Warmup Iteration  22: 645181.273 ops/s
# Warmup Iteration  23: 680225.745 ops/s
# Warmup Iteration  24: 647752.148 ops/s
# Warmup Iteration  25: 665771.064 ops/s
# Warmup Iteration  26: 678124.233 ops/s
# Warmup Iteration  27: 668868.270 ops/s
# Warmup Iteration  28: 700598.565 ops/s
# Warmup Iteration  29: 660739.547 ops/s
# Warmup Iteration  30: 678371.805 ops/s
Iteration   1: 672785.450 ops/s
Iteration   2: 660934.764 ops/s
Iteration   3: 697932.794 ops/s
Iteration   4: 657043.965 ops/s
Iteration   5: 698370.709 ops/s
Iteration   6: 658116.655 ops/s
Iteration   7: 659352.200 ops/s
Iteration   8: 670339.538 ops/s
Iteration   9: 471482.604 ops/s
Iteration  10: 672361.224 ops/s
Iteration  11: 675675.974 ops/s
Iteration  12: 674113.715 ops/s
Iteration  13: 651257.702 ops/s
Iteration  14: 662636.088 ops/s
Iteration  15: 695112.747 ops/s
Iteration  16: 670793.146 ops/s
Iteration  17: 694452.590 ops/s
Iteration  18: 661909.441 ops/s
Iteration  19: 690565.830 ops/s
Iteration  20: 670423.339 ops/s
Iteration  21: 677575.169 ops/s
Iteration  22: 674855.401 ops/s
Iteration  23: 682462.082 ops/s
Iteration  24: 676834.518 ops/s
Iteration  25: 665144.255 ops/s
Iteration  26: 706490.669 ops/s
Iteration  27: 685524.488 ops/s
Iteration  28: 642112.348 ops/s
Iteration  29: 659685.863 ops/s
Iteration  30: 662829.390 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justSingleError":
  666639.155 ±(99.9%) 26655.484 ops/s [Average]
  (min, avg, max) = (471482.604, 666639.155, 706490.669), stdev = 39896.677
  CI (99.9%): [639983.671, 693294.639] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justSingleError  thrpt   30  666639.155 ± 26655.484  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105129.226 ops/s
# Warmup Iteration   2: 530039.382 ops/s
# Warmup Iteration   3: 868032.794 ops/s
# Warmup Iteration   4: 929170.198 ops/s
# Warmup Iteration   5: 880227.433 ops/s
# Warmup Iteration   6: 985990.089 ops/s
# Warmup Iteration   7: 1020117.657 ops/s
# Warmup Iteration   8: 1005267.577 ops/s
# Warmup Iteration   9: 985056.246 ops/s
# Warmup Iteration  10: 1027453.075 ops/s
# Warmup Iteration  11: 1028939.553 ops/s
# Warmup Iteration  12: 992930.981 ops/s
# Warmup Iteration  13: 1003733.646 ops/s
# Warmup Iteration  14: 1035195.785 ops/s
# Warmup Iteration  15: 985787.016 ops/s
# Warmup Iteration  16: 1036182.187 ops/s
# Warmup Iteration  17: 1006005.649 ops/s
# Warmup Iteration  18: 995640.758 ops/s
# Warmup Iteration  19: 1031869.828 ops/s
# Warmup Iteration  20: 984587.094 ops/s
# Warmup Iteration  21: 1042432.809 ops/s
# Warmup Iteration  22: 980260.850 ops/s
# Warmup Iteration  23: 1028372.084 ops/s
# Warmup Iteration  24: 1043330.821 ops/s
# Warmup Iteration  25: 988631.026 ops/s
# Warmup Iteration  26: 994686.155 ops/s
# Warmup Iteration  27: 1035171.309 ops/s
# Warmup Iteration  28: 1011872.721 ops/s
# Warmup Iteration  29: 988910.502 ops/s
# Warmup Iteration  30: 1021068.357 ops/s
Iteration   1: 987296.087 ops/s
Iteration   2: 998924.114 ops/s
Iteration   3: 1020086.061 ops/s
Iteration   4: 1035512.280 ops/s
Iteration   5: 993035.646 ops/s
Iteration   6: 1031935.241 ops/s
Iteration   7: 1025557.488 ops/s
Iteration   8: 961475.974 ops/s
Iteration   9: 1058700.598 ops/s
Iteration  10: 1044235.098 ops/s
Iteration  11: 993502.418 ops/s
Iteration  12: 991433.977 ops/s
Iteration  13: 1039416.341 ops/s
Iteration  14: 978531.316 ops/s
Iteration  15: 990828.365 ops/s
Iteration  16: 1038285.370 ops/s
Iteration  17: 1035587.700 ops/s
Iteration  18: 987700.567 ops/s
Iteration  19: 1035286.191 ops/s
Iteration  20: 989038.417 ops/s
Iteration  21: 1001990.883 ops/s
Iteration  22: 1000717.989 ops/s
Iteration  23: 995399.410 ops/s
Iteration  24: 973507.582 ops/s
Iteration  25: 995793.695 ops/s
Iteration  26: 1014302.898 ops/s
Iteration  27: 987239.838 ops/s
Iteration  28: 1027398.300 ops/s
Iteration  29: 966355.594 ops/s
Iteration  30: 1005247.030 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_backpressure":
  1006810.749 ±(99.9%) 16888.163 ops/s [Average]
  (min, avg, max) = (961475.974, 1006810.749, 1058700.598), stdev = 25277.409
  CI (99.9%): [989922.586, 1023698.912] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_backpressure  thrpt   30  1006810.749 ± 16888.163  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_retry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_retry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36587.025 ops/s
# Warmup Iteration   2: 109450.864 ops/s
# Warmup Iteration   3: 121726.638 ops/s
# Warmup Iteration   4: 130718.995 ops/s
# Warmup Iteration   5: 138153.967 ops/s
# Warmup Iteration   6: 133492.215 ops/s
# Warmup Iteration   7: 137907.636 ops/s
# Warmup Iteration   8: 140788.419 ops/s
# Warmup Iteration   9: 134108.882 ops/s
# Warmup Iteration  10: 139902.358 ops/s
# Warmup Iteration  11: 132865.247 ops/s
# Warmup Iteration  12: 140424.120 ops/s
# Warmup Iteration  13: 136296.522 ops/s
# Warmup Iteration  14: 136961.481 ops/s
# Warmup Iteration  15: 136251.735 ops/s
# Warmup Iteration  16: 133764.436 ops/s
# Warmup Iteration  17: 146813.455 ops/s
# Warmup Iteration  18: 139854.941 ops/s
# Warmup Iteration  19: 137846.985 ops/s
# Warmup Iteration  20: 144126.744 ops/s
# Warmup Iteration  21: 137554.863 ops/s
# Warmup Iteration  22: 144797.852 ops/s
# Warmup Iteration  23: 149976.294 ops/s
# Warmup Iteration  24: 140955.300 ops/s
# Warmup Iteration  25: 139382.006 ops/s
# Warmup Iteration  26: 147171.697 ops/s
# Warmup Iteration  27: 151607.138 ops/s
# Warmup Iteration  28: 139159.140 ops/s
# Warmup Iteration  29: 141453.664 ops/s
# Warmup Iteration  30: 144469.834 ops/s
Iteration   1: 144629.358 ops/s
Iteration   2: 142716.608 ops/s
Iteration   3: 141376.638 ops/s
Iteration   4: 117712.522 ops/s
Iteration   5: 145392.940 ops/s
Iteration   6: 138992.673 ops/s
Iteration   7: 144662.265 ops/s
Iteration   8: 144163.273 ops/s
Iteration   9: 144745.746 ops/s
Iteration  10: 146253.962 ops/s
Iteration  11: 139936.172 ops/s
Iteration  12: 146133.812 ops/s
Iteration  13: 142214.877 ops/s
Iteration  14: 142877.945 ops/s
Iteration  15: 149542.964 ops/s
Iteration  16: 143328.933 ops/s
Iteration  17: 143844.570 ops/s
Iteration  18: 146339.372 ops/s
Iteration  19: 140551.338 ops/s
Iteration  20: 145491.451 ops/s
Iteration  21: 142629.632 ops/s
Iteration  22: 146658.752 ops/s
Iteration  23: 142484.836 ops/s
Iteration  24: 139509.382 ops/s
Iteration  25: 146451.871 ops/s
Iteration  26: 138519.764 ops/s
Iteration  27: 140026.266 ops/s
Iteration  28: 148043.215 ops/s
Iteration  29: 142387.356 ops/s
Iteration  30: 143743.425 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleMiscTest._Benchmark.benchmark_retry":
  142712.064 ±(99.9%) 3642.265 ops/s [Average]
  (min, avg, max) = (117712.522, 142712.064, 149542.964), stdev = 5451.571
  CI (99.9%): [139069.799, 146354.328] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score      Error  Units
SingleMiscTest._Benchmark.benchmark_retry  thrpt   30  142712.064 ± 3642.265  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_requestOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_requestOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58907.364 ops/s
# Warmup Iteration   2: 285907.324 ops/s
# Warmup Iteration   3: 658305.843 ops/s
# Warmup Iteration   4: 726737.974 ops/s
# Warmup Iteration   5: 645016.116 ops/s
# Warmup Iteration   6: 648240.791 ops/s
# Warmup Iteration   7: 731325.143 ops/s
# Warmup Iteration   8: 729831.709 ops/s
# Warmup Iteration   9: 752736.531 ops/s
# Warmup Iteration  10: 763963.230 ops/s
# Warmup Iteration  11: 706080.474 ops/s
# Warmup Iteration  12: 737717.701 ops/s
# Warmup Iteration  13: 726004.400 ops/s
# Warmup Iteration  14: 719476.026 ops/s
# Warmup Iteration  15: 742358.332 ops/s
# Warmup Iteration  16: 725202.044 ops/s
# Warmup Iteration  17: 742868.746 ops/s
# Warmup Iteration  18: 715660.573 ops/s
# Warmup Iteration  19: 747857.037 ops/s
# Warmup Iteration  20: 756077.665 ops/s
# Warmup Iteration  21: 714208.160 ops/s
# Warmup Iteration  22: 743201.767 ops/s
# Warmup Iteration  23: 716927.783 ops/s
# Warmup Iteration  24: 732657.942 ops/s
# Warmup Iteration  25: 730757.795 ops/s
# Warmup Iteration  26: 726891.303 ops/s
# Warmup Iteration  27: 745170.462 ops/s
# Warmup Iteration  28: 715367.886 ops/s
# Warmup Iteration  29: 740984.548 ops/s
# Warmup Iteration  30: 706670.053 ops/s
Iteration   1: 743388.443 ops/s
Iteration   2: 709770.174 ops/s
Iteration   3: 736292.299 ops/s
Iteration   4: 755726.463 ops/s
Iteration   5: 706839.501 ops/s
Iteration   6: 732414.796 ops/s
Iteration   7: 717730.612 ops/s
Iteration   8: 753586.580 ops/s
Iteration   9: 752464.744 ops/s
Iteration  10: 700491.595 ops/s
Iteration  11: 743293.172 ops/s
Iteration  12: 728712.082 ops/s
Iteration  13: 736759.230 ops/s
Iteration  14: 739144.147 ops/s
Iteration  15: 712511.773 ops/s
Iteration  16: 758732.907 ops/s
Iteration  17: 740378.760 ops/s
Iteration  18: 708331.989 ops/s
Iteration  19: 754138.099 ops/s
Iteration  20: 724919.578 ops/s
Iteration  21: 743812.124 ops/s
Iteration  22: 739147.257 ops/s
Iteration  23: 723836.262 ops/s
Iteration  24: 732347.398 ops/s
Iteration  25: 698222.055 ops/s
Iteration  26: 753860.133 ops/s
Iteration  27: 754369.042 ops/s
Iteration  28: 724073.837 ops/s
Iteration  29: 730272.212 ops/s
Iteration  30: 757499.728 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_requestOverflow":
  733768.900 ±(99.9%) 12025.684 ops/s [Average]
  (min, avg, max) = (698222.055, 733768.900, 758732.907), stdev = 17999.479
  CI (99.9%): [721743.215, 745794.584] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
FlowableGroupByTest._Benchmark.benchmark_requestOverflow  thrpt   30  733768.900 ± 12025.684  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_splitCombineSubscriberChangeAfterOnNextFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_splitCombineSubscriberChangeAfterOnNextFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6827.703 ops/s
# Warmup Iteration   2: 45218.128 ops/s
# Warmup Iteration   3: 112407.570 ops/s
# Warmup Iteration   4: 111574.040 ops/s
# Warmup Iteration   5: 112799.360 ops/s
# Warmup Iteration   6: 136751.390 ops/s
# Warmup Iteration   7: 133459.021 ops/s
# Warmup Iteration   8: 135505.571 ops/s
# Warmup Iteration   9: 133363.396 ops/s
# Warmup Iteration  10: 136555.947 ops/s
# Warmup Iteration  11: 135038.610 ops/s
# Warmup Iteration  12: 132613.209 ops/s
# Warmup Iteration  13: 136697.287 ops/s
# Warmup Iteration  14: 131113.904 ops/s
# Warmup Iteration  15: 132461.557 ops/s
# Warmup Iteration  16: 136056.517 ops/s
# Warmup Iteration  17: 129249.553 ops/s
# Warmup Iteration  18: 137486.856 ops/s
# Warmup Iteration  19: 132999.253 ops/s
# Warmup Iteration  20: 130120.808 ops/s
# Warmup Iteration  21: 138683.548 ops/s
# Warmup Iteration  22: 128469.587 ops/s
# Warmup Iteration  23: 135462.383 ops/s
# Warmup Iteration  24: 131211.395 ops/s
# Warmup Iteration  25: 132816.012 ops/s
# Warmup Iteration  26: 129566.129 ops/s
# Warmup Iteration  27: 132859.305 ops/s
# Warmup Iteration  28: 133829.825 ops/s
# Warmup Iteration  29: 93989.912 ops/s
# Warmup Iteration  30: 134177.618 ops/s
Iteration   1: 126208.823 ops/s
Iteration   2: 130576.777 ops/s
Iteration   3: 131390.593 ops/s
Iteration   4: 132667.418 ops/s
Iteration   5: 137012.492 ops/s
Iteration   6: 128370.653 ops/s
Iteration   7: 134193.816 ops/s
Iteration   8: 136504.864 ops/s
Iteration   9: 130007.606 ops/s
Iteration  10: 138636.762 ops/s
Iteration  11: 130375.611 ops/s
Iteration  12: 137545.915 ops/s
Iteration  13: 127674.282 ops/s
Iteration  14: 131754.560 ops/s
Iteration  15: 136629.020 ops/s
Iteration  16: 137209.487 ops/s
Iteration  17: 129379.837 ops/s
Iteration  18: 134091.853 ops/s
Iteration  19: 135124.973 ops/s
Iteration  20: 133102.180 ops/s
Iteration  21: 134791.884 ops/s
Iteration  22: 132621.954 ops/s
Iteration  23: 135586.337 ops/s
Iteration  24: 131732.430 ops/s
Iteration  25: 133530.703 ops/s
Iteration  26: 129353.743 ops/s
Iteration  27: 130978.480 ops/s
Iteration  28: 138640.887 ops/s
Iteration  29: 128450.325 ops/s
Iteration  30: 134853.835 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_splitCombineSubscriberChangeAfterOnNextFused":
  132966.603 ±(99.9%) 2284.545 ops/s [Average]
  (min, avg, max) = (126208.823, 132966.603, 138640.887), stdev = 3419.399
  CI (99.9%): [130682.059, 135251.148] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_splitCombineSubscriberChangeAfterOnNextFused  thrpt   30  132966.603 ± 2284.545  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_withOtherMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_withOtherMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 123918.379 ops/s
# Warmup Iteration   2: 536742.521 ops/s
# Warmup Iteration   3: 581455.076 ops/s
# Warmup Iteration   4: 634776.029 ops/s
# Warmup Iteration   5: 554212.188 ops/s
# Warmup Iteration   6: 636967.531 ops/s
# Warmup Iteration   7: 655338.529 ops/s
# Warmup Iteration   8: 667390.195 ops/s
# Warmup Iteration   9: 635504.592 ops/s
# Warmup Iteration  10: 669879.791 ops/s
# Warmup Iteration  11: 643021.581 ops/s
# Warmup Iteration  12: 641110.074 ops/s
# Warmup Iteration  13: 655443.369 ops/s
# Warmup Iteration  14: 644067.029 ops/s
# Warmup Iteration  15: 653275.253 ops/s
# Warmup Iteration  16: 626993.195 ops/s
# Warmup Iteration  17: 703083.923 ops/s
# Warmup Iteration  18: 706534.993 ops/s
# Warmup Iteration  19: 669822.716 ops/s
# Warmup Iteration  20: 717271.001 ops/s
# Warmup Iteration  21: 670336.093 ops/s
# Warmup Iteration  22: 683401.089 ops/s
# Warmup Iteration  23: 720553.313 ops/s
# Warmup Iteration  24: 692231.581 ops/s
# Warmup Iteration  25: 672607.036 ops/s
# Warmup Iteration  26: 710949.567 ops/s
# Warmup Iteration  27: 658720.621 ops/s
# Warmup Iteration  28: 691462.412 ops/s
# Warmup Iteration  29: 711128.989 ops/s
# Warmup Iteration  30: 678841.325 ops/s
Iteration   1: 699431.572 ops/s
Iteration   2: 675948.633 ops/s
Iteration   3: 679737.721 ops/s
Iteration   4: 701275.923 ops/s
Iteration   5: 680245.786 ops/s
Iteration   6: 712412.073 ops/s
Iteration   7: 681241.289 ops/s
Iteration   8: 702089.097 ops/s
Iteration   9: 686414.432 ops/s
Iteration  10: 688333.945 ops/s
Iteration  11: 697451.665 ops/s
Iteration  12: 712690.114 ops/s
Iteration  13: 688620.145 ops/s
Iteration  14: 676574.802 ops/s
Iteration  15: 674658.054 ops/s
Iteration  16: 702634.363 ops/s
Iteration  17: 664131.132 ops/s
Iteration  18: 698647.664 ops/s
Iteration  19: 708493.929 ops/s
Iteration  20: 645767.455 ops/s
Iteration  21: 699440.084 ops/s
Iteration  22: 678224.301 ops/s
Iteration  23: 716063.296 ops/s
Iteration  24: 674742.408 ops/s
Iteration  25: 691473.718 ops/s
Iteration  26: 711343.085 ops/s
Iteration  27: 666740.874 ops/s
Iteration  28: 689983.207 ops/s
Iteration  29: 676965.384 ops/s
Iteration  30: 681551.853 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_withOtherMainError":
  688777.600 ±(99.9%) 11013.094 ops/s [Average]
  (min, avg, max) = (645767.455, 688777.600, 716063.296), stdev = 16483.882
  CI (99.9%): [677764.506, 699790.694] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_withOtherMainError  thrpt   30  688777.600 ± 11013.094  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_arrayDelayErrorMultipleErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_arrayDelayErrorMultipleErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 37021.581 ops/s
# Warmup Iteration   2: 142287.918 ops/s
# Warmup Iteration   3: 190747.769 ops/s
# Warmup Iteration   4: 196634.808 ops/s
# Warmup Iteration   5: 218030.826 ops/s
# Warmup Iteration   6: 177924.797 ops/s
# Warmup Iteration   7: 223902.777 ops/s
# Warmup Iteration   8: 212266.971 ops/s
# Warmup Iteration   9: 219561.866 ops/s
# Warmup Iteration  10: 218974.654 ops/s
# Warmup Iteration  11: 224619.528 ops/s
# Warmup Iteration  12: 213337.683 ops/s
# Warmup Iteration  13: 223375.238 ops/s
# Warmup Iteration  14: 210176.202 ops/s
# Warmup Iteration  15: 217560.501 ops/s
# Warmup Iteration  16: 215082.499 ops/s
# Warmup Iteration  17: 220632.697 ops/s
# Warmup Iteration  18: 239827.943 ops/s
# Warmup Iteration  19: 220952.667 ops/s
# Warmup Iteration  20: 234412.268 ops/s
# Warmup Iteration  21: 229518.004 ops/s
# Warmup Iteration  22: 223119.879 ops/s
# Warmup Iteration  23: 183061.858 ops/s
# Warmup Iteration  24: 230554.304 ops/s
# Warmup Iteration  25: 225587.472 ops/s
# Warmup Iteration  26: 228393.681 ops/s
# Warmup Iteration  27: 236586.367 ops/s
# Warmup Iteration  28: 228620.430 ops/s
# Warmup Iteration  29: 224592.896 ops/s
# Warmup Iteration  30: 237519.855 ops/s
Iteration   1: 235477.424 ops/s
Iteration   2: 223065.463 ops/s
Iteration   3: 230222.723 ops/s
Iteration   4: 231449.943 ops/s
Iteration   5: 228751.660 ops/s
Iteration   6: 229871.654 ops/s
Iteration   7: 226776.735 ops/s
Iteration   8: 228068.128 ops/s
Iteration   9: 237554.010 ops/s
Iteration  10: 225014.735 ops/s
Iteration  11: 235880.408 ops/s
Iteration  12: 231719.057 ops/s
Iteration  13: 227532.963 ops/s
Iteration  14: 224710.300 ops/s
Iteration  15: 233275.967 ops/s
Iteration  16: 223549.312 ops/s
Iteration  17: 237529.815 ops/s
Iteration  18: 228254.360 ops/s
Iteration  19: 225026.691 ops/s
Iteration  20: 231864.910 ops/s
Iteration  21: 233092.757 ops/s
Iteration  22: 226441.292 ops/s
Iteration  23: 234325.356 ops/s
Iteration  24: 224865.282 ops/s
Iteration  25: 226396.925 ops/s
Iteration  26: 229500.640 ops/s
Iteration  27: 236395.516 ops/s
Iteration  28: 217470.448 ops/s
Iteration  29: 237706.619 ops/s
Iteration  30: 223365.857 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_arrayDelayErrorMultipleErrors":
  229505.232 ±(99.9%) 3429.784 ops/s [Average]
  (min, avg, max) = (217470.448, 229505.232, 237706.619), stdev = 5133.539
  CI (99.9%): [226075.448, 232935.015] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableConcatTest._Benchmark.benchmark_arrayDelayErrorMultipleErrors  thrpt   30  229505.232 ± 3429.784  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_errorResubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_errorResubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 47581.769 ops/s
# Warmup Iteration   2: 303534.615 ops/s
# Warmup Iteration   3: 470364.042 ops/s
# Warmup Iteration   4: 484917.570 ops/s
# Warmup Iteration   5: 540667.836 ops/s
# Warmup Iteration   6: 513752.664 ops/s
# Warmup Iteration   7: 559912.374 ops/s
# Warmup Iteration   8: 562116.657 ops/s
# Warmup Iteration   9: 559988.354 ops/s
# Warmup Iteration  10: 554629.953 ops/s
# Warmup Iteration  11: 555321.238 ops/s
# Warmup Iteration  12: 542570.159 ops/s
# Warmup Iteration  13: 559882.477 ops/s
# Warmup Iteration  14: 537243.901 ops/s
# Warmup Iteration  15: 573503.753 ops/s
# Warmup Iteration  16: 557085.050 ops/s
# Warmup Iteration  17: 569996.060 ops/s
# Warmup Iteration  18: 572336.577 ops/s
# Warmup Iteration  19: 598673.663 ops/s
# Warmup Iteration  20: 572308.851 ops/s
# Warmup Iteration  21: 596359.709 ops/s
# Warmup Iteration  22: 588883.460 ops/s
# Warmup Iteration  23: 572973.126 ops/s
# Warmup Iteration  24: 569531.551 ops/s
# Warmup Iteration  25: 578734.834 ops/s
# Warmup Iteration  26: 571381.605 ops/s
# Warmup Iteration  27: 599618.644 ops/s
# Warmup Iteration  28: 590459.885 ops/s
# Warmup Iteration  29: 558362.853 ops/s
# Warmup Iteration  30: 586347.784 ops/s
Iteration   1: 580747.220 ops/s
Iteration   2: 563871.842 ops/s
Iteration   3: 602491.610 ops/s
Iteration   4: 571522.435 ops/s
Iteration   5: 569712.684 ops/s
Iteration   6: 554757.993 ops/s
Iteration   7: 575469.188 ops/s
Iteration   8: 587801.486 ops/s
Iteration   9: 570310.615 ops/s
Iteration  10: 570825.673 ops/s
Iteration  11: 600340.226 ops/s
Iteration  12: 595976.108 ops/s
Iteration  13: 606736.879 ops/s
Iteration  14: 562497.505 ops/s
Iteration  15: 572261.605 ops/s
Iteration  16: 588675.866 ops/s
Iteration  17: 579043.388 ops/s
Iteration  18: 592308.090 ops/s
Iteration  19: 600957.203 ops/s
Iteration  20: 557295.776 ops/s
Iteration  21: 595915.047 ops/s
Iteration  22: 585679.863 ops/s
Iteration  23: 596694.548 ops/s
Iteration  24: 596981.883 ops/s
Iteration  25: 559942.372 ops/s
Iteration  26: 605267.347 ops/s
Iteration  27: 562110.845 ops/s
Iteration  28: 594447.803 ops/s
Iteration  29: 596981.529 ops/s
Iteration  30: 589305.407 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_errorResubscribe":
  582897.668 ±(99.9%) 10613.558 ops/s [Average]
  (min, avg, max) = (554757.993, 582897.668, 606736.879), stdev = 15885.876
  CI (99.9%): [572284.110, 593511.226] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_errorResubscribe  thrpt   30  582897.668 ± 10613.558  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_delayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_delayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74949.859 ops/s
# Warmup Iteration   2: 261545.257 ops/s
# Warmup Iteration   3: 437126.054 ops/s
# Warmup Iteration   4: 450846.990 ops/s
# Warmup Iteration   5: 482926.215 ops/s
# Warmup Iteration   6: 434112.437 ops/s
# Warmup Iteration   7: 423955.950 ops/s
# Warmup Iteration   8: 473593.191 ops/s
# Warmup Iteration   9: 475939.721 ops/s
# Warmup Iteration  10: 445628.257 ops/s
# Warmup Iteration  11: 459469.981 ops/s
# Warmup Iteration  12: 469366.005 ops/s
# Warmup Iteration  13: 460310.872 ops/s
# Warmup Iteration  14: 470834.257 ops/s
# Warmup Iteration  15: 455206.058 ops/s
# Warmup Iteration  16: 468056.710 ops/s
# Warmup Iteration  17: 506109.137 ops/s
# Warmup Iteration  18: 375003.998 ops/s
# Warmup Iteration  19: 489990.721 ops/s
# Warmup Iteration  20: 503427.981 ops/s
# Warmup Iteration  21: 472613.747 ops/s
# Warmup Iteration  22: 497099.163 ops/s
# Warmup Iteration  23: 497987.510 ops/s
# Warmup Iteration  24: 474153.012 ops/s
# Warmup Iteration  25: 467618.070 ops/s
# Warmup Iteration  26: 510786.772 ops/s
# Warmup Iteration  27: 494568.220 ops/s
# Warmup Iteration  28: 469836.244 ops/s
# Warmup Iteration  29: 479458.328 ops/s
# Warmup Iteration  30: 492196.658 ops/s
Iteration   1: 471310.290 ops/s
Iteration   2: 488958.919 ops/s
Iteration   3: 510288.063 ops/s
Iteration   4: 464823.100 ops/s
Iteration   5: 504930.732 ops/s
Iteration   6: 471332.582 ops/s
Iteration   7: 497132.218 ops/s
Iteration   8: 478807.000 ops/s
Iteration   9: 484455.534 ops/s
Iteration  10: 493309.316 ops/s
Iteration  11: 472494.538 ops/s
Iteration  12: 504944.763 ops/s
Iteration  13: 447281.008 ops/s
Iteration  14: 487529.128 ops/s
Iteration  15: 507089.064 ops/s
Iteration  16: 472745.481 ops/s
Iteration  17: 494443.130 ops/s
Iteration  18: 476154.419 ops/s
Iteration  19: 493638.090 ops/s
Iteration  20: 494938.887 ops/s
Iteration  21: 490105.815 ops/s
Iteration  22: 498239.548 ops/s
Iteration  23: 483775.427 ops/s
Iteration  24: 508642.969 ops/s
Iteration  25: 474518.773 ops/s
Iteration  26: 501639.926 ops/s
Iteration  27: 479034.847 ops/s
Iteration  28: 481016.678 ops/s
Iteration  29: 495192.568 ops/s
Iteration  30: 473879.537 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferTest._Benchmark.benchmark_delayError":
  486755.078 ±(99.9%) 9914.365 ops/s [Average]
  (min, avg, max) = (447281.008, 486755.078, 510288.063), stdev = 14839.356
  CI (99.9%): [476840.713, 496669.443] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableOnBackpressureBufferTest._Benchmark.benchmark_delayError  thrpt   30  486755.078 ± 9914.365  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badSourceDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badSourceDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15013.870 ops/s
# Warmup Iteration   2: 93658.010 ops/s
# Warmup Iteration   3: 138090.042 ops/s
# Warmup Iteration   4: 148807.854 ops/s
# Warmup Iteration   5: 142478.251 ops/s
# Warmup Iteration   6: 164135.575 ops/s
# Warmup Iteration   7: 144801.804 ops/s
# Warmup Iteration   8: 153229.124 ops/s
# Warmup Iteration   9: 161528.544 ops/s
# Warmup Iteration  10: 156397.069 ops/s
# Warmup Iteration  11: 154318.451 ops/s
# Warmup Iteration  12: 163204.256 ops/s
# Warmup Iteration  13: 155063.256 ops/s
# Warmup Iteration  14: 161838.038 ops/s
# Warmup Iteration  15: 164038.421 ops/s
# Warmup Iteration  16: 155702.607 ops/s
# Warmup Iteration  17: 158072.805 ops/s
# Warmup Iteration  18: 141887.385 ops/s
# Warmup Iteration  19: 160113.214 ops/s
# Warmup Iteration  20: 165232.367 ops/s
# Warmup Iteration  21: 160335.120 ops/s
# Warmup Iteration  22: 162711.119 ops/s
# Warmup Iteration  23: 172540.454 ops/s
# Warmup Iteration  24: 168891.104 ops/s
# Warmup Iteration  25: 158288.461 ops/s
# Warmup Iteration  26: 167202.033 ops/s
# Warmup Iteration  27: 158229.089 ops/s
# Warmup Iteration  28: 167935.664 ops/s
# Warmup Iteration  29: 160982.681 ops/s
# Warmup Iteration  30: 162542.063 ops/s
Iteration   1: 165396.007 ops/s
Iteration   2: 160308.028 ops/s
Iteration   3: 168925.853 ops/s
Iteration   4: 155734.716 ops/s
Iteration   5: 160549.545 ops/s
Iteration   6: 162450.332 ops/s
Iteration   7: 159638.277 ops/s
Iteration   8: 169007.288 ops/s
Iteration   9: 159535.655 ops/s
Iteration  10: 162281.806 ops/s
Iteration  11: 165153.620 ops/s
Iteration  12: 162202.247 ops/s
Iteration  13: 166561.541 ops/s
Iteration  14: 158447.234 ops/s
Iteration  15: 160643.844 ops/s
Iteration  16: 172510.203 ops/s
Iteration  17: 161131.245 ops/s
Iteration  18: 160233.938 ops/s
Iteration  19: 163579.331 ops/s
Iteration  20: 162644.121 ops/s
Iteration  21: 160745.258 ops/s
Iteration  22: 167524.622 ops/s
Iteration  23: 162247.788 ops/s
Iteration  24: 168445.025 ops/s
Iteration  25: 162409.692 ops/s
Iteration  26: 161492.892 ops/s
Iteration  27: 167893.189 ops/s
Iteration  28: 162277.939 ops/s
Iteration  29: 167673.575 ops/s
Iteration  30: 161170.826 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badSourceDelayError":
  163293.855 ±(99.9%) 2539.074 ops/s [Average]
  (min, avg, max) = (155734.716, 163293.855, 172510.203), stdev = 3800.367
  CI (99.9%): [160754.780, 165832.929] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_badSourceDelayError  thrpt   30  163293.855 ± 2539.074  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33707.355 ops/s
# Warmup Iteration   2: 85973.931 ops/s
# Warmup Iteration   3: 173370.839 ops/s
# Warmup Iteration   4: 311923.282 ops/s
# Warmup Iteration   5: 333367.404 ops/s
# Warmup Iteration   6: 318886.385 ops/s
# Warmup Iteration   7: 338417.807 ops/s
# Warmup Iteration   8: 347620.936 ops/s
# Warmup Iteration   9: 357198.176 ops/s
# Warmup Iteration  10: 341148.749 ops/s
# Warmup Iteration  11: 359902.921 ops/s
# Warmup Iteration  12: 317220.082 ops/s
# Warmup Iteration  13: 341896.910 ops/s
# Warmup Iteration  14: 365135.572 ops/s
# Warmup Iteration  15: 337032.877 ops/s
# Warmup Iteration  16: 351699.148 ops/s
# Warmup Iteration  17: 355952.102 ops/s
# Warmup Iteration  18: 373379.069 ops/s
# Warmup Iteration  19: 357725.040 ops/s
# Warmup Iteration  20: 350985.299 ops/s
# Warmup Iteration  21: 365117.123 ops/s
# Warmup Iteration  22: 354156.677 ops/s
# Warmup Iteration  23: 357943.447 ops/s
# Warmup Iteration  24: 343084.403 ops/s
# Warmup Iteration  25: 315979.548 ops/s
# Warmup Iteration  26: 352413.937 ops/s
# Warmup Iteration  27: 366500.273 ops/s
# Warmup Iteration  28: 353939.804 ops/s
# Warmup Iteration  29: 354392.597 ops/s
# Warmup Iteration  30: 374534.157 ops/s
Iteration   1: 351124.222 ops/s
Iteration   2: 359319.320 ops/s
Iteration   3: 351361.800 ops/s
Iteration   4: 362350.312 ops/s
Iteration   5: 368370.392 ops/s
Iteration   6: 346942.310 ops/s
Iteration   7: 355213.267 ops/s
Iteration   8: 368961.447 ops/s
Iteration   9: 354853.248 ops/s
Iteration  10: 356860.201 ops/s
Iteration  11: 364422.212 ops/s
Iteration  12: 360410.455 ops/s
Iteration  13: 349621.402 ops/s
Iteration  14: 369479.511 ops/s
Iteration  15: 356449.795 ops/s
Iteration  16: 354402.819 ops/s
Iteration  17: 358305.482 ops/s
Iteration  18: 353470.887 ops/s
Iteration  19: 362432.018 ops/s
Iteration  20: 363314.607 ops/s
Iteration  21: 347845.504 ops/s
Iteration  22: 356734.286 ops/s
Iteration  23: 371380.698 ops/s
Iteration  24: 339638.257 ops/s
Iteration  25: 365403.961 ops/s
Iteration  26: 351391.056 ops/s
Iteration  27: 364387.669 ops/s
Iteration  28: 346015.672 ops/s
Iteration  29: 358481.928 ops/s
Iteration  30: 353803.990 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen2":
  357424.958 ±(99.9%) 5153.680 ops/s [Average]
  (min, avg, max) = (339638.257, 357424.958, 371380.698), stdev = 7713.785
  CI (99.9%): [352271.278, 362578.637] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableRetryTest._Benchmark.benchmark_noCancelPreviousRepeatWhen2  thrpt   30  357424.958 ± 5153.680  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_mainCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_mainCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150960.771 ops/s
# Warmup Iteration   2: 423430.638 ops/s
# Warmup Iteration   3: 982646.382 ops/s
# Warmup Iteration   4: 1025758.506 ops/s
# Warmup Iteration   5: 945994.560 ops/s
# Warmup Iteration   6: 1007612.791 ops/s
# Warmup Iteration   7: 930634.077 ops/s
# Warmup Iteration   8: 1017206.255 ops/s
# Warmup Iteration   9: 993804.609 ops/s
# Warmup Iteration  10: 1052541.139 ops/s
# Warmup Iteration  11: 1004634.401 ops/s
# Warmup Iteration  12: 1044737.661 ops/s
# Warmup Iteration  13: 966959.846 ops/s
# Warmup Iteration  14: 1059502.559 ops/s
# Warmup Iteration  15: 993988.131 ops/s
# Warmup Iteration  16: 931978.465 ops/s
# Warmup Iteration  17: 1018556.001 ops/s
# Warmup Iteration  18: 973224.604 ops/s
# Warmup Iteration  19: 1007874.566 ops/s
# Warmup Iteration  20: 1018852.007 ops/s
# Warmup Iteration  21: 989145.189 ops/s
# Warmup Iteration  22: 1007142.415 ops/s
# Warmup Iteration  23: 1038257.948 ops/s
# Warmup Iteration  24: 995167.100 ops/s
# Warmup Iteration  25: 992057.902 ops/s
# Warmup Iteration  26: 1041311.299 ops/s
# Warmup Iteration  27: 786120.109 ops/s
# Warmup Iteration  28: 1021645.842 ops/s
# Warmup Iteration  29: 993455.357 ops/s
# Warmup Iteration  30: 1036622.675 ops/s
Iteration   1: 1025832.734 ops/s
Iteration   2: 1004445.069 ops/s
Iteration   3: 1039931.309 ops/s
Iteration   4: 990393.984 ops/s
Iteration   5: 948005.868 ops/s
Iteration   6: 999504.628 ops/s
Iteration   7: 994813.211 ops/s
Iteration   8: 1033844.432 ops/s
Iteration   9: 996029.329 ops/s
Iteration  10: 1014997.244 ops/s
Iteration  11: 1038314.602 ops/s
Iteration  12: 971422.760 ops/s
Iteration  13: 1045468.543 ops/s
Iteration  14: 1000039.038 ops/s
Iteration  15: 1011215.081 ops/s
Iteration  16: 991407.915 ops/s
Iteration  17: 1028349.871 ops/s
Iteration  18: 1003331.553 ops/s
Iteration  19: 987326.831 ops/s
Iteration  20: 1044055.336 ops/s
Iteration  21: 974202.298 ops/s
Iteration  22: 1056030.840 ops/s
Iteration  23: 1018498.198 ops/s
Iteration  24: 978983.684 ops/s
Iteration  25: 1041333.978 ops/s
Iteration  26: 979538.955 ops/s
Iteration  27: 1010339.440 ops/s
Iteration  28: 1061177.504 ops/s
Iteration  29: 1033170.666 ops/s
Iteration  30: 981944.064 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_mainCompletes":
  1010131.632 ±(99.9%) 18762.575 ops/s [Average]
  (min, avg, max) = (948005.868, 1010131.632, 1061177.504), stdev = 28082.941
  CI (99.9%): [991369.057, 1028894.207] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_mainCompletes  thrpt   30  1010131.632 ± 18762.575  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14187.976 ops/s
# Warmup Iteration   2: 56184.471 ops/s
# Warmup Iteration   3: 116397.673 ops/s
# Warmup Iteration   4: 113197.520 ops/s
# Warmup Iteration   5: 129603.151 ops/s
# Warmup Iteration   6: 107532.096 ops/s
# Warmup Iteration   7: 124820.605 ops/s
# Warmup Iteration   8: 128551.168 ops/s
# Warmup Iteration   9: 123775.916 ops/s
# Warmup Iteration  10: 122237.112 ops/s
# Warmup Iteration  11: 123200.441 ops/s
# Warmup Iteration  12: 126903.800 ops/s
# Warmup Iteration  13: 132822.040 ops/s
# Warmup Iteration  14: 123768.925 ops/s
# Warmup Iteration  15: 127989.605 ops/s
# Warmup Iteration  16: 124558.249 ops/s
# Warmup Iteration  17: 132867.107 ops/s
# Warmup Iteration  18: 135194.808 ops/s
# Warmup Iteration  19: 128313.151 ops/s
# Warmup Iteration  20: 133091.561 ops/s
# Warmup Iteration  21: 135533.594 ops/s
# Warmup Iteration  22: 127599.018 ops/s
# Warmup Iteration  23: 136601.485 ops/s
# Warmup Iteration  24: 136296.892 ops/s
# Warmup Iteration  25: 132513.765 ops/s
# Warmup Iteration  26: 130247.341 ops/s
# Warmup Iteration  27: 131782.782 ops/s
# Warmup Iteration  28: 139068.259 ops/s
# Warmup Iteration  29: 134062.542 ops/s
# Warmup Iteration  30: 127520.947 ops/s
Iteration   1: 130350.622 ops/s
Iteration   2: 135050.670 ops/s
Iteration   3: 103633.550 ops/s
Iteration   4: 135665.498 ops/s
Iteration   5: 131759.779 ops/s
Iteration   6: 132047.064 ops/s
Iteration   7: 133306.327 ops/s
Iteration   8: 140199.944 ops/s
Iteration   9: 129008.143 ops/s
Iteration  10: 136129.679 ops/s
Iteration  11: 129362.154 ops/s
Iteration  12: 135060.679 ops/s
Iteration  13: 129403.481 ops/s
Iteration  14: 130897.725 ops/s
Iteration  15: 134994.647 ops/s
Iteration  16: 130976.704 ops/s
Iteration  17: 135239.371 ops/s
Iteration  18: 134333.571 ops/s
Iteration  19: 135531.206 ops/s
Iteration  20: 132223.480 ops/s
Iteration  21: 130700.232 ops/s
Iteration  22: 135581.177 ops/s
Iteration  23: 132735.660 ops/s
Iteration  24: 136014.122 ops/s
Iteration  25: 132262.874 ops/s
Iteration  26: 131119.579 ops/s
Iteration  27: 131800.882 ops/s
Iteration  28: 129970.716 ops/s
Iteration  29: 135103.070 ops/s
Iteration  30: 133211.390 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_innerErrors":
  132122.467 ±(99.9%) 3990.788 ops/s [Average]
  (min, avg, max) = (103633.550, 132122.467, 140199.944), stdev = 5973.224
  CI (99.9%): [128131.679, 136113.255] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_innerErrors  thrpt   30  132122.467 ± 3990.788  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_mainErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_mainErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40730.783 ops/s
# Warmup Iteration   2: 143522.281 ops/s
# Warmup Iteration   3: 327464.696 ops/s
# Warmup Iteration   4: 401433.268 ops/s
# Warmup Iteration   5: 428397.459 ops/s
# Warmup Iteration   6: 413336.282 ops/s
# Warmup Iteration   7: 399813.291 ops/s
# Warmup Iteration   8: 416347.537 ops/s
# Warmup Iteration   9: 425043.161 ops/s
# Warmup Iteration  10: 396043.410 ops/s
# Warmup Iteration  11: 409128.776 ops/s
# Warmup Iteration  12: 398750.156 ops/s
# Warmup Iteration  13: 422496.123 ops/s
# Warmup Iteration  14: 404427.205 ops/s
# Warmup Iteration  15: 418528.863 ops/s
# Warmup Iteration  16: 428579.310 ops/s
# Warmup Iteration  17: 427601.191 ops/s
# Warmup Iteration  18: 435541.735 ops/s
# Warmup Iteration  19: 457209.462 ops/s
# Warmup Iteration  20: 431618.678 ops/s
# Warmup Iteration  21: 454460.740 ops/s
# Warmup Iteration  22: 440626.102 ops/s
# Warmup Iteration  23: 422369.515 ops/s
# Warmup Iteration  24: 433966.323 ops/s
# Warmup Iteration  25: 449751.172 ops/s
# Warmup Iteration  26: 437911.102 ops/s
# Warmup Iteration  27: 435526.918 ops/s
# Warmup Iteration  28: 442153.081 ops/s
# Warmup Iteration  29: 457729.323 ops/s
# Warmup Iteration  30: 454716.278 ops/s
Iteration   1: 431852.202 ops/s
Iteration   2: 449667.392 ops/s
Iteration   3: 428581.093 ops/s
Iteration   4: 447251.520 ops/s
Iteration   5: 432539.018 ops/s
Iteration   6: 436125.889 ops/s
Iteration   7: 452101.029 ops/s
Iteration   8: 424775.192 ops/s
Iteration   9: 439119.906 ops/s
Iteration  10: 414485.831 ops/s
Iteration  11: 448867.551 ops/s
Iteration  12: 410798.937 ops/s
Iteration  13: 444095.577 ops/s
Iteration  14: 445802.901 ops/s
Iteration  15: 422067.291 ops/s
Iteration  16: 440690.531 ops/s
Iteration  17: 449357.342 ops/s
Iteration  18: 457469.287 ops/s
Iteration  19: 425239.928 ops/s
Iteration  20: 442449.776 ops/s
Iteration  21: 425476.522 ops/s
Iteration  22: 458442.874 ops/s
Iteration  23: 423595.030 ops/s
Iteration  24: 433987.831 ops/s
Iteration  25: 443946.552 ops/s
Iteration  26: 415288.210 ops/s
Iteration  27: 325133.946 ops/s
Iteration  28: 436329.957 ops/s
Iteration  29: 439093.824 ops/s
Iteration  30: 458240.603 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_mainErrors":
  433429.118 ±(99.9%) 16220.069 ops/s [Average]
  (min, avg, max) = (325133.946, 433429.118, 458442.874), stdev = 24277.438
  CI (99.9%): [417209.049, 449649.187] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_mainErrors  thrpt   30  433429.118 ± 16220.069  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustRange$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustRange

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 310602.320 ops/s
# Warmup Iteration   2: 1402349.322 ops/s
# Warmup Iteration   3: 1653303.673 ops/s
# Warmup Iteration   4: 2014613.684 ops/s
# Warmup Iteration   5: 2206575.219 ops/s
# Warmup Iteration   6: 2123907.031 ops/s
# Warmup Iteration   7: 2047403.066 ops/s
# Warmup Iteration   8: 2182224.740 ops/s
# Warmup Iteration   9: 2155792.450 ops/s
# Warmup Iteration  10: 2076390.255 ops/s
# Warmup Iteration  11: 2051274.544 ops/s
# Warmup Iteration  12: 2136166.168 ops/s
# Warmup Iteration  13: 2049499.085 ops/s
# Warmup Iteration  14: 2115490.449 ops/s
# Warmup Iteration  15: 2203054.705 ops/s
# Warmup Iteration  16: 2097910.627 ops/s
# Warmup Iteration  17: 2055523.659 ops/s
# Warmup Iteration  18: 2150607.310 ops/s
# Warmup Iteration  19: 2112566.738 ops/s
# Warmup Iteration  20: 2070988.147 ops/s
# Warmup Iteration  21: 2104522.489 ops/s
# Warmup Iteration  22: 2046889.790 ops/s
# Warmup Iteration  23: 2074754.705 ops/s
# Warmup Iteration  24: 2072690.759 ops/s
# Warmup Iteration  25: 2034863.482 ops/s
# Warmup Iteration  26: 2114845.741 ops/s
# Warmup Iteration  27: 2025037.001 ops/s
# Warmup Iteration  28: 2117032.128 ops/s
# Warmup Iteration  29: 2056868.840 ops/s
# Warmup Iteration  30: 2190253.746 ops/s
Iteration   1: 2053460.713 ops/s
Iteration   2: 2163274.910 ops/s
Iteration   3: 2065148.872 ops/s
Iteration   4: 2206258.626 ops/s
Iteration   5: 2040737.091 ops/s
Iteration   6: 2064870.574 ops/s
Iteration   7: 2109618.931 ops/s
Iteration   8: 2115134.069 ops/s
Iteration   9: 2055716.829 ops/s
Iteration  10: 2107559.332 ops/s
Iteration  11: 2066206.421 ops/s
Iteration  12: 2086867.809 ops/s
Iteration  13: 2134667.765 ops/s
Iteration  14: 2068847.173 ops/s
Iteration  15: 2052738.034 ops/s
Iteration  16: 2191407.243 ops/s
Iteration  17: 2039004.177 ops/s
Iteration  18: 2121745.434 ops/s
Iteration  19: 1990303.447 ops/s
Iteration  20: 2166789.071 ops/s
Iteration  21: 2125586.746 ops/s
Iteration  22: 2086597.590 ops/s
Iteration  23: 2132058.013 ops/s
Iteration  24: 2070849.224 ops/s
Iteration  25: 2172677.327 ops/s
Iteration  26: 2059939.941 ops/s
Iteration  27: 2133370.544 ops/s
Iteration  28: 2065269.140 ops/s
Iteration  29: 2014176.960 ops/s
Iteration  30: 2129655.137 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustRange":
  2096351.238 ±(99.9%) 35154.178 ops/s [Average]
  (min, avg, max) = (1990303.447, 2096351.238, 2206258.626), stdev = 52617.123
  CI (99.9%): [2061197.060, 2131505.416] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapDelayErrorJustRange  thrpt   30  2096351.238 ± 35154.178  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerWithScalar$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerWithScalar

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 237210.987 ops/s
# Warmup Iteration   2: 1077903.192 ops/s
# Warmup Iteration   3: 1597384.611 ops/s
# Warmup Iteration   4: 1509766.822 ops/s
# Warmup Iteration   5: 1519569.055 ops/s
# Warmup Iteration   6: 1414532.212 ops/s
# Warmup Iteration   7: 1539085.751 ops/s
# Warmup Iteration   8: 1580144.792 ops/s
# Warmup Iteration   9: 1598154.301 ops/s
# Warmup Iteration  10: 1515678.435 ops/s
# Warmup Iteration  11: 1560141.600 ops/s
# Warmup Iteration  12: 1569057.043 ops/s
# Warmup Iteration  13: 1497971.713 ops/s
# Warmup Iteration  14: 1535749.657 ops/s
# Warmup Iteration  15: 1525450.233 ops/s
# Warmup Iteration  16: 1593991.720 ops/s
# Warmup Iteration  17: 1576194.625 ops/s
# Warmup Iteration  18: 1547124.690 ops/s
# Warmup Iteration  19: 1608979.453 ops/s
# Warmup Iteration  20: 1552167.792 ops/s
# Warmup Iteration  21: 1532537.383 ops/s
# Warmup Iteration  22: 1570708.673 ops/s
# Warmup Iteration  23: 1552991.469 ops/s
# Warmup Iteration  24: 1574657.446 ops/s
# Warmup Iteration  25: 1558150.074 ops/s
# Warmup Iteration  26: 1535517.502 ops/s
# Warmup Iteration  27: 1607000.734 ops/s
# Warmup Iteration  28: 1542569.214 ops/s
# Warmup Iteration  29: 1572355.955 ops/s
# Warmup Iteration  30: 1626697.454 ops/s
Iteration   1: 1522893.322 ops/s
Iteration   2: 1588701.820 ops/s
Iteration   3: 1520668.801 ops/s
Iteration   4: 1613433.393 ops/s
Iteration   5: 1545128.934 ops/s
Iteration   6: 1561052.266 ops/s
Iteration   7: 1527973.027 ops/s
Iteration   8: 1578517.440 ops/s
Iteration   9: 1584160.095 ops/s
Iteration  10: 1567855.152 ops/s
Iteration  11: 1614331.065 ops/s
Iteration  12: 1532192.412 ops/s
Iteration  13: 1593534.441 ops/s
Iteration  14: 1596491.152 ops/s
Iteration  15: 1553015.073 ops/s
Iteration  16: 1574901.738 ops/s
Iteration  17: 1611551.404 ops/s
Iteration  18: 1543148.181 ops/s
Iteration  19: 1600464.238 ops/s
Iteration  20: 1561429.968 ops/s
Iteration  21: 1567471.881 ops/s
Iteration  22: 1535949.314 ops/s
Iteration  23: 1565320.135 ops/s
Iteration  24: 1621421.310 ops/s
Iteration  25: 1513710.582 ops/s
Iteration  26: 1551746.890 ops/s
Iteration  27: 1563700.638 ops/s
Iteration  28: 1544068.729 ops/s
Iteration  29: 1616740.338 ops/s
Iteration  30: 1621442.077 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerWithScalar":
  1569767.194 ±(99.9%) 21815.157 ops/s [Average]
  (min, avg, max) = (1513710.582, 1569767.194, 1621442.077), stdev = 32651.903
  CI (99.9%): [1547952.037, 1591582.351] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerWithScalar  thrpt   30  1569767.194 ± 21815.157  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstreamFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstreamFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 530965.323 ops/s
# Warmup Iteration   2: 2124237.110 ops/s
# Warmup Iteration   3: 2246240.779 ops/s
# Warmup Iteration   4: 2643657.555 ops/s
# Warmup Iteration   5: 2863306.162 ops/s
# Warmup Iteration   6: 2685868.827 ops/s
# Warmup Iteration   7: 2919896.677 ops/s
# Warmup Iteration   8: 2787670.247 ops/s
# Warmup Iteration   9: 2670326.617 ops/s
# Warmup Iteration  10: 2799953.600 ops/s
# Warmup Iteration  11: 2762791.550 ops/s
# Warmup Iteration  12: 2837511.163 ops/s
# Warmup Iteration  13: 2814938.849 ops/s
# Warmup Iteration  14: 2784055.539 ops/s
# Warmup Iteration  15: 2715740.665 ops/s
# Warmup Iteration  16: 2831726.345 ops/s
# Warmup Iteration  17: 2732391.647 ops/s
# Warmup Iteration  18: 2766620.876 ops/s
# Warmup Iteration  19: 2750488.135 ops/s
# Warmup Iteration  20: 2779294.567 ops/s
# Warmup Iteration  21: 2705719.810 ops/s
# Warmup Iteration  22: 2736918.606 ops/s
# Warmup Iteration  23: 2766230.169 ops/s
# Warmup Iteration  24: 2854301.689 ops/s
# Warmup Iteration  25: 2732483.726 ops/s
# Warmup Iteration  26: 2796673.020 ops/s
# Warmup Iteration  27: 2739144.217 ops/s
# Warmup Iteration  28: 2828806.995 ops/s
# Warmup Iteration  29: 2774092.839 ops/s
# Warmup Iteration  30: 2761815.242 ops/s
Iteration   1: 2836319.909 ops/s
Iteration   2: 2713106.406 ops/s
Iteration   3: 2955956.829 ops/s
Iteration   4: 2914402.099 ops/s
Iteration   5: 2688725.936 ops/s
Iteration   6: 2909530.084 ops/s
Iteration   7: 2786866.003 ops/s
Iteration   8: 2769872.721 ops/s
Iteration   9: 2762116.572 ops/s
Iteration  10: 2835576.470 ops/s
Iteration  11: 2733094.105 ops/s
Iteration  12: 2828500.148 ops/s
Iteration  13: 2853424.603 ops/s
Iteration  14: 2675648.047 ops/s
Iteration  15: 2815976.954 ops/s
Iteration  16: 2878225.138 ops/s
Iteration  17: 2694621.649 ops/s
Iteration  18: 2882490.693 ops/s
Iteration  19: 2792245.718 ops/s
Iteration  20: 2729257.134 ops/s
Iteration  21: 2822042.801 ops/s
Iteration  22: 2725742.259 ops/s
Iteration  23: 2789886.719 ops/s
Iteration  24: 2892127.417 ops/s
Iteration  25: 2183050.800 ops/s
Iteration  26: 2830712.733 ops/s
Iteration  27: 2818361.594 ops/s
Iteration  28: 2613164.224 ops/s
Iteration  29: 2852338.963 ops/s
Iteration  30: 2784029.612 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstreamFlowable":
  2778913.811 ±(99.9%) 91880.012 ops/s [Average]
  (min, avg, max) = (2183050.800, 2778913.811, 2955956.829), stdev = 137521.687
  CI (99.9%): [2687033.799, 2870793.823] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt        Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_unsubscribesFromUpstreamFlowable  thrpt   30  2778913.811 ± 91880.012  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_singleInnerErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_singleInnerErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44673.082 ops/s
# Warmup Iteration   2: 162330.086 ops/s
# Warmup Iteration   3: 308994.290 ops/s
# Warmup Iteration   4: 438887.265 ops/s
# Warmup Iteration   5: 447135.246 ops/s
# Warmup Iteration   6: 437029.642 ops/s
# Warmup Iteration   7: 463792.683 ops/s
# Warmup Iteration   8: 428961.561 ops/s
# Warmup Iteration   9: 445939.500 ops/s
# Warmup Iteration  10: 431976.503 ops/s
# Warmup Iteration  11: 438954.361 ops/s
# Warmup Iteration  12: 455093.692 ops/s
# Warmup Iteration  13: 407701.092 ops/s
# Warmup Iteration  14: 428332.811 ops/s
# Warmup Iteration  15: 432274.112 ops/s
# Warmup Iteration  16: 452072.450 ops/s
# Warmup Iteration  17: 468805.767 ops/s
# Warmup Iteration  18: 483910.904 ops/s
# Warmup Iteration  19: 457561.015 ops/s
# Warmup Iteration  20: 452374.653 ops/s
# Warmup Iteration  21: 456057.028 ops/s
# Warmup Iteration  22: 458000.693 ops/s
# Warmup Iteration  23: 462147.410 ops/s
# Warmup Iteration  24: 472805.559 ops/s
# Warmup Iteration  25: 455894.349 ops/s
# Warmup Iteration  26: 476940.500 ops/s
# Warmup Iteration  27: 474345.194 ops/s
# Warmup Iteration  28: 453600.460 ops/s
# Warmup Iteration  29: 487828.304 ops/s
# Warmup Iteration  30: 476587.518 ops/s
Iteration   1: 450784.678 ops/s
Iteration   2: 476394.476 ops/s
Iteration   3: 449408.173 ops/s
Iteration   4: 461294.986 ops/s
Iteration   5: 469899.589 ops/s
Iteration   6: 450193.106 ops/s
Iteration   7: 485321.999 ops/s
Iteration   8: 449996.289 ops/s
Iteration   9: 475125.333 ops/s
Iteration  10: 469878.372 ops/s
Iteration  11: 469848.405 ops/s
Iteration  12: 480939.874 ops/s
Iteration  13: 477764.745 ops/s
Iteration  14: 470857.979 ops/s
Iteration  15: 467558.803 ops/s
Iteration  16: 470059.146 ops/s
Iteration  17: 454159.267 ops/s
Iteration  18: 475139.548 ops/s
Iteration  19: 453207.355 ops/s
Iteration  20: 471792.096 ops/s
Iteration  21: 471646.829 ops/s
Iteration  22: 468156.955 ops/s
Iteration  23: 463686.570 ops/s
Iteration  24: 466273.638 ops/s
Iteration  25: 460708.099 ops/s
Iteration  26: 459961.044 ops/s
Iteration  27: 484162.071 ops/s
Iteration  28: 455534.254 ops/s
Iteration  29: 471726.382 ops/s
Iteration  30: 461828.763 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatDelayErrorTest._Benchmark.benchmark_singleInnerErrors":
  466443.628 ±(99.9%) 6862.728 ops/s [Average]
  (min, avg, max) = (449408.173, 466443.628, 485321.999), stdev = 10271.810
  CI (99.9%): [459580.899, 473306.356] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableConcatDelayErrorTest._Benchmark.benchmark_singleInnerErrors  thrpt   30  466443.628 ± 6862.728  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerWithEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerWithEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 272214.862 ops/s
# Warmup Iteration   2: 1295146.312 ops/s
# Warmup Iteration   3: 1326850.456 ops/s
# Warmup Iteration   4: 1512127.651 ops/s
# Warmup Iteration   5: 1593229.172 ops/s
# Warmup Iteration   6: 1571164.010 ops/s
# Warmup Iteration   7: 1592916.948 ops/s
# Warmup Iteration   8: 1584956.237 ops/s
# Warmup Iteration   9: 1640294.604 ops/s
# Warmup Iteration  10: 1533966.871 ops/s
# Warmup Iteration  11: 1587383.578 ops/s
# Warmup Iteration  12: 1623308.292 ops/s
# Warmup Iteration  13: 1536398.827 ops/s
# Warmup Iteration  14: 1591848.531 ops/s
# Warmup Iteration  15: 1637328.710 ops/s
# Warmup Iteration  16: 1540565.165 ops/s
# Warmup Iteration  17: 1627914.499 ops/s
# Warmup Iteration  18: 1549755.546 ops/s
# Warmup Iteration  19: 1645589.259 ops/s
# Warmup Iteration  20: 1626839.007 ops/s
# Warmup Iteration  21: 1551805.741 ops/s
# Warmup Iteration  22: 1584901.843 ops/s
# Warmup Iteration  23: 1641716.866 ops/s
# Warmup Iteration  24: 1653123.137 ops/s
# Warmup Iteration  25: 1542905.045 ops/s
# Warmup Iteration  26: 1649136.704 ops/s
# Warmup Iteration  27: 1636421.341 ops/s
# Warmup Iteration  28: 1523576.388 ops/s
# Warmup Iteration  29: 1641820.432 ops/s
# Warmup Iteration  30: 1533854.281 ops/s
Iteration   1: 1633755.221 ops/s
Iteration   2: 1602998.413 ops/s
Iteration   3: 1544435.491 ops/s
Iteration   4: 1631991.685 ops/s
Iteration   5: 1555366.264 ops/s
Iteration   6: 1640124.294 ops/s
Iteration   7: 1612722.391 ops/s
Iteration   8: 1608761.851 ops/s
Iteration   9: 1577914.760 ops/s
Iteration  10: 1616171.979 ops/s
Iteration  11: 1548953.649 ops/s
Iteration  12: 1645624.767 ops/s
Iteration  13: 1609081.412 ops/s
Iteration  14: 1503088.997 ops/s
Iteration  15: 1610028.632 ops/s
Iteration  16: 1561278.234 ops/s
Iteration  17: 1577981.817 ops/s
Iteration  18: 1602186.294 ops/s
Iteration  19: 1420273.814 ops/s
Iteration  20: 1432193.331 ops/s
Iteration  21: 1628933.973 ops/s
Iteration  22: 1533997.336 ops/s
Iteration  23: 1650325.272 ops/s
Iteration  24: 1529446.885 ops/s
Iteration  25: 1613783.831 ops/s
Iteration  26: 1631939.850 ops/s
Iteration  27: 1564964.799 ops/s
Iteration  28: 1649782.960 ops/s
Iteration  29: 1650526.677 ops/s
Iteration  30: 1548448.223 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerWithEmpty":
  1584569.437 ±(99.9%) 39671.531 ops/s [Average]
  (min, avg, max) = (1420273.814, 1584569.437, 1650526.677), stdev = 59378.485
  CI (99.9%): [1544897.905, 1624240.968] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_innerWithEmpty  thrpt   30  1584569.437 ± 39671.531  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_simpleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_simpleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 103368.806 ops/s
# Warmup Iteration   2: 314184.326 ops/s
# Warmup Iteration   3: 414471.427 ops/s
# Warmup Iteration   4: 425870.443 ops/s
# Warmup Iteration   5: 423135.353 ops/s
# Warmup Iteration   6: 405801.598 ops/s
# Warmup Iteration   7: 475581.094 ops/s
# Warmup Iteration   8: 441290.865 ops/s
# Warmup Iteration   9: 469885.155 ops/s
# Warmup Iteration  10: 459313.479 ops/s
# Warmup Iteration  11: 454981.027 ops/s
# Warmup Iteration  12: 458631.091 ops/s
# Warmup Iteration  13: 466394.240 ops/s
# Warmup Iteration  14: 475884.501 ops/s
# Warmup Iteration  15: 455802.874 ops/s
# Warmup Iteration  16: 472749.277 ops/s
# Warmup Iteration  17: 477661.866 ops/s
# Warmup Iteration  18: 469538.035 ops/s
# Warmup Iteration  19: 503549.411 ops/s
# Warmup Iteration  20: 462331.634 ops/s
# Warmup Iteration  21: 482979.039 ops/s
# Warmup Iteration  22: 466193.061 ops/s
# Warmup Iteration  23: 483106.276 ops/s
# Warmup Iteration  24: 478974.148 ops/s
# Warmup Iteration  25: 464156.692 ops/s
# Warmup Iteration  26: 486196.612 ops/s
# Warmup Iteration  27: 480183.734 ops/s
# Warmup Iteration  28: 466031.981 ops/s
# Warmup Iteration  29: 491428.764 ops/s
# Warmup Iteration  30: 463311.077 ops/s
Iteration   1: 495515.189 ops/s
Iteration   2: 468346.725 ops/s
Iteration   3: 487218.810 ops/s
Iteration   4: 475160.853 ops/s
Iteration   5: 464264.412 ops/s
Iteration   6: 482142.694 ops/s
Iteration   7: 470273.987 ops/s
Iteration   8: 494037.294 ops/s
Iteration   9: 458347.714 ops/s
Iteration  10: 496944.169 ops/s
Iteration  11: 478003.393 ops/s
Iteration  12: 478638.820 ops/s
Iteration  13: 455002.521 ops/s
Iteration  14: 477846.402 ops/s
Iteration  15: 487309.846 ops/s
Iteration  16: 463685.648 ops/s
Iteration  17: 496019.284 ops/s
Iteration  18: 471337.134 ops/s
Iteration  19: 466749.173 ops/s
Iteration  20: 487928.503 ops/s
Iteration  21: 481490.892 ops/s
Iteration  22: 485610.145 ops/s
Iteration  23: 462818.756 ops/s
Iteration  24: 476022.608 ops/s
Iteration  25: 474470.372 ops/s
Iteration  26: 471327.200 ops/s
Iteration  27: 468492.865 ops/s
Iteration  28: 497487.794 ops/s
Iteration  29: 467778.114 ops/s
Iteration  30: 474449.936 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_simpleError":
  477157.375 ±(99.9%) 7947.331 ops/s [Average]
  (min, avg, max) = (455002.521, 477157.375, 497487.794), stdev = 11895.192
  CI (99.9%): [469210.044, 485104.706] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableOnBackpressureLatestTest._Benchmark.benchmark_simpleError  thrpt   30  477157.375 ± 7947.331  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_rangeAndEmptyBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_rangeAndEmptyBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 384857.403 ops/s
# Warmup Iteration   2: 2067629.194 ops/s
# Warmup Iteration   3: 2214583.355 ops/s
# Warmup Iteration   4: 2719806.663 ops/s
# Warmup Iteration   5: 2836525.171 ops/s
# Warmup Iteration   6: 2647532.184 ops/s
# Warmup Iteration   7: 2681083.846 ops/s
# Warmup Iteration   8: 2789016.110 ops/s
# Warmup Iteration   9: 2703576.566 ops/s
# Warmup Iteration  10: 2655349.917 ops/s
# Warmup Iteration  11: 2751270.199 ops/s
# Warmup Iteration  12: 2669445.381 ops/s
# Warmup Iteration  13: 2725424.933 ops/s
# Warmup Iteration  14: 2686455.890 ops/s
# Warmup Iteration  15: 2788075.200 ops/s
# Warmup Iteration  16: 2699395.701 ops/s
# Warmup Iteration  17: 2808575.977 ops/s
# Warmup Iteration  18: 2685516.699 ops/s
# Warmup Iteration  19: 2813687.496 ops/s
# Warmup Iteration  20: 2802501.911 ops/s
# Warmup Iteration  21: 2646406.405 ops/s
# Warmup Iteration  22: 2767783.087 ops/s
# Warmup Iteration  23: 2803302.870 ops/s
# Warmup Iteration  24: 2768474.756 ops/s
# Warmup Iteration  25: 2701784.705 ops/s
# Warmup Iteration  26: 2655925.208 ops/s
# Warmup Iteration  27: 2843105.178 ops/s
# Warmup Iteration  28: 2619677.079 ops/s
# Warmup Iteration  29: 2742355.144 ops/s
# Warmup Iteration  30: 2780857.521 ops/s
Iteration   1: 2707233.168 ops/s
Iteration   2: 2671363.544 ops/s
Iteration   3: 2782790.559 ops/s
Iteration   4: 2647163.596 ops/s
Iteration   5: 2703470.631 ops/s
Iteration   6: 2710650.138 ops/s
Iteration   7: 2666225.237 ops/s
Iteration   8: 2755615.718 ops/s
Iteration   9: 2619218.049 ops/s
Iteration  10: 2690640.299 ops/s
Iteration  11: 2715769.640 ops/s
Iteration  12: 2699530.813 ops/s
Iteration  13: 2776165.781 ops/s
Iteration  14: 2156458.145 ops/s
Iteration  15: 2629068.522 ops/s
Iteration  16: 2783602.435 ops/s
Iteration  17: 2648655.694 ops/s
Iteration  18: 2787522.279 ops/s
Iteration  19: 2673948.746 ops/s
Iteration  20: 2764357.217 ops/s
Iteration  21: 2724661.303 ops/s
Iteration  22: 2804126.128 ops/s
Iteration  23: 2746961.799 ops/s
Iteration  24: 2680170.726 ops/s
Iteration  25: 2731094.538 ops/s
Iteration  26: 2806682.014 ops/s
Iteration  27: 2627037.318 ops/s
Iteration  28: 2775224.947 ops/s
Iteration  29: 2657102.414 ops/s
Iteration  30: 2743964.345 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_rangeAndEmptyBackpressured":
  2696215.858 ±(99.9%) 77562.160 ops/s [Average]
  (min, avg, max) = (2156458.145, 2696215.858, 2806682.014), stdev = 116091.399
  CI (99.9%): [2618653.698, 2773778.019] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_rangeAndEmptyBackpressured  thrpt   30  2696215.858 ± 77562.160  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_composeIfNotEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_composeIfNotEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 65567.090 ops/s
# Warmup Iteration   2: 204855.945 ops/s
# Warmup Iteration   3: 431913.601 ops/s
# Warmup Iteration   4: 695788.435 ops/s
# Warmup Iteration   5: 645691.796 ops/s
# Warmup Iteration   6: 621846.189 ops/s
# Warmup Iteration   7: 683705.811 ops/s
# Warmup Iteration   8: 759376.650 ops/s
# Warmup Iteration   9: 682412.661 ops/s
# Warmup Iteration  10: 736829.729 ops/s
# Warmup Iteration  11: 731961.698 ops/s
# Warmup Iteration  12: 684218.251 ops/s
# Warmup Iteration  13: 731909.078 ops/s
# Warmup Iteration  14: 703351.312 ops/s
# Warmup Iteration  15: 721016.796 ops/s
# Warmup Iteration  16: 739037.035 ops/s
# Warmup Iteration  17: 699886.723 ops/s
# Warmup Iteration  18: 699771.130 ops/s
# Warmup Iteration  19: 736462.519 ops/s
# Warmup Iteration  20: 691305.805 ops/s
# Warmup Iteration  21: 740243.622 ops/s
# Warmup Iteration  22: 696828.522 ops/s
# Warmup Iteration  23: 744940.606 ops/s
# Warmup Iteration  24: 741681.301 ops/s
# Warmup Iteration  25: 696187.753 ops/s
# Warmup Iteration  26: 717872.677 ops/s
# Warmup Iteration  27: 745774.397 ops/s
# Warmup Iteration  28: 686528.223 ops/s
# Warmup Iteration  29: 734268.777 ops/s
# Warmup Iteration  30: 704699.373 ops/s
Iteration   1: 739311.057 ops/s
Iteration   2: 710098.419 ops/s
Iteration   3: 705620.790 ops/s
Iteration   4: 743156.188 ops/s
Iteration   5: 730771.541 ops/s
Iteration   6: 710852.291 ops/s
Iteration   7: 746014.730 ops/s
Iteration   8: 701589.516 ops/s
Iteration   9: 737320.830 ops/s
Iteration  10: 714507.436 ops/s
Iteration  11: 711917.878 ops/s
Iteration  12: 734651.391 ops/s
Iteration  13: 709505.971 ops/s
Iteration  14: 704857.420 ops/s
Iteration  15: 716420.697 ops/s
Iteration  16: 741589.751 ops/s
Iteration  17: 686184.652 ops/s
Iteration  18: 740481.376 ops/s
Iteration  19: 746922.947 ops/s
Iteration  20: 696763.172 ops/s
Iteration  21: 728489.703 ops/s
Iteration  22: 716562.515 ops/s
Iteration  23: 715640.632 ops/s
Iteration  24: 726452.063 ops/s
Iteration  25: 693534.908 ops/s
Iteration  26: 739784.495 ops/s
Iteration  27: 698280.586 ops/s
Iteration  28: 710894.461 ops/s
Iteration  29: 747230.885 ops/s
Iteration  30: 700130.258 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_composeIfNotEmpty":
  720184.619 ±(99.9%) 12163.428 ops/s [Average]
  (min, avg, max) = (686184.652, 720184.619, 747230.885), stdev = 18205.648
  CI (99.9%): [708021.191, 732348.047] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_composeIfNotEmpty  thrpt   30  720184.619 ± 12163.428  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_observers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_observers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 160783.428 ops/s
# Warmup Iteration   2: 482559.370 ops/s
# Warmup Iteration   3: 1004884.597 ops/s
# Warmup Iteration   4: 969507.660 ops/s
# Warmup Iteration   5: 1095262.451 ops/s
# Warmup Iteration   6: 1189629.690 ops/s
# Warmup Iteration   7: 1102039.740 ops/s
# Warmup Iteration   8: 1139963.231 ops/s
# Warmup Iteration   9: 1177881.283 ops/s
# Warmup Iteration  10: 1109905.764 ops/s
# Warmup Iteration  11: 1118531.281 ops/s
# Warmup Iteration  12: 1173750.744 ops/s
# Warmup Iteration  13: 1084813.212 ops/s
# Warmup Iteration  14: 1146459.966 ops/s
# Warmup Iteration  15: 1153519.324 ops/s
# Warmup Iteration  16: 1105903.386 ops/s
# Warmup Iteration  17: 1102998.528 ops/s
# Warmup Iteration  18: 1149473.555 ops/s
# Warmup Iteration  19: 1097514.270 ops/s
# Warmup Iteration  20: 1160411.481 ops/s
# Warmup Iteration  21: 1147685.724 ops/s
# Warmup Iteration  22: 1111962.187 ops/s
# Warmup Iteration  23: 1146693.081 ops/s
# Warmup Iteration  24: 1102142.670 ops/s
# Warmup Iteration  25: 1145269.392 ops/s
# Warmup Iteration  26: 1143444.470 ops/s
# Warmup Iteration  27: 1088960.182 ops/s
# Warmup Iteration  28: 1129297.543 ops/s
# Warmup Iteration  29: 1170559.262 ops/s
# Warmup Iteration  30: 1045750.853 ops/s
Iteration   1: 1149580.460 ops/s
Iteration   2: 1110274.229 ops/s
Iteration   3: 1139001.799 ops/s
Iteration   4: 1108612.315 ops/s
Iteration   5: 1138690.188 ops/s
Iteration   6: 1159371.684 ops/s
Iteration   7: 1101532.800 ops/s
Iteration   8: 1139184.376 ops/s
Iteration   9: 1108682.239 ops/s
Iteration  10: 1146114.966 ops/s
Iteration  11: 1115746.078 ops/s
Iteration  12: 1128906.289 ops/s
Iteration  13: 1140597.301 ops/s
Iteration  14: 1081586.600 ops/s
Iteration  15: 1092557.791 ops/s
Iteration  16: 1159494.499 ops/s
Iteration  17: 1121132.634 ops/s
Iteration  18: 1134919.834 ops/s
Iteration  19: 1110178.324 ops/s
Iteration  20: 1177426.089 ops/s
Iteration  21: 1154547.700 ops/s
Iteration  22: 1112171.378 ops/s
Iteration  23: 1149400.736 ops/s
Iteration  24: 1082484.628 ops/s
Iteration  25: 1150549.978 ops/s
Iteration  26: 1176243.948 ops/s
Iteration  27: 1093093.343 ops/s
Iteration  28: 1185322.253 ops/s
Iteration  29: 1159746.344 ops/s
Iteration  30: 1092096.255 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_observers":
  1130641.569 ±(99.9%) 19372.729 ops/s [Average]
  (min, avg, max) = (1081586.600, 1130641.569, 1185322.253), stdev = 28996.191
  CI (99.9%): [1111268.840, 1150014.298] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FlowableCacheTest._Benchmark.benchmark_observers  thrpt   30  1130641.569 ± 19372.729  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_mainErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_mainErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40298.828 ops/s
# Warmup Iteration   2: 317942.114 ops/s
# Warmup Iteration   3: 391957.039 ops/s
# Warmup Iteration   4: 440767.511 ops/s
# Warmup Iteration   5: 431587.556 ops/s
# Warmup Iteration   6: 442596.325 ops/s
# Warmup Iteration   7: 420490.588 ops/s
# Warmup Iteration   8: 416954.126 ops/s
# Warmup Iteration   9: 456704.215 ops/s
# Warmup Iteration  10: 430422.153 ops/s
# Warmup Iteration  11: 441786.428 ops/s
# Warmup Iteration  12: 455306.200 ops/s
# Warmup Iteration  13: 434722.653 ops/s
# Warmup Iteration  14: 440329.152 ops/s
# Warmup Iteration  15: 444662.742 ops/s
# Warmup Iteration  16: 452937.196 ops/s
# Warmup Iteration  17: 430644.545 ops/s
# Warmup Iteration  18: 473961.175 ops/s
# Warmup Iteration  19: 457421.299 ops/s
# Warmup Iteration  20: 451414.303 ops/s
# Warmup Iteration  21: 469790.109 ops/s
# Warmup Iteration  22: 436008.194 ops/s
# Warmup Iteration  23: 468920.916 ops/s
# Warmup Iteration  24: 465707.186 ops/s
# Warmup Iteration  25: 466929.279 ops/s
# Warmup Iteration  26: 451913.337 ops/s
# Warmup Iteration  27: 457820.140 ops/s
# Warmup Iteration  28: 454597.782 ops/s
# Warmup Iteration  29: 452592.420 ops/s
# Warmup Iteration  30: 458652.247 ops/s
Iteration   1: 461220.576 ops/s
Iteration   2: 462406.667 ops/s
Iteration   3: 445051.542 ops/s
Iteration   4: 473199.309 ops/s
Iteration   5: 453553.405 ops/s
Iteration   6: 380918.846 ops/s
Iteration   7: 479218.043 ops/s
Iteration   8: 446056.286 ops/s
Iteration   9: 473360.682 ops/s
Iteration  10: 447309.004 ops/s
Iteration  11: 470404.379 ops/s
Iteration  12: 439554.866 ops/s
Iteration  13: 469064.960 ops/s
Iteration  14: 475379.437 ops/s
Iteration  15: 449425.259 ops/s
Iteration  16: 477263.123 ops/s
Iteration  17: 477573.590 ops/s
Iteration  18: 459924.570 ops/s
Iteration  19: 474542.405 ops/s
Iteration  20: 463556.294 ops/s
Iteration  21: 449203.454 ops/s
Iteration  22: 471088.800 ops/s
Iteration  23: 461561.383 ops/s
Iteration  24: 459353.442 ops/s
Iteration  25: 480016.923 ops/s
Iteration  26: 455743.823 ops/s
Iteration  27: 480405.000 ops/s
Iteration  28: 450267.235 ops/s
Iteration  29: 454908.709 ops/s
Iteration  30: 471729.584 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_mainErrors":
  460442.053 ±(99.9%) 12846.225 ops/s [Average]
  (min, avg, max) = (380918.846, 460442.053, 480405.000), stdev = 19227.626
  CI (99.9%): [447595.829, 473288.278] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_mainErrors  thrpt   30  460442.053 ± 12846.225  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_splitCombineSubscriberChangeAfterOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_splitCombineSubscriberChangeAfterOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1991.764 ops/s
# Warmup Iteration   2: 36863.092 ops/s
# Warmup Iteration   3: 67676.471 ops/s
# Warmup Iteration   4: 97296.395 ops/s
# Warmup Iteration   5: 101766.548 ops/s
# Warmup Iteration   6: 111174.398 ops/s
# Warmup Iteration   7: 114591.831 ops/s
# Warmup Iteration   8: 110931.106 ops/s
# Warmup Iteration   9: 114853.201 ops/s
# Warmup Iteration  10: 110714.440 ops/s
# Warmup Iteration  11: 110820.568 ops/s
# Warmup Iteration  12: 115935.864 ops/s
# Warmup Iteration  13: 107555.184 ops/s
# Warmup Iteration  14: 115479.905 ops/s
# Warmup Iteration  15: 115027.295 ops/s
# Warmup Iteration  16: 109490.651 ops/s
# Warmup Iteration  17: 111028.012 ops/s
# Warmup Iteration  18: 116220.585 ops/s
# Warmup Iteration  19: 110283.204 ops/s
# Warmup Iteration  20: 117038.942 ops/s
# Warmup Iteration  21: 108307.450 ops/s
# Warmup Iteration  22: 117005.449 ops/s
# Warmup Iteration  23: 110820.624 ops/s
# Warmup Iteration  24: 110542.495 ops/s
# Warmup Iteration  25: 115023.473 ops/s
# Warmup Iteration  26: 117881.946 ops/s
# Warmup Iteration  27: 112398.019 ops/s
# Warmup Iteration  28: 110793.082 ops/s
# Warmup Iteration  29: 115845.028 ops/s
# Warmup Iteration  30: 110425.530 ops/s
Iteration   1: 113479.983 ops/s
Iteration   2: 112571.141 ops/s
Iteration   3: 111757.135 ops/s
Iteration   4: 115595.427 ops/s
Iteration   5: 107934.940 ops/s
Iteration   6: 115403.791 ops/s
Iteration   7: 115356.443 ops/s
Iteration   8: 109068.946 ops/s
Iteration   9: 115265.076 ops/s
Iteration  10: 111266.088 ops/s
Iteration  11: 114727.268 ops/s
Iteration  12: 109891.725 ops/s
Iteration  13: 115334.232 ops/s
Iteration  14: 111353.072 ops/s
Iteration  15: 109103.687 ops/s
Iteration  16: 114781.850 ops/s
Iteration  17: 113308.154 ops/s
Iteration  18: 115702.438 ops/s
Iteration  19: 111074.165 ops/s
Iteration  20: 114448.411 ops/s
Iteration  21: 112655.449 ops/s
Iteration  22: 112763.132 ops/s
Iteration  23: 118426.378 ops/s
Iteration  24: 108546.098 ops/s
Iteration  25: 116050.295 ops/s
Iteration  26: 112026.127 ops/s
Iteration  27: 110216.272 ops/s
Iteration  28: 113830.011 ops/s
Iteration  29: 113278.772 ops/s
Iteration  30: 115019.490 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_splitCombineSubscriberChangeAfterOnNext":
  113007.867 ±(99.9%) 1727.769 ops/s [Average]
  (min, avg, max) = (107934.940, 113007.867, 118426.378), stdev = 2586.043
  CI (99.9%): [111280.098, 114735.635] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_splitCombineSubscriberChangeAfterOnNext  thrpt   30  113007.867 ± 1727.769  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_concatTakeFirstLastCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_concatTakeFirstLastCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90532.359 ops/s
# Warmup Iteration   2: 380298.532 ops/s
# Warmup Iteration   3: 1100011.852 ops/s
# Warmup Iteration   4: 1171366.856 ops/s
# Warmup Iteration   5: 1068273.341 ops/s
# Warmup Iteration   6: 1232786.616 ops/s
# Warmup Iteration   7: 1225926.854 ops/s
# Warmup Iteration   8: 1238354.060 ops/s
# Warmup Iteration   9: 1276523.828 ops/s
# Warmup Iteration  10: 1214161.959 ops/s
# Warmup Iteration  11: 1258504.643 ops/s
# Warmup Iteration  12: 1280741.388 ops/s
# Warmup Iteration  13: 1243172.693 ops/s
# Warmup Iteration  14: 1275117.806 ops/s
# Warmup Iteration  15: 1219853.021 ops/s
# Warmup Iteration  16: 1254226.039 ops/s
# Warmup Iteration  17: 1202706.329 ops/s
# Warmup Iteration  18: 1227749.679 ops/s
# Warmup Iteration  19: 1275027.771 ops/s
# Warmup Iteration  20: 1252624.292 ops/s
# Warmup Iteration  21: 1290036.670 ops/s
# Warmup Iteration  22: 1240365.861 ops/s
# Warmup Iteration  23: 1285813.568 ops/s
# Warmup Iteration  24: 1213765.028 ops/s
# Warmup Iteration  25: 1248489.743 ops/s
# Warmup Iteration  26: 1305637.364 ops/s
# Warmup Iteration  27: 1222871.266 ops/s
# Warmup Iteration  28: 1277159.082 ops/s
# Warmup Iteration  29: 1237641.864 ops/s
# Warmup Iteration  30: 1147453.681 ops/s
Iteration   1: 1166550.781 ops/s
Iteration   2: 1211499.467 ops/s
Iteration   3: 1264697.676 ops/s
Iteration   4: 1265182.067 ops/s
Iteration   5: 1213945.798 ops/s
Iteration   6: 1273666.736 ops/s
Iteration   7: 1235119.522 ops/s
Iteration   8: 1281259.833 ops/s
Iteration   9: 1272336.525 ops/s
Iteration  10: 1268593.985 ops/s
Iteration  11: 1255416.048 ops/s
Iteration  12: 1240734.648 ops/s
Iteration  13: 1284789.829 ops/s
Iteration  14: 1267752.679 ops/s
Iteration  15: 1261397.222 ops/s
Iteration  16: 1294089.440 ops/s
Iteration  17: 1280040.362 ops/s
Iteration  18: 1249530.347 ops/s
Iteration  19: 1257933.676 ops/s
Iteration  20: 1299123.560 ops/s
Iteration  21: 1220865.050 ops/s
Iteration  22: 1288729.725 ops/s
Iteration  23: 1289916.006 ops/s
Iteration  24: 1189236.969 ops/s
Iteration  25: 1252019.824 ops/s
Iteration  26: 1243410.223 ops/s
Iteration  27: 1226987.580 ops/s
Iteration  28: 1290017.350 ops/s
Iteration  29: 1280321.286 ops/s
Iteration  30: 1299679.655 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_concatTakeFirstLastCompletes":
  1257494.796 ±(99.9%) 21985.869 ops/s [Average]
  (min, avg, max) = (1166550.781, 1257494.796, 1299679.655), stdev = 32907.416
  CI (99.9%): [1235508.927, 1279480.665] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_concatTakeFirstLastCompletes  thrpt   30  1257494.796 ± 21985.869  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorLatecommer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorLatecommer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 220133.914 ops/s
# Warmup Iteration   2: 1053522.191 ops/s
# Warmup Iteration   3: 1198971.088 ops/s
# Warmup Iteration   4: 1277045.692 ops/s
# Warmup Iteration   5: 1481367.294 ops/s
# Warmup Iteration   6: 1423081.761 ops/s
# Warmup Iteration   7: 1466126.899 ops/s
# Warmup Iteration   8: 1420841.509 ops/s
# Warmup Iteration   9: 1461846.917 ops/s
# Warmup Iteration  10: 1414908.380 ops/s
# Warmup Iteration  11: 1415507.554 ops/s
# Warmup Iteration  12: 1435609.598 ops/s
# Warmup Iteration  13: 1489900.198 ops/s
# Warmup Iteration  14: 1372223.734 ops/s
# Warmup Iteration  15: 1466569.454 ops/s
# Warmup Iteration  16: 1388663.509 ops/s
# Warmup Iteration  17: 1379571.653 ops/s
# Warmup Iteration  18: 1470760.789 ops/s
# Warmup Iteration  19: 1381546.021 ops/s
# Warmup Iteration  20: 1473970.091 ops/s
# Warmup Iteration  21: 1382856.220 ops/s
# Warmup Iteration  22: 1432106.597 ops/s
# Warmup Iteration  23: 1465571.449 ops/s
# Warmup Iteration  24: 1413699.230 ops/s
# Warmup Iteration  25: 1451260.678 ops/s
# Warmup Iteration  26: 1413600.499 ops/s
# Warmup Iteration  27: 1468179.666 ops/s
# Warmup Iteration  28: 1374350.791 ops/s
# Warmup Iteration  29: 1436153.129 ops/s
# Warmup Iteration  30: 1475036.509 ops/s
Iteration   1: 1407659.193 ops/s
Iteration   2: 1487124.205 ops/s
Iteration   3: 1497638.686 ops/s
Iteration   4: 1398209.690 ops/s
Iteration   5: 1432585.266 ops/s
Iteration   6: 1416006.267 ops/s
Iteration   7: 1421683.659 ops/s
Iteration   8: 1449984.037 ops/s
Iteration   9: 1405267.411 ops/s
Iteration  10: 1478629.496 ops/s
Iteration  11: 1401745.546 ops/s
Iteration  12: 1485037.019 ops/s
Iteration  13: 1420042.671 ops/s
Iteration  14: 1435865.058 ops/s
Iteration  15: 1453792.346 ops/s
Iteration  16: 1415154.118 ops/s
Iteration  17: 1463506.857 ops/s
Iteration  18: 1454565.830 ops/s
Iteration  19: 1404337.687 ops/s
Iteration  20: 1453353.097 ops/s
Iteration  21: 1434032.682 ops/s
Iteration  22: 1476767.977 ops/s
Iteration  23: 1421271.801 ops/s
Iteration  24: 1423016.613 ops/s
Iteration  25: 1489194.107 ops/s
Iteration  26: 1390674.623 ops/s
Iteration  27: 1466238.460 ops/s
Iteration  28: 1462595.456 ops/s
Iteration  29: 1444678.408 ops/s
Iteration  30: 1452540.852 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_selectorLatecommer":
  1441439.971 ±(99.9%) 20470.767 ops/s [Average]
  (min, avg, max) = (1390674.623, 1441439.971, 1497638.686), stdev = 30639.683
  CI (99.9%): [1420969.204, 1461910.738] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_selectorLatecommer  thrpt   30  1441439.971 ± 20470.767  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_valuesAndThenError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_valuesAndThenError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22525.277 ops/s
# Warmup Iteration   2: 93548.809 ops/s
# Warmup Iteration   3: 185605.712 ops/s
# Warmup Iteration   4: 269282.995 ops/s
# Warmup Iteration   5: 287666.821 ops/s
# Warmup Iteration   6: 294140.568 ops/s
# Warmup Iteration   7: 286344.240 ops/s
# Warmup Iteration   8: 303298.542 ops/s
# Warmup Iteration   9: 314869.725 ops/s
# Warmup Iteration  10: 297913.381 ops/s
# Warmup Iteration  11: 317405.185 ops/s
# Warmup Iteration  12: 320289.933 ops/s
# Warmup Iteration  13: 302699.051 ops/s
# Warmup Iteration  14: 306420.330 ops/s
# Warmup Iteration  15: 306093.763 ops/s
# Warmup Iteration  16: 303199.767 ops/s
# Warmup Iteration  17: 328217.410 ops/s
# Warmup Iteration  18: 325147.462 ops/s
# Warmup Iteration  19: 307136.361 ops/s
# Warmup Iteration  20: 320031.212 ops/s
# Warmup Iteration  21: 320166.504 ops/s
# Warmup Iteration  22: 307507.595 ops/s
# Warmup Iteration  23: 328979.565 ops/s
# Warmup Iteration  24: 304589.628 ops/s
# Warmup Iteration  25: 258115.582 ops/s
# Warmup Iteration  26: 325514.277 ops/s
# Warmup Iteration  27: 304988.442 ops/s
# Warmup Iteration  28: 310091.418 ops/s
# Warmup Iteration  29: 327307.673 ops/s
# Warmup Iteration  30: 309005.105 ops/s
Iteration   1: 325027.778 ops/s
Iteration   2: 305919.272 ops/s
Iteration   3: 319308.612 ops/s
Iteration   4: 307957.594 ops/s
Iteration   5: 306563.592 ops/s
Iteration   6: 320201.561 ops/s
Iteration   7: 311137.714 ops/s
Iteration   8: 319041.480 ops/s
Iteration   9: 325896.384 ops/s
Iteration  10: 309915.104 ops/s
Iteration  11: 316854.291 ops/s
Iteration  12: 322315.557 ops/s
Iteration  13: 311310.462 ops/s
Iteration  14: 320779.013 ops/s
Iteration  15: 325466.385 ops/s
Iteration  16: 302736.602 ops/s
Iteration  17: 316638.665 ops/s
Iteration  18: 317160.332 ops/s
Iteration  19: 323741.317 ops/s
Iteration  20: 311574.659 ops/s
Iteration  21: 323761.703 ops/s
Iteration  22: 311530.673 ops/s
Iteration  23: 315616.223 ops/s
Iteration  24: 317310.608 ops/s
Iteration  25: 304564.623 ops/s
Iteration  26: 328945.118 ops/s
Iteration  27: 307342.991 ops/s
Iteration  28: 319113.068 ops/s
Iteration  29: 311969.842 ops/s
Iteration  30: 321363.189 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_valuesAndThenError":
  316035.480 ±(99.9%) 4765.759 ops/s [Average]
  (min, avg, max) = (302736.602, 316035.480, 328945.118), stdev = 7133.164
  CI (99.9%): [311269.722, 320801.239] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_valuesAndThenError  thrpt   30  316035.480 ± 4765.759  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_valuesAndThenError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_valuesAndThenError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45673.383 ops/s
# Warmup Iteration   2: 95629.551 ops/s
# Warmup Iteration   3: 206247.190 ops/s
# Warmup Iteration   4: 297360.016 ops/s
# Warmup Iteration   5: 309072.480 ops/s
# Warmup Iteration   6: 308877.725 ops/s
# Warmup Iteration   7: 317061.055 ops/s
# Warmup Iteration   8: 295034.172 ops/s
# Warmup Iteration   9: 307142.231 ops/s
# Warmup Iteration  10: 307161.374 ops/s
# Warmup Iteration  11: 297922.071 ops/s
# Warmup Iteration  12: 320096.484 ops/s
# Warmup Iteration  13: 302809.034 ops/s
# Warmup Iteration  14: 303880.040 ops/s
# Warmup Iteration  15: 322043.995 ops/s
# Warmup Iteration  16: 299498.458 ops/s
# Warmup Iteration  17: 307686.750 ops/s
# Warmup Iteration  18: 332121.920 ops/s
# Warmup Iteration  19: 316303.155 ops/s
# Warmup Iteration  20: 319909.083 ops/s
# Warmup Iteration  21: 326498.015 ops/s
# Warmup Iteration  22: 309964.826 ops/s
# Warmup Iteration  23: 317353.020 ops/s
# Warmup Iteration  24: 328696.625 ops/s
# Warmup Iteration  25: 312688.854 ops/s
# Warmup Iteration  26: 319341.872 ops/s
# Warmup Iteration  27: 329025.771 ops/s
# Warmup Iteration  28: 309997.954 ops/s
# Warmup Iteration  29: 322893.391 ops/s
# Warmup Iteration  30: 329889.042 ops/s
Iteration   1: 306840.150 ops/s
Iteration   2: 317303.922 ops/s
Iteration   3: 317083.851 ops/s
Iteration   4: 313414.474 ops/s
Iteration   5: 314965.493 ops/s
Iteration   6: 334195.350 ops/s
Iteration   7: 331694.908 ops/s
Iteration   8: 309665.236 ops/s
Iteration   9: 328688.163 ops/s
Iteration  10: 316060.021 ops/s
Iteration  11: 321238.222 ops/s
Iteration  12: 330312.737 ops/s
Iteration  13: 319146.180 ops/s
Iteration  14: 315056.860 ops/s
Iteration  15: 321632.956 ops/s
Iteration  16: 326647.121 ops/s
Iteration  17: 307468.180 ops/s
Iteration  18: 312669.860 ops/s
Iteration  19: 326519.253 ops/s
Iteration  20: 315649.721 ops/s
Iteration  21: 324050.540 ops/s
Iteration  22: 318745.262 ops/s
Iteration  23: 321141.053 ops/s
Iteration  24: 325627.383 ops/s
Iteration  25: 317409.494 ops/s
Iteration  26: 330134.348 ops/s
Iteration  27: 313998.605 ops/s
Iteration  28: 324370.791 ops/s
Iteration  29: 322573.325 ops/s
Iteration  30: 335868.046 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_valuesAndThenError":
  320672.384 ±(99.9%) 5124.681 ops/s [Average]
  (min, avg, max) = (306840.150, 320672.384, 335868.046), stdev = 7670.381
  CI (99.9%): [315547.703, 325797.064] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_valuesAndThenError  thrpt   30  320672.384 ± 5124.681  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_concatTakeFirstLastBackpressureCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_concatTakeFirstLastBackpressureCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83809.928 ops/s
# Warmup Iteration   2: 301302.252 ops/s
# Warmup Iteration   3: 688297.882 ops/s
# Warmup Iteration   4: 930867.057 ops/s
# Warmup Iteration   5: 930664.149 ops/s
# Warmup Iteration   6: 962734.070 ops/s
# Warmup Iteration   7: 897743.060 ops/s
# Warmup Iteration   8: 963016.438 ops/s
# Warmup Iteration   9: 966523.228 ops/s
# Warmup Iteration  10: 870312.393 ops/s
# Warmup Iteration  11: 937360.806 ops/s
# Warmup Iteration  12: 981245.036 ops/s
# Warmup Iteration  13: 993393.101 ops/s
# Warmup Iteration  14: 871729.949 ops/s
# Warmup Iteration  15: 913556.958 ops/s
# Warmup Iteration  16: 939845.239 ops/s
# Warmup Iteration  17: 853767.109 ops/s
# Warmup Iteration  18: 963857.919 ops/s
# Warmup Iteration  19: 940181.259 ops/s
# Warmup Iteration  20: 810869.026 ops/s
# Warmup Iteration  21: 959868.692 ops/s
# Warmup Iteration  22: 966699.195 ops/s
# Warmup Iteration  23: 966695.281 ops/s
# Warmup Iteration  24: 937343.980 ops/s
# Warmup Iteration  25: 988642.760 ops/s
# Warmup Iteration  26: 917896.689 ops/s
# Warmup Iteration  27: 951989.670 ops/s
# Warmup Iteration  28: 987424.784 ops/s
# Warmup Iteration  29: 920693.834 ops/s
# Warmup Iteration  30: 966401.972 ops/s
Iteration   1: 931677.735 ops/s
Iteration   2: 939075.659 ops/s
Iteration   3: 984633.319 ops/s
Iteration   4: 921100.156 ops/s
Iteration   5: 930623.543 ops/s
Iteration   6: 966348.388 ops/s
Iteration   7: 930714.810 ops/s
Iteration   8: 969437.766 ops/s
Iteration   9: 911212.852 ops/s
Iteration  10: 956485.335 ops/s
Iteration  11: 964887.158 ops/s
Iteration  12: 922932.073 ops/s
Iteration  13: 961494.874 ops/s
Iteration  14: 945904.575 ops/s
Iteration  15: 918248.172 ops/s
Iteration  16: 982957.079 ops/s
Iteration  17: 960017.419 ops/s
Iteration  18: 951162.691 ops/s
Iteration  19: 980370.615 ops/s
Iteration  20: 930181.028 ops/s
Iteration  21: 1000089.223 ops/s
Iteration  22: 978163.233 ops/s
Iteration  23: 933331.881 ops/s
Iteration  24: 975050.417 ops/s
Iteration  25: 966790.674 ops/s
Iteration  26: 956577.795 ops/s
Iteration  27: 964553.186 ops/s
Iteration  28: 960471.718 ops/s
Iteration  29: 1002780.808 ops/s
Iteration  30: 943510.585 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_concatTakeFirstLastBackpressureCompletes":
  954692.826 ±(99.9%) 16206.785 ops/s [Average]
  (min, avg, max) = (911212.852, 954692.826, 1002780.808), stdev = 24257.554
  CI (99.9%): [938486.041, 970899.610] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_concatTakeFirstLastBackpressureCompletes  thrpt   30  954692.826 ± 16206.785  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_noUpstreamCancelOnCasualChainCloseWithInnerCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_noUpstreamCancelOnCasualChainCloseWithInnerCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 62486.687 ops/s
# Warmup Iteration   2: 269457.732 ops/s
# Warmup Iteration   3: 495396.828 ops/s
# Warmup Iteration   4: 640869.605 ops/s
# Warmup Iteration   5: 645596.078 ops/s
# Warmup Iteration   6: 699720.999 ops/s
# Warmup Iteration   7: 698995.959 ops/s
# Warmup Iteration   8: 674670.475 ops/s
# Warmup Iteration   9: 690640.982 ops/s
# Warmup Iteration  10: 685906.263 ops/s
# Warmup Iteration  11: 683549.623 ops/s
# Warmup Iteration  12: 663230.001 ops/s
# Warmup Iteration  13: 686373.037 ops/s
# Warmup Iteration  14: 677983.751 ops/s
# Warmup Iteration  15: 682110.820 ops/s
# Warmup Iteration  16: 679331.881 ops/s
# Warmup Iteration  17: 670938.291 ops/s
# Warmup Iteration  18: 697697.687 ops/s
# Warmup Iteration  19: 672309.086 ops/s
# Warmup Iteration  20: 684511.307 ops/s
# Warmup Iteration  21: 673319.038 ops/s
# Warmup Iteration  22: 704428.959 ops/s
# Warmup Iteration  23: 688375.296 ops/s
# Warmup Iteration  24: 667275.843 ops/s
# Warmup Iteration  25: 667841.451 ops/s
# Warmup Iteration  26: 693690.583 ops/s
# Warmup Iteration  27: 668985.289 ops/s
# Warmup Iteration  28: 682450.187 ops/s
# Warmup Iteration  29: 673485.517 ops/s
# Warmup Iteration  30: 707367.643 ops/s
Iteration   1: 698744.575 ops/s
Iteration   2: 659768.873 ops/s
Iteration   3: 704618.897 ops/s
Iteration   4: 657852.912 ops/s
Iteration   5: 685969.471 ops/s
Iteration   6: 672819.503 ops/s
Iteration   7: 665120.669 ops/s
Iteration   8: 703936.137 ops/s
Iteration   9: 670741.859 ops/s
Iteration  10: 663206.893 ops/s
Iteration  11: 679980.626 ops/s
Iteration  12: 667477.255 ops/s
Iteration  13: 708042.935 ops/s
Iteration  14: 693402.925 ops/s
Iteration  15: 691285.880 ops/s
Iteration  16: 666514.590 ops/s
Iteration  17: 707020.184 ops/s
Iteration  18: 662307.136 ops/s
Iteration  19: 688820.601 ops/s
Iteration  20: 668565.039 ops/s
Iteration  21: 696526.661 ops/s
Iteration  22: 683177.279 ops/s
Iteration  23: 673384.594 ops/s
Iteration  24: 682182.206 ops/s
Iteration  25: 703323.983 ops/s
Iteration  26: 656722.363 ops/s
Iteration  27: 699150.289 ops/s
Iteration  28: 665276.184 ops/s
Iteration  29: 670740.636 ops/s
Iteration  30: 687974.816 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_noUpstreamCancelOnCasualChainCloseWithInnerCancels":
  681155.199 ±(99.9%) 11027.668 ops/s [Average]
  (min, avg, max) = (656722.363, 681155.199, 708042.935), stdev = 16505.696
  CI (99.9%): [670127.531, 692182.867] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt       Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_noUpstreamCancelOnCasualChainCloseWithInnerCancels  thrpt   30  681155.199 ± 11027.668  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19274.319 ops/s
# Warmup Iteration   2: 68956.387 ops/s
# Warmup Iteration   3: 137633.996 ops/s
# Warmup Iteration   4: 142899.709 ops/s
# Warmup Iteration   5: 149904.683 ops/s
# Warmup Iteration   6: 145567.362 ops/s
# Warmup Iteration   7: 156658.734 ops/s
# Warmup Iteration   8: 158523.446 ops/s
# Warmup Iteration   9: 151374.733 ops/s
# Warmup Iteration  10: 149786.236 ops/s
# Warmup Iteration  11: 155558.983 ops/s
# Warmup Iteration  12: 161378.204 ops/s
# Warmup Iteration  13: 151920.365 ops/s
# Warmup Iteration  14: 150512.322 ops/s
# Warmup Iteration  15: 140874.209 ops/s
# Warmup Iteration  16: 152061.419 ops/s
# Warmup Iteration  17: 159650.365 ops/s
# Warmup Iteration  18: 165385.963 ops/s
# Warmup Iteration  19: 160369.417 ops/s
# Warmup Iteration  20: 165099.334 ops/s
# Warmup Iteration  21: 164967.214 ops/s
# Warmup Iteration  22: 158065.939 ops/s
# Warmup Iteration  23: 165369.834 ops/s
# Warmup Iteration  24: 163568.826 ops/s
# Warmup Iteration  25: 161621.799 ops/s
# Warmup Iteration  26: 162020.823 ops/s
# Warmup Iteration  27: 165949.616 ops/s
# Warmup Iteration  28: 158462.300 ops/s
# Warmup Iteration  29: 168329.305 ops/s
# Warmup Iteration  30: 167012.636 ops/s
Iteration   1: 160492.837 ops/s
Iteration   2: 165450.902 ops/s
Iteration   3: 156481.721 ops/s
Iteration   4: 159908.045 ops/s
Iteration   5: 163368.626 ops/s
Iteration   6: 161118.557 ops/s
Iteration   7: 158043.418 ops/s
Iteration   8: 162696.205 ops/s
Iteration   9: 161292.326 ops/s
Iteration  10: 153215.833 ops/s
Iteration  11: 166937.960 ops/s
Iteration  12: 161091.729 ops/s
Iteration  13: 156803.786 ops/s
Iteration  14: 163840.125 ops/s
Iteration  15: 168371.589 ops/s
Iteration  16: 161188.050 ops/s
Iteration  17: 161939.350 ops/s
Iteration  18: 164152.580 ops/s
Iteration  19: 160206.364 ops/s
Iteration  20: 165544.188 ops/s
Iteration  21: 159461.597 ops/s
Iteration  22: 162351.076 ops/s
Iteration  23: 167464.585 ops/s
Iteration  24: 161090.736 ops/s
Iteration  25: 161209.408 ops/s
Iteration  26: 167107.526 ops/s
Iteration  27: 156963.489 ops/s
Iteration  28: 165743.851 ops/s
Iteration  29: 158471.201 ops/s
Iteration  30: 162019.645 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_badSource":
  161800.910 ±(99.9%) 2410.003 ops/s [Average]
  (min, avg, max) = (153215.833, 161800.910, 168371.589), stdev = 3607.179
  CI (99.9%): [159390.907, 164210.913] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_badSource  thrpt   30  161800.910 ± 2410.003  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryWhenDefaultScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryWhenDefaultScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30310.830 ops/s
# Warmup Iteration   2: 217246.504 ops/s
# Warmup Iteration   3: 289381.650 ops/s
# Warmup Iteration   4: 313573.634 ops/s
# Warmup Iteration   5: 349082.256 ops/s
# Warmup Iteration   6: 320075.837 ops/s
# Warmup Iteration   7: 367323.764 ops/s
# Warmup Iteration   8: 347917.342 ops/s
# Warmup Iteration   9: 356438.411 ops/s
# Warmup Iteration  10: 372482.151 ops/s
# Warmup Iteration  11: 359923.848 ops/s
# Warmup Iteration  12: 353783.398 ops/s
# Warmup Iteration  13: 366066.609 ops/s
# Warmup Iteration  14: 358410.687 ops/s
# Warmup Iteration  15: 363298.398 ops/s
# Warmup Iteration  16: 365026.700 ops/s
# Warmup Iteration  17: 370642.099 ops/s
# Warmup Iteration  18: 360055.547 ops/s
# Warmup Iteration  19: 374565.163 ops/s
# Warmup Iteration  20: 357979.063 ops/s
# Warmup Iteration  21: 372598.839 ops/s
# Warmup Iteration  22: 357108.848 ops/s
# Warmup Iteration  23: 379821.751 ops/s
# Warmup Iteration  24: 360836.204 ops/s
# Warmup Iteration  25: 370926.823 ops/s
# Warmup Iteration  26: 385097.137 ops/s
# Warmup Iteration  27: 364125.442 ops/s
# Warmup Iteration  28: 367372.667 ops/s
# Warmup Iteration  29: 380020.254 ops/s
# Warmup Iteration  30: 357524.604 ops/s
Iteration   1: 372492.354 ops/s
Iteration   2: 368081.993 ops/s
Iteration   3: 371352.552 ops/s
Iteration   4: 378758.925 ops/s
Iteration   5: 359822.482 ops/s
Iteration   6: 384268.456 ops/s
Iteration   7: 380126.450 ops/s
Iteration   8: 366609.910 ops/s
Iteration   9: 379482.870 ops/s
Iteration  10: 353065.865 ops/s
Iteration  11: 375003.105 ops/s
Iteration  12: 373434.889 ops/s
Iteration  13: 362920.813 ops/s
Iteration  14: 373309.840 ops/s
Iteration  15: 363874.509 ops/s
Iteration  16: 371002.623 ops/s
Iteration  17: 374933.051 ops/s
Iteration  18: 365583.029 ops/s
Iteration  19: 379601.069 ops/s
Iteration  20: 358599.018 ops/s
Iteration  21: 385449.727 ops/s
Iteration  22: 379560.636 ops/s
Iteration  23: 356886.871 ops/s
Iteration  24: 386363.226 ops/s
Iteration  25: 352905.843 ops/s
Iteration  26: 377001.510 ops/s
Iteration  27: 374271.807 ops/s
Iteration  28: 378647.218 ops/s
Iteration  29: 364948.895 ops/s
Iteration  30: 383351.931 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_retryWhenDefaultScheduler":
  371723.716 ±(99.9%) 6335.222 ops/s [Average]
  (min, avg, max) = (352905.843, 371723.716, 386363.226), stdev = 9482.263
  CI (99.9%): [365388.494, 378058.937] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableRetryTest._Benchmark.benchmark_retryWhenDefaultScheduler  thrpt   30  371723.716 ± 6335.222  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorOverlapInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorOverlapInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41796.038 ops/s
# Warmup Iteration   2: 141074.693 ops/s
# Warmup Iteration   3: 333055.233 ops/s
# Warmup Iteration   4: 337562.296 ops/s
# Warmup Iteration   5: 345678.374 ops/s
# Warmup Iteration   6: 342460.547 ops/s
# Warmup Iteration   7: 339558.959 ops/s
# Warmup Iteration   8: 309743.539 ops/s
# Warmup Iteration   9: 306401.242 ops/s
# Warmup Iteration  10: 357622.438 ops/s
# Warmup Iteration  11: 348925.790 ops/s
# Warmup Iteration  12: 364171.305 ops/s
# Warmup Iteration  13: 340276.385 ops/s
# Warmup Iteration  14: 357474.316 ops/s
# Warmup Iteration  15: 340021.340 ops/s
# Warmup Iteration  16: 353928.700 ops/s
# Warmup Iteration  17: 371893.505 ops/s
# Warmup Iteration  18: 350219.796 ops/s
# Warmup Iteration  19: 357797.363 ops/s
# Warmup Iteration  20: 361104.883 ops/s
# Warmup Iteration  21: 370155.877 ops/s
# Warmup Iteration  22: 358007.441 ops/s
# Warmup Iteration  23: 357342.854 ops/s
# Warmup Iteration  24: 350193.892 ops/s
# Warmup Iteration  25: 375547.839 ops/s
# Warmup Iteration  26: 358681.824 ops/s
# Warmup Iteration  27: 373779.258 ops/s
# Warmup Iteration  28: 358907.400 ops/s
# Warmup Iteration  29: 339944.920 ops/s
# Warmup Iteration  30: 365223.703 ops/s
Iteration   1: 381585.771 ops/s
Iteration   2: 358063.452 ops/s
Iteration   3: 365345.670 ops/s
Iteration   4: 368657.054 ops/s
Iteration   5: 368624.596 ops/s
Iteration   6: 363243.720 ops/s
Iteration   7: 364559.206 ops/s
Iteration   8: 360367.829 ops/s
Iteration   9: 376852.838 ops/s
Iteration  10: 368771.132 ops/s
Iteration  11: 360266.968 ops/s
Iteration  12: 376443.375 ops/s
Iteration  13: 352886.483 ops/s
Iteration  14: 357682.863 ops/s
Iteration  15: 371894.098 ops/s
Iteration  16: 349945.878 ops/s
Iteration  17: 352897.119 ops/s
Iteration  18: 371726.071 ops/s
Iteration  19: 348205.776 ops/s
Iteration  20: 379017.103 ops/s
Iteration  21: 351103.665 ops/s
Iteration  22: 370260.746 ops/s
Iteration  23: 369120.026 ops/s
Iteration  24: 360346.940 ops/s
Iteration  25: 382520.451 ops/s
Iteration  26: 358053.584 ops/s
Iteration  27: 365576.837 ops/s
Iteration  28: 361503.164 ops/s
Iteration  29: 375500.278 ops/s
Iteration  30: 361010.476 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_errorOverlapInner":
  365067.772 ±(99.9%) 6302.397 ops/s [Average]
  (min, avg, max) = (348205.776, 365067.772, 382520.451), stdev = 9433.131
  CI (99.9%): [358765.376, 371370.169] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_errorOverlapInner  thrpt   30  365067.772 ± 6302.397  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54033.189 ops/s
# Warmup Iteration   2: 204933.714 ops/s
# Warmup Iteration   3: 209028.616 ops/s
# Warmup Iteration   4: 230275.476 ops/s
# Warmup Iteration   5: 239713.330 ops/s
# Warmup Iteration   6: 244968.257 ops/s
# Warmup Iteration   7: 227104.099 ops/s
# Warmup Iteration   8: 233373.369 ops/s
# Warmup Iteration   9: 240645.412 ops/s
# Warmup Iteration  10: 238914.774 ops/s
# Warmup Iteration  11: 233145.562 ops/s
# Warmup Iteration  12: 243804.624 ops/s
# Warmup Iteration  13: 232244.672 ops/s
# Warmup Iteration  14: 243248.292 ops/s
# Warmup Iteration  15: 229446.648 ops/s
# Warmup Iteration  16: 234165.262 ops/s
# Warmup Iteration  17: 255692.273 ops/s
# Warmup Iteration  18: 241779.410 ops/s
# Warmup Iteration  19: 257429.372 ops/s
# Warmup Iteration  20: 253567.260 ops/s
# Warmup Iteration  21: 243190.203 ops/s
# Warmup Iteration  22: 246121.932 ops/s
# Warmup Iteration  23: 244194.081 ops/s
# Warmup Iteration  24: 244981.275 ops/s
# Warmup Iteration  25: 259605.211 ops/s
# Warmup Iteration  26: 250258.783 ops/s
# Warmup Iteration  27: 257811.423 ops/s
# Warmup Iteration  28: 254332.564 ops/s
# Warmup Iteration  29: 252081.033 ops/s
# Warmup Iteration  30: 249823.536 ops/s
Iteration   1: 243036.956 ops/s
Iteration   2: 255515.737 ops/s
Iteration   3: 246974.010 ops/s
Iteration   4: 248404.785 ops/s
Iteration   5: 258595.504 ops/s
Iteration   6: 244701.263 ops/s
Iteration   7: 257264.396 ops/s
Iteration   8: 260330.063 ops/s
Iteration   9: 240759.901 ops/s
Iteration  10: 258454.440 ops/s
Iteration  11: 248164.944 ops/s
Iteration  12: 243518.137 ops/s
Iteration  13: 261872.303 ops/s
Iteration  14: 249022.093 ops/s
Iteration  15: 253991.092 ops/s
Iteration  16: 245718.974 ops/s
Iteration  17: 251495.696 ops/s
Iteration  18: 248657.179 ops/s
Iteration  19: 254042.272 ops/s
Iteration  20: 245977.155 ops/s
Iteration  21: 261763.960 ops/s
Iteration  22: 252165.172 ops/s
Iteration  23: 258590.609 ops/s
Iteration  24: 245257.024 ops/s
Iteration  25: 258623.023 ops/s
Iteration  26: 243030.823 ops/s
Iteration  27: 255930.598 ops/s
Iteration  28: 245303.395 ops/s
Iteration  29: 255863.687 ops/s
Iteration  30: 244017.711 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_doubleOnSubscribe":
  251234.763 ±(99.9%) 4317.365 ops/s [Average]
  (min, avg, max) = (240759.901, 251234.763, 261872.303), stdev = 6462.028
  CI (99.9%): [246917.399, 255552.128] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  251234.763 ± 4317.365  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repetition$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repetition

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5865.619 ops/s
# Warmup Iteration   2: 24793.761 ops/s
# Warmup Iteration   3: 26152.180 ops/s
# Warmup Iteration   4: 21593.129 ops/s
# Warmup Iteration   5: 23354.131 ops/s
# Warmup Iteration   6: 26876.751 ops/s
# Warmup Iteration   7: 22399.101 ops/s
# Warmup Iteration   8: 22409.034 ops/s
# Warmup Iteration   9: 21875.747 ops/s
# Warmup Iteration  10: 23422.589 ops/s
# Warmup Iteration  11: 22901.146 ops/s
# Warmup Iteration  12: 23559.262 ops/s
# Warmup Iteration  13: 22689.507 ops/s
# Warmup Iteration  14: 23063.497 ops/s
# Warmup Iteration  15: 22749.109 ops/s
# Warmup Iteration  16: 23468.490 ops/s
# Warmup Iteration  17: 23187.227 ops/s
# Warmup Iteration  18: 23419.108 ops/s
# Warmup Iteration  19: 22495.501 ops/s
# Warmup Iteration  20: 25755.602 ops/s
# Warmup Iteration  21: 23124.422 ops/s
# Warmup Iteration  22: 23161.638 ops/s
# Warmup Iteration  23: 23048.607 ops/s
# Warmup Iteration  24: 22704.589 ops/s
# Warmup Iteration  25: 23523.890 ops/s
# Warmup Iteration  26: 22917.844 ops/s
# Warmup Iteration  27: 22953.226 ops/s
# Warmup Iteration  28: 22748.327 ops/s
# Warmup Iteration  29: 23427.751 ops/s
# Warmup Iteration  30: 23017.962 ops/s
Iteration   1: 22716.211 ops/s
Iteration   2: 23160.590 ops/s
Iteration   3: 22759.955 ops/s
Iteration   4: 22728.856 ops/s
Iteration   5: 22538.277 ops/s
Iteration   6: 23621.208 ops/s
Iteration   7: 22902.805 ops/s
Iteration   8: 23071.406 ops/s
Iteration   9: 23131.573 ops/s
Iteration  10: 23003.069 ops/s
Iteration  11: 22945.448 ops/s
Iteration  12: 23457.765 ops/s
Iteration  13: 22746.579 ops/s
Iteration  14: 22657.253 ops/s
Iteration  15: 23156.991 ops/s
Iteration  16: 22265.169 ops/s
Iteration  17: 23450.246 ops/s
Iteration  18: 23351.331 ops/s
Iteration  19: 23584.823 ops/s
Iteration  20: 23107.690 ops/s
Iteration  21: 23347.376 ops/s
Iteration  22: 22918.511 ops/s
Iteration  23: 22742.390 ops/s
Iteration  24: 23131.448 ops/s
Iteration  25: 23190.060 ops/s
Iteration  26: 23523.004 ops/s
Iteration  27: 23021.182 ops/s
Iteration  28: 23294.400 ops/s
Iteration  29: 22798.298 ops/s
Iteration  30: 24741.240 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repetition":
  23102.172 ±(99.9%) 300.694 ops/s [Average]
  (min, avg, max) = (22265.169, 23102.172, 24741.240), stdev = 450.065
  CI (99.9%): [22801.478, 23402.866] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt      Score     Error  Units
FlowableRepeatTest._Benchmark.benchmark_repetition  thrpt   30  23102.172 ± 300.694  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5541314.813 ops/s
# Warmup Iteration   2: 9232847.029 ops/s
# Warmup Iteration   3: 11138929.111 ops/s
# Warmup Iteration   4: 10498654.621 ops/s
# Warmup Iteration   5: 11050291.229 ops/s
# Warmup Iteration   6: 10527283.904 ops/s
# Warmup Iteration   7: 11000128.856 ops/s
# Warmup Iteration   8: 10765398.010 ops/s
# Warmup Iteration   9: 10559972.677 ops/s
# Warmup Iteration  10: 11103362.216 ops/s
# Warmup Iteration  11: 10809157.377 ops/s
# Warmup Iteration  12: 10760852.597 ops/s
# Warmup Iteration  13: 10511002.801 ops/s
# Warmup Iteration  14: 11142449.612 ops/s
# Warmup Iteration  15: 10441961.757 ops/s
# Warmup Iteration  16: 10780801.151 ops/s
# Warmup Iteration  17: 10645599.716 ops/s
# Warmup Iteration  18: 10736898.356 ops/s
# Warmup Iteration  19: 11143091.730 ops/s
# Warmup Iteration  20: 10384331.398 ops/s
# Warmup Iteration  21: 11328228.515 ops/s
# Warmup Iteration  22: 10032806.614 ops/s
# Warmup Iteration  23: 10199949.533 ops/s
# Warmup Iteration  24: 10816229.795 ops/s
# Warmup Iteration  25: 11143088.006 ops/s
# Warmup Iteration  26: 11290724.296 ops/s
# Warmup Iteration  27: 10538456.008 ops/s
# Warmup Iteration  28: 11022348.119 ops/s
# Warmup Iteration  29: 10898299.307 ops/s
# Warmup Iteration  30: 10923333.517 ops/s
Iteration   1: 10841076.810 ops/s
Iteration   2: 11141203.232 ops/s
Iteration   3: 11129379.212 ops/s
Iteration   4: 10797122.941 ops/s
Iteration   5: 11152169.381 ops/s
Iteration   6: 10790644.424 ops/s
Iteration   7: 11083947.066 ops/s
Iteration   8: 10918097.888 ops/s
Iteration   9: 10885733.377 ops/s
Iteration  10: 11093357.768 ops/s
Iteration  11: 10690167.175 ops/s
Iteration  12: 11128959.742 ops/s
Iteration  13: 10931076.514 ops/s
Iteration  14: 10800388.217 ops/s
Iteration  15: 11215576.342 ops/s
Iteration  16: 10660521.086 ops/s
Iteration  17: 11193841.351 ops/s
Iteration  18: 10630125.192 ops/s
Iteration  19: 11499704.460 ops/s
Iteration  20: 11089825.083 ops/s
Iteration  21: 10756182.934 ops/s
Iteration  22: 10888238.483 ops/s
Iteration  23: 11025115.392 ops/s
Iteration  24: 10741128.475 ops/s
Iteration  25: 11071438.416 ops/s
Iteration  26: 11216248.560 ops/s
Iteration  27: 10932394.587 ops/s
Iteration  28: 10687419.349 ops/s
Iteration  29: 11388401.222 ops/s
Iteration  30: 10170355.720 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed":
  10951661.347 ±(99.9%) 176308.104 ops/s [Average]
  (min, avg, max) = (10170355.720, 10951661.347, 11499704.460), stdev = 263889.690
  CI (99.9%): [10775353.242, 11127969.451] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ScheduledRunnableTest._Benchmark.benchmark_withFutureDisposed  thrpt   30  10951661.347 ± 176308.104  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSizeRestart$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSizeRestart

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4514.867 ops/s
# Warmup Iteration   2: 29948.312 ops/s
# Warmup Iteration   3: 41701.008 ops/s
# Warmup Iteration   4: 72233.902 ops/s
# Warmup Iteration   5: 75880.425 ops/s
# Warmup Iteration   6: 81970.603 ops/s
# Warmup Iteration   7: 88601.776 ops/s
# Warmup Iteration   8: 90189.603 ops/s
# Warmup Iteration   9: 90103.138 ops/s
# Warmup Iteration  10: 92943.020 ops/s
# Warmup Iteration  11: 84951.611 ops/s
# Warmup Iteration  12: 86071.139 ops/s
# Warmup Iteration  13: 87920.756 ops/s
# Warmup Iteration  14: 88044.222 ops/s
# Warmup Iteration  15: 79459.589 ops/s
# Warmup Iteration  16: 87400.286 ops/s
# Warmup Iteration  17: 89862.197 ops/s
# Warmup Iteration  18: 81262.453 ops/s
# Warmup Iteration  19: 79790.068 ops/s
# Warmup Iteration  20: 82995.144 ops/s
# Warmup Iteration  21: 83991.928 ops/s
# Warmup Iteration  22: 76936.919 ops/s
# Warmup Iteration  23: 83631.080 ops/s
# Warmup Iteration  24: 86890.279 ops/s
# Warmup Iteration  25: 78503.064 ops/s
# Warmup Iteration  26: 82477.746 ops/s
# Warmup Iteration  27: 76909.041 ops/s
# Warmup Iteration  28: 86416.711 ops/s
# Warmup Iteration  29: 80233.014 ops/s
# Warmup Iteration  30: 84789.841 ops/s
Iteration   1: 84493.092 ops/s
Iteration   2: 89601.539 ops/s
Iteration   3: 91416.924 ops/s
Iteration   4: 87256.543 ops/s
Iteration   5: 88195.696 ops/s
Iteration   6: 91090.817 ops/s
Iteration   7: 80047.839 ops/s
Iteration   8: 88919.317 ops/s
Iteration   9: 83762.200 ops/s
Iteration  10: 80225.550 ops/s
Iteration  11: 92681.484 ops/s
Iteration  12: 87725.159 ops/s
Iteration  13: 88874.081 ops/s
Iteration  14: 86693.771 ops/s
Iteration  15: 83031.229 ops/s
Iteration  16: 83750.617 ops/s
Iteration  17: 82699.701 ops/s
Iteration  18: 84851.566 ops/s
Iteration  19: 86953.886 ops/s
Iteration  20: 89422.503 ops/s
Iteration  21: 88641.839 ops/s
Iteration  22: 92529.184 ops/s
Iteration  23: 86950.027 ops/s
Iteration  24: 95530.642 ops/s
Iteration  25: 85028.181 ops/s
Iteration  26: 82760.100 ops/s
Iteration  27: 85139.734 ops/s
Iteration  28: 91167.011 ops/s
Iteration  29: 78258.135 ops/s
Iteration  30: 90569.928 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSizeRestart":
  86942.276 ±(99.9%) 2742.606 ops/s [Average]
  (min, avg, max) = (78258.135, 86942.276, 95530.642), stdev = 4105.003
  CI (99.9%): [84199.671, 89684.882] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt      Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSizeRestart  thrpt   30  86942.276 ± 2742.606  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_byCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_byCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18550.668 ops/s
# Warmup Iteration   2: 145665.457 ops/s
# Warmup Iteration   3: 202945.935 ops/s
# Warmup Iteration   4: 246378.928 ops/s
# Warmup Iteration   5: 256935.758 ops/s
# Warmup Iteration   6: 216393.698 ops/s
# Warmup Iteration   7: 242851.730 ops/s
# Warmup Iteration   8: 247043.668 ops/s
# Warmup Iteration   9: 258879.517 ops/s
# Warmup Iteration  10: 258302.170 ops/s
# Warmup Iteration  11: 246831.320 ops/s
# Warmup Iteration  12: 256779.841 ops/s
# Warmup Iteration  13: 263466.169 ops/s
# Warmup Iteration  14: 245890.167 ops/s
# Warmup Iteration  15: 265974.902 ops/s
# Warmup Iteration  16: 249344.840 ops/s
# Warmup Iteration  17: 254307.342 ops/s
# Warmup Iteration  18: 258966.169 ops/s
# Warmup Iteration  19: 245056.316 ops/s
# Warmup Iteration  20: 259211.252 ops/s
# Warmup Iteration  21: 263691.041 ops/s
# Warmup Iteration  22: 253980.375 ops/s
# Warmup Iteration  23: 250930.519 ops/s
# Warmup Iteration  24: 252893.317 ops/s
# Warmup Iteration  25: 252113.542 ops/s
# Warmup Iteration  26: 247469.590 ops/s
# Warmup Iteration  27: 267467.893 ops/s
# Warmup Iteration  28: 248796.487 ops/s
# Warmup Iteration  29: 254214.762 ops/s
# Warmup Iteration  30: 259434.928 ops/s
Iteration   1: 251977.461 ops/s
Iteration   2: 261338.075 ops/s
Iteration   3: 246336.694 ops/s
Iteration   4: 265067.354 ops/s
Iteration   5: 245701.791 ops/s
Iteration   6: 254167.712 ops/s
Iteration   7: 261943.631 ops/s
Iteration   8: 248414.186 ops/s
Iteration   9: 260128.966 ops/s
Iteration  10: 255312.029 ops/s
Iteration  11: 251433.989 ops/s
Iteration  12: 265113.417 ops/s
Iteration  13: 250064.161 ops/s
Iteration  14: 261470.147 ops/s
Iteration  15: 249709.446 ops/s
Iteration  16: 264134.393 ops/s
Iteration  17: 247748.219 ops/s
Iteration  18: 258685.649 ops/s
Iteration  19: 246894.693 ops/s
Iteration  20: 265168.665 ops/s
Iteration  21: 251334.486 ops/s
Iteration  22: 247797.095 ops/s
Iteration  23: 215815.974 ops/s
Iteration  24: 248373.706 ops/s
Iteration  25: 264494.785 ops/s
Iteration  26: 251163.351 ops/s
Iteration  27: 262178.706 ops/s
Iteration  28: 246102.397 ops/s
Iteration  29: 255036.775 ops/s
Iteration  30: 259094.044 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_byCount":
  253740.067 ±(99.9%) 6574.411 ops/s [Average]
  (min, avg, max) = (215815.974, 253740.067, 265168.665), stdev = 9840.270
  CI (99.9%): [247165.655, 260314.478] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
FlowableRefCountTest._Benchmark.benchmark_byCount  thrpt   30  253740.067 ± 6574.411  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_noParentIsDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_noParentIsDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 12979006.723 ops/s
# Warmup Iteration   2: 17211016.389 ops/s
# Warmup Iteration   3: 25412038.036 ops/s
# Warmup Iteration   4: 24433064.865 ops/s
# Warmup Iteration   5: 24206152.289 ops/s
# Warmup Iteration   6: 24273866.915 ops/s
# Warmup Iteration   7: 24770770.537 ops/s
# Warmup Iteration   8: 24042705.198 ops/s
# Warmup Iteration   9: 24691880.319 ops/s
# Warmup Iteration  10: 24262964.562 ops/s
# Warmup Iteration  11: 25225770.773 ops/s
# Warmup Iteration  12: 24347832.688 ops/s
# Warmup Iteration  13: 24139168.030 ops/s
# Warmup Iteration  14: 24983429.141 ops/s
# Warmup Iteration  15: 23932939.620 ops/s
# Warmup Iteration  16: 25006880.316 ops/s
# Warmup Iteration  17: 24255125.459 ops/s
# Warmup Iteration  18: 24703180.135 ops/s
# Warmup Iteration  19: 23400183.915 ops/s
# Warmup Iteration  20: 25761987.430 ops/s
# Warmup Iteration  21: 23400959.464 ops/s
# Warmup Iteration  22: 25032143.790 ops/s
# Warmup Iteration  23: 24076672.770 ops/s
# Warmup Iteration  24: 24319729.136 ops/s
# Warmup Iteration  25: 25463276.603 ops/s
# Warmup Iteration  26: 23798774.597 ops/s
# Warmup Iteration  27: 24142949.478 ops/s
# Warmup Iteration  28: 24301624.349 ops/s
# Warmup Iteration  29: 24629793.090 ops/s
# Warmup Iteration  30: 24978731.722 ops/s
Iteration   1: 23869460.738 ops/s
Iteration   2: 24561170.903 ops/s
Iteration   3: 24929643.053 ops/s
Iteration   4: 24126182.290 ops/s
Iteration   5: 24551253.214 ops/s
Iteration   6: 25260344.826 ops/s
Iteration   7: 24140218.042 ops/s
Iteration   8: 25113483.064 ops/s
Iteration   9: 24254041.447 ops/s
Iteration  10: 24753675.228 ops/s
Iteration  11: 24756514.902 ops/s
Iteration  12: 25093791.421 ops/s
Iteration  13: 23333310.748 ops/s
Iteration  14: 24439437.195 ops/s
Iteration  15: 25049312.010 ops/s
Iteration  16: 23157720.261 ops/s
Iteration  17: 25640111.003 ops/s
Iteration  18: 24152709.700 ops/s
Iteration  19: 25500008.336 ops/s
Iteration  20: 25626817.508 ops/s
Iteration  21: 24098882.917 ops/s
Iteration  22: 25568968.879 ops/s
Iteration  23: 24927063.653 ops/s
Iteration  24: 24491869.430 ops/s
Iteration  25: 24928966.829 ops/s
Iteration  26: 25019200.443 ops/s
Iteration  27: 24182530.063 ops/s
Iteration  28: 24991844.908 ops/s
Iteration  29: 25200742.395 ops/s
Iteration  30: 25406998.741 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_noParentIsDisposed":
  24704209.138 ±(99.9%) 427241.092 ops/s [Average]
  (min, avg, max) = (23157720.261, 24704209.138, 25640111.003), stdev = 639474.402
  CI (99.9%): [24276968.046, 25131450.230] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ScheduledRunnableTest._Benchmark.benchmark_noParentIsDisposed  thrpt   30  24704209.138 ± 427241.092  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_nextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_nextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 134084.373 ops/s
# Warmup Iteration   2: 482113.910 ops/s
# Warmup Iteration   3: 608247.074 ops/s
# Warmup Iteration   4: 602061.430 ops/s
# Warmup Iteration   5: 587831.405 ops/s
# Warmup Iteration   6: 585657.261 ops/s
# Warmup Iteration   7: 618603.567 ops/s
# Warmup Iteration   8: 608866.268 ops/s
# Warmup Iteration   9: 581737.852 ops/s
# Warmup Iteration  10: 610607.517 ops/s
# Warmup Iteration  11: 648725.560 ops/s
# Warmup Iteration  12: 619025.766 ops/s
# Warmup Iteration  13: 604427.991 ops/s
# Warmup Iteration  14: 597060.829 ops/s
# Warmup Iteration  15: 560987.112 ops/s
# Warmup Iteration  16: 644454.778 ops/s
# Warmup Iteration  17: 707438.577 ops/s
# Warmup Iteration  18: 704871.481 ops/s
# Warmup Iteration  19: 675944.495 ops/s
# Warmup Iteration  20: 689525.035 ops/s
# Warmup Iteration  21: 609506.751 ops/s
# Warmup Iteration  22: 672653.124 ops/s
# Warmup Iteration  23: 652970.002 ops/s
# Warmup Iteration  24: 681697.247 ops/s
# Warmup Iteration  25: 636804.244 ops/s
# Warmup Iteration  26: 720305.762 ops/s
# Warmup Iteration  27: 678550.225 ops/s
# Warmup Iteration  28: 700466.675 ops/s
# Warmup Iteration  29: 699907.508 ops/s
# Warmup Iteration  30: 686208.848 ops/s
Iteration   1: 725587.123 ops/s
Iteration   2: 704256.332 ops/s
Iteration   3: 640338.100 ops/s
Iteration   4: 710092.932 ops/s
Iteration   5: 623609.063 ops/s
Iteration   6: 669724.090 ops/s
Iteration   7: 736618.442 ops/s
Iteration   8: 705998.484 ops/s
Iteration   9: 559693.044 ops/s
Iteration  10: 607758.660 ops/s
Iteration  11: 597229.625 ops/s
Iteration  12: 636049.457 ops/s
Iteration  13: 607929.403 ops/s
Iteration  14: 603049.031 ops/s
Iteration  15: 626426.230 ops/s
Iteration  16: 600520.115 ops/s
Iteration  17: 611630.373 ops/s
Iteration  18: 515332.274 ops/s
Iteration  19: 605004.939 ops/s
Iteration  20: 600777.434 ops/s
Iteration  21: 604501.084 ops/s
Iteration  22: 637134.281 ops/s
Iteration  23: 591528.673 ops/s
Iteration  24: 604348.659 ops/s
Iteration  25: 616817.956 ops/s
Iteration  26: 593044.654 ops/s
Iteration  27: 623924.992 ops/s
Iteration  28: 607553.351 ops/s
Iteration  29: 605845.470 ops/s
Iteration  30: 619087.581 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_nextThrows":
  626380.395 ±(99.9%) 32535.433 ops/s [Average]
  (min, avg, max) = (515332.274, 626380.395, 736618.442), stdev = 48697.508
  CI (99.9%): [593844.962, 658915.828] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_nextThrows  thrpt   30  626380.395 ± 32535.433  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_hasNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_hasNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 131681.629 ops/s
# Warmup Iteration   2: 490688.190 ops/s
# Warmup Iteration   3: 543584.315 ops/s
# Warmup Iteration   4: 564238.573 ops/s
# Warmup Iteration   5: 482207.266 ops/s
# Warmup Iteration   6: 569108.283 ops/s
# Warmup Iteration   7: 589709.357 ops/s
# Warmup Iteration   8: 564349.444 ops/s
# Warmup Iteration   9: 577392.293 ops/s
# Warmup Iteration  10: 588956.620 ops/s
# Warmup Iteration  11: 600295.392 ops/s
# Warmup Iteration  12: 573553.195 ops/s
# Warmup Iteration  13: 599202.991 ops/s
# Warmup Iteration  14: 582687.342 ops/s
# Warmup Iteration  15: 586989.572 ops/s
# Warmup Iteration  16: 573028.675 ops/s
# Warmup Iteration  17: 595327.246 ops/s
# Warmup Iteration  18: 631791.803 ops/s
# Warmup Iteration  19: 611356.259 ops/s
# Warmup Iteration  20: 634593.220 ops/s
# Warmup Iteration  21: 587740.824 ops/s
# Warmup Iteration  22: 617599.274 ops/s
# Warmup Iteration  23: 609380.581 ops/s
# Warmup Iteration  24: 594226.660 ops/s
# Warmup Iteration  25: 629378.068 ops/s
# Warmup Iteration  26: 599627.727 ops/s
# Warmup Iteration  27: 610017.104 ops/s
# Warmup Iteration  28: 620159.861 ops/s
# Warmup Iteration  29: 599713.916 ops/s
# Warmup Iteration  30: 634980.432 ops/s
Iteration   1: 597906.993 ops/s
Iteration   2: 619149.638 ops/s
Iteration   3: 594362.614 ops/s
Iteration   4: 600955.988 ops/s
Iteration   5: 611106.415 ops/s
Iteration   6: 593281.504 ops/s
Iteration   7: 620317.073 ops/s
Iteration   8: 602441.021 ops/s
Iteration   9: 607985.498 ops/s
Iteration  10: 619391.106 ops/s
Iteration  11: 604099.448 ops/s
Iteration  12: 611597.507 ops/s
Iteration  13: 623507.639 ops/s
Iteration  14: 594011.287 ops/s
Iteration  15: 599813.227 ops/s
Iteration  16: 624857.937 ops/s
Iteration  17: 603301.045 ops/s
Iteration  18: 593841.048 ops/s
Iteration  19: 644599.732 ops/s
Iteration  20: 619115.084 ops/s
Iteration  21: 599500.899 ops/s
Iteration  22: 640737.922 ops/s
Iteration  23: 590766.251 ops/s
Iteration  24: 615429.815 ops/s
Iteration  25: 601847.888 ops/s
Iteration  26: 605351.712 ops/s
Iteration  27: 635457.528 ops/s
Iteration  28: 590846.152 ops/s
Iteration  29: 625850.609 ops/s
Iteration  30: 611111.275 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_hasNextThrows":
  610084.729 ±(99.9%) 9838.633 ops/s [Average]
  (min, avg, max) = (590766.251, 610084.729, 644599.732), stdev = 14726.003
  CI (99.9%): [600246.096, 619923.361] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_hasNextThrows  thrpt   30  610084.729 ± 9838.633  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_toStringStates$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_toStringStates

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 184203.089 ops/s
# Warmup Iteration   2: 338222.172 ops/s
# Warmup Iteration   3: 489870.214 ops/s
# Warmup Iteration   4: 480141.082 ops/s
# Warmup Iteration   5: 478993.024 ops/s
# Warmup Iteration   6: 500653.742 ops/s
# Warmup Iteration   7: 482893.841 ops/s
# Warmup Iteration   8: 495252.089 ops/s
# Warmup Iteration   9: 496911.632 ops/s
# Warmup Iteration  10: 482391.630 ops/s
# Warmup Iteration  11: 497101.504 ops/s
# Warmup Iteration  12: 489974.306 ops/s
# Warmup Iteration  13: 498407.333 ops/s
# Warmup Iteration  14: 491761.855 ops/s
# Warmup Iteration  15: 491859.232 ops/s
# Warmup Iteration  16: 513525.947 ops/s
# Warmup Iteration  17: 504375.860 ops/s
# Warmup Iteration  18: 492457.459 ops/s
# Warmup Iteration  19: 508649.214 ops/s
# Warmup Iteration  20: 480637.413 ops/s
# Warmup Iteration  21: 495188.866 ops/s
# Warmup Iteration  22: 511577.354 ops/s
# Warmup Iteration  23: 494565.028 ops/s
# Warmup Iteration  24: 495874.684 ops/s
# Warmup Iteration  25: 502002.165 ops/s
# Warmup Iteration  26: 486792.154 ops/s
# Warmup Iteration  27: 509689.053 ops/s
# Warmup Iteration  28: 505001.652 ops/s
# Warmup Iteration  29: 490609.555 ops/s
# Warmup Iteration  30: 509816.389 ops/s
Iteration   1: 470239.487 ops/s
Iteration   2: 505879.632 ops/s
Iteration   3: 509564.592 ops/s
Iteration   4: 479567.715 ops/s
Iteration   5: 507844.293 ops/s
Iteration   6: 478618.482 ops/s
Iteration   7: 496004.076 ops/s
Iteration   8: 504729.189 ops/s
Iteration   9: 487064.827 ops/s
Iteration  10: 503229.940 ops/s
Iteration  11: 487359.641 ops/s
Iteration  12: 485805.341 ops/s
Iteration  13: 376056.156 ops/s
Iteration  14: 476512.287 ops/s
Iteration  15: 482610.041 ops/s
Iteration  16: 510041.339 ops/s
Iteration  17: 488052.074 ops/s
Iteration  18: 500613.920 ops/s
Iteration  19: 490842.758 ops/s
Iteration  20: 518488.490 ops/s
Iteration  21: 477953.109 ops/s
Iteration  22: 492435.381 ops/s
Iteration  23: 492421.815 ops/s
Iteration  24: 491460.006 ops/s
Iteration  25: 494250.547 ops/s
Iteration  26: 506954.583 ops/s
Iteration  27: 511261.224 ops/s
Iteration  28: 493631.330 ops/s
Iteration  29: 484944.691 ops/s
Iteration  30: 507471.565 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ScheduledRunnableTest._Benchmark.benchmark_toStringStates":
  490396.951 ±(99.9%) 16575.369 ops/s [Average]
  (min, avg, max) = (376056.156, 490396.951, 518488.490), stdev = 24809.235
  CI (99.9%): [473821.582, 506972.320] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
ScheduledRunnableTest._Benchmark.benchmark_toStringStates  thrpt   30  490396.951 ± 16575.369  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_neverSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_neverSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 371277.697 ops/s
# Warmup Iteration   2: 1710515.077 ops/s
# Warmup Iteration   3: 2557147.892 ops/s
# Warmup Iteration   4: 2835260.760 ops/s
# Warmup Iteration   5: 2750132.863 ops/s
# Warmup Iteration   6: 2731885.773 ops/s
# Warmup Iteration   7: 2701121.008 ops/s
# Warmup Iteration   8: 2790381.781 ops/s
# Warmup Iteration   9: 2642779.508 ops/s
# Warmup Iteration  10: 2842863.448 ops/s
# Warmup Iteration  11: 2691423.759 ops/s
# Warmup Iteration  12: 2688575.081 ops/s
# Warmup Iteration  13: 2687567.756 ops/s
# Warmup Iteration  14: 2741074.290 ops/s
# Warmup Iteration  15: 2740112.494 ops/s
# Warmup Iteration  16: 2711904.839 ops/s
# Warmup Iteration  17: 2846610.673 ops/s
# Warmup Iteration  18: 2779804.570 ops/s
# Warmup Iteration  19: 2710761.899 ops/s
# Warmup Iteration  20: 2820132.604 ops/s
# Warmup Iteration  21: 2660765.406 ops/s
# Warmup Iteration  22: 2761881.590 ops/s
# Warmup Iteration  23: 2760045.680 ops/s
# Warmup Iteration  24: 2657541.285 ops/s
# Warmup Iteration  25: 2797992.994 ops/s
# Warmup Iteration  26: 2683915.958 ops/s
# Warmup Iteration  27: 2804524.741 ops/s
# Warmup Iteration  28: 2750868.384 ops/s
# Warmup Iteration  29: 2692318.461 ops/s
# Warmup Iteration  30: 2775407.278 ops/s
Iteration   1: 2710330.052 ops/s
Iteration   2: 2795078.463 ops/s
Iteration   3: 2702788.524 ops/s
Iteration   4: 2731377.266 ops/s
Iteration   5: 2845572.748 ops/s
Iteration   6: 2686373.998 ops/s
Iteration   7: 2737897.320 ops/s
Iteration   8: 2865275.649 ops/s
Iteration   9: 2663274.381 ops/s
Iteration  10: 2783506.513 ops/s
Iteration  11: 2721385.473 ops/s
Iteration  12: 2740439.923 ops/s
Iteration  13: 2872622.301 ops/s
Iteration  14: 2705007.117 ops/s
Iteration  15: 2746937.293 ops/s
Iteration  16: 2841442.291 ops/s
Iteration  17: 2785685.755 ops/s
Iteration  18: 2738418.813 ops/s
Iteration  19: 2794321.745 ops/s
Iteration  20: 2657321.896 ops/s
Iteration  21: 2843686.022 ops/s
Iteration  22: 2719741.659 ops/s
Iteration  23: 2768631.969 ops/s
Iteration  24: 2691991.908 ops/s
Iteration  25: 2663226.156 ops/s
Iteration  26: 2830066.856 ops/s
Iteration  27: 2596226.157 ops/s
Iteration  28: 2799926.716 ops/s
Iteration  29: 2824272.181 ops/s
Iteration  30: 2646504.264 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_neverSource":
  2750311.047 ±(99.9%) 47962.972 ops/s [Average]
  (min, avg, max) = (2596226.157, 2750311.047, 2872622.301), stdev = 71788.724
  CI (99.9%): [2702348.075, 2798274.019] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
FlowableScanTest._Benchmark.benchmark_neverSource  thrpt   30  2750311.047 ± 47962.972  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_request1Conditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_request1Conditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 212582.954 ops/s
# Warmup Iteration   2: 874109.925 ops/s
# Warmup Iteration   3: 1000067.411 ops/s
# Warmup Iteration   4: 1175279.407 ops/s
# Warmup Iteration   5: 1225841.398 ops/s
# Warmup Iteration   6: 1226309.664 ops/s
# Warmup Iteration   7: 1195322.888 ops/s
# Warmup Iteration   8: 1195221.591 ops/s
# Warmup Iteration   9: 1219780.058 ops/s
# Warmup Iteration  10: 1253001.391 ops/s
# Warmup Iteration  11: 1236933.367 ops/s
# Warmup Iteration  12: 1184331.448 ops/s
# Warmup Iteration  13: 1252628.328 ops/s
# Warmup Iteration  14: 1184658.864 ops/s
# Warmup Iteration  15: 1212573.729 ops/s
# Warmup Iteration  16: 1194650.920 ops/s
# Warmup Iteration  17: 1220424.331 ops/s
# Warmup Iteration  18: 1204083.112 ops/s
# Warmup Iteration  19: 1182216.554 ops/s
# Warmup Iteration  20: 1197701.781 ops/s
# Warmup Iteration  21: 1208669.816 ops/s
# Warmup Iteration  22: 1196355.248 ops/s
# Warmup Iteration  23: 1228630.308 ops/s
# Warmup Iteration  24: 1212419.217 ops/s
# Warmup Iteration  25: 1250727.979 ops/s
# Warmup Iteration  26: 1180740.696 ops/s
# Warmup Iteration  27: 1190326.086 ops/s
# Warmup Iteration  28: 1237563.478 ops/s
# Warmup Iteration  29: 1205607.549 ops/s
# Warmup Iteration  30: 1266529.719 ops/s
Iteration   1: 1183153.870 ops/s
Iteration   2: 1259580.094 ops/s
Iteration   3: 1244892.569 ops/s
Iteration   4: 1190678.804 ops/s
Iteration   5: 1209358.940 ops/s
Iteration   6: 1232124.137 ops/s
Iteration   7: 1146861.109 ops/s
Iteration   8: 1013524.409 ops/s
Iteration   9: 1212369.748 ops/s
Iteration  10: 1247681.051 ops/s
Iteration  11: 1187952.432 ops/s
Iteration  12: 1229075.061 ops/s
Iteration  13: 1223954.726 ops/s
Iteration  14: 1159350.975 ops/s
Iteration  15: 1192925.536 ops/s
Iteration  16: 1223674.437 ops/s
Iteration  17: 1184821.725 ops/s
Iteration  18: 1236046.325 ops/s
Iteration  19: 1202054.941 ops/s
Iteration  20: 1271428.130 ops/s
Iteration  21: 1200467.293 ops/s
Iteration  22: 1209453.216 ops/s
Iteration  23: 1248740.486 ops/s
Iteration  24: 1200039.884 ops/s
Iteration  25: 1260084.334 ops/s
Iteration  26: 1190399.541 ops/s
Iteration  27: 1265074.298 ops/s
Iteration  28: 1278095.726 ops/s
Iteration  29: 1208343.442 ops/s
Iteration  30: 1177446.527 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_request1Conditional":
  1209655.126 ±(99.9%) 33249.681 ops/s [Average]
  (min, avg, max) = (1013524.409, 1209655.126, 1278095.726), stdev = 49766.561
  CI (99.9%): [1176405.444, 1242904.807] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_request1Conditional  thrpt   30  1209655.126 ± 33249.681  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_constructorIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_constructorIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 934425.865 ops/s
# Warmup Iteration   2: 3303354.757 ops/s
# Warmup Iteration   3: 5989297.491 ops/s
# Warmup Iteration   4: 5660561.385 ops/s
# Warmup Iteration   5: 5977457.909 ops/s
# Warmup Iteration   6: 5970558.848 ops/s
# Warmup Iteration   7: 5983407.474 ops/s
# Warmup Iteration   8: 5598160.807 ops/s
# Warmup Iteration   9: 5986536.654 ops/s
# Warmup Iteration  10: 5743942.173 ops/s
# Warmup Iteration  11: 5218229.940 ops/s
# Warmup Iteration  12: 6108579.000 ops/s
# Warmup Iteration  13: 5675316.933 ops/s
# Warmup Iteration  14: 6024380.565 ops/s
# Warmup Iteration  15: 5466040.694 ops/s
# Warmup Iteration  16: 5996320.903 ops/s
# Warmup Iteration  17: 5833389.815 ops/s
# Warmup Iteration  18: 5455636.289 ops/s
# Warmup Iteration  19: 6015234.296 ops/s
# Warmup Iteration  20: 5774743.407 ops/s
# Warmup Iteration  21: 6101442.563 ops/s
# Warmup Iteration  22: 5746103.809 ops/s
# Warmup Iteration  23: 5800577.276 ops/s
# Warmup Iteration  24: 5927731.379 ops/s
# Warmup Iteration  25: 5956176.889 ops/s
# Warmup Iteration  26: 5711095.972 ops/s
# Warmup Iteration  27: 5861918.356 ops/s
# Warmup Iteration  28: 6031114.217 ops/s
# Warmup Iteration  29: 5864099.722 ops/s
# Warmup Iteration  30: 5964541.328 ops/s
Iteration   1: 6078151.734 ops/s
Iteration   2: 5744018.319 ops/s
Iteration   3: 5784521.295 ops/s
Iteration   4: 6089598.133 ops/s
Iteration   5: 5816501.315 ops/s
Iteration   6: 5633685.718 ops/s
Iteration   7: 6045712.016 ops/s
Iteration   8: 5889057.793 ops/s
Iteration   9: 5783168.878 ops/s
Iteration  10: 5942843.332 ops/s
Iteration  11: 5763156.285 ops/s
Iteration  12: 6002932.798 ops/s
Iteration  13: 5726015.185 ops/s
Iteration  14: 5846045.914 ops/s
Iteration  15: 5983030.964 ops/s
Iteration  16: 5592965.976 ops/s
Iteration  17: 5942217.618 ops/s
Iteration  18: 6113495.723 ops/s
Iteration  19: 5862289.118 ops/s
Iteration  20: 6030224.866 ops/s
Iteration  21: 5841394.132 ops/s
Iteration  22: 5840735.945 ops/s
Iteration  23: 6087902.465 ops/s
Iteration  24: 5710456.671 ops/s
Iteration  25: 6111287.197 ops/s
Iteration  26: 5779454.585 ops/s
Iteration  27: 5868181.875 ops/s
Iteration  28: 5810071.537 ops/s
Iteration  29: 5720790.708 ops/s
Iteration  30: 5961164.806 ops/s


Result "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_constructorIterable":
  5880035.763 ±(99.9%) 97677.227 ops/s [Average]
  (min, avg, max) = (5592965.976, 5880035.763, 6113495.723), stdev = 146198.686
  CI (99.9%): [5782358.536, 5977712.990] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ListCompositeDisposableTest._Benchmark.benchmark_constructorIterable  thrpt   30  5880035.763 ± 97677.227  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_synchronousRebatching$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_synchronousRebatching

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76505.042 ops/s
# Warmup Iteration   2: 288656.775 ops/s
# Warmup Iteration   3: 352055.620 ops/s
# Warmup Iteration   4: 339053.796 ops/s
# Warmup Iteration   5: 343161.032 ops/s
# Warmup Iteration   6: 355085.409 ops/s
# Warmup Iteration   7: 336352.323 ops/s
# Warmup Iteration   8: 351637.787 ops/s
# Warmup Iteration   9: 322829.899 ops/s
# Warmup Iteration  10: 323442.239 ops/s
# Warmup Iteration  11: 354724.989 ops/s
# Warmup Iteration  12: 340387.224 ops/s
# Warmup Iteration  13: 347112.359 ops/s
# Warmup Iteration  14: 341731.428 ops/s
# Warmup Iteration  15: 339662.487 ops/s
# Warmup Iteration  16: 323353.724 ops/s
# Warmup Iteration  17: 352123.724 ops/s
# Warmup Iteration  18: 344369.353 ops/s
# Warmup Iteration  19: 352839.448 ops/s
# Warmup Iteration  20: 347400.540 ops/s
# Warmup Iteration  21: 345579.149 ops/s
# Warmup Iteration  22: 361960.277 ops/s
# Warmup Iteration  23: 342473.341 ops/s
# Warmup Iteration  24: 346127.976 ops/s
# Warmup Iteration  25: 352544.770 ops/s
# Warmup Iteration  26: 351426.409 ops/s
# Warmup Iteration  27: 350690.338 ops/s
# Warmup Iteration  28: 345123.068 ops/s
# Warmup Iteration  29: 348990.187 ops/s
# Warmup Iteration  30: 347969.885 ops/s
Iteration   1: 350087.635 ops/s
Iteration   2: 286362.384 ops/s
Iteration   3: 346405.260 ops/s
Iteration   4: 342841.973 ops/s
Iteration   5: 357090.538 ops/s
Iteration   6: 358464.417 ops/s
Iteration   7: 337883.582 ops/s
Iteration   8: 351973.119 ops/s
Iteration   9: 338656.174 ops/s
Iteration  10: 354198.108 ops/s
Iteration  11: 338163.282 ops/s
Iteration  12: 344480.895 ops/s
Iteration  13: 356540.117 ops/s
Iteration  14: 359158.094 ops/s
Iteration  15: 338903.323 ops/s
Iteration  16: 359163.490 ops/s
Iteration  17: 351585.871 ops/s
Iteration  18: 337570.737 ops/s
Iteration  19: 362118.067 ops/s
Iteration  20: 356771.142 ops/s
Iteration  21: 347541.645 ops/s
Iteration  22: 354788.035 ops/s
Iteration  23: 343350.510 ops/s
Iteration  24: 353608.403 ops/s
Iteration  25: 346641.625 ops/s
Iteration  26: 345574.978 ops/s
Iteration  27: 363777.299 ops/s
Iteration  28: 343881.821 ops/s
Iteration  29: 334031.085 ops/s
Iteration  30: 364458.200 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_synchronousRebatching":
  347535.727 ±(99.9%) 9620.502 ops/s [Average]
  (min, avg, max) = (286362.384, 347535.727, 364458.200), stdev = 14399.515
  CI (99.9%): [337915.225, 357156.229] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_synchronousRebatching  thrpt   30  347535.727 ± 9620.502  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_multiTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_multiTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 224070.552 ops/s
# Warmup Iteration   2: 1233172.053 ops/s
# Warmup Iteration   3: 2700953.376 ops/s
# Warmup Iteration   4: 2877309.678 ops/s
# Warmup Iteration   5: 2932597.930 ops/s
# Warmup Iteration   6: 2941963.383 ops/s
# Warmup Iteration   7: 2771887.152 ops/s
# Warmup Iteration   8: 2965935.052 ops/s
# Warmup Iteration   9: 3034232.236 ops/s
# Warmup Iteration  10: 2857462.774 ops/s
# Warmup Iteration  11: 2957856.467 ops/s
# Warmup Iteration  12: 2862572.221 ops/s
# Warmup Iteration  13: 3002493.027 ops/s
# Warmup Iteration  14: 3110521.146 ops/s
# Warmup Iteration  15: 2817605.558 ops/s
# Warmup Iteration  16: 2955352.270 ops/s
# Warmup Iteration  17: 2969978.645 ops/s
# Warmup Iteration  18: 2889801.626 ops/s
# Warmup Iteration  19: 2928581.061 ops/s
# Warmup Iteration  20: 3084188.952 ops/s
# Warmup Iteration  21: 2858267.474 ops/s
# Warmup Iteration  22: 2953830.271 ops/s
# Warmup Iteration  23: 2895966.428 ops/s
# Warmup Iteration  24: 2830632.906 ops/s
# Warmup Iteration  25: 3041452.418 ops/s
# Warmup Iteration  26: 2882974.141 ops/s
# Warmup Iteration  27: 2954042.313 ops/s
# Warmup Iteration  28: 2870374.430 ops/s
# Warmup Iteration  29: 2946196.184 ops/s
# Warmup Iteration  30: 2861916.899 ops/s
Iteration   1: 2899993.630 ops/s
Iteration   2: 2969515.352 ops/s
Iteration   3: 2980443.090 ops/s
Iteration   4: 2922703.994 ops/s
Iteration   5: 3008711.974 ops/s
Iteration   6: 2878934.766 ops/s
Iteration   7: 3048832.747 ops/s
Iteration   8: 2840013.622 ops/s
Iteration   9: 2930767.514 ops/s
Iteration  10: 2980340.950 ops/s
Iteration  11: 2990489.880 ops/s
Iteration  12: 2978460.170 ops/s
Iteration  13: 2852876.365 ops/s
Iteration  14: 3034015.287 ops/s
Iteration  15: 2924429.891 ops/s
Iteration  16: 2923097.887 ops/s
Iteration  17: 3047939.020 ops/s
Iteration  18: 2877724.231 ops/s
Iteration  19: 2958768.797 ops/s
Iteration  20: 2993873.166 ops/s
Iteration  21: 2789344.725 ops/s
Iteration  22: 3020980.972 ops/s
Iteration  23: 2864469.074 ops/s
Iteration  24: 2982254.928 ops/s
Iteration  25: 2936352.552 ops/s
Iteration  26: 2825228.941 ops/s
Iteration  27: 3017627.631 ops/s
Iteration  28: 2789173.284 ops/s
Iteration  29: 2999673.692 ops/s
Iteration  30: 2860637.400 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_multiTake":
  2937589.184 ±(99.9%) 50330.164 ops/s [Average]
  (min, avg, max) = (2789173.284, 2937589.184, 3048832.747), stdev = 75331.826
  CI (99.9%): [2887259.021, 2987919.348] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FlowableTakeTest._Benchmark.benchmark_multiTake  thrpt   30  2937589.184 ± 50330.164  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmptyDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmptyDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 413155.716 ops/s
# Warmup Iteration   2: 1652096.891 ops/s
# Warmup Iteration   3: 2571906.020 ops/s
# Warmup Iteration   4: 2977100.656 ops/s
# Warmup Iteration   5: 2936314.774 ops/s
# Warmup Iteration   6: 2957658.817 ops/s
# Warmup Iteration   7: 2886346.505 ops/s
# Warmup Iteration   8: 2876024.628 ops/s
# Warmup Iteration   9: 2944070.372 ops/s
# Warmup Iteration  10: 3004193.025 ops/s
# Warmup Iteration  11: 2982915.138 ops/s
# Warmup Iteration  12: 3094832.351 ops/s
# Warmup Iteration  13: 2923045.569 ops/s
# Warmup Iteration  14: 2923239.499 ops/s
# Warmup Iteration  15: 3060203.304 ops/s
# Warmup Iteration  16: 2788726.839 ops/s
# Warmup Iteration  17: 2962962.520 ops/s
# Warmup Iteration  18: 2867097.792 ops/s
# Warmup Iteration  19: 2992751.198 ops/s
# Warmup Iteration  20: 2954665.169 ops/s
# Warmup Iteration  21: 2923958.669 ops/s
# Warmup Iteration  22: 3055313.878 ops/s
# Warmup Iteration  23: 2916243.353 ops/s
# Warmup Iteration  24: 2875897.092 ops/s
# Warmup Iteration  25: 3076306.200 ops/s
# Warmup Iteration  26: 2887099.457 ops/s
# Warmup Iteration  27: 2462776.499 ops/s
# Warmup Iteration  28: 2958006.973 ops/s
# Warmup Iteration  29: 3052652.116 ops/s
# Warmup Iteration  30: 3112146.018 ops/s
Iteration   1: 2883205.047 ops/s
Iteration   2: 2893615.012 ops/s
Iteration   3: 3034375.680 ops/s
Iteration   4: 2893486.546 ops/s
Iteration   5: 3011077.711 ops/s
Iteration   6: 2951360.322 ops/s
Iteration   7: 3024812.869 ops/s
Iteration   8: 2916969.828 ops/s
Iteration   9: 2859749.872 ops/s
Iteration  10: 2940729.607 ops/s
Iteration  11: 2872804.281 ops/s
Iteration  12: 2957017.223 ops/s
Iteration  13: 3080448.645 ops/s
Iteration  14: 2832949.387 ops/s
Iteration  15: 2923806.340 ops/s
Iteration  16: 3006082.019 ops/s
Iteration  17: 2858619.987 ops/s
Iteration  18: 2921155.084 ops/s
Iteration  19: 2957378.732 ops/s
Iteration  20: 3026956.578 ops/s
Iteration  21: 2860335.122 ops/s
Iteration  22: 2943329.778 ops/s
Iteration  23: 3041849.426 ops/s
Iteration  24: 2908259.804 ops/s
Iteration  25: 3063179.245 ops/s
Iteration  26: 2910819.111 ops/s
Iteration  27: 2925657.344 ops/s
Iteration  28: 3009040.592 ops/s
Iteration  29: 2888134.855 ops/s
Iteration  30: 2950494.882 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmptyDelayError":
  2944923.364 ±(99.9%) 45085.792 ops/s [Average]
  (min, avg, max) = (2832949.387, 2944923.364, 3080448.645), stdev = 67482.296
  CI (99.9%): [2899837.572, 2990009.156] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_concatMapEmptyDelayError  thrpt   30  2944923.364 ± 45085.792  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopMissingBackpressureWithResource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopMissingBackpressureWithResource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157487.590 ops/s
# Warmup Iteration   2: 476014.442 ops/s
# Warmup Iteration   3: 572400.482 ops/s
# Warmup Iteration   4: 629230.037 ops/s
# Warmup Iteration   5: 556124.517 ops/s
# Warmup Iteration   6: 617292.709 ops/s
# Warmup Iteration   7: 648518.943 ops/s
# Warmup Iteration   8: 645774.882 ops/s
# Warmup Iteration   9: 651207.486 ops/s
# Warmup Iteration  10: 662166.786 ops/s
# Warmup Iteration  11: 631367.555 ops/s
# Warmup Iteration  12: 655441.263 ops/s
# Warmup Iteration  13: 638027.357 ops/s
# Warmup Iteration  14: 650338.954 ops/s
# Warmup Iteration  15: 673829.581 ops/s
# Warmup Iteration  16: 629203.464 ops/s
# Warmup Iteration  17: 689643.610 ops/s
# Warmup Iteration  18: 688045.367 ops/s
# Warmup Iteration  19: 664226.514 ops/s
# Warmup Iteration  20: 704474.562 ops/s
# Warmup Iteration  21: 686618.095 ops/s
# Warmup Iteration  22: 685526.049 ops/s
# Warmup Iteration  23: 688730.641 ops/s
# Warmup Iteration  24: 661404.237 ops/s
# Warmup Iteration  25: 669801.168 ops/s
# Warmup Iteration  26: 707782.956 ops/s
# Warmup Iteration  27: 666417.781 ops/s
# Warmup Iteration  28: 697103.114 ops/s
# Warmup Iteration  29: 664164.367 ops/s
# Warmup Iteration  30: 697216.293 ops/s
Iteration   1: 662507.160 ops/s
Iteration   2: 695974.231 ops/s
Iteration   3: 679686.177 ops/s
Iteration   4: 669444.551 ops/s
Iteration   5: 673012.150 ops/s
Iteration   6: 686957.390 ops/s
Iteration   7: 649465.353 ops/s
Iteration   8: 664373.004 ops/s
Iteration   9: 688972.445 ops/s
Iteration  10: 663064.875 ops/s
Iteration  11: 667830.854 ops/s
Iteration  12: 707537.581 ops/s
Iteration  13: 670808.053 ops/s
Iteration  14: 673391.330 ops/s
Iteration  15: 694533.801 ops/s
Iteration  16: 717521.716 ops/s
Iteration  17: 669298.364 ops/s
Iteration  18: 683909.220 ops/s
Iteration  19: 689267.179 ops/s
Iteration  20: 665793.579 ops/s
Iteration  21: 698632.532 ops/s
Iteration  22: 674258.505 ops/s
Iteration  23: 677600.976 ops/s
Iteration  24: 704618.038 ops/s
Iteration  25: 677408.948 ops/s
Iteration  26: 687406.810 ops/s
Iteration  27: 668242.883 ops/s
Iteration  28: 674589.068 ops/s
Iteration  29: 688942.663 ops/s
Iteration  30: 669243.241 ops/s


Result "io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopMissingBackpressureWithResource":
  679809.756 ±(99.9%) 10231.155 ops/s [Average]
  (min, avg, max) = (649465.353, 679809.756, 717521.716), stdev = 15313.512
  CI (99.9%): [669578.601, 690040.911] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score       Error  Units
QueueDrainHelperTest._Benchmark.benchmark_drainMaxLoopMissingBackpressureWithResource  thrpt   30  679809.756 ± 10231.155  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotEmitTerminalEventTwiceIfScanFunctionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotEmitTerminalEventTwiceIfScanFunctionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 66738.982 ops/s
# Warmup Iteration   2: 167549.855 ops/s
# Warmup Iteration   3: 459208.358 ops/s
# Warmup Iteration   4: 486615.051 ops/s
# Warmup Iteration   5: 454734.118 ops/s
# Warmup Iteration   6: 524616.386 ops/s
# Warmup Iteration   7: 539603.511 ops/s
# Warmup Iteration   8: 513624.860 ops/s
# Warmup Iteration   9: 533975.646 ops/s
# Warmup Iteration  10: 522354.818 ops/s
# Warmup Iteration  11: 523134.993 ops/s
# Warmup Iteration  12: 526154.520 ops/s
# Warmup Iteration  13: 509406.613 ops/s
# Warmup Iteration  14: 550632.791 ops/s
# Warmup Iteration  15: 513735.297 ops/s
# Warmup Iteration  16: 509792.424 ops/s
# Warmup Iteration  17: 541844.246 ops/s
# Warmup Iteration  18: 551115.215 ops/s
# Warmup Iteration  19: 552413.779 ops/s
# Warmup Iteration  20: 551520.010 ops/s
# Warmup Iteration  21: 424034.419 ops/s
# Warmup Iteration  22: 516324.891 ops/s
# Warmup Iteration  23: 549921.463 ops/s
# Warmup Iteration  24: 538754.222 ops/s
# Warmup Iteration  25: 561005.120 ops/s
# Warmup Iteration  26: 535373.730 ops/s
# Warmup Iteration  27: 554083.540 ops/s
# Warmup Iteration  28: 544459.265 ops/s
# Warmup Iteration  29: 560081.494 ops/s
# Warmup Iteration  30: 574237.076 ops/s
Iteration   1: 537658.315 ops/s
Iteration   2: 545328.071 ops/s
Iteration   3: 569343.098 ops/s
Iteration   4: 536169.258 ops/s
Iteration   5: 556625.189 ops/s
Iteration   6: 555580.878 ops/s
Iteration   7: 541121.431 ops/s
Iteration   8: 566706.106 ops/s
Iteration   9: 552231.312 ops/s
Iteration  10: 535777.448 ops/s
Iteration  11: 556822.072 ops/s
Iteration  12: 541165.556 ops/s
Iteration  13: 545634.647 ops/s
Iteration  14: 532109.956 ops/s
Iteration  15: 531564.206 ops/s
Iteration  16: 560521.864 ops/s
Iteration  17: 563946.341 ops/s
Iteration  18: 524119.146 ops/s
Iteration  19: 546655.228 ops/s
Iteration  20: 534175.296 ops/s
Iteration  21: 563620.026 ops/s
Iteration  22: 551066.197 ops/s
Iteration  23: 524439.608 ops/s
Iteration  24: 554706.308 ops/s
Iteration  25: 559040.465 ops/s
Iteration  26: 527135.673 ops/s
Iteration  27: 561670.531 ops/s
Iteration  28: 538521.593 ops/s
Iteration  29: 560084.567 ops/s
Iteration  30: 537688.855 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotEmitTerminalEventTwiceIfScanFunctionThrows":
  547040.975 ±(99.9%) 8899.221 ops/s [Average]
  (min, avg, max) = (524119.146, 547040.975, 569343.098), stdev = 13319.936
  CI (99.9%): [538141.754, 555940.196] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                             Mode  Cnt       Score      Error  Units
FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotEmitTerminalEventTwiceIfScanFunctionThrows  thrpt   30  547040.975 ± 8899.221  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotProcessOnNextAfterTerminalEventIfScanFunctionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotProcessOnNextAfterTerminalEventIfScanFunctionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 60202.905 ops/s
# Warmup Iteration   2: 101369.716 ops/s
# Warmup Iteration   3: 257047.580 ops/s
# Warmup Iteration   4: 461578.906 ops/s
# Warmup Iteration   5: 472790.678 ops/s
# Warmup Iteration   6: 457899.634 ops/s
# Warmup Iteration   7: 453184.691 ops/s
# Warmup Iteration   8: 469551.479 ops/s
# Warmup Iteration   9: 452441.228 ops/s
# Warmup Iteration  10: 485267.057 ops/s
# Warmup Iteration  11: 482219.544 ops/s
# Warmup Iteration  12: 499092.995 ops/s
# Warmup Iteration  13: 503707.805 ops/s
# Warmup Iteration  14: 484142.250 ops/s
# Warmup Iteration  15: 498727.171 ops/s
# Warmup Iteration  16: 477870.337 ops/s
# Warmup Iteration  17: 521105.153 ops/s
# Warmup Iteration  18: 502029.860 ops/s
# Warmup Iteration  19: 495429.358 ops/s
# Warmup Iteration  20: 506901.707 ops/s
# Warmup Iteration  21: 510458.617 ops/s
# Warmup Iteration  22: 516150.575 ops/s
# Warmup Iteration  23: 508555.130 ops/s
# Warmup Iteration  24: 507512.820 ops/s
# Warmup Iteration  25: 521441.608 ops/s
# Warmup Iteration  26: 498209.012 ops/s
# Warmup Iteration  27: 531372.821 ops/s
# Warmup Iteration  28: 528696.684 ops/s
# Warmup Iteration  29: 493917.226 ops/s
# Warmup Iteration  30: 540328.121 ops/s
Iteration   1: 520306.554 ops/s
Iteration   2: 488888.882 ops/s
Iteration   3: 525159.591 ops/s
Iteration   4: 514933.665 ops/s
Iteration   5: 498533.362 ops/s
Iteration   6: 508044.408 ops/s
Iteration   7: 529097.555 ops/s
Iteration   8: 496206.608 ops/s
Iteration   9: 524808.571 ops/s
Iteration  10: 498531.810 ops/s
Iteration  11: 520617.047 ops/s
Iteration  12: 519600.421 ops/s
Iteration  13: 501744.649 ops/s
Iteration  14: 512771.981 ops/s
Iteration  15: 522385.541 ops/s
Iteration  16: 513683.381 ops/s
Iteration  17: 497128.004 ops/s
Iteration  18: 521332.237 ops/s
Iteration  19: 502789.625 ops/s
Iteration  20: 514050.237 ops/s
Iteration  21: 498661.638 ops/s
Iteration  22: 524013.367 ops/s
Iteration  23: 505444.818 ops/s
Iteration  24: 499793.900 ops/s
Iteration  25: 531116.065 ops/s
Iteration  26: 497444.498 ops/s
Iteration  27: 518518.404 ops/s
Iteration  28: 493929.210 ops/s
Iteration  29: 505468.325 ops/s
Iteration  30: 526409.216 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotProcessOnNextAfterTerminalEventIfScanFunctionThrows":
  511047.119 ±(99.9%) 8134.062 ops/s [Average]
  (min, avg, max) = (488888.882, 511047.119, 531116.065), stdev = 12174.682
  CI (99.9%): [502913.057, 519181.181] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                      Mode  Cnt       Score      Error  Units
FlowableScanTest._Benchmark.benchmark_scanWithSeedDoesNotProcessOnNextAfterTerminalEventIfScanFunctionThrows  thrpt   30  511047.119 ± 8134.062  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_sourceOverflows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_sourceOverflows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 74729.492 ops/s
# Warmup Iteration   2: 366911.416 ops/s
# Warmup Iteration   3: 411438.042 ops/s
# Warmup Iteration   4: 372185.938 ops/s
# Warmup Iteration   5: 429790.361 ops/s
# Warmup Iteration   6: 449587.759 ops/s
# Warmup Iteration   7: 397753.878 ops/s
# Warmup Iteration   8: 436951.242 ops/s
# Warmup Iteration   9: 450961.932 ops/s
# Warmup Iteration  10: 461380.928 ops/s
# Warmup Iteration  11: 428818.285 ops/s
# Warmup Iteration  12: 452895.217 ops/s
# Warmup Iteration  13: 427521.278 ops/s
# Warmup Iteration  14: 443919.452 ops/s
# Warmup Iteration  15: 439998.267 ops/s
# Warmup Iteration  16: 363043.417 ops/s
# Warmup Iteration  17: 461711.162 ops/s
# Warmup Iteration  18: 447958.569 ops/s
# Warmup Iteration  19: 476974.509 ops/s
# Warmup Iteration  20: 445684.906 ops/s
# Warmup Iteration  21: 459944.913 ops/s
# Warmup Iteration  22: 469388.105 ops/s
# Warmup Iteration  23: 451592.093 ops/s
# Warmup Iteration  24: 465995.055 ops/s
# Warmup Iteration  25: 446994.632 ops/s
# Warmup Iteration  26: 463231.470 ops/s
# Warmup Iteration  27: 456568.033 ops/s
# Warmup Iteration  28: 447927.746 ops/s
# Warmup Iteration  29: 474404.364 ops/s
# Warmup Iteration  30: 448914.282 ops/s
Iteration   1: 448978.080 ops/s
Iteration   2: 470480.495 ops/s
Iteration   3: 477018.514 ops/s
Iteration   4: 449739.060 ops/s
Iteration   5: 465811.743 ops/s
Iteration   6: 448095.991 ops/s
Iteration   7: 464203.146 ops/s
Iteration   8: 460314.343 ops/s
Iteration   9: 454716.324 ops/s
Iteration  10: 470644.335 ops/s
Iteration  11: 447820.258 ops/s
Iteration  12: 463024.238 ops/s
Iteration  13: 448593.820 ops/s
Iteration  14: 462823.776 ops/s
Iteration  15: 455910.649 ops/s
Iteration  16: 435586.184 ops/s
Iteration  17: 467380.883 ops/s
Iteration  18: 443082.687 ops/s
Iteration  19: 439744.690 ops/s
Iteration  20: 471220.110 ops/s
Iteration  21: 439489.348 ops/s
Iteration  22: 474510.708 ops/s
Iteration  23: 447707.926 ops/s
Iteration  24: 455976.226 ops/s
Iteration  25: 467521.091 ops/s
Iteration  26: 457282.885 ops/s
Iteration  27: 474055.143 ops/s
Iteration  28: 459436.063 ops/s
Iteration  29: 448204.113 ops/s
Iteration  30: 471801.310 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_sourceOverflows":
  458039.138 ±(99.9%) 7816.403 ops/s [Average]
  (min, avg, max) = (435586.184, 458039.138, 477018.514), stdev = 11699.225
  CI (99.9%): [450222.735, 465855.541] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_sourceOverflows  thrpt   30  458039.138 ± 7816.403  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_overflowMissingBackpressureException$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_overflowMissingBackpressureException

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27238.408 ops/s
# Warmup Iteration   2: 94888.505 ops/s
# Warmup Iteration   3: 95381.475 ops/s
# Warmup Iteration   4: 104933.830 ops/s
# Warmup Iteration   5: 102367.350 ops/s
# Warmup Iteration   6: 104833.741 ops/s
# Warmup Iteration   7: 95075.756 ops/s
# Warmup Iteration   8: 109111.830 ops/s
# Warmup Iteration   9: 105139.534 ops/s
# Warmup Iteration  10: 106274.671 ops/s
# Warmup Iteration  11: 110248.639 ops/s
# Warmup Iteration  12: 104874.771 ops/s
# Warmup Iteration  13: 106583.113 ops/s
# Warmup Iteration  14: 110128.489 ops/s
# Warmup Iteration  15: 104961.647 ops/s
# Warmup Iteration  16: 111638.636 ops/s
# Warmup Iteration  17: 104444.835 ops/s
# Warmup Iteration  18: 111606.011 ops/s
# Warmup Iteration  19: 112094.716 ops/s
# Warmup Iteration  20: 105993.044 ops/s
# Warmup Iteration  21: 109704.158 ops/s
# Warmup Iteration  22: 111613.056 ops/s
# Warmup Iteration  23: 109334.079 ops/s
# Warmup Iteration  24: 108696.228 ops/s
# Warmup Iteration  25: 108766.478 ops/s
# Warmup Iteration  26: 110910.493 ops/s
# Warmup Iteration  27: 106066.074 ops/s
# Warmup Iteration  28: 106820.396 ops/s
# Warmup Iteration  29: 112363.571 ops/s
# Warmup Iteration  30: 107035.781 ops/s
Iteration   1: 112350.328 ops/s
Iteration   2: 105949.981 ops/s
Iteration   3: 109606.272 ops/s
Iteration   4: 105911.019 ops/s
Iteration   5: 112336.519 ops/s
Iteration   6: 108332.883 ops/s
Iteration   7: 104208.737 ops/s
Iteration   8: 111528.080 ops/s
Iteration   9: 113517.583 ops/s
Iteration  10: 105844.310 ops/s
Iteration  11: 109058.285 ops/s
Iteration  12: 108347.534 ops/s
Iteration  13: 104904.336 ops/s
Iteration  14: 108695.702 ops/s
Iteration  15: 105548.869 ops/s
Iteration  16: 103646.572 ops/s
Iteration  17: 111371.650 ops/s
Iteration  18: 107813.719 ops/s
Iteration  19: 106824.075 ops/s
Iteration  20: 106004.447 ops/s
Iteration  21: 112987.626 ops/s
Iteration  22: 105388.490 ops/s
Iteration  23: 109523.533 ops/s
Iteration  24: 105993.448 ops/s
Iteration  25: 109684.687 ops/s
Iteration  26: 104028.971 ops/s
Iteration  27: 105595.758 ops/s
Iteration  28: 107963.042 ops/s
Iteration  29: 108488.725 ops/s
Iteration  30: 106513.797 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_overflowMissingBackpressureException":
  107932.299 ±(99.9%) 1876.134 ops/s [Average]
  (min, avg, max) = (103646.572, 107932.299, 113517.583), stdev = 2808.109
  CI (99.9%): [106056.165, 109808.433] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_overflowMissingBackpressureException  thrpt   30  107932.299 ± 1876.134  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26063857.453 ops/s
# Warmup Iteration   2: 38407317.112 ops/s
# Warmup Iteration   3: 58795083.913 ops/s
# Warmup Iteration   4: 56752486.014 ops/s
# Warmup Iteration   5: 58560071.209 ops/s
# Warmup Iteration   6: 58037299.784 ops/s
# Warmup Iteration   7: 57102672.532 ops/s
# Warmup Iteration   8: 57709314.089 ops/s
# Warmup Iteration   9: 55576060.852 ops/s
# Warmup Iteration  10: 47753711.554 ops/s
# Warmup Iteration  11: 58346522.467 ops/s
# Warmup Iteration  12: 56695563.806 ops/s
# Warmup Iteration  13: 58764165.332 ops/s
# Warmup Iteration  14: 57633892.929 ops/s
# Warmup Iteration  15: 57601561.553 ops/s
# Warmup Iteration  16: 57665440.695 ops/s
# Warmup Iteration  17: 56959221.179 ops/s
# Warmup Iteration  18: 58774266.691 ops/s
# Warmup Iteration  19: 57079538.031 ops/s
# Warmup Iteration  20: 58469613.325 ops/s
# Warmup Iteration  21: 55515239.706 ops/s
# Warmup Iteration  22: 56852791.702 ops/s
# Warmup Iteration  23: 59577573.769 ops/s
# Warmup Iteration  24: 57360454.335 ops/s
# Warmup Iteration  25: 57876807.072 ops/s
# Warmup Iteration  26: 58628629.848 ops/s
# Warmup Iteration  27: 57363601.805 ops/s
# Warmup Iteration  28: 59463815.545 ops/s
# Warmup Iteration  29: 55496204.154 ops/s
# Warmup Iteration  30: 56512331.286 ops/s
Iteration   1: 59254137.452 ops/s
Iteration   2: 56518504.277 ops/s
Iteration   3: 58577977.903 ops/s
Iteration   4: 60655278.520 ops/s
Iteration   5: 55882117.287 ops/s
Iteration   6: 56243578.375 ops/s
Iteration   7: 60528979.837 ops/s
Iteration   8: 55445473.502 ops/s
Iteration   9: 57873577.914 ops/s
Iteration  10: 58959416.067 ops/s
Iteration  11: 56522061.900 ops/s
Iteration  12: 58734821.165 ops/s
Iteration  13: 55780157.948 ops/s
Iteration  14: 58939144.998 ops/s
Iteration  15: 56792580.925 ops/s
Iteration  16: 57591089.989 ops/s
Iteration  17: 58351609.646 ops/s
Iteration  18: 56108296.928 ops/s
Iteration  19: 56592237.613 ops/s
Iteration  20: 59135815.322 ops/s
Iteration  21: 55197245.700 ops/s
Iteration  22: 59351838.320 ops/s
Iteration  23: 56216699.646 ops/s
Iteration  24: 57243667.476 ops/s
Iteration  25: 59452701.192 ops/s
Iteration  26: 57286771.904 ops/s
Iteration  27: 56371133.473 ops/s
Iteration  28: 59016495.154 ops/s
Iteration  29: 57408041.088 ops/s
Iteration  30: 57634229.457 ops/s


Result "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_empty":
  57655522.699 ±(99.9%) 1010797.956 ops/s [Average]
  (min, avg, max) = (55197245.700, 57655522.699, 60655278.520), stdev = 1512914.911
  CI (99.9%): [56644724.743, 58666320.656] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt         Score         Error  Units
ListCompositeDisposableTest._Benchmark.benchmark_empty  thrpt   30  57655522.699 ± 1010797.956  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_checkTerminatedDelayErrorEmptyError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_checkTerminatedDelayErrorEmptyError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 218963.629 ops/s
# Warmup Iteration   2: 566222.751 ops/s
# Warmup Iteration   3: 607869.208 ops/s
# Warmup Iteration   4: 634395.817 ops/s
# Warmup Iteration   5: 565793.347 ops/s
# Warmup Iteration   6: 655727.018 ops/s
# Warmup Iteration   7: 660255.687 ops/s
# Warmup Iteration   8: 645809.898 ops/s
# Warmup Iteration   9: 655474.039 ops/s
# Warmup Iteration  10: 675068.474 ops/s
# Warmup Iteration  11: 634822.193 ops/s
# Warmup Iteration  12: 678946.687 ops/s
# Warmup Iteration  13: 659292.168 ops/s
# Warmup Iteration  14: 649168.060 ops/s
# Warmup Iteration  15: 672356.864 ops/s
# Warmup Iteration  16: 694257.829 ops/s
# Warmup Iteration  17: 676383.871 ops/s
# Warmup Iteration  18: 693182.531 ops/s
# Warmup Iteration  19: 712859.046 ops/s
# Warmup Iteration  20: 686170.591 ops/s
# Warmup Iteration  21: 710947.100 ops/s
# Warmup Iteration  22: 696346.204 ops/s
# Warmup Iteration  23: 718599.049 ops/s
# Warmup Iteration  24: 726383.306 ops/s
# Warmup Iteration  25: 667327.532 ops/s
# Warmup Iteration  26: 726187.466 ops/s
# Warmup Iteration  27: 679642.407 ops/s
# Warmup Iteration  28: 710689.029 ops/s
# Warmup Iteration  29: 712277.349 ops/s
# Warmup Iteration  30: 692044.366 ops/s
Iteration   1: 720294.397 ops/s
Iteration   2: 673760.122 ops/s
Iteration   3: 727771.360 ops/s
Iteration   4: 719174.523 ops/s
Iteration   5: 712207.281 ops/s
Iteration   6: 730623.115 ops/s
Iteration   7: 669981.084 ops/s
Iteration   8: 724121.556 ops/s
Iteration   9: 669306.895 ops/s
Iteration  10: 692170.738 ops/s
Iteration  11: 724033.733 ops/s
Iteration  12: 728821.867 ops/s
Iteration  13: 682934.507 ops/s
Iteration  14: 709066.929 ops/s
Iteration  15: 705670.107 ops/s
Iteration  16: 699023.839 ops/s
Iteration  17: 712317.893 ops/s
Iteration  18: 716129.544 ops/s
Iteration  19: 674441.830 ops/s
Iteration  20: 719494.951 ops/s
Iteration  21: 661839.186 ops/s
Iteration  22: 706864.350 ops/s
Iteration  23: 678661.931 ops/s
Iteration  24: 706723.956 ops/s
Iteration  25: 691579.608 ops/s
Iteration  26: 698366.646 ops/s
Iteration  27: 721944.420 ops/s
Iteration  28: 699736.532 ops/s
Iteration  29: 722055.449 ops/s
Iteration  30: 691311.562 ops/s


Result "io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_checkTerminatedDelayErrorEmptyError":
  703014.330 ±(99.9%) 13545.829 ops/s [Average]
  (min, avg, max) = (661839.186, 703014.330, 730623.115), stdev = 20274.761
  CI (99.9%): [689468.501, 716560.159] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
QueueDrainHelperTest._Benchmark.benchmark_checkTerminatedDelayErrorEmptyError  thrpt   30  703014.330 ± 13545.829  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36250.338 ops/s
# Warmup Iteration   2: 190877.512 ops/s
# Warmup Iteration   3: 364271.760 ops/s
# Warmup Iteration   4: 386902.310 ops/s
# Warmup Iteration   5: 326495.134 ops/s
# Warmup Iteration   6: 403149.771 ops/s
# Warmup Iteration   7: 437056.356 ops/s
# Warmup Iteration   8: 434871.582 ops/s
# Warmup Iteration   9: 445841.622 ops/s
# Warmup Iteration  10: 430985.372 ops/s
# Warmup Iteration  11: 429516.845 ops/s
# Warmup Iteration  12: 453937.918 ops/s
# Warmup Iteration  13: 429554.048 ops/s
# Warmup Iteration  14: 437233.194 ops/s
# Warmup Iteration  15: 456403.543 ops/s
# Warmup Iteration  16: 424648.496 ops/s
# Warmup Iteration  17: 455832.901 ops/s
# Warmup Iteration  18: 446519.998 ops/s
# Warmup Iteration  19: 469045.310 ops/s
# Warmup Iteration  20: 452567.740 ops/s
# Warmup Iteration  21: 463524.875 ops/s
# Warmup Iteration  22: 459283.944 ops/s
# Warmup Iteration  23: 448891.646 ops/s
# Warmup Iteration  24: 459593.332 ops/s
# Warmup Iteration  25: 454274.245 ops/s
# Warmup Iteration  26: 460179.233 ops/s
# Warmup Iteration  27: 484467.999 ops/s
# Warmup Iteration  28: 443857.193 ops/s
# Warmup Iteration  29: 465125.915 ops/s
# Warmup Iteration  30: 477906.868 ops/s
Iteration   1: 469495.983 ops/s
Iteration   2: 459888.954 ops/s
Iteration   3: 439231.144 ops/s
Iteration   4: 461466.463 ops/s
Iteration   5: 466051.824 ops/s
Iteration   6: 438052.996 ops/s
Iteration   7: 459533.254 ops/s
Iteration   8: 454531.351 ops/s
Iteration   9: 448486.121 ops/s
Iteration  10: 450989.248 ops/s
Iteration  11: 446203.188 ops/s
Iteration  12: 454520.494 ops/s
Iteration  13: 448539.815 ops/s
Iteration  14: 439249.360 ops/s
Iteration  15: 450017.801 ops/s
Iteration  16: 473205.897 ops/s
Iteration  17: 484319.769 ops/s
Iteration  18: 437249.984 ops/s
Iteration  19: 462946.795 ops/s
Iteration  20: 458216.701 ops/s
Iteration  21: 453066.980 ops/s
Iteration  22: 475545.223 ops/s
Iteration  23: 459061.847 ops/s
Iteration  24: 460042.028 ops/s
Iteration  25: 469153.529 ops/s
Iteration  26: 451108.622 ops/s
Iteration  27: 463503.617 ops/s
Iteration  28: 471157.746 ops/s
Iteration  29: 464171.604 ops/s
Iteration  30: 440650.725 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_exactBackpressure":
  456988.635 ±(99.9%) 8014.521 ops/s [Average]
  (min, avg, max) = (437249.984, 456988.635, 484319.769), stdev = 11995.759
  CI (99.9%): [448974.114, 465003.157] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_exactBackpressure  thrpt   30  456988.635 ± 8014.521  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenMainCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenMainCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19134.886 ops/s
# Warmup Iteration   2: 121919.665 ops/s
# Warmup Iteration   3: 354348.798 ops/s
# Warmup Iteration   4: 472147.093 ops/s
# Warmup Iteration   5: 451051.568 ops/s
# Warmup Iteration   6: 494982.979 ops/s
# Warmup Iteration   7: 479825.388 ops/s
# Warmup Iteration   8: 486184.854 ops/s
# Warmup Iteration   9: 500003.462 ops/s
# Warmup Iteration  10: 483720.744 ops/s
# Warmup Iteration  11: 493932.664 ops/s
# Warmup Iteration  12: 509019.559 ops/s
# Warmup Iteration  13: 475695.479 ops/s
# Warmup Iteration  14: 503206.847 ops/s
# Warmup Iteration  15: 481441.818 ops/s
# Warmup Iteration  16: 490582.373 ops/s
# Warmup Iteration  17: 474856.242 ops/s
# Warmup Iteration  18: 490517.622 ops/s
# Warmup Iteration  19: 486588.523 ops/s
# Warmup Iteration  20: 469753.201 ops/s
# Warmup Iteration  21: 500574.686 ops/s
# Warmup Iteration  22: 482566.839 ops/s
# Warmup Iteration  23: 483768.926 ops/s
# Warmup Iteration  24: 498564.554 ops/s
# Warmup Iteration  25: 487877.182 ops/s
# Warmup Iteration  26: 508255.534 ops/s
# Warmup Iteration  27: 488418.390 ops/s
# Warmup Iteration  28: 510848.164 ops/s
# Warmup Iteration  29: 496191.345 ops/s
# Warmup Iteration  30: 491574.920 ops/s
Iteration   1: 506763.365 ops/s
Iteration   2: 506036.915 ops/s
Iteration   3: 477744.928 ops/s
Iteration   4: 494377.896 ops/s
Iteration   5: 510405.661 ops/s
Iteration   6: 503529.922 ops/s
Iteration   7: 513346.601 ops/s
Iteration   8: 475427.031 ops/s
Iteration   9: 510840.152 ops/s
Iteration  10: 470759.421 ops/s
Iteration  11: 496941.277 ops/s
Iteration  12: 503382.011 ops/s
Iteration  13: 480392.513 ops/s
Iteration  14: 491832.384 ops/s
Iteration  15: 480573.288 ops/s
Iteration  16: 483117.065 ops/s
Iteration  17: 507933.400 ops/s
Iteration  18: 174066.624 ops/s
Iteration  19: 507110.508 ops/s
Iteration  20: 386013.957 ops/s
Iteration  21: 496064.283 ops/s
Iteration  22: 488658.586 ops/s
Iteration  23: 500811.127 ops/s
Iteration  24: 486333.997 ops/s
Iteration  25: 484003.238 ops/s
Iteration  26: 506670.441 ops/s
Iteration  27: 482063.006 ops/s
Iteration  28: 493242.732 ops/s
Iteration  29: 503170.427 ops/s
Iteration  30: 483106.915 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenMainCompletes":
  480157.322 ±(99.9%) 41601.787 ops/s [Average]
  (min, avg, max) = (174066.624, 480157.322, 513346.601), stdev = 62267.601
  CI (99.9%): [438555.536, 521759.109] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenMainCompletes  thrpt   30  480157.322 ± 41601.787  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_errorAfterLimitReached$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_errorAfterLimitReached

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87098.706 ops/s
# Warmup Iteration   2: 194430.288 ops/s
# Warmup Iteration   3: 216715.780 ops/s
# Warmup Iteration   4: 207978.717 ops/s
# Warmup Iteration   5: 250146.815 ops/s
# Warmup Iteration   6: 235757.285 ops/s
# Warmup Iteration   7: 240453.853 ops/s
# Warmup Iteration   8: 246046.135 ops/s
# Warmup Iteration   9: 232802.044 ops/s
# Warmup Iteration  10: 254534.506 ops/s
# Warmup Iteration  11: 244449.962 ops/s
# Warmup Iteration  12: 239232.787 ops/s
# Warmup Iteration  13: 247090.991 ops/s
# Warmup Iteration  14: 234599.769 ops/s
# Warmup Iteration  15: 245461.692 ops/s
# Warmup Iteration  16: 234915.234 ops/s
# Warmup Iteration  17: 251318.528 ops/s
# Warmup Iteration  18: 260401.788 ops/s
# Warmup Iteration  19: 239296.797 ops/s
# Warmup Iteration  20: 251364.723 ops/s
# Warmup Iteration  21: 249996.680 ops/s
# Warmup Iteration  22: 254217.081 ops/s
# Warmup Iteration  23: 250973.333 ops/s
# Warmup Iteration  24: 258506.944 ops/s
# Warmup Iteration  25: 246396.183 ops/s
# Warmup Iteration  26: 261614.000 ops/s
# Warmup Iteration  27: 248013.741 ops/s
# Warmup Iteration  28: 252026.283 ops/s
# Warmup Iteration  29: 257462.273 ops/s
# Warmup Iteration  30: 243607.846 ops/s
Iteration   1: 256239.091 ops/s
Iteration   2: 256175.845 ops/s
Iteration   3: 241109.072 ops/s
Iteration   4: 249866.601 ops/s
Iteration   5: 245396.961 ops/s
Iteration   6: 247661.767 ops/s
Iteration   7: 266073.840 ops/s
Iteration   8: 257122.621 ops/s
Iteration   9: 247677.881 ops/s
Iteration  10: 257743.926 ops/s
Iteration  11: 245956.972 ops/s
Iteration  12: 258694.443 ops/s
Iteration  13: 244495.213 ops/s
Iteration  14: 254736.055 ops/s
Iteration  15: 255070.422 ops/s
Iteration  16: 245256.149 ops/s
Iteration  17: 251549.455 ops/s
Iteration  18: 249644.537 ops/s
Iteration  19: 257953.666 ops/s
Iteration  20: 249601.146 ops/s
Iteration  21: 254691.132 ops/s
Iteration  22: 264510.902 ops/s
Iteration  23: 248615.609 ops/s
Iteration  24: 256420.153 ops/s
Iteration  25: 252259.374 ops/s
Iteration  26: 252117.471 ops/s
Iteration  27: 260693.013 ops/s
Iteration  28: 246304.866 ops/s
Iteration  29: 175569.636 ops/s
Iteration  30: 258783.863 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_errorAfterLimitReached":
  250266.389 ±(99.9%) 10263.955 ops/s [Average]
  (min, avg, max) = (175569.636, 250266.389, 266073.840), stdev = 15362.605
  CI (99.9%): [240002.435, 260530.344] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableTakeTest._Benchmark.benchmark_errorAfterLimitReached  thrpt   30  250266.389 ± 10263.955  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 155845.118 ops/s
# Warmup Iteration   2: 323935.728 ops/s
# Warmup Iteration   3: 308789.764 ops/s
# Warmup Iteration   4: 334645.623 ops/s
# Warmup Iteration   5: 323535.857 ops/s
# Warmup Iteration   6: 332861.917 ops/s
# Warmup Iteration   7: 311199.684 ops/s
# Warmup Iteration   8: 331955.825 ops/s
# Warmup Iteration   9: 357326.069 ops/s
# Warmup Iteration  10: 342080.739 ops/s
# Warmup Iteration  11: 341638.110 ops/s
# Warmup Iteration  12: 336248.540 ops/s
# Warmup Iteration  13: 356991.424 ops/s
# Warmup Iteration  14: 341104.855 ops/s
# Warmup Iteration  15: 360089.372 ops/s
# Warmup Iteration  16: 349397.318 ops/s
# Warmup Iteration  17: 355372.580 ops/s
# Warmup Iteration  18: 364619.973 ops/s
# Warmup Iteration  19: 367612.375 ops/s
# Warmup Iteration  20: 376625.106 ops/s
# Warmup Iteration  21: 368791.408 ops/s
# Warmup Iteration  22: 359557.575 ops/s
# Warmup Iteration  23: 373612.039 ops/s
# Warmup Iteration  24: 382207.895 ops/s
# Warmup Iteration  25: 351594.381 ops/s
# Warmup Iteration  26: 377355.157 ops/s
# Warmup Iteration  27: 355028.749 ops/s
# Warmup Iteration  28: 365933.286 ops/s
# Warmup Iteration  29: 387215.881 ops/s
# Warmup Iteration  30: 350999.494 ops/s
Iteration   1: 375398.577 ops/s
Iteration   2: 361264.315 ops/s
Iteration   3: 372820.995 ops/s
Iteration   4: 367876.690 ops/s
Iteration   5: 369341.241 ops/s
Iteration   6: 355654.880 ops/s
Iteration   7: 366246.473 ops/s
Iteration   8: 363756.156 ops/s
Iteration   9: 372384.272 ops/s
Iteration  10: 349282.114 ops/s
Iteration  11: 387337.681 ops/s
Iteration  12: 350556.165 ops/s
Iteration  13: 374779.001 ops/s
Iteration  14: 352172.924 ops/s
Iteration  15: 354323.775 ops/s
Iteration  16: 367593.157 ops/s
Iteration  17: 351556.627 ops/s
Iteration  18: 362270.253 ops/s
Iteration  19: 375633.651 ops/s
Iteration  20: 359903.985 ops/s
Iteration  21: 365395.862 ops/s
Iteration  22: 379102.931 ops/s
Iteration  23: 357646.715 ops/s
Iteration  24: 372959.504 ops/s
Iteration  25: 354285.959 ops/s
Iteration  26: 376402.810 ops/s
Iteration  27: 368386.009 ops/s
Iteration  28: 367600.248 ops/s
Iteration  29: 360742.776 ops/s
Iteration  30: 377184.013 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleEmpty":
  365661.992 ±(99.9%) 6507.246 ops/s [Average]
  (min, avg, max) = (349282.114, 365661.992, 387337.681), stdev = 9739.741
  CI (99.9%): [359154.745, 372169.238] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleEmpty  thrpt   30  365661.992 ± 6507.246  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 166947.979 ops/s
# Warmup Iteration   2: 310184.988 ops/s
# Warmup Iteration   3: 341544.972 ops/s
# Warmup Iteration   4: 350756.420 ops/s
# Warmup Iteration   5: 331225.212 ops/s
# Warmup Iteration   6: 342958.215 ops/s
# Warmup Iteration   7: 350159.596 ops/s
# Warmup Iteration   8: 327208.794 ops/s
# Warmup Iteration   9: 340913.578 ops/s
# Warmup Iteration  10: 336604.887 ops/s
# Warmup Iteration  11: 335335.869 ops/s
# Warmup Iteration  12: 347810.285 ops/s
# Warmup Iteration  13: 343805.486 ops/s
# Warmup Iteration  14: 341055.143 ops/s
# Warmup Iteration  15: 296572.044 ops/s
# Warmup Iteration  16: 348620.497 ops/s
# Warmup Iteration  17: 359353.075 ops/s
# Warmup Iteration  18: 368702.589 ops/s
# Warmup Iteration  19: 357205.517 ops/s
# Warmup Iteration  20: 367131.408 ops/s
# Warmup Iteration  21: 366354.506 ops/s
# Warmup Iteration  22: 371370.713 ops/s
# Warmup Iteration  23: 366560.532 ops/s
# Warmup Iteration  24: 350725.294 ops/s
# Warmup Iteration  25: 370132.238 ops/s
# Warmup Iteration  26: 360090.306 ops/s
# Warmup Iteration  27: 357725.529 ops/s
# Warmup Iteration  28: 361821.497 ops/s
# Warmup Iteration  29: 360389.913 ops/s
# Warmup Iteration  30: 370219.672 ops/s
Iteration   1: 348851.246 ops/s
Iteration   2: 364400.469 ops/s
Iteration   3: 379408.411 ops/s
Iteration   4: 370094.179 ops/s
Iteration   5: 360076.012 ops/s
Iteration   6: 368251.329 ops/s
Iteration   7: 359006.518 ops/s
Iteration   8: 375017.676 ops/s
Iteration   9: 357631.221 ops/s
Iteration  10: 374636.998 ops/s
Iteration  11: 364172.586 ops/s
Iteration  12: 368472.176 ops/s
Iteration  13: 377242.670 ops/s
Iteration  14: 358743.441 ops/s
Iteration  15: 375451.823 ops/s
Iteration  16: 377358.894 ops/s
Iteration  17: 360643.072 ops/s
Iteration  18: 360433.083 ops/s
Iteration  19: 377327.456 ops/s
Iteration  20: 372377.481 ops/s
Iteration  21: 363190.578 ops/s
Iteration  22: 367044.608 ops/s
Iteration  23: 351782.985 ops/s
Iteration  24: 362247.594 ops/s
Iteration  25: 385360.895 ops/s
Iteration  26: 356564.062 ops/s
Iteration  27: 379644.120 ops/s
Iteration  28: 365641.218 ops/s
Iteration  29: 362177.919 ops/s
Iteration  30: 357604.774 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastEmpty":
  366695.183 ±(99.9%) 6064.882 ops/s [Average]
  (min, avg, max) = (348851.246, 366695.183, 385360.895), stdev = 9077.631
  CI (99.9%): [360630.301, 372760.065] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastEmpty  thrpt   30  366695.183 ± 6064.882  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_onErrorFinal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_onErrorFinal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.748 ops/s
# Warmup Iteration   2: 14193.433 ops/s
# Warmup Iteration   3: 52178.317 ops/s
# Warmup Iteration   4: 70441.654 ops/s
# Warmup Iteration   5: 109129.636 ops/s
# Warmup Iteration   6: 179209.150 ops/s
# Warmup Iteration   7: 192403.092 ops/s
# Warmup Iteration   8: 182727.122 ops/s
# Warmup Iteration   9: 182875.736 ops/s
# Warmup Iteration  10: 186880.283 ops/s
# Warmup Iteration  11: 170290.616 ops/s
# Warmup Iteration  12: 192115.839 ops/s
# Warmup Iteration  13: 182674.839 ops/s
# Warmup Iteration  14: 196038.457 ops/s
# Warmup Iteration  15: 185882.317 ops/s
# Warmup Iteration  16: 186748.457 ops/s
# Warmup Iteration  17: 183805.892 ops/s
# Warmup Iteration  18: 192252.351 ops/s
# Warmup Iteration  19: 186204.451 ops/s
# Warmup Iteration  20: 191499.857 ops/s
# Warmup Iteration  21: 186715.906 ops/s
# Warmup Iteration  22: 192970.930 ops/s
# Warmup Iteration  23: 190708.730 ops/s
# Warmup Iteration  24: 178502.359 ops/s
# Warmup Iteration  25: 185302.549 ops/s
# Warmup Iteration  26: 190295.736 ops/s
# Warmup Iteration  27: 188238.518 ops/s
# Warmup Iteration  28: 192968.577 ops/s
# Warmup Iteration  29: 189017.345 ops/s
# Warmup Iteration  30: 198564.245 ops/s
Iteration   1: 183918.443 ops/s
Iteration   2: 186647.195 ops/s
Iteration   3: 194698.717 ops/s
Iteration   4: 185443.626 ops/s
Iteration   5: 185848.498 ops/s
Iteration   6: 192875.243 ops/s
Iteration   7: 183274.918 ops/s
Iteration   8: 194740.999 ops/s
Iteration   9: 186928.471 ops/s
Iteration  10: 189724.850 ops/s
Iteration  11: 197589.368 ops/s
Iteration  12: 186923.723 ops/s
Iteration  13: 186519.413 ops/s
Iteration  14: 192275.812 ops/s
Iteration  15: 189369.573 ops/s
Iteration  16: 185617.860 ops/s
Iteration  17: 192373.119 ops/s
Iteration  18: 183487.168 ops/s
Iteration  19: 193397.582 ops/s
Iteration  20: 183010.009 ops/s
Iteration  21: 153967.303 ops/s
Iteration  22: 191988.543 ops/s
Iteration  23: 187049.898 ops/s
Iteration  24: 182634.347 ops/s
Iteration  25: 189362.861 ops/s
Iteration  26: 186593.017 ops/s
Iteration  27: 182342.277 ops/s
Iteration  28: 191121.207 ops/s
Iteration  29: 193235.262 ops/s
Iteration  30: 184052.326 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_onErrorFinal":
  187233.721 ±(99.9%) 5054.261 ops/s [Average]
  (min, avg, max) = (153967.303, 187233.721, 197589.368), stdev = 7564.981
  CI (99.9%): [182179.460, 192287.982] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ObservableDelayTest._Benchmark.benchmark_onErrorFinal  thrpt   30  187233.721 ± 5054.261  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_disposedInOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_disposedInOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.849 ops/s
# Warmup Iteration   2: 53164.836 ops/s
# Warmup Iteration   3: 198176.491 ops/s
# Warmup Iteration   4: 350083.210 ops/s
# Warmup Iteration   5: 582355.505 ops/s
# Warmup Iteration   6: 859136.418 ops/s
# Warmup Iteration   7: 861490.719 ops/s
# Warmup Iteration   8: 804452.949 ops/s
# Warmup Iteration   9: 826511.389 ops/s
# Warmup Iteration  10: 871060.031 ops/s
# Warmup Iteration  11: 927190.223 ops/s
# Warmup Iteration  12: 901585.150 ops/s
# Warmup Iteration  13: 901472.953 ops/s
# Warmup Iteration  14: 900325.272 ops/s
# Warmup Iteration  15: 889939.814 ops/s
# Warmup Iteration  16: 933025.973 ops/s
# Warmup Iteration  17: 935388.701 ops/s
# Warmup Iteration  18: 864720.977 ops/s
# Warmup Iteration  19: 953185.515 ops/s
# Warmup Iteration  20: 871456.820 ops/s
# Warmup Iteration  21: 914466.688 ops/s
# Warmup Iteration  22: 925552.784 ops/s
# Warmup Iteration  23: 901213.006 ops/s
# Warmup Iteration  24: 877535.948 ops/s
# Warmup Iteration  25: 927368.908 ops/s
# Warmup Iteration  26: 906048.769 ops/s
# Warmup Iteration  27: 930324.868 ops/s
# Warmup Iteration  28: 933596.126 ops/s
# Warmup Iteration  29: 898031.584 ops/s
# Warmup Iteration  30: 928450.772 ops/s
Iteration   1: 893132.936 ops/s
Iteration   2: 890368.194 ops/s
Iteration   3: 943464.877 ops/s
Iteration   4: 888311.485 ops/s
Iteration   5: 947648.147 ops/s
Iteration   6: 875171.228 ops/s
Iteration   7: 900217.695 ops/s
Iteration   8: 897585.636 ops/s
Iteration   9: 908886.333 ops/s
Iteration  10: 878839.009 ops/s
Iteration  11: 905789.499 ops/s
Iteration  12: 922092.243 ops/s
Iteration  13: 877218.758 ops/s
Iteration  14: 931001.647 ops/s
Iteration  15: 914974.723 ops/s
Iteration  16: 859593.592 ops/s
Iteration  17: 934915.184 ops/s
Iteration  18: 878883.316 ops/s
Iteration  19: 883162.258 ops/s
Iteration  20: 912023.052 ops/s
Iteration  21: 880026.501 ops/s
Iteration  22: 929136.130 ops/s
Iteration  23: 870942.066 ops/s
Iteration  24: 942183.524 ops/s
Iteration  25: 888089.154 ops/s
Iteration  26: 873716.468 ops/s
Iteration  27: 936767.164 ops/s
Iteration  28: 949959.786 ops/s
Iteration  29: 943698.401 ops/s
Iteration  30: 920755.692 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_disposedInOnComplete":
  905951.823 ±(99.9%) 18135.050 ops/s [Average]
  (min, avg, max) = (859593.592, 905951.823, 949959.786), stdev = 27143.691
  CI (99.9%): [887816.774, 924086.873] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableDebounceTest._Benchmark.benchmark_disposedInOnComplete  thrpt   30  905951.823 ± 18135.050  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 799582.918 ops/s
# Warmup Iteration   2: 3250647.646 ops/s
# Warmup Iteration   3: 5153348.903 ops/s
# Warmup Iteration   4: 5219848.294 ops/s
# Warmup Iteration   5: 5410686.113 ops/s
# Warmup Iteration   6: 4828829.932 ops/s
# Warmup Iteration   7: 5311406.013 ops/s
# Warmup Iteration   8: 5067307.166 ops/s
# Warmup Iteration   9: 5463207.262 ops/s
# Warmup Iteration  10: 5092247.106 ops/s
# Warmup Iteration  11: 5074943.265 ops/s
# Warmup Iteration  12: 5402922.379 ops/s
# Warmup Iteration  13: 5015135.400 ops/s
# Warmup Iteration  14: 5301447.572 ops/s
# Warmup Iteration  15: 5026661.408 ops/s
# Warmup Iteration  16: 5132754.656 ops/s
# Warmup Iteration  17: 5485898.657 ops/s
# Warmup Iteration  18: 5055289.106 ops/s
# Warmup Iteration  19: 5321367.738 ops/s
# Warmup Iteration  20: 5094142.709 ops/s
# Warmup Iteration  21: 5281288.006 ops/s
# Warmup Iteration  22: 5315054.518 ops/s
# Warmup Iteration  23: 5133413.978 ops/s
# Warmup Iteration  24: 5145216.473 ops/s
# Warmup Iteration  25: 5291706.212 ops/s
# Warmup Iteration  26: 5104170.202 ops/s
# Warmup Iteration  27: 5224408.265 ops/s
# Warmup Iteration  28: 5330862.752 ops/s
# Warmup Iteration  29: 5097990.113 ops/s
# Warmup Iteration  30: 5335688.003 ops/s
Iteration   1: 4972688.330 ops/s
Iteration   2: 5174808.906 ops/s
Iteration   3: 5410050.408 ops/s
Iteration   4: 5121331.769 ops/s
Iteration   5: 5265581.369 ops/s
Iteration   6: 5154880.503 ops/s
Iteration   7: 5308369.234 ops/s
Iteration   8: 5237399.595 ops/s
Iteration   9: 4986670.028 ops/s
Iteration  10: 5219178.627 ops/s
Iteration  11: 5144754.356 ops/s
Iteration  12: 5323669.202 ops/s
Iteration  13: 5225396.340 ops/s
Iteration  14: 5193961.071 ops/s
Iteration  15: 3647737.277 ops/s
Iteration  16: 5111115.918 ops/s
Iteration  17: 5324934.975 ops/s
Iteration  18: 5178111.569 ops/s
Iteration  19: 5149371.388 ops/s
Iteration  20: 5119808.919 ops/s
Iteration  21: 5220385.095 ops/s
Iteration  22: 5371438.788 ops/s
Iteration  23: 5447421.904 ops/s
Iteration  24: 5170517.156 ops/s
Iteration  25: 5368875.837 ops/s
Iteration  26: 5195366.836 ops/s
Iteration  27: 5241685.721 ops/s
Iteration  28: 5421829.477 ops/s
Iteration  29: 5382629.749 ops/s
Iteration  30: 5335719.587 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_empty":
  5180856.331 ±(99.9%) 209139.918 ops/s [Average]
  (min, avg, max) = (3647737.277, 5180856.331, 5447421.904), stdev = 313030.808
  CI (99.9%): [4971716.413, 5389996.250] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score        Error  Units
ObservableGroupByTest._Benchmark.benchmark_empty  thrpt   30  5180856.331 ± 209139.918  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorNoElementObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorNoElementObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.722 ops/s
# Warmup Iteration   2: 23146.550 ops/s
# Warmup Iteration   3: 39587.032 ops/s
# Warmup Iteration   4: 70301.632 ops/s
# Warmup Iteration   5: 66831.662 ops/s
# Warmup Iteration   6: 184451.746 ops/s
# Warmup Iteration   7: 201436.497 ops/s
# Warmup Iteration   8: 214664.577 ops/s
# Warmup Iteration   9: 213422.149 ops/s
# Warmup Iteration  10: 211469.195 ops/s
# Warmup Iteration  11: 199482.128 ops/s
# Warmup Iteration  12: 199804.785 ops/s
# Warmup Iteration  13: 211159.870 ops/s
# Warmup Iteration  14: 202729.368 ops/s
# Warmup Iteration  15: 207233.892 ops/s
# Warmup Iteration  16: 201589.497 ops/s
# Warmup Iteration  17: 207974.200 ops/s
# Warmup Iteration  18: 215248.935 ops/s
# Warmup Iteration  19: 202344.916 ops/s
# Warmup Iteration  20: 203880.250 ops/s
# Warmup Iteration  21: 208711.796 ops/s
# Warmup Iteration  22: 202568.785 ops/s
# Warmup Iteration  23: 209908.290 ops/s
# Warmup Iteration  24: 209517.468 ops/s
# Warmup Iteration  25: 199949.905 ops/s
# Warmup Iteration  26: 206955.329 ops/s
# Warmup Iteration  27: 210428.805 ops/s
# Warmup Iteration  28: 196813.024 ops/s
# Warmup Iteration  29: 211136.298 ops/s
# Warmup Iteration  30: 211223.716 ops/s
Iteration   1: 199767.704 ops/s
Iteration   2: 211096.220 ops/s
Iteration   3: 206953.274 ops/s
Iteration   4: 202358.511 ops/s
Iteration   5: 209402.971 ops/s
Iteration   6: 202262.066 ops/s
Iteration   7: 209317.887 ops/s
Iteration   8: 203419.302 ops/s
Iteration   9: 204398.852 ops/s
Iteration  10: 213190.210 ops/s
Iteration  11: 205030.071 ops/s
Iteration  12: 211370.141 ops/s
Iteration  13: 203254.061 ops/s
Iteration  14: 208202.405 ops/s
Iteration  15: 203732.770 ops/s
Iteration  16: 209686.616 ops/s
Iteration  17: 197858.351 ops/s
Iteration  18: 207976.071 ops/s
Iteration  19: 202449.970 ops/s
Iteration  20: 204571.446 ops/s
Iteration  21: 211856.555 ops/s
Iteration  22: 193286.281 ops/s
Iteration  23: 207932.420 ops/s
Iteration  24: 202383.844 ops/s
Iteration  25: 207885.755 ops/s
Iteration  26: 201336.541 ops/s
Iteration  27: 213494.329 ops/s
Iteration  28: 215150.701 ops/s
Iteration  29: 199146.819 ops/s
Iteration  30: 212331.786 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFirstTest._Benchmark.benchmark_firstOrErrorNoElementObservable":
  206036.798 ±(99.9%) 3480.852 ops/s [Average]
  (min, avg, max) = (193286.281, 206036.798, 215150.701), stdev = 5209.976
  CI (99.9%): [202555.945, 209517.650] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableFirstTest._Benchmark.benchmark_firstOrErrorNoElementObservable  thrpt   30  206036.798 ± 3480.852  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMaterializeTest._Benchmark.benchmark_withCompletionCausingError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMaterializeTest._Benchmark.benchmark_withCompletionCausingError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180796.099 ops/s
# Warmup Iteration   2: 549608.594 ops/s
# Warmup Iteration   3: 641690.304 ops/s
# Warmup Iteration   4: 647199.872 ops/s
# Warmup Iteration   5: 600501.974 ops/s
# Warmup Iteration   6: 675618.373 ops/s
# Warmup Iteration   7: 692249.709 ops/s
# Warmup Iteration   8: 711516.781 ops/s
# Warmup Iteration   9: 704991.141 ops/s
# Warmup Iteration  10: 679333.031 ops/s
# Warmup Iteration  11: 697644.141 ops/s
# Warmup Iteration  12: 680440.682 ops/s
# Warmup Iteration  13: 693590.004 ops/s
# Warmup Iteration  14: 714969.034 ops/s
# Warmup Iteration  15: 683354.549 ops/s
# Warmup Iteration  16: 699303.884 ops/s
# Warmup Iteration  17: 747286.892 ops/s
# Warmup Iteration  18: 708417.640 ops/s
# Warmup Iteration  19: 753026.235 ops/s
# Warmup Iteration  20: 720046.871 ops/s
# Warmup Iteration  21: 728255.905 ops/s
# Warmup Iteration  22: 725207.191 ops/s
# Warmup Iteration  23: 727605.565 ops/s
# Warmup Iteration  24: 712267.743 ops/s
# Warmup Iteration  25: 745619.757 ops/s
# Warmup Iteration  26: 680281.962 ops/s
# Warmup Iteration  27: 744776.433 ops/s
# Warmup Iteration  28: 727865.134 ops/s
# Warmup Iteration  29: 726445.364 ops/s
# Warmup Iteration  30: 735247.797 ops/s
Iteration   1: 725231.937 ops/s
Iteration   2: 732182.754 ops/s
Iteration   3: 732950.428 ops/s
Iteration   4: 741428.557 ops/s
Iteration   5: 719538.319 ops/s
Iteration   6: 717200.064 ops/s
Iteration   7: 733081.643 ops/s
Iteration   8: 701823.484 ops/s
Iteration   9: 609471.256 ops/s
Iteration  10: 725849.822 ops/s
Iteration  11: 718254.195 ops/s
Iteration  12: 744632.139 ops/s
Iteration  13: 699707.263 ops/s
Iteration  14: 734585.456 ops/s
Iteration  15: 725241.832 ops/s
Iteration  16: 733719.373 ops/s
Iteration  17: 718799.033 ops/s
Iteration  18: 746488.369 ops/s
Iteration  19: 708223.244 ops/s
Iteration  20: 707528.849 ops/s
Iteration  21: 759990.332 ops/s
Iteration  22: 722957.182 ops/s
Iteration  23: 764819.388 ops/s
Iteration  24: 708003.642 ops/s
Iteration  25: 729869.472 ops/s
Iteration  26: 763091.967 ops/s
Iteration  27: 715227.874 ops/s
Iteration  28: 752142.050 ops/s
Iteration  29: 723648.332 ops/s
Iteration  30: 739581.727 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMaterializeTest._Benchmark.benchmark_withCompletionCausingError":
  725175.666 ±(99.9%) 18557.801 ops/s [Average]
  (min, avg, max) = (609471.256, 725175.666, 764819.388), stdev = 27776.445
  CI (99.9%): [706617.865, 743733.467] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableMaterializeTest._Benchmark.benchmark_withCompletionCausingError  thrpt   30  725175.666 ± 18557.801  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_nextCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_nextCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106314.321 ops/s
# Warmup Iteration   2: 511329.739 ops/s
# Warmup Iteration   3: 542669.645 ops/s
# Warmup Iteration   4: 499162.461 ops/s
# Warmup Iteration   5: 564297.381 ops/s
# Warmup Iteration   6: 591166.494 ops/s
# Warmup Iteration   7: 578675.949 ops/s
# Warmup Iteration   8: 546855.880 ops/s
# Warmup Iteration   9: 598934.506 ops/s
# Warmup Iteration  10: 545116.928 ops/s
# Warmup Iteration  11: 581896.543 ops/s
# Warmup Iteration  12: 570341.488 ops/s
# Warmup Iteration  13: 584523.006 ops/s
# Warmup Iteration  14: 539704.178 ops/s
# Warmup Iteration  15: 521399.064 ops/s
# Warmup Iteration  16: 576860.251 ops/s
# Warmup Iteration  17: 592613.577 ops/s
# Warmup Iteration  18: 595650.124 ops/s
# Warmup Iteration  19: 598901.792 ops/s
# Warmup Iteration  20: 604892.979 ops/s
# Warmup Iteration  21: 620807.639 ops/s
# Warmup Iteration  22: 586125.745 ops/s
# Warmup Iteration  23: 601442.392 ops/s
# Warmup Iteration  24: 617730.749 ops/s
# Warmup Iteration  25: 578579.325 ops/s
# Warmup Iteration  26: 609848.501 ops/s
# Warmup Iteration  27: 604686.011 ops/s
# Warmup Iteration  28: 608962.229 ops/s
# Warmup Iteration  29: 594056.783 ops/s
# Warmup Iteration  30: 595747.463 ops/s
Iteration   1: 616476.406 ops/s
Iteration   2: 601605.319 ops/s
Iteration   3: 613276.881 ops/s
Iteration   4: 618380.714 ops/s
Iteration   5: 603252.270 ops/s
Iteration   6: 608084.581 ops/s
Iteration   7: 594427.414 ops/s
Iteration   8: 615444.437 ops/s
Iteration   9: 596629.659 ops/s
Iteration  10: 603145.478 ops/s
Iteration  11: 592143.921 ops/s
Iteration  12: 599361.321 ops/s
Iteration  13: 625908.082 ops/s
Iteration  14: 597253.240 ops/s
Iteration  15: 585346.284 ops/s
Iteration  16: 606781.755 ops/s
Iteration  17: 611227.921 ops/s
Iteration  18: 589444.614 ops/s
Iteration  19: 624396.308 ops/s
Iteration  20: 591727.728 ops/s
Iteration  21: 602791.740 ops/s
Iteration  22: 620581.023 ops/s
Iteration  23: 579840.202 ops/s
Iteration  24: 611327.397 ops/s
Iteration  25: 584055.953 ops/s
Iteration  26: 596775.808 ops/s
Iteration  27: 619155.945 ops/s
Iteration  28: 590155.639 ops/s
Iteration  29: 617030.955 ops/s
Iteration  30: 630396.058 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_nextCrash":
  604880.835 ±(99.9%) 8990.708 ops/s [Average]
  (min, avg, max) = (579840.202, 604880.835, 630396.058), stdev = 13456.870
  CI (99.9%): [595890.127, 613871.543] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_nextCrash  thrpt   30  604880.835 ± 8990.708  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 110531.159 ops/s
# Warmup Iteration   2: 490660.546 ops/s
# Warmup Iteration   3: 538130.095 ops/s
# Warmup Iteration   4: 503954.577 ops/s
# Warmup Iteration   5: 549826.360 ops/s
# Warmup Iteration   6: 495925.641 ops/s
# Warmup Iteration   7: 548892.399 ops/s
# Warmup Iteration   8: 582061.073 ops/s
# Warmup Iteration   9: 575085.439 ops/s
# Warmup Iteration  10: 554018.110 ops/s
# Warmup Iteration  11: 558399.945 ops/s
# Warmup Iteration  12: 589625.430 ops/s
# Warmup Iteration  13: 555283.485 ops/s
# Warmup Iteration  14: 586797.855 ops/s
# Warmup Iteration  15: 560549.599 ops/s
# Warmup Iteration  16: 572039.629 ops/s
# Warmup Iteration  17: 605623.604 ops/s
# Warmup Iteration  18: 566197.207 ops/s
# Warmup Iteration  19: 598299.168 ops/s
# Warmup Iteration  20: 594818.507 ops/s
# Warmup Iteration  21: 616689.339 ops/s
# Warmup Iteration  22: 565338.361 ops/s
# Warmup Iteration  23: 611140.135 ops/s
# Warmup Iteration  24: 601609.969 ops/s
# Warmup Iteration  25: 591672.339 ops/s
# Warmup Iteration  26: 589531.204 ops/s
# Warmup Iteration  27: 601267.476 ops/s
# Warmup Iteration  28: 586782.268 ops/s
# Warmup Iteration  29: 608610.728 ops/s
# Warmup Iteration  30: 588819.543 ops/s
Iteration   1: 581918.908 ops/s
Iteration   2: 614021.087 ops/s
Iteration   3: 609184.203 ops/s
Iteration   4: 477212.182 ops/s
Iteration   5: 598912.368 ops/s
Iteration   6: 589137.278 ops/s
Iteration   7: 590104.317 ops/s
Iteration   8: 611497.134 ops/s
Iteration   9: 577693.797 ops/s
Iteration  10: 605995.864 ops/s
Iteration  11: 585911.017 ops/s
Iteration  12: 589723.949 ops/s
Iteration  13: 616077.931 ops/s
Iteration  14: 601199.933 ops/s
Iteration  15: 558061.869 ops/s
Iteration  16: 599603.036 ops/s
Iteration  17: 599858.628 ops/s
Iteration  18: 576038.226 ops/s
Iteration  19: 591397.236 ops/s
Iteration  20: 608203.765 ops/s
Iteration  21: 623537.348 ops/s
Iteration  22: 588705.255 ops/s
Iteration  23: 580047.726 ops/s
Iteration  24: 611644.872 ops/s
Iteration  25: 583080.643 ops/s
Iteration  26: 597138.971 ops/s
Iteration  27: 585664.136 ops/s
Iteration  28: 610239.517 ops/s
Iteration  29: 608776.151 ops/s
Iteration  30: 585123.171 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash2":
  591857.017 ±(99.9%) 17428.967 ops/s [Average]
  (min, avg, max) = (477212.182, 591857.017, 623537.348), stdev = 26086.860
  CI (99.9%): [574428.050, 609285.985] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash2  thrpt   30  591857.017 ± 17428.967  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_iteratorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_iteratorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182161.809 ops/s
# Warmup Iteration   2: 483300.903 ops/s
# Warmup Iteration   3: 556213.187 ops/s
# Warmup Iteration   4: 479207.345 ops/s
# Warmup Iteration   5: 573165.804 ops/s
# Warmup Iteration   6: 583597.501 ops/s
# Warmup Iteration   7: 566775.887 ops/s
# Warmup Iteration   8: 580771.279 ops/s
# Warmup Iteration   9: 574363.636 ops/s
# Warmup Iteration  10: 572211.877 ops/s
# Warmup Iteration  11: 574430.785 ops/s
# Warmup Iteration  12: 578687.732 ops/s
# Warmup Iteration  13: 573508.516 ops/s
# Warmup Iteration  14: 602003.831 ops/s
# Warmup Iteration  15: 566568.861 ops/s
# Warmup Iteration  16: 602136.116 ops/s
# Warmup Iteration  17: 593982.236 ops/s
# Warmup Iteration  18: 601368.573 ops/s
# Warmup Iteration  19: 601103.442 ops/s
# Warmup Iteration  20: 624363.484 ops/s
# Warmup Iteration  21: 587671.021 ops/s
# Warmup Iteration  22: 596652.797 ops/s
# Warmup Iteration  23: 620191.106 ops/s
# Warmup Iteration  24: 598399.425 ops/s
# Warmup Iteration  25: 590310.414 ops/s
# Warmup Iteration  26: 604542.070 ops/s
# Warmup Iteration  27: 606704.681 ops/s
# Warmup Iteration  28: 588679.896 ops/s
# Warmup Iteration  29: 608107.329 ops/s
# Warmup Iteration  30: 582935.300 ops/s
Iteration   1: 595295.549 ops/s
Iteration   2: 615834.874 ops/s
Iteration   3: 588384.731 ops/s
Iteration   4: 601859.411 ops/s
Iteration   5: 598188.235 ops/s
Iteration   6: 642814.327 ops/s
Iteration   7: 589712.296 ops/s
Iteration   8: 617003.667 ops/s
Iteration   9: 602428.787 ops/s
Iteration  10: 580046.472 ops/s
Iteration  11: 621932.607 ops/s
Iteration  12: 602318.066 ops/s
Iteration  13: 601870.931 ops/s
Iteration  14: 629217.474 ops/s
Iteration  15: 577287.402 ops/s
Iteration  16: 600012.327 ops/s
Iteration  17: 631591.565 ops/s
Iteration  18: 584265.924 ops/s
Iteration  19: 615879.345 ops/s
Iteration  20: 596896.436 ops/s
Iteration  21: 613993.507 ops/s
Iteration  22: 596835.141 ops/s
Iteration  23: 616918.278 ops/s
Iteration  24: 598878.206 ops/s
Iteration  25: 585456.206 ops/s
Iteration  26: 622696.459 ops/s
Iteration  27: 586339.915 ops/s
Iteration  28: 607525.765 ops/s
Iteration  29: 595398.243 ops/s
Iteration  30: 608032.376 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_iteratorCrash":
  604163.817 ±(99.9%) 10702.895 ops/s [Average]
  (min, avg, max) = (577287.402, 604163.817, 642814.327), stdev = 16019.591
  CI (99.9%): [593460.922, 614866.712] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_iteratorCrash  thrpt   30  604163.817 ± 10702.895  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157114.974 ops/s
# Warmup Iteration   2: 589256.490 ops/s
# Warmup Iteration   3: 687847.688 ops/s
# Warmup Iteration   4: 664612.933 ops/s
# Warmup Iteration   5: 632743.873 ops/s
# Warmup Iteration   6: 701166.736 ops/s
# Warmup Iteration   7: 746651.454 ops/s
# Warmup Iteration   8: 717196.574 ops/s
# Warmup Iteration   9: 730675.248 ops/s
# Warmup Iteration  10: 750102.031 ops/s
# Warmup Iteration  11: 726439.503 ops/s
# Warmup Iteration  12: 706556.951 ops/s
# Warmup Iteration  13: 737589.436 ops/s
# Warmup Iteration  14: 737060.983 ops/s
# Warmup Iteration  15: 740557.199 ops/s
# Warmup Iteration  16: 716443.470 ops/s
# Warmup Iteration  17: 762718.713 ops/s
# Warmup Iteration  18: 812832.623 ops/s
# Warmup Iteration  19: 743498.383 ops/s
# Warmup Iteration  20: 770603.566 ops/s
# Warmup Iteration  21: 791625.407 ops/s
# Warmup Iteration  22: 773170.476 ops/s
# Warmup Iteration  23: 751300.543 ops/s
# Warmup Iteration  24: 769605.081 ops/s
# Warmup Iteration  25: 808650.334 ops/s
# Warmup Iteration  26: 765949.055 ops/s
# Warmup Iteration  27: 762241.973 ops/s
# Warmup Iteration  28: 720219.028 ops/s
# Warmup Iteration  29: 676379.224 ops/s
# Warmup Iteration  30: 772702.709 ops/s
Iteration   1: 795890.031 ops/s
Iteration   2: 733455.079 ops/s
Iteration   3: 793984.304 ops/s
Iteration   4: 761051.722 ops/s
Iteration   5: 777157.996 ops/s
Iteration   6: 758714.850 ops/s
Iteration   7: 775970.167 ops/s
Iteration   8: 780234.581 ops/s
Iteration   9: 771648.198 ops/s
Iteration  10: 790183.044 ops/s
Iteration  11: 757697.540 ops/s
Iteration  12: 792651.790 ops/s
Iteration  13: 758876.470 ops/s
Iteration  14: 779110.107 ops/s
Iteration  15: 785120.306 ops/s
Iteration  16: 774901.011 ops/s
Iteration  17: 777622.230 ops/s
Iteration  18: 778684.948 ops/s
Iteration  19: 749343.480 ops/s
Iteration  20: 782800.901 ops/s
Iteration  21: 762785.707 ops/s
Iteration  22: 780145.892 ops/s
Iteration  23: 800211.172 ops/s
Iteration  24: 762337.797 ops/s
Iteration  25: 763589.220 ops/s
Iteration  26: 816825.867 ops/s
Iteration  27: 748548.251 ops/s
Iteration  28: 765992.125 ops/s
Iteration  29: 785834.397 ops/s
Iteration  30: 764296.541 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_error":
  774188.858 ±(99.9%) 11659.099 ops/s [Average]
  (min, avg, max) = (733455.079, 774188.858, 816825.867), stdev = 17450.792
  CI (99.9%): [762529.758, 785847.957] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_error  thrpt   30  774188.858 ± 11659.099  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 119969.309 ops/s
# Warmup Iteration   2: 495876.902 ops/s
# Warmup Iteration   3: 535086.947 ops/s
# Warmup Iteration   4: 573820.097 ops/s
# Warmup Iteration   5: 582965.402 ops/s
# Warmup Iteration   6: 579189.195 ops/s
# Warmup Iteration   7: 564865.047 ops/s
# Warmup Iteration   8: 597960.622 ops/s
# Warmup Iteration   9: 575862.500 ops/s
# Warmup Iteration  10: 557406.571 ops/s
# Warmup Iteration  11: 586372.485 ops/s
# Warmup Iteration  12: 572459.063 ops/s
# Warmup Iteration  13: 561496.661 ops/s
# Warmup Iteration  14: 598118.944 ops/s
# Warmup Iteration  15: 582315.559 ops/s
# Warmup Iteration  16: 581436.436 ops/s
# Warmup Iteration  17: 623107.660 ops/s
# Warmup Iteration  18: 582517.035 ops/s
# Warmup Iteration  19: 620646.699 ops/s
# Warmup Iteration  20: 569320.520 ops/s
# Warmup Iteration  21: 611816.958 ops/s
# Warmup Iteration  22: 569320.339 ops/s
# Warmup Iteration  23: 614815.081 ops/s
# Warmup Iteration  24: 604952.337 ops/s
# Warmup Iteration  25: 629874.486 ops/s
# Warmup Iteration  26: 608728.968 ops/s
# Warmup Iteration  27: 593749.721 ops/s
# Warmup Iteration  28: 624667.489 ops/s
# Warmup Iteration  29: 602538.093 ops/s
# Warmup Iteration  30: 630643.475 ops/s
Iteration   1: 605464.571 ops/s
Iteration   2: 585578.369 ops/s
Iteration   3: 638770.689 ops/s
Iteration   4: 593976.897 ops/s
Iteration   5: 616378.452 ops/s
Iteration   6: 597960.029 ops/s
Iteration   7: 608974.900 ops/s
Iteration   8: 609883.694 ops/s
Iteration   9: 610711.985 ops/s
Iteration  10: 628523.740 ops/s
Iteration  11: 591604.004 ops/s
Iteration  12: 627306.129 ops/s
Iteration  13: 590070.470 ops/s
Iteration  14: 627788.652 ops/s
Iteration  15: 607496.167 ops/s
Iteration  16: 601469.769 ops/s
Iteration  17: 609876.354 ops/s
Iteration  18: 629312.139 ops/s
Iteration  19: 585310.311 ops/s
Iteration  20: 611374.872 ops/s
Iteration  21: 627569.491 ops/s
Iteration  22: 601766.554 ops/s
Iteration  23: 621356.332 ops/s
Iteration  24: 609178.286 ops/s
Iteration  25: 621711.285 ops/s
Iteration  26: 593632.429 ops/s
Iteration  27: 629245.268 ops/s
Iteration  28: 597670.931 ops/s
Iteration  29: 617766.668 ops/s
Iteration  30: 614774.261 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash":
  610416.790 ±(99.9%) 9736.016 ops/s [Average]
  (min, avg, max) = (585310.311, 610416.790, 638770.689), stdev = 14572.411
  CI (99.9%): [600680.774, 620152.806] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_hasNextCrash  thrpt   30  610416.790 ± 9736.016  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4082578.829 ops/s
# Warmup Iteration   2: 9374705.710 ops/s
# Warmup Iteration   3: 12878508.516 ops/s
# Warmup Iteration   4: 13277406.787 ops/s
# Warmup Iteration   5: 12821461.134 ops/s
# Warmup Iteration   6: 13051336.091 ops/s
# Warmup Iteration   7: 13580997.081 ops/s
# Warmup Iteration   8: 12917260.579 ops/s
# Warmup Iteration   9: 13529625.875 ops/s
# Warmup Iteration  10: 13452031.822 ops/s
# Warmup Iteration  11: 12767532.461 ops/s
# Warmup Iteration  12: 13561962.937 ops/s
# Warmup Iteration  13: 12614408.698 ops/s
# Warmup Iteration  14: 12896625.213 ops/s
# Warmup Iteration  15: 13441603.293 ops/s
# Warmup Iteration  16: 12877170.699 ops/s
# Warmup Iteration  17: 13456147.204 ops/s
# Warmup Iteration  18: 13351999.966 ops/s
# Warmup Iteration  19: 12852459.469 ops/s
# Warmup Iteration  20: 13312498.245 ops/s
# Warmup Iteration  21: 12925421.582 ops/s
# Warmup Iteration  22: 13168191.880 ops/s
# Warmup Iteration  23: 10498108.825 ops/s
# Warmup Iteration  24: 13083477.287 ops/s
# Warmup Iteration  25: 13425149.667 ops/s
# Warmup Iteration  26: 12741867.733 ops/s
# Warmup Iteration  27: 13402938.697 ops/s
# Warmup Iteration  28: 12850381.933 ops/s
# Warmup Iteration  29: 13491478.032 ops/s
# Warmup Iteration  30: 13413705.823 ops/s
Iteration   1: 12923294.591 ops/s
Iteration   2: 13574890.737 ops/s
Iteration   3: 13689853.112 ops/s
Iteration   4: 12786430.532 ops/s
Iteration   5: 13079790.247 ops/s
Iteration   6: 13244129.800 ops/s
Iteration   7: 13029828.500 ops/s
Iteration   8: 13275562.919 ops/s
Iteration   9: 13074065.234 ops/s
Iteration  10: 13338383.436 ops/s
Iteration  11: 13083547.770 ops/s
Iteration  12: 13623778.649 ops/s
Iteration  13: 12848417.884 ops/s
Iteration  14: 13012738.434 ops/s
Iteration  15: 12910708.819 ops/s
Iteration  16: 13500943.173 ops/s
Iteration  17: 12925942.772 ops/s
Iteration  18: 12905197.679 ops/s
Iteration  19: 13129414.331 ops/s
Iteration  20: 13120306.783 ops/s
Iteration  21: 13662933.246 ops/s
Iteration  22: 13207166.225 ops/s
Iteration  23: 13132688.325 ops/s
Iteration  24: 13105963.291 ops/s
Iteration  25: 13273369.385 ops/s
Iteration  26: 12848357.428 ops/s
Iteration  27: 13977145.510 ops/s
Iteration  28: 13518518.642 ops/s
Iteration  29: 13114425.305 ops/s
Iteration  30: 12750083.490 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleMapOptionalTest._Benchmark.benchmark_dispose":
  13188929.208 ±(99.9%) 203174.362 ops/s [Average]
  (min, avg, max) = (12750083.490, 13188929.208, 13977145.510), stdev = 304101.843
  CI (99.9%): [12985754.847, 13392103.570] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
SingleMapOptionalTest._Benchmark.benchmark_dispose  thrpt   30  13188929.208 ± 203174.362  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 207874.055 ops/s
# Warmup Iteration   2: 518407.125 ops/s
# Warmup Iteration   3: 585930.288 ops/s
# Warmup Iteration   4: 565658.172 ops/s
# Warmup Iteration   5: 604339.339 ops/s
# Warmup Iteration   6: 538897.973 ops/s
# Warmup Iteration   7: 585517.777 ops/s
# Warmup Iteration   8: 532539.557 ops/s
# Warmup Iteration   9: 610414.734 ops/s
# Warmup Iteration  10: 582111.041 ops/s
# Warmup Iteration  11: 544007.811 ops/s
# Warmup Iteration  12: 596666.564 ops/s
# Warmup Iteration  13: 595780.465 ops/s
# Warmup Iteration  14: 611758.369 ops/s
# Warmup Iteration  15: 582615.720 ops/s
# Warmup Iteration  16: 603678.818 ops/s
# Warmup Iteration  17: 630738.482 ops/s
# Warmup Iteration  18: 618253.328 ops/s
# Warmup Iteration  19: 672342.706 ops/s
# Warmup Iteration  20: 615972.801 ops/s
# Warmup Iteration  21: 646215.816 ops/s
# Warmup Iteration  22: 652162.879 ops/s
# Warmup Iteration  23: 593911.447 ops/s
# Warmup Iteration  24: 638308.750 ops/s
# Warmup Iteration  25: 620293.210 ops/s
# Warmup Iteration  26: 641488.995 ops/s
# Warmup Iteration  27: 651026.264 ops/s
# Warmup Iteration  28: 619781.163 ops/s
# Warmup Iteration  29: 649492.970 ops/s
# Warmup Iteration  30: 619466.268 ops/s
Iteration   1: 643694.036 ops/s
Iteration   2: 631975.491 ops/s
Iteration   3: 641160.773 ops/s
Iteration   4: 622748.759 ops/s
Iteration   5: 651228.731 ops/s
Iteration   6: 628387.623 ops/s
Iteration   7: 611582.278 ops/s
Iteration   8: 642696.340 ops/s
Iteration   9: 620562.177 ops/s
Iteration  10: 661541.654 ops/s
Iteration  11: 619534.653 ops/s
Iteration  12: 646593.688 ops/s
Iteration  13: 624437.337 ops/s
Iteration  14: 626049.982 ops/s
Iteration  15: 639617.471 ops/s
Iteration  16: 609210.508 ops/s
Iteration  17: 671607.085 ops/s
Iteration  18: 618399.150 ops/s
Iteration  19: 621200.643 ops/s
Iteration  20: 644305.290 ops/s
Iteration  21: 626187.751 ops/s
Iteration  22: 614605.580 ops/s
Iteration  23: 642194.447 ops/s
Iteration  24: 627004.081 ops/s
Iteration  25: 629389.551 ops/s
Iteration  26: 651179.682 ops/s
Iteration  27: 614840.936 ops/s
Iteration  28: 653478.162 ops/s
Iteration  29: 651009.857 ops/s
Iteration  30: 613056.789 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlattenTest._Benchmark.benchmark_mapperThrows":
  633316.017 ±(99.9%) 10778.631 ops/s [Average]
  (min, avg, max) = (609210.508, 633316.017, 671607.085), stdev = 16132.949
  CI (99.9%): [622537.386, 644094.648] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
MaybeFlattenTest._Benchmark.benchmark_mapperThrows  thrpt   30  633316.017 ± 10778.631  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 119288.148 ops/s
# Warmup Iteration   2: 428736.446 ops/s
# Warmup Iteration   3: 470024.372 ops/s
# Warmup Iteration   4: 447069.839 ops/s
# Warmup Iteration   5: 483458.490 ops/s
# Warmup Iteration   6: 497737.335 ops/s
# Warmup Iteration   7: 465540.285 ops/s
# Warmup Iteration   8: 501376.615 ops/s
# Warmup Iteration   9: 506276.766 ops/s
# Warmup Iteration  10: 499710.278 ops/s
# Warmup Iteration  11: 501050.078 ops/s
# Warmup Iteration  12: 498900.799 ops/s
# Warmup Iteration  13: 526857.897 ops/s
# Warmup Iteration  14: 483054.702 ops/s
# Warmup Iteration  15: 508783.576 ops/s
# Warmup Iteration  16: 497358.865 ops/s
# Warmup Iteration  17: 528859.317 ops/s
# Warmup Iteration  18: 375615.156 ops/s
# Warmup Iteration  19: 542266.573 ops/s
# Warmup Iteration  20: 507433.900 ops/s
# Warmup Iteration  21: 547676.469 ops/s
# Warmup Iteration  22: 520806.658 ops/s
# Warmup Iteration  23: 528800.872 ops/s
# Warmup Iteration  24: 518490.465 ops/s
# Warmup Iteration  25: 552506.324 ops/s
# Warmup Iteration  26: 520934.894 ops/s
# Warmup Iteration  27: 542794.769 ops/s
# Warmup Iteration  28: 520339.488 ops/s
# Warmup Iteration  29: 526409.188 ops/s
# Warmup Iteration  30: 537462.828 ops/s
Iteration   1: 523250.781 ops/s
Iteration   2: 535725.344 ops/s
Iteration   3: 521682.046 ops/s
Iteration   4: 534594.581 ops/s
Iteration   5: 518114.321 ops/s
Iteration   6: 521784.194 ops/s
Iteration   7: 546649.054 ops/s
Iteration   8: 525798.827 ops/s
Iteration   9: 538569.164 ops/s
Iteration  10: 523617.159 ops/s
Iteration  11: 527633.716 ops/s
Iteration  12: 541457.194 ops/s
Iteration  13: 518640.209 ops/s
Iteration  14: 541303.510 ops/s
Iteration  15: 540055.063 ops/s
Iteration  16: 520088.749 ops/s
Iteration  17: 545227.634 ops/s
Iteration  18: 513520.037 ops/s
Iteration  19: 529959.866 ops/s
Iteration  20: 544394.179 ops/s
Iteration  21: 512485.216 ops/s
Iteration  22: 538630.282 ops/s
Iteration  23: 523049.869 ops/s
Iteration  24: 530167.079 ops/s
Iteration  25: 538079.855 ops/s
Iteration  26: 529802.663 ops/s
Iteration  27: 543184.538 ops/s
Iteration  28: 526898.509 ops/s
Iteration  29: 515169.554 ops/s
Iteration  30: 545393.697 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapIterableObservableTest._Benchmark.benchmark_doubleOnSubscribe":
  530497.563 ±(99.9%) 7037.836 ops/s [Average]
  (min, avg, max) = (512485.216, 530497.563, 546649.054), stdev = 10533.902
  CI (99.9%): [523459.727, 537535.399] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
MaybeFlatMapIterableObservableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  530497.563 ± 7037.836  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 231408.317 ops/s
# Warmup Iteration   2: 551894.774 ops/s
# Warmup Iteration   3: 591058.008 ops/s
# Warmup Iteration   4: 563316.473 ops/s
# Warmup Iteration   5: 630410.800 ops/s
# Warmup Iteration   6: 625691.334 ops/s
# Warmup Iteration   7: 567268.325 ops/s
# Warmup Iteration   8: 563325.106 ops/s
# Warmup Iteration   9: 590549.727 ops/s
# Warmup Iteration  10: 622044.577 ops/s
# Warmup Iteration  11: 600807.322 ops/s
# Warmup Iteration  12: 625020.474 ops/s
# Warmup Iteration  13: 585349.278 ops/s
# Warmup Iteration  14: 611391.034 ops/s
# Warmup Iteration  15: 595855.284 ops/s
# Warmup Iteration  16: 604371.277 ops/s
# Warmup Iteration  17: 652073.609 ops/s
# Warmup Iteration  18: 641562.813 ops/s
# Warmup Iteration  19: 653716.891 ops/s
# Warmup Iteration  20: 619771.467 ops/s
# Warmup Iteration  21: 654549.509 ops/s
# Warmup Iteration  22: 642629.771 ops/s
# Warmup Iteration  23: 627035.670 ops/s
# Warmup Iteration  24: 630451.727 ops/s
# Warmup Iteration  25: 661222.064 ops/s
# Warmup Iteration  26: 618897.588 ops/s
# Warmup Iteration  27: 641113.906 ops/s
# Warmup Iteration  28: 631653.179 ops/s
# Warmup Iteration  29: 648934.942 ops/s
# Warmup Iteration  30: 661037.433 ops/s
Iteration   1: 614160.817 ops/s
Iteration   2: 646097.506 ops/s
Iteration   3: 637270.359 ops/s
Iteration   4: 627307.037 ops/s
Iteration   5: 652851.484 ops/s
Iteration   6: 625438.463 ops/s
Iteration   7: 650943.126 ops/s
Iteration   8: 670127.899 ops/s
Iteration   9: 627967.081 ops/s
Iteration  10: 643347.577 ops/s
Iteration  11: 624826.835 ops/s
Iteration  12: 659950.799 ops/s
Iteration  13: 654995.600 ops/s
Iteration  14: 619961.244 ops/s
Iteration  15: 636183.205 ops/s
Iteration  16: 632637.174 ops/s
Iteration  17: 671438.658 ops/s
Iteration  18: 618115.260 ops/s
Iteration  19: 619270.479 ops/s
Iteration  20: 637528.938 ops/s
Iteration  21: 615638.418 ops/s
Iteration  22: 652539.380 ops/s
Iteration  23: 639115.044 ops/s
Iteration  24: 634427.204 ops/s
Iteration  25: 634867.711 ops/s
Iteration  26: 662245.029 ops/s
Iteration  27: 614838.649 ops/s
Iteration  28: 660251.350 ops/s
Iteration  29: 633120.439 ops/s
Iteration  30: 628481.843 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapTest._Benchmark.benchmark_mapperThrows":
  638198.154 ±(99.9%) 11159.136 ops/s [Average]
  (min, avg, max) = (614160.817, 638198.154, 671438.658), stdev = 16702.471
  CI (99.9%): [627039.017, 649357.290] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
MaybeConcatMapTest._Benchmark.benchmark_mapperThrows  thrpt   30  638198.154 ± 11159.136  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1237522.817 ops/s
# Warmup Iteration   2: 4766431.419 ops/s
# Warmup Iteration   3: 6885797.713 ops/s
# Warmup Iteration   4: 6721850.641 ops/s
# Warmup Iteration   5: 6570913.306 ops/s
# Warmup Iteration   6: 6651636.615 ops/s
# Warmup Iteration   7: 7010947.270 ops/s
# Warmup Iteration   8: 6629589.681 ops/s
# Warmup Iteration   9: 6663657.311 ops/s
# Warmup Iteration  10: 6696548.763 ops/s
# Warmup Iteration  11: 6893948.902 ops/s
# Warmup Iteration  12: 6309619.937 ops/s
# Warmup Iteration  13: 5928706.774 ops/s
# Warmup Iteration  14: 6637359.106 ops/s
# Warmup Iteration  15: 6721766.719 ops/s
# Warmup Iteration  16: 7114999.123 ops/s
# Warmup Iteration  17: 7088789.524 ops/s
# Warmup Iteration  18: 6735433.236 ops/s
# Warmup Iteration  19: 7115687.004 ops/s
# Warmup Iteration  20: 6685867.044 ops/s
# Warmup Iteration  21: 6797756.163 ops/s
# Warmup Iteration  22: 6899784.620 ops/s
# Warmup Iteration  23: 6664416.773 ops/s
# Warmup Iteration  24: 6630915.880 ops/s
# Warmup Iteration  25: 6824847.028 ops/s
# Warmup Iteration  26: 6908495.335 ops/s
# Warmup Iteration  27: 6704133.471 ops/s
# Warmup Iteration  28: 7052577.227 ops/s
# Warmup Iteration  29: 6738143.358 ops/s
# Warmup Iteration  30: 6727063.234 ops/s
Iteration   1: 7102440.975 ops/s
Iteration   2: 6806302.854 ops/s
Iteration   3: 7112807.305 ops/s
Iteration   4: 7126087.490 ops/s
Iteration   5: 6810734.808 ops/s
Iteration   6: 6976248.860 ops/s
Iteration   7: 6657029.114 ops/s
Iteration   8: 6926592.720 ops/s
Iteration   9: 6654758.767 ops/s
Iteration  10: 6829340.566 ops/s
Iteration  11: 7007810.268 ops/s
Iteration  12: 6753198.492 ops/s
Iteration  13: 6876325.210 ops/s
Iteration  14: 6958953.087 ops/s
Iteration  15: 6786635.589 ops/s
Iteration  16: 7132973.310 ops/s
Iteration  17: 6819522.940 ops/s
Iteration  18: 6756115.454 ops/s
Iteration  19: 7103887.998 ops/s
Iteration  20: 6743771.160 ops/s
Iteration  21: 6992907.398 ops/s
Iteration  22: 7090028.838 ops/s
Iteration  23: 6690003.593 ops/s
Iteration  24: 6647390.309 ops/s
Iteration  25: 7083077.268 ops/s
Iteration  26: 6663543.234 ops/s
Iteration  27: 6998584.824 ops/s
Iteration  28: 6899855.796 ops/s
Iteration  29: 6753163.802 ops/s
Iteration  30: 6914602.278 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteSuccess":
  6889156.477 ±(99.9%) 107613.219 ops/s [Average]
  (min, avg, max) = (6647390.309, 6889156.477, 7132973.310), stdev = 161070.412
  CI (99.9%): [6781543.258, 6996769.696] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorCompleteSuccess  thrpt   30  6889156.477 ± 107613.219  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_notInstance$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_notInstance

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1792373.266 ops/s
# Warmup Iteration   2: 5231314.361 ops/s
# Warmup Iteration   3: 7080480.438 ops/s
# Warmup Iteration   4: 7359748.972 ops/s
# Warmup Iteration   5: 6849651.204 ops/s
# Warmup Iteration   6: 7247185.825 ops/s
# Warmup Iteration   7: 7027086.134 ops/s
# Warmup Iteration   8: 7189049.939 ops/s
# Warmup Iteration   9: 7337235.845 ops/s
# Warmup Iteration  10: 7010625.277 ops/s
# Warmup Iteration  11: 7139087.459 ops/s
# Warmup Iteration  12: 7134150.793 ops/s
# Warmup Iteration  13: 6992894.332 ops/s
# Warmup Iteration  14: 7140773.751 ops/s
# Warmup Iteration  15: 7355172.267 ops/s
# Warmup Iteration  16: 7211176.699 ops/s
# Warmup Iteration  17: 6931792.537 ops/s
# Warmup Iteration  18: 7153336.019 ops/s
# Warmup Iteration  19: 7347145.217 ops/s
# Warmup Iteration  20: 7015939.708 ops/s
# Warmup Iteration  21: 7278382.811 ops/s
# Warmup Iteration  22: 7187887.408 ops/s
# Warmup Iteration  23: 6872534.260 ops/s
# Warmup Iteration  24: 7133706.094 ops/s
# Warmup Iteration  25: 6935261.193 ops/s
# Warmup Iteration  26: 7163909.324 ops/s
# Warmup Iteration  27: 7287579.287 ops/s
# Warmup Iteration  28: 7000057.214 ops/s
# Warmup Iteration  29: 7391640.724 ops/s
# Warmup Iteration  30: 6949304.088 ops/s
Iteration   1: 7318586.364 ops/s
Iteration   2: 7000600.175 ops/s
Iteration   3: 7323650.037 ops/s
Iteration   4: 7099858.299 ops/s
Iteration   5: 7093980.956 ops/s
Iteration   6: 7097595.089 ops/s
Iteration   7: 6908652.536 ops/s
Iteration   8: 7353786.954 ops/s
Iteration   9: 7020559.577 ops/s
Iteration  10: 7293558.066 ops/s
Iteration  11: 7125988.135 ops/s
Iteration  12: 7043083.411 ops/s
Iteration  13: 7245536.653 ops/s
Iteration  14: 7358388.265 ops/s
Iteration  15: 7346838.782 ops/s
Iteration  16: 6969421.516 ops/s
Iteration  17: 7287474.818 ops/s
Iteration  18: 7113030.056 ops/s
Iteration  19: 7226559.174 ops/s
Iteration  20: 6914486.710 ops/s
Iteration  21: 7110277.488 ops/s
Iteration  22: 7377630.476 ops/s
Iteration  23: 6939400.046 ops/s
Iteration  24: 7346263.910 ops/s
Iteration  25: 7127670.127 ops/s
Iteration  26: 6988669.243 ops/s
Iteration  27: 7254640.683 ops/s
Iteration  28: 7211759.485 ops/s
Iteration  29: 6918747.560 ops/s
Iteration  30: 7102431.515 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_notInstance":
  7150637.537 ±(99.9%) 102098.290 ops/s [Average]
  (min, avg, max) = (6908652.536, 7150637.537, 7377630.476), stdev = 152815.925
  CI (99.9%): [7048539.247, 7252735.827] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score        Error  Units
MaybeOfTypeTest._Benchmark.benchmark_notInstance  thrpt   30  7150637.537 ± 102098.290  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2267959.074 ops/s
# Warmup Iteration   2: 4741995.883 ops/s
# Warmup Iteration   3: 6773786.000 ops/s
# Warmup Iteration   4: 6546293.627 ops/s
# Warmup Iteration   5: 6806456.968 ops/s
# Warmup Iteration   6: 6492908.264 ops/s
# Warmup Iteration   7: 5626171.340 ops/s
# Warmup Iteration   8: 6448575.942 ops/s
# Warmup Iteration   9: 6446248.799 ops/s
# Warmup Iteration  10: 6527456.579 ops/s
# Warmup Iteration  11: 6580400.592 ops/s
# Warmup Iteration  12: 6816647.294 ops/s
# Warmup Iteration  13: 6459586.309 ops/s
# Warmup Iteration  14: 6888906.336 ops/s
# Warmup Iteration  15: 6876350.521 ops/s
# Warmup Iteration  16: 6444177.342 ops/s
# Warmup Iteration  17: 6750152.492 ops/s
# Warmup Iteration  18: 6690752.670 ops/s
# Warmup Iteration  19: 6425873.373 ops/s
# Warmup Iteration  20: 6871586.153 ops/s
# Warmup Iteration  21: 6461220.501 ops/s
# Warmup Iteration  22: 6620166.951 ops/s
# Warmup Iteration  23: 6926466.783 ops/s
# Warmup Iteration  24: 6990679.180 ops/s
# Warmup Iteration  25: 6967463.800 ops/s
# Warmup Iteration  26: 6300061.002 ops/s
# Warmup Iteration  27: 6778778.544 ops/s
# Warmup Iteration  28: 6756736.670 ops/s
# Warmup Iteration  29: 6734501.948 ops/s
# Warmup Iteration  30: 6800630.170 ops/s
Iteration   1: 6664125.239 ops/s
Iteration   2: 6689497.407 ops/s
Iteration   3: 6480933.275 ops/s
Iteration   4: 6862657.443 ops/s
Iteration   5: 6568356.816 ops/s
Iteration   6: 6701496.220 ops/s
Iteration   7: 6755872.589 ops/s
Iteration   8: 6654816.936 ops/s
Iteration   9: 6864324.463 ops/s
Iteration  10: 6690098.703 ops/s
Iteration  11: 6604472.561 ops/s
Iteration  12: 6721057.616 ops/s
Iteration  13: 6871125.961 ops/s
Iteration  14: 6764495.622 ops/s
Iteration  15: 6655762.776 ops/s
Iteration  16: 6794353.477 ops/s
Iteration  17: 6694801.268 ops/s
Iteration  18: 6795509.219 ops/s
Iteration  19: 6947026.094 ops/s
Iteration  20: 6579032.779 ops/s
Iteration  21: 6949369.270 ops/s
Iteration  22: 6876021.229 ops/s
Iteration  23: 6603246.410 ops/s
Iteration  24: 6835628.811 ops/s
Iteration  25: 6618000.378 ops/s
Iteration  26: 6681943.765 ops/s
Iteration  27: 6490306.790 ops/s
Iteration  28: 6776676.236 ops/s
Iteration  29: 6858194.144 ops/s
Iteration  30: 6786706.659 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnSuccess":
  6727863.672 ±(99.9%) 83336.016 ops/s [Average]
  (min, avg, max) = (6480933.275, 6727863.672, 6949369.270), stdev = 124733.435
  CI (99.9%): [6644527.656, 6811199.688] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnSuccess  thrpt   30  6727863.672 ± 83336.016  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 194650.515 ops/s
# Warmup Iteration   2: 498668.612 ops/s
# Warmup Iteration   3: 571915.900 ops/s
# Warmup Iteration   4: 536527.046 ops/s
# Warmup Iteration   5: 608687.914 ops/s
# Warmup Iteration   6: 577633.997 ops/s
# Warmup Iteration   7: 567273.843 ops/s
# Warmup Iteration   8: 614826.895 ops/s
# Warmup Iteration   9: 578127.251 ops/s
# Warmup Iteration  10: 552616.347 ops/s
# Warmup Iteration  11: 602873.145 ops/s
# Warmup Iteration  12: 578899.540 ops/s
# Warmup Iteration  13: 605082.409 ops/s
# Warmup Iteration  14: 585050.116 ops/s
# Warmup Iteration  15: 593318.612 ops/s
# Warmup Iteration  16: 604815.008 ops/s
# Warmup Iteration  17: 611922.239 ops/s
# Warmup Iteration  18: 622501.199 ops/s
# Warmup Iteration  19: 618459.674 ops/s
# Warmup Iteration  20: 645884.660 ops/s
# Warmup Iteration  21: 629692.513 ops/s
# Warmup Iteration  22: 634777.890 ops/s
# Warmup Iteration  23: 604881.461 ops/s
# Warmup Iteration  24: 607043.516 ops/s
# Warmup Iteration  25: 633003.473 ops/s
# Warmup Iteration  26: 600220.960 ops/s
# Warmup Iteration  27: 615942.934 ops/s
# Warmup Iteration  28: 607003.779 ops/s
# Warmup Iteration  29: 630418.048 ops/s
# Warmup Iteration  30: 627614.990 ops/s
Iteration   1: 625897.612 ops/s
Iteration   2: 623106.953 ops/s
Iteration   3: 622053.300 ops/s
Iteration   4: 627707.418 ops/s
Iteration   5: 619302.910 ops/s
Iteration   6: 564053.114 ops/s
Iteration   7: 640351.828 ops/s
Iteration   8: 612293.941 ops/s
Iteration   9: 618791.661 ops/s
Iteration  10: 635436.310 ops/s
Iteration  11: 606632.095 ops/s
Iteration  12: 631041.216 ops/s
Iteration  13: 641567.559 ops/s
Iteration  14: 638086.956 ops/s
Iteration  15: 607810.632 ops/s
Iteration  16: 625755.791 ops/s
Iteration  17: 626101.371 ops/s
Iteration  18: 620238.789 ops/s
Iteration  19: 641782.361 ops/s
Iteration  20: 609573.265 ops/s
Iteration  21: 638164.306 ops/s
Iteration  22: 622314.428 ops/s
Iteration  23: 632016.066 ops/s
Iteration  24: 607607.411 ops/s
Iteration  25: 627343.704 ops/s
Iteration  26: 617913.388 ops/s
Iteration  27: 615825.628 ops/s
Iteration  28: 631168.031 ops/s
Iteration  29: 615805.838 ops/s
Iteration  30: 630263.270 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessNull":
  622533.572 ±(99.9%) 10087.562 ops/s [Average]
  (min, avg, max) = (564053.114, 622533.572, 641782.361), stdev = 15098.590
  CI (99.9%): [612446.009, 632621.134] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
MaybeFlatMapNotificationTest._Benchmark.benchmark_onSuccessNull  thrpt   30  622533.572 ± 10087.562  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 286543.001 ops/s
# Warmup Iteration   2: 467638.953 ops/s
# Warmup Iteration   3: 659290.644 ops/s
# Warmup Iteration   4: 638035.980 ops/s
# Warmup Iteration   5: 633925.953 ops/s
# Warmup Iteration   6: 704844.113 ops/s
# Warmup Iteration   7: 669283.940 ops/s
# Warmup Iteration   8: 738060.711 ops/s
# Warmup Iteration   9: 722584.496 ops/s
# Warmup Iteration  10: 694455.328 ops/s
# Warmup Iteration  11: 722509.701 ops/s
# Warmup Iteration  12: 693348.612 ops/s
# Warmup Iteration  13: 723591.293 ops/s
# Warmup Iteration  14: 693037.798 ops/s
# Warmup Iteration  15: 714797.403 ops/s
# Warmup Iteration  16: 726370.000 ops/s
# Warmup Iteration  17: 739867.880 ops/s
# Warmup Iteration  18: 731297.083 ops/s
# Warmup Iteration  19: 749620.889 ops/s
# Warmup Iteration  20: 782327.835 ops/s
# Warmup Iteration  21: 729817.530 ops/s
# Warmup Iteration  22: 745951.591 ops/s
# Warmup Iteration  23: 734369.268 ops/s
# Warmup Iteration  24: 748807.039 ops/s
# Warmup Iteration  25: 744050.291 ops/s
# Warmup Iteration  26: 744659.012 ops/s
# Warmup Iteration  27: 773257.254 ops/s
# Warmup Iteration  28: 719667.467 ops/s
# Warmup Iteration  29: 778001.183 ops/s
# Warmup Iteration  30: 763699.221 ops/s
Iteration   1: 753859.168 ops/s
Iteration   2: 753230.107 ops/s
Iteration   3: 791030.808 ops/s
Iteration   4: 722239.102 ops/s
Iteration   5: 772928.927 ops/s
Iteration   6: 723563.315 ops/s
Iteration   7: 761992.102 ops/s
Iteration   8: 785428.450 ops/s
Iteration   9: 721400.075 ops/s
Iteration  10: 726438.435 ops/s
Iteration  11: 788372.551 ops/s
Iteration  12: 710937.718 ops/s
Iteration  13: 736630.889 ops/s
Iteration  14: 753251.866 ops/s
Iteration  15: 751592.444 ops/s
Iteration  16: 730862.143 ops/s
Iteration  17: 748442.338 ops/s
Iteration  18: 770268.984 ops/s
Iteration  19: 722137.430 ops/s
Iteration  20: 780621.375 ops/s
Iteration  21: 731724.912 ops/s
Iteration  22: 771093.770 ops/s
Iteration  23: 776668.565 ops/s
Iteration  24: 761940.533 ops/s
Iteration  25: 736199.032 ops/s
Iteration  26: 770710.482 ops/s
Iteration  27: 735367.431 ops/s
Iteration  28: 726615.177 ops/s
Iteration  29: 780013.417 ops/s
Iteration  30: 711065.386 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableLastTest._Benchmark.benchmark_error":
  750220.898 ±(99.9%) 16453.634 ops/s [Average]
  (min, avg, max) = (710937.718, 750220.898, 791030.808), stdev = 24627.026
  CI (99.9%): [733767.264, 766674.532] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score       Error  Units
ObservableLastTest._Benchmark.benchmark_error  thrpt   30  750220.898 ± 16453.634  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_justDisposerCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_justDisposerCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 209179.450 ops/s
# Warmup Iteration   2: 526465.796 ops/s
# Warmup Iteration   3: 606788.261 ops/s
# Warmup Iteration   4: 583424.365 ops/s
# Warmup Iteration   5: 604058.122 ops/s
# Warmup Iteration   6: 611889.230 ops/s
# Warmup Iteration   7: 574810.648 ops/s
# Warmup Iteration   8: 607508.434 ops/s
# Warmup Iteration   9: 608384.611 ops/s
# Warmup Iteration  10: 573204.895 ops/s
# Warmup Iteration  11: 586654.082 ops/s
# Warmup Iteration  12: 608627.961 ops/s
# Warmup Iteration  13: 594390.303 ops/s
# Warmup Iteration  14: 600533.751 ops/s
# Warmup Iteration  15: 606364.713 ops/s
# Warmup Iteration  16: 577847.190 ops/s
# Warmup Iteration  17: 625394.383 ops/s
# Warmup Iteration  18: 619629.367 ops/s
# Warmup Iteration  19: 622725.664 ops/s
# Warmup Iteration  20: 655389.855 ops/s
# Warmup Iteration  21: 581357.614 ops/s
# Warmup Iteration  22: 662254.737 ops/s
# Warmup Iteration  23: 643836.875 ops/s
# Warmup Iteration  24: 630782.396 ops/s
# Warmup Iteration  25: 617676.096 ops/s
# Warmup Iteration  26: 645627.667 ops/s
# Warmup Iteration  27: 625005.882 ops/s
# Warmup Iteration  28: 625348.058 ops/s
# Warmup Iteration  29: 651061.684 ops/s
# Warmup Iteration  30: 621031.119 ops/s
Iteration   1: 632033.162 ops/s
Iteration   2: 617757.074 ops/s
Iteration   3: 645382.937 ops/s
Iteration   4: 645795.506 ops/s
Iteration   5: 610723.787 ops/s
Iteration   6: 650974.976 ops/s
Iteration   7: 625598.308 ops/s
Iteration   8: 645049.080 ops/s
Iteration   9: 616062.603 ops/s
Iteration  10: 626032.648 ops/s
Iteration  11: 661937.856 ops/s
Iteration  12: 602478.640 ops/s
Iteration  13: 633055.009 ops/s
Iteration  14: 620023.232 ops/s
Iteration  15: 634680.639 ops/s
Iteration  16: 657949.393 ops/s
Iteration  17: 614061.457 ops/s
Iteration  18: 638310.822 ops/s
Iteration  19: 608332.376 ops/s
Iteration  20: 628073.931 ops/s
Iteration  21: 651289.883 ops/s
Iteration  22: 604507.930 ops/s
Iteration  23: 630965.897 ops/s
Iteration  24: 652241.440 ops/s
Iteration  25: 628734.476 ops/s
Iteration  26: 659107.357 ops/s
Iteration  27: 608971.882 ops/s
Iteration  28: 592629.927 ops/s
Iteration  29: 564904.518 ops/s
Iteration  30: 611316.982 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_justDisposerCrashes":
  627299.458 ±(99.9%) 14704.332 ops/s [Average]
  (min, avg, max) = (564904.518, 627299.458, 661937.856), stdev = 22008.753
  CI (99.9%): [612595.126, 642003.789] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
MaybeUsingTest._Benchmark.benchmark_justDisposerCrashes  thrpt   30  627299.458 ± 14704.332  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 218501.737 ops/s
# Warmup Iteration   2: 603429.960 ops/s
# Warmup Iteration   3: 674134.312 ops/s
# Warmup Iteration   4: 702072.419 ops/s
# Warmup Iteration   5: 722791.744 ops/s
# Warmup Iteration   6: 693324.637 ops/s
# Warmup Iteration   7: 661400.181 ops/s
# Warmup Iteration   8: 716509.342 ops/s
# Warmup Iteration   9: 631355.826 ops/s
# Warmup Iteration  10: 667628.300 ops/s
# Warmup Iteration  11: 698139.244 ops/s
# Warmup Iteration  12: 707807.989 ops/s
# Warmup Iteration  13: 736481.602 ops/s
# Warmup Iteration  14: 686555.210 ops/s
# Warmup Iteration  15: 734320.921 ops/s
# Warmup Iteration  16: 691708.977 ops/s
# Warmup Iteration  17: 735556.765 ops/s
# Warmup Iteration  18: 759950.070 ops/s
# Warmup Iteration  19: 734129.390 ops/s
# Warmup Iteration  20: 765615.679 ops/s
# Warmup Iteration  21: 736476.576 ops/s
# Warmup Iteration  22: 758980.349 ops/s
# Warmup Iteration  23: 758532.460 ops/s
# Warmup Iteration  24: 745892.548 ops/s
# Warmup Iteration  25: 747467.784 ops/s
# Warmup Iteration  26: 731242.375 ops/s
# Warmup Iteration  27: 748115.929 ops/s
# Warmup Iteration  28: 782462.000 ops/s
# Warmup Iteration  29: 732208.887 ops/s
# Warmup Iteration  30: 749220.243 ops/s
Iteration   1: 766327.716 ops/s
Iteration   2: 710880.666 ops/s
Iteration   3: 769740.330 ops/s
Iteration   4: 737430.857 ops/s
Iteration   5: 755194.491 ops/s
Iteration   6: 749941.129 ops/s
Iteration   7: 714165.662 ops/s
Iteration   8: 752460.911 ops/s
Iteration   9: 765552.728 ops/s
Iteration  10: 713520.166 ops/s
Iteration  11: 760024.777 ops/s
Iteration  12: 748140.601 ops/s
Iteration  13: 769182.196 ops/s
Iteration  14: 747554.982 ops/s
Iteration  15: 724448.529 ops/s
Iteration  16: 758042.662 ops/s
Iteration  17: 743757.681 ops/s
Iteration  18: 758811.385 ops/s
Iteration  19: 770214.527 ops/s
Iteration  20: 731059.841 ops/s
Iteration  21: 781075.050 ops/s
Iteration  22: 722523.292 ops/s
Iteration  23: 762740.727 ops/s
Iteration  24: 748906.123 ops/s
Iteration  25: 735529.423 ops/s
Iteration  26: 763945.447 ops/s
Iteration  27: 729305.936 ops/s
Iteration  28: 726166.856 ops/s
Iteration  29: 771633.369 ops/s
Iteration  30: 734921.824 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_error":
  747439.996 ±(99.9%) 13069.243 ops/s [Average]
  (min, avg, max) = (710880.666, 747439.996, 781075.050), stdev = 19561.428
  CI (99.9%): [734370.754, 760509.239] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt       Score       Error  Units
MaybeCountTest._Benchmark.benchmark_error  thrpt   30  747439.996 ± 13069.243  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_errorToMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_errorToMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 316998.236 ops/s
# Warmup Iteration   2: 567224.626 ops/s
# Warmup Iteration   3: 660016.028 ops/s
# Warmup Iteration   4: 710746.299 ops/s
# Warmup Iteration   5: 590130.141 ops/s
# Warmup Iteration   6: 707100.443 ops/s
# Warmup Iteration   7: 715121.172 ops/s
# Warmup Iteration   8: 719466.904 ops/s
# Warmup Iteration   9: 733621.815 ops/s
# Warmup Iteration  10: 705725.983 ops/s
# Warmup Iteration  11: 714390.827 ops/s
# Warmup Iteration  12: 695071.875 ops/s
# Warmup Iteration  13: 729645.733 ops/s
# Warmup Iteration  14: 700588.738 ops/s
# Warmup Iteration  15: 704973.147 ops/s
# Warmup Iteration  16: 727664.959 ops/s
# Warmup Iteration  17: 740994.344 ops/s
# Warmup Iteration  18: 755813.949 ops/s
# Warmup Iteration  19: 765468.308 ops/s
# Warmup Iteration  20: 737628.841 ops/s
# Warmup Iteration  21: 770882.450 ops/s
# Warmup Iteration  22: 749221.418 ops/s
# Warmup Iteration  23: 746493.132 ops/s
# Warmup Iteration  24: 776863.561 ops/s
# Warmup Iteration  25: 736874.269 ops/s
# Warmup Iteration  26: 778348.411 ops/s
# Warmup Iteration  27: 756122.061 ops/s
# Warmup Iteration  28: 745181.462 ops/s
# Warmup Iteration  29: 748181.618 ops/s
# Warmup Iteration  30: 778220.351 ops/s
Iteration   1: 746614.557 ops/s
Iteration   2: 779497.142 ops/s
Iteration   3: 747936.630 ops/s
Iteration   4: 744366.708 ops/s
Iteration   5: 762676.960 ops/s
Iteration   6: 738310.702 ops/s
Iteration   7: 722608.970 ops/s
Iteration   8: 752422.666 ops/s
Iteration   9: 751815.390 ops/s
Iteration  10: 759565.210 ops/s
Iteration  11: 736061.188 ops/s
Iteration  12: 737993.329 ops/s
Iteration  13: 767655.080 ops/s
Iteration  14: 726374.762 ops/s
Iteration  15: 726105.158 ops/s
Iteration  16: 763976.573 ops/s
Iteration  17: 752924.484 ops/s
Iteration  18: 776103.373 ops/s
Iteration  19: 787703.312 ops/s
Iteration  20: 748589.634 ops/s
Iteration  21: 771638.984 ops/s
Iteration  22: 737721.156 ops/s
Iteration  23: 601363.324 ops/s
Iteration  24: 663728.250 ops/s
Iteration  25: 783749.947 ops/s
Iteration  26: 739046.690 ops/s
Iteration  27: 767186.395 ops/s
Iteration  28: 723925.663 ops/s
Iteration  29: 765125.761 ops/s
Iteration  30: 763553.801 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_errorToMaybe":
  744878.060 ±(99.9%) 24238.313 ops/s [Average]
  (min, avg, max) = (601363.324, 744878.060, 787703.312), stdev = 36278.768
  CI (99.9%): [720639.747, 769116.372] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_errorToMaybe  thrpt   30  744878.060 ± 24238.313  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 311344.935 ops/s
# Warmup Iteration   2: 602435.381 ops/s
# Warmup Iteration   3: 663116.062 ops/s
# Warmup Iteration   4: 641514.745 ops/s
# Warmup Iteration   5: 693521.738 ops/s
# Warmup Iteration   6: 671031.677 ops/s
# Warmup Iteration   7: 657054.787 ops/s
# Warmup Iteration   8: 715716.588 ops/s
# Warmup Iteration   9: 703732.327 ops/s
# Warmup Iteration  10: 695740.744 ops/s
# Warmup Iteration  11: 709840.731 ops/s
# Warmup Iteration  12: 704178.452 ops/s
# Warmup Iteration  13: 684624.657 ops/s
# Warmup Iteration  14: 731396.884 ops/s
# Warmup Iteration  15: 689482.865 ops/s
# Warmup Iteration  16: 719590.787 ops/s
# Warmup Iteration  17: 780736.363 ops/s
# Warmup Iteration  18: 719889.533 ops/s
# Warmup Iteration  19: 768943.943 ops/s
# Warmup Iteration  20: 768865.781 ops/s
# Warmup Iteration  21: 730609.910 ops/s
# Warmup Iteration  22: 768263.677 ops/s
# Warmup Iteration  23: 727242.537 ops/s
# Warmup Iteration  24: 738004.415 ops/s
# Warmup Iteration  25: 759903.149 ops/s
# Warmup Iteration  26: 733356.288 ops/s
# Warmup Iteration  27: 765503.921 ops/s
# Warmup Iteration  28: 739555.845 ops/s
# Warmup Iteration  29: 746158.619 ops/s
# Warmup Iteration  30: 772546.917 ops/s
Iteration   1: 714514.638 ops/s
Iteration   2: 762514.159 ops/s
Iteration   3: 730544.364 ops/s
Iteration   4: 758261.357 ops/s
Iteration   5: 749780.096 ops/s
Iteration   6: 742226.032 ops/s
Iteration   7: 763426.949 ops/s
Iteration   8: 732182.770 ops/s
Iteration   9: 747148.744 ops/s
Iteration  10: 733634.456 ops/s
Iteration  11: 785208.036 ops/s
Iteration  12: 752916.497 ops/s
Iteration  13: 743902.735 ops/s
Iteration  14: 742066.868 ops/s
Iteration  15: 743965.496 ops/s
Iteration  16: 769796.743 ops/s
Iteration  17: 733043.184 ops/s
Iteration  18: 758095.852 ops/s
Iteration  19: 715398.577 ops/s
Iteration  20: 771258.789 ops/s
Iteration  21: 736600.780 ops/s
Iteration  22: 756864.680 ops/s
Iteration  23: 745577.339 ops/s
Iteration  24: 716774.505 ops/s
Iteration  25: 764605.014 ops/s
Iteration  26: 734395.660 ops/s
Iteration  27: 747340.851 ops/s
Iteration  28: 743692.386 ops/s
Iteration  29: 741386.215 ops/s
Iteration  30: 759398.097 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_error":
  746550.729 ±(99.9%) 11189.988 ops/s [Average]
  (min, avg, max) = (714514.638, 746550.729, 785208.036), stdev = 16748.649
  CI (99.9%): [735360.741, 757740.717] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
MaybeContainsTest._Benchmark.benchmark_error  thrpt   30  746550.729 ± 11189.988  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 146726.929 ops/s
# Warmup Iteration   2: 476749.285 ops/s
# Warmup Iteration   3: 574955.001 ops/s
# Warmup Iteration   4: 562917.581 ops/s
# Warmup Iteration   5: 592907.036 ops/s
# Warmup Iteration   6: 571752.300 ops/s
# Warmup Iteration   7: 566592.811 ops/s
# Warmup Iteration   8: 591011.079 ops/s
# Warmup Iteration   9: 542612.133 ops/s
# Warmup Iteration  10: 562178.274 ops/s
# Warmup Iteration  11: 566899.051 ops/s
# Warmup Iteration  12: 582695.665 ops/s
# Warmup Iteration  13: 606327.164 ops/s
# Warmup Iteration  14: 569463.543 ops/s
# Warmup Iteration  15: 606862.412 ops/s
# Warmup Iteration  16: 574960.712 ops/s
# Warmup Iteration  17: 624555.814 ops/s
# Warmup Iteration  18: 620585.949 ops/s
# Warmup Iteration  19: 594898.773 ops/s
# Warmup Iteration  20: 625250.997 ops/s
# Warmup Iteration  21: 590382.433 ops/s
# Warmup Iteration  22: 605124.064 ops/s
# Warmup Iteration  23: 602056.022 ops/s
# Warmup Iteration  24: 600899.195 ops/s
# Warmup Iteration  25: 604851.652 ops/s
# Warmup Iteration  26: 610160.928 ops/s
# Warmup Iteration  27: 590189.363 ops/s
# Warmup Iteration  28: 621497.978 ops/s
# Warmup Iteration  29: 607894.084 ops/s
# Warmup Iteration  30: 608708.588 ops/s
Iteration   1: 628861.534 ops/s
Iteration   2: 610061.247 ops/s
Iteration   3: 613985.992 ops/s
Iteration   4: 598652.116 ops/s
Iteration   5: 622979.854 ops/s
Iteration   6: 582146.223 ops/s
Iteration   7: 618866.677 ops/s
Iteration   8: 628408.072 ops/s
Iteration   9: 594965.524 ops/s
Iteration  10: 606907.830 ops/s
Iteration  11: 618162.402 ops/s
Iteration  12: 614241.738 ops/s
Iteration  13: 584364.908 ops/s
Iteration  14: 610293.301 ops/s
Iteration  15: 611596.780 ops/s
Iteration  16: 626809.426 ops/s
Iteration  17: 588390.582 ops/s
Iteration  18: 537094.280 ops/s
Iteration  19: 637068.426 ops/s
Iteration  20: 590177.625 ops/s
Iteration  21: 614719.399 ops/s
Iteration  22: 627435.628 ops/s
Iteration  23: 596272.373 ops/s
Iteration  24: 611797.666 ops/s
Iteration  25: 586648.834 ops/s
Iteration  26: 612521.059 ops/s
Iteration  27: 626041.415 ops/s
Iteration  28: 604965.571 ops/s
Iteration  29: 614036.429 ops/s
Iteration  30: 620143.697 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueNull":
  607953.887 ±(99.9%) 13234.044 ops/s [Average]
  (min, avg, max) = (537094.280, 607953.887, 637068.426), stdev = 19808.095
  CI (99.9%): [594719.843, 621187.931] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementValueNull  thrpt   30  607953.887 ± 13234.044  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_maybeSourcesInIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_maybeSourcesInIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 930719.103 ops/s
# Warmup Iteration   2: 2551016.765 ops/s
# Warmup Iteration   3: 3383925.979 ops/s
# Warmup Iteration   4: 3628452.350 ops/s
# Warmup Iteration   5: 3776827.448 ops/s
# Warmup Iteration   6: 3619174.244 ops/s
# Warmup Iteration   7: 3593175.239 ops/s
# Warmup Iteration   8: 3504134.174 ops/s
# Warmup Iteration   9: 3677484.375 ops/s
# Warmup Iteration  10: 3514459.625 ops/s
# Warmup Iteration  11: 3598052.223 ops/s
# Warmup Iteration  12: 3640200.755 ops/s
# Warmup Iteration  13: 3523150.299 ops/s
# Warmup Iteration  14: 3650037.992 ops/s
# Warmup Iteration  15: 3512668.411 ops/s
# Warmup Iteration  16: 3566284.569 ops/s
# Warmup Iteration  17: 3780022.000 ops/s
# Warmup Iteration  18: 3689968.470 ops/s
# Warmup Iteration  19: 3514350.112 ops/s
# Warmup Iteration  20: 3809635.325 ops/s
# Warmup Iteration  21: 3670486.182 ops/s
# Warmup Iteration  22: 3577606.611 ops/s
# Warmup Iteration  23: 3721480.092 ops/s
# Warmup Iteration  24: 3587817.278 ops/s
# Warmup Iteration  25: 3418318.049 ops/s
# Warmup Iteration  26: 3724220.794 ops/s
# Warmup Iteration  27: 3548325.068 ops/s
# Warmup Iteration  28: 3659906.436 ops/s
# Warmup Iteration  29: 3655386.509 ops/s
# Warmup Iteration  30: 3559494.473 ops/s
Iteration   1: 3782002.088 ops/s
Iteration   2: 3600416.675 ops/s
Iteration   3: 3560571.968 ops/s
Iteration   4: 3721034.387 ops/s
Iteration   5: 3605860.665 ops/s
Iteration   6: 3684447.492 ops/s
Iteration   7: 3581098.541 ops/s
Iteration   8: 3646823.482 ops/s
Iteration   9: 3561884.752 ops/s
Iteration  10: 3654648.923 ops/s
Iteration  11: 3681771.705 ops/s
Iteration  12: 3666478.560 ops/s
Iteration  13: 3710307.614 ops/s
Iteration  14: 3574822.432 ops/s
Iteration  15: 3596561.023 ops/s
Iteration  16: 3587864.712 ops/s
Iteration  17: 3751478.052 ops/s
Iteration  18: 3549531.001 ops/s
Iteration  19: 3670455.463 ops/s
Iteration  20: 3568825.787 ops/s
Iteration  21: 3616757.248 ops/s
Iteration  22: 3774585.421 ops/s
Iteration  23: 3526320.130 ops/s
Iteration  24: 3630414.924 ops/s
Iteration  25: 3822952.242 ops/s
Iteration  26: 3529630.504 ops/s
Iteration  27: 3779875.834 ops/s
Iteration  28: 3627328.414 ops/s
Iteration  29: 3540388.843 ops/s
Iteration  30: 3652184.643 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_maybeSourcesInIterable":
  3641910.784 ±(99.9%) 55127.033 ops/s [Average]
  (min, avg, max) = (3526320.130, 3641910.784, 3822952.242), stdev = 82511.555
  CI (99.9%): [3586783.751, 3697037.817] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
MaybeZipIterableTest._Benchmark.benchmark_maybeSourcesInIterable  thrpt   30  3641910.784 ± 55127.033  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18314.217 ops/s
# Warmup Iteration   2: 103738.933 ops/s
# Warmup Iteration   3: 184911.600 ops/s
# Warmup Iteration   4: 194931.193 ops/s
# Warmup Iteration   5: 199153.638 ops/s
# Warmup Iteration   6: 189715.555 ops/s
# Warmup Iteration   7: 190391.522 ops/s
# Warmup Iteration   8: 199050.844 ops/s
# Warmup Iteration   9: 197807.759 ops/s
# Warmup Iteration  10: 201416.062 ops/s
# Warmup Iteration  11: 197947.376 ops/s
# Warmup Iteration  12: 198673.795 ops/s
# Warmup Iteration  13: 204893.091 ops/s
# Warmup Iteration  14: 195607.665 ops/s
# Warmup Iteration  15: 197941.976 ops/s
# Warmup Iteration  16: 206574.573 ops/s
# Warmup Iteration  17: 204450.908 ops/s
# Warmup Iteration  18: 208567.835 ops/s
# Warmup Iteration  19: 201105.331 ops/s
# Warmup Iteration  20: 209296.148 ops/s
# Warmup Iteration  21: 205226.542 ops/s
# Warmup Iteration  22: 207511.225 ops/s
# Warmup Iteration  23: 204232.759 ops/s
# Warmup Iteration  24: 198499.446 ops/s
# Warmup Iteration  25: 214119.137 ops/s
# Warmup Iteration  26: 211387.508 ops/s
# Warmup Iteration  27: 210520.209 ops/s
# Warmup Iteration  28: 204428.260 ops/s
# Warmup Iteration  29: 213862.218 ops/s
# Warmup Iteration  30: 202596.581 ops/s
Iteration   1: 200475.147 ops/s
Iteration   2: 201204.075 ops/s
Iteration   3: 214745.799 ops/s
Iteration   4: 206684.345 ops/s
Iteration   5: 201589.937 ops/s
Iteration   6: 213475.671 ops/s
Iteration   7: 206158.906 ops/s
Iteration   8: 204595.265 ops/s
Iteration   9: 213189.679 ops/s
Iteration  10: 203554.770 ops/s
Iteration  11: 206444.137 ops/s
Iteration  12: 159304.559 ops/s
Iteration  13: 199796.727 ops/s
Iteration  14: 215438.192 ops/s
Iteration  15: 204991.221 ops/s
Iteration  16: 202414.344 ops/s
Iteration  17: 213611.500 ops/s
Iteration  18: 199546.970 ops/s
Iteration  19: 215609.654 ops/s
Iteration  20: 203600.826 ops/s
Iteration  21: 211253.015 ops/s
Iteration  22: 210010.444 ops/s
Iteration  23: 202538.511 ops/s
Iteration  24: 211174.770 ops/s
Iteration  25: 205380.242 ops/s
Iteration  26: 205574.945 ops/s
Iteration  27: 213836.263 ops/s
Iteration  28: 191188.881 ops/s
Iteration  29: 214657.957 ops/s
Iteration  30: 212552.224 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryOnError":
  205486.633 ±(99.9%) 7082.632 ops/s [Average]
  (min, avg, max) = (159304.559, 205486.633, 215609.654), stdev = 10600.950
  CI (99.9%): [198404.001, 212569.264] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryOnError  thrpt   30  205486.633 ± 7082.632  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_reentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_reentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17883.816 ops/s
# Warmup Iteration   2: 119561.825 ops/s
# Warmup Iteration   3: 182057.558 ops/s
# Warmup Iteration   4: 398034.121 ops/s
# Warmup Iteration   5: 440802.417 ops/s
# Warmup Iteration   6: 463307.864 ops/s
# Warmup Iteration   7: 470117.565 ops/s
# Warmup Iteration   8: 450241.688 ops/s
# Warmup Iteration   9: 460015.947 ops/s
# Warmup Iteration  10: 444474.295 ops/s
# Warmup Iteration  11: 439008.508 ops/s
# Warmup Iteration  12: 455032.922 ops/s
# Warmup Iteration  13: 446697.080 ops/s
# Warmup Iteration  14: 467900.766 ops/s
# Warmup Iteration  15: 478565.334 ops/s
# Warmup Iteration  16: 436773.458 ops/s
# Warmup Iteration  17: 464529.925 ops/s
# Warmup Iteration  18: 450923.592 ops/s
# Warmup Iteration  19: 452922.460 ops/s
# Warmup Iteration  20: 463951.869 ops/s
# Warmup Iteration  21: 451598.950 ops/s
# Warmup Iteration  22: 471636.700 ops/s
# Warmup Iteration  23: 444434.594 ops/s
# Warmup Iteration  24: 453104.789 ops/s
# Warmup Iteration  25: 478934.922 ops/s
# Warmup Iteration  26: 441803.472 ops/s
# Warmup Iteration  27: 440666.904 ops/s
# Warmup Iteration  28: 444969.513 ops/s
# Warmup Iteration  29: 476530.891 ops/s
# Warmup Iteration  30: 459394.693 ops/s
Iteration   1: 466811.864 ops/s
Iteration   2: 468094.497 ops/s
Iteration   3: 448478.255 ops/s
Iteration   4: 478528.348 ops/s
Iteration   5: 444107.159 ops/s
Iteration   6: 476743.444 ops/s
Iteration   7: 452333.841 ops/s
Iteration   8: 462961.374 ops/s
Iteration   9: 456901.866 ops/s
Iteration  10: 455366.083 ops/s
Iteration  11: 457912.737 ops/s
Iteration  12: 460954.190 ops/s
Iteration  13: 458063.444 ops/s
Iteration  14: 450025.739 ops/s
Iteration  15: 463185.463 ops/s
Iteration  16: 458513.052 ops/s
Iteration  17: 455793.770 ops/s
Iteration  18: 469169.934 ops/s
Iteration  19: 455960.329 ops/s
Iteration  20: 480130.531 ops/s
Iteration  21: 449794.750 ops/s
Iteration  22: 461599.737 ops/s
Iteration  23: 474728.839 ops/s
Iteration  24: 455401.269 ops/s
Iteration  25: 469233.206 ops/s
Iteration  26: 447998.064 ops/s
Iteration  27: 483541.666 ops/s
Iteration  28: 454469.232 ops/s
Iteration  29: 458018.031 ops/s
Iteration  30: 461126.929 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_reentrant":
  461198.255 ±(99.9%) 6778.020 ops/s [Average]
  (min, avg, max) = (444107.159, 461198.255, 483541.666), stdev = 10145.023
  CI (99.9%): [454420.234, 467976.275] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableWindowWithObservableTest._Benchmark.benchmark_reentrant  thrpt   30  461198.255 ± 6778.020  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_restartTimer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_restartTimer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3305.303 ops/s
# Warmup Iteration   2: 17591.506 ops/s
# Warmup Iteration   3: 20582.375 ops/s
# Warmup Iteration   4: 37099.867 ops/s
# Warmup Iteration   5: 43006.068 ops/s
# Warmup Iteration   6: 41451.284 ops/s
# Warmup Iteration   7: 45589.205 ops/s
# Warmup Iteration   8: 45045.396 ops/s
# Warmup Iteration   9: 47464.650 ops/s
# Warmup Iteration  10: 48331.892 ops/s
# Warmup Iteration  11: 47997.510 ops/s
# Warmup Iteration  12: 43891.286 ops/s
# Warmup Iteration  13: 43686.494 ops/s
# Warmup Iteration  14: 44545.718 ops/s
# Warmup Iteration  15: 47663.750 ops/s
# Warmup Iteration  16: 46154.248 ops/s
# Warmup Iteration  17: 49170.598 ops/s
# Warmup Iteration  18: 45287.928 ops/s
# Warmup Iteration  19: 45646.710 ops/s
# Warmup Iteration  20: 42039.878 ops/s
# Warmup Iteration  21: 47752.756 ops/s
# Warmup Iteration  22: 46758.125 ops/s
# Warmup Iteration  23: 44952.480 ops/s
# Warmup Iteration  24: 43030.281 ops/s
# Warmup Iteration  25: 47474.680 ops/s
# Warmup Iteration  26: 47501.553 ops/s
# Warmup Iteration  27: 46738.302 ops/s
# Warmup Iteration  28: 45485.698 ops/s
# Warmup Iteration  29: 47502.410 ops/s
# Warmup Iteration  30: 45086.446 ops/s
Iteration   1: 45954.756 ops/s
Iteration   2: 48731.450 ops/s
Iteration   3: 48208.510 ops/s
Iteration   4: 49088.699 ops/s
Iteration   5: 47903.362 ops/s
Iteration   6: 49060.037 ops/s
Iteration   7: 43200.883 ops/s
Iteration   8: 43495.823 ops/s
Iteration   9: 47473.288 ops/s
Iteration  10: 46838.042 ops/s
Iteration  11: 46388.018 ops/s
Iteration  12: 45668.734 ops/s
Iteration  13: 44948.563 ops/s
Iteration  14: 43990.485 ops/s
Iteration  15: 48748.302 ops/s
Iteration  16: 48836.913 ops/s
Iteration  17: 44583.063 ops/s
Iteration  18: 46279.705 ops/s
Iteration  19: 45858.138 ops/s
Iteration  20: 47364.562 ops/s
Iteration  21: 44098.590 ops/s
Iteration  22: 47024.664 ops/s
Iteration  23: 42790.182 ops/s
Iteration  24: 43951.005 ops/s
Iteration  25: 46839.592 ops/s
Iteration  26: 46514.969 ops/s
Iteration  27: 43576.923 ops/s
Iteration  28: 48157.702 ops/s
Iteration  29: 44964.102 ops/s
Iteration  30: 49292.263 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_restartTimer":
  46327.711 ±(99.9%) 1337.223 ops/s [Average]
  (min, avg, max) = (42790.182, 46327.711, 49292.263), stdev = 2001.492
  CI (99.9%): [44990.488, 47664.934] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt      Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_restartTimer  thrpt   30  46327.711 ± 1337.223  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_errorAfterDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_errorAfterDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 180804.054 ops/s
# Warmup Iteration   2: 487199.631 ops/s
# Warmup Iteration   3: 512964.108 ops/s
# Warmup Iteration   4: 566508.019 ops/s
# Warmup Iteration   5: 563987.001 ops/s
# Warmup Iteration   6: 569789.924 ops/s
# Warmup Iteration   7: 560782.791 ops/s
# Warmup Iteration   8: 574906.550 ops/s
# Warmup Iteration   9: 549262.625 ops/s
# Warmup Iteration  10: 547588.061 ops/s
# Warmup Iteration  11: 540037.083 ops/s
# Warmup Iteration  12: 558938.173 ops/s
# Warmup Iteration  13: 582682.856 ops/s
# Warmup Iteration  14: 556796.657 ops/s
# Warmup Iteration  15: 584932.743 ops/s
# Warmup Iteration  16: 567130.854 ops/s
# Warmup Iteration  17: 585577.373 ops/s
# Warmup Iteration  18: 602470.236 ops/s
# Warmup Iteration  19: 588304.762 ops/s
# Warmup Iteration  20: 591632.335 ops/s
# Warmup Iteration  21: 599267.482 ops/s
# Warmup Iteration  22: 584130.883 ops/s
# Warmup Iteration  23: 589041.028 ops/s
# Warmup Iteration  24: 578743.474 ops/s
# Warmup Iteration  25: 585315.755 ops/s
# Warmup Iteration  26: 594260.321 ops/s
# Warmup Iteration  27: 571953.186 ops/s
# Warmup Iteration  28: 586609.247 ops/s
# Warmup Iteration  29: 595078.238 ops/s
# Warmup Iteration  30: 602817.361 ops/s
Iteration   1: 582699.996 ops/s
Iteration   2: 603643.053 ops/s
Iteration   3: 583162.129 ops/s
Iteration   4: 609132.625 ops/s
Iteration   5: 606779.361 ops/s
Iteration   6: 563203.718 ops/s
Iteration   7: 616085.828 ops/s
Iteration   8: 579891.900 ops/s
Iteration   9: 608047.587 ops/s
Iteration  10: 579472.183 ops/s
Iteration  11: 603771.273 ops/s
Iteration  12: 599605.241 ops/s
Iteration  13: 571994.453 ops/s
Iteration  14: 614458.986 ops/s
Iteration  15: 574208.316 ops/s
Iteration  16: 591567.390 ops/s
Iteration  17: 596440.030 ops/s
Iteration  18: 607245.818 ops/s
Iteration  19: 582273.552 ops/s
Iteration  20: 601336.880 ops/s
Iteration  21: 582367.427 ops/s
Iteration  22: 603327.645 ops/s
Iteration  23: 609172.986 ops/s
Iteration  24: 581236.126 ops/s
Iteration  25: 585088.164 ops/s
Iteration  26: 608799.895 ops/s
Iteration  27: 602929.475 ops/s
Iteration  28: 578481.649 ops/s
Iteration  29: 598377.703 ops/s
Iteration  30: 578530.550 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableToIteratorTest._Benchmark.benchmark_errorAfterDispose":
  593444.398 ±(99.9%) 9656.272 ops/s [Average]
  (min, avg, max) = (563203.718, 593444.398, 616085.828), stdev = 14453.055
  CI (99.9%): [583788.126, 603100.670] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
BlockingObservableToIteratorTest._Benchmark.benchmark_errorAfterDispose  thrpt   30  593444.398 ± 9656.272  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41389.218 ops/s
# Warmup Iteration   2: 213707.764 ops/s
# Warmup Iteration   3: 498867.207 ops/s
# Warmup Iteration   4: 466858.905 ops/s
# Warmup Iteration   5: 485546.684 ops/s
# Warmup Iteration   6: 521027.000 ops/s
# Warmup Iteration   7: 509563.495 ops/s
# Warmup Iteration   8: 531709.543 ops/s
# Warmup Iteration   9: 523581.767 ops/s
# Warmup Iteration  10: 511991.486 ops/s
# Warmup Iteration  11: 530567.065 ops/s
# Warmup Iteration  12: 518740.325 ops/s
# Warmup Iteration  13: 530170.066 ops/s
# Warmup Iteration  14: 540147.934 ops/s
# Warmup Iteration  15: 517495.793 ops/s
# Warmup Iteration  16: 537600.491 ops/s
# Warmup Iteration  17: 548529.380 ops/s
# Warmup Iteration  18: 569228.979 ops/s
# Warmup Iteration  19: 567150.653 ops/s
# Warmup Iteration  20: 547790.630 ops/s
# Warmup Iteration  21: 566138.256 ops/s
# Warmup Iteration  22: 533572.210 ops/s
# Warmup Iteration  23: 556463.332 ops/s
# Warmup Iteration  24: 557304.979 ops/s
# Warmup Iteration  25: 551415.028 ops/s
# Warmup Iteration  26: 545906.081 ops/s
# Warmup Iteration  27: 554468.804 ops/s
# Warmup Iteration  28: 536557.927 ops/s
# Warmup Iteration  29: 558929.555 ops/s
# Warmup Iteration  30: 547088.997 ops/s
Iteration   1: 446017.975 ops/s
Iteration   2: 565413.141 ops/s
Iteration   3: 539495.176 ops/s
Iteration   4: 570787.363 ops/s
Iteration   5: 537768.052 ops/s
Iteration   6: 546519.778 ops/s
Iteration   7: 566356.455 ops/s
Iteration   8: 532442.396 ops/s
Iteration   9: 568255.609 ops/s
Iteration  10: 528572.749 ops/s
Iteration  11: 559502.758 ops/s
Iteration  12: 574508.289 ops/s
Iteration  13: 545620.854 ops/s
Iteration  14: 545679.261 ops/s
Iteration  15: 562441.515 ops/s
Iteration  16: 547905.059 ops/s
Iteration  17: 549438.429 ops/s
Iteration  18: 552892.311 ops/s
Iteration  19: 548058.246 ops/s
Iteration  20: 563570.107 ops/s
Iteration  21: 550814.380 ops/s
Iteration  22: 549593.301 ops/s
Iteration  23: 581696.129 ops/s
Iteration  24: 537627.899 ops/s
Iteration  25: 557293.670 ops/s
Iteration  26: 559015.668 ops/s
Iteration  27: 540900.551 ops/s
Iteration  28: 573941.559 ops/s
Iteration  29: 541286.159 ops/s
Iteration  30: 544355.045 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_error":
  549592.329 ±(99.9%) 15819.506 ops/s [Average]
  (min, avg, max) = (446017.975, 549592.329, 581696.129), stdev = 23677.893
  CI (99.9%): [533772.824, 565411.835] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
ObservableBlockingStreamTest._Benchmark.benchmark_error  thrpt   30  549592.329 ± 15819.506  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhileTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhileTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.786 ops/s
# Warmup Iteration   2: 22836.111 ops/s
# Warmup Iteration   3: 118150.259 ops/s
# Warmup Iteration   4: 153095.800 ops/s
# Warmup Iteration   5: 305837.422 ops/s
# Warmup Iteration   6: 378449.568 ops/s
# Warmup Iteration   7: 367298.480 ops/s
# Warmup Iteration   8: 354898.531 ops/s
# Warmup Iteration   9: 368438.593 ops/s
# Warmup Iteration  10: 362142.670 ops/s
# Warmup Iteration  11: 358130.894 ops/s
# Warmup Iteration  12: 367857.509 ops/s
# Warmup Iteration  13: 348846.314 ops/s
# Warmup Iteration  14: 356031.074 ops/s
# Warmup Iteration  15: 348600.016 ops/s
# Warmup Iteration  16: 342023.729 ops/s
# Warmup Iteration  17: 372981.315 ops/s
# Warmup Iteration  18: 361644.843 ops/s
# Warmup Iteration  19: 375217.081 ops/s
# Warmup Iteration  20: 384955.694 ops/s
# Warmup Iteration  21: 360311.603 ops/s
# Warmup Iteration  22: 389913.572 ops/s
# Warmup Iteration  23: 358363.737 ops/s
# Warmup Iteration  24: 361730.635 ops/s
# Warmup Iteration  25: 381636.297 ops/s
# Warmup Iteration  26: 372518.185 ops/s
# Warmup Iteration  27: 358448.601 ops/s
# Warmup Iteration  28: 385258.676 ops/s
# Warmup Iteration  29: 374524.951 ops/s
# Warmup Iteration  30: 365069.921 ops/s
Iteration   1: 361644.026 ops/s
Iteration   2: 368173.878 ops/s
Iteration   3: 384163.354 ops/s
Iteration   4: 366019.490 ops/s
Iteration   5: 377143.731 ops/s
Iteration   6: 352343.827 ops/s
Iteration   7: 384955.213 ops/s
Iteration   8: 379830.129 ops/s
Iteration   9: 379294.935 ops/s
Iteration  10: 380460.443 ops/s
Iteration  11: 387856.857 ops/s
Iteration  12: 360641.345 ops/s
Iteration  13: 384002.452 ops/s
Iteration  14: 367494.892 ops/s
Iteration  15: 365104.389 ops/s
Iteration  16: 366430.762 ops/s
Iteration  17: 372990.308 ops/s
Iteration  18: 362617.107 ops/s
Iteration  19: 369827.119 ops/s
Iteration  20: 369868.372 ops/s
Iteration  21: 362957.135 ops/s
Iteration  22: 392716.118 ops/s
Iteration  23: 357871.483 ops/s
Iteration  24: 370230.225 ops/s
Iteration  25: 383156.886 ops/s
Iteration  26: 359468.908 ops/s
Iteration  27: 380023.084 ops/s
Iteration  28: 370528.431 ops/s
Iteration  29: 374172.184 ops/s
Iteration  30: 365036.857 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhileTest._Benchmark.benchmark_error":
  371900.798 ±(99.9%) 6691.093 ops/s [Average]
  (min, avg, max) = (352343.827, 371900.798, 392716.118), stdev = 10014.914
  CI (99.9%): [365209.705, 378591.891] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
ObservableSkipWhileTest._Benchmark.benchmark_error  thrpt   30  371900.798 ± 6691.093  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 241548.577 ops/s
# Warmup Iteration   2: 586843.433 ops/s
# Warmup Iteration   3: 647778.430 ops/s
# Warmup Iteration   4: 702420.106 ops/s
# Warmup Iteration   5: 604282.045 ops/s
# Warmup Iteration   6: 695651.315 ops/s
# Warmup Iteration   7: 699055.703 ops/s
# Warmup Iteration   8: 720788.333 ops/s
# Warmup Iteration   9: 682506.110 ops/s
# Warmup Iteration  10: 738410.075 ops/s
# Warmup Iteration  11: 681519.408 ops/s
# Warmup Iteration  12: 699038.965 ops/s
# Warmup Iteration  13: 698384.217 ops/s
# Warmup Iteration  14: 725492.975 ops/s
# Warmup Iteration  15: 689944.568 ops/s
# Warmup Iteration  16: 715741.446 ops/s
# Warmup Iteration  17: 752849.795 ops/s
# Warmup Iteration  18: 748951.831 ops/s
# Warmup Iteration  19: 751441.079 ops/s
# Warmup Iteration  20: 750315.158 ops/s
# Warmup Iteration  21: 738158.738 ops/s
# Warmup Iteration  22: 748034.087 ops/s
# Warmup Iteration  23: 757650.120 ops/s
# Warmup Iteration  24: 759376.493 ops/s
# Warmup Iteration  25: 558591.614 ops/s
# Warmup Iteration  26: 782979.896 ops/s
# Warmup Iteration  27: 755505.758 ops/s
# Warmup Iteration  28: 729284.595 ops/s
# Warmup Iteration  29: 733917.403 ops/s
# Warmup Iteration  30: 775180.932 ops/s
Iteration   1: 742163.218 ops/s
Iteration   2: 754113.647 ops/s
Iteration   3: 749001.971 ops/s
Iteration   4: 734226.658 ops/s
Iteration   5: 768703.536 ops/s
Iteration   6: 760524.782 ops/s
Iteration   7: 745996.209 ops/s
Iteration   8: 753625.499 ops/s
Iteration   9: 748444.165 ops/s
Iteration  10: 761340.994 ops/s
Iteration  11: 729577.362 ops/s
Iteration  12: 776893.972 ops/s
Iteration  13: 716129.830 ops/s
Iteration  14: 758236.854 ops/s
Iteration  15: 759158.637 ops/s
Iteration  16: 738620.609 ops/s
Iteration  17: 747465.040 ops/s
Iteration  18: 759605.879 ops/s
Iteration  19: 748558.140 ops/s
Iteration  20: 750219.875 ops/s
Iteration  21: 740192.453 ops/s
Iteration  22: 735391.900 ops/s
Iteration  23: 770255.952 ops/s
Iteration  24: 735109.683 ops/s
Iteration  25: 739570.624 ops/s
Iteration  26: 740068.218 ops/s
Iteration  27: 753408.712 ops/s
Iteration  28: 733968.145 ops/s
Iteration  29: 768988.490 ops/s
Iteration  30: 768737.925 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_error":
  749609.966 ±(99.9%) 9402.254 ops/s [Average]
  (min, avg, max) = (716129.830, 749609.966, 776893.972), stdev = 14072.852
  CI (99.9%): [740207.712, 759012.220] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score      Error  Units
ObservableScanTest._Benchmark.benchmark_error  thrpt   30  749609.966 ± 9402.254  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 178390.969 ops/s
# Warmup Iteration   2: 576382.519 ops/s
# Warmup Iteration   3: 609352.396 ops/s
# Warmup Iteration   4: 674393.869 ops/s
# Warmup Iteration   5: 635702.224 ops/s
# Warmup Iteration   6: 705156.460 ops/s
# Warmup Iteration   7: 676315.780 ops/s
# Warmup Iteration   8: 698003.509 ops/s
# Warmup Iteration   9: 695082.131 ops/s
# Warmup Iteration  10: 691394.653 ops/s
# Warmup Iteration  11: 718796.903 ops/s
# Warmup Iteration  12: 675686.694 ops/s
# Warmup Iteration  13: 722402.501 ops/s
# Warmup Iteration  14: 701340.003 ops/s
# Warmup Iteration  15: 681918.571 ops/s
# Warmup Iteration  16: 707354.867 ops/s
# Warmup Iteration  17: 732236.966 ops/s
# Warmup Iteration  18: 737364.845 ops/s
# Warmup Iteration  19: 729129.497 ops/s
# Warmup Iteration  20: 765826.725 ops/s
# Warmup Iteration  21: 755547.651 ops/s
# Warmup Iteration  22: 717633.599 ops/s
# Warmup Iteration  23: 742490.988 ops/s
# Warmup Iteration  24: 747306.343 ops/s
# Warmup Iteration  25: 732391.815 ops/s
# Warmup Iteration  26: 731152.822 ops/s
# Warmup Iteration  27: 766121.339 ops/s
# Warmup Iteration  28: 750435.943 ops/s
# Warmup Iteration  29: 720522.710 ops/s
# Warmup Iteration  30: 761387.386 ops/s
Iteration   1: 737339.225 ops/s
Iteration   2: 731621.450 ops/s
Iteration   3: 764068.033 ops/s
Iteration   4: 726383.412 ops/s
Iteration   5: 754082.432 ops/s
Iteration   6: 740338.460 ops/s
Iteration   7: 751111.811 ops/s
Iteration   8: 759571.635 ops/s
Iteration   9: 730109.785 ops/s
Iteration  10: 728880.764 ops/s
Iteration  11: 774881.566 ops/s
Iteration  12: 715108.930 ops/s
Iteration  13: 735466.321 ops/s
Iteration  14: 749210.679 ops/s
Iteration  15: 729188.709 ops/s
Iteration  16: 727319.733 ops/s
Iteration  17: 755615.926 ops/s
Iteration  18: 723511.959 ops/s
Iteration  19: 751280.683 ops/s
Iteration  20: 742604.825 ops/s
Iteration  21: 737080.035 ops/s
Iteration  22: 775545.035 ops/s
Iteration  23: 727839.370 ops/s
Iteration  24: 745833.554 ops/s
Iteration  25: 750689.797 ops/s
Iteration  26: 737623.009 ops/s
Iteration  27: 744186.239 ops/s
Iteration  28: 763274.245 ops/s
Iteration  29: 723556.203 ops/s
Iteration  30: 750378.610 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeLastTest._Benchmark.benchmark_error":
  742790.081 ±(99.9%) 10316.900 ops/s [Average]
  (min, avg, max) = (715108.930, 742790.081, 775545.035), stdev = 15441.851
  CI (99.9%): [732473.182, 753106.981] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
ObservableTakeLastTest._Benchmark.benchmark_error  thrpt   30  742790.081 ± 10316.900  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_repeatWhenFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_repeatWhenFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 341185.184 ops/s
# Warmup Iteration   2: 553714.425 ops/s
# Warmup Iteration   3: 605150.336 ops/s
# Warmup Iteration   4: 664722.841 ops/s
# Warmup Iteration   5: 626335.783 ops/s
# Warmup Iteration   6: 632580.048 ops/s
# Warmup Iteration   7: 643788.764 ops/s
# Warmup Iteration   8: 633024.656 ops/s
# Warmup Iteration   9: 655729.092 ops/s
# Warmup Iteration  10: 655984.866 ops/s
# Warmup Iteration  11: 611497.107 ops/s
# Warmup Iteration  12: 644877.266 ops/s
# Warmup Iteration  13: 624982.034 ops/s
# Warmup Iteration  14: 618030.702 ops/s
# Warmup Iteration  15: 643524.121 ops/s
# Warmup Iteration  16: 639865.054 ops/s
# Warmup Iteration  17: 648091.372 ops/s
# Warmup Iteration  18: 695560.893 ops/s
# Warmup Iteration  19: 666450.106 ops/s
# Warmup Iteration  20: 585847.011 ops/s
# Warmup Iteration  21: 652661.612 ops/s
# Warmup Iteration  22: 679366.716 ops/s
# Warmup Iteration  23: 669056.727 ops/s
# Warmup Iteration  24: 672334.676 ops/s
# Warmup Iteration  25: 668606.870 ops/s
# Warmup Iteration  26: 659827.695 ops/s
# Warmup Iteration  27: 708924.443 ops/s
# Warmup Iteration  28: 683005.093 ops/s
# Warmup Iteration  29: 643034.078 ops/s
# Warmup Iteration  30: 697896.438 ops/s
Iteration   1: 653683.320 ops/s
Iteration   2: 663630.191 ops/s
Iteration   3: 679181.597 ops/s
Iteration   4: 679622.063 ops/s
Iteration   5: 670731.702 ops/s
Iteration   6: 676870.705 ops/s
Iteration   7: 693899.588 ops/s
Iteration   8: 662372.318 ops/s
Iteration   9: 686598.705 ops/s
Iteration  10: 673089.366 ops/s
Iteration  11: 664846.112 ops/s
Iteration  12: 696999.697 ops/s
Iteration  13: 670481.256 ops/s
Iteration  14: 700859.453 ops/s
Iteration  15: 658571.614 ops/s
Iteration  16: 650830.596 ops/s
Iteration  17: 679738.999 ops/s
Iteration  18: 653748.740 ops/s
Iteration  19: 672103.344 ops/s
Iteration  20: 695331.677 ops/s
Iteration  21: 646173.274 ops/s
Iteration  22: 684918.607 ops/s
Iteration  23: 684425.364 ops/s
Iteration  24: 689667.748 ops/s
Iteration  25: 660755.716 ops/s
Iteration  26: 661460.325 ops/s
Iteration  27: 699156.561 ops/s
Iteration  28: 674699.153 ops/s
Iteration  29: 668338.132 ops/s
Iteration  30: 701090.611 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_repeatWhenFunctionReturnsNull":
  675129.218 ±(99.9%) 10565.961 ops/s [Average]
  (min, avg, max) = (646173.274, 675129.218, 701090.611), stdev = 15814.634
  CI (99.9%): [664563.257, 685695.179] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_repeatWhenFunctionReturnsNull  thrpt   30  675129.218 ± 10565.961  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 443848.654 ops/s
# Warmup Iteration   2: 1566555.627 ops/s
# Warmup Iteration   3: 2289443.353 ops/s
# Warmup Iteration   4: 2838034.319 ops/s
# Warmup Iteration   5: 2657225.061 ops/s
# Warmup Iteration   6: 2629598.372 ops/s
# Warmup Iteration   7: 2764562.665 ops/s
# Warmup Iteration   8: 2568362.494 ops/s
# Warmup Iteration   9: 2642260.659 ops/s
# Warmup Iteration  10: 2698842.104 ops/s
# Warmup Iteration  11: 2715501.731 ops/s
# Warmup Iteration  12: 2627905.833 ops/s
# Warmup Iteration  13: 2787861.619 ops/s
# Warmup Iteration  14: 2598730.620 ops/s
# Warmup Iteration  15: 2734168.507 ops/s
# Warmup Iteration  16: 2657419.294 ops/s
# Warmup Iteration  17: 2677405.034 ops/s
# Warmup Iteration  18: 2770128.695 ops/s
# Warmup Iteration  19: 2701972.597 ops/s
# Warmup Iteration  20: 2604255.584 ops/s
# Warmup Iteration  21: 2792506.688 ops/s
# Warmup Iteration  22: 2632028.144 ops/s
# Warmup Iteration  23: 2744168.536 ops/s
# Warmup Iteration  24: 2622154.415 ops/s
# Warmup Iteration  25: 2670010.267 ops/s
# Warmup Iteration  26: 2819752.186 ops/s
# Warmup Iteration  27: 2668055.544 ops/s
# Warmup Iteration  28: 2769121.360 ops/s
# Warmup Iteration  29: 2661361.773 ops/s
# Warmup Iteration  30: 2712499.067 ops/s
Iteration   1: 2728990.800 ops/s
Iteration   2: 2826776.732 ops/s
Iteration   3: 2671449.868 ops/s
Iteration   4: 2675929.494 ops/s
Iteration   5: 2763089.540 ops/s
Iteration   6: 2661350.715 ops/s
Iteration   7: 2613968.358 ops/s
Iteration   8: 2842760.724 ops/s
Iteration   9: 2606822.716 ops/s
Iteration  10: 2753110.005 ops/s
Iteration  11: 2816589.362 ops/s
Iteration  12: 2672331.360 ops/s
Iteration  13: 2759908.841 ops/s
Iteration  14: 2718564.788 ops/s
Iteration  15: 2665105.716 ops/s
Iteration  16: 2734518.487 ops/s
Iteration  17: 2746931.083 ops/s
Iteration  18: 2693174.206 ops/s
Iteration  19: 2780121.230 ops/s
Iteration  20: 2578994.378 ops/s
Iteration  21: 2725468.675 ops/s
Iteration  22: 2724333.675 ops/s
Iteration  23: 2735162.500 ops/s
Iteration  24: 2736846.888 ops/s
Iteration  25: 2722626.520 ops/s
Iteration  26: 2792934.638 ops/s
Iteration  27: 2693396.758 ops/s
Iteration  28: 2789391.632 ops/s
Iteration  29: 2756543.519 ops/s
Iteration  30: 2787903.944 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableBlockingStreamTest._Benchmark.benchmark_empty":
  2725836.572 ±(99.9%) 42797.196 ops/s [Average]
  (min, avg, max) = (2578994.378, 2725836.572, 2842760.724), stdev = 64056.833
  CI (99.9%): [2683039.376, 2768633.768] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableBlockingStreamTest._Benchmark.benchmark_empty  thrpt   30  2725836.572 ± 42797.196  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayErrorWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayErrorWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.744 ops/s
# Warmup Iteration   2: 12904.853 ops/s
# Warmup Iteration   3: 47941.734 ops/s
# Warmup Iteration   4: 63100.625 ops/s
# Warmup Iteration   5: 77946.786 ops/s
# Warmup Iteration   6: 77465.342 ops/s
# Warmup Iteration   7: 72309.978 ops/s
# Warmup Iteration   8: 69563.139 ops/s
# Warmup Iteration   9: 104021.174 ops/s
# Warmup Iteration  10: 123201.940 ops/s
# Warmup Iteration  11: 119265.067 ops/s
# Warmup Iteration  12: 103374.312 ops/s
# Warmup Iteration  13: 107003.648 ops/s
# Warmup Iteration  14: 88198.577 ops/s
# Warmup Iteration  15: 98122.981 ops/s
# Warmup Iteration  16: 130643.024 ops/s
# Warmup Iteration  17: 108448.093 ops/s
# Warmup Iteration  18: 260348.624 ops/s
# Warmup Iteration  19: 269687.357 ops/s
# Warmup Iteration  20: 285202.605 ops/s
# Warmup Iteration  21: 274590.786 ops/s
# Warmup Iteration  22: 303279.925 ops/s
# Warmup Iteration  23: 284520.191 ops/s
# Warmup Iteration  24: 291163.486 ops/s
# Warmup Iteration  25: 282129.735 ops/s
# Warmup Iteration  26: 299100.609 ops/s
# Warmup Iteration  27: 287060.380 ops/s
# Warmup Iteration  28: 301836.186 ops/s
# Warmup Iteration  29: 291571.708 ops/s
# Warmup Iteration  30: 288613.774 ops/s
Iteration   1: 295672.920 ops/s
Iteration   2: 299364.927 ops/s
Iteration   3: 285554.417 ops/s
Iteration   4: 280539.702 ops/s
Iteration   5: 275937.598 ops/s
Iteration   6: 298317.132 ops/s
Iteration   7: 302214.187 ops/s
Iteration   8: 287609.585 ops/s
Iteration   9: 294301.734 ops/s
Iteration  10: 309969.326 ops/s
Iteration  11: 289131.235 ops/s
Iteration  12: 283878.493 ops/s
Iteration  13: 300868.069 ops/s
Iteration  14: 275098.365 ops/s
Iteration  15: 296697.814 ops/s
Iteration  16: 295451.964 ops/s
Iteration  17: 289618.112 ops/s
Iteration  18: 300425.893 ops/s
Iteration  19: 296152.763 ops/s
Iteration  20: 300499.136 ops/s
Iteration  21: 288896.485 ops/s
Iteration  22: 292496.513 ops/s
Iteration  23: 296613.792 ops/s
Iteration  24: 281335.133 ops/s
Iteration  25: 299919.794 ops/s
Iteration  26: 296683.541 ops/s
Iteration  27: 301503.212 ops/s
Iteration  28: 289068.876 ops/s
Iteration  29: 293338.033 ops/s
Iteration  30: 302969.376 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayErrorWithError":
  293337.604 ±(99.9%) 5584.135 ops/s [Average]
  (min, avg, max) = (275098.365, 293337.604, 309969.326), stdev = 8358.071
  CI (99.9%): [287753.469, 298921.739] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_switchOnNextDelayErrorWithError  thrpt   30  293337.604 ± 5584.135  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.833 ops/s
# Warmup Iteration   2: 61516.608 ops/s
# Warmup Iteration   3: 197958.068 ops/s
# Warmup Iteration   4: 245211.160 ops/s
# Warmup Iteration   5: 424487.645 ops/s
# Warmup Iteration   6: 904737.022 ops/s
# Warmup Iteration   7: 976476.112 ops/s
# Warmup Iteration   8: 908824.462 ops/s
# Warmup Iteration   9: 913134.442 ops/s
# Warmup Iteration  10: 936653.249 ops/s
# Warmup Iteration  11: 936559.408 ops/s
# Warmup Iteration  12: 941728.976 ops/s
# Warmup Iteration  13: 996595.465 ops/s
# Warmup Iteration  14: 981977.827 ops/s
# Warmup Iteration  15: 940651.581 ops/s
# Warmup Iteration  16: 957985.004 ops/s
# Warmup Iteration  17: 963968.497 ops/s
# Warmup Iteration  18: 973858.457 ops/s
# Warmup Iteration  19: 954237.455 ops/s
# Warmup Iteration  20: 975375.379 ops/s
# Warmup Iteration  21: 950884.847 ops/s
# Warmup Iteration  22: 968722.197 ops/s
# Warmup Iteration  23: 969319.662 ops/s
# Warmup Iteration  24: 943353.921 ops/s
# Warmup Iteration  25: 959532.705 ops/s
# Warmup Iteration  26: 1001385.697 ops/s
# Warmup Iteration  27: 955203.711 ops/s
# Warmup Iteration  28: 987127.848 ops/s
# Warmup Iteration  29: 935631.971 ops/s
# Warmup Iteration  30: 983393.181 ops/s
Iteration   1: 948330.850 ops/s
Iteration   2: 950657.825 ops/s
Iteration   3: 992964.448 ops/s
Iteration   4: 952419.563 ops/s
Iteration   5: 970918.270 ops/s
Iteration   6: 951325.006 ops/s
Iteration   7: 958279.469 ops/s
Iteration   8: 960648.934 ops/s
Iteration   9: 966929.741 ops/s
Iteration  10: 971956.815 ops/s
Iteration  11: 956960.385 ops/s
Iteration  12: 990590.151 ops/s
Iteration  13: 972543.973 ops/s
Iteration  14: 953193.089 ops/s
Iteration  15: 984330.929 ops/s
Iteration  16: 940646.780 ops/s
Iteration  17: 991267.693 ops/s
Iteration  18: 939192.111 ops/s
Iteration  19: 934916.233 ops/s
Iteration  20: 979873.871 ops/s
Iteration  21: 939003.043 ops/s
Iteration  22: 978075.303 ops/s
Iteration  23: 937653.096 ops/s
Iteration  24: 966375.319 ops/s
Iteration  25: 1007753.204 ops/s
Iteration  26: 976439.230 ops/s
Iteration  27: 979869.576 ops/s
Iteration  28: 941714.887 ops/s
Iteration  29: 973816.701 ops/s
Iteration  30: 939633.430 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_dispose":
  963609.331 ±(99.9%) 13076.217 ops/s [Average]
  (min, avg, max) = (934916.233, 963609.331, 1007753.204), stdev = 19571.867
  CI (99.9%): [950533.114, 976685.548] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
ObservableSwitchTest._Benchmark.benchmark_dispose  thrpt   30  963609.331 ± 13076.217  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerIgnoresCancelAndErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerIgnoresCancelAndErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.736 ops/s
# Warmup Iteration   2: 19217.052 ops/s
# Warmup Iteration   3: 33381.877 ops/s
# Warmup Iteration   4: 46433.156 ops/s
# Warmup Iteration   5: 66979.967 ops/s
# Warmup Iteration   6: 45282.843 ops/s
# Warmup Iteration   7: 115855.482 ops/s
# Warmup Iteration   8: 114844.941 ops/s
# Warmup Iteration   9: 139107.086 ops/s
# Warmup Iteration  10: 155288.633 ops/s
# Warmup Iteration  11: 155544.554 ops/s
# Warmup Iteration  12: 160250.739 ops/s
# Warmup Iteration  13: 153432.599 ops/s
# Warmup Iteration  14: 157466.618 ops/s
# Warmup Iteration  15: 155344.960 ops/s
# Warmup Iteration  16: 160409.122 ops/s
# Warmup Iteration  17: 154611.540 ops/s
# Warmup Iteration  18: 153240.209 ops/s
# Warmup Iteration  19: 162956.544 ops/s
# Warmup Iteration  20: 154002.026 ops/s
# Warmup Iteration  21: 158224.385 ops/s
# Warmup Iteration  22: 153227.418 ops/s
# Warmup Iteration  23: 155383.703 ops/s
# Warmup Iteration  24: 160267.613 ops/s
# Warmup Iteration  25: 156076.432 ops/s
# Warmup Iteration  26: 154332.383 ops/s
# Warmup Iteration  27: 160821.883 ops/s
# Warmup Iteration  28: 159704.688 ops/s
# Warmup Iteration  29: 154247.996 ops/s
# Warmup Iteration  30: 162691.279 ops/s
Iteration   1: 150446.526 ops/s
Iteration   2: 154941.199 ops/s
Iteration   3: 162053.966 ops/s
Iteration   4: 158385.049 ops/s
Iteration   5: 152263.780 ops/s
Iteration   6: 160929.219 ops/s
Iteration   7: 161213.366 ops/s
Iteration   8: 153672.418 ops/s
Iteration   9: 158961.629 ops/s
Iteration  10: 156963.271 ops/s
Iteration  11: 151367.635 ops/s
Iteration  12: 162142.866 ops/s
Iteration  13: 152561.426 ops/s
Iteration  14: 162609.101 ops/s
Iteration  15: 153981.805 ops/s
Iteration  16: 160491.576 ops/s
Iteration  17: 154990.795 ops/s
Iteration  18: 157254.213 ops/s
Iteration  19: 162782.061 ops/s
Iteration  20: 153197.082 ops/s
Iteration  21: 153604.851 ops/s
Iteration  22: 162470.872 ops/s
Iteration  23: 153232.951 ops/s
Iteration  24: 163011.730 ops/s
Iteration  25: 152525.534 ops/s
Iteration  26: 144245.564 ops/s
Iteration  27: 157054.639 ops/s
Iteration  28: 152767.625 ops/s
Iteration  29: 162735.838 ops/s
Iteration  30: 158480.049 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerIgnoresCancelAndErrors":
  156711.288 ±(99.9%) 3169.905 ops/s [Average]
  (min, avg, max) = (144245.564, 156711.288, 163011.730), stdev = 4744.565
  CI (99.9%): [153541.383, 159881.193] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_innerIgnoresCancelAndErrors  thrpt   30  156711.288 ± 3169.905  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2061826.699 ops/s
# Warmup Iteration   2: 4766751.763 ops/s
# Warmup Iteration   3: 6483915.023 ops/s
# Warmup Iteration   4: 6367528.264 ops/s
# Warmup Iteration   5: 6597281.679 ops/s
# Warmup Iteration   6: 6386304.044 ops/s
# Warmup Iteration   7: 6361144.873 ops/s
# Warmup Iteration   8: 6651745.481 ops/s
# Warmup Iteration   9: 6603709.769 ops/s
# Warmup Iteration  10: 6538327.444 ops/s
# Warmup Iteration  11: 6246241.156 ops/s
# Warmup Iteration  12: 6428951.025 ops/s
# Warmup Iteration  13: 6661375.873 ops/s
# Warmup Iteration  14: 6187099.690 ops/s
# Warmup Iteration  15: 6756922.996 ops/s
# Warmup Iteration  16: 6696668.907 ops/s
# Warmup Iteration  17: 6581367.287 ops/s
# Warmup Iteration  18: 6237114.206 ops/s
# Warmup Iteration  19: 6484284.079 ops/s
# Warmup Iteration  20: 6738267.738 ops/s
# Warmup Iteration  21: 6372516.549 ops/s
# Warmup Iteration  22: 6525785.253 ops/s
# Warmup Iteration  23: 6744662.857 ops/s
# Warmup Iteration  24: 6443978.576 ops/s
# Warmup Iteration  25: 6683736.888 ops/s
# Warmup Iteration  26: 6661368.425 ops/s
# Warmup Iteration  27: 6727832.169 ops/s
# Warmup Iteration  28: 6679272.209 ops/s
# Warmup Iteration  29: 6313004.269 ops/s
# Warmup Iteration  30: 6638027.656 ops/s
Iteration   1: 6615209.233 ops/s
Iteration   2: 6395852.809 ops/s
Iteration   3: 6497253.025 ops/s
Iteration   4: 6588952.093 ops/s
Iteration   5: 6661406.502 ops/s
Iteration   6: 6425068.604 ops/s
Iteration   7: 6475329.727 ops/s
Iteration   8: 6654533.738 ops/s
Iteration   9: 6364710.778 ops/s
Iteration  10: 6784935.531 ops/s
Iteration  11: 6411291.057 ops/s
Iteration  12: 6458237.734 ops/s
Iteration  13: 6683691.603 ops/s
Iteration  14: 6357832.280 ops/s
Iteration  15: 6503050.784 ops/s
Iteration  16: 6732661.130 ops/s
Iteration  17: 6382937.547 ops/s
Iteration  18: 6327857.041 ops/s
Iteration  19: 6621991.077 ops/s
Iteration  20: 6695054.998 ops/s
Iteration  21: 6386198.312 ops/s
Iteration  22: 6557874.690 ops/s
Iteration  23: 6410910.815 ops/s
Iteration  24: 6594108.673 ops/s
Iteration  25: 6477011.772 ops/s
Iteration  26: 6593684.631 ops/s
Iteration  27: 6261508.231 ops/s
Iteration  28: 6378894.731 ops/s
Iteration  29: 6642151.217 ops/s
Iteration  30: 6175212.392 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_empty":
  6503847.092 ±(99.9%) 99318.574 ops/s [Average]
  (min, avg, max) = (6175212.392, 6503847.092, 6784935.531), stdev = 148655.378
  CI (99.9%): [6404528.517, 6603165.666] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_empty  thrpt   30  6503847.092 ± 99318.574  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1508184.228 ops/s
# Warmup Iteration   2: 2494271.149 ops/s
# Warmup Iteration   3: 3849123.564 ops/s
# Warmup Iteration   4: 4286865.160 ops/s
# Warmup Iteration   5: 4446351.165 ops/s
# Warmup Iteration   6: 4385804.175 ops/s
# Warmup Iteration   7: 4498391.816 ops/s
# Warmup Iteration   8: 4368759.205 ops/s
# Warmup Iteration   9: 4513293.128 ops/s
# Warmup Iteration  10: 4485892.431 ops/s
# Warmup Iteration  11: 4242650.654 ops/s
# Warmup Iteration  12: 4489975.996 ops/s
# Warmup Iteration  13: 4325879.893 ops/s
# Warmup Iteration  14: 4343685.458 ops/s
# Warmup Iteration  15: 4567669.694 ops/s
# Warmup Iteration  16: 4322680.246 ops/s
# Warmup Iteration  17: 4618742.477 ops/s
# Warmup Iteration  18: 4291948.400 ops/s
# Warmup Iteration  19: 4557453.193 ops/s
# Warmup Iteration  20: 4268572.591 ops/s
# Warmup Iteration  21: 4495128.943 ops/s
# Warmup Iteration  22: 4456088.279 ops/s
# Warmup Iteration  23: 4319509.108 ops/s
# Warmup Iteration  24: 4297214.794 ops/s
# Warmup Iteration  25: 4532706.429 ops/s
# Warmup Iteration  26: 4524036.001 ops/s
# Warmup Iteration  27: 4326977.475 ops/s
# Warmup Iteration  28: 4577296.206 ops/s
# Warmup Iteration  29: 4249179.658 ops/s
# Warmup Iteration  30: 4414832.804 ops/s
Iteration   1: 4530010.098 ops/s
Iteration   2: 4318035.011 ops/s
Iteration   3: 4472690.712 ops/s
Iteration   4: 4463141.650 ops/s
Iteration   5: 4335895.079 ops/s
Iteration   6: 4456788.290 ops/s
Iteration   7: 4490564.115 ops/s
Iteration   8: 4510040.376 ops/s
Iteration   9: 4382943.667 ops/s
Iteration  10: 4546380.363 ops/s
Iteration  11: 4288599.044 ops/s
Iteration  12: 4394437.412 ops/s
Iteration  13: 4608106.035 ops/s
Iteration  14: 4326887.726 ops/s
Iteration  15: 4420015.382 ops/s
Iteration  16: 4383722.744 ops/s
Iteration  17: 4442150.625 ops/s
Iteration  18: 4418542.345 ops/s
Iteration  19: 4462930.801 ops/s
Iteration  20: 4390332.933 ops/s
Iteration  21: 4548844.265 ops/s
Iteration  22: 4306721.582 ops/s
Iteration  23: 4519985.583 ops/s
Iteration  24: 4314984.240 ops/s
Iteration  25: 4396393.007 ops/s
Iteration  26: 4611954.349 ops/s
Iteration  27: 4538813.441 ops/s
Iteration  28: 4196850.827 ops/s
Iteration  29: 4577545.359 ops/s
Iteration  30: 4349368.518 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_dispose":
  4433455.853 ±(99.9%) 68926.430 ops/s [Average]
  (min, avg, max) = (4196850.827, 4433455.853, 4611954.349), stdev = 103165.843
  CI (99.9%): [4364529.423, 4502382.283] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_dispose  thrpt   30  4433455.853 ± 68926.430  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_cancelWhileRunning$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_cancelWhileRunning

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1965846.098 ops/s
# Warmup Iteration   2: 5476307.911 ops/s
# Warmup Iteration   3: 8087729.072 ops/s
# Warmup Iteration   4: 7729915.463 ops/s
# Warmup Iteration   5: 8277518.363 ops/s
# Warmup Iteration   6: 7896603.616 ops/s
# Warmup Iteration   7: 7776048.273 ops/s
# Warmup Iteration   8: 7903526.925 ops/s
# Warmup Iteration   9: 8217635.834 ops/s
# Warmup Iteration  10: 7765355.496 ops/s
# Warmup Iteration  11: 7968035.950 ops/s
# Warmup Iteration  12: 8190388.037 ops/s
# Warmup Iteration  13: 7769124.656 ops/s
# Warmup Iteration  14: 7916453.651 ops/s
# Warmup Iteration  15: 8289627.495 ops/s
# Warmup Iteration  16: 8107552.081 ops/s
# Warmup Iteration  17: 7767054.248 ops/s
# Warmup Iteration  18: 8155809.852 ops/s
# Warmup Iteration  19: 7931329.749 ops/s
# Warmup Iteration  20: 8093394.458 ops/s
# Warmup Iteration  21: 7990955.676 ops/s
# Warmup Iteration  22: 7872858.955 ops/s
# Warmup Iteration  23: 8227103.612 ops/s
# Warmup Iteration  24: 7963416.034 ops/s
# Warmup Iteration  25: 7783435.875 ops/s
# Warmup Iteration  26: 8175752.385 ops/s
# Warmup Iteration  27: 7836516.639 ops/s
# Warmup Iteration  28: 7758092.501 ops/s
# Warmup Iteration  29: 8274039.329 ops/s
# Warmup Iteration  30: 7941407.252 ops/s
Iteration   1: 7799009.392 ops/s
Iteration   2: 8296578.779 ops/s
Iteration   3: 8170766.660 ops/s
Iteration   4: 7781165.782 ops/s
Iteration   5: 8027038.181 ops/s
Iteration   6: 8335385.995 ops/s
Iteration   7: 7792406.178 ops/s
Iteration   8: 8072391.630 ops/s
Iteration   9: 7632264.037 ops/s
Iteration  10: 8149288.056 ops/s
Iteration  11: 8200480.433 ops/s
Iteration  12: 7864663.660 ops/s
Iteration  13: 8161573.320 ops/s
Iteration  14: 7774485.084 ops/s
Iteration  15: 7704110.346 ops/s
Iteration  16: 8226161.604 ops/s
Iteration  17: 7779947.525 ops/s
Iteration  18: 7928462.476 ops/s
Iteration  19: 8150335.059 ops/s
Iteration  20: 8016079.992 ops/s
Iteration  21: 8111470.075 ops/s
Iteration  22: 7656587.398 ops/s
Iteration  23: 8192902.261 ops/s
Iteration  24: 7824036.350 ops/s
Iteration  25: 7856433.915 ops/s
Iteration  26: 8339477.394 ops/s
Iteration  27: 7704795.303 ops/s
Iteration  28: 8153403.744 ops/s
Iteration  29: 6164572.737 ops/s
Iteration  30: 7969840.168 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromActionTest._Benchmark.benchmark_cancelWhileRunning":
  7927870.451 ±(99.9%) 264167.176 ops/s [Average]
  (min, avg, max) = (6164572.737, 7927870.451, 8339477.394), stdev = 395393.023
  CI (99.9%): [7663703.275, 8192037.627] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score        Error  Units
ObservableFromActionTest._Benchmark.benchmark_cancelWhileRunning  thrpt   30  7927870.451 ± 264167.176  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnableTest._Benchmark.benchmark_cancelWhileRunning$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnableTest._Benchmark.benchmark_cancelWhileRunning

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2143167.228 ops/s
# Warmup Iteration   2: 5367245.266 ops/s
# Warmup Iteration   3: 7907307.621 ops/s
# Warmup Iteration   4: 7950305.795 ops/s
# Warmup Iteration   5: 7990198.837 ops/s
# Warmup Iteration   6: 8281039.353 ops/s
# Warmup Iteration   7: 7635406.770 ops/s
# Warmup Iteration   8: 8163493.227 ops/s
# Warmup Iteration   9: 7872137.970 ops/s
# Warmup Iteration  10: 7743940.691 ops/s
# Warmup Iteration  11: 8066459.594 ops/s
# Warmup Iteration  12: 8038053.171 ops/s
# Warmup Iteration  13: 7996300.651 ops/s
# Warmup Iteration  14: 8226916.036 ops/s
# Warmup Iteration  15: 7780686.027 ops/s
# Warmup Iteration  16: 7966061.764 ops/s
# Warmup Iteration  17: 7914676.984 ops/s
# Warmup Iteration  18: 8290038.086 ops/s
# Warmup Iteration  19: 7898870.806 ops/s
# Warmup Iteration  20: 8184320.446 ops/s
# Warmup Iteration  21: 8065534.466 ops/s
# Warmup Iteration  22: 7810498.478 ops/s
# Warmup Iteration  23: 7998824.954 ops/s
# Warmup Iteration  24: 8149282.055 ops/s
# Warmup Iteration  25: 7913645.958 ops/s
# Warmup Iteration  26: 8290551.628 ops/s
# Warmup Iteration  27: 7748912.419 ops/s
# Warmup Iteration  28: 8038358.074 ops/s
# Warmup Iteration  29: 8073302.346 ops/s
# Warmup Iteration  30: 7873964.356 ops/s
Iteration   1: 7943908.566 ops/s
Iteration   2: 8327052.473 ops/s
Iteration   3: 7689992.951 ops/s
Iteration   4: 8057195.943 ops/s
Iteration   5: 8095023.842 ops/s
Iteration   6: 7552927.879 ops/s
Iteration   7: 8207152.205 ops/s
Iteration   8: 7867724.299 ops/s
Iteration   9: 8032794.425 ops/s
Iteration  10: 7841883.484 ops/s
Iteration  11: 8082701.958 ops/s
Iteration  12: 7977832.867 ops/s
Iteration  13: 7817201.317 ops/s
Iteration  14: 8119679.818 ops/s
Iteration  15: 8010284.809 ops/s
Iteration  16: 7836346.042 ops/s
Iteration  17: 8009438.365 ops/s
Iteration  18: 8081498.679 ops/s
Iteration  19: 7846340.003 ops/s
Iteration  20: 8268821.837 ops/s
Iteration  21: 7901391.544 ops/s
Iteration  22: 8108696.887 ops/s
Iteration  23: 8062213.671 ops/s
Iteration  24: 7802954.084 ops/s
Iteration  25: 7984796.081 ops/s
Iteration  26: 7859165.233 ops/s
Iteration  27: 8097074.914 ops/s
Iteration  28: 7862498.671 ops/s
Iteration  29: 8092631.037 ops/s
Iteration  30: 7953913.574 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromRunnableTest._Benchmark.benchmark_cancelWhileRunning":
  7979704.582 ±(99.9%) 110996.539 ops/s [Average]
  (min, avg, max) = (7552927.879, 7979704.582, 8327052.473), stdev = 166134.408
  CI (99.9%): [7868708.042, 8090701.121] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
ObservableFromRunnableTest._Benchmark.benchmark_cancelWhileRunning  thrpt   30  7979704.582 ± 110996.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_noDisconnectSomeoneElse$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_noDisconnectSomeoneElse

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1878774.312 ops/s
# Warmup Iteration   2: 4374430.908 ops/s
# Warmup Iteration   3: 5645403.347 ops/s
# Warmup Iteration   4: 5949440.698 ops/s
# Warmup Iteration   5: 6119836.599 ops/s
# Warmup Iteration   6: 6281205.151 ops/s
# Warmup Iteration   7: 6146628.673 ops/s
# Warmup Iteration   8: 6060502.540 ops/s
# Warmup Iteration   9: 6237779.690 ops/s
# Warmup Iteration  10: 6301007.718 ops/s
# Warmup Iteration  11: 5950415.040 ops/s
# Warmup Iteration  12: 6129198.355 ops/s
# Warmup Iteration  13: 6211891.417 ops/s
# Warmup Iteration  14: 6341968.986 ops/s
# Warmup Iteration  15: 6159090.704 ops/s
# Warmup Iteration  16: 6080571.419 ops/s
# Warmup Iteration  17: 6386357.979 ops/s
# Warmup Iteration  18: 6042511.486 ops/s
# Warmup Iteration  19: 6345707.213 ops/s
# Warmup Iteration  20: 6182955.970 ops/s
# Warmup Iteration  21: 6219458.775 ops/s
# Warmup Iteration  22: 6000680.095 ops/s
# Warmup Iteration  23: 6184323.819 ops/s
# Warmup Iteration  24: 6202873.327 ops/s
# Warmup Iteration  25: 5897336.744 ops/s
# Warmup Iteration  26: 6271807.765 ops/s
# Warmup Iteration  27: 6271565.527 ops/s
# Warmup Iteration  28: 5929116.380 ops/s
# Warmup Iteration  29: 6413338.482 ops/s
# Warmup Iteration  30: 5999250.328 ops/s
Iteration   1: 6209774.827 ops/s
Iteration   2: 6299843.430 ops/s
Iteration   3: 6262708.921 ops/s
Iteration   4: 6067366.761 ops/s
Iteration   5: 6469612.137 ops/s
Iteration   6: 6451531.318 ops/s
Iteration   7: 6006635.088 ops/s
Iteration   8: 6277474.616 ops/s
Iteration   9: 6043825.033 ops/s
Iteration  10: 6350244.126 ops/s
Iteration  11: 6173210.669 ops/s
Iteration  12: 5975217.789 ops/s
Iteration  13: 6225464.171 ops/s
Iteration  14: 6184666.909 ops/s
Iteration  15: 5947221.758 ops/s
Iteration  16: 6284882.292 ops/s
Iteration  17: 6074557.761 ops/s
Iteration  18: 6215932.452 ops/s
Iteration  19: 6420914.376 ops/s
Iteration  20: 6248055.950 ops/s
Iteration  21: 6144009.114 ops/s
Iteration  22: 6275234.376 ops/s
Iteration  23: 5042700.964 ops/s
Iteration  24: 5995024.644 ops/s
Iteration  25: 6463872.676 ops/s
Iteration  26: 6301833.495 ops/s
Iteration  27: 6154042.441 ops/s
Iteration  28: 6379827.238 ops/s
Iteration  29: 6371807.850 ops/s
Iteration  30: 6039480.344 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_noDisconnectSomeoneElse":
  6178565.784 ±(99.9%) 175206.467 ops/s [Average]
  (min, avg, max) = (5042700.964, 6178565.784, 6469612.137), stdev = 262240.811
  CI (99.9%): [6003359.317, 6353772.251] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score        Error  Units
ObservablePublishTest._Benchmark.benchmark_noDisconnectSomeoneElse  thrpt   30  6178565.784 ± 175206.467  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_disposedOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_disposedOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2325508.542 ops/s
# Warmup Iteration   2: 5936309.075 ops/s
# Warmup Iteration   3: 7337002.104 ops/s
# Warmup Iteration   4: 7705793.966 ops/s
# Warmup Iteration   5: 7805851.177 ops/s
# Warmup Iteration   6: 7685642.148 ops/s
# Warmup Iteration   7: 7456631.528 ops/s
# Warmup Iteration   8: 7721552.342 ops/s
# Warmup Iteration   9: 7668402.786 ops/s
# Warmup Iteration  10: 7590515.181 ops/s
# Warmup Iteration  11: 7507942.231 ops/s
# Warmup Iteration  12: 8136960.560 ops/s
# Warmup Iteration  13: 7587803.351 ops/s
# Warmup Iteration  14: 7622781.470 ops/s
# Warmup Iteration  15: 7871788.883 ops/s
# Warmup Iteration  16: 7571688.795 ops/s
# Warmup Iteration  17: 7939482.946 ops/s
# Warmup Iteration  18: 7957221.736 ops/s
# Warmup Iteration  19: 7395993.012 ops/s
# Warmup Iteration  20: 7957450.667 ops/s
# Warmup Iteration  21: 7529543.519 ops/s
# Warmup Iteration  22: 7918690.457 ops/s
# Warmup Iteration  23: 7549287.398 ops/s
# Warmup Iteration  24: 7872179.423 ops/s
# Warmup Iteration  25: 7910335.235 ops/s
# Warmup Iteration  26: 7479946.963 ops/s
# Warmup Iteration  27: 7887797.262 ops/s
# Warmup Iteration  28: 8043291.938 ops/s
# Warmup Iteration  29: 7531877.988 ops/s
# Warmup Iteration  30: 8042320.646 ops/s
Iteration   1: 7849745.099 ops/s
Iteration   2: 7444701.013 ops/s
Iteration   3: 7704610.060 ops/s
Iteration   4: 7793122.496 ops/s
Iteration   5: 7654973.414 ops/s
Iteration   6: 7895958.292 ops/s
Iteration   7: 7488270.625 ops/s
Iteration   8: 7753169.134 ops/s
Iteration   9: 7516278.089 ops/s
Iteration  10: 7802398.542 ops/s
Iteration  11: 7905861.387 ops/s
Iteration  12: 7618086.942 ops/s
Iteration  13: 7986260.547 ops/s
Iteration  14: 7534028.973 ops/s
Iteration  15: 7508365.968 ops/s
Iteration  16: 8022139.095 ops/s
Iteration  17: 7644865.382 ops/s
Iteration  18: 7604305.120 ops/s
Iteration  19: 7775229.628 ops/s
Iteration  20: 8069993.568 ops/s
Iteration  21: 7595082.960 ops/s
Iteration  22: 7817918.105 ops/s
Iteration  23: 7523249.359 ops/s
Iteration  24: 7634640.775 ops/s
Iteration  25: 7765891.828 ops/s
Iteration  26: 7627527.255 ops/s
Iteration  27: 8028196.772 ops/s
Iteration  28: 7418301.794 ops/s
Iteration  29: 7691169.106 ops/s
Iteration  30: 7953754.419 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_disposedOnArrival":
  7720936.525 ±(99.9%) 123496.622 ops/s [Average]
  (min, avg, max) = (7418301.794, 7720936.525, 8069993.568), stdev = 184843.944
  CI (99.9%): [7597439.903, 7844433.147] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
ObservableFromCallableTest._Benchmark.benchmark_disposedOnArrival  thrpt   30  7720936.525 ± 123496.622  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_disposedOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_disposedOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1988132.884 ops/s
# Warmup Iteration   2: 5671411.065 ops/s
# Warmup Iteration   3: 7618375.090 ops/s
# Warmup Iteration   4: 7746628.517 ops/s
# Warmup Iteration   5: 7829043.030 ops/s
# Warmup Iteration   6: 7510398.081 ops/s
# Warmup Iteration   7: 7978098.191 ops/s
# Warmup Iteration   8: 7994954.549 ops/s
# Warmup Iteration   9: 7380230.896 ops/s
# Warmup Iteration  10: 7919330.199 ops/s
# Warmup Iteration  11: 7744801.484 ops/s
# Warmup Iteration  12: 7269808.161 ops/s
# Warmup Iteration  13: 8015070.288 ops/s
# Warmup Iteration  14: 7903477.260 ops/s
# Warmup Iteration  15: 7580308.333 ops/s
# Warmup Iteration  16: 7959938.561 ops/s
# Warmup Iteration  17: 7958306.243 ops/s
# Warmup Iteration  18: 7447178.738 ops/s
# Warmup Iteration  19: 7487791.287 ops/s
# Warmup Iteration  20: 7894665.979 ops/s
# Warmup Iteration  21: 7512888.334 ops/s
# Warmup Iteration  22: 7778024.153 ops/s
# Warmup Iteration  23: 7976404.051 ops/s
# Warmup Iteration  24: 7780343.373 ops/s
# Warmup Iteration  25: 7464809.683 ops/s
# Warmup Iteration  26: 8035317.166 ops/s
# Warmup Iteration  27: 7592124.207 ops/s
# Warmup Iteration  28: 7765393.772 ops/s
# Warmup Iteration  29: 7574499.809 ops/s
# Warmup Iteration  30: 7492487.609 ops/s
Iteration   1: 8062791.756 ops/s
Iteration   2: 7476506.062 ops/s
Iteration   3: 7792735.960 ops/s
Iteration   4: 7823589.328 ops/s
Iteration   5: 7740974.548 ops/s
Iteration   6: 7633650.168 ops/s
Iteration   7: 7662907.526 ops/s
Iteration   8: 8107985.608 ops/s
Iteration   9: 7395363.098 ops/s
Iteration  10: 7986108.894 ops/s
Iteration  11: 7569613.660 ops/s
Iteration  12: 7608875.124 ops/s
Iteration  13: 7949044.136 ops/s
Iteration  14: 7363412.355 ops/s
Iteration  15: 7660222.775 ops/s
Iteration  16: 7853688.318 ops/s
Iteration  17: 7539134.465 ops/s
Iteration  18: 6592831.475 ops/s
Iteration  19: 7679358.131 ops/s
Iteration  20: 7761524.870 ops/s
Iteration  21: 7656067.371 ops/s
Iteration  22: 7721245.663 ops/s
Iteration  23: 7921508.642 ops/s
Iteration  24: 7493984.329 ops/s
Iteration  25: 7819036.018 ops/s
Iteration  26: 7467538.277 ops/s
Iteration  27: 7630287.791 ops/s
Iteration  28: 7965075.451 ops/s
Iteration  29: 7676306.150 ops/s
Iteration  30: 7886166.888 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_disposedOnArrival":
  7683251.161 ±(99.9%) 188145.231 ops/s [Average]
  (min, avg, max) = (6592831.475, 7683251.161, 8107985.608), stdev = 281606.946
  CI (99.9%): [7495105.930, 7871396.393] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score        Error  Units
ObservableFromSupplierTest._Benchmark.benchmark_disposedOnArrival  thrpt   30  7683251.161 ± 188145.231  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_consumerDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_consumerDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 737389.948 ops/s
# Warmup Iteration   2: 2966169.246 ops/s
# Warmup Iteration   3: 4132452.562 ops/s
# Warmup Iteration   4: 4889404.040 ops/s
# Warmup Iteration   5: 4671731.232 ops/s
# Warmup Iteration   6: 4634546.527 ops/s
# Warmup Iteration   7: 4766967.850 ops/s
# Warmup Iteration   8: 4595485.054 ops/s
# Warmup Iteration   9: 4845649.586 ops/s
# Warmup Iteration  10: 4608679.879 ops/s
# Warmup Iteration  11: 4630727.956 ops/s
# Warmup Iteration  12: 4797551.090 ops/s
# Warmup Iteration  13: 4787091.880 ops/s
# Warmup Iteration  14: 4798937.652 ops/s
# Warmup Iteration  15: 4705108.034 ops/s
# Warmup Iteration  16: 4643797.099 ops/s
# Warmup Iteration  17: 4832652.821 ops/s
# Warmup Iteration  18: 4660113.762 ops/s
# Warmup Iteration  19: 4898496.858 ops/s
# Warmup Iteration  20: 4824884.591 ops/s
# Warmup Iteration  21: 4647652.831 ops/s
# Warmup Iteration  22: 4846422.793 ops/s
# Warmup Iteration  23: 4543502.768 ops/s
# Warmup Iteration  24: 4582715.441 ops/s
# Warmup Iteration  25: 4808560.351 ops/s
# Warmup Iteration  26: 4610300.319 ops/s
# Warmup Iteration  27: 4734444.268 ops/s
# Warmup Iteration  28: 4629474.321 ops/s
# Warmup Iteration  29: 4841250.628 ops/s
# Warmup Iteration  30: 4635501.332 ops/s
Iteration   1: 4724243.278 ops/s
Iteration   2: 4653983.041 ops/s
Iteration   3: 4803573.766 ops/s
Iteration   4: 4704575.392 ops/s
Iteration   5: 4737333.549 ops/s
Iteration   6: 4724680.546 ops/s
Iteration   7: 4708837.095 ops/s
Iteration   8: 4716090.921 ops/s
Iteration   9: 4564486.221 ops/s
Iteration  10: 4850427.523 ops/s
Iteration  11: 4657190.101 ops/s
Iteration  12: 4733038.753 ops/s
Iteration  13: 4866933.879 ops/s
Iteration  14: 4610685.855 ops/s
Iteration  15: 4653520.163 ops/s
Iteration  16: 4907809.530 ops/s
Iteration  17: 4627504.433 ops/s
Iteration  18: 4686647.237 ops/s
Iteration  19: 4804247.793 ops/s
Iteration  20: 4652385.533 ops/s
Iteration  21: 4801726.890 ops/s
Iteration  22: 4648796.945 ops/s
Iteration  23: 4695205.908 ops/s
Iteration  24: 4722453.891 ops/s
Iteration  25: 4634251.752 ops/s
Iteration  26: 4753023.066 ops/s
Iteration  27: 4747452.602 ops/s
Iteration  28: 4733365.767 ops/s
Iteration  29: 4902400.287 ops/s
Iteration  30: 4655763.998 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithCompletableTest._Benchmark.benchmark_consumerDisposed":
  4722754.524 ±(99.9%) 56969.463 ops/s [Average]
  (min, avg, max) = (4564486.221, 4722754.524, 4907809.530), stdev = 85269.217
  CI (99.9%): [4665785.061, 4779723.987] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
ObservableConcatWithCompletableTest._Benchmark.benchmark_consumerDisposed  thrpt   30  4722754.524 ± 56969.463  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.SerialDisposableTests._Benchmark.benchmark_unsubscribingWithoutUnderlyingDoesNothing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.SerialDisposableTests._Benchmark.benchmark_unsubscribingWithoutUnderlyingDoesNothing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16831069.687 ops/s
# Warmup Iteration   2: 22939851.558 ops/s
# Warmup Iteration   3: 29269301.112 ops/s
# Warmup Iteration   4: 28880352.509 ops/s
# Warmup Iteration   5: 30208396.771 ops/s
# Warmup Iteration   6: 29556065.869 ops/s
# Warmup Iteration   7: 29149994.038 ops/s
# Warmup Iteration   8: 28824362.254 ops/s
# Warmup Iteration   9: 29087682.757 ops/s
# Warmup Iteration  10: 29801043.417 ops/s
# Warmup Iteration  11: 27559919.335 ops/s
# Warmup Iteration  12: 30121934.380 ops/s
# Warmup Iteration  13: 28301866.531 ops/s
# Warmup Iteration  14: 28952518.462 ops/s
# Warmup Iteration  15: 28586338.671 ops/s
# Warmup Iteration  16: 29114437.492 ops/s
# Warmup Iteration  17: 28541974.637 ops/s
# Warmup Iteration  18: 27815202.073 ops/s
# Warmup Iteration  19: 30712176.814 ops/s
# Warmup Iteration  20: 28498696.637 ops/s
# Warmup Iteration  21: 28958755.273 ops/s
# Warmup Iteration  22: 28574739.839 ops/s
# Warmup Iteration  23: 28905354.890 ops/s
# Warmup Iteration  24: 29812606.387 ops/s
# Warmup Iteration  25: 27722847.774 ops/s
# Warmup Iteration  26: 28470902.810 ops/s
# Warmup Iteration  27: 28901204.798 ops/s
# Warmup Iteration  28: 29480798.523 ops/s
# Warmup Iteration  29: 28836666.703 ops/s
# Warmup Iteration  30: 28651544.649 ops/s
Iteration   1: 29447298.890 ops/s
Iteration   2: 28520770.577 ops/s
Iteration   3: 28615152.480 ops/s
Iteration   4: 29043273.286 ops/s
Iteration   5: 28689263.729 ops/s
Iteration   6: 28890989.676 ops/s
Iteration   7: 30286072.960 ops/s
Iteration   8: 28048834.095 ops/s
Iteration   9: 29818146.734 ops/s
Iteration  10: 29116311.192 ops/s
Iteration  11: 28969988.097 ops/s
Iteration  12: 24849963.079 ops/s
Iteration  13: 24942703.145 ops/s
Iteration  14: 29450629.896 ops/s
Iteration  15: 28161089.640 ops/s
Iteration  16: 28071944.860 ops/s
Iteration  17: 30320224.201 ops/s
Iteration  18: 29780916.516 ops/s
Iteration  19: 28234557.294 ops/s
Iteration  20: 30039908.516 ops/s
Iteration  21: 27632953.029 ops/s
Iteration  22: 29245011.664 ops/s
Iteration  23: 28711600.026 ops/s
Iteration  24: 28838317.601 ops/s
Iteration  25: 29841888.308 ops/s
Iteration  26: 28641413.168 ops/s
Iteration  27: 29089302.346 ops/s
Iteration  28: 28102427.197 ops/s
Iteration  29: 28793060.851 ops/s
Iteration  30: 30098143.645 ops/s


Result "io.reactivex.rxjava3.disposables.SerialDisposableTests._Benchmark.benchmark_unsubscribingWithoutUnderlyingDoesNothing":
  28743071.890 ±(99.9%) 844747.169 ops/s [Average]
  (min, avg, max) = (24849963.079, 28743071.890, 30320224.201), stdev = 1264377.890
  CI (99.9%): [27898324.721, 29587819.059] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt         Score        Error  Units
SerialDisposableTests._Benchmark.benchmark_unsubscribingWithoutUnderlyingDoesNothing  thrpt   30  28743071.890 ± 844747.169  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.disposables.DisposableHelperTest._Benchmark.benchmark_setReplaceNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.disposables.DisposableHelperTest._Benchmark.benchmark_setReplaceNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14696951.122 ops/s
# Warmup Iteration   2: 17453173.601 ops/s
# Warmup Iteration   3: 27913970.895 ops/s
# Warmup Iteration   4: 27192265.890 ops/s
# Warmup Iteration   5: 28567715.076 ops/s
# Warmup Iteration   6: 28212905.219 ops/s
# Warmup Iteration   7: 26496757.124 ops/s
# Warmup Iteration   8: 28402033.294 ops/s
# Warmup Iteration   9: 27103970.200 ops/s
# Warmup Iteration  10: 26120755.250 ops/s
# Warmup Iteration  11: 28338299.942 ops/s
# Warmup Iteration  12: 26555103.712 ops/s
# Warmup Iteration  13: 27187036.310 ops/s
# Warmup Iteration  14: 26521619.596 ops/s
# Warmup Iteration  15: 26783468.344 ops/s
# Warmup Iteration  16: 28595578.776 ops/s
# Warmup Iteration  17: 26704267.129 ops/s
# Warmup Iteration  18: 27905641.365 ops/s
# Warmup Iteration  19: 27513108.696 ops/s
# Warmup Iteration  20: 28271084.124 ops/s
# Warmup Iteration  21: 27211186.210 ops/s
# Warmup Iteration  22: 27228175.961 ops/s
# Warmup Iteration  23: 26599075.967 ops/s
# Warmup Iteration  24: 28253793.693 ops/s
# Warmup Iteration  25: 26829080.283 ops/s
# Warmup Iteration  26: 27387742.878 ops/s
# Warmup Iteration  27: 28014950.523 ops/s
# Warmup Iteration  28: 26520717.755 ops/s
# Warmup Iteration  29: 26966172.820 ops/s
# Warmup Iteration  30: 27676156.532 ops/s
Iteration   1: 26638145.024 ops/s
Iteration   2: 27065152.309 ops/s
Iteration   3: 28177972.400 ops/s
Iteration   4: 27408051.353 ops/s
Iteration   5: 26637146.524 ops/s
Iteration   6: 27946372.471 ops/s
Iteration   7: 27056353.583 ops/s
Iteration   8: 27306836.108 ops/s
Iteration   9: 27120369.173 ops/s
Iteration  10: 26881830.117 ops/s
Iteration  11: 27956026.554 ops/s
Iteration  12: 26686672.732 ops/s
Iteration  13: 27895726.821 ops/s
Iteration  14: 27884344.825 ops/s
Iteration  15: 26403021.338 ops/s
Iteration  16: 27480786.522 ops/s
Iteration  17: 27201645.545 ops/s
Iteration  18: 26842013.356 ops/s
Iteration  19: 28556298.828 ops/s
Iteration  20: 26721838.044 ops/s
Iteration  21: 27129984.164 ops/s
Iteration  22: 28480391.299 ops/s
Iteration  23: 26848092.585 ops/s
Iteration  24: 27819164.957 ops/s
Iteration  25: 27925413.392 ops/s
Iteration  26: 26931249.902 ops/s
Iteration  27: 28242591.984 ops/s
Iteration  28: 26897927.910 ops/s
Iteration  29: 25940068.133 ops/s
Iteration  30: 27950561.438 ops/s


Result "io.reactivex.rxjava3.internal.disposables.DisposableHelperTest._Benchmark.benchmark_setReplaceNull":
  27334401.646 ±(99.9%) 440072.977 ops/s [Average]
  (min, avg, max) = (25940068.133, 27334401.646, 28556298.828), stdev = 658680.565
  CI (99.9%): [26894328.669, 27774474.623] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt         Score        Error  Units
DisposableHelperTest._Benchmark.benchmark_setReplaceNull  thrpt   30  27334401.646 ± 440072.977  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_onCompleteCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_onCompleteCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 404873.489 ops/s
# Warmup Iteration   2: 593487.204 ops/s
# Warmup Iteration   3: 669830.310 ops/s
# Warmup Iteration   4: 685996.554 ops/s
# Warmup Iteration   5: 661135.301 ops/s
# Warmup Iteration   6: 700533.732 ops/s
# Warmup Iteration   7: 692748.294 ops/s
# Warmup Iteration   8: 654520.542 ops/s
# Warmup Iteration   9: 696551.673 ops/s
# Warmup Iteration  10: 690129.722 ops/s
# Warmup Iteration  11: 655744.745 ops/s
# Warmup Iteration  12: 689533.937 ops/s
# Warmup Iteration  13: 677221.997 ops/s
# Warmup Iteration  14: 655547.145 ops/s
# Warmup Iteration  15: 669296.715 ops/s
# Warmup Iteration  16: 685552.329 ops/s
# Warmup Iteration  17: 705139.972 ops/s
# Warmup Iteration  18: 684709.537 ops/s
# Warmup Iteration  19: 738625.846 ops/s
# Warmup Iteration  20: 693669.283 ops/s
# Warmup Iteration  21: 729421.096 ops/s
# Warmup Iteration  22: 689972.750 ops/s
# Warmup Iteration  23: 735098.693 ops/s
# Warmup Iteration  24: 720610.244 ops/s
# Warmup Iteration  25: 694178.244 ops/s
# Warmup Iteration  26: 702014.959 ops/s
# Warmup Iteration  27: 720018.629 ops/s
# Warmup Iteration  28: 715037.663 ops/s
# Warmup Iteration  29: 730524.066 ops/s
# Warmup Iteration  30: 680438.988 ops/s
Iteration   1: 734724.140 ops/s
Iteration   2: 691521.962 ops/s
Iteration   3: 708802.321 ops/s
Iteration   4: 683918.435 ops/s
Iteration   5: 717052.668 ops/s
Iteration   6: 732116.585 ops/s
Iteration   7: 533847.646 ops/s
Iteration   8: 704495.779 ops/s
Iteration   9: 727570.483 ops/s
Iteration  10: 724884.481 ops/s
Iteration  11: 696666.678 ops/s
Iteration  12: 741017.721 ops/s
Iteration  13: 693671.279 ops/s
Iteration  14: 718245.644 ops/s
Iteration  15: 727779.787 ops/s
Iteration  16: 685076.360 ops/s
Iteration  17: 740721.461 ops/s
Iteration  18: 691521.923 ops/s
Iteration  19: 703166.476 ops/s
Iteration  20: 732473.345 ops/s
Iteration  21: 714795.971 ops/s
Iteration  22: 706707.934 ops/s
Iteration  23: 704681.321 ops/s
Iteration  24: 741277.291 ops/s
Iteration  25: 707640.992 ops/s
Iteration  26: 721870.744 ops/s
Iteration  27: 696958.465 ops/s
Iteration  28: 707038.001 ops/s
Iteration  29: 738593.190 ops/s
Iteration  30: 694702.045 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_onCompleteCrash":
  707451.371 ±(99.9%) 24885.800 ops/s [Average]
  (min, avg, max) = (533847.646, 707451.371, 741277.291), stdev = 37247.896
  CI (99.9%): [682565.571, 732337.170] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
ObservableCreateTest._Benchmark.benchmark_onCompleteCrash  thrpt   30  707451.371 ± 24885.800  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_onErrorCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_onErrorCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 188393.749 ops/s
# Warmup Iteration   2: 307489.723 ops/s
# Warmup Iteration   3: 325879.059 ops/s
# Warmup Iteration   4: 316710.071 ops/s
# Warmup Iteration   5: 329719.551 ops/s
# Warmup Iteration   6: 349641.064 ops/s
# Warmup Iteration   7: 280292.161 ops/s
# Warmup Iteration   8: 349343.221 ops/s
# Warmup Iteration   9: 338120.804 ops/s
# Warmup Iteration  10: 348209.159 ops/s
# Warmup Iteration  11: 332341.995 ops/s
# Warmup Iteration  12: 342952.412 ops/s
# Warmup Iteration  13: 359781.566 ops/s
# Warmup Iteration  14: 339358.662 ops/s
# Warmup Iteration  15: 344032.368 ops/s
# Warmup Iteration  16: 339528.108 ops/s
# Warmup Iteration  17: 371324.991 ops/s
# Warmup Iteration  18: 371359.932 ops/s
# Warmup Iteration  19: 356739.874 ops/s
# Warmup Iteration  20: 375777.716 ops/s
# Warmup Iteration  21: 357791.909 ops/s
# Warmup Iteration  22: 361170.029 ops/s
# Warmup Iteration  23: 367512.631 ops/s
# Warmup Iteration  24: 359793.710 ops/s
# Warmup Iteration  25: 363916.004 ops/s
# Warmup Iteration  26: 363455.400 ops/s
# Warmup Iteration  27: 355258.634 ops/s
# Warmup Iteration  28: 371794.567 ops/s
# Warmup Iteration  29: 369380.832 ops/s
# Warmup Iteration  30: 348954.815 ops/s
Iteration   1: 367250.493 ops/s
Iteration   2: 351536.617 ops/s
Iteration   3: 369428.718 ops/s
Iteration   4: 354846.091 ops/s
Iteration   5: 368875.503 ops/s
Iteration   6: 354195.750 ops/s
Iteration   7: 364489.991 ops/s
Iteration   8: 374171.182 ops/s
Iteration   9: 377344.901 ops/s
Iteration  10: 347946.680 ops/s
Iteration  11: 374677.132 ops/s
Iteration  12: 351724.025 ops/s
Iteration  13: 367418.796 ops/s
Iteration  14: 352395.093 ops/s
Iteration  15: 349135.458 ops/s
Iteration  16: 365720.515 ops/s
Iteration  17: 361001.282 ops/s
Iteration  18: 357879.089 ops/s
Iteration  19: 370861.723 ops/s
Iteration  20: 364828.485 ops/s
Iteration  21: 370358.296 ops/s
Iteration  22: 349661.058 ops/s
Iteration  23: 369286.659 ops/s
Iteration  24: 347838.550 ops/s
Iteration  25: 361782.498 ops/s
Iteration  26: 373073.072 ops/s
Iteration  27: 360420.881 ops/s
Iteration  28: 348219.326 ops/s
Iteration  29: 367313.847 ops/s
Iteration  30: 355090.089 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_onErrorCrash":
  361625.727 ±(99.9%) 6170.007 ops/s [Average]
  (min, avg, max) = (347838.550, 361625.727, 377344.901), stdev = 9234.977
  CI (99.9%): [355455.720, 367795.734] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableCreateTest._Benchmark.benchmark_onErrorCrash  thrpt   30  361625.727 ± 6170.007  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1197406.612 ops/s
# Warmup Iteration   2: 2662194.535 ops/s
# Warmup Iteration   3: 3422645.416 ops/s
# Warmup Iteration   4: 3485734.851 ops/s
# Warmup Iteration   5: 3571698.483 ops/s
# Warmup Iteration   6: 3461906.430 ops/s
# Warmup Iteration   7: 2973877.423 ops/s
# Warmup Iteration   8: 3401320.267 ops/s
# Warmup Iteration   9: 3635029.378 ops/s
# Warmup Iteration  10: 3433615.605 ops/s
# Warmup Iteration  11: 3443716.515 ops/s
# Warmup Iteration  12: 3491858.065 ops/s
# Warmup Iteration  13: 3555775.777 ops/s
# Warmup Iteration  14: 3439993.726 ops/s
# Warmup Iteration  15: 3430000.467 ops/s
# Warmup Iteration  16: 3564845.444 ops/s
# Warmup Iteration  17: 3458579.314 ops/s
# Warmup Iteration  18: 3502791.938 ops/s
# Warmup Iteration  19: 3560796.130 ops/s
# Warmup Iteration  20: 3455013.825 ops/s
# Warmup Iteration  21: 3566688.217 ops/s
# Warmup Iteration  22: 3508265.757 ops/s
# Warmup Iteration  23: 3421022.397 ops/s
# Warmup Iteration  24: 3387235.261 ops/s
# Warmup Iteration  25: 3526973.295 ops/s
# Warmup Iteration  26: 3367228.968 ops/s
# Warmup Iteration  27: 3432654.020 ops/s
# Warmup Iteration  28: 3439287.674 ops/s
# Warmup Iteration  29: 3481923.148 ops/s
# Warmup Iteration  30: 3342981.431 ops/s
Iteration   1: 3464620.150 ops/s
Iteration   2: 2787789.056 ops/s
Iteration   3: 3368596.557 ops/s
Iteration   4: 3453228.439 ops/s
Iteration   5: 3498122.720 ops/s
Iteration   6: 3463511.005 ops/s
Iteration   7: 3408618.255 ops/s
Iteration   8: 3573271.984 ops/s
Iteration   9: 3459141.176 ops/s
Iteration  10: 3499612.940 ops/s
Iteration  11: 3458828.382 ops/s
Iteration  12: 3571681.774 ops/s
Iteration  13: 3491783.710 ops/s
Iteration  14: 3424765.440 ops/s
Iteration  15: 3557008.670 ops/s
Iteration  16: 3521185.586 ops/s
Iteration  17: 3397728.458 ops/s
Iteration  18: 3646515.218 ops/s
Iteration  19: 3596555.025 ops/s
Iteration  20: 3387308.014 ops/s
Iteration  21: 3573081.432 ops/s
Iteration  22: 3456852.955 ops/s
Iteration  23: 3466046.560 ops/s
Iteration  24: 3543368.524 ops/s
Iteration  25: 3454460.283 ops/s
Iteration  26: 3553826.063 ops/s
Iteration  27: 3407172.388 ops/s
Iteration  28: 3509191.429 ops/s
Iteration  29: 3395599.452 ops/s
Iteration  30: 3580640.483 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_retryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed":
  3465670.404 ±(99.9%) 97755.274 ops/s [Average]
  (min, avg, max) = (2787789.056, 3465670.404, 3646515.218), stdev = 146315.503
  CI (99.9%): [3367915.130, 3563425.678] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt        Score       Error  Units
ObservableRetryTest._Benchmark.benchmark_retryAllowsSubscriptionAfterAllSubscriptionsUnsubscribed  thrpt   30  3465670.404 ± 97755.274  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 268613.789 ops/s
# Warmup Iteration   2: 570003.537 ops/s
# Warmup Iteration   3: 578430.870 ops/s
# Warmup Iteration   4: 721603.112 ops/s
# Warmup Iteration   5: 659787.722 ops/s
# Warmup Iteration   6: 703875.902 ops/s
# Warmup Iteration   7: 686118.506 ops/s
# Warmup Iteration   8: 668849.718 ops/s
# Warmup Iteration   9: 706408.861 ops/s
# Warmup Iteration  10: 696464.031 ops/s
# Warmup Iteration  11: 668001.156 ops/s
# Warmup Iteration  12: 676175.853 ops/s
# Warmup Iteration  13: 700587.615 ops/s
# Warmup Iteration  14: 668512.521 ops/s
# Warmup Iteration  15: 687910.236 ops/s
# Warmup Iteration  16: 681110.429 ops/s
# Warmup Iteration  17: 700332.688 ops/s
# Warmup Iteration  18: 724158.300 ops/s
# Warmup Iteration  19: 740671.501 ops/s
# Warmup Iteration  20: 707464.357 ops/s
# Warmup Iteration  21: 762527.270 ops/s
# Warmup Iteration  22: 698178.941 ops/s
# Warmup Iteration  23: 722006.341 ops/s
# Warmup Iteration  24: 735161.112 ops/s
# Warmup Iteration  25: 720358.708 ops/s
# Warmup Iteration  26: 719546.016 ops/s
# Warmup Iteration  27: 706626.550 ops/s
# Warmup Iteration  28: 705232.124 ops/s
# Warmup Iteration  29: 749895.676 ops/s
# Warmup Iteration  30: 715919.686 ops/s
Iteration   1: 763905.752 ops/s
Iteration   2: 741273.864 ops/s
Iteration   3: 707516.434 ops/s
Iteration   4: 721343.136 ops/s
Iteration   5: 760620.681 ops/s
Iteration   6: 696095.155 ops/s
Iteration   7: 740389.113 ops/s
Iteration   8: 706015.970 ops/s
Iteration   9: 734001.496 ops/s
Iteration  10: 714084.301 ops/s
Iteration  11: 726975.708 ops/s
Iteration  12: 737450.702 ops/s
Iteration  13: 709241.340 ops/s
Iteration  14: 713620.160 ops/s
Iteration  15: 731635.398 ops/s
Iteration  16: 745687.485 ops/s
Iteration  17: 728632.840 ops/s
Iteration  18: 715972.950 ops/s
Iteration  19: 737405.530 ops/s
Iteration  20: 732318.543 ops/s
Iteration  21: 726761.977 ops/s
Iteration  22: 706646.459 ops/s
Iteration  23: 735326.703 ops/s
Iteration  24: 700311.169 ops/s
Iteration  25: 724947.311 ops/s
Iteration  26: 737490.003 ops/s
Iteration  27: 712236.054 ops/s
Iteration  28: 740621.414 ops/s
Iteration  29: 730139.514 ops/s
Iteration  30: 701576.522 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_error":
  726008.123 ±(99.9%) 11420.653 ops/s [Average]
  (min, avg, max) = (696095.155, 726008.123, 763905.752), stdev = 17093.897
  CI (99.9%): [714587.469, 737428.776] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_error  thrpt   30  726008.123 ± 11420.653  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_emptyInner$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_emptyInner

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90077.413 ops/s
# Warmup Iteration   2: 328332.958 ops/s
# Warmup Iteration   3: 488281.976 ops/s
# Warmup Iteration   4: 485118.806 ops/s
# Warmup Iteration   5: 561067.108 ops/s
# Warmup Iteration   6: 441651.910 ops/s
# Warmup Iteration   7: 542212.675 ops/s
# Warmup Iteration   8: 536289.464 ops/s
# Warmup Iteration   9: 539671.808 ops/s
# Warmup Iteration  10: 557809.343 ops/s
# Warmup Iteration  11: 569045.511 ops/s
# Warmup Iteration  12: 536998.126 ops/s
# Warmup Iteration  13: 539828.084 ops/s
# Warmup Iteration  14: 541002.212 ops/s
# Warmup Iteration  15: 560997.666 ops/s
# Warmup Iteration  16: 525627.503 ops/s
# Warmup Iteration  17: 562529.709 ops/s
# Warmup Iteration  18: 587898.011 ops/s
# Warmup Iteration  19: 545803.985 ops/s
# Warmup Iteration  20: 583766.933 ops/s
# Warmup Iteration  21: 584491.872 ops/s
# Warmup Iteration  22: 548299.568 ops/s
# Warmup Iteration  23: 564782.923 ops/s
# Warmup Iteration  24: 550076.360 ops/s
# Warmup Iteration  25: 566463.026 ops/s
# Warmup Iteration  26: 488729.255 ops/s
# Warmup Iteration  27: 539956.807 ops/s
# Warmup Iteration  28: 582743.136 ops/s
# Warmup Iteration  29: 555074.583 ops/s
# Warmup Iteration  30: 565632.614 ops/s
Iteration   1: 553529.998 ops/s
Iteration   2: 565087.110 ops/s
Iteration   3: 585172.476 ops/s
Iteration   4: 561657.302 ops/s
Iteration   5: 551879.304 ops/s
Iteration   6: 586828.109 ops/s
Iteration   7: 545664.937 ops/s
Iteration   8: 589406.529 ops/s
Iteration   9: 563019.026 ops/s
Iteration  10: 566564.100 ops/s
Iteration  11: 555412.250 ops/s
Iteration  12: 557161.292 ops/s
Iteration  13: 588888.043 ops/s
Iteration  14: 559964.796 ops/s
Iteration  15: 558768.558 ops/s
Iteration  16: 550945.428 ops/s
Iteration  17: 574492.887 ops/s
Iteration  18: 571184.293 ops/s
Iteration  19: 554416.478 ops/s
Iteration  20: 579588.638 ops/s
Iteration  21: 549017.995 ops/s
Iteration  22: 573009.235 ops/s
Iteration  23: 568943.313 ops/s
Iteration  24: 551019.496 ops/s
Iteration  25: 569682.262 ops/s
Iteration  26: 547773.184 ops/s
Iteration  27: 571815.098 ops/s
Iteration  28: 547384.383 ops/s
Iteration  29: 568175.344 ops/s
Iteration  30: 582418.742 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_emptyInner":
  564962.354 ±(99.9%) 8888.300 ops/s [Average]
  (min, avg, max) = (545664.937, 564962.354, 589406.529), stdev = 13303.590
  CI (99.9%): [556074.054, 573850.653] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_emptyInner  thrpt   30  564962.354 ± 8888.300  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onCompleteThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onCompleteThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69516.998 ops/s
# Warmup Iteration   2: 204748.786 ops/s
# Warmup Iteration   3: 237115.786 ops/s
# Warmup Iteration   4: 213933.930 ops/s
# Warmup Iteration   5: 265748.332 ops/s
# Warmup Iteration   6: 264876.187 ops/s
# Warmup Iteration   7: 252749.804 ops/s
# Warmup Iteration   8: 251626.369 ops/s
# Warmup Iteration   9: 261949.956 ops/s
# Warmup Iteration  10: 248692.376 ops/s
# Warmup Iteration  11: 259079.945 ops/s
# Warmup Iteration  12: 252091.427 ops/s
# Warmup Iteration  13: 259841.877 ops/s
# Warmup Iteration  14: 254054.119 ops/s
# Warmup Iteration  15: 258658.038 ops/s
# Warmup Iteration  16: 249389.074 ops/s
# Warmup Iteration  17: 262804.476 ops/s
# Warmup Iteration  18: 270921.719 ops/s
# Warmup Iteration  19: 264915.817 ops/s
# Warmup Iteration  20: 270769.075 ops/s
# Warmup Iteration  21: 258455.144 ops/s
# Warmup Iteration  22: 264158.198 ops/s
# Warmup Iteration  23: 271386.897 ops/s
# Warmup Iteration  24: 260907.573 ops/s
# Warmup Iteration  25: 260365.986 ops/s
# Warmup Iteration  26: 271207.923 ops/s
# Warmup Iteration  27: 271921.146 ops/s
# Warmup Iteration  28: 258911.748 ops/s
# Warmup Iteration  29: 274838.722 ops/s
# Warmup Iteration  30: 258473.529 ops/s
Iteration   1: 266279.285 ops/s
Iteration   2: 266297.600 ops/s
Iteration   3: 270433.220 ops/s
Iteration   4: 269107.599 ops/s
Iteration   5: 267080.439 ops/s
Iteration   6: 259700.500 ops/s
Iteration   7: 274690.410 ops/s
Iteration   8: 257079.351 ops/s
Iteration   9: 270012.325 ops/s
Iteration  10: 274894.196 ops/s
Iteration  11: 263150.823 ops/s
Iteration  12: 258719.371 ops/s
Iteration  13: 274773.446 ops/s
Iteration  14: 262252.135 ops/s
Iteration  15: 260412.346 ops/s
Iteration  16: 274851.702 ops/s
Iteration  17: 255880.369 ops/s
Iteration  18: 252738.182 ops/s
Iteration  19: 270346.764 ops/s
Iteration  20: 253200.873 ops/s
Iteration  21: 273229.605 ops/s
Iteration  22: 264059.240 ops/s
Iteration  23: 259541.752 ops/s
Iteration  24: 262141.103 ops/s
Iteration  25: 271629.983 ops/s
Iteration  26: 255109.574 ops/s
Iteration  27: 267132.661 ops/s
Iteration  28: 256903.840 ops/s
Iteration  29: 260244.090 ops/s
Iteration  30: 268865.812 ops/s


Result "io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onCompleteThrows":
  264691.953 ±(99.9%) 4609.358 ops/s [Average]
  (min, avg, max) = (252738.182, 264691.953, 274894.196), stdev = 6899.071
  CI (99.9%): [260082.595, 269301.311] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
LambdaObserverTest._Benchmark.benchmark_onCompleteThrows  thrpt   30  264691.953 ± 4609.358  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposeOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposeOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2126930.689 ops/s
# Warmup Iteration   2: 3916956.051 ops/s
# Warmup Iteration   3: 5923291.454 ops/s
# Warmup Iteration   4: 5615080.754 ops/s
# Warmup Iteration   5: 5765726.560 ops/s
# Warmup Iteration   6: 5491347.575 ops/s
# Warmup Iteration   7: 5884691.831 ops/s
# Warmup Iteration   8: 5972346.055 ops/s
# Warmup Iteration   9: 5469066.855 ops/s
# Warmup Iteration  10: 5953748.179 ops/s
# Warmup Iteration  11: 5627266.740 ops/s
# Warmup Iteration  12: 5581872.872 ops/s
# Warmup Iteration  13: 5912111.610 ops/s
# Warmup Iteration  14: 5624270.772 ops/s
# Warmup Iteration  15: 5990515.048 ops/s
# Warmup Iteration  16: 5559276.808 ops/s
# Warmup Iteration  17: 5722207.930 ops/s
# Warmup Iteration  18: 5893918.881 ops/s
# Warmup Iteration  19: 5658501.016 ops/s
# Warmup Iteration  20: 5666592.549 ops/s
# Warmup Iteration  21: 4743604.698 ops/s
# Warmup Iteration  22: 5737309.015 ops/s
# Warmup Iteration  23: 5775359.482 ops/s
# Warmup Iteration  24: 5627635.567 ops/s
# Warmup Iteration  25: 5920009.069 ops/s
# Warmup Iteration  26: 5669333.096 ops/s
# Warmup Iteration  27: 5801864.132 ops/s
# Warmup Iteration  28: 5588957.224 ops/s
# Warmup Iteration  29: 5919761.031 ops/s
# Warmup Iteration  30: 5901000.436 ops/s
Iteration   1: 5543259.879 ops/s
Iteration   2: 5598895.662 ops/s
Iteration   3: 5620347.189 ops/s
Iteration   4: 5721605.386 ops/s
Iteration   5: 5989790.006 ops/s
Iteration   6: 6019417.768 ops/s
Iteration   7: 5890305.226 ops/s
Iteration   8: 5642972.427 ops/s
Iteration   9: 5846087.439 ops/s
Iteration  10: 5664596.188 ops/s
Iteration  11: 5746582.896 ops/s
Iteration  12: 5838152.679 ops/s
Iteration  13: 5653503.993 ops/s
Iteration  14: 5770870.458 ops/s
Iteration  15: 5569941.148 ops/s
Iteration  16: 5716646.455 ops/s
Iteration  17: 5687287.570 ops/s
Iteration  18: 5981437.943 ops/s
Iteration  19: 5888792.399 ops/s
Iteration  20: 5482322.642 ops/s
Iteration  21: 5892242.557 ops/s
Iteration  22: 5640923.726 ops/s
Iteration  23: 5926636.901 ops/s
Iteration  24: 5600433.974 ops/s
Iteration  25: 5801516.242 ops/s
Iteration  26: 5666111.271 ops/s
Iteration  27: 5752558.937 ops/s
Iteration  28: 5613373.571 ops/s
Iteration  29: 5664363.822 ops/s
Iteration  30: 5706418.206 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposeOnArrival":
  5737913.152 ±(99.9%) 94431.038 ops/s [Average]
  (min, avg, max) = (5482322.642, 5737913.152, 6019417.768), stdev = 141339.943
  CI (99.9%): [5643482.114, 5832344.190] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_disposeOnArrival  thrpt   30  5737913.152 ± 94431.038  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerDisposedOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerDisposedOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 287756.418 ops/s
# Warmup Iteration   2: 521856.971 ops/s
# Warmup Iteration   3: 554980.294 ops/s
# Warmup Iteration   4: 591346.789 ops/s
# Warmup Iteration   5: 602771.368 ops/s
# Warmup Iteration   6: 622097.351 ops/s
# Warmup Iteration   7: 635657.171 ops/s
# Warmup Iteration   8: 657946.700 ops/s
# Warmup Iteration   9: 631549.900 ops/s
# Warmup Iteration  10: 624882.352 ops/s
# Warmup Iteration  11: 646682.710 ops/s
# Warmup Iteration  12: 628353.107 ops/s
# Warmup Iteration  13: 638605.188 ops/s
# Warmup Iteration  14: 648900.998 ops/s
# Warmup Iteration  15: 632950.637 ops/s
# Warmup Iteration  16: 641463.440 ops/s
# Warmup Iteration  17: 655027.203 ops/s
# Warmup Iteration  18: 702798.414 ops/s
# Warmup Iteration  19: 695166.428 ops/s
# Warmup Iteration  20: 656009.151 ops/s
# Warmup Iteration  21: 701844.061 ops/s
# Warmup Iteration  22: 674370.149 ops/s
# Warmup Iteration  23: 654021.129 ops/s
# Warmup Iteration  24: 690910.660 ops/s
# Warmup Iteration  25: 649368.529 ops/s
# Warmup Iteration  26: 654124.754 ops/s
# Warmup Iteration  27: 694733.786 ops/s
# Warmup Iteration  28: 663928.245 ops/s
# Warmup Iteration  29: 672462.030 ops/s
# Warmup Iteration  30: 690551.225 ops/s
Iteration   1: 658892.847 ops/s
Iteration   2: 681168.359 ops/s
Iteration   3: 671199.999 ops/s
Iteration   4: 674490.000 ops/s
Iteration   5: 668699.816 ops/s
Iteration   6: 661543.191 ops/s
Iteration   7: 699061.559 ops/s
Iteration   8: 655196.427 ops/s
Iteration   9: 688537.614 ops/s
Iteration  10: 668493.137 ops/s
Iteration  11: 669605.298 ops/s
Iteration  12: 676032.300 ops/s
Iteration  13: 662936.426 ops/s
Iteration  14: 683865.310 ops/s
Iteration  15: 666002.116 ops/s
Iteration  16: 649524.232 ops/s
Iteration  17: 685303.435 ops/s
Iteration  18: 665279.900 ops/s
Iteration  19: 673529.599 ops/s
Iteration  20: 658580.898 ops/s
Iteration  21: 689718.887 ops/s
Iteration  22: 663139.190 ops/s
Iteration  23: 677696.207 ops/s
Iteration  24: 677226.728 ops/s
Iteration  25: 665087.854 ops/s
Iteration  26: 705843.126 ops/s
Iteration  27: 655444.765 ops/s
Iteration  28: 682993.552 ops/s
Iteration  29: 687218.460 ops/s
Iteration  30: 664327.381 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUsingTest._Benchmark.benchmark_eagerDisposedOnError":
  672887.954 ±(99.9%) 8930.257 ops/s [Average]
  (min, avg, max) = (649524.232, 672887.954, 705843.126), stdev = 13366.390
  CI (99.9%): [663957.696, 681818.211] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservableUsingTest._Benchmark.benchmark_eagerDisposedOnError  thrpt   30  672887.954 ± 8930.257  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscriptions.AsyncSubscriptionTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscriptions.AsyncSubscriptionTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 13022659.067 ops/s
# Warmup Iteration   2: 18298388.904 ops/s
# Warmup Iteration   3: 23122728.141 ops/s
# Warmup Iteration   4: 24064741.468 ops/s
# Warmup Iteration   5: 25036013.979 ops/s
# Warmup Iteration   6: 23432073.252 ops/s
# Warmup Iteration   7: 23292273.728 ops/s
# Warmup Iteration   8: 24107545.815 ops/s
# Warmup Iteration   9: 23178506.705 ops/s
# Warmup Iteration  10: 23902521.939 ops/s
# Warmup Iteration  11: 24076241.124 ops/s
# Warmup Iteration  12: 23193617.126 ops/s
# Warmup Iteration  13: 25038764.653 ops/s
# Warmup Iteration  14: 24252602.668 ops/s
# Warmup Iteration  15: 18847709.563 ops/s
# Warmup Iteration  16: 23426288.311 ops/s
# Warmup Iteration  17: 24098323.163 ops/s
# Warmup Iteration  18: 24505911.314 ops/s
# Warmup Iteration  19: 23325580.226 ops/s
# Warmup Iteration  20: 23704081.971 ops/s
# Warmup Iteration  21: 24453519.224 ops/s
# Warmup Iteration  22: 23741278.497 ops/s
# Warmup Iteration  23: 24862430.682 ops/s
# Warmup Iteration  24: 23758951.729 ops/s
# Warmup Iteration  25: 23046015.725 ops/s
# Warmup Iteration  26: 24124690.378 ops/s
# Warmup Iteration  27: 24355713.785 ops/s
# Warmup Iteration  28: 23557386.477 ops/s
# Warmup Iteration  29: 24454708.629 ops/s
# Warmup Iteration  30: 23812976.249 ops/s
Iteration   1: 24347830.008 ops/s
Iteration   2: 23228353.999 ops/s
Iteration   3: 23662096.364 ops/s
Iteration   4: 23375190.026 ops/s
Iteration   5: 23619678.056 ops/s
Iteration   6: 24411316.782 ops/s
Iteration   7: 23403385.762 ops/s
Iteration   8: 24088056.872 ops/s
Iteration   9: 24615098.288 ops/s
Iteration  10: 23046844.147 ops/s
Iteration  11: 24464959.762 ops/s
Iteration  12: 25357497.846 ops/s
Iteration  13: 23377064.013 ops/s
Iteration  14: 23883960.281 ops/s
Iteration  15: 24218203.956 ops/s
Iteration  16: 23494406.268 ops/s
Iteration  17: 24626000.396 ops/s
Iteration  18: 23455929.597 ops/s
Iteration  19: 23664605.668 ops/s
Iteration  20: 24478589.182 ops/s
Iteration  21: 23323190.544 ops/s
Iteration  22: 23663627.661 ops/s
Iteration  23: 23175891.167 ops/s
Iteration  24: 25039101.133 ops/s
Iteration  25: 23028944.587 ops/s
Iteration  26: 23862043.213 ops/s
Iteration  27: 25075248.289 ops/s
Iteration  28: 23178137.809 ops/s
Iteration  29: 24204771.942 ops/s
Iteration  30: 23117916.419 ops/s


Result "io.reactivex.rxjava3.internal.subscriptions.AsyncSubscriptionTest._Benchmark.benchmark_disposed":
  23882931.335 ±(99.9%) 438832.117 ops/s [Average]
  (min, avg, max) = (23028944.587, 23882931.335, 25357497.846), stdev = 656823.304
  CI (99.9%): [23444099.217, 24321763.452] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
AsyncSubscriptionTest._Benchmark.benchmark_disposed  thrpt   30  23882931.335 ± 438832.117  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalOneIsNullSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalOneIsNullSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 137473.331 ops/s
# Warmup Iteration   2: 432796.690 ops/s
# Warmup Iteration   3: 539821.416 ops/s
# Warmup Iteration   4: 533177.822 ops/s
# Warmup Iteration   5: 561388.567 ops/s
# Warmup Iteration   6: 530674.728 ops/s
# Warmup Iteration   7: 530530.155 ops/s
# Warmup Iteration   8: 559638.668 ops/s
# Warmup Iteration   9: 528227.972 ops/s
# Warmup Iteration  10: 547729.077 ops/s
# Warmup Iteration  11: 561711.339 ops/s
# Warmup Iteration  12: 516149.277 ops/s
# Warmup Iteration  13: 515867.149 ops/s
# Warmup Iteration  14: 528567.238 ops/s
# Warmup Iteration  15: 537530.128 ops/s
# Warmup Iteration  16: 515411.806 ops/s
# Warmup Iteration  17: 585724.168 ops/s
# Warmup Iteration  18: 573211.189 ops/s
# Warmup Iteration  19: 583777.371 ops/s
# Warmup Iteration  20: 563578.298 ops/s
# Warmup Iteration  21: 573472.533 ops/s
# Warmup Iteration  22: 587919.124 ops/s
# Warmup Iteration  23: 561411.323 ops/s
# Warmup Iteration  24: 588552.537 ops/s
# Warmup Iteration  25: 573222.465 ops/s
# Warmup Iteration  26: 560150.371 ops/s
# Warmup Iteration  27: 580224.809 ops/s
# Warmup Iteration  28: 568398.529 ops/s
# Warmup Iteration  29: 576161.151 ops/s
# Warmup Iteration  30: 559235.879 ops/s
Iteration   1: 575321.778 ops/s
Iteration   2: 562700.069 ops/s
Iteration   3: 573013.053 ops/s
Iteration   4: 562472.151 ops/s
Iteration   5: 578693.864 ops/s
Iteration   6: 556648.091 ops/s
Iteration   7: 585970.437 ops/s
Iteration   8: 580327.863 ops/s
Iteration   9: 551509.266 ops/s
Iteration  10: 583514.365 ops/s
Iteration  11: 595345.123 ops/s
Iteration  12: 539850.971 ops/s
Iteration  13: 570682.342 ops/s
Iteration  14: 588353.877 ops/s
Iteration  15: 581753.266 ops/s
Iteration  16: 560533.828 ops/s
Iteration  17: 592856.977 ops/s
Iteration  18: 575180.632 ops/s
Iteration  19: 569137.734 ops/s
Iteration  20: 575640.798 ops/s
Iteration  21: 585452.999 ops/s
Iteration  22: 569661.811 ops/s
Iteration  23: 592895.384 ops/s
Iteration  24: 556332.759 ops/s
Iteration  25: 576948.227 ops/s
Iteration  26: 581013.720 ops/s
Iteration  27: 563017.830 ops/s
Iteration  28: 579911.913 ops/s
Iteration  29: 561399.829 ops/s
Iteration  30: 581390.248 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalOneIsNullSlowPath":
  573584.373 ±(99.9%) 8834.371 ops/s [Average]
  (min, avg, max) = (539850.971, 573584.373, 595345.123), stdev = 13222.872
  CI (99.9%): [564750.002, 582418.744] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableFromArrayTest._Benchmark.benchmark_conditionalOneIsNullSlowPath  thrpt   30  573584.373 ± 8834.371  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithIterableOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithIterableOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 194534.206 ops/s
# Warmup Iteration   2: 356637.941 ops/s
# Warmup Iteration   3: 410439.480 ops/s
# Warmup Iteration   4: 411160.053 ops/s
# Warmup Iteration   5: 363326.434 ops/s
# Warmup Iteration   6: 439235.583 ops/s
# Warmup Iteration   7: 424289.225 ops/s
# Warmup Iteration   8: 434142.140 ops/s
# Warmup Iteration   9: 436426.450 ops/s
# Warmup Iteration  10: 360684.294 ops/s
# Warmup Iteration  11: 417168.717 ops/s
# Warmup Iteration  12: 441454.835 ops/s
# Warmup Iteration  13: 438898.690 ops/s
# Warmup Iteration  14: 426883.487 ops/s
# Warmup Iteration  15: 441063.899 ops/s
# Warmup Iteration  16: 447704.722 ops/s
# Warmup Iteration  17: 440304.048 ops/s
# Warmup Iteration  18: 456183.833 ops/s
# Warmup Iteration  19: 460883.041 ops/s
# Warmup Iteration  20: 451496.308 ops/s
# Warmup Iteration  21: 465256.617 ops/s
# Warmup Iteration  22: 439919.058 ops/s
# Warmup Iteration  23: 448840.567 ops/s
# Warmup Iteration  24: 449383.014 ops/s
# Warmup Iteration  25: 443791.571 ops/s
# Warmup Iteration  26: 447302.218 ops/s
# Warmup Iteration  27: 449673.530 ops/s
# Warmup Iteration  28: 453274.792 ops/s
# Warmup Iteration  29: 451903.182 ops/s
# Warmup Iteration  30: 450094.944 ops/s
Iteration   1: 442629.440 ops/s
Iteration   2: 436259.498 ops/s
Iteration   3: 461172.451 ops/s
Iteration   4: 445669.353 ops/s
Iteration   5: 451557.836 ops/s
Iteration   6: 440519.742 ops/s
Iteration   7: 458559.747 ops/s
Iteration   8: 443711.727 ops/s
Iteration   9: 448679.078 ops/s
Iteration  10: 461746.035 ops/s
Iteration  11: 445370.603 ops/s
Iteration  12: 457173.373 ops/s
Iteration  13: 435942.636 ops/s
Iteration  14: 460656.711 ops/s
Iteration  15: 463328.362 ops/s
Iteration  16: 438421.630 ops/s
Iteration  17: 439846.547 ops/s
Iteration  18: 473050.233 ops/s
Iteration  19: 440436.391 ops/s
Iteration  20: 439787.323 ops/s
Iteration  21: 474352.061 ops/s
Iteration  22: 468552.272 ops/s
Iteration  23: 438598.090 ops/s
Iteration  24: 449659.675 ops/s
Iteration  25: 464188.296 ops/s
Iteration  26: 440887.936 ops/s
Iteration  27: 471337.405 ops/s
Iteration  28: 440241.879 ops/s
Iteration  29: 457871.113 ops/s
Iteration  30: 457620.818 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithIterableOneIsNull":
  451594.275 ±(99.9%) 8043.633 ops/s [Average]
  (min, avg, max) = (435942.636, 451594.275, 474352.061), stdev = 12039.331
  CI (99.9%): [443550.643, 459637.908] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_zipWithIterableOneIsNull  thrpt   30  451594.275 ± 8043.633  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_take1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_take1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 186341.565 ops/s
# Warmup Iteration   2: 878399.149 ops/s
# Warmup Iteration   3: 1156819.184 ops/s
# Warmup Iteration   4: 1439099.975 ops/s
# Warmup Iteration   5: 1504886.755 ops/s
# Warmup Iteration   6: 1436972.763 ops/s
# Warmup Iteration   7: 1500158.207 ops/s
# Warmup Iteration   8: 1505196.320 ops/s
# Warmup Iteration   9: 1445766.264 ops/s
# Warmup Iteration  10: 1513835.118 ops/s
# Warmup Iteration  11: 1446155.890 ops/s
# Warmup Iteration  12: 1494132.987 ops/s
# Warmup Iteration  13: 1503414.982 ops/s
# Warmup Iteration  14: 1419560.482 ops/s
# Warmup Iteration  15: 1465336.991 ops/s
# Warmup Iteration  16: 1446289.496 ops/s
# Warmup Iteration  17: 1453191.267 ops/s
# Warmup Iteration  18: 1500824.568 ops/s
# Warmup Iteration  19: 1511190.864 ops/s
# Warmup Iteration  20: 1423149.679 ops/s
# Warmup Iteration  21: 1468337.844 ops/s
# Warmup Iteration  22: 1504268.481 ops/s
# Warmup Iteration  23: 1516983.687 ops/s
# Warmup Iteration  24: 1449865.603 ops/s
# Warmup Iteration  25: 1545479.946 ops/s
# Warmup Iteration  26: 1474023.886 ops/s
# Warmup Iteration  27: 1429456.491 ops/s
# Warmup Iteration  28: 1474817.961 ops/s
# Warmup Iteration  29: 1543343.212 ops/s
# Warmup Iteration  30: 1464182.831 ops/s
Iteration   1: 1514766.649 ops/s
Iteration   2: 1529255.326 ops/s
Iteration   3: 1457915.329 ops/s
Iteration   4: 1447919.071 ops/s
Iteration   5: 1551290.350 ops/s
Iteration   6: 1521322.486 ops/s
Iteration   7: 1444123.110 ops/s
Iteration   8: 1495948.468 ops/s
Iteration   9: 1443905.767 ops/s
Iteration  10: 1481427.609 ops/s
Iteration  11: 1489587.846 ops/s
Iteration  12: 1484224.204 ops/s
Iteration  13: 1457859.253 ops/s
Iteration  14: 1492753.896 ops/s
Iteration  15: 1469247.005 ops/s
Iteration  16: 1468775.606 ops/s
Iteration  17: 1513991.143 ops/s
Iteration  18: 1432147.665 ops/s
Iteration  19: 1498881.353 ops/s
Iteration  20: 1440757.399 ops/s
Iteration  21: 1500441.980 ops/s
Iteration  22: 1460535.198 ops/s
Iteration  23: 1484127.949 ops/s
Iteration  24: 1489854.846 ops/s
Iteration  25: 1473165.769 ops/s
Iteration  26: 1526512.207 ops/s
Iteration  27: 1473789.934 ops/s
Iteration  28: 1523845.059 ops/s
Iteration  29: 1506006.092 ops/s
Iteration  30: 1484687.609 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_take1":
  1485302.206 ±(99.9%) 20032.156 ops/s [Average]
  (min, avg, max) = (1432147.665, 1485302.206, 1551290.350), stdev = 29983.191
  CI (99.9%): [1465270.050, 1505334.362] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
FlowableCacheTest._Benchmark.benchmark_take1  thrpt   30  1485302.206 ± 20032.156  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_repeatObservableThrowsError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_repeatObservableThrowsError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109309.683 ops/s
# Warmup Iteration   2: 403085.594 ops/s
# Warmup Iteration   3: 450396.242 ops/s
# Warmup Iteration   4: 374608.758 ops/s
# Warmup Iteration   5: 505985.440 ops/s
# Warmup Iteration   6: 504787.309 ops/s
# Warmup Iteration   7: 470791.543 ops/s
# Warmup Iteration   8: 466517.805 ops/s
# Warmup Iteration   9: 464036.318 ops/s
# Warmup Iteration  10: 466752.746 ops/s
# Warmup Iteration  11: 501378.478 ops/s
# Warmup Iteration  12: 507212.267 ops/s
# Warmup Iteration  13: 483774.106 ops/s
# Warmup Iteration  14: 497591.386 ops/s
# Warmup Iteration  15: 490718.373 ops/s
# Warmup Iteration  16: 501947.438 ops/s
# Warmup Iteration  17: 499170.969 ops/s
# Warmup Iteration  18: 501850.301 ops/s
# Warmup Iteration  19: 522932.636 ops/s
# Warmup Iteration  20: 506995.062 ops/s
# Warmup Iteration  21: 528297.111 ops/s
# Warmup Iteration  22: 509831.638 ops/s
# Warmup Iteration  23: 493017.317 ops/s
# Warmup Iteration  24: 519980.022 ops/s
# Warmup Iteration  25: 523067.077 ops/s
# Warmup Iteration  26: 513376.793 ops/s
# Warmup Iteration  27: 506119.152 ops/s
# Warmup Iteration  28: 523329.612 ops/s
# Warmup Iteration  29: 502579.704 ops/s
# Warmup Iteration  30: 524221.549 ops/s
Iteration   1: 512687.222 ops/s
Iteration   2: 513802.244 ops/s
Iteration   3: 507122.103 ops/s
Iteration   4: 505916.454 ops/s
Iteration   5: 523135.064 ops/s
Iteration   6: 516507.236 ops/s
Iteration   7: 498575.150 ops/s
Iteration   8: 526527.953 ops/s
Iteration   9: 507003.720 ops/s
Iteration  10: 511866.854 ops/s
Iteration  11: 504805.242 ops/s
Iteration  12: 518608.476 ops/s
Iteration  13: 521405.676 ops/s
Iteration  14: 507914.262 ops/s
Iteration  15: 493692.127 ops/s
Iteration  16: 517396.104 ops/s
Iteration  17: 510497.603 ops/s
Iteration  18: 503309.686 ops/s
Iteration  19: 522534.684 ops/s
Iteration  20: 511190.447 ops/s
Iteration  21: 524553.039 ops/s
Iteration  22: 519634.512 ops/s
Iteration  23: 499211.454 ops/s
Iteration  24: 517073.814 ops/s
Iteration  25: 499521.909 ops/s
Iteration  26: 492820.062 ops/s
Iteration  27: 529860.944 ops/s
Iteration  28: 505184.764 ops/s
Iteration  29: 520836.663 ops/s
Iteration  30: 515204.876 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToSingleTest._Benchmark.benchmark_repeatObservableThrowsError":
  511946.678 ±(99.9%) 6520.067 ops/s [Average]
  (min, avg, max) = (492820.062, 511946.678, 529860.944), stdev = 9758.930
  CI (99.9%): [505426.611, 518466.745] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableToSingleTest._Benchmark.benchmark_repeatObservableThrowsError  thrpt   30  511946.678 ± 6520.067  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_startWithArrayOneNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_startWithArrayOneNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 98812.389 ops/s
# Warmup Iteration   2: 424036.601 ops/s
# Warmup Iteration   3: 529156.486 ops/s
# Warmup Iteration   4: 477328.846 ops/s
# Warmup Iteration   5: 505676.488 ops/s
# Warmup Iteration   6: 478633.716 ops/s
# Warmup Iteration   7: 490647.125 ops/s
# Warmup Iteration   8: 518747.170 ops/s
# Warmup Iteration   9: 509882.382 ops/s
# Warmup Iteration  10: 532959.163 ops/s
# Warmup Iteration  11: 510762.035 ops/s
# Warmup Iteration  12: 496547.932 ops/s
# Warmup Iteration  13: 515588.091 ops/s
# Warmup Iteration  14: 503262.463 ops/s
# Warmup Iteration  15: 537911.693 ops/s
# Warmup Iteration  16: 490390.286 ops/s
# Warmup Iteration  17: 531339.712 ops/s
# Warmup Iteration  18: 545060.091 ops/s
# Warmup Iteration  19: 525467.836 ops/s
# Warmup Iteration  20: 549465.727 ops/s
# Warmup Iteration  21: 528262.474 ops/s
# Warmup Iteration  22: 534742.876 ops/s
# Warmup Iteration  23: 505958.001 ops/s
# Warmup Iteration  24: 537523.143 ops/s
# Warmup Iteration  25: 523606.522 ops/s
# Warmup Iteration  26: 529734.303 ops/s
# Warmup Iteration  27: 530233.146 ops/s
# Warmup Iteration  28: 550114.409 ops/s
# Warmup Iteration  29: 540517.370 ops/s
# Warmup Iteration  30: 554437.301 ops/s
Iteration   1: 526805.016 ops/s
Iteration   2: 526423.421 ops/s
Iteration   3: 550034.783 ops/s
Iteration   4: 525964.564 ops/s
Iteration   5: 529386.500 ops/s
Iteration   6: 566117.344 ops/s
Iteration   7: 526819.440 ops/s
Iteration   8: 529419.712 ops/s
Iteration   9: 550652.739 ops/s
Iteration  10: 521783.022 ops/s
Iteration  11: 551038.989 ops/s
Iteration  12: 532850.973 ops/s
Iteration  13: 529067.185 ops/s
Iteration  14: 537879.910 ops/s
Iteration  15: 519861.406 ops/s
Iteration  16: 540890.847 ops/s
Iteration  17: 544055.827 ops/s
Iteration  18: 519524.481 ops/s
Iteration  19: 544884.150 ops/s
Iteration  20: 550790.255 ops/s
Iteration  21: 542069.088 ops/s
Iteration  22: 538857.673 ops/s
Iteration  23: 548306.763 ops/s
Iteration  24: 527755.259 ops/s
Iteration  25: 533519.466 ops/s
Iteration  26: 551030.182 ops/s
Iteration  27: 540166.382 ops/s
Iteration  28: 525687.876 ops/s
Iteration  29: 555332.090 ops/s
Iteration  30: 490041.881 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_startWithArrayOneNull":
  535900.574 ±(99.9%) 9832.526 ops/s [Average]
  (min, avg, max) = (490041.881, 535900.574, 566117.344), stdev = 14716.863
  CI (99.9%): [526068.048, 545733.100] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_startWithArrayOneNull  thrpt   30  535900.574 ± 9832.526  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_singleIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_singleIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 539689.548 ops/s
# Warmup Iteration   2: 2864903.163 ops/s
# Warmup Iteration   3: 4283483.268 ops/s
# Warmup Iteration   4: 4418131.981 ops/s
# Warmup Iteration   5: 4166051.997 ops/s
# Warmup Iteration   6: 4298724.083 ops/s
# Warmup Iteration   7: 4458139.116 ops/s
# Warmup Iteration   8: 4320740.518 ops/s
# Warmup Iteration   9: 4315741.892 ops/s
# Warmup Iteration  10: 4443695.939 ops/s
# Warmup Iteration  11: 4417286.901 ops/s
# Warmup Iteration  12: 4277079.841 ops/s
# Warmup Iteration  13: 4524911.798 ops/s
# Warmup Iteration  14: 4531157.879 ops/s
# Warmup Iteration  15: 4244519.279 ops/s
# Warmup Iteration  16: 4438514.054 ops/s
# Warmup Iteration  17: 4114432.645 ops/s
# Warmup Iteration  18: 4440881.153 ops/s
# Warmup Iteration  19: 4390867.665 ops/s
# Warmup Iteration  20: 4296469.708 ops/s
# Warmup Iteration  21: 4483369.268 ops/s
# Warmup Iteration  22: 4157079.127 ops/s
# Warmup Iteration  23: 4410259.470 ops/s
# Warmup Iteration  24: 4256981.857 ops/s
# Warmup Iteration  25: 4479754.196 ops/s
# Warmup Iteration  26: 4323120.370 ops/s
# Warmup Iteration  27: 4418928.181 ops/s
# Warmup Iteration  28: 4340168.646 ops/s
# Warmup Iteration  29: 4309726.802 ops/s
# Warmup Iteration  30: 4436364.537 ops/s
Iteration   1: 4223233.723 ops/s
Iteration   2: 4420568.969 ops/s
Iteration   3: 4412530.180 ops/s
Iteration   4: 4204066.592 ops/s
Iteration   5: 4273185.622 ops/s
Iteration   6: 4516830.489 ops/s
Iteration   7: 4284820.394 ops/s
Iteration   8: 4338874.326 ops/s
Iteration   9: 4513471.401 ops/s
Iteration  10: 4368422.273 ops/s
Iteration  11: 4439827.791 ops/s
Iteration  12: 4292712.530 ops/s
Iteration  13: 4444261.781 ops/s
Iteration  14: 4532211.226 ops/s
Iteration  15: 4449266.257 ops/s
Iteration  16: 4215760.575 ops/s
Iteration  17: 4539595.144 ops/s
Iteration  18: 4427558.596 ops/s
Iteration  19: 4300323.062 ops/s
Iteration  20: 4349280.892 ops/s
Iteration  21: 4327873.282 ops/s
Iteration  22: 4494056.341 ops/s
Iteration  23: 4445238.329 ops/s
Iteration  24: 4340101.568 ops/s
Iteration  25: 4428056.502 ops/s
Iteration  26: 4365902.884 ops/s
Iteration  27: 4288614.657 ops/s
Iteration  28: 4373775.963 ops/s
Iteration  29: 4558999.422 ops/s
Iteration  30: 4383500.666 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_singleIterable":
  4385097.381 ±(99.9%) 66360.778 ops/s [Average]
  (min, avg, max) = (4204066.592, 4385097.381, 4558999.422), stdev = 99325.695
  CI (99.9%): [4318736.604, 4451458.159] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_singleIterable  thrpt   30  4385097.381 ± 66360.778  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_nonEagerTermination$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_nonEagerTermination

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 631085.895 ops/s
# Warmup Iteration   2: 3422626.988 ops/s
# Warmup Iteration   3: 3756685.164 ops/s
# Warmup Iteration   4: 4440472.374 ops/s
# Warmup Iteration   5: 4636801.036 ops/s
# Warmup Iteration   6: 4286557.899 ops/s
# Warmup Iteration   7: 4430112.925 ops/s
# Warmup Iteration   8: 4437708.184 ops/s
# Warmup Iteration   9: 4254695.977 ops/s
# Warmup Iteration  10: 4457484.908 ops/s
# Warmup Iteration  11: 4560642.592 ops/s
# Warmup Iteration  12: 4341855.077 ops/s
# Warmup Iteration  13: 4426238.440 ops/s
# Warmup Iteration  14: 4428889.497 ops/s
# Warmup Iteration  15: 4599268.423 ops/s
# Warmup Iteration  16: 4534723.795 ops/s
# Warmup Iteration  17: 4526763.779 ops/s
# Warmup Iteration  18: 4308197.351 ops/s
# Warmup Iteration  19: 4531046.362 ops/s
# Warmup Iteration  20: 4396673.808 ops/s
# Warmup Iteration  21: 4699984.729 ops/s
# Warmup Iteration  22: 4576262.983 ops/s
# Warmup Iteration  23: 4418741.569 ops/s
# Warmup Iteration  24: 4449915.379 ops/s
# Warmup Iteration  25: 4546717.859 ops/s
# Warmup Iteration  26: 4394572.584 ops/s
# Warmup Iteration  27: 4613994.543 ops/s
# Warmup Iteration  28: 4395350.081 ops/s
# Warmup Iteration  29: 4430483.471 ops/s
# Warmup Iteration  30: 4592022.272 ops/s
Iteration   1: 4639211.240 ops/s
Iteration   2: 4464496.107 ops/s
Iteration   3: 4390810.164 ops/s
Iteration   4: 4522727.665 ops/s
Iteration   5: 4497264.859 ops/s
Iteration   6: 4386025.532 ops/s
Iteration   7: 4539022.049 ops/s
Iteration   8: 4575604.190 ops/s
Iteration   9: 4384179.526 ops/s
Iteration  10: 4640644.893 ops/s
Iteration  11: 4251817.767 ops/s
Iteration  12: 4450844.578 ops/s
Iteration  13: 4454051.848 ops/s
Iteration  14: 4361510.234 ops/s
Iteration  15: 4405576.302 ops/s
Iteration  16: 4507289.120 ops/s
Iteration  17: 4303057.062 ops/s
Iteration  18: 4554066.917 ops/s
Iteration  19: 4362786.972 ops/s
Iteration  20: 4366990.663 ops/s
Iteration  21: 4540628.375 ops/s
Iteration  22: 4319238.087 ops/s
Iteration  23: 4651332.523 ops/s
Iteration  24: 4096331.367 ops/s
Iteration  25: 3870150.229 ops/s
Iteration  26: 4612026.364 ops/s
Iteration  27: 4392894.376 ops/s
Iteration  28: 4572321.622 ops/s
Iteration  29: 4390969.244 ops/s
Iteration  30: 4392044.466 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_nonEagerTermination":
  4429863.811 ±(99.9%) 109650.109 ops/s [Average]
  (min, avg, max) = (3870150.229, 4429863.811, 4651332.523), stdev = 164119.133
  CI (99.9%): [4320213.703, 4539513.920] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
FlowableUsingTest._Benchmark.benchmark_nonEagerTermination  thrpt   30  4429863.811 ± 109650.109  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalSlowPathCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalSlowPathCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 548993.337 ops/s
# Warmup Iteration   2: 2930939.862 ops/s
# Warmup Iteration   3: 3132217.414 ops/s
# Warmup Iteration   4: 3863680.744 ops/s
# Warmup Iteration   5: 3856952.905 ops/s
# Warmup Iteration   6: 3745884.878 ops/s
# Warmup Iteration   7: 3882251.446 ops/s
# Warmup Iteration   8: 3874890.389 ops/s
# Warmup Iteration   9: 3794157.381 ops/s
# Warmup Iteration  10: 3947395.745 ops/s
# Warmup Iteration  11: 3737753.842 ops/s
# Warmup Iteration  12: 3803573.886 ops/s
# Warmup Iteration  13: 3890764.608 ops/s
# Warmup Iteration  14: 3830696.206 ops/s
# Warmup Iteration  15: 3997941.634 ops/s
# Warmup Iteration  16: 3938729.868 ops/s
# Warmup Iteration  17: 3874520.995 ops/s
# Warmup Iteration  18: 3956004.386 ops/s
# Warmup Iteration  19: 3990456.247 ops/s
# Warmup Iteration  20: 3729200.404 ops/s
# Warmup Iteration  21: 3935955.386 ops/s
# Warmup Iteration  22: 3902667.770 ops/s
# Warmup Iteration  23: 3771229.738 ops/s
# Warmup Iteration  24: 3925217.171 ops/s
# Warmup Iteration  25: 3853450.293 ops/s
# Warmup Iteration  26: 3854916.876 ops/s
# Warmup Iteration  27: 3907391.955 ops/s
# Warmup Iteration  28: 4083828.535 ops/s
# Warmup Iteration  29: 3946194.318 ops/s
# Warmup Iteration  30: 3869261.430 ops/s
Iteration   1: 3908934.301 ops/s
Iteration   2: 3818835.335 ops/s
Iteration   3: 3967462.475 ops/s
Iteration   4: 3949052.572 ops/s
Iteration   5: 3749569.649 ops/s
Iteration   6: 4005259.482 ops/s
Iteration   7: 4021700.248 ops/s
Iteration   8: 3707595.754 ops/s
Iteration   9: 4031532.750 ops/s
Iteration  10: 3833518.492 ops/s
Iteration  11: 3856654.387 ops/s
Iteration  12: 3858122.251 ops/s
Iteration  13: 3821322.584 ops/s
Iteration  14: 3961061.581 ops/s
Iteration  15: 3936356.412 ops/s
Iteration  16: 3904437.904 ops/s
Iteration  17: 3978505.516 ops/s
Iteration  18: 3746876.244 ops/s
Iteration  19: 3906344.278 ops/s
Iteration  20: 3784145.772 ops/s
Iteration  21: 3775894.739 ops/s
Iteration  22: 3931131.801 ops/s
Iteration  23: 3811816.022 ops/s
Iteration  24: 3932269.966 ops/s
Iteration  25: 3745737.131 ops/s
Iteration  26: 3940809.298 ops/s
Iteration  27: 3761400.648 ops/s
Iteration  28: 3861892.552 ops/s
Iteration  29: 3991259.477 ops/s
Iteration  30: 3814886.208 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromArrayTest._Benchmark.benchmark_conditionalSlowPathCancel":
  3877146.194 ±(99.9%) 62041.050 ops/s [Average]
  (min, avg, max) = (3707595.754, 3877146.194, 4031532.750), stdev = 92860.129
  CI (99.9%): [3815105.145, 3939187.244] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableFromArrayTest._Benchmark.benchmark_conditionalSlowPathCancel  thrpt   30  3877146.194 ± 62041.050  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatArrayDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatArrayDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 462673.958 ops/s
# Warmup Iteration   2: 1497040.420 ops/s
# Warmup Iteration   3: 2086423.497 ops/s
# Warmup Iteration   4: 1951520.414 ops/s
# Warmup Iteration   5: 1928872.896 ops/s
# Warmup Iteration   6: 2043971.541 ops/s
# Warmup Iteration   7: 1998156.431 ops/s
# Warmup Iteration   8: 2073541.591 ops/s
# Warmup Iteration   9: 1707683.544 ops/s
# Warmup Iteration  10: 2080753.529 ops/s
# Warmup Iteration  11: 1934314.066 ops/s
# Warmup Iteration  12: 1992376.152 ops/s
# Warmup Iteration  13: 2012760.000 ops/s
# Warmup Iteration  14: 1935876.959 ops/s
# Warmup Iteration  15: 2015113.112 ops/s
# Warmup Iteration  16: 1941846.423 ops/s
# Warmup Iteration  17: 2012739.189 ops/s
# Warmup Iteration  18: 1973037.539 ops/s
# Warmup Iteration  19: 1903573.917 ops/s
# Warmup Iteration  20: 2086787.567 ops/s
# Warmup Iteration  21: 2050983.991 ops/s
# Warmup Iteration  22: 2017271.931 ops/s
# Warmup Iteration  23: 2053195.720 ops/s
# Warmup Iteration  24: 1979302.398 ops/s
# Warmup Iteration  25: 1941276.471 ops/s
# Warmup Iteration  26: 2006094.535 ops/s
# Warmup Iteration  27: 2038718.697 ops/s
# Warmup Iteration  28: 2011566.006 ops/s
# Warmup Iteration  29: 2011828.917 ops/s
# Warmup Iteration  30: 2056395.945 ops/s
Iteration   1: 2088112.720 ops/s
Iteration   2: 1996728.625 ops/s
Iteration   3: 1929253.827 ops/s
Iteration   4: 2055968.378 ops/s
Iteration   5: 1979672.265 ops/s
Iteration   6: 2046691.167 ops/s
Iteration   7: 2048411.579 ops/s
Iteration   8: 1990864.758 ops/s
Iteration   9: 1947725.486 ops/s
Iteration  10: 2031133.284 ops/s
Iteration  11: 2051939.622 ops/s
Iteration  12: 1972009.370 ops/s
Iteration  13: 2064159.350 ops/s
Iteration  14: 1940127.702 ops/s
Iteration  15: 2004437.906 ops/s
Iteration  16: 1959180.634 ops/s
Iteration  17: 1984650.732 ops/s
Iteration  18: 2048386.205 ops/s
Iteration  19: 1496977.601 ops/s
Iteration  20: 2035576.780 ops/s
Iteration  21: 1912902.626 ops/s
Iteration  22: 2000779.791 ops/s
Iteration  23: 2012854.083 ops/s
Iteration  24: 2000504.909 ops/s
Iteration  25: 1990318.994 ops/s
Iteration  26: 1987731.332 ops/s
Iteration  27: 2065613.836 ops/s
Iteration  28: 1955452.008 ops/s
Iteration  29: 1992844.663 ops/s
Iteration  30: 1963891.386 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatArrayDelayError":
  1985163.387 ±(99.9%) 68338.997 ops/s [Average]
  (min, avg, max) = (1496977.601, 1985163.387, 2088112.720), stdev = 102286.601
  CI (99.9%): [1916824.391, 2053502.384] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concatArrayDelayError  thrpt   30  1985163.387 ± 68338.997  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concat3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concat3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 378933.706 ops/s
# Warmup Iteration   2: 1756829.354 ops/s
# Warmup Iteration   3: 2086795.964 ops/s
# Warmup Iteration   4: 2340162.593 ops/s
# Warmup Iteration   5: 2361767.810 ops/s
# Warmup Iteration   6: 2386889.787 ops/s
# Warmup Iteration   7: 2324811.806 ops/s
# Warmup Iteration   8: 2413479.675 ops/s
# Warmup Iteration   9: 2315053.547 ops/s
# Warmup Iteration  10: 2397333.745 ops/s
# Warmup Iteration  11: 2362217.246 ops/s
# Warmup Iteration  12: 2408648.515 ops/s
# Warmup Iteration  13: 2371993.257 ops/s
# Warmup Iteration  14: 2337177.463 ops/s
# Warmup Iteration  15: 2435927.542 ops/s
# Warmup Iteration  16: 2342891.949 ops/s
# Warmup Iteration  17: 2383674.146 ops/s
# Warmup Iteration  18: 2496822.676 ops/s
# Warmup Iteration  19: 2317640.467 ops/s
# Warmup Iteration  20: 2462499.497 ops/s
# Warmup Iteration  21: 2283299.804 ops/s
# Warmup Iteration  22: 2396431.630 ops/s
# Warmup Iteration  23: 2372290.261 ops/s
# Warmup Iteration  24: 2453636.812 ops/s
# Warmup Iteration  25: 2388856.712 ops/s
# Warmup Iteration  26: 2363779.465 ops/s
# Warmup Iteration  27: 2406258.461 ops/s
# Warmup Iteration  28: 2360081.880 ops/s
# Warmup Iteration  29: 2396190.825 ops/s
# Warmup Iteration  30: 2445128.187 ops/s
Iteration   1: 2346372.376 ops/s
Iteration   2: 2511389.132 ops/s
Iteration   3: 2353782.079 ops/s
Iteration   4: 2383863.523 ops/s
Iteration   5: 2390556.335 ops/s
Iteration   6: 2378699.458 ops/s
Iteration   7: 2514869.452 ops/s
Iteration   8: 2346284.569 ops/s
Iteration   9: 2413053.754 ops/s
Iteration  10: 2331325.399 ops/s
Iteration  11: 2466315.763 ops/s
Iteration  12: 2389198.942 ops/s
Iteration  13: 2375255.834 ops/s
Iteration  14: 2388205.673 ops/s
Iteration  15: 2409186.092 ops/s
Iteration  16: 2446975.113 ops/s
Iteration  17: 2344543.109 ops/s
Iteration  18: 2429967.322 ops/s
Iteration  19: 2420138.659 ops/s
Iteration  20: 2310503.150 ops/s
Iteration  21: 2418421.210 ops/s
Iteration  22: 2389623.114 ops/s
Iteration  23: 2342333.595 ops/s
Iteration  24: 2466417.115 ops/s
Iteration  25: 2369720.411 ops/s
Iteration  26: 2417338.434 ops/s
Iteration  27: 2358320.984 ops/s
Iteration  28: 2448087.996 ops/s
Iteration  29: 2316704.135 ops/s
Iteration  30: 2365450.460 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concat3":
  2394763.440 ±(99.9%) 35068.053 ops/s [Average]
  (min, avg, max) = (2310503.150, 2394763.440, 2514869.452), stdev = 52488.215
  CI (99.9%): [2359695.386, 2429831.493] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concat3  thrpt   30  2394763.440 ± 35068.053  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concat4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concat4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 518922.360 ops/s
# Warmup Iteration   2: 1480146.168 ops/s
# Warmup Iteration   3: 1721449.193 ops/s
# Warmup Iteration   4: 2011798.460 ops/s
# Warmup Iteration   5: 2096482.155 ops/s
# Warmup Iteration   6: 2022473.619 ops/s
# Warmup Iteration   7: 2039807.286 ops/s
# Warmup Iteration   8: 2085144.541 ops/s
# Warmup Iteration   9: 1991054.784 ops/s
# Warmup Iteration  10: 2011012.814 ops/s
# Warmup Iteration  11: 2077340.473 ops/s
# Warmup Iteration  12: 2023954.628 ops/s
# Warmup Iteration  13: 2098319.020 ops/s
# Warmup Iteration  14: 2104649.346 ops/s
# Warmup Iteration  15: 2144378.079 ops/s
# Warmup Iteration  16: 1994915.488 ops/s
# Warmup Iteration  17: 2104640.998 ops/s
# Warmup Iteration  18: 2127212.965 ops/s
# Warmup Iteration  19: 2034835.751 ops/s
# Warmup Iteration  20: 2115705.939 ops/s
# Warmup Iteration  21: 2070284.122 ops/s
# Warmup Iteration  22: 2045335.911 ops/s
# Warmup Iteration  23: 2111954.567 ops/s
# Warmup Iteration  24: 2018126.520 ops/s
# Warmup Iteration  25: 1987167.321 ops/s
# Warmup Iteration  26: 2148693.102 ops/s
# Warmup Iteration  27: 2021139.747 ops/s
# Warmup Iteration  28: 2090824.440 ops/s
# Warmup Iteration  29: 2092493.889 ops/s
# Warmup Iteration  30: 1982930.591 ops/s
Iteration   1: 2125533.128 ops/s
Iteration   2: 1982188.860 ops/s
Iteration   3: 2033710.076 ops/s
Iteration   4: 2090174.754 ops/s
Iteration   5: 2003679.325 ops/s
Iteration   6: 2133642.881 ops/s
Iteration   7: 2022306.417 ops/s
Iteration   8: 2082464.438 ops/s
Iteration   9: 2036666.341 ops/s
Iteration  10: 2038681.386 ops/s
Iteration  11: 2110109.541 ops/s
Iteration  12: 2138735.604 ops/s
Iteration  13: 2038042.111 ops/s
Iteration  14: 1629766.292 ops/s
Iteration  15: 1994370.084 ops/s
Iteration  16: 2072744.058 ops/s
Iteration  17: 2053637.340 ops/s
Iteration  18: 2062087.573 ops/s
Iteration  19: 2010782.978 ops/s
Iteration  20: 2107996.416 ops/s
Iteration  21: 2000333.685 ops/s
Iteration  22: 2033130.662 ops/s
Iteration  23: 2148887.644 ops/s
Iteration  24: 1976425.763 ops/s
Iteration  25: 2110632.470 ops/s
Iteration  26: 2014616.212 ops/s
Iteration  27: 2082298.102 ops/s
Iteration  28: 2034941.037 ops/s
Iteration  29: 2029244.974 ops/s
Iteration  30: 2140469.672 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concat4":
  2044609.994 ±(99.9%) 62309.562 ops/s [Average]
  (min, avg, max) = (1629766.292, 2044609.994, 2148887.644), stdev = 93262.025
  CI (99.9%): [1982300.433, 2106919.556] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_concat4  thrpt   30  2044609.994 ± 62309.562  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_justTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_justTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 510109.765 ops/s
# Warmup Iteration   2: 1720255.381 ops/s
# Warmup Iteration   3: 2416802.437 ops/s
# Warmup Iteration   4: 2927499.053 ops/s
# Warmup Iteration   5: 2902374.195 ops/s
# Warmup Iteration   6: 3122668.204 ops/s
# Warmup Iteration   7: 3183681.543 ops/s
# Warmup Iteration   8: 2998224.130 ops/s
# Warmup Iteration   9: 2958951.941 ops/s
# Warmup Iteration  10: 3145401.911 ops/s
# Warmup Iteration  11: 2929749.553 ops/s
# Warmup Iteration  12: 2667189.644 ops/s
# Warmup Iteration  13: 3017340.217 ops/s
# Warmup Iteration  14: 3078275.164 ops/s
# Warmup Iteration  15: 3199712.661 ops/s
# Warmup Iteration  16: 2902560.856 ops/s
# Warmup Iteration  17: 3251450.596 ops/s
# Warmup Iteration  18: 3081523.444 ops/s
# Warmup Iteration  19: 3014211.520 ops/s
# Warmup Iteration  20: 3181360.403 ops/s
# Warmup Iteration  21: 3059652.834 ops/s
# Warmup Iteration  22: 3064628.125 ops/s
# Warmup Iteration  23: 3097471.924 ops/s
# Warmup Iteration  24: 3016520.702 ops/s
# Warmup Iteration  25: 3084148.465 ops/s
# Warmup Iteration  26: 3078019.040 ops/s
# Warmup Iteration  27: 3043705.165 ops/s
# Warmup Iteration  28: 3146798.556 ops/s
# Warmup Iteration  29: 3059066.445 ops/s
# Warmup Iteration  30: 3110230.209 ops/s
Iteration   1: 3065416.783 ops/s
Iteration   2: 3129746.567 ops/s
Iteration   3: 3221877.106 ops/s
Iteration   4: 3002918.057 ops/s
Iteration   5: 3138901.885 ops/s
Iteration   6: 3045161.283 ops/s
Iteration   7: 3148226.841 ops/s
Iteration   8: 3061376.850 ops/s
Iteration   9: 3080243.481 ops/s
Iteration  10: 3098630.272 ops/s
Iteration  11: 3077361.664 ops/s
Iteration  12: 3173912.323 ops/s
Iteration  13: 3124865.954 ops/s
Iteration  14: 3056426.170 ops/s
Iteration  15: 3007341.468 ops/s
Iteration  16: 3113612.517 ops/s
Iteration  17: 3009982.225 ops/s
Iteration  18: 3148661.086 ops/s
Iteration  19: 3135639.629 ops/s
Iteration  20: 3124994.954 ops/s
Iteration  21: 3291054.915 ops/s
Iteration  22: 3173287.391 ops/s
Iteration  23: 3045233.349 ops/s
Iteration  24: 3154180.235 ops/s
Iteration  25: 3132037.553 ops/s
Iteration  26: 3034063.568 ops/s
Iteration  27: 3018832.477 ops/s
Iteration  28: 3226384.615 ops/s
Iteration  29: 3034051.199 ops/s
Iteration  30: 3163899.405 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_justTake":
  3107944.061 ±(99.9%) 47567.728 ops/s [Average]
  (min, avg, max) = (3002918.057, 3107944.061, 3291054.915), stdev = 71197.142
  CI (99.9%): [3060376.333, 3155511.789] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_justTake  thrpt   30  3107944.061 ± 47567.728  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_emptyAndScalarBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_emptyAndScalarBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 636830.808 ops/s
# Warmup Iteration   2: 2574291.947 ops/s
# Warmup Iteration   3: 2840256.003 ops/s
# Warmup Iteration   4: 3296819.124 ops/s
# Warmup Iteration   5: 3327552.320 ops/s
# Warmup Iteration   6: 3399196.523 ops/s
# Warmup Iteration   7: 3427586.682 ops/s
# Warmup Iteration   8: 3282233.621 ops/s
# Warmup Iteration   9: 3351480.468 ops/s
# Warmup Iteration  10: 3470404.566 ops/s
# Warmup Iteration  11: 3197819.879 ops/s
# Warmup Iteration  12: 3370797.882 ops/s
# Warmup Iteration  13: 3439835.286 ops/s
# Warmup Iteration  14: 3269043.643 ops/s
# Warmup Iteration  15: 3545890.903 ops/s
# Warmup Iteration  16: 3397161.834 ops/s
# Warmup Iteration  17: 3409269.966 ops/s
# Warmup Iteration  18: 3329040.821 ops/s
# Warmup Iteration  19: 3342382.984 ops/s
# Warmup Iteration  20: 3475017.742 ops/s
# Warmup Iteration  21: 3393992.251 ops/s
# Warmup Iteration  22: 3400514.936 ops/s
# Warmup Iteration  23: 3442486.287 ops/s
# Warmup Iteration  24: 3392548.494 ops/s
# Warmup Iteration  25: 3334146.405 ops/s
# Warmup Iteration  26: 3442877.225 ops/s
# Warmup Iteration  27: 3239009.962 ops/s
# Warmup Iteration  28: 3342335.030 ops/s
# Warmup Iteration  29: 3479404.469 ops/s
# Warmup Iteration  30: 3303890.938 ops/s
Iteration   1: 3371288.849 ops/s
Iteration   2: 3383585.248 ops/s
Iteration   3: 3487626.520 ops/s
Iteration   4: 3431009.398 ops/s
Iteration   5: 3322906.503 ops/s
Iteration   6: 3385530.069 ops/s
Iteration   7: 3414709.745 ops/s
Iteration   8: 3170653.077 ops/s
Iteration   9: 2802712.543 ops/s
Iteration  10: 3508883.415 ops/s
Iteration  11: 3329522.582 ops/s
Iteration  12: 3485714.023 ops/s
Iteration  13: 3248934.977 ops/s
Iteration  14: 3407795.020 ops/s
Iteration  15: 3351823.337 ops/s
Iteration  16: 3351636.769 ops/s
Iteration  17: 3504488.376 ops/s
Iteration  18: 3320372.886 ops/s
Iteration  19: 3451674.027 ops/s
Iteration  20: 3484665.508 ops/s
Iteration  21: 3318461.562 ops/s
Iteration  22: 3462957.044 ops/s
Iteration  23: 3298947.893 ops/s
Iteration  24: 3522277.949 ops/s
Iteration  25: 3374853.840 ops/s
Iteration  26: 3334652.468 ops/s
Iteration  27: 3513091.771 ops/s
Iteration  28: 3295575.577 ops/s
Iteration  29: 3403831.914 ops/s
Iteration  30: 3488789.673 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_emptyAndScalarBackpressured":
  3374299.085 ±(99.9%) 92569.579 ops/s [Average]
  (min, avg, max) = (2802712.543, 3374299.085, 3522277.949), stdev = 138553.799
  CI (99.9%): [3281729.506, 3466868.665] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_emptyAndScalarBackpressured  thrpt   30  3374299.085 ± 92569.579  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 480383.647 ops/s
# Warmup Iteration   2: 2302357.334 ops/s
# Warmup Iteration   3: 4238221.952 ops/s
# Warmup Iteration   4: 4120811.982 ops/s
# Warmup Iteration   5: 3596888.214 ops/s
# Warmup Iteration   6: 4255131.306 ops/s
# Warmup Iteration   7: 4104118.541 ops/s
# Warmup Iteration   8: 4325643.976 ops/s
# Warmup Iteration   9: 4441574.462 ops/s
# Warmup Iteration  10: 4247921.685 ops/s
# Warmup Iteration  11: 4169242.957 ops/s
# Warmup Iteration  12: 4330664.904 ops/s
# Warmup Iteration  13: 4279356.589 ops/s
# Warmup Iteration  14: 4226187.391 ops/s
# Warmup Iteration  15: 4347661.276 ops/s
# Warmup Iteration  16: 4268281.055 ops/s
# Warmup Iteration  17: 4097860.858 ops/s
# Warmup Iteration  18: 4276796.304 ops/s
# Warmup Iteration  19: 4230529.982 ops/s
# Warmup Iteration  20: 4212910.054 ops/s
# Warmup Iteration  21: 4435068.388 ops/s
# Warmup Iteration  22: 4268065.633 ops/s
# Warmup Iteration  23: 4323988.153 ops/s
# Warmup Iteration  24: 4084007.477 ops/s
# Warmup Iteration  25: 4143040.425 ops/s
# Warmup Iteration  26: 4306124.255 ops/s
# Warmup Iteration  27: 4223861.582 ops/s
# Warmup Iteration  28: 4365536.479 ops/s
# Warmup Iteration  29: 4433540.286 ops/s
# Warmup Iteration  30: 4207821.718 ops/s
Iteration   1: 4224615.290 ops/s
Iteration   2: 4306602.666 ops/s
Iteration   3: 4193841.485 ops/s
Iteration   4: 4283865.861 ops/s
Iteration   5: 4375405.743 ops/s
Iteration   6: 4205032.640 ops/s
Iteration   7: 4217510.686 ops/s
Iteration   8: 4413666.868 ops/s
Iteration   9: 4087002.894 ops/s
Iteration  10: 4318769.343 ops/s
Iteration  11: 4214756.996 ops/s
Iteration  12: 4256997.061 ops/s
Iteration  13: 4401910.932 ops/s
Iteration  14: 4316900.648 ops/s
Iteration  15: 4158637.695 ops/s
Iteration  16: 4277793.978 ops/s
Iteration  17: 4393315.405 ops/s
Iteration  18: 4178251.665 ops/s
Iteration  19: 4403347.643 ops/s
Iteration  20: 4145335.576 ops/s
Iteration  21: 4281556.378 ops/s
Iteration  22: 4193181.667 ops/s
Iteration  23: 4267026.058 ops/s
Iteration  24: 4158761.786 ops/s
Iteration  25: 4192839.115 ops/s
Iteration  26: 4379202.544 ops/s
Iteration  27: 4270144.550 ops/s
Iteration  28: 4328084.729 ops/s
Iteration  29: 4121691.215 ops/s
Iteration  30: 4292355.588 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure":
  4261946.824 ±(99.9%) 60326.335 ops/s [Average]
  (min, avg, max) = (4087002.894, 4261946.824, 4413666.868), stdev = 90293.626
  CI (99.9%): [4201620.488, 4322273.159] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_nearMaxValueWithoutBackpressure  thrpt   30  4261946.824 ± 60326.335  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 544760.205 ops/s
# Warmup Iteration   2: 1876956.602 ops/s
# Warmup Iteration   3: 2616677.624 ops/s
# Warmup Iteration   4: 3080718.739 ops/s
# Warmup Iteration   5: 2935603.362 ops/s
# Warmup Iteration   6: 3074551.293 ops/s
# Warmup Iteration   7: 3170748.366 ops/s
# Warmup Iteration   8: 2977410.492 ops/s
# Warmup Iteration   9: 3059044.012 ops/s
# Warmup Iteration  10: 3038186.102 ops/s
# Warmup Iteration  11: 2995052.140 ops/s
# Warmup Iteration  12: 3068906.233 ops/s
# Warmup Iteration  13: 3018857.282 ops/s
# Warmup Iteration  14: 3056793.806 ops/s
# Warmup Iteration  15: 3102533.268 ops/s
# Warmup Iteration  16: 2992059.839 ops/s
# Warmup Iteration  17: 3184023.495 ops/s
# Warmup Iteration  18: 2956430.072 ops/s
# Warmup Iteration  19: 3127700.466 ops/s
# Warmup Iteration  20: 3010305.893 ops/s
# Warmup Iteration  21: 2999482.986 ops/s
# Warmup Iteration  22: 3044826.652 ops/s
# Warmup Iteration  23: 2943768.379 ops/s
# Warmup Iteration  24: 2953105.451 ops/s
# Warmup Iteration  25: 3072920.043 ops/s
# Warmup Iteration  26: 3137320.220 ops/s
# Warmup Iteration  27: 2998754.650 ops/s
# Warmup Iteration  28: 3148594.121 ops/s
# Warmup Iteration  29: 3035489.916 ops/s
# Warmup Iteration  30: 3050999.497 ops/s
Iteration   1: 3163025.407 ops/s
Iteration   2: 2922770.513 ops/s
Iteration   3: 2423971.504 ops/s
Iteration   4: 3097933.290 ops/s
Iteration   5: 3048139.125 ops/s
Iteration   6: 3067149.012 ops/s
Iteration   7: 3042464.958 ops/s
Iteration   8: 2969538.548 ops/s
Iteration   9: 3085119.883 ops/s
Iteration  10: 2961995.834 ops/s
Iteration  11: 3134692.398 ops/s
Iteration  12: 3154588.275 ops/s
Iteration  13: 2984197.168 ops/s
Iteration  14: 3116754.606 ops/s
Iteration  15: 2977745.246 ops/s
Iteration  16: 3067875.430 ops/s
Iteration  17: 3077097.631 ops/s
Iteration  18: 2956926.261 ops/s
Iteration  19: 3020368.253 ops/s
Iteration  20: 3083117.373 ops/s
Iteration  21: 3005662.642 ops/s
Iteration  22: 3072053.154 ops/s
Iteration  23: 3028844.418 ops/s
Iteration  24: 3057281.961 ops/s
Iteration  25: 3042711.843 ops/s
Iteration  26: 3097285.212 ops/s
Iteration  27: 3010388.619 ops/s
Iteration  28: 3085718.784 ops/s
Iteration  29: 3118864.269 ops/s
Iteration  30: 2993098.944 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_just":
  3028912.685 ±(99.9%) 86447.365 ops/s [Average]
  (min, avg, max) = (2423971.504, 3028912.685, 3163025.407), stdev = 129390.356
  CI (99.9%): [2942465.320, 3115360.050] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_just  thrpt   30  3028912.685 ± 86447.365  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_nearMaxValueWithBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_nearMaxValueWithBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 500249.970 ops/s
# Warmup Iteration   2: 2787817.377 ops/s
# Warmup Iteration   3: 3802141.242 ops/s
# Warmup Iteration   4: 4060545.941 ops/s
# Warmup Iteration   5: 4311951.335 ops/s
# Warmup Iteration   6: 4091065.871 ops/s
# Warmup Iteration   7: 3936638.429 ops/s
# Warmup Iteration   8: 4198136.651 ops/s
# Warmup Iteration   9: 4247880.103 ops/s
# Warmup Iteration  10: 3997967.692 ops/s
# Warmup Iteration  11: 4012713.607 ops/s
# Warmup Iteration  12: 4211199.093 ops/s
# Warmup Iteration  13: 3993615.190 ops/s
# Warmup Iteration  14: 4192641.317 ops/s
# Warmup Iteration  15: 4207445.039 ops/s
# Warmup Iteration  16: 4076187.604 ops/s
# Warmup Iteration  17: 4089628.651 ops/s
# Warmup Iteration  18: 4191767.751 ops/s
# Warmup Iteration  19: 4141113.277 ops/s
# Warmup Iteration  20: 4025700.943 ops/s
# Warmup Iteration  21: 4290826.574 ops/s
# Warmup Iteration  22: 4296368.038 ops/s
# Warmup Iteration  23: 3990015.457 ops/s
# Warmup Iteration  24: 3987569.071 ops/s
# Warmup Iteration  25: 4218427.874 ops/s
# Warmup Iteration  26: 4025883.818 ops/s
# Warmup Iteration  27: 4045277.427 ops/s
# Warmup Iteration  28: 4358504.765 ops/s
# Warmup Iteration  29: 3936498.147 ops/s
# Warmup Iteration  30: 4241867.312 ops/s
Iteration   1: 3993114.357 ops/s
Iteration   2: 4097564.444 ops/s
Iteration   3: 4173414.276 ops/s
Iteration   4: 4169136.228 ops/s
Iteration   5: 4235485.263 ops/s
Iteration   6: 3990020.022 ops/s
Iteration   7: 4030425.855 ops/s
Iteration   8: 4104039.377 ops/s
Iteration   9: 4167317.922 ops/s
Iteration  10: 4173935.721 ops/s
Iteration  11: 4005529.331 ops/s
Iteration  12: 4136963.177 ops/s
Iteration  13: 4088259.427 ops/s
Iteration  14: 4042906.368 ops/s
Iteration  15: 4014055.133 ops/s
Iteration  16: 4225006.522 ops/s
Iteration  17: 3953882.856 ops/s
Iteration  18: 4018644.024 ops/s
Iteration  19: 4174802.870 ops/s
Iteration  20: 4287120.955 ops/s
Iteration  21: 3999507.948 ops/s
Iteration  22: 4136297.490 ops/s
Iteration  23: 4031409.175 ops/s
Iteration  24: 4136656.297 ops/s
Iteration  25: 4263765.151 ops/s
Iteration  26: 3993053.945 ops/s
Iteration  27: 4130051.864 ops/s
Iteration  28: 4056244.893 ops/s
Iteration  29: 4225727.101 ops/s
Iteration  30: 4001071.302 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_nearMaxValueWithBackpressure":
  4101846.977 ±(99.9%) 62799.397 ops/s [Average]
  (min, avg, max) = (3953882.856, 4101846.977, 4287120.955), stdev = 93995.189
  CI (99.9%): [4039047.579, 4164646.374] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_nearMaxValueWithBackpressure  thrpt   30  4101846.977 ± 62799.397  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_scalarAndEmptyBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_scalarAndEmptyBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 602772.148 ops/s
# Warmup Iteration   2: 2104258.789 ops/s
# Warmup Iteration   3: 2725190.142 ops/s
# Warmup Iteration   4: 3057625.735 ops/s
# Warmup Iteration   5: 3160168.361 ops/s
# Warmup Iteration   6: 3183427.817 ops/s
# Warmup Iteration   7: 3104207.615 ops/s
# Warmup Iteration   8: 3024453.694 ops/s
# Warmup Iteration   9: 3064983.881 ops/s
# Warmup Iteration  10: 3000099.986 ops/s
# Warmup Iteration  11: 3024240.240 ops/s
# Warmup Iteration  12: 3199543.107 ops/s
# Warmup Iteration  13: 2902665.505 ops/s
# Warmup Iteration  14: 3067302.275 ops/s
# Warmup Iteration  15: 3152911.680 ops/s
# Warmup Iteration  16: 3007574.024 ops/s
# Warmup Iteration  17: 3024008.972 ops/s
# Warmup Iteration  18: 3183790.856 ops/s
# Warmup Iteration  19: 3064012.286 ops/s
# Warmup Iteration  20: 3102429.733 ops/s
# Warmup Iteration  21: 3170905.545 ops/s
# Warmup Iteration  22: 3010075.959 ops/s
# Warmup Iteration  23: 3099911.929 ops/s
# Warmup Iteration  24: 2993289.289 ops/s
# Warmup Iteration  25: 3215795.604 ops/s
# Warmup Iteration  26: 3077430.109 ops/s
# Warmup Iteration  27: 2504130.436 ops/s
# Warmup Iteration  28: 3135248.566 ops/s
# Warmup Iteration  29: 3024130.543 ops/s
# Warmup Iteration  30: 3071738.997 ops/s
Iteration   1: 3193631.183 ops/s
Iteration   2: 3113132.944 ops/s
Iteration   3: 3040539.745 ops/s
Iteration   4: 3042259.806 ops/s
Iteration   5: 3162620.649 ops/s
Iteration   6: 3232036.310 ops/s
Iteration   7: 3010407.695 ops/s
Iteration   8: 3112413.838 ops/s
Iteration   9: 2958586.517 ops/s
Iteration  10: 3144875.597 ops/s
Iteration  11: 3117754.166 ops/s
Iteration  12: 2994066.266 ops/s
Iteration  13: 3087963.915 ops/s
Iteration  14: 3138639.559 ops/s
Iteration  15: 3187073.590 ops/s
Iteration  16: 3159197.030 ops/s
Iteration  17: 2983395.035 ops/s
Iteration  18: 3171624.624 ops/s
Iteration  19: 3005131.574 ops/s
Iteration  20: 3198605.489 ops/s
Iteration  21: 3212044.978 ops/s
Iteration  22: 2997012.578 ops/s
Iteration  23: 3097400.997 ops/s
Iteration  24: 3022106.064 ops/s
Iteration  25: 3122836.982 ops/s
Iteration  26: 3188508.083 ops/s
Iteration  27: 3008108.823 ops/s
Iteration  28: 3101722.323 ops/s
Iteration  29: 3136956.470 ops/s
Iteration  30: 3151358.274 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_scalarAndEmptyBackpressured":
  3103067.037 ±(99.9%) 52464.471 ops/s [Average]
  (min, avg, max) = (2958586.517, 3103067.037, 3232036.310), stdev = 78526.356
  CI (99.9%): [3050602.566, 3155531.507] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_scalarAndEmptyBackpressured  thrpt   30  3103067.037 ± 52464.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_requestOneByOneConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_requestOneByOneConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 92051.790 ops/s
# Warmup Iteration   2: 391745.639 ops/s
# Warmup Iteration   3: 1041759.405 ops/s
# Warmup Iteration   4: 980133.054 ops/s
# Warmup Iteration   5: 1081278.410 ops/s
# Warmup Iteration   6: 1017587.918 ops/s
# Warmup Iteration   7: 967371.742 ops/s
# Warmup Iteration   8: 989060.156 ops/s
# Warmup Iteration   9: 996055.848 ops/s
# Warmup Iteration  10: 1040866.028 ops/s
# Warmup Iteration  11: 1078219.837 ops/s
# Warmup Iteration  12: 965840.456 ops/s
# Warmup Iteration  13: 1042641.944 ops/s
# Warmup Iteration  14: 1085424.723 ops/s
# Warmup Iteration  15: 1097636.865 ops/s
# Warmup Iteration  16: 1019516.961 ops/s
# Warmup Iteration  17: 1005457.376 ops/s
# Warmup Iteration  18: 1085773.621 ops/s
# Warmup Iteration  19: 1028861.699 ops/s
# Warmup Iteration  20: 1067015.419 ops/s
# Warmup Iteration  21: 954795.158 ops/s
# Warmup Iteration  22: 1082262.149 ops/s
# Warmup Iteration  23: 1090057.500 ops/s
# Warmup Iteration  24: 1015713.522 ops/s
# Warmup Iteration  25: 1011162.798 ops/s
# Warmup Iteration  26: 1070876.593 ops/s
# Warmup Iteration  27: 1027817.055 ops/s
# Warmup Iteration  28: 1037858.622 ops/s
# Warmup Iteration  29: 1072653.493 ops/s
# Warmup Iteration  30: 1032201.231 ops/s
Iteration   1: 1075691.122 ops/s
Iteration   2: 1013422.021 ops/s
Iteration   3: 1053030.163 ops/s
Iteration   4: 1074060.607 ops/s
Iteration   5: 1020040.082 ops/s
Iteration   6: 1043466.535 ops/s
Iteration   7: 1066200.224 ops/s
Iteration   8: 1006550.084 ops/s
Iteration   9: 1056827.093 ops/s
Iteration  10: 1046643.486 ops/s
Iteration  11: 1065588.360 ops/s
Iteration  12: 1050270.020 ops/s
Iteration  13: 1009894.677 ops/s
Iteration  14: 1076333.057 ops/s
Iteration  15: 1048334.571 ops/s
Iteration  16: 1034050.186 ops/s
Iteration  17: 1063099.608 ops/s
Iteration  18: 1043545.402 ops/s
Iteration  19: 1078027.804 ops/s
Iteration  20: 1042800.143 ops/s
Iteration  21: 1031307.620 ops/s
Iteration  22: 1049699.162 ops/s
Iteration  23: 1081540.910 ops/s
Iteration  24: 987443.387 ops/s
Iteration  25: 1067613.989 ops/s
Iteration  26: 1013589.279 ops/s
Iteration  27: 1030713.357 ops/s
Iteration  28: 1090482.042 ops/s
Iteration  29: 1050049.263 ops/s
Iteration  30: 1052987.443 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_requestOneByOneConditional":
  1047443.390 ±(99.9%) 16785.372 ops/s [Average]
  (min, avg, max) = (987443.387, 1047443.390, 1090482.042), stdev = 25123.556
  CI (99.9%): [1030658.018, 1064228.762] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_requestOneByOneConditional  thrpt   30  1047443.390 ± 16785.372  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_debounceFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_debounceFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229713.695 ops/s
# Warmup Iteration   2: 494305.038 ops/s
# Warmup Iteration   3: 544486.650 ops/s
# Warmup Iteration   4: 524818.938 ops/s
# Warmup Iteration   5: 561366.357 ops/s
# Warmup Iteration   6: 570139.125 ops/s
# Warmup Iteration   7: 581157.130 ops/s
# Warmup Iteration   8: 564552.484 ops/s
# Warmup Iteration   9: 572261.026 ops/s
# Warmup Iteration  10: 577575.895 ops/s
# Warmup Iteration  11: 572339.787 ops/s
# Warmup Iteration  12: 571840.076 ops/s
# Warmup Iteration  13: 576712.437 ops/s
# Warmup Iteration  14: 542988.861 ops/s
# Warmup Iteration  15: 587711.863 ops/s
# Warmup Iteration  16: 600844.675 ops/s
# Warmup Iteration  17: 585262.957 ops/s
# Warmup Iteration  18: 608443.764 ops/s
# Warmup Iteration  19: 586904.795 ops/s
# Warmup Iteration  20: 587487.665 ops/s
# Warmup Iteration  21: 525430.490 ops/s
# Warmup Iteration  22: 553948.296 ops/s
# Warmup Iteration  23: 566857.653 ops/s
# Warmup Iteration  24: 604099.091 ops/s
# Warmup Iteration  25: 610674.837 ops/s
# Warmup Iteration  26: 596575.895 ops/s
# Warmup Iteration  27: 610960.270 ops/s
# Warmup Iteration  28: 619931.989 ops/s
# Warmup Iteration  29: 591501.121 ops/s
# Warmup Iteration  30: 581221.305 ops/s
Iteration   1: 610374.497 ops/s
Iteration   2: 571341.715 ops/s
Iteration   3: 604235.128 ops/s
Iteration   4: 589847.436 ops/s
Iteration   5: 587668.033 ops/s
Iteration   6: 579994.731 ops/s
Iteration   7: 608270.625 ops/s
Iteration   8: 593768.540 ops/s
Iteration   9: 605372.013 ops/s
Iteration  10: 581562.528 ops/s
Iteration  11: 597653.172 ops/s
Iteration  12: 602967.496 ops/s
Iteration  13: 575642.435 ops/s
Iteration  14: 564457.382 ops/s
Iteration  15: 605417.819 ops/s
Iteration  16: 588100.842 ops/s
Iteration  17: 615832.686 ops/s
Iteration  18: 578058.564 ops/s
Iteration  19: 592790.123 ops/s
Iteration  20: 610745.814 ops/s
Iteration  21: 584690.573 ops/s
Iteration  22: 598648.467 ops/s
Iteration  23: 602534.101 ops/s
Iteration  24: 600133.883 ops/s
Iteration  25: 588159.623 ops/s
Iteration  26: 602215.771 ops/s
Iteration  27: 608945.911 ops/s
Iteration  28: 576526.052 ops/s
Iteration  29: 618031.342 ops/s
Iteration  30: 587726.863 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_debounceFunctionReturnsNull":
  594390.472 ±(99.9%) 9259.472 ops/s [Average]
  (min, avg, max) = (564457.382, 594390.472, 618031.342), stdev = 13859.143
  CI (99.9%): [585131.000, 603649.944] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_debounceFunctionReturnsNull  thrpt   30  594390.472 ± 9259.472  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_multipleOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_multipleOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 772054.700 ops/s
# Warmup Iteration   2: 3739636.438 ops/s
# Warmup Iteration   3: 4882073.744 ops/s
# Warmup Iteration   4: 5549601.911 ops/s
# Warmup Iteration   5: 5657963.561 ops/s
# Warmup Iteration   6: 5498672.930 ops/s
# Warmup Iteration   7: 5594391.133 ops/s
# Warmup Iteration   8: 5721148.107 ops/s
# Warmup Iteration   9: 5369998.557 ops/s
# Warmup Iteration  10: 5905726.939 ops/s
# Warmup Iteration  11: 5621078.624 ops/s
# Warmup Iteration  12: 5446535.429 ops/s
# Warmup Iteration  13: 5703612.996 ops/s
# Warmup Iteration  14: 5729360.864 ops/s
# Warmup Iteration  15: 5528895.112 ops/s
# Warmup Iteration  16: 5949924.970 ops/s
# Warmup Iteration  17: 5677696.206 ops/s
# Warmup Iteration  18: 5874956.043 ops/s
# Warmup Iteration  19: 5532945.512 ops/s
# Warmup Iteration  20: 5846209.463 ops/s
# Warmup Iteration  21: 5437106.399 ops/s
# Warmup Iteration  22: 5644892.542 ops/s
# Warmup Iteration  23: 5814675.152 ops/s
# Warmup Iteration  24: 5438336.637 ops/s
# Warmup Iteration  25: 5568182.547 ops/s
# Warmup Iteration  26: 5622705.570 ops/s
# Warmup Iteration  27: 5497517.595 ops/s
# Warmup Iteration  28: 5784256.304 ops/s
# Warmup Iteration  29: 5392792.399 ops/s
# Warmup Iteration  30: 5671602.256 ops/s
Iteration   1: 5386438.573 ops/s
Iteration   2: 5641991.974 ops/s
Iteration   3: 5754372.039 ops/s
Iteration   4: 5580787.669 ops/s
Iteration   5: 5699991.503 ops/s
Iteration   6: 5607430.509 ops/s
Iteration   7: 5423878.371 ops/s
Iteration   8: 5804463.617 ops/s
Iteration   9: 5603896.760 ops/s
Iteration  10: 5574768.429 ops/s
Iteration  11: 5555940.903 ops/s
Iteration  12: 5903949.126 ops/s
Iteration  13: 5661592.395 ops/s
Iteration  14: 5746100.084 ops/s
Iteration  15: 5578938.920 ops/s
Iteration  16: 5494504.138 ops/s
Iteration  17: 5548034.367 ops/s
Iteration  18: 5825038.160 ops/s
Iteration  19: 5658031.520 ops/s
Iteration  20: 5564983.536 ops/s
Iteration  21: 5605386.521 ops/s
Iteration  22: 5426949.445 ops/s
Iteration  23: 5900176.156 ops/s
Iteration  24: 5577986.771 ops/s
Iteration  25: 5638146.916 ops/s
Iteration  26: 5728592.272 ops/s
Iteration  27: 5584562.975 ops/s
Iteration  28: 5732087.291 ops/s
Iteration  29: 5527044.291 ops/s
Iteration  30: 5653368.943 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_multipleOnComplete":
  5632981.139 ±(99.9%) 85583.231 ops/s [Average]
  (min, avg, max) = (5386438.573, 5632981.139, 5903949.126), stdev = 128096.961
  CI (99.9%): [5547397.908, 5718564.370] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableGenerateTest._Benchmark.benchmark_multipleOnComplete  thrpt   30  5632981.139 ± 85583.231  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 310206.149 ops/s
# Warmup Iteration   2: 2125461.839 ops/s
# Warmup Iteration   3: 3523581.333 ops/s
# Warmup Iteration   4: 3941445.287 ops/s
# Warmup Iteration   5: 3570660.095 ops/s
# Warmup Iteration   6: 3890528.505 ops/s
# Warmup Iteration   7: 3855719.246 ops/s
# Warmup Iteration   8: 3447169.157 ops/s
# Warmup Iteration   9: 3783024.797 ops/s
# Warmup Iteration  10: 3767853.126 ops/s
# Warmup Iteration  11: 3840900.308 ops/s
# Warmup Iteration  12: 3670725.334 ops/s
# Warmup Iteration  13: 3825642.519 ops/s
# Warmup Iteration  14: 3796525.992 ops/s
# Warmup Iteration  15: 3697803.163 ops/s
# Warmup Iteration  16: 3256542.618 ops/s
# Warmup Iteration  17: 3679411.785 ops/s
# Warmup Iteration  18: 3719331.826 ops/s
# Warmup Iteration  19: 3921723.165 ops/s
# Warmup Iteration  20: 3783056.662 ops/s
# Warmup Iteration  21: 3827079.513 ops/s
# Warmup Iteration  22: 3666412.475 ops/s
# Warmup Iteration  23: 3934869.627 ops/s
# Warmup Iteration  24: 3735089.973 ops/s
# Warmup Iteration  25: 3755819.952 ops/s
# Warmup Iteration  26: 3891789.241 ops/s
# Warmup Iteration  27: 3963975.448 ops/s
# Warmup Iteration  28: 3712087.584 ops/s
# Warmup Iteration  29: 3868403.231 ops/s
# Warmup Iteration  30: 3785900.373 ops/s
Iteration   1: 3851612.288 ops/s
Iteration   2: 3642556.470 ops/s
Iteration   3: 3795795.985 ops/s
Iteration   4: 4016600.986 ops/s
Iteration   5: 3811708.809 ops/s
Iteration   6: 3641570.409 ops/s
Iteration   7: 3950979.544 ops/s
Iteration   8: 3786724.492 ops/s
Iteration   9: 3960726.810 ops/s
Iteration  10: 3748648.244 ops/s
Iteration  11: 3752116.415 ops/s
Iteration  12: 3973650.610 ops/s
Iteration  13: 3737737.320 ops/s
Iteration  14: 3916967.273 ops/s
Iteration  15: 3852803.319 ops/s
Iteration  16: 3777915.784 ops/s
Iteration  17: 3966641.968 ops/s
Iteration  18: 3957600.235 ops/s
Iteration  19: 3760619.720 ops/s
Iteration  20: 3828265.164 ops/s
Iteration  21: 3893238.655 ops/s
Iteration  22: 3775113.424 ops/s
Iteration  23: 3940845.071 ops/s
Iteration  24: 3720276.238 ops/s
Iteration  25: 3945017.270 ops/s
Iteration  26: 3758714.184 ops/s
Iteration  27: 3981927.221 ops/s
Iteration  28: 3833727.169 ops/s
Iteration  29: 3767748.246 ops/s
Iteration  30: 3894854.591 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_just":
  3841423.464 ±(99.9%) 69114.428 ops/s [Average]
  (min, avg, max) = (3641570.409, 3841423.464, 4016600.986), stdev = 103447.230
  CI (99.9%): [3772309.035, 3910537.892] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_just  thrpt   30  3841423.464 ± 69114.428  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_onNextAfterOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_onNextAfterOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1405208.450 ops/s
# Warmup Iteration   2: 4136692.881 ops/s
# Warmup Iteration   3: 4982173.406 ops/s
# Warmup Iteration   4: 5470673.676 ops/s
# Warmup Iteration   5: 5751482.082 ops/s
# Warmup Iteration   6: 5602520.959 ops/s
# Warmup Iteration   7: 5464591.460 ops/s
# Warmup Iteration   8: 5583447.937 ops/s
# Warmup Iteration   9: 5788651.666 ops/s
# Warmup Iteration  10: 5401271.080 ops/s
# Warmup Iteration  11: 5575767.650 ops/s
# Warmup Iteration  12: 5866188.713 ops/s
# Warmup Iteration  13: 5725132.850 ops/s
# Warmup Iteration  14: 5497530.051 ops/s
# Warmup Iteration  15: 5718895.324 ops/s
# Warmup Iteration  16: 5704140.855 ops/s
# Warmup Iteration  17: 5326984.082 ops/s
# Warmup Iteration  18: 5602734.839 ops/s
# Warmup Iteration  19: 5626218.197 ops/s
# Warmup Iteration  20: 5677124.601 ops/s
# Warmup Iteration  21: 5535395.382 ops/s
# Warmup Iteration  22: 5649409.839 ops/s
# Warmup Iteration  23: 5934908.367 ops/s
# Warmup Iteration  24: 5706195.444 ops/s
# Warmup Iteration  25: 5534789.189 ops/s
# Warmup Iteration  26: 5786253.468 ops/s
# Warmup Iteration  27: 5580082.048 ops/s
# Warmup Iteration  28: 5528284.152 ops/s
# Warmup Iteration  29: 5773074.377 ops/s
# Warmup Iteration  30: 5519893.287 ops/s
Iteration   1: 5668502.658 ops/s
Iteration   2: 5633399.047 ops/s
Iteration   3: 5492932.897 ops/s
Iteration   4: 5739045.934 ops/s
Iteration   5: 5609034.266 ops/s
Iteration   6: 5598171.446 ops/s
Iteration   7: 5754554.382 ops/s
Iteration   8: 5599129.615 ops/s
Iteration   9: 5722442.922 ops/s
Iteration  10: 5549224.428 ops/s
Iteration  11: 5743226.125 ops/s
Iteration  12: 5640462.109 ops/s
Iteration  13: 5801306.224 ops/s
Iteration  14: 5820348.251 ops/s
Iteration  15: 5591140.679 ops/s
Iteration  16: 5486284.170 ops/s
Iteration  17: 5630647.131 ops/s
Iteration  18: 5858270.466 ops/s
Iteration  19: 5570372.382 ops/s
Iteration  20: 5579280.322 ops/s
Iteration  21: 5726032.437 ops/s
Iteration  22: 5458489.593 ops/s
Iteration  23: 5689582.967 ops/s
Iteration  24: 5568439.925 ops/s
Iteration  25: 5673850.119 ops/s
Iteration  26: 5808755.540 ops/s
Iteration  27: 5491192.352 ops/s
Iteration  28: 5749514.153 ops/s
Iteration  29: 5469164.310 ops/s
Iteration  30: 5773382.466 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_onNextAfterOnComplete":
  5649872.644 ±(99.9%) 75675.299 ops/s [Average]
  (min, avg, max) = (5458489.593, 5649872.644, 5858270.466), stdev = 113267.234
  CI (99.9%): [5574197.345, 5725547.943] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableGenerateTest._Benchmark.benchmark_onNextAfterOnComplete  thrpt   30  5649872.644 ± 75675.299  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fusedReject$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fusedReject

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 521858.061 ops/s
# Warmup Iteration   2: 2765761.715 ops/s
# Warmup Iteration   3: 3889491.082 ops/s
# Warmup Iteration   4: 4669424.052 ops/s
# Warmup Iteration   5: 4327328.864 ops/s
# Warmup Iteration   6: 4540199.538 ops/s
# Warmup Iteration   7: 4415098.371 ops/s
# Warmup Iteration   8: 4436249.533 ops/s
# Warmup Iteration   9: 4509808.275 ops/s
# Warmup Iteration  10: 4365970.594 ops/s
# Warmup Iteration  11: 3521756.256 ops/s
# Warmup Iteration  12: 4519404.462 ops/s
# Warmup Iteration  13: 4309620.028 ops/s
# Warmup Iteration  14: 4399763.558 ops/s
# Warmup Iteration  15: 4439404.877 ops/s
# Warmup Iteration  16: 4376126.700 ops/s
# Warmup Iteration  17: 4392211.593 ops/s
# Warmup Iteration  18: 4480955.625 ops/s
# Warmup Iteration  19: 4353600.319 ops/s
# Warmup Iteration  20: 4512460.285 ops/s
# Warmup Iteration  21: 4241332.280 ops/s
# Warmup Iteration  22: 4352428.928 ops/s
# Warmup Iteration  23: 4506420.225 ops/s
# Warmup Iteration  24: 4365626.625 ops/s
# Warmup Iteration  25: 4667210.952 ops/s
# Warmup Iteration  26: 4587970.636 ops/s
# Warmup Iteration  27: 4372736.627 ops/s
# Warmup Iteration  28: 4483321.597 ops/s
# Warmup Iteration  29: 4564454.617 ops/s
# Warmup Iteration  30: 4306074.305 ops/s
Iteration   1: 4450385.414 ops/s
Iteration   2: 4458513.561 ops/s
Iteration   3: 4314856.492 ops/s
Iteration   4: 4528425.262 ops/s
Iteration   5: 4542835.191 ops/s
Iteration   6: 4326636.196 ops/s
Iteration   7: 4431151.968 ops/s
Iteration   8: 4604879.876 ops/s
Iteration   9: 4418197.525 ops/s
Iteration  10: 4408709.129 ops/s
Iteration  11: 4541122.658 ops/s
Iteration  12: 4447531.960 ops/s
Iteration  13: 4561815.195 ops/s
Iteration  14: 4471638.662 ops/s
Iteration  15: 4375502.383 ops/s
Iteration  16: 4363145.417 ops/s
Iteration  17: 4507144.905 ops/s
Iteration  18: 4574093.862 ops/s
Iteration  19: 4357269.553 ops/s
Iteration  20: 4520379.928 ops/s
Iteration  21: 4644678.559 ops/s
Iteration  22: 4501374.291 ops/s
Iteration  23: 4347844.572 ops/s
Iteration  24: 4454037.542 ops/s
Iteration  25: 4337239.402 ops/s
Iteration  26: 4426056.154 ops/s
Iteration  27: 4573053.739 ops/s
Iteration  28: 4372172.513 ops/s
Iteration  29: 4465123.878 ops/s
Iteration  30: 4601992.741 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fusedReject":
  4464260.284 ±(99.9%) 61369.503 ops/s [Average]
  (min, avg, max) = (4314856.492, 4464260.284, 4644678.559), stdev = 91854.990
  CI (99.9%): [4402890.782, 4525629.787] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_fusedReject  thrpt   30  4464260.284 ± 61369.503  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fastPathCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fastPathCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 836767.559 ops/s
# Warmup Iteration   2: 3260935.030 ops/s
# Warmup Iteration   3: 4274244.387 ops/s
# Warmup Iteration   4: 4038234.263 ops/s
# Warmup Iteration   5: 4288146.561 ops/s
# Warmup Iteration   6: 4334535.775 ops/s
# Warmup Iteration   7: 3671237.301 ops/s
# Warmup Iteration   8: 4316076.169 ops/s
# Warmup Iteration   9: 4171996.890 ops/s
# Warmup Iteration  10: 4238857.602 ops/s
# Warmup Iteration  11: 4116154.410 ops/s
# Warmup Iteration  12: 4138312.779 ops/s
# Warmup Iteration  13: 4252876.134 ops/s
# Warmup Iteration  14: 3939014.755 ops/s
# Warmup Iteration  15: 4179422.212 ops/s
# Warmup Iteration  16: 4315978.175 ops/s
# Warmup Iteration  17: 4071087.938 ops/s
# Warmup Iteration  18: 4298501.540 ops/s
# Warmup Iteration  19: 4407178.210 ops/s
# Warmup Iteration  20: 4149125.560 ops/s
# Warmup Iteration  21: 4305240.874 ops/s
# Warmup Iteration  22: 4136549.076 ops/s
# Warmup Iteration  23: 4152802.494 ops/s
# Warmup Iteration  24: 4333930.887 ops/s
# Warmup Iteration  25: 4041789.860 ops/s
# Warmup Iteration  26: 4159081.390 ops/s
# Warmup Iteration  27: 4408566.786 ops/s
# Warmup Iteration  28: 4189348.025 ops/s
# Warmup Iteration  29: 4184890.359 ops/s
# Warmup Iteration  30: 4319775.866 ops/s
Iteration   1: 4147641.695 ops/s
Iteration   2: 4320008.820 ops/s
Iteration   3: 4073422.321 ops/s
Iteration   4: 4185759.382 ops/s
Iteration   5: 4225635.876 ops/s
Iteration   6: 4248993.119 ops/s
Iteration   7: 4311748.905 ops/s
Iteration   8: 4220423.703 ops/s
Iteration   9: 4181704.714 ops/s
Iteration  10: 4272967.773 ops/s
Iteration  11: 4376775.971 ops/s
Iteration  12: 4112977.579 ops/s
Iteration  13: 4375197.880 ops/s
Iteration  14: 4274357.764 ops/s
Iteration  15: 4385908.002 ops/s
Iteration  16: 4153049.417 ops/s
Iteration  17: 4241642.671 ops/s
Iteration  18: 4203919.061 ops/s
Iteration  19: 4358146.366 ops/s
Iteration  20: 4404550.469 ops/s
Iteration  21: 4043039.240 ops/s
Iteration  22: 4398927.980 ops/s
Iteration  23: 4073657.996 ops/s
Iteration  24: 4394262.524 ops/s
Iteration  25: 4157394.230 ops/s
Iteration  26: 4227780.508 ops/s
Iteration  27: 4204117.442 ops/s
Iteration  28: 4310652.035 ops/s
Iteration  29: 4193525.448 ops/s
Iteration  30: 4242961.717 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fastPathCancel":
  4244038.354 ±(99.9%) 69284.296 ops/s [Average]
  (min, avg, max) = (4043039.240, 4244038.354, 4404550.469), stdev = 103701.480
  CI (99.9%): [4174754.058, 4313322.650] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_fastPathCancel  thrpt   30  4244038.354 ± 69284.296  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_many$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_many

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 407328.315 ops/s
# Warmup Iteration   2: 1911175.827 ops/s
# Warmup Iteration   3: 3111281.846 ops/s
# Warmup Iteration   4: 2992613.314 ops/s
# Warmup Iteration   5: 2254600.295 ops/s
# Warmup Iteration   6: 2939135.300 ops/s
# Warmup Iteration   7: 2927440.982 ops/s
# Warmup Iteration   8: 2808310.786 ops/s
# Warmup Iteration   9: 2746985.685 ops/s
# Warmup Iteration  10: 3049519.229 ops/s
# Warmup Iteration  11: 2951732.295 ops/s
# Warmup Iteration  12: 3095052.246 ops/s
# Warmup Iteration  13: 3029769.570 ops/s
# Warmup Iteration  14: 3027235.517 ops/s
# Warmup Iteration  15: 3107900.050 ops/s
# Warmup Iteration  16: 3062278.901 ops/s
# Warmup Iteration  17: 2908672.486 ops/s
# Warmup Iteration  18: 3061485.467 ops/s
# Warmup Iteration  19: 2959477.599 ops/s
# Warmup Iteration  20: 2979379.863 ops/s
# Warmup Iteration  21: 3059388.672 ops/s
# Warmup Iteration  22: 2919835.426 ops/s
# Warmup Iteration  23: 3139123.916 ops/s
# Warmup Iteration  24: 3166505.717 ops/s
# Warmup Iteration  25: 2996226.848 ops/s
# Warmup Iteration  26: 2990144.516 ops/s
# Warmup Iteration  27: 3136021.104 ops/s
# Warmup Iteration  28: 3069842.889 ops/s
# Warmup Iteration  29: 2967036.773 ops/s
# Warmup Iteration  30: 3054496.297 ops/s
Iteration   1: 3002749.840 ops/s
Iteration   2: 3113745.082 ops/s
Iteration   3: 2997021.837 ops/s
Iteration   4: 3024817.970 ops/s
Iteration   5: 3062379.807 ops/s
Iteration   6: 3055158.620 ops/s
Iteration   7: 3110646.405 ops/s
Iteration   8: 2972226.781 ops/s
Iteration   9: 3196731.883 ops/s
Iteration  10: 2969299.552 ops/s
Iteration  11: 3039034.731 ops/s
Iteration  12: 3152372.536 ops/s
Iteration  13: 2977783.154 ops/s
Iteration  14: 3053581.381 ops/s
Iteration  15: 3096985.250 ops/s
Iteration  16: 3029729.278 ops/s
Iteration  17: 2936798.665 ops/s
Iteration  18: 3112931.458 ops/s
Iteration  19: 2929712.912 ops/s
Iteration  20: 3044707.855 ops/s
Iteration  21: 3056777.486 ops/s
Iteration  22: 2948606.074 ops/s
Iteration  23: 3093506.161 ops/s
Iteration  24: 2989828.410 ops/s
Iteration  25: 3111163.888 ops/s
Iteration  26: 3037604.463 ops/s
Iteration  27: 3018670.161 ops/s
Iteration  28: 3115060.228 ops/s
Iteration  29: 2956241.796 ops/s
Iteration  30: 3051161.586 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_many":
  3041901.175 ±(99.9%) 44590.858 ops/s [Average]
  (min, avg, max) = (2929712.912, 3041901.175, 3196731.883), stdev = 66741.502
  CI (99.9%): [2997310.317, 3086492.033] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_many  thrpt   30  3041901.175 ± 44590.858  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fastPathCancelExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fastPathCancelExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 554727.544 ops/s
# Warmup Iteration   2: 2409831.923 ops/s
# Warmup Iteration   3: 3184506.345 ops/s
# Warmup Iteration   4: 3479468.678 ops/s
# Warmup Iteration   5: 3671477.167 ops/s
# Warmup Iteration   6: 3519245.296 ops/s
# Warmup Iteration   7: 3588252.278 ops/s
# Warmup Iteration   8: 3560590.950 ops/s
# Warmup Iteration   9: 3652377.115 ops/s
# Warmup Iteration  10: 3527495.951 ops/s
# Warmup Iteration  11: 3598754.401 ops/s
# Warmup Iteration  12: 3522328.199 ops/s
# Warmup Iteration  13: 3580574.705 ops/s
# Warmup Iteration  14: 3501875.932 ops/s
# Warmup Iteration  15: 3585582.413 ops/s
# Warmup Iteration  16: 3520062.681 ops/s
# Warmup Iteration  17: 3430416.439 ops/s
# Warmup Iteration  18: 3641729.221 ops/s
# Warmup Iteration  19: 3464289.662 ops/s
# Warmup Iteration  20: 3663759.107 ops/s
# Warmup Iteration  21: 3703584.013 ops/s
# Warmup Iteration  22: 3557467.175 ops/s
# Warmup Iteration  23: 3613928.619 ops/s
# Warmup Iteration  24: 3517694.270 ops/s
# Warmup Iteration  25: 3521714.054 ops/s
# Warmup Iteration  26: 3613732.679 ops/s
# Warmup Iteration  27: 3448937.949 ops/s
# Warmup Iteration  28: 3544559.527 ops/s
# Warmup Iteration  29: 3499685.179 ops/s
# Warmup Iteration  30: 3464645.169 ops/s
Iteration   1: 3703316.159 ops/s
Iteration   2: 3489541.126 ops/s
Iteration   3: 3626980.738 ops/s
Iteration   4: 3616660.968 ops/s
Iteration   5: 3733229.595 ops/s
Iteration   6: 3498640.433 ops/s
Iteration   7: 3717293.840 ops/s
Iteration   8: 3634107.689 ops/s
Iteration   9: 3415494.592 ops/s
Iteration  10: 3713132.499 ops/s
Iteration  11: 3545093.313 ops/s
Iteration  12: 3633837.211 ops/s
Iteration  13: 3449792.263 ops/s
Iteration  14: 3573422.104 ops/s
Iteration  15: 3613865.250 ops/s
Iteration  16: 3476910.315 ops/s
Iteration  17: 3586102.984 ops/s
Iteration  18: 3629497.601 ops/s
Iteration  19: 3640148.937 ops/s
Iteration  20: 3664348.633 ops/s
Iteration  21: 3559096.813 ops/s
Iteration  22: 3580798.400 ops/s
Iteration  23: 3603489.344 ops/s
Iteration  24: 3567701.436 ops/s
Iteration  25: 3680133.563 ops/s
Iteration  26: 3471785.924 ops/s
Iteration  27: 3703155.595 ops/s
Iteration  28: 3530609.183 ops/s
Iteration  29: 3585955.713 ops/s
Iteration  30: 3653826.059 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_fastPathCancelExact":
  3596598.943 ±(99.9%) 56503.050 ops/s [Average]
  (min, avg, max) = (3415494.592, 3596598.943, 3733229.595), stdev = 84571.112
  CI (99.9%): [3540095.893, 3653101.992] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_fastPathCancelExact  thrpt   30  3596598.943 ± 56503.050  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7847757.968 ops/s
# Warmup Iteration   2: 15129813.897 ops/s
# Warmup Iteration   3: 17278332.447 ops/s
# Warmup Iteration   4: 21455859.569 ops/s
# Warmup Iteration   5: 19955483.411 ops/s
# Warmup Iteration   6: 20094360.965 ops/s
# Warmup Iteration   7: 20447502.751 ops/s
# Warmup Iteration   8: 20210629.452 ops/s
# Warmup Iteration   9: 20732189.278 ops/s
# Warmup Iteration  10: 20415704.549 ops/s
# Warmup Iteration  11: 21431603.080 ops/s
# Warmup Iteration  12: 20470084.084 ops/s
# Warmup Iteration  13: 20297883.850 ops/s
# Warmup Iteration  14: 20710587.678 ops/s
# Warmup Iteration  15: 20028115.699 ops/s
# Warmup Iteration  16: 20439519.124 ops/s
# Warmup Iteration  17: 20564824.654 ops/s
# Warmup Iteration  18: 20534218.785 ops/s
# Warmup Iteration  19: 19640743.302 ops/s
# Warmup Iteration  20: 21139642.403 ops/s
# Warmup Iteration  21: 20301550.010 ops/s
# Warmup Iteration  22: 20666713.225 ops/s
# Warmup Iteration  23: 20651065.040 ops/s
# Warmup Iteration  24: 20019062.883 ops/s
# Warmup Iteration  25: 20755340.086 ops/s
# Warmup Iteration  26: 19807681.917 ops/s
# Warmup Iteration  27: 20667142.598 ops/s
# Warmup Iteration  28: 20254318.575 ops/s
# Warmup Iteration  29: 20438501.497 ops/s
# Warmup Iteration  30: 21180581.731 ops/s
Iteration   1: 21092578.475 ops/s
Iteration   2: 19868644.567 ops/s
Iteration   3: 20574377.303 ops/s
Iteration   4: 21219763.116 ops/s
Iteration   5: 20574659.719 ops/s
Iteration   6: 20256422.515 ops/s
Iteration   7: 20598821.908 ops/s
Iteration   8: 20109746.858 ops/s
Iteration   9: 20640841.003 ops/s
Iteration  10: 19271966.219 ops/s
Iteration  11: 20701992.557 ops/s
Iteration  12: 20539648.546 ops/s
Iteration  13: 21359554.154 ops/s
Iteration  14: 20324518.268 ops/s
Iteration  15: 20068152.240 ops/s
Iteration  16: 21039155.326 ops/s
Iteration  17: 20107611.299 ops/s
Iteration  18: 21109073.884 ops/s
Iteration  19: 19779590.805 ops/s
Iteration  20: 21243853.396 ops/s
Iteration  21: 20765518.229 ops/s
Iteration  22: 20621946.485 ops/s
Iteration  23: 19800383.006 ops/s
Iteration  24: 21323740.809 ops/s
Iteration  25: 20214308.377 ops/s
Iteration  26: 19789619.651 ops/s
Iteration  27: 21180689.696 ops/s
Iteration  28: 20961760.269 ops/s
Iteration  29: 19620498.692 ops/s
Iteration  30: 20790553.938 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero":
  20518333.044 ±(99.9%) 377915.547 ops/s [Average]
  (min, avg, max) = (19271966.219, 20518333.044, 21359554.154), stdev = 565646.243
  CI (99.9%): [20140417.497, 20896248.591] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt         Score        Error  Units
FlowableRangeLongTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero  thrpt   30  20518333.044 ± 377915.547  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedWhenScanSeedProviderThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedWhenScanSeedProviderThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 184565.037 ops/s
# Warmup Iteration   2: 547752.875 ops/s
# Warmup Iteration   3: 649695.888 ops/s
# Warmup Iteration   4: 657142.587 ops/s
# Warmup Iteration   5: 676315.592 ops/s
# Warmup Iteration   6: 709905.973 ops/s
# Warmup Iteration   7: 700376.241 ops/s
# Warmup Iteration   8: 699338.462 ops/s
# Warmup Iteration   9: 695455.646 ops/s
# Warmup Iteration  10: 683425.803 ops/s
# Warmup Iteration  11: 691422.851 ops/s
# Warmup Iteration  12: 714380.824 ops/s
# Warmup Iteration  13: 665065.132 ops/s
# Warmup Iteration  14: 719774.137 ops/s
# Warmup Iteration  15: 668371.317 ops/s
# Warmup Iteration  16: 630739.493 ops/s
# Warmup Iteration  17: 747521.106 ops/s
# Warmup Iteration  18: 739283.026 ops/s
# Warmup Iteration  19: 774473.660 ops/s
# Warmup Iteration  20: 737345.872 ops/s
# Warmup Iteration  21: 753569.707 ops/s
# Warmup Iteration  22: 723159.162 ops/s
# Warmup Iteration  23: 766456.813 ops/s
# Warmup Iteration  24: 737722.672 ops/s
# Warmup Iteration  25: 738351.010 ops/s
# Warmup Iteration  26: 753439.296 ops/s
# Warmup Iteration  27: 766714.932 ops/s
# Warmup Iteration  28: 720824.925 ops/s
# Warmup Iteration  29: 751707.560 ops/s
# Warmup Iteration  30: 746917.471 ops/s
Iteration   1: 770519.628 ops/s
Iteration   2: 756511.846 ops/s
Iteration   3: 771264.415 ops/s
Iteration   4: 723681.492 ops/s
Iteration   5: 750039.007 ops/s
Iteration   6: 751878.244 ops/s
Iteration   7: 723216.229 ops/s
Iteration   8: 769296.352 ops/s
Iteration   9: 733871.179 ops/s
Iteration  10: 750507.455 ops/s
Iteration  11: 732971.352 ops/s
Iteration  12: 736699.067 ops/s
Iteration  13: 774060.805 ops/s
Iteration  14: 729478.293 ops/s
Iteration  15: 721881.911 ops/s
Iteration  16: 739777.531 ops/s
Iteration  17: 734391.205 ops/s
Iteration  18: 748705.753 ops/s
Iteration  19: 722020.984 ops/s
Iteration  20: 749164.483 ops/s
Iteration  21: 775295.576 ops/s
Iteration  22: 729976.344 ops/s
Iteration  23: 761818.817 ops/s
Iteration  24: 732663.317 ops/s
Iteration  25: 685967.756 ops/s
Iteration  26: 609185.943 ops/s
Iteration  27: 767178.554 ops/s
Iteration  28: 725382.090 ops/s
Iteration  29: 738864.429 ops/s
Iteration  30: 761560.544 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanWithSeedWhenScanSeedProviderThrows":
  739261.020 ±(99.9%) 21295.089 ops/s [Average]
  (min, avg, max) = (609185.943, 739261.020, 775295.576), stdev = 31873.489
  CI (99.9%): [717965.931, 760556.109] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score       Error  Units
FlowableScanTest._Benchmark.benchmark_scanWithSeedWhenScanSeedProviderThrows  thrpt   30  739261.020 ± 21295.089  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledAfterItems$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledAfterItems

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 373220.887 ops/s
# Warmup Iteration   2: 2248106.290 ops/s
# Warmup Iteration   3: 2581212.869 ops/s
# Warmup Iteration   4: 2954547.806 ops/s
# Warmup Iteration   5: 2960982.172 ops/s
# Warmup Iteration   6: 2935837.672 ops/s
# Warmup Iteration   7: 3036772.242 ops/s
# Warmup Iteration   8: 2976909.977 ops/s
# Warmup Iteration   9: 2856109.050 ops/s
# Warmup Iteration  10: 3030789.969 ops/s
# Warmup Iteration  11: 2879749.075 ops/s
# Warmup Iteration  12: 2965251.096 ops/s
# Warmup Iteration  13: 2998894.966 ops/s
# Warmup Iteration  14: 2931039.889 ops/s
# Warmup Iteration  15: 3044889.796 ops/s
# Warmup Iteration  16: 2779332.231 ops/s
# Warmup Iteration  17: 3048677.566 ops/s
# Warmup Iteration  18: 2945090.740 ops/s
# Warmup Iteration  19: 2993596.815 ops/s
# Warmup Iteration  20: 2947289.545 ops/s
# Warmup Iteration  21: 2925582.262 ops/s
# Warmup Iteration  22: 3127308.855 ops/s
# Warmup Iteration  23: 2934497.171 ops/s
# Warmup Iteration  24: 2934524.867 ops/s
# Warmup Iteration  25: 3008932.779 ops/s
# Warmup Iteration  26: 2914521.550 ops/s
# Warmup Iteration  27: 3021970.974 ops/s
# Warmup Iteration  28: 2981040.659 ops/s
# Warmup Iteration  29: 2974792.790 ops/s
# Warmup Iteration  30: 3052777.939 ops/s
Iteration   1: 2861924.523 ops/s
Iteration   2: 2997722.489 ops/s
Iteration   3: 2961744.217 ops/s
Iteration   4: 3070993.027 ops/s
Iteration   5: 2912337.062 ops/s
Iteration   6: 2999860.173 ops/s
Iteration   7: 2923355.741 ops/s
Iteration   8: 3015605.069 ops/s
Iteration   9: 2883304.733 ops/s
Iteration  10: 2897476.985 ops/s
Iteration  11: 3013782.936 ops/s
Iteration  12: 2882561.669 ops/s
Iteration  13: 3018612.683 ops/s
Iteration  14: 3000287.677 ops/s
Iteration  15: 2922935.710 ops/s
Iteration  16: 2956250.742 ops/s
Iteration  17: 3120992.012 ops/s
Iteration  18: 2894682.280 ops/s
Iteration  19: 2898349.630 ops/s
Iteration  20: 3037825.587 ops/s
Iteration  21: 2885635.677 ops/s
Iteration  22: 3022719.569 ops/s
Iteration  23: 2899258.939 ops/s
Iteration  24: 3028580.677 ops/s
Iteration  25: 2916632.632 ops/s
Iteration  26: 2923033.116 ops/s
Iteration  27: 3022360.960 ops/s
Iteration  28: 2806987.384 ops/s
Iteration  29: 3065914.227 ops/s
Iteration  30: 2978682.154 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_closeCalledAfterItems":
  2960680.343 ±(99.9%) 49125.460 ops/s [Average]
  (min, avg, max) = (2806987.384, 2960680.343, 3120992.012), stdev = 73528.681
  CI (99.9%): [2911554.883, 3009805.802] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_closeCalledAfterItems  thrpt   30  2960680.343 ± 49125.460  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 977014.475 ops/s
# Warmup Iteration   2: 2981770.514 ops/s
# Warmup Iteration   3: 3119647.175 ops/s
# Warmup Iteration   4: 3793091.381 ops/s
# Warmup Iteration   5: 3670421.403 ops/s
# Warmup Iteration   6: 3852626.813 ops/s
# Warmup Iteration   7: 3858907.492 ops/s
# Warmup Iteration   8: 3669376.298 ops/s
# Warmup Iteration   9: 3859548.670 ops/s
# Warmup Iteration  10: 3594780.377 ops/s
# Warmup Iteration  11: 3730125.070 ops/s
# Warmup Iteration  12: 3880677.247 ops/s
# Warmup Iteration  13: 3648959.581 ops/s
# Warmup Iteration  14: 3812569.269 ops/s
# Warmup Iteration  15: 3783726.351 ops/s
# Warmup Iteration  16: 3844326.130 ops/s
# Warmup Iteration  17: 3658087.760 ops/s
# Warmup Iteration  18: 3796069.535 ops/s
# Warmup Iteration  19: 3759088.571 ops/s
# Warmup Iteration  20: 3667211.261 ops/s
# Warmup Iteration  21: 3875570.078 ops/s
# Warmup Iteration  22: 3681936.694 ops/s
# Warmup Iteration  23: 3861160.820 ops/s
# Warmup Iteration  24: 3756098.446 ops/s
# Warmup Iteration  25: 3932955.646 ops/s
# Warmup Iteration  26: 3676172.222 ops/s
# Warmup Iteration  27: 3826919.503 ops/s
# Warmup Iteration  28: 3657713.229 ops/s
# Warmup Iteration  29: 3818043.527 ops/s
# Warmup Iteration  30: 3854780.554 ops/s
Iteration   1: 3731742.033 ops/s
Iteration   2: 3826567.153 ops/s
Iteration   3: 3748204.229 ops/s
Iteration   4: 3789539.090 ops/s
Iteration   5: 3877783.763 ops/s
Iteration   6: 3595475.459 ops/s
Iteration   7: 3773471.948 ops/s
Iteration   8: 3657193.505 ops/s
Iteration   9: 3735131.715 ops/s
Iteration  10: 3968126.808 ops/s
Iteration  11: 3649301.509 ops/s
Iteration  12: 3938361.241 ops/s
Iteration  13: 3922750.587 ops/s
Iteration  14: 3738805.852 ops/s
Iteration  15: 3799735.052 ops/s
Iteration  16: 3719018.036 ops/s
Iteration  17: 3720000.936 ops/s
Iteration  18: 3815771.032 ops/s
Iteration  19: 3741519.152 ops/s
Iteration  20: 2946892.768 ops/s
Iteration  21: 3382228.963 ops/s
Iteration  22: 3701203.054 ops/s
Iteration  23: 3706561.213 ops/s
Iteration  24: 3618026.257 ops/s
Iteration  25: 3690145.335 ops/s
Iteration  26: 3956592.297 ops/s
Iteration  27: 3589916.371 ops/s
Iteration  28: 3840914.377 ops/s
Iteration  29: 3819093.475 ops/s
Iteration  30: 3744199.571 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_slowPathCancel":
  3724809.093 ±(99.9%) 127558.339 ops/s [Average]
  (min, avg, max) = (2946892.768, 3724809.093, 3968126.808), stdev = 190923.332
  CI (99.9%): [3597250.753, 3852367.432] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score        Error  Units
FlowableRangeLongTest._Benchmark.benchmark_slowPathCancel  thrpt   30  3724809.093 ± 127558.339  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_generatorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_generatorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157085.819 ops/s
# Warmup Iteration   2: 517766.607 ops/s
# Warmup Iteration   3: 521371.790 ops/s
# Warmup Iteration   4: 548399.903 ops/s
# Warmup Iteration   5: 511143.282 ops/s
# Warmup Iteration   6: 581256.331 ops/s
# Warmup Iteration   7: 595100.861 ops/s
# Warmup Iteration   8: 564801.918 ops/s
# Warmup Iteration   9: 592641.751 ops/s
# Warmup Iteration  10: 569169.982 ops/s
# Warmup Iteration  11: 584560.810 ops/s
# Warmup Iteration  12: 580857.617 ops/s
# Warmup Iteration  13: 578601.136 ops/s
# Warmup Iteration  14: 599416.669 ops/s
# Warmup Iteration  15: 573686.998 ops/s
# Warmup Iteration  16: 618551.170 ops/s
# Warmup Iteration  17: 574353.911 ops/s
# Warmup Iteration  18: 607387.064 ops/s
# Warmup Iteration  19: 631009.764 ops/s
# Warmup Iteration  20: 626682.545 ops/s
# Warmup Iteration  21: 591854.642 ops/s
# Warmup Iteration  22: 618534.795 ops/s
# Warmup Iteration  23: 611078.759 ops/s
# Warmup Iteration  24: 604115.227 ops/s
# Warmup Iteration  25: 591194.421 ops/s
# Warmup Iteration  26: 626140.191 ops/s
# Warmup Iteration  27: 595938.340 ops/s
# Warmup Iteration  28: 610242.941 ops/s
# Warmup Iteration  29: 629527.747 ops/s
# Warmup Iteration  30: 598364.414 ops/s
Iteration   1: 625619.207 ops/s
Iteration   2: 601111.565 ops/s
Iteration   3: 619111.360 ops/s
Iteration   4: 623157.171 ops/s
Iteration   5: 596859.585 ops/s
Iteration   6: 631933.969 ops/s
Iteration   7: 591767.941 ops/s
Iteration   8: 607267.930 ops/s
Iteration   9: 622452.433 ops/s
Iteration  10: 624326.376 ops/s
Iteration  11: 607803.299 ops/s
Iteration  12: 595239.761 ops/s
Iteration  13: 626868.174 ops/s
Iteration  14: 602161.176 ops/s
Iteration  15: 604797.660 ops/s
Iteration  16: 618019.652 ops/s
Iteration  17: 611471.499 ops/s
Iteration  18: 593239.100 ops/s
Iteration  19: 603196.606 ops/s
Iteration  20: 634458.342 ops/s
Iteration  21: 601576.645 ops/s
Iteration  22: 629504.246 ops/s
Iteration  23: 630353.197 ops/s
Iteration  24: 591703.088 ops/s
Iteration  25: 624083.732 ops/s
Iteration  26: 600056.767 ops/s
Iteration  27: 627362.961 ops/s
Iteration  28: 607604.401 ops/s
Iteration  29: 600600.056 ops/s
Iteration  30: 614863.666 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_generatorThrows":
  612285.719 ±(99.9%) 9015.718 ops/s [Average]
  (min, avg, max) = (591703.088, 612285.719, 634458.342), stdev = 13494.304
  CI (99.9%): [603270.000, 621301.437] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableGenerateTest._Benchmark.benchmark_generatorThrows  thrpt   30  612285.719 ± 9015.718  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_asyncFusionNotSupported$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_asyncFusionNotSupported

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 278379.950 ops/s
# Warmup Iteration   2: 1227413.920 ops/s
# Warmup Iteration   3: 1512429.243 ops/s
# Warmup Iteration   4: 1575893.488 ops/s
# Warmup Iteration   5: 1503072.708 ops/s
# Warmup Iteration   6: 1511771.721 ops/s
# Warmup Iteration   7: 1605187.580 ops/s
# Warmup Iteration   8: 1681748.760 ops/s
# Warmup Iteration   9: 1677173.036 ops/s
# Warmup Iteration  10: 1610591.693 ops/s
# Warmup Iteration  11: 1688939.450 ops/s
# Warmup Iteration  12: 1657439.288 ops/s
# Warmup Iteration  13: 1601557.465 ops/s
# Warmup Iteration  14: 1707277.712 ops/s
# Warmup Iteration  15: 1568790.847 ops/s
# Warmup Iteration  16: 1714914.435 ops/s
# Warmup Iteration  17: 1672282.879 ops/s
# Warmup Iteration  18: 1594681.588 ops/s
# Warmup Iteration  19: 1711550.252 ops/s
# Warmup Iteration  20: 1591947.519 ops/s
# Warmup Iteration  21: 1651820.282 ops/s
# Warmup Iteration  22: 1668305.649 ops/s
# Warmup Iteration  23: 1600207.575 ops/s
# Warmup Iteration  24: 1635520.975 ops/s
# Warmup Iteration  25: 1669696.078 ops/s
# Warmup Iteration  26: 1583716.940 ops/s
# Warmup Iteration  27: 1675752.236 ops/s
# Warmup Iteration  28: 1644305.495 ops/s
# Warmup Iteration  29: 1636646.711 ops/s
# Warmup Iteration  30: 1650331.742 ops/s
Iteration   1: 1674626.406 ops/s
Iteration   2: 1587816.241 ops/s
Iteration   3: 1663313.500 ops/s
Iteration   4: 1603338.176 ops/s
Iteration   5: 1591492.661 ops/s
Iteration   6: 1684962.052 ops/s
Iteration   7: 1599561.202 ops/s
Iteration   8: 1672801.124 ops/s
Iteration   9: 1591804.478 ops/s
Iteration  10: 1679745.817 ops/s
Iteration  11: 1661659.129 ops/s
Iteration  12: 1621033.762 ops/s
Iteration  13: 1655398.501 ops/s
Iteration  14: 1670028.438 ops/s
Iteration  15: 1376122.939 ops/s
Iteration  16: 1592596.664 ops/s
Iteration  17: 1631602.468 ops/s
Iteration  18: 1699663.780 ops/s
Iteration  19: 1618905.627 ops/s
Iteration  20: 1688107.781 ops/s
Iteration  21: 1626538.021 ops/s
Iteration  22: 1666231.558 ops/s
Iteration  23: 1632763.683 ops/s
Iteration  24: 1620717.182 ops/s
Iteration  25: 1688935.462 ops/s
Iteration  26: 1590738.590 ops/s
Iteration  27: 1627431.155 ops/s
Iteration  28: 1594559.649 ops/s
Iteration  29: 1635671.183 ops/s
Iteration  30: 1662840.457 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_asyncFusionNotSupported":
  1630366.923 ±(99.9%) 39841.762 ops/s [Average]
  (min, avg, max) = (1376122.939, 1630366.923, 1699663.780), stdev = 59633.278
  CI (99.9%): [1590525.161, 1670208.685] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_asyncFusionNotSupported  thrpt   30  1630366.923 ± 39841.762  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_nextReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_nextReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 210108.060 ops/s
# Warmup Iteration   2: 492507.372 ops/s
# Warmup Iteration   3: 578680.485 ops/s
# Warmup Iteration   4: 489037.993 ops/s
# Warmup Iteration   5: 520557.967 ops/s
# Warmup Iteration   6: 588409.858 ops/s
# Warmup Iteration   7: 510828.718 ops/s
# Warmup Iteration   8: 578760.676 ops/s
# Warmup Iteration   9: 593116.171 ops/s
# Warmup Iteration  10: 576575.040 ops/s
# Warmup Iteration  11: 552417.435 ops/s
# Warmup Iteration  12: 597669.558 ops/s
# Warmup Iteration  13: 562826.706 ops/s
# Warmup Iteration  14: 573881.634 ops/s
# Warmup Iteration  15: 579181.875 ops/s
# Warmup Iteration  16: 582743.931 ops/s
# Warmup Iteration  17: 605124.734 ops/s
# Warmup Iteration  18: 608239.440 ops/s
# Warmup Iteration  19: 617211.102 ops/s
# Warmup Iteration  20: 591821.062 ops/s
# Warmup Iteration  21: 623641.801 ops/s
# Warmup Iteration  22: 595820.772 ops/s
# Warmup Iteration  23: 590059.022 ops/s
# Warmup Iteration  24: 620341.868 ops/s
# Warmup Iteration  25: 613008.638 ops/s
# Warmup Iteration  26: 594604.261 ops/s
# Warmup Iteration  27: 618798.709 ops/s
# Warmup Iteration  28: 591278.834 ops/s
# Warmup Iteration  29: 610485.390 ops/s
# Warmup Iteration  30: 595313.706 ops/s
Iteration   1: 592729.036 ops/s
Iteration   2: 614122.112 ops/s
Iteration   3: 590741.427 ops/s
Iteration   4: 603950.014 ops/s
Iteration   5: 593726.267 ops/s
Iteration   6: 601230.917 ops/s
Iteration   7: 593075.943 ops/s
Iteration   8: 601907.004 ops/s
Iteration   9: 623989.429 ops/s
Iteration  10: 605468.453 ops/s
Iteration  11: 611986.163 ops/s
Iteration  12: 598206.345 ops/s
Iteration  13: 599937.517 ops/s
Iteration  14: 627365.630 ops/s
Iteration  15: 589212.812 ops/s
Iteration  16: 600899.281 ops/s
Iteration  17: 610430.570 ops/s
Iteration  18: 628646.684 ops/s
Iteration  19: 588632.560 ops/s
Iteration  20: 608668.517 ops/s
Iteration  21: 622962.933 ops/s
Iteration  22: 594978.795 ops/s
Iteration  23: 632974.846 ops/s
Iteration  24: 594152.765 ops/s
Iteration  25: 618534.088 ops/s
Iteration  26: 597485.403 ops/s
Iteration  27: 631270.003 ops/s
Iteration  28: 598607.766 ops/s
Iteration  29: 599824.130 ops/s
Iteration  30: 627454.682 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatIterableTest._Benchmark.benchmark_nextReturnsNull":
  606772.403 ±(99.9%) 9267.331 ops/s [Average]
  (min, avg, max) = (588632.560, 606772.403, 632974.846), stdev = 13870.907
  CI (99.9%): [597505.072, 616039.735] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MaybeConcatIterableTest._Benchmark.benchmark_nextReturnsNull  thrpt   30  606772.403 ± 9267.331  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_streamOfNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_streamOfNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73573.320 ops/s
# Warmup Iteration   2: 409552.257 ops/s
# Warmup Iteration   3: 550069.641 ops/s
# Warmup Iteration   4: 504826.405 ops/s
# Warmup Iteration   5: 523614.374 ops/s
# Warmup Iteration   6: 543669.760 ops/s
# Warmup Iteration   7: 536299.191 ops/s
# Warmup Iteration   8: 542935.183 ops/s
# Warmup Iteration   9: 563221.044 ops/s
# Warmup Iteration  10: 586770.298 ops/s
# Warmup Iteration  11: 555956.923 ops/s
# Warmup Iteration  12: 557376.433 ops/s
# Warmup Iteration  13: 574173.666 ops/s
# Warmup Iteration  14: 565160.603 ops/s
# Warmup Iteration  15: 569334.832 ops/s
# Warmup Iteration  16: 587641.700 ops/s
# Warmup Iteration  17: 579074.566 ops/s
# Warmup Iteration  18: 600996.173 ops/s
# Warmup Iteration  19: 595238.903 ops/s
# Warmup Iteration  20: 600622.306 ops/s
# Warmup Iteration  21: 606472.100 ops/s
# Warmup Iteration  22: 586747.309 ops/s
# Warmup Iteration  23: 615238.058 ops/s
# Warmup Iteration  24: 598916.756 ops/s
# Warmup Iteration  25: 574960.321 ops/s
# Warmup Iteration  26: 588687.131 ops/s
# Warmup Iteration  27: 608214.627 ops/s
# Warmup Iteration  28: 572337.213 ops/s
# Warmup Iteration  29: 600795.680 ops/s
# Warmup Iteration  30: 609337.667 ops/s
Iteration   1: 585815.754 ops/s
Iteration   2: 582911.515 ops/s
Iteration   3: 611812.601 ops/s
Iteration   4: 580014.409 ops/s
Iteration   5: 611379.305 ops/s
Iteration   6: 585475.328 ops/s
Iteration   7: 597102.173 ops/s
Iteration   8: 605710.744 ops/s
Iteration   9: 504556.831 ops/s
Iteration  10: 605365.074 ops/s
Iteration  11: 571587.447 ops/s
Iteration  12: 604094.356 ops/s
Iteration  13: 600559.500 ops/s
Iteration  14: 571783.874 ops/s
Iteration  15: 597076.750 ops/s
Iteration  16: 586146.030 ops/s
Iteration  17: 585852.886 ops/s
Iteration  18: 602189.271 ops/s
Iteration  19: 589599.059 ops/s
Iteration  20: 607405.928 ops/s
Iteration  21: 580503.473 ops/s
Iteration  22: 606957.955 ops/s
Iteration  23: 590841.273 ops/s
Iteration  24: 597009.009 ops/s
Iteration  25: 611985.758 ops/s
Iteration  26: 580776.757 ops/s
Iteration  27: 609805.990 ops/s
Iteration  28: 594055.660 ops/s
Iteration  29: 574843.547 ops/s
Iteration  30: 601470.466 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromStreamTest._Benchmark.benchmark_streamOfNull":
  591156.291 ±(99.9%) 13700.933 ops/s [Average]
  (min, avg, max) = (504556.831, 591156.291, 611985.758), stdev = 20506.912
  CI (99.9%): [577455.358, 604857.223] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
FlowableFromStreamTest._Benchmark.benchmark_streamOfNull  thrpt   30  591156.291 ± 13700.933  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_nullError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_nullError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115701.597 ops/s
# Warmup Iteration   2: 448579.531 ops/s
# Warmup Iteration   3: 564170.171 ops/s
# Warmup Iteration   4: 483909.027 ops/s
# Warmup Iteration   5: 541503.669 ops/s
# Warmup Iteration   6: 503490.529 ops/s
# Warmup Iteration   7: 537974.295 ops/s
# Warmup Iteration   8: 559425.563 ops/s
# Warmup Iteration   9: 566951.738 ops/s
# Warmup Iteration  10: 533501.080 ops/s
# Warmup Iteration  11: 549628.009 ops/s
# Warmup Iteration  12: 558093.515 ops/s
# Warmup Iteration  13: 552289.978 ops/s
# Warmup Iteration  14: 575461.011 ops/s
# Warmup Iteration  15: 539059.887 ops/s
# Warmup Iteration  16: 558029.883 ops/s
# Warmup Iteration  17: 577911.774 ops/s
# Warmup Iteration  18: 575319.149 ops/s
# Warmup Iteration  19: 610696.050 ops/s
# Warmup Iteration  20: 573834.587 ops/s
# Warmup Iteration  21: 596198.017 ops/s
# Warmup Iteration  22: 599798.080 ops/s
# Warmup Iteration  23: 564784.192 ops/s
# Warmup Iteration  24: 589574.745 ops/s
# Warmup Iteration  25: 558597.271 ops/s
# Warmup Iteration  26: 585536.670 ops/s
# Warmup Iteration  27: 570270.679 ops/s
# Warmup Iteration  28: 581177.105 ops/s
# Warmup Iteration  29: 586132.395 ops/s
# Warmup Iteration  30: 571777.720 ops/s
Iteration   1: 587916.729 ops/s
Iteration   2: 572514.302 ops/s
Iteration   3: 560935.456 ops/s
Iteration   4: 557140.371 ops/s
Iteration   5: 592934.308 ops/s
Iteration   6: 555180.086 ops/s
Iteration   7: 574621.337 ops/s
Iteration   8: 557647.853 ops/s
Iteration   9: 592732.344 ops/s
Iteration  10: 588379.716 ops/s
Iteration  11: 569894.618 ops/s
Iteration  12: 593762.947 ops/s
Iteration  13: 594119.869 ops/s
Iteration  14: 574003.467 ops/s
Iteration  15: 553495.099 ops/s
Iteration  16: 574166.815 ops/s
Iteration  17: 603355.386 ops/s
Iteration  18: 560536.761 ops/s
Iteration  19: 576990.845 ops/s
Iteration  20: 583968.960 ops/s
Iteration  21: 585592.271 ops/s
Iteration  22: 575322.113 ops/s
Iteration  23: 573202.233 ops/s
Iteration  24: 584267.103 ops/s
Iteration  25: 562074.123 ops/s
Iteration  26: 581488.911 ops/s
Iteration  27: 581527.523 ops/s
Iteration  28: 562874.281 ops/s
Iteration  29: 580193.402 ops/s
Iteration  30: 601729.246 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGenerateTest._Benchmark.benchmark_nullError":
  577085.616 ±(99.9%) 9379.526 ops/s [Average]
  (min, avg, max) = (553495.099, 577085.616, 603355.386), stdev = 14038.834
  CI (99.9%): [567706.090, 586465.141] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableGenerateTest._Benchmark.benchmark_nullError  thrpt   30  577085.616 ± 9379.526  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onSubscribeThrowsCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onSubscribeThrowsCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216398.714 ops/s
# Warmup Iteration   2: 487152.680 ops/s
# Warmup Iteration   3: 494003.167 ops/s
# Warmup Iteration   4: 550673.390 ops/s
# Warmup Iteration   5: 514179.440 ops/s
# Warmup Iteration   6: 560694.627 ops/s
# Warmup Iteration   7: 549144.754 ops/s
# Warmup Iteration   8: 569778.322 ops/s
# Warmup Iteration   9: 558539.614 ops/s
# Warmup Iteration  10: 566451.177 ops/s
# Warmup Iteration  11: 573995.866 ops/s
# Warmup Iteration  12: 578721.998 ops/s
# Warmup Iteration  13: 549847.344 ops/s
# Warmup Iteration  14: 572137.635 ops/s
# Warmup Iteration  15: 561857.494 ops/s
# Warmup Iteration  16: 557409.003 ops/s
# Warmup Iteration  17: 604914.449 ops/s
# Warmup Iteration  18: 600865.169 ops/s
# Warmup Iteration  19: 587366.877 ops/s
# Warmup Iteration  20: 593016.583 ops/s
# Warmup Iteration  21: 610727.977 ops/s
# Warmup Iteration  22: 582412.870 ops/s
# Warmup Iteration  23: 611458.868 ops/s
# Warmup Iteration  24: 576861.707 ops/s
# Warmup Iteration  25: 587629.259 ops/s
# Warmup Iteration  26: 607138.789 ops/s
# Warmup Iteration  27: 575081.393 ops/s
# Warmup Iteration  28: 595341.434 ops/s
# Warmup Iteration  29: 616187.790 ops/s
# Warmup Iteration  30: 572770.624 ops/s
Iteration   1: 605529.902 ops/s
Iteration   2: 576589.583 ops/s
Iteration   3: 587702.861 ops/s
Iteration   4: 499964.752 ops/s
Iteration   5: 582044.574 ops/s
Iteration   6: 601851.601 ops/s
Iteration   7: 586590.945 ops/s
Iteration   8: 607097.830 ops/s
Iteration   9: 585658.136 ops/s
Iteration  10: 585988.083 ops/s
Iteration  11: 614819.123 ops/s
Iteration  12: 577292.315 ops/s
Iteration  13: 605079.360 ops/s
Iteration  14: 587743.113 ops/s
Iteration  15: 571311.335 ops/s
Iteration  16: 579042.605 ops/s
Iteration  17: 570316.999 ops/s
Iteration  18: 600004.207 ops/s
Iteration  19: 581595.466 ops/s
Iteration  20: 578862.927 ops/s
Iteration  21: 624618.210 ops/s
Iteration  22: 594802.725 ops/s
Iteration  23: 573942.616 ops/s
Iteration  24: 610721.801 ops/s
Iteration  25: 580380.475 ops/s
Iteration  26: 606910.117 ops/s
Iteration  27: 578406.390 ops/s
Iteration  28: 590427.189 ops/s
Iteration  29: 612625.433 ops/s
Iteration  30: 579349.480 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onSubscribeThrowsCancelsUpstream":
  587909.005 ±(99.9%) 14759.478 ops/s [Average]
  (min, avg, max) = (499964.752, 587909.005, 624618.210), stdev = 22091.293
  CI (99.9%): [573149.528, 602668.483] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
BoundedSubscriberTest._Benchmark.benchmark_onSubscribeThrowsCancelsUpstream  thrpt   30  587909.005 ± 14759.478  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCastTest._Benchmark.benchmark_castCrashUnsubscribes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCastTest._Benchmark.benchmark_castCrashUnsubscribes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 95247.446 ops/s
# Warmup Iteration   2: 362432.001 ops/s
# Warmup Iteration   3: 418835.697 ops/s
# Warmup Iteration   4: 451832.086 ops/s
# Warmup Iteration   5: 394844.656 ops/s
# Warmup Iteration   6: 475544.765 ops/s
# Warmup Iteration   7: 465256.677 ops/s
# Warmup Iteration   8: 458088.232 ops/s
# Warmup Iteration   9: 486498.528 ops/s
# Warmup Iteration  10: 484798.618 ops/s
# Warmup Iteration  11: 465294.474 ops/s
# Warmup Iteration  12: 472670.553 ops/s
# Warmup Iteration  13: 474987.417 ops/s
# Warmup Iteration  14: 471314.984 ops/s
# Warmup Iteration  15: 472661.209 ops/s
# Warmup Iteration  16: 465695.857 ops/s
# Warmup Iteration  17: 493893.241 ops/s
# Warmup Iteration  18: 484742.641 ops/s
# Warmup Iteration  19: 494700.114 ops/s
# Warmup Iteration  20: 511537.398 ops/s
# Warmup Iteration  21: 479315.774 ops/s
# Warmup Iteration  22: 488260.906 ops/s
# Warmup Iteration  23: 507114.455 ops/s
# Warmup Iteration  24: 490337.948 ops/s
# Warmup Iteration  25: 477732.125 ops/s
# Warmup Iteration  26: 507841.693 ops/s
# Warmup Iteration  27: 478004.616 ops/s
# Warmup Iteration  28: 505757.328 ops/s
# Warmup Iteration  29: 481186.499 ops/s
# Warmup Iteration  30: 500548.605 ops/s
Iteration   1: 508453.306 ops/s
Iteration   2: 491039.449 ops/s
Iteration   3: 482658.515 ops/s
Iteration   4: 488494.912 ops/s
Iteration   5: 491867.520 ops/s
Iteration   6: 484813.877 ops/s
Iteration   7: 507468.823 ops/s
Iteration   8: 484168.000 ops/s
Iteration   9: 498221.209 ops/s
Iteration  10: 485115.377 ops/s
Iteration  11: 495198.654 ops/s
Iteration  12: 504741.902 ops/s
Iteration  13: 495743.589 ops/s
Iteration  14: 464266.565 ops/s
Iteration  15: 492928.734 ops/s
Iteration  16: 504710.673 ops/s
Iteration  17: 473569.611 ops/s
Iteration  18: 503727.998 ops/s
Iteration  19: 500490.443 ops/s
Iteration  20: 481435.407 ops/s
Iteration  21: 473679.791 ops/s
Iteration  22: 504317.079 ops/s
Iteration  23: 480597.506 ops/s
Iteration  24: 491638.623 ops/s
Iteration  25: 487082.758 ops/s
Iteration  26: 496428.828 ops/s
Iteration  27: 491085.181 ops/s
Iteration  28: 480586.440 ops/s
Iteration  29: 507802.270 ops/s
Iteration  30: 478383.447 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCastTest._Benchmark.benchmark_castCrashUnsubscribes":
  491023.883 ±(99.9%) 7635.405 ops/s [Average]
  (min, avg, max) = (464266.565, 491023.883, 508453.306), stdev = 11428.316
  CI (99.9%): [483388.478, 498659.288] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableCastTest._Benchmark.benchmark_castCrashUnsubscribes  thrpt   30  491023.883 ± 7635.405  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1604014.498 ops/s
# Warmup Iteration   2: 4340493.806 ops/s
# Warmup Iteration   3: 5402777.389 ops/s
# Warmup Iteration   4: 5665919.533 ops/s
# Warmup Iteration   5: 6041868.467 ops/s
# Warmup Iteration   6: 5631913.057 ops/s
# Warmup Iteration   7: 5926630.239 ops/s
# Warmup Iteration   8: 5785819.007 ops/s
# Warmup Iteration   9: 5873674.581 ops/s
# Warmup Iteration  10: 5861319.785 ops/s
# Warmup Iteration  11: 6004310.745 ops/s
# Warmup Iteration  12: 5941197.659 ops/s
# Warmup Iteration  13: 5817593.514 ops/s
# Warmup Iteration  14: 6072057.916 ops/s
# Warmup Iteration  15: 5723832.215 ops/s
# Warmup Iteration  16: 5981886.952 ops/s
# Warmup Iteration  17: 5903037.495 ops/s
# Warmup Iteration  18: 5801505.406 ops/s
# Warmup Iteration  19: 6017954.091 ops/s
# Warmup Iteration  20: 5876736.782 ops/s
# Warmup Iteration  21: 6171996.917 ops/s
# Warmup Iteration  22: 5985150.773 ops/s
# Warmup Iteration  23: 5697771.364 ops/s
# Warmup Iteration  24: 5785356.387 ops/s
# Warmup Iteration  25: 5981132.618 ops/s
# Warmup Iteration  26: 5663062.566 ops/s
# Warmup Iteration  27: 5891023.643 ops/s
# Warmup Iteration  28: 5882164.608 ops/s
# Warmup Iteration  29: 4871903.187 ops/s
# Warmup Iteration  30: 6059013.491 ops/s
Iteration   1: 6029604.164 ops/s
Iteration   2: 5809026.474 ops/s
Iteration   3: 5836995.031 ops/s
Iteration   4: 5885749.765 ops/s
Iteration   5: 5782985.056 ops/s
Iteration   6: 6063030.435 ops/s
Iteration   7: 5658790.626 ops/s
Iteration   8: 5992889.525 ops/s
Iteration   9: 5698886.671 ops/s
Iteration  10: 5859246.364 ops/s
Iteration  11: 6021341.347 ops/s
Iteration  12: 5875116.489 ops/s
Iteration  13: 6147585.391 ops/s
Iteration  14: 5714790.457 ops/s
Iteration  15: 5798524.767 ops/s
Iteration  16: 6040276.871 ops/s
Iteration  17: 5752152.656 ops/s
Iteration  18: 6011663.569 ops/s
Iteration  19: 5748671.981 ops/s
Iteration  20: 5948527.369 ops/s
Iteration  21: 5958907.588 ops/s
Iteration  22: 5745866.268 ops/s
Iteration  23: 6139868.181 ops/s
Iteration  24: 5886001.666 ops/s
Iteration  25: 5865277.738 ops/s
Iteration  26: 6223539.493 ops/s
Iteration  27: 5661635.503 ops/s
Iteration  28: 6074076.520 ops/s
Iteration  29: 5654965.951 ops/s
Iteration  30: 5971612.696 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableCollectWithCollectorTest._Benchmark.benchmark_dispose":
  5895253.554 ±(99.9%) 105374.945 ops/s [Average]
  (min, avg, max) = (5654965.951, 5895253.554, 6223539.493), stdev = 157720.269
  CI (99.9%): [5789878.609, 6000628.498] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
FlowableCollectWithCollectorTest._Benchmark.benchmark_dispose  thrpt   30  5895253.554 ± 105374.945  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1090516.814 ops/s
# Warmup Iteration   2: 3320674.882 ops/s
# Warmup Iteration   3: 3651584.754 ops/s
# Warmup Iteration   4: 4231063.746 ops/s
# Warmup Iteration   5: 4263726.950 ops/s
# Warmup Iteration   6: 4119970.313 ops/s
# Warmup Iteration   7: 4234652.242 ops/s
# Warmup Iteration   8: 4414145.085 ops/s
# Warmup Iteration   9: 4169117.747 ops/s
# Warmup Iteration  10: 4297847.064 ops/s
# Warmup Iteration  11: 4180878.625 ops/s
# Warmup Iteration  12: 4078754.388 ops/s
# Warmup Iteration  13: 4299179.764 ops/s
# Warmup Iteration  14: 4169267.287 ops/s
# Warmup Iteration  15: 4224317.137 ops/s
# Warmup Iteration  16: 4316411.044 ops/s
# Warmup Iteration  17: 4152753.461 ops/s
# Warmup Iteration  18: 4346713.757 ops/s
# Warmup Iteration  19: 4349522.871 ops/s
# Warmup Iteration  20: 4301349.599 ops/s
# Warmup Iteration  21: 4211340.465 ops/s
# Warmup Iteration  22: 4123229.431 ops/s
# Warmup Iteration  23: 4393048.370 ops/s
# Warmup Iteration  24: 4343867.601 ops/s
# Warmup Iteration  25: 4206601.809 ops/s
# Warmup Iteration  26: 4328489.410 ops/s
# Warmup Iteration  27: 4255880.162 ops/s
# Warmup Iteration  28: 4136319.788 ops/s
# Warmup Iteration  29: 4256136.501 ops/s
# Warmup Iteration  30: 4104211.705 ops/s
Iteration   1: 4318300.602 ops/s
Iteration   2: 4283274.958 ops/s
Iteration   3: 4188905.945 ops/s
Iteration   4: 4360892.336 ops/s
Iteration   5: 4124689.413 ops/s
Iteration   6: 4245958.739 ops/s
Iteration   7: 4381048.833 ops/s
Iteration   8: 4139919.463 ops/s
Iteration   9: 4192364.556 ops/s
Iteration  10: 4342585.618 ops/s
Iteration  11: 4379186.824 ops/s
Iteration  12: 4144912.991 ops/s
Iteration  13: 4324221.096 ops/s
Iteration  14: 4216382.255 ops/s
Iteration  15: 4285134.267 ops/s
Iteration  16: 4209628.098 ops/s
Iteration  17: 4238646.796 ops/s
Iteration  18: 4372332.839 ops/s
Iteration  19: 4135553.778 ops/s
Iteration  20: 4355724.482 ops/s
Iteration  21: 4202089.296 ops/s
Iteration  22: 4299067.052 ops/s
Iteration  23: 4180385.317 ops/s
Iteration  24: 4235180.781 ops/s
Iteration  25: 4299865.182 ops/s
Iteration  26: 4203660.072 ops/s
Iteration  27: 4338672.146 ops/s
Iteration  28: 4196415.388 ops/s
Iteration  29: 4254326.818 ops/s
Iteration  30: 4208421.384 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_cancel":
  4255258.244 ±(99.9%) 52835.968 ops/s [Average]
  (min, avg, max) = (4124689.413, 4255258.244, 4381048.833), stdev = 79082.396
  CI (99.9%): [4202422.276, 4308094.212] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_cancel  thrpt   30  4255258.244 ± 52835.968  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2249714.151 ops/s
# Warmup Iteration   2: 4337791.844 ops/s
# Warmup Iteration   3: 6210214.397 ops/s
# Warmup Iteration   4: 6619572.433 ops/s
# Warmup Iteration   5: 6710288.292 ops/s
# Warmup Iteration   6: 6707730.324 ops/s
# Warmup Iteration   7: 6926099.450 ops/s
# Warmup Iteration   8: 6600363.123 ops/s
# Warmup Iteration   9: 6469225.002 ops/s
# Warmup Iteration  10: 6927442.531 ops/s
# Warmup Iteration  11: 6504566.226 ops/s
# Warmup Iteration  12: 6931498.564 ops/s
# Warmup Iteration  13: 6639251.163 ops/s
# Warmup Iteration  14: 6560039.284 ops/s
# Warmup Iteration  15: 6913788.485 ops/s
# Warmup Iteration  16: 6512291.558 ops/s
# Warmup Iteration  17: 6738101.768 ops/s
# Warmup Iteration  18: 6695970.508 ops/s
# Warmup Iteration  19: 6790533.370 ops/s
# Warmup Iteration  20: 6955447.349 ops/s
# Warmup Iteration  21: 6941324.833 ops/s
# Warmup Iteration  22: 6564008.275 ops/s
# Warmup Iteration  23: 6325509.057 ops/s
# Warmup Iteration  24: 5976316.244 ops/s
# Warmup Iteration  25: 6879679.055 ops/s
# Warmup Iteration  26: 6663093.633 ops/s
# Warmup Iteration  27: 6850482.521 ops/s
# Warmup Iteration  28: 6698059.464 ops/s
# Warmup Iteration  29: 6680711.337 ops/s
# Warmup Iteration  30: 6655039.446 ops/s
Iteration   1: 6904134.787 ops/s
Iteration   2: 6626898.367 ops/s
Iteration   3: 6815745.206 ops/s
Iteration   4: 6723445.013 ops/s
Iteration   5: 6888489.253 ops/s
Iteration   6: 6816493.028 ops/s
Iteration   7: 6757738.946 ops/s
Iteration   8: 6746562.838 ops/s
Iteration   9: 6639739.521 ops/s
Iteration  10: 6935127.663 ops/s
Iteration  11: 6483055.992 ops/s
Iteration  12: 7009932.678 ops/s
Iteration  13: 6897485.223 ops/s
Iteration  14: 6593594.542 ops/s
Iteration  15: 6789836.690 ops/s
Iteration  16: 6561649.418 ops/s
Iteration  17: 6818166.206 ops/s
Iteration  18: 6679930.189 ops/s
Iteration  19: 6743440.219 ops/s
Iteration  20: 6978566.979 ops/s
Iteration  21: 7061138.843 ops/s
Iteration  22: 6627428.108 ops/s
Iteration  23: 6809683.705 ops/s
Iteration  24: 6480689.600 ops/s
Iteration  25: 6882770.511 ops/s
Iteration  26: 6587740.132 ops/s
Iteration  27: 6653941.605 ops/s
Iteration  28: 6604154.555 ops/s
Iteration  29: 6596643.479 ops/s
Iteration  30: 6841462.095 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableOnErrorCompleteTest._Benchmark.benchmark_isDisposed":
  6751856.180 ±(99.9%) 103216.264 ops/s [Average]
  (min, avg, max) = (6480689.600, 6751856.180, 7061138.843), stdev = 154489.256
  CI (99.9%): [6648639.916, 6855072.443] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
ObservableOnErrorCompleteTest._Benchmark.benchmark_isDisposed  thrpt   30  6751856.180 ± 103216.264  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1432096.709 ops/s
# Warmup Iteration   2: 4784824.351 ops/s
# Warmup Iteration   3: 5199025.579 ops/s
# Warmup Iteration   4: 5885885.504 ops/s
# Warmup Iteration   5: 6083307.833 ops/s
# Warmup Iteration   6: 5947428.015 ops/s
# Warmup Iteration   7: 5933208.237 ops/s
# Warmup Iteration   8: 6074869.992 ops/s
# Warmup Iteration   9: 6009833.563 ops/s
# Warmup Iteration  10: 5744328.627 ops/s
# Warmup Iteration  11: 6048941.480 ops/s
# Warmup Iteration  12: 5874268.539 ops/s
# Warmup Iteration  13: 5926165.717 ops/s
# Warmup Iteration  14: 5951508.614 ops/s
# Warmup Iteration  15: 6026171.870 ops/s
# Warmup Iteration  16: 5914963.344 ops/s
# Warmup Iteration  17: 6191385.483 ops/s
# Warmup Iteration  18: 6186708.409 ops/s
# Warmup Iteration  19: 6018811.803 ops/s
# Warmup Iteration  20: 6147943.253 ops/s
# Warmup Iteration  21: 5953769.027 ops/s
# Warmup Iteration  22: 6113128.712 ops/s
# Warmup Iteration  23: 5822619.441 ops/s
# Warmup Iteration  24: 6131533.734 ops/s
# Warmup Iteration  25: 6031481.088 ops/s
# Warmup Iteration  26: 5890153.469 ops/s
# Warmup Iteration  27: 6038505.985 ops/s
# Warmup Iteration  28: 6164068.294 ops/s
# Warmup Iteration  29: 5936827.802 ops/s
# Warmup Iteration  30: 6247277.413 ops/s
Iteration   1: 5825415.769 ops/s
Iteration   2: 6091795.405 ops/s
Iteration   3: 6113627.385 ops/s
Iteration   4: 5739259.665 ops/s
Iteration   5: 6177624.057 ops/s
Iteration   6: 5854393.209 ops/s
Iteration   7: 6101361.343 ops/s
Iteration   8: 6247686.396 ops/s
Iteration   9: 5938020.476 ops/s
Iteration  10: 6056466.485 ops/s
Iteration  11: 6193932.379 ops/s
Iteration  12: 5934886.004 ops/s
Iteration  13: 6126202.847 ops/s
Iteration  14: 5988794.236 ops/s
Iteration  15: 6064327.761 ops/s
Iteration  16: 6116459.232 ops/s
Iteration  17: 5971563.915 ops/s
Iteration  18: 6136538.748 ops/s
Iteration  19: 5933523.302 ops/s
Iteration  20: 6222783.856 ops/s
Iteration  21: 6217991.371 ops/s
Iteration  22: 5996310.314 ops/s
Iteration  23: 6139943.890 ops/s
Iteration  24: 5913022.380 ops/s
Iteration  25: 5997049.711 ops/s
Iteration  26: 5982790.346 ops/s
Iteration  27: 6150334.028 ops/s
Iteration  28: 6201817.544 ops/s
Iteration  29: 6207130.328 ops/s
Iteration  30: 5918534.696 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_isDisposed":
  6051986.236 ±(99.9%) 88347.724 ops/s [Average]
  (min, avg, max) = (5739259.665, 6051986.236, 6247686.396), stdev = 132234.725
  CI (99.9%): [5963638.512, 6140333.960] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
CompletableHideTest._Benchmark.benchmark_isDisposed  thrpt   30  6051986.236 ± 88347.724  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1115522.170 ops/s
# Warmup Iteration   2: 4609175.783 ops/s
# Warmup Iteration   3: 5175646.928 ops/s
# Warmup Iteration   4: 5784845.743 ops/s
# Warmup Iteration   5: 5872724.115 ops/s
# Warmup Iteration   6: 6156290.254 ops/s
# Warmup Iteration   7: 5966503.122 ops/s
# Warmup Iteration   8: 5914409.928 ops/s
# Warmup Iteration   9: 5956429.408 ops/s
# Warmup Iteration  10: 5973556.860 ops/s
# Warmup Iteration  11: 6033089.727 ops/s
# Warmup Iteration  12: 5830086.995 ops/s
# Warmup Iteration  13: 5968696.454 ops/s
# Warmup Iteration  14: 6091447.551 ops/s
# Warmup Iteration  15: 5894846.317 ops/s
# Warmup Iteration  16: 5971297.888 ops/s
# Warmup Iteration  17: 5811169.339 ops/s
# Warmup Iteration  18: 4801053.188 ops/s
# Warmup Iteration  19: 6242848.590 ops/s
# Warmup Iteration  20: 5798614.924 ops/s
# Warmup Iteration  21: 5903562.335 ops/s
# Warmup Iteration  22: 6095262.651 ops/s
# Warmup Iteration  23: 5785064.217 ops/s
# Warmup Iteration  24: 5789754.020 ops/s
# Warmup Iteration  25: 6265033.944 ops/s
# Warmup Iteration  26: 5720478.336 ops/s
# Warmup Iteration  27: 5841549.372 ops/s
# Warmup Iteration  28: 6097271.731 ops/s
# Warmup Iteration  29: 5986134.373 ops/s
# Warmup Iteration  30: 5915937.075 ops/s
Iteration   1: 6181500.741 ops/s
Iteration   2: 6149185.153 ops/s
Iteration   3: 5814310.349 ops/s
Iteration   4: 5965821.521 ops/s
Iteration   5: 5793871.257 ops/s
Iteration   6: 5812206.396 ops/s
Iteration   7: 6189249.856 ops/s
Iteration   8: 5896072.164 ops/s
Iteration   9: 6132865.503 ops/s
Iteration  10: 5853055.658 ops/s
Iteration  11: 6044422.510 ops/s
Iteration  12: 5901248.125 ops/s
Iteration  13: 5808552.672 ops/s
Iteration  14: 6053506.219 ops/s
Iteration  15: 6102118.786 ops/s
Iteration  16: 5807503.059 ops/s
Iteration  17: 6197957.094 ops/s
Iteration  18: 5995140.548 ops/s
Iteration  19: 5894351.961 ops/s
Iteration  20: 6300927.941 ops/s
Iteration  21: 5811360.669 ops/s
Iteration  22: 6060170.749 ops/s
Iteration  23: 5997005.133 ops/s
Iteration  24: 6019880.222 ops/s
Iteration  25: 6099184.702 ops/s
Iteration  26: 5865883.379 ops/s
Iteration  27: 6179053.267 ops/s
Iteration  28: 5773059.702 ops/s
Iteration  29: 5808933.035 ops/s
Iteration  30: 6062229.819 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDetachTest._Benchmark.benchmark_dispose":
  5985687.606 ±(99.9%) 102258.002 ops/s [Average]
  (min, avg, max) = (5773059.702, 5985687.606, 6300927.941), stdev = 153054.975
  CI (99.9%): [5883429.604, 6087945.609] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
CompletableDetachTest._Benchmark.benchmark_dispose  thrpt   30  5985687.606 ± 102258.002  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 640652.590 ops/s
# Warmup Iteration   2: 3161028.185 ops/s
# Warmup Iteration   3: 3594432.918 ops/s
# Warmup Iteration   4: 4479204.871 ops/s
# Warmup Iteration   5: 4295629.086 ops/s
# Warmup Iteration   6: 4507538.643 ops/s
# Warmup Iteration   7: 4363715.701 ops/s
# Warmup Iteration   8: 4377171.823 ops/s
# Warmup Iteration   9: 4402020.137 ops/s
# Warmup Iteration  10: 4358625.492 ops/s
# Warmup Iteration  11: 4474131.236 ops/s
# Warmup Iteration  12: 4419942.592 ops/s
# Warmup Iteration  13: 4356968.842 ops/s
# Warmup Iteration  14: 4492055.676 ops/s
# Warmup Iteration  15: 4354778.650 ops/s
# Warmup Iteration  16: 4355936.737 ops/s
# Warmup Iteration  17: 4518503.610 ops/s
# Warmup Iteration  18: 4362975.887 ops/s
# Warmup Iteration  19: 4548736.910 ops/s
# Warmup Iteration  20: 4408264.697 ops/s
# Warmup Iteration  21: 4342422.408 ops/s
# Warmup Iteration  22: 4444763.729 ops/s
# Warmup Iteration  23: 4343421.397 ops/s
# Warmup Iteration  24: 4373968.932 ops/s
# Warmup Iteration  25: 4365069.863 ops/s
# Warmup Iteration  26: 4322851.011 ops/s
# Warmup Iteration  27: 4396795.986 ops/s
# Warmup Iteration  28: 4534318.540 ops/s
# Warmup Iteration  29: 4464380.413 ops/s
# Warmup Iteration  30: 4229125.411 ops/s
Iteration   1: 4454291.919 ops/s
Iteration   2: 4389154.255 ops/s
Iteration   3: 4413317.084 ops/s
Iteration   4: 4499404.118 ops/s
Iteration   5: 4280082.856 ops/s
Iteration   6: 4324233.775 ops/s
Iteration   7: 4454384.046 ops/s
Iteration   8: 4377061.736 ops/s
Iteration   9: 4599119.447 ops/s
Iteration  10: 4331518.548 ops/s
Iteration  11: 4456350.153 ops/s
Iteration  12: 4412774.541 ops/s
Iteration  13: 4331457.249 ops/s
Iteration  14: 4189995.306 ops/s
Iteration  15: 4379313.986 ops/s
Iteration  16: 4355435.823 ops/s
Iteration  17: 4480499.108 ops/s
Iteration  18: 4289440.122 ops/s
Iteration  19: 4411344.502 ops/s
Iteration  20: 4587543.994 ops/s
Iteration  21: 4407081.721 ops/s
Iteration  22: 4350141.973 ops/s
Iteration  23: 4453658.859 ops/s
Iteration  24: 4328324.357 ops/s
Iteration  25: 4046673.802 ops/s
Iteration  26: 4061406.265 ops/s
Iteration  27: 4396984.523 ops/s
Iteration  28: 4557820.887 ops/s
Iteration  29: 4539820.306 ops/s
Iteration  30: 4298635.700 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnNext":
  4381909.032 ±(99.9%) 86364.545 ops/s [Average]
  (min, avg, max) = (4046673.802, 4381909.032, 4599119.447), stdev = 129266.394
  CI (99.9%): [4295544.487, 4468273.577] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnNext  thrpt   30  4381909.032 ± 86364.545  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 973318.383 ops/s
# Warmup Iteration   2: 4058787.698 ops/s
# Warmup Iteration   3: 5411181.373 ops/s
# Warmup Iteration   4: 5430342.597 ops/s
# Warmup Iteration   5: 5925087.403 ops/s
# Warmup Iteration   6: 6095331.508 ops/s
# Warmup Iteration   7: 6047663.023 ops/s
# Warmup Iteration   8: 6004031.770 ops/s
# Warmup Iteration   9: 5895881.286 ops/s
# Warmup Iteration  10: 6118318.547 ops/s
# Warmup Iteration  11: 5806824.338 ops/s
# Warmup Iteration  12: 5928580.571 ops/s
# Warmup Iteration  13: 5925231.743 ops/s
# Warmup Iteration  14: 6068389.512 ops/s
# Warmup Iteration  15: 5949882.880 ops/s
# Warmup Iteration  16: 6072688.775 ops/s
# Warmup Iteration  17: 5688494.936 ops/s
# Warmup Iteration  18: 6117989.031 ops/s
# Warmup Iteration  19: 5899223.519 ops/s
# Warmup Iteration  20: 6226431.408 ops/s
# Warmup Iteration  21: 5816837.059 ops/s
# Warmup Iteration  22: 6147361.095 ops/s
# Warmup Iteration  23: 5770921.697 ops/s
# Warmup Iteration  24: 5794541.858 ops/s
# Warmup Iteration  25: 6153192.402 ops/s
# Warmup Iteration  26: 5835847.201 ops/s
# Warmup Iteration  27: 6182993.920 ops/s
# Warmup Iteration  28: 5643870.443 ops/s
# Warmup Iteration  29: 6108483.343 ops/s
# Warmup Iteration  30: 6107988.081 ops/s
Iteration   1: 5874411.387 ops/s
Iteration   2: 6095729.989 ops/s
Iteration   3: 5929540.214 ops/s
Iteration   4: 6062939.216 ops/s
Iteration   5: 5967792.799 ops/s
Iteration   6: 5823118.241 ops/s
Iteration   7: 5907164.820 ops/s
Iteration   8: 6125322.695 ops/s
Iteration   9: 5830357.796 ops/s
Iteration  10: 5991868.366 ops/s
Iteration  11: 6112422.017 ops/s
Iteration  12: 5946640.138 ops/s
Iteration  13: 6058283.325 ops/s
Iteration  14: 5851549.928 ops/s
Iteration  15: 5923048.844 ops/s
Iteration  16: 6159637.721 ops/s
Iteration  17: 5853679.095 ops/s
Iteration  18: 6027284.439 ops/s
Iteration  19: 6081971.008 ops/s
Iteration  20: 5652989.703 ops/s
Iteration  21: 5860795.843 ops/s
Iteration  22: 6136003.076 ops/s
Iteration  23: 5943602.619 ops/s
Iteration  24: 6170332.858 ops/s
Iteration  25: 5832436.491 ops/s
Iteration  26: 6160232.617 ops/s
Iteration  27: 5765065.625 ops/s
Iteration  28: 5948374.900 ops/s
Iteration  29: 4856242.791 ops/s
Iteration  30: 5787193.316 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_isDisposed":
  5924534.396 ±(99.9%) 162011.948 ops/s [Average]
  (min, avg, max) = (4856242.791, 5924534.396, 6170332.858), stdev = 242491.875
  CI (99.9%): [5762522.448, 6086546.344] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score        Error  Units
MaybeHideTest._Benchmark.benchmark_isDisposed  thrpt   30  5924534.396 ± 162011.948  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1099027.634 ops/s
# Warmup Iteration   2: 4637856.723 ops/s
# Warmup Iteration   3: 4935734.838 ops/s
# Warmup Iteration   4: 5967272.470 ops/s
# Warmup Iteration   5: 5834869.331 ops/s
# Warmup Iteration   6: 5628106.152 ops/s
# Warmup Iteration   7: 6028974.915 ops/s
# Warmup Iteration   8: 5774608.859 ops/s
# Warmup Iteration   9: 5786639.614 ops/s
# Warmup Iteration  10: 5932379.721 ops/s
# Warmup Iteration  11: 5591922.707 ops/s
# Warmup Iteration  12: 5995232.940 ops/s
# Warmup Iteration  13: 5879410.497 ops/s
# Warmup Iteration  14: 5779868.704 ops/s
# Warmup Iteration  15: 5939115.602 ops/s
# Warmup Iteration  16: 6066656.260 ops/s
# Warmup Iteration  17: 5641556.479 ops/s
# Warmup Iteration  18: 5827400.318 ops/s
# Warmup Iteration  19: 5908031.585 ops/s
# Warmup Iteration  20: 5861905.148 ops/s
# Warmup Iteration  21: 5745714.088 ops/s
# Warmup Iteration  22: 6141938.059 ops/s
# Warmup Iteration  23: 5684163.710 ops/s
# Warmup Iteration  24: 5660695.956 ops/s
# Warmup Iteration  25: 5868099.398 ops/s
# Warmup Iteration  26: 5761587.198 ops/s
# Warmup Iteration  27: 5693126.577 ops/s
# Warmup Iteration  28: 6019684.078 ops/s
# Warmup Iteration  29: 5760207.224 ops/s
# Warmup Iteration  30: 5896991.743 ops/s
Iteration   1: 5889865.850 ops/s
Iteration   2: 5686674.172 ops/s
Iteration   3: 6060071.069 ops/s
Iteration   4: 5663628.468 ops/s
Iteration   5: 5796644.749 ops/s
Iteration   6: 6149671.683 ops/s
Iteration   7: 5710288.497 ops/s
Iteration   8: 6116281.590 ops/s
Iteration   9: 5528374.558 ops/s
Iteration  10: 6002452.879 ops/s
Iteration  11: 6200789.315 ops/s
Iteration  12: 5678593.352 ops/s
Iteration  13: 6107469.256 ops/s
Iteration  14: 5935146.841 ops/s
Iteration  15: 5797407.250 ops/s
Iteration  16: 6044521.649 ops/s
Iteration  17: 5617473.565 ops/s
Iteration  18: 5973713.319 ops/s
Iteration  19: 5787314.545 ops/s
Iteration  20: 5795375.157 ops/s
Iteration  21: 6075684.127 ops/s
Iteration  22: 5845631.277 ops/s
Iteration  23: 6031999.003 ops/s
Iteration  24: 5939944.548 ops/s
Iteration  25: 5771161.885 ops/s
Iteration  26: 5935565.192 ops/s
Iteration  27: 5773196.927 ops/s
Iteration  28: 5862927.778 ops/s
Iteration  29: 5944696.690 ops/s
Iteration  30: 5735450.474 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_dispose":
  5881933.856 ±(99.9%) 115255.314 ops/s [Average]
  (min, avg, max) = (5528374.558, 5881933.856, 6200789.315), stdev = 172508.742
  CI (99.9%): [5766678.541, 5997189.170] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score        Error  Units
SingleDetachTest._Benchmark.benchmark_dispose  thrpt   30  5881933.856 ± 115255.314  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1542856.095 ops/s
# Warmup Iteration   2: 4516469.924 ops/s
# Warmup Iteration   3: 5158411.763 ops/s
# Warmup Iteration   4: 5975046.537 ops/s
# Warmup Iteration   5: 5946338.811 ops/s
# Warmup Iteration   6: 5914709.315 ops/s
# Warmup Iteration   7: 5749431.975 ops/s
# Warmup Iteration   8: 5894328.864 ops/s
# Warmup Iteration   9: 5485068.256 ops/s
# Warmup Iteration  10: 6216250.871 ops/s
# Warmup Iteration  11: 5778464.492 ops/s
# Warmup Iteration  12: 5918134.458 ops/s
# Warmup Iteration  13: 6043452.631 ops/s
# Warmup Iteration  14: 5912240.722 ops/s
# Warmup Iteration  15: 5895814.364 ops/s
# Warmup Iteration  16: 5852399.119 ops/s
# Warmup Iteration  17: 6127400.540 ops/s
# Warmup Iteration  18: 6210693.773 ops/s
# Warmup Iteration  19: 5693184.284 ops/s
# Warmup Iteration  20: 6083294.756 ops/s
# Warmup Iteration  21: 5892405.565 ops/s
# Warmup Iteration  22: 5668581.551 ops/s
# Warmup Iteration  23: 6004008.564 ops/s
# Warmup Iteration  24: 5763692.513 ops/s
# Warmup Iteration  25: 6043239.362 ops/s
# Warmup Iteration  26: 5979131.822 ops/s
# Warmup Iteration  27: 5866521.315 ops/s
# Warmup Iteration  28: 6182060.606 ops/s
# Warmup Iteration  29: 5628122.499 ops/s
# Warmup Iteration  30: 6035801.658 ops/s
Iteration   1: 5690246.993 ops/s
Iteration   2: 5977085.893 ops/s
Iteration   3: 6005326.543 ops/s
Iteration   4: 5793754.770 ops/s
Iteration   5: 6115442.043 ops/s
Iteration   6: 5956096.610 ops/s
Iteration   7: 5886338.218 ops/s
Iteration   8: 6043147.613 ops/s
Iteration   9: 6047613.397 ops/s
Iteration  10: 5724672.745 ops/s
Iteration  11: 6110149.030 ops/s
Iteration  12: 5785717.395 ops/s
Iteration  13: 5809950.083 ops/s
Iteration  14: 5970443.009 ops/s
Iteration  15: 5811357.780 ops/s
Iteration  16: 5707562.264 ops/s
Iteration  17: 6082188.374 ops/s
Iteration  18: 5982495.565 ops/s
Iteration  19: 6080026.181 ops/s
Iteration  20: 5827869.986 ops/s
Iteration  21: 5873566.807 ops/s
Iteration  22: 6045914.663 ops/s
Iteration  23: 5683480.178 ops/s
Iteration  24: 6030232.117 ops/s
Iteration  25: 6035637.663 ops/s
Iteration  26: 5750492.838 ops/s
Iteration  27: 5871043.203 ops/s
Iteration  28: 6061935.827 ops/s
Iteration  29: 5954205.630 ops/s
Iteration  30: 6035554.300 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDetachTest._Benchmark.benchmark_dispose":
  5924984.924 ±(99.9%) 91515.617 ops/s [Average]
  (min, avg, max) = (5683480.178, 5924984.924, 6115442.043), stdev = 136976.278
  CI (99.9%): [5833469.306, 6016500.541] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
MaybeDetachTest._Benchmark.benchmark_dispose  thrpt   30  5924984.924 ± 91515.617  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_unsubscriptionPropagatesBeforeSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_unsubscriptionPropagatesBeforeSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 622137.092 ops/s
# Warmup Iteration   2: 2372727.469 ops/s
# Warmup Iteration   3: 3264112.419 ops/s
# Warmup Iteration   4: 2924945.790 ops/s
# Warmup Iteration   5: 2896804.165 ops/s
# Warmup Iteration   6: 3119882.687 ops/s
# Warmup Iteration   7: 3142663.736 ops/s
# Warmup Iteration   8: 3265637.460 ops/s
# Warmup Iteration   9: 3124485.549 ops/s
# Warmup Iteration  10: 3196701.087 ops/s
# Warmup Iteration  11: 3101701.239 ops/s
# Warmup Iteration  12: 3328409.772 ops/s
# Warmup Iteration  13: 2978990.993 ops/s
# Warmup Iteration  14: 3312320.922 ops/s
# Warmup Iteration  15: 3160949.948 ops/s
# Warmup Iteration  16: 3155565.681 ops/s
# Warmup Iteration  17: 3185500.578 ops/s
# Warmup Iteration  18: 3328465.241 ops/s
# Warmup Iteration  19: 3074634.664 ops/s
# Warmup Iteration  20: 3226414.128 ops/s
# Warmup Iteration  21: 3095653.088 ops/s
# Warmup Iteration  22: 3268794.076 ops/s
# Warmup Iteration  23: 3137228.641 ops/s
# Warmup Iteration  24: 3152726.152 ops/s
# Warmup Iteration  25: 3395156.413 ops/s
# Warmup Iteration  26: 3258501.830 ops/s
# Warmup Iteration  27: 3137967.903 ops/s
# Warmup Iteration  28: 3182202.604 ops/s
# Warmup Iteration  29: 3117013.489 ops/s
# Warmup Iteration  30: 3195972.067 ops/s
Iteration   1: 3323334.203 ops/s
Iteration   2: 3245762.695 ops/s
Iteration   3: 3095551.157 ops/s
Iteration   4: 3162608.124 ops/s
Iteration   5: 3269463.655 ops/s
Iteration   6: 3190886.128 ops/s
Iteration   7: 3302063.498 ops/s
Iteration   8: 3329575.693 ops/s
Iteration   9: 3143986.248 ops/s
Iteration  10: 3303134.109 ops/s
Iteration  11: 3153601.711 ops/s
Iteration  12: 3099350.362 ops/s
Iteration  13: 3229542.578 ops/s
Iteration  14: 3307718.992 ops/s
Iteration  15: 3063333.975 ops/s
Iteration  16: 3233362.061 ops/s
Iteration  17: 3110095.226 ops/s
Iteration  18: 3295006.856 ops/s
Iteration  19: 3103154.219 ops/s
Iteration  20: 3146889.493 ops/s
Iteration  21: 3179295.135 ops/s
Iteration  22: 3229197.874 ops/s
Iteration  23: 3325546.444 ops/s
Iteration  24: 3205592.327 ops/s
Iteration  25: 3181156.584 ops/s
Iteration  26: 3268758.990 ops/s
Iteration  27: 3162785.787 ops/s
Iteration  28: 3320429.919 ops/s
Iteration  29: 3305352.770 ops/s
Iteration  30: 2315459.829 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_unsubscriptionPropagatesBeforeSubscribe":
  3186733.221 ±(99.9%) 122544.845 ops/s [Average]
  (min, avg, max) = (2315459.829, 3186733.221, 3329575.693), stdev = 183419.369
  CI (99.9%): [3064188.376, 3309278.066] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt        Score        Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_unsubscriptionPropagatesBeforeSubscribe  thrpt   30  3186733.221 ± 122544.845  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onSubscribeThrowsCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onSubscribeThrowsCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148763.011 ops/s
# Warmup Iteration   2: 483824.899 ops/s
# Warmup Iteration   3: 498400.901 ops/s
# Warmup Iteration   4: 593503.807 ops/s
# Warmup Iteration   5: 603342.307 ops/s
# Warmup Iteration   6: 614893.089 ops/s
# Warmup Iteration   7: 603908.827 ops/s
# Warmup Iteration   8: 585770.566 ops/s
# Warmup Iteration   9: 611413.280 ops/s
# Warmup Iteration  10: 586422.930 ops/s
# Warmup Iteration  11: 592609.602 ops/s
# Warmup Iteration  12: 623924.715 ops/s
# Warmup Iteration  13: 583658.932 ops/s
# Warmup Iteration  14: 612067.089 ops/s
# Warmup Iteration  15: 594272.384 ops/s
# Warmup Iteration  16: 571516.804 ops/s
# Warmup Iteration  17: 638067.514 ops/s
# Warmup Iteration  18: 647986.784 ops/s
# Warmup Iteration  19: 610635.492 ops/s
# Warmup Iteration  20: 642769.629 ops/s
# Warmup Iteration  21: 601420.300 ops/s
# Warmup Iteration  22: 627359.137 ops/s
# Warmup Iteration  23: 627458.035 ops/s
# Warmup Iteration  24: 566960.411 ops/s
# Warmup Iteration  25: 635649.681 ops/s
# Warmup Iteration  26: 620172.910 ops/s
# Warmup Iteration  27: 641220.392 ops/s
# Warmup Iteration  28: 627156.717 ops/s
# Warmup Iteration  29: 610175.766 ops/s
# Warmup Iteration  30: 609195.333 ops/s
Iteration   1: 615163.329 ops/s
Iteration   2: 621375.873 ops/s
Iteration   3: 671105.865 ops/s
Iteration   4: 641224.775 ops/s
Iteration   5: 562213.509 ops/s
Iteration   6: 620198.211 ops/s
Iteration   7: 628961.386 ops/s
Iteration   8: 638482.761 ops/s
Iteration   9: 643318.474 ops/s
Iteration  10: 622883.710 ops/s
Iteration  11: 660551.183 ops/s
Iteration  12: 604323.035 ops/s
Iteration  13: 645552.022 ops/s
Iteration  14: 632716.098 ops/s
Iteration  15: 618117.234 ops/s
Iteration  16: 627097.485 ops/s
Iteration  17: 643756.735 ops/s
Iteration  18: 618426.495 ops/s
Iteration  19: 634029.068 ops/s
Iteration  20: 651301.269 ops/s
Iteration  21: 616920.719 ops/s
Iteration  22: 645613.915 ops/s
Iteration  23: 662501.653 ops/s
Iteration  24: 607931.156 ops/s
Iteration  25: 647750.516 ops/s
Iteration  26: 628045.269 ops/s
Iteration  27: 650637.340 ops/s
Iteration  28: 606533.805 ops/s
Iteration  29: 645528.167 ops/s
Iteration  30: 532216.927 ops/s


Result "io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onSubscribeThrowsCancelsUpstream":
  628149.266 ±(99.9%) 18750.171 ops/s [Average]
  (min, avg, max) = (532216.927, 628149.266, 671105.865), stdev = 28064.376
  CI (99.9%): [609399.095, 646899.437] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
LambdaObserverTest._Benchmark.benchmark_onSubscribeThrowsCancelsUpstream  thrpt   30  628149.266 ± 18750.171  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 586175.255 ops/s
# Warmup Iteration   2: 2827054.714 ops/s
# Warmup Iteration   3: 3459505.005 ops/s
# Warmup Iteration   4: 4150129.909 ops/s
# Warmup Iteration   5: 3950253.386 ops/s
# Warmup Iteration   6: 4046072.555 ops/s
# Warmup Iteration   7: 4126414.811 ops/s
# Warmup Iteration   8: 4058223.437 ops/s
# Warmup Iteration   9: 3903475.473 ops/s
# Warmup Iteration  10: 4269280.926 ops/s
# Warmup Iteration  11: 4077587.650 ops/s
# Warmup Iteration  12: 3975466.158 ops/s
# Warmup Iteration  13: 4103568.519 ops/s
# Warmup Iteration  14: 4048738.834 ops/s
# Warmup Iteration  15: 4158218.683 ops/s
# Warmup Iteration  16: 4053686.412 ops/s
# Warmup Iteration  17: 3966409.538 ops/s
# Warmup Iteration  18: 4195309.864 ops/s
# Warmup Iteration  19: 4007212.506 ops/s
# Warmup Iteration  20: 4217036.080 ops/s
# Warmup Iteration  21: 3867504.339 ops/s
# Warmup Iteration  22: 4078168.885 ops/s
# Warmup Iteration  23: 3966361.616 ops/s
# Warmup Iteration  24: 4004469.277 ops/s
# Warmup Iteration  25: 4118035.725 ops/s
# Warmup Iteration  26: 4242248.819 ops/s
# Warmup Iteration  27: 4103535.096 ops/s
# Warmup Iteration  28: 4028425.413 ops/s
# Warmup Iteration  29: 4109595.412 ops/s
# Warmup Iteration  30: 4098937.726 ops/s
Iteration   1: 4029261.616 ops/s
Iteration   2: 4167762.252 ops/s
Iteration   3: 3999600.118 ops/s
Iteration   4: 3959099.737 ops/s
Iteration   5: 4145700.841 ops/s
Iteration   6: 4026467.987 ops/s
Iteration   7: 4091707.469 ops/s
Iteration   8: 4115112.269 ops/s
Iteration   9: 4111998.058 ops/s
Iteration  10: 4135769.782 ops/s
Iteration  11: 3951444.028 ops/s
Iteration  12: 4118447.659 ops/s
Iteration  13: 4073818.902 ops/s
Iteration  14: 4094249.958 ops/s
Iteration  15: 4156606.085 ops/s
Iteration  16: 3928472.692 ops/s
Iteration  17: 4117291.981 ops/s
Iteration  18: 4000909.461 ops/s
Iteration  19: 4222467.167 ops/s
Iteration  20: 3965072.820 ops/s
Iteration  21: 4039178.677 ops/s
Iteration  22: 4056742.181 ops/s
Iteration  23: 3971029.774 ops/s
Iteration  24: 4101780.994 ops/s
Iteration  25: 3882955.380 ops/s
Iteration  26: 4202799.036 ops/s
Iteration  27: 4015781.769 ops/s
Iteration  28: 4002716.519 ops/s
Iteration  29: 4173422.548 ops/s
Iteration  30: 3976012.063 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelaySubscriptionTest._Benchmark.benchmark_normal":
  4061122.661 ±(99.9%) 58149.523 ops/s [Average]
  (min, avg, max) = (3882955.380, 4061122.661, 4222467.167), stdev = 87035.476
  CI (99.9%): [4002973.137, 4119272.184] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeDelaySubscriptionTest._Benchmark.benchmark_normal  thrpt   30  4061122.661 ± 58149.523  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 819559.521 ops/s
# Warmup Iteration   2: 3307013.239 ops/s
# Warmup Iteration   3: 3405031.896 ops/s
# Warmup Iteration   4: 4146466.041 ops/s
# Warmup Iteration   5: 4035738.705 ops/s
# Warmup Iteration   6: 4005927.723 ops/s
# Warmup Iteration   7: 4144814.307 ops/s
# Warmup Iteration   8: 4234030.106 ops/s
# Warmup Iteration   9: 4086420.348 ops/s
# Warmup Iteration  10: 3991758.914 ops/s
# Warmup Iteration  11: 4110963.441 ops/s
# Warmup Iteration  12: 4014823.701 ops/s
# Warmup Iteration  13: 4020700.962 ops/s
# Warmup Iteration  14: 4264117.568 ops/s
# Warmup Iteration  15: 3861026.086 ops/s
# Warmup Iteration  16: 4163804.723 ops/s
# Warmup Iteration  17: 4126829.370 ops/s
# Warmup Iteration  18: 3985450.130 ops/s
# Warmup Iteration  19: 4004380.107 ops/s
# Warmup Iteration  20: 4157257.650 ops/s
# Warmup Iteration  21: 4013478.132 ops/s
# Warmup Iteration  22: 4185598.231 ops/s
# Warmup Iteration  23: 4008194.913 ops/s
# Warmup Iteration  24: 4122671.019 ops/s
# Warmup Iteration  25: 4199867.037 ops/s
# Warmup Iteration  26: 4073916.885 ops/s
# Warmup Iteration  27: 4208830.282 ops/s
# Warmup Iteration  28: 4093463.552 ops/s
# Warmup Iteration  29: 3878879.200 ops/s
# Warmup Iteration  30: 4246005.517 ops/s
Iteration   1: 4117706.419 ops/s
Iteration   2: 4036278.538 ops/s
Iteration   3: 4179688.296 ops/s
Iteration   4: 4047394.013 ops/s
Iteration   5: 3949409.829 ops/s
Iteration   6: 4196374.766 ops/s
Iteration   7: 3981686.309 ops/s
Iteration   8: 4172219.175 ops/s
Iteration   9: 3988893.660 ops/s
Iteration  10: 4113767.164 ops/s
Iteration  11: 4200658.611 ops/s
Iteration  12: 3994235.267 ops/s
Iteration  13: 4279770.006 ops/s
Iteration  14: 4010581.381 ops/s
Iteration  15: 4078658.790 ops/s
Iteration  16: 4167608.067 ops/s
Iteration  17: 4067756.339 ops/s
Iteration  18: 4015165.680 ops/s
Iteration  19: 4088201.185 ops/s
Iteration  20: 4063096.756 ops/s
Iteration  21: 4114918.412 ops/s
Iteration  22: 4142746.430 ops/s
Iteration  23: 3921268.113 ops/s
Iteration  24: 4167269.508 ops/s
Iteration  25: 3427105.117 ops/s
Iteration  26: 4140600.354 ops/s
Iteration  27: 4189168.506 ops/s
Iteration  28: 4229662.740 ops/s
Iteration  29: 4025710.300 ops/s
Iteration  30: 4111968.725 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_dispose":
  4073985.615 ±(99.9%) 100537.370 ops/s [Average]
  (min, avg, max) = (3427105.117, 4073985.615, 4279770.006), stdev = 150479.614
  CI (99.9%): [3973448.245, 4174522.985] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
MaybeSwitchIfEmptyTest._Benchmark.benchmark_dispose  thrpt   30  4073985.615 ± 100537.370  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 762844.555 ops/s
# Warmup Iteration   2: 3525143.823 ops/s
# Warmup Iteration   3: 4017860.311 ops/s
# Warmup Iteration   4: 4552006.378 ops/s
# Warmup Iteration   5: 4667138.162 ops/s
# Warmup Iteration   6: 4567941.000 ops/s
# Warmup Iteration   7: 4694455.572 ops/s
# Warmup Iteration   8: 4652362.522 ops/s
# Warmup Iteration   9: 4642235.957 ops/s
# Warmup Iteration  10: 4530967.913 ops/s
# Warmup Iteration  11: 4619475.761 ops/s
# Warmup Iteration  12: 4460091.881 ops/s
# Warmup Iteration  13: 4841627.236 ops/s
# Warmup Iteration  14: 4505209.227 ops/s
# Warmup Iteration  15: 4726643.342 ops/s
# Warmup Iteration  16: 4727825.072 ops/s
# Warmup Iteration  17: 4535120.875 ops/s
# Warmup Iteration  18: 4609947.343 ops/s
# Warmup Iteration  19: 4722374.244 ops/s
# Warmup Iteration  20: 4601935.285 ops/s
# Warmup Iteration  21: 4715902.818 ops/s
# Warmup Iteration  22: 4466627.675 ops/s
# Warmup Iteration  23: 4664747.913 ops/s
# Warmup Iteration  24: 4657905.110 ops/s
# Warmup Iteration  25: 4553597.431 ops/s
# Warmup Iteration  26: 4563192.014 ops/s
# Warmup Iteration  27: 4879406.959 ops/s
# Warmup Iteration  28: 4450672.026 ops/s
# Warmup Iteration  29: 4648744.250 ops/s
# Warmup Iteration  30: 4610864.426 ops/s
Iteration   1: 4601396.756 ops/s
Iteration   2: 4736904.689 ops/s
Iteration   3: 4719979.395 ops/s
Iteration   4: 4640884.437 ops/s
Iteration   5: 4700110.088 ops/s
Iteration   6: 4699914.039 ops/s
Iteration   7: 4410103.917 ops/s
Iteration   8: 4808235.596 ops/s
Iteration   9: 4651332.509 ops/s
Iteration  10: 4494693.583 ops/s
Iteration  11: 4745326.949 ops/s
Iteration  12: 4620624.668 ops/s
Iteration  13: 4634934.040 ops/s
Iteration  14: 4849282.048 ops/s
Iteration  15: 4532424.483 ops/s
Iteration  16: 4586599.790 ops/s
Iteration  17: 4907680.252 ops/s
Iteration  18: 4476121.572 ops/s
Iteration  19: 4625384.372 ops/s
Iteration  20: 4798783.988 ops/s
Iteration  21: 4516712.775 ops/s
Iteration  22: 4810223.570 ops/s
Iteration  23: 4512158.775 ops/s
Iteration  24: 4775984.967 ops/s
Iteration  25: 4642822.903 ops/s
Iteration  26: 4529230.480 ops/s
Iteration  27: 4843960.131 ops/s
Iteration  28: 4642428.245 ops/s
Iteration  29: 4749002.771 ops/s
Iteration  30: 4847399.915 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_dispose":
  4670354.723 ±(99.9%) 86015.953 ops/s [Average]
  (min, avg, max) = (4410103.917, 4670354.723, 4907680.252), stdev = 128744.639
  CI (99.9%): [4584338.770, 4756370.676] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score       Error  Units
MaybeCountTest._Benchmark.benchmark_dispose  thrpt   30  4670354.723 ± 86015.953  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 956486.028 ops/s
# Warmup Iteration   2: 4402966.871 ops/s
# Warmup Iteration   3: 4895684.693 ops/s
# Warmup Iteration   4: 6103510.093 ops/s
# Warmup Iteration   5: 6184607.423 ops/s
# Warmup Iteration   6: 5879283.373 ops/s
# Warmup Iteration   7: 5882107.661 ops/s
# Warmup Iteration   8: 5992852.126 ops/s
# Warmup Iteration   9: 6127776.798 ops/s
# Warmup Iteration  10: 5945909.743 ops/s
# Warmup Iteration  11: 5870638.797 ops/s
# Warmup Iteration  12: 6320362.197 ops/s
# Warmup Iteration  13: 5800013.790 ops/s
# Warmup Iteration  14: 5914628.909 ops/s
# Warmup Iteration  15: 6031543.513 ops/s
# Warmup Iteration  16: 5983549.441 ops/s
# Warmup Iteration  17: 5952983.997 ops/s
# Warmup Iteration  18: 5937415.550 ops/s
# Warmup Iteration  19: 6182352.388 ops/s
# Warmup Iteration  20: 5753971.498 ops/s
# Warmup Iteration  21: 5918137.705 ops/s
# Warmup Iteration  22: 6108264.187 ops/s
# Warmup Iteration  23: 5963814.492 ops/s
# Warmup Iteration  24: 5835350.125 ops/s
# Warmup Iteration  25: 6047699.643 ops/s
# Warmup Iteration  26: 5989959.926 ops/s
# Warmup Iteration  27: 5844613.850 ops/s
# Warmup Iteration  28: 6085748.559 ops/s
# Warmup Iteration  29: 5939172.366 ops/s
# Warmup Iteration  30: 6032566.636 ops/s
Iteration   1: 5928251.034 ops/s
Iteration   2: 5862627.578 ops/s
Iteration   3: 6122609.186 ops/s
Iteration   4: 5897316.199 ops/s
Iteration   5: 6005719.309 ops/s
Iteration   6: 6229217.405 ops/s
Iteration   7: 6001216.976 ops/s
Iteration   8: 5838359.338 ops/s
Iteration   9: 6234409.425 ops/s
Iteration  10: 5878052.796 ops/s
Iteration  11: 6157510.115 ops/s
Iteration  12: 5871395.555 ops/s
Iteration  13: 5977565.084 ops/s
Iteration  14: 6117978.772 ops/s
Iteration  15: 5877276.993 ops/s
Iteration  16: 6107514.139 ops/s
Iteration  17: 5884832.763 ops/s
Iteration  18: 6011900.991 ops/s
Iteration  19: 4940915.069 ops/s
Iteration  20: 6171798.049 ops/s
Iteration  21: 5866568.577 ops/s
Iteration  22: 6083719.897 ops/s
Iteration  23: 5940054.342 ops/s
Iteration  24: 6140456.522 ops/s
Iteration  25: 5892827.871 ops/s
Iteration  26: 5867310.851 ops/s
Iteration  27: 6303225.078 ops/s
Iteration  28: 6070406.059 ops/s
Iteration  29: 5883896.918 ops/s
Iteration  30: 6034043.525 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementTest._Benchmark.benchmark_dispose":
  5973299.214 ±(99.9%) 157542.082 ops/s [Average]
  (min, avg, max) = (4940915.069, 5973299.214, 6303225.078), stdev = 235801.590
  CI (99.9%): [5815757.132, 6130841.296] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score        Error  Units
MaybeIgnoreElementTest._Benchmark.benchmark_dispose  thrpt   30  5973299.214 ± 157542.082  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_functionCrashUnsubscribes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_functionCrashUnsubscribes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 131919.831 ops/s
# Warmup Iteration   2: 474246.256 ops/s
# Warmup Iteration   3: 513690.384 ops/s
# Warmup Iteration   4: 511161.714 ops/s
# Warmup Iteration   5: 527687.671 ops/s
# Warmup Iteration   6: 494222.264 ops/s
# Warmup Iteration   7: 549440.346 ops/s
# Warmup Iteration   8: 547632.613 ops/s
# Warmup Iteration   9: 583431.652 ops/s
# Warmup Iteration  10: 539076.366 ops/s
# Warmup Iteration  11: 560832.270 ops/s
# Warmup Iteration  12: 573486.018 ops/s
# Warmup Iteration  13: 549624.380 ops/s
# Warmup Iteration  14: 567905.851 ops/s
# Warmup Iteration  15: 557655.969 ops/s
# Warmup Iteration  16: 552822.503 ops/s
# Warmup Iteration  17: 608228.921 ops/s
# Warmup Iteration  18: 565612.659 ops/s
# Warmup Iteration  19: 594390.433 ops/s
# Warmup Iteration  20: 575889.444 ops/s
# Warmup Iteration  21: 584496.124 ops/s
# Warmup Iteration  22: 602556.546 ops/s
# Warmup Iteration  23: 583760.949 ops/s
# Warmup Iteration  24: 581499.702 ops/s
# Warmup Iteration  25: 599454.869 ops/s
# Warmup Iteration  26: 571094.102 ops/s
# Warmup Iteration  27: 603860.054 ops/s
# Warmup Iteration  28: 575825.680 ops/s
# Warmup Iteration  29: 566087.855 ops/s
# Warmup Iteration  30: 579136.793 ops/s
Iteration   1: 603556.885 ops/s
Iteration   2: 567426.535 ops/s
Iteration   3: 582354.109 ops/s
Iteration   4: 586978.480 ops/s
Iteration   5: 577454.114 ops/s
Iteration   6: 607948.993 ops/s
Iteration   7: 565585.088 ops/s
Iteration   8: 569894.800 ops/s
Iteration   9: 590143.733 ops/s
Iteration  10: 570075.947 ops/s
Iteration  11: 597991.446 ops/s
Iteration  12: 587836.189 ops/s
Iteration  13: 567190.071 ops/s
Iteration  14: 562405.696 ops/s
Iteration  15: 598499.300 ops/s
Iteration  16: 572066.770 ops/s
Iteration  17: 598587.323 ops/s
Iteration  18: 598425.120 ops/s
Iteration  19: 574211.582 ops/s
Iteration  20: 609044.417 ops/s
Iteration  21: 567430.229 ops/s
Iteration  22: 575075.574 ops/s
Iteration  23: 588367.613 ops/s
Iteration  24: 563611.532 ops/s
Iteration  25: 580445.530 ops/s
Iteration  26: 607969.024 ops/s
Iteration  27: 581023.689 ops/s
Iteration  28: 569604.055 ops/s
Iteration  29: 604727.007 ops/s
Iteration  30: 563080.183 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_functionCrashUnsubscribes":
  582967.035 ±(99.9%) 10334.128 ops/s [Average]
  (min, avg, max) = (562405.696, 582967.035, 609044.417), stdev = 15467.638
  CI (99.9%): [572632.906, 593301.163] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableFilterTest._Benchmark.benchmark_functionCrashUnsubscribes  thrpt   30  582967.035 ± 10334.128  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementTest._Benchmark.benchmark_dispose2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementTest._Benchmark.benchmark_dispose2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 838007.479 ops/s
# Warmup Iteration   2: 3626507.461 ops/s
# Warmup Iteration   3: 5242789.914 ops/s
# Warmup Iteration   4: 5765681.867 ops/s
# Warmup Iteration   5: 6151261.375 ops/s
# Warmup Iteration   6: 6014331.692 ops/s
# Warmup Iteration   7: 6193900.727 ops/s
# Warmup Iteration   8: 6063092.428 ops/s
# Warmup Iteration   9: 5836684.292 ops/s
# Warmup Iteration  10: 6323398.310 ops/s
# Warmup Iteration  11: 6001883.085 ops/s
# Warmup Iteration  12: 5886925.946 ops/s
# Warmup Iteration  13: 6200080.469 ops/s
# Warmup Iteration  14: 5806287.128 ops/s
# Warmup Iteration  15: 6009680.030 ops/s
# Warmup Iteration  16: 6115801.141 ops/s
# Warmup Iteration  17: 5821361.130 ops/s
# Warmup Iteration  18: 6152176.910 ops/s
# Warmup Iteration  19: 6199123.538 ops/s
# Warmup Iteration  20: 6063578.225 ops/s
# Warmup Iteration  21: 6312122.324 ops/s
# Warmup Iteration  22: 5948975.351 ops/s
# Warmup Iteration  23: 6047384.120 ops/s
# Warmup Iteration  24: 5888830.968 ops/s
# Warmup Iteration  25: 6234832.463 ops/s
# Warmup Iteration  26: 5984972.591 ops/s
# Warmup Iteration  27: 6072327.757 ops/s
# Warmup Iteration  28: 6488034.166 ops/s
# Warmup Iteration  29: 6106204.683 ops/s
# Warmup Iteration  30: 5926143.386 ops/s
Iteration   1: 6204844.267 ops/s
Iteration   2: 6041910.229 ops/s
Iteration   3: 5915388.689 ops/s
Iteration   4: 6303474.529 ops/s
Iteration   5: 6049357.259 ops/s
Iteration   6: 6160105.738 ops/s
Iteration   7: 5973682.010 ops/s
Iteration   8: 6081011.277 ops/s
Iteration   9: 6238090.961 ops/s
Iteration  10: 5940530.110 ops/s
Iteration  11: 6197196.172 ops/s
Iteration  12: 5945431.083 ops/s
Iteration  13: 6170394.029 ops/s
Iteration  14: 4524611.005 ops/s
Iteration  15: 6073842.402 ops/s
Iteration  16: 6016403.061 ops/s
Iteration  17: 6046065.895 ops/s
Iteration  18: 5909455.494 ops/s
Iteration  19: 5925245.859 ops/s
Iteration  20: 5918967.338 ops/s
Iteration  21: 6107095.018 ops/s
Iteration  22: 6224042.398 ops/s
Iteration  23: 5885208.580 ops/s
Iteration  24: 6230406.875 ops/s
Iteration  25: 6149858.733 ops/s
Iteration  26: 6072561.820 ops/s
Iteration  27: 6121012.804 ops/s
Iteration  28: 6151460.042 ops/s
Iteration  29: 6268961.696 ops/s
Iteration  30: 5980178.223 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIgnoreElementTest._Benchmark.benchmark_dispose2":
  6027559.786 ±(99.9%) 206022.374 ops/s [Average]
  (min, avg, max) = (4524611.005, 6027559.786, 6303474.529), stdev = 308364.614
  CI (99.9%): [5821537.412, 6233582.161] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score        Error  Units
MaybeIgnoreElementTest._Benchmark.benchmark_dispose2  thrpt   30  6027559.786 ± 206022.374  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_crossCancelOnSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_crossCancelOnSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 269759.011 ops/s
# Warmup Iteration   2: 1447815.739 ops/s
# Warmup Iteration   3: 1484524.582 ops/s
# Warmup Iteration   4: 1826240.228 ops/s
# Warmup Iteration   5: 1870517.371 ops/s
# Warmup Iteration   6: 1845873.903 ops/s
# Warmup Iteration   7: 1891492.340 ops/s
# Warmup Iteration   8: 1868918.962 ops/s
# Warmup Iteration   9: 1875866.133 ops/s
# Warmup Iteration  10: 1897160.264 ops/s
# Warmup Iteration  11: 1831695.290 ops/s
# Warmup Iteration  12: 1831343.118 ops/s
# Warmup Iteration  13: 1916494.100 ops/s
# Warmup Iteration  14: 1817768.767 ops/s
# Warmup Iteration  15: 1945515.305 ops/s
# Warmup Iteration  16: 1831082.085 ops/s
# Warmup Iteration  17: 1900721.887 ops/s
# Warmup Iteration  18: 1832296.918 ops/s
# Warmup Iteration  19: 1935595.352 ops/s
# Warmup Iteration  20: 1823445.010 ops/s
# Warmup Iteration  21: 1830926.889 ops/s
# Warmup Iteration  22: 1903677.133 ops/s
# Warmup Iteration  23: 1915289.026 ops/s
# Warmup Iteration  24: 1852429.654 ops/s
# Warmup Iteration  25: 1859437.191 ops/s
# Warmup Iteration  26: 1912108.336 ops/s
# Warmup Iteration  27: 1829024.629 ops/s
# Warmup Iteration  28: 1909996.370 ops/s
# Warmup Iteration  29: 1862939.074 ops/s
# Warmup Iteration  30: 1902734.568 ops/s
Iteration   1: 1900724.590 ops/s
Iteration   2: 1860904.349 ops/s
Iteration   3: 1860292.383 ops/s
Iteration   4: 1890754.215 ops/s
Iteration   5: 1847634.668 ops/s
Iteration   6: 1884134.796 ops/s
Iteration   7: 1839431.470 ops/s
Iteration   8: 1915125.582 ops/s
Iteration   9: 1888564.345 ops/s
Iteration  10: 1845082.278 ops/s
Iteration  11: 1938012.005 ops/s
Iteration  12: 1825230.742 ops/s
Iteration  13: 1924713.966 ops/s
Iteration  14: 1929359.881 ops/s
Iteration  15: 1850353.536 ops/s
Iteration  16: 1903840.893 ops/s
Iteration  17: 1886664.468 ops/s
Iteration  18: 1832983.906 ops/s
Iteration  19: 1880453.549 ops/s
Iteration  20: 1903207.702 ops/s
Iteration  21: 1917544.503 ops/s
Iteration  22: 1844938.130 ops/s
Iteration  23: 1915141.639 ops/s
Iteration  24: 1790393.910 ops/s
Iteration  25: 1908242.760 ops/s
Iteration  26: 1832940.779 ops/s
Iteration  27: 1884135.131 ops/s
Iteration  28: 1853281.846 ops/s
Iteration  29: 1791095.068 ops/s
Iteration  30: 1909896.899 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_crossCancelOnSuccess":
  1875169.333 ±(99.9%) 26411.956 ops/s [Average]
  (min, avg, max) = (1790393.910, 1875169.333, 1938012.005), stdev = 39532.175
  CI (99.9%): [1848757.377, 1901581.289] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MaybeCacheTest._Benchmark.benchmark_crossCancelOnSuccess  thrpt   30  1875169.333 ± 26411.956  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 335020.628 ops/s
# Warmup Iteration   2: 1933718.302 ops/s
# Warmup Iteration   3: 2621614.277 ops/s
# Warmup Iteration   4: 3024741.652 ops/s
# Warmup Iteration   5: 2783138.296 ops/s
# Warmup Iteration   6: 2737820.846 ops/s
# Warmup Iteration   7: 3150313.967 ops/s
# Warmup Iteration   8: 3146682.680 ops/s
# Warmup Iteration   9: 2951055.470 ops/s
# Warmup Iteration  10: 3090475.741 ops/s
# Warmup Iteration  11: 2967428.484 ops/s
# Warmup Iteration  12: 3008517.428 ops/s
# Warmup Iteration  13: 3073337.636 ops/s
# Warmup Iteration  14: 3016811.836 ops/s
# Warmup Iteration  15: 3119628.328 ops/s
# Warmup Iteration  16: 3016061.742 ops/s
# Warmup Iteration  17: 2998826.645 ops/s
# Warmup Iteration  18: 3131041.467 ops/s
# Warmup Iteration  19: 3022801.308 ops/s
# Warmup Iteration  20: 3040400.048 ops/s
# Warmup Iteration  21: 2987745.130 ops/s
# Warmup Iteration  22: 3036662.826 ops/s
# Warmup Iteration  23: 3110546.952 ops/s
# Warmup Iteration  24: 3145921.419 ops/s
# Warmup Iteration  25: 3004947.125 ops/s
# Warmup Iteration  26: 3124074.624 ops/s
# Warmup Iteration  27: 3022108.495 ops/s
# Warmup Iteration  28: 2943612.035 ops/s
# Warmup Iteration  29: 3079754.719 ops/s
# Warmup Iteration  30: 3124805.476 ops/s
Iteration   1: 2980467.711 ops/s
Iteration   2: 3089795.249 ops/s
Iteration   3: 2992436.263 ops/s
Iteration   4: 3113562.728 ops/s
Iteration   5: 3129203.420 ops/s
Iteration   6: 2945357.561 ops/s
Iteration   7: 3103202.447 ops/s
Iteration   8: 2979533.367 ops/s
Iteration   9: 2500354.472 ops/s
Iteration  10: 3133777.619 ops/s
Iteration  11: 2988588.745 ops/s
Iteration  12: 3122955.130 ops/s
Iteration  13: 2947661.810 ops/s
Iteration  14: 2984353.478 ops/s
Iteration  15: 3098653.480 ops/s
Iteration  16: 2957864.463 ops/s
Iteration  17: 3016001.679 ops/s
Iteration  18: 3108902.978 ops/s
Iteration  19: 3006323.381 ops/s
Iteration  20: 3098934.642 ops/s
Iteration  21: 3009385.634 ops/s
Iteration  22: 3029704.564 ops/s
Iteration  23: 3080441.010 ops/s
Iteration  24: 3045541.480 ops/s
Iteration  25: 3108825.297 ops/s
Iteration  26: 3011125.565 ops/s
Iteration  27: 3174324.031 ops/s
Iteration  28: 3055076.637 ops/s
Iteration  29: 2993627.941 ops/s
Iteration  30: 2992188.460 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_dispose":
  3026605.708 ±(99.9%) 78968.763 ops/s [Average]
  (min, avg, max) = (2500354.472, 3026605.708, 3174324.031), stdev = 118196.736
  CI (99.9%): [2947636.945, 3105574.471] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
MaybeTimeoutTest._Benchmark.benchmark_dispose  thrpt   30  3026605.708 ± 78968.763  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhileTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhileTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.880 ops/s
# Warmup Iteration   2: 80976.744 ops/s
# Warmup Iteration   3: 233399.256 ops/s
# Warmup Iteration   4: 472977.141 ops/s
# Warmup Iteration   5: 636248.476 ops/s
# Warmup Iteration   6: 951350.912 ops/s
# Warmup Iteration   7: 908695.768 ops/s
# Warmup Iteration   8: 876731.540 ops/s
# Warmup Iteration   9: 974129.988 ops/s
# Warmup Iteration  10: 1033578.910 ops/s
# Warmup Iteration  11: 1005880.010 ops/s
# Warmup Iteration  12: 1014651.576 ops/s
# Warmup Iteration  13: 1005712.433 ops/s
# Warmup Iteration  14: 1017534.570 ops/s
# Warmup Iteration  15: 1031910.486 ops/s
# Warmup Iteration  16: 1012385.341 ops/s
# Warmup Iteration  17: 1043616.428 ops/s
# Warmup Iteration  18: 987707.042 ops/s
# Warmup Iteration  19: 991076.672 ops/s
# Warmup Iteration  20: 1025880.449 ops/s
# Warmup Iteration  21: 986464.934 ops/s
# Warmup Iteration  22: 1062400.582 ops/s
# Warmup Iteration  23: 995509.628 ops/s
# Warmup Iteration  24: 990862.397 ops/s
# Warmup Iteration  25: 1050586.954 ops/s
# Warmup Iteration  26: 987933.180 ops/s
# Warmup Iteration  27: 1008260.976 ops/s
# Warmup Iteration  28: 1006794.737 ops/s
# Warmup Iteration  29: 1002525.728 ops/s
# Warmup Iteration  30: 1023028.479 ops/s
Iteration   1: 999668.219 ops/s
Iteration   2: 1003925.224 ops/s
Iteration   3: 1065126.115 ops/s
Iteration   4: 1032365.231 ops/s
Iteration   5: 985159.684 ops/s
Iteration   6: 1041127.574 ops/s
Iteration   7: 1026230.885 ops/s
Iteration   8: 998511.722 ops/s
Iteration   9: 1008074.699 ops/s
Iteration  10: 1058805.553 ops/s
Iteration  11: 999450.342 ops/s
Iteration  12: 1026767.708 ops/s
Iteration  13: 993022.600 ops/s
Iteration  14: 1003564.279 ops/s
Iteration  15: 1030006.944 ops/s
Iteration  16: 1012089.434 ops/s
Iteration  17: 1020614.458 ops/s
Iteration  18: 1008373.474 ops/s
Iteration  19: 1012949.456 ops/s
Iteration  20: 1019251.969 ops/s
Iteration  21: 1003168.317 ops/s
Iteration  22: 1058206.127 ops/s
Iteration  23: 1042109.239 ops/s
Iteration  24: 976972.640 ops/s
Iteration  25: 1046935.395 ops/s
Iteration  26: 740092.765 ops/s
Iteration  27: 961370.653 ops/s
Iteration  28: 1002483.280 ops/s
Iteration  29: 1025973.169 ops/s
Iteration  30: 1024959.764 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSkipWhileTest._Benchmark.benchmark_dispose":
  1007578.564 ±(99.9%) 37388.184 ops/s [Average]
  (min, avg, max) = (740092.765, 1007578.564, 1065126.115), stdev = 55960.878
  CI (99.9%): [970190.380, 1044966.748] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
ObservableSkipWhileTest._Benchmark.benchmark_dispose  thrpt   30  1007578.564 ± 37388.184  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_fallbackError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_fallbackError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 66380.249 ops/s
# Warmup Iteration   2: 305974.895 ops/s
# Warmup Iteration   3: 523631.948 ops/s
# Warmup Iteration   4: 604585.459 ops/s
# Warmup Iteration   5: 584564.109 ops/s
# Warmup Iteration   6: 587985.828 ops/s
# Warmup Iteration   7: 596747.138 ops/s
# Warmup Iteration   8: 553198.815 ops/s
# Warmup Iteration   9: 598727.682 ops/s
# Warmup Iteration  10: 587017.760 ops/s
# Warmup Iteration  11: 580739.093 ops/s
# Warmup Iteration  12: 563943.333 ops/s
# Warmup Iteration  13: 597902.559 ops/s
# Warmup Iteration  14: 585247.626 ops/s
# Warmup Iteration  15: 577041.973 ops/s
# Warmup Iteration  16: 618638.857 ops/s
# Warmup Iteration  17: 581752.222 ops/s
# Warmup Iteration  18: 631932.259 ops/s
# Warmup Iteration  19: 610721.209 ops/s
# Warmup Iteration  20: 620902.672 ops/s
# Warmup Iteration  21: 617920.605 ops/s
# Warmup Iteration  22: 620030.558 ops/s
# Warmup Iteration  23: 602851.052 ops/s
# Warmup Iteration  24: 588369.504 ops/s
# Warmup Iteration  25: 627314.521 ops/s
# Warmup Iteration  26: 584388.333 ops/s
# Warmup Iteration  27: 636916.122 ops/s
# Warmup Iteration  28: 613485.035 ops/s
# Warmup Iteration  29: 606638.096 ops/s
# Warmup Iteration  30: 641559.196 ops/s
Iteration   1: 569068.515 ops/s
Iteration   2: 583085.915 ops/s
Iteration   3: 617641.830 ops/s
Iteration   4: 620812.341 ops/s
Iteration   5: 624622.149 ops/s
Iteration   6: 606991.552 ops/s
Iteration   7: 635804.836 ops/s
Iteration   8: 620048.568 ops/s
Iteration   9: 629965.349 ops/s
Iteration  10: 612013.966 ops/s
Iteration  11: 637607.449 ops/s
Iteration  12: 627393.673 ops/s
Iteration  13: 608198.191 ops/s
Iteration  14: 603760.898 ops/s
Iteration  15: 604299.441 ops/s
Iteration  16: 626453.991 ops/s
Iteration  17: 591872.355 ops/s
Iteration  18: 643352.368 ops/s
Iteration  19: 607908.956 ops/s
Iteration  20: 639223.752 ops/s
Iteration  21: 637061.981 ops/s
Iteration  22: 598178.861 ops/s
Iteration  23: 641553.351 ops/s
Iteration  24: 596853.454 ops/s
Iteration  25: 643048.434 ops/s
Iteration  26: 598775.024 ops/s
Iteration  27: 627009.405 ops/s
Iteration  28: 614026.784 ops/s
Iteration  29: 618486.732 ops/s
Iteration  30: 625023.936 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_fallbackError":
  617004.802 ±(99.9%) 12448.008 ops/s [Average]
  (min, avg, max) = (569068.515, 617004.802, 643352.368), stdev = 18631.594
  CI (99.9%): [604556.793, 629452.810] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
MaybeTimeoutPublisherTest._Benchmark.benchmark_fallbackError  thrpt   30  617004.802 ± 12448.008  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 998237.663 ops/s
# Warmup Iteration   2: 3384770.260 ops/s
# Warmup Iteration   3: 3744588.755 ops/s
# Warmup Iteration   4: 4286717.283 ops/s
# Warmup Iteration   5: 4392518.916 ops/s
# Warmup Iteration   6: 4420647.118 ops/s
# Warmup Iteration   7: 4484056.808 ops/s
# Warmup Iteration   8: 4434337.379 ops/s
# Warmup Iteration   9: 4479967.828 ops/s
# Warmup Iteration  10: 4386190.293 ops/s
# Warmup Iteration  11: 4278438.811 ops/s
# Warmup Iteration  12: 4607171.412 ops/s
# Warmup Iteration  13: 4326437.446 ops/s
# Warmup Iteration  14: 4587604.450 ops/s
# Warmup Iteration  15: 4532342.186 ops/s
# Warmup Iteration  16: 4570453.661 ops/s
# Warmup Iteration  17: 4276122.297 ops/s
# Warmup Iteration  18: 4467055.528 ops/s
# Warmup Iteration  19: 4193479.679 ops/s
# Warmup Iteration  20: 4619652.219 ops/s
# Warmup Iteration  21: 4239606.083 ops/s
# Warmup Iteration  22: 4328086.179 ops/s
# Warmup Iteration  23: 4574869.706 ops/s
# Warmup Iteration  24: 4182389.307 ops/s
# Warmup Iteration  25: 4359064.304 ops/s
# Warmup Iteration  26: 4488384.241 ops/s
# Warmup Iteration  27: 4348584.645 ops/s
# Warmup Iteration  28: 4401311.378 ops/s
# Warmup Iteration  29: 4559265.185 ops/s
# Warmup Iteration  30: 3990692.546 ops/s
Iteration   1: 4125359.651 ops/s
Iteration   2: 4359239.318 ops/s
Iteration   3: 4426564.675 ops/s
Iteration   4: 4504008.288 ops/s
Iteration   5: 4359925.725 ops/s
Iteration   6: 4386437.182 ops/s
Iteration   7: 4323405.184 ops/s
Iteration   8: 4421387.371 ops/s
Iteration   9: 4499026.115 ops/s
Iteration  10: 4450773.976 ops/s
Iteration  11: 4546952.672 ops/s
Iteration  12: 4317902.310 ops/s
Iteration  13: 4449963.898 ops/s
Iteration  14: 4328359.355 ops/s
Iteration  15: 4541458.803 ops/s
Iteration  16: 4445860.514 ops/s
Iteration  17: 4353928.884 ops/s
Iteration  18: 4430562.322 ops/s
Iteration  19: 4411976.640 ops/s
Iteration  20: 4449104.746 ops/s
Iteration  21: 4404048.653 ops/s
Iteration  22: 4363538.142 ops/s
Iteration  23: 4658564.659 ops/s
Iteration  24: 4262508.297 ops/s
Iteration  25: 4386752.712 ops/s
Iteration  26: 4660661.293 ops/s
Iteration  27: 4332718.063 ops/s
Iteration  28: 4534640.877 ops/s
Iteration  29: 4564252.242 ops/s
Iteration  30: 4336886.494 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_disposed":
  4421225.635 ±(99.9%) 75274.714 ops/s [Average]
  (min, avg, max) = (4125359.651, 4421225.635, 4660661.293), stdev = 112667.656
  CI (99.9%): [4345950.922, 4496500.349] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_disposed  thrpt   30  4421225.635 ± 75274.714  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 54120.294 ops/s
# Warmup Iteration   2: 464620.482 ops/s
# Warmup Iteration   3: 547526.307 ops/s
# Warmup Iteration   4: 582652.509 ops/s
# Warmup Iteration   5: 575263.844 ops/s
# Warmup Iteration   6: 569001.322 ops/s
# Warmup Iteration   7: 535638.249 ops/s
# Warmup Iteration   8: 598382.489 ops/s
# Warmup Iteration   9: 606947.563 ops/s
# Warmup Iteration  10: 576570.850 ops/s
# Warmup Iteration  11: 581053.497 ops/s
# Warmup Iteration  12: 594148.110 ops/s
# Warmup Iteration  13: 605491.011 ops/s
# Warmup Iteration  14: 598514.383 ops/s
# Warmup Iteration  15: 572132.601 ops/s
# Warmup Iteration  16: 586035.126 ops/s
# Warmup Iteration  17: 642405.764 ops/s
# Warmup Iteration  18: 605943.238 ops/s
# Warmup Iteration  19: 636860.046 ops/s
# Warmup Iteration  20: 598518.019 ops/s
# Warmup Iteration  21: 624710.553 ops/s
# Warmup Iteration  22: 640088.809 ops/s
# Warmup Iteration  23: 602188.161 ops/s
# Warmup Iteration  24: 634265.776 ops/s
# Warmup Iteration  25: 630677.467 ops/s
# Warmup Iteration  26: 608506.699 ops/s
# Warmup Iteration  27: 618509.898 ops/s
# Warmup Iteration  28: 594982.182 ops/s
# Warmup Iteration  29: 647816.586 ops/s
# Warmup Iteration  30: 609815.438 ops/s
Iteration   1: 627488.821 ops/s
Iteration   2: 621894.836 ops/s
Iteration   3: 622316.378 ops/s
Iteration   4: 625047.690 ops/s
Iteration   5: 644596.391 ops/s
Iteration   6: 602703.066 ops/s
Iteration   7: 651960.271 ops/s
Iteration   8: 597048.837 ops/s
Iteration   9: 636085.158 ops/s
Iteration  10: 617042.580 ops/s
Iteration  11: 619534.722 ops/s
Iteration  12: 642384.120 ops/s
Iteration  13: 607237.854 ops/s
Iteration  14: 633884.376 ops/s
Iteration  15: 614017.187 ops/s
Iteration  16: 605563.322 ops/s
Iteration  17: 633527.354 ops/s
Iteration  18: 649563.739 ops/s
Iteration  19: 604539.394 ops/s
Iteration  20: 632380.871 ops/s
Iteration  21: 597817.590 ops/s
Iteration  22: 636837.406 ops/s
Iteration  23: 651939.079 ops/s
Iteration  24: 603612.330 ops/s
Iteration  25: 648339.568 ops/s
Iteration  26: 571246.884 ops/s
Iteration  27: 621880.256 ops/s
Iteration  28: 621851.202 ops/s
Iteration  29: 625227.454 ops/s
Iteration  30: 622826.536 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull":
  623013.176 ±(99.9%) 12636.990 ops/s [Average]
  (min, avg, max) = (571246.884, 623013.176, 651960.271), stdev = 18914.453
  CI (99.9%): [610376.186, 635650.166] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_mapperReturnsNull  thrpt   30  623013.176 ± 12636.990  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 474211.048 ops/s
# Warmup Iteration   2: 2393843.620 ops/s
# Warmup Iteration   3: 3161864.625 ops/s
# Warmup Iteration   4: 2651216.585 ops/s
# Warmup Iteration   5: 2883119.830 ops/s
# Warmup Iteration   6: 3212454.481 ops/s
# Warmup Iteration   7: 3278972.069 ops/s
# Warmup Iteration   8: 3217740.462 ops/s
# Warmup Iteration   9: 3195062.316 ops/s
# Warmup Iteration  10: 3317246.725 ops/s
# Warmup Iteration  11: 3132876.453 ops/s
# Warmup Iteration  12: 3306301.787 ops/s
# Warmup Iteration  13: 3437352.615 ops/s
# Warmup Iteration  14: 3160161.348 ops/s
# Warmup Iteration  15: 3282261.770 ops/s
# Warmup Iteration  16: 3221129.252 ops/s
# Warmup Iteration  17: 3278408.484 ops/s
# Warmup Iteration  18: 3268089.172 ops/s
# Warmup Iteration  19: 3188447.487 ops/s
# Warmup Iteration  20: 3377162.994 ops/s
# Warmup Iteration  21: 3293482.527 ops/s
# Warmup Iteration  22: 3209608.791 ops/s
# Warmup Iteration  23: 3329174.044 ops/s
# Warmup Iteration  24: 3209456.876 ops/s
# Warmup Iteration  25: 2618280.145 ops/s
# Warmup Iteration  26: 3342647.415 ops/s
# Warmup Iteration  27: 3191267.646 ops/s
# Warmup Iteration  28: 3315441.874 ops/s
# Warmup Iteration  29: 3195650.313 ops/s
# Warmup Iteration  30: 3194350.741 ops/s
Iteration   1: 3247076.648 ops/s
Iteration   2: 3165986.294 ops/s
Iteration   3: 3350343.109 ops/s
Iteration   4: 3276197.853 ops/s
Iteration   5: 3405864.049 ops/s
Iteration   6: 3127577.855 ops/s
Iteration   7: 3321232.351 ops/s
Iteration   8: 3143563.959 ops/s
Iteration   9: 3139949.674 ops/s
Iteration  10: 3294796.733 ops/s
Iteration  11: 3198595.486 ops/s
Iteration  12: 3301192.789 ops/s
Iteration  13: 3166592.427 ops/s
Iteration  14: 3305022.979 ops/s
Iteration  15: 3187143.199 ops/s
Iteration  16: 3176420.571 ops/s
Iteration  17: 3366885.729 ops/s
Iteration  18: 3211982.351 ops/s
Iteration  19: 3347875.627 ops/s
Iteration  20: 3147058.604 ops/s
Iteration  21: 3211683.209 ops/s
Iteration  22: 3353484.919 ops/s
Iteration  23: 3252177.793 ops/s
Iteration  24: 3252642.336 ops/s
Iteration  25: 3238758.525 ops/s
Iteration  26: 3320790.878 ops/s
Iteration  27: 3355328.506 ops/s
Iteration  28: 3255566.893 ops/s
Iteration  29: 3203857.869 ops/s
Iteration  30: 3177351.543 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_dispose":
  3250100.025 ±(99.9%) 53128.151 ops/s [Average]
  (min, avg, max) = (3127577.855, 3250100.025, 3405864.049), stdev = 79519.722
  CI (99.9%): [3196971.874, 3303228.177] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeTimeoutPublisherTest._Benchmark.benchmark_dispose  thrpt   30  3250100.025 ± 53128.151  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 513016.897 ops/s
# Warmup Iteration   2: 2348093.492 ops/s
# Warmup Iteration   3: 2618981.367 ops/s
# Warmup Iteration   4: 3125934.499 ops/s
# Warmup Iteration   5: 3140211.144 ops/s
# Warmup Iteration   6: 3122553.485 ops/s
# Warmup Iteration   7: 3242294.072 ops/s
# Warmup Iteration   8: 2984180.759 ops/s
# Warmup Iteration   9: 3126585.257 ops/s
# Warmup Iteration  10: 3157520.278 ops/s
# Warmup Iteration  11: 3193642.910 ops/s
# Warmup Iteration  12: 3017644.746 ops/s
# Warmup Iteration  13: 3139954.359 ops/s
# Warmup Iteration  14: 3057673.279 ops/s
# Warmup Iteration  15: 3218588.249 ops/s
# Warmup Iteration  16: 3136464.953 ops/s
# Warmup Iteration  17: 3037733.501 ops/s
# Warmup Iteration  18: 3207717.511 ops/s
# Warmup Iteration  19: 3040871.240 ops/s
# Warmup Iteration  20: 3171213.683 ops/s
# Warmup Iteration  21: 3093189.186 ops/s
# Warmup Iteration  22: 3132759.537 ops/s
# Warmup Iteration  23: 3252233.342 ops/s
# Warmup Iteration  24: 3016633.825 ops/s
# Warmup Iteration  25: 3106698.894 ops/s
# Warmup Iteration  26: 3113624.521 ops/s
# Warmup Iteration  27: 3148027.271 ops/s
# Warmup Iteration  28: 3120108.189 ops/s
# Warmup Iteration  29: 3121736.516 ops/s
# Warmup Iteration  30: 3175004.359 ops/s
Iteration   1: 3003806.414 ops/s
Iteration   2: 3044980.465 ops/s
Iteration   3: 3165707.501 ops/s
Iteration   4: 3038353.144 ops/s
Iteration   5: 3161684.605 ops/s
Iteration   6: 3206405.049 ops/s
Iteration   7: 3070743.089 ops/s
Iteration   8: 3165576.145 ops/s
Iteration   9: 3090911.482 ops/s
Iteration  10: 3107925.174 ops/s
Iteration  11: 3144169.712 ops/s
Iteration  12: 3165327.078 ops/s
Iteration  13: 3111219.384 ops/s
Iteration  14: 3006761.023 ops/s
Iteration  15: 3194362.169 ops/s
Iteration  16: 3087844.223 ops/s
Iteration  17: 3088880.459 ops/s
Iteration  18: 3214909.822 ops/s
Iteration  19: 2990848.075 ops/s
Iteration  20: 3251264.700 ops/s
Iteration  21: 3125984.749 ops/s
Iteration  22: 3123598.506 ops/s
Iteration  23: 3068880.260 ops/s
Iteration  24: 3146244.906 ops/s
Iteration  25: 3155448.568 ops/s
Iteration  26: 3031626.227 ops/s
Iteration  27: 3203413.075 ops/s
Iteration  28: 3130409.978 ops/s
Iteration  29: 3096538.996 ops/s
Iteration  30: 3078379.845 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherCompletes":
  3115740.161 ±(99.9%) 44697.033 ops/s [Average]
  (min, avg, max) = (2990848.075, 3115740.161, 3251264.700), stdev = 66900.420
  CI (99.9%): [3071043.128, 3160437.194] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherCompletes  thrpt   30  3115740.161 ± 44697.033  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 108674.841 ops/s
# Warmup Iteration   2: 447110.986 ops/s
# Warmup Iteration   3: 579516.201 ops/s
# Warmup Iteration   4: 655095.474 ops/s
# Warmup Iteration   5: 514004.284 ops/s
# Warmup Iteration   6: 649857.165 ops/s
# Warmup Iteration   7: 628046.174 ops/s
# Warmup Iteration   8: 653649.688 ops/s
# Warmup Iteration   9: 631331.400 ops/s
# Warmup Iteration  10: 634163.816 ops/s
# Warmup Iteration  11: 646174.788 ops/s
# Warmup Iteration  12: 621098.040 ops/s
# Warmup Iteration  13: 653837.814 ops/s
# Warmup Iteration  14: 642185.972 ops/s
# Warmup Iteration  15: 637160.880 ops/s
# Warmup Iteration  16: 626402.232 ops/s
# Warmup Iteration  17: 624976.621 ops/s
# Warmup Iteration  18: 661683.500 ops/s
# Warmup Iteration  19: 609994.417 ops/s
# Warmup Iteration  20: 526201.652 ops/s
# Warmup Iteration  21: 624615.089 ops/s
# Warmup Iteration  22: 641407.707 ops/s
# Warmup Iteration  23: 635926.783 ops/s
# Warmup Iteration  24: 611186.874 ops/s
# Warmup Iteration  25: 641553.066 ops/s
# Warmup Iteration  26: 620000.579 ops/s
# Warmup Iteration  27: 623100.580 ops/s
# Warmup Iteration  28: 634900.477 ops/s
# Warmup Iteration  29: 605278.724 ops/s
# Warmup Iteration  30: 631187.439 ops/s
Iteration   1: 642703.604 ops/s
Iteration   2: 616924.267 ops/s
Iteration   3: 642011.226 ops/s
Iteration   4: 662193.624 ops/s
Iteration   5: 602554.191 ops/s
Iteration   6: 631896.768 ops/s
Iteration   7: 628947.358 ops/s
Iteration   8: 634347.381 ops/s
Iteration   9: 656585.406 ops/s
Iteration  10: 607967.399 ops/s
Iteration  11: 647206.311 ops/s
Iteration  12: 626200.577 ops/s
Iteration  13: 616752.170 ops/s
Iteration  14: 621813.598 ops/s
Iteration  15: 616095.104 ops/s
Iteration  16: 647145.570 ops/s
Iteration  17: 616663.979 ops/s
Iteration  18: 643971.021 ops/s
Iteration  19: 620727.920 ops/s
Iteration  20: 644225.745 ops/s
Iteration  21: 619230.647 ops/s
Iteration  22: 622785.326 ops/s
Iteration  23: 647598.199 ops/s
Iteration  24: 601503.980 ops/s
Iteration  25: 642730.965 ops/s
Iteration  26: 621802.743 ops/s
Iteration  27: 622104.742 ops/s
Iteration  28: 639335.115 ops/s
Iteration  29: 618432.005 ops/s
Iteration  30: 648465.742 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_normal":
  630364.089 ±(99.9%) 10616.983 ops/s [Average]
  (min, avg, max) = (601503.980, 630364.089, 662193.624), stdev = 15891.001
  CI (99.9%): [619747.106, 640981.072] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
FlowableThrottleLatestTest._Benchmark.benchmark_normal  thrpt   30  630364.089 ± 10616.983  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalDrop$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalDrop

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 404079.394 ops/s
# Warmup Iteration   2: 1235182.682 ops/s
# Warmup Iteration   3: 1685458.031 ops/s
# Warmup Iteration   4: 2023574.237 ops/s
# Warmup Iteration   5: 2220683.739 ops/s
# Warmup Iteration   6: 2031823.591 ops/s
# Warmup Iteration   7: 2170797.120 ops/s
# Warmup Iteration   8: 2068909.309 ops/s
# Warmup Iteration   9: 2167655.816 ops/s
# Warmup Iteration  10: 2052055.007 ops/s
# Warmup Iteration  11: 2068518.108 ops/s
# Warmup Iteration  12: 2175662.868 ops/s
# Warmup Iteration  13: 2033912.235 ops/s
# Warmup Iteration  14: 2172838.500 ops/s
# Warmup Iteration  15: 2101325.699 ops/s
# Warmup Iteration  16: 2184664.784 ops/s
# Warmup Iteration  17: 2041845.160 ops/s
# Warmup Iteration  18: 2093768.166 ops/s
# Warmup Iteration  19: 2205735.011 ops/s
# Warmup Iteration  20: 2074977.721 ops/s
# Warmup Iteration  21: 2181210.084 ops/s
# Warmup Iteration  22: 2080801.967 ops/s
# Warmup Iteration  23: 2116606.134 ops/s
# Warmup Iteration  24: 2075107.970 ops/s
# Warmup Iteration  25: 2159515.288 ops/s
# Warmup Iteration  26: 2110082.139 ops/s
# Warmup Iteration  27: 2167466.832 ops/s
# Warmup Iteration  28: 2092730.769 ops/s
# Warmup Iteration  29: 2166138.891 ops/s
# Warmup Iteration  30: 2119296.425 ops/s
Iteration   1: 2015013.506 ops/s
Iteration   2: 2197754.875 ops/s
Iteration   3: 2131665.800 ops/s
Iteration   4: 2061260.895 ops/s
Iteration   5: 2213734.802 ops/s
Iteration   6: 2136596.442 ops/s
Iteration   7: 2123401.035 ops/s
Iteration   8: 2159642.730 ops/s
Iteration   9: 2024500.260 ops/s
Iteration  10: 2170668.703 ops/s
Iteration  11: 2114326.746 ops/s
Iteration  12: 2115743.065 ops/s
Iteration  13: 2188953.444 ops/s
Iteration  14: 2052969.138 ops/s
Iteration  15: 2113333.985 ops/s
Iteration  16: 2133758.849 ops/s
Iteration  17: 2132257.458 ops/s
Iteration  18: 2193946.608 ops/s
Iteration  19: 2062700.069 ops/s
Iteration  20: 2213937.030 ops/s
Iteration  21: 2058932.089 ops/s
Iteration  22: 2099985.234 ops/s
Iteration  23: 2205888.245 ops/s
Iteration  24: 2096400.042 ops/s
Iteration  25: 2135383.375 ops/s
Iteration  26: 2023866.677 ops/s
Iteration  27: 2120517.118 ops/s
Iteration  28: 2117559.647 ops/s
Iteration  29: 2076589.089 ops/s
Iteration  30: 2128838.243 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_normalDrop":
  2120670.840 ±(99.9%) 37985.396 ops/s [Average]
  (min, avg, max) = (2015013.506, 2120670.840, 2213937.030), stdev = 56854.757
  CI (99.9%): [2082685.444, 2158656.236] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_normalDrop  thrpt   30  2120670.840 ± 37985.396  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeNoCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeNoCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 242668.572 ops/s
# Warmup Iteration   2: 1126891.195 ops/s
# Warmup Iteration   3: 1904522.921 ops/s
# Warmup Iteration   4: 1770444.299 ops/s
# Warmup Iteration   5: 1620334.756 ops/s
# Warmup Iteration   6: 1788187.025 ops/s
# Warmup Iteration   7: 1787589.765 ops/s
# Warmup Iteration   8: 1860844.841 ops/s
# Warmup Iteration   9: 1840976.254 ops/s
# Warmup Iteration  10: 1835962.392 ops/s
# Warmup Iteration  11: 1802308.357 ops/s
# Warmup Iteration  12: 1790920.050 ops/s
# Warmup Iteration  13: 1882882.033 ops/s
# Warmup Iteration  14: 1793397.449 ops/s
# Warmup Iteration  15: 1503054.388 ops/s
# Warmup Iteration  16: 1786394.419 ops/s
# Warmup Iteration  17: 1903772.053 ops/s
# Warmup Iteration  18: 1919364.781 ops/s
# Warmup Iteration  19: 1783756.158 ops/s
# Warmup Iteration  20: 1819052.236 ops/s
# Warmup Iteration  21: 1793364.101 ops/s
# Warmup Iteration  22: 1811635.609 ops/s
# Warmup Iteration  23: 1888452.102 ops/s
# Warmup Iteration  24: 1781707.185 ops/s
# Warmup Iteration  25: 1803081.928 ops/s
# Warmup Iteration  26: 1877525.232 ops/s
# Warmup Iteration  27: 1772332.414 ops/s
# Warmup Iteration  28: 1857927.876 ops/s
# Warmup Iteration  29: 1874721.575 ops/s
# Warmup Iteration  30: 1809529.809 ops/s
Iteration   1: 1845820.053 ops/s
Iteration   2: 1840207.238 ops/s
Iteration   3: 1844361.061 ops/s
Iteration   4: 1838739.283 ops/s
Iteration   5: 1801114.844 ops/s
Iteration   6: 1907042.089 ops/s
Iteration   7: 1780195.495 ops/s
Iteration   8: 1825627.755 ops/s
Iteration   9: 1912789.870 ops/s
Iteration  10: 1776324.112 ops/s
Iteration  11: 1860576.020 ops/s
Iteration  12: 1826023.124 ops/s
Iteration  13: 1873704.944 ops/s
Iteration  14: 1801536.916 ops/s
Iteration  15: 1877100.807 ops/s
Iteration  16: 1805012.557 ops/s
Iteration  17: 1873517.500 ops/s
Iteration  18: 1778452.195 ops/s
Iteration  19: 1884241.444 ops/s
Iteration  20: 1771708.426 ops/s
Iteration  21: 1879695.898 ops/s
Iteration  22: 1879799.261 ops/s
Iteration  23: 1767743.865 ops/s
Iteration  24: 1882601.307 ops/s
Iteration  25: 1896614.245 ops/s
Iteration  26: 1815770.126 ops/s
Iteration  27: 1841945.281 ops/s
Iteration  28: 1920539.592 ops/s
Iteration  29: 1880780.180 ops/s
Iteration  30: 1777512.095 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribeNoCancel":
  1842236.586 ±(99.9%) 31006.590 ops/s [Average]
  (min, avg, max) = (1767743.865, 1842236.586, 1920539.592), stdev = 46409.207
  CI (99.9%): [1811229.996, 1873243.176] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribeNoCancel  thrpt   30  1842236.586 ± 31006.590  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_completeInline$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_completeInline

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 251297.782 ops/s
# Warmup Iteration   2: 1294084.858 ops/s
# Warmup Iteration   3: 1712213.738 ops/s
# Warmup Iteration   4: 1479217.762 ops/s
# Warmup Iteration   5: 1768721.280 ops/s
# Warmup Iteration   6: 1717375.034 ops/s
# Warmup Iteration   7: 1780384.101 ops/s
# Warmup Iteration   8: 1785337.152 ops/s
# Warmup Iteration   9: 1677765.622 ops/s
# Warmup Iteration  10: 1795262.480 ops/s
# Warmup Iteration  11: 1663850.240 ops/s
# Warmup Iteration  12: 1714314.341 ops/s
# Warmup Iteration  13: 1772488.298 ops/s
# Warmup Iteration  14: 1721498.809 ops/s
# Warmup Iteration  15: 1757287.044 ops/s
# Warmup Iteration  16: 1714515.903 ops/s
# Warmup Iteration  17: 1796843.359 ops/s
# Warmup Iteration  18: 1701059.955 ops/s
# Warmup Iteration  19: 1724511.115 ops/s
# Warmup Iteration  20: 1755542.190 ops/s
# Warmup Iteration  21: 1706686.409 ops/s
# Warmup Iteration  22: 1808767.142 ops/s
# Warmup Iteration  23: 1759070.558 ops/s
# Warmup Iteration  24: 1779925.058 ops/s
# Warmup Iteration  25: 1674676.331 ops/s
# Warmup Iteration  26: 1753857.234 ops/s
# Warmup Iteration  27: 1714932.190 ops/s
# Warmup Iteration  28: 1762455.085 ops/s
# Warmup Iteration  29: 1714031.029 ops/s
# Warmup Iteration  30: 1760185.393 ops/s
Iteration   1: 1819587.166 ops/s
Iteration   2: 1772054.137 ops/s
Iteration   3: 1728011.082 ops/s
Iteration   4: 1790387.162 ops/s
Iteration   5: 1801599.553 ops/s
Iteration   6: 1702761.553 ops/s
Iteration   7: 1776348.943 ops/s
Iteration   8: 1706534.381 ops/s
Iteration   9: 1731502.141 ops/s
Iteration  10: 1787009.454 ops/s
Iteration  11: 1691680.740 ops/s
Iteration  12: 1813800.981 ops/s
Iteration  13: 1722751.509 ops/s
Iteration  14: 1689034.190 ops/s
Iteration  15: 1801864.300 ops/s
Iteration  16: 1725218.221 ops/s
Iteration  17: 1769461.450 ops/s
Iteration  18: 1704783.391 ops/s
Iteration  19: 1773357.274 ops/s
Iteration  20: 1759324.958 ops/s
Iteration  21: 1706972.743 ops/s
Iteration  22: 1786025.766 ops/s
Iteration  23: 1792633.114 ops/s
Iteration  24: 1701275.230 ops/s
Iteration  25: 1807557.880 ops/s
Iteration  26: 1737076.688 ops/s
Iteration  27: 1746756.243 ops/s
Iteration  28: 1736160.453 ops/s
Iteration  29: 1721827.034 ops/s
Iteration  30: 1846258.217 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_completeInline":
  1754987.198 ±(99.9%) 29164.538 ops/s [Average]
  (min, avg, max) = (1689034.190, 1754987.198, 1846258.217), stdev = 43652.110
  CI (99.9%): [1725822.661, 1784151.736] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_completeInline  thrpt   30  1754987.198 ± 29164.538  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_selectorTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_selectorTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 341666.538 ops/s
# Warmup Iteration   2: 1658434.655 ops/s
# Warmup Iteration   3: 2498864.309 ops/s
# Warmup Iteration   4: 2285613.326 ops/s
# Warmup Iteration   5: 2539819.062 ops/s
# Warmup Iteration   6: 2718736.112 ops/s
# Warmup Iteration   7: 2612961.534 ops/s
# Warmup Iteration   8: 2554824.512 ops/s
# Warmup Iteration   9: 2108838.705 ops/s
# Warmup Iteration  10: 2592833.199 ops/s
# Warmup Iteration  11: 2659537.118 ops/s
# Warmup Iteration  12: 2778586.185 ops/s
# Warmup Iteration  13: 2599892.314 ops/s
# Warmup Iteration  14: 2710384.436 ops/s
# Warmup Iteration  15: 2555337.942 ops/s
# Warmup Iteration  16: 2747280.708 ops/s
# Warmup Iteration  17: 2569475.364 ops/s
# Warmup Iteration  18: 2650223.700 ops/s
# Warmup Iteration  19: 2663587.831 ops/s
# Warmup Iteration  20: 2683164.429 ops/s
# Warmup Iteration  21: 2736458.412 ops/s
# Warmup Iteration  22: 2757329.415 ops/s
# Warmup Iteration  23: 2552733.489 ops/s
# Warmup Iteration  24: 2600391.904 ops/s
# Warmup Iteration  25: 2684754.902 ops/s
# Warmup Iteration  26: 2630232.554 ops/s
# Warmup Iteration  27: 2725188.413 ops/s
# Warmup Iteration  28: 2627174.930 ops/s
# Warmup Iteration  29: 2645557.726 ops/s
# Warmup Iteration  30: 2597858.108 ops/s
Iteration   1: 2623091.662 ops/s
Iteration   2: 2687994.423 ops/s
Iteration   3: 2619703.276 ops/s
Iteration   4: 2599881.627 ops/s
Iteration   5: 2694771.156 ops/s
Iteration   6: 2539428.544 ops/s
Iteration   7: 2645908.193 ops/s
Iteration   8: 2692199.985 ops/s
Iteration   9: 2538827.925 ops/s
Iteration  10: 2699211.493 ops/s
Iteration  11: 2669033.324 ops/s
Iteration  12: 2674735.152 ops/s
Iteration  13: 2746794.719 ops/s
Iteration  14: 2627659.292 ops/s
Iteration  15: 2611547.660 ops/s
Iteration  16: 2631097.294 ops/s
Iteration  17: 2632860.719 ops/s
Iteration  18: 2673631.991 ops/s
Iteration  19: 2600255.422 ops/s
Iteration  20: 2745298.183 ops/s
Iteration  21: 2571107.555 ops/s
Iteration  22: 2691114.949 ops/s
Iteration  23: 2698739.312 ops/s
Iteration  24: 2621052.543 ops/s
Iteration  25: 2756375.400 ops/s
Iteration  26: 2573674.681 ops/s
Iteration  27: 2673914.763 ops/s
Iteration  28: 2533178.979 ops/s
Iteration  29: 2600506.821 ops/s
Iteration  30: 2703784.538 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutWithSelectorTest._Benchmark.benchmark_selectorTake":
  2645912.719 ±(99.9%) 40927.070 ops/s [Average]
  (min, avg, max) = (2533178.979, 2645912.719, 2756375.400), stdev = 61257.716
  CI (99.9%): [2604985.649, 2686839.789] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableTimeoutWithSelectorTest._Benchmark.benchmark_selectorTake  thrpt   30  2645912.719 ± 40927.070  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 136185.278 ops/s
# Warmup Iteration   2: 483408.037 ops/s
# Warmup Iteration   3: 536255.590 ops/s
# Warmup Iteration   4: 573652.814 ops/s
# Warmup Iteration   5: 508312.443 ops/s
# Warmup Iteration   6: 576556.953 ops/s
# Warmup Iteration   7: 574657.372 ops/s
# Warmup Iteration   8: 599372.479 ops/s
# Warmup Iteration   9: 575482.789 ops/s
# Warmup Iteration  10: 602332.607 ops/s
# Warmup Iteration  11: 585365.160 ops/s
# Warmup Iteration  12: 568934.807 ops/s
# Warmup Iteration  13: 598862.827 ops/s
# Warmup Iteration  14: 588826.132 ops/s
# Warmup Iteration  15: 592291.199 ops/s
# Warmup Iteration  16: 569794.276 ops/s
# Warmup Iteration  17: 614724.862 ops/s
# Warmup Iteration  18: 615610.143 ops/s
# Warmup Iteration  19: 606825.588 ops/s
# Warmup Iteration  20: 630687.154 ops/s
# Warmup Iteration  21: 619323.779 ops/s
# Warmup Iteration  22: 584609.920 ops/s
# Warmup Iteration  23: 608766.217 ops/s
# Warmup Iteration  24: 617539.457 ops/s
# Warmup Iteration  25: 588256.099 ops/s
# Warmup Iteration  26: 615933.259 ops/s
# Warmup Iteration  27: 596147.570 ops/s
# Warmup Iteration  28: 600083.840 ops/s
# Warmup Iteration  29: 641175.505 ops/s
# Warmup Iteration  30: 582062.943 ops/s
Iteration   1: 626704.879 ops/s
Iteration   2: 602751.760 ops/s
Iteration   3: 618402.738 ops/s
Iteration   4: 621215.301 ops/s
Iteration   5: 603735.349 ops/s
Iteration   6: 631220.830 ops/s
Iteration   7: 634797.756 ops/s
Iteration   8: 602822.203 ops/s
Iteration   9: 614910.329 ops/s
Iteration  10: 617871.981 ops/s
Iteration  11: 606811.810 ops/s
Iteration  12: 616899.609 ops/s
Iteration  13: 612545.901 ops/s
Iteration  14: 600819.967 ops/s
Iteration  15: 622018.956 ops/s
Iteration  16: 606373.773 ops/s
Iteration  17: 626741.494 ops/s
Iteration  18: 604484.894 ops/s
Iteration  19: 609385.076 ops/s
Iteration  20: 640585.710 ops/s
Iteration  21: 624423.609 ops/s
Iteration  22: 601397.424 ops/s
Iteration  23: 630139.934 ops/s
Iteration  24: 607057.801 ops/s
Iteration  25: 625556.977 ops/s
Iteration  26: 609701.890 ops/s
Iteration  27: 606232.508 ops/s
Iteration  28: 637159.613 ops/s
Iteration  29: 606772.237 ops/s
Iteration  30: 601559.624 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedError":
  615703.398 ±(99.9%) 7962.281 ops/s [Average]
  (min, avg, max) = (600819.967, 615703.398, 640585.710), stdev = 11917.569
  CI (99.9%): [607741.116, 623665.679] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribedError  thrpt   30  615703.398 ± 7962.281  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedDrop$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedDrop

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 164324.620 ops/s
# Warmup Iteration   2: 465230.851 ops/s
# Warmup Iteration   3: 529212.277 ops/s
# Warmup Iteration   4: 532846.622 ops/s
# Warmup Iteration   5: 566638.371 ops/s
# Warmup Iteration   6: 568850.910 ops/s
# Warmup Iteration   7: 594932.539 ops/s
# Warmup Iteration   8: 579302.524 ops/s
# Warmup Iteration   9: 562478.180 ops/s
# Warmup Iteration  10: 557042.603 ops/s
# Warmup Iteration  11: 574204.980 ops/s
# Warmup Iteration  12: 565150.849 ops/s
# Warmup Iteration  13: 561468.841 ops/s
# Warmup Iteration  14: 597543.194 ops/s
# Warmup Iteration  15: 548670.328 ops/s
# Warmup Iteration  16: 594025.403 ops/s
# Warmup Iteration  17: 594090.177 ops/s
# Warmup Iteration  18: 609455.461 ops/s
# Warmup Iteration  19: 622000.259 ops/s
# Warmup Iteration  20: 559079.899 ops/s
# Warmup Iteration  21: 612113.319 ops/s
# Warmup Iteration  22: 599855.206 ops/s
# Warmup Iteration  23: 633254.105 ops/s
# Warmup Iteration  24: 584416.060 ops/s
# Warmup Iteration  25: 617403.522 ops/s
# Warmup Iteration  26: 599437.070 ops/s
# Warmup Iteration  27: 627011.282 ops/s
# Warmup Iteration  28: 592843.074 ops/s
# Warmup Iteration  29: 571451.766 ops/s
# Warmup Iteration  30: 633702.971 ops/s
Iteration   1: 587218.910 ops/s
Iteration   2: 573422.238 ops/s
Iteration   3: 592426.577 ops/s
Iteration   4: 608220.261 ops/s
Iteration   5: 602421.559 ops/s
Iteration   6: 603260.561 ops/s
Iteration   7: 632990.576 ops/s
Iteration   8: 611960.600 ops/s
Iteration   9: 598895.482 ops/s
Iteration  10: 623369.671 ops/s
Iteration  11: 582025.093 ops/s
Iteration  12: 600405.354 ops/s
Iteration  13: 623557.062 ops/s
Iteration  14: 602271.699 ops/s
Iteration  15: 622342.511 ops/s
Iteration  16: 595323.433 ops/s
Iteration  17: 623124.607 ops/s
Iteration  18: 591040.708 ops/s
Iteration  19: 634228.646 ops/s
Iteration  20: 619225.642 ops/s
Iteration  21: 558474.085 ops/s
Iteration  22: 615578.337 ops/s
Iteration  23: 635939.006 ops/s
Iteration  24: 596176.602 ops/s
Iteration  25: 612905.618 ops/s
Iteration  26: 607650.428 ops/s
Iteration  27: 600944.238 ops/s
Iteration  28: 624702.419 ops/s
Iteration  29: 591302.303 ops/s
Iteration  30: 625651.321 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedDrop":
  606568.518 ±(99.9%) 12343.976 ops/s [Average]
  (min, avg, max) = (558474.085, 606568.518, 635939.006), stdev = 18475.884
  CI (99.9%): [594224.542, 618912.495] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribedDrop  thrpt   30  606568.518 ± 12343.976  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 142148.362 ops/s
# Warmup Iteration   2: 462858.999 ops/s
# Warmup Iteration   3: 611926.013 ops/s
# Warmup Iteration   4: 589601.134 ops/s
# Warmup Iteration   5: 616403.286 ops/s
# Warmup Iteration   6: 589523.615 ops/s
# Warmup Iteration   7: 587961.789 ops/s
# Warmup Iteration   8: 580584.124 ops/s
# Warmup Iteration   9: 547589.579 ops/s
# Warmup Iteration  10: 610259.174 ops/s
# Warmup Iteration  11: 596157.128 ops/s
# Warmup Iteration  12: 602965.024 ops/s
# Warmup Iteration  13: 630281.126 ops/s
# Warmup Iteration  14: 583052.436 ops/s
# Warmup Iteration  15: 596813.253 ops/s
# Warmup Iteration  16: 624276.458 ops/s
# Warmup Iteration  17: 621402.592 ops/s
# Warmup Iteration  18: 635866.747 ops/s
# Warmup Iteration  19: 672592.672 ops/s
# Warmup Iteration  20: 616709.531 ops/s
# Warmup Iteration  21: 652843.879 ops/s
# Warmup Iteration  22: 629990.555 ops/s
# Warmup Iteration  23: 661039.439 ops/s
# Warmup Iteration  24: 610310.121 ops/s
# Warmup Iteration  25: 628145.060 ops/s
# Warmup Iteration  26: 647261.434 ops/s
# Warmup Iteration  27: 627004.422 ops/s
# Warmup Iteration  28: 628742.367 ops/s
# Warmup Iteration  29: 626191.333 ops/s
# Warmup Iteration  30: 618295.198 ops/s
Iteration   1: 660588.712 ops/s
Iteration   2: 644041.824 ops/s
Iteration   3: 634201.335 ops/s
Iteration   4: 648985.586 ops/s
Iteration   5: 634026.633 ops/s
Iteration   6: 622366.111 ops/s
Iteration   7: 635723.350 ops/s
Iteration   8: 636182.878 ops/s
Iteration   9: 644267.604 ops/s
Iteration  10: 652927.473 ops/s
Iteration  11: 626860.963 ops/s
Iteration  12: 619349.105 ops/s
Iteration  13: 628509.148 ops/s
Iteration  14: 652218.165 ops/s
Iteration  15: 623175.653 ops/s
Iteration  16: 642497.197 ops/s
Iteration  17: 599723.135 ops/s
Iteration  18: 632069.127 ops/s
Iteration  19: 630050.737 ops/s
Iteration  20: 646442.295 ops/s
Iteration  21: 643664.076 ops/s
Iteration  22: 638470.138 ops/s
Iteration  23: 644186.729 ops/s
Iteration  24: 639168.719 ops/s
Iteration  25: 637535.476 ops/s
Iteration  26: 653621.079 ops/s
Iteration  27: 632339.728 ops/s
Iteration  28: 658779.356 ops/s
Iteration  29: 626805.610 ops/s
Iteration  30: 515518.470 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_otherError":
  633476.547 ±(99.9%) 17166.269 ops/s [Average]
  (min, avg, max) = (515518.470, 633476.547, 660588.712), stdev = 25693.665
  CI (99.9%): [616310.278, 650642.816] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
MaybeTimeoutTest._Benchmark.benchmark_otherError  thrpt   30  633476.547 ± 17166.269  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 443517.380 ops/s
# Warmup Iteration   2: 2020182.290 ops/s
# Warmup Iteration   3: 2654694.809 ops/s
# Warmup Iteration   4: 2998499.605 ops/s
# Warmup Iteration   5: 2878874.804 ops/s
# Warmup Iteration   6: 2929957.451 ops/s
# Warmup Iteration   7: 3102190.796 ops/s
# Warmup Iteration   8: 2916221.100 ops/s
# Warmup Iteration   9: 2889422.165 ops/s
# Warmup Iteration  10: 3065594.972 ops/s
# Warmup Iteration  11: 2876420.389 ops/s
# Warmup Iteration  12: 2906981.043 ops/s
# Warmup Iteration  13: 3059031.128 ops/s
# Warmup Iteration  14: 2882712.884 ops/s
# Warmup Iteration  15: 3017781.972 ops/s
# Warmup Iteration  16: 2980858.276 ops/s
# Warmup Iteration  17: 2995789.869 ops/s
# Warmup Iteration  18: 2921934.928 ops/s
# Warmup Iteration  19: 2985655.154 ops/s
# Warmup Iteration  20: 3042545.225 ops/s
# Warmup Iteration  21: 2893050.864 ops/s
# Warmup Iteration  22: 3068214.344 ops/s
# Warmup Iteration  23: 2863239.799 ops/s
# Warmup Iteration  24: 2918457.124 ops/s
# Warmup Iteration  25: 2933662.221 ops/s
# Warmup Iteration  26: 3030834.656 ops/s
# Warmup Iteration  27: 2993840.000 ops/s
# Warmup Iteration  28: 2877469.244 ops/s
# Warmup Iteration  29: 2988823.497 ops/s
# Warmup Iteration  30: 2937853.351 ops/s
Iteration   1: 2907546.318 ops/s
Iteration   2: 3060176.042 ops/s
Iteration   3: 2959630.955 ops/s
Iteration   4: 2987391.623 ops/s
Iteration   5: 3020778.350 ops/s
Iteration   6: 2970604.642 ops/s
Iteration   7: 2870058.606 ops/s
Iteration   8: 2891163.313 ops/s
Iteration   9: 3044212.869 ops/s
Iteration  10: 2869782.141 ops/s
Iteration  11: 2990771.575 ops/s
Iteration  12: 2950157.928 ops/s
Iteration  13: 2947720.199 ops/s
Iteration  14: 3006542.273 ops/s
Iteration  15: 2889504.334 ops/s
Iteration  16: 2911326.911 ops/s
Iteration  17: 3040148.126 ops/s
Iteration  18: 3012792.181 ops/s
Iteration  19: 2873064.078 ops/s
Iteration  20: 3083089.703 ops/s
Iteration  21: 2946038.140 ops/s
Iteration  22: 3032819.548 ops/s
Iteration  23: 3056013.827 ops/s
Iteration  24: 2857759.359 ops/s
Iteration  25: 3031817.635 ops/s
Iteration  26: 2980320.269 ops/s
Iteration  27: 2882060.997 ops/s
Iteration  28: 2964683.917 ops/s
Iteration  29: 2940020.812 ops/s
Iteration  30: 2812799.793 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherDispose":
  2959693.215 ±(99.9%) 47554.860 ops/s [Average]
  (min, avg, max) = (2812799.793, 2959693.215, 3083089.703), stdev = 71177.882
  CI (99.9%): [2912138.355, 3007248.076] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherDispose  thrpt   30  2959693.215 ± 47554.860  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 172160.555 ops/s
# Warmup Iteration   2: 468586.433 ops/s
# Warmup Iteration   3: 521494.278 ops/s
# Warmup Iteration   4: 556309.683 ops/s
# Warmup Iteration   5: 496686.538 ops/s
# Warmup Iteration   6: 577902.256 ops/s
# Warmup Iteration   7: 558451.483 ops/s
# Warmup Iteration   8: 581882.200 ops/s
# Warmup Iteration   9: 562813.867 ops/s
# Warmup Iteration  10: 554957.245 ops/s
# Warmup Iteration  11: 568109.039 ops/s
# Warmup Iteration  12: 548081.495 ops/s
# Warmup Iteration  13: 587065.422 ops/s
# Warmup Iteration  14: 562071.679 ops/s
# Warmup Iteration  15: 575297.391 ops/s
# Warmup Iteration  16: 566958.358 ops/s
# Warmup Iteration  17: 604484.706 ops/s
# Warmup Iteration  18: 602841.051 ops/s
# Warmup Iteration  19: 596458.647 ops/s
# Warmup Iteration  20: 605957.420 ops/s
# Warmup Iteration  21: 588159.828 ops/s
# Warmup Iteration  22: 591951.492 ops/s
# Warmup Iteration  23: 602929.908 ops/s
# Warmup Iteration  24: 577432.201 ops/s
# Warmup Iteration  25: 597613.912 ops/s
# Warmup Iteration  26: 603040.481 ops/s
# Warmup Iteration  27: 592330.416 ops/s
# Warmup Iteration  28: 609128.003 ops/s
# Warmup Iteration  29: 568195.232 ops/s
# Warmup Iteration  30: 601626.721 ops/s
Iteration   1: 616569.523 ops/s
Iteration   2: 614183.664 ops/s
Iteration   3: 597747.655 ops/s
Iteration   4: 617824.442 ops/s
Iteration   5: 582236.645 ops/s
Iteration   6: 595074.964 ops/s
Iteration   7: 620384.785 ops/s
Iteration   8: 584733.956 ops/s
Iteration   9: 623590.583 ops/s
Iteration  10: 614804.656 ops/s
Iteration  11: 582881.084 ops/s
Iteration  12: 618997.291 ops/s
Iteration  13: 584912.093 ops/s
Iteration  14: 581188.774 ops/s
Iteration  15: 612520.760 ops/s
Iteration  16: 596694.041 ops/s
Iteration  17: 583703.966 ops/s
Iteration  18: 586765.340 ops/s
Iteration  19: 599616.517 ops/s
Iteration  20: 575920.137 ops/s
Iteration  21: 602127.196 ops/s
Iteration  22: 607233.136 ops/s
Iteration  23: 584115.214 ops/s
Iteration  24: 508487.379 ops/s
Iteration  25: 509534.924 ops/s
Iteration  26: 592485.522 ops/s
Iteration  27: 616462.275 ops/s
Iteration  28: 592910.630 ops/s
Iteration  29: 624096.689 ops/s
Iteration  30: 594051.758 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedLatest":
  594061.853 ±(99.9%) 18313.854 ops/s [Average]
  (min, avg, max) = (508487.379, 594061.853, 624096.689), stdev = 27411.317
  CI (99.9%): [575747.999, 612375.707] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribedLatest  thrpt   30  594061.853 ± 18313.854  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorMissing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorMissing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 93400.988 ops/s
# Warmup Iteration   2: 339485.357 ops/s
# Warmup Iteration   3: 487495.169 ops/s
# Warmup Iteration   4: 546261.357 ops/s
# Warmup Iteration   5: 527727.405 ops/s
# Warmup Iteration   6: 551377.250 ops/s
# Warmup Iteration   7: 526696.856 ops/s
# Warmup Iteration   8: 542403.364 ops/s
# Warmup Iteration   9: 527946.747 ops/s
# Warmup Iteration  10: 492411.324 ops/s
# Warmup Iteration  11: 522234.197 ops/s
# Warmup Iteration  12: 547678.163 ops/s
# Warmup Iteration  13: 513915.465 ops/s
# Warmup Iteration  14: 519438.027 ops/s
# Warmup Iteration  15: 543666.052 ops/s
# Warmup Iteration  16: 557963.780 ops/s
# Warmup Iteration  17: 566969.303 ops/s
# Warmup Iteration  18: 542625.835 ops/s
# Warmup Iteration  19: 569287.810 ops/s
# Warmup Iteration  20: 570705.317 ops/s
# Warmup Iteration  21: 559998.430 ops/s
# Warmup Iteration  22: 582540.951 ops/s
# Warmup Iteration  23: 549915.149 ops/s
# Warmup Iteration  24: 551850.662 ops/s
# Warmup Iteration  25: 576796.319 ops/s
# Warmup Iteration  26: 548792.717 ops/s
# Warmup Iteration  27: 566745.185 ops/s
# Warmup Iteration  28: 549790.391 ops/s
# Warmup Iteration  29: 570271.484 ops/s
# Warmup Iteration  30: 575739.193 ops/s
Iteration   1: 557180.037 ops/s
Iteration   2: 564943.878 ops/s
Iteration   3: 592202.661 ops/s
Iteration   4: 552305.106 ops/s
Iteration   5: 581054.672 ops/s
Iteration   6: 550055.997 ops/s
Iteration   7: 563616.439 ops/s
Iteration   8: 565597.101 ops/s
Iteration   9: 557980.456 ops/s
Iteration  10: 578637.795 ops/s
Iteration  11: 577633.696 ops/s
Iteration  12: 549606.169 ops/s
Iteration  13: 581244.366 ops/s
Iteration  14: 581640.544 ops/s
Iteration  15: 545995.976 ops/s
Iteration  16: 556008.025 ops/s
Iteration  17: 584771.775 ops/s
Iteration  18: 554757.324 ops/s
Iteration  19: 570521.275 ops/s
Iteration  20: 536942.064 ops/s
Iteration  21: 578684.964 ops/s
Iteration  22: 578701.994 ops/s
Iteration  23: 565482.636 ops/s
Iteration  24: 578505.939 ops/s
Iteration  25: 557006.040 ops/s
Iteration  26: 577024.194 ops/s
Iteration  27: 548402.990 ops/s
Iteration  28: 560383.888 ops/s
Iteration  29: 585135.037 ops/s
Iteration  30: 538203.463 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorMissing":
  565674.217 ±(99.9%) 10038.276 ops/s [Average]
  (min, avg, max) = (536942.064, 565674.217, 592202.661), stdev = 15024.820
  CI (99.9%): [555635.941, 575712.492] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_errorMissing  thrpt   30  565674.217 ± 10038.276  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelMissing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelMissing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42493.938 ops/s
# Warmup Iteration   2: 192152.604 ops/s
# Warmup Iteration   3: 222105.279 ops/s
# Warmup Iteration   4: 208219.498 ops/s
# Warmup Iteration   5: 245743.652 ops/s
# Warmup Iteration   6: 246756.131 ops/s
# Warmup Iteration   7: 236019.299 ops/s
# Warmup Iteration   8: 237242.229 ops/s
# Warmup Iteration   9: 255120.188 ops/s
# Warmup Iteration  10: 234767.177 ops/s
# Warmup Iteration  11: 244611.310 ops/s
# Warmup Iteration  12: 249507.202 ops/s
# Warmup Iteration  13: 244372.975 ops/s
# Warmup Iteration  14: 255262.754 ops/s
# Warmup Iteration  15: 233861.843 ops/s
# Warmup Iteration  16: 248715.562 ops/s
# Warmup Iteration  17: 250073.403 ops/s
# Warmup Iteration  18: 258371.889 ops/s
# Warmup Iteration  19: 247876.838 ops/s
# Warmup Iteration  20: 250300.869 ops/s
# Warmup Iteration  21: 267572.542 ops/s
# Warmup Iteration  22: 254461.598 ops/s
# Warmup Iteration  23: 244097.927 ops/s
# Warmup Iteration  24: 265043.144 ops/s
# Warmup Iteration  25: 252983.251 ops/s
# Warmup Iteration  26: 250390.691 ops/s
# Warmup Iteration  27: 260514.802 ops/s
# Warmup Iteration  28: 249809.035 ops/s
# Warmup Iteration  29: 250725.727 ops/s
# Warmup Iteration  30: 260948.129 ops/s
Iteration   1: 253666.929 ops/s
Iteration   2: 260888.180 ops/s
Iteration   3: 250748.058 ops/s
Iteration   4: 249266.760 ops/s
Iteration   5: 262669.979 ops/s
Iteration   6: 255224.463 ops/s
Iteration   7: 250597.459 ops/s
Iteration   8: 259981.915 ops/s
Iteration   9: 247916.565 ops/s
Iteration  10: 256954.606 ops/s
Iteration  11: 253905.825 ops/s
Iteration  12: 248197.501 ops/s
Iteration  13: 257389.051 ops/s
Iteration  14: 250480.989 ops/s
Iteration  15: 264923.268 ops/s
Iteration  16: 247981.135 ops/s
Iteration  17: 263978.577 ops/s
Iteration  18: 243024.761 ops/s
Iteration  19: 213355.023 ops/s
Iteration  20: 246779.690 ops/s
Iteration  21: 251391.633 ops/s
Iteration  22: 271233.466 ops/s
Iteration  23: 245955.983 ops/s
Iteration  24: 260505.852 ops/s
Iteration  25: 248362.610 ops/s
Iteration  26: 248962.902 ops/s
Iteration  27: 263159.404 ops/s
Iteration  28: 250544.187 ops/s
Iteration  29: 264233.287 ops/s
Iteration  30: 250422.898 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelMissing":
  253090.098 ±(99.9%) 6845.069 ops/s [Average]
  (min, avg, max) = (213355.023, 253090.098, 271233.466), stdev = 10245.378
  CI (99.9%): [246245.029, 259935.168] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelMissing  thrpt   30  253090.098 ± 6845.069  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43761.840 ops/s
# Warmup Iteration   2: 170295.495 ops/s
# Warmup Iteration   3: 230428.348 ops/s
# Warmup Iteration   4: 200186.321 ops/s
# Warmup Iteration   5: 248423.959 ops/s
# Warmup Iteration   6: 239563.822 ops/s
# Warmup Iteration   7: 237753.796 ops/s
# Warmup Iteration   8: 246287.703 ops/s
# Warmup Iteration   9: 240444.735 ops/s
# Warmup Iteration  10: 247668.465 ops/s
# Warmup Iteration  11: 244220.244 ops/s
# Warmup Iteration  12: 238183.780 ops/s
# Warmup Iteration  13: 243355.213 ops/s
# Warmup Iteration  14: 248476.606 ops/s
# Warmup Iteration  15: 249012.104 ops/s
# Warmup Iteration  16: 241889.704 ops/s
# Warmup Iteration  17: 249055.470 ops/s
# Warmup Iteration  18: 259289.340 ops/s
# Warmup Iteration  19: 247807.708 ops/s
# Warmup Iteration  20: 259772.200 ops/s
# Warmup Iteration  21: 245154.339 ops/s
# Warmup Iteration  22: 253654.011 ops/s
# Warmup Iteration  23: 247390.229 ops/s
# Warmup Iteration  24: 247682.825 ops/s
# Warmup Iteration  25: 258144.675 ops/s
# Warmup Iteration  26: 243442.669 ops/s
# Warmup Iteration  27: 262157.210 ops/s
# Warmup Iteration  28: 250361.367 ops/s
# Warmup Iteration  29: 254359.276 ops/s
# Warmup Iteration  30: 258003.609 ops/s
Iteration   1: 247415.807 ops/s
Iteration   2: 264345.973 ops/s
Iteration   3: 258837.663 ops/s
Iteration   4: 252541.123 ops/s
Iteration   5: 253592.372 ops/s
Iteration   6: 245336.092 ops/s
Iteration   7: 261164.282 ops/s
Iteration   8: 250193.234 ops/s
Iteration   9: 238524.633 ops/s
Iteration  10: 249733.725 ops/s
Iteration  11: 245839.074 ops/s
Iteration  12: 261123.001 ops/s
Iteration  13: 247663.463 ops/s
Iteration  14: 246656.110 ops/s
Iteration  15: 254261.663 ops/s
Iteration  16: 250620.091 ops/s
Iteration  17: 245115.137 ops/s
Iteration  18: 260529.593 ops/s
Iteration  19: 247051.432 ops/s
Iteration  20: 260025.249 ops/s
Iteration  21: 260993.175 ops/s
Iteration  22: 245722.424 ops/s
Iteration  23: 259206.109 ops/s
Iteration  24: 263535.182 ops/s
Iteration  25: 248433.292 ops/s
Iteration  26: 257181.652 ops/s
Iteration  27: 252464.959 ops/s
Iteration  28: 252308.562 ops/s
Iteration  29: 253282.688 ops/s
Iteration  30: 248361.094 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelError":
  252735.295 ±(99.9%) 4421.044 ops/s [Average]
  (min, avg, max) = (238524.633, 252735.295, 264345.973), stdev = 6617.211
  CI (99.9%): [248314.251, 257156.339] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelError  thrpt   30  252735.295 ± 4421.044  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 278973.429 ops/s
# Warmup Iteration   2: 642777.878 ops/s
# Warmup Iteration   3: 687574.320 ops/s
# Warmup Iteration   4: 707095.316 ops/s
# Warmup Iteration   5: 726159.987 ops/s
# Warmup Iteration   6: 693194.469 ops/s
# Warmup Iteration   7: 697610.138 ops/s
# Warmup Iteration   8: 720583.494 ops/s
# Warmup Iteration   9: 724513.505 ops/s
# Warmup Iteration  10: 727322.807 ops/s
# Warmup Iteration  11: 738856.412 ops/s
# Warmup Iteration  12: 738572.672 ops/s
# Warmup Iteration  13: 685977.215 ops/s
# Warmup Iteration  14: 727286.886 ops/s
# Warmup Iteration  15: 665978.940 ops/s
# Warmup Iteration  16: 705541.355 ops/s
# Warmup Iteration  17: 799116.337 ops/s
# Warmup Iteration  18: 739018.852 ops/s
# Warmup Iteration  19: 793422.743 ops/s
# Warmup Iteration  20: 782761.770 ops/s
# Warmup Iteration  21: 737987.926 ops/s
# Warmup Iteration  22: 784446.412 ops/s
# Warmup Iteration  23: 779653.220 ops/s
# Warmup Iteration  24: 732612.459 ops/s
# Warmup Iteration  25: 784571.621 ops/s
# Warmup Iteration  26: 730154.980 ops/s
# Warmup Iteration  27: 758868.468 ops/s
# Warmup Iteration  28: 772791.718 ops/s
# Warmup Iteration  29: 756057.159 ops/s
# Warmup Iteration  30: 764540.419 ops/s
Iteration   1: 752522.245 ops/s
Iteration   2: 756664.712 ops/s
Iteration   3: 767808.720 ops/s
Iteration   4: 761701.935 ops/s
Iteration   5: 780108.116 ops/s
Iteration   6: 756653.215 ops/s
Iteration   7: 780395.544 ops/s
Iteration   8: 752217.477 ops/s
Iteration   9: 752399.524 ops/s
Iteration  10: 714412.531 ops/s
Iteration  11: 750679.179 ops/s
Iteration  12: 783913.719 ops/s
Iteration  13: 752076.628 ops/s
Iteration  14: 605582.098 ops/s
Iteration  15: 781946.030 ops/s
Iteration  16: 736990.317 ops/s
Iteration  17: 770871.847 ops/s
Iteration  18: 750857.741 ops/s
Iteration  19: 767205.369 ops/s
Iteration  20: 771658.939 ops/s
Iteration  21: 746679.868 ops/s
Iteration  22: 768000.103 ops/s
Iteration  23: 769875.396 ops/s
Iteration  24: 752514.790 ops/s
Iteration  25: 750795.945 ops/s
Iteration  26: 774234.577 ops/s
Iteration  27: 749939.835 ops/s
Iteration  28: 765453.028 ops/s
Iteration  29: 749868.228 ops/s
Iteration  30: 767736.171 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.BlockingFlowableLatestTest._Benchmark.benchmark_remove":
  754725.461 ±(99.9%) 21224.705 ops/s [Average]
  (min, avg, max) = (605582.098, 754725.461, 783913.719), stdev = 31768.142
  CI (99.9%): [733500.755, 775950.166] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
BlockingFlowableLatestTest._Benchmark.benchmark_remove  thrpt   30  754725.461 ± 21224.705  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 228360.243 ops/s
# Warmup Iteration   2: 472325.046 ops/s
# Warmup Iteration   3: 584622.527 ops/s
# Warmup Iteration   4: 573606.162 ops/s
# Warmup Iteration   5: 599866.357 ops/s
# Warmup Iteration   6: 564753.169 ops/s
# Warmup Iteration   7: 574744.467 ops/s
# Warmup Iteration   8: 543677.701 ops/s
# Warmup Iteration   9: 536324.497 ops/s
# Warmup Iteration  10: 573383.614 ops/s
# Warmup Iteration  11: 561837.128 ops/s
# Warmup Iteration  12: 541235.631 ops/s
# Warmup Iteration  13: 604076.428 ops/s
# Warmup Iteration  14: 563480.977 ops/s
# Warmup Iteration  15: 564076.749 ops/s
# Warmup Iteration  16: 600510.657 ops/s
# Warmup Iteration  17: 591915.722 ops/s
# Warmup Iteration  18: 626566.967 ops/s
# Warmup Iteration  19: 606525.463 ops/s
# Warmup Iteration  20: 630165.295 ops/s
# Warmup Iteration  21: 592574.675 ops/s
# Warmup Iteration  22: 622273.881 ops/s
# Warmup Iteration  23: 616165.424 ops/s
# Warmup Iteration  24: 588336.173 ops/s
# Warmup Iteration  25: 631198.645 ops/s
# Warmup Iteration  26: 596867.555 ops/s
# Warmup Iteration  27: 634445.634 ops/s
# Warmup Iteration  28: 609729.319 ops/s
# Warmup Iteration  29: 600897.478 ops/s
# Warmup Iteration  30: 608278.911 ops/s
Iteration   1: 609309.592 ops/s
Iteration   2: 617165.284 ops/s
Iteration   3: 602243.187 ops/s
Iteration   4: 602548.849 ops/s
Iteration   5: 630067.402 ops/s
Iteration   6: 601888.733 ops/s
Iteration   7: 604975.339 ops/s
Iteration   8: 606782.758 ops/s
Iteration   9: 625915.808 ops/s
Iteration  10: 606742.380 ops/s
Iteration  11: 601710.242 ops/s
Iteration  12: 633552.720 ops/s
Iteration  13: 599697.759 ops/s
Iteration  14: 594899.977 ops/s
Iteration  15: 603985.439 ops/s
Iteration  16: 598142.696 ops/s
Iteration  17: 615395.397 ops/s
Iteration  18: 626225.669 ops/s
Iteration  19: 587180.224 ops/s
Iteration  20: 630673.518 ops/s
Iteration  21: 594878.701 ops/s
Iteration  22: 617394.858 ops/s
Iteration  23: 619204.913 ops/s
Iteration  24: 607180.503 ops/s
Iteration  25: 615120.340 ops/s
Iteration  26: 588510.057 ops/s
Iteration  27: 624408.080 ops/s
Iteration  28: 599834.696 ops/s
Iteration  29: 597578.796 ops/s
Iteration  30: 627777.805 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableFunctionReturnsNull":
  609699.724 ±(99.9%) 8731.441 ops/s [Average]
  (min, avg, max) = (587180.224, 609699.724, 633552.720), stdev = 13068.810
  CI (99.9%): [600968.283, 618431.165] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_combineLatestDelayErrorIterableFunctionReturnsNull  thrpt   30  609699.724 ± 8731.441  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1748051.178 ops/s
# Warmup Iteration   2: 5190274.965 ops/s
# Warmup Iteration   3: 6763727.363 ops/s
# Warmup Iteration   4: 6873986.541 ops/s
# Warmup Iteration   5: 6942340.784 ops/s
# Warmup Iteration   6: 6744112.826 ops/s
# Warmup Iteration   7: 7129650.193 ops/s
# Warmup Iteration   8: 6753832.388 ops/s
# Warmup Iteration   9: 6754051.487 ops/s
# Warmup Iteration  10: 6913001.224 ops/s
# Warmup Iteration  11: 6909618.796 ops/s
# Warmup Iteration  12: 7150902.586 ops/s
# Warmup Iteration  13: 6563755.644 ops/s
# Warmup Iteration  14: 7088531.769 ops/s
# Warmup Iteration  15: 6712643.995 ops/s
# Warmup Iteration  16: 6970806.292 ops/s
# Warmup Iteration  17: 6806078.950 ops/s
# Warmup Iteration  18: 6775750.968 ops/s
# Warmup Iteration  19: 7056085.342 ops/s
# Warmup Iteration  20: 6754185.528 ops/s
# Warmup Iteration  21: 7113998.281 ops/s
# Warmup Iteration  22: 6753289.920 ops/s
# Warmup Iteration  23: 6869292.713 ops/s
# Warmup Iteration  24: 6945394.692 ops/s
# Warmup Iteration  25: 6875452.063 ops/s
# Warmup Iteration  26: 6876407.721 ops/s
# Warmup Iteration  27: 6688210.637 ops/s
# Warmup Iteration  28: 6927788.981 ops/s
# Warmup Iteration  29: 7090129.990 ops/s
# Warmup Iteration  30: 6651406.832 ops/s
Iteration   1: 7044458.069 ops/s
Iteration   2: 6704804.678 ops/s
Iteration   3: 6902854.973 ops/s
Iteration   4: 7037871.467 ops/s
Iteration   5: 6769251.986 ops/s
Iteration   6: 6994403.665 ops/s
Iteration   7: 6895022.900 ops/s
Iteration   8: 5554795.426 ops/s
Iteration   9: 6800542.741 ops/s
Iteration  10: 6796024.555 ops/s
Iteration  11: 6870015.891 ops/s
Iteration  12: 7204761.557 ops/s
Iteration  13: 6751348.457 ops/s
Iteration  14: 6909030.806 ops/s
Iteration  15: 6704390.045 ops/s
Iteration  16: 7107241.063 ops/s
Iteration  17: 7000908.701 ops/s
Iteration  18: 6799569.523 ops/s
Iteration  19: 7098429.843 ops/s
Iteration  20: 6773244.949 ops/s
Iteration  21: 7140964.866 ops/s
Iteration  22: 7085217.959 ops/s
Iteration  23: 6776597.590 ops/s
Iteration  24: 7052541.086 ops/s
Iteration  25: 6564397.258 ops/s
Iteration  26: 7064658.855 ops/s
Iteration  27: 6763144.903 ops/s
Iteration  28: 7011937.236 ops/s
Iteration  29: 6984234.199 ops/s
Iteration  30: 6732749.271 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_dispose":
  6863180.484 ±(99.9%) 196299.661 ops/s [Average]
  (min, avg, max) = (5554795.426, 6863180.484, 7204761.557), stdev = 293812.114
  CI (99.9%): [6666880.823, 7059480.145] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
FlowableDematerializeTest._Benchmark.benchmark_dispose  thrpt   30  6863180.484 ± 196299.661  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestIterableFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestIterableFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 204729.080 ops/s
# Warmup Iteration   2: 507241.086 ops/s
# Warmup Iteration   3: 578514.721 ops/s
# Warmup Iteration   4: 478450.229 ops/s
# Warmup Iteration   5: 591389.958 ops/s
# Warmup Iteration   6: 585444.937 ops/s
# Warmup Iteration   7: 580156.022 ops/s
# Warmup Iteration   8: 591897.990 ops/s
# Warmup Iteration   9: 566578.284 ops/s
# Warmup Iteration  10: 592621.091 ops/s
# Warmup Iteration  11: 581230.115 ops/s
# Warmup Iteration  12: 584275.731 ops/s
# Warmup Iteration  13: 586055.880 ops/s
# Warmup Iteration  14: 570357.557 ops/s
# Warmup Iteration  15: 571367.658 ops/s
# Warmup Iteration  16: 596426.259 ops/s
# Warmup Iteration  17: 586220.255 ops/s
# Warmup Iteration  18: 606772.738 ops/s
# Warmup Iteration  19: 632282.119 ops/s
# Warmup Iteration  20: 592491.128 ops/s
# Warmup Iteration  21: 618020.993 ops/s
# Warmup Iteration  22: 584125.263 ops/s
# Warmup Iteration  23: 623636.521 ops/s
# Warmup Iteration  24: 600421.858 ops/s
# Warmup Iteration  25: 620956.299 ops/s
# Warmup Iteration  26: 585236.788 ops/s
# Warmup Iteration  27: 608807.685 ops/s
# Warmup Iteration  28: 621757.132 ops/s
# Warmup Iteration  29: 600859.129 ops/s
# Warmup Iteration  30: 605098.324 ops/s
Iteration   1: 585672.921 ops/s
Iteration   2: 628223.223 ops/s
Iteration   3: 601958.773 ops/s
Iteration   4: 596414.207 ops/s
Iteration   5: 614710.372 ops/s
Iteration   6: 603601.571 ops/s
Iteration   7: 585848.238 ops/s
Iteration   8: 627257.926 ops/s
Iteration   9: 590378.627 ops/s
Iteration  10: 620380.138 ops/s
Iteration  11: 604198.041 ops/s
Iteration  12: 617595.229 ops/s
Iteration  13: 609528.835 ops/s
Iteration  14: 597054.814 ops/s
Iteration  15: 618798.731 ops/s
Iteration  16: 579311.342 ops/s
Iteration  17: 619001.763 ops/s
Iteration  18: 604407.759 ops/s
Iteration  19: 603600.811 ops/s
Iteration  20: 626002.513 ops/s
Iteration  21: 604325.926 ops/s
Iteration  22: 617585.953 ops/s
Iteration  23: 626864.672 ops/s
Iteration  24: 597048.371 ops/s
Iteration  25: 627344.522 ops/s
Iteration  26: 601439.986 ops/s
Iteration  27: 627045.641 ops/s
Iteration  28: 635828.246 ops/s
Iteration  29: 582715.170 ops/s
Iteration  30: 620194.545 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_combineLatestIterableFunctionReturnsNull":
  609144.629 ±(99.9%) 10378.536 ops/s [Average]
  (min, avg, max) = (579311.342, 609144.629, 635828.246), stdev = 15534.105
  CI (99.9%): [598766.093, 619523.164] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_combineLatestIterableFunctionReturnsNull  thrpt   30  609144.629 ± 10378.536  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_concatArrayOneIsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_concatArrayOneIsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 319049.846 ops/s
# Warmup Iteration   2: 524059.701 ops/s
# Warmup Iteration   3: 657587.501 ops/s
# Warmup Iteration   4: 638967.018 ops/s
# Warmup Iteration   5: 629527.308 ops/s
# Warmup Iteration   6: 614619.143 ops/s
# Warmup Iteration   7: 635421.407 ops/s
# Warmup Iteration   8: 615902.031 ops/s
# Warmup Iteration   9: 624972.664 ops/s
# Warmup Iteration  10: 614944.722 ops/s
# Warmup Iteration  11: 624131.088 ops/s
# Warmup Iteration  12: 601526.537 ops/s
# Warmup Iteration  13: 637627.478 ops/s
# Warmup Iteration  14: 624664.966 ops/s
# Warmup Iteration  15: 626242.756 ops/s
# Warmup Iteration  16: 653343.074 ops/s
# Warmup Iteration  17: 629519.726 ops/s
# Warmup Iteration  18: 676009.173 ops/s
# Warmup Iteration  19: 653152.251 ops/s
# Warmup Iteration  20: 680588.384 ops/s
# Warmup Iteration  21: 664436.232 ops/s
# Warmup Iteration  22: 682693.244 ops/s
# Warmup Iteration  23: 688639.225 ops/s
# Warmup Iteration  24: 650772.800 ops/s
# Warmup Iteration  25: 695110.282 ops/s
# Warmup Iteration  26: 648730.574 ops/s
# Warmup Iteration  27: 658516.489 ops/s
# Warmup Iteration  28: 683714.606 ops/s
# Warmup Iteration  29: 670371.074 ops/s
# Warmup Iteration  30: 660368.805 ops/s
Iteration   1: 680187.078 ops/s
Iteration   2: 640318.642 ops/s
Iteration   3: 488553.447 ops/s
Iteration   4: 697874.506 ops/s
Iteration   5: 650090.599 ops/s
Iteration   6: 616547.569 ops/s
Iteration   7: 689896.855 ops/s
Iteration   8: 593621.097 ops/s
Iteration   9: 693435.458 ops/s
Iteration  10: 660641.022 ops/s
Iteration  11: 639444.305 ops/s
Iteration  12: 691279.246 ops/s
Iteration  13: 661974.577 ops/s
Iteration  14: 665100.490 ops/s
Iteration  15: 670714.672 ops/s
Iteration  16: 649179.593 ops/s
Iteration  17: 693983.104 ops/s
Iteration  18: 700335.325 ops/s
Iteration  19: 640913.893 ops/s
Iteration  20: 666617.983 ops/s
Iteration  21: 670319.576 ops/s
Iteration  22: 663265.675 ops/s
Iteration  23: 696692.169 ops/s
Iteration  24: 639322.111 ops/s
Iteration  25: 672699.639 ops/s
Iteration  26: 666301.564 ops/s
Iteration  27: 671271.154 ops/s
Iteration  28: 666564.634 ops/s
Iteration  29: 649945.675 ops/s
Iteration  30: 696127.569 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_concatArrayOneIsNull":
  659440.641 ±(99.9%) 27333.726 ops/s [Average]
  (min, avg, max) = (488553.447, 659440.641, 700335.325), stdev = 40911.838
  CI (99.9%): [632106.915, 686774.367] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_concatArrayOneIsNull  thrpt   30  659440.641 ± 27333.726  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_errorIncludesLastValueAsCause$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_errorIncludesLastValueAsCause

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 123527.524 ops/s
# Warmup Iteration   2: 471431.186 ops/s
# Warmup Iteration   3: 599058.206 ops/s
# Warmup Iteration   4: 580363.383 ops/s
# Warmup Iteration   5: 641999.544 ops/s
# Warmup Iteration   6: 555777.838 ops/s
# Warmup Iteration   7: 666710.492 ops/s
# Warmup Iteration   8: 624038.389 ops/s
# Warmup Iteration   9: 670761.591 ops/s
# Warmup Iteration  10: 660650.740 ops/s
# Warmup Iteration  11: 637860.937 ops/s
# Warmup Iteration  12: 661486.608 ops/s
# Warmup Iteration  13: 636869.014 ops/s
# Warmup Iteration  14: 661712.206 ops/s
# Warmup Iteration  15: 652531.287 ops/s
# Warmup Iteration  16: 647927.027 ops/s
# Warmup Iteration  17: 707225.267 ops/s
# Warmup Iteration  18: 678504.669 ops/s
# Warmup Iteration  19: 704157.276 ops/s
# Warmup Iteration  20: 676675.127 ops/s
# Warmup Iteration  21: 718653.697 ops/s
# Warmup Iteration  22: 704657.468 ops/s
# Warmup Iteration  23: 674720.365 ops/s
# Warmup Iteration  24: 703305.966 ops/s
# Warmup Iteration  25: 670606.729 ops/s
# Warmup Iteration  26: 695574.722 ops/s
# Warmup Iteration  27: 710052.891 ops/s
# Warmup Iteration  28: 708833.928 ops/s
# Warmup Iteration  29: 671467.664 ops/s
# Warmup Iteration  30: 692089.821 ops/s
Iteration   1: 703246.978 ops/s
Iteration   2: 666575.105 ops/s
Iteration   3: 702281.080 ops/s
Iteration   4: 714377.378 ops/s
Iteration   5: 657904.223 ops/s
Iteration   6: 706550.209 ops/s
Iteration   7: 702406.814 ops/s
Iteration   8: 665144.754 ops/s
Iteration   9: 678636.104 ops/s
Iteration  10: 704904.180 ops/s
Iteration  11: 673199.188 ops/s
Iteration  12: 700491.384 ops/s
Iteration  13: 677987.038 ops/s
Iteration  14: 694393.490 ops/s
Iteration  15: 704653.474 ops/s
Iteration  16: 671388.648 ops/s
Iteration  17: 693567.633 ops/s
Iteration  18: 677283.286 ops/s
Iteration  19: 692242.064 ops/s
Iteration  20: 718237.286 ops/s
Iteration  21: 704715.145 ops/s
Iteration  22: 681288.914 ops/s
Iteration  23: 695639.729 ops/s
Iteration  24: 681072.660 ops/s
Iteration  25: 696685.318 ops/s
Iteration  26: 684303.912 ops/s
Iteration  27: 703245.802 ops/s
Iteration  28: 679355.996 ops/s
Iteration  29: 675716.747 ops/s
Iteration  30: 678877.691 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_errorIncludesLastValueAsCause":
  689545.741 ±(99.9%) 10440.333 ops/s [Average]
  (min, avg, max) = (657904.223, 689545.741, 718237.286), stdev = 15626.600
  CI (99.9%): [679105.408, 699986.074] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score       Error  Units
FlowableTakeUntilPredicateTest._Benchmark.benchmark_errorIncludesLastValueAsCause  thrpt   30  689545.741 ± 10440.333  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1420481.612 ops/s
# Warmup Iteration   2: 3387915.939 ops/s
# Warmup Iteration   3: 4785128.756 ops/s
# Warmup Iteration   4: 4722153.380 ops/s
# Warmup Iteration   5: 4673036.953 ops/s
# Warmup Iteration   6: 4623022.635 ops/s
# Warmup Iteration   7: 4994391.088 ops/s
# Warmup Iteration   8: 4673083.610 ops/s
# Warmup Iteration   9: 4847620.794 ops/s
# Warmup Iteration  10: 4651644.736 ops/s
# Warmup Iteration  11: 4758855.866 ops/s
# Warmup Iteration  12: 4944222.074 ops/s
# Warmup Iteration  13: 4649816.560 ops/s
# Warmup Iteration  14: 4633565.452 ops/s
# Warmup Iteration  15: 4832183.031 ops/s
# Warmup Iteration  16: 4630580.340 ops/s
# Warmup Iteration  17: 4928876.874 ops/s
# Warmup Iteration  18: 4678787.040 ops/s
# Warmup Iteration  19: 4902428.123 ops/s
# Warmup Iteration  20: 4703109.835 ops/s
# Warmup Iteration  21: 4704281.646 ops/s
# Warmup Iteration  22: 4803934.385 ops/s
# Warmup Iteration  23: 4705931.995 ops/s
# Warmup Iteration  24: 4917991.836 ops/s
# Warmup Iteration  25: 4911531.702 ops/s
# Warmup Iteration  26: 4675150.676 ops/s
# Warmup Iteration  27: 3915918.869 ops/s
# Warmup Iteration  28: 4869600.871 ops/s
# Warmup Iteration  29: 4744498.708 ops/s
# Warmup Iteration  30: 4866209.727 ops/s
Iteration   1: 4697180.748 ops/s
Iteration   2: 4917899.998 ops/s
Iteration   3: 4727628.713 ops/s
Iteration   4: 4737469.810 ops/s
Iteration   5: 4644466.135 ops/s
Iteration   6: 4833405.765 ops/s
Iteration   7: 4638565.060 ops/s
Iteration   8: 4761503.266 ops/s
Iteration   9: 4704171.869 ops/s
Iteration  10: 4724306.709 ops/s
Iteration  11: 4875345.092 ops/s
Iteration  12: 4655591.747 ops/s
Iteration  13: 4844623.648 ops/s
Iteration  14: 4634136.934 ops/s
Iteration  15: 4735877.538 ops/s
Iteration  16: 4817384.801 ops/s
Iteration  17: 4623247.434 ops/s
Iteration  18: 5047299.437 ops/s
Iteration  19: 4524605.340 ops/s
Iteration  20: 4752248.480 ops/s
Iteration  21: 4885326.977 ops/s
Iteration  22: 4674030.503 ops/s
Iteration  23: 4649463.905 ops/s
Iteration  24: 4677295.026 ops/s
Iteration  25: 4887005.475 ops/s
Iteration  26: 4833850.094 ops/s
Iteration  27: 4840071.192 ops/s
Iteration  28: 4811880.826 ops/s
Iteration  29: 5009922.979 ops/s
Iteration  30: 4865028.689 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_dispose":
  4767694.473 ±(99.9%) 80467.308 ops/s [Average]
  (min, avg, max) = (4524605.340, 4767694.473, 5047299.437), stdev = 120439.688
  CI (99.9%): [4687227.165, 4848161.781] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_dispose  thrpt   30  4767694.473 ± 80467.308  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1311816.778 ops/s
# Warmup Iteration   2: 4701075.345 ops/s
# Warmup Iteration   3: 6386770.092 ops/s
# Warmup Iteration   4: 6508362.709 ops/s
# Warmup Iteration   5: 6464524.754 ops/s
# Warmup Iteration   6: 6493053.128 ops/s
# Warmup Iteration   7: 6624827.650 ops/s
# Warmup Iteration   8: 6436505.869 ops/s
# Warmup Iteration   9: 6456359.388 ops/s
# Warmup Iteration  10: 6573559.625 ops/s
# Warmup Iteration  11: 6649120.960 ops/s
# Warmup Iteration  12: 6675630.753 ops/s
# Warmup Iteration  13: 6410218.954 ops/s
# Warmup Iteration  14: 6903501.140 ops/s
# Warmup Iteration  15: 6270799.288 ops/s
# Warmup Iteration  16: 6694445.963 ops/s
# Warmup Iteration  17: 6698560.677 ops/s
# Warmup Iteration  18: 6351355.661 ops/s
# Warmup Iteration  19: 6686913.394 ops/s
# Warmup Iteration  20: 6504787.652 ops/s
# Warmup Iteration  21: 6767325.099 ops/s
# Warmup Iteration  22: 6634561.234 ops/s
# Warmup Iteration  23: 6657788.968 ops/s
# Warmup Iteration  24: 6490208.812 ops/s
# Warmup Iteration  25: 6554292.599 ops/s
# Warmup Iteration  26: 6777856.081 ops/s
# Warmup Iteration  27: 6654090.872 ops/s
# Warmup Iteration  28: 6638341.051 ops/s
# Warmup Iteration  29: 6415345.122 ops/s
# Warmup Iteration  30: 6580152.490 ops/s
Iteration   1: 6387959.477 ops/s
Iteration   2: 6713142.167 ops/s
Iteration   3: 6379720.697 ops/s
Iteration   4: 6664424.730 ops/s
Iteration   5: 6687979.652 ops/s
Iteration   6: 6398631.157 ops/s
Iteration   7: 6823205.027 ops/s
Iteration   8: 6481654.449 ops/s
Iteration   9: 6742588.135 ops/s
Iteration  10: 6552609.386 ops/s
Iteration  11: 6347849.944 ops/s
Iteration  12: 6723694.795 ops/s
Iteration  13: 6511373.916 ops/s
Iteration  14: 6307754.960 ops/s
Iteration  15: 6792938.948 ops/s
Iteration  16: 6852699.438 ops/s
Iteration  17: 6285749.952 ops/s
Iteration  18: 6791480.438 ops/s
Iteration  19: 6315218.655 ops/s
Iteration  20: 6857690.149 ops/s
Iteration  21: 6536032.808 ops/s
Iteration  22: 6710205.025 ops/s
Iteration  23: 6416765.089 ops/s
Iteration  24: 6528360.856 ops/s
Iteration  25: 6812484.978 ops/s
Iteration  26: 6458053.510 ops/s
Iteration  27: 6811580.026 ops/s
Iteration  28: 6649352.348 ops/s
Iteration  29: 6355094.828 ops/s
Iteration  30: 6856946.584 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoOnLifecycleTest._Benchmark.benchmark_dispose":
  6591774.738 ±(99.9%) 129687.913 ops/s [Average]
  (min, avg, max) = (6285749.952, 6591774.738, 6857690.149), stdev = 194110.778
  CI (99.9%): [6462086.825, 6721462.651] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score        Error  Units
FlowableDoOnLifecycleTest._Benchmark.benchmark_dispose  thrpt   30  6591774.738 ± 129687.913  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipIterableFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipIterableFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 208604.041 ops/s
# Warmup Iteration   2: 436852.190 ops/s
# Warmup Iteration   3: 520184.235 ops/s
# Warmup Iteration   4: 499710.129 ops/s
# Warmup Iteration   5: 525608.566 ops/s
# Warmup Iteration   6: 514074.108 ops/s
# Warmup Iteration   7: 484245.072 ops/s
# Warmup Iteration   8: 530182.335 ops/s
# Warmup Iteration   9: 516060.241 ops/s
# Warmup Iteration  10: 518761.984 ops/s
# Warmup Iteration  11: 515104.436 ops/s
# Warmup Iteration  12: 502639.211 ops/s
# Warmup Iteration  13: 519868.739 ops/s
# Warmup Iteration  14: 502363.029 ops/s
# Warmup Iteration  15: 510853.983 ops/s
# Warmup Iteration  16: 513299.084 ops/s
# Warmup Iteration  17: 548819.876 ops/s
# Warmup Iteration  18: 529861.384 ops/s
# Warmup Iteration  19: 520788.662 ops/s
# Warmup Iteration  20: 539480.938 ops/s
# Warmup Iteration  21: 533738.167 ops/s
# Warmup Iteration  22: 438942.947 ops/s
# Warmup Iteration  23: 538147.972 ops/s
# Warmup Iteration  24: 531841.036 ops/s
# Warmup Iteration  25: 553971.154 ops/s
# Warmup Iteration  26: 537947.235 ops/s
# Warmup Iteration  27: 521076.363 ops/s
# Warmup Iteration  28: 543989.762 ops/s
# Warmup Iteration  29: 530042.038 ops/s
# Warmup Iteration  30: 529210.288 ops/s
Iteration   1: 549260.786 ops/s
Iteration   2: 514250.790 ops/s
Iteration   3: 518292.464 ops/s
Iteration   4: 527570.330 ops/s
Iteration   5: 537293.636 ops/s
Iteration   6: 555358.811 ops/s
Iteration   7: 529095.092 ops/s
Iteration   8: 541399.030 ops/s
Iteration   9: 523364.053 ops/s
Iteration  10: 530460.872 ops/s
Iteration  11: 559523.396 ops/s
Iteration  12: 531481.762 ops/s
Iteration  13: 542006.109 ops/s
Iteration  14: 528811.475 ops/s
Iteration  15: 537945.896 ops/s
Iteration  16: 530486.610 ops/s
Iteration  17: 521634.103 ops/s
Iteration  18: 551132.459 ops/s
Iteration  19: 526748.489 ops/s
Iteration  20: 564267.024 ops/s
Iteration  21: 520344.086 ops/s
Iteration  22: 531841.247 ops/s
Iteration  23: 548928.344 ops/s
Iteration  24: 536047.437 ops/s
Iteration  25: 535911.666 ops/s
Iteration  26: 546317.703 ops/s
Iteration  27: 551126.964 ops/s
Iteration  28: 541087.609 ops/s
Iteration  29: 537034.877 ops/s
Iteration  30: 526901.817 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipIterableFunctionReturnsNull":
  536530.831 ±(99.9%) 8376.854 ops/s [Average]
  (min, avg, max) = (514250.790, 536530.831, 564267.024), stdev = 12538.082
  CI (99.9%): [528153.977, 544907.685] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_zipIterableFunctionReturnsNull  thrpt   30  536530.831 ± 8376.854  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipIterable2FunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipIterable2FunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 236510.176 ops/s
# Warmup Iteration   2: 448201.899 ops/s
# Warmup Iteration   3: 478466.373 ops/s
# Warmup Iteration   4: 461450.300 ops/s
# Warmup Iteration   5: 535892.390 ops/s
# Warmup Iteration   6: 457679.175 ops/s
# Warmup Iteration   7: 513578.711 ops/s
# Warmup Iteration   8: 533797.196 ops/s
# Warmup Iteration   9: 510506.059 ops/s
# Warmup Iteration  10: 510421.460 ops/s
# Warmup Iteration  11: 530497.327 ops/s
# Warmup Iteration  12: 502656.678 ops/s
# Warmup Iteration  13: 527491.098 ops/s
# Warmup Iteration  14: 504540.887 ops/s
# Warmup Iteration  15: 523354.249 ops/s
# Warmup Iteration  16: 536348.618 ops/s
# Warmup Iteration  17: 523902.124 ops/s
# Warmup Iteration  18: 534994.841 ops/s
# Warmup Iteration  19: 546150.551 ops/s
# Warmup Iteration  20: 527411.292 ops/s
# Warmup Iteration  21: 548147.377 ops/s
# Warmup Iteration  22: 544169.312 ops/s
# Warmup Iteration  23: 519905.902 ops/s
# Warmup Iteration  24: 541600.185 ops/s
# Warmup Iteration  25: 551835.763 ops/s
# Warmup Iteration  26: 517369.450 ops/s
# Warmup Iteration  27: 557377.175 ops/s
# Warmup Iteration  28: 545627.072 ops/s
# Warmup Iteration  29: 530002.594 ops/s
# Warmup Iteration  30: 552516.965 ops/s
Iteration   1: 513723.730 ops/s
Iteration   2: 518630.507 ops/s
Iteration   3: 527634.794 ops/s
Iteration   4: 539768.003 ops/s
Iteration   5: 536727.628 ops/s
Iteration   6: 523040.168 ops/s
Iteration   7: 548876.515 ops/s
Iteration   8: 523740.406 ops/s
Iteration   9: 542336.483 ops/s
Iteration  10: 525467.408 ops/s
Iteration  11: 534583.856 ops/s
Iteration  12: 532720.415 ops/s
Iteration  13: 519743.680 ops/s
Iteration  14: 529848.178 ops/s
Iteration  15: 530796.139 ops/s
Iteration  16: 526178.230 ops/s
Iteration  17: 525748.249 ops/s
Iteration  18: 547024.470 ops/s
Iteration  19: 529048.979 ops/s
Iteration  20: 539612.006 ops/s
Iteration  21: 538393.426 ops/s
Iteration  22: 535879.580 ops/s
Iteration  23: 548386.473 ops/s
Iteration  24: 540551.548 ops/s
Iteration  25: 539471.319 ops/s
Iteration  26: 531447.991 ops/s
Iteration  27: 554008.837 ops/s
Iteration  28: 539377.291 ops/s
Iteration  29: 526872.306 ops/s
Iteration  30: 548596.756 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipIterable2FunctionReturnsNull":
  533941.179 ±(99.9%) 6689.663 ops/s [Average]
  (min, avg, max) = (513723.730, 533941.179, 554008.837), stdev = 10012.774
  CI (99.9%): [527251.516, 540630.842] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_zipIterable2FunctionReturnsNull  thrpt   30  533941.179 ± 6689.663  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithIterableCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithIterableCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 202148.029 ops/s
# Warmup Iteration   2: 383446.962 ops/s
# Warmup Iteration   3: 441432.442 ops/s
# Warmup Iteration   4: 457248.113 ops/s
# Warmup Iteration   5: 405441.785 ops/s
# Warmup Iteration   6: 486385.962 ops/s
# Warmup Iteration   7: 475707.068 ops/s
# Warmup Iteration   8: 486504.052 ops/s
# Warmup Iteration   9: 489892.287 ops/s
# Warmup Iteration  10: 465744.995 ops/s
# Warmup Iteration  11: 477022.365 ops/s
# Warmup Iteration  12: 467882.815 ops/s
# Warmup Iteration  13: 480337.802 ops/s
# Warmup Iteration  14: 496477.848 ops/s
# Warmup Iteration  15: 463724.868 ops/s
# Warmup Iteration  16: 405307.596 ops/s
# Warmup Iteration  17: 417666.507 ops/s
# Warmup Iteration  18: 490133.916 ops/s
# Warmup Iteration  19: 512914.007 ops/s
# Warmup Iteration  20: 495319.171 ops/s
# Warmup Iteration  21: 481180.927 ops/s
# Warmup Iteration  22: 516056.598 ops/s
# Warmup Iteration  23: 480966.091 ops/s
# Warmup Iteration  24: 496224.761 ops/s
# Warmup Iteration  25: 511591.838 ops/s
# Warmup Iteration  26: 480296.611 ops/s
# Warmup Iteration  27: 483327.299 ops/s
# Warmup Iteration  28: 517346.921 ops/s
# Warmup Iteration  29: 478842.637 ops/s
# Warmup Iteration  30: 515802.724 ops/s
Iteration   1: 483653.507 ops/s
Iteration   2: 498813.771 ops/s
Iteration   3: 488647.895 ops/s
Iteration   4: 500996.513 ops/s
Iteration   5: 511416.913 ops/s
Iteration   6: 485068.946 ops/s
Iteration   7: 491082.447 ops/s
Iteration   8: 503652.483 ops/s
Iteration   9: 502955.502 ops/s
Iteration  10: 505255.298 ops/s
Iteration  11: 492594.702 ops/s
Iteration  12: 495361.083 ops/s
Iteration  13: 508029.125 ops/s
Iteration  14: 506093.910 ops/s
Iteration  15: 468706.465 ops/s
Iteration  16: 513877.534 ops/s
Iteration  17: 475872.968 ops/s
Iteration  18: 499617.333 ops/s
Iteration  19: 510710.442 ops/s
Iteration  20: 484018.332 ops/s
Iteration  21: 487584.897 ops/s
Iteration  22: 493379.212 ops/s
Iteration  23: 502008.497 ops/s
Iteration  24: 502111.662 ops/s
Iteration  25: 505522.397 ops/s
Iteration  26: 502760.070 ops/s
Iteration  27: 481605.346 ops/s
Iteration  28: 518172.641 ops/s
Iteration  29: 496640.869 ops/s
Iteration  30: 505730.101 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_zipWithIterableCombinerReturnsNull":
  497398.029 ±(99.9%) 7784.939 ops/s [Average]
  (min, avg, max) = (468706.465, 497398.029, 518172.641), stdev = 11652.131
  CI (99.9%): [489613.090, 505182.967] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_zipWithIterableCombinerReturnsNull  thrpt   30  497398.029 ± 7784.939  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_withLatestFromCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_withLatestFromCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 105105.478 ops/s
# Warmup Iteration   2: 442882.722 ops/s
# Warmup Iteration   3: 506420.759 ops/s
# Warmup Iteration   4: 460648.819 ops/s
# Warmup Iteration   5: 527072.407 ops/s
# Warmup Iteration   6: 480032.690 ops/s
# Warmup Iteration   7: 485862.953 ops/s
# Warmup Iteration   8: 522606.334 ops/s
# Warmup Iteration   9: 550329.582 ops/s
# Warmup Iteration  10: 525429.982 ops/s
# Warmup Iteration  11: 521635.193 ops/s
# Warmup Iteration  12: 546679.173 ops/s
# Warmup Iteration  13: 516287.175 ops/s
# Warmup Iteration  14: 529226.462 ops/s
# Warmup Iteration  15: 532587.116 ops/s
# Warmup Iteration  16: 532833.704 ops/s
# Warmup Iteration  17: 564966.860 ops/s
# Warmup Iteration  18: 535133.873 ops/s
# Warmup Iteration  19: 560150.041 ops/s
# Warmup Iteration  20: 528766.995 ops/s
# Warmup Iteration  21: 565675.287 ops/s
# Warmup Iteration  22: 541493.726 ops/s
# Warmup Iteration  23: 535141.060 ops/s
# Warmup Iteration  24: 533685.139 ops/s
# Warmup Iteration  25: 569431.746 ops/s
# Warmup Iteration  26: 535881.356 ops/s
# Warmup Iteration  27: 544542.565 ops/s
# Warmup Iteration  28: 569242.232 ops/s
# Warmup Iteration  29: 543992.091 ops/s
# Warmup Iteration  30: 556049.563 ops/s
Iteration   1: 544177.673 ops/s
Iteration   2: 533323.962 ops/s
Iteration   3: 568746.155 ops/s
Iteration   4: 535723.417 ops/s
Iteration   5: 552090.084 ops/s
Iteration   6: 547720.879 ops/s
Iteration   7: 563149.183 ops/s
Iteration   8: 548301.107 ops/s
Iteration   9: 561141.361 ops/s
Iteration  10: 557714.889 ops/s
Iteration  11: 553965.822 ops/s
Iteration  12: 541605.094 ops/s
Iteration  13: 558954.892 ops/s
Iteration  14: 539136.265 ops/s
Iteration  15: 533459.225 ops/s
Iteration  16: 585186.787 ops/s
Iteration  17: 529681.145 ops/s
Iteration  18: 550303.813 ops/s
Iteration  19: 568651.480 ops/s
Iteration  20: 560008.702 ops/s
Iteration  21: 550262.427 ops/s
Iteration  22: 575215.198 ops/s
Iteration  23: 536701.090 ops/s
Iteration  24: 558103.173 ops/s
Iteration  25: 539658.983 ops/s
Iteration  26: 567257.457 ops/s
Iteration  27: 531875.733 ops/s
Iteration  28: 559750.335 ops/s
Iteration  29: 545331.538 ops/s
Iteration  30: 537159.914 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_withLatestFromCombinerReturnsNull":
  551145.259 ±(99.9%) 9405.580 ops/s [Average]
  (min, avg, max) = (529681.145, 551145.259, 585186.787), stdev = 14077.831
  CI (99.9%): [541739.679, 560550.840] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_withLatestFromCombinerReturnsNull  thrpt   30  551145.259 ± 9405.580  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2468798.906 ops/s
# Warmup Iteration   2: 5552220.030 ops/s
# Warmup Iteration   3: 7484261.945 ops/s
# Warmup Iteration   4: 7358042.606 ops/s
# Warmup Iteration   5: 7743093.546 ops/s
# Warmup Iteration   6: 7533307.429 ops/s
# Warmup Iteration   7: 7347042.732 ops/s
# Warmup Iteration   8: 7509676.738 ops/s
# Warmup Iteration   9: 7455312.089 ops/s
# Warmup Iteration  10: 7646536.297 ops/s
# Warmup Iteration  11: 5781212.183 ops/s
# Warmup Iteration  12: 7483273.847 ops/s
# Warmup Iteration  13: 7258715.380 ops/s
# Warmup Iteration  14: 7491447.293 ops/s
# Warmup Iteration  15: 7568989.773 ops/s
# Warmup Iteration  16: 7298757.761 ops/s
# Warmup Iteration  17: 7648257.801 ops/s
# Warmup Iteration  18: 7749190.456 ops/s
# Warmup Iteration  19: 7557663.799 ops/s
# Warmup Iteration  20: 7850098.501 ops/s
# Warmup Iteration  21: 7421486.322 ops/s
# Warmup Iteration  22: 7782057.623 ops/s
# Warmup Iteration  23: 7483021.030 ops/s
# Warmup Iteration  24: 7384247.239 ops/s
# Warmup Iteration  25: 7822957.517 ops/s
# Warmup Iteration  26: 7491995.406 ops/s
# Warmup Iteration  27: 7823590.817 ops/s
# Warmup Iteration  28: 7514049.436 ops/s
# Warmup Iteration  29: 7635032.915 ops/s
# Warmup Iteration  30: 7813870.279 ops/s
Iteration   1: 7321089.113 ops/s
Iteration   2: 7768665.588 ops/s
Iteration   3: 7939319.894 ops/s
Iteration   4: 7506025.808 ops/s
Iteration   5: 7551506.164 ops/s
Iteration   6: 7594977.479 ops/s
Iteration   7: 7844832.825 ops/s
Iteration   8: 7514350.644 ops/s
Iteration   9: 7940209.860 ops/s
Iteration  10: 7824664.235 ops/s
Iteration  11: 7474471.855 ops/s
Iteration  12: 7781278.377 ops/s
Iteration  13: 7513101.893 ops/s
Iteration  14: 7409767.356 ops/s
Iteration  15: 7933120.765 ops/s
Iteration  16: 7533261.688 ops/s
Iteration  17: 7698070.020 ops/s
Iteration  18: 7852878.060 ops/s
Iteration  19: 7400823.164 ops/s
Iteration  20: 7972136.200 ops/s
Iteration  21: 8018792.104 ops/s
Iteration  22: 7448565.964 ops/s
Iteration  23: 7772552.011 ops/s
Iteration  24: 7597743.066 ops/s
Iteration  25: 7736806.794 ops/s
Iteration  26: 7562908.972 ops/s
Iteration  27: 7847369.020 ops/s
Iteration  28: 7645317.317 ops/s
Iteration  29: 7500408.333 ops/s
Iteration  30: 7764180.705 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDetachTest._Benchmark.benchmark_dispose":
  7675639.842 ±(99.9%) 130254.116 ops/s [Average]
  (min, avg, max) = (7321089.113, 7675639.842, 8018792.104), stdev = 194958.243
  CI (99.9%): [7545385.727, 7805893.958] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
FlowableDetachTest._Benchmark.benchmark_dispose  thrpt   30  7675639.842 ± 130254.116  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanSeedSupplierFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanSeedSupplierFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 88846.377 ops/s
# Warmup Iteration   2: 432379.547 ops/s
# Warmup Iteration   3: 477069.250 ops/s
# Warmup Iteration   4: 497416.152 ops/s
# Warmup Iteration   5: 506277.830 ops/s
# Warmup Iteration   6: 482810.405 ops/s
# Warmup Iteration   7: 488824.733 ops/s
# Warmup Iteration   8: 499711.737 ops/s
# Warmup Iteration   9: 475783.494 ops/s
# Warmup Iteration  10: 504803.709 ops/s
# Warmup Iteration  11: 461540.286 ops/s
# Warmup Iteration  12: 504318.260 ops/s
# Warmup Iteration  13: 483802.923 ops/s
# Warmup Iteration  14: 497235.077 ops/s
# Warmup Iteration  15: 500640.974 ops/s
# Warmup Iteration  16: 487449.445 ops/s
# Warmup Iteration  17: 521227.828 ops/s
# Warmup Iteration  18: 521805.093 ops/s
# Warmup Iteration  19: 534276.161 ops/s
# Warmup Iteration  20: 537124.889 ops/s
# Warmup Iteration  21: 494331.211 ops/s
# Warmup Iteration  22: 528418.116 ops/s
# Warmup Iteration  23: 511781.395 ops/s
# Warmup Iteration  24: 520725.901 ops/s
# Warmup Iteration  25: 497910.284 ops/s
# Warmup Iteration  26: 538171.012 ops/s
# Warmup Iteration  27: 526378.292 ops/s
# Warmup Iteration  28: 523055.931 ops/s
# Warmup Iteration  29: 527551.133 ops/s
# Warmup Iteration  30: 516735.489 ops/s
Iteration   1: 530023.480 ops/s
Iteration   2: 514527.336 ops/s
Iteration   3: 515667.960 ops/s
Iteration   4: 530442.708 ops/s
Iteration   5: 535635.566 ops/s
Iteration   6: 508253.570 ops/s
Iteration   7: 544145.284 ops/s
Iteration   8: 504894.974 ops/s
Iteration   9: 530487.116 ops/s
Iteration  10: 504385.101 ops/s
Iteration  11: 512730.841 ops/s
Iteration  12: 522662.494 ops/s
Iteration  13: 512050.334 ops/s
Iteration  14: 528504.836 ops/s
Iteration  15: 516456.421 ops/s
Iteration  16: 499509.904 ops/s
Iteration  17: 519169.369 ops/s
Iteration  18: 514374.756 ops/s
Iteration  19: 517876.885 ops/s
Iteration  20: 501992.007 ops/s
Iteration  21: 526669.465 ops/s
Iteration  22: 528108.204 ops/s
Iteration  23: 498710.990 ops/s
Iteration  24: 535768.921 ops/s
Iteration  25: 493052.236 ops/s
Iteration  26: 503239.775 ops/s
Iteration  27: 534458.614 ops/s
Iteration  28: 517675.480 ops/s
Iteration  29: 533836.346 ops/s
Iteration  30: 511196.591 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanSeedSupplierFunctionReturnsNull":
  518216.919 ±(99.9%) 8774.372 ops/s [Average]
  (min, avg, max) = (493052.236, 518216.919, 544145.284), stdev = 13133.068
  CI (99.9%): [509442.546, 526991.291] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_scanSeedSupplierFunctionReturnsNull  thrpt   30  518216.919 ± 8774.372  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_singleSubscriptionOnFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_singleSubscriptionOnFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 132947.923 ops/s
# Warmup Iteration   2: 306147.879 ops/s
# Warmup Iteration   3: 851531.492 ops/s
# Warmup Iteration   4: 1029001.951 ops/s
# Warmup Iteration   5: 1206312.733 ops/s
# Warmup Iteration   6: 1038662.062 ops/s
# Warmup Iteration   7: 1295901.117 ops/s
# Warmup Iteration   8: 1271356.919 ops/s
# Warmup Iteration   9: 1268728.815 ops/s
# Warmup Iteration  10: 1290057.021 ops/s
# Warmup Iteration  11: 1231001.319 ops/s
# Warmup Iteration  12: 1275199.118 ops/s
# Warmup Iteration  13: 1289171.484 ops/s
# Warmup Iteration  14: 1234846.719 ops/s
# Warmup Iteration  15: 1309484.108 ops/s
# Warmup Iteration  16: 1239349.507 ops/s
# Warmup Iteration  17: 1332754.472 ops/s
# Warmup Iteration  18: 1278040.868 ops/s
# Warmup Iteration  19: 1239052.774 ops/s
# Warmup Iteration  20: 1328871.123 ops/s
# Warmup Iteration  21: 1247806.165 ops/s
# Warmup Iteration  22: 1238767.938 ops/s
# Warmup Iteration  23: 1345811.794 ops/s
# Warmup Iteration  24: 1271402.473 ops/s
# Warmup Iteration  25: 1240734.649 ops/s
# Warmup Iteration  26: 1310737.161 ops/s
# Warmup Iteration  27: 1271536.334 ops/s
# Warmup Iteration  28: 1253052.655 ops/s
# Warmup Iteration  29: 1337761.040 ops/s
# Warmup Iteration  30: 1232551.075 ops/s
Iteration   1: 1317103.582 ops/s
Iteration   2: 1250569.431 ops/s
Iteration   3: 1266256.449 ops/s
Iteration   4: 1296214.893 ops/s
Iteration   5: 1255889.652 ops/s
Iteration   6: 1262725.786 ops/s
Iteration   7: 1334753.927 ops/s
Iteration   8: 1265805.746 ops/s
Iteration   9: 1309722.510 ops/s
Iteration  10: 1237686.450 ops/s
Iteration  11: 1320095.150 ops/s
Iteration  12: 1264246.961 ops/s
Iteration  13: 1278857.930 ops/s
Iteration  14: 1294722.502 ops/s
Iteration  15: 1308385.040 ops/s
Iteration  16: 1256677.391 ops/s
Iteration  17: 1303187.143 ops/s
Iteration  18: 1254177.040 ops/s
Iteration  19: 1274386.789 ops/s
Iteration  20: 1289964.111 ops/s
Iteration  21: 1284308.473 ops/s
Iteration  22: 1289962.564 ops/s
Iteration  23: 1266854.990 ops/s
Iteration  24: 1329234.496 ops/s
Iteration  25: 1250878.308 ops/s
Iteration  26: 1255243.475 ops/s
Iteration  27: 1284173.876 ops/s
Iteration  28: 1294556.912 ops/s
Iteration  29: 1279713.543 ops/s
Iteration  30: 1284376.820 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRetryTest._Benchmark.benchmark_singleSubscriptionOnFirst":
  1282024.398 ±(99.9%) 16878.215 ops/s [Average]
  (min, avg, max) = (1237686.450, 1282024.398, 1334753.927), stdev = 25262.520
  CI (99.9%): [1265146.183, 1298902.613] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableRetryTest._Benchmark.benchmark_singleSubscriptionOnFirst  thrpt   30  1282024.398 ± 16878.215  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanSeedFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanSeedFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 85925.026 ops/s
# Warmup Iteration   2: 413921.640 ops/s
# Warmup Iteration   3: 505695.913 ops/s
# Warmup Iteration   4: 484513.132 ops/s
# Warmup Iteration   5: 497788.740 ops/s
# Warmup Iteration   6: 500330.376 ops/s
# Warmup Iteration   7: 482954.510 ops/s
# Warmup Iteration   8: 490642.464 ops/s
# Warmup Iteration   9: 494812.489 ops/s
# Warmup Iteration  10: 501233.824 ops/s
# Warmup Iteration  11: 488704.527 ops/s
# Warmup Iteration  12: 484685.357 ops/s
# Warmup Iteration  13: 523777.625 ops/s
# Warmup Iteration  14: 473684.735 ops/s
# Warmup Iteration  15: 513850.786 ops/s
# Warmup Iteration  16: 484275.434 ops/s
# Warmup Iteration  17: 537790.572 ops/s
# Warmup Iteration  18: 521540.858 ops/s
# Warmup Iteration  19: 530928.733 ops/s
# Warmup Iteration  20: 514873.846 ops/s
# Warmup Iteration  21: 520742.135 ops/s
# Warmup Iteration  22: 531220.081 ops/s
# Warmup Iteration  23: 513899.295 ops/s
# Warmup Iteration  24: 516928.409 ops/s
# Warmup Iteration  25: 514577.446 ops/s
# Warmup Iteration  26: 516914.721 ops/s
# Warmup Iteration  27: 543824.738 ops/s
# Warmup Iteration  28: 510477.302 ops/s
# Warmup Iteration  29: 516942.132 ops/s
# Warmup Iteration  30: 539177.443 ops/s
Iteration   1: 517664.138 ops/s
Iteration   2: 512093.733 ops/s
Iteration   3: 533422.810 ops/s
Iteration   4: 509564.995 ops/s
Iteration   5: 514299.510 ops/s
Iteration   6: 510854.309 ops/s
Iteration   7: 509485.486 ops/s
Iteration   8: 533070.494 ops/s
Iteration   9: 511092.475 ops/s
Iteration  10: 541531.510 ops/s
Iteration  11: 524834.422 ops/s
Iteration  12: 514094.242 ops/s
Iteration  13: 527669.280 ops/s
Iteration  14: 515347.011 ops/s
Iteration  15: 509578.726 ops/s
Iteration  16: 528446.727 ops/s
Iteration  17: 501440.523 ops/s
Iteration  18: 526543.004 ops/s
Iteration  19: 510120.626 ops/s
Iteration  20: 536196.264 ops/s
Iteration  21: 526398.434 ops/s
Iteration  22: 505537.481 ops/s
Iteration  23: 528496.388 ops/s
Iteration  24: 522170.389 ops/s
Iteration  25: 527223.877 ops/s
Iteration  26: 515461.544 ops/s
Iteration  27: 533564.409 ops/s
Iteration  28: 521522.947 ops/s
Iteration  29: 519269.781 ops/s
Iteration  30: 529409.933 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_scanSeedFunctionReturnsNull":
  520546.849 ±(99.9%) 6828.751 ops/s [Average]
  (min, avg, max) = (501440.523, 520546.849, 541531.510), stdev = 10220.954
  CI (99.9%): [513718.098, 527375.600] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_scanSeedFunctionReturnsNull  thrpt   30  520546.849 ± 6828.751  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_completeError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_completeError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21286.400 ops/s
# Warmup Iteration   2: 133142.128 ops/s
# Warmup Iteration   3: 303263.195 ops/s
# Warmup Iteration   4: 383654.215 ops/s
# Warmup Iteration   5: 401330.368 ops/s
# Warmup Iteration   6: 406034.264 ops/s
# Warmup Iteration   7: 419923.013 ops/s
# Warmup Iteration   8: 419310.953 ops/s
# Warmup Iteration   9: 423977.818 ops/s
# Warmup Iteration  10: 432855.161 ops/s
# Warmup Iteration  11: 412730.031 ops/s
# Warmup Iteration  12: 441853.698 ops/s
# Warmup Iteration  13: 413483.969 ops/s
# Warmup Iteration  14: 406674.762 ops/s
# Warmup Iteration  15: 435613.719 ops/s
# Warmup Iteration  16: 434259.723 ops/s
# Warmup Iteration  17: 432120.731 ops/s
# Warmup Iteration  18: 421043.371 ops/s
# Warmup Iteration  19: 440278.133 ops/s
# Warmup Iteration  20: 434701.095 ops/s
# Warmup Iteration  21: 443065.979 ops/s
# Warmup Iteration  22: 430288.239 ops/s
# Warmup Iteration  23: 444930.315 ops/s
# Warmup Iteration  24: 406006.077 ops/s
# Warmup Iteration  25: 423968.705 ops/s
# Warmup Iteration  26: 420145.937 ops/s
# Warmup Iteration  27: 436130.453 ops/s
# Warmup Iteration  28: 436814.187 ops/s
# Warmup Iteration  29: 441179.322 ops/s
# Warmup Iteration  30: 429246.597 ops/s
Iteration   1: 431897.013 ops/s
Iteration   2: 454403.693 ops/s
Iteration   3: 431880.326 ops/s
Iteration   4: 428335.398 ops/s
Iteration   5: 454438.957 ops/s
Iteration   6: 429460.715 ops/s
Iteration   7: 436602.560 ops/s
Iteration   8: 443537.829 ops/s
Iteration   9: 429690.658 ops/s
Iteration  10: 438872.769 ops/s
Iteration  11: 430450.476 ops/s
Iteration  12: 444565.895 ops/s
Iteration  13: 432360.849 ops/s
Iteration  14: 429174.818 ops/s
Iteration  15: 446791.934 ops/s
Iteration  16: 434183.852 ops/s
Iteration  17: 438375.450 ops/s
Iteration  18: 431978.671 ops/s
Iteration  19: 450237.935 ops/s
Iteration  20: 440056.916 ops/s
Iteration  21: 424066.463 ops/s
Iteration  22: 433810.173 ops/s
Iteration  23: 445436.460 ops/s
Iteration  24: 429945.335 ops/s
Iteration  25: 450248.388 ops/s
Iteration  26: 453252.148 ops/s
Iteration  27: 423981.648 ops/s
Iteration  28: 458041.696 ops/s
Iteration  29: 421979.441 ops/s
Iteration  30: 443664.638 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_completeError":
  438057.437 ±(99.9%) 6768.306 ops/s [Average]
  (min, avg, max) = (421979.441, 438057.437, 458041.696), stdev = 10130.483
  CI (99.9%): [431289.130, 444825.743] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_completeError  thrpt   30  438057.437 ± 6768.306  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_successError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_successError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39855.339 ops/s
# Warmup Iteration   2: 164681.531 ops/s
# Warmup Iteration   3: 345560.713 ops/s
# Warmup Iteration   4: 372388.912 ops/s
# Warmup Iteration   5: 434571.041 ops/s
# Warmup Iteration   6: 340639.506 ops/s
# Warmup Iteration   7: 429051.856 ops/s
# Warmup Iteration   8: 419824.853 ops/s
# Warmup Iteration   9: 423279.149 ops/s
# Warmup Iteration  10: 433867.258 ops/s
# Warmup Iteration  11: 410640.553 ops/s
# Warmup Iteration  12: 439596.662 ops/s
# Warmup Iteration  13: 436799.150 ops/s
# Warmup Iteration  14: 409440.669 ops/s
# Warmup Iteration  15: 427879.662 ops/s
# Warmup Iteration  16: 420449.675 ops/s
# Warmup Iteration  17: 428980.588 ops/s
# Warmup Iteration  18: 432635.502 ops/s
# Warmup Iteration  19: 452928.468 ops/s
# Warmup Iteration  20: 422335.804 ops/s
# Warmup Iteration  21: 430636.621 ops/s
# Warmup Iteration  22: 444045.216 ops/s
# Warmup Iteration  23: 420717.909 ops/s
# Warmup Iteration  24: 425697.392 ops/s
# Warmup Iteration  25: 445119.055 ops/s
# Warmup Iteration  26: 428348.877 ops/s
# Warmup Iteration  27: 449436.061 ops/s
# Warmup Iteration  28: 436337.639 ops/s
# Warmup Iteration  29: 430219.328 ops/s
# Warmup Iteration  30: 443814.963 ops/s
Iteration   1: 426897.280 ops/s
Iteration   2: 426426.057 ops/s
Iteration   3: 445355.365 ops/s
Iteration   4: 431332.211 ops/s
Iteration   5: 428453.071 ops/s
Iteration   6: 448940.199 ops/s
Iteration   7: 419440.487 ops/s
Iteration   8: 448486.869 ops/s
Iteration   9: 428841.447 ops/s
Iteration  10: 434748.952 ops/s
Iteration  11: 426430.625 ops/s
Iteration  12: 445587.734 ops/s
Iteration  13: 439316.974 ops/s
Iteration  14: 423631.937 ops/s
Iteration  15: 428109.332 ops/s
Iteration  16: 448441.191 ops/s
Iteration  17: 424164.735 ops/s
Iteration  18: 430909.864 ops/s
Iteration  19: 448775.859 ops/s
Iteration  20: 431203.254 ops/s
Iteration  21: 441806.289 ops/s
Iteration  22: 419538.123 ops/s
Iteration  23: 437488.922 ops/s
Iteration  24: 453169.833 ops/s
Iteration  25: 422286.273 ops/s
Iteration  26: 446985.438 ops/s
Iteration  27: 414873.215 ops/s
Iteration  28: 368576.890 ops/s
Iteration  29: 436163.070 ops/s
Iteration  30: 435257.412 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_successError":
  432054.630 ±(99.9%) 10632.202 ops/s [Average]
  (min, avg, max) = (368576.890, 432054.630, 453169.833), stdev = 15913.780
  CI (99.9%): [421422.429, 442686.832] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_successError  thrpt   30  432054.630 ± 10632.202  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_badInnerSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_badInnerSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18498.863 ops/s
# Warmup Iteration   2: 81671.155 ops/s
# Warmup Iteration   3: 122914.106 ops/s
# Warmup Iteration   4: 130247.128 ops/s
# Warmup Iteration   5: 125299.522 ops/s
# Warmup Iteration   6: 139685.736 ops/s
# Warmup Iteration   7: 145250.374 ops/s
# Warmup Iteration   8: 144082.921 ops/s
# Warmup Iteration   9: 158369.129 ops/s
# Warmup Iteration  10: 142762.908 ops/s
# Warmup Iteration  11: 141202.855 ops/s
# Warmup Iteration  12: 144439.344 ops/s
# Warmup Iteration  13: 140904.394 ops/s
# Warmup Iteration  14: 147576.081 ops/s
# Warmup Iteration  15: 146798.152 ops/s
# Warmup Iteration  16: 141346.381 ops/s
# Warmup Iteration  17: 149822.138 ops/s
# Warmup Iteration  18: 150952.440 ops/s
# Warmup Iteration  19: 144204.284 ops/s
# Warmup Iteration  20: 147696.133 ops/s
# Warmup Iteration  21: 151377.160 ops/s
# Warmup Iteration  22: 147126.095 ops/s
# Warmup Iteration  23: 148445.934 ops/s
# Warmup Iteration  24: 146572.299 ops/s
# Warmup Iteration  25: 154331.671 ops/s
# Warmup Iteration  26: 139923.099 ops/s
# Warmup Iteration  27: 145992.705 ops/s
# Warmup Iteration  28: 152987.566 ops/s
# Warmup Iteration  29: 146094.886 ops/s
# Warmup Iteration  30: 146753.490 ops/s
Iteration   1: 149568.225 ops/s
Iteration   2: 142877.255 ops/s
Iteration   3: 154660.176 ops/s
Iteration   4: 139622.806 ops/s
Iteration   5: 146319.406 ops/s
Iteration   6: 144352.331 ops/s
Iteration   7: 143894.758 ops/s
Iteration   8: 143787.754 ops/s
Iteration   9: 152461.368 ops/s
Iteration  10: 145369.238 ops/s
Iteration  11: 151440.316 ops/s
Iteration  12: 151841.927 ops/s
Iteration  13: 145619.783 ops/s
Iteration  14: 148504.413 ops/s
Iteration  15: 145824.300 ops/s
Iteration  16: 144793.098 ops/s
Iteration  17: 146387.496 ops/s
Iteration  18: 148876.143 ops/s
Iteration  19: 144546.664 ops/s
Iteration  20: 153675.973 ops/s
Iteration  21: 147417.552 ops/s
Iteration  22: 148404.010 ops/s
Iteration  23: 144874.764 ops/s
Iteration  24: 147376.422 ops/s
Iteration  25: 150794.885 ops/s
Iteration  26: 145726.034 ops/s
Iteration  27: 150950.333 ops/s
Iteration  28: 152075.616 ops/s
Iteration  29: 145648.115 ops/s
Iteration  30: 150099.987 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_badInnerSource":
  147593.038 ±(99.9%) 2385.674 ops/s [Average]
  (min, avg, max) = (139622.806, 147593.038, 154660.176), stdev = 3570.764
  CI (99.9%): [145207.365, 149978.712] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_badInnerSource  thrpt   30  147593.038 ± 2385.674  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_mapperReturnsNullFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_mapperReturnsNullFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106060.749 ops/s
# Warmup Iteration   2: 424927.302 ops/s
# Warmup Iteration   3: 538872.243 ops/s
# Warmup Iteration   4: 560313.457 ops/s
# Warmup Iteration   5: 580435.412 ops/s
# Warmup Iteration   6: 550614.603 ops/s
# Warmup Iteration   7: 572682.894 ops/s
# Warmup Iteration   8: 575714.656 ops/s
# Warmup Iteration   9: 543142.648 ops/s
# Warmup Iteration  10: 552110.965 ops/s
# Warmup Iteration  11: 530842.960 ops/s
# Warmup Iteration  12: 529757.432 ops/s
# Warmup Iteration  13: 579843.456 ops/s
# Warmup Iteration  14: 575983.250 ops/s
# Warmup Iteration  15: 592712.184 ops/s
# Warmup Iteration  16: 593615.320 ops/s
# Warmup Iteration  17: 600476.735 ops/s
# Warmup Iteration  18: 578344.908 ops/s
# Warmup Iteration  19: 620731.753 ops/s
# Warmup Iteration  20: 603942.920 ops/s
# Warmup Iteration  21: 603147.111 ops/s
# Warmup Iteration  22: 586680.606 ops/s
# Warmup Iteration  23: 618298.155 ops/s
# Warmup Iteration  24: 560568.413 ops/s
# Warmup Iteration  25: 613385.454 ops/s
# Warmup Iteration  26: 559898.771 ops/s
# Warmup Iteration  27: 599388.892 ops/s
# Warmup Iteration  28: 616873.372 ops/s
# Warmup Iteration  29: 582896.980 ops/s
# Warmup Iteration  30: 607280.596 ops/s
Iteration   1: 588271.081 ops/s
Iteration   2: 602055.965 ops/s
Iteration   3: 587948.990 ops/s
Iteration   4: 603409.454 ops/s
Iteration   5: 596438.480 ops/s
Iteration   6: 617125.210 ops/s
Iteration   7: 598132.285 ops/s
Iteration   8: 611478.535 ops/s
Iteration   9: 577007.683 ops/s
Iteration  10: 604977.498 ops/s
Iteration  11: 611257.437 ops/s
Iteration  12: 608363.428 ops/s
Iteration  13: 606950.675 ops/s
Iteration  14: 625372.482 ops/s
Iteration  15: 624888.770 ops/s
Iteration  16: 546536.729 ops/s
Iteration  17: 613447.006 ops/s
Iteration  18: 581607.609 ops/s
Iteration  19: 599219.304 ops/s
Iteration  20: 621196.903 ops/s
Iteration  21: 595179.357 ops/s
Iteration  22: 504685.512 ops/s
Iteration  23: 578947.404 ops/s
Iteration  24: 584333.038 ops/s
Iteration  25: 588547.382 ops/s
Iteration  26: 626181.658 ops/s
Iteration  27: 576012.124 ops/s
Iteration  28: 612220.462 ops/s
Iteration  29: 616758.410 ops/s
Iteration  30: 587615.213 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_mapperReturnsNullFlowable":
  596538.870 ±(99.9%) 16664.449 ops/s [Average]
  (min, avg, max) = (504685.512, 596538.870, 626181.658), stdev = 24942.564
  CI (99.9%): [579874.421, 613203.318] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_mapperReturnsNullFlowable  thrpt   30  596538.870 ± 16664.449  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 34175.148 ops/s
# Warmup Iteration   2: 136544.799 ops/s
# Warmup Iteration   3: 172847.419 ops/s
# Warmup Iteration   4: 172506.004 ops/s
# Warmup Iteration   5: 169370.239 ops/s
# Warmup Iteration   6: 174308.320 ops/s
# Warmup Iteration   7: 158621.897 ops/s
# Warmup Iteration   8: 179335.008 ops/s
# Warmup Iteration   9: 176926.777 ops/s
# Warmup Iteration  10: 180766.993 ops/s
# Warmup Iteration  11: 177522.583 ops/s
# Warmup Iteration  12: 179189.323 ops/s
# Warmup Iteration  13: 179029.305 ops/s
# Warmup Iteration  14: 176448.086 ops/s
# Warmup Iteration  15: 185891.919 ops/s
# Warmup Iteration  16: 186071.371 ops/s
# Warmup Iteration  17: 181986.510 ops/s
# Warmup Iteration  18: 198507.483 ops/s
# Warmup Iteration  19: 186525.140 ops/s
# Warmup Iteration  20: 186322.442 ops/s
# Warmup Iteration  21: 196614.144 ops/s
# Warmup Iteration  22: 188697.996 ops/s
# Warmup Iteration  23: 199348.057 ops/s
# Warmup Iteration  24: 193112.605 ops/s
# Warmup Iteration  25: 187817.860 ops/s
# Warmup Iteration  26: 196792.417 ops/s
# Warmup Iteration  27: 189670.035 ops/s
# Warmup Iteration  28: 189045.383 ops/s
# Warmup Iteration  29: 196559.383 ops/s
# Warmup Iteration  30: 187859.967 ops/s
Iteration   1: 197932.751 ops/s
Iteration   2: 187980.856 ops/s
Iteration   3: 194016.593 ops/s
Iteration   4: 200172.912 ops/s
Iteration   5: 189825.119 ops/s
Iteration   6: 187485.575 ops/s
Iteration   7: 200319.679 ops/s
Iteration   8: 192231.906 ops/s
Iteration   9: 186630.719 ops/s
Iteration  10: 198870.781 ops/s
Iteration  11: 185276.924 ops/s
Iteration  12: 191715.475 ops/s
Iteration  13: 197829.853 ops/s
Iteration  14: 191757.924 ops/s
Iteration  15: 191404.144 ops/s
Iteration  16: 199914.552 ops/s
Iteration  17: 183482.779 ops/s
Iteration  18: 186159.895 ops/s
Iteration  19: 198151.748 ops/s
Iteration  20: 188501.473 ops/s
Iteration  21: 194621.077 ops/s
Iteration  22: 187491.052 ops/s
Iteration  23: 197922.551 ops/s
Iteration  24: 195623.523 ops/s
Iteration  25: 185525.473 ops/s
Iteration  26: 196594.491 ops/s
Iteration  27: 186859.388 ops/s
Iteration  28: 189437.694 ops/s
Iteration  29: 195178.481 ops/s
Iteration  30: 185561.353 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel":
  192149.225 ±(99.9%) 3539.684 ops/s [Average]
  (min, avg, max) = (183482.779, 192149.225, 200319.679), stdev = 5298.033
  CI (99.9%): [188609.541, 195688.909] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  192149.225 ± 3539.684  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102074.300 ops/s
# Warmup Iteration   2: 414444.717 ops/s
# Warmup Iteration   3: 461662.862 ops/s
# Warmup Iteration   4: 441679.985 ops/s
# Warmup Iteration   5: 512200.679 ops/s
# Warmup Iteration   6: 429528.841 ops/s
# Warmup Iteration   7: 517426.419 ops/s
# Warmup Iteration   8: 504736.347 ops/s
# Warmup Iteration   9: 497107.076 ops/s
# Warmup Iteration  10: 529349.483 ops/s
# Warmup Iteration  11: 517756.422 ops/s
# Warmup Iteration  12: 490662.765 ops/s
# Warmup Iteration  13: 525100.883 ops/s
# Warmup Iteration  14: 500975.762 ops/s
# Warmup Iteration  15: 498356.627 ops/s
# Warmup Iteration  16: 513292.332 ops/s
# Warmup Iteration  17: 537325.542 ops/s
# Warmup Iteration  18: 514901.176 ops/s
# Warmup Iteration  19: 533341.686 ops/s
# Warmup Iteration  20: 502192.996 ops/s
# Warmup Iteration  21: 540643.367 ops/s
# Warmup Iteration  22: 526506.839 ops/s
# Warmup Iteration  23: 508525.597 ops/s
# Warmup Iteration  24: 522084.242 ops/s
# Warmup Iteration  25: 535492.723 ops/s
# Warmup Iteration  26: 522055.597 ops/s
# Warmup Iteration  27: 522975.465 ops/s
# Warmup Iteration  28: 546595.240 ops/s
# Warmup Iteration  29: 501858.199 ops/s
# Warmup Iteration  30: 531927.702 ops/s
Iteration   1: 526298.353 ops/s
Iteration   2: 501504.985 ops/s
Iteration   3: 527081.801 ops/s
Iteration   4: 520674.076 ops/s
Iteration   5: 507463.941 ops/s
Iteration   6: 531028.340 ops/s
Iteration   7: 509529.714 ops/s
Iteration   8: 525578.192 ops/s
Iteration   9: 551172.162 ops/s
Iteration  10: 510790.523 ops/s
Iteration  11: 537270.526 ops/s
Iteration  12: 525211.684 ops/s
Iteration  13: 506477.435 ops/s
Iteration  14: 533769.927 ops/s
Iteration  15: 525134.117 ops/s
Iteration  16: 512389.943 ops/s
Iteration  17: 448490.056 ops/s
Iteration  18: 465551.538 ops/s
Iteration  19: 524652.192 ops/s
Iteration  20: 532062.483 ops/s
Iteration  21: 528907.027 ops/s
Iteration  22: 516264.436 ops/s
Iteration  23: 543082.320 ops/s
Iteration  24: 516391.709 ops/s
Iteration  25: 534581.496 ops/s
Iteration  26: 516764.229 ops/s
Iteration  27: 547971.681 ops/s
Iteration  28: 512864.999 ops/s
Iteration  29: 529401.469 ops/s
Iteration  30: 540206.520 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe":
  520285.596 ±(99.9%) 14213.899 ops/s [Average]
  (min, avg, max) = (448490.056, 520285.596, 551172.162), stdev = 21274.697
  CI (99.9%): [506071.697, 534499.495] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  520285.596 ± 14213.899  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 62838.765 ops/s
# Warmup Iteration   2: 232425.698 ops/s
# Warmup Iteration   3: 457438.538 ops/s
# Warmup Iteration   4: 480073.781 ops/s
# Warmup Iteration   5: 512067.283 ops/s
# Warmup Iteration   6: 493388.703 ops/s
# Warmup Iteration   7: 429854.890 ops/s
# Warmup Iteration   8: 492197.219 ops/s
# Warmup Iteration   9: 451909.702 ops/s
# Warmup Iteration  10: 509974.848 ops/s
# Warmup Iteration  11: 478763.484 ops/s
# Warmup Iteration  12: 498825.233 ops/s
# Warmup Iteration  13: 509629.869 ops/s
# Warmup Iteration  14: 495473.035 ops/s
# Warmup Iteration  15: 512321.073 ops/s
# Warmup Iteration  16: 483623.597 ops/s
# Warmup Iteration  17: 533036.971 ops/s
# Warmup Iteration  18: 529166.983 ops/s
# Warmup Iteration  19: 511826.872 ops/s
# Warmup Iteration  20: 523619.321 ops/s
# Warmup Iteration  21: 493497.685 ops/s
# Warmup Iteration  22: 528779.525 ops/s
# Warmup Iteration  23: 506079.224 ops/s
# Warmup Iteration  24: 515824.290 ops/s
# Warmup Iteration  25: 532982.383 ops/s
# Warmup Iteration  26: 515105.236 ops/s
# Warmup Iteration  27: 530716.614 ops/s
# Warmup Iteration  28: 521208.223 ops/s
# Warmup Iteration  29: 504814.318 ops/s
# Warmup Iteration  30: 531865.857 ops/s
Iteration   1: 513171.984 ops/s
Iteration   2: 508945.047 ops/s
Iteration   3: 537318.413 ops/s
Iteration   4: 503655.214 ops/s
Iteration   5: 509080.058 ops/s
Iteration   6: 516112.288 ops/s
Iteration   7: 507943.207 ops/s
Iteration   8: 535616.923 ops/s
Iteration   9: 519459.036 ops/s
Iteration  10: 537492.917 ops/s
Iteration  11: 505506.044 ops/s
Iteration  12: 518874.449 ops/s
Iteration  13: 537238.505 ops/s
Iteration  14: 498670.121 ops/s
Iteration  15: 509077.935 ops/s
Iteration  16: 546221.093 ops/s
Iteration  17: 546415.224 ops/s
Iteration  18: 534232.902 ops/s
Iteration  19: 494319.450 ops/s
Iteration  20: 528602.089 ops/s
Iteration  21: 519375.027 ops/s
Iteration  22: 529854.592 ops/s
Iteration  23: 508601.884 ops/s
Iteration  24: 520123.457 ops/s
Iteration  25: 547928.802 ops/s
Iteration  26: 516880.118 ops/s
Iteration  27: 504571.761 ops/s
Iteration  28: 528146.368 ops/s
Iteration  29: 513422.023 ops/s
Iteration  30: 508132.111 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsError":
  520166.301 ±(99.9%) 9983.087 ops/s [Average]
  (min, avg, max) = (494319.450, 520166.301, 547928.802), stdev = 14942.216
  CI (99.9%): [510183.214, 530149.389] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_ambIterable2SignalsError  thrpt   30  520166.301 ± 9983.087  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsErrorWithOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsErrorWithOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44373.907 ops/s
# Warmup Iteration   2: 211136.259 ops/s
# Warmup Iteration   3: 247066.832 ops/s
# Warmup Iteration   4: 251321.447 ops/s
# Warmup Iteration   5: 306576.998 ops/s
# Warmup Iteration   6: 267148.402 ops/s
# Warmup Iteration   7: 311276.597 ops/s
# Warmup Iteration   8: 299016.080 ops/s
# Warmup Iteration   9: 291897.112 ops/s
# Warmup Iteration  10: 296708.204 ops/s
# Warmup Iteration  11: 301128.447 ops/s
# Warmup Iteration  12: 298794.231 ops/s
# Warmup Iteration  13: 304375.652 ops/s
# Warmup Iteration  14: 291406.440 ops/s
# Warmup Iteration  15: 300716.290 ops/s
# Warmup Iteration  16: 308583.480 ops/s
# Warmup Iteration  17: 315177.477 ops/s
# Warmup Iteration  18: 324700.001 ops/s
# Warmup Iteration  19: 318422.421 ops/s
# Warmup Iteration  20: 313757.141 ops/s
# Warmup Iteration  21: 326100.002 ops/s
# Warmup Iteration  22: 306950.651 ops/s
# Warmup Iteration  23: 308301.076 ops/s
# Warmup Iteration  24: 323268.162 ops/s
# Warmup Iteration  25: 309866.348 ops/s
# Warmup Iteration  26: 322020.097 ops/s
# Warmup Iteration  27: 320080.104 ops/s
# Warmup Iteration  28: 311575.683 ops/s
# Warmup Iteration  29: 321506.397 ops/s
# Warmup Iteration  30: 309037.959 ops/s
Iteration   1: 311874.580 ops/s
Iteration   2: 314581.359 ops/s
Iteration   3: 316774.224 ops/s
Iteration   4: 323801.641 ops/s
Iteration   5: 301039.508 ops/s
Iteration   6: 326332.025 ops/s
Iteration   7: 330033.198 ops/s
Iteration   8: 321129.567 ops/s
Iteration   9: 307092.103 ops/s
Iteration  10: 314704.430 ops/s
Iteration  11: 241884.408 ops/s
Iteration  12: 324901.605 ops/s
Iteration  13: 317398.979 ops/s
Iteration  14: 301678.613 ops/s
Iteration  15: 325957.299 ops/s
Iteration  16: 317514.303 ops/s
Iteration  17: 303355.645 ops/s
Iteration  18: 326802.149 ops/s
Iteration  19: 311733.111 ops/s
Iteration  20: 307410.036 ops/s
Iteration  21: 323770.900 ops/s
Iteration  22: 307400.474 ops/s
Iteration  23: 326528.429 ops/s
Iteration  24: 307226.227 ops/s
Iteration  25: 317611.185 ops/s
Iteration  26: 308540.869 ops/s
Iteration  27: 315045.163 ops/s
Iteration  28: 316463.948 ops/s
Iteration  29: 314255.570 ops/s
Iteration  30: 319357.368 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_ambIterable2SignalsErrorWithOverlap":
  313406.631 ±(99.9%) 10497.162 ops/s [Average]
  (min, avg, max) = (241884.408, 313406.631, 330033.198), stdev = 15711.659
  CI (99.9%): [302909.468, 323903.793] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
MaybeTest._Benchmark.benchmark_ambIterable2SignalsErrorWithOverlap  thrpt   30  313406.631 ± 10497.162  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_noUnsubscribeAndNoLeak$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_noUnsubscribeAndNoLeak

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38058.478 ops/s
# Warmup Iteration   2: 150565.523 ops/s
# Warmup Iteration   3: 276749.288 ops/s
# Warmup Iteration   4: 523142.551 ops/s
# Warmup Iteration   5: 662454.614 ops/s
# Warmup Iteration   6: 677325.803 ops/s
# Warmup Iteration   7: 698529.309 ops/s
# Warmup Iteration   8: 669175.769 ops/s
# Warmup Iteration   9: 655012.143 ops/s
# Warmup Iteration  10: 690703.042 ops/s
# Warmup Iteration  11: 660495.069 ops/s
# Warmup Iteration  12: 679023.648 ops/s
# Warmup Iteration  13: 667443.292 ops/s
# Warmup Iteration  14: 677724.410 ops/s
# Warmup Iteration  15: 691100.744 ops/s
# Warmup Iteration  16: 659700.234 ops/s
# Warmup Iteration  17: 654463.528 ops/s
# Warmup Iteration  18: 700793.527 ops/s
# Warmup Iteration  19: 673375.899 ops/s
# Warmup Iteration  20: 685036.910 ops/s
# Warmup Iteration  21: 664579.916 ops/s
# Warmup Iteration  22: 690014.566 ops/s
# Warmup Iteration  23: 667949.895 ops/s
# Warmup Iteration  24: 666696.855 ops/s
# Warmup Iteration  25: 693049.462 ops/s
# Warmup Iteration  26: 667781.574 ops/s
# Warmup Iteration  27: 675572.938 ops/s
# Warmup Iteration  28: 697713.047 ops/s
# Warmup Iteration  29: 684730.373 ops/s
# Warmup Iteration  30: 667499.665 ops/s
Iteration   1: 686590.422 ops/s
Iteration   2: 668798.631 ops/s
Iteration   3: 679000.119 ops/s
Iteration   4: 648371.842 ops/s
Iteration   5: 681176.886 ops/s
Iteration   6: 701744.443 ops/s
Iteration   7: 691922.773 ops/s
Iteration   8: 655213.649 ops/s
Iteration   9: 685156.300 ops/s
Iteration  10: 655311.551 ops/s
Iteration  11: 695119.115 ops/s
Iteration  12: 648969.706 ops/s
Iteration  13: 677324.357 ops/s
Iteration  14: 686650.593 ops/s
Iteration  15: 664143.779 ops/s
Iteration  16: 680376.095 ops/s
Iteration  17: 674932.353 ops/s
Iteration  18: 677319.904 ops/s
Iteration  19: 702588.473 ops/s
Iteration  20: 666897.671 ops/s
Iteration  21: 683963.521 ops/s
Iteration  22: 663801.669 ops/s
Iteration  23: 678950.987 ops/s
Iteration  24: 693134.655 ops/s
Iteration  25: 653115.472 ops/s
Iteration  26: 679768.773 ops/s
Iteration  27: 656644.268 ops/s
Iteration  28: 662118.046 ops/s
Iteration  29: 694319.468 ops/s
Iteration  30: 693719.331 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_noUnsubscribeAndNoLeak":
  676238.162 ±(99.9%) 10567.281 ops/s [Average]
  (min, avg, max) = (648371.842, 676238.162, 702588.473), stdev = 15816.610
  CI (99.9%): [665670.880, 686805.443] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score       Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_noUnsubscribeAndNoLeak  thrpt   30  676238.162 ± 10567.281  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_twoErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_twoErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46745.104 ops/s
# Warmup Iteration   2: 113016.135 ops/s
# Warmup Iteration   3: 246554.773 ops/s
# Warmup Iteration   4: 394438.211 ops/s
# Warmup Iteration   5: 384290.467 ops/s
# Warmup Iteration   6: 389047.781 ops/s
# Warmup Iteration   7: 377231.463 ops/s
# Warmup Iteration   8: 394821.182 ops/s
# Warmup Iteration   9: 385508.599 ops/s
# Warmup Iteration  10: 406629.086 ops/s
# Warmup Iteration  11: 386645.820 ops/s
# Warmup Iteration  12: 389821.516 ops/s
# Warmup Iteration  13: 404264.266 ops/s
# Warmup Iteration  14: 381396.081 ops/s
# Warmup Iteration  15: 391092.409 ops/s
# Warmup Iteration  16: 399577.963 ops/s
# Warmup Iteration  17: 396778.594 ops/s
# Warmup Iteration  18: 416044.198 ops/s
# Warmup Iteration  19: 383564.435 ops/s
# Warmup Iteration  20: 415163.097 ops/s
# Warmup Iteration  21: 404046.362 ops/s
# Warmup Iteration  22: 394226.681 ops/s
# Warmup Iteration  23: 418934.074 ops/s
# Warmup Iteration  24: 420789.054 ops/s
# Warmup Iteration  25: 416162.802 ops/s
# Warmup Iteration  26: 392022.777 ops/s
# Warmup Iteration  27: 415168.941 ops/s
# Warmup Iteration  28: 395177.057 ops/s
# Warmup Iteration  29: 400725.044 ops/s
# Warmup Iteration  30: 410629.818 ops/s
Iteration   1: 388485.791 ops/s
Iteration   2: 408738.704 ops/s
Iteration   3: 411993.799 ops/s
Iteration   4: 381039.600 ops/s
Iteration   5: 407378.949 ops/s
Iteration   6: 339843.573 ops/s
Iteration   7: 402615.546 ops/s
Iteration   8: 414919.032 ops/s
Iteration   9: 394738.379 ops/s
Iteration  10: 406089.642 ops/s
Iteration  11: 412439.845 ops/s
Iteration  12: 396779.828 ops/s
Iteration  13: 399298.919 ops/s
Iteration  14: 391899.628 ops/s
Iteration  15: 414964.637 ops/s
Iteration  16: 398696.615 ops/s
Iteration  17: 416403.443 ops/s
Iteration  18: 396314.274 ops/s
Iteration  19: 400300.494 ops/s
Iteration  20: 418593.167 ops/s
Iteration  21: 401843.289 ops/s
Iteration  22: 409565.015 ops/s
Iteration  23: 413197.151 ops/s
Iteration  24: 403465.988 ops/s
Iteration  25: 421059.628 ops/s
Iteration  26: 402030.129 ops/s
Iteration  27: 416854.265 ops/s
Iteration  28: 393779.544 ops/s
Iteration  29: 390137.904 ops/s
Iteration  30: 410654.400 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_twoErrors":
  402137.373 ±(99.9%) 10298.346 ops/s [Average]
  (min, avg, max) = (339843.573, 402137.373, 421059.628), stdev = 15414.080
  CI (99.9%): [391839.027, 412435.718] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_twoErrors  thrpt   30  402137.373 ± 10298.346  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_oneErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_oneErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45131.877 ops/s
# Warmup Iteration   2: 75308.898 ops/s
# Warmup Iteration   3: 182275.094 ops/s
# Warmup Iteration   4: 400048.906 ops/s
# Warmup Iteration   5: 404934.874 ops/s
# Warmup Iteration   6: 393966.117 ops/s
# Warmup Iteration   7: 415492.256 ops/s
# Warmup Iteration   8: 398205.325 ops/s
# Warmup Iteration   9: 417543.377 ops/s
# Warmup Iteration  10: 414618.890 ops/s
# Warmup Iteration  11: 409891.150 ops/s
# Warmup Iteration  12: 423154.959 ops/s
# Warmup Iteration  13: 388426.967 ops/s
# Warmup Iteration  14: 428510.138 ops/s
# Warmup Iteration  15: 413424.152 ops/s
# Warmup Iteration  16: 397151.788 ops/s
# Warmup Iteration  17: 420105.173 ops/s
# Warmup Iteration  18: 437032.621 ops/s
# Warmup Iteration  19: 437454.137 ops/s
# Warmup Iteration  20: 429790.917 ops/s
# Warmup Iteration  21: 442259.833 ops/s
# Warmup Iteration  22: 423309.897 ops/s
# Warmup Iteration  23: 449807.739 ops/s
# Warmup Iteration  24: 447974.073 ops/s
# Warmup Iteration  25: 404417.422 ops/s
# Warmup Iteration  26: 431225.460 ops/s
# Warmup Iteration  27: 450168.986 ops/s
# Warmup Iteration  28: 430936.753 ops/s
# Warmup Iteration  29: 432870.453 ops/s
# Warmup Iteration  30: 408710.125 ops/s
Iteration   1: 431296.134 ops/s
Iteration   2: 435602.988 ops/s
Iteration   3: 427340.347 ops/s
Iteration   4: 424465.916 ops/s
Iteration   5: 438522.619 ops/s
Iteration   6: 425956.994 ops/s
Iteration   7: 437780.436 ops/s
Iteration   8: 429951.283 ops/s
Iteration   9: 452726.505 ops/s
Iteration  10: 456202.445 ops/s
Iteration  11: 431175.073 ops/s
Iteration  12: 433784.571 ops/s
Iteration  13: 443114.622 ops/s
Iteration  14: 430118.575 ops/s
Iteration  15: 413658.708 ops/s
Iteration  16: 445907.417 ops/s
Iteration  17: 429064.942 ops/s
Iteration  18: 430953.443 ops/s
Iteration  19: 448951.514 ops/s
Iteration  20: 427658.790 ops/s
Iteration  21: 433264.621 ops/s
Iteration  22: 445130.105 ops/s
Iteration  23: 431613.770 ops/s
Iteration  24: 436480.013 ops/s
Iteration  25: 456238.233 ops/s
Iteration  26: 417774.721 ops/s
Iteration  27: 432078.188 ops/s
Iteration  28: 445015.078 ops/s
Iteration  29: 429536.714 ops/s
Iteration  30: 446805.398 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_oneErrors":
  435605.672 ±(99.9%) 7006.512 ops/s [Average]
  (min, avg, max) = (413658.708, 435605.672, 456238.233), stdev = 10487.018
  CI (99.9%): [428599.160, 442612.184] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_oneErrors  thrpt   30  435605.672 ± 7006.512  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 209687.888 ops/s
# Warmup Iteration   2: 738753.675 ops/s
# Warmup Iteration   3: 956646.188 ops/s
# Warmup Iteration   4: 994461.336 ops/s
# Warmup Iteration   5: 1030957.765 ops/s
# Warmup Iteration   6: 989024.899 ops/s
# Warmup Iteration   7: 976992.866 ops/s
# Warmup Iteration   8: 1030766.935 ops/s
# Warmup Iteration   9: 981717.331 ops/s
# Warmup Iteration  10: 1020975.960 ops/s
# Warmup Iteration  11: 1002108.466 ops/s
# Warmup Iteration  12: 982945.967 ops/s
# Warmup Iteration  13: 919882.577 ops/s
# Warmup Iteration  14: 978112.206 ops/s
# Warmup Iteration  15: 1045713.996 ops/s
# Warmup Iteration  16: 1002758.264 ops/s
# Warmup Iteration  17: 1007888.346 ops/s
# Warmup Iteration  18: 1021951.632 ops/s
# Warmup Iteration  19: 991152.641 ops/s
# Warmup Iteration  20: 1041902.157 ops/s
# Warmup Iteration  21: 1005599.296 ops/s
# Warmup Iteration  22: 1042149.687 ops/s
# Warmup Iteration  23: 1049226.641 ops/s
# Warmup Iteration  24: 986086.476 ops/s
# Warmup Iteration  25: 1012876.260 ops/s
# Warmup Iteration  26: 1057030.785 ops/s
# Warmup Iteration  27: 1049519.235 ops/s
# Warmup Iteration  28: 1060757.706 ops/s
# Warmup Iteration  29: 982433.739 ops/s
# Warmup Iteration  30: 862529.796 ops/s
Iteration   1: 1009203.095 ops/s
Iteration   2: 974839.471 ops/s
Iteration   3: 1016398.538 ops/s
Iteration   4: 1029312.090 ops/s
Iteration   5: 1019781.277 ops/s
Iteration   6: 1039409.239 ops/s
Iteration   7: 986304.362 ops/s
Iteration   8: 1055991.813 ops/s
Iteration   9: 982380.479 ops/s
Iteration  10: 1012414.772 ops/s
Iteration  11: 1033414.277 ops/s
Iteration  12: 1015789.859 ops/s
Iteration  13: 1036711.867 ops/s
Iteration  14: 1029634.896 ops/s
Iteration  15: 1026769.831 ops/s
Iteration  16: 1003497.140 ops/s
Iteration  17: 1044574.311 ops/s
Iteration  18: 1006336.991 ops/s
Iteration  19: 1047144.770 ops/s
Iteration  20: 1032173.018 ops/s
Iteration  21: 1016087.169 ops/s
Iteration  22: 1042322.669 ops/s
Iteration  23: 1044040.409 ops/s
Iteration  24: 980931.738 ops/s
Iteration  25: 1022893.463 ops/s
Iteration  26: 982095.853 ops/s
Iteration  27: 1040606.180 ops/s
Iteration  28: 1036275.260 ops/s
Iteration  29: 1027123.857 ops/s
Iteration  30: 981971.457 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixed":
  1019214.338 ±(99.9%) 15361.339 ops/s [Average]
  (min, avg, max) = (974839.471, 1019214.338, 1055991.813), stdev = 22992.131
  CI (99.9%): [1003852.999, 1034575.677] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_boundaryFusedMixed  thrpt   30  1019214.338 ± 15361.339  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSourcesWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSourcesWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32535.179 ops/s
# Warmup Iteration   2: 71693.623 ops/s
# Warmup Iteration   3: 116359.403 ops/s
# Warmup Iteration   4: 260177.172 ops/s
# Warmup Iteration   5: 340518.146 ops/s
# Warmup Iteration   6: 350534.371 ops/s
# Warmup Iteration   7: 405133.369 ops/s
# Warmup Iteration   8: 384185.997 ops/s
# Warmup Iteration   9: 397037.701 ops/s
# Warmup Iteration  10: 388965.951 ops/s
# Warmup Iteration  11: 397627.002 ops/s
# Warmup Iteration  12: 395077.866 ops/s
# Warmup Iteration  13: 398591.132 ops/s
# Warmup Iteration  14: 387803.655 ops/s
# Warmup Iteration  15: 399588.657 ops/s
# Warmup Iteration  16: 386253.208 ops/s
# Warmup Iteration  17: 408339.468 ops/s
# Warmup Iteration  18: 409160.918 ops/s
# Warmup Iteration  19: 409875.282 ops/s
# Warmup Iteration  20: 400657.037 ops/s
# Warmup Iteration  21: 406597.072 ops/s
# Warmup Iteration  22: 409533.512 ops/s
# Warmup Iteration  23: 411895.422 ops/s
# Warmup Iteration  24: 394389.348 ops/s
# Warmup Iteration  25: 400535.289 ops/s
# Warmup Iteration  26: 428597.087 ops/s
# Warmup Iteration  27: 385413.884 ops/s
# Warmup Iteration  28: 422288.287 ops/s
# Warmup Iteration  29: 420654.036 ops/s
# Warmup Iteration  30: 393242.706 ops/s
Iteration   1: 423311.418 ops/s
Iteration   2: 427199.044 ops/s
Iteration   3: 389074.344 ops/s
Iteration   4: 427624.411 ops/s
Iteration   5: 413981.758 ops/s
Iteration   6: 390330.871 ops/s
Iteration   7: 421924.844 ops/s
Iteration   8: 396871.847 ops/s
Iteration   9: 418983.687 ops/s
Iteration  10: 402397.680 ops/s
Iteration  11: 395133.701 ops/s
Iteration  12: 420484.873 ops/s
Iteration  13: 392655.055 ops/s
Iteration  14: 408406.012 ops/s
Iteration  15: 415350.598 ops/s
Iteration  16: 401794.562 ops/s
Iteration  17: 415401.723 ops/s
Iteration  18: 397560.064 ops/s
Iteration  19: 412132.461 ops/s
Iteration  20: 398683.033 ops/s
Iteration  21: 418073.495 ops/s
Iteration  22: 405699.180 ops/s
Iteration  23: 402703.891 ops/s
Iteration  24: 413616.711 ops/s
Iteration  25: 403960.843 ops/s
Iteration  26: 423605.156 ops/s
Iteration  27: 395683.214 ops/s
Iteration  28: 406478.311 ops/s
Iteration  29: 405646.969 ops/s
Iteration  30: 407902.358 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSourcesWithError":
  408422.404 ±(99.9%) 7507.491 ops/s [Average]
  (min, avg, max) = (389074.344, 408422.404, 427624.411), stdev = 11236.860
  CI (99.9%): [400914.913, 415929.895] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorIterableOfSourcesWithError  thrpt   30  408422.404 ± 7507.491  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_subscribeConsumerConsumerWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_subscribeConsumerConsumerWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 262886.208 ops/s
# Warmup Iteration   2: 635274.716 ops/s
# Warmup Iteration   3: 749805.842 ops/s
# Warmup Iteration   4: 724803.719 ops/s
# Warmup Iteration   5: 692398.156 ops/s
# Warmup Iteration   6: 760980.299 ops/s
# Warmup Iteration   7: 753793.272 ops/s
# Warmup Iteration   8: 731145.900 ops/s
# Warmup Iteration   9: 746845.119 ops/s
# Warmup Iteration  10: 792613.270 ops/s
# Warmup Iteration  11: 757045.139 ops/s
# Warmup Iteration  12: 737900.712 ops/s
# Warmup Iteration  13: 767918.463 ops/s
# Warmup Iteration  14: 770276.726 ops/s
# Warmup Iteration  15: 745005.247 ops/s
# Warmup Iteration  16: 766840.608 ops/s
# Warmup Iteration  17: 773857.894 ops/s
# Warmup Iteration  18: 802983.983 ops/s
# Warmup Iteration  19: 836017.992 ops/s
# Warmup Iteration  20: 770510.180 ops/s
# Warmup Iteration  21: 831881.509 ops/s
# Warmup Iteration  22: 829154.304 ops/s
# Warmup Iteration  23: 771382.784 ops/s
# Warmup Iteration  24: 803837.224 ops/s
# Warmup Iteration  25: 621622.234 ops/s
# Warmup Iteration  26: 773877.218 ops/s
# Warmup Iteration  27: 813563.591 ops/s
# Warmup Iteration  28: 794967.406 ops/s
# Warmup Iteration  29: 755856.148 ops/s
# Warmup Iteration  30: 824641.994 ops/s
Iteration   1: 727607.561 ops/s
Iteration   2: 818261.051 ops/s
Iteration   3: 790563.731 ops/s
Iteration   4: 803559.887 ops/s
Iteration   5: 815017.910 ops/s
Iteration   6: 799531.710 ops/s
Iteration   7: 817503.674 ops/s
Iteration   8: 783367.196 ops/s
Iteration   9: 829645.518 ops/s
Iteration  10: 783607.995 ops/s
Iteration  11: 812280.903 ops/s
Iteration  12: 836561.150 ops/s
Iteration  13: 789732.758 ops/s
Iteration  14: 798753.546 ops/s
Iteration  15: 775609.380 ops/s
Iteration  16: 805472.697 ops/s
Iteration  17: 809852.404 ops/s
Iteration  18: 770219.600 ops/s
Iteration  19: 841207.868 ops/s
Iteration  20: 829736.251 ops/s
Iteration  21: 768660.430 ops/s
Iteration  22: 806812.640 ops/s
Iteration  23: 789458.061 ops/s
Iteration  24: 827111.724 ops/s
Iteration  25: 758925.218 ops/s
Iteration  26: 812689.496 ops/s
Iteration  27: 794182.991 ops/s
Iteration  28: 793484.618 ops/s
Iteration  29: 813955.392 ops/s
Iteration  30: 771684.132 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableSubscriberTest._Benchmark.benchmark_subscribeConsumerConsumerWithError":
  799168.583 ±(99.9%) 16734.049 ops/s [Average]
  (min, avg, max) = (727607.561, 799168.583, 841207.868), stdev = 25046.739
  CI (99.9%): [782434.534, 815902.632] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score       Error  Units
FlowableSubscriberTest._Benchmark.benchmark_subscribeConsumerConsumerWithError  thrpt   30  799168.583 ± 16734.049  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 858971.518 ops/s
# Warmup Iteration   2: 4375795.529 ops/s
# Warmup Iteration   3: 6782809.449 ops/s
# Warmup Iteration   4: 6676568.188 ops/s
# Warmup Iteration   5: 6515636.374 ops/s
# Warmup Iteration   6: 6434729.393 ops/s
# Warmup Iteration   7: 6813294.587 ops/s
# Warmup Iteration   8: 6743937.345 ops/s
# Warmup Iteration   9: 5788841.132 ops/s
# Warmup Iteration  10: 6541844.110 ops/s
# Warmup Iteration  11: 6655014.091 ops/s
# Warmup Iteration  12: 6817484.772 ops/s
# Warmup Iteration  13: 6726610.165 ops/s
# Warmup Iteration  14: 6932097.470 ops/s
# Warmup Iteration  15: 7108072.564 ops/s
# Warmup Iteration  16: 6419997.654 ops/s
# Warmup Iteration  17: 6710085.404 ops/s
# Warmup Iteration  18: 7007837.418 ops/s
# Warmup Iteration  19: 6598055.908 ops/s
# Warmup Iteration  20: 6880556.825 ops/s
# Warmup Iteration  21: 6693361.416 ops/s
# Warmup Iteration  22: 6630922.269 ops/s
# Warmup Iteration  23: 6892539.167 ops/s
# Warmup Iteration  24: 6701574.652 ops/s
# Warmup Iteration  25: 6467322.874 ops/s
# Warmup Iteration  26: 7049074.414 ops/s
# Warmup Iteration  27: 6926146.128 ops/s
# Warmup Iteration  28: 6605295.525 ops/s
# Warmup Iteration  29: 6646184.449 ops/s
# Warmup Iteration  30: 6970171.931 ops/s
Iteration   1: 6475212.634 ops/s
Iteration   2: 6871219.426 ops/s
Iteration   3: 6606509.984 ops/s
Iteration   4: 7012581.166 ops/s
Iteration   5: 6546539.806 ops/s
Iteration   6: 6893177.492 ops/s
Iteration   7: 6672449.327 ops/s
Iteration   8: 6588753.018 ops/s
Iteration   9: 6822636.109 ops/s
Iteration  10: 6632108.603 ops/s
Iteration  11: 6825836.055 ops/s
Iteration  12: 6508195.167 ops/s
Iteration  13: 6849192.440 ops/s
Iteration  14: 6516808.211 ops/s
Iteration  15: 6565761.188 ops/s
Iteration  16: 6991655.660 ops/s
Iteration  17: 6557271.683 ops/s
Iteration  18: 6742289.762 ops/s
Iteration  19: 6890589.124 ops/s
Iteration  20: 6598042.430 ops/s
Iteration  21: 6827273.226 ops/s
Iteration  22: 6918881.168 ops/s
Iteration  23: 6670656.214 ops/s
Iteration  24: 6922076.418 ops/s
Iteration  25: 6605190.458 ops/s
Iteration  26: 6907760.990 ops/s
Iteration  27: 6761177.666 ops/s
Iteration  28: 6500645.611 ops/s
Iteration  29: 7044125.695 ops/s
Iteration  30: 6681659.949 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.FlowableConcatMapCompletableTest._Benchmark.benchmark_disposed":
  6733542.556 ±(99.9%) 114737.307 ops/s [Average]
  (min, avg, max) = (6475212.634, 6733542.556, 7044125.695), stdev = 171733.413
  CI (99.9%): [6618805.249, 6848279.864] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
FlowableConcatMapCompletableTest._Benchmark.benchmark_disposed  thrpt   30  6733542.556 ± 114737.307  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1049770.501 ops/s
# Warmup Iteration   2: 4242605.993 ops/s
# Warmup Iteration   3: 5375151.347 ops/s
# Warmup Iteration   4: 5535010.307 ops/s
# Warmup Iteration   5: 5802975.208 ops/s
# Warmup Iteration   6: 5470984.035 ops/s
# Warmup Iteration   7: 4944560.421 ops/s
# Warmup Iteration   8: 5506850.163 ops/s
# Warmup Iteration   9: 5620043.226 ops/s
# Warmup Iteration  10: 5590829.337 ops/s
# Warmup Iteration  11: 5927003.985 ops/s
# Warmup Iteration  12: 5532758.433 ops/s
# Warmup Iteration  13: 5794611.516 ops/s
# Warmup Iteration  14: 5901283.239 ops/s
# Warmup Iteration  15: 5566487.202 ops/s
# Warmup Iteration  16: 5792592.859 ops/s
# Warmup Iteration  17: 5558136.694 ops/s
# Warmup Iteration  18: 5633988.796 ops/s
# Warmup Iteration  19: 6059757.240 ops/s
# Warmup Iteration  20: 4508067.931 ops/s
# Warmup Iteration  21: 5723926.601 ops/s
# Warmup Iteration  22: 5704985.496 ops/s
# Warmup Iteration  23: 5478196.500 ops/s
# Warmup Iteration  24: 5756334.572 ops/s
# Warmup Iteration  25: 5624104.838 ops/s
# Warmup Iteration  26: 5704462.398 ops/s
# Warmup Iteration  27: 5837444.654 ops/s
# Warmup Iteration  28: 5575325.827 ops/s
# Warmup Iteration  29: 5850115.559 ops/s
# Warmup Iteration  30: 5676376.750 ops/s
Iteration   1: 5711215.784 ops/s
Iteration   2: 5695971.337 ops/s
Iteration   3: 5593693.235 ops/s
Iteration   4: 5717950.237 ops/s
Iteration   5: 5572620.288 ops/s
Iteration   6: 5702492.807 ops/s
Iteration   7: 5628091.653 ops/s
Iteration   8: 5774754.686 ops/s
Iteration   9: 5993717.211 ops/s
Iteration  10: 5901434.809 ops/s
Iteration  11: 5528074.419 ops/s
Iteration  12: 5727540.567 ops/s
Iteration  13: 5818416.841 ops/s
Iteration  14: 5568087.847 ops/s
Iteration  15: 5530399.521 ops/s
Iteration  16: 5978591.025 ops/s
Iteration  17: 5597206.331 ops/s
Iteration  18: 5708087.971 ops/s
Iteration  19: 5607488.655 ops/s
Iteration  20: 5706865.142 ops/s
Iteration  21: 5862570.952 ops/s
Iteration  22: 5516261.994 ops/s
Iteration  23: 5764348.395 ops/s
Iteration  24: 5678846.675 ops/s
Iteration  25: 5692446.369 ops/s
Iteration  26: 5867944.686 ops/s
Iteration  27: 5627044.670 ops/s
Iteration  28: 5739069.476 ops/s
Iteration  29: 5567405.874 ops/s
Iteration  30: 5667438.408 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletable":
  5701535.929 ±(99.9%) 85183.034 ops/s [Average]
  (min, avg, max) = (5516261.994, 5701535.929, 5993717.211), stdev = 127497.966
  CI (99.9%): [5616352.894, 5786718.963] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableFromCompletableTest._Benchmark.benchmark_fromCompletable  thrpt   30  5701535.929 ± 85183.034  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53532.314 ops/s
# Warmup Iteration   2: 186506.250 ops/s
# Warmup Iteration   3: 411564.413 ops/s
# Warmup Iteration   4: 477286.353 ops/s
# Warmup Iteration   5: 503915.834 ops/s
# Warmup Iteration   6: 486175.246 ops/s
# Warmup Iteration   7: 463008.102 ops/s
# Warmup Iteration   8: 440947.586 ops/s
# Warmup Iteration   9: 480544.395 ops/s
# Warmup Iteration  10: 493446.812 ops/s
# Warmup Iteration  11: 481522.112 ops/s
# Warmup Iteration  12: 482505.512 ops/s
# Warmup Iteration  13: 505104.122 ops/s
# Warmup Iteration  14: 478747.294 ops/s
# Warmup Iteration  15: 469222.069 ops/s
# Warmup Iteration  16: 497528.943 ops/s
# Warmup Iteration  17: 473013.656 ops/s
# Warmup Iteration  18: 512891.959 ops/s
# Warmup Iteration  19: 505197.729 ops/s
# Warmup Iteration  20: 511441.714 ops/s
# Warmup Iteration  21: 503112.159 ops/s
# Warmup Iteration  22: 499825.530 ops/s
# Warmup Iteration  23: 513911.346 ops/s
# Warmup Iteration  24: 500646.728 ops/s
# Warmup Iteration  25: 504376.342 ops/s
# Warmup Iteration  26: 531374.427 ops/s
# Warmup Iteration  27: 488615.150 ops/s
# Warmup Iteration  28: 497126.951 ops/s
# Warmup Iteration  29: 507879.519 ops/s
# Warmup Iteration  30: 517531.867 ops/s
Iteration   1: 520971.552 ops/s
Iteration   2: 504871.899 ops/s
Iteration   3: 497791.136 ops/s
Iteration   4: 521787.387 ops/s
Iteration   5: 495140.923 ops/s
Iteration   6: 516186.112 ops/s
Iteration   7: 510068.530 ops/s
Iteration   8: 499825.845 ops/s
Iteration   9: 532317.258 ops/s
Iteration  10: 493519.162 ops/s
Iteration  11: 525588.974 ops/s
Iteration  12: 502954.962 ops/s
Iteration  13: 511978.710 ops/s
Iteration  14: 506793.374 ops/s
Iteration  15: 487148.170 ops/s
Iteration  16: 507447.390 ops/s
Iteration  17: 526203.033 ops/s
Iteration  18: 501598.488 ops/s
Iteration  19: 517871.675 ops/s
Iteration  20: 513871.272 ops/s
Iteration  21: 513516.586 ops/s
Iteration  22: 514550.373 ops/s
Iteration  23: 492359.742 ops/s
Iteration  24: 505976.705 ops/s
Iteration  25: 530364.304 ops/s
Iteration  26: 492567.623 ops/s
Iteration  27: 509668.317 ops/s
Iteration  28: 534962.315 ops/s
Iteration  29: 521593.937 ops/s
Iteration  30: 487545.473 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainError":
  509901.374 ±(99.9%) 8906.103 ops/s [Average]
  (min, avg, max) = (487148.170, 509901.374, 534962.315), stdev = 13330.236
  CI (99.9%): [500995.272, 518807.477] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_mainError  thrpt   30  509901.374 ± 8906.103  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableInvokesLazy$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableInvokesLazy

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1144809.164 ops/s
# Warmup Iteration   2: 4154683.478 ops/s
# Warmup Iteration   3: 4685739.323 ops/s
# Warmup Iteration   4: 5795041.352 ops/s
# Warmup Iteration   5: 5919121.223 ops/s
# Warmup Iteration   6: 5599470.356 ops/s
# Warmup Iteration   7: 5616853.198 ops/s
# Warmup Iteration   8: 5923021.999 ops/s
# Warmup Iteration   9: 5656646.261 ops/s
# Warmup Iteration  10: 5692723.349 ops/s
# Warmup Iteration  11: 5664799.551 ops/s
# Warmup Iteration  12: 5780172.050 ops/s
# Warmup Iteration  13: 5778268.557 ops/s
# Warmup Iteration  14: 5021009.323 ops/s
# Warmup Iteration  15: 5507307.613 ops/s
# Warmup Iteration  16: 5675976.497 ops/s
# Warmup Iteration  17: 5849549.136 ops/s
# Warmup Iteration  18: 5990846.277 ops/s
# Warmup Iteration  19: 5478382.767 ops/s
# Warmup Iteration  20: 5834331.737 ops/s
# Warmup Iteration  21: 5980186.063 ops/s
# Warmup Iteration  22: 5545685.650 ops/s
# Warmup Iteration  23: 5958806.643 ops/s
# Warmup Iteration  24: 5795779.081 ops/s
# Warmup Iteration  25: 5704150.346 ops/s
# Warmup Iteration  26: 5884358.754 ops/s
# Warmup Iteration  27: 5628433.781 ops/s
# Warmup Iteration  28: 5771435.892 ops/s
# Warmup Iteration  29: 6011463.569 ops/s
# Warmup Iteration  30: 5608974.282 ops/s
Iteration   1: 6021131.843 ops/s
Iteration   2: 5663569.569 ops/s
Iteration   3: 5988905.974 ops/s
Iteration   4: 5698567.180 ops/s
Iteration   5: 5600463.098 ops/s
Iteration   6: 5746127.100 ops/s
Iteration   7: 5672902.331 ops/s
Iteration   8: 5783907.502 ops/s
Iteration   9: 5800700.510 ops/s
Iteration  10: 5721959.362 ops/s
Iteration  11: 6024122.146 ops/s
Iteration  12: 5591019.022 ops/s
Iteration  13: 5547208.588 ops/s
Iteration  14: 6014581.219 ops/s
Iteration  15: 5910519.638 ops/s
Iteration  16: 5712992.047 ops/s
Iteration  17: 5685764.575 ops/s
Iteration  18: 5911993.004 ops/s
Iteration  19: 5551875.912 ops/s
Iteration  20: 5762273.228 ops/s
Iteration  21: 5968544.570 ops/s
Iteration  22: 5942598.425 ops/s
Iteration  23: 5684763.749 ops/s
Iteration  24: 5874522.294 ops/s
Iteration  25: 5692925.146 ops/s
Iteration  26: 5956959.307 ops/s
Iteration  27: 6002965.307 ops/s
Iteration  28: 6050947.821 ops/s
Iteration  29: 5658570.572 ops/s
Iteration  30: 5844726.425 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableInvokesLazy":
  5802936.915 ±(99.9%) 105310.698 ops/s [Average]
  (min, avg, max) = (5547208.588, 5802936.915, 6050947.821), stdev = 157624.106
  CI (99.9%): [5697626.218, 5908247.613] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score        Error  Units
FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableInvokesLazy  thrpt   30  5802936.915 ± 105310.698  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableTwice$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableTwice

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 482592.207 ops/s
# Warmup Iteration   2: 1622408.625 ops/s
# Warmup Iteration   3: 2665506.674 ops/s
# Warmup Iteration   4: 2963988.781 ops/s
# Warmup Iteration   5: 3126329.762 ops/s
# Warmup Iteration   6: 3085378.790 ops/s
# Warmup Iteration   7: 2957398.516 ops/s
# Warmup Iteration   8: 3153940.767 ops/s
# Warmup Iteration   9: 3147596.208 ops/s
# Warmup Iteration  10: 3028879.202 ops/s
# Warmup Iteration  11: 3142687.731 ops/s
# Warmup Iteration  12: 3155642.997 ops/s
# Warmup Iteration  13: 2962424.217 ops/s
# Warmup Iteration  14: 3119419.397 ops/s
# Warmup Iteration  15: 3074515.152 ops/s
# Warmup Iteration  16: 3001513.337 ops/s
# Warmup Iteration  17: 3105469.039 ops/s
# Warmup Iteration  18: 3057525.445 ops/s
# Warmup Iteration  19: 3053930.930 ops/s
# Warmup Iteration  20: 3129363.429 ops/s
# Warmup Iteration  21: 3008214.705 ops/s
# Warmup Iteration  22: 3059888.672 ops/s
# Warmup Iteration  23: 3158190.259 ops/s
# Warmup Iteration  24: 3145549.368 ops/s
# Warmup Iteration  25: 3031913.264 ops/s
# Warmup Iteration  26: 3076882.314 ops/s
# Warmup Iteration  27: 3101852.619 ops/s
# Warmup Iteration  28: 3097325.859 ops/s
# Warmup Iteration  29: 3078676.892 ops/s
# Warmup Iteration  30: 2961226.353 ops/s
Iteration   1: 3199045.994 ops/s
Iteration   2: 3196508.456 ops/s
Iteration   3: 2998231.919 ops/s
Iteration   4: 3136443.890 ops/s
Iteration   5: 3017141.134 ops/s
Iteration   6: 3062896.281 ops/s
Iteration   7: 3226076.916 ops/s
Iteration   8: 2977609.318 ops/s
Iteration   9: 3108921.779 ops/s
Iteration  10: 2998573.798 ops/s
Iteration  11: 3063797.393 ops/s
Iteration  12: 3032878.265 ops/s
Iteration  13: 3134404.200 ops/s
Iteration  14: 3134992.255 ops/s
Iteration  15: 3115636.933 ops/s
Iteration  16: 3166283.711 ops/s
Iteration  17: 2971158.728 ops/s
Iteration  18: 3080507.107 ops/s
Iteration  19: 3143716.108 ops/s
Iteration  20: 2977477.272 ops/s
Iteration  21: 3206552.860 ops/s
Iteration  22: 2957882.326 ops/s
Iteration  23: 3066880.447 ops/s
Iteration  24: 3203622.362 ops/s
Iteration  25: 2978462.006 ops/s
Iteration  26: 3142306.575 ops/s
Iteration  27: 2934320.671 ops/s
Iteration  28: 3155919.439 ops/s
Iteration  29: 2996153.848 ops/s
Iteration  30: 2985922.273 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableTwice":
  3079010.809 ±(99.9%) 59261.579 ops/s [Average]
  (min, avg, max) = (2934320.671, 3079010.809, 3226076.916), stdev = 88699.948
  CI (99.9%): [3019749.230, 3138272.388] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableTwice  thrpt   30  3079010.809 ± 59261.579  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_cancelWhileRunning$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_cancelWhileRunning

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1003943.032 ops/s
# Warmup Iteration   2: 3578977.989 ops/s
# Warmup Iteration   3: 4716029.436 ops/s
# Warmup Iteration   4: 5286660.233 ops/s
# Warmup Iteration   5: 5592423.856 ops/s
# Warmup Iteration   6: 5362373.792 ops/s
# Warmup Iteration   7: 5230519.338 ops/s
# Warmup Iteration   8: 5536717.101 ops/s
# Warmup Iteration   9: 4299662.825 ops/s
# Warmup Iteration  10: 5454912.559 ops/s
# Warmup Iteration  11: 5555063.962 ops/s
# Warmup Iteration  12: 5262887.541 ops/s
# Warmup Iteration  13: 5520751.846 ops/s
# Warmup Iteration  14: 5216817.114 ops/s
# Warmup Iteration  15: 5396214.518 ops/s
# Warmup Iteration  16: 5501619.015 ops/s
# Warmup Iteration  17: 5279187.174 ops/s
# Warmup Iteration  18: 5437432.326 ops/s
# Warmup Iteration  19: 5373175.574 ops/s
# Warmup Iteration  20: 5287797.960 ops/s
# Warmup Iteration  21: 5552845.884 ops/s
# Warmup Iteration  22: 5257063.355 ops/s
# Warmup Iteration  23: 5494067.667 ops/s
# Warmup Iteration  24: 5578012.724 ops/s
# Warmup Iteration  25: 5294844.413 ops/s
# Warmup Iteration  26: 5495825.310 ops/s
# Warmup Iteration  27: 5427846.707 ops/s
# Warmup Iteration  28: 5373655.756 ops/s
# Warmup Iteration  29: 5322704.480 ops/s
# Warmup Iteration  30: 5614947.499 ops/s
Iteration   1: 5337838.303 ops/s
Iteration   2: 5452453.223 ops/s
Iteration   3: 5325834.840 ops/s
Iteration   4: 5473832.387 ops/s
Iteration   5: 5395754.798 ops/s
Iteration   6: 5316493.229 ops/s
Iteration   7: 5601715.077 ops/s
Iteration   8: 5197067.014 ops/s
Iteration   9: 5384820.621 ops/s
Iteration  10: 5210468.299 ops/s
Iteration  11: 5493016.745 ops/s
Iteration  12: 5473569.136 ops/s
Iteration  13: 5280786.256 ops/s
Iteration  14: 5597945.236 ops/s
Iteration  15: 5414932.861 ops/s
Iteration  16: 5377368.805 ops/s
Iteration  17: 5316676.596 ops/s
Iteration  18: 5633521.966 ops/s
Iteration  19: 5308242.266 ops/s
Iteration  20: 5472439.120 ops/s
Iteration  21: 5382037.769 ops/s
Iteration  22: 5340194.011 ops/s
Iteration  23: 5302096.639 ops/s
Iteration  24: 5176777.529 ops/s
Iteration  25: 5441887.309 ops/s
Iteration  26: 5136677.442 ops/s
Iteration  27: 5485750.881 ops/s
Iteration  28: 5340908.185 ops/s
Iteration  29: 5437708.427 ops/s
Iteration  30: 5262815.373 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_cancelWhileRunning":
  5379054.345 ±(99.9%) 82131.809 ops/s [Average]
  (min, avg, max) = (5136677.442, 5379054.345, 5633521.966), stdev = 122931.034
  CI (99.9%): [5296922.536, 5461186.154] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableFromCompletableTest._Benchmark.benchmark_cancelWhileRunning  thrpt   30  5379054.345 ± 82131.809  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 167747.809 ops/s
# Warmup Iteration   2: 315428.257 ops/s
# Warmup Iteration   3: 362447.551 ops/s
# Warmup Iteration   4: 340430.676 ops/s
# Warmup Iteration   5: 355184.832 ops/s
# Warmup Iteration   6: 370818.132 ops/s
# Warmup Iteration   7: 348429.954 ops/s
# Warmup Iteration   8: 369189.796 ops/s
# Warmup Iteration   9: 352216.056 ops/s
# Warmup Iteration  10: 374234.807 ops/s
# Warmup Iteration  11: 363940.833 ops/s
# Warmup Iteration  12: 357181.601 ops/s
# Warmup Iteration  13: 375571.675 ops/s
# Warmup Iteration  14: 358644.446 ops/s
# Warmup Iteration  15: 368584.893 ops/s
# Warmup Iteration  16: 360499.072 ops/s
# Warmup Iteration  17: 370386.178 ops/s
# Warmup Iteration  18: 393695.033 ops/s
# Warmup Iteration  19: 398523.138 ops/s
# Warmup Iteration  20: 382018.576 ops/s
# Warmup Iteration  21: 378166.872 ops/s
# Warmup Iteration  22: 383464.168 ops/s
# Warmup Iteration  23: 396472.501 ops/s
# Warmup Iteration  24: 377013.001 ops/s
# Warmup Iteration  25: 382532.568 ops/s
# Warmup Iteration  26: 387704.915 ops/s
# Warmup Iteration  27: 378489.111 ops/s
# Warmup Iteration  28: 390157.022 ops/s
# Warmup Iteration  29: 389938.241 ops/s
# Warmup Iteration  30: 374950.698 ops/s
Iteration   1: 398018.027 ops/s
Iteration   2: 384991.768 ops/s
Iteration   3: 374729.554 ops/s
Iteration   4: 388450.678 ops/s
Iteration   5: 383332.294 ops/s
Iteration   6: 382932.156 ops/s
Iteration   7: 396133.698 ops/s
Iteration   8: 366613.957 ops/s
Iteration   9: 398259.269 ops/s
Iteration  10: 375273.411 ops/s
Iteration  11: 392394.381 ops/s
Iteration  12: 378792.456 ops/s
Iteration  13: 386253.600 ops/s
Iteration  14: 390110.313 ops/s
Iteration  15: 394237.737 ops/s
Iteration  16: 377388.538 ops/s
Iteration  17: 399047.850 ops/s
Iteration  18: 377686.994 ops/s
Iteration  19: 400422.282 ops/s
Iteration  20: 393661.883 ops/s
Iteration  21: 380216.605 ops/s
Iteration  22: 390827.392 ops/s
Iteration  23: 379736.365 ops/s
Iteration  24: 384835.628 ops/s
Iteration  25: 402450.346 ops/s
Iteration  26: 370387.879 ops/s
Iteration  27: 384260.943 ops/s
Iteration  28: 380327.725 ops/s
Iteration  29: 387918.814 ops/s
Iteration  30: 387570.329 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstError":
  386242.096 ±(99.9%) 6138.444 ops/s [Average]
  (min, avg, max) = (366613.957, 386242.096, 402450.346), stdev = 9187.735
  CI (99.9%): [380103.651, 392380.540] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstError  thrpt   30  386242.096 ± 6138.444  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 160236.020 ops/s
# Warmup Iteration   2: 318505.598 ops/s
# Warmup Iteration   3: 313156.441 ops/s
# Warmup Iteration   4: 295295.177 ops/s
# Warmup Iteration   5: 340168.889 ops/s
# Warmup Iteration   6: 373047.830 ops/s
# Warmup Iteration   7: 305041.168 ops/s
# Warmup Iteration   8: 378238.399 ops/s
# Warmup Iteration   9: 357511.286 ops/s
# Warmup Iteration  10: 362724.430 ops/s
# Warmup Iteration  11: 369646.666 ops/s
# Warmup Iteration  12: 348921.012 ops/s
# Warmup Iteration  13: 374089.176 ops/s
# Warmup Iteration  14: 363024.497 ops/s
# Warmup Iteration  15: 370306.359 ops/s
# Warmup Iteration  16: 352206.692 ops/s
# Warmup Iteration  17: 394109.422 ops/s
# Warmup Iteration  18: 384198.933 ops/s
# Warmup Iteration  19: 380628.656 ops/s
# Warmup Iteration  20: 394481.319 ops/s
# Warmup Iteration  21: 381782.549 ops/s
# Warmup Iteration  22: 394438.778 ops/s
# Warmup Iteration  23: 381428.378 ops/s
# Warmup Iteration  24: 385319.090 ops/s
# Warmup Iteration  25: 386885.869 ops/s
# Warmup Iteration  26: 392100.675 ops/s
# Warmup Iteration  27: 378663.469 ops/s
# Warmup Iteration  28: 385898.752 ops/s
# Warmup Iteration  29: 397649.682 ops/s
# Warmup Iteration  30: 369697.989 ops/s
Iteration   1: 401093.277 ops/s
Iteration   2: 371601.513 ops/s
Iteration   3: 372309.782 ops/s
Iteration   4: 400355.293 ops/s
Iteration   5: 378562.672 ops/s
Iteration   6: 391847.294 ops/s
Iteration   7: 384408.403 ops/s
Iteration   8: 389970.497 ops/s
Iteration   9: 399135.966 ops/s
Iteration  10: 378548.583 ops/s
Iteration  11: 391112.774 ops/s
Iteration  12: 389955.487 ops/s
Iteration  13: 382505.851 ops/s
Iteration  14: 383358.531 ops/s
Iteration  15: 382019.877 ops/s
Iteration  16: 395726.031 ops/s
Iteration  17: 370696.322 ops/s
Iteration  18: 392085.036 ops/s
Iteration  19: 390914.556 ops/s
Iteration  20: 386930.952 ops/s
Iteration  21: 393319.119 ops/s
Iteration  22: 383370.769 ops/s
Iteration  23: 381896.606 ops/s
Iteration  24: 395247.983 ops/s
Iteration  25: 378601.008 ops/s
Iteration  26: 394094.330 ops/s
Iteration  27: 377679.933 ops/s
Iteration  28: 382491.748 ops/s
Iteration  29: 397794.056 ops/s
Iteration  30: 372622.516 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastError":
  386341.892 ±(99.9%) 5964.632 ops/s [Average]
  (min, avg, max) = (370696.322, 386341.892, 401093.277), stdev = 8927.581
  CI (99.9%): [380377.260, 392306.524] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastError  thrpt   30  386341.892 ± 5964.632  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135766.679 ops/s
# Warmup Iteration   2: 328593.984 ops/s
# Warmup Iteration   3: 332074.227 ops/s
# Warmup Iteration   4: 344622.278 ops/s
# Warmup Iteration   5: 361354.818 ops/s
# Warmup Iteration   6: 365911.142 ops/s
# Warmup Iteration   7: 304463.446 ops/s
# Warmup Iteration   8: 360267.832 ops/s
# Warmup Iteration   9: 375827.999 ops/s
# Warmup Iteration  10: 356555.066 ops/s
# Warmup Iteration  11: 368301.638 ops/s
# Warmup Iteration  12: 375556.666 ops/s
# Warmup Iteration  13: 360762.385 ops/s
# Warmup Iteration  14: 371402.819 ops/s
# Warmup Iteration  15: 366505.089 ops/s
# Warmup Iteration  16: 375720.206 ops/s
# Warmup Iteration  17: 389154.350 ops/s
# Warmup Iteration  18: 382362.112 ops/s
# Warmup Iteration  19: 401764.506 ops/s
# Warmup Iteration  20: 377597.120 ops/s
# Warmup Iteration  21: 400244.909 ops/s
# Warmup Iteration  22: 403796.314 ops/s
# Warmup Iteration  23: 366292.034 ops/s
# Warmup Iteration  24: 402197.115 ops/s
# Warmup Iteration  25: 380493.342 ops/s
# Warmup Iteration  26: 384556.559 ops/s
# Warmup Iteration  27: 381321.461 ops/s
# Warmup Iteration  28: 394672.051 ops/s
# Warmup Iteration  29: 384560.196 ops/s
# Warmup Iteration  30: 396378.734 ops/s
Iteration   1: 381907.152 ops/s
Iteration   2: 383668.907 ops/s
Iteration   3: 381334.213 ops/s
Iteration   4: 388024.009 ops/s
Iteration   5: 397938.151 ops/s
Iteration   6: 372808.702 ops/s
Iteration   7: 394901.557 ops/s
Iteration   8: 381108.971 ops/s
Iteration   9: 391416.226 ops/s
Iteration  10: 389763.290 ops/s
Iteration  11: 378990.263 ops/s
Iteration  12: 398175.859 ops/s
Iteration  13: 388387.961 ops/s
Iteration  14: 377670.244 ops/s
Iteration  15: 382581.335 ops/s
Iteration  16: 382916.971 ops/s
Iteration  17: 376097.488 ops/s
Iteration  18: 396661.934 ops/s
Iteration  19: 365735.473 ops/s
Iteration  20: 395203.202 ops/s
Iteration  21: 372924.263 ops/s
Iteration  22: 385792.925 ops/s
Iteration  23: 400649.463 ops/s
Iteration  24: 369559.356 ops/s
Iteration  25: 402132.731 ops/s
Iteration  26: 374032.651 ops/s
Iteration  27: 386186.067 ops/s
Iteration  28: 393533.347 ops/s
Iteration  29: 377542.722 ops/s
Iteration  30: 327216.002 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleError":
  383162.048 ±(99.9%) 9540.662 ops/s [Average]
  (min, avg, max) = (327216.002, 383162.048, 402132.731), stdev = 14280.015
  CI (99.9%): [373621.386, 392702.710] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleError  thrpt   30  383162.048 ± 9540.662  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 182807.033 ops/s
# Warmup Iteration   2: 338548.781 ops/s
# Warmup Iteration   3: 330346.619 ops/s
# Warmup Iteration   4: 364522.925 ops/s
# Warmup Iteration   5: 366331.405 ops/s
# Warmup Iteration   6: 347527.099 ops/s
# Warmup Iteration   7: 368770.533 ops/s
# Warmup Iteration   8: 358852.493 ops/s
# Warmup Iteration   9: 358164.315 ops/s
# Warmup Iteration  10: 374333.168 ops/s
# Warmup Iteration  11: 367019.371 ops/s
# Warmup Iteration  12: 346409.478 ops/s
# Warmup Iteration  13: 373283.481 ops/s
# Warmup Iteration  14: 351580.383 ops/s
# Warmup Iteration  15: 359010.676 ops/s
# Warmup Iteration  16: 361708.580 ops/s
# Warmup Iteration  17: 382625.366 ops/s
# Warmup Iteration  18: 394836.493 ops/s
# Warmup Iteration  19: 370454.354 ops/s
# Warmup Iteration  20: 395081.836 ops/s
# Warmup Iteration  21: 370863.212 ops/s
# Warmup Iteration  22: 382543.807 ops/s
# Warmup Iteration  23: 395701.765 ops/s
# Warmup Iteration  24: 378189.569 ops/s
# Warmup Iteration  25: 374881.320 ops/s
# Warmup Iteration  26: 391593.697 ops/s
# Warmup Iteration  27: 375286.724 ops/s
# Warmup Iteration  28: 380303.226 ops/s
# Warmup Iteration  29: 365156.320 ops/s
# Warmup Iteration  30: 394627.912 ops/s
Iteration   1: 373112.226 ops/s
Iteration   2: 387090.796 ops/s
Iteration   3: 396994.387 ops/s
Iteration   4: 370781.370 ops/s
Iteration   5: 392848.224 ops/s
Iteration   6: 376314.594 ops/s
Iteration   7: 390882.205 ops/s
Iteration   8: 384464.685 ops/s
Iteration   9: 384678.211 ops/s
Iteration  10: 371722.305 ops/s
Iteration  11: 377181.067 ops/s
Iteration  12: 394680.733 ops/s
Iteration  13: 373415.612 ops/s
Iteration  14: 383701.182 ops/s
Iteration  15: 380136.489 ops/s
Iteration  16: 380407.426 ops/s
Iteration  17: 389873.059 ops/s
Iteration  18: 375543.614 ops/s
Iteration  19: 400549.064 ops/s
Iteration  20: 373424.791 ops/s
Iteration  21: 382580.977 ops/s
Iteration  22: 388272.713 ops/s
Iteration  23: 383354.179 ops/s
Iteration  24: 383938.773 ops/s
Iteration  25: 380601.649 ops/s
Iteration  26: 387798.549 ops/s
Iteration  27: 382261.686 ops/s
Iteration  28: 375850.530 ops/s
Iteration  29: 390461.361 ops/s
Iteration  30: 372700.675 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstError":
  382854.104 ±(99.9%) 5330.766 ops/s [Average]
  (min, avg, max) = (370781.370, 382854.104, 400549.064), stdev = 7978.841
  CI (99.9%): [377523.338, 388184.871] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstError  thrpt   30  382854.104 ± 5330.766  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_returnItem$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_returnItem

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 231827.264 ops/s
# Warmup Iteration   2: 533348.038 ops/s
# Warmup Iteration   3: 639435.315 ops/s
# Warmup Iteration   4: 663209.302 ops/s
# Warmup Iteration   5: 701752.715 ops/s
# Warmup Iteration   6: 663571.163 ops/s
# Warmup Iteration   7: 672005.044 ops/s
# Warmup Iteration   8: 718219.882 ops/s
# Warmup Iteration   9: 663571.793 ops/s
# Warmup Iteration  10: 673564.045 ops/s
# Warmup Iteration  11: 677506.879 ops/s
# Warmup Iteration  12: 698073.564 ops/s
# Warmup Iteration  13: 654691.435 ops/s
# Warmup Iteration  14: 647097.965 ops/s
# Warmup Iteration  15: 638065.165 ops/s
# Warmup Iteration  16: 688697.945 ops/s
# Warmup Iteration  17: 726701.451 ops/s
# Warmup Iteration  18: 704098.370 ops/s
# Warmup Iteration  19: 733748.655 ops/s
# Warmup Iteration  20: 707715.196 ops/s
# Warmup Iteration  21: 733265.970 ops/s
# Warmup Iteration  22: 717331.694 ops/s
# Warmup Iteration  23: 713247.175 ops/s
# Warmup Iteration  24: 731276.301 ops/s
# Warmup Iteration  25: 687633.329 ops/s
# Warmup Iteration  26: 738249.025 ops/s
# Warmup Iteration  27: 717441.856 ops/s
# Warmup Iteration  28: 690393.749 ops/s
# Warmup Iteration  29: 747386.582 ops/s
# Warmup Iteration  30: 698057.912 ops/s
Iteration   1: 737441.593 ops/s
Iteration   2: 703096.372 ops/s
Iteration   3: 709186.419 ops/s
Iteration   4: 738454.644 ops/s
Iteration   5: 697630.174 ops/s
Iteration   6: 702929.177 ops/s
Iteration   7: 758926.642 ops/s
Iteration   8: 711159.415 ops/s
Iteration   9: 697687.621 ops/s
Iteration  10: 742810.295 ops/s
Iteration  11: 700311.132 ops/s
Iteration  12: 734451.897 ops/s
Iteration  13: 705254.312 ops/s
Iteration  14: 724555.622 ops/s
Iteration  15: 731563.641 ops/s
Iteration  16: 699587.872 ops/s
Iteration  17: 726757.814 ops/s
Iteration  18: 720197.896 ops/s
Iteration  19: 715904.280 ops/s
Iteration  20: 740123.794 ops/s
Iteration  21: 706010.220 ops/s
Iteration  22: 717951.798 ops/s
Iteration  23: 697818.173 ops/s
Iteration  24: 735138.980 ops/s
Iteration  25: 480190.243 ops/s
Iteration  26: 701645.180 ops/s
Iteration  27: 731253.672 ops/s
Iteration  28: 700801.131 ops/s
Iteration  29: 726667.260 ops/s
Iteration  30: 709084.703 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_returnItem":
  710153.066 ±(99.9%) 31095.689 ops/s [Average]
  (min, avg, max) = (480190.243, 710153.066, 758926.642), stdev = 46542.567
  CI (99.9%): [679057.376, 741248.755] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableOnErrorReturnTest._Benchmark.benchmark_returnItem  thrpt   30  710153.066 ± 31095.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction7$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction7

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 468709.857 ops/s
# Warmup Iteration   2: 570570.441 ops/s
# Warmup Iteration   3: 733826.610 ops/s
# Warmup Iteration   4: 665625.172 ops/s
# Warmup Iteration   5: 724212.313 ops/s
# Warmup Iteration   6: 620540.592 ops/s
# Warmup Iteration   7: 714213.624 ops/s
# Warmup Iteration   8: 748266.664 ops/s
# Warmup Iteration   9: 711779.050 ops/s
# Warmup Iteration  10: 744609.293 ops/s
# Warmup Iteration  11: 722850.931 ops/s
# Warmup Iteration  12: 710692.920 ops/s
# Warmup Iteration  13: 755301.117 ops/s
# Warmup Iteration  14: 719209.271 ops/s
# Warmup Iteration  15: 760330.002 ops/s
# Warmup Iteration  16: 712065.049 ops/s
# Warmup Iteration  17: 770787.579 ops/s
# Warmup Iteration  18: 773083.318 ops/s
# Warmup Iteration  19: 772782.888 ops/s
# Warmup Iteration  20: 772488.629 ops/s
# Warmup Iteration  21: 769500.455 ops/s
# Warmup Iteration  22: 774626.881 ops/s
# Warmup Iteration  23: 760102.869 ops/s
# Warmup Iteration  24: 785472.001 ops/s
# Warmup Iteration  25: 755345.721 ops/s
# Warmup Iteration  26: 794732.450 ops/s
# Warmup Iteration  27: 794922.302 ops/s
# Warmup Iteration  28: 779235.568 ops/s
# Warmup Iteration  29: 762063.400 ops/s
# Warmup Iteration  30: 783060.991 ops/s
Iteration   1: 746964.108 ops/s
Iteration   2: 768905.035 ops/s
Iteration   3: 797837.804 ops/s
Iteration   4: 756812.828 ops/s
Iteration   5: 777032.477 ops/s
Iteration   6: 763333.411 ops/s
Iteration   7: 759103.918 ops/s
Iteration   8: 751798.509 ops/s
Iteration   9: 784142.816 ops/s
Iteration  10: 750391.294 ops/s
Iteration  11: 769737.204 ops/s
Iteration  12: 751041.658 ops/s
Iteration  13: 769951.308 ops/s
Iteration  14: 773775.521 ops/s
Iteration  15: 753961.937 ops/s
Iteration  16: 802476.706 ops/s
Iteration  17: 765566.641 ops/s
Iteration  18: 777481.337 ops/s
Iteration  19: 795180.146 ops/s
Iteration  20: 745322.925 ops/s
Iteration  21: 803015.996 ops/s
Iteration  22: 756867.276 ops/s
Iteration  23: 795883.391 ops/s
Iteration  24: 762339.627 ops/s
Iteration  25: 785315.323 ops/s
Iteration  26: 770437.508 ops/s
Iteration  27: 778294.562 ops/s
Iteration  28: 793649.894 ops/s
Iteration  29: 756589.791 ops/s
Iteration  30: 778727.731 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_toFunction7":
  771397.956 ±(99.9%) 11548.661 ops/s [Average]
  (min, avg, max) = (745322.925, 771397.956, 803015.996), stdev = 17285.493
  CI (99.9%): [759849.295, 782946.617] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt       Score       Error  Units
FunctionsTest._Benchmark.benchmark_toFunction7  thrpt   30  771397.956 ± 11548.661  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8795998.813 ops/s
# Warmup Iteration   2: 10617318.394 ops/s
# Warmup Iteration   3: 16598454.641 ops/s
# Warmup Iteration   4: 15783800.691 ops/s
# Warmup Iteration   5: 16269815.576 ops/s
# Warmup Iteration   6: 16201799.840 ops/s
# Warmup Iteration   7: 16492842.973 ops/s
# Warmup Iteration   8: 16719470.954 ops/s
# Warmup Iteration   9: 15887275.137 ops/s
# Warmup Iteration  10: 16546772.670 ops/s
# Warmup Iteration  11: 15781353.160 ops/s
# Warmup Iteration  12: 16490191.827 ops/s
# Warmup Iteration  13: 16746056.397 ops/s
# Warmup Iteration  14: 15653712.834 ops/s
# Warmup Iteration  15: 16245123.695 ops/s
# Warmup Iteration  16: 16720679.374 ops/s
# Warmup Iteration  17: 16225639.904 ops/s
# Warmup Iteration  18: 16816893.686 ops/s
# Warmup Iteration  19: 16035255.363 ops/s
# Warmup Iteration  20: 16769577.753 ops/s
# Warmup Iteration  21: 15895455.085 ops/s
# Warmup Iteration  22: 16228215.885 ops/s
# Warmup Iteration  23: 16275037.933 ops/s
# Warmup Iteration  24: 16446569.119 ops/s
# Warmup Iteration  25: 16212559.547 ops/s
# Warmup Iteration  26: 15810187.447 ops/s
# Warmup Iteration  27: 15987813.184 ops/s
# Warmup Iteration  28: 16362775.410 ops/s
# Warmup Iteration  29: 16702630.330 ops/s
# Warmup Iteration  30: 15767963.156 ops/s
Iteration   1: 16451644.193 ops/s
Iteration   2: 16893523.691 ops/s
Iteration   3: 15753684.329 ops/s
Iteration   4: 16412835.247 ops/s
Iteration   5: 16045875.279 ops/s
Iteration   6: 16778844.736 ops/s
Iteration   7: 16015335.547 ops/s
Iteration   8: 16201642.341 ops/s
Iteration   9: 16704639.463 ops/s
Iteration  10: 15544183.631 ops/s
Iteration  11: 16898308.127 ops/s
Iteration  12: 16135393.329 ops/s
Iteration  13: 16036099.496 ops/s
Iteration  14: 16854699.208 ops/s
Iteration  15: 16618891.980 ops/s
Iteration  16: 16452924.446 ops/s
Iteration  17: 16360701.934 ops/s
Iteration  18: 16499868.808 ops/s
Iteration  19: 15999777.115 ops/s
Iteration  20: 13900305.972 ops/s
Iteration  21: 16054828.897 ops/s
Iteration  22: 16181119.062 ops/s
Iteration  23: 16535503.687 ops/s
Iteration  24: 15625386.545 ops/s
Iteration  25: 16380699.316 ops/s
Iteration  26: 15937457.966 ops/s
Iteration  27: 16678203.799 ops/s
Iteration  28: 16156223.236 ops/s
Iteration  29: 16821106.271 ops/s
Iteration  30: 16003660.014 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_cancel":
  16231112.255 ±(99.9%) 386186.023 ops/s [Average]
  (min, avg, max) = (13900305.972, 16231112.255, 16898308.127), stdev = 578025.103
  CI (99.9%): [15844926.232, 16617298.279] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt         Score        Error  Units
BoundedSubscriberTest._Benchmark.benchmark_cancel  thrpt   30  16231112.255 ± 386186.023  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 143797.693 ops/s
# Warmup Iteration   2: 570669.979 ops/s
# Warmup Iteration   3: 728607.339 ops/s
# Warmup Iteration   4: 686580.466 ops/s
# Warmup Iteration   5: 705289.784 ops/s
# Warmup Iteration   6: 682476.367 ops/s
# Warmup Iteration   7: 680924.572 ops/s
# Warmup Iteration   8: 697077.812 ops/s
# Warmup Iteration   9: 686990.540 ops/s
# Warmup Iteration  10: 712485.264 ops/s
# Warmup Iteration  11: 667067.538 ops/s
# Warmup Iteration  12: 697426.043 ops/s
# Warmup Iteration  13: 669559.296 ops/s
# Warmup Iteration  14: 680984.049 ops/s
# Warmup Iteration  15: 718826.466 ops/s
# Warmup Iteration  16: 696352.928 ops/s
# Warmup Iteration  17: 735166.084 ops/s
# Warmup Iteration  18: 748765.601 ops/s
# Warmup Iteration  19: 716287.913 ops/s
# Warmup Iteration  20: 762322.558 ops/s
# Warmup Iteration  21: 660902.683 ops/s
# Warmup Iteration  22: 750563.613 ops/s
# Warmup Iteration  23: 741840.463 ops/s
# Warmup Iteration  24: 728827.520 ops/s
# Warmup Iteration  25: 752805.301 ops/s
# Warmup Iteration  26: 744456.756 ops/s
# Warmup Iteration  27: 725167.363 ops/s
# Warmup Iteration  28: 754670.737 ops/s
# Warmup Iteration  29: 733164.937 ops/s
# Warmup Iteration  30: 745108.685 ops/s
Iteration   1: 728550.307 ops/s
Iteration   2: 741258.003 ops/s
Iteration   3: 741452.302 ops/s
Iteration   4: 743634.702 ops/s
Iteration   5: 764120.298 ops/s
Iteration   6: 721338.549 ops/s
Iteration   7: 758714.345 ops/s
Iteration   8: 756237.580 ops/s
Iteration   9: 724702.041 ops/s
Iteration  10: 765972.699 ops/s
Iteration  11: 714683.499 ops/s
Iteration  12: 751547.442 ops/s
Iteration  13: 723783.781 ops/s
Iteration  14: 740295.970 ops/s
Iteration  15: 755817.584 ops/s
Iteration  16: 725634.791 ops/s
Iteration  17: 734628.678 ops/s
Iteration  18: 753631.155 ops/s
Iteration  19: 718110.905 ops/s
Iteration  20: 749418.583 ops/s
Iteration  21: 719203.925 ops/s
Iteration  22: 763457.983 ops/s
Iteration  23: 759164.413 ops/s
Iteration  24: 729886.752 ops/s
Iteration  25: 753262.640 ops/s
Iteration  26: 767294.493 ops/s
Iteration  27: 730782.391 ops/s
Iteration  28: 742176.892 ops/s
Iteration  29: 779150.820 ops/s
Iteration  30: 717637.961 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipLastTest._Benchmark.benchmark_error":
  742518.383 ±(99.9%) 11888.543 ops/s [Average]
  (min, avg, max) = (714683.499, 742518.383, 779150.820), stdev = 17794.213
  CI (99.9%): [730629.840, 754406.926] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
FlowableSkipLastTest._Benchmark.benchmark_error  thrpt   30  742518.383 ± 11888.543  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_utilityClass$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_utilityClass

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 186770.022 ops/s
# Warmup Iteration   2: 315039.696 ops/s
# Warmup Iteration   3: 346100.094 ops/s
# Warmup Iteration   4: 338376.449 ops/s
# Warmup Iteration   5: 333436.952 ops/s
# Warmup Iteration   6: 323427.663 ops/s
# Warmup Iteration   7: 344967.517 ops/s
# Warmup Iteration   8: 317445.744 ops/s
# Warmup Iteration   9: 344711.001 ops/s
# Warmup Iteration  10: 353532.907 ops/s
# Warmup Iteration  11: 334460.710 ops/s
# Warmup Iteration  12: 355356.391 ops/s
# Warmup Iteration  13: 333945.160 ops/s
# Warmup Iteration  14: 338635.006 ops/s
# Warmup Iteration  15: 351407.372 ops/s
# Warmup Iteration  16: 333814.741 ops/s
# Warmup Iteration  17: 376282.818 ops/s
# Warmup Iteration  18: 375926.151 ops/s
# Warmup Iteration  19: 361472.212 ops/s
# Warmup Iteration  20: 368303.760 ops/s
# Warmup Iteration  21: 357130.544 ops/s
# Warmup Iteration  22: 368546.844 ops/s
# Warmup Iteration  23: 362193.521 ops/s
# Warmup Iteration  24: 355804.011 ops/s
# Warmup Iteration  25: 368928.535 ops/s
# Warmup Iteration  26: 356015.141 ops/s
# Warmup Iteration  27: 372336.260 ops/s
# Warmup Iteration  28: 358811.092 ops/s
# Warmup Iteration  29: 354718.974 ops/s
# Warmup Iteration  30: 370784.847 ops/s
Iteration   1: 369071.097 ops/s
Iteration   2: 358338.468 ops/s
Iteration   3: 365843.962 ops/s
Iteration   4: 354209.995 ops/s
Iteration   5: 371196.005 ops/s
Iteration   6: 363554.230 ops/s
Iteration   7: 362129.900 ops/s
Iteration   8: 371573.080 ops/s
Iteration   9: 354864.019 ops/s
Iteration  10: 379249.706 ops/s
Iteration  11: 351152.347 ops/s
Iteration  12: 366051.347 ops/s
Iteration  13: 376952.045 ops/s
Iteration  14: 354117.825 ops/s
Iteration  15: 282265.219 ops/s
Iteration  16: 371582.636 ops/s
Iteration  17: 359346.603 ops/s
Iteration  18: 374555.930 ops/s
Iteration  19: 357733.069 ops/s
Iteration  20: 364536.043 ops/s
Iteration  21: 379245.768 ops/s
Iteration  22: 346536.102 ops/s
Iteration  23: 368936.034 ops/s
Iteration  24: 363288.260 ops/s
Iteration  25: 363182.135 ops/s
Iteration  26: 360081.524 ops/s
Iteration  27: 355913.355 ops/s
Iteration  28: 379510.339 ops/s
Iteration  29: 367841.660 ops/s
Iteration  30: 347735.133 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_utilityClass":
  361353.128 ±(99.9%) 11694.224 ops/s [Average]
  (min, avg, max) = (282265.219, 361353.128, 379510.339), stdev = 17503.366
  CI (99.9%): [349658.903, 373047.352] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
FunctionsTest._Benchmark.benchmark_utilityClass  thrpt   30  361353.128 ± 11694.224  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_sourceSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_sourceSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100097.802 ops/s
# Warmup Iteration   2: 488480.395 ops/s
# Warmup Iteration   3: 543913.270 ops/s
# Warmup Iteration   4: 484393.469 ops/s
# Warmup Iteration   5: 584903.747 ops/s
# Warmup Iteration   6: 589799.656 ops/s
# Warmup Iteration   7: 596167.500 ops/s
# Warmup Iteration   8: 589488.672 ops/s
# Warmup Iteration   9: 604103.712 ops/s
# Warmup Iteration  10: 599014.569 ops/s
# Warmup Iteration  11: 580994.439 ops/s
# Warmup Iteration  12: 591740.795 ops/s
# Warmup Iteration  13: 605025.004 ops/s
# Warmup Iteration  14: 584434.613 ops/s
# Warmup Iteration  15: 577362.942 ops/s
# Warmup Iteration  16: 593523.955 ops/s
# Warmup Iteration  17: 607092.511 ops/s
# Warmup Iteration  18: 615631.567 ops/s
# Warmup Iteration  19: 632635.015 ops/s
# Warmup Iteration  20: 602446.517 ops/s
# Warmup Iteration  21: 629375.540 ops/s
# Warmup Iteration  22: 613761.769 ops/s
# Warmup Iteration  23: 627367.379 ops/s
# Warmup Iteration  24: 610300.204 ops/s
# Warmup Iteration  25: 604204.374 ops/s
# Warmup Iteration  26: 635027.296 ops/s
# Warmup Iteration  27: 614841.271 ops/s
# Warmup Iteration  28: 613998.520 ops/s
# Warmup Iteration  29: 619735.952 ops/s
# Warmup Iteration  30: 627588.444 ops/s
Iteration   1: 631607.420 ops/s
Iteration   2: 601756.174 ops/s
Iteration   3: 633201.201 ops/s
Iteration   4: 637267.468 ops/s
Iteration   5: 609092.000 ops/s
Iteration   6: 622599.610 ops/s
Iteration   7: 630883.953 ops/s
Iteration   8: 600929.798 ops/s
Iteration   9: 608011.546 ops/s
Iteration  10: 602630.660 ops/s
Iteration  11: 631937.465 ops/s
Iteration  12: 617031.948 ops/s
Iteration  13: 619418.109 ops/s
Iteration  14: 623182.305 ops/s
Iteration  15: 607571.804 ops/s
Iteration  16: 615177.954 ops/s
Iteration  17: 633672.222 ops/s
Iteration  18: 636064.840 ops/s
Iteration  19: 616384.967 ops/s
Iteration  20: 623836.035 ops/s
Iteration  21: 603255.679 ops/s
Iteration  22: 634214.946 ops/s
Iteration  23: 615545.841 ops/s
Iteration  24: 624549.349 ops/s
Iteration  25: 629859.453 ops/s
Iteration  26: 635628.823 ops/s
Iteration  27: 628772.271 ops/s
Iteration  28: 604972.533 ops/s
Iteration  29: 603048.253 ops/s
Iteration  30: 629211.973 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_sourceSupplierReturnsNull":
  620377.220 ±(99.9%) 8173.978 ops/s [Average]
  (min, avg, max) = (600929.798, 620377.220, 637267.468), stdev = 12234.426
  CI (99.9%): [612203.242, 628551.198] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableUsingTest._Benchmark.benchmark_sourceSupplierReturnsNull  thrpt   30  620377.220 ± 8173.978  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_errorEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_errorEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 142215.450 ops/s
# Warmup Iteration   2: 540752.966 ops/s
# Warmup Iteration   3: 597231.507 ops/s
# Warmup Iteration   4: 608454.302 ops/s
# Warmup Iteration   5: 630511.535 ops/s
# Warmup Iteration   6: 610749.194 ops/s
# Warmup Iteration   7: 578599.182 ops/s
# Warmup Iteration   8: 624165.675 ops/s
# Warmup Iteration   9: 602393.271 ops/s
# Warmup Iteration  10: 627561.594 ops/s
# Warmup Iteration  11: 618392.786 ops/s
# Warmup Iteration  12: 617258.858 ops/s
# Warmup Iteration  13: 626294.968 ops/s
# Warmup Iteration  14: 628290.881 ops/s
# Warmup Iteration  15: 619709.417 ops/s
# Warmup Iteration  16: 645376.061 ops/s
# Warmup Iteration  17: 628517.342 ops/s
# Warmup Iteration  18: 628014.223 ops/s
# Warmup Iteration  19: 678397.775 ops/s
# Warmup Iteration  20: 640515.965 ops/s
# Warmup Iteration  21: 664650.919 ops/s
# Warmup Iteration  22: 653079.358 ops/s
# Warmup Iteration  23: 623711.863 ops/s
# Warmup Iteration  24: 650441.443 ops/s
# Warmup Iteration  25: 653507.068 ops/s
# Warmup Iteration  26: 653873.163 ops/s
# Warmup Iteration  27: 643200.124 ops/s
# Warmup Iteration  28: 656641.660 ops/s
# Warmup Iteration  29: 676508.574 ops/s
# Warmup Iteration  30: 661591.470 ops/s
Iteration   1: 621551.827 ops/s
Iteration   2: 645780.003 ops/s
Iteration   3: 676407.236 ops/s
Iteration   4: 644900.312 ops/s
Iteration   5: 647129.577 ops/s
Iteration   6: 663630.183 ops/s
Iteration   7: 653329.662 ops/s
Iteration   8: 645787.115 ops/s
Iteration   9: 594001.749 ops/s
Iteration  10: 503797.685 ops/s
Iteration  11: 642536.094 ops/s
Iteration  12: 642152.668 ops/s
Iteration  13: 642637.475 ops/s
Iteration  14: 630189.505 ops/s
Iteration  15: 628600.784 ops/s
Iteration  16: 673117.990 ops/s
Iteration  17: 613506.017 ops/s
Iteration  18: 656678.558 ops/s
Iteration  19: 682188.568 ops/s
Iteration  20: 632292.478 ops/s
Iteration  21: 664433.334 ops/s
Iteration  22: 645600.106 ops/s
Iteration  23: 638201.521 ops/s
Iteration  24: 657540.758 ops/s
Iteration  25: 663465.852 ops/s
Iteration  26: 642272.493 ops/s
Iteration  27: 645984.165 ops/s
Iteration  28: 676464.726 ops/s
Iteration  29: 617200.134 ops/s
Iteration  30: 666359.220 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_errorEager":
  641924.593 ±(99.9%) 21961.693 ops/s [Average]
  (min, avg, max) = (503797.685, 641924.593, 682188.568), stdev = 32871.231
  CI (99.9%): [619962.900, 663886.286] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
CompletableUsingTest._Benchmark.benchmark_errorEager  thrpt   30  641924.593 ± 21961.693  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_errorNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_errorNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 300060.733 ops/s
# Warmup Iteration   2: 514037.829 ops/s
# Warmup Iteration   3: 604899.714 ops/s
# Warmup Iteration   4: 617772.038 ops/s
# Warmup Iteration   5: 559328.460 ops/s
# Warmup Iteration   6: 665172.737 ops/s
# Warmup Iteration   7: 643492.229 ops/s
# Warmup Iteration   8: 630244.410 ops/s
# Warmup Iteration   9: 648784.037 ops/s
# Warmup Iteration  10: 629563.006 ops/s
# Warmup Iteration  11: 645624.935 ops/s
# Warmup Iteration  12: 651443.884 ops/s
# Warmup Iteration  13: 638349.195 ops/s
# Warmup Iteration  14: 654688.792 ops/s
# Warmup Iteration  15: 675245.451 ops/s
# Warmup Iteration  16: 658055.891 ops/s
# Warmup Iteration  17: 669892.440 ops/s
# Warmup Iteration  18: 677192.733 ops/s
# Warmup Iteration  19: 696982.766 ops/s
# Warmup Iteration  20: 671745.754 ops/s
# Warmup Iteration  21: 680767.902 ops/s
# Warmup Iteration  22: 704908.477 ops/s
# Warmup Iteration  23: 686149.393 ops/s
# Warmup Iteration  24: 657638.822 ops/s
# Warmup Iteration  25: 702302.355 ops/s
# Warmup Iteration  26: 662130.540 ops/s
# Warmup Iteration  27: 686195.493 ops/s
# Warmup Iteration  28: 669058.464 ops/s
# Warmup Iteration  29: 657509.957 ops/s
# Warmup Iteration  30: 692359.610 ops/s
Iteration   1: 656106.541 ops/s
Iteration   2: 676313.593 ops/s
Iteration   3: 715029.926 ops/s
Iteration   4: 669701.377 ops/s
Iteration   5: 695835.214 ops/s
Iteration   6: 664854.900 ops/s
Iteration   7: 683170.858 ops/s
Iteration   8: 691334.749 ops/s
Iteration   9: 672196.493 ops/s
Iteration  10: 704321.571 ops/s
Iteration  11: 662694.838 ops/s
Iteration  12: 676015.164 ops/s
Iteration  13: 677638.344 ops/s
Iteration  14: 664446.569 ops/s
Iteration  15: 664543.243 ops/s
Iteration  16: 674328.453 ops/s
Iteration  17: 656477.387 ops/s
Iteration  18: 689766.530 ops/s
Iteration  19: 670510.507 ops/s
Iteration  20: 703475.770 ops/s
Iteration  21: 670066.588 ops/s
Iteration  22: 667933.268 ops/s
Iteration  23: 691119.965 ops/s
Iteration  24: 669038.532 ops/s
Iteration  25: 678272.416 ops/s
Iteration  26: 660459.679 ops/s
Iteration  27: 684839.334 ops/s
Iteration  28: 684456.413 ops/s
Iteration  29: 685179.825 ops/s
Iteration  30: 683549.451 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_errorNonEager":
  678122.583 ±(99.9%) 9739.234 ops/s [Average]
  (min, avg, max) = (656106.541, 678122.583, 715029.926), stdev = 14577.228
  CI (99.9%): [668383.350, 687861.817] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
CompletableUsingTest._Benchmark.benchmark_errorNonEager  thrpt   30  678122.583 ± 9739.234  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1025641.993 ops/s
# Warmup Iteration   2: 2930030.346 ops/s
# Warmup Iteration   3: 4000853.167 ops/s
# Warmup Iteration   4: 4297613.348 ops/s
# Warmup Iteration   5: 4381015.988 ops/s
# Warmup Iteration   6: 4225105.538 ops/s
# Warmup Iteration   7: 4389766.040 ops/s
# Warmup Iteration   8: 4415771.452 ops/s
# Warmup Iteration   9: 4388763.681 ops/s
# Warmup Iteration  10: 4264875.383 ops/s
# Warmup Iteration  11: 4334031.537 ops/s
# Warmup Iteration  12: 4351694.020 ops/s
# Warmup Iteration  13: 4321664.496 ops/s
# Warmup Iteration  14: 4454886.892 ops/s
# Warmup Iteration  15: 4348761.994 ops/s
# Warmup Iteration  16: 4403682.850 ops/s
# Warmup Iteration  17: 4287715.965 ops/s
# Warmup Iteration  18: 4446837.134 ops/s
# Warmup Iteration  19: 4268535.188 ops/s
# Warmup Iteration  20: 4464740.015 ops/s
# Warmup Iteration  21: 4324833.693 ops/s
# Warmup Iteration  22: 4315861.994 ops/s
# Warmup Iteration  23: 4466720.934 ops/s
# Warmup Iteration  24: 4459414.914 ops/s
# Warmup Iteration  25: 4185585.707 ops/s
# Warmup Iteration  26: 4419526.792 ops/s
# Warmup Iteration  27: 4280017.670 ops/s
# Warmup Iteration  28: 4504230.876 ops/s
# Warmup Iteration  29: 4219378.246 ops/s
# Warmup Iteration  30: 4303438.293 ops/s
Iteration   1: 4281874.277 ops/s
Iteration   2: 4308263.952 ops/s
Iteration   3: 4485729.114 ops/s
Iteration   4: 3643167.045 ops/s
Iteration   5: 4208181.017 ops/s
Iteration   6: 4322860.017 ops/s
Iteration   7: 4253899.355 ops/s
Iteration   8: 4517625.972 ops/s
Iteration   9: 4340983.615 ops/s
Iteration  10: 4448561.838 ops/s
Iteration  11: 4263378.420 ops/s
Iteration  12: 4290668.372 ops/s
Iteration  13: 4506879.447 ops/s
Iteration  14: 4302152.752 ops/s
Iteration  15: 4121163.695 ops/s
Iteration  16: 4394490.023 ops/s
Iteration  17: 4318820.506 ops/s
Iteration  18: 4473207.639 ops/s
Iteration  19: 4506178.485 ops/s
Iteration  20: 4265323.117 ops/s
Iteration  21: 4434913.176 ops/s
Iteration  22: 4255599.928 ops/s
Iteration  23: 4314102.097 ops/s
Iteration  24: 4359043.570 ops/s
Iteration  25: 4435520.579 ops/s
Iteration  26: 4406443.316 ops/s
Iteration  27: 4226605.626 ops/s
Iteration  28: 4559357.537 ops/s
Iteration  29: 4283425.095 ops/s
Iteration  30: 4230985.761 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource":
  4325313.511 ±(99.9%) 112328.434 ops/s [Average]
  (min, avg, max) = (3643167.045, 4325313.511, 4559357.537), stdev = 168127.925
  CI (99.9%): [4212985.077, 4437641.946] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score        Error  Units
CompletableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource  thrpt   30  4325313.511 ± 112328.434  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1210871.093 ops/s
# Warmup Iteration   2: 3372615.978 ops/s
# Warmup Iteration   3: 5373842.741 ops/s
# Warmup Iteration   4: 4950106.688 ops/s
# Warmup Iteration   5: 5207697.425 ops/s
# Warmup Iteration   6: 5029048.865 ops/s
# Warmup Iteration   7: 5284588.292 ops/s
# Warmup Iteration   8: 5085452.801 ops/s
# Warmup Iteration   9: 5044326.161 ops/s
# Warmup Iteration  10: 5232427.209 ops/s
# Warmup Iteration  11: 5402354.097 ops/s
# Warmup Iteration  12: 4985460.921 ops/s
# Warmup Iteration  13: 5242931.079 ops/s
# Warmup Iteration  14: 4991584.300 ops/s
# Warmup Iteration  15: 5366656.898 ops/s
# Warmup Iteration  16: 5196840.240 ops/s
# Warmup Iteration  17: 5001424.676 ops/s
# Warmup Iteration  18: 5250682.987 ops/s
# Warmup Iteration  19: 5173423.415 ops/s
# Warmup Iteration  20: 5136755.228 ops/s
# Warmup Iteration  21: 5251320.753 ops/s
# Warmup Iteration  22: 5087564.646 ops/s
# Warmup Iteration  23: 5215264.488 ops/s
# Warmup Iteration  24: 5117414.857 ops/s
# Warmup Iteration  25: 5131129.969 ops/s
# Warmup Iteration  26: 5136612.568 ops/s
# Warmup Iteration  27: 5319311.520 ops/s
# Warmup Iteration  28: 5174141.968 ops/s
# Warmup Iteration  29: 5338370.985 ops/s
# Warmup Iteration  30: 5061541.866 ops/s
Iteration   1: 5163710.963 ops/s
Iteration   2: 5136189.598 ops/s
Iteration   3: 5007356.492 ops/s
Iteration   4: 5080382.559 ops/s
Iteration   5: 5330090.207 ops/s
Iteration   6: 4977992.586 ops/s
Iteration   7: 5202615.264 ops/s
Iteration   8: 5215970.785 ops/s
Iteration   9: 5202875.888 ops/s
Iteration  10: 5195287.197 ops/s
Iteration  11: 5174942.761 ops/s
Iteration  12: 5069250.685 ops/s
Iteration  13: 5310991.213 ops/s
Iteration  14: 5030451.149 ops/s
Iteration  15: 5209121.925 ops/s
Iteration  16: 5057686.535 ops/s
Iteration  17: 5296242.745 ops/s
Iteration  18: 4855860.133 ops/s
Iteration  19: 5136312.395 ops/s
Iteration  20: 5150920.509 ops/s
Iteration  21: 5228066.641 ops/s
Iteration  22: 5353043.488 ops/s
Iteration  23: 5079979.736 ops/s
Iteration  24: 5186025.623 ops/s
Iteration  25: 5075676.098 ops/s
Iteration  26: 4854606.145 ops/s
Iteration  27: 5310719.109 ops/s
Iteration  28: 5172147.996 ops/s
Iteration  29: 5074797.354 ops/s
Iteration  30: 5361885.720 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream":
  5150039.983 ±(99.9%) 86863.315 ops/s [Average]
  (min, avg, max) = (4854606.145, 5150039.983, 5361885.720), stdev = 130012.931
  CI (99.9%): [5063176.668, 5236903.299] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
CompletableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream  thrpt   30  5150039.983 ± 86863.315  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 96434.599 ops/s
# Warmup Iteration   2: 380720.844 ops/s
# Warmup Iteration   3: 468140.324 ops/s
# Warmup Iteration   4: 496022.595 ops/s
# Warmup Iteration   5: 483438.924 ops/s
# Warmup Iteration   6: 525235.135 ops/s
# Warmup Iteration   7: 509158.381 ops/s
# Warmup Iteration   8: 528905.656 ops/s
# Warmup Iteration   9: 515861.214 ops/s
# Warmup Iteration  10: 475743.432 ops/s
# Warmup Iteration  11: 489021.232 ops/s
# Warmup Iteration  12: 543415.822 ops/s
# Warmup Iteration  13: 496683.141 ops/s
# Warmup Iteration  14: 527830.012 ops/s
# Warmup Iteration  15: 507449.810 ops/s
# Warmup Iteration  16: 530549.749 ops/s
# Warmup Iteration  17: 556958.449 ops/s
# Warmup Iteration  18: 513777.419 ops/s
# Warmup Iteration  19: 560936.022 ops/s
# Warmup Iteration  20: 529663.863 ops/s
# Warmup Iteration  21: 545710.369 ops/s
# Warmup Iteration  22: 525072.717 ops/s
# Warmup Iteration  23: 541754.269 ops/s
# Warmup Iteration  24: 526435.157 ops/s
# Warmup Iteration  25: 549093.083 ops/s
# Warmup Iteration  26: 548355.642 ops/s
# Warmup Iteration  27: 530648.415 ops/s
# Warmup Iteration  28: 536831.442 ops/s
# Warmup Iteration  29: 436050.371 ops/s
# Warmup Iteration  30: 557370.945 ops/s
Iteration   1: 522866.937 ops/s
Iteration   2: 546800.262 ops/s
Iteration   3: 532583.890 ops/s
Iteration   4: 538807.754 ops/s
Iteration   5: 537064.404 ops/s
Iteration   6: 532118.793 ops/s
Iteration   7: 563740.092 ops/s
Iteration   8: 518568.733 ops/s
Iteration   9: 549770.978 ops/s
Iteration  10: 544010.298 ops/s
Iteration  11: 529494.569 ops/s
Iteration  12: 509937.776 ops/s
Iteration  13: 551378.757 ops/s
Iteration  14: 526218.496 ops/s
Iteration  15: 542789.008 ops/s
Iteration  16: 545225.917 ops/s
Iteration  17: 541881.735 ops/s
Iteration  18: 536881.830 ops/s
Iteration  19: 555479.677 ops/s
Iteration  20: 524304.723 ops/s
Iteration  21: 548621.316 ops/s
Iteration  22: 534888.443 ops/s
Iteration  23: 530548.345 ops/s
Iteration  24: 546601.432 ops/s
Iteration  25: 511985.891 ops/s
Iteration  26: 526269.519 ops/s
Iteration  27: 558052.965 ops/s
Iteration  28: 527087.047 ops/s
Iteration  29: 522271.869 ops/s
Iteration  30: 555777.978 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorReturnTest._Benchmark.benchmark_doubleOnSubscribe":
  537067.648 ±(99.9%) 9179.010 ops/s [Average]
  (min, avg, max) = (509937.776, 537067.648, 563740.092), stdev = 13738.711
  CI (99.9%): [527888.638, 546246.658] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableOnErrorReturnTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  537067.648 ± 9179.010  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 144385.686 ops/s
# Warmup Iteration   2: 450980.609 ops/s
# Warmup Iteration   3: 468095.463 ops/s
# Warmup Iteration   4: 468333.127 ops/s
# Warmup Iteration   5: 512341.619 ops/s
# Warmup Iteration   6: 516916.422 ops/s
# Warmup Iteration   7: 514649.496 ops/s
# Warmup Iteration   8: 538720.278 ops/s
# Warmup Iteration   9: 538056.210 ops/s
# Warmup Iteration  10: 531369.103 ops/s
# Warmup Iteration  11: 514857.600 ops/s
# Warmup Iteration  12: 538496.039 ops/s
# Warmup Iteration  13: 495862.176 ops/s
# Warmup Iteration  14: 483826.396 ops/s
# Warmup Iteration  15: 487495.781 ops/s
# Warmup Iteration  16: 512314.681 ops/s
# Warmup Iteration  17: 542624.427 ops/s
# Warmup Iteration  18: 535046.572 ops/s
# Warmup Iteration  19: 543106.403 ops/s
# Warmup Iteration  20: 557120.360 ops/s
# Warmup Iteration  21: 532362.308 ops/s
# Warmup Iteration  22: 560664.487 ops/s
# Warmup Iteration  23: 556283.878 ops/s
# Warmup Iteration  24: 534463.380 ops/s
# Warmup Iteration  25: 535341.887 ops/s
# Warmup Iteration  26: 554601.282 ops/s
# Warmup Iteration  27: 560032.211 ops/s
# Warmup Iteration  28: 532613.508 ops/s
# Warmup Iteration  29: 537940.440 ops/s
# Warmup Iteration  30: 554535.420 ops/s
Iteration   1: 528887.901 ops/s
Iteration   2: 553476.383 ops/s
Iteration   3: 573574.233 ops/s
Iteration   4: 513615.276 ops/s
Iteration   5: 545557.732 ops/s
Iteration   6: 528599.315 ops/s
Iteration   7: 559916.748 ops/s
Iteration   8: 537313.141 ops/s
Iteration   9: 538905.890 ops/s
Iteration  10: 540166.710 ops/s
Iteration  11: 514406.856 ops/s
Iteration  12: 531184.824 ops/s
Iteration  13: 552819.164 ops/s
Iteration  14: 541847.483 ops/s
Iteration  15: 543295.399 ops/s
Iteration  16: 546583.347 ops/s
Iteration  17: 522535.566 ops/s
Iteration  18: 560022.916 ops/s
Iteration  19: 530246.016 ops/s
Iteration  20: 563614.207 ops/s
Iteration  21: 557721.025 ops/s
Iteration  22: 533611.188 ops/s
Iteration  23: 559780.322 ops/s
Iteration  24: 529529.026 ops/s
Iteration  25: 534032.946 ops/s
Iteration  26: 560836.835 ops/s
Iteration  27: 525253.958 ops/s
Iteration  28: 542641.391 ops/s
Iteration  29: 543381.019 ops/s
Iteration  30: 540468.962 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_doubleOnSubscribe":
  541794.193 ±(99.9%) 9981.563 ops/s [Average]
  (min, avg, max) = (513615.276, 541794.193, 573574.233), stdev = 14939.935
  CI (99.9%): [531812.629, 551775.756] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
FlowableTakeWhileTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  541794.193 ± 9981.563  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135914.241 ops/s
# Warmup Iteration   2: 438782.529 ops/s
# Warmup Iteration   3: 489196.386 ops/s
# Warmup Iteration   4: 503410.680 ops/s
# Warmup Iteration   5: 532772.216 ops/s
# Warmup Iteration   6: 514778.934 ops/s
# Warmup Iteration   7: 534324.130 ops/s
# Warmup Iteration   8: 515868.302 ops/s
# Warmup Iteration   9: 522393.876 ops/s
# Warmup Iteration  10: 499141.806 ops/s
# Warmup Iteration  11: 510202.997 ops/s
# Warmup Iteration  12: 510582.160 ops/s
# Warmup Iteration  13: 521096.618 ops/s
# Warmup Iteration  14: 486761.202 ops/s
# Warmup Iteration  15: 510995.834 ops/s
# Warmup Iteration  16: 527691.676 ops/s
# Warmup Iteration  17: 514741.009 ops/s
# Warmup Iteration  18: 549937.662 ops/s
# Warmup Iteration  19: 529950.602 ops/s
# Warmup Iteration  20: 550967.941 ops/s
# Warmup Iteration  21: 549683.379 ops/s
# Warmup Iteration  22: 504025.184 ops/s
# Warmup Iteration  23: 558207.560 ops/s
# Warmup Iteration  24: 366446.889 ops/s
# Warmup Iteration  25: 535876.364 ops/s
# Warmup Iteration  26: 554467.065 ops/s
# Warmup Iteration  27: 553176.880 ops/s
# Warmup Iteration  28: 527561.274 ops/s
# Warmup Iteration  29: 552848.632 ops/s
# Warmup Iteration  30: 549939.855 ops/s
Iteration   1: 523952.330 ops/s
Iteration   2: 556961.968 ops/s
Iteration   3: 519833.160 ops/s
Iteration   4: 542985.086 ops/s
Iteration   5: 557504.787 ops/s
Iteration   6: 525537.494 ops/s
Iteration   7: 533368.917 ops/s
Iteration   8: 553281.715 ops/s
Iteration   9: 524181.216 ops/s
Iteration  10: 560987.241 ops/s
Iteration  11: 526930.939 ops/s
Iteration  12: 534430.806 ops/s
Iteration  13: 557294.019 ops/s
Iteration  14: 543803.054 ops/s
Iteration  15: 548997.153 ops/s
Iteration  16: 536428.828 ops/s
Iteration  17: 552873.097 ops/s
Iteration  18: 526565.400 ops/s
Iteration  19: 539235.518 ops/s
Iteration  20: 564373.813 ops/s
Iteration  21: 530870.130 ops/s
Iteration  22: 545425.854 ops/s
Iteration  23: 542454.657 ops/s
Iteration  24: 572135.952 ops/s
Iteration  25: 519183.090 ops/s
Iteration  26: 551578.479 ops/s
Iteration  27: 524374.183 ops/s
Iteration  28: 540530.694 ops/s
Iteration  29: 548884.149 ops/s
Iteration  30: 536375.022 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDematerializeTest._Benchmark.benchmark_doubleOnSubscribe":
  541377.958 ±(99.9%) 9558.627 ops/s [Average]
  (min, avg, max) = (519183.090, 541377.958, 572135.952), stdev = 14306.904
  CI (99.9%): [531819.331, 550936.585] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableDematerializeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  541377.958 ± 9558.627  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onErrorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onErrorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 36910.297 ops/s
# Warmup Iteration   2: 157786.077 ops/s
# Warmup Iteration   3: 180317.490 ops/s
# Warmup Iteration   4: 178596.620 ops/s
# Warmup Iteration   5: 202530.316 ops/s
# Warmup Iteration   6: 181231.732 ops/s
# Warmup Iteration   7: 181028.905 ops/s
# Warmup Iteration   8: 202179.492 ops/s
# Warmup Iteration   9: 198096.828 ops/s
# Warmup Iteration  10: 193842.307 ops/s
# Warmup Iteration  11: 190816.814 ops/s
# Warmup Iteration  12: 207115.380 ops/s
# Warmup Iteration  13: 191053.675 ops/s
# Warmup Iteration  14: 205453.513 ops/s
# Warmup Iteration  15: 198514.831 ops/s
# Warmup Iteration  16: 201819.487 ops/s
# Warmup Iteration  17: 198026.411 ops/s
# Warmup Iteration  18: 210894.364 ops/s
# Warmup Iteration  19: 204055.982 ops/s
# Warmup Iteration  20: 206216.140 ops/s
# Warmup Iteration  21: 212297.056 ops/s
# Warmup Iteration  22: 201120.373 ops/s
# Warmup Iteration  23: 198996.497 ops/s
# Warmup Iteration  24: 205309.974 ops/s
# Warmup Iteration  25: 206676.147 ops/s
# Warmup Iteration  26: 202198.265 ops/s
# Warmup Iteration  27: 211220.512 ops/s
# Warmup Iteration  28: 200575.705 ops/s
# Warmup Iteration  29: 204974.056 ops/s
# Warmup Iteration  30: 212083.924 ops/s
Iteration   1: 201384.110 ops/s
Iteration   2: 207581.557 ops/s
Iteration   3: 212700.283 ops/s
Iteration   4: 198824.753 ops/s
Iteration   5: 206956.187 ops/s
Iteration   6: 209697.478 ops/s
Iteration   7: 200167.507 ops/s
Iteration   8: 211549.736 ops/s
Iteration   9: 202894.767 ops/s
Iteration  10: 207105.167 ops/s
Iteration  11: 205818.116 ops/s
Iteration  12: 203032.294 ops/s
Iteration  13: 213880.238 ops/s
Iteration  14: 199737.836 ops/s
Iteration  15: 207856.347 ops/s
Iteration  16: 213063.117 ops/s
Iteration  17: 200746.681 ops/s
Iteration  18: 204942.430 ops/s
Iteration  19: 204520.192 ops/s
Iteration  20: 212696.959 ops/s
Iteration  21: 209992.860 ops/s
Iteration  22: 200533.639 ops/s
Iteration  23: 209145.461 ops/s
Iteration  24: 204946.560 ops/s
Iteration  25: 207190.434 ops/s
Iteration  26: 196239.421 ops/s
Iteration  27: 208648.794 ops/s
Iteration  28: 207531.508 ops/s
Iteration  29: 196683.367 ops/s
Iteration  30: 209761.807 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onErrorThrows":
  205860.987 ±(99.9%) 3312.666 ops/s [Average]
  (min, avg, max) = (196239.421, 205860.987, 213880.238), stdev = 4958.243
  CI (99.9%): [202548.321, 209173.653] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score      Error  Units
BoundedSubscriberTest._Benchmark.benchmark_onErrorThrows  thrpt   30  205860.987 ± 3312.666  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperCrashes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperCrashes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 359167.059 ops/s
# Warmup Iteration   2: 590830.409 ops/s
# Warmup Iteration   3: 641096.637 ops/s
# Warmup Iteration   4: 634173.390 ops/s
# Warmup Iteration   5: 694184.134 ops/s
# Warmup Iteration   6: 677111.174 ops/s
# Warmup Iteration   7: 708307.168 ops/s
# Warmup Iteration   8: 691775.095 ops/s
# Warmup Iteration   9: 679154.801 ops/s
# Warmup Iteration  10: 700601.556 ops/s
# Warmup Iteration  11: 671593.634 ops/s
# Warmup Iteration  12: 703209.032 ops/s
# Warmup Iteration  13: 687776.081 ops/s
# Warmup Iteration  14: 717659.359 ops/s
# Warmup Iteration  15: 679166.437 ops/s
# Warmup Iteration  16: 700207.427 ops/s
# Warmup Iteration  17: 709187.308 ops/s
# Warmup Iteration  18: 615789.617 ops/s
# Warmup Iteration  19: 751994.999 ops/s
# Warmup Iteration  20: 744864.268 ops/s
# Warmup Iteration  21: 702790.621 ops/s
# Warmup Iteration  22: 750717.114 ops/s
# Warmup Iteration  23: 694794.305 ops/s
# Warmup Iteration  24: 723837.689 ops/s
# Warmup Iteration  25: 770317.661 ops/s
# Warmup Iteration  26: 699336.000 ops/s
# Warmup Iteration  27: 755676.227 ops/s
# Warmup Iteration  28: 747197.748 ops/s
# Warmup Iteration  29: 729521.244 ops/s
# Warmup Iteration  30: 762023.781 ops/s
Iteration   1: 713622.951 ops/s
Iteration   2: 726918.912 ops/s
Iteration   3: 747088.080 ops/s
Iteration   4: 719342.474 ops/s
Iteration   5: 717891.173 ops/s
Iteration   6: 760173.918 ops/s
Iteration   7: 727597.080 ops/s
Iteration   8: 712606.232 ops/s
Iteration   9: 757241.839 ops/s
Iteration  10: 708500.347 ops/s
Iteration  11: 753914.989 ops/s
Iteration  12: 727173.576 ops/s
Iteration  13: 739084.175 ops/s
Iteration  14: 745265.749 ops/s
Iteration  15: 731353.565 ops/s
Iteration  16: 717425.778 ops/s
Iteration  17: 761204.138 ops/s
Iteration  18: 709574.865 ops/s
Iteration  19: 715877.992 ops/s
Iteration  20: 749504.309 ops/s
Iteration  21: 701407.124 ops/s
Iteration  22: 767476.603 ops/s
Iteration  23: 740165.450 ops/s
Iteration  24: 701385.521 ops/s
Iteration  25: 731015.355 ops/s
Iteration  26: 720655.482 ops/s
Iteration  27: 712134.760 ops/s
Iteration  28: 741102.304 ops/s
Iteration  29: 702163.262 ops/s
Iteration  30: 735838.155 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperCrashes":
  729823.539 ±(99.9%) 12870.670 ops/s [Average]
  (min, avg, max) = (701385.521, 729823.539, 767476.603), stdev = 19264.214
  CI (99.9%): [716952.869, 742694.209] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableScalarXMapTest._Benchmark.benchmark_mapperCrashes  thrpt   30  729823.539 ± 12870.670  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 191246.278 ops/s
# Warmup Iteration   2: 385092.839 ops/s
# Warmup Iteration   3: 441169.931 ops/s
# Warmup Iteration   4: 482887.863 ops/s
# Warmup Iteration   5: 512931.919 ops/s
# Warmup Iteration   6: 481639.835 ops/s
# Warmup Iteration   7: 506952.517 ops/s
# Warmup Iteration   8: 473752.561 ops/s
# Warmup Iteration   9: 495960.647 ops/s
# Warmup Iteration  10: 476500.865 ops/s
# Warmup Iteration  11: 470682.146 ops/s
# Warmup Iteration  12: 501028.792 ops/s
# Warmup Iteration  13: 475497.679 ops/s
# Warmup Iteration  14: 480560.544 ops/s
# Warmup Iteration  15: 464551.238 ops/s
# Warmup Iteration  16: 464045.021 ops/s
# Warmup Iteration  17: 514449.674 ops/s
# Warmup Iteration  18: 500597.276 ops/s
# Warmup Iteration  19: 518260.426 ops/s
# Warmup Iteration  20: 492852.876 ops/s
# Warmup Iteration  21: 511736.321 ops/s
# Warmup Iteration  22: 503006.608 ops/s
# Warmup Iteration  23: 493780.162 ops/s
# Warmup Iteration  24: 506207.450 ops/s
# Warmup Iteration  25: 507575.360 ops/s
# Warmup Iteration  26: 512936.265 ops/s
# Warmup Iteration  27: 516101.801 ops/s
# Warmup Iteration  28: 482939.131 ops/s
# Warmup Iteration  29: 494686.224 ops/s
# Warmup Iteration  30: 524398.813 ops/s
Iteration   1: 490233.812 ops/s
Iteration   2: 503739.595 ops/s
Iteration   3: 471113.036 ops/s
Iteration   4: 525182.195 ops/s
Iteration   5: 495481.578 ops/s
Iteration   6: 505925.544 ops/s
Iteration   7: 500050.883 ops/s
Iteration   8: 489056.892 ops/s
Iteration   9: 525542.891 ops/s
Iteration  10: 482121.784 ops/s
Iteration  11: 515474.572 ops/s
Iteration  12: 488391.067 ops/s
Iteration  13: 505222.706 ops/s
Iteration  14: 511383.904 ops/s
Iteration  15: 498381.662 ops/s
Iteration  16: 502700.109 ops/s
Iteration  17: 525838.197 ops/s
Iteration  18: 480822.096 ops/s
Iteration  19: 524521.952 ops/s
Iteration  20: 490546.434 ops/s
Iteration  21: 499325.327 ops/s
Iteration  22: 490165.475 ops/s
Iteration  23: 491584.737 ops/s
Iteration  24: 513590.923 ops/s
Iteration  25: 488513.133 ops/s
Iteration  26: 509290.778 ops/s
Iteration  27: 490257.113 ops/s
Iteration  28: 513109.785 ops/s
Iteration  29: 494414.441 ops/s
Iteration  30: 498232.177 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_doubleOnSubscribe":
  500673.827 ±(99.9%) 9489.902 ops/s [Average]
  (min, avg, max) = (471113.036, 500673.827, 525838.197), stdev = 14204.039
  CI (99.9%): [491183.925, 510163.728] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableGroupByTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  500673.827 ± 9489.902  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_skipReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_skipReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30467.690 ops/s
# Warmup Iteration   2: 216376.350 ops/s
# Warmup Iteration   3: 291387.032 ops/s
# Warmup Iteration   4: 617623.925 ops/s
# Warmup Iteration   5: 572042.083 ops/s
# Warmup Iteration   6: 660048.386 ops/s
# Warmup Iteration   7: 658814.159 ops/s
# Warmup Iteration   8: 659926.250 ops/s
# Warmup Iteration   9: 684456.315 ops/s
# Warmup Iteration  10: 653900.239 ops/s
# Warmup Iteration  11: 672432.677 ops/s
# Warmup Iteration  12: 686219.106 ops/s
# Warmup Iteration  13: 525263.060 ops/s
# Warmup Iteration  14: 686418.505 ops/s
# Warmup Iteration  15: 671160.824 ops/s
# Warmup Iteration  16: 648473.263 ops/s
# Warmup Iteration  17: 663709.980 ops/s
# Warmup Iteration  18: 637070.442 ops/s
# Warmup Iteration  19: 653827.701 ops/s
# Warmup Iteration  20: 648029.390 ops/s
# Warmup Iteration  21: 684582.156 ops/s
# Warmup Iteration  22: 671509.445 ops/s
# Warmup Iteration  23: 652586.626 ops/s
# Warmup Iteration  24: 677169.554 ops/s
# Warmup Iteration  25: 661060.892 ops/s
# Warmup Iteration  26: 673993.055 ops/s
# Warmup Iteration  27: 659597.310 ops/s
# Warmup Iteration  28: 666612.496 ops/s
# Warmup Iteration  29: 676339.709 ops/s
# Warmup Iteration  30: 654314.455 ops/s
Iteration   1: 686984.780 ops/s
Iteration   2: 655497.564 ops/s
Iteration   3: 660782.368 ops/s
Iteration   4: 682338.153 ops/s
Iteration   5: 648591.378 ops/s
Iteration   6: 675016.630 ops/s
Iteration   7: 658105.426 ops/s
Iteration   8: 670710.513 ops/s
Iteration   9: 675412.623 ops/s
Iteration  10: 670303.478 ops/s
Iteration  11: 666428.219 ops/s
Iteration  12: 657809.616 ops/s
Iteration  13: 689136.455 ops/s
Iteration  14: 662618.633 ops/s
Iteration  15: 672834.174 ops/s
Iteration  16: 669797.582 ops/s
Iteration  17: 658895.454 ops/s
Iteration  18: 678792.404 ops/s
Iteration  19: 667768.327 ops/s
Iteration  20: 693392.476 ops/s
Iteration  21: 678941.880 ops/s
Iteration  22: 675650.044 ops/s
Iteration  23: 670689.856 ops/s
Iteration  24: 682847.406 ops/s
Iteration  25: 669087.253 ops/s
Iteration  26: 676509.046 ops/s
Iteration  27: 660379.690 ops/s
Iteration  28: 651482.083 ops/s
Iteration  29: 663125.896 ops/s
Iteration  30: 653780.177 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_skipReentrant":
  669456.986 ±(99.9%) 7639.214 ops/s [Average]
  (min, avg, max) = (648591.378, 669456.986, 693392.476), stdev = 11434.016
  CI (99.9%): [661817.772, 677096.200] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_skipReentrant  thrpt   30  669456.986 ± 7639.214  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_firstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_firstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 8926.861 ops/s
# Warmup Iteration   2: 81424.418 ops/s
# Warmup Iteration   3: 183371.985 ops/s
# Warmup Iteration   4: 278510.542 ops/s
# Warmup Iteration   5: 307186.030 ops/s
# Warmup Iteration   6: 288067.202 ops/s
# Warmup Iteration   7: 307295.395 ops/s
# Warmup Iteration   8: 301249.416 ops/s
# Warmup Iteration   9: 289454.431 ops/s
# Warmup Iteration  10: 282820.635 ops/s
# Warmup Iteration  11: 295359.396 ops/s
# Warmup Iteration  12: 288937.972 ops/s
# Warmup Iteration  13: 304178.381 ops/s
# Warmup Iteration  14: 308613.664 ops/s
# Warmup Iteration  15: 297117.629 ops/s
# Warmup Iteration  16: 309361.676 ops/s
# Warmup Iteration  17: 284195.029 ops/s
# Warmup Iteration  18: 298875.793 ops/s
# Warmup Iteration  19: 297078.520 ops/s
# Warmup Iteration  20: 284751.683 ops/s
# Warmup Iteration  21: 299747.083 ops/s
# Warmup Iteration  22: 286423.741 ops/s
# Warmup Iteration  23: 290052.155 ops/s
# Warmup Iteration  24: 299705.074 ops/s
# Warmup Iteration  25: 295828.753 ops/s
# Warmup Iteration  26: 298320.367 ops/s
# Warmup Iteration  27: 303744.830 ops/s
# Warmup Iteration  28: 294729.051 ops/s
# Warmup Iteration  29: 299208.413 ops/s
# Warmup Iteration  30: 297111.329 ops/s
Iteration   1: 295234.326 ops/s
Iteration   2: 311291.717 ops/s
Iteration   3: 304166.699 ops/s
Iteration   4: 287891.564 ops/s
Iteration   5: 302194.296 ops/s
Iteration   6: 299551.920 ops/s
Iteration   7: 289227.427 ops/s
Iteration   8: 305357.109 ops/s
Iteration   9: 291050.802 ops/s
Iteration  10: 300604.940 ops/s
Iteration  11: 293869.551 ops/s
Iteration  12: 295316.663 ops/s
Iteration  13: 308388.020 ops/s
Iteration  14: 286564.665 ops/s
Iteration  15: 287399.243 ops/s
Iteration  16: 305700.718 ops/s
Iteration  17: 291782.604 ops/s
Iteration  18: 304177.198 ops/s
Iteration  19: 297247.552 ops/s
Iteration  20: 307420.654 ops/s
Iteration  21: 291969.668 ops/s
Iteration  22: 300194.424 ops/s
Iteration  23: 291165.747 ops/s
Iteration  24: 290239.169 ops/s
Iteration  25: 300366.471 ops/s
Iteration  26: 288212.877 ops/s
Iteration  27: 295946.890 ops/s
Iteration  28: 306130.123 ops/s
Iteration  29: 290231.210 ops/s
Iteration  30: 309822.440 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGroupByTest._Benchmark.benchmark_firstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete":
  297623.890 ±(99.9%) 5035.185 ops/s [Average]
  (min, avg, max) = (286564.665, 297623.890, 311291.717), stdev = 7536.429
  CI (99.9%): [292588.704, 302659.075] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                         Mode  Cnt       Score      Error  Units
ObservableGroupByTest._Benchmark.benchmark_firstGroupsCompleteAndParentSlowToThenEmitFinalGroupsAndThenComplete  thrpt   30  297623.890 ± 5035.185  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactUnboundedReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactUnboundedReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18455.524 ops/s
# Warmup Iteration   2: 115771.466 ops/s
# Warmup Iteration   3: 239347.677 ops/s
# Warmup Iteration   4: 266974.644 ops/s
# Warmup Iteration   5: 629569.706 ops/s
# Warmup Iteration   6: 678755.324 ops/s
# Warmup Iteration   7: 705153.852 ops/s
# Warmup Iteration   8: 576832.033 ops/s
# Warmup Iteration   9: 681124.113 ops/s
# Warmup Iteration  10: 709659.626 ops/s
# Warmup Iteration  11: 718281.755 ops/s
# Warmup Iteration  12: 685827.759 ops/s
# Warmup Iteration  13: 700292.851 ops/s
# Warmup Iteration  14: 723708.002 ops/s
# Warmup Iteration  15: 681492.556 ops/s
# Warmup Iteration  16: 694825.441 ops/s
# Warmup Iteration  17: 702863.851 ops/s
# Warmup Iteration  18: 718885.243 ops/s
# Warmup Iteration  19: 683038.533 ops/s
# Warmup Iteration  20: 698330.459 ops/s
# Warmup Iteration  21: 738629.782 ops/s
# Warmup Iteration  22: 706641.133 ops/s
# Warmup Iteration  23: 678574.571 ops/s
# Warmup Iteration  24: 702844.862 ops/s
# Warmup Iteration  25: 713183.383 ops/s
# Warmup Iteration  26: 728876.957 ops/s
# Warmup Iteration  27: 695576.598 ops/s
# Warmup Iteration  28: 700730.404 ops/s
# Warmup Iteration  29: 683312.935 ops/s
# Warmup Iteration  30: 706021.423 ops/s
Iteration   1: 701058.932 ops/s
Iteration   2: 686635.634 ops/s
Iteration   3: 692617.784 ops/s
Iteration   4: 712100.200 ops/s
Iteration   5: 724484.221 ops/s
Iteration   6: 697758.545 ops/s
Iteration   7: 707569.173 ops/s
Iteration   8: 711829.006 ops/s
Iteration   9: 678391.593 ops/s
Iteration  10: 733462.181 ops/s
Iteration  11: 683294.239 ops/s
Iteration  12: 716631.309 ops/s
Iteration  13: 703563.698 ops/s
Iteration  14: 690692.853 ops/s
Iteration  15: 726108.508 ops/s
Iteration  16: 728065.456 ops/s
Iteration  17: 674423.057 ops/s
Iteration  18: 736815.092 ops/s
Iteration  19: 701547.152 ops/s
Iteration  20: 690940.631 ops/s
Iteration  21: 720494.752 ops/s
Iteration  22: 689006.573 ops/s
Iteration  23: 711856.228 ops/s
Iteration  24: 684738.073 ops/s
Iteration  25: 720515.601 ops/s
Iteration  26: 690849.104 ops/s
Iteration  27: 702553.164 ops/s
Iteration  28: 700870.076 ops/s
Iteration  29: 692366.691 ops/s
Iteration  30: 714444.526 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactUnboundedReentrant":
  704189.468 ±(99.9%) 11203.034 ops/s [Average]
  (min, avg, max) = (674423.057, 704189.468, 736815.092), stdev = 16768.176
  CI (99.9%): [692986.434, 715392.503] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_exactUnboundedReentrant  thrpt   30  704189.468 ± 11203.034  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4617.674 ops/s
# Warmup Iteration   2: 134096.130 ops/s
# Warmup Iteration   3: 230029.464 ops/s
# Warmup Iteration   4: 484796.355 ops/s
# Warmup Iteration   5: 589723.035 ops/s
# Warmup Iteration   6: 590172.216 ops/s
# Warmup Iteration   7: 557969.990 ops/s
# Warmup Iteration   8: 642915.760 ops/s
# Warmup Iteration   9: 660225.578 ops/s
# Warmup Iteration  10: 654599.009 ops/s
# Warmup Iteration  11: 657132.141 ops/s
# Warmup Iteration  12: 612473.380 ops/s
# Warmup Iteration  13: 640482.642 ops/s
# Warmup Iteration  14: 636716.646 ops/s
# Warmup Iteration  15: 645940.820 ops/s
# Warmup Iteration  16: 613990.606 ops/s
# Warmup Iteration  17: 630254.326 ops/s
# Warmup Iteration  18: 653506.731 ops/s
# Warmup Iteration  19: 631569.580 ops/s
# Warmup Iteration  20: 652401.154 ops/s
# Warmup Iteration  21: 633060.606 ops/s
# Warmup Iteration  22: 627018.803 ops/s
# Warmup Iteration  23: 651599.398 ops/s
# Warmup Iteration  24: 598353.475 ops/s
# Warmup Iteration  25: 638804.007 ops/s
# Warmup Iteration  26: 642459.710 ops/s
# Warmup Iteration  27: 609811.239 ops/s
# Warmup Iteration  28: 652037.068 ops/s
# Warmup Iteration  29: 644161.282 ops/s
# Warmup Iteration  30: 637537.888 ops/s
Iteration   1: 618318.028 ops/s
Iteration   2: 640638.109 ops/s
Iteration   3: 659178.899 ops/s
Iteration   4: 656491.999 ops/s
Iteration   5: 612111.511 ops/s
Iteration   6: 652866.430 ops/s
Iteration   7: 622510.327 ops/s
Iteration   8: 636044.566 ops/s
Iteration   9: 611775.219 ops/s
Iteration  10: 646623.519 ops/s
Iteration  11: 641987.408 ops/s
Iteration  12: 620335.331 ops/s
Iteration  13: 662411.676 ops/s
Iteration  14: 655920.796 ops/s
Iteration  15: 626380.716 ops/s
Iteration  16: 619752.522 ops/s
Iteration  17: 654968.083 ops/s
Iteration  18: 618631.379 ops/s
Iteration  19: 651472.711 ops/s
Iteration  20: 618087.573 ops/s
Iteration  21: 649614.458 ops/s
Iteration  22: 649661.123 ops/s
Iteration  23: 617362.134 ops/s
Iteration  24: 653154.266 ops/s
Iteration  25: 621043.668 ops/s
Iteration  26: 619356.875 ops/s
Iteration  27: 654946.669 ops/s
Iteration  28: 622162.578 ops/s
Iteration  29: 630366.209 ops/s
Iteration  30: 635753.160 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant":
  635997.598 ±(99.9%) 11151.120 ops/s [Average]
  (min, avg, max) = (611775.219, 635997.598, 662411.676), stdev = 16690.473
  CI (99.9%): [624846.478, 647148.719] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_exactBoundedReentrant  thrpt   30  635997.598 ± 11151.120  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 166602.349 ops/s
# Warmup Iteration   2: 468053.001 ops/s
# Warmup Iteration   3: 591380.104 ops/s
# Warmup Iteration   4: 625834.856 ops/s
# Warmup Iteration   5: 644351.549 ops/s
# Warmup Iteration   6: 591640.755 ops/s
# Warmup Iteration   7: 571251.040 ops/s
# Warmup Iteration   8: 620002.115 ops/s
# Warmup Iteration   9: 622341.957 ops/s
# Warmup Iteration  10: 640065.686 ops/s
# Warmup Iteration  11: 604703.240 ops/s
# Warmup Iteration  12: 637568.290 ops/s
# Warmup Iteration  13: 651857.216 ops/s
# Warmup Iteration  14: 614746.064 ops/s
# Warmup Iteration  15: 622432.364 ops/s
# Warmup Iteration  16: 642372.525 ops/s
# Warmup Iteration  17: 647877.405 ops/s
# Warmup Iteration  18: 649379.030 ops/s
# Warmup Iteration  19: 674399.314 ops/s
# Warmup Iteration  20: 638509.728 ops/s
# Warmup Iteration  21: 689189.112 ops/s
# Warmup Iteration  22: 653453.133 ops/s
# Warmup Iteration  23: 638770.221 ops/s
# Warmup Iteration  24: 673186.344 ops/s
# Warmup Iteration  25: 675077.275 ops/s
# Warmup Iteration  26: 675248.210 ops/s
# Warmup Iteration  27: 635262.614 ops/s
# Warmup Iteration  28: 670933.370 ops/s
# Warmup Iteration  29: 659488.470 ops/s
# Warmup Iteration  30: 677778.982 ops/s
Iteration   1: 673098.734 ops/s
Iteration   2: 645389.567 ops/s
Iteration   3: 679879.674 ops/s
Iteration   4: 646108.717 ops/s
Iteration   5: 655719.868 ops/s
Iteration   6: 677196.707 ops/s
Iteration   7: 666140.398 ops/s
Iteration   8: 679567.491 ops/s
Iteration   9: 634289.554 ops/s
Iteration  10: 668433.846 ops/s
Iteration  11: 692786.289 ops/s
Iteration  12: 668083.168 ops/s
Iteration  13: 656237.156 ops/s
Iteration  14: 656165.008 ops/s
Iteration  15: 661816.188 ops/s
Iteration  16: 647587.445 ops/s
Iteration  17: 665559.929 ops/s
Iteration  18: 673523.143 ops/s
Iteration  19: 653151.596 ops/s
Iteration  20: 638469.567 ops/s
Iteration  21: 683655.237 ops/s
Iteration  22: 650175.451 ops/s
Iteration  23: 678079.701 ops/s
Iteration  24: 646194.019 ops/s
Iteration  25: 674613.860 ops/s
Iteration  26: 630526.060 ops/s
Iteration  27: 688165.471 ops/s
Iteration  28: 653133.986 ops/s
Iteration  29: 638862.078 ops/s
Iteration  30: 682066.262 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_mainError":
  662155.872 ±(99.9%) 11358.158 ops/s [Average]
  (min, avg, max) = (630526.060, 662155.872, 692786.289), stdev = 17000.358
  CI (99.9%): [650797.714, 673514.030] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_mainError  thrpt   30  662155.872 ± 11358.158  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 443910.720 ops/s
# Warmup Iteration   2: 1430187.666 ops/s
# Warmup Iteration   3: 2927323.794 ops/s
# Warmup Iteration   4: 2761621.673 ops/s
# Warmup Iteration   5: 2755497.519 ops/s
# Warmup Iteration   6: 2842107.792 ops/s
# Warmup Iteration   7: 2724981.211 ops/s
# Warmup Iteration   8: 2753937.727 ops/s
# Warmup Iteration   9: 2818798.372 ops/s
# Warmup Iteration  10: 2854499.418 ops/s
# Warmup Iteration  11: 2915965.369 ops/s
# Warmup Iteration  12: 2722834.187 ops/s
# Warmup Iteration  13: 2694157.384 ops/s
# Warmup Iteration  14: 2731961.668 ops/s
# Warmup Iteration  15: 2931413.923 ops/s
# Warmup Iteration  16: 2783324.716 ops/s
# Warmup Iteration  17: 2712790.045 ops/s
# Warmup Iteration  18: 2599808.157 ops/s
# Warmup Iteration  19: 2964746.440 ops/s
# Warmup Iteration  20: 2842942.230 ops/s
# Warmup Iteration  21: 2905970.745 ops/s
# Warmup Iteration  22: 2837909.015 ops/s
# Warmup Iteration  23: 2870830.529 ops/s
# Warmup Iteration  24: 2893784.787 ops/s
# Warmup Iteration  25: 2977444.934 ops/s
# Warmup Iteration  26: 2787673.367 ops/s
# Warmup Iteration  27: 2813698.186 ops/s
# Warmup Iteration  28: 2939538.450 ops/s
# Warmup Iteration  29: 2793476.371 ops/s
# Warmup Iteration  30: 2968089.297 ops/s
Iteration   1: 2785163.296 ops/s
Iteration   2: 2925409.434 ops/s
Iteration   3: 2833223.494 ops/s
Iteration   4: 2828383.694 ops/s
Iteration   5: 2880737.313 ops/s
Iteration   6: 2875692.194 ops/s
Iteration   7: 2852483.770 ops/s
Iteration   8: 2988739.539 ops/s
Iteration   9: 2737220.340 ops/s
Iteration  10: 3040128.784 ops/s
Iteration  11: 2782621.388 ops/s
Iteration  12: 2933427.167 ops/s
Iteration  13: 2824574.599 ops/s
Iteration  14: 2807085.387 ops/s
Iteration  15: 2936890.519 ops/s
Iteration  16: 2799415.701 ops/s
Iteration  17: 2823942.926 ops/s
Iteration  18: 2900678.660 ops/s
Iteration  19: 2872649.740 ops/s
Iteration  20: 2769727.288 ops/s
Iteration  21: 2920172.872 ops/s
Iteration  22: 2809723.176 ops/s
Iteration  23: 2826899.444 ops/s
Iteration  24: 2925342.962 ops/s
Iteration  25: 2810805.614 ops/s
Iteration  26: 2848750.849 ops/s
Iteration  27: 2922675.188 ops/s
Iteration  28: 2746649.753 ops/s
Iteration  29: 2165831.895 ops/s
Iteration  30: 2853785.655 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_isDisposed":
  2834294.421 ±(99.9%) 96550.151 ops/s [Average]
  (min, avg, max) = (2165831.895, 2834294.421, 3040128.784), stdev = 144511.732
  CI (99.9%): [2737744.270, 2930844.572] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_isDisposed  thrpt   30  2834294.421 ± 96550.151  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSizeRestart$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSizeRestart

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3157.567 ops/s
# Warmup Iteration   2: 26732.012 ops/s
# Warmup Iteration   3: 33797.105 ops/s
# Warmup Iteration   4: 47578.176 ops/s
# Warmup Iteration   5: 60523.354 ops/s
# Warmup Iteration   6: 75531.819 ops/s
# Warmup Iteration   7: 66512.834 ops/s
# Warmup Iteration   8: 86480.667 ops/s
# Warmup Iteration   9: 80506.511 ops/s
# Warmup Iteration  10: 77583.558 ops/s
# Warmup Iteration  11: 77287.278 ops/s
# Warmup Iteration  12: 76700.989 ops/s
# Warmup Iteration  13: 83876.206 ops/s
# Warmup Iteration  14: 71399.980 ops/s
# Warmup Iteration  15: 87842.011 ops/s
# Warmup Iteration  16: 82912.633 ops/s
# Warmup Iteration  17: 87937.983 ops/s
# Warmup Iteration  18: 80153.214 ops/s
# Warmup Iteration  19: 80906.402 ops/s
# Warmup Iteration  20: 78024.963 ops/s
# Warmup Iteration  21: 93480.737 ops/s
# Warmup Iteration  22: 94594.075 ops/s
# Warmup Iteration  23: 93617.081 ops/s
# Warmup Iteration  24: 86040.258 ops/s
# Warmup Iteration  25: 82862.776 ops/s
# Warmup Iteration  26: 93990.075 ops/s
# Warmup Iteration  27: 96283.830 ops/s
# Warmup Iteration  28: 88924.230 ops/s
# Warmup Iteration  29: 96598.477 ops/s
# Warmup Iteration  30: 96560.946 ops/s
Iteration   1: 81241.216 ops/s
Iteration   2: 86255.189 ops/s
Iteration   3: 87532.291 ops/s
Iteration   4: 80795.826 ops/s
Iteration   5: 86012.715 ops/s
Iteration   6: 86816.145 ops/s
Iteration   7: 95854.392 ops/s
Iteration   8: 95557.689 ops/s
Iteration   9: 85582.865 ops/s
Iteration  10: 87969.963 ops/s
Iteration  11: 90095.300 ops/s
Iteration  12: 83815.635 ops/s
Iteration  13: 89368.274 ops/s
Iteration  14: 88670.031 ops/s
Iteration  15: 90748.772 ops/s
Iteration  16: 78445.357 ops/s
Iteration  17: 77985.269 ops/s
Iteration  18: 87611.418 ops/s
Iteration  19: 82020.223 ops/s
Iteration  20: 86927.473 ops/s
Iteration  21: 76410.087 ops/s
Iteration  22: 86150.070 ops/s
Iteration  23: 83223.463 ops/s
Iteration  24: 91822.938 ops/s
Iteration  25: 81311.690 ops/s
Iteration  26: 79615.861 ops/s
Iteration  27: 93750.447 ops/s
Iteration  28: 90091.535 ops/s
Iteration  29: 84960.144 ops/s
Iteration  30: 86500.690 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSizeRestart":
  86104.766 ±(99.9%) 3335.144 ops/s [Average]
  (min, avg, max) = (76410.087, 86104.766, 95854.392), stdev = 4991.887
  CI (99.9%): [82769.622, 89439.910] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt      Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_timespanDefaultSchedulerSizeRestart  thrpt   30  86104.766 ± 3335.144  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fused2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fused2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 328582.424 ops/s
# Warmup Iteration   2: 1543716.281 ops/s
# Warmup Iteration   3: 3741343.388 ops/s
# Warmup Iteration   4: 3868545.860 ops/s
# Warmup Iteration   5: 4457273.137 ops/s
# Warmup Iteration   6: 4497073.952 ops/s
# Warmup Iteration   7: 4366367.658 ops/s
# Warmup Iteration   8: 4548196.430 ops/s
# Warmup Iteration   9: 4290158.239 ops/s
# Warmup Iteration  10: 4307170.687 ops/s
# Warmup Iteration  11: 4399202.173 ops/s
# Warmup Iteration  12: 4239133.335 ops/s
# Warmup Iteration  13: 4469832.751 ops/s
# Warmup Iteration  14: 4627302.345 ops/s
# Warmup Iteration  15: 4377567.133 ops/s
# Warmup Iteration  16: 4369408.775 ops/s
# Warmup Iteration  17: 4641129.585 ops/s
# Warmup Iteration  18: 4420250.594 ops/s
# Warmup Iteration  19: 4302625.963 ops/s
# Warmup Iteration  20: 4526890.971 ops/s
# Warmup Iteration  21: 4434717.540 ops/s
# Warmup Iteration  22: 4543816.805 ops/s
# Warmup Iteration  23: 4297783.871 ops/s
# Warmup Iteration  24: 4430861.300 ops/s
# Warmup Iteration  25: 4490203.943 ops/s
# Warmup Iteration  26: 4399186.528 ops/s
# Warmup Iteration  27: 4545237.918 ops/s
# Warmup Iteration  28: 4241513.102 ops/s
# Warmup Iteration  29: 4548816.306 ops/s
# Warmup Iteration  30: 4448139.581 ops/s
Iteration   1: 4386833.582 ops/s
Iteration   2: 4560090.170 ops/s
Iteration   3: 4425844.150 ops/s
Iteration   4: 4356157.187 ops/s
Iteration   5: 4595754.627 ops/s
Iteration   6: 4376377.819 ops/s
Iteration   7: 4365596.150 ops/s
Iteration   8: 4361453.373 ops/s
Iteration   9: 4510071.347 ops/s
Iteration  10: 4622484.729 ops/s
Iteration  11: 4391120.759 ops/s
Iteration  12: 4490253.987 ops/s
Iteration  13: 4385227.037 ops/s
Iteration  14: 4476587.703 ops/s
Iteration  15: 4308129.232 ops/s
Iteration  16: 4408772.949 ops/s
Iteration  17: 4637062.019 ops/s
Iteration  18: 4364159.497 ops/s
Iteration  19: 4468642.726 ops/s
Iteration  20: 4548651.834 ops/s
Iteration  21: 4353196.653 ops/s
Iteration  22: 3609330.326 ops/s
Iteration  23: 4606833.845 ops/s
Iteration  24: 4254175.249 ops/s
Iteration  25: 4657166.904 ops/s
Iteration  26: 4392455.772 ops/s
Iteration  27: 4378922.152 ops/s
Iteration  28: 4513285.196 ops/s
Iteration  29: 4327853.947 ops/s
Iteration  30: 4393497.358 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fused2":
  4417532.943 ±(99.9%) 124409.975 ops/s [Average]
  (min, avg, max) = (3609330.326, 4417532.943, 4657166.904), stdev = 186211.009
  CI (99.9%): [4293122.967, 4541942.918] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fused2  thrpt   30  4417532.943 ± 124409.975  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157136.987 ops/s
# Warmup Iteration   2: 544098.075 ops/s
# Warmup Iteration   3: 683484.607 ops/s
# Warmup Iteration   4: 704470.381 ops/s
# Warmup Iteration   5: 716566.110 ops/s
# Warmup Iteration   6: 706464.472 ops/s
# Warmup Iteration   7: 698735.305 ops/s
# Warmup Iteration   8: 690504.266 ops/s
# Warmup Iteration   9: 668668.476 ops/s
# Warmup Iteration  10: 704506.600 ops/s
# Warmup Iteration  11: 669730.976 ops/s
# Warmup Iteration  12: 730827.389 ops/s
# Warmup Iteration  13: 699350.203 ops/s
# Warmup Iteration  14: 718365.308 ops/s
# Warmup Iteration  15: 706311.825 ops/s
# Warmup Iteration  16: 712870.291 ops/s
# Warmup Iteration  17: 783251.729 ops/s
# Warmup Iteration  18: 728664.668 ops/s
# Warmup Iteration  19: 773887.552 ops/s
# Warmup Iteration  20: 772411.110 ops/s
# Warmup Iteration  21: 734689.318 ops/s
# Warmup Iteration  22: 775722.085 ops/s
# Warmup Iteration  23: 726249.159 ops/s
# Warmup Iteration  24: 746417.053 ops/s
# Warmup Iteration  25: 781455.514 ops/s
# Warmup Iteration  26: 783874.179 ops/s
# Warmup Iteration  27: 725907.766 ops/s
# Warmup Iteration  28: 764683.212 ops/s
# Warmup Iteration  29: 788121.578 ops/s
# Warmup Iteration  30: 697964.306 ops/s
Iteration   1: 746031.501 ops/s
Iteration   2: 744356.372 ops/s
Iteration   3: 762240.379 ops/s
Iteration   4: 784383.275 ops/s
Iteration   5: 737529.151 ops/s
Iteration   6: 768115.492 ops/s
Iteration   7: 751601.038 ops/s
Iteration   8: 752280.420 ops/s
Iteration   9: 795542.202 ops/s
Iteration  10: 776037.394 ops/s
Iteration  11: 754697.642 ops/s
Iteration  12: 763625.289 ops/s
Iteration  13: 755376.170 ops/s
Iteration  14: 742061.440 ops/s
Iteration  15: 781663.907 ops/s
Iteration  16: 776320.639 ops/s
Iteration  17: 752757.958 ops/s
Iteration  18: 784605.669 ops/s
Iteration  19: 781333.886 ops/s
Iteration  20: 738096.098 ops/s
Iteration  21: 773350.187 ops/s
Iteration  22: 748737.857 ops/s
Iteration  23: 755306.057 ops/s
Iteration  24: 782530.946 ops/s
Iteration  25: 742751.123 ops/s
Iteration  26: 772984.415 ops/s
Iteration  27: 730550.276 ops/s
Iteration  28: 756968.816 ops/s
Iteration  29: 776457.951 ops/s
Iteration  30: 731902.177 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSingleTest._Benchmark.benchmark_singleOrErrorError":
  760673.191 ±(99.9%) 11898.514 ops/s [Average]
  (min, avg, max) = (730550.276, 760673.191, 795542.202), stdev = 17809.137
  CI (99.9%): [748774.677, 772571.705] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableSingleTest._Benchmark.benchmark_singleOrErrorError  thrpt   30  760673.191 ± 11898.514  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 149096.285 ops/s
# Warmup Iteration   2: 575417.479 ops/s
# Warmup Iteration   3: 657969.429 ops/s
# Warmup Iteration   4: 642374.408 ops/s
# Warmup Iteration   5: 661051.767 ops/s
# Warmup Iteration   6: 723061.546 ops/s
# Warmup Iteration   7: 708922.501 ops/s
# Warmup Iteration   8: 727544.264 ops/s
# Warmup Iteration   9: 695667.380 ops/s
# Warmup Iteration  10: 711113.876 ops/s
# Warmup Iteration  11: 717188.781 ops/s
# Warmup Iteration  12: 692888.309 ops/s
# Warmup Iteration  13: 720668.842 ops/s
# Warmup Iteration  14: 702372.064 ops/s
# Warmup Iteration  15: 713016.371 ops/s
# Warmup Iteration  16: 733602.929 ops/s
# Warmup Iteration  17: 746798.986 ops/s
# Warmup Iteration  18: 731548.808 ops/s
# Warmup Iteration  19: 768637.352 ops/s
# Warmup Iteration  20: 733394.695 ops/s
# Warmup Iteration  21: 751834.611 ops/s
# Warmup Iteration  22: 756187.178 ops/s
# Warmup Iteration  23: 732458.128 ops/s
# Warmup Iteration  24: 763198.223 ops/s
# Warmup Iteration  25: 749855.144 ops/s
# Warmup Iteration  26: 723455.361 ops/s
# Warmup Iteration  27: 743292.528 ops/s
# Warmup Iteration  28: 772787.028 ops/s
# Warmup Iteration  29: 720199.168 ops/s
# Warmup Iteration  30: 771998.711 ops/s
Iteration   1: 742564.372 ops/s
Iteration   2: 728217.405 ops/s
Iteration   3: 746984.191 ops/s
Iteration   4: 768508.713 ops/s
Iteration   5: 769202.649 ops/s
Iteration   6: 728733.448 ops/s
Iteration   7: 765966.635 ops/s
Iteration   8: 771478.127 ops/s
Iteration   9: 785873.941 ops/s
Iteration  10: 734281.741 ops/s
Iteration  11: 767441.147 ops/s
Iteration  12: 725764.647 ops/s
Iteration  13: 768809.474 ops/s
Iteration  14: 737407.158 ops/s
Iteration  15: 727882.302 ops/s
Iteration  16: 676969.950 ops/s
Iteration  17: 663943.665 ops/s
Iteration  18: 723893.902 ops/s
Iteration  19: 764021.611 ops/s
Iteration  20: 721822.443 ops/s
Iteration  21: 740459.627 ops/s
Iteration  22: 768407.565 ops/s
Iteration  23: 739037.851 ops/s
Iteration  24: 766389.680 ops/s
Iteration  25: 760974.543 ops/s
Iteration  26: 720889.535 ops/s
Iteration  27: 760206.177 ops/s
Iteration  28: 758284.505 ops/s
Iteration  29: 712915.134 ops/s
Iteration  30: 759857.542 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorError":
  743572.989 ±(99.9%) 18588.949 ops/s [Average]
  (min, avg, max) = (663943.665, 743572.989, 785873.941), stdev = 27823.066
  CI (99.9%): [724984.040, 762161.938] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorError  thrpt   30  743572.989 ± 18588.949  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_errorToObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_errorToObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 201224.093 ops/s
# Warmup Iteration   2: 570186.410 ops/s
# Warmup Iteration   3: 678121.238 ops/s
# Warmup Iteration   4: 708676.664 ops/s
# Warmup Iteration   5: 700848.339 ops/s
# Warmup Iteration   6: 685418.418 ops/s
# Warmup Iteration   7: 689867.723 ops/s
# Warmup Iteration   8: 659572.808 ops/s
# Warmup Iteration   9: 702786.011 ops/s
# Warmup Iteration  10: 658371.242 ops/s
# Warmup Iteration  11: 693987.606 ops/s
# Warmup Iteration  12: 720783.689 ops/s
# Warmup Iteration  13: 668744.334 ops/s
# Warmup Iteration  14: 698368.118 ops/s
# Warmup Iteration  15: 711742.500 ops/s
# Warmup Iteration  16: 717175.869 ops/s
# Warmup Iteration  17: 756656.787 ops/s
# Warmup Iteration  18: 735390.166 ops/s
# Warmup Iteration  19: 754434.960 ops/s
# Warmup Iteration  20: 744002.579 ops/s
# Warmup Iteration  21: 754094.223 ops/s
# Warmup Iteration  22: 741424.721 ops/s
# Warmup Iteration  23: 742743.584 ops/s
# Warmup Iteration  24: 755418.166 ops/s
# Warmup Iteration  25: 771910.715 ops/s
# Warmup Iteration  26: 733194.683 ops/s
# Warmup Iteration  27: 749823.737 ops/s
# Warmup Iteration  28: 787534.453 ops/s
# Warmup Iteration  29: 719039.483 ops/s
# Warmup Iteration  30: 759289.433 ops/s
Iteration   1: 764531.714 ops/s
Iteration   2: 712143.581 ops/s
Iteration   3: 758475.844 ops/s
Iteration   4: 733909.074 ops/s
Iteration   5: 770891.594 ops/s
Iteration   6: 716523.857 ops/s
Iteration   7: 776080.892 ops/s
Iteration   8: 755338.553 ops/s
Iteration   9: 735473.490 ops/s
Iteration  10: 770952.273 ops/s
Iteration  11: 724085.361 ops/s
Iteration  12: 745695.354 ops/s
Iteration  13: 729011.276 ops/s
Iteration  14: 729238.478 ops/s
Iteration  15: 734173.692 ops/s
Iteration  16: 741244.661 ops/s
Iteration  17: 731994.717 ops/s
Iteration  18: 731184.835 ops/s
Iteration  19: 735135.388 ops/s
Iteration  20: 746285.873 ops/s
Iteration  21: 775025.975 ops/s
Iteration  22: 735677.895 ops/s
Iteration  23: 762044.319 ops/s
Iteration  24: 749436.623 ops/s
Iteration  25: 767578.542 ops/s
Iteration  26: 792210.233 ops/s
Iteration  27: 719549.438 ops/s
Iteration  28: 772532.376 ops/s
Iteration  29: 748904.022 ops/s
Iteration  30: 759949.445 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableCollectWithCollectorTest._Benchmark.benchmark_errorToObservable":
  747509.313 ±(99.9%) 13652.369 ops/s [Average]
  (min, avg, max) = (712143.581, 747509.313, 792210.233), stdev = 20434.225
  CI (99.9%): [733856.943, 761161.682] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
ObservableCollectWithCollectorTest._Benchmark.benchmark_errorToObservable  thrpt   30  747509.313 ± 13652.369  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_collectionSupplierReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_collectionSupplierReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 119666.467 ops/s
# Warmup Iteration   2: 461003.129 ops/s
# Warmup Iteration   3: 541043.096 ops/s
# Warmup Iteration   4: 572363.612 ops/s
# Warmup Iteration   5: 588987.115 ops/s
# Warmup Iteration   6: 498238.999 ops/s
# Warmup Iteration   7: 552770.760 ops/s
# Warmup Iteration   8: 546587.856 ops/s
# Warmup Iteration   9: 522100.520 ops/s
# Warmup Iteration  10: 590628.489 ops/s
# Warmup Iteration  11: 565764.165 ops/s
# Warmup Iteration  12: 569312.388 ops/s
# Warmup Iteration  13: 597700.442 ops/s
# Warmup Iteration  14: 571082.760 ops/s
# Warmup Iteration  15: 572033.088 ops/s
# Warmup Iteration  16: 574616.344 ops/s
# Warmup Iteration  17: 614930.865 ops/s
# Warmup Iteration  18: 593370.249 ops/s
# Warmup Iteration  19: 586929.801 ops/s
# Warmup Iteration  20: 628906.904 ops/s
# Warmup Iteration  21: 592500.675 ops/s
# Warmup Iteration  22: 608987.339 ops/s
# Warmup Iteration  23: 583674.145 ops/s
# Warmup Iteration  24: 595636.364 ops/s
# Warmup Iteration  25: 617918.731 ops/s
# Warmup Iteration  26: 625000.027 ops/s
# Warmup Iteration  27: 590591.462 ops/s
# Warmup Iteration  28: 614712.052 ops/s
# Warmup Iteration  29: 627285.027 ops/s
# Warmup Iteration  30: 599908.939 ops/s
Iteration   1: 620634.184 ops/s
Iteration   2: 587388.555 ops/s
Iteration   3: 610719.800 ops/s
Iteration   4: 598488.465 ops/s
Iteration   5: 597126.296 ops/s
Iteration   6: 620719.288 ops/s
Iteration   7: 582240.125 ops/s
Iteration   8: 615395.950 ops/s
Iteration   9: 624300.906 ops/s
Iteration  10: 585214.961 ops/s
Iteration  11: 497978.165 ops/s
Iteration  12: 624794.242 ops/s
Iteration  13: 581960.510 ops/s
Iteration  14: 631197.043 ops/s
Iteration  15: 607147.247 ops/s
Iteration  16: 616928.823 ops/s
Iteration  17: 596567.318 ops/s
Iteration  18: 606460.207 ops/s
Iteration  19: 584754.756 ops/s
Iteration  20: 627128.714 ops/s
Iteration  21: 597278.790 ops/s
Iteration  22: 598097.397 ops/s
Iteration  23: 621760.678 ops/s
Iteration  24: 580844.115 ops/s
Iteration  25: 610653.639 ops/s
Iteration  26: 587612.779 ops/s
Iteration  27: 618711.435 ops/s
Iteration  28: 603811.033 ops/s
Iteration  29: 596453.119 ops/s
Iteration  30: 614989.986 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_collectionSupplierReturnsNull":
  601578.618 ±(99.9%) 16565.505 ops/s [Average]
  (min, avg, max) = (497978.165, 601578.618, 631197.043), stdev = 24794.470
  CI (99.9%): [585013.113, 618144.122] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ObservableToListTest._Benchmark.benchmark_collectionSupplierReturnsNull  thrpt   30  601578.618 ± 16565.505  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnUnsubscribeTest._Benchmark.benchmark_noReentrantDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnUnsubscribeTest._Benchmark.benchmark_noReentrantDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 493642.003 ops/s
# Warmup Iteration   2: 2218785.670 ops/s
# Warmup Iteration   3: 2575047.844 ops/s
# Warmup Iteration   4: 3100442.097 ops/s
# Warmup Iteration   5: 3329916.364 ops/s
# Warmup Iteration   6: 3189872.518 ops/s
# Warmup Iteration   7: 3352581.166 ops/s
# Warmup Iteration   8: 3283094.932 ops/s
# Warmup Iteration   9: 3360781.376 ops/s
# Warmup Iteration  10: 3361007.830 ops/s
# Warmup Iteration  11: 3173310.364 ops/s
# Warmup Iteration  12: 3408643.930 ops/s
# Warmup Iteration  13: 3480664.331 ops/s
# Warmup Iteration  14: 3201142.533 ops/s
# Warmup Iteration  15: 3453800.602 ops/s
# Warmup Iteration  16: 3188051.915 ops/s
# Warmup Iteration  17: 3265137.156 ops/s
# Warmup Iteration  18: 3481455.463 ops/s
# Warmup Iteration  19: 3212471.163 ops/s
# Warmup Iteration  20: 3397763.909 ops/s
# Warmup Iteration  21: 3221021.426 ops/s
# Warmup Iteration  22: 3319358.573 ops/s
# Warmup Iteration  23: 3446282.106 ops/s
# Warmup Iteration  24: 3197469.829 ops/s
# Warmup Iteration  25: 3377392.490 ops/s
# Warmup Iteration  26: 3345612.069 ops/s
# Warmup Iteration  27: 3267297.325 ops/s
# Warmup Iteration  28: 3379010.338 ops/s
# Warmup Iteration  29: 3265218.299 ops/s
# Warmup Iteration  30: 3308745.165 ops/s
Iteration   1: 3262458.773 ops/s
Iteration   2: 3261546.215 ops/s
Iteration   3: 3393384.648 ops/s
Iteration   4: 3303064.678 ops/s
Iteration   5: 3217381.742 ops/s
Iteration   6: 3418702.514 ops/s
Iteration   7: 3263957.107 ops/s
Iteration   8: 3333565.121 ops/s
Iteration   9: 3212667.743 ops/s
Iteration  10: 3382178.827 ops/s
Iteration  11: 3334425.103 ops/s
Iteration  12: 3360064.114 ops/s
Iteration  13: 3282945.400 ops/s
Iteration  14: 3282513.679 ops/s
Iteration  15: 3259736.920 ops/s
Iteration  16: 3388215.592 ops/s
Iteration  17: 3262716.831 ops/s
Iteration  18: 3355311.111 ops/s
Iteration  19: 3331250.049 ops/s
Iteration  20: 3333620.647 ops/s
Iteration  21: 3341284.789 ops/s
Iteration  22: 3296349.070 ops/s
Iteration  23: 3421715.744 ops/s
Iteration  24: 3209512.711 ops/s
Iteration  25: 3372792.344 ops/s
Iteration  26: 3223694.237 ops/s
Iteration  27: 3389458.140 ops/s
Iteration  28: 3165540.486 ops/s
Iteration  29: 3315533.455 ops/s
Iteration  30: 3324116.264 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDoOnUnsubscribeTest._Benchmark.benchmark_noReentrantDispose":
  3309990.135 ±(99.9%) 44808.348 ops/s [Average]
  (min, avg, max) = (3165540.486, 3309990.135, 3421715.744), stdev = 67067.031
  CI (99.9%): [3265181.787, 3354798.483] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableDoOnUnsubscribeTest._Benchmark.benchmark_noReentrantDispose  thrpt   30  3309990.135 ± 44808.348  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_onError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_onError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 336544.333 ops/s
# Warmup Iteration   2: 589706.371 ops/s
# Warmup Iteration   3: 729732.330 ops/s
# Warmup Iteration   4: 703885.599 ops/s
# Warmup Iteration   5: 727135.128 ops/s
# Warmup Iteration   6: 697062.399 ops/s
# Warmup Iteration   7: 710900.760 ops/s
# Warmup Iteration   8: 711310.753 ops/s
# Warmup Iteration   9: 673708.485 ops/s
# Warmup Iteration  10: 725145.499 ops/s
# Warmup Iteration  11: 693094.381 ops/s
# Warmup Iteration  12: 711635.209 ops/s
# Warmup Iteration  13: 698280.343 ops/s
# Warmup Iteration  14: 730336.735 ops/s
# Warmup Iteration  15: 688924.034 ops/s
# Warmup Iteration  16: 686989.878 ops/s
# Warmup Iteration  17: 773341.086 ops/s
# Warmup Iteration  18: 750428.921 ops/s
# Warmup Iteration  19: 760967.051 ops/s
# Warmup Iteration  20: 764915.642 ops/s
# Warmup Iteration  21: 722552.578 ops/s
# Warmup Iteration  22: 769220.531 ops/s
# Warmup Iteration  23: 729965.456 ops/s
# Warmup Iteration  24: 734524.993 ops/s
# Warmup Iteration  25: 758309.143 ops/s
# Warmup Iteration  26: 750669.887 ops/s
# Warmup Iteration  27: 747309.216 ops/s
# Warmup Iteration  28: 785648.247 ops/s
# Warmup Iteration  29: 733188.904 ops/s
# Warmup Iteration  30: 748990.455 ops/s
Iteration   1: 769798.460 ops/s
Iteration   2: 736613.310 ops/s
Iteration   3: 784403.832 ops/s
Iteration   4: 759377.988 ops/s
Iteration   5: 732510.639 ops/s
Iteration   6: 598809.186 ops/s
Iteration   7: 716710.405 ops/s
Iteration   8: 741026.253 ops/s
Iteration   9: 740961.253 ops/s
Iteration  10: 752775.953 ops/s
Iteration  11: 779771.281 ops/s
Iteration  12: 767931.449 ops/s
Iteration  13: 750920.637 ops/s
Iteration  14: 757436.572 ops/s
Iteration  15: 779972.950 ops/s
Iteration  16: 725966.084 ops/s
Iteration  17: 784158.390 ops/s
Iteration  18: 781565.952 ops/s
Iteration  19: 741672.420 ops/s
Iteration  20: 768849.825 ops/s
Iteration  21: 744926.780 ops/s
Iteration  22: 773729.274 ops/s
Iteration  23: 746873.526 ops/s
Iteration  24: 750011.487 ops/s
Iteration  25: 742188.609 ops/s
Iteration  26: 761005.917 ops/s
Iteration  27: 784537.645 ops/s
Iteration  28: 739790.850 ops/s
Iteration  29: 764816.703 ops/s
Iteration  30: 742555.158 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDetachTest._Benchmark.benchmark_onError":
  750722.293 ±(99.9%) 22859.859 ops/s [Average]
  (min, avg, max) = (598809.186, 750722.293, 784537.645), stdev = 34215.564
  CI (99.9%): [727862.434, 773582.152] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt       Score       Error  Units
SingleDetachTest._Benchmark.benchmark_onError  thrpt   30  750722.293 ± 22859.859  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 225648.494 ops/s
# Warmup Iteration   2: 571634.233 ops/s
# Warmup Iteration   3: 733169.883 ops/s
# Warmup Iteration   4: 669986.051 ops/s
# Warmup Iteration   5: 709488.483 ops/s
# Warmup Iteration   6: 681060.127 ops/s
# Warmup Iteration   7: 681313.446 ops/s
# Warmup Iteration   8: 705213.699 ops/s
# Warmup Iteration   9: 683180.243 ops/s
# Warmup Iteration  10: 686833.845 ops/s
# Warmup Iteration  11: 685372.793 ops/s
# Warmup Iteration  12: 706715.129 ops/s
# Warmup Iteration  13: 680798.924 ops/s
# Warmup Iteration  14: 700181.948 ops/s
# Warmup Iteration  15: 715666.971 ops/s
# Warmup Iteration  16: 650717.587 ops/s
# Warmup Iteration  17: 716385.736 ops/s
# Warmup Iteration  18: 737129.215 ops/s
# Warmup Iteration  19: 718629.333 ops/s
# Warmup Iteration  20: 735522.226 ops/s
# Warmup Iteration  21: 735630.305 ops/s
# Warmup Iteration  22: 765335.576 ops/s
# Warmup Iteration  23: 724535.909 ops/s
# Warmup Iteration  24: 743819.696 ops/s
# Warmup Iteration  25: 768164.106 ops/s
# Warmup Iteration  26: 729339.272 ops/s
# Warmup Iteration  27: 771240.182 ops/s
# Warmup Iteration  28: 758735.883 ops/s
# Warmup Iteration  29: 748453.958 ops/s
# Warmup Iteration  30: 771628.628 ops/s
Iteration   1: 757771.356 ops/s
Iteration   2: 750771.504 ops/s
Iteration   3: 726528.475 ops/s
Iteration   4: 778998.410 ops/s
Iteration   5: 757753.726 ops/s
Iteration   6: 752260.872 ops/s
Iteration   7: 767355.013 ops/s
Iteration   8: 761157.207 ops/s
Iteration   9: 754303.620 ops/s
Iteration  10: 706824.215 ops/s
Iteration  11: 772314.307 ops/s
Iteration  12: 739838.670 ops/s
Iteration  13: 732319.371 ops/s
Iteration  14: 730405.899 ops/s
Iteration  15: 716819.915 ops/s
Iteration  16: 758802.645 ops/s
Iteration  17: 746175.281 ops/s
Iteration  18: 759406.199 ops/s
Iteration  19: 750318.975 ops/s
Iteration  20: 745733.082 ops/s
Iteration  21: 737315.648 ops/s
Iteration  22: 749914.990 ops/s
Iteration  23: 741074.702 ops/s
Iteration  24: 764777.201 ops/s
Iteration  25: 736188.262 ops/s
Iteration  26: 758638.490 ops/s
Iteration  27: 746361.559 ops/s
Iteration  28: 752767.193 ops/s
Iteration  29: 769620.138 ops/s
Iteration  30: 733233.307 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_error":
  748525.008 ±(99.9%) 10936.027 ops/s [Average]
  (min, avg, max) = (706824.215, 748525.008, 778998.410), stdev = 16368.532
  CI (99.9%): [737588.980, 759461.035] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
SingleDoAfterSuccessTest._Benchmark.benchmark_error  thrpt   30  748525.008 ± 10936.027  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31117.877 ops/s
# Warmup Iteration   2: 101112.380 ops/s
# Warmup Iteration   3: 223342.698 ops/s
# Warmup Iteration   4: 222842.107 ops/s
# Warmup Iteration   5: 231723.547 ops/s
# Warmup Iteration   6: 232729.404 ops/s
# Warmup Iteration   7: 227085.674 ops/s
# Warmup Iteration   8: 247732.740 ops/s
# Warmup Iteration   9: 230204.718 ops/s
# Warmup Iteration  10: 238652.541 ops/s
# Warmup Iteration  11: 242743.920 ops/s
# Warmup Iteration  12: 244107.156 ops/s
# Warmup Iteration  13: 250219.988 ops/s
# Warmup Iteration  14: 241453.341 ops/s
# Warmup Iteration  15: 246512.078 ops/s
# Warmup Iteration  16: 253451.408 ops/s
# Warmup Iteration  17: 249435.069 ops/s
# Warmup Iteration  18: 261755.329 ops/s
# Warmup Iteration  19: 251494.849 ops/s
# Warmup Iteration  20: 256902.973 ops/s
# Warmup Iteration  21: 268559.609 ops/s
# Warmup Iteration  22: 244520.536 ops/s
# Warmup Iteration  23: 265298.703 ops/s
# Warmup Iteration  24: 250410.730 ops/s
# Warmup Iteration  25: 254569.847 ops/s
# Warmup Iteration  26: 262301.365 ops/s
# Warmup Iteration  27: 257201.765 ops/s
# Warmup Iteration  28: 257913.580 ops/s
# Warmup Iteration  29: 250204.425 ops/s
# Warmup Iteration  30: 266782.469 ops/s
Iteration   1: 196560.476 ops/s
Iteration   2: 255548.498 ops/s
Iteration   3: 263358.424 ops/s
Iteration   4: 250494.147 ops/s
Iteration   5: 254473.720 ops/s
Iteration   6: 259508.085 ops/s
Iteration   7: 248943.370 ops/s
Iteration   8: 261714.676 ops/s
Iteration   9: 248546.612 ops/s
Iteration  10: 267309.107 ops/s
Iteration  11: 251245.960 ops/s
Iteration  12: 261435.588 ops/s
Iteration  13: 257421.485 ops/s
Iteration  14: 254019.123 ops/s
Iteration  15: 253513.824 ops/s
Iteration  16: 258965.572 ops/s
Iteration  17: 251686.932 ops/s
Iteration  18: 262516.998 ops/s
Iteration  19: 255497.460 ops/s
Iteration  20: 266180.727 ops/s
Iteration  21: 249477.340 ops/s
Iteration  22: 260930.525 ops/s
Iteration  23: 253455.535 ops/s
Iteration  24: 266333.989 ops/s
Iteration  25: 266111.063 ops/s
Iteration  26: 248485.873 ops/s
Iteration  27: 266542.708 ops/s
Iteration  28: 249392.503 ops/s
Iteration  29: 260222.772 ops/s
Iteration  30: 248611.793 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_doubleOnSubscribe":
  254950.163 ±(99.9%) 8477.654 ops/s [Average]
  (min, avg, max) = (196560.476, 254950.163, 267309.107), stdev = 12688.955
  CI (99.9%): [246472.509, 263427.817] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableToListTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  254950.163 ± 8477.654  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedStreamAvailableLater$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedStreamAvailableLater

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216332.862 ops/s
# Warmup Iteration   2: 1673431.830 ops/s
# Warmup Iteration   3: 2581609.448 ops/s
# Warmup Iteration   4: 3233063.978 ops/s
# Warmup Iteration   5: 3171167.530 ops/s
# Warmup Iteration   6: 3143125.033 ops/s
# Warmup Iteration   7: 3211932.726 ops/s
# Warmup Iteration   8: 3122849.249 ops/s
# Warmup Iteration   9: 3235927.548 ops/s
# Warmup Iteration  10: 3096093.195 ops/s
# Warmup Iteration  11: 3143143.595 ops/s
# Warmup Iteration  12: 3201499.259 ops/s
# Warmup Iteration  13: 3165101.367 ops/s
# Warmup Iteration  14: 3307332.876 ops/s
# Warmup Iteration  15: 3045257.055 ops/s
# Warmup Iteration  16: 3241054.283 ops/s
# Warmup Iteration  17: 3187543.162 ops/s
# Warmup Iteration  18: 3106929.628 ops/s
# Warmup Iteration  19: 3210762.588 ops/s
# Warmup Iteration  20: 3226712.947 ops/s
# Warmup Iteration  21: 3214297.523 ops/s
# Warmup Iteration  22: 3183625.253 ops/s
# Warmup Iteration  23: 3282572.038 ops/s
# Warmup Iteration  24: 3228948.450 ops/s
# Warmup Iteration  25: 3181525.738 ops/s
# Warmup Iteration  26: 3280313.599 ops/s
# Warmup Iteration  27: 3193325.776 ops/s
# Warmup Iteration  28: 3166180.345 ops/s
# Warmup Iteration  29: 3220950.455 ops/s
# Warmup Iteration  30: 3150125.535 ops/s
Iteration   1: 3172178.091 ops/s
Iteration   2: 3260460.310 ops/s
Iteration   3: 3178878.685 ops/s
Iteration   4: 3204886.946 ops/s
Iteration   5: 3134049.364 ops/s
Iteration   6: 3289838.097 ops/s
Iteration   7: 3134070.397 ops/s
Iteration   8: 3112819.202 ops/s
Iteration   9: 3304379.046 ops/s
Iteration  10: 3056385.331 ops/s
Iteration  11: 3273297.295 ops/s
Iteration  12: 3185535.121 ops/s
Iteration  13: 3187498.577 ops/s
Iteration  14: 3067189.336 ops/s
Iteration  15: 3143432.372 ops/s
Iteration  16: 3318170.357 ops/s
Iteration  17: 3316993.231 ops/s
Iteration  18: 3081341.077 ops/s
Iteration  19: 3287097.483 ops/s
Iteration  20: 3209068.653 ops/s
Iteration  21: 3061220.793 ops/s
Iteration  22: 3345503.132 ops/s
Iteration  23: 3291893.877 ops/s
Iteration  24: 3086041.193 ops/s
Iteration  25: 3263385.195 ops/s
Iteration  26: 3027035.482 ops/s
Iteration  27: 3292788.895 ops/s
Iteration  28: 3127765.040 ops/s
Iteration  29: 3206146.058 ops/s
Iteration  30: 3158365.471 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedStreamAvailableLater":
  3192590.470 ±(99.9%) 61598.438 ops/s [Average]
  (min, avg, max) = (3027035.482, 3192590.470, 3345503.132), stdev = 92197.649
  CI (99.9%): [3130992.032, 3254188.908] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
SingleFlattenStreamAsObservableTest._Benchmark.benchmark_fusedStreamAvailableLater  thrpt   30  3192590.470 ± 61598.438  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 355123.697 ops/s
# Warmup Iteration   2: 1588729.905 ops/s
# Warmup Iteration   3: 1839976.670 ops/s
# Warmup Iteration   4: 2185148.339 ops/s
# Warmup Iteration   5: 2201345.018 ops/s
# Warmup Iteration   6: 2125515.951 ops/s
# Warmup Iteration   7: 2191658.991 ops/s
# Warmup Iteration   8: 2215554.429 ops/s
# Warmup Iteration   9: 2080782.932 ops/s
# Warmup Iteration  10: 2272384.111 ops/s
# Warmup Iteration  11: 2235207.728 ops/s
# Warmup Iteration  12: 2099729.039 ops/s
# Warmup Iteration  13: 2249447.884 ops/s
# Warmup Iteration  14: 2082196.216 ops/s
# Warmup Iteration  15: 2244525.027 ops/s
# Warmup Iteration  16: 2095897.513 ops/s
# Warmup Iteration  17: 2156447.568 ops/s
# Warmup Iteration  18: 2316898.079 ops/s
# Warmup Iteration  19: 2145056.677 ops/s
# Warmup Iteration  20: 2279656.362 ops/s
# Warmup Iteration  21: 2126355.989 ops/s
# Warmup Iteration  22: 2199997.543 ops/s
# Warmup Iteration  23: 2239754.644 ops/s
# Warmup Iteration  24: 2193440.516 ops/s
# Warmup Iteration  25: 1833649.333 ops/s
# Warmup Iteration  26: 2202946.042 ops/s
# Warmup Iteration  27: 2275849.142 ops/s
# Warmup Iteration  28: 2151495.705 ops/s
# Warmup Iteration  29: 2196004.713 ops/s
# Warmup Iteration  30: 2244395.267 ops/s
Iteration   1: 2144968.952 ops/s
Iteration   2: 2204927.024 ops/s
Iteration   3: 2148795.101 ops/s
Iteration   4: 2230120.989 ops/s
Iteration   5: 2256163.288 ops/s
Iteration   6: 2169714.612 ops/s
Iteration   7: 2201895.999 ops/s
Iteration   8: 2269539.090 ops/s
Iteration   9: 2187099.801 ops/s
Iteration  10: 2255214.779 ops/s
Iteration  11: 2205086.553 ops/s
Iteration  12: 2119311.239 ops/s
Iteration  13: 2223331.224 ops/s
Iteration  14: 2147719.465 ops/s
Iteration  15: 2165223.305 ops/s
Iteration  16: 2279235.795 ops/s
Iteration  17: 2139850.408 ops/s
Iteration  18: 2226962.502 ops/s
Iteration  19: 2320327.031 ops/s
Iteration  20: 2140719.786 ops/s
Iteration  21: 2227816.372 ops/s
Iteration  22: 2239014.065 ops/s
Iteration  23: 2188876.671 ops/s
Iteration  24: 2120191.474 ops/s
Iteration  25: 2156264.027 ops/s
Iteration  26: 2187954.770 ops/s
Iteration  27: 2193954.236 ops/s
Iteration  28: 2265045.165 ops/s
Iteration  29: 2082458.349 ops/s
Iteration  30: 2218476.226 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPath":
  2197208.610 ±(99.9%) 36675.002 ops/s [Average]
  (min, avg, max) = (2082458.349, 2197208.610, 2320327.031), stdev = 54893.421
  CI (99.9%): [2160533.608, 2233883.612] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_onSuccessSlowPath  thrpt   30  2197208.610 ± 36675.002  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 245360.659 ops/s
# Warmup Iteration   2: 581516.660 ops/s
# Warmup Iteration   3: 702385.203 ops/s
# Warmup Iteration   4: 678072.287 ops/s
# Warmup Iteration   5: 701560.150 ops/s
# Warmup Iteration   6: 668486.738 ops/s
# Warmup Iteration   7: 695704.874 ops/s
# Warmup Iteration   8: 703324.020 ops/s
# Warmup Iteration   9: 671132.986 ops/s
# Warmup Iteration  10: 711864.553 ops/s
# Warmup Iteration  11: 698297.206 ops/s
# Warmup Iteration  12: 677607.848 ops/s
# Warmup Iteration  13: 707141.812 ops/s
# Warmup Iteration  14: 693060.145 ops/s
# Warmup Iteration  15: 666261.429 ops/s
# Warmup Iteration  16: 709922.374 ops/s
# Warmup Iteration  17: 726010.758 ops/s
# Warmup Iteration  18: 760840.055 ops/s
# Warmup Iteration  19: 728567.519 ops/s
# Warmup Iteration  20: 752641.168 ops/s
# Warmup Iteration  21: 729392.309 ops/s
# Warmup Iteration  22: 726222.991 ops/s
# Warmup Iteration  23: 764241.258 ops/s
# Warmup Iteration  24: 752270.288 ops/s
# Warmup Iteration  25: 695998.458 ops/s
# Warmup Iteration  26: 747357.432 ops/s
# Warmup Iteration  27: 746336.799 ops/s
# Warmup Iteration  28: 726903.231 ops/s
# Warmup Iteration  29: 723077.131 ops/s
# Warmup Iteration  30: 756656.561 ops/s
Iteration   1: 737921.264 ops/s
Iteration   2: 715320.370 ops/s
Iteration   3: 766576.169 ops/s
Iteration   4: 733296.924 ops/s
Iteration   5: 718989.909 ops/s
Iteration   6: 753174.589 ops/s
Iteration   7: 728867.914 ops/s
Iteration   8: 754698.561 ops/s
Iteration   9: 723166.172 ops/s
Iteration  10: 725144.366 ops/s
Iteration  11: 747735.948 ops/s
Iteration  12: 686257.819 ops/s
Iteration  13: 739359.983 ops/s
Iteration  14: 772877.474 ops/s
Iteration  15: 721051.105 ops/s
Iteration  16: 738873.931 ops/s
Iteration  17: 764028.137 ops/s
Iteration  18: 720211.519 ops/s
Iteration  19: 764141.790 ops/s
Iteration  20: 720504.504 ops/s
Iteration  21: 741039.200 ops/s
Iteration  22: 758166.327 ops/s
Iteration  23: 719357.542 ops/s
Iteration  24: 772221.150 ops/s
Iteration  25: 725809.269 ops/s
Iteration  26: 752889.298 ops/s
Iteration  27: 756601.069 ops/s
Iteration  28: 738052.851 ops/s
Iteration  29: 743486.012 ops/s
Iteration  30: 741050.521 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_error":
  739362.390 ±(99.9%) 13355.689 ops/s [Average]
  (min, avg, max) = (686257.819, 739362.390, 772877.474), stdev = 19990.167
  CI (99.9%): [726006.701, 752718.078] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
SingleDoAfterTerminateTest._Benchmark.benchmark_error  thrpt   30  739362.390 ± 13355.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerErrorsReentrant$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerErrorsReentrant

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.738 ops/s
# Warmup Iteration   2: 12318.189 ops/s
# Warmup Iteration   3: 60974.762 ops/s
# Warmup Iteration   4: 71599.142 ops/s
# Warmup Iteration   5: 93252.267 ops/s
# Warmup Iteration   6: 92371.726 ops/s
# Warmup Iteration   7: 102299.879 ops/s
# Warmup Iteration   8: 75009.383 ops/s
# Warmup Iteration   9: 268738.093 ops/s
# Warmup Iteration  10: 277199.400 ops/s
# Warmup Iteration  11: 274210.309 ops/s
# Warmup Iteration  12: 292340.084 ops/s
# Warmup Iteration  13: 277478.771 ops/s
# Warmup Iteration  14: 284474.229 ops/s
# Warmup Iteration  15: 276247.682 ops/s
# Warmup Iteration  16: 270936.624 ops/s
# Warmup Iteration  17: 288222.486 ops/s
# Warmup Iteration  18: 273700.316 ops/s
# Warmup Iteration  19: 226461.529 ops/s
# Warmup Iteration  20: 268722.444 ops/s
# Warmup Iteration  21: 274053.205 ops/s
# Warmup Iteration  22: 284450.626 ops/s
# Warmup Iteration  23: 276045.388 ops/s
# Warmup Iteration  24: 273327.950 ops/s
# Warmup Iteration  25: 290291.358 ops/s
# Warmup Iteration  26: 279561.925 ops/s
# Warmup Iteration  27: 276347.757 ops/s
# Warmup Iteration  28: 283671.264 ops/s
# Warmup Iteration  29: 273442.764 ops/s
# Warmup Iteration  30: 285422.544 ops/s
Iteration   1: 290387.013 ops/s
Iteration   2: 274238.104 ops/s
Iteration   3: 277416.326 ops/s
Iteration   4: 264060.490 ops/s
Iteration   5: 276654.454 ops/s
Iteration   6: 293622.881 ops/s
Iteration   7: 282158.085 ops/s
Iteration   8: 286532.506 ops/s
Iteration   9: 276029.461 ops/s
Iteration  10: 296588.701 ops/s
Iteration  11: 282033.572 ops/s
Iteration  12: 276306.632 ops/s
Iteration  13: 303874.237 ops/s
Iteration  14: 284925.984 ops/s
Iteration  15: 278014.691 ops/s
Iteration  16: 275651.796 ops/s
Iteration  17: 288437.398 ops/s
Iteration  18: 276267.228 ops/s
Iteration  19: 293680.650 ops/s
Iteration  20: 279335.505 ops/s
Iteration  21: 281157.138 ops/s
Iteration  22: 281134.599 ops/s
Iteration  23: 283628.748 ops/s
Iteration  24: 280180.920 ops/s
Iteration  25: 295875.041 ops/s
Iteration  26: 278974.005 ops/s
Iteration  27: 286487.536 ops/s
Iteration  28: 279696.524 ops/s
Iteration  29: 291516.571 ops/s
Iteration  30: 277985.770 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerErrorsReentrant":
  283095.085 ±(99.9%) 5555.116 ops/s [Average]
  (min, avg, max) = (264060.490, 283095.085, 303874.237), stdev = 8314.637
  CI (99.9%): [277539.969, 288650.201] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_innerErrorsReentrant  thrpt   30  283095.085 ± 5555.116  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.831 ops/s
# Warmup Iteration   2: 20347.932 ops/s
# Warmup Iteration   3: 49368.583 ops/s
# Warmup Iteration   4: 89311.515 ops/s
# Warmup Iteration   5: 99308.707 ops/s
# Warmup Iteration   6: 104385.701 ops/s
# Warmup Iteration   7: 213143.568 ops/s
# Warmup Iteration   8: 292002.404 ops/s
# Warmup Iteration   9: 283125.179 ops/s
# Warmup Iteration  10: 306377.622 ops/s
# Warmup Iteration  11: 288451.160 ops/s
# Warmup Iteration  12: 289953.331 ops/s
# Warmup Iteration  13: 286981.837 ops/s
# Warmup Iteration  14: 311212.155 ops/s
# Warmup Iteration  15: 299815.421 ops/s
# Warmup Iteration  16: 310351.375 ops/s
# Warmup Iteration  17: 309763.713 ops/s
# Warmup Iteration  18: 311806.148 ops/s
# Warmup Iteration  19: 306298.749 ops/s
# Warmup Iteration  20: 319089.609 ops/s
# Warmup Iteration  21: 294142.659 ops/s
# Warmup Iteration  22: 319814.007 ops/s
# Warmup Iteration  23: 313315.559 ops/s
# Warmup Iteration  24: 304925.261 ops/s
# Warmup Iteration  25: 309357.784 ops/s
# Warmup Iteration  26: 313900.585 ops/s
# Warmup Iteration  27: 320015.761 ops/s
# Warmup Iteration  28: 305285.952 ops/s
# Warmup Iteration  29: 314589.439 ops/s
# Warmup Iteration  30: 308955.980 ops/s
Iteration   1: 309364.440 ops/s
Iteration   2: 318564.067 ops/s
Iteration   3: 304301.612 ops/s
Iteration   4: 312777.122 ops/s
Iteration   5: 306937.419 ops/s
Iteration   6: 308254.125 ops/s
Iteration   7: 319692.250 ops/s
Iteration   8: 293647.939 ops/s
Iteration   9: 319912.384 ops/s
Iteration  10: 299367.133 ops/s
Iteration  11: 312696.780 ops/s
Iteration  12: 300673.503 ops/s
Iteration  13: 317269.339 ops/s
Iteration  14: 306392.702 ops/s
Iteration  15: 304518.610 ops/s
Iteration  16: 307883.050 ops/s
Iteration  17: 317200.399 ops/s
Iteration  18: 307719.922 ops/s
Iteration  19: 318622.715 ops/s
Iteration  20: 309890.937 ops/s
Iteration  21: 300402.435 ops/s
Iteration  22: 322589.173 ops/s
Iteration  23: 308839.967 ops/s
Iteration  24: 307709.752 ops/s
Iteration  25: 304617.193 ops/s
Iteration  26: 317711.871 ops/s
Iteration  27: 311376.777 ops/s
Iteration  28: 298706.866 ops/s
Iteration  29: 304280.293 ops/s
Iteration  30: 320705.826 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_mapperThrows":
  309754.220 ±(99.9%) 5032.892 ops/s [Average]
  (min, avg, max) = (293647.939, 309754.220, 322589.173), stdev = 7532.997
  CI (99.9%): [304721.328, 314787.112] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_mapperThrows  thrpt   30  309754.220 ± 5032.892  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_shouldDisposeInnerObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_shouldDisposeInnerObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124786.559 ops/s
# Warmup Iteration   2: 406783.098 ops/s
# Warmup Iteration   3: 1129531.856 ops/s
# Warmup Iteration   4: 1244452.070 ops/s
# Warmup Iteration   5: 1310992.971 ops/s
# Warmup Iteration   6: 1293532.909 ops/s
# Warmup Iteration   7: 1243514.250 ops/s
# Warmup Iteration   8: 1330415.187 ops/s
# Warmup Iteration   9: 1208953.713 ops/s
# Warmup Iteration  10: 1233042.354 ops/s
# Warmup Iteration  11: 1326944.330 ops/s
# Warmup Iteration  12: 1301833.573 ops/s
# Warmup Iteration  13: 1236577.709 ops/s
# Warmup Iteration  14: 993627.390 ops/s
# Warmup Iteration  15: 1176506.669 ops/s
# Warmup Iteration  16: 1311857.963 ops/s
# Warmup Iteration  17: 1329310.231 ops/s
# Warmup Iteration  18: 1373907.639 ops/s
# Warmup Iteration  19: 1301945.759 ops/s
# Warmup Iteration  20: 1259981.167 ops/s
# Warmup Iteration  21: 1341980.407 ops/s
# Warmup Iteration  22: 1276435.647 ops/s
# Warmup Iteration  23: 1264981.972 ops/s
# Warmup Iteration  24: 1288886.958 ops/s
# Warmup Iteration  25: 1277566.770 ops/s
# Warmup Iteration  26: 1334865.971 ops/s
# Warmup Iteration  27: 1360077.720 ops/s
# Warmup Iteration  28: 1250301.430 ops/s
# Warmup Iteration  29: 1309704.021 ops/s
# Warmup Iteration  30: 1300118.215 ops/s
Iteration   1: 1292292.810 ops/s
Iteration   2: 1289264.968 ops/s
Iteration   3: 1277810.064 ops/s
Iteration   4: 1258475.938 ops/s
Iteration   5: 1311778.739 ops/s
Iteration   6: 1274430.793 ops/s
Iteration   7: 1312271.662 ops/s
Iteration   8: 1286904.032 ops/s
Iteration   9: 1284788.991 ops/s
Iteration  10: 1330765.007 ops/s
Iteration  11: 1273494.312 ops/s
Iteration  12: 1321432.641 ops/s
Iteration  13: 1264954.170 ops/s
Iteration  14: 1296357.438 ops/s
Iteration  15: 1291694.643 ops/s
Iteration  16: 1304431.148 ops/s
Iteration  17: 1282185.142 ops/s
Iteration  18: 1339641.006 ops/s
Iteration  19: 1339175.689 ops/s
Iteration  20: 1256156.709 ops/s
Iteration  21: 1338729.518 ops/s
Iteration  22: 1296671.524 ops/s
Iteration  23: 1324018.565 ops/s
Iteration  24: 1284965.873 ops/s
Iteration  25: 1295423.342 ops/s
Iteration  26: 1328431.889 ops/s
Iteration  27: 1274001.745 ops/s
Iteration  28: 1282243.425 ops/s
Iteration  29: 1363700.100 ops/s
Iteration  30: 1268737.631 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_shouldDisposeInnerObservable":
  1298174.317 ±(99.9%) 18230.046 ops/s [Average]
  (min, avg, max) = (1256156.709, 1298174.317, 1363700.100), stdev = 27285.876
  CI (99.9%): [1279944.271, 1316404.363] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableRepeatTest._Benchmark.benchmark_shouldDisposeInnerObservable  thrpt   30  1298174.317 ± 18230.046  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.696 ops/s
# Warmup Iteration   2: 20613.389 ops/s
# Warmup Iteration   3: 78053.754 ops/s
# Warmup Iteration   4: 104389.461 ops/s
# Warmup Iteration   5: 122538.553 ops/s
# Warmup Iteration   6: 127747.226 ops/s
# Warmup Iteration   7: 261045.125 ops/s
# Warmup Iteration   8: 269029.166 ops/s
# Warmup Iteration   9: 268804.992 ops/s
# Warmup Iteration  10: 278993.249 ops/s
# Warmup Iteration  11: 275978.901 ops/s
# Warmup Iteration  12: 257575.620 ops/s
# Warmup Iteration  13: 276424.774 ops/s
# Warmup Iteration  14: 276513.879 ops/s
# Warmup Iteration  15: 287198.236 ops/s
# Warmup Iteration  16: 292186.600 ops/s
# Warmup Iteration  17: 280879.475 ops/s
# Warmup Iteration  18: 286050.970 ops/s
# Warmup Iteration  19: 293634.222 ops/s
# Warmup Iteration  20: 281025.679 ops/s
# Warmup Iteration  21: 289299.004 ops/s
# Warmup Iteration  22: 279741.662 ops/s
# Warmup Iteration  23: 285387.087 ops/s
# Warmup Iteration  24: 284487.709 ops/s
# Warmup Iteration  25: 292366.271 ops/s
# Warmup Iteration  26: 285024.913 ops/s
# Warmup Iteration  27: 284792.581 ops/s
# Warmup Iteration  28: 266626.257 ops/s
# Warmup Iteration  29: 292562.709 ops/s
# Warmup Iteration  30: 298382.912 ops/s
Iteration   1: 295804.071 ops/s
Iteration   2: 281675.182 ops/s
Iteration   3: 289556.218 ops/s
Iteration   4: 297121.129 ops/s
Iteration   5: 280393.263 ops/s
Iteration   6: 296515.724 ops/s
Iteration   7: 290951.372 ops/s
Iteration   8: 277620.300 ops/s
Iteration   9: 282068.123 ops/s
Iteration  10: 278124.490 ops/s
Iteration  11: 294509.223 ops/s
Iteration  12: 287409.357 ops/s
Iteration  13: 289302.562 ops/s
Iteration  14: 292365.008 ops/s
Iteration  15: 299695.698 ops/s
Iteration  16: 276151.464 ops/s
Iteration  17: 297951.056 ops/s
Iteration  18: 294615.278 ops/s
Iteration  19: 284685.345 ops/s
Iteration  20: 300835.329 ops/s
Iteration  21: 281483.851 ops/s
Iteration  22: 293770.617 ops/s
Iteration  23: 284702.817 ops/s
Iteration  24: 289270.957 ops/s
Iteration  25: 301573.816 ops/s
Iteration  26: 292465.996 ops/s
Iteration  27: 291687.622 ops/s
Iteration  28: 296312.937 ops/s
Iteration  29: 282185.513 ops/s
Iteration  30: 293073.770 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_doubleOnSubscribe":
  289795.936 ±(99.9%) 4905.158 ops/s [Average]
  (min, avg, max) = (276151.464, 289795.936, 301573.816), stdev = 7341.810
  CI (99.9%): [284890.778, 294701.094] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  289795.936 ± 4905.158  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_disposedOnCall$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_disposedOnCall

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1907622.796 ops/s
# Warmup Iteration   2: 5386937.657 ops/s
# Warmup Iteration   3: 7396478.327 ops/s
# Warmup Iteration   4: 7713531.529 ops/s
# Warmup Iteration   5: 8092840.436 ops/s
# Warmup Iteration   6: 7453583.372 ops/s
# Warmup Iteration   7: 7827819.705 ops/s
# Warmup Iteration   8: 6373289.273 ops/s
# Warmup Iteration   9: 7815709.413 ops/s
# Warmup Iteration  10: 7697184.211 ops/s
# Warmup Iteration  11: 7945162.246 ops/s
# Warmup Iteration  12: 7761263.400 ops/s
# Warmup Iteration  13: 7604443.718 ops/s
# Warmup Iteration  14: 7967986.814 ops/s
# Warmup Iteration  15: 7562296.764 ops/s
# Warmup Iteration  16: 8104395.861 ops/s
# Warmup Iteration  17: 7953524.398 ops/s
# Warmup Iteration  18: 7663585.214 ops/s
# Warmup Iteration  19: 8020340.032 ops/s
# Warmup Iteration  20: 7666554.057 ops/s
# Warmup Iteration  21: 7872061.274 ops/s
# Warmup Iteration  22: 7764178.895 ops/s
# Warmup Iteration  23: 7468038.529 ops/s
# Warmup Iteration  24: 8078947.710 ops/s
# Warmup Iteration  25: 7958928.199 ops/s
# Warmup Iteration  26: 7816728.082 ops/s
# Warmup Iteration  27: 7534109.439 ops/s
# Warmup Iteration  28: 8038433.203 ops/s
# Warmup Iteration  29: 7632264.520 ops/s
# Warmup Iteration  30: 7641368.508 ops/s
Iteration   1: 7567936.666 ops/s
Iteration   2: 7822483.265 ops/s
Iteration   3: 7979393.304 ops/s
Iteration   4: 7747031.758 ops/s
Iteration   5: 7661484.683 ops/s
Iteration   6: 7898349.651 ops/s
Iteration   7: 7702834.463 ops/s
Iteration   8: 7912569.390 ops/s
Iteration   9: 8068184.479 ops/s
Iteration  10: 7586022.587 ops/s
Iteration  11: 7978188.648 ops/s
Iteration  12: 7554002.870 ops/s
Iteration  13: 7873394.735 ops/s
Iteration  14: 7518102.599 ops/s
Iteration  15: 7493638.966 ops/s
Iteration  16: 7980934.683 ops/s
Iteration  17: 7561632.899 ops/s
Iteration  18: 7805682.859 ops/s
Iteration  19: 8054829.767 ops/s
Iteration  20: 7931919.437 ops/s
Iteration  21: 7617904.294 ops/s
Iteration  22: 8175506.999 ops/s
Iteration  23: 7555245.610 ops/s
Iteration  24: 7906562.607 ops/s
Iteration  25: 7922976.386 ops/s
Iteration  26: 7488237.582 ops/s
Iteration  27: 7985065.787 ops/s
Iteration  28: 7617234.178 ops/s
Iteration  29: 7555627.894 ops/s
Iteration  30: 8185978.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_disposedOnCall":
  7790298.578 ±(99.9%) 143197.701 ops/s [Average]
  (min, avg, max) = (7488237.582, 7790298.578, 8185978.288), stdev = 214331.594
  CI (99.9%): [7647100.877, 7933496.279] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
ObservableFromCallableTest._Benchmark.benchmark_disposedOnCall  thrpt   30  7790298.578 ± 143197.701  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_disposedOnCall$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_disposedOnCall

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2730859.933 ops/s
# Warmup Iteration   2: 5462019.675 ops/s
# Warmup Iteration   3: 7669049.252 ops/s
# Warmup Iteration   4: 7983960.117 ops/s
# Warmup Iteration   5: 7628647.296 ops/s
# Warmup Iteration   6: 7790217.574 ops/s
# Warmup Iteration   7: 7910699.194 ops/s
# Warmup Iteration   8: 7432320.989 ops/s
# Warmup Iteration   9: 7942860.528 ops/s
# Warmup Iteration  10: 7662154.690 ops/s
# Warmup Iteration  11: 7396067.445 ops/s
# Warmup Iteration  12: 8016700.056 ops/s
# Warmup Iteration  13: 7709684.853 ops/s
# Warmup Iteration  14: 8011531.332 ops/s
# Warmup Iteration  15: 7517850.282 ops/s
# Warmup Iteration  16: 7966587.613 ops/s
# Warmup Iteration  17: 7554965.396 ops/s
# Warmup Iteration  18: 7977420.702 ops/s
# Warmup Iteration  19: 7772868.815 ops/s
# Warmup Iteration  20: 7667866.737 ops/s
# Warmup Iteration  21: 8058823.259 ops/s
# Warmup Iteration  22: 7585559.443 ops/s
# Warmup Iteration  23: 7861873.866 ops/s
# Warmup Iteration  24: 7682825.534 ops/s
# Warmup Iteration  25: 7789792.843 ops/s
# Warmup Iteration  26: 7930776.911 ops/s
# Warmup Iteration  27: 7575424.723 ops/s
# Warmup Iteration  28: 8057212.634 ops/s
# Warmup Iteration  29: 7622376.516 ops/s
# Warmup Iteration  30: 7578360.157 ops/s
Iteration   1: 8071048.957 ops/s
Iteration   2: 7530540.211 ops/s
Iteration   3: 7604928.485 ops/s
Iteration   4: 7986759.813 ops/s
Iteration   5: 7938475.145 ops/s
Iteration   6: 7648255.819 ops/s
Iteration   7: 8004106.649 ops/s
Iteration   8: 7556962.357 ops/s
Iteration   9: 7981594.384 ops/s
Iteration  10: 7722381.192 ops/s
Iteration  11: 7631006.600 ops/s
Iteration  12: 7622492.031 ops/s
Iteration  13: 7763644.420 ops/s
Iteration  14: 8007520.083 ops/s
Iteration  15: 7927545.779 ops/s
Iteration  16: 8129769.063 ops/s
Iteration  17: 7641864.612 ops/s
Iteration  18: 7437620.737 ops/s
Iteration  19: 7801298.901 ops/s
Iteration  20: 7963717.197 ops/s
Iteration  21: 7806840.463 ops/s
Iteration  22: 7734889.475 ops/s
Iteration  23: 7713312.865 ops/s
Iteration  24: 7975446.576 ops/s
Iteration  25: 7562635.033 ops/s
Iteration  26: 7932704.563 ops/s
Iteration  27: 7772716.869 ops/s
Iteration  28: 7604722.133 ops/s
Iteration  29: 7883261.709 ops/s
Iteration  30: 7495268.912 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_disposedOnCall":
  7781777.701 ±(99.9%) 127659.847 ops/s [Average]
  (min, avg, max) = (7437620.737, 7781777.701, 8129769.063), stdev = 191075.264
  CI (99.9%): [7654117.854, 7909437.548] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
ObservableFromSupplierTest._Benchmark.benchmark_disposedOnCall  thrpt   30  7781777.701 ± 127659.847  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_normalMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_normalMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 994520.909 ops/s
# Warmup Iteration   2: 3933564.648 ops/s
# Warmup Iteration   3: 3682973.839 ops/s
# Warmup Iteration   4: 5197900.251 ops/s
# Warmup Iteration   5: 5535381.144 ops/s
# Warmup Iteration   6: 5117706.733 ops/s
# Warmup Iteration   7: 5367504.691 ops/s
# Warmup Iteration   8: 5536320.909 ops/s
# Warmup Iteration   9: 5285115.233 ops/s
# Warmup Iteration  10: 5251248.688 ops/s
# Warmup Iteration  11: 5181982.511 ops/s
# Warmup Iteration  12: 5579911.013 ops/s
# Warmup Iteration  13: 5202914.518 ops/s
# Warmup Iteration  14: 5630410.928 ops/s
# Warmup Iteration  15: 5278406.388 ops/s
# Warmup Iteration  16: 5366240.083 ops/s
# Warmup Iteration  17: 5443293.102 ops/s
# Warmup Iteration  18: 5389092.035 ops/s
# Warmup Iteration  19: 5517117.794 ops/s
# Warmup Iteration  20: 5349905.079 ops/s
# Warmup Iteration  21: 5521991.042 ops/s
# Warmup Iteration  22: 5462203.881 ops/s
# Warmup Iteration  23: 5281100.323 ops/s
# Warmup Iteration  24: 5602885.392 ops/s
# Warmup Iteration  25: 5644805.765 ops/s
# Warmup Iteration  26: 5230417.565 ops/s
# Warmup Iteration  27: 5381835.436 ops/s
# Warmup Iteration  28: 5721354.675 ops/s
# Warmup Iteration  29: 5264453.930 ops/s
# Warmup Iteration  30: 5458084.457 ops/s
Iteration   1: 5523501.450 ops/s
Iteration   2: 5167142.874 ops/s
Iteration   3: 5480812.722 ops/s
Iteration   4: 5339655.693 ops/s
Iteration   5: 5342984.135 ops/s
Iteration   6: 5529155.047 ops/s
Iteration   7: 5341209.087 ops/s
Iteration   8: 5406167.044 ops/s
Iteration   9: 5551613.374 ops/s
Iteration  10: 5328250.800 ops/s
Iteration  11: 5499492.852 ops/s
Iteration  12: 5568053.224 ops/s
Iteration  13: 5273809.213 ops/s
Iteration  14: 5498529.994 ops/s
Iteration  15: 5497296.951 ops/s
Iteration  16: 5169666.263 ops/s
Iteration  17: 5601957.646 ops/s
Iteration  18: 5231145.789 ops/s
Iteration  19: 5534287.820 ops/s
Iteration  20: 5272164.325 ops/s
Iteration  21: 5281845.405 ops/s
Iteration  22: 5559538.195 ops/s
Iteration  23: 5628516.575 ops/s
Iteration  24: 5441846.908 ops/s
Iteration  25: 5258277.401 ops/s
Iteration  26: 5499653.458 ops/s
Iteration  27: 5315823.904 ops/s
Iteration  28: 5415635.325 ops/s
Iteration  29: 5641706.493 ops/s
Iteration  30: 5300654.009 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_normalMaybe":
  5416679.799 ±(99.9%) 92164.048 ops/s [Average]
  (min, avg, max) = (5167142.874, 5416679.799, 5641706.493), stdev = 137946.818
  CI (99.9%): [5324515.752, 5508843.847] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_normalMaybe  thrpt   30  5416679.799 ± 92164.048  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 758410.705 ops/s
# Warmup Iteration   2: 2972092.122 ops/s
# Warmup Iteration   3: 4367049.171 ops/s
# Warmup Iteration   4: 4742986.393 ops/s
# Warmup Iteration   5: 4873528.292 ops/s
# Warmup Iteration   6: 4598907.296 ops/s
# Warmup Iteration   7: 4835558.881 ops/s
# Warmup Iteration   8: 4770706.874 ops/s
# Warmup Iteration   9: 4724362.839 ops/s
# Warmup Iteration  10: 5043253.965 ops/s
# Warmup Iteration  11: 4816513.154 ops/s
# Warmup Iteration  12: 4979804.320 ops/s
# Warmup Iteration  13: 4816172.425 ops/s
# Warmup Iteration  14: 4864719.474 ops/s
# Warmup Iteration  15: 4764579.212 ops/s
# Warmup Iteration  16: 4879399.585 ops/s
# Warmup Iteration  17: 4928117.903 ops/s
# Warmup Iteration  18: 4884317.458 ops/s
# Warmup Iteration  19: 4584642.221 ops/s
# Warmup Iteration  20: 4975115.272 ops/s
# Warmup Iteration  21: 4721275.473 ops/s
# Warmup Iteration  22: 4891657.128 ops/s
# Warmup Iteration  23: 4798088.596 ops/s
# Warmup Iteration  24: 4794201.448 ops/s
# Warmup Iteration  25: 4973829.750 ops/s
# Warmup Iteration  26: 4866603.317 ops/s
# Warmup Iteration  27: 5158902.130 ops/s
# Warmup Iteration  28: 5105935.755 ops/s
# Warmup Iteration  29: 4786170.050 ops/s
# Warmup Iteration  30: 4927737.695 ops/s
Iteration   1: 4734959.472 ops/s
Iteration   2: 4905685.764 ops/s
Iteration   3: 5120329.101 ops/s
Iteration   4: 4868729.417 ops/s
Iteration   5: 4660519.638 ops/s
Iteration   6: 4749163.826 ops/s
Iteration   7: 4906973.555 ops/s
Iteration   8: 4899304.240 ops/s
Iteration   9: 5155849.978 ops/s
Iteration  10: 4997646.995 ops/s
Iteration  11: 5136944.383 ops/s
Iteration  12: 4784634.965 ops/s
Iteration  13: 5321128.435 ops/s
Iteration  14: 5023835.325 ops/s
Iteration  15: 4767110.919 ops/s
Iteration  16: 5479262.815 ops/s
Iteration  17: 4782528.077 ops/s
Iteration  18: 4771220.494 ops/s
Iteration  19: 5474089.854 ops/s
Iteration  20: 5138912.457 ops/s
Iteration  21: 5312879.686 ops/s
Iteration  22: 5127962.491 ops/s
Iteration  23: 5561202.421 ops/s
Iteration  24: 4886806.188 ops/s
Iteration  25: 5301617.761 ops/s
Iteration  26: 5099904.278 ops/s
Iteration  27: 5685765.112 ops/s
Iteration  28: 5250577.109 ops/s
Iteration  29: 4469422.945 ops/s
Iteration  30: 5046982.761 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFromCompletionStageTest._Benchmark.benchmark_cancel":
  5047398.349 ±(99.9%) 193037.368 ops/s [Average]
  (min, avg, max) = (4469422.945, 5047398.349, 5685765.112), stdev = 288929.266
  CI (99.9%): [4854360.981, 5240435.717] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
ObservableFromCompletionStageTest._Benchmark.benchmark_cancel  thrpt   30  5047398.349 ± 193037.368  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_interrupt$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_interrupt

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148186.839 ops/s
# Warmup Iteration   2: 490259.735 ops/s
# Warmup Iteration   3: 646101.427 ops/s
# Warmup Iteration   4: 640983.553 ops/s
# Warmup Iteration   5: 650115.463 ops/s
# Warmup Iteration   6: 675231.037 ops/s
# Warmup Iteration   7: 603070.153 ops/s
# Warmup Iteration   8: 636108.166 ops/s
# Warmup Iteration   9: 649337.990 ops/s
# Warmup Iteration  10: 632892.473 ops/s
# Warmup Iteration  11: 662958.508 ops/s
# Warmup Iteration  12: 603612.291 ops/s
# Warmup Iteration  13: 583493.645 ops/s
# Warmup Iteration  14: 537892.034 ops/s
# Warmup Iteration  15: 583439.868 ops/s
# Warmup Iteration  16: 587058.231 ops/s
# Warmup Iteration  17: 566422.987 ops/s
# Warmup Iteration  18: 598241.382 ops/s
# Warmup Iteration  19: 582562.570 ops/s
# Warmup Iteration  20: 586375.873 ops/s
# Warmup Iteration  21: 598504.075 ops/s
# Warmup Iteration  22: 573063.404 ops/s
# Warmup Iteration  23: 591036.324 ops/s
# Warmup Iteration  24: 577853.983 ops/s
# Warmup Iteration  25: 576647.992 ops/s
# Warmup Iteration  26: 581369.282 ops/s
# Warmup Iteration  27: 596782.078 ops/s
# Warmup Iteration  28: 576631.657 ops/s
# Warmup Iteration  29: 604978.339 ops/s
# Warmup Iteration  30: 567558.478 ops/s
Iteration   1: 590419.048 ops/s
Iteration   2: 598797.329 ops/s
Iteration   3: 578613.037 ops/s
Iteration   4: 602302.589 ops/s
Iteration   5: 611249.753 ops/s
Iteration   6: 565531.883 ops/s
Iteration   7: 578272.685 ops/s
Iteration   8: 603507.494 ops/s
Iteration   9: 570822.212 ops/s
Iteration  10: 601749.685 ops/s
Iteration  11: 570442.756 ops/s
Iteration  12: 586476.243 ops/s
Iteration  13: 593447.912 ops/s
Iteration  14: 582768.816 ops/s
Iteration  15: 575789.257 ops/s
Iteration  16: 611280.954 ops/s
Iteration  17: 605402.916 ops/s
Iteration  18: 574742.756 ops/s
Iteration  19: 594862.178 ops/s
Iteration  20: 586695.630 ops/s
Iteration  21: 584221.719 ops/s
Iteration  22: 580074.369 ops/s
Iteration  23: 591881.495 ops/s
Iteration  24: 573800.638 ops/s
Iteration  25: 567422.292 ops/s
Iteration  26: 593301.510 ops/s
Iteration  27: 566469.130 ops/s
Iteration  28: 589727.346 ops/s
Iteration  29: 560179.097 ops/s
Iteration  30: 580367.468 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBlockingTest._Benchmark.benchmark_interrupt":
  585687.340 ±(99.9%) 9407.356 ops/s [Average]
  (min, avg, max) = (560179.097, 585687.340, 611280.954), stdev = 14080.489
  CI (99.9%): [576279.984, 595094.696] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
ObservableBlockingTest._Benchmark.benchmark_interrupt  thrpt   30  585687.340 ± 9407.356  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 262511.505 ops/s
# Warmup Iteration   2: 575590.977 ops/s
# Warmup Iteration   3: 561110.544 ops/s
# Warmup Iteration   4: 668009.805 ops/s
# Warmup Iteration   5: 594797.859 ops/s
# Warmup Iteration   6: 659154.784 ops/s
# Warmup Iteration   7: 688603.321 ops/s
# Warmup Iteration   8: 656362.057 ops/s
# Warmup Iteration   9: 682689.227 ops/s
# Warmup Iteration  10: 698906.780 ops/s
# Warmup Iteration  11: 652485.699 ops/s
# Warmup Iteration  12: 675848.969 ops/s
# Warmup Iteration  13: 671561.178 ops/s
# Warmup Iteration  14: 689082.701 ops/s
# Warmup Iteration  15: 681837.539 ops/s
# Warmup Iteration  16: 655458.216 ops/s
# Warmup Iteration  17: 710691.405 ops/s
# Warmup Iteration  18: 724941.187 ops/s
# Warmup Iteration  19: 689911.997 ops/s
# Warmup Iteration  20: 722024.347 ops/s
# Warmup Iteration  21: 701664.955 ops/s
# Warmup Iteration  22: 693871.135 ops/s
# Warmup Iteration  23: 718453.670 ops/s
# Warmup Iteration  24: 687147.493 ops/s
# Warmup Iteration  25: 721142.449 ops/s
# Warmup Iteration  26: 713347.776 ops/s
# Warmup Iteration  27: 682928.344 ops/s
# Warmup Iteration  28: 708579.111 ops/s
# Warmup Iteration  29: 752697.857 ops/s
# Warmup Iteration  30: 691391.126 ops/s
Iteration   1: 720491.428 ops/s
Iteration   2: 712958.557 ops/s
Iteration   3: 730568.489 ops/s
Iteration   4: 695406.956 ops/s
Iteration   5: 697079.223 ops/s
Iteration   6: 727410.941 ops/s
Iteration   7: 691252.018 ops/s
Iteration   8: 707599.951 ops/s
Iteration   9: 731102.088 ops/s
Iteration  10: 700689.000 ops/s
Iteration  11: 718778.254 ops/s
Iteration  12: 705766.719 ops/s
Iteration  13: 701181.740 ops/s
Iteration  14: 729617.099 ops/s
Iteration  15: 704151.750 ops/s
Iteration  16: 692188.258 ops/s
Iteration  17: 714876.227 ops/s
Iteration  18: 702329.755 ops/s
Iteration  19: 705400.121 ops/s
Iteration  20: 702476.923 ops/s
Iteration  21: 695342.762 ops/s
Iteration  22: 701942.452 ops/s
Iteration  23: 684926.224 ops/s
Iteration  24: 588999.955 ops/s
Iteration  25: 693458.068 ops/s
Iteration  26: 673786.205 ops/s
Iteration  27: 724629.932 ops/s
Iteration  28: 665563.416 ops/s
Iteration  29: 717457.875 ops/s
Iteration  30: 705542.138 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_otherError":
  701432.484 ±(99.9%) 17711.477 ops/s [Average]
  (min, avg, max) = (588999.955, 701432.484, 731102.088), stdev = 26509.707
  CI (99.9%): [683721.007, 719143.961] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_otherError  thrpt   30  701432.484 ± 17711.477  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1683671.943 ops/s
# Warmup Iteration   2: 4553415.588 ops/s
# Warmup Iteration   3: 6846812.511 ops/s
# Warmup Iteration   4: 6516289.691 ops/s
# Warmup Iteration   5: 6664400.055 ops/s
# Warmup Iteration   6: 6891350.298 ops/s
# Warmup Iteration   7: 6449003.261 ops/s
# Warmup Iteration   8: 6659023.517 ops/s
# Warmup Iteration   9: 6773466.078 ops/s
# Warmup Iteration  10: 6572207.687 ops/s
# Warmup Iteration  11: 6817397.881 ops/s
# Warmup Iteration  12: 6573993.624 ops/s
# Warmup Iteration  13: 6743158.184 ops/s
# Warmup Iteration  14: 6883280.757 ops/s
# Warmup Iteration  15: 6673336.932 ops/s
# Warmup Iteration  16: 6676952.676 ops/s
# Warmup Iteration  17: 6923669.914 ops/s
# Warmup Iteration  18: 6640595.832 ops/s
# Warmup Iteration  19: 7014008.307 ops/s
# Warmup Iteration  20: 6694921.945 ops/s
# Warmup Iteration  21: 6839200.299 ops/s
# Warmup Iteration  22: 6702438.301 ops/s
# Warmup Iteration  23: 6782042.235 ops/s
# Warmup Iteration  24: 6570822.264 ops/s
# Warmup Iteration  25: 6798979.235 ops/s
# Warmup Iteration  26: 6932687.210 ops/s
# Warmup Iteration  27: 6727463.752 ops/s
# Warmup Iteration  28: 6883067.720 ops/s
# Warmup Iteration  29: 6844939.910 ops/s
# Warmup Iteration  30: 6614467.566 ops/s
Iteration   1: 6613958.867 ops/s
Iteration   2: 6815043.301 ops/s
Iteration   3: 6668480.710 ops/s
Iteration   4: 6819251.273 ops/s
Iteration   5: 6997556.601 ops/s
Iteration   6: 6592107.840 ops/s
Iteration   7: 6928097.962 ops/s
Iteration   8: 6666982.809 ops/s
Iteration   9: 6721019.377 ops/s
Iteration  10: 7121701.457 ops/s
Iteration  11: 6280765.589 ops/s
Iteration  12: 6925197.450 ops/s
Iteration  13: 6569268.266 ops/s
Iteration  14: 6646560.180 ops/s
Iteration  15: 6639033.100 ops/s
Iteration  16: 6842675.181 ops/s
Iteration  17: 6625885.032 ops/s
Iteration  18: 6723789.969 ops/s
Iteration  19: 7064672.662 ops/s
Iteration  20: 6872352.116 ops/s
Iteration  21: 6822311.478 ops/s
Iteration  22: 6790600.659 ops/s
Iteration  23: 6764204.581 ops/s
Iteration  24: 6825220.485 ops/s
Iteration  25: 6724087.129 ops/s
Iteration  26: 6903449.220 ops/s
Iteration  27: 6766240.428 ops/s
Iteration  28: 6687818.437 ops/s
Iteration  29: 6868487.552 ops/s
Iteration  30: 6667139.604 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_dispose":
  6765131.977 ±(99.9%) 110852.939 ops/s [Average]
  (min, avg, max) = (6280765.589, 6765131.977, 7121701.457), stdev = 165919.473
  CI (99.9%): [6654279.038, 6875984.916] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                     Mode  Cnt        Score        Error  Units
MaybeUsingTest._Benchmark.benchmark_dispose  thrpt   30  6765131.977 ± 110852.939  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_secondError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_secondError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 253470.325 ops/s
# Warmup Iteration   2: 521353.003 ops/s
# Warmup Iteration   3: 652846.870 ops/s
# Warmup Iteration   4: 616077.500 ops/s
# Warmup Iteration   5: 663036.453 ops/s
# Warmup Iteration   6: 649260.200 ops/s
# Warmup Iteration   7: 623798.103 ops/s
# Warmup Iteration   8: 657637.250 ops/s
# Warmup Iteration   9: 646430.136 ops/s
# Warmup Iteration  10: 630064.141 ops/s
# Warmup Iteration  11: 624427.630 ops/s
# Warmup Iteration  12: 649814.261 ops/s
# Warmup Iteration  13: 638286.646 ops/s
# Warmup Iteration  14: 645167.391 ops/s
# Warmup Iteration  15: 613351.681 ops/s
# Warmup Iteration  16: 655779.825 ops/s
# Warmup Iteration  17: 670239.212 ops/s
# Warmup Iteration  18: 648269.996 ops/s
# Warmup Iteration  19: 642904.664 ops/s
# Warmup Iteration  20: 707444.727 ops/s
# Warmup Iteration  21: 676836.803 ops/s
# Warmup Iteration  22: 701762.751 ops/s
# Warmup Iteration  23: 710232.564 ops/s
# Warmup Iteration  24: 685397.930 ops/s
# Warmup Iteration  25: 686957.802 ops/s
# Warmup Iteration  26: 663258.095 ops/s
# Warmup Iteration  27: 699634.453 ops/s
# Warmup Iteration  28: 668742.467 ops/s
# Warmup Iteration  29: 673951.929 ops/s
# Warmup Iteration  30: 697977.121 ops/s
Iteration   1: 673543.148 ops/s
Iteration   2: 663701.556 ops/s
Iteration   3: 704820.795 ops/s
Iteration   4: 660506.415 ops/s
Iteration   5: 702988.353 ops/s
Iteration   6: 665044.968 ops/s
Iteration   7: 701404.334 ops/s
Iteration   8: 677326.788 ops/s
Iteration   9: 685134.674 ops/s
Iteration  10: 684338.698 ops/s
Iteration  11: 689267.352 ops/s
Iteration  12: 693980.945 ops/s
Iteration  13: 642094.996 ops/s
Iteration  14: 681281.022 ops/s
Iteration  15: 691449.241 ops/s
Iteration  16: 679107.450 ops/s
Iteration  17: 686104.860 ops/s
Iteration  18: 672414.452 ops/s
Iteration  19: 561368.763 ops/s
Iteration  20: 687323.389 ops/s
Iteration  21: 663610.814 ops/s
Iteration  22: 694800.710 ops/s
Iteration  23: 683428.299 ops/s
Iteration  24: 679541.084 ops/s
Iteration  25: 666546.043 ops/s
Iteration  26: 720686.991 ops/s
Iteration  27: 636466.346 ops/s
Iteration  28: 712626.176 ops/s
Iteration  29: 703476.199 ops/s
Iteration  30: 678647.580 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_secondError":
  678101.081 ±(99.9%) 19371.689 ops/s [Average]
  (min, avg, max) = (561368.763, 678101.081, 720686.991), stdev = 28994.635
  CI (99.9%): [658729.392, 697472.771] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
MaybeZipIterableTest._Benchmark.benchmark_secondError  thrpt   30  678101.081 ± 19371.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_secondError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_secondError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162732.768 ops/s
# Warmup Iteration   2: 613307.526 ops/s
# Warmup Iteration   3: 631113.036 ops/s
# Warmup Iteration   4: 606608.723 ops/s
# Warmup Iteration   5: 636896.342 ops/s
# Warmup Iteration   6: 643249.743 ops/s
# Warmup Iteration   7: 590876.700 ops/s
# Warmup Iteration   8: 632609.715 ops/s
# Warmup Iteration   9: 619757.666 ops/s
# Warmup Iteration  10: 640541.857 ops/s
# Warmup Iteration  11: 638432.604 ops/s
# Warmup Iteration  12: 611648.395 ops/s
# Warmup Iteration  13: 631238.570 ops/s
# Warmup Iteration  14: 618173.961 ops/s
# Warmup Iteration  15: 633507.787 ops/s
# Warmup Iteration  16: 594546.854 ops/s
# Warmup Iteration  17: 641556.388 ops/s
# Warmup Iteration  18: 677623.329 ops/s
# Warmup Iteration  19: 647569.715 ops/s
# Warmup Iteration  20: 653227.267 ops/s
# Warmup Iteration  21: 669641.830 ops/s
# Warmup Iteration  22: 664189.126 ops/s
# Warmup Iteration  23: 688717.644 ops/s
# Warmup Iteration  24: 664450.803 ops/s
# Warmup Iteration  25: 659989.797 ops/s
# Warmup Iteration  26: 678241.981 ops/s
# Warmup Iteration  27: 638911.252 ops/s
# Warmup Iteration  28: 674044.527 ops/s
# Warmup Iteration  29: 687007.065 ops/s
# Warmup Iteration  30: 651602.664 ops/s
Iteration   1: 667468.915 ops/s
Iteration   2: 692591.255 ops/s
Iteration   3: 657241.698 ops/s
Iteration   4: 671920.795 ops/s
Iteration   5: 668280.805 ops/s
Iteration   6: 683699.160 ops/s
Iteration   7: 642776.663 ops/s
Iteration   8: 699611.124 ops/s
Iteration   9: 639710.055 ops/s
Iteration  10: 686124.889 ops/s
Iteration  11: 663065.549 ops/s
Iteration  12: 711650.184 ops/s
Iteration  13: 675536.476 ops/s
Iteration  14: 681429.884 ops/s
Iteration  15: 672970.194 ops/s
Iteration  16: 693095.597 ops/s
Iteration  17: 644690.417 ops/s
Iteration  18: 666100.211 ops/s
Iteration  19: 666976.193 ops/s
Iteration  20: 650946.466 ops/s
Iteration  21: 673732.058 ops/s
Iteration  22: 660254.696 ops/s
Iteration  23: 697027.705 ops/s
Iteration  24: 646360.392 ops/s
Iteration  25: 666234.818 ops/s
Iteration  26: 682344.716 ops/s
Iteration  27: 671579.420 ops/s
Iteration  28: 651920.484 ops/s
Iteration  29: 697275.390 ops/s
Iteration  30: 665243.591 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_secondError":
  671595.327 ±(99.9%) 12261.765 ops/s [Average]
  (min, avg, max) = (639710.055, 671595.327, 711650.184), stdev = 18352.833
  CI (99.9%): [659333.562, 683857.091] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
MaybeZipArrayTest._Benchmark.benchmark_secondError  thrpt   30  671595.327 ± 12261.765  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_firstError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_firstError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 123415.612 ops/s
# Warmup Iteration   2: 495320.884 ops/s
# Warmup Iteration   3: 584384.351 ops/s
# Warmup Iteration   4: 556614.935 ops/s
# Warmup Iteration   5: 618672.111 ops/s
# Warmup Iteration   6: 579097.736 ops/s
# Warmup Iteration   7: 648992.133 ops/s
# Warmup Iteration   8: 651060.548 ops/s
# Warmup Iteration   9: 639208.178 ops/s
# Warmup Iteration  10: 634399.807 ops/s
# Warmup Iteration  11: 638463.238 ops/s
# Warmup Iteration  12: 661255.127 ops/s
# Warmup Iteration  13: 634490.474 ops/s
# Warmup Iteration  14: 656768.757 ops/s
# Warmup Iteration  15: 622620.466 ops/s
# Warmup Iteration  16: 657760.972 ops/s
# Warmup Iteration  17: 668345.643 ops/s
# Warmup Iteration  18: 664118.556 ops/s
# Warmup Iteration  19: 688830.683 ops/s
# Warmup Iteration  20: 680605.474 ops/s
# Warmup Iteration  21: 671027.751 ops/s
# Warmup Iteration  22: 691021.352 ops/s
# Warmup Iteration  23: 666755.046 ops/s
# Warmup Iteration  24: 685860.006 ops/s
# Warmup Iteration  25: 665040.098 ops/s
# Warmup Iteration  26: 681881.772 ops/s
# Warmup Iteration  27: 673807.706 ops/s
# Warmup Iteration  28: 658231.923 ops/s
# Warmup Iteration  29: 698776.974 ops/s
# Warmup Iteration  30: 662886.749 ops/s
Iteration   1: 697108.413 ops/s
Iteration   2: 663435.672 ops/s
Iteration   3: 692961.289 ops/s
Iteration   4: 664134.140 ops/s
Iteration   5: 679009.061 ops/s
Iteration   6: 705509.276 ops/s
Iteration   7: 662413.469 ops/s
Iteration   8: 674777.592 ops/s
Iteration   9: 685857.329 ops/s
Iteration  10: 667110.352 ops/s
Iteration  11: 667606.366 ops/s
Iteration  12: 677544.487 ops/s
Iteration  13: 615351.488 ops/s
Iteration  14: 638807.634 ops/s
Iteration  15: 670861.959 ops/s
Iteration  16: 655133.032 ops/s
Iteration  17: 711490.732 ops/s
Iteration  18: 651205.261 ops/s
Iteration  19: 676107.715 ops/s
Iteration  20: 680457.030 ops/s
Iteration  21: 675264.279 ops/s
Iteration  22: 659398.427 ops/s
Iteration  23: 694769.649 ops/s
Iteration  24: 668141.634 ops/s
Iteration  25: 689010.250 ops/s
Iteration  26: 660034.302 ops/s
Iteration  27: 674581.540 ops/s
Iteration  28: 691385.637 ops/s
Iteration  29: 669067.669 ops/s
Iteration  30: 664846.754 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipIterableTest._Benchmark.benchmark_firstError":
  672779.415 ±(99.9%) 12999.590 ops/s [Average]
  (min, avg, max) = (615351.488, 672779.415, 711490.732), stdev = 19457.175
  CI (99.9%): [659779.825, 685779.004] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
MaybeZipIterableTest._Benchmark.benchmark_firstError  thrpt   30  672779.415 ± 12999.590  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 184560.923 ops/s
# Warmup Iteration   2: 589801.082 ops/s
# Warmup Iteration   3: 669803.578 ops/s
# Warmup Iteration   4: 674769.666 ops/s
# Warmup Iteration   5: 607232.631 ops/s
# Warmup Iteration   6: 709617.875 ops/s
# Warmup Iteration   7: 681602.903 ops/s
# Warmup Iteration   8: 698646.896 ops/s
# Warmup Iteration   9: 736158.032 ops/s
# Warmup Iteration  10: 700153.187 ops/s
# Warmup Iteration  11: 693341.575 ops/s
# Warmup Iteration  12: 710467.673 ops/s
# Warmup Iteration  13: 701253.633 ops/s
# Warmup Iteration  14: 745184.859 ops/s
# Warmup Iteration  15: 694703.077 ops/s
# Warmup Iteration  16: 729292.009 ops/s
# Warmup Iteration  17: 775599.679 ops/s
# Warmup Iteration  18: 749361.972 ops/s
# Warmup Iteration  19: 772939.715 ops/s
# Warmup Iteration  20: 718363.892 ops/s
# Warmup Iteration  21: 753226.276 ops/s
# Warmup Iteration  22: 769415.383 ops/s
# Warmup Iteration  23: 710079.896 ops/s
# Warmup Iteration  24: 762063.701 ops/s
# Warmup Iteration  25: 791207.371 ops/s
# Warmup Iteration  26: 733981.237 ops/s
# Warmup Iteration  27: 765103.505 ops/s
# Warmup Iteration  28: 768927.095 ops/s
# Warmup Iteration  29: 724833.174 ops/s
# Warmup Iteration  30: 781523.934 ops/s
Iteration   1: 747607.933 ops/s
Iteration   2: 750777.538 ops/s
Iteration   3: 779599.195 ops/s
Iteration   4: 726058.683 ops/s
Iteration   5: 739921.414 ops/s
Iteration   6: 758592.663 ops/s
Iteration   7: 761932.566 ops/s
Iteration   8: 740772.480 ops/s
Iteration   9: 748142.909 ops/s
Iteration  10: 789233.242 ops/s
Iteration  11: 713231.564 ops/s
Iteration  12: 747546.120 ops/s
Iteration  13: 738364.141 ops/s
Iteration  14: 752213.247 ops/s
Iteration  15: 740998.375 ops/s
Iteration  16: 754511.640 ops/s
Iteration  17: 723610.462 ops/s
Iteration  18: 782416.468 ops/s
Iteration  19: 733518.136 ops/s
Iteration  20: 750693.258 ops/s
Iteration  21: 767526.553 ops/s
Iteration  22: 727803.488 ops/s
Iteration  23: 762389.933 ops/s
Iteration  24: 709253.256 ops/s
Iteration  25: 754873.803 ops/s
Iteration  26: 710032.244 ops/s
Iteration  27: 732622.757 ops/s
Iteration  28: 746027.503 ops/s
Iteration  29: 764974.810 ops/s
Iteration  30: 721064.872 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_error":
  745877.042 ±(99.9%) 13660.936 ops/s [Average]
  (min, avg, max) = (709253.256, 745877.042, 789233.242), stdev = 20447.047
  CI (99.9%): [732216.106, 759537.977] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeSwitchIfEmptyTest._Benchmark.benchmark_error  thrpt   30  745877.042 ± 13660.936  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_doubleOnSubscribeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_doubleOnSubscribeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 64281.288 ops/s
# Warmup Iteration   2: 418358.622 ops/s
# Warmup Iteration   3: 487180.075 ops/s
# Warmup Iteration   4: 465115.294 ops/s
# Warmup Iteration   5: 493884.289 ops/s
# Warmup Iteration   6: 463617.036 ops/s
# Warmup Iteration   7: 467584.553 ops/s
# Warmup Iteration   8: 484926.490 ops/s
# Warmup Iteration   9: 455762.827 ops/s
# Warmup Iteration  10: 496475.907 ops/s
# Warmup Iteration  11: 481613.650 ops/s
# Warmup Iteration  12: 475386.649 ops/s
# Warmup Iteration  13: 504926.331 ops/s
# Warmup Iteration  14: 472990.426 ops/s
# Warmup Iteration  15: 491547.069 ops/s
# Warmup Iteration  16: 479500.080 ops/s
# Warmup Iteration  17: 515802.393 ops/s
# Warmup Iteration  18: 487671.197 ops/s
# Warmup Iteration  19: 515404.609 ops/s
# Warmup Iteration  20: 494327.971 ops/s
# Warmup Iteration  21: 494807.900 ops/s
# Warmup Iteration  22: 517587.185 ops/s
# Warmup Iteration  23: 486659.399 ops/s
# Warmup Iteration  24: 495401.371 ops/s
# Warmup Iteration  25: 512733.755 ops/s
# Warmup Iteration  26: 489429.964 ops/s
# Warmup Iteration  27: 510959.991 ops/s
# Warmup Iteration  28: 488825.469 ops/s
# Warmup Iteration  29: 504596.721 ops/s
# Warmup Iteration  30: 516328.220 ops/s
Iteration   1: 476902.394 ops/s
Iteration   2: 483215.155 ops/s
Iteration   3: 510866.010 ops/s
Iteration   4: 490569.763 ops/s
Iteration   5: 502920.060 ops/s
Iteration   6: 495822.303 ops/s
Iteration   7: 504432.628 ops/s
Iteration   8: 410179.040 ops/s
Iteration   9: 498614.659 ops/s
Iteration  10: 509167.913 ops/s
Iteration  11: 495458.642 ops/s
Iteration  12: 513438.496 ops/s
Iteration  13: 486013.100 ops/s
Iteration  14: 505727.385 ops/s
Iteration  15: 496754.120 ops/s
Iteration  16: 511088.635 ops/s
Iteration  17: 487174.730 ops/s
Iteration  18: 513763.559 ops/s
Iteration  19: 488704.977 ops/s
Iteration  20: 503077.124 ops/s
Iteration  21: 490599.317 ops/s
Iteration  22: 495755.127 ops/s
Iteration  23: 514485.296 ops/s
Iteration  24: 500131.785 ops/s
Iteration  25: 488097.525 ops/s
Iteration  26: 522574.368 ops/s
Iteration  27: 514413.349 ops/s
Iteration  28: 490022.237 ops/s
Iteration  29: 515281.435 ops/s
Iteration  30: 493351.788 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithMaybeTest._Benchmark.benchmark_doubleOnSubscribeMain":
  496953.431 ±(99.9%) 13333.329 ops/s [Average]
  (min, avg, max) = (410179.040, 496953.431, 522574.368), stdev = 19956.700
  CI (99.9%): [483620.102, 510286.759] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ObservableMergeWithMaybeTest._Benchmark.benchmark_doubleOnSubscribeMain  thrpt   30  496953.431 ± 13333.329  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_firstError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_firstError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 205349.674 ops/s
# Warmup Iteration   2: 492251.846 ops/s
# Warmup Iteration   3: 662273.199 ops/s
# Warmup Iteration   4: 622217.117 ops/s
# Warmup Iteration   5: 645920.322 ops/s
# Warmup Iteration   6: 621976.566 ops/s
# Warmup Iteration   7: 634845.811 ops/s
# Warmup Iteration   8: 627455.142 ops/s
# Warmup Iteration   9: 626481.772 ops/s
# Warmup Iteration  10: 663724.245 ops/s
# Warmup Iteration  11: 610284.093 ops/s
# Warmup Iteration  12: 623112.087 ops/s
# Warmup Iteration  13: 631472.746 ops/s
# Warmup Iteration  14: 679073.262 ops/s
# Warmup Iteration  15: 613599.726 ops/s
# Warmup Iteration  16: 638517.545 ops/s
# Warmup Iteration  17: 668760.156 ops/s
# Warmup Iteration  18: 673141.541 ops/s
# Warmup Iteration  19: 692899.902 ops/s
# Warmup Iteration  20: 636839.953 ops/s
# Warmup Iteration  21: 663587.478 ops/s
# Warmup Iteration  22: 695865.004 ops/s
# Warmup Iteration  23: 657271.229 ops/s
# Warmup Iteration  24: 671924.723 ops/s
# Warmup Iteration  25: 687439.275 ops/s
# Warmup Iteration  26: 645841.804 ops/s
# Warmup Iteration  27: 672224.228 ops/s
# Warmup Iteration  28: 691792.456 ops/s
# Warmup Iteration  29: 659275.074 ops/s
# Warmup Iteration  30: 673095.606 ops/s
Iteration   1: 684408.400 ops/s
Iteration   2: 663294.208 ops/s
Iteration   3: 673720.749 ops/s
Iteration   4: 655259.289 ops/s
Iteration   5: 668901.361 ops/s
Iteration   6: 657554.609 ops/s
Iteration   7: 674474.571 ops/s
Iteration   8: 680529.575 ops/s
Iteration   9: 693205.096 ops/s
Iteration  10: 627097.754 ops/s
Iteration  11: 646350.964 ops/s
Iteration  12: 660569.910 ops/s
Iteration  13: 668533.767 ops/s
Iteration  14: 698997.196 ops/s
Iteration  15: 662394.778 ops/s
Iteration  16: 689386.569 ops/s
Iteration  17: 660020.942 ops/s
Iteration  18: 677881.499 ops/s
Iteration  19: 700817.999 ops/s
Iteration  20: 636181.467 ops/s
Iteration  21: 697350.560 ops/s
Iteration  22: 654828.986 ops/s
Iteration  23: 703781.921 ops/s
Iteration  24: 664294.147 ops/s
Iteration  25: 678169.490 ops/s
Iteration  26: 667030.704 ops/s
Iteration  27: 677691.460 ops/s
Iteration  28: 681769.831 ops/s
Iteration  29: 668718.810 ops/s
Iteration  30: 657882.700 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_firstError":
  671036.644 ±(99.9%) 12326.416 ops/s [Average]
  (min, avg, max) = (627097.754, 671036.644, 703781.921), stdev = 18449.600
  CI (99.9%): [658710.228, 683363.060] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeZipArrayTest._Benchmark.benchmark_firstError  thrpt   30  671036.644 ± 12326.416  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_actionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_actionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 47417.320 ops/s
# Warmup Iteration   2: 186306.469 ops/s
# Warmup Iteration   3: 212091.996 ops/s
# Warmup Iteration   4: 197298.610 ops/s
# Warmup Iteration   5: 225961.073 ops/s
# Warmup Iteration   6: 235571.314 ops/s
# Warmup Iteration   7: 227530.760 ops/s
# Warmup Iteration   8: 238976.857 ops/s
# Warmup Iteration   9: 230492.255 ops/s
# Warmup Iteration  10: 228556.054 ops/s
# Warmup Iteration  11: 239523.036 ops/s
# Warmup Iteration  12: 224805.817 ops/s
# Warmup Iteration  13: 232502.460 ops/s
# Warmup Iteration  14: 242637.196 ops/s
# Warmup Iteration  15: 218253.001 ops/s
# Warmup Iteration  16: 244419.780 ops/s
# Warmup Iteration  17: 233287.252 ops/s
# Warmup Iteration  18: 236858.232 ops/s
# Warmup Iteration  19: 242135.129 ops/s
# Warmup Iteration  20: 238250.006 ops/s
# Warmup Iteration  21: 245640.044 ops/s
# Warmup Iteration  22: 247285.369 ops/s
# Warmup Iteration  23: 234318.988 ops/s
# Warmup Iteration  24: 246789.582 ops/s
# Warmup Iteration  25: 245562.783 ops/s
# Warmup Iteration  26: 227688.156 ops/s
# Warmup Iteration  27: 249146.900 ops/s
# Warmup Iteration  28: 237974.454 ops/s
# Warmup Iteration  29: 249181.612 ops/s
# Warmup Iteration  30: 235478.126 ops/s
Iteration   1: 236446.445 ops/s
Iteration   2: 218224.598 ops/s
Iteration   3: 223294.340 ops/s
Iteration   4: 236236.774 ops/s
Iteration   5: 247442.884 ops/s
Iteration   6: 234720.187 ops/s
Iteration   7: 242558.569 ops/s
Iteration   8: 238097.560 ops/s
Iteration   9: 241810.559 ops/s
Iteration  10: 239010.214 ops/s
Iteration  11: 241124.269 ops/s
Iteration  12: 249403.229 ops/s
Iteration  13: 241441.084 ops/s
Iteration  14: 239353.609 ops/s
Iteration  15: 233212.584 ops/s
Iteration  16: 239225.317 ops/s
Iteration  17: 241536.727 ops/s
Iteration  18: 242735.487 ops/s
Iteration  19: 234601.607 ops/s
Iteration  20: 238764.294 ops/s
Iteration  21: 239503.491 ops/s
Iteration  22: 235791.753 ops/s
Iteration  23: 245661.278 ops/s
Iteration  24: 232664.115 ops/s
Iteration  25: 232833.791 ops/s
Iteration  26: 239818.057 ops/s
Iteration  27: 234119.995 ops/s
Iteration  28: 245916.607 ops/s
Iteration  29: 236798.791 ops/s
Iteration  30: 245205.635 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_actionThrows":
  238251.795 ±(99.9%) 4346.799 ops/s [Average]
  (min, avg, max) = (218224.598, 238251.795, 249403.229), stdev = 6506.084
  CI (99.9%): [233904.996, 242598.594] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
MaybeDoFinallyTest._Benchmark.benchmark_actionThrows  thrpt   30  238251.795 ± 4346.799  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeMainComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeMainComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 809343.201 ops/s
# Warmup Iteration   2: 2299983.561 ops/s
# Warmup Iteration   3: 2765735.992 ops/s
# Warmup Iteration   4: 3145285.952 ops/s
# Warmup Iteration   5: 3103456.678 ops/s
# Warmup Iteration   6: 3238905.685 ops/s
# Warmup Iteration   7: 3262246.243 ops/s
# Warmup Iteration   8: 3082425.998 ops/s
# Warmup Iteration   9: 3297716.013 ops/s
# Warmup Iteration  10: 3056634.522 ops/s
# Warmup Iteration  11: 3190991.020 ops/s
# Warmup Iteration  12: 3199196.655 ops/s
# Warmup Iteration  13: 3168705.377 ops/s
# Warmup Iteration  14: 3305601.476 ops/s
# Warmup Iteration  15: 3054198.096 ops/s
# Warmup Iteration  16: 3140511.681 ops/s
# Warmup Iteration  17: 3239590.369 ops/s
# Warmup Iteration  18: 3105932.775 ops/s
# Warmup Iteration  19: 3189839.365 ops/s
# Warmup Iteration  20: 3064958.062 ops/s
# Warmup Iteration  21: 3232293.065 ops/s
# Warmup Iteration  22: 3227263.384 ops/s
# Warmup Iteration  23: 3125311.938 ops/s
# Warmup Iteration  24: 3175940.189 ops/s
# Warmup Iteration  25: 3231489.746 ops/s
# Warmup Iteration  26: 3147116.941 ops/s
# Warmup Iteration  27: 3308883.334 ops/s
# Warmup Iteration  28: 3074715.554 ops/s
# Warmup Iteration  29: 3280454.119 ops/s
# Warmup Iteration  30: 3285945.405 ops/s
Iteration   1: 3152860.994 ops/s
Iteration   2: 3304067.974 ops/s
Iteration   3: 3272035.235 ops/s
Iteration   4: 3175152.372 ops/s
Iteration   5: 3169862.020 ops/s
Iteration   6: 3235757.713 ops/s
Iteration   7: 3246174.151 ops/s
Iteration   8: 3098997.727 ops/s
Iteration   9: 3228742.518 ops/s
Iteration  10: 3152277.567 ops/s
Iteration  11: 3303191.411 ops/s
Iteration  12: 3321619.388 ops/s
Iteration  13: 3173258.121 ops/s
Iteration  14: 3286359.338 ops/s
Iteration  15: 3111877.638 ops/s
Iteration  16: 3164086.309 ops/s
Iteration  17: 3251337.591 ops/s
Iteration  18: 3055269.715 ops/s
Iteration  19: 3193962.985 ops/s
Iteration  20: 3259458.792 ops/s
Iteration  21: 3133244.463 ops/s
Iteration  22: 3307438.127 ops/s
Iteration  23: 3217076.980 ops/s
Iteration  24: 3237306.610 ops/s
Iteration  25: 3129724.606 ops/s
Iteration  26: 3322796.472 ops/s
Iteration  27: 3151724.621 ops/s
Iteration  28: 3140647.338 ops/s
Iteration  29: 3356095.990 ops/s
Iteration  30: 3261733.909 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeMainComplete":
  3213804.622 ±(99.9%) 51501.145 ops/s [Average]
  (min, avg, max) = (3055269.715, 3213804.622, 3356095.990), stdev = 77084.495
  CI (99.9%): [3162303.478, 3265305.767] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeMainComplete  thrpt   30  3213804.622 ± 51501.145  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 605307.520 ops/s
# Warmup Iteration   2: 2366172.473 ops/s
# Warmup Iteration   3: 3066296.497 ops/s
# Warmup Iteration   4: 3070864.303 ops/s
# Warmup Iteration   5: 3197643.464 ops/s
# Warmup Iteration   6: 2987205.654 ops/s
# Warmup Iteration   7: 3110366.448 ops/s
# Warmup Iteration   8: 3129419.986 ops/s
# Warmup Iteration   9: 3172032.340 ops/s
# Warmup Iteration  10: 3039045.720 ops/s
# Warmup Iteration  11: 2767785.503 ops/s
# Warmup Iteration  12: 3090873.922 ops/s
# Warmup Iteration  13: 3223370.959 ops/s
# Warmup Iteration  14: 3099212.418 ops/s
# Warmup Iteration  15: 3111664.712 ops/s
# Warmup Iteration  16: 3267066.679 ops/s
# Warmup Iteration  17: 3111175.719 ops/s
# Warmup Iteration  18: 3216643.131 ops/s
# Warmup Iteration  19: 3141939.246 ops/s
# Warmup Iteration  20: 3208810.210 ops/s
# Warmup Iteration  21: 3115456.632 ops/s
# Warmup Iteration  22: 3140520.524 ops/s
# Warmup Iteration  23: 3239931.158 ops/s
# Warmup Iteration  24: 3136855.978 ops/s
# Warmup Iteration  25: 2978428.156 ops/s
# Warmup Iteration  26: 3258922.721 ops/s
# Warmup Iteration  27: 2425049.340 ops/s
# Warmup Iteration  28: 3136116.912 ops/s
# Warmup Iteration  29: 3162319.394 ops/s
# Warmup Iteration  30: 3282540.334 ops/s
Iteration   1: 3043490.355 ops/s
Iteration   2: 3165148.321 ops/s
Iteration   3: 3226256.735 ops/s
Iteration   4: 3095545.495 ops/s
Iteration   5: 3028855.580 ops/s
Iteration   6: 3150165.958 ops/s
Iteration   7: 3122744.092 ops/s
Iteration   8: 3182655.176 ops/s
Iteration   9: 3209242.787 ops/s
Iteration  10: 3183382.412 ops/s
Iteration  11: 3237533.805 ops/s
Iteration  12: 3156883.164 ops/s
Iteration  13: 3146510.092 ops/s
Iteration  14: 3221167.403 ops/s
Iteration  15: 3133066.399 ops/s
Iteration  16: 3182689.840 ops/s
Iteration  17: 3094674.265 ops/s
Iteration  18: 3208081.920 ops/s
Iteration  19: 3238801.104 ops/s
Iteration  20: 3066767.692 ops/s
Iteration  21: 3166543.380 ops/s
Iteration  22: 3091667.027 ops/s
Iteration  23: 3266800.505 ops/s
Iteration  24: 3156485.386 ops/s
Iteration  25: 3103264.020 ops/s
Iteration  26: 3238185.940 ops/s
Iteration  27: 3126017.464 ops/s
Iteration  28: 3180353.530 ops/s
Iteration  29: 3189867.738 ops/s
Iteration  30: 3048174.599 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherComplete":
  3155367.406 ±(99.9%) 42394.276 ops/s [Average]
  (min, avg, max) = (3028855.580, 3155367.406, 3266800.505), stdev = 63453.762
  CI (99.9%): [3112973.130, 3197761.682] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherComplete  thrpt   30  3155367.406 ± 42394.276  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorInnerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorInnerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 174169.559 ops/s
# Warmup Iteration   2: 537651.448 ops/s
# Warmup Iteration   3: 610060.159 ops/s
# Warmup Iteration   4: 627772.345 ops/s
# Warmup Iteration   5: 589691.681 ops/s
# Warmup Iteration   6: 610995.233 ops/s
# Warmup Iteration   7: 576096.666 ops/s
# Warmup Iteration   8: 615751.767 ops/s
# Warmup Iteration   9: 587194.192 ops/s
# Warmup Iteration  10: 631035.769 ops/s
# Warmup Iteration  11: 614901.854 ops/s
# Warmup Iteration  12: 616413.644 ops/s
# Warmup Iteration  13: 647859.567 ops/s
# Warmup Iteration  14: 607277.981 ops/s
# Warmup Iteration  15: 595949.680 ops/s
# Warmup Iteration  16: 621789.142 ops/s
# Warmup Iteration  17: 638624.508 ops/s
# Warmup Iteration  18: 645565.027 ops/s
# Warmup Iteration  19: 676077.052 ops/s
# Warmup Iteration  20: 633158.864 ops/s
# Warmup Iteration  21: 676047.996 ops/s
# Warmup Iteration  22: 633910.399 ops/s
# Warmup Iteration  23: 633714.169 ops/s
# Warmup Iteration  24: 666434.579 ops/s
# Warmup Iteration  25: 642831.528 ops/s
# Warmup Iteration  26: 631750.312 ops/s
# Warmup Iteration  27: 640141.222 ops/s
# Warmup Iteration  28: 670820.757 ops/s
# Warmup Iteration  29: 638573.376 ops/s
# Warmup Iteration  30: 628702.793 ops/s
Iteration   1: 668886.908 ops/s
Iteration   2: 639972.209 ops/s
Iteration   3: 638180.772 ops/s
Iteration   4: 661418.113 ops/s
Iteration   5: 634784.414 ops/s
Iteration   6: 656937.359 ops/s
Iteration   7: 667356.439 ops/s
Iteration   8: 632114.202 ops/s
Iteration   9: 658757.024 ops/s
Iteration  10: 652147.893 ops/s
Iteration  11: 655531.322 ops/s
Iteration  12: 646806.188 ops/s
Iteration  13: 647724.763 ops/s
Iteration  14: 635260.079 ops/s
Iteration  15: 639046.627 ops/s
Iteration  16: 648096.030 ops/s
Iteration  17: 643975.747 ops/s
Iteration  18: 645279.595 ops/s
Iteration  19: 659649.063 ops/s
Iteration  20: 627296.141 ops/s
Iteration  21: 665388.597 ops/s
Iteration  22: 674673.903 ops/s
Iteration  23: 645431.249 ops/s
Iteration  24: 642830.731 ops/s
Iteration  25: 650104.317 ops/s
Iteration  26: 642794.966 ops/s
Iteration  27: 673626.145 ops/s
Iteration  28: 668975.126 ops/s
Iteration  29: 630913.540 ops/s
Iteration  30: 673268.914 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_selectorInnerError":
  650907.613 ±(99.9%) 9228.075 ops/s [Average]
  (min, avg, max) = (627296.141, 650907.613, 674673.903), stdev = 13812.149
  CI (99.9%): [641679.538, 660135.687] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
ObservablePublishTest._Benchmark.benchmark_selectorInnerError  thrpt   30  650907.613 ± 9228.075  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 813667.080 ops/s
# Warmup Iteration   2: 2451154.239 ops/s
# Warmup Iteration   3: 3131742.765 ops/s
# Warmup Iteration   4: 3101001.371 ops/s
# Warmup Iteration   5: 3222637.715 ops/s
# Warmup Iteration   6: 3041813.736 ops/s
# Warmup Iteration   7: 3144625.485 ops/s
# Warmup Iteration   8: 3027728.052 ops/s
# Warmup Iteration   9: 3123557.882 ops/s
# Warmup Iteration  10: 3157884.626 ops/s
# Warmup Iteration  11: 2749394.956 ops/s
# Warmup Iteration  12: 2990470.647 ops/s
# Warmup Iteration  13: 3237684.811 ops/s
# Warmup Iteration  14: 3090413.841 ops/s
# Warmup Iteration  15: 3142747.537 ops/s
# Warmup Iteration  16: 3151493.841 ops/s
# Warmup Iteration  17: 3212314.740 ops/s
# Warmup Iteration  18: 3153822.210 ops/s
# Warmup Iteration  19: 3154479.622 ops/s
# Warmup Iteration  20: 3146323.874 ops/s
# Warmup Iteration  21: 3136701.521 ops/s
# Warmup Iteration  22: 2543959.843 ops/s
# Warmup Iteration  23: 3124848.397 ops/s
# Warmup Iteration  24: 3150656.486 ops/s
# Warmup Iteration  25: 3246587.637 ops/s
# Warmup Iteration  26: 3085248.645 ops/s
# Warmup Iteration  27: 3111692.966 ops/s
# Warmup Iteration  28: 3073130.880 ops/s
# Warmup Iteration  29: 3161190.065 ops/s
# Warmup Iteration  30: 3127929.487 ops/s
Iteration   1: 3175078.003 ops/s
Iteration   2: 3175642.547 ops/s
Iteration   3: 3182703.896 ops/s
Iteration   4: 3159036.290 ops/s
Iteration   5: 3153567.099 ops/s
Iteration   6: 3209344.100 ops/s
Iteration   7: 3135480.482 ops/s
Iteration   8: 3219981.493 ops/s
Iteration   9: 3131236.311 ops/s
Iteration  10: 3126947.047 ops/s
Iteration  11: 3283068.536 ops/s
Iteration  12: 2976469.239 ops/s
Iteration  13: 3211607.209 ops/s
Iteration  14: 3179829.505 ops/s
Iteration  15: 3125162.168 ops/s
Iteration  16: 3195073.906 ops/s
Iteration  17: 3112127.330 ops/s
Iteration  18: 3206342.552 ops/s
Iteration  19: 3099677.449 ops/s
Iteration  20: 3171795.680 ops/s
Iteration  21: 3227207.402 ops/s
Iteration  22: 3067390.375 ops/s
Iteration  23: 3208030.356 ops/s
Iteration  24: 3069017.916 ops/s
Iteration  25: 3169893.294 ops/s
Iteration  26: 3240933.043 ops/s
Iteration  27: 3167331.470 ops/s
Iteration  28: 3066022.557 ops/s
Iteration  29: 3221860.089 ops/s
Iteration  30: 3110707.967 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherSuccess":
  3159285.510 ±(99.9%) 42542.560 ops/s [Average]
  (min, avg, max) = (2976469.239, 3159285.510, 3283068.536), stdev = 63675.706
  CI (99.9%): [3116742.950, 3201828.070] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilMaybeOtherSuccess  thrpt   30  3159285.510 ± 42542.560  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_selectorFallbackTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_selectorFallbackTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 360324.541 ops/s
# Warmup Iteration   2: 1306488.815 ops/s
# Warmup Iteration   3: 2127964.152 ops/s
# Warmup Iteration   4: 2901583.992 ops/s
# Warmup Iteration   5: 3012076.901 ops/s
# Warmup Iteration   6: 2991833.931 ops/s
# Warmup Iteration   7: 2815874.152 ops/s
# Warmup Iteration   8: 2930701.293 ops/s
# Warmup Iteration   9: 2876018.156 ops/s
# Warmup Iteration  10: 2898501.061 ops/s
# Warmup Iteration  11: 2945407.294 ops/s
# Warmup Iteration  12: 2790651.139 ops/s
# Warmup Iteration  13: 2995951.450 ops/s
# Warmup Iteration  14: 2989228.544 ops/s
# Warmup Iteration  15: 2817620.461 ops/s
# Warmup Iteration  16: 2937096.366 ops/s
# Warmup Iteration  17: 2939399.953 ops/s
# Warmup Iteration  18: 2945003.128 ops/s
# Warmup Iteration  19: 2843895.275 ops/s
# Warmup Iteration  20: 3036814.854 ops/s
# Warmup Iteration  21: 2973005.853 ops/s
# Warmup Iteration  22: 2943390.836 ops/s
# Warmup Iteration  23: 2816596.373 ops/s
# Warmup Iteration  24: 2865698.901 ops/s
# Warmup Iteration  25: 2913962.870 ops/s
# Warmup Iteration  26: 2904184.320 ops/s
# Warmup Iteration  27: 2996925.591 ops/s
# Warmup Iteration  28: 2874657.972 ops/s
# Warmup Iteration  29: 2947349.621 ops/s
# Warmup Iteration  30: 2894209.266 ops/s
Iteration   1: 2879159.477 ops/s
Iteration   2: 2972835.571 ops/s
Iteration   3: 2921858.528 ops/s
Iteration   4: 3039618.651 ops/s
Iteration   5: 2986109.557 ops/s
Iteration   6: 2932091.994 ops/s
Iteration   7: 2902011.408 ops/s
Iteration   8: 2903265.311 ops/s
Iteration   9: 2912229.722 ops/s
Iteration  10: 2954971.830 ops/s
Iteration  11: 2928714.769 ops/s
Iteration  12: 2957046.495 ops/s
Iteration  13: 2890354.155 ops/s
Iteration  14: 2858552.115 ops/s
Iteration  15: 2967231.872 ops/s
Iteration  16: 2829934.486 ops/s
Iteration  17: 3016716.668 ops/s
Iteration  18: 3057532.158 ops/s
Iteration  19: 2800705.765 ops/s
Iteration  20: 2972851.682 ops/s
Iteration  21: 2933194.923 ops/s
Iteration  22: 2929230.501 ops/s
Iteration  23: 2787618.479 ops/s
Iteration  24: 2958519.576 ops/s
Iteration  25: 2948397.974 ops/s
Iteration  26: 2893072.264 ops/s
Iteration  27: 2990495.277 ops/s
Iteration  28: 3066992.064 ops/s
Iteration  29: 2831672.466 ops/s
Iteration  30: 2906317.055 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_selectorFallbackTake":
  2930976.760 ±(99.9%) 46199.142 ops/s [Average]
  (min, avg, max) = (2787618.479, 2930976.760, 3066992.064), stdev = 69148.707
  CI (99.9%): [2884777.617, 2977175.902] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_selectorFallbackTake  thrpt   30  2930976.760 ± 46199.142  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onNextThrowsCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onNextThrowsCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122912.046 ops/s
# Warmup Iteration   2: 440359.838 ops/s
# Warmup Iteration   3: 541201.087 ops/s
# Warmup Iteration   4: 582754.304 ops/s
# Warmup Iteration   5: 515578.148 ops/s
# Warmup Iteration   6: 573525.185 ops/s
# Warmup Iteration   7: 549240.902 ops/s
# Warmup Iteration   8: 570280.997 ops/s
# Warmup Iteration   9: 593346.548 ops/s
# Warmup Iteration  10: 572448.526 ops/s
# Warmup Iteration  11: 590260.686 ops/s
# Warmup Iteration  12: 603192.844 ops/s
# Warmup Iteration  13: 566960.478 ops/s
# Warmup Iteration  14: 576087.017 ops/s
# Warmup Iteration  15: 591225.067 ops/s
# Warmup Iteration  16: 540230.323 ops/s
# Warmup Iteration  17: 513184.476 ops/s
# Warmup Iteration  18: 591405.169 ops/s
# Warmup Iteration  19: 602448.016 ops/s
# Warmup Iteration  20: 592388.118 ops/s
# Warmup Iteration  21: 599177.146 ops/s
# Warmup Iteration  22: 625207.769 ops/s
# Warmup Iteration  23: 617497.732 ops/s
# Warmup Iteration  24: 595946.863 ops/s
# Warmup Iteration  25: 615435.634 ops/s
# Warmup Iteration  26: 616705.811 ops/s
# Warmup Iteration  27: 562456.557 ops/s
# Warmup Iteration  28: 627106.500 ops/s
# Warmup Iteration  29: 598308.482 ops/s
# Warmup Iteration  30: 635155.229 ops/s
Iteration   1: 639143.088 ops/s
Iteration   2: 627595.645 ops/s
Iteration   3: 592831.246 ops/s
Iteration   4: 592396.300 ops/s
Iteration   5: 620995.182 ops/s
Iteration   6: 612887.594 ops/s
Iteration   7: 624368.743 ops/s
Iteration   8: 604358.603 ops/s
Iteration   9: 609100.230 ops/s
Iteration  10: 630922.942 ops/s
Iteration  11: 599269.694 ops/s
Iteration  12: 635901.475 ops/s
Iteration  13: 624223.238 ops/s
Iteration  14: 597699.468 ops/s
Iteration  15: 599413.359 ops/s
Iteration  16: 608563.519 ops/s
Iteration  17: 596101.967 ops/s
Iteration  18: 615811.057 ops/s
Iteration  19: 590246.798 ops/s
Iteration  20: 624285.516 ops/s
Iteration  21: 612109.139 ops/s
Iteration  22: 602910.864 ops/s
Iteration  23: 622819.157 ops/s
Iteration  24: 610569.989 ops/s
Iteration  25: 641218.492 ops/s
Iteration  26: 624092.829 ops/s
Iteration  27: 605585.211 ops/s
Iteration  28: 603170.754 ops/s
Iteration  29: 629595.607 ops/s
Iteration  30: 591646.030 ops/s


Result "io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onNextThrowsCancelsUpstream":
  612994.458 ±(99.9%) 10044.845 ops/s [Average]
  (min, avg, max) = (590246.798, 612994.458, 641218.492), stdev = 15034.652
  CI (99.9%): [602949.613, 623039.303] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
LambdaObserverTest._Benchmark.benchmark_onNextThrowsCancelsUpstream  thrpt   30  612994.458 ± 10044.845  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 428562.704 ops/s
# Warmup Iteration   2: 3219956.117 ops/s
# Warmup Iteration   3: 4126766.050 ops/s
# Warmup Iteration   4: 4553538.296 ops/s
# Warmup Iteration   5: 4645127.852 ops/s
# Warmup Iteration   6: 4726992.975 ops/s
# Warmup Iteration   7: 4700678.969 ops/s
# Warmup Iteration   8: 4603521.670 ops/s
# Warmup Iteration   9: 4746991.241 ops/s
# Warmup Iteration  10: 4542960.127 ops/s
# Warmup Iteration  11: 4748707.444 ops/s
# Warmup Iteration  12: 4941074.927 ops/s
# Warmup Iteration  13: 4608698.429 ops/s
# Warmup Iteration  14: 4820071.119 ops/s
# Warmup Iteration  15: 4562679.164 ops/s
# Warmup Iteration  16: 4816771.463 ops/s
# Warmup Iteration  17: 4769522.392 ops/s
# Warmup Iteration  18: 4885127.599 ops/s
# Warmup Iteration  19: 4550519.315 ops/s
# Warmup Iteration  20: 4786952.246 ops/s
# Warmup Iteration  21: 4640625.268 ops/s
# Warmup Iteration  22: 4797535.768 ops/s
# Warmup Iteration  23: 4682021.450 ops/s
# Warmup Iteration  24: 4687158.660 ops/s
# Warmup Iteration  25: 4860035.031 ops/s
# Warmup Iteration  26: 4684447.027 ops/s
# Warmup Iteration  27: 4588323.703 ops/s
# Warmup Iteration  28: 4828212.183 ops/s
# Warmup Iteration  29: 4608532.617 ops/s
# Warmup Iteration  30: 4775482.575 ops/s
Iteration   1: 4496315.861 ops/s
Iteration   2: 4631502.032 ops/s
Iteration   3: 4893204.745 ops/s
Iteration   4: 4579902.480 ops/s
Iteration   5: 4807019.443 ops/s
Iteration   6: 4696743.940 ops/s
Iteration   7: 4732811.669 ops/s
Iteration   8: 4776644.081 ops/s
Iteration   9: 4526476.038 ops/s
Iteration  10: 4797803.385 ops/s
Iteration  11: 4644882.748 ops/s
Iteration  12: 4725939.874 ops/s
Iteration  13: 4884443.801 ops/s
Iteration  14: 4590022.698 ops/s
Iteration  15: 4766378.097 ops/s
Iteration  16: 4854937.174 ops/s
Iteration  17: 4540930.384 ops/s
Iteration  18: 4879512.452 ops/s
Iteration  19: 4641367.468 ops/s
Iteration  20: 4678315.647 ops/s
Iteration  21: 4794237.470 ops/s
Iteration  22: 4538530.969 ops/s
Iteration  23: 4802416.458 ops/s
Iteration  24: 4558984.383 ops/s
Iteration  25: 4742955.210 ops/s
Iteration  26: 4646415.279 ops/s
Iteration  27: 4674176.396 ops/s
Iteration  28: 4845956.400 ops/s
Iteration  29: 4609341.095 ops/s
Iteration  30: 4691104.768 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_dispose":
  4701642.415 ±(99.9%) 78065.220 ops/s [Average]
  (min, avg, max) = (4496315.861, 4701642.415, 4893204.745), stdev = 116844.356
  CI (99.9%): [4623577.194, 4779707.635] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
MaybeContainsTest._Benchmark.benchmark_dispose  thrpt   30  4701642.415 ± 78065.220  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1497388.015 ops/s
# Warmup Iteration   2: 5171489.018 ops/s
# Warmup Iteration   3: 5727874.689 ops/s
# Warmup Iteration   4: 6443285.384 ops/s
# Warmup Iteration   5: 6721357.066 ops/s
# Warmup Iteration   6: 6297473.431 ops/s
# Warmup Iteration   7: 6433599.481 ops/s
# Warmup Iteration   8: 6694330.869 ops/s
# Warmup Iteration   9: 6427690.053 ops/s
# Warmup Iteration  10: 6323231.766 ops/s
# Warmup Iteration  11: 4717416.027 ops/s
# Warmup Iteration  12: 6497472.000 ops/s
# Warmup Iteration  13: 6689047.290 ops/s
# Warmup Iteration  14: 6597725.813 ops/s
# Warmup Iteration  15: 6646968.077 ops/s
# Warmup Iteration  16: 6481455.789 ops/s
# Warmup Iteration  17: 6474667.563 ops/s
# Warmup Iteration  18: 6538375.698 ops/s
# Warmup Iteration  19: 6801445.400 ops/s
# Warmup Iteration  20: 6424297.518 ops/s
# Warmup Iteration  21: 6545447.846 ops/s
# Warmup Iteration  22: 6818662.920 ops/s
# Warmup Iteration  23: 6483270.752 ops/s
# Warmup Iteration  24: 6616415.839 ops/s
# Warmup Iteration  25: 6468225.167 ops/s
# Warmup Iteration  26: 6558726.375 ops/s
# Warmup Iteration  27: 6749067.528 ops/s
# Warmup Iteration  28: 6533455.529 ops/s
# Warmup Iteration  29: 6712349.247 ops/s
# Warmup Iteration  30: 6410983.653 ops/s
Iteration   1: 6491554.833 ops/s
Iteration   2: 6687051.275 ops/s
Iteration   3: 6353581.008 ops/s
Iteration   4: 6709012.518 ops/s
Iteration   5: 6394539.176 ops/s
Iteration   6: 6483909.771 ops/s
Iteration   7: 6692178.284 ops/s
Iteration   8: 6439545.292 ops/s
Iteration   9: 6660744.775 ops/s
Iteration  10: 6393766.437 ops/s
Iteration  11: 6285993.304 ops/s
Iteration  12: 6624006.104 ops/s
Iteration  13: 6809461.016 ops/s
Iteration  14: 6286610.334 ops/s
Iteration  15: 6406780.514 ops/s
Iteration  16: 6792798.822 ops/s
Iteration  17: 6423752.322 ops/s
Iteration  18: 6760902.312 ops/s
Iteration  19: 6649770.366 ops/s
Iteration  20: 6477047.735 ops/s
Iteration  21: 6787234.130 ops/s
Iteration  22: 6331572.655 ops/s
Iteration  23: 6838330.784 ops/s
Iteration  24: 6649788.267 ops/s
Iteration  25: 6473268.207 ops/s
Iteration  26: 6583149.462 ops/s
Iteration  27: 6839202.135 ops/s
Iteration  28: 6326270.312 ops/s
Iteration  29: 6628046.110 ops/s
Iteration  30: 6223164.784 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFromCompletableTest._Benchmark.benchmark_dispose":
  6550101.102 ±(99.9%) 124151.715 ops/s [Average]
  (min, avg, max) = (6223164.784, 6550101.102, 6839202.135), stdev = 185824.456
  CI (99.9%): [6425949.387, 6674252.816] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
MaybeFromCompletableTest._Benchmark.benchmark_dispose  thrpt   30  6550101.102 ± 124151.715  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1912464.057 ops/s
# Warmup Iteration   2: 4600555.953 ops/s
# Warmup Iteration   3: 5658609.793 ops/s
# Warmup Iteration   4: 5763561.610 ops/s
# Warmup Iteration   5: 6347534.421 ops/s
# Warmup Iteration   6: 5814408.341 ops/s
# Warmup Iteration   7: 6249740.466 ops/s
# Warmup Iteration   8: 5872445.121 ops/s
# Warmup Iteration   9: 5994322.517 ops/s
# Warmup Iteration  10: 6230439.207 ops/s
# Warmup Iteration  11: 6107792.751 ops/s
# Warmup Iteration  12: 5813503.338 ops/s
# Warmup Iteration  13: 6082631.886 ops/s
# Warmup Iteration  14: 6111982.409 ops/s
# Warmup Iteration  15: 6021555.901 ops/s
# Warmup Iteration  16: 6016326.819 ops/s
# Warmup Iteration  17: 6324011.060 ops/s
# Warmup Iteration  18: 5918058.512 ops/s
# Warmup Iteration  19: 6263769.344 ops/s
# Warmup Iteration  20: 5994013.383 ops/s
# Warmup Iteration  21: 6019705.321 ops/s
# Warmup Iteration  22: 6116088.277 ops/s
# Warmup Iteration  23: 6001622.382 ops/s
# Warmup Iteration  24: 5976033.193 ops/s
# Warmup Iteration  25: 6229137.684 ops/s
# Warmup Iteration  26: 6079451.158 ops/s
# Warmup Iteration  27: 6074802.407 ops/s
# Warmup Iteration  28: 6166616.180 ops/s
# Warmup Iteration  29: 5899838.604 ops/s
# Warmup Iteration  30: 5905092.048 ops/s
Iteration   1: 6211689.664 ops/s
Iteration   2: 5876012.712 ops/s
Iteration   3: 6163169.224 ops/s
Iteration   4: 6029850.319 ops/s
Iteration   5: 5996411.797 ops/s
Iteration   6: 6234126.203 ops/s
Iteration   7: 6282608.226 ops/s
Iteration   8: 5999656.684 ops/s
Iteration   9: 6274882.663 ops/s
Iteration  10: 6052573.362 ops/s
Iteration  11: 5974288.370 ops/s
Iteration  12: 6302658.353 ops/s
Iteration  13: 5885647.221 ops/s
Iteration  14: 6275142.580 ops/s
Iteration  15: 6188826.248 ops/s
Iteration  16: 6007543.937 ops/s
Iteration  17: 6215562.729 ops/s
Iteration  18: 6007802.862 ops/s
Iteration  19: 6272229.150 ops/s
Iteration  20: 6070013.228 ops/s
Iteration  21: 6149583.634 ops/s
Iteration  22: 6274934.807 ops/s
Iteration  23: 5945803.224 ops/s
Iteration  24: 6319164.645 ops/s
Iteration  25: 5981238.450 ops/s
Iteration  26: 6084017.262 ops/s
Iteration  27: 5938925.058 ops/s
Iteration  28: 6283924.356 ops/s
Iteration  29: 6209525.056 ops/s
Iteration  30: 6358474.349 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCountTest._Benchmark.benchmark_isDisposed":
  6128876.212 ±(99.9%) 97030.667 ops/s [Average]
  (min, avg, max) = (5876012.712, 6128876.212, 6358474.349), stdev = 145230.946
  CI (99.9%): [6031845.545, 6225906.880] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
MaybeCountTest._Benchmark.benchmark_isDisposed  thrpt   30  6128876.212 ± 97030.667  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 727536.745 ops/s
# Warmup Iteration   2: 3066276.674 ops/s
# Warmup Iteration   3: 4182878.825 ops/s
# Warmup Iteration   4: 4018830.729 ops/s
# Warmup Iteration   5: 2977194.088 ops/s
# Warmup Iteration   6: 4026315.813 ops/s
# Warmup Iteration   7: 3931702.539 ops/s
# Warmup Iteration   8: 4087140.138 ops/s
# Warmup Iteration   9: 4168630.217 ops/s
# Warmup Iteration  10: 3716757.275 ops/s
# Warmup Iteration  11: 3694806.897 ops/s
# Warmup Iteration  12: 4112385.632 ops/s
# Warmup Iteration  13: 3974723.810 ops/s
# Warmup Iteration  14: 4260330.316 ops/s
# Warmup Iteration  15: 4037451.618 ops/s
# Warmup Iteration  16: 4143371.828 ops/s
# Warmup Iteration  17: 4051808.914 ops/s
# Warmup Iteration  18: 3998860.642 ops/s
# Warmup Iteration  19: 4230094.845 ops/s
# Warmup Iteration  20: 4219425.903 ops/s
# Warmup Iteration  21: 4249466.499 ops/s
# Warmup Iteration  22: 4141626.712 ops/s
# Warmup Iteration  23: 4139157.508 ops/s
# Warmup Iteration  24: 4255468.784 ops/s
# Warmup Iteration  25: 4185070.795 ops/s
# Warmup Iteration  26: 4164649.713 ops/s
# Warmup Iteration  27: 4212961.201 ops/s
# Warmup Iteration  28: 4103504.265 ops/s
# Warmup Iteration  29: 4215260.175 ops/s
# Warmup Iteration  30: 4026595.867 ops/s
Iteration   1: 4162061.350 ops/s
Iteration   2: 4369251.530 ops/s
Iteration   3: 4049819.597 ops/s
Iteration   4: 4284586.786 ops/s
Iteration   5: 4114550.302 ops/s
Iteration   6: 4137810.499 ops/s
Iteration   7: 4288065.583 ops/s
Iteration   8: 4163787.342 ops/s
Iteration   9: 4392946.891 ops/s
Iteration  10: 4074201.696 ops/s
Iteration  11: 4226684.851 ops/s
Iteration  12: 4272968.809 ops/s
Iteration  13: 3980631.285 ops/s
Iteration  14: 4162379.249 ops/s
Iteration  15: 4102418.937 ops/s
Iteration  16: 4160382.282 ops/s
Iteration  17: 4163657.332 ops/s
Iteration  18: 4190867.426 ops/s
Iteration  19: 4353570.471 ops/s
Iteration  20: 4032715.969 ops/s
Iteration  21: 4287084.640 ops/s
Iteration  22: 4089311.752 ops/s
Iteration  23: 4287215.121 ops/s
Iteration  24: 4070764.901 ops/s
Iteration  25: 4096525.246 ops/s
Iteration  26: 4217891.991 ops/s
Iteration  27: 4093053.080 ops/s
Iteration  28: 4135242.916 ops/s
Iteration  29: 4202158.246 ops/s
Iteration  30: 4263919.724 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_dispose":
  4180884.193 ±(99.9%) 69813.966 ops/s [Average]
  (min, avg, max) = (3980631.285, 4180884.193, 4392946.891), stdev = 104494.265
  CI (99.9%): [4111070.228, 4250698.159] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeSwitchIfEmptySingleTest._Benchmark.benchmark_dispose  thrpt   30  4180884.193 ± 69813.966  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 348130.168 ops/s
# Warmup Iteration   2: 594002.020 ops/s
# Warmup Iteration   3: 705138.503 ops/s
# Warmup Iteration   4: 626405.047 ops/s
# Warmup Iteration   5: 729292.127 ops/s
# Warmup Iteration   6: 605436.109 ops/s
# Warmup Iteration   7: 703410.217 ops/s
# Warmup Iteration   8: 732659.398 ops/s
# Warmup Iteration   9: 683141.801 ops/s
# Warmup Iteration  10: 708355.398 ops/s
# Warmup Iteration  11: 735519.975 ops/s
# Warmup Iteration  12: 686959.466 ops/s
# Warmup Iteration  13: 724990.782 ops/s
# Warmup Iteration  14: 743882.111 ops/s
# Warmup Iteration  15: 682247.975 ops/s
# Warmup Iteration  16: 734516.834 ops/s
# Warmup Iteration  17: 737165.439 ops/s
# Warmup Iteration  18: 774504.657 ops/s
# Warmup Iteration  19: 746196.934 ops/s
# Warmup Iteration  20: 763779.149 ops/s
# Warmup Iteration  21: 774001.584 ops/s
# Warmup Iteration  22: 760719.951 ops/s
# Warmup Iteration  23: 733771.880 ops/s
# Warmup Iteration  24: 769437.972 ops/s
# Warmup Iteration  25: 741096.487 ops/s
# Warmup Iteration  26: 778616.276 ops/s
# Warmup Iteration  27: 764428.515 ops/s
# Warmup Iteration  28: 763320.686 ops/s
# Warmup Iteration  29: 767036.906 ops/s
# Warmup Iteration  30: 738166.905 ops/s
Iteration   1: 763680.307 ops/s
Iteration   2: 735083.236 ops/s
Iteration   3: 766844.865 ops/s
Iteration   4: 786436.958 ops/s
Iteration   5: 733673.654 ops/s
Iteration   6: 753541.737 ops/s
Iteration   7: 754204.154 ops/s
Iteration   8: 763317.013 ops/s
Iteration   9: 738828.286 ops/s
Iteration  10: 752776.752 ops/s
Iteration  11: 775991.832 ops/s
Iteration  12: 736442.833 ops/s
Iteration  13: 747710.017 ops/s
Iteration  14: 771801.729 ops/s
Iteration  15: 745849.376 ops/s
Iteration  16: 741179.210 ops/s
Iteration  17: 793063.187 ops/s
Iteration  18: 756581.311 ops/s
Iteration  19: 742634.509 ops/s
Iteration  20: 768801.354 ops/s
Iteration  21: 746437.407 ops/s
Iteration  22: 759642.939 ops/s
Iteration  23: 757906.453 ops/s
Iteration  24: 747565.331 ops/s
Iteration  25: 781036.540 ops/s
Iteration  26: 750942.226 ops/s
Iteration  27: 767700.620 ops/s
Iteration  28: 740116.694 ops/s
Iteration  29: 758163.299 ops/s
Iteration  30: 772241.782 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableFutureCancels":
  757006.520 ±(99.9%) 10384.515 ops/s [Average]
  (min, avg, max) = (733673.654, 757006.520, 793063.187), stdev = 15543.055
  CI (99.9%): [746622.005, 767391.036] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt       Score       Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableFutureCancels  thrpt   30  757006.520 ± 10384.515  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 408770.048 ops/s
# Warmup Iteration   2: 575265.023 ops/s
# Warmup Iteration   3: 709302.792 ops/s
# Warmup Iteration   4: 624729.651 ops/s
# Warmup Iteration   5: 676529.218 ops/s
# Warmup Iteration   6: 627649.957 ops/s
# Warmup Iteration   7: 706362.269 ops/s
# Warmup Iteration   8: 710260.788 ops/s
# Warmup Iteration   9: 704784.028 ops/s
# Warmup Iteration  10: 695909.681 ops/s
# Warmup Iteration  11: 710675.817 ops/s
# Warmup Iteration  12: 687733.083 ops/s
# Warmup Iteration  13: 721941.060 ops/s
# Warmup Iteration  14: 691098.415 ops/s
# Warmup Iteration  15: 715611.236 ops/s
# Warmup Iteration  16: 711981.128 ops/s
# Warmup Iteration  17: 700248.110 ops/s
# Warmup Iteration  18: 764439.074 ops/s
# Warmup Iteration  19: 724985.049 ops/s
# Warmup Iteration  20: 760466.087 ops/s
# Warmup Iteration  21: 744802.012 ops/s
# Warmup Iteration  22: 746453.436 ops/s
# Warmup Iteration  23: 743289.947 ops/s
# Warmup Iteration  24: 728498.988 ops/s
# Warmup Iteration  25: 764495.161 ops/s
# Warmup Iteration  26: 742258.921 ops/s
# Warmup Iteration  27: 747942.301 ops/s
# Warmup Iteration  28: 734898.400 ops/s
# Warmup Iteration  29: 747358.941 ops/s
# Warmup Iteration  30: 726996.175 ops/s
Iteration   1: 766063.783 ops/s
Iteration   2: 753836.479 ops/s
Iteration   3: 694637.497 ops/s
Iteration   4: 770475.471 ops/s
Iteration   5: 727585.038 ops/s
Iteration   6: 726445.828 ops/s
Iteration   7: 755457.582 ops/s
Iteration   8: 748147.795 ops/s
Iteration   9: 759363.969 ops/s
Iteration  10: 729385.891 ops/s
Iteration  11: 755176.135 ops/s
Iteration  12: 765499.608 ops/s
Iteration  13: 726614.030 ops/s
Iteration  14: 736101.037 ops/s
Iteration  15: 763246.149 ops/s
Iteration  16: 717499.555 ops/s
Iteration  17: 736598.718 ops/s
Iteration  18: 770207.485 ops/s
Iteration  19: 734998.975 ops/s
Iteration  20: 772792.550 ops/s
Iteration  21: 769053.426 ops/s
Iteration  22: 714996.246 ops/s
Iteration  23: 767451.739 ops/s
Iteration  24: 737773.992 ops/s
Iteration  25: 755547.146 ops/s
Iteration  26: 765987.177 ops/s
Iteration  27: 770720.623 ops/s
Iteration  28: 725807.997 ops/s
Iteration  29: 746735.938 ops/s
Iteration  30: 704575.693 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableFutureCancels":
  745626.118 ±(99.9%) 14561.076 ops/s [Average]
  (min, avg, max) = (694637.497, 745626.118, 772792.550), stdev = 21794.334
  CI (99.9%): [731065.043, 760187.194] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score       Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableFutureCancels  thrpt   30  745626.118 ± 14561.076  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 404775.174 ops/s
# Warmup Iteration   2: 586059.351 ops/s
# Warmup Iteration   3: 730391.099 ops/s
# Warmup Iteration   4: 670431.463 ops/s
# Warmup Iteration   5: 678573.075 ops/s
# Warmup Iteration   6: 711974.768 ops/s
# Warmup Iteration   7: 694921.623 ops/s
# Warmup Iteration   8: 723659.715 ops/s
# Warmup Iteration   9: 705911.730 ops/s
# Warmup Iteration  10: 705947.685 ops/s
# Warmup Iteration  11: 731610.122 ops/s
# Warmup Iteration  12: 719858.195 ops/s
# Warmup Iteration  13: 692235.330 ops/s
# Warmup Iteration  14: 739430.967 ops/s
# Warmup Iteration  15: 700650.958 ops/s
# Warmup Iteration  16: 697299.911 ops/s
# Warmup Iteration  17: 730513.956 ops/s
# Warmup Iteration  18: 759704.341 ops/s
# Warmup Iteration  19: 786674.641 ops/s
# Warmup Iteration  20: 731645.258 ops/s
# Warmup Iteration  21: 774489.476 ops/s
# Warmup Iteration  22: 752583.012 ops/s
# Warmup Iteration  23: 740195.872 ops/s
# Warmup Iteration  24: 770382.474 ops/s
# Warmup Iteration  25: 738432.989 ops/s
# Warmup Iteration  26: 754167.439 ops/s
# Warmup Iteration  27: 770414.854 ops/s
# Warmup Iteration  28: 732103.746 ops/s
# Warmup Iteration  29: 779587.514 ops/s
# Warmup Iteration  30: 739459.902 ops/s
Iteration   1: 780547.059 ops/s
Iteration   2: 780507.063 ops/s
Iteration   3: 728909.402 ops/s
Iteration   4: 777356.845 ops/s
Iteration   5: 726665.050 ops/s
Iteration   6: 747027.553 ops/s
Iteration   7: 779933.238 ops/s
Iteration   8: 781962.287 ops/s
Iteration   9: 714661.191 ops/s
Iteration  10: 745842.454 ops/s
Iteration  11: 662091.942 ops/s
Iteration  12: 766047.655 ops/s
Iteration  13: 751269.723 ops/s
Iteration  14: 748474.178 ops/s
Iteration  15: 772890.751 ops/s
Iteration  16: 745019.360 ops/s
Iteration  17: 753164.377 ops/s
Iteration  18: 771412.047 ops/s
Iteration  19: 747697.315 ops/s
Iteration  20: 756198.798 ops/s
Iteration  21: 795792.519 ops/s
Iteration  22: 736862.120 ops/s
Iteration  23: 783485.138 ops/s
Iteration  24: 769464.404 ops/s
Iteration  25: 751494.528 ops/s
Iteration  26: 628965.328 ops/s
Iteration  27: 698795.659 ops/s
Iteration  28: 771664.875 ops/s
Iteration  29: 742524.708 ops/s
Iteration  30: 764288.310 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableFutureCancels":
  749367.196 ±(99.9%) 24058.767 ops/s [Average]
  (min, avg, max) = (628965.328, 749367.196, 795792.519), stdev = 36010.033
  CI (99.9%): [725308.429, 773425.963] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score       Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableFutureCancels  thrpt   30  749367.196 ± 24058.767  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 380091.200 ops/s
# Warmup Iteration   2: 585963.221 ops/s
# Warmup Iteration   3: 693087.672 ops/s
# Warmup Iteration   4: 606752.220 ops/s
# Warmup Iteration   5: 710584.453 ops/s
# Warmup Iteration   6: 561625.837 ops/s
# Warmup Iteration   7: 685619.321 ops/s
# Warmup Iteration   8: 704128.086 ops/s
# Warmup Iteration   9: 693542.667 ops/s
# Warmup Iteration  10: 727225.456 ops/s
# Warmup Iteration  11: 701722.756 ops/s
# Warmup Iteration  12: 688703.519 ops/s
# Warmup Iteration  13: 706014.414 ops/s
# Warmup Iteration  14: 682412.402 ops/s
# Warmup Iteration  15: 688145.347 ops/s
# Warmup Iteration  16: 715390.979 ops/s
# Warmup Iteration  17: 732649.487 ops/s
# Warmup Iteration  18: 743955.555 ops/s
# Warmup Iteration  19: 738133.238 ops/s
# Warmup Iteration  20: 769867.505 ops/s
# Warmup Iteration  21: 729171.525 ops/s
# Warmup Iteration  22: 746312.457 ops/s
# Warmup Iteration  23: 779863.920 ops/s
# Warmup Iteration  24: 699532.895 ops/s
# Warmup Iteration  25: 745829.747 ops/s
# Warmup Iteration  26: 755257.206 ops/s
# Warmup Iteration  27: 705737.640 ops/s
# Warmup Iteration  28: 756615.278 ops/s
# Warmup Iteration  29: 739082.589 ops/s
# Warmup Iteration  30: 728009.696 ops/s
Iteration   1: 781212.182 ops/s
Iteration   2: 703336.693 ops/s
Iteration   3: 775303.930 ops/s
Iteration   4: 773261.690 ops/s
Iteration   5: 725739.123 ops/s
Iteration   6: 748095.083 ops/s
Iteration   7: 730881.533 ops/s
Iteration   8: 758118.640 ops/s
Iteration   9: 719938.935 ops/s
Iteration  10: 723213.401 ops/s
Iteration  11: 758980.314 ops/s
Iteration  12: 739127.618 ops/s
Iteration  13: 759118.363 ops/s
Iteration  14: 717334.820 ops/s
Iteration  15: 742388.919 ops/s
Iteration  16: 738574.396 ops/s
Iteration  17: 733044.338 ops/s
Iteration  18: 750232.604 ops/s
Iteration  19: 741629.780 ops/s
Iteration  20: 769087.758 ops/s
Iteration  21: 754158.109 ops/s
Iteration  22: 728655.002 ops/s
Iteration  23: 753232.587 ops/s
Iteration  24: 719942.999 ops/s
Iteration  25: 737628.776 ops/s
Iteration  26: 758297.340 ops/s
Iteration  27: 726274.286 ops/s
Iteration  28: 754422.563 ops/s
Iteration  29: 726131.834 ops/s
Iteration  30: 779039.430 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableFutureCancels":
  744213.435 ±(99.9%) 13498.022 ops/s [Average]
  (min, avg, max) = (703336.693, 744213.435, 781212.182), stdev = 20203.205
  CI (99.9%): [730715.413, 757711.457] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                  Mode  Cnt       Score       Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableFutureCancels  thrpt   30  744213.435 ± 13498.022  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_unsubscribeFromRetry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_unsubscribeFromRetry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 902520.990 ops/s
# Warmup Iteration   2: 3225971.444 ops/s
# Warmup Iteration   3: 3585072.585 ops/s
# Warmup Iteration   4: 4118688.853 ops/s
# Warmup Iteration   5: 4302838.325 ops/s
# Warmup Iteration   6: 4313863.082 ops/s
# Warmup Iteration   7: 4358929.852 ops/s
# Warmup Iteration   8: 3997877.094 ops/s
# Warmup Iteration   9: 4210603.721 ops/s
# Warmup Iteration  10: 4285455.863 ops/s
# Warmup Iteration  11: 4124908.897 ops/s
# Warmup Iteration  12: 4118084.908 ops/s
# Warmup Iteration  13: 4281010.153 ops/s
# Warmup Iteration  14: 4041308.330 ops/s
# Warmup Iteration  15: 4267289.861 ops/s
# Warmup Iteration  16: 4164549.065 ops/s
# Warmup Iteration  17: 4288053.700 ops/s
# Warmup Iteration  18: 4277434.104 ops/s
# Warmup Iteration  19: 4095365.561 ops/s
# Warmup Iteration  20: 4302573.617 ops/s
# Warmup Iteration  21: 4093853.506 ops/s
# Warmup Iteration  22: 4201742.838 ops/s
# Warmup Iteration  23: 4283141.341 ops/s
# Warmup Iteration  24: 4340030.383 ops/s
# Warmup Iteration  25: 4158194.454 ops/s
# Warmup Iteration  26: 4116998.712 ops/s
# Warmup Iteration  27: 4418077.261 ops/s
# Warmup Iteration  28: 4099698.455 ops/s
# Warmup Iteration  29: 4329282.057 ops/s
# Warmup Iteration  30: 4106451.571 ops/s
Iteration   1: 4262446.565 ops/s
Iteration   2: 4228751.784 ops/s
Iteration   3: 4139623.073 ops/s
Iteration   4: 4332348.451 ops/s
Iteration   5: 4136766.028 ops/s
Iteration   6: 4181972.145 ops/s
Iteration   7: 4082158.094 ops/s
Iteration   8: 4222361.972 ops/s
Iteration   9: 4222807.998 ops/s
Iteration  10: 4128149.166 ops/s
Iteration  11: 4387308.929 ops/s
Iteration  12: 4303848.139 ops/s
Iteration  13: 4094367.908 ops/s
Iteration  14: 4193467.247 ops/s
Iteration  15: 4245685.964 ops/s
Iteration  16: 4099609.757 ops/s
Iteration  17: 4278132.505 ops/s
Iteration  18: 4002388.088 ops/s
Iteration  19: 4155405.526 ops/s
Iteration  20: 4325983.901 ops/s
Iteration  21: 3620138.765 ops/s
Iteration  22: 4004775.921 ops/s
Iteration  23: 4317543.740 ops/s
Iteration  24: 4187046.775 ops/s
Iteration  25: 4191020.195 ops/s
Iteration  26: 4122560.389 ops/s
Iteration  27: 4325308.921 ops/s
Iteration  28: 4194745.647 ops/s
Iteration  29: 4186702.792 ops/s
Iteration  30: 4333221.602 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryWithPredicateTest._Benchmark.benchmark_unsubscribeFromRetry":
  4183554.933 ±(99.9%) 96299.624 ops/s [Average]
  (min, avg, max) = (3620138.765, 4183554.933, 4387308.929), stdev = 144136.755
  CI (99.9%): [4087255.309, 4279854.557] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableRetryWithPredicateTest._Benchmark.benchmark_unsubscribeFromRetry  thrpt   30  4183554.933 ± 96299.624  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 606000.622 ops/s
# Warmup Iteration   2: 2147413.311 ops/s
# Warmup Iteration   3: 2698877.234 ops/s
# Warmup Iteration   4: 2985457.960 ops/s
# Warmup Iteration   5: 3109428.969 ops/s
# Warmup Iteration   6: 2952336.365 ops/s
# Warmup Iteration   7: 3085656.760 ops/s
# Warmup Iteration   8: 3073011.484 ops/s
# Warmup Iteration   9: 2956901.392 ops/s
# Warmup Iteration  10: 3138783.543 ops/s
# Warmup Iteration  11: 2869811.678 ops/s
# Warmup Iteration  12: 3094089.568 ops/s
# Warmup Iteration  13: 2971263.011 ops/s
# Warmup Iteration  14: 3074731.611 ops/s
# Warmup Iteration  15: 2988310.894 ops/s
# Warmup Iteration  16: 2986346.394 ops/s
# Warmup Iteration  17: 3192820.146 ops/s
# Warmup Iteration  18: 2967706.185 ops/s
# Warmup Iteration  19: 2998239.091 ops/s
# Warmup Iteration  20: 3081449.649 ops/s
# Warmup Iteration  21: 3113282.649 ops/s
# Warmup Iteration  22: 3068397.755 ops/s
# Warmup Iteration  23: 3119084.347 ops/s
# Warmup Iteration  24: 3096386.815 ops/s
# Warmup Iteration  25: 2969096.887 ops/s
# Warmup Iteration  26: 3072283.211 ops/s
# Warmup Iteration  27: 3113749.855 ops/s
# Warmup Iteration  28: 3011285.275 ops/s
# Warmup Iteration  29: 3026632.628 ops/s
# Warmup Iteration  30: 2930052.099 ops/s
Iteration   1: 3095834.881 ops/s
Iteration   2: 2981698.117 ops/s
Iteration   3: 3090897.550 ops/s
Iteration   4: 3007944.443 ops/s
Iteration   5: 2970399.506 ops/s
Iteration   6: 3107839.706 ops/s
Iteration   7: 3010123.218 ops/s
Iteration   8: 3106901.582 ops/s
Iteration   9: 3018656.205 ops/s
Iteration  10: 3061484.645 ops/s
Iteration  11: 3058139.135 ops/s
Iteration  12: 3085710.857 ops/s
Iteration  13: 3033734.523 ops/s
Iteration  14: 3132657.751 ops/s
Iteration  15: 2931431.227 ops/s
Iteration  16: 3127164.064 ops/s
Iteration  17: 3045598.838 ops/s
Iteration  18: 2898616.636 ops/s
Iteration  19: 3065856.097 ops/s
Iteration  20: 3174007.351 ops/s
Iteration  21: 3148139.611 ops/s
Iteration  22: 2951919.275 ops/s
Iteration  23: 3144759.852 ops/s
Iteration  24: 2988900.417 ops/s
Iteration  25: 3001856.803 ops/s
Iteration  26: 3094736.760 ops/s
Iteration  27: 2961282.007 ops/s
Iteration  28: 3074888.994 ops/s
Iteration  29: 2925064.745 ops/s
Iteration  30: 3066851.585 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext":
  3045436.546 ±(99.9%) 48510.908 ops/s [Average]
  (min, avg, max) = (2898616.636, 3045436.546, 3174007.351), stdev = 72608.848
  CI (99.9%): [2996925.638, 3093947.454] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnNext  thrpt   30  3045436.546 ± 48510.908  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_mutableWithSelector$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_mutableWithSelector

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.790 ops/s
# Warmup Iteration   2: 39033.417 ops/s
# Warmup Iteration   3: 95039.984 ops/s
# Warmup Iteration   4: 165889.879 ops/s
# Warmup Iteration   5: 212220.038 ops/s
# Warmup Iteration   6: 496192.065 ops/s
# Warmup Iteration   7: 483298.275 ops/s
# Warmup Iteration   8: 483985.303 ops/s
# Warmup Iteration   9: 470665.983 ops/s
# Warmup Iteration  10: 480955.032 ops/s
# Warmup Iteration  11: 473736.658 ops/s
# Warmup Iteration  12: 493091.828 ops/s
# Warmup Iteration  13: 490088.552 ops/s
# Warmup Iteration  14: 492647.529 ops/s
# Warmup Iteration  15: 476184.748 ops/s
# Warmup Iteration  16: 481195.319 ops/s
# Warmup Iteration  17: 486324.075 ops/s
# Warmup Iteration  18: 485763.071 ops/s
# Warmup Iteration  19: 488058.852 ops/s
# Warmup Iteration  20: 499285.126 ops/s
# Warmup Iteration  21: 491375.195 ops/s
# Warmup Iteration  22: 498138.583 ops/s
# Warmup Iteration  23: 491715.928 ops/s
# Warmup Iteration  24: 490200.490 ops/s
# Warmup Iteration  25: 509491.604 ops/s
# Warmup Iteration  26: 477701.178 ops/s
# Warmup Iteration  27: 478031.787 ops/s
# Warmup Iteration  28: 503533.467 ops/s
# Warmup Iteration  29: 479731.373 ops/s
# Warmup Iteration  30: 490623.134 ops/s
Iteration   1: 489909.989 ops/s
Iteration   2: 489760.672 ops/s
Iteration   3: 509119.892 ops/s
Iteration   4: 485078.816 ops/s
Iteration   5: 492391.094 ops/s
Iteration   6: 495362.946 ops/s
Iteration   7: 484573.842 ops/s
Iteration   8: 496242.270 ops/s
Iteration   9: 480594.666 ops/s
Iteration  10: 485465.573 ops/s
Iteration  11: 478589.370 ops/s
Iteration  12: 487790.728 ops/s
Iteration  13: 483351.351 ops/s
Iteration  14: 498427.819 ops/s
Iteration  15: 448549.668 ops/s
Iteration  16: 453197.283 ops/s
Iteration  17: 508708.263 ops/s
Iteration  18: 496650.739 ops/s
Iteration  19: 478985.551 ops/s
Iteration  20: 510228.236 ops/s
Iteration  21: 478883.033 ops/s
Iteration  22: 497096.555 ops/s
Iteration  23: 483934.016 ops/s
Iteration  24: 483502.431 ops/s
Iteration  25: 512348.884 ops/s
Iteration  26: 477827.563 ops/s
Iteration  27: 494164.960 ops/s
Iteration  28: 477398.408 ops/s
Iteration  29: 489049.850 ops/s
Iteration  30: 511843.681 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDistinctUntilChangedTest._Benchmark.benchmark_mutableWithSelector":
  488634.272 ±(99.9%) 9885.006 ops/s [Average]
  (min, avg, max) = (448549.668, 488634.272, 512348.884), stdev = 14795.413
  CI (99.9%): [478749.266, 498519.278] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
ObservableDistinctUntilChangedTest._Benchmark.benchmark_mutableWithSelector  thrpt   30  488634.272 ± 9885.006  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_cancelAsFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_cancelAsFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 746485.633 ops/s
# Warmup Iteration   2: 2975387.908 ops/s
# Warmup Iteration   3: 3287528.004 ops/s
# Warmup Iteration   4: 3630174.959 ops/s
# Warmup Iteration   5: 3860982.360 ops/s
# Warmup Iteration   6: 3813565.979 ops/s
# Warmup Iteration   7: 3728309.827 ops/s
# Warmup Iteration   8: 3791010.876 ops/s
# Warmup Iteration   9: 3843847.965 ops/s
# Warmup Iteration  10: 3733641.373 ops/s
# Warmup Iteration  11: 3733421.584 ops/s
# Warmup Iteration  12: 3908441.712 ops/s
# Warmup Iteration  13: 3680526.724 ops/s
# Warmup Iteration  14: 3973411.186 ops/s
# Warmup Iteration  15: 3820924.266 ops/s
# Warmup Iteration  16: 3762164.744 ops/s
# Warmup Iteration  17: 3982653.725 ops/s
# Warmup Iteration  18: 3959895.636 ops/s
# Warmup Iteration  19: 3687794.967 ops/s
# Warmup Iteration  20: 3916920.955 ops/s
# Warmup Iteration  21: 3703024.495 ops/s
# Warmup Iteration  22: 3916835.230 ops/s
# Warmup Iteration  23: 3648123.381 ops/s
# Warmup Iteration  24: 3756530.503 ops/s
# Warmup Iteration  25: 3984871.286 ops/s
# Warmup Iteration  26: 3712256.028 ops/s
# Warmup Iteration  27: 3898053.193 ops/s
# Warmup Iteration  28: 3785323.473 ops/s
# Warmup Iteration  29: 3865042.858 ops/s
# Warmup Iteration  30: 3889578.460 ops/s
Iteration   1: 3781165.640 ops/s
Iteration   2: 3833764.316 ops/s
Iteration   3: 3753232.992 ops/s
Iteration   4: 3878733.624 ops/s
Iteration   5: 3721346.133 ops/s
Iteration   6: 3830657.806 ops/s
Iteration   7: 3875952.889 ops/s
Iteration   8: 3787141.723 ops/s
Iteration   9: 3869108.181 ops/s
Iteration  10: 3832391.259 ops/s
Iteration  11: 3866255.097 ops/s
Iteration  12: 3856459.787 ops/s
Iteration  13: 3778653.431 ops/s
Iteration  14: 3944190.814 ops/s
Iteration  15: 3739574.348 ops/s
Iteration  16: 3781544.988 ops/s
Iteration  17: 3951203.393 ops/s
Iteration  18: 4008429.011 ops/s
Iteration  19: 3736636.848 ops/s
Iteration  20: 3893105.821 ops/s
Iteration  21: 3793931.727 ops/s
Iteration  22: 3850403.339 ops/s
Iteration  23: 3801151.708 ops/s
Iteration  24: 3867215.848 ops/s
Iteration  25: 3940913.091 ops/s
Iteration  26: 3734846.663 ops/s
Iteration  27: 3916390.604 ops/s
Iteration  28: 3751993.594 ops/s
Iteration  29: 3776231.696 ops/s
Iteration  30: 3979732.227 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_cancelAsFlowable":
  3837745.287 ±(99.9%) 52306.216 ops/s [Average]
  (min, avg, max) = (3721346.133, 3837745.287, 4008429.011), stdev = 78289.487
  CI (99.9%): [3785439.071, 3890051.502] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableSingleTest._Benchmark.benchmark_cancelAsFlowable  thrpt   30  3837745.287 ± 52306.216  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noSubscriptionIfOtherErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noSubscriptionIfOtherErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94517.474 ops/s
# Warmup Iteration   2: 267402.217 ops/s
# Warmup Iteration   3: 296806.670 ops/s
# Warmup Iteration   4: 328979.095 ops/s
# Warmup Iteration   5: 322273.831 ops/s
# Warmup Iteration   6: 326250.325 ops/s
# Warmup Iteration   7: 336199.199 ops/s
# Warmup Iteration   8: 322790.205 ops/s
# Warmup Iteration   9: 317950.545 ops/s
# Warmup Iteration  10: 321959.278 ops/s
# Warmup Iteration  11: 330048.418 ops/s
# Warmup Iteration  12: 315246.039 ops/s
# Warmup Iteration  13: 331300.970 ops/s
# Warmup Iteration  14: 325678.440 ops/s
# Warmup Iteration  15: 337822.263 ops/s
# Warmup Iteration  16: 315641.335 ops/s
# Warmup Iteration  17: 348419.475 ops/s
# Warmup Iteration  18: 344386.333 ops/s
# Warmup Iteration  19: 349874.693 ops/s
# Warmup Iteration  20: 335272.439 ops/s
# Warmup Iteration  21: 346580.222 ops/s
# Warmup Iteration  22: 338494.038 ops/s
# Warmup Iteration  23: 339202.394 ops/s
# Warmup Iteration  24: 352620.802 ops/s
# Warmup Iteration  25: 346289.934 ops/s
# Warmup Iteration  26: 330821.647 ops/s
# Warmup Iteration  27: 358829.824 ops/s
# Warmup Iteration  28: 345984.121 ops/s
# Warmup Iteration  29: 332801.653 ops/s
# Warmup Iteration  30: 356068.183 ops/s
Iteration   1: 338424.360 ops/s
Iteration   2: 345283.027 ops/s
Iteration   3: 355210.062 ops/s
Iteration   4: 326813.420 ops/s
Iteration   5: 352271.548 ops/s
Iteration   6: 343370.923 ops/s
Iteration   7: 342902.079 ops/s
Iteration   8: 346014.902 ops/s
Iteration   9: 337999.868 ops/s
Iteration  10: 296218.284 ops/s
Iteration  11: 329946.992 ops/s
Iteration  12: 335305.667 ops/s
Iteration  13: 360864.456 ops/s
Iteration  14: 340430.971 ops/s
Iteration  15: 339357.071 ops/s
Iteration  16: 353420.647 ops/s
Iteration  17: 339325.946 ops/s
Iteration  18: 350057.770 ops/s
Iteration  19: 354262.378 ops/s
Iteration  20: 344083.968 ops/s
Iteration  21: 348530.108 ops/s
Iteration  22: 335204.051 ops/s
Iteration  23: 354668.518 ops/s
Iteration  24: 346136.678 ops/s
Iteration  25: 342536.808 ops/s
Iteration  26: 362218.896 ops/s
Iteration  27: 335345.297 ops/s
Iteration  28: 349051.755 ops/s
Iteration  29: 337083.730 ops/s
Iteration  30: 344876.101 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noSubscriptionIfOtherErrors":
  342907.209 ±(99.9%) 8187.279 ops/s [Average]
  (min, avg, max) = (296218.284, 342907.209, 362218.896), stdev = 12254.335
  CI (99.9%): [334719.930, 351094.488] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_noSubscriptionIfOtherErrors  thrpt   30  342907.209 ± 8187.279  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_mainCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_mainCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 416560.519 ops/s
# Warmup Iteration   2: 1798284.685 ops/s
# Warmup Iteration   3: 2424524.253 ops/s
# Warmup Iteration   4: 3032172.356 ops/s
# Warmup Iteration   5: 2905377.520 ops/s
# Warmup Iteration   6: 2991378.213 ops/s
# Warmup Iteration   7: 2904560.239 ops/s
# Warmup Iteration   8: 2973886.927 ops/s
# Warmup Iteration   9: 3006198.381 ops/s
# Warmup Iteration  10: 2920514.843 ops/s
# Warmup Iteration  11: 2973264.247 ops/s
# Warmup Iteration  12: 3023799.671 ops/s
# Warmup Iteration  13: 2896174.433 ops/s
# Warmup Iteration  14: 2976862.079 ops/s
# Warmup Iteration  15: 2921200.703 ops/s
# Warmup Iteration  16: 2988362.300 ops/s
# Warmup Iteration  17: 2940202.998 ops/s
# Warmup Iteration  18: 2862945.540 ops/s
# Warmup Iteration  19: 3084959.461 ops/s
# Warmup Iteration  20: 2956516.309 ops/s
# Warmup Iteration  21: 2962991.968 ops/s
# Warmup Iteration  22: 3073053.018 ops/s
# Warmup Iteration  23: 3087866.889 ops/s
# Warmup Iteration  24: 2849465.230 ops/s
# Warmup Iteration  25: 2914856.535 ops/s
# Warmup Iteration  26: 3025501.671 ops/s
# Warmup Iteration  27: 2894588.643 ops/s
# Warmup Iteration  28: 2915562.658 ops/s
# Warmup Iteration  29: 3028814.695 ops/s
# Warmup Iteration  30: 3135955.831 ops/s
Iteration   1: 2883084.856 ops/s
Iteration   2: 3070202.396 ops/s
Iteration   3: 3092703.351 ops/s
Iteration   4: 2876815.609 ops/s
Iteration   5: 3098264.469 ops/s
Iteration   6: 2850946.463 ops/s
Iteration   7: 3059796.989 ops/s
Iteration   8: 2947566.690 ops/s
Iteration   9: 3000060.948 ops/s
Iteration  10: 3019038.294 ops/s
Iteration  11: 3018661.450 ops/s
Iteration  12: 3097296.001 ops/s
Iteration  13: 2845423.540 ops/s
Iteration  14: 2977517.845 ops/s
Iteration  15: 3026938.286 ops/s
Iteration  16: 2933092.273 ops/s
Iteration  17: 3022560.381 ops/s
Iteration  18: 2925661.113 ops/s
Iteration  19: 2942826.515 ops/s
Iteration  20: 3086743.568 ops/s
Iteration  21: 2867142.023 ops/s
Iteration  22: 2963741.751 ops/s
Iteration  23: 2968007.376 ops/s
Iteration  24: 3053381.193 ops/s
Iteration  25: 2932138.532 ops/s
Iteration  26: 2963480.261 ops/s
Iteration  27: 3032243.036 ops/s
Iteration  28: 2962982.932 ops/s
Iteration  29: 2964869.575 ops/s
Iteration  30: 3002733.018 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_mainCompletes":
  2982864.024 ±(99.9%) 49748.711 ops/s [Average]
  (min, avg, max) = (2845423.540, 2982864.024, 3098264.469), stdev = 74461.535
  CI (99.9%): [2933115.313, 3032612.736] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
MaybeTakeUntilPublisherTest._Benchmark.benchmark_mainCompletes  thrpt   30  2982864.024 ± 49748.711  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_disposeOnArrival2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_disposeOnArrival2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 309878.733 ops/s
# Warmup Iteration   2: 1295054.149 ops/s
# Warmup Iteration   3: 2122487.632 ops/s
# Warmup Iteration   4: 1853921.274 ops/s
# Warmup Iteration   5: 1949649.454 ops/s
# Warmup Iteration   6: 2049618.713 ops/s
# Warmup Iteration   7: 2088409.031 ops/s
# Warmup Iteration   8: 2128328.208 ops/s
# Warmup Iteration   9: 2016201.153 ops/s
# Warmup Iteration  10: 2098470.074 ops/s
# Warmup Iteration  11: 2030101.547 ops/s
# Warmup Iteration  12: 2088672.413 ops/s
# Warmup Iteration  13: 2056242.940 ops/s
# Warmup Iteration  14: 2089170.514 ops/s
# Warmup Iteration  15: 2091740.438 ops/s
# Warmup Iteration  16: 2095101.062 ops/s
# Warmup Iteration  17: 2057923.449 ops/s
# Warmup Iteration  18: 2136968.607 ops/s
# Warmup Iteration  19: 2039681.010 ops/s
# Warmup Iteration  20: 2124317.301 ops/s
# Warmup Iteration  21: 2003342.583 ops/s
# Warmup Iteration  22: 2146467.694 ops/s
# Warmup Iteration  23: 2096813.379 ops/s
# Warmup Iteration  24: 2028051.970 ops/s
# Warmup Iteration  25: 2158799.574 ops/s
# Warmup Iteration  26: 2141501.309 ops/s
# Warmup Iteration  27: 2025898.647 ops/s
# Warmup Iteration  28: 2108217.766 ops/s
# Warmup Iteration  29: 2153381.250 ops/s
# Warmup Iteration  30: 2142267.201 ops/s
Iteration   1: 2085434.911 ops/s
Iteration   2: 2126082.612 ops/s
Iteration   3: 2082026.867 ops/s
Iteration   4: 2074350.681 ops/s
Iteration   5: 1818184.625 ops/s
Iteration   6: 1988559.360 ops/s
Iteration   7: 2121486.765 ops/s
Iteration   8: 2082810.483 ops/s
Iteration   9: 2076722.741 ops/s
Iteration  10: 2159309.555 ops/s
Iteration  11: 2012165.379 ops/s
Iteration  12: 2057298.653 ops/s
Iteration  13: 2049582.900 ops/s
Iteration  14: 2086489.068 ops/s
Iteration  15: 2039869.837 ops/s
Iteration  16: 2077721.830 ops/s
Iteration  17: 2057864.668 ops/s
Iteration  18: 2169221.539 ops/s
Iteration  19: 2097746.272 ops/s
Iteration  20: 2021333.314 ops/s
Iteration  21: 2207365.047 ops/s
Iteration  22: 1996400.584 ops/s
Iteration  23: 2158980.488 ops/s
Iteration  24: 2064374.643 ops/s
Iteration  25: 2074608.345 ops/s
Iteration  26: 2122896.745 ops/s
Iteration  27: 2061510.525 ops/s
Iteration  28: 2076044.915 ops/s
Iteration  29: 2156071.382 ops/s
Iteration  30: 2061302.709 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_disposeOnArrival2":
  2075460.581 ±(99.9%) 47156.684 ops/s [Average]
  (min, avg, max) = (1818184.625, 2075460.581, 2207365.047), stdev = 70581.909
  CI (99.9%): [2028303.898, 2122617.265] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableCacheTest._Benchmark.benchmark_disposeOnArrival2  thrpt   30  2075460.581 ± 47156.684  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_dispose2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_dispose2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 475815.413 ops/s
# Warmup Iteration   2: 2051678.325 ops/s
# Warmup Iteration   3: 2500362.600 ops/s
# Warmup Iteration   4: 2879051.233 ops/s
# Warmup Iteration   5: 2965131.468 ops/s
# Warmup Iteration   6: 2721350.629 ops/s
# Warmup Iteration   7: 2954522.664 ops/s
# Warmup Iteration   8: 2925182.112 ops/s
# Warmup Iteration   9: 2783840.587 ops/s
# Warmup Iteration  10: 2884984.821 ops/s
# Warmup Iteration  11: 2790314.037 ops/s
# Warmup Iteration  12: 2978817.985 ops/s
# Warmup Iteration  13: 2847552.673 ops/s
# Warmup Iteration  14: 2914299.302 ops/s
# Warmup Iteration  15: 2897783.251 ops/s
# Warmup Iteration  16: 2971740.211 ops/s
# Warmup Iteration  17: 2834665.391 ops/s
# Warmup Iteration  18: 2911599.083 ops/s
# Warmup Iteration  19: 2993166.968 ops/s
# Warmup Iteration  20: 2840806.107 ops/s
# Warmup Iteration  21: 2905438.046 ops/s
# Warmup Iteration  22: 2867530.008 ops/s
# Warmup Iteration  23: 2929639.276 ops/s
# Warmup Iteration  24: 3005378.136 ops/s
# Warmup Iteration  25: 2825149.497 ops/s
# Warmup Iteration  26: 2914553.307 ops/s
# Warmup Iteration  27: 2952749.220 ops/s
# Warmup Iteration  28: 2933392.410 ops/s
# Warmup Iteration  29: 3024421.859 ops/s
# Warmup Iteration  30: 2953265.334 ops/s
Iteration   1: 2820020.602 ops/s
Iteration   2: 2869362.100 ops/s
Iteration   3: 2924719.671 ops/s
Iteration   4: 2724942.182 ops/s
Iteration   5: 2843333.211 ops/s
Iteration   6: 2935310.607 ops/s
Iteration   7: 2883927.760 ops/s
Iteration   8: 2900133.862 ops/s
Iteration   9: 2887137.369 ops/s
Iteration  10: 2950690.664 ops/s
Iteration  11: 2899516.271 ops/s
Iteration  12: 2918890.843 ops/s
Iteration  13: 2950383.114 ops/s
Iteration  14: 2838410.677 ops/s
Iteration  15: 2950831.134 ops/s
Iteration  16: 2837154.129 ops/s
Iteration  17: 2889778.850 ops/s
Iteration  18: 2985916.564 ops/s
Iteration  19: 2844533.084 ops/s
Iteration  20: 2916595.546 ops/s
Iteration  21: 2866115.007 ops/s
Iteration  22: 2934460.968 ops/s
Iteration  23: 2973693.839 ops/s
Iteration  24: 2884501.795 ops/s
Iteration  25: 2906196.274 ops/s
Iteration  26: 3042601.832 ops/s
Iteration  27: 2887634.743 ops/s
Iteration  28: 2990872.532 ops/s
Iteration  29: 3047381.220 ops/s
Iteration  30: 2877003.250 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_dispose2":
  2906068.323 ±(99.9%) 44393.898 ops/s [Average]
  (min, avg, max) = (2724942.182, 2906068.323, 3047381.220), stdev = 66446.702
  CI (99.9%): [2861674.425, 2950462.222] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
MaybeTimeoutTest._Benchmark.benchmark_dispose2  thrpt   30  2906068.323 ± 44393.898  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 648799.702 ops/s
# Warmup Iteration   2: 3272102.133 ops/s
# Warmup Iteration   3: 4087027.393 ops/s
# Warmup Iteration   4: 4374007.836 ops/s
# Warmup Iteration   5: 4809972.266 ops/s
# Warmup Iteration   6: 4787637.313 ops/s
# Warmup Iteration   7: 4577593.531 ops/s
# Warmup Iteration   8: 4802795.372 ops/s
# Warmup Iteration   9: 4666238.238 ops/s
# Warmup Iteration  10: 4517956.095 ops/s
# Warmup Iteration  11: 4607169.737 ops/s
# Warmup Iteration  12: 4585016.854 ops/s
# Warmup Iteration  13: 4677266.793 ops/s
# Warmup Iteration  14: 4765955.839 ops/s
# Warmup Iteration  15: 4520757.317 ops/s
# Warmup Iteration  16: 4742283.732 ops/s
# Warmup Iteration  17: 4593939.918 ops/s
# Warmup Iteration  18: 4706246.234 ops/s
# Warmup Iteration  19: 4625305.041 ops/s
# Warmup Iteration  20: 4631249.102 ops/s
# Warmup Iteration  21: 4811662.494 ops/s
# Warmup Iteration  22: 4623871.201 ops/s
# Warmup Iteration  23: 4597406.887 ops/s
# Warmup Iteration  24: 4638382.006 ops/s
# Warmup Iteration  25: 4809092.502 ops/s
# Warmup Iteration  26: 4415575.295 ops/s
# Warmup Iteration  27: 4662009.155 ops/s
# Warmup Iteration  28: 4537824.523 ops/s
# Warmup Iteration  29: 4255855.133 ops/s
# Warmup Iteration  30: 3873452.186 ops/s
Iteration   1: 4550866.831 ops/s
Iteration   2: 4474675.429 ops/s
Iteration   3: 4789778.116 ops/s
Iteration   4: 4565411.175 ops/s
Iteration   5: 4716941.983 ops/s
Iteration   6: 4782754.793 ops/s
Iteration   7: 4493570.303 ops/s
Iteration   8: 4748871.099 ops/s
Iteration   9: 4565997.568 ops/s
Iteration  10: 4659392.968 ops/s
Iteration  11: 4572496.649 ops/s
Iteration  12: 4591998.080 ops/s
Iteration  13: 4599094.294 ops/s
Iteration  14: 4470736.841 ops/s
Iteration  15: 4573955.647 ops/s
Iteration  16: 4788682.583 ops/s
Iteration  17: 4953356.959 ops/s
Iteration  18: 4600191.339 ops/s
Iteration  19: 4895924.657 ops/s
Iteration  20: 4498443.182 ops/s
Iteration  21: 4678991.954 ops/s
Iteration  22: 4615789.340 ops/s
Iteration  23: 4671359.069 ops/s
Iteration  24: 4739717.147 ops/s
Iteration  25: 4535797.464 ops/s
Iteration  26: 4788181.604 ops/s
Iteration  27: 4543159.977 ops/s
Iteration  28: 4484317.920 ops/s
Iteration  29: 4739598.987 ops/s
Iteration  30: 4514759.822 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextDispose":
  4640160.459 ±(99.9%) 86201.307 ops/s [Average]
  (min, avg, max) = (4470736.841, 4640160.459, 4953356.959), stdev = 129022.068
  CI (99.9%): [4553959.152, 4726361.766] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorNextDispose  thrpt   30  4640160.459 ± 86201.307  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 629474.686 ops/s
# Warmup Iteration   2: 2286971.036 ops/s
# Warmup Iteration   3: 2730948.981 ops/s
# Warmup Iteration   4: 3113209.210 ops/s
# Warmup Iteration   5: 2991998.214 ops/s
# Warmup Iteration   6: 3027512.848 ops/s
# Warmup Iteration   7: 3136973.730 ops/s
# Warmup Iteration   8: 3037015.836 ops/s
# Warmup Iteration   9: 3091859.705 ops/s
# Warmup Iteration  10: 3077874.285 ops/s
# Warmup Iteration  11: 3007939.512 ops/s
# Warmup Iteration  12: 3156425.862 ops/s
# Warmup Iteration  13: 2990527.410 ops/s
# Warmup Iteration  14: 3111318.965 ops/s
# Warmup Iteration  15: 2937387.054 ops/s
# Warmup Iteration  16: 3083099.700 ops/s
# Warmup Iteration  17: 3198544.055 ops/s
# Warmup Iteration  18: 3164414.268 ops/s
# Warmup Iteration  19: 3026175.991 ops/s
# Warmup Iteration  20: 3133434.340 ops/s
# Warmup Iteration  21: 3008947.263 ops/s
# Warmup Iteration  22: 3135365.487 ops/s
# Warmup Iteration  23: 3177468.018 ops/s
# Warmup Iteration  24: 3012158.760 ops/s
# Warmup Iteration  25: 2975246.264 ops/s
# Warmup Iteration  26: 3184893.571 ops/s
# Warmup Iteration  27: 3028005.929 ops/s
# Warmup Iteration  28: 3107824.840 ops/s
# Warmup Iteration  29: 3055563.513 ops/s
# Warmup Iteration  30: 3058774.473 ops/s
Iteration   1: 3183943.980 ops/s
Iteration   2: 3013377.978 ops/s
Iteration   3: 3062364.294 ops/s
Iteration   4: 3136730.097 ops/s
Iteration   5: 3092637.410 ops/s
Iteration   6: 3046412.766 ops/s
Iteration   7: 2976045.824 ops/s
Iteration   8: 3217876.144 ops/s
Iteration   9: 2946753.548 ops/s
Iteration  10: 3000415.711 ops/s
Iteration  11: 3066998.246 ops/s
Iteration  12: 3066855.734 ops/s
Iteration  13: 3136797.996 ops/s
Iteration  14: 3182591.863 ops/s
Iteration  15: 3148030.504 ops/s
Iteration  16: 3032249.004 ops/s
Iteration  17: 3144620.416 ops/s
Iteration  18: 2912461.451 ops/s
Iteration  19: 3145646.430 ops/s
Iteration  20: 3113943.412 ops/s
Iteration  21: 2921875.872 ops/s
Iteration  22: 3109337.444 ops/s
Iteration  23: 3010128.095 ops/s
Iteration  24: 3074787.765 ops/s
Iteration  25: 2981029.917 ops/s
Iteration  26: 2992201.933 ops/s
Iteration  27: 3108850.992 ops/s
Iteration  28: 3046248.921 ops/s
Iteration  29: 2979230.700 ops/s
Iteration  30: 3026276.695 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_mainComplete":
  3062557.371 ±(99.9%) 53626.407 ops/s [Average]
  (min, avg, max) = (2912461.451, 3062557.371, 3217876.144), stdev = 80265.488
  CI (99.9%): [3008930.964, 3116183.778] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
MaybeTimeoutPublisherTest._Benchmark.benchmark_mainComplete  thrpt   30  3062557.371 ± 53626.407  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 510448.343 ops/s
# Warmup Iteration   2: 1885581.362 ops/s
# Warmup Iteration   3: 2337328.098 ops/s
# Warmup Iteration   4: 2796209.262 ops/s
# Warmup Iteration   5: 2868959.892 ops/s
# Warmup Iteration   6: 2852431.051 ops/s
# Warmup Iteration   7: 2849756.486 ops/s
# Warmup Iteration   8: 2792391.740 ops/s
# Warmup Iteration   9: 2694588.027 ops/s
# Warmup Iteration  10: 2836132.937 ops/s
# Warmup Iteration  11: 2744196.560 ops/s
# Warmup Iteration  12: 2769082.196 ops/s
# Warmup Iteration  13: 2778542.153 ops/s
# Warmup Iteration  14: 2829242.646 ops/s
# Warmup Iteration  15: 2771494.508 ops/s
# Warmup Iteration  16: 2822068.293 ops/s
# Warmup Iteration  17: 2805674.370 ops/s
# Warmup Iteration  18: 2797251.475 ops/s
# Warmup Iteration  19: 2808962.485 ops/s
# Warmup Iteration  20: 2793096.490 ops/s
# Warmup Iteration  21: 2774562.172 ops/s
# Warmup Iteration  22: 2883832.064 ops/s
# Warmup Iteration  23: 2735182.377 ops/s
# Warmup Iteration  24: 2298949.798 ops/s
# Warmup Iteration  25: 2883881.393 ops/s
# Warmup Iteration  26: 2775476.141 ops/s
# Warmup Iteration  27: 2878108.809 ops/s
# Warmup Iteration  28: 2723896.076 ops/s
# Warmup Iteration  29: 2702096.558 ops/s
# Warmup Iteration  30: 2877293.548 ops/s
Iteration   1: 2741835.197 ops/s
Iteration   2: 2566382.407 ops/s
Iteration   3: 2772725.380 ops/s
Iteration   4: 2731991.243 ops/s
Iteration   5: 2761744.618 ops/s
Iteration   6: 2780191.762 ops/s
Iteration   7: 2859451.532 ops/s
Iteration   8: 2792722.359 ops/s
Iteration   9: 2781674.270 ops/s
Iteration  10: 2823243.265 ops/s
Iteration  11: 2750833.066 ops/s
Iteration  12: 2902474.506 ops/s
Iteration  13: 2714301.219 ops/s
Iteration  14: 2729339.494 ops/s
Iteration  15: 2753593.948 ops/s
Iteration  16: 2687071.017 ops/s
Iteration  17: 2798459.460 ops/s
Iteration  18: 2872909.445 ops/s
Iteration  19: 2772364.687 ops/s
Iteration  20: 2908878.661 ops/s
Iteration  21: 2734267.315 ops/s
Iteration  22: 2848841.926 ops/s
Iteration  23: 2739767.682 ops/s
Iteration  24: 2822067.461 ops/s
Iteration  25: 2750255.366 ops/s
Iteration  26: 2750362.066 ops/s
Iteration  27: 2867177.595 ops/s
Iteration  28: 2755962.843 ops/s
Iteration  29: 2838961.875 ops/s
Iteration  30: 2735783.053 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess":
  2778187.824 ±(99.9%) 46640.655 ops/s [Average]
  (min, avg, max) = (2566382.407, 2778187.824, 2908878.661), stdev = 69809.542
  CI (99.9%): [2731547.169, 2824828.479] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess  thrpt   30  2778187.824 ± 46640.655  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_dispose2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_dispose2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 579587.532 ops/s
# Warmup Iteration   2: 2239834.628 ops/s
# Warmup Iteration   3: 2800505.575 ops/s
# Warmup Iteration   4: 3141863.506 ops/s
# Warmup Iteration   5: 3214476.898 ops/s
# Warmup Iteration   6: 3096562.705 ops/s
# Warmup Iteration   7: 3135217.334 ops/s
# Warmup Iteration   8: 3166078.750 ops/s
# Warmup Iteration   9: 3046037.855 ops/s
# Warmup Iteration  10: 3239522.874 ops/s
# Warmup Iteration  11: 3025638.602 ops/s
# Warmup Iteration  12: 3200634.139 ops/s
# Warmup Iteration  13: 3022424.562 ops/s
# Warmup Iteration  14: 3025011.185 ops/s
# Warmup Iteration  15: 3307197.743 ops/s
# Warmup Iteration  16: 3015567.496 ops/s
# Warmup Iteration  17: 3212182.397 ops/s
# Warmup Iteration  18: 3135588.932 ops/s
# Warmup Iteration  19: 3048169.113 ops/s
# Warmup Iteration  20: 3249195.473 ops/s
# Warmup Iteration  21: 3060359.147 ops/s
# Warmup Iteration  22: 3188000.952 ops/s
# Warmup Iteration  23: 3074428.393 ops/s
# Warmup Iteration  24: 3080716.476 ops/s
# Warmup Iteration  25: 3269765.011 ops/s
# Warmup Iteration  26: 3088128.378 ops/s
# Warmup Iteration  27: 3088658.735 ops/s
# Warmup Iteration  28: 3117014.281 ops/s
# Warmup Iteration  29: 3280289.135 ops/s
# Warmup Iteration  30: 3190310.094 ops/s
Iteration   1: 3110626.106 ops/s
Iteration   2: 3056171.321 ops/s
Iteration   3: 3205867.525 ops/s
Iteration   4: 3122468.369 ops/s
Iteration   5: 3078300.030 ops/s
Iteration   6: 3189747.249 ops/s
Iteration   7: 3130101.484 ops/s
Iteration   8: 3163975.744 ops/s
Iteration   9: 3137628.751 ops/s
Iteration  10: 3146377.920 ops/s
Iteration  11: 3137623.371 ops/s
Iteration  12: 3104870.091 ops/s
Iteration  13: 3077753.627 ops/s
Iteration  14: 3281913.141 ops/s
Iteration  15: 3198401.309 ops/s
Iteration  16: 3016732.708 ops/s
Iteration  17: 3231164.466 ops/s
Iteration  18: 3099799.509 ops/s
Iteration  19: 3147578.115 ops/s
Iteration  20: 3255014.407 ops/s
Iteration  21: 3241360.154 ops/s
Iteration  22: 3049687.174 ops/s
Iteration  23: 3108319.333 ops/s
Iteration  24: 3139298.284 ops/s
Iteration  25: 3173546.205 ops/s
Iteration  26: 3142942.594 ops/s
Iteration  27: 3135155.272 ops/s
Iteration  28: 3103377.831 ops/s
Iteration  29: 3120427.190 ops/s
Iteration  30: 3212713.258 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_dispose2":
  3143964.751 ±(99.9%) 41841.636 ops/s [Average]
  (min, avg, max) = (3016732.708, 3143964.751, 3281913.141), stdev = 62626.596
  CI (99.9%): [3102123.115, 3185806.387] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MaybeTimeoutPublisherTest._Benchmark.benchmark_dispose2  thrpt   30  3143964.751 ± 41841.636  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 411697.790 ops/s
# Warmup Iteration   2: 1594473.274 ops/s
# Warmup Iteration   3: 2245462.474 ops/s
# Warmup Iteration   4: 2175580.287 ops/s
# Warmup Iteration   5: 2182915.805 ops/s
# Warmup Iteration   6: 2212101.113 ops/s
# Warmup Iteration   7: 2187052.395 ops/s
# Warmup Iteration   8: 2230498.429 ops/s
# Warmup Iteration   9: 1918599.435 ops/s
# Warmup Iteration  10: 2139400.100 ops/s
# Warmup Iteration  11: 2194382.257 ops/s
# Warmup Iteration  12: 2330693.362 ops/s
# Warmup Iteration  13: 2300328.213 ops/s
# Warmup Iteration  14: 2162791.180 ops/s
# Warmup Iteration  15: 2286326.420 ops/s
# Warmup Iteration  16: 2120879.279 ops/s
# Warmup Iteration  17: 2177527.930 ops/s
# Warmup Iteration  18: 2111383.116 ops/s
# Warmup Iteration  19: 1970888.670 ops/s
# Warmup Iteration  20: 2174262.039 ops/s
# Warmup Iteration  21: 2287633.695 ops/s
# Warmup Iteration  22: 2155426.489 ops/s
# Warmup Iteration  23: 2123757.128 ops/s
# Warmup Iteration  24: 2154252.350 ops/s
# Warmup Iteration  25: 2250987.707 ops/s
# Warmup Iteration  26: 2183797.609 ops/s
# Warmup Iteration  27: 2277923.151 ops/s
# Warmup Iteration  28: 2302533.748 ops/s
# Warmup Iteration  29: 2281490.295 ops/s
# Warmup Iteration  30: 2192388.029 ops/s
Iteration   1: 2368167.523 ops/s
Iteration   2: 2164906.219 ops/s
Iteration   3: 2335299.815 ops/s
Iteration   4: 2242534.893 ops/s
Iteration   5: 2153541.711 ops/s
Iteration   6: 2339483.589 ops/s
Iteration   7: 2249533.627 ops/s
Iteration   8: 2203009.982 ops/s
Iteration   9: 2297635.798 ops/s
Iteration  10: 2244065.177 ops/s
Iteration  11: 2267042.518 ops/s
Iteration  12: 2221877.621 ops/s
Iteration  13: 2232376.192 ops/s
Iteration  14: 2269192.329 ops/s
Iteration  15: 2199550.964 ops/s
Iteration  16: 2176097.725 ops/s
Iteration  17: 2302733.197 ops/s
Iteration  18: 2194685.948 ops/s
Iteration  19: 2224152.989 ops/s
Iteration  20: 2157376.051 ops/s
Iteration  21: 2207927.371 ops/s
Iteration  22: 2256464.861 ops/s
Iteration  23: 2256106.402 ops/s
Iteration  24: 2147703.162 ops/s
Iteration  25: 2292277.992 ops/s
Iteration  26: 2170801.904 ops/s
Iteration  27: 2228010.981 ops/s
Iteration  28: 2243839.385 ops/s
Iteration  29: 2196573.030 ops/s
Iteration  30: 2238469.378 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeZipArrayTest._Benchmark.benchmark_dispose":
  2236047.944 ±(99.9%) 37887.274 ops/s [Average]
  (min, avg, max) = (2147703.162, 2236047.944, 2368167.523), stdev = 56707.892
  CI (99.9%): [2198160.671, 2273935.218] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
MaybeZipArrayTest._Benchmark.benchmark_dispose  thrpt   30  2236047.944 ± 37887.274  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 335993.256 ops/s
# Warmup Iteration   2: 1052191.635 ops/s
# Warmup Iteration   3: 1737166.517 ops/s
# Warmup Iteration   4: 1701740.382 ops/s
# Warmup Iteration   5: 1798024.281 ops/s
# Warmup Iteration   6: 1706825.510 ops/s
# Warmup Iteration   7: 1705925.568 ops/s
# Warmup Iteration   8: 1672940.252 ops/s
# Warmup Iteration   9: 1703658.848 ops/s
# Warmup Iteration  10: 1617072.826 ops/s
# Warmup Iteration  11: 1784093.167 ops/s
# Warmup Iteration  12: 1781753.327 ops/s
# Warmup Iteration  13: 1760708.204 ops/s
# Warmup Iteration  14: 1841213.643 ops/s
# Warmup Iteration  15: 1682179.998 ops/s
# Warmup Iteration  16: 1788851.358 ops/s
# Warmup Iteration  17: 1693942.529 ops/s
# Warmup Iteration  18: 1730677.412 ops/s
# Warmup Iteration  19: 1819125.147 ops/s
# Warmup Iteration  20: 1729316.215 ops/s
# Warmup Iteration  21: 1807047.307 ops/s
# Warmup Iteration  22: 1748319.434 ops/s
# Warmup Iteration  23: 1724097.532 ops/s
# Warmup Iteration  24: 1752988.663 ops/s
# Warmup Iteration  25: 1736939.525 ops/s
# Warmup Iteration  26: 1728989.574 ops/s
# Warmup Iteration  27: 1785945.048 ops/s
# Warmup Iteration  28: 1645357.897 ops/s
# Warmup Iteration  29: 1767751.092 ops/s
# Warmup Iteration  30: 1802057.668 ops/s
Iteration   1: 1731003.696 ops/s
Iteration   2: 1831608.375 ops/s
Iteration   3: 1792854.947 ops/s
Iteration   4: 1709732.827 ops/s
Iteration   5: 1813693.766 ops/s
Iteration   6: 1736747.464 ops/s
Iteration   7: 1753677.709 ops/s
Iteration   8: 1837041.300 ops/s
Iteration   9: 1738082.753 ops/s
Iteration  10: 1742926.239 ops/s
Iteration  11: 1792638.390 ops/s
Iteration  12: 1730177.104 ops/s
Iteration  13: 1802488.462 ops/s
Iteration  14: 1716085.816 ops/s
Iteration  15: 1738629.292 ops/s
Iteration  16: 1822838.556 ops/s
Iteration  17: 1734652.949 ops/s
Iteration  18: 1787695.961 ops/s
Iteration  19: 1728366.749 ops/s
Iteration  20: 1826875.604 ops/s
Iteration  21: 1842229.783 ops/s
Iteration  22: 1717551.930 ops/s
Iteration  23: 1780304.057 ops/s
Iteration  24: 1751455.609 ops/s
Iteration  25: 1778859.397 ops/s
Iteration  26: 1761425.269 ops/s
Iteration  27: 1723175.631 ops/s
Iteration  28: 1771527.067 ops/s
Iteration  29: 1770719.519 ops/s
Iteration  30: 1801970.333 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeAmbTest._Benchmark.benchmark_dispose":
  1768901.218 ±(99.9%) 26930.191 ops/s [Average]
  (min, avg, max) = (1709732.827, 1768901.218, 1842229.783), stdev = 40307.845
  CI (99.9%): [1741971.028, 1795831.409] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                   Mode  Cnt        Score       Error  Units
MaybeAmbTest._Benchmark.benchmark_dispose  thrpt   30  1768901.218 ± 26930.191  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_unsubscribeFromRetry$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_unsubscribeFromRetry

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1046871.908 ops/s
# Warmup Iteration   2: 3301887.769 ops/s
# Warmup Iteration   3: 4529400.431 ops/s
# Warmup Iteration   4: 4256711.660 ops/s
# Warmup Iteration   5: 4507976.445 ops/s
# Warmup Iteration   6: 4322223.610 ops/s
# Warmup Iteration   7: 4228194.783 ops/s
# Warmup Iteration   8: 4461980.463 ops/s
# Warmup Iteration   9: 4451487.083 ops/s
# Warmup Iteration  10: 4170759.255 ops/s
# Warmup Iteration  11: 4304506.151 ops/s
# Warmup Iteration  12: 4346479.138 ops/s
# Warmup Iteration  13: 3286889.266 ops/s
# Warmup Iteration  14: 4457442.453 ops/s
# Warmup Iteration  15: 4177706.637 ops/s
# Warmup Iteration  16: 4383831.753 ops/s
# Warmup Iteration  17: 3782033.948 ops/s
# Warmup Iteration  18: 4245614.715 ops/s
# Warmup Iteration  19: 4480061.816 ops/s
# Warmup Iteration  20: 4148902.240 ops/s
# Warmup Iteration  21: 4276001.353 ops/s
# Warmup Iteration  22: 4385177.353 ops/s
# Warmup Iteration  23: 4427719.046 ops/s
# Warmup Iteration  24: 4332423.091 ops/s
# Warmup Iteration  25: 4352417.066 ops/s
# Warmup Iteration  26: 4424980.922 ops/s
# Warmup Iteration  27: 4310374.492 ops/s
# Warmup Iteration  28: 4483461.776 ops/s
# Warmup Iteration  29: 4217783.700 ops/s
# Warmup Iteration  30: 4390119.791 ops/s
Iteration   1: 4257668.390 ops/s
Iteration   2: 4284545.760 ops/s
Iteration   3: 4282168.752 ops/s
Iteration   4: 4263205.976 ops/s
Iteration   5: 4411410.167 ops/s
Iteration   6: 4328975.291 ops/s
Iteration   7: 4526324.854 ops/s
Iteration   8: 4519542.713 ops/s
Iteration   9: 4277834.505 ops/s
Iteration  10: 4373449.518 ops/s
Iteration  11: 4279822.391 ops/s
Iteration  12: 4296227.044 ops/s
Iteration  13: 4279365.709 ops/s
Iteration  14: 4272448.234 ops/s
Iteration  15: 4212131.947 ops/s
Iteration  16: 4310448.355 ops/s
Iteration  17: 4496319.676 ops/s
Iteration  18: 4254436.986 ops/s
Iteration  19: 4536538.519 ops/s
Iteration  20: 4486948.230 ops/s
Iteration  21: 4438290.279 ops/s
Iteration  22: 4298247.795 ops/s
Iteration  23: 4474525.185 ops/s
Iteration  24: 4225850.076 ops/s
Iteration  25: 4452177.163 ops/s
Iteration  26: 4420908.206 ops/s
Iteration  27: 4277999.510 ops/s
Iteration  28: 4535441.840 ops/s
Iteration  29: 4462347.391 ops/s
Iteration  30: 4304401.992 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_unsubscribeFromRetry":
  4361333.415 ±(99.9%) 70784.385 ops/s [Average]
  (min, avg, max) = (4212131.947, 4361333.415, 4536538.519), stdev = 105946.743
  CI (99.9%): [4290549.030, 4432117.800] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableRetryTest._Benchmark.benchmark_unsubscribeFromRetry  thrpt   30  4361333.415 ± 70784.385  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 595520.755 ops/s
# Warmup Iteration   2: 2351649.920 ops/s
# Warmup Iteration   3: 2784137.009 ops/s
# Warmup Iteration   4: 2906286.374 ops/s
# Warmup Iteration   5: 2499541.911 ops/s
# Warmup Iteration   6: 2767637.057 ops/s
# Warmup Iteration   7: 2913990.991 ops/s
# Warmup Iteration   8: 2954853.695 ops/s
# Warmup Iteration   9: 2848404.500 ops/s
# Warmup Iteration  10: 2815828.006 ops/s
# Warmup Iteration  11: 2870662.410 ops/s
# Warmup Iteration  12: 2941759.914 ops/s
# Warmup Iteration  13: 2989315.499 ops/s
# Warmup Iteration  14: 2782088.719 ops/s
# Warmup Iteration  15: 2944312.181 ops/s
# Warmup Iteration  16: 2852178.125 ops/s
# Warmup Iteration  17: 2780981.231 ops/s
# Warmup Iteration  18: 2907800.494 ops/s
# Warmup Iteration  19: 2855325.490 ops/s
# Warmup Iteration  20: 2938374.255 ops/s
# Warmup Iteration  21: 2806134.942 ops/s
# Warmup Iteration  22: 2775627.515 ops/s
# Warmup Iteration  23: 2975591.801 ops/s
# Warmup Iteration  24: 2976216.806 ops/s
# Warmup Iteration  25: 2919753.192 ops/s
# Warmup Iteration  26: 2907842.236 ops/s
# Warmup Iteration  27: 2897669.772 ops/s
# Warmup Iteration  28: 2862727.390 ops/s
# Warmup Iteration  29: 2831459.864 ops/s
# Warmup Iteration  30: 2954723.232 ops/s
Iteration   1: 3037755.723 ops/s
Iteration   2: 2892241.099 ops/s
Iteration   3: 2807389.508 ops/s
Iteration   4: 2950464.231 ops/s
Iteration   5: 2914644.892 ops/s
Iteration   6: 2936966.725 ops/s
Iteration   7: 2854779.911 ops/s
Iteration   8: 2922262.444 ops/s
Iteration   9: 2885771.184 ops/s
Iteration  10: 2847519.292 ops/s
Iteration  11: 2882397.153 ops/s
Iteration  12: 3005181.629 ops/s
Iteration  13: 2789829.452 ops/s
Iteration  14: 2945549.121 ops/s
Iteration  15: 2759384.224 ops/s
Iteration  16: 2772899.491 ops/s
Iteration  17: 2911409.034 ops/s
Iteration  18: 2833870.941 ops/s
Iteration  19: 2963619.438 ops/s
Iteration  20: 2822440.610 ops/s
Iteration  21: 2923161.452 ops/s
Iteration  22: 2853225.922 ops/s
Iteration  23: 2893145.900 ops/s
Iteration  24: 3013903.335 ops/s
Iteration  25: 2764815.108 ops/s
Iteration  26: 2888850.102 ops/s
Iteration  27: 2885449.908 ops/s
Iteration  28: 2954268.749 ops/s
Iteration  29: 2841907.899 ops/s
Iteration  30: 2892420.330 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapSingleTest._Benchmark.benchmark_disposed":
  2888250.827 ±(99.9%) 48035.804 ops/s [Average]
  (min, avg, max) = (2759384.224, 2888250.827, 3037755.723), stdev = 71897.736
  CI (99.9%): [2840215.023, 2936286.631] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableFlatMapSingleTest._Benchmark.benchmark_disposed  thrpt   30  2888250.827 ± 48035.804  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 786150.510 ops/s
# Warmup Iteration   2: 4019291.812 ops/s
# Warmup Iteration   3: 5055232.203 ops/s
# Warmup Iteration   4: 5703917.861 ops/s
# Warmup Iteration   5: 5903340.944 ops/s
# Warmup Iteration   6: 5857453.309 ops/s
# Warmup Iteration   7: 4453465.978 ops/s
# Warmup Iteration   8: 5688389.522 ops/s
# Warmup Iteration   9: 5736377.126 ops/s
# Warmup Iteration  10: 5681278.193 ops/s
# Warmup Iteration  11: 5911598.442 ops/s
# Warmup Iteration  12: 5722603.471 ops/s
# Warmup Iteration  13: 6011693.700 ops/s
# Warmup Iteration  14: 5635993.203 ops/s
# Warmup Iteration  15: 5802383.317 ops/s
# Warmup Iteration  16: 5862446.080 ops/s
# Warmup Iteration  17: 5686856.880 ops/s
# Warmup Iteration  18: 5946323.568 ops/s
# Warmup Iteration  19: 6021396.900 ops/s
# Warmup Iteration  20: 5771798.884 ops/s
# Warmup Iteration  21: 5981573.327 ops/s
# Warmup Iteration  22: 5771590.241 ops/s
# Warmup Iteration  23: 5912528.025 ops/s
# Warmup Iteration  24: 5960336.499 ops/s
# Warmup Iteration  25: 5940247.572 ops/s
# Warmup Iteration  26: 5679892.053 ops/s
# Warmup Iteration  27: 5889700.609 ops/s
# Warmup Iteration  28: 5746957.627 ops/s
# Warmup Iteration  29: 5908010.919 ops/s
# Warmup Iteration  30: 5774705.118 ops/s
Iteration   1: 5906445.875 ops/s
Iteration   2: 5974473.784 ops/s
Iteration   3: 5739117.809 ops/s
Iteration   4: 6017471.772 ops/s
Iteration   5: 5726101.414 ops/s
Iteration   6: 6085523.879 ops/s
Iteration   7: 5820102.548 ops/s
Iteration   8: 5718644.357 ops/s
Iteration   9: 6156637.287 ops/s
Iteration  10: 6037689.391 ops/s
Iteration  11: 5736176.903 ops/s
Iteration  12: 6031165.060 ops/s
Iteration  13: 5711168.085 ops/s
Iteration  14: 5853322.336 ops/s
Iteration  15: 5960581.937 ops/s
Iteration  16: 5680958.924 ops/s
Iteration  17: 6094138.860 ops/s
Iteration  18: 5678249.455 ops/s
Iteration  19: 5988211.119 ops/s
Iteration  20: 5731141.071 ops/s
Iteration  21: 5951329.958 ops/s
Iteration  22: 6048009.674 ops/s
Iteration  23: 5771641.952 ops/s
Iteration  24: 6024281.230 ops/s
Iteration  25: 5811337.109 ops/s
Iteration  26: 5962676.919 ops/s
Iteration  27: 5669081.403 ops/s
Iteration  28: 5889130.546 ops/s
Iteration  29: 5899735.287 ops/s
Iteration  30: 5850798.119 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_isDisposed":
  5884178.135 ±(99.9%) 96684.777 ops/s [Average]
  (min, avg, max) = (5669081.403, 5884178.135, 6156637.287), stdev = 144713.234
  CI (99.9%): [5787493.358, 5980862.912] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
MaybeOfTypeTest._Benchmark.benchmark_isDisposed  thrpt   30  5884178.135 ± 96684.777  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherErrorPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherErrorPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135987.311 ops/s
# Warmup Iteration   2: 406168.205 ops/s
# Warmup Iteration   3: 546476.262 ops/s
# Warmup Iteration   4: 590142.389 ops/s
# Warmup Iteration   5: 580582.546 ops/s
# Warmup Iteration   6: 516137.332 ops/s
# Warmup Iteration   7: 582070.967 ops/s
# Warmup Iteration   8: 601025.144 ops/s
# Warmup Iteration   9: 614703.248 ops/s
# Warmup Iteration  10: 614225.126 ops/s
# Warmup Iteration  11: 587409.341 ops/s
# Warmup Iteration  12: 594194.234 ops/s
# Warmup Iteration  13: 630006.630 ops/s
# Warmup Iteration  14: 584348.726 ops/s
# Warmup Iteration  15: 626247.522 ops/s
# Warmup Iteration  16: 576657.216 ops/s
# Warmup Iteration  17: 632089.483 ops/s
# Warmup Iteration  18: 635391.575 ops/s
# Warmup Iteration  19: 616643.310 ops/s
# Warmup Iteration  20: 641687.906 ops/s
# Warmup Iteration  21: 613097.898 ops/s
# Warmup Iteration  22: 617701.329 ops/s
# Warmup Iteration  23: 606222.780 ops/s
# Warmup Iteration  24: 615786.063 ops/s
# Warmup Iteration  25: 637142.738 ops/s
# Warmup Iteration  26: 608679.217 ops/s
# Warmup Iteration  27: 639494.046 ops/s
# Warmup Iteration  28: 642489.247 ops/s
# Warmup Iteration  29: 622239.410 ops/s
# Warmup Iteration  30: 640805.557 ops/s
Iteration   1: 622743.911 ops/s
Iteration   2: 652666.417 ops/s
Iteration   3: 614679.310 ops/s
Iteration   4: 640548.711 ops/s
Iteration   5: 663702.739 ops/s
Iteration   6: 645260.306 ops/s
Iteration   7: 617088.140 ops/s
Iteration   8: 655717.880 ops/s
Iteration   9: 624001.333 ops/s
Iteration  10: 633851.285 ops/s
Iteration  11: 658668.488 ops/s
Iteration  12: 644820.671 ops/s
Iteration  13: 625848.272 ops/s
Iteration  14: 623420.341 ops/s
Iteration  15: 642363.695 ops/s
Iteration  16: 632056.642 ops/s
Iteration  17: 620996.836 ops/s
Iteration  18: 632660.102 ops/s
Iteration  19: 626604.799 ops/s
Iteration  20: 639017.298 ops/s
Iteration  21: 644590.379 ops/s
Iteration  22: 637310.216 ops/s
Iteration  23: 634973.864 ops/s
Iteration  24: 659846.010 ops/s
Iteration  25: 620034.165 ops/s
Iteration  26: 634749.485 ops/s
Iteration  27: 619926.636 ops/s
Iteration  28: 618117.588 ops/s
Iteration  29: 634711.484 ops/s
Iteration  30: 623852.017 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_otherErrorPublisher":
  634827.634 ±(99.9%) 9207.154 ops/s [Average]
  (min, avg, max) = (614679.310, 634827.634, 663702.739), stdev = 13780.836
  CI (99.9%): [625620.480, 644034.788] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
SingleTakeUntilTest._Benchmark.benchmark_otherErrorPublisher  thrpt   30  634827.634 ± 9207.154  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 114644.188 ops/s
# Warmup Iteration   2: 327280.992 ops/s
# Warmup Iteration   3: 547009.133 ops/s
# Warmup Iteration   4: 620501.601 ops/s
# Warmup Iteration   5: 611028.001 ops/s
# Warmup Iteration   6: 631951.942 ops/s
# Warmup Iteration   7: 596754.920 ops/s
# Warmup Iteration   8: 593517.593 ops/s
# Warmup Iteration   9: 599842.504 ops/s
# Warmup Iteration  10: 616686.360 ops/s
# Warmup Iteration  11: 589782.640 ops/s
# Warmup Iteration  12: 645360.671 ops/s
# Warmup Iteration  13: 603141.236 ops/s
# Warmup Iteration  14: 625107.234 ops/s
# Warmup Iteration  15: 638724.975 ops/s
# Warmup Iteration  16: 598005.725 ops/s
# Warmup Iteration  17: 661126.018 ops/s
# Warmup Iteration  18: 630119.354 ops/s
# Warmup Iteration  19: 658511.054 ops/s
# Warmup Iteration  20: 636258.865 ops/s
# Warmup Iteration  21: 635689.449 ops/s
# Warmup Iteration  22: 634297.534 ops/s
# Warmup Iteration  23: 647680.436 ops/s
# Warmup Iteration  24: 659924.312 ops/s
# Warmup Iteration  25: 636774.406 ops/s
# Warmup Iteration  26: 652351.701 ops/s
# Warmup Iteration  27: 643234.845 ops/s
# Warmup Iteration  28: 634827.191 ops/s
# Warmup Iteration  29: 661158.553 ops/s
# Warmup Iteration  30: 653902.245 ops/s
Iteration   1: 630131.344 ops/s
Iteration   2: 643987.352 ops/s
Iteration   3: 659657.266 ops/s
Iteration   4: 631599.645 ops/s
Iteration   5: 652039.071 ops/s
Iteration   6: 639302.342 ops/s
Iteration   7: 606600.003 ops/s
Iteration   8: 669504.657 ops/s
Iteration   9: 647334.636 ops/s
Iteration  10: 627201.396 ops/s
Iteration  11: 675754.163 ops/s
Iteration  12: 624985.989 ops/s
Iteration  13: 638013.096 ops/s
Iteration  14: 660374.357 ops/s
Iteration  15: 648996.698 ops/s
Iteration  16: 647413.673 ops/s
Iteration  17: 666292.727 ops/s
Iteration  18: 620577.504 ops/s
Iteration  19: 661109.544 ops/s
Iteration  20: 628720.397 ops/s
Iteration  21: 649868.135 ops/s
Iteration  22: 655437.968 ops/s
Iteration  23: 650386.692 ops/s
Iteration  24: 642014.891 ops/s
Iteration  25: 634666.574 ops/s
Iteration  26: 642044.916 ops/s
Iteration  27: 675241.326 ops/s
Iteration  28: 663904.980 ops/s
Iteration  29: 619074.143 ops/s
Iteration  30: 645749.859 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainError":
  645266.178 ±(99.9%) 11473.310 ops/s [Average]
  (min, avg, max) = (606600.003, 645266.178, 675754.163), stdev = 17172.711
  CI (99.9%): [633792.869, 656739.488] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainError  thrpt   30  645266.178 ± 11473.310  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_downstreamUnsubscribes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_downstreamUnsubscribes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 505198.688 ops/s
# Warmup Iteration   2: 1054730.780 ops/s
# Warmup Iteration   3: 1803319.392 ops/s
# Warmup Iteration   4: 2383132.340 ops/s
# Warmup Iteration   5: 2283862.494 ops/s
# Warmup Iteration   6: 2356038.563 ops/s
# Warmup Iteration   7: 2537948.063 ops/s
# Warmup Iteration   8: 2300904.962 ops/s
# Warmup Iteration   9: 2368965.183 ops/s
# Warmup Iteration  10: 2495763.201 ops/s
# Warmup Iteration  11: 2351379.392 ops/s
# Warmup Iteration  12: 2323972.775 ops/s
# Warmup Iteration  13: 2460812.171 ops/s
# Warmup Iteration  14: 2252055.134 ops/s
# Warmup Iteration  15: 2405820.332 ops/s
# Warmup Iteration  16: 2475469.790 ops/s
# Warmup Iteration  17: 2301281.208 ops/s
# Warmup Iteration  18: 2339772.471 ops/s
# Warmup Iteration  19: 2488498.981 ops/s
# Warmup Iteration  20: 2443353.354 ops/s
# Warmup Iteration  21: 2417655.132 ops/s
# Warmup Iteration  22: 2374784.604 ops/s
# Warmup Iteration  23: 2438380.695 ops/s
# Warmup Iteration  24: 2410170.901 ops/s
# Warmup Iteration  25: 2413166.141 ops/s
# Warmup Iteration  26: 2507103.061 ops/s
# Warmup Iteration  27: 2310423.327 ops/s
# Warmup Iteration  28: 2409983.246 ops/s
# Warmup Iteration  29: 2430335.237 ops/s
# Warmup Iteration  30: 2329481.166 ops/s
Iteration   1: 2538245.156 ops/s
Iteration   2: 2398358.929 ops/s
Iteration   3: 2365231.927 ops/s
Iteration   4: 2383212.634 ops/s
Iteration   5: 2419994.780 ops/s
Iteration   6: 2371005.289 ops/s
Iteration   7: 2397704.258 ops/s
Iteration   8: 2369117.227 ops/s
Iteration   9: 2477909.305 ops/s
Iteration  10: 2439036.798 ops/s
Iteration  11: 2440873.780 ops/s
Iteration  12: 2372867.560 ops/s
Iteration  13: 2452007.663 ops/s
Iteration  14: 2472239.223 ops/s
Iteration  15: 2416857.998 ops/s
Iteration  16: 2356207.114 ops/s
Iteration  17: 2480528.515 ops/s
Iteration  18: 2350780.900 ops/s
Iteration  19: 2505341.499 ops/s
Iteration  20: 2437581.195 ops/s
Iteration  21: 2346862.964 ops/s
Iteration  22: 2506500.661 ops/s
Iteration  23: 2385899.202 ops/s
Iteration  24: 2468304.097 ops/s
Iteration  25: 2379759.564 ops/s
Iteration  26: 2475082.123 ops/s
Iteration  27: 2353417.614 ops/s
Iteration  28: 2409521.734 ops/s
Iteration  29: 2490938.732 ops/s
Iteration  30: 2340825.281 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_downstreamUnsubscribes":
  2420073.791 ±(99.9%) 37501.346 ops/s [Average]
  (min, avg, max) = (2340825.281, 2420073.791, 2538245.156), stdev = 56130.254
  CI (99.9%): [2382572.444, 2457575.137] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_downstreamUnsubscribes  thrpt   30  2420073.791 ± 37501.346  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 840385.661 ops/s
# Warmup Iteration   2: 2702216.156 ops/s
# Warmup Iteration   3: 3946864.751 ops/s
# Warmup Iteration   4: 4252140.751 ops/s
# Warmup Iteration   5: 2743725.595 ops/s
# Warmup Iteration   6: 4219450.068 ops/s
# Warmup Iteration   7: 3974868.270 ops/s
# Warmup Iteration   8: 4182768.290 ops/s
# Warmup Iteration   9: 4137047.433 ops/s
# Warmup Iteration  10: 4167537.521 ops/s
# Warmup Iteration  11: 4048240.539 ops/s
# Warmup Iteration  12: 4185240.429 ops/s
# Warmup Iteration  13: 4143296.596 ops/s
# Warmup Iteration  14: 3903217.186 ops/s
# Warmup Iteration  15: 4294692.405 ops/s
# Warmup Iteration  16: 3968136.247 ops/s
# Warmup Iteration  17: 4006990.933 ops/s
# Warmup Iteration  18: 4203237.945 ops/s
# Warmup Iteration  19: 3983114.837 ops/s
# Warmup Iteration  20: 4142351.902 ops/s
# Warmup Iteration  21: 4157858.483 ops/s
# Warmup Iteration  22: 4056700.764 ops/s
# Warmup Iteration  23: 4328369.103 ops/s
# Warmup Iteration  24: 4214093.177 ops/s
# Warmup Iteration  25: 4188480.499 ops/s
# Warmup Iteration  26: 4017315.746 ops/s
# Warmup Iteration  27: 4140580.820 ops/s
# Warmup Iteration  28: 3885111.146 ops/s
# Warmup Iteration  29: 4322895.058 ops/s
# Warmup Iteration  30: 4085125.197 ops/s
Iteration   1: 4078880.201 ops/s
Iteration   2: 4125578.142 ops/s
Iteration   3: 4159981.741 ops/s
Iteration   4: 4042461.713 ops/s
Iteration   5: 4208541.028 ops/s
Iteration   6: 4076629.459 ops/s
Iteration   7: 3944260.050 ops/s
Iteration   8: 4296659.011 ops/s
Iteration   9: 4023331.116 ops/s
Iteration  10: 4158154.205 ops/s
Iteration  11: 4054036.737 ops/s
Iteration  12: 4206778.883 ops/s
Iteration  13: 4064478.468 ops/s
Iteration  14: 4218149.411 ops/s
Iteration  15: 4080153.507 ops/s
Iteration  16: 4148722.380 ops/s
Iteration  17: 4096915.652 ops/s
Iteration  18: 4272555.230 ops/s
Iteration  19: 3876884.116 ops/s
Iteration  20: 4279782.067 ops/s
Iteration  21: 4166203.251 ops/s
Iteration  22: 4032039.455 ops/s
Iteration  23: 4155493.334 ops/s
Iteration  24: 4099286.031 ops/s
Iteration  25: 3988377.852 ops/s
Iteration  26: 4332776.472 ops/s
Iteration  27: 4067649.049 ops/s
Iteration  28: 3937363.071 ops/s
Iteration  29: 4212072.551 ops/s
Iteration  30: 4153601.332 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionSize":
  4118593.184 ±(99.9%) 73104.089 ops/s [Average]
  (min, avg, max) = (3876884.116, 4118593.184, 4332776.472), stdev = 109418.767
  CI (99.9%): [4045489.095, 4191697.272] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_noHeadRetentionSize  thrpt   30  4118593.184 ± 73104.089  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 799480.358 ops/s
# Warmup Iteration   2: 2160665.908 ops/s
# Warmup Iteration   3: 3354879.040 ops/s
# Warmup Iteration   4: 3987813.299 ops/s
# Warmup Iteration   5: 3013011.162 ops/s
# Warmup Iteration   6: 3624795.945 ops/s
# Warmup Iteration   7: 3753851.545 ops/s
# Warmup Iteration   8: 3256944.553 ops/s
# Warmup Iteration   9: 3829121.144 ops/s
# Warmup Iteration  10: 3724993.523 ops/s
# Warmup Iteration  11: 3595411.687 ops/s
# Warmup Iteration  12: 3856221.185 ops/s
# Warmup Iteration  13: 3897863.443 ops/s
# Warmup Iteration  14: 3328466.852 ops/s
# Warmup Iteration  15: 3879148.303 ops/s
# Warmup Iteration  16: 3621093.108 ops/s
# Warmup Iteration  17: 3607360.850 ops/s
# Warmup Iteration  18: 3893074.151 ops/s
# Warmup Iteration  19: 3633800.378 ops/s
# Warmup Iteration  20: 3716459.833 ops/s
# Warmup Iteration  21: 3698550.770 ops/s
# Warmup Iteration  22: 3711590.807 ops/s
# Warmup Iteration  23: 3693549.742 ops/s
# Warmup Iteration  24: 3752029.895 ops/s
# Warmup Iteration  25: 3694167.486 ops/s
# Warmup Iteration  26: 3788145.515 ops/s
# Warmup Iteration  27: 3911412.542 ops/s
# Warmup Iteration  28: 3633666.927 ops/s
# Warmup Iteration  29: 3657860.987 ops/s
# Warmup Iteration  30: 3748235.710 ops/s
Iteration   1: 3842281.173 ops/s
Iteration   2: 3582803.734 ops/s
Iteration   3: 3830368.899 ops/s
Iteration   4: 3660687.887 ops/s
Iteration   5: 3683524.386 ops/s
Iteration   6: 3710978.151 ops/s
Iteration   7: 3833397.056 ops/s
Iteration   8: 3757562.278 ops/s
Iteration   9: 3740722.641 ops/s
Iteration  10: 3886066.395 ops/s
Iteration  11: 3602399.067 ops/s
Iteration  12: 3787860.169 ops/s
Iteration  13: 3758290.550 ops/s
Iteration  14: 3630385.458 ops/s
Iteration  15: 3660458.857 ops/s
Iteration  16: 3932498.112 ops/s
Iteration  17: 3417674.510 ops/s
Iteration  18: 3804143.080 ops/s
Iteration  19: 3668054.318 ops/s
Iteration  20: 3489693.502 ops/s
Iteration  21: 3778381.206 ops/s
Iteration  22: 3669519.255 ops/s
Iteration  23: 3763728.125 ops/s
Iteration  24: 3734256.874 ops/s
Iteration  25: 3846352.385 ops/s
Iteration  26: 3963497.435 ops/s
Iteration  27: 3505945.326 ops/s
Iteration  28: 3791070.681 ops/s
Iteration  29: 3611496.964 ops/s
Iteration  30: 3702933.187 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionSize":
  3721567.722 ±(99.9%) 85073.578 ops/s [Average]
  (min, avg, max) = (3417674.510, 3721567.722, 3963497.435), stdev = 127334.136
  CI (99.9%): [3636494.144, 3806641.300] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionSize  thrpt   30  3721567.722 ± 85073.578  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 428411.433 ops/s
# Warmup Iteration   2: 1833881.896 ops/s
# Warmup Iteration   3: 2359277.670 ops/s
# Warmup Iteration   4: 2848841.807 ops/s
# Warmup Iteration   5: 2379115.270 ops/s
# Warmup Iteration   6: 2915029.338 ops/s
# Warmup Iteration   7: 2954801.098 ops/s
# Warmup Iteration   8: 2867854.900 ops/s
# Warmup Iteration   9: 2928821.720 ops/s
# Warmup Iteration  10: 2901020.715 ops/s
# Warmup Iteration  11: 2817004.179 ops/s
# Warmup Iteration  12: 2972424.986 ops/s
# Warmup Iteration  13: 2851836.944 ops/s
# Warmup Iteration  14: 2875885.410 ops/s
# Warmup Iteration  15: 2974434.380 ops/s
# Warmup Iteration  16: 2774780.905 ops/s
# Warmup Iteration  17: 2944688.077 ops/s
# Warmup Iteration  18: 2946377.264 ops/s
# Warmup Iteration  19: 2840079.301 ops/s
# Warmup Iteration  20: 2958401.175 ops/s
# Warmup Iteration  21: 2889593.958 ops/s
# Warmup Iteration  22: 3045242.939 ops/s
# Warmup Iteration  23: 2764101.339 ops/s
# Warmup Iteration  24: 2928640.344 ops/s
# Warmup Iteration  25: 3058712.130 ops/s
# Warmup Iteration  26: 2832044.858 ops/s
# Warmup Iteration  27: 2967659.583 ops/s
# Warmup Iteration  28: 2989456.778 ops/s
# Warmup Iteration  29: 2784348.873 ops/s
# Warmup Iteration  30: 2944573.938 ops/s
Iteration   1: 3034717.872 ops/s
Iteration   2: 2767122.449 ops/s
Iteration   3: 3026615.260 ops/s
Iteration   4: 2862918.131 ops/s
Iteration   5: 2854091.219 ops/s
Iteration   6: 2973415.617 ops/s
Iteration   7: 2854241.924 ops/s
Iteration   8: 2924459.866 ops/s
Iteration   9: 2863626.216 ops/s
Iteration  10: 2975690.259 ops/s
Iteration  11: 2855655.290 ops/s
Iteration  12: 2951122.668 ops/s
Iteration  13: 3010097.091 ops/s
Iteration  14: 2765723.975 ops/s
Iteration  15: 2857534.918 ops/s
Iteration  16: 2944964.089 ops/s
Iteration  17: 2773487.042 ops/s
Iteration  18: 2954108.960 ops/s
Iteration  19: 3032118.289 ops/s
Iteration  20: 2792289.381 ops/s
Iteration  21: 2918293.144 ops/s
Iteration  22: 3079030.191 ops/s
Iteration  23: 2819859.874 ops/s
Iteration  24: 2870072.844 ops/s
Iteration  25: 2975598.926 ops/s
Iteration  26: 2897177.966 ops/s
Iteration  27: 2944437.203 ops/s
Iteration  28: 2830591.565 ops/s
Iteration  29: 2919394.703 ops/s
Iteration  30: 2891545.688 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_just":
  2907333.421 ±(99.9%) 56589.919 ops/s [Average]
  (min, avg, max) = (2765723.975, 2907333.421, 3079030.191), stdev = 84701.134
  CI (99.9%): [2850743.501, 2963923.340] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_just  thrpt   30  2907333.421 ± 56589.919  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 103044.015 ops/s
# Warmup Iteration   2: 489810.924 ops/s
# Warmup Iteration   3: 577612.683 ops/s
# Warmup Iteration   4: 535308.970 ops/s
# Warmup Iteration   5: 537622.417 ops/s
# Warmup Iteration   6: 612660.254 ops/s
# Warmup Iteration   7: 545030.303 ops/s
# Warmup Iteration   8: 554425.387 ops/s
# Warmup Iteration   9: 609046.831 ops/s
# Warmup Iteration  10: 595614.419 ops/s
# Warmup Iteration  11: 642912.349 ops/s
# Warmup Iteration  12: 612661.293 ops/s
# Warmup Iteration  13: 607011.638 ops/s
# Warmup Iteration  14: 632375.917 ops/s
# Warmup Iteration  15: 610125.914 ops/s
# Warmup Iteration  16: 642302.191 ops/s
# Warmup Iteration  17: 631011.576 ops/s
# Warmup Iteration  18: 660456.507 ops/s
# Warmup Iteration  19: 653071.827 ops/s
# Warmup Iteration  20: 648218.914 ops/s
# Warmup Iteration  21: 671778.013 ops/s
# Warmup Iteration  22: 612098.766 ops/s
# Warmup Iteration  23: 662423.281 ops/s
# Warmup Iteration  24: 665790.033 ops/s
# Warmup Iteration  25: 614162.698 ops/s
# Warmup Iteration  26: 664048.663 ops/s
# Warmup Iteration  27: 684950.987 ops/s
# Warmup Iteration  28: 666721.539 ops/s
# Warmup Iteration  29: 643349.256 ops/s
# Warmup Iteration  30: 672465.948 ops/s
Iteration   1: 634185.228 ops/s
Iteration   2: 673063.998 ops/s
Iteration   3: 628231.580 ops/s
Iteration   4: 655353.946 ops/s
Iteration   5: 639681.357 ops/s
Iteration   6: 640626.671 ops/s
Iteration   7: 662700.498 ops/s
Iteration   8: 641988.732 ops/s
Iteration   9: 676754.164 ops/s
Iteration  10: 672737.645 ops/s
Iteration  11: 636120.008 ops/s
Iteration  12: 665203.095 ops/s
Iteration  13: 639508.743 ops/s
Iteration  14: 680744.736 ops/s
Iteration  15: 621554.568 ops/s
Iteration  16: 655282.956 ops/s
Iteration  17: 679274.376 ops/s
Iteration  18: 613423.269 ops/s
Iteration  19: 673975.879 ops/s
Iteration  20: 687323.031 ops/s
Iteration  21: 626133.759 ops/s
Iteration  22: 667492.754 ops/s
Iteration  23: 651376.813 ops/s
Iteration  24: 667012.119 ops/s
Iteration  25: 626564.360 ops/s
Iteration  26: 662128.066 ops/s
Iteration  27: 633362.962 ops/s
Iteration  28: 620245.643 ops/s
Iteration  29: 676623.904 ops/s
Iteration  30: 652976.077 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError":
  652055.031 ±(99.9%) 14163.232 ops/s [Average]
  (min, avg, max) = (613423.269, 652055.031, 687323.031), stdev = 21198.860
  CI (99.9%): [637891.800, 666218.263] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError  thrpt   30  652055.031 ± 14163.232  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_onlineComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_onlineComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 172770.613 ops/s
# Warmup Iteration   2: 735972.391 ops/s
# Warmup Iteration   3: 1230576.149 ops/s
# Warmup Iteration   4: 1408837.489 ops/s
# Warmup Iteration   5: 1294514.311 ops/s
# Warmup Iteration   6: 1323977.395 ops/s
# Warmup Iteration   7: 1344236.891 ops/s
# Warmup Iteration   8: 1138113.514 ops/s
# Warmup Iteration   9: 1381351.057 ops/s
# Warmup Iteration  10: 1384866.981 ops/s
# Warmup Iteration  11: 1420534.370 ops/s
# Warmup Iteration  12: 1346588.913 ops/s
# Warmup Iteration  13: 1389959.030 ops/s
# Warmup Iteration  14: 1413727.148 ops/s
# Warmup Iteration  15: 1389225.517 ops/s
# Warmup Iteration  16: 1404793.713 ops/s
# Warmup Iteration  17: 1388586.920 ops/s
# Warmup Iteration  18: 1410030.972 ops/s
# Warmup Iteration  19: 1361665.187 ops/s
# Warmup Iteration  20: 1354892.521 ops/s
# Warmup Iteration  21: 1435641.774 ops/s
# Warmup Iteration  22: 1323765.912 ops/s
# Warmup Iteration  23: 1395397.968 ops/s
# Warmup Iteration  24: 1410492.170 ops/s
# Warmup Iteration  25: 1398377.838 ops/s
# Warmup Iteration  26: 1348981.082 ops/s
# Warmup Iteration  27: 1398602.490 ops/s
# Warmup Iteration  28: 1377994.301 ops/s
# Warmup Iteration  29: 1431927.751 ops/s
# Warmup Iteration  30: 1468357.913 ops/s
Iteration   1: 1335414.175 ops/s
Iteration   2: 1419036.771 ops/s
Iteration   3: 1387392.008 ops/s
Iteration   4: 1429428.033 ops/s
Iteration   5: 1325522.775 ops/s
Iteration   6: 1423771.770 ops/s
Iteration   7: 1423908.633 ops/s
Iteration   8: 1313433.140 ops/s
Iteration   9: 1438058.433 ops/s
Iteration  10: 1398224.003 ops/s
Iteration  11: 1386691.780 ops/s
Iteration  12: 1376787.343 ops/s
Iteration  13: 1421067.068 ops/s
Iteration  14: 1383090.067 ops/s
Iteration  15: 1352272.213 ops/s
Iteration  16: 1370164.789 ops/s
Iteration  17: 1349498.730 ops/s
Iteration  18: 1434008.764 ops/s
Iteration  19: 1355352.292 ops/s
Iteration  20: 1398620.160 ops/s
Iteration  21: 1362098.946 ops/s
Iteration  22: 1404653.328 ops/s
Iteration  23: 1412976.185 ops/s
Iteration  24: 1373514.648 ops/s
Iteration  25: 1453559.591 ops/s
Iteration  26: 1286625.405 ops/s
Iteration  27: 1416017.740 ops/s
Iteration  28: 1370453.769 ops/s
Iteration  29: 1337431.174 ops/s
Iteration  30: 1445920.630 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_onlineComplete":
  1386166.479 ±(99.9%) 28008.671 ops/s [Average]
  (min, avg, max) = (1286625.405, 1386166.479, 1453559.591), stdev = 41922.064
  CI (99.9%): [1358157.808, 1414175.150] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MaybeCacheTest._Benchmark.benchmark_onlineComplete  thrpt   30  1386166.479 ± 28008.671  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 910422.014 ops/s
# Warmup Iteration   2: 2280480.926 ops/s
# Warmup Iteration   3: 2430637.962 ops/s
# Warmup Iteration   4: 2955416.958 ops/s
# Warmup Iteration   5: 3012520.221 ops/s
# Warmup Iteration   6: 2841814.737 ops/s
# Warmup Iteration   7: 3087797.954 ops/s
# Warmup Iteration   8: 2948696.645 ops/s
# Warmup Iteration   9: 2384920.840 ops/s
# Warmup Iteration  10: 3045487.525 ops/s
# Warmup Iteration  11: 2877868.125 ops/s
# Warmup Iteration  12: 2937769.226 ops/s
# Warmup Iteration  13: 2930531.633 ops/s
# Warmup Iteration  14: 2947905.702 ops/s
# Warmup Iteration  15: 2951941.224 ops/s
# Warmup Iteration  16: 2974687.584 ops/s
# Warmup Iteration  17: 2844138.804 ops/s
# Warmup Iteration  18: 3005856.584 ops/s
# Warmup Iteration  19: 2967754.891 ops/s
# Warmup Iteration  20: 2962579.791 ops/s
# Warmup Iteration  21: 2945079.028 ops/s
# Warmup Iteration  22: 2961642.259 ops/s
# Warmup Iteration  23: 2989087.569 ops/s
# Warmup Iteration  24: 2765818.799 ops/s
# Warmup Iteration  25: 2956378.220 ops/s
# Warmup Iteration  26: 2999976.776 ops/s
# Warmup Iteration  27: 2824735.590 ops/s
# Warmup Iteration  28: 2981761.634 ops/s
# Warmup Iteration  29: 2945954.997 ops/s
# Warmup Iteration  30: 2942905.354 ops/s
Iteration   1: 2990039.923 ops/s
Iteration   2: 2993130.492 ops/s
Iteration   3: 2951713.591 ops/s
Iteration   4: 3022366.273 ops/s
Iteration   5: 2769609.274 ops/s
Iteration   6: 2940741.075 ops/s
Iteration   7: 3077217.918 ops/s
Iteration   8: 2900551.036 ops/s
Iteration   9: 2941457.387 ops/s
Iteration  10: 3101570.032 ops/s
Iteration  11: 2807175.573 ops/s
Iteration  12: 3049438.041 ops/s
Iteration  13: 2905333.833 ops/s
Iteration  14: 2855964.556 ops/s
Iteration  15: 3016376.803 ops/s
Iteration  16: 2877411.476 ops/s
Iteration  17: 2974872.725 ops/s
Iteration  18: 2909026.089 ops/s
Iteration  19: 3029361.254 ops/s
Iteration  20: 2894912.097 ops/s
Iteration  21: 2977568.226 ops/s
Iteration  22: 3106649.610 ops/s
Iteration  23: 3000816.859 ops/s
Iteration  24: 2885619.300 ops/s
Iteration  25: 3030921.590 ops/s
Iteration  26: 2870158.027 ops/s
Iteration  27: 3052692.411 ops/s
Iteration  28: 3091598.738 ops/s
Iteration  29: 2868185.145 ops/s
Iteration  30: 3046646.305 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherDispose":
  2964637.522 ±(99.9%) 59575.638 ops/s [Average]
  (min, avg, max) = (2769609.274, 2964637.522, 3106649.610), stdev = 89170.017
  CI (99.9%): [2905061.884, 3024213.160] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilPublisherDispose  thrpt   30  2964637.522 ± 59575.638  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 230329.462 ops/s
# Warmup Iteration   2: 1230504.776 ops/s
# Warmup Iteration   3: 2967991.323 ops/s
# Warmup Iteration   4: 2819226.061 ops/s
# Warmup Iteration   5: 2887873.841 ops/s
# Warmup Iteration   6: 2563067.630 ops/s
# Warmup Iteration   7: 2671023.201 ops/s
# Warmup Iteration   8: 2621968.659 ops/s
# Warmup Iteration   9: 3018062.063 ops/s
# Warmup Iteration  10: 2796665.070 ops/s
# Warmup Iteration  11: 2869366.000 ops/s
# Warmup Iteration  12: 2975674.357 ops/s
# Warmup Iteration  13: 2831166.581 ops/s
# Warmup Iteration  14: 2501789.551 ops/s
# Warmup Iteration  15: 2959879.115 ops/s
# Warmup Iteration  16: 2851858.535 ops/s
# Warmup Iteration  17: 2991574.071 ops/s
# Warmup Iteration  18: 2896338.403 ops/s
# Warmup Iteration  19: 2836469.110 ops/s
# Warmup Iteration  20: 2924783.198 ops/s
# Warmup Iteration  21: 3063035.279 ops/s
# Warmup Iteration  22: 2740086.401 ops/s
# Warmup Iteration  23: 3000357.257 ops/s
# Warmup Iteration  24: 2792414.756 ops/s
# Warmup Iteration  25: 2857772.326 ops/s
# Warmup Iteration  26: 2953518.258 ops/s
# Warmup Iteration  27: 2856889.821 ops/s
# Warmup Iteration  28: 2845780.960 ops/s
# Warmup Iteration  29: 2942988.337 ops/s
# Warmup Iteration  30: 3097467.591 ops/s
Iteration   1: 2864031.647 ops/s
Iteration   2: 2869770.438 ops/s
Iteration   3: 3055424.020 ops/s
Iteration   4: 2801915.447 ops/s
Iteration   5: 2882814.855 ops/s
Iteration   6: 2997273.056 ops/s
Iteration   7: 2854744.677 ops/s
Iteration   8: 2993212.862 ops/s
Iteration   9: 2971639.349 ops/s
Iteration  10: 2804875.413 ops/s
Iteration  11: 2989465.546 ops/s
Iteration  12: 2847414.199 ops/s
Iteration  13: 2860871.736 ops/s
Iteration  14: 2994540.160 ops/s
Iteration  15: 2902856.101 ops/s
Iteration  16: 2892208.059 ops/s
Iteration  17: 3002844.914 ops/s
Iteration  18: 2926263.097 ops/s
Iteration  19: 2830881.646 ops/s
Iteration  20: 2969497.872 ops/s
Iteration  21: 2890674.337 ops/s
Iteration  22: 2959729.246 ops/s
Iteration  23: 2999156.801 ops/s
Iteration  24: 3002369.681 ops/s
Iteration  25: 2897532.993 ops/s
Iteration  26: 2895907.483 ops/s
Iteration  27: 2894214.583 ops/s
Iteration  28: 2946401.158 ops/s
Iteration  29: 2866971.770 ops/s
Iteration  30: 3029985.416 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelled":
  2923182.952 ±(99.9%) 46566.715 ops/s [Average]
  (min, avg, max) = (2801915.447, 2923182.952, 3055424.020), stdev = 69698.872
  CI (99.9%): [2876616.237, 2969749.667] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelled  thrpt   30  2923182.952 ± 46566.715  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainErrorPublisher$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainErrorPublisher

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 111941.709 ops/s
# Warmup Iteration   2: 419559.712 ops/s
# Warmup Iteration   3: 545814.195 ops/s
# Warmup Iteration   4: 580261.334 ops/s
# Warmup Iteration   5: 534417.479 ops/s
# Warmup Iteration   6: 595851.454 ops/s
# Warmup Iteration   7: 607414.193 ops/s
# Warmup Iteration   8: 607328.679 ops/s
# Warmup Iteration   9: 594368.778 ops/s
# Warmup Iteration  10: 606153.309 ops/s
# Warmup Iteration  11: 587855.917 ops/s
# Warmup Iteration  12: 598162.118 ops/s
# Warmup Iteration  13: 620812.212 ops/s
# Warmup Iteration  14: 594682.816 ops/s
# Warmup Iteration  15: 600248.980 ops/s
# Warmup Iteration  16: 615321.458 ops/s
# Warmup Iteration  17: 604450.380 ops/s
# Warmup Iteration  18: 645289.331 ops/s
# Warmup Iteration  19: 616749.584 ops/s
# Warmup Iteration  20: 514311.725 ops/s
# Warmup Iteration  21: 606560.579 ops/s
# Warmup Iteration  22: 597992.748 ops/s
# Warmup Iteration  23: 636275.896 ops/s
# Warmup Iteration  24: 637756.863 ops/s
# Warmup Iteration  25: 637988.027 ops/s
# Warmup Iteration  26: 633280.532 ops/s
# Warmup Iteration  27: 649034.007 ops/s
# Warmup Iteration  28: 636513.786 ops/s
# Warmup Iteration  29: 649024.394 ops/s
# Warmup Iteration  30: 592695.006 ops/s
Iteration   1: 651745.579 ops/s
Iteration   2: 671159.237 ops/s
Iteration   3: 621785.754 ops/s
Iteration   4: 630005.914 ops/s
Iteration   5: 630396.055 ops/s
Iteration   6: 606513.272 ops/s
Iteration   7: 639222.909 ops/s
Iteration   8: 646922.074 ops/s
Iteration   9: 603967.963 ops/s
Iteration  10: 663680.598 ops/s
Iteration  11: 604468.323 ops/s
Iteration  12: 606856.673 ops/s
Iteration  13: 657185.833 ops/s
Iteration  14: 622362.367 ops/s
Iteration  15: 641703.379 ops/s
Iteration  16: 622431.462 ops/s
Iteration  17: 634779.697 ops/s
Iteration  18: 632870.808 ops/s
Iteration  19: 610191.985 ops/s
Iteration  20: 642387.163 ops/s
Iteration  21: 624715.400 ops/s
Iteration  22: 643908.915 ops/s
Iteration  23: 641520.660 ops/s
Iteration  24: 656723.579 ops/s
Iteration  25: 641506.302 ops/s
Iteration  26: 623526.026 ops/s
Iteration  27: 641412.132 ops/s
Iteration  28: 622552.259 ops/s
Iteration  29: 666782.177 ops/s
Iteration  30: 647324.890 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainErrorPublisher":
  635020.313 ±(99.9%) 12438.109 ops/s [Average]
  (min, avg, max) = (603967.963, 635020.313, 671159.237), stdev = 18616.777
  CI (99.9%): [622582.204, 647458.421] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_mainErrorPublisher  thrpt   30  635020.313 ± 12438.109  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_initialValueEmittedNoProducer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_initialValueEmittedNoProducer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1418930.197 ops/s
# Warmup Iteration   2: 4347156.267 ops/s
# Warmup Iteration   3: 4987700.894 ops/s
# Warmup Iteration   4: 5483282.669 ops/s
# Warmup Iteration   5: 5204374.001 ops/s
# Warmup Iteration   6: 5471466.810 ops/s
# Warmup Iteration   7: 5292601.740 ops/s
# Warmup Iteration   8: 5667588.479 ops/s
# Warmup Iteration   9: 5501372.651 ops/s
# Warmup Iteration  10: 5448219.375 ops/s
# Warmup Iteration  11: 5484713.537 ops/s
# Warmup Iteration  12: 5372758.527 ops/s
# Warmup Iteration  13: 5380683.312 ops/s
# Warmup Iteration  14: 5721658.450 ops/s
# Warmup Iteration  15: 5443474.489 ops/s
# Warmup Iteration  16: 5391709.271 ops/s
# Warmup Iteration  17: 5402061.665 ops/s
# Warmup Iteration  18: 5459612.332 ops/s
# Warmup Iteration  19: 5525569.680 ops/s
# Warmup Iteration  20: 5236532.065 ops/s
# Warmup Iteration  21: 5623826.899 ops/s
# Warmup Iteration  22: 5284863.721 ops/s
# Warmup Iteration  23: 5657637.567 ops/s
# Warmup Iteration  24: 5618969.187 ops/s
# Warmup Iteration  25: 5212513.578 ops/s
# Warmup Iteration  26: 5659101.662 ops/s
# Warmup Iteration  27: 5408589.306 ops/s
# Warmup Iteration  28: 5413267.933 ops/s
# Warmup Iteration  29: 5667716.468 ops/s
# Warmup Iteration  30: 5659743.960 ops/s
Iteration   1: 5444593.782 ops/s
Iteration   2: 5365337.421 ops/s
Iteration   3: 5397133.444 ops/s
Iteration   4: 4604604.191 ops/s
Iteration   5: 5387631.947 ops/s
Iteration   6: 5449816.853 ops/s
Iteration   7: 5404414.350 ops/s
Iteration   8: 5366061.330 ops/s
Iteration   9: 5686862.140 ops/s
Iteration  10: 5467186.639 ops/s
Iteration  11: 5466445.188 ops/s
Iteration  12: 5699246.035 ops/s
Iteration  13: 5334193.886 ops/s
Iteration  14: 5590561.210 ops/s
Iteration  15: 5732994.186 ops/s
Iteration  16: 5294681.038 ops/s
Iteration  17: 5546534.492 ops/s
Iteration  18: 5563812.367 ops/s
Iteration  19: 5398882.216 ops/s
Iteration  20: 5702912.261 ops/s
Iteration  21: 5540011.069 ops/s
Iteration  22: 5350927.224 ops/s
Iteration  23: 5474522.020 ops/s
Iteration  24: 5695855.294 ops/s
Iteration  25: 5620703.673 ops/s
Iteration  26: 5410796.496 ops/s
Iteration  27: 5572065.414 ops/s
Iteration  28: 5471055.586 ops/s
Iteration  29: 5612506.691 ops/s
Iteration  30: 5570389.527 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_initialValueEmittedNoProducer":
  5474091.266 ±(99.9%) 137662.035 ops/s [Average]
  (min, avg, max) = (4604604.191, 5474091.266, 5732994.186), stdev = 206046.068
  CI (99.9%): [5336429.231, 5611753.300] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
ObservableScanTest._Benchmark.benchmark_initialValueEmittedNoProducer  thrpt   30  5474091.266 ± 137662.035  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noSubscriptionIfOtherErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noSubscriptionIfOtherErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48170.834 ops/s
# Warmup Iteration   2: 295776.878 ops/s
# Warmup Iteration   3: 334453.802 ops/s
# Warmup Iteration   4: 327788.106 ops/s
# Warmup Iteration   5: 344701.203 ops/s
# Warmup Iteration   6: 324476.900 ops/s
# Warmup Iteration   7: 317779.432 ops/s
# Warmup Iteration   8: 348680.939 ops/s
# Warmup Iteration   9: 341412.295 ops/s
# Warmup Iteration  10: 324484.167 ops/s
# Warmup Iteration  11: 346377.561 ops/s
# Warmup Iteration  12: 325685.363 ops/s
# Warmup Iteration  13: 339423.120 ops/s
# Warmup Iteration  14: 337687.854 ops/s
# Warmup Iteration  15: 334160.574 ops/s
# Warmup Iteration  16: 349430.386 ops/s
# Warmup Iteration  17: 345394.558 ops/s
# Warmup Iteration  18: 366030.052 ops/s
# Warmup Iteration  19: 357790.001 ops/s
# Warmup Iteration  20: 358328.814 ops/s
# Warmup Iteration  21: 338297.397 ops/s
# Warmup Iteration  22: 353647.445 ops/s
# Warmup Iteration  23: 360149.196 ops/s
# Warmup Iteration  24: 350918.507 ops/s
# Warmup Iteration  25: 367445.728 ops/s
# Warmup Iteration  26: 353947.860 ops/s
# Warmup Iteration  27: 365572.456 ops/s
# Warmup Iteration  28: 357200.987 ops/s
# Warmup Iteration  29: 358820.851 ops/s
# Warmup Iteration  30: 363836.244 ops/s
Iteration   1: 352005.080 ops/s
Iteration   2: 366698.938 ops/s
Iteration   3: 346234.226 ops/s
Iteration   4: 356659.454 ops/s
Iteration   5: 372481.845 ops/s
Iteration   6: 343918.725 ops/s
Iteration   7: 372813.232 ops/s
Iteration   8: 362858.541 ops/s
Iteration   9: 371543.073 ops/s
Iteration  10: 349366.048 ops/s
Iteration  11: 358280.104 ops/s
Iteration  12: 363989.029 ops/s
Iteration  13: 349756.385 ops/s
Iteration  14: 358846.983 ops/s
Iteration  15: 374063.257 ops/s
Iteration  16: 351512.425 ops/s
Iteration  17: 358918.799 ops/s
Iteration  18: 360685.718 ops/s
Iteration  19: 358542.609 ops/s
Iteration  20: 360020.359 ops/s
Iteration  21: 351495.189 ops/s
Iteration  22: 352275.109 ops/s
Iteration  23: 357921.612 ops/s
Iteration  24: 363223.589 ops/s
Iteration  25: 348557.765 ops/s
Iteration  26: 365178.442 ops/s
Iteration  27: 366052.236 ops/s
Iteration  28: 353768.574 ops/s
Iteration  29: 363862.770 ops/s
Iteration  30: 354612.027 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noSubscriptionIfOtherErrors":
  358871.405 ±(99.9%) 5446.028 ops/s [Average]
  (min, avg, max) = (343918.725, 358871.405, 374063.257), stdev = 8151.358
  CI (99.9%): [353425.377, 364317.432] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
ObservableDelaySubscriptionOtherTest._Benchmark.benchmark_noSubscriptionIfOtherErrors  thrpt   30  358871.405 ± 5446.028  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_otherComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_otherComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100372.885 ops/s
# Warmup Iteration   2: 425036.143 ops/s
# Warmup Iteration   3: 520731.919 ops/s
# Warmup Iteration   4: 519759.477 ops/s
# Warmup Iteration   5: 472462.083 ops/s
# Warmup Iteration   6: 551928.202 ops/s
# Warmup Iteration   7: 547671.883 ops/s
# Warmup Iteration   8: 557402.590 ops/s
# Warmup Iteration   9: 530522.021 ops/s
# Warmup Iteration  10: 502458.398 ops/s
# Warmup Iteration  11: 573330.140 ops/s
# Warmup Iteration  12: 549072.860 ops/s
# Warmup Iteration  13: 543645.992 ops/s
# Warmup Iteration  14: 562065.385 ops/s
# Warmup Iteration  15: 544331.993 ops/s
# Warmup Iteration  16: 555545.226 ops/s
# Warmup Iteration  17: 589570.426 ops/s
# Warmup Iteration  18: 569058.052 ops/s
# Warmup Iteration  19: 587421.760 ops/s
# Warmup Iteration  20: 568138.175 ops/s
# Warmup Iteration  21: 577222.965 ops/s
# Warmup Iteration  22: 566603.460 ops/s
# Warmup Iteration  23: 568337.603 ops/s
# Warmup Iteration  24: 582963.382 ops/s
# Warmup Iteration  25: 582267.338 ops/s
# Warmup Iteration  26: 562110.943 ops/s
# Warmup Iteration  27: 595180.563 ops/s
# Warmup Iteration  28: 489643.425 ops/s
# Warmup Iteration  29: 467498.849 ops/s
# Warmup Iteration  30: 558096.379 ops/s
Iteration   1: 590155.825 ops/s
Iteration   2: 553453.547 ops/s
Iteration   3: 584735.000 ops/s
Iteration   4: 595421.291 ops/s
Iteration   5: 547539.628 ops/s
Iteration   6: 585726.751 ops/s
Iteration   7: 563887.415 ops/s
Iteration   8: 579756.826 ops/s
Iteration   9: 565779.265 ops/s
Iteration  10: 579935.191 ops/s
Iteration  11: 586866.853 ops/s
Iteration  12: 558976.006 ops/s
Iteration  13: 587534.603 ops/s
Iteration  14: 554144.153 ops/s
Iteration  15: 578752.676 ops/s
Iteration  16: 580136.035 ops/s
Iteration  17: 557839.139 ops/s
Iteration  18: 582054.418 ops/s
Iteration  19: 566228.272 ops/s
Iteration  20: 591441.606 ops/s
Iteration  21: 567713.909 ops/s
Iteration  22: 587692.394 ops/s
Iteration  23: 552229.139 ops/s
Iteration  24: 589102.607 ops/s
Iteration  25: 575660.810 ops/s
Iteration  26: 557192.797 ops/s
Iteration  27: 589134.345 ops/s
Iteration  28: 550411.864 ops/s
Iteration  29: 571968.649 ops/s
Iteration  30: 586662.453 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_otherComplete":
  573937.782 ±(99.9%) 9782.200 ops/s [Average]
  (min, avg, max) = (547539.628, 573937.782, 595421.291), stdev = 14641.538
  CI (99.9%): [564155.582, 583719.982] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
MaybeTimeoutTest._Benchmark.benchmark_otherComplete  thrpt   30  573937.782 ± 9782.200  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposeResets$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposeResets

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 432897.491 ops/s
# Warmup Iteration   2: 1423792.226 ops/s
# Warmup Iteration   3: 1849842.848 ops/s
# Warmup Iteration   4: 2210991.446 ops/s
# Warmup Iteration   5: 2264399.921 ops/s
# Warmup Iteration   6: 2259955.186 ops/s
# Warmup Iteration   7: 2397873.205 ops/s
# Warmup Iteration   8: 2280327.565 ops/s
# Warmup Iteration   9: 2232085.273 ops/s
# Warmup Iteration  10: 2396498.322 ops/s
# Warmup Iteration  11: 2277905.396 ops/s
# Warmup Iteration  12: 2270651.324 ops/s
# Warmup Iteration  13: 2298326.840 ops/s
# Warmup Iteration  14: 2252743.938 ops/s
# Warmup Iteration  15: 2310033.729 ops/s
# Warmup Iteration  16: 2271653.048 ops/s
# Warmup Iteration  17: 2301841.254 ops/s
# Warmup Iteration  18: 2342080.796 ops/s
# Warmup Iteration  19: 2250100.630 ops/s
# Warmup Iteration  20: 2294794.733 ops/s
# Warmup Iteration  21: 2382099.881 ops/s
# Warmup Iteration  22: 2302184.249 ops/s
# Warmup Iteration  23: 2234159.453 ops/s
# Warmup Iteration  24: 2295710.140 ops/s
# Warmup Iteration  25: 2325694.407 ops/s
# Warmup Iteration  26: 2241494.277 ops/s
# Warmup Iteration  27: 2330682.155 ops/s
# Warmup Iteration  28: 2275294.171 ops/s
# Warmup Iteration  29: 2290674.209 ops/s
# Warmup Iteration  30: 2340214.555 ops/s
Iteration   1: 2263696.047 ops/s
Iteration   2: 2236632.916 ops/s
Iteration   3: 2391569.969 ops/s
Iteration   4: 2246703.697 ops/s
Iteration   5: 2255997.701 ops/s
Iteration   6: 2317980.712 ops/s
Iteration   7: 2311414.091 ops/s
Iteration   8: 2325745.883 ops/s
Iteration   9: 2253517.786 ops/s
Iteration  10: 2318477.854 ops/s
Iteration  11: 2330871.648 ops/s
Iteration  12: 2240054.628 ops/s
Iteration  13: 2380656.649 ops/s
Iteration  14: 2281763.330 ops/s
Iteration  15: 2340356.534 ops/s
Iteration  16: 2269234.508 ops/s
Iteration  17: 2368079.464 ops/s
Iteration  18: 2258448.937 ops/s
Iteration  19: 2310310.020 ops/s
Iteration  20: 2232825.839 ops/s
Iteration  21: 2327129.616 ops/s
Iteration  22: 2329894.858 ops/s
Iteration  23: 2273600.163 ops/s
Iteration  24: 2316921.889 ops/s
Iteration  25: 2315822.001 ops/s
Iteration  26: 2268250.877 ops/s
Iteration  27: 2311829.322 ops/s
Iteration  28: 2292267.558 ops/s
Iteration  29: 2196460.120 ops/s
Iteration  30: 2316923.292 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposeResets":
  2296114.597 ±(99.9%) 30811.823 ops/s [Average]
  (min, avg, max) = (2196460.120, 2296114.597, 2391569.969), stdev = 46117.690
  CI (99.9%): [2265302.774, 2326926.420] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_disposeResets  thrpt   30  2296114.597 ± 30811.823  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 548468.030 ops/s
# Warmup Iteration   2: 925746.502 ops/s
# Warmup Iteration   3: 2625978.615 ops/s
# Warmup Iteration   4: 2892104.867 ops/s
# Warmup Iteration   5: 3213408.195 ops/s
# Warmup Iteration   6: 3313624.622 ops/s
# Warmup Iteration   7: 3469540.531 ops/s
# Warmup Iteration   8: 3297981.675 ops/s
# Warmup Iteration   9: 3560913.744 ops/s
# Warmup Iteration  10: 3246944.492 ops/s
# Warmup Iteration  11: 3317469.197 ops/s
# Warmup Iteration  12: 3369165.571 ops/s
# Warmup Iteration  13: 3260019.898 ops/s
# Warmup Iteration  14: 3410669.257 ops/s
# Warmup Iteration  15: 3254339.003 ops/s
# Warmup Iteration  16: 3505068.021 ops/s
# Warmup Iteration  17: 3383133.621 ops/s
# Warmup Iteration  18: 3290771.041 ops/s
# Warmup Iteration  19: 3419766.662 ops/s
# Warmup Iteration  20: 3368020.184 ops/s
# Warmup Iteration  21: 3462654.162 ops/s
# Warmup Iteration  22: 3253131.786 ops/s
# Warmup Iteration  23: 3327597.763 ops/s
# Warmup Iteration  24: 3381369.946 ops/s
# Warmup Iteration  25: 3320555.437 ops/s
# Warmup Iteration  26: 3372628.156 ops/s
# Warmup Iteration  27: 3398791.133 ops/s
# Warmup Iteration  28: 3300137.086 ops/s
# Warmup Iteration  29: 3434226.407 ops/s
# Warmup Iteration  30: 3354991.091 ops/s
Iteration   1: 3503218.126 ops/s
Iteration   2: 3459142.010 ops/s
Iteration   3: 3254989.189 ops/s
Iteration   4: 3449218.934 ops/s
Iteration   5: 3445515.710 ops/s
Iteration   6: 3245547.812 ops/s
Iteration   7: 3393070.234 ops/s
Iteration   8: 3311731.777 ops/s
Iteration   9: 3374954.007 ops/s
Iteration  10: 3487391.526 ops/s
Iteration  11: 3249910.193 ops/s
Iteration  12: 3540008.435 ops/s
Iteration  13: 3390141.446 ops/s
Iteration  14: 3227297.850 ops/s
Iteration  15: 3410159.299 ops/s
Iteration  16: 3409436.466 ops/s
Iteration  17: 3323344.257 ops/s
Iteration  18: 3376330.111 ops/s
Iteration  19: 3412120.939 ops/s
Iteration  20: 3342040.847 ops/s
Iteration  21: 3472828.873 ops/s
Iteration  22: 3305826.243 ops/s
Iteration  23: 3400715.420 ops/s
Iteration  24: 3490993.206 ops/s
Iteration  25: 3256797.937 ops/s
Iteration  26: 3542003.463 ops/s
Iteration  27: 3232587.468 ops/s
Iteration  28: 3367162.036 ops/s
Iteration  29: 3375841.671 ops/s
Iteration  30: 3317424.797 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteSize":
  3378925.009 ±(99.9%) 61800.104 ops/s [Average]
  (min, avg, max) = (3227297.850, 3378925.009, 3542003.463), stdev = 92499.493
  CI (99.9%): [3317124.906, 3440725.113] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_noHeadRetentionCompleteSize  thrpt   30  3378925.009 ± 61800.104  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_reentrantComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_reentrantComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 162168.376 ops/s
# Warmup Iteration   2: 668563.901 ops/s
# Warmup Iteration   3: 1374882.478 ops/s
# Warmup Iteration   4: 1185428.790 ops/s
# Warmup Iteration   5: 1445296.722 ops/s
# Warmup Iteration   6: 1468371.472 ops/s
# Warmup Iteration   7: 1465044.697 ops/s
# Warmup Iteration   8: 1509449.640 ops/s
# Warmup Iteration   9: 1478439.179 ops/s
# Warmup Iteration  10: 1470404.009 ops/s
# Warmup Iteration  11: 1440567.601 ops/s
# Warmup Iteration  12: 1438171.823 ops/s
# Warmup Iteration  13: 1529021.085 ops/s
# Warmup Iteration  14: 1431987.393 ops/s
# Warmup Iteration  15: 1547782.926 ops/s
# Warmup Iteration  16: 1464832.683 ops/s
# Warmup Iteration  17: 1459454.083 ops/s
# Warmup Iteration  18: 1497802.505 ops/s
# Warmup Iteration  19: 1465853.479 ops/s
# Warmup Iteration  20: 1249272.003 ops/s
# Warmup Iteration  21: 1441399.179 ops/s
# Warmup Iteration  22: 1459710.554 ops/s
# Warmup Iteration  23: 1511810.132 ops/s
# Warmup Iteration  24: 1481907.156 ops/s
# Warmup Iteration  25: 1384982.063 ops/s
# Warmup Iteration  26: 1525486.335 ops/s
# Warmup Iteration  27: 1483142.838 ops/s
# Warmup Iteration  28: 1461256.326 ops/s
# Warmup Iteration  29: 1538877.940 ops/s
# Warmup Iteration  30: 1439661.789 ops/s
Iteration   1: 1494284.720 ops/s
Iteration   2: 1403624.237 ops/s
Iteration   3: 1504466.203 ops/s
Iteration   4: 1532708.134 ops/s
Iteration   5: 1456066.056 ops/s
Iteration   6: 1527511.084 ops/s
Iteration   7: 1468037.828 ops/s
Iteration   8: 1444151.763 ops/s
Iteration   9: 1493040.813 ops/s
Iteration  10: 1466019.661 ops/s
Iteration  11: 1521979.191 ops/s
Iteration  12: 1532005.964 ops/s
Iteration  13: 1426870.225 ops/s
Iteration  14: 1496163.578 ops/s
Iteration  15: 1483031.376 ops/s
Iteration  16: 1524397.180 ops/s
Iteration  17: 1447707.045 ops/s
Iteration  18: 1527338.366 ops/s
Iteration  19: 1446780.099 ops/s
Iteration  20: 1477766.300 ops/s
Iteration  21: 1465101.123 ops/s
Iteration  22: 1488849.127 ops/s
Iteration  23: 1418217.421 ops/s
Iteration  24: 1481728.775 ops/s
Iteration  25: 1515219.422 ops/s
Iteration  26: 1457226.024 ops/s
Iteration  27: 1508520.503 ops/s
Iteration  28: 1458272.408 ops/s
Iteration  29: 1495839.239 ops/s
Iteration  30: 1527564.411 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_reentrantComplete":
  1483016.276 ±(99.9%) 23982.416 ops/s [Average]
  (min, avg, max) = (1403624.237, 1483016.276, 1532708.134), stdev = 35895.754
  CI (99.9%): [1459033.860, 1506998.692] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
ObservableThrottleLatestTest._Benchmark.benchmark_reentrantComplete  thrpt   30  1483016.276 ± 23982.416  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 703645.822 ops/s
# Warmup Iteration   2: 1233105.097 ops/s
# Warmup Iteration   3: 2612810.094 ops/s
# Warmup Iteration   4: 2612791.812 ops/s
# Warmup Iteration   5: 3358156.969 ops/s
# Warmup Iteration   6: 3184247.045 ops/s
# Warmup Iteration   7: 3305144.165 ops/s
# Warmup Iteration   8: 3177277.664 ops/s
# Warmup Iteration   9: 3190137.785 ops/s
# Warmup Iteration  10: 3286528.353 ops/s
# Warmup Iteration  11: 3179719.420 ops/s
# Warmup Iteration  12: 3332749.835 ops/s
# Warmup Iteration  13: 3187833.282 ops/s
# Warmup Iteration  14: 3156716.760 ops/s
# Warmup Iteration  15: 3384209.150 ops/s
# Warmup Iteration  16: 3184308.050 ops/s
# Warmup Iteration  17: 3286360.184 ops/s
# Warmup Iteration  18: 3180247.582 ops/s
# Warmup Iteration  19: 3256415.459 ops/s
# Warmup Iteration  20: 3178582.391 ops/s
# Warmup Iteration  21: 3261522.548 ops/s
# Warmup Iteration  22: 3182200.492 ops/s
# Warmup Iteration  23: 3206985.230 ops/s
# Warmup Iteration  24: 3164365.856 ops/s
# Warmup Iteration  25: 3347372.712 ops/s
# Warmup Iteration  26: 3194677.540 ops/s
# Warmup Iteration  27: 3234330.399 ops/s
# Warmup Iteration  28: 3206488.368 ops/s
# Warmup Iteration  29: 3193546.445 ops/s
# Warmup Iteration  30: 3349660.136 ops/s
Iteration   1: 3152508.530 ops/s
Iteration   2: 3242417.732 ops/s
Iteration   3: 3213564.633 ops/s
Iteration   4: 3275739.687 ops/s
Iteration   5: 3111704.152 ops/s
Iteration   6: 3148248.891 ops/s
Iteration   7: 3332802.586 ops/s
Iteration   8: 3168634.645 ops/s
Iteration   9: 3237798.358 ops/s
Iteration  10: 3231812.704 ops/s
Iteration  11: 3190735.128 ops/s
Iteration  12: 3315510.223 ops/s
Iteration  13: 3130538.467 ops/s
Iteration  14: 3203277.369 ops/s
Iteration  15: 3154841.808 ops/s
Iteration  16: 3170710.378 ops/s
Iteration  17: 3309272.954 ops/s
Iteration  18: 3209654.586 ops/s
Iteration  19: 3254759.155 ops/s
Iteration  20: 3161151.031 ops/s
Iteration  21: 3248087.558 ops/s
Iteration  22: 3303252.427 ops/s
Iteration  23: 3093988.579 ops/s
Iteration  24: 3282196.018 ops/s
Iteration  25: 3129163.604 ops/s
Iteration  26: 3321877.555 ops/s
Iteration  27: 3210558.823 ops/s
Iteration  28: 3227334.403 ops/s
Iteration  29: 3249444.446 ops/s
Iteration  30: 3186362.200 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteSize":
  3215598.288 ±(99.9%) 44081.429 ops/s [Average]
  (min, avg, max) = (3093988.579, 3215598.288, 3332802.586), stdev = 65979.012
  CI (99.9%): [3171516.859, 3259679.716] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionCompleteSize  thrpt   30  3215598.288 ± 44081.429  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposeNoNeedForReset$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposeNoNeedForReset

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 280394.489 ops/s
# Warmup Iteration   2: 984137.488 ops/s
# Warmup Iteration   3: 1361124.906 ops/s
# Warmup Iteration   4: 1693905.381 ops/s
# Warmup Iteration   5: 1726683.197 ops/s
# Warmup Iteration   6: 1726106.844 ops/s
# Warmup Iteration   7: 1735815.058 ops/s
# Warmup Iteration   8: 1733508.154 ops/s
# Warmup Iteration   9: 1687867.842 ops/s
# Warmup Iteration  10: 1754912.479 ops/s
# Warmup Iteration  11: 1759412.317 ops/s
# Warmup Iteration  12: 1673955.475 ops/s
# Warmup Iteration  13: 1766890.944 ops/s
# Warmup Iteration  14: 1532124.461 ops/s
# Warmup Iteration  15: 1475929.476 ops/s
# Warmup Iteration  16: 1654587.607 ops/s
# Warmup Iteration  17: 1716870.611 ops/s
# Warmup Iteration  18: 1774315.750 ops/s
# Warmup Iteration  19: 1715306.205 ops/s
# Warmup Iteration  20: 1658412.975 ops/s
# Warmup Iteration  21: 1772989.431 ops/s
# Warmup Iteration  22: 1757149.722 ops/s
# Warmup Iteration  23: 1689059.522 ops/s
# Warmup Iteration  24: 1728877.293 ops/s
# Warmup Iteration  25: 1691091.302 ops/s
# Warmup Iteration  26: 1696745.435 ops/s
# Warmup Iteration  27: 1749384.666 ops/s
# Warmup Iteration  28: 1671433.338 ops/s
# Warmup Iteration  29: 1713331.438 ops/s
# Warmup Iteration  30: 1762566.653 ops/s
Iteration   1: 1658057.454 ops/s
Iteration   2: 1739404.208 ops/s
Iteration   3: 1768369.664 ops/s
Iteration   4: 1672508.328 ops/s
Iteration   5: 1757756.244 ops/s
Iteration   6: 1788572.850 ops/s
Iteration   7: 1700312.060 ops/s
Iteration   8: 1773736.783 ops/s
Iteration   9: 1666728.331 ops/s
Iteration  10: 1780125.264 ops/s
Iteration  11: 1647062.800 ops/s
Iteration  12: 1731623.031 ops/s
Iteration  13: 1748550.870 ops/s
Iteration  14: 1699383.440 ops/s
Iteration  15: 1654269.813 ops/s
Iteration  16: 1750470.148 ops/s
Iteration  17: 1704635.218 ops/s
Iteration  18: 1738374.748 ops/s
Iteration  19: 1701115.740 ops/s
Iteration  20: 1720401.122 ops/s
Iteration  21: 1728837.721 ops/s
Iteration  22: 1733727.560 ops/s
Iteration  23: 1679225.008 ops/s
Iteration  24: 1669923.523 ops/s
Iteration  25: 1787181.413 ops/s
Iteration  26: 1631087.338 ops/s
Iteration  27: 1763763.274 ops/s
Iteration  28: 1666558.349 ops/s
Iteration  29: 1702742.550 ops/s
Iteration  30: 1744224.293 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_disposeNoNeedForReset":
  1716957.638 ±(99.9%) 30332.093 ops/s [Average]
  (min, avg, max) = (1631087.338, 1716957.638, 1788572.850), stdev = 45399.653
  CI (99.9%): [1686625.545, 1747289.731] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_disposeNoNeedForReset  thrpt   30  1716957.638 ± 30332.093  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionErrorSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionErrorSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161794.318 ops/s
# Warmup Iteration   2: 260875.710 ops/s
# Warmup Iteration   3: 645515.352 ops/s
# Warmup Iteration   4: 632801.394 ops/s
# Warmup Iteration   5: 627914.911 ops/s
# Warmup Iteration   6: 653999.155 ops/s
# Warmup Iteration   7: 650434.162 ops/s
# Warmup Iteration   8: 617729.365 ops/s
# Warmup Iteration   9: 622940.407 ops/s
# Warmup Iteration  10: 660036.751 ops/s
# Warmup Iteration  11: 650031.872 ops/s
# Warmup Iteration  12: 621701.478 ops/s
# Warmup Iteration  13: 626746.882 ops/s
# Warmup Iteration  14: 628960.574 ops/s
# Warmup Iteration  15: 673395.911 ops/s
# Warmup Iteration  16: 614271.168 ops/s
# Warmup Iteration  17: 661821.326 ops/s
# Warmup Iteration  18: 657781.532 ops/s
# Warmup Iteration  19: 690325.859 ops/s
# Warmup Iteration  20: 686718.277 ops/s
# Warmup Iteration  21: 664294.463 ops/s
# Warmup Iteration  22: 680061.697 ops/s
# Warmup Iteration  23: 661950.247 ops/s
# Warmup Iteration  24: 650942.098 ops/s
# Warmup Iteration  25: 682714.931 ops/s
# Warmup Iteration  26: 659296.280 ops/s
# Warmup Iteration  27: 668783.748 ops/s
# Warmup Iteration  28: 661833.262 ops/s
# Warmup Iteration  29: 678409.513 ops/s
# Warmup Iteration  30: 701969.344 ops/s
Iteration   1: 670744.828 ops/s
Iteration   2: 689621.691 ops/s
Iteration   3: 691244.550 ops/s
Iteration   4: 657360.493 ops/s
Iteration   5: 697390.640 ops/s
Iteration   6: 670256.695 ops/s
Iteration   7: 685680.771 ops/s
Iteration   8: 661563.232 ops/s
Iteration   9: 706228.734 ops/s
Iteration  10: 670958.817 ops/s
Iteration  11: 686343.504 ops/s
Iteration  12: 696761.975 ops/s
Iteration  13: 667594.099 ops/s
Iteration  14: 668319.893 ops/s
Iteration  15: 668713.785 ops/s
Iteration  16: 657692.250 ops/s
Iteration  17: 695622.777 ops/s
Iteration  18: 660417.283 ops/s
Iteration  19: 683563.692 ops/s
Iteration  20: 694357.038 ops/s
Iteration  21: 654850.676 ops/s
Iteration  22: 692780.266 ops/s
Iteration  23: 672232.197 ops/s
Iteration  24: 659358.661 ops/s
Iteration  25: 688718.699 ops/s
Iteration  26: 677312.210 ops/s
Iteration  27: 662351.378 ops/s
Iteration  28: 651273.457 ops/s
Iteration  29: 668519.432 ops/s
Iteration  30: 676690.409 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionErrorSize":
  676150.804 ±(99.9%) 10109.480 ops/s [Average]
  (min, avg, max) = (651273.457, 676150.804, 706228.734), stdev = 15131.395
  CI (99.9%): [666041.324, 686260.285] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_noHeadRetentionErrorSize  thrpt   30  676150.804 ± 10109.480  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manySourcesIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manySourcesIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 136814.044 ops/s
# Warmup Iteration   2: 298347.534 ops/s
# Warmup Iteration   3: 779350.880 ops/s
# Warmup Iteration   4: 820313.459 ops/s
# Warmup Iteration   5: 842729.720 ops/s
# Warmup Iteration   6: 835483.957 ops/s
# Warmup Iteration   7: 829963.758 ops/s
# Warmup Iteration   8: 818712.087 ops/s
# Warmup Iteration   9: 656137.207 ops/s
# Warmup Iteration  10: 860289.708 ops/s
# Warmup Iteration  11: 846007.384 ops/s
# Warmup Iteration  12: 864808.087 ops/s
# Warmup Iteration  13: 805160.508 ops/s
# Warmup Iteration  14: 823652.887 ops/s
# Warmup Iteration  15: 852690.964 ops/s
# Warmup Iteration  16: 826056.894 ops/s
# Warmup Iteration  17: 860580.953 ops/s
# Warmup Iteration  18: 845539.330 ops/s
# Warmup Iteration  19: 872413.941 ops/s
# Warmup Iteration  20: 833666.619 ops/s
# Warmup Iteration  21: 837531.456 ops/s
# Warmup Iteration  22: 824361.827 ops/s
# Warmup Iteration  23: 872706.890 ops/s
# Warmup Iteration  24: 871868.309 ops/s
# Warmup Iteration  25: 883489.879 ops/s
# Warmup Iteration  26: 819857.387 ops/s
# Warmup Iteration  27: 873166.167 ops/s
# Warmup Iteration  28: 880584.431 ops/s
# Warmup Iteration  29: 818737.929 ops/s
# Warmup Iteration  30: 840304.480 ops/s
Iteration   1: 852324.524 ops/s
Iteration   2: 836788.398 ops/s
Iteration   3: 824176.909 ops/s
Iteration   4: 820702.244 ops/s
Iteration   5: 850693.032 ops/s
Iteration   6: 840760.510 ops/s
Iteration   7: 878740.203 ops/s
Iteration   8: 862648.014 ops/s
Iteration   9: 848900.559 ops/s
Iteration  10: 884113.879 ops/s
Iteration  11: 822899.467 ops/s
Iteration  12: 868726.109 ops/s
Iteration  13: 831572.587 ops/s
Iteration  14: 875783.554 ops/s
Iteration  15: 886656.608 ops/s
Iteration  16: 837774.159 ops/s
Iteration  17: 850551.775 ops/s
Iteration  18: 879502.947 ops/s
Iteration  19: 845840.523 ops/s
Iteration  20: 893311.210 ops/s
Iteration  21: 825270.004 ops/s
Iteration  22: 839786.799 ops/s
Iteration  23: 874472.988 ops/s
Iteration  24: 841509.377 ops/s
Iteration  25: 894331.561 ops/s
Iteration  26: 857118.164 ops/s
Iteration  27: 831246.370 ops/s
Iteration  28: 878610.608 ops/s
Iteration  29: 843147.183 ops/s
Iteration  30: 836295.530 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWithLatestFromTest._Benchmark.benchmark_manySourcesIterable":
  853808.526 ±(99.9%) 15022.277 ops/s [Average]
  (min, avg, max) = (820702.244, 853808.526, 894331.561), stdev = 22484.639
  CI (99.9%): [838786.249, 868830.803] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
ObservableWithLatestFromTest._Benchmark.benchmark_manySourcesIterable  thrpt   30  853808.526 ± 15022.277  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothCompleteWhileComparing$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothCompleteWhileComparing

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118698.615 ops/s
# Warmup Iteration   2: 547728.433 ops/s
# Warmup Iteration   3: 973947.983 ops/s
# Warmup Iteration   4: 1081003.213 ops/s
# Warmup Iteration   5: 1131627.734 ops/s
# Warmup Iteration   6: 1125815.060 ops/s
# Warmup Iteration   7: 1069335.643 ops/s
# Warmup Iteration   8: 1133936.544 ops/s
# Warmup Iteration   9: 1137535.078 ops/s
# Warmup Iteration  10: 1091517.053 ops/s
# Warmup Iteration  11: 1101623.545 ops/s
# Warmup Iteration  12: 1111896.268 ops/s
# Warmup Iteration  13: 1107962.982 ops/s
# Warmup Iteration  14: 1142914.436 ops/s
# Warmup Iteration  15: 1049225.749 ops/s
# Warmup Iteration  16: 1144472.611 ops/s
# Warmup Iteration  17: 1079647.864 ops/s
# Warmup Iteration  18: 1117827.025 ops/s
# Warmup Iteration  19: 1149235.040 ops/s
# Warmup Iteration  20: 1087004.478 ops/s
# Warmup Iteration  21: 1150844.555 ops/s
# Warmup Iteration  22: 1118692.512 ops/s
# Warmup Iteration  23: 1079446.336 ops/s
# Warmup Iteration  24: 1148365.814 ops/s
# Warmup Iteration  25: 1113240.119 ops/s
# Warmup Iteration  26: 1127527.786 ops/s
# Warmup Iteration  27: 1156452.923 ops/s
# Warmup Iteration  28: 1097151.712 ops/s
# Warmup Iteration  29: 1161917.987 ops/s
# Warmup Iteration  30: 1159898.620 ops/s
Iteration   1: 1112308.046 ops/s
Iteration   2: 1149906.228 ops/s
Iteration   3: 1112692.818 ops/s
Iteration   4: 1117948.922 ops/s
Iteration   5: 1185858.901 ops/s
Iteration   6: 1068543.239 ops/s
Iteration   7: 1167866.716 ops/s
Iteration   8: 1089888.393 ops/s
Iteration   9: 1155616.118 ops/s
Iteration  10: 1132459.170 ops/s
Iteration  11: 1108227.853 ops/s
Iteration  12: 1141423.162 ops/s
Iteration  13: 1163804.837 ops/s
Iteration  14: 1089608.041 ops/s
Iteration  15: 1124447.920 ops/s
Iteration  16: 1174215.005 ops/s
Iteration  17: 1100275.106 ops/s
Iteration  18: 1167041.152 ops/s
Iteration  19: 1116173.488 ops/s
Iteration  20: 1058315.927 ops/s
Iteration  21: 1170996.202 ops/s
Iteration  22: 1131963.773 ops/s
Iteration  23: 1108417.582 ops/s
Iteration  24: 1136572.842 ops/s
Iteration  25: 1112495.524 ops/s
Iteration  26: 1098362.011 ops/s
Iteration  27: 1148156.175 ops/s
Iteration  28: 1126140.725 ops/s
Iteration  29: 1170694.509 ops/s
Iteration  30: 1111573.166 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothCompleteWhileComparing":
  1128399.785 ±(99.9%) 21656.601 ops/s [Average]
  (min, avg, max) = (1058315.927, 1128399.785, 1185858.901), stdev = 32414.583
  CI (99.9%): [1106743.184, 1150056.386] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_bothCompleteWhileComparing  thrpt   30  1128399.785 ± 21656.601  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothCompleteWhileComparingAsObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothCompleteWhileComparingAsObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 96340.649 ops/s
# Warmup Iteration   2: 407355.220 ops/s
# Warmup Iteration   3: 861718.518 ops/s
# Warmup Iteration   4: 816500.255 ops/s
# Warmup Iteration   5: 1050564.525 ops/s
# Warmup Iteration   6: 1077172.033 ops/s
# Warmup Iteration   7: 1058073.234 ops/s
# Warmup Iteration   8: 1032884.980 ops/s
# Warmup Iteration   9: 1025864.103 ops/s
# Warmup Iteration  10: 1082466.026 ops/s
# Warmup Iteration  11: 1079202.419 ops/s
# Warmup Iteration  12: 1004437.850 ops/s
# Warmup Iteration  13: 1047204.803 ops/s
# Warmup Iteration  14: 1063350.899 ops/s
# Warmup Iteration  15: 1050791.143 ops/s
# Warmup Iteration  16: 1113579.193 ops/s
# Warmup Iteration  17: 1082005.776 ops/s
# Warmup Iteration  18: 1049389.396 ops/s
# Warmup Iteration  19: 1080696.718 ops/s
# Warmup Iteration  20: 1002029.639 ops/s
# Warmup Iteration  21: 1070587.288 ops/s
# Warmup Iteration  22: 1104049.712 ops/s
# Warmup Iteration  23: 1006821.350 ops/s
# Warmup Iteration  24: 1046363.658 ops/s
# Warmup Iteration  25: 1071463.909 ops/s
# Warmup Iteration  26: 1061991.067 ops/s
# Warmup Iteration  27: 1075550.390 ops/s
# Warmup Iteration  28: 1063984.561 ops/s
# Warmup Iteration  29: 1069350.928 ops/s
# Warmup Iteration  30: 1112862.246 ops/s
Iteration   1: 1049638.773 ops/s
Iteration   2: 1025140.349 ops/s
Iteration   3: 1093706.652 ops/s
Iteration   4: 1026646.313 ops/s
Iteration   5: 1008612.415 ops/s
Iteration   6: 1076339.260 ops/s
Iteration   7: 1025492.219 ops/s
Iteration   8: 1077110.790 ops/s
Iteration   9: 1058936.174 ops/s
Iteration  10: 1051768.838 ops/s
Iteration  11: 1113202.990 ops/s
Iteration  12: 1032587.138 ops/s
Iteration  13: 1074470.681 ops/s
Iteration  14: 1065234.954 ops/s
Iteration  15: 1024202.116 ops/s
Iteration  16: 1059895.625 ops/s
Iteration  17: 1041353.938 ops/s
Iteration  18: 1047695.866 ops/s
Iteration  19: 1087818.656 ops/s
Iteration  20: 997243.320 ops/s
Iteration  21: 1051918.465 ops/s
Iteration  22: 1054815.290 ops/s
Iteration  23: 1084277.246 ops/s
Iteration  24: 1101865.358 ops/s
Iteration  25: 1014908.171 ops/s
Iteration  26: 1075087.509 ops/s
Iteration  27: 1019195.010 ops/s
Iteration  28: 1105394.764 ops/s
Iteration  29: 1080318.931 ops/s
Iteration  30: 1057702.152 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSequenceEqualTest._Benchmark.benchmark_bothCompleteWhileComparingAsObservable":
  1056085.999 ±(99.9%) 20280.970 ops/s [Average]
  (min, avg, max) = (997243.320, 1056085.999, 1113202.990), stdev = 30355.603
  CI (99.9%): [1035805.029, 1076366.968] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt        Score       Error  Units
ObservableSequenceEqualTest._Benchmark.benchmark_bothCompleteWhileComparingAsObservable  thrpt   30  1056085.999 ± 20280.970  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelDrop$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelDrop

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38714.610 ops/s
# Warmup Iteration   2: 163679.665 ops/s
# Warmup Iteration   3: 196085.251 ops/s
# Warmup Iteration   4: 227807.073 ops/s
# Warmup Iteration   5: 240615.778 ops/s
# Warmup Iteration   6: 230435.249 ops/s
# Warmup Iteration   7: 233033.081 ops/s
# Warmup Iteration   8: 242679.556 ops/s
# Warmup Iteration   9: 217653.711 ops/s
# Warmup Iteration  10: 233514.828 ops/s
# Warmup Iteration  11: 233572.236 ops/s
# Warmup Iteration  12: 227377.244 ops/s
# Warmup Iteration  13: 235654.937 ops/s
# Warmup Iteration  14: 239118.586 ops/s
# Warmup Iteration  15: 230986.465 ops/s
# Warmup Iteration  16: 225391.725 ops/s
# Warmup Iteration  17: 234962.847 ops/s
# Warmup Iteration  18: 238488.634 ops/s
# Warmup Iteration  19: 244552.451 ops/s
# Warmup Iteration  20: 236872.398 ops/s
# Warmup Iteration  21: 237482.330 ops/s
# Warmup Iteration  22: 247864.860 ops/s
# Warmup Iteration  23: 239669.275 ops/s
# Warmup Iteration  24: 242677.694 ops/s
# Warmup Iteration  25: 251298.209 ops/s
# Warmup Iteration  26: 234747.707 ops/s
# Warmup Iteration  27: 250074.686 ops/s
# Warmup Iteration  28: 237228.217 ops/s
# Warmup Iteration  29: 242671.465 ops/s
# Warmup Iteration  30: 240385.869 ops/s
Iteration   1: 247202.655 ops/s
Iteration   2: 255357.826 ops/s
Iteration   3: 238886.273 ops/s
Iteration   4: 238598.990 ops/s
Iteration   5: 249160.060 ops/s
Iteration   6: 237184.420 ops/s
Iteration   7: 241706.303 ops/s
Iteration   8: 247221.634 ops/s
Iteration   9: 234645.193 ops/s
Iteration  10: 252944.523 ops/s
Iteration  11: 235639.584 ops/s
Iteration  12: 245868.620 ops/s
Iteration  13: 241922.989 ops/s
Iteration  14: 241009.837 ops/s
Iteration  15: 233187.033 ops/s
Iteration  16: 252328.512 ops/s
Iteration  17: 238062.997 ops/s
Iteration  18: 241396.364 ops/s
Iteration  19: 237083.004 ops/s
Iteration  20: 244002.592 ops/s
Iteration  21: 231171.263 ops/s
Iteration  22: 244970.838 ops/s
Iteration  23: 240759.454 ops/s
Iteration  24: 239412.059 ops/s
Iteration  25: 253152.252 ops/s
Iteration  26: 234396.936 ops/s
Iteration  27: 249690.786 ops/s
Iteration  28: 243196.113 ops/s
Iteration  29: 234184.769 ops/s
Iteration  30: 230701.646 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelDrop":
  241834.851 ±(99.9%) 4562.244 ops/s [Average]
  (min, avg, max) = (230701.646, 241834.851, 255357.826), stdev = 6828.553
  CI (99.9%): [237272.606, 246397.095] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelDrop  thrpt   30  241834.851 ± 4562.244  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 53191.479 ops/s
# Warmup Iteration   2: 122260.441 ops/s
# Warmup Iteration   3: 235685.084 ops/s
# Warmup Iteration   4: 231154.415 ops/s
# Warmup Iteration   5: 243708.063 ops/s
# Warmup Iteration   6: 241557.754 ops/s
# Warmup Iteration   7: 223455.793 ops/s
# Warmup Iteration   8: 233731.708 ops/s
# Warmup Iteration   9: 240262.511 ops/s
# Warmup Iteration  10: 232355.731 ops/s
# Warmup Iteration  11: 234865.477 ops/s
# Warmup Iteration  12: 236831.854 ops/s
# Warmup Iteration  13: 224758.821 ops/s
# Warmup Iteration  14: 243387.852 ops/s
# Warmup Iteration  15: 237741.803 ops/s
# Warmup Iteration  16: 222110.820 ops/s
# Warmup Iteration  17: 251563.953 ops/s
# Warmup Iteration  18: 248188.452 ops/s
# Warmup Iteration  19: 248504.643 ops/s
# Warmup Iteration  20: 247595.978 ops/s
# Warmup Iteration  21: 247475.564 ops/s
# Warmup Iteration  22: 252232.555 ops/s
# Warmup Iteration  23: 252255.191 ops/s
# Warmup Iteration  24: 255437.379 ops/s
# Warmup Iteration  25: 238721.324 ops/s
# Warmup Iteration  26: 247331.498 ops/s
# Warmup Iteration  27: 252471.189 ops/s
# Warmup Iteration  28: 238301.420 ops/s
# Warmup Iteration  29: 247084.641 ops/s
# Warmup Iteration  30: 255113.322 ops/s
Iteration   1: 226866.236 ops/s
Iteration   2: 247514.659 ops/s
Iteration   3: 260459.322 ops/s
Iteration   4: 240174.057 ops/s
Iteration   5: 255060.507 ops/s
Iteration   6: 248915.717 ops/s
Iteration   7: 247289.477 ops/s
Iteration   8: 249885.498 ops/s
Iteration   9: 247925.410 ops/s
Iteration  10: 253050.805 ops/s
Iteration  11: 239642.950 ops/s
Iteration  12: 253097.551 ops/s
Iteration  13: 250182.184 ops/s
Iteration  14: 250690.732 ops/s
Iteration  15: 238201.154 ops/s
Iteration  16: 257255.370 ops/s
Iteration  17: 247200.320 ops/s
Iteration  18: 243983.229 ops/s
Iteration  19: 249705.662 ops/s
Iteration  20: 247928.030 ops/s
Iteration  21: 242646.610 ops/s
Iteration  22: 254812.442 ops/s
Iteration  23: 245180.708 ops/s
Iteration  24: 253639.829 ops/s
Iteration  25: 256602.099 ops/s
Iteration  26: 242087.454 ops/s
Iteration  27: 243313.066 ops/s
Iteration  28: 257130.021 ops/s
Iteration  29: 236188.202 ops/s
Iteration  30: 246162.668 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelLatest":
  247759.732 ±(99.9%) 4841.856 ops/s [Average]
  (min, avg, max) = (226866.236, 247759.732, 260459.322), stdev = 7247.063
  CI (99.9%): [242917.876, 252601.588] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribedNoCancelLatest  thrpt   30  247759.732 ± 4841.856  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelledCloseCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelledCloseCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 26706.294 ops/s
# Warmup Iteration   2: 142249.820 ops/s
# Warmup Iteration   3: 181000.930 ops/s
# Warmup Iteration   4: 210299.034 ops/s
# Warmup Iteration   5: 190860.762 ops/s
# Warmup Iteration   6: 215407.064 ops/s
# Warmup Iteration   7: 221043.531 ops/s
# Warmup Iteration   8: 216248.701 ops/s
# Warmup Iteration   9: 222011.273 ops/s
# Warmup Iteration  10: 215543.533 ops/s
# Warmup Iteration  11: 212295.339 ops/s
# Warmup Iteration  12: 218168.751 ops/s
# Warmup Iteration  13: 212790.954 ops/s
# Warmup Iteration  14: 221814.394 ops/s
# Warmup Iteration  15: 228910.704 ops/s
# Warmup Iteration  16: 207679.754 ops/s
# Warmup Iteration  17: 224432.692 ops/s
# Warmup Iteration  18: 223067.473 ops/s
# Warmup Iteration  19: 225757.599 ops/s
# Warmup Iteration  20: 223525.018 ops/s
# Warmup Iteration  21: 225472.000 ops/s
# Warmup Iteration  22: 229415.572 ops/s
# Warmup Iteration  23: 219499.978 ops/s
# Warmup Iteration  24: 219999.240 ops/s
# Warmup Iteration  25: 232687.629 ops/s
# Warmup Iteration  26: 217544.506 ops/s
# Warmup Iteration  27: 225137.793 ops/s
# Warmup Iteration  28: 222088.116 ops/s
# Warmup Iteration  29: 227168.189 ops/s
# Warmup Iteration  30: 220529.033 ops/s
Iteration   1: 224336.508 ops/s
Iteration   2: 234161.629 ops/s
Iteration   3: 216867.250 ops/s
Iteration   4: 226780.699 ops/s
Iteration   5: 233634.091 ops/s
Iteration   6: 218642.469 ops/s
Iteration   7: 232035.453 ops/s
Iteration   8: 218521.472 ops/s
Iteration   9: 230085.923 ops/s
Iteration  10: 230601.906 ops/s
Iteration  11: 220679.868 ops/s
Iteration  12: 232551.377 ops/s
Iteration  13: 216008.058 ops/s
Iteration  14: 222480.134 ops/s
Iteration  15: 229476.663 ops/s
Iteration  16: 221893.681 ops/s
Iteration  17: 227527.261 ops/s
Iteration  18: 224187.908 ops/s
Iteration  19: 232521.157 ops/s
Iteration  20: 233129.587 ops/s
Iteration  21: 220981.331 ops/s
Iteration  22: 222162.322 ops/s
Iteration  23: 232858.956 ops/s
Iteration  24: 221101.575 ops/s
Iteration  25: 182879.357 ops/s
Iteration  26: 231211.853 ops/s
Iteration  27: 230150.487 ops/s
Iteration  28: 223377.253 ops/s
Iteration  29: 222435.986 ops/s
Iteration  30: 224023.509 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelledCloseCrash":
  224576.857 ±(99.9%) 6428.545 ops/s [Average]
  (min, avg, max) = (182879.357, 224576.857, 234161.629), stdev = 9621.944
  CI (99.9%): [218148.313, 231005.402] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
ObservableFlatMapStreamTest._Benchmark.benchmark_upstreamCancelledCloseCrash  thrpt   30  224576.857 ± 6428.545  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNextBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNextBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 139713.527 ops/s
# Warmup Iteration   2: 702374.883 ops/s
# Warmup Iteration   3: 1575824.216 ops/s
# Warmup Iteration   4: 1551191.115 ops/s
# Warmup Iteration   5: 1817052.033 ops/s
# Warmup Iteration   6: 1776770.087 ops/s
# Warmup Iteration   7: 1833310.857 ops/s
# Warmup Iteration   8: 1749046.208 ops/s
# Warmup Iteration   9: 1778963.813 ops/s
# Warmup Iteration  10: 1859028.753 ops/s
# Warmup Iteration  11: 1788426.360 ops/s
# Warmup Iteration  12: 1826852.952 ops/s
# Warmup Iteration  13: 1867778.466 ops/s
# Warmup Iteration  14: 1792183.262 ops/s
# Warmup Iteration  15: 1773711.541 ops/s
# Warmup Iteration  16: 1865671.875 ops/s
# Warmup Iteration  17: 1817351.632 ops/s
# Warmup Iteration  18: 1855315.985 ops/s
# Warmup Iteration  19: 1803709.496 ops/s
# Warmup Iteration  20: 1913681.316 ops/s
# Warmup Iteration  21: 1826216.866 ops/s
# Warmup Iteration  22: 1763829.188 ops/s
# Warmup Iteration  23: 1860128.987 ops/s
# Warmup Iteration  24: 1898612.724 ops/s
# Warmup Iteration  25: 1806160.788 ops/s
# Warmup Iteration  26: 1854622.835 ops/s
# Warmup Iteration  27: 1783400.154 ops/s
# Warmup Iteration  28: 1921853.615 ops/s
# Warmup Iteration  29: 1786177.519 ops/s
# Warmup Iteration  30: 1871133.861 ops/s
Iteration   1: 1825612.132 ops/s
Iteration   2: 1798129.751 ops/s
Iteration   3: 1900419.992 ops/s
Iteration   4: 1799964.760 ops/s
Iteration   5: 1826650.263 ops/s
Iteration   6: 1896266.930 ops/s
Iteration   7: 1939093.455 ops/s
Iteration   8: 1796280.945 ops/s
Iteration   9: 1774897.635 ops/s
Iteration  10: 1831902.862 ops/s
Iteration  11: 1878369.207 ops/s
Iteration  12: 1875883.566 ops/s
Iteration  13: 1778228.182 ops/s
Iteration  14: 1836891.306 ops/s
Iteration  15: 1893552.238 ops/s
Iteration  16: 1906764.337 ops/s
Iteration  17: 1825825.772 ops/s
Iteration  18: 1835985.010 ops/s
Iteration  19: 1823199.685 ops/s
Iteration  20: 1879977.843 ops/s
Iteration  21: 1790224.185 ops/s
Iteration  22: 1912127.112 ops/s
Iteration  23: 1756885.671 ops/s
Iteration  24: 1900055.545 ops/s
Iteration  25: 1822285.694 ops/s
Iteration  26: 1859089.085 ops/s
Iteration  27: 1841734.986 ops/s
Iteration  28: 1796858.891 ops/s
Iteration  29: 1902203.084 ops/s
Iteration  30: 1905494.409 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_reentrantOnNextBound":
  1847028.484 ±(99.9%) 32827.974 ops/s [Average]
  (min, avg, max) = (1756885.671, 1847028.484, 1939093.455), stdev = 49135.370
  CI (99.9%): [1814200.510, 1879856.458] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_reentrantOnNextBound  thrpt   30  1847028.484 ± 32827.974  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 186153.580 ops/s
# Warmup Iteration   2: 537885.308 ops/s
# Warmup Iteration   3: 1041122.948 ops/s
# Warmup Iteration   4: 1849917.882 ops/s
# Warmup Iteration   5: 1567606.132 ops/s
# Warmup Iteration   6: 1675765.799 ops/s
# Warmup Iteration   7: 1595416.901 ops/s
# Warmup Iteration   8: 1830587.357 ops/s
# Warmup Iteration   9: 1869531.840 ops/s
# Warmup Iteration  10: 1808774.886 ops/s
# Warmup Iteration  11: 1771671.126 ops/s
# Warmup Iteration  12: 1784254.306 ops/s
# Warmup Iteration  13: 1846189.178 ops/s
# Warmup Iteration  14: 1739033.600 ops/s
# Warmup Iteration  15: 1825383.448 ops/s
# Warmup Iteration  16: 1774836.335 ops/s
# Warmup Iteration  17: 1819868.350 ops/s
# Warmup Iteration  18: 1742843.811 ops/s
# Warmup Iteration  19: 1904638.688 ops/s
# Warmup Iteration  20: 1810640.161 ops/s
# Warmup Iteration  21: 1777425.648 ops/s
# Warmup Iteration  22: 1858571.221 ops/s
# Warmup Iteration  23: 1846492.797 ops/s
# Warmup Iteration  24: 1760339.996 ops/s
# Warmup Iteration  25: 1791498.091 ops/s
# Warmup Iteration  26: 1810290.513 ops/s
# Warmup Iteration  27: 1827133.476 ops/s
# Warmup Iteration  28: 1776284.291 ops/s
# Warmup Iteration  29: 1811941.829 ops/s
# Warmup Iteration  30: 1826982.185 ops/s
Iteration   1: 1752451.168 ops/s
Iteration   2: 1786517.191 ops/s
Iteration   3: 1892790.599 ops/s
Iteration   4: 1773832.383 ops/s
Iteration   5: 1818947.618 ops/s
Iteration   6: 1780300.197 ops/s
Iteration   7: 1777371.666 ops/s
Iteration   8: 1809376.061 ops/s
Iteration   9: 1773238.408 ops/s
Iteration  10: 1786771.852 ops/s
Iteration  11: 1894525.289 ops/s
Iteration  12: 1734163.409 ops/s
Iteration  13: 1854282.674 ops/s
Iteration  14: 1834218.924 ops/s
Iteration  15: 1801939.829 ops/s
Iteration  16: 1765630.384 ops/s
Iteration  17: 1805570.916 ops/s
Iteration  18: 1760035.043 ops/s
Iteration  19: 1735420.378 ops/s
Iteration  20: 1598418.402 ops/s
Iteration  21: 1793001.788 ops/s
Iteration  22: 1808166.510 ops/s
Iteration  23: 1797590.978 ops/s
Iteration  24: 1796893.442 ops/s
Iteration  25: 1832269.638 ops/s
Iteration  26: 1777577.916 ops/s
Iteration  27: 1806745.966 ops/s
Iteration  28: 1747184.032 ops/s
Iteration  29: 1802494.736 ops/s
Iteration  30: 1763556.489 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextBound":
  1788709.463 ±(99.9%) 35310.081 ops/s [Average]
  (min, avg, max) = (1598418.402, 1788709.463, 1894525.289), stdev = 52850.471
  CI (99.9%): [1753399.382, 1824019.544] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_reentrantOnNextBound  thrpt   30  1788709.463 ± 35310.081  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24112.327 ops/s
# Warmup Iteration   2: 46057.907 ops/s
# Warmup Iteration   3: 64683.991 ops/s
# Warmup Iteration   4: 108407.646 ops/s
# Warmup Iteration   5: 123822.093 ops/s
# Warmup Iteration   6: 124461.566 ops/s
# Warmup Iteration   7: 112128.810 ops/s
# Warmup Iteration   8: 108842.387 ops/s
# Warmup Iteration   9: 116514.062 ops/s
# Warmup Iteration  10: 108908.675 ops/s
# Warmup Iteration  11: 97266.924 ops/s
# Warmup Iteration  12: 119586.264 ops/s
# Warmup Iteration  13: 127964.123 ops/s
# Warmup Iteration  14: 100310.724 ops/s
# Warmup Iteration  15: 118429.323 ops/s
# Warmup Iteration  16: 118816.029 ops/s
# Warmup Iteration  17: 110668.982 ops/s
# Warmup Iteration  18: 115094.505 ops/s
# Warmup Iteration  19: 124768.400 ops/s
# Warmup Iteration  20: 124479.950 ops/s
# Warmup Iteration  21: 101879.440 ops/s
# Warmup Iteration  22: 118049.490 ops/s
# Warmup Iteration  23: 113269.397 ops/s
# Warmup Iteration  24: 113784.357 ops/s
# Warmup Iteration  25: 101955.955 ops/s
# Warmup Iteration  26: 106852.119 ops/s
# Warmup Iteration  27: 103998.220 ops/s
# Warmup Iteration  28: 120832.724 ops/s
# Warmup Iteration  29: 98714.169 ops/s
# Warmup Iteration  30: 119964.375 ops/s
Iteration   1: 116994.394 ops/s
Iteration   2: 109243.709 ops/s
Iteration   3: 120747.315 ops/s
Iteration   4: 106728.520 ops/s
Iteration   5: 117252.200 ops/s
Iteration   6: 106426.516 ops/s
Iteration   7: 118906.636 ops/s
Iteration   8: 116167.149 ops/s
Iteration   9: 122473.473 ops/s
Iteration  10: 131947.117 ops/s
Iteration  11: 99447.666 ops/s
Iteration  12: 109015.125 ops/s
Iteration  13: 113363.859 ops/s
Iteration  14: 112810.544 ops/s
Iteration  15: 100236.006 ops/s
Iteration  16: 116802.140 ops/s
Iteration  17: 116994.183 ops/s
Iteration  18: 115152.073 ops/s
Iteration  19: 116934.110 ops/s
Iteration  20: 110684.485 ops/s
Iteration  21: 96466.059 ops/s
Iteration  22: 124990.049 ops/s
Iteration  23: 108799.474 ops/s
Iteration  24: 102848.023 ops/s
Iteration  25: 108546.567 ops/s
Iteration  26: 127664.373 ops/s
Iteration  27: 121343.837 ops/s
Iteration  28: 110958.493 ops/s
Iteration  29: 118153.184 ops/s
Iteration  30: 124502.016 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableTimeoutTest._Benchmark.benchmark_mainError":
  114086.643 ±(99.9%) 5648.471 ops/s [Average]
  (min, avg, max) = (96466.059, 114086.643, 131947.117), stdev = 8454.366
  CI (99.9%): [108438.172, 119735.114] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
CompletableTimeoutTest._Benchmark.benchmark_mainError  thrpt   30  114086.643 ± 5648.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTimedTest._Benchmark.benchmark_skipTimedDefaultScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTimedTest._Benchmark.benchmark_skipTimedDefaultScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31162.673 ops/s
# Warmup Iteration   2: 114307.478 ops/s
# Warmup Iteration   3: 136478.102 ops/s
# Warmup Iteration   4: 128683.744 ops/s
# Warmup Iteration   5: 179296.592 ops/s
# Warmup Iteration   6: 117439.103 ops/s
# Warmup Iteration   7: 126947.636 ops/s
# Warmup Iteration   8: 151603.477 ops/s
# Warmup Iteration   9: 104197.244 ops/s
# Warmup Iteration  10: 139792.123 ops/s
# Warmup Iteration  11: 116653.006 ops/s
# Warmup Iteration  12: 133151.981 ops/s
# Warmup Iteration  13: 126998.574 ops/s
# Warmup Iteration  14: 133549.877 ops/s
# Warmup Iteration  15: 135557.183 ops/s
# Warmup Iteration  16: 184833.999 ops/s
# Warmup Iteration  17: 148902.346 ops/s
# Warmup Iteration  18: 137814.659 ops/s
# Warmup Iteration  19: 135393.935 ops/s
# Warmup Iteration  20: 164668.916 ops/s
# Warmup Iteration  21: 128110.799 ops/s
# Warmup Iteration  22: 129727.065 ops/s
# Warmup Iteration  23: 139735.614 ops/s
# Warmup Iteration  24: 165424.160 ops/s
# Warmup Iteration  25: 127754.622 ops/s
# Warmup Iteration  26: 145179.543 ops/s
# Warmup Iteration  27: 128938.151 ops/s
# Warmup Iteration  28: 143908.885 ops/s
# Warmup Iteration  29: 138802.080 ops/s
# Warmup Iteration  30: 149534.448 ops/s
Iteration   1: 128007.577 ops/s
Iteration   2: 126547.380 ops/s
Iteration   3: 129439.207 ops/s
Iteration   4: 130763.461 ops/s
Iteration   5: 130490.073 ops/s
Iteration   6: 134798.042 ops/s
Iteration   7: 127633.420 ops/s
Iteration   8: 160375.489 ops/s
Iteration   9: 135816.088 ops/s
Iteration  10: 129122.153 ops/s
Iteration  11: 178124.374 ops/s
Iteration  12: 115991.130 ops/s
Iteration  13: 143325.277 ops/s
Iteration  14: 142675.063 ops/s
Iteration  15: 153952.725 ops/s
Iteration  16: 126589.961 ops/s
Iteration  17: 114552.229 ops/s
Iteration  18: 138491.668 ops/s
Iteration  19: 136759.450 ops/s
Iteration  20: 146187.562 ops/s
Iteration  21: 128450.112 ops/s
Iteration  22: 139717.582 ops/s
Iteration  23: 123823.431 ops/s
Iteration  24: 113799.563 ops/s
Iteration  25: 142928.113 ops/s
Iteration  26: 123224.910 ops/s
Iteration  27: 132111.432 ops/s
Iteration  28: 134888.626 ops/s
Iteration  29: 122687.054 ops/s
Iteration  30: 127977.989 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSkipTimedTest._Benchmark.benchmark_skipTimedDefaultScheduler":
  133975.038 ±(99.9%) 9014.655 ops/s [Average]
  (min, avg, max) = (113799.563, 133975.038, 178124.374), stdev = 13492.712
  CI (99.9%): [124960.383, 142989.693] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableSkipTimedTest._Benchmark.benchmark_skipTimedDefaultScheduler  thrpt   30  133975.038 ± 9014.655  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10858.024 ops/s
# Warmup Iteration   2: 47163.816 ops/s
# Warmup Iteration   3: 83585.846 ops/s
# Warmup Iteration   4: 100361.616 ops/s
# Warmup Iteration   5: 96362.344 ops/s
# Warmup Iteration   6: 136080.241 ops/s
# Warmup Iteration   7: 103597.680 ops/s
# Warmup Iteration   8: 119614.697 ops/s
# Warmup Iteration   9: 104304.242 ops/s
# Warmup Iteration  10: 115831.963 ops/s
# Warmup Iteration  11: 101948.259 ops/s
# Warmup Iteration  12: 113068.986 ops/s
# Warmup Iteration  13: 113606.913 ops/s
# Warmup Iteration  14: 116938.556 ops/s
# Warmup Iteration  15: 102283.314 ops/s
# Warmup Iteration  16: 102948.838 ops/s
# Warmup Iteration  17: 128091.073 ops/s
# Warmup Iteration  18: 122000.223 ops/s
# Warmup Iteration  19: 111426.472 ops/s
# Warmup Iteration  20: 116144.775 ops/s
# Warmup Iteration  21: 109381.716 ops/s
# Warmup Iteration  22: 105058.528 ops/s
# Warmup Iteration  23: 114254.705 ops/s
# Warmup Iteration  24: 116447.769 ops/s
# Warmup Iteration  25: 113274.732 ops/s
# Warmup Iteration  26: 106897.878 ops/s
# Warmup Iteration  27: 125954.516 ops/s
# Warmup Iteration  28: 113350.805 ops/s
# Warmup Iteration  29: 103613.946 ops/s
# Warmup Iteration  30: 109981.970 ops/s
Iteration   1: 111667.279 ops/s
Iteration   2: 114329.340 ops/s
Iteration   3: 106149.732 ops/s
Iteration   4: 115119.088 ops/s
Iteration   5: 120046.849 ops/s
Iteration   6: 112673.321 ops/s
Iteration   7: 107328.648 ops/s
Iteration   8: 114459.067 ops/s
Iteration   9: 123401.381 ops/s
Iteration  10: 106675.484 ops/s
Iteration  11: 136080.945 ops/s
Iteration  12: 112645.165 ops/s
Iteration  13: 111102.426 ops/s
Iteration  14: 125263.696 ops/s
Iteration  15: 109407.435 ops/s
Iteration  16: 122804.604 ops/s
Iteration  17: 117802.394 ops/s
Iteration  18: 116103.488 ops/s
Iteration  19: 110155.701 ops/s
Iteration  20: 106397.094 ops/s
Iteration  21: 105506.732 ops/s
Iteration  22: 97999.344 ops/s
Iteration  23: 109603.499 ops/s
Iteration  24: 117757.488 ops/s
Iteration  25: 115875.629 ops/s
Iteration  26: 108476.309 ops/s
Iteration  27: 121741.594 ops/s
Iteration  28: 121188.000 ops/s
Iteration  29: 122865.395 ops/s
Iteration  30: 119854.932 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTimeoutTests._Benchmark.benchmark_timedTake":
  114682.735 ±(99.9%) 5136.938 ops/s [Average]
  (min, avg, max) = (97999.344, 114682.735, 136080.945), stdev = 7688.728
  CI (99.9%): [109545.797, 119819.674] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score      Error  Units
FlowableTimeoutTests._Benchmark.benchmark_timedTake  thrpt   30  114682.735 ± 5136.938  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 116673.063 ops/s
# Warmup Iteration   2: 267736.001 ops/s
# Warmup Iteration   3: 502086.851 ops/s
# Warmup Iteration   4: 454898.129 ops/s
# Warmup Iteration   5: 562636.618 ops/s
# Warmup Iteration   6: 554085.208 ops/s
# Warmup Iteration   7: 553503.170 ops/s
# Warmup Iteration   8: 553713.806 ops/s
# Warmup Iteration   9: 500384.589 ops/s
# Warmup Iteration  10: 558309.124 ops/s
# Warmup Iteration  11: 559258.335 ops/s
# Warmup Iteration  12: 552629.896 ops/s
# Warmup Iteration  13: 563697.981 ops/s
# Warmup Iteration  14: 558682.036 ops/s
# Warmup Iteration  15: 558861.016 ops/s
# Warmup Iteration  16: 558230.822 ops/s
# Warmup Iteration  17: 587729.551 ops/s
# Warmup Iteration  18: 588826.979 ops/s
# Warmup Iteration  19: 584784.866 ops/s
# Warmup Iteration  20: 591182.237 ops/s
# Warmup Iteration  21: 578338.419 ops/s
# Warmup Iteration  22: 590971.329 ops/s
# Warmup Iteration  23: 590010.152 ops/s
# Warmup Iteration  24: 567458.920 ops/s
# Warmup Iteration  25: 593770.963 ops/s
# Warmup Iteration  26: 583540.427 ops/s
# Warmup Iteration  27: 572881.874 ops/s
# Warmup Iteration  28: 593738.787 ops/s
# Warmup Iteration  29: 570843.933 ops/s
# Warmup Iteration  30: 601531.657 ops/s
Iteration   1: 570709.840 ops/s
Iteration   2: 575778.885 ops/s
Iteration   3: 526635.857 ops/s
Iteration   4: 533359.396 ops/s
Iteration   5: 576139.852 ops/s
Iteration   6: 597465.588 ops/s
Iteration   7: 573529.125 ops/s
Iteration   8: 591120.804 ops/s
Iteration   9: 589278.397 ops/s
Iteration  10: 582421.148 ops/s
Iteration  11: 608530.290 ops/s
Iteration  12: 569088.094 ops/s
Iteration  13: 583400.660 ops/s
Iteration  14: 588306.196 ops/s
Iteration  15: 571366.409 ops/s
Iteration  16: 585743.928 ops/s
Iteration  17: 610122.995 ops/s
Iteration  18: 562230.158 ops/s
Iteration  19: 607520.199 ops/s
Iteration  20: 606262.839 ops/s
Iteration  21: 574595.889 ops/s
Iteration  22: 595343.897 ops/s
Iteration  23: 586030.153 ops/s
Iteration  24: 599331.093 ops/s
Iteration  25: 588154.925 ops/s
Iteration  26: 563823.695 ops/s
Iteration  27: 585523.391 ops/s
Iteration  28: 602121.202 ops/s
Iteration  29: 582920.013 ops/s
Iteration  30: 564213.903 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_error":
  581702.294 ±(99.9%) 13123.732 ops/s [Average]
  (min, avg, max) = (526635.857, 581702.294, 610122.995), stdev = 19642.985
  CI (99.9%): [568578.562, 594826.026] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score       Error  Units
FlowableRefCountTest._Benchmark.benchmark_error  thrpt   30  581702.294 ± 13123.732  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_addAll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_addAll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 586978.416 ops/s
# Warmup Iteration   2: 1351120.342 ops/s
# Warmup Iteration   3: 1519411.304 ops/s
# Warmup Iteration   4: 1569586.737 ops/s
# Warmup Iteration   5: 1346309.310 ops/s
# Warmup Iteration   6: 1577023.938 ops/s
# Warmup Iteration   7: 1545417.621 ops/s
# Warmup Iteration   8: 1614271.558 ops/s
# Warmup Iteration   9: 1564187.547 ops/s
# Warmup Iteration  10: 1589069.975 ops/s
# Warmup Iteration  11: 1583313.030 ops/s
# Warmup Iteration  12: 1558217.275 ops/s
# Warmup Iteration  13: 1645104.675 ops/s
# Warmup Iteration  14: 1607778.444 ops/s
# Warmup Iteration  15: 1530613.357 ops/s
# Warmup Iteration  16: 1619636.486 ops/s
# Warmup Iteration  17: 1556377.455 ops/s
# Warmup Iteration  18: 1557159.298 ops/s
# Warmup Iteration  19: 1640113.297 ops/s
# Warmup Iteration  20: 1531662.821 ops/s
# Warmup Iteration  21: 1611151.291 ops/s
# Warmup Iteration  22: 1546965.675 ops/s
# Warmup Iteration  23: 1598604.715 ops/s
# Warmup Iteration  24: 1552101.154 ops/s
# Warmup Iteration  25: 1579681.369 ops/s
# Warmup Iteration  26: 1540062.791 ops/s
# Warmup Iteration  27: 1602633.692 ops/s
# Warmup Iteration  28: 1556269.210 ops/s
# Warmup Iteration  29: 1576699.007 ops/s
# Warmup Iteration  30: 1647126.555 ops/s
Iteration   1: 1532046.891 ops/s
Iteration   2: 1634126.228 ops/s
Iteration   3: 1526470.042 ops/s
Iteration   4: 1575444.371 ops/s
Iteration   5: 1599513.166 ops/s
Iteration   6: 1563585.713 ops/s
Iteration   7: 1594626.352 ops/s
Iteration   8: 1535952.254 ops/s
Iteration   9: 1584949.422 ops/s
Iteration  10: 1598747.086 ops/s
Iteration  11: 1567888.714 ops/s
Iteration  12: 1617352.083 ops/s
Iteration  13: 1664002.444 ops/s
Iteration  14: 1504203.707 ops/s
Iteration  15: 1552757.910 ops/s
Iteration  16: 1600157.104 ops/s
Iteration  17: 1538924.849 ops/s
Iteration  18: 1566961.603 ops/s
Iteration  19: 1595303.301 ops/s
Iteration  20: 1582961.019 ops/s
Iteration  21: 1589618.483 ops/s
Iteration  22: 1592404.247 ops/s
Iteration  23: 1610282.046 ops/s
Iteration  24: 1525700.376 ops/s
Iteration  25: 1584485.077 ops/s
Iteration  26: 1633020.520 ops/s
Iteration  27: 1548316.085 ops/s
Iteration  28: 1608361.101 ops/s
Iteration  29: 1550555.922 ops/s
Iteration  30: 1576634.961 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_addAll":
  1578511.769 ±(99.9%) 24327.818 ops/s [Average]
  (min, avg, max) = (1504203.707, 1578511.769, 1664002.444), stdev = 36412.735
  CI (99.9%): [1554183.951, 1602839.587] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
CompositeDisposableTest._Benchmark.benchmark_addAll  thrpt   30  1578511.769 ± 24327.818  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_initializeVarargs$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_initializeVarargs

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1430197.265 ops/s
# Warmup Iteration   2: 2782942.039 ops/s
# Warmup Iteration   3: 3055900.401 ops/s
# Warmup Iteration   4: 2456578.152 ops/s
# Warmup Iteration   5: 2519822.837 ops/s
# Warmup Iteration   6: 2610817.855 ops/s
# Warmup Iteration   7: 2644342.251 ops/s
# Warmup Iteration   8: 2583868.503 ops/s
# Warmup Iteration   9: 2680267.973 ops/s
# Warmup Iteration  10: 2667658.041 ops/s
# Warmup Iteration  11: 2543656.310 ops/s
# Warmup Iteration  12: 2562560.866 ops/s
# Warmup Iteration  13: 2656184.875 ops/s
# Warmup Iteration  14: 2568197.550 ops/s
# Warmup Iteration  15: 2598288.213 ops/s
# Warmup Iteration  16: 2648452.417 ops/s
# Warmup Iteration  17: 2588118.735 ops/s
# Warmup Iteration  18: 2506703.273 ops/s
# Warmup Iteration  19: 2640369.388 ops/s
# Warmup Iteration  20: 2535106.866 ops/s
# Warmup Iteration  21: 2507839.621 ops/s
# Warmup Iteration  22: 2646964.149 ops/s
# Warmup Iteration  23: 2588979.647 ops/s
# Warmup Iteration  24: 2552962.000 ops/s
# Warmup Iteration  25: 2698157.086 ops/s
# Warmup Iteration  26: 2567306.338 ops/s
# Warmup Iteration  27: 2090536.175 ops/s
# Warmup Iteration  28: 2606788.427 ops/s
# Warmup Iteration  29: 2544992.539 ops/s
# Warmup Iteration  30: 2657000.976 ops/s
Iteration   1: 2607120.459 ops/s
Iteration   2: 2454816.548 ops/s
Iteration   3: 2675598.712 ops/s
Iteration   4: 2554404.406 ops/s
Iteration   5: 2700163.046 ops/s
Iteration   6: 2568417.390 ops/s
Iteration   7: 2689251.099 ops/s
Iteration   8: 2549988.576 ops/s
Iteration   9: 2591169.537 ops/s
Iteration  10: 2660631.437 ops/s
Iteration  11: 2596270.243 ops/s
Iteration  12: 2608919.601 ops/s
Iteration  13: 2599481.037 ops/s
Iteration  14: 2672758.288 ops/s
Iteration  15: 2539152.254 ops/s
Iteration  16: 2578954.762 ops/s
Iteration  17: 2691657.979 ops/s
Iteration  18: 2525611.325 ops/s
Iteration  19: 2661121.150 ops/s
Iteration  20: 2641203.639 ops/s
Iteration  21: 2720385.060 ops/s
Iteration  22: 2657449.778 ops/s
Iteration  23: 2543861.106 ops/s
Iteration  24: 2705176.711 ops/s
Iteration  25: 2616509.843 ops/s
Iteration  26: 2650985.250 ops/s
Iteration  27: 2636505.210 ops/s
Iteration  28: 2631730.994 ops/s
Iteration  29: 2534461.469 ops/s
Iteration  30: 2719671.603 ops/s


Result "io.reactivex.rxjava3.disposables.CompositeDisposableTest._Benchmark.benchmark_initializeVarargs":
  2619447.617 ±(99.9%) 44311.355 ops/s [Average]
  (min, avg, max) = (2454816.548, 2619447.617, 2720385.060), stdev = 66323.156
  CI (99.9%): [2575136.262, 2663758.973] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompositeDisposableTest._Benchmark.benchmark_initializeVarargs  thrpt   30  2619447.617 ± 44311.355  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 327656.015 ops/s
# Warmup Iteration   2: 510014.903 ops/s
# Warmup Iteration   3: 664167.708 ops/s
# Warmup Iteration   4: 613309.274 ops/s
# Warmup Iteration   5: 660583.026 ops/s
# Warmup Iteration   6: 656352.278 ops/s
# Warmup Iteration   7: 628462.220 ops/s
# Warmup Iteration   8: 653153.492 ops/s
# Warmup Iteration   9: 651178.689 ops/s
# Warmup Iteration  10: 620355.307 ops/s
# Warmup Iteration  11: 621679.959 ops/s
# Warmup Iteration  12: 620684.036 ops/s
# Warmup Iteration  13: 645813.757 ops/s
# Warmup Iteration  14: 647059.605 ops/s
# Warmup Iteration  15: 622055.839 ops/s
# Warmup Iteration  16: 655323.123 ops/s
# Warmup Iteration  17: 653625.277 ops/s
# Warmup Iteration  18: 676184.201 ops/s
# Warmup Iteration  19: 684836.173 ops/s
# Warmup Iteration  20: 671143.335 ops/s
# Warmup Iteration  21: 688015.562 ops/s
# Warmup Iteration  22: 661727.073 ops/s
# Warmup Iteration  23: 692702.475 ops/s
# Warmup Iteration  24: 696582.192 ops/s
# Warmup Iteration  25: 669263.535 ops/s
# Warmup Iteration  26: 688778.649 ops/s
# Warmup Iteration  27: 665255.462 ops/s
# Warmup Iteration  28: 679644.491 ops/s
# Warmup Iteration  29: 670170.483 ops/s
# Warmup Iteration  30: 665269.708 ops/s
Iteration   1: 686976.409 ops/s
Iteration   2: 643877.081 ops/s
Iteration   3: 695026.617 ops/s
Iteration   4: 695614.516 ops/s
Iteration   5: 661511.395 ops/s
Iteration   6: 675076.915 ops/s
Iteration   7: 675464.087 ops/s
Iteration   8: 677751.108 ops/s
Iteration   9: 692034.415 ops/s
Iteration  10: 664116.118 ops/s
Iteration  11: 704053.918 ops/s
Iteration  12: 663953.082 ops/s
Iteration  13: 690301.033 ops/s
Iteration  14: 676900.734 ops/s
Iteration  15: 670931.702 ops/s
Iteration  16: 679347.331 ops/s
Iteration  17: 679100.084 ops/s
Iteration  18: 683022.583 ops/s
Iteration  19: 696457.218 ops/s
Iteration  20: 668357.642 ops/s
Iteration  21: 690846.468 ops/s
Iteration  22: 659286.728 ops/s
Iteration  23: 675265.155 ops/s
Iteration  24: 702296.182 ops/s
Iteration  25: 663595.295 ops/s
Iteration  26: 701468.143 ops/s
Iteration  27: 666107.523 ops/s
Iteration  28: 663889.664 ops/s
Iteration  29: 708954.495 ops/s
Iteration  30: 675406.606 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_fromActionThrows":
  679566.342 ±(99.9%) 10501.944 ops/s [Average]
  (min, avg, max) = (643877.081, 679566.342, 708954.495), stdev = 15718.817
  CI (99.9%): [669064.397, 690068.286] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
CompletableFromActionTest._Benchmark.benchmark_fromActionThrows  thrpt   30  679566.342 ± 10501.944  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverTerminated$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverTerminated

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5338264.338 ops/s
# Warmup Iteration   2: 8492794.497 ops/s
# Warmup Iteration   3: 11375586.209 ops/s
# Warmup Iteration   4: 10765690.858 ops/s
# Warmup Iteration   5: 11322112.213 ops/s
# Warmup Iteration   6: 10876165.135 ops/s
# Warmup Iteration   7: 10750307.927 ops/s
# Warmup Iteration   8: 11472924.062 ops/s
# Warmup Iteration   9: 10776823.577 ops/s
# Warmup Iteration  10: 11080539.578 ops/s
# Warmup Iteration  11: 11467944.754 ops/s
# Warmup Iteration  12: 10799016.685 ops/s
# Warmup Iteration  13: 11373152.302 ops/s
# Warmup Iteration  14: 10910433.102 ops/s
# Warmup Iteration  15: 10889676.179 ops/s
# Warmup Iteration  16: 11394900.020 ops/s
# Warmup Iteration  17: 10881954.036 ops/s
# Warmup Iteration  18: 10860244.687 ops/s
# Warmup Iteration  19: 11442059.437 ops/s
# Warmup Iteration  20: 11454038.936 ops/s
# Warmup Iteration  21: 10978392.953 ops/s
# Warmup Iteration  22: 8996488.504 ops/s
# Warmup Iteration  23: 11172333.840 ops/s
# Warmup Iteration  24: 10912094.895 ops/s
# Warmup Iteration  25: 10896097.072 ops/s
# Warmup Iteration  26: 11327684.020 ops/s
# Warmup Iteration  27: 10817483.343 ops/s
# Warmup Iteration  28: 11244912.062 ops/s
# Warmup Iteration  29: 11027351.698 ops/s
# Warmup Iteration  30: 10927854.639 ops/s
Iteration   1: 11288379.299 ops/s
Iteration   2: 10911327.801 ops/s
Iteration   3: 11228732.080 ops/s
Iteration   4: 11280714.306 ops/s
Iteration   5: 11628181.216 ops/s
Iteration   6: 10617189.465 ops/s
Iteration   7: 11160413.663 ops/s
Iteration   8: 11275695.123 ops/s
Iteration   9: 11244025.463 ops/s
Iteration  10: 10866015.689 ops/s
Iteration  11: 11144303.752 ops/s
Iteration  12: 11309048.692 ops/s
Iteration  13: 10929235.142 ops/s
Iteration  14: 11306185.162 ops/s
Iteration  15: 11269177.611 ops/s
Iteration  16: 10950205.703 ops/s
Iteration  17: 11370039.954 ops/s
Iteration  18: 10847721.039 ops/s
Iteration  19: 10827330.932 ops/s
Iteration  20: 11355846.983 ops/s
Iteration  21: 11128310.258 ops/s
Iteration  22: 11253713.087 ops/s
Iteration  23: 10942417.561 ops/s
Iteration  24: 11447014.331 ops/s
Iteration  25: 11035261.158 ops/s
Iteration  26: 10923560.411 ops/s
Iteration  27: 10992324.166 ops/s
Iteration  28: 11176656.466 ops/s
Iteration  29: 10742216.358 ops/s
Iteration  30: 11178543.376 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverTerminated":
  11120992.875 ±(99.9%) 153490.789 ops/s [Average]
  (min, avg, max) = (10617189.465, 11120992.875, 11628181.216), stdev = 229737.805
  CI (99.9%): [10967502.086, 11274483.664] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt         Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverTerminated  thrpt   30  11120992.875 ± 153490.789  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambRace$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambRace

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80818.249 ops/s
# Warmup Iteration   2: 177579.902 ops/s
# Warmup Iteration   3: 244528.823 ops/s
# Warmup Iteration   4: 224110.582 ops/s
# Warmup Iteration   5: 223545.078 ops/s
# Warmup Iteration   6: 243806.174 ops/s
# Warmup Iteration   7: 248326.018 ops/s
# Warmup Iteration   8: 247622.134 ops/s
# Warmup Iteration   9: 247465.348 ops/s
# Warmup Iteration  10: 253878.463 ops/s
# Warmup Iteration  11: 251558.102 ops/s
# Warmup Iteration  12: 246644.118 ops/s
# Warmup Iteration  13: 253167.470 ops/s
# Warmup Iteration  14: 247336.495 ops/s
# Warmup Iteration  15: 255710.199 ops/s
# Warmup Iteration  16: 252317.767 ops/s
# Warmup Iteration  17: 256473.202 ops/s
# Warmup Iteration  18: 253688.925 ops/s
# Warmup Iteration  19: 260613.494 ops/s
# Warmup Iteration  20: 244861.840 ops/s
# Warmup Iteration  21: 259101.583 ops/s
# Warmup Iteration  22: 255338.940 ops/s
# Warmup Iteration  23: 262041.282 ops/s
# Warmup Iteration  24: 262566.453 ops/s
# Warmup Iteration  25: 251577.342 ops/s
# Warmup Iteration  26: 264792.175 ops/s
# Warmup Iteration  27: 258254.352 ops/s
# Warmup Iteration  28: 266836.499 ops/s
# Warmup Iteration  29: 259259.023 ops/s
# Warmup Iteration  30: 261220.938 ops/s
Iteration   1: 271435.157 ops/s
Iteration   2: 257503.648 ops/s
Iteration   3: 259855.116 ops/s
Iteration   4: 264708.228 ops/s
Iteration   5: 263713.087 ops/s
Iteration   6: 259087.163 ops/s
Iteration   7: 259086.206 ops/s
Iteration   8: 268828.754 ops/s
Iteration   9: 265110.235 ops/s
Iteration  10: 258893.229 ops/s
Iteration  11: 268884.106 ops/s
Iteration  12: 255608.086 ops/s
Iteration  13: 269352.620 ops/s
Iteration  14: 265240.312 ops/s
Iteration  15: 258509.010 ops/s
Iteration  16: 253451.522 ops/s
Iteration  17: 263127.618 ops/s
Iteration  18: 251665.166 ops/s
Iteration  19: 255075.594 ops/s
Iteration  20: 257827.461 ops/s
Iteration  21: 248099.785 ops/s
Iteration  22: 262587.626 ops/s
Iteration  23: 251106.387 ops/s
Iteration  24: 255605.472 ops/s
Iteration  25: 253564.535 ops/s
Iteration  26: 270220.522 ops/s
Iteration  27: 265563.178 ops/s
Iteration  28: 250319.617 ops/s
Iteration  29: 268732.740 ops/s
Iteration  30: 274193.040 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_ambRace":
  260898.507 ±(99.9%) 4670.427 ops/s [Average]
  (min, avg, max) = (248099.785, 260898.507, 274193.040), stdev = 6990.476
  CI (99.9%): [256228.080, 265568.934] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt       Score      Error  Units
CompletableAmbTest._Benchmark.benchmark_ambRace  thrpt   30  260898.507 ± 4670.427  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverNoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverNoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2800480.683 ops/s
# Warmup Iteration   2: 7299974.873 ops/s
# Warmup Iteration   3: 10070367.110 ops/s
# Warmup Iteration   4: 10411940.704 ops/s
# Warmup Iteration   5: 9846660.433 ops/s
# Warmup Iteration   6: 10188144.460 ops/s
# Warmup Iteration   7: 10159643.794 ops/s
# Warmup Iteration   8: 10174667.697 ops/s
# Warmup Iteration   9: 10339638.838 ops/s
# Warmup Iteration  10: 10636273.618 ops/s
# Warmup Iteration  11: 9975944.982 ops/s
# Warmup Iteration  12: 10099641.641 ops/s
# Warmup Iteration  13: 10210512.488 ops/s
# Warmup Iteration  14: 10329644.190 ops/s
# Warmup Iteration  15: 9764273.393 ops/s
# Warmup Iteration  16: 10409800.127 ops/s
# Warmup Iteration  17: 8467117.013 ops/s
# Warmup Iteration  18: 10148593.775 ops/s
# Warmup Iteration  19: 9683878.086 ops/s
# Warmup Iteration  20: 10423431.087 ops/s
# Warmup Iteration  21: 9733566.281 ops/s
# Warmup Iteration  22: 9873953.747 ops/s
# Warmup Iteration  23: 10269829.175 ops/s
# Warmup Iteration  24: 9956707.523 ops/s
# Warmup Iteration  25: 10775093.957 ops/s
# Warmup Iteration  26: 10598331.301 ops/s
# Warmup Iteration  27: 9771283.506 ops/s
# Warmup Iteration  28: 10050552.243 ops/s
# Warmup Iteration  29: 10092947.494 ops/s
# Warmup Iteration  30: 9788725.887 ops/s
Iteration   1: 10416245.241 ops/s
Iteration   2: 10147067.495 ops/s
Iteration   3: 10042584.889 ops/s
Iteration   4: 10372266.425 ops/s
Iteration   5: 9910514.792 ops/s
Iteration   6: 10214200.640 ops/s
Iteration   7: 10166865.006 ops/s
Iteration   8: 9700157.670 ops/s
Iteration   9: 10336882.603 ops/s
Iteration  10: 9856580.615 ops/s
Iteration  11: 10212475.928 ops/s
Iteration  12: 10161157.994 ops/s
Iteration  13: 10494684.959 ops/s
Iteration  14: 10015394.429 ops/s
Iteration  15: 10010895.292 ops/s
Iteration  16: 10211979.101 ops/s
Iteration  17: 10126117.959 ops/s
Iteration  18: 9878740.521 ops/s
Iteration  19: 10289266.544 ops/s
Iteration  20: 10273687.773 ops/s
Iteration  21: 9823914.886 ops/s
Iteration  22: 10363776.192 ops/s
Iteration  23: 9469192.134 ops/s
Iteration  24: 10040610.452 ops/s
Iteration  25: 10284768.731 ops/s
Iteration  26: 10174751.532 ops/s
Iteration  27: 10383742.312 ops/s
Iteration  28: 9869091.683 ops/s
Iteration  29: 10301644.536 ops/s
Iteration  30: 9969522.744 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverNoError":
  10117292.702 ±(99.9%) 156600.726 ops/s [Average]
  (min, avg, max) = (9469192.134, 10117292.702, 10494684.959), stdev = 234392.612
  CI (99.9%): [9960691.977, 10273893.428] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt         Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerCompletableObserverNoError  thrpt   30  10117292.702 ± 156600.726  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_timestep$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_timestep

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 358453.336 ops/s
# Warmup Iteration   2: 1254611.045 ops/s
# Warmup Iteration   3: 1773321.218 ops/s
# Warmup Iteration   4: 2014881.343 ops/s
# Warmup Iteration   5: 2134365.406 ops/s
# Warmup Iteration   6: 2116100.005 ops/s
# Warmup Iteration   7: 2146046.362 ops/s
# Warmup Iteration   8: 2090083.072 ops/s
# Warmup Iteration   9: 2129266.433 ops/s
# Warmup Iteration  10: 2164362.894 ops/s
# Warmup Iteration  11: 2116750.737 ops/s
# Warmup Iteration  12: 2065958.705 ops/s
# Warmup Iteration  13: 2191909.564 ops/s
# Warmup Iteration  14: 2092358.685 ops/s
# Warmup Iteration  15: 2068340.508 ops/s
# Warmup Iteration  16: 2169517.586 ops/s
# Warmup Iteration  17: 2075455.621 ops/s
# Warmup Iteration  18: 2174566.352 ops/s
# Warmup Iteration  19: 2145408.103 ops/s
# Warmup Iteration  20: 2096904.390 ops/s
# Warmup Iteration  21: 2204348.445 ops/s
# Warmup Iteration  22: 2028057.384 ops/s
# Warmup Iteration  23: 2130601.331 ops/s
# Warmup Iteration  24: 2085467.226 ops/s
# Warmup Iteration  25: 2165546.757 ops/s
# Warmup Iteration  26: 2116703.895 ops/s
# Warmup Iteration  27: 2134337.045 ops/s
# Warmup Iteration  28: 2187322.327 ops/s
# Warmup Iteration  29: 2068917.075 ops/s
# Warmup Iteration  30: 2185731.198 ops/s
Iteration   1: 2077302.120 ops/s
Iteration   2: 2141612.909 ops/s
Iteration   3: 2075082.644 ops/s
Iteration   4: 2102042.915 ops/s
Iteration   5: 2172839.584 ops/s
Iteration   6: 2068339.491 ops/s
Iteration   7: 2158663.336 ops/s
Iteration   8: 2128196.378 ops/s
Iteration   9: 2180234.352 ops/s
Iteration  10: 2122638.177 ops/s
Iteration  11: 2130949.694 ops/s
Iteration  12: 2178734.613 ops/s
Iteration  13: 2200645.380 ops/s
Iteration  14: 2113950.158 ops/s
Iteration  15: 2074917.282 ops/s
Iteration  16: 2213489.732 ops/s
Iteration  17: 2221334.401 ops/s
Iteration  18: 2083980.273 ops/s
Iteration  19: 2208149.628 ops/s
Iteration  20: 2032332.734 ops/s
Iteration  21: 2146134.814 ops/s
Iteration  22: 2193375.844 ops/s
Iteration  23: 2076310.784 ops/s
Iteration  24: 2168954.161 ops/s
Iteration  25: 2153018.622 ops/s
Iteration  26: 2184871.577 ops/s
Iteration  27: 2107598.880 ops/s
Iteration  28: 2128013.663 ops/s
Iteration  29: 2046710.716 ops/s
Iteration  30: 2156089.824 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_timestep":
  2134883.823 ±(99.9%) 34895.215 ops/s [Average]
  (min, avg, max) = (2032332.734, 2134883.823, 2221334.401), stdev = 52229.520
  CI (99.9%): [2099988.608, 2169779.038] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
CompletableDelaySubscriptionTest._Benchmark.benchmark_timestep  thrpt   30  2134883.823 ± 34895.215  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleNoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleNoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5172012.332 ops/s
# Warmup Iteration   2: 9112177.964 ops/s
# Warmup Iteration   3: 11596747.898 ops/s
# Warmup Iteration   4: 11100864.508 ops/s
# Warmup Iteration   5: 11287178.008 ops/s
# Warmup Iteration   6: 11572816.138 ops/s
# Warmup Iteration   7: 11355815.250 ops/s
# Warmup Iteration   8: 10708487.718 ops/s
# Warmup Iteration   9: 11648635.421 ops/s
# Warmup Iteration  10: 11742279.866 ops/s
# Warmup Iteration  11: 10315156.218 ops/s
# Warmup Iteration  12: 9077642.644 ops/s
# Warmup Iteration  13: 11484614.891 ops/s
# Warmup Iteration  14: 10955680.832 ops/s
# Warmup Iteration  15: 11677661.854 ops/s
# Warmup Iteration  16: 11012564.734 ops/s
# Warmup Iteration  17: 11665323.960 ops/s
# Warmup Iteration  18: 11182561.342 ops/s
# Warmup Iteration  19: 11254181.145 ops/s
# Warmup Iteration  20: 11474805.761 ops/s
# Warmup Iteration  21: 11056747.631 ops/s
# Warmup Iteration  22: 11616380.951 ops/s
# Warmup Iteration  23: 10910179.089 ops/s
# Warmup Iteration  24: 10862454.115 ops/s
# Warmup Iteration  25: 11745159.315 ops/s
# Warmup Iteration  26: 10854004.582 ops/s
# Warmup Iteration  27: 11428839.096 ops/s
# Warmup Iteration  28: 11090145.402 ops/s
# Warmup Iteration  29: 11275154.993 ops/s
# Warmup Iteration  30: 11779247.568 ops/s
Iteration   1: 11058871.907 ops/s
Iteration   2: 10861053.669 ops/s
Iteration   3: 11454738.855 ops/s
Iteration   4: 10954452.701 ops/s
Iteration   5: 11566118.804 ops/s
Iteration   6: 11253540.785 ops/s
Iteration   7: 11637447.520 ops/s
Iteration   8: 10849553.854 ops/s
Iteration   9: 11514065.528 ops/s
Iteration  10: 11503207.632 ops/s
Iteration  11: 10900672.377 ops/s
Iteration  12: 11261827.954 ops/s
Iteration  13: 11606898.811 ops/s
Iteration  14: 11081945.200 ops/s
Iteration  15: 11008597.079 ops/s
Iteration  16: 11167078.553 ops/s
Iteration  17: 11455060.122 ops/s
Iteration  18: 11165045.976 ops/s
Iteration  19: 11490434.382 ops/s
Iteration  20: 11481250.202 ops/s
Iteration  21: 11276987.291 ops/s
Iteration  22: 11029417.001 ops/s
Iteration  23: 11279196.796 ops/s
Iteration  24: 11132884.446 ops/s
Iteration  25: 11314288.822 ops/s
Iteration  26: 11435124.214 ops/s
Iteration  27: 11034956.013 ops/s
Iteration  28: 11407128.051 ops/s
Iteration  29: 11138740.354 ops/s
Iteration  30: 11143685.140 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleNoError":
  11248809.001 ±(99.9%) 155045.019 ops/s [Average]
  (min, avg, max) = (10849553.854, 11248809.001, 11637447.520), stdev = 232064.103
  CI (99.9%): [11093763.983, 11403854.020] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt         Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleNoError  thrpt   30  11248809.001 ± 155045.019  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleTerminated$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleTerminated

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4828649.496 ops/s
# Warmup Iteration   2: 7333823.840 ops/s
# Warmup Iteration   3: 10149231.446 ops/s
# Warmup Iteration   4: 10397176.229 ops/s
# Warmup Iteration   5: 10603024.411 ops/s
# Warmup Iteration   6: 10144546.310 ops/s
# Warmup Iteration   7: 10317120.158 ops/s
# Warmup Iteration   8: 10006196.222 ops/s
# Warmup Iteration   9: 10497968.771 ops/s
# Warmup Iteration  10: 10149979.162 ops/s
# Warmup Iteration  11: 10150223.034 ops/s
# Warmup Iteration  12: 10622889.277 ops/s
# Warmup Iteration  13: 9815647.295 ops/s
# Warmup Iteration  14: 10617780.295 ops/s
# Warmup Iteration  15: 9821535.353 ops/s
# Warmup Iteration  16: 10252658.734 ops/s
# Warmup Iteration  17: 10453242.345 ops/s
# Warmup Iteration  18: 10213385.230 ops/s
# Warmup Iteration  19: 10633420.675 ops/s
# Warmup Iteration  20: 10201006.383 ops/s
# Warmup Iteration  21: 10377496.063 ops/s
# Warmup Iteration  22: 10145066.658 ops/s
# Warmup Iteration  23: 10284440.749 ops/s
# Warmup Iteration  24: 10387500.688 ops/s
# Warmup Iteration  25: 9855519.813 ops/s
# Warmup Iteration  26: 10771049.206 ops/s
# Warmup Iteration  27: 10018001.486 ops/s
# Warmup Iteration  28: 10160028.658 ops/s
# Warmup Iteration  29: 10507379.032 ops/s
# Warmup Iteration  30: 10086741.970 ops/s
Iteration   1: 10629893.282 ops/s
Iteration   2: 10642020.093 ops/s
Iteration   3: 10061031.376 ops/s
Iteration   4: 10730400.530 ops/s
Iteration   5: 10042357.411 ops/s
Iteration   6: 10325113.728 ops/s
Iteration   7: 10469207.941 ops/s
Iteration   8: 10127184.994 ops/s
Iteration   9: 10664619.342 ops/s
Iteration  10: 10695331.066 ops/s
Iteration  11: 10403656.775 ops/s
Iteration  12: 10083631.523 ops/s
Iteration  13: 10364444.700 ops/s
Iteration  14: 10201238.086 ops/s
Iteration  15: 10589530.214 ops/s
Iteration  16: 10163097.794 ops/s
Iteration  17: 9968419.331 ops/s
Iteration  18: 10798077.439 ops/s
Iteration  19: 9954604.625 ops/s
Iteration  20: 10206856.597 ops/s
Iteration  21: 10711429.442 ops/s
Iteration  22: 10008007.571 ops/s
Iteration  23: 10119843.338 ops/s
Iteration  24: 10213135.821 ops/s
Iteration  25: 10669265.368 ops/s
Iteration  26: 10558078.881 ops/s
Iteration  27: 9952084.982 ops/s
Iteration  28: 10756596.652 ops/s
Iteration  29: 9921562.753 ops/s
Iteration  30: 10151626.567 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleTerminated":
  10339411.607 ±(99.9%) 195716.537 ops/s [Average]
  (min, avg, max) = (9921562.753, 10339411.607, 10798077.439), stdev = 292939.321
  CI (99.9%): [10143695.071, 10535128.144] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt         Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleTerminated  thrpt   30  10339411.607 ± 195716.537  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverTerminated$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverTerminated

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4676707.752 ops/s
# Warmup Iteration   2: 7455880.404 ops/s
# Warmup Iteration   3: 10231364.316 ops/s
# Warmup Iteration   4: 10137006.674 ops/s
# Warmup Iteration   5: 10235138.201 ops/s
# Warmup Iteration   6: 8236176.763 ops/s
# Warmup Iteration   7: 10398223.394 ops/s
# Warmup Iteration   8: 10247125.163 ops/s
# Warmup Iteration   9: 10542987.715 ops/s
# Warmup Iteration  10: 10179504.357 ops/s
# Warmup Iteration  11: 10015845.170 ops/s
# Warmup Iteration  12: 10309079.004 ops/s
# Warmup Iteration  13: 9971582.009 ops/s
# Warmup Iteration  14: 10343010.608 ops/s
# Warmup Iteration  15: 9991835.157 ops/s
# Warmup Iteration  16: 10416584.958 ops/s
# Warmup Iteration  17: 10263399.202 ops/s
# Warmup Iteration  18: 10198122.533 ops/s
# Warmup Iteration  19: 10472813.225 ops/s
# Warmup Iteration  20: 9890707.272 ops/s
# Warmup Iteration  21: 10426547.229 ops/s
# Warmup Iteration  22: 10125171.780 ops/s
# Warmup Iteration  23: 10126587.125 ops/s
# Warmup Iteration  24: 10050608.420 ops/s
# Warmup Iteration  25: 10421152.785 ops/s
# Warmup Iteration  26: 9775580.195 ops/s
# Warmup Iteration  27: 10167100.291 ops/s
# Warmup Iteration  28: 10367094.855 ops/s
# Warmup Iteration  29: 9683991.242 ops/s
# Warmup Iteration  30: 10237207.236 ops/s
Iteration   1: 10082757.228 ops/s
Iteration   2: 10496643.793 ops/s
Iteration   3: 10106873.828 ops/s
Iteration   4: 10135937.839 ops/s
Iteration   5: 10567190.124 ops/s
Iteration   6: 10215950.746 ops/s
Iteration   7: 10045650.040 ops/s
Iteration   8: 10268091.895 ops/s
Iteration   9: 10228208.202 ops/s
Iteration  10: 10394282.955 ops/s
Iteration  11: 9972010.043 ops/s
Iteration  12: 10161363.956 ops/s
Iteration  13: 10214317.633 ops/s
Iteration  14: 10574012.259 ops/s
Iteration  15: 10147486.582 ops/s
Iteration  16: 10055288.352 ops/s
Iteration  17: 10513350.995 ops/s
Iteration  18: 10578125.450 ops/s
Iteration  19: 9889701.967 ops/s
Iteration  20: 10537154.410 ops/s
Iteration  21: 10603465.182 ops/s
Iteration  22: 10070707.831 ops/s
Iteration  23: 10519864.518 ops/s
Iteration  24: 9767295.252 ops/s
Iteration  25: 10241867.216 ops/s
Iteration  26: 10428439.572 ops/s
Iteration  27: 9873674.054 ops/s
Iteration  28: 10391818.966 ops/s
Iteration  29: 10509817.957 ops/s
Iteration  30: 10109972.500 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverTerminated":
  10256710.712 ±(99.9%) 159792.682 ops/s [Average]
  (min, avg, max) = (9767295.252, 10256710.712, 10603465.182), stdev = 239170.182
  CI (99.9%): [10096918.029, 10416503.394] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt         Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverTerminated  thrpt   30  10256710.712 ± 159792.682  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverTerminated$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverTerminated

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4706131.411 ops/s
# Warmup Iteration   2: 7917399.145 ops/s
# Warmup Iteration   3: 10890723.565 ops/s
# Warmup Iteration   4: 10016212.445 ops/s
# Warmup Iteration   5: 10663860.167 ops/s
# Warmup Iteration   6: 10362681.108 ops/s
# Warmup Iteration   7: 10351374.766 ops/s
# Warmup Iteration   8: 10277842.307 ops/s
# Warmup Iteration   9: 10276102.499 ops/s
# Warmup Iteration  10: 10792056.033 ops/s
# Warmup Iteration  11: 9936644.088 ops/s
# Warmup Iteration  12: 10325596.057 ops/s
# Warmup Iteration  13: 10196376.281 ops/s
# Warmup Iteration  14: 10761215.214 ops/s
# Warmup Iteration  15: 10257941.432 ops/s
# Warmup Iteration  16: 10243530.716 ops/s
# Warmup Iteration  17: 10413401.953 ops/s
# Warmup Iteration  18: 10918721.583 ops/s
# Warmup Iteration  19: 10357318.466 ops/s
# Warmup Iteration  20: 10702543.157 ops/s
# Warmup Iteration  21: 10423774.212 ops/s
# Warmup Iteration  22: 10545613.908 ops/s
# Warmup Iteration  23: 10455372.874 ops/s
# Warmup Iteration  24: 10353781.608 ops/s
# Warmup Iteration  25: 10752732.594 ops/s
# Warmup Iteration  26: 10266722.514 ops/s
# Warmup Iteration  27: 10784046.333 ops/s
# Warmup Iteration  28: 10274786.680 ops/s
# Warmup Iteration  29: 10450498.804 ops/s
# Warmup Iteration  30: 10815700.463 ops/s
Iteration   1: 9965575.967 ops/s
Iteration   2: 10554937.231 ops/s
Iteration   3: 10201178.570 ops/s
Iteration   4: 10351853.094 ops/s
Iteration   5: 10560997.386 ops/s
Iteration   6: 10693900.512 ops/s
Iteration   7: 10284348.565 ops/s
Iteration   8: 10722593.365 ops/s
Iteration   9: 10766120.403 ops/s
Iteration  10: 10324725.345 ops/s
Iteration  11: 10854491.666 ops/s
Iteration  12: 10194617.232 ops/s
Iteration  13: 10294645.305 ops/s
Iteration  14: 10366175.379 ops/s
Iteration  15: 10800818.926 ops/s
Iteration  16: 10850587.048 ops/s
Iteration  17: 10081809.470 ops/s
Iteration  18: 10810393.720 ops/s
Iteration  19: 10506854.005 ops/s
Iteration  20: 10287109.151 ops/s
Iteration  21: 11064609.147 ops/s
Iteration  22: 10244864.621 ops/s
Iteration  23: 10818319.861 ops/s
Iteration  24: 10171850.462 ops/s
Iteration  25: 10510999.231 ops/s
Iteration  26: 10609666.090 ops/s
Iteration  27: 10394228.496 ops/s
Iteration  28: 10619752.898 ops/s
Iteration  29: 10341105.922 ops/s
Iteration  30: 10846233.722 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverTerminated":
  10503178.760 ±(99.9%) 184985.277 ops/s [Average]
  (min, avg, max) = (9965575.967, 10503178.760, 11064609.147), stdev = 276877.275
  CI (99.9%): [10318193.483, 10688164.036] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt         Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverTerminated  thrpt   30  10503178.760 ± 184985.277  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterTerminated$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterTerminated

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2204789.736 ops/s
# Warmup Iteration   2: 5183280.008 ops/s
# Warmup Iteration   3: 6771868.879 ops/s
# Warmup Iteration   4: 6869044.051 ops/s
# Warmup Iteration   5: 6999977.537 ops/s
# Warmup Iteration   6: 6947953.737 ops/s
# Warmup Iteration   7: 6902303.826 ops/s
# Warmup Iteration   8: 6869384.756 ops/s
# Warmup Iteration   9: 7021220.347 ops/s
# Warmup Iteration  10: 6870190.418 ops/s
# Warmup Iteration  11: 7023729.990 ops/s
# Warmup Iteration  12: 6921995.914 ops/s
# Warmup Iteration  13: 7119200.943 ops/s
# Warmup Iteration  14: 7206738.406 ops/s
# Warmup Iteration  15: 6831922.706 ops/s
# Warmup Iteration  16: 6987494.321 ops/s
# Warmup Iteration  17: 6741428.526 ops/s
# Warmup Iteration  18: 6957939.206 ops/s
# Warmup Iteration  19: 6919007.865 ops/s
# Warmup Iteration  20: 6979211.043 ops/s
# Warmup Iteration  21: 7181278.763 ops/s
# Warmup Iteration  22: 6854381.153 ops/s
# Warmup Iteration  23: 7124316.742 ops/s
# Warmup Iteration  24: 6852185.503 ops/s
# Warmup Iteration  25: 7198648.239 ops/s
# Warmup Iteration  26: 6911400.156 ops/s
# Warmup Iteration  27: 7033663.544 ops/s
# Warmup Iteration  28: 6789905.691 ops/s
# Warmup Iteration  29: 7083082.019 ops/s
# Warmup Iteration  30: 7030668.319 ops/s
Iteration   1: 6866682.161 ops/s
Iteration   2: 7007391.871 ops/s
Iteration   3: 6938249.954 ops/s
Iteration   4: 7143344.497 ops/s
Iteration   5: 6874714.022 ops/s
Iteration   6: 6756004.172 ops/s
Iteration   7: 7138200.028 ops/s
Iteration   8: 6677618.310 ops/s
Iteration   9: 6928113.929 ops/s
Iteration  10: 6914779.670 ops/s
Iteration  11: 7118231.818 ops/s
Iteration  12: 6743631.767 ops/s
Iteration  13: 6911476.239 ops/s
Iteration  14: 7234660.803 ops/s
Iteration  15: 7199962.999 ops/s
Iteration  16: 7199500.329 ops/s
Iteration  17: 6743373.755 ops/s
Iteration  18: 7185027.180 ops/s
Iteration  19: 6803436.819 ops/s
Iteration  20: 7239780.400 ops/s
Iteration  21: 6814111.161 ops/s
Iteration  22: 6990625.747 ops/s
Iteration  23: 7175605.830 ops/s
Iteration  24: 6732178.475 ops/s
Iteration  25: 7089168.318 ops/s
Iteration  26: 6878325.704 ops/s
Iteration  27: 7089804.107 ops/s
Iteration  28: 7004552.314 ops/s
Iteration  29: 7074260.877 ops/s
Iteration  30: 6862585.615 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterTerminated":
  6977846.629 ±(99.9%) 114330.031 ops/s [Average]
  (min, avg, max) = (6677618.310, 6977846.629, 7239780.400), stdev = 171123.821
  CI (99.9%): [6863516.598, 7092176.660] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score        Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerEmitterTerminated  thrpt   30  6977846.629 ± 114330.031  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 412704.190 ops/s
# Warmup Iteration   2: 605007.532 ops/s
# Warmup Iteration   3: 756992.116 ops/s
# Warmup Iteration   4: 706944.209 ops/s
# Warmup Iteration   5: 724444.039 ops/s
# Warmup Iteration   6: 706182.491 ops/s
# Warmup Iteration   7: 682199.822 ops/s
# Warmup Iteration   8: 716732.274 ops/s
# Warmup Iteration   9: 688053.459 ops/s
# Warmup Iteration  10: 736022.062 ops/s
# Warmup Iteration  11: 709986.896 ops/s
# Warmup Iteration  12: 744751.129 ops/s
# Warmup Iteration  13: 724551.516 ops/s
# Warmup Iteration  14: 731797.730 ops/s
# Warmup Iteration  15: 722145.298 ops/s
# Warmup Iteration  16: 740898.619 ops/s
# Warmup Iteration  17: 788182.793 ops/s
# Warmup Iteration  18: 752674.479 ops/s
# Warmup Iteration  19: 801008.671 ops/s
# Warmup Iteration  20: 757771.739 ops/s
# Warmup Iteration  21: 794477.521 ops/s
# Warmup Iteration  22: 768958.791 ops/s
# Warmup Iteration  23: 820011.446 ops/s
# Warmup Iteration  24: 782900.113 ops/s
# Warmup Iteration  25: 769191.033 ops/s
# Warmup Iteration  26: 779635.964 ops/s
# Warmup Iteration  27: 771831.758 ops/s
# Warmup Iteration  28: 759520.547 ops/s
# Warmup Iteration  29: 778628.347 ops/s
# Warmup Iteration  30: 764654.395 ops/s
Iteration   1: 804630.891 ops/s
Iteration   2: 797994.513 ops/s
Iteration   3: 742683.512 ops/s
Iteration   4: 769608.568 ops/s
Iteration   5: 785408.424 ops/s
Iteration   6: 786994.588 ops/s
Iteration   7: 760274.114 ops/s
Iteration   8: 800207.166 ops/s
Iteration   9: 805225.931 ops/s
Iteration  10: 745949.133 ops/s
Iteration  11: 795834.197 ops/s
Iteration  12: 760665.380 ops/s
Iteration  13: 770218.232 ops/s
Iteration  14: 785837.424 ops/s
Iteration  15: 784787.414 ops/s
Iteration  16: 770021.148 ops/s
Iteration  17: 775856.630 ops/s
Iteration  18: 783650.211 ops/s
Iteration  19: 767932.887 ops/s
Iteration  20: 789290.793 ops/s
Iteration  21: 825430.141 ops/s
Iteration  22: 755504.277 ops/s
Iteration  23: 798326.636 ops/s
Iteration  24: 801383.055 ops/s
Iteration  25: 738178.130 ops/s
Iteration  26: 788943.540 ops/s
Iteration  27: 698841.901 ops/s
Iteration  28: 720010.246 ops/s
Iteration  29: 757153.763 ops/s
Iteration  30: 783141.299 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleError":
  774999.472 ±(99.9%) 18189.367 ops/s [Average]
  (min, avg, max) = (698841.901, 774999.472, 825430.141), stdev = 27224.990
  CI (99.9%): [756810.105, 793188.838] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerSingleError  thrpt   30  774999.472 ± 18189.367  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_nullIterableElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_nullIterableElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 184385.163 ops/s
# Warmup Iteration   2: 503907.933 ops/s
# Warmup Iteration   3: 582540.216 ops/s
# Warmup Iteration   4: 597823.781 ops/s
# Warmup Iteration   5: 587502.600 ops/s
# Warmup Iteration   6: 632810.558 ops/s
# Warmup Iteration   7: 635956.484 ops/s
# Warmup Iteration   8: 608909.174 ops/s
# Warmup Iteration   9: 652842.683 ops/s
# Warmup Iteration  10: 628473.917 ops/s
# Warmup Iteration  11: 621071.475 ops/s
# Warmup Iteration  12: 640559.060 ops/s
# Warmup Iteration  13: 624608.019 ops/s
# Warmup Iteration  14: 649178.018 ops/s
# Warmup Iteration  15: 622492.331 ops/s
# Warmup Iteration  16: 629284.199 ops/s
# Warmup Iteration  17: 673844.006 ops/s
# Warmup Iteration  18: 655692.618 ops/s
# Warmup Iteration  19: 689283.568 ops/s
# Warmup Iteration  20: 674201.080 ops/s
# Warmup Iteration  21: 660119.791 ops/s
# Warmup Iteration  22: 685896.773 ops/s
# Warmup Iteration  23: 643845.139 ops/s
# Warmup Iteration  24: 662295.022 ops/s
# Warmup Iteration  25: 678433.333 ops/s
# Warmup Iteration  26: 653756.962 ops/s
# Warmup Iteration  27: 668853.085 ops/s
# Warmup Iteration  28: 682092.091 ops/s
# Warmup Iteration  29: 643797.344 ops/s
# Warmup Iteration  30: 697356.978 ops/s
Iteration   1: 644610.585 ops/s
Iteration   2: 666984.394 ops/s
Iteration   3: 670965.932 ops/s
Iteration   4: 659550.465 ops/s
Iteration   5: 679638.652 ops/s
Iteration   6: 648331.424 ops/s
Iteration   7: 664884.714 ops/s
Iteration   8: 641611.007 ops/s
Iteration   9: 656056.144 ops/s
Iteration  10: 659114.578 ops/s
Iteration  11: 650096.697 ops/s
Iteration  12: 663821.275 ops/s
Iteration  13: 663966.415 ops/s
Iteration  14: 656255.627 ops/s
Iteration  15: 678009.225 ops/s
Iteration  16: 687875.947 ops/s
Iteration  17: 643826.236 ops/s
Iteration  18: 679879.118 ops/s
Iteration  19: 637001.816 ops/s
Iteration  20: 650542.438 ops/s
Iteration  21: 683245.782 ops/s
Iteration  22: 651597.672 ops/s
Iteration  23: 686964.858 ops/s
Iteration  24: 650989.221 ops/s
Iteration  25: 666712.855 ops/s
Iteration  26: 680551.850 ops/s
Iteration  27: 647184.427 ops/s
Iteration  28: 694758.075 ops/s
Iteration  29: 655193.866 ops/s
Iteration  30: 667664.754 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableAmbTest._Benchmark.benchmark_nullIterableElement":
  662929.535 ±(99.9%) 10312.121 ops/s [Average]
  (min, avg, max) = (637001.816, 662929.535, 694758.075), stdev = 15434.698
  CI (99.9%): [652617.414, 673241.656] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
FlowableAmbTest._Benchmark.benchmark_nullIterableElement  thrpt   30  662929.535 ± 10312.121  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 406206.890 ops/s
# Warmup Iteration   2: 598985.358 ops/s
# Warmup Iteration   3: 643216.147 ops/s
# Warmup Iteration   4: 746494.458 ops/s
# Warmup Iteration   5: 596297.559 ops/s
# Warmup Iteration   6: 700512.525 ops/s
# Warmup Iteration   7: 750495.502 ops/s
# Warmup Iteration   8: 730458.307 ops/s
# Warmup Iteration   9: 760639.257 ops/s
# Warmup Iteration  10: 751711.613 ops/s
# Warmup Iteration  11: 703237.564 ops/s
# Warmup Iteration  12: 761612.808 ops/s
# Warmup Iteration  13: 751504.747 ops/s
# Warmup Iteration  14: 722199.772 ops/s
# Warmup Iteration  15: 736422.176 ops/s
# Warmup Iteration  16: 757723.503 ops/s
# Warmup Iteration  17: 751690.070 ops/s
# Warmup Iteration  18: 796568.941 ops/s
# Warmup Iteration  19: 798683.060 ops/s
# Warmup Iteration  20: 762411.502 ops/s
# Warmup Iteration  21: 801074.584 ops/s
# Warmup Iteration  22: 764159.571 ops/s
# Warmup Iteration  23: 781902.720 ops/s
# Warmup Iteration  24: 758182.955 ops/s
# Warmup Iteration  25: 769285.792 ops/s
# Warmup Iteration  26: 797498.606 ops/s
# Warmup Iteration  27: 787324.656 ops/s
# Warmup Iteration  28: 798248.532 ops/s
# Warmup Iteration  29: 759417.430 ops/s
# Warmup Iteration  30: 775886.012 ops/s
Iteration   1: 818456.517 ops/s
Iteration   2: 755574.805 ops/s
Iteration   3: 785236.782 ops/s
Iteration   4: 775407.995 ops/s
Iteration   5: 774036.266 ops/s
Iteration   6: 802117.268 ops/s
Iteration   7: 776255.964 ops/s
Iteration   8: 806557.783 ops/s
Iteration   9: 802448.345 ops/s
Iteration  10: 773571.146 ops/s
Iteration  11: 788729.625 ops/s
Iteration  12: 755014.353 ops/s
Iteration  13: 814057.123 ops/s
Iteration  14: 774845.619 ops/s
Iteration  15: 762343.416 ops/s
Iteration  16: 808261.911 ops/s
Iteration  17: 790547.654 ops/s
Iteration  18: 794166.635 ops/s
Iteration  19: 778596.362 ops/s
Iteration  20: 798552.527 ops/s
Iteration  21: 792822.576 ops/s
Iteration  22: 643189.248 ops/s
Iteration  23: 799317.168 ops/s
Iteration  24: 770043.717 ops/s
Iteration  25: 819603.357 ops/s
Iteration  26: 753847.811 ops/s
Iteration  27: 793667.613 ops/s
Iteration  28: 763870.172 ops/s
Iteration  29: 780479.203 ops/s
Iteration  30: 810266.736 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverError":
  782062.857 ±(99.9%) 21635.373 ops/s [Average]
  (min, avg, max) = (643189.248, 782062.857, 819603.357), stdev = 32382.811
  CI (99.9%): [760427.483, 803698.230] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score       Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerMaybeObserverError  thrpt   30  782062.857 ± 21635.373  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 307449.545 ops/s
# Warmup Iteration   2: 603039.167 ops/s
# Warmup Iteration   3: 701078.248 ops/s
# Warmup Iteration   4: 720494.608 ops/s
# Warmup Iteration   5: 643523.493 ops/s
# Warmup Iteration   6: 743949.915 ops/s
# Warmup Iteration   7: 760053.536 ops/s
# Warmup Iteration   8: 757365.354 ops/s
# Warmup Iteration   9: 711891.299 ops/s
# Warmup Iteration  10: 766662.379 ops/s
# Warmup Iteration  11: 708843.689 ops/s
# Warmup Iteration  12: 664116.424 ops/s
# Warmup Iteration  13: 758835.444 ops/s
# Warmup Iteration  14: 741866.866 ops/s
# Warmup Iteration  15: 720480.309 ops/s
# Warmup Iteration  16: 731360.020 ops/s
# Warmup Iteration  17: 777003.041 ops/s
# Warmup Iteration  18: 757528.125 ops/s
# Warmup Iteration  19: 800503.049 ops/s
# Warmup Iteration  20: 760212.047 ops/s
# Warmup Iteration  21: 795529.628 ops/s
# Warmup Iteration  22: 756526.011 ops/s
# Warmup Iteration  23: 775076.779 ops/s
# Warmup Iteration  24: 758356.559 ops/s
# Warmup Iteration  25: 806871.821 ops/s
# Warmup Iteration  26: 789909.581 ops/s
# Warmup Iteration  27: 758815.918 ops/s
# Warmup Iteration  28: 790694.370 ops/s
# Warmup Iteration  29: 773189.376 ops/s
# Warmup Iteration  30: 797778.655 ops/s
Iteration   1: 800051.469 ops/s
Iteration   2: 761747.993 ops/s
Iteration   3: 800841.436 ops/s
Iteration   4: 753108.241 ops/s
Iteration   5: 767858.948 ops/s
Iteration   6: 804808.117 ops/s
Iteration   7: 767163.026 ops/s
Iteration   8: 807028.126 ops/s
Iteration   9: 797611.611 ops/s
Iteration  10: 744572.298 ops/s
Iteration  11: 807898.483 ops/s
Iteration  12: 752435.934 ops/s
Iteration  13: 784163.661 ops/s
Iteration  14: 794893.933 ops/s
Iteration  15: 745866.727 ops/s
Iteration  16: 796020.293 ops/s
Iteration  17: 769303.149 ops/s
Iteration  18: 763700.901 ops/s
Iteration  19: 781754.177 ops/s
Iteration  20: 762209.262 ops/s
Iteration  21: 793903.412 ops/s
Iteration  22: 757170.326 ops/s
Iteration  23: 796004.669 ops/s
Iteration  24: 763258.835 ops/s
Iteration  25: 786266.109 ops/s
Iteration  26: 785211.204 ops/s
Iteration  27: 750900.508 ops/s
Iteration  28: 790248.399 ops/s
Iteration  29: 781918.884 ops/s
Iteration  30: 754514.359 ops/s


Result "io.reactivex.rxjava3.internal.util.AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverError":
  777414.483 ±(99.9%) 13440.729 ops/s [Average]
  (min, avg, max) = (744572.298, 777414.483, 807898.483), stdev = 20117.451
  CI (99.9%): [763973.754, 790855.212] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
AtomicThrowableTest._Benchmark.benchmark_tryTerminateConsumerObserverError  thrpt   30  777414.483 ± 13440.729  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_badSourceDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_badSourceDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 230298.493 ops/s
# Warmup Iteration   2: 495599.721 ops/s
# Warmup Iteration   3: 573202.662 ops/s
# Warmup Iteration   4: 541603.277 ops/s
# Warmup Iteration   5: 557219.206 ops/s
# Warmup Iteration   6: 593072.799 ops/s
# Warmup Iteration   7: 595552.600 ops/s
# Warmup Iteration   8: 598170.882 ops/s
# Warmup Iteration   9: 617462.403 ops/s
# Warmup Iteration  10: 599945.703 ops/s
# Warmup Iteration  11: 614666.722 ops/s
# Warmup Iteration  12: 594928.287 ops/s
# Warmup Iteration  13: 595979.812 ops/s
# Warmup Iteration  14: 607536.041 ops/s
# Warmup Iteration  15: 603588.987 ops/s
# Warmup Iteration  16: 629868.315 ops/s
# Warmup Iteration  17: 625590.520 ops/s
# Warmup Iteration  18: 630505.607 ops/s
# Warmup Iteration  19: 643770.121 ops/s
# Warmup Iteration  20: 638827.642 ops/s
# Warmup Iteration  21: 640367.520 ops/s
# Warmup Iteration  22: 620532.113 ops/s
# Warmup Iteration  23: 640204.629 ops/s
# Warmup Iteration  24: 653843.952 ops/s
# Warmup Iteration  25: 634484.393 ops/s
# Warmup Iteration  26: 613352.595 ops/s
# Warmup Iteration  27: 649052.607 ops/s
# Warmup Iteration  28: 637960.024 ops/s
# Warmup Iteration  29: 643091.912 ops/s
# Warmup Iteration  30: 648366.791 ops/s
Iteration   1: 624358.734 ops/s
Iteration   2: 649659.829 ops/s
Iteration   3: 627180.337 ops/s
Iteration   4: 641627.920 ops/s
Iteration   5: 634050.454 ops/s
Iteration   6: 611662.322 ops/s
Iteration   7: 661857.965 ops/s
Iteration   8: 619281.062 ops/s
Iteration   9: 643766.043 ops/s
Iteration  10: 617631.621 ops/s
Iteration  11: 637623.714 ops/s
Iteration  12: 639060.993 ops/s
Iteration  13: 627162.390 ops/s
Iteration  14: 659139.320 ops/s
Iteration  15: 627713.309 ops/s
Iteration  16: 644666.015 ops/s
Iteration  17: 488778.368 ops/s
Iteration  18: 625799.937 ops/s
Iteration  19: 659337.664 ops/s
Iteration  20: 631508.657 ops/s
Iteration  21: 634930.131 ops/s
Iteration  22: 639617.149 ops/s
Iteration  23: 628925.661 ops/s
Iteration  24: 642918.381 ops/s
Iteration  25: 608256.976 ops/s
Iteration  26: 635634.985 ops/s
Iteration  27: 668440.783 ops/s
Iteration  28: 623699.966 ops/s
Iteration  29: 637118.715 ops/s
Iteration  30: 661933.984 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_badSourceDispose":
  631778.113 ±(99.9%) 20652.583 ops/s [Average]
  (min, avg, max) = (488778.368, 631778.113, 668440.783), stdev = 30911.816
  CI (99.9%): [611125.530, 652430.696] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
FlowableRefCountTest._Benchmark.benchmark_badSourceDispose  thrpt   30  631778.113 ± 20652.583  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148122.035 ops/s
# Warmup Iteration   2: 416381.406 ops/s
# Warmup Iteration   3: 624584.688 ops/s
# Warmup Iteration   4: 570277.830 ops/s
# Warmup Iteration   5: 636998.291 ops/s
# Warmup Iteration   6: 640752.836 ops/s
# Warmup Iteration   7: 558436.414 ops/s
# Warmup Iteration   8: 656764.152 ops/s
# Warmup Iteration   9: 629844.212 ops/s
# Warmup Iteration  10: 659094.391 ops/s
# Warmup Iteration  11: 635450.698 ops/s
# Warmup Iteration  12: 656157.992 ops/s
# Warmup Iteration  13: 669577.706 ops/s
# Warmup Iteration  14: 625335.284 ops/s
# Warmup Iteration  15: 653007.249 ops/s
# Warmup Iteration  16: 636002.661 ops/s
# Warmup Iteration  17: 705032.289 ops/s
# Warmup Iteration  18: 668895.715 ops/s
# Warmup Iteration  19: 680183.446 ops/s
# Warmup Iteration  20: 705399.332 ops/s
# Warmup Iteration  21: 682537.759 ops/s
# Warmup Iteration  22: 673501.247 ops/s
# Warmup Iteration  23: 692039.121 ops/s
# Warmup Iteration  24: 660811.256 ops/s
# Warmup Iteration  25: 683285.960 ops/s
# Warmup Iteration  26: 678335.073 ops/s
# Warmup Iteration  27: 686088.354 ops/s
# Warmup Iteration  28: 668262.818 ops/s
# Warmup Iteration  29: 706718.928 ops/s
# Warmup Iteration  30: 680630.963 ops/s
Iteration   1: 678026.365 ops/s
Iteration   2: 696999.597 ops/s
Iteration   3: 667257.117 ops/s
Iteration   4: 674067.837 ops/s
Iteration   5: 694215.467 ops/s
Iteration   6: 676355.063 ops/s
Iteration   7: 669000.247 ops/s
Iteration   8: 707743.536 ops/s
Iteration   9: 662425.485 ops/s
Iteration  10: 677615.887 ops/s
Iteration  11: 715115.644 ops/s
Iteration  12: 657526.119 ops/s
Iteration  13: 702250.032 ops/s
Iteration  14: 653549.443 ops/s
Iteration  15: 679135.708 ops/s
Iteration  16: 704655.497 ops/s
Iteration  17: 665701.171 ops/s
Iteration  18: 688027.157 ops/s
Iteration  19: 696875.069 ops/s
Iteration  20: 677470.147 ops/s
Iteration  21: 695247.290 ops/s
Iteration  22: 673005.407 ops/s
Iteration  23: 681978.876 ops/s
Iteration  24: 712181.021 ops/s
Iteration  25: 667964.632 ops/s
Iteration  26: 713124.038 ops/s
Iteration  27: 710113.385 ops/s
Iteration  28: 656971.626 ops/s
Iteration  29: 711086.319 ops/s
Iteration  30: 710821.284 ops/s


Result "io.reactivex.rxjava3.internal.util.HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnError":
  685883.549 ±(99.9%) 12947.217 ops/s [Average]
  (min, avg, max) = (653549.443, 685883.549, 715115.644), stdev = 19378.786
  CI (99.9%): [672936.332, 698830.766] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnError  thrpt   30  685883.549 ± 12947.217  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 35255.828 ops/s
# Warmup Iteration   2: 115476.253 ops/s
# Warmup Iteration   3: 208752.460 ops/s
# Warmup Iteration   4: 207084.444 ops/s
# Warmup Iteration   5: 225291.606 ops/s
# Warmup Iteration   6: 221553.162 ops/s
# Warmup Iteration   7: 218210.923 ops/s
# Warmup Iteration   8: 226743.033 ops/s
# Warmup Iteration   9: 221069.293 ops/s
# Warmup Iteration  10: 217824.180 ops/s
# Warmup Iteration  11: 224402.804 ops/s
# Warmup Iteration  12: 236463.719 ops/s
# Warmup Iteration  13: 233492.768 ops/s
# Warmup Iteration  14: 219371.027 ops/s
# Warmup Iteration  15: 223507.640 ops/s
# Warmup Iteration  16: 226711.703 ops/s
# Warmup Iteration  17: 223477.813 ops/s
# Warmup Iteration  18: 237698.544 ops/s
# Warmup Iteration  19: 227583.750 ops/s
# Warmup Iteration  20: 245702.650 ops/s
# Warmup Iteration  21: 236589.462 ops/s
# Warmup Iteration  22: 227658.910 ops/s
# Warmup Iteration  23: 238596.758 ops/s
# Warmup Iteration  24: 240945.562 ops/s
# Warmup Iteration  25: 229103.073 ops/s
# Warmup Iteration  26: 234510.285 ops/s
# Warmup Iteration  27: 227409.896 ops/s
# Warmup Iteration  28: 225048.145 ops/s
# Warmup Iteration  29: 236485.474 ops/s
# Warmup Iteration  30: 230818.495 ops/s
Iteration   1: 228987.036 ops/s
Iteration   2: 233033.921 ops/s
Iteration   3: 241579.461 ops/s
Iteration   4: 219389.169 ops/s
Iteration   5: 243709.233 ops/s
Iteration   6: 227425.782 ops/s
Iteration   7: 236786.870 ops/s
Iteration   8: 229351.502 ops/s
Iteration   9: 235961.135 ops/s
Iteration  10: 236208.908 ops/s
Iteration  11: 230934.347 ops/s
Iteration  12: 199701.921 ops/s
Iteration  13: 221200.409 ops/s
Iteration  14: 234499.522 ops/s
Iteration  15: 242598.449 ops/s
Iteration  16: 229338.900 ops/s
Iteration  17: 241076.607 ops/s
Iteration  18: 229759.983 ops/s
Iteration  19: 233536.696 ops/s
Iteration  20: 228161.531 ops/s
Iteration  21: 237300.399 ops/s
Iteration  22: 230690.727 ops/s
Iteration  23: 233784.393 ops/s
Iteration  24: 238204.282 ops/s
Iteration  25: 230564.416 ops/s
Iteration  26: 235219.088 ops/s
Iteration  27: 230397.110 ops/s
Iteration  28: 237680.972 ops/s
Iteration  29: 232866.525 ops/s
Iteration  30: 232562.719 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_doubleOnSubscribe":
  232083.734 ±(99.9%) 5538.665 ops/s [Average]
  (min, avg, max) = (199701.921, 232083.734, 243709.233), stdev = 8290.013
  CI (99.9%): [226545.069, 237622.399] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  232083.734 ± 5538.665  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_disposeWhileRunningError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_disposeWhileRunningError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 34562.986 ops/s
# Warmup Iteration   2: 180077.398 ops/s
# Warmup Iteration   3: 205270.678 ops/s
# Warmup Iteration   4: 217295.227 ops/s
# Warmup Iteration   5: 221777.142 ops/s
# Warmup Iteration   6: 233113.869 ops/s
# Warmup Iteration   7: 233531.725 ops/s
# Warmup Iteration   8: 231149.238 ops/s
# Warmup Iteration   9: 237054.913 ops/s
# Warmup Iteration  10: 231873.344 ops/s
# Warmup Iteration  11: 239256.651 ops/s
# Warmup Iteration  12: 239465.110 ops/s
# Warmup Iteration  13: 226970.359 ops/s
# Warmup Iteration  14: 238269.508 ops/s
# Warmup Iteration  15: 234452.242 ops/s
# Warmup Iteration  16: 236371.145 ops/s
# Warmup Iteration  17: 240506.186 ops/s
# Warmup Iteration  18: 242494.635 ops/s
# Warmup Iteration  19: 252816.612 ops/s
# Warmup Iteration  20: 238523.503 ops/s
# Warmup Iteration  21: 250109.145 ops/s
# Warmup Iteration  22: 251579.751 ops/s
# Warmup Iteration  23: 237106.666 ops/s
# Warmup Iteration  24: 240326.750 ops/s
# Warmup Iteration  25: 249750.719 ops/s
# Warmup Iteration  26: 249511.107 ops/s
# Warmup Iteration  27: 239368.237 ops/s
# Warmup Iteration  28: 254268.842 ops/s
# Warmup Iteration  29: 245527.926 ops/s
# Warmup Iteration  30: 234572.595 ops/s
Iteration   1: 249673.252 ops/s
Iteration   2: 239355.162 ops/s
Iteration   3: 248355.847 ops/s
Iteration   4: 242722.632 ops/s
Iteration   5: 241082.169 ops/s
Iteration   6: 253202.394 ops/s
Iteration   7: 235781.425 ops/s
Iteration   8: 243243.380 ops/s
Iteration   9: 236915.436 ops/s
Iteration  10: 248732.260 ops/s
Iteration  11: 245399.725 ops/s
Iteration  12: 251419.435 ops/s
Iteration  13: 237584.009 ops/s
Iteration  14: 239273.754 ops/s
Iteration  15: 255172.965 ops/s
Iteration  16: 248630.987 ops/s
Iteration  17: 236881.953 ops/s
Iteration  18: 250817.973 ops/s
Iteration  19: 239996.611 ops/s
Iteration  20: 244086.521 ops/s
Iteration  21: 241454.804 ops/s
Iteration  22: 243387.170 ops/s
Iteration  23: 241986.213 ops/s
Iteration  24: 244172.770 ops/s
Iteration  25: 245132.605 ops/s
Iteration  26: 237359.564 ops/s
Iteration  27: 246895.062 ops/s
Iteration  28: 231109.682 ops/s
Iteration  29: 244380.873 ops/s
Iteration  30: 245227.381 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromActionTest._Benchmark.benchmark_disposeWhileRunningError":
  243647.800 ±(99.9%) 3757.015 ops/s [Average]
  (min, avg, max) = (231109.682, 243647.800, 255172.965), stdev = 5623.324
  CI (99.9%): [239890.785, 247404.816] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
CompletableFromActionTest._Benchmark.benchmark_disposeWhileRunningError  thrpt   30  243647.800 ± 3757.015  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSkipInternalState$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSkipInternalState

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.845 ops/s
# Warmup Iteration   2: 65007.127 ops/s
# Warmup Iteration   3: 132488.208 ops/s
# Warmup Iteration   4: 146841.431 ops/s
# Warmup Iteration   5: 238147.328 ops/s
# Warmup Iteration   6: 315571.299 ops/s
# Warmup Iteration   7: 266023.491 ops/s
# Warmup Iteration   8: 349587.126 ops/s
# Warmup Iteration   9: 667469.492 ops/s
# Warmup Iteration  10: 671844.973 ops/s
# Warmup Iteration  11: 670975.023 ops/s
# Warmup Iteration  12: 608054.933 ops/s
# Warmup Iteration  13: 667417.079 ops/s
# Warmup Iteration  14: 687719.930 ops/s
# Warmup Iteration  15: 609002.933 ops/s
# Warmup Iteration  16: 690913.556 ops/s
# Warmup Iteration  17: 662136.954 ops/s
# Warmup Iteration  18: 673736.969 ops/s
# Warmup Iteration  19: 701257.831 ops/s
# Warmup Iteration  20: 630654.871 ops/s
# Warmup Iteration  21: 690309.733 ops/s
# Warmup Iteration  22: 678252.458 ops/s
# Warmup Iteration  23: 683748.081 ops/s
# Warmup Iteration  24: 682993.750 ops/s
# Warmup Iteration  25: 660012.839 ops/s
# Warmup Iteration  26: 690137.226 ops/s
# Warmup Iteration  27: 654079.490 ops/s
# Warmup Iteration  28: 694438.809 ops/s
# Warmup Iteration  29: 677174.923 ops/s
# Warmup Iteration  30: 688997.116 ops/s
Iteration   1: 672392.248 ops/s
Iteration   2: 667117.644 ops/s
Iteration   3: 693834.624 ops/s
Iteration   4: 660247.971 ops/s
Iteration   5: 684993.060 ops/s
Iteration   6: 583411.183 ops/s
Iteration   7: 660444.313 ops/s
Iteration   8: 660538.186 ops/s
Iteration   9: 677957.291 ops/s
Iteration  10: 703547.637 ops/s
Iteration  11: 678490.837 ops/s
Iteration  12: 690965.260 ops/s
Iteration  13: 681302.885 ops/s
Iteration  14: 679373.641 ops/s
Iteration  15: 664132.681 ops/s
Iteration  16: 682315.692 ops/s
Iteration  17: 655041.724 ops/s
Iteration  18: 688763.397 ops/s
Iteration  19: 665960.934 ops/s
Iteration  20: 683274.347 ops/s
Iteration  21: 677477.004 ops/s
Iteration  22: 676407.450 ops/s
Iteration  23: 693203.148 ops/s
Iteration  24: 672904.946 ops/s
Iteration  25: 682108.713 ops/s
Iteration  26: 693665.412 ops/s
Iteration  27: 648830.203 ops/s
Iteration  28: 660590.432 ops/s
Iteration  29: 689965.216 ops/s
Iteration  30: 654391.326 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSkipInternalState":
  672788.313 ±(99.9%) 14546.425 ops/s [Average]
  (min, avg, max) = (583411.183, 672788.313, 703547.637), stdev = 21772.405
  CI (99.9%): [658241.889, 687334.738] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableBufferTest._Benchmark.benchmark_timedSkipInternalState  thrpt   30  672788.313 ± 14546.425  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathNoRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathNoRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 116254.393 ops/s
# Warmup Iteration   2: 353061.203 ops/s
# Warmup Iteration   3: 484929.909 ops/s
# Warmup Iteration   4: 577608.831 ops/s
# Warmup Iteration   5: 512181.658 ops/s
# Warmup Iteration   6: 576167.560 ops/s
# Warmup Iteration   7: 591990.403 ops/s
# Warmup Iteration   8: 560804.587 ops/s
# Warmup Iteration   9: 608354.627 ops/s
# Warmup Iteration  10: 564884.186 ops/s
# Warmup Iteration  11: 568243.768 ops/s
# Warmup Iteration  12: 592048.918 ops/s
# Warmup Iteration  13: 559311.205 ops/s
# Warmup Iteration  14: 580868.126 ops/s
# Warmup Iteration  15: 585730.773 ops/s
# Warmup Iteration  16: 576295.508 ops/s
# Warmup Iteration  17: 634621.223 ops/s
# Warmup Iteration  18: 581177.993 ops/s
# Warmup Iteration  19: 628581.106 ops/s
# Warmup Iteration  20: 584910.439 ops/s
# Warmup Iteration  21: 603129.307 ops/s
# Warmup Iteration  22: 634359.971 ops/s
# Warmup Iteration  23: 583171.897 ops/s
# Warmup Iteration  24: 591635.915 ops/s
# Warmup Iteration  25: 605450.014 ops/s
# Warmup Iteration  26: 590590.094 ops/s
# Warmup Iteration  27: 587567.888 ops/s
# Warmup Iteration  28: 612568.472 ops/s
# Warmup Iteration  29: 604869.692 ops/s
# Warmup Iteration  30: 616656.120 ops/s
Iteration   1: 583596.356 ops/s
Iteration   2: 627700.262 ops/s
Iteration   3: 596791.980 ops/s
Iteration   4: 595785.590 ops/s
Iteration   5: 618597.478 ops/s
Iteration   6: 594218.918 ops/s
Iteration   7: 613850.588 ops/s
Iteration   8: 616066.460 ops/s
Iteration   9: 605980.698 ops/s
Iteration  10: 618659.823 ops/s
Iteration  11: 622178.161 ops/s
Iteration  12: 609545.027 ops/s
Iteration  13: 584510.120 ops/s
Iteration  14: 620244.223 ops/s
Iteration  15: 583092.039 ops/s
Iteration  16: 595281.210 ops/s
Iteration  17: 617619.935 ops/s
Iteration  18: 585105.240 ops/s
Iteration  19: 599922.721 ops/s
Iteration  20: 607135.001 ops/s
Iteration  21: 615735.653 ops/s
Iteration  22: 599827.720 ops/s
Iteration  23: 603849.838 ops/s
Iteration  24: 615120.732 ops/s
Iteration  25: 594852.314 ops/s
Iteration  26: 608078.254 ops/s
Iteration  27: 602101.500 ops/s
Iteration  28: 598635.448 ops/s
Iteration  29: 621368.096 ops/s
Iteration  30: 594945.634 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathNoRequest":
  605013.234 ±(99.9%) 8522.738 ops/s [Average]
  (min, avg, max) = (583092.039, 605013.234, 627700.262), stdev = 12756.433
  CI (99.9%): [596490.496, 613535.972] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
QueueDrainSubscriberTest._Benchmark.benchmark_unorderedFastPathNoRequest  thrpt   30  605013.234 ± 8522.738  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSizeBufferAlreadyCleared$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSizeBufferAlreadyCleared

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.786 ops/s
# Warmup Iteration   2: 39122.784 ops/s
# Warmup Iteration   3: 96122.915 ops/s
# Warmup Iteration   4: 165507.027 ops/s
# Warmup Iteration   5: 236654.290 ops/s
# Warmup Iteration   6: 233977.999 ops/s
# Warmup Iteration   7: 219635.921 ops/s
# Warmup Iteration   8: 235462.288 ops/s
# Warmup Iteration   9: 602718.327 ops/s
# Warmup Iteration  10: 692520.243 ops/s
# Warmup Iteration  11: 672875.673 ops/s
# Warmup Iteration  12: 620325.980 ops/s
# Warmup Iteration  13: 747972.481 ops/s
# Warmup Iteration  14: 695892.381 ops/s
# Warmup Iteration  15: 721972.585 ops/s
# Warmup Iteration  16: 743628.768 ops/s
# Warmup Iteration  17: 720431.324 ops/s
# Warmup Iteration  18: 704898.488 ops/s
# Warmup Iteration  19: 745019.622 ops/s
# Warmup Iteration  20: 710271.570 ops/s
# Warmup Iteration  21: 733180.292 ops/s
# Warmup Iteration  22: 718982.260 ops/s
# Warmup Iteration  23: 728608.338 ops/s
# Warmup Iteration  24: 718717.875 ops/s
# Warmup Iteration  25: 702754.852 ops/s
# Warmup Iteration  26: 713991.741 ops/s
# Warmup Iteration  27: 736845.128 ops/s
# Warmup Iteration  28: 701241.509 ops/s
# Warmup Iteration  29: 736005.578 ops/s
# Warmup Iteration  30: 724614.254 ops/s
Iteration   1: 622797.409 ops/s
Iteration   2: 740821.225 ops/s
Iteration   3: 708887.031 ops/s
Iteration   4: 738083.819 ops/s
Iteration   5: 718057.935 ops/s
Iteration   6: 722168.718 ops/s
Iteration   7: 771074.625 ops/s
Iteration   8: 732050.228 ops/s
Iteration   9: 708372.972 ops/s
Iteration  10: 724810.738 ops/s
Iteration  11: 737728.379 ops/s
Iteration  12: 713956.741 ops/s
Iteration  13: 702609.308 ops/s
Iteration  14: 747826.101 ops/s
Iteration  15: 716131.216 ops/s
Iteration  16: 715243.906 ops/s
Iteration  17: 727828.241 ops/s
Iteration  18: 749167.258 ops/s
Iteration  19: 714739.875 ops/s
Iteration  20: 733641.187 ops/s
Iteration  21: 746717.611 ops/s
Iteration  22: 711592.361 ops/s
Iteration  23: 758104.644 ops/s
Iteration  24: 729162.774 ops/s
Iteration  25: 728405.774 ops/s
Iteration  26: 742469.898 ops/s
Iteration  27: 714093.369 ops/s
Iteration  28: 750591.171 ops/s
Iteration  29: 743367.558 ops/s
Iteration  30: 701112.716 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_timedSizeBufferAlreadyCleared":
  725720.493 ±(99.9%) 17383.188 ops/s [Average]
  (min, avg, max) = (622797.409, 725720.493, 771074.625), stdev = 26018.340
  CI (99.9%): [708337.305, 743103.681] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
ObservableBufferTest._Benchmark.benchmark_timedSizeBufferAlreadyCleared  thrpt   30  725720.493 ± 17383.188  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49068.082 ops/s
# Warmup Iteration   2: 160500.340 ops/s
# Warmup Iteration   3: 226636.765 ops/s
# Warmup Iteration   4: 527523.274 ops/s
# Warmup Iteration   5: 609286.689 ops/s
# Warmup Iteration   6: 693942.643 ops/s
# Warmup Iteration   7: 703997.094 ops/s
# Warmup Iteration   8: 685465.108 ops/s
# Warmup Iteration   9: 702844.618 ops/s
# Warmup Iteration  10: 693826.823 ops/s
# Warmup Iteration  11: 671787.267 ops/s
# Warmup Iteration  12: 702736.407 ops/s
# Warmup Iteration  13: 675066.467 ops/s
# Warmup Iteration  14: 715969.465 ops/s
# Warmup Iteration  15: 665058.004 ops/s
# Warmup Iteration  16: 662502.644 ops/s
# Warmup Iteration  17: 705465.990 ops/s
# Warmup Iteration  18: 677834.619 ops/s
# Warmup Iteration  19: 696797.992 ops/s
# Warmup Iteration  20: 705105.232 ops/s
# Warmup Iteration  21: 682135.048 ops/s
# Warmup Iteration  22: 689878.327 ops/s
# Warmup Iteration  23: 708453.073 ops/s
# Warmup Iteration  24: 667122.582 ops/s
# Warmup Iteration  25: 707958.283 ops/s
# Warmup Iteration  26: 674993.704 ops/s
# Warmup Iteration  27: 690165.982 ops/s
# Warmup Iteration  28: 717119.463 ops/s
# Warmup Iteration  29: 691879.851 ops/s
# Warmup Iteration  30: 719664.276 ops/s
Iteration   1: 701573.091 ops/s
Iteration   2: 716749.817 ops/s
Iteration   3: 718737.956 ops/s
Iteration   4: 674892.582 ops/s
Iteration   5: 698455.931 ops/s
Iteration   6: 684968.841 ops/s
Iteration   7: 700514.469 ops/s
Iteration   8: 716231.039 ops/s
Iteration   9: 719637.864 ops/s
Iteration  10: 722055.884 ops/s
Iteration  11: 672430.128 ops/s
Iteration  12: 719696.991 ops/s
Iteration  13: 697172.511 ops/s
Iteration  14: 694650.866 ops/s
Iteration  15: 707892.508 ops/s
Iteration  16: 681567.857 ops/s
Iteration  17: 704282.272 ops/s
Iteration  18: 701094.639 ops/s
Iteration  19: 695878.346 ops/s
Iteration  20: 694289.744 ops/s
Iteration  21: 717617.846 ops/s
Iteration  22: 654577.842 ops/s
Iteration  23: 715707.798 ops/s
Iteration  24: 672097.446 ops/s
Iteration  25: 697781.363 ops/s
Iteration  26: 709118.360 ops/s
Iteration  27: 720847.315 ops/s
Iteration  28: 697947.616 ops/s
Iteration  29: 710241.829 ops/s
Iteration  30: 699231.700 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream":
  700598.082 ±(99.9%) 11306.304 ops/s [Average]
  (min, avg, max) = (654577.842, 700598.082, 722055.884), stdev = 16922.745
  CI (99.9%): [689291.778, 711904.386] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt       Score       Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowAbandonmentCancelsUpstream  thrpt   30  700598.082 ± 11306.304  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_badSourceSubscribe2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_badSourceSubscribe2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 44795.725 ops/s
# Warmup Iteration   2: 144426.314 ops/s
# Warmup Iteration   3: 151329.754 ops/s
# Warmup Iteration   4: 147775.720 ops/s
# Warmup Iteration   5: 174752.633 ops/s
# Warmup Iteration   6: 158896.416 ops/s
# Warmup Iteration   7: 164380.189 ops/s
# Warmup Iteration   8: 176202.279 ops/s
# Warmup Iteration   9: 174280.843 ops/s
# Warmup Iteration  10: 165134.501 ops/s
# Warmup Iteration  11: 172740.417 ops/s
# Warmup Iteration  12: 166978.967 ops/s
# Warmup Iteration  13: 171624.236 ops/s
# Warmup Iteration  14: 167374.808 ops/s
# Warmup Iteration  15: 174195.998 ops/s
# Warmup Iteration  16: 176549.231 ops/s
# Warmup Iteration  17: 172006.777 ops/s
# Warmup Iteration  18: 180368.566 ops/s
# Warmup Iteration  19: 179126.405 ops/s
# Warmup Iteration  20: 170547.374 ops/s
# Warmup Iteration  21: 181559.735 ops/s
# Warmup Iteration  22: 167918.404 ops/s
# Warmup Iteration  23: 170525.654 ops/s
# Warmup Iteration  24: 174159.391 ops/s
# Warmup Iteration  25: 142861.117 ops/s
# Warmup Iteration  26: 172124.775 ops/s
# Warmup Iteration  27: 181262.353 ops/s
# Warmup Iteration  28: 174016.901 ops/s
# Warmup Iteration  29: 181599.334 ops/s
# Warmup Iteration  30: 171975.937 ops/s
Iteration   1: 175235.718 ops/s
Iteration   2: 181781.119 ops/s
Iteration   3: 176676.804 ops/s
Iteration   4: 180265.514 ops/s
Iteration   5: 175023.015 ops/s
Iteration   6: 176776.810 ops/s
Iteration   7: 183882.004 ops/s
Iteration   8: 175337.468 ops/s
Iteration   9: 181158.852 ops/s
Iteration  10: 172639.322 ops/s
Iteration  11: 180830.265 ops/s
Iteration  12: 174540.641 ops/s
Iteration  13: 178626.130 ops/s
Iteration  14: 181399.537 ops/s
Iteration  15: 179672.586 ops/s
Iteration  16: 174843.282 ops/s
Iteration  17: 182434.636 ops/s
Iteration  18: 171683.404 ops/s
Iteration  19: 181267.821 ops/s
Iteration  20: 174323.345 ops/s
Iteration  21: 175464.910 ops/s
Iteration  22: 184822.949 ops/s
Iteration  23: 176279.195 ops/s
Iteration  24: 180277.764 ops/s
Iteration  25: 171404.053 ops/s
Iteration  26: 177562.387 ops/s
Iteration  27: 180909.310 ops/s
Iteration  28: 174032.858 ops/s
Iteration  29: 170734.632 ops/s
Iteration  30: 179578.547 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_badSourceSubscribe2":
  177648.829 ±(99.9%) 2568.604 ops/s [Average]
  (min, avg, max) = (170734.632, 177648.829, 184822.949), stdev = 3844.566
  CI (99.9%): [175080.225, 180217.433] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableRefCountTest._Benchmark.benchmark_badSourceSubscribe2  thrpt   30  177648.829 ± 2568.604  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipBackpressure2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipBackpressure2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43486.036 ops/s
# Warmup Iteration   2: 75880.922 ops/s
# Warmup Iteration   3: 210886.771 ops/s
# Warmup Iteration   4: 305716.442 ops/s
# Warmup Iteration   5: 313922.499 ops/s
# Warmup Iteration   6: 325055.363 ops/s
# Warmup Iteration   7: 311759.521 ops/s
# Warmup Iteration   8: 315853.551 ops/s
# Warmup Iteration   9: 297835.762 ops/s
# Warmup Iteration  10: 328210.695 ops/s
# Warmup Iteration  11: 320780.727 ops/s
# Warmup Iteration  12: 324119.169 ops/s
# Warmup Iteration  13: 302752.557 ops/s
# Warmup Iteration  14: 319828.651 ops/s
# Warmup Iteration  15: 313375.182 ops/s
# Warmup Iteration  16: 326540.817 ops/s
# Warmup Iteration  17: 305043.743 ops/s
# Warmup Iteration  18: 335337.340 ops/s
# Warmup Iteration  19: 319372.824 ops/s
# Warmup Iteration  20: 333710.821 ops/s
# Warmup Iteration  21: 336540.051 ops/s
# Warmup Iteration  22: 322231.245 ops/s
# Warmup Iteration  23: 333565.410 ops/s
# Warmup Iteration  24: 330613.820 ops/s
# Warmup Iteration  25: 330076.950 ops/s
# Warmup Iteration  26: 326223.348 ops/s
# Warmup Iteration  27: 333698.917 ops/s
# Warmup Iteration  28: 316636.522 ops/s
# Warmup Iteration  29: 334521.360 ops/s
# Warmup Iteration  30: 336355.578 ops/s
Iteration   1: 324919.093 ops/s
Iteration   2: 337793.630 ops/s
Iteration   3: 321653.671 ops/s
Iteration   4: 325422.134 ops/s
Iteration   5: 338449.089 ops/s
Iteration   6: 326461.925 ops/s
Iteration   7: 335965.710 ops/s
Iteration   8: 347076.063 ops/s
Iteration   9: 314706.322 ops/s
Iteration  10: 328573.651 ops/s
Iteration  11: 327334.036 ops/s
Iteration  12: 338081.360 ops/s
Iteration  13: 322651.780 ops/s
Iteration  14: 326454.733 ops/s
Iteration  15: 341282.435 ops/s
Iteration  16: 329364.892 ops/s
Iteration  17: 335352.914 ops/s
Iteration  18: 329991.183 ops/s
Iteration  19: 330141.884 ops/s
Iteration  20: 335445.497 ops/s
Iteration  21: 322245.956 ops/s
Iteration  22: 337403.014 ops/s
Iteration  23: 314033.145 ops/s
Iteration  24: 334604.695 ops/s
Iteration  25: 331395.208 ops/s
Iteration  26: 329580.369 ops/s
Iteration  27: 327152.329 ops/s
Iteration  28: 327409.035 ops/s
Iteration  29: 334743.993 ops/s
Iteration  30: 317484.041 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_skipBackpressure2":
  329772.460 ±(99.9%) 5167.467 ops/s [Average]
  (min, avg, max) = (314033.145, 329772.460, 347076.063), stdev = 7734.422
  CI (99.9%): [324604.993, 334939.927] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_skipBackpressure2  thrpt   30  329772.460 ± 5167.467  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repetition$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repetition

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14233.405 ops/s
# Warmup Iteration   2: 21735.126 ops/s
# Warmup Iteration   3: 21897.465 ops/s
# Warmup Iteration   4: 22315.514 ops/s
# Warmup Iteration   5: 24226.405 ops/s
# Warmup Iteration   6: 23630.957 ops/s
# Warmup Iteration   7: 23152.408 ops/s
# Warmup Iteration   8: 23456.211 ops/s
# Warmup Iteration   9: 23144.977 ops/s
# Warmup Iteration  10: 29081.430 ops/s
# Warmup Iteration  11: 23189.122 ops/s
# Warmup Iteration  12: 23707.596 ops/s
# Warmup Iteration  13: 23703.551 ops/s
# Warmup Iteration  14: 23653.394 ops/s
# Warmup Iteration  15: 24097.496 ops/s
# Warmup Iteration  16: 23253.181 ops/s
# Warmup Iteration  17: 23102.855 ops/s
# Warmup Iteration  18: 23262.480 ops/s
# Warmup Iteration  19: 22786.853 ops/s
# Warmup Iteration  20: 30239.051 ops/s
# Warmup Iteration  21: 21922.234 ops/s
# Warmup Iteration  22: 23030.590 ops/s
# Warmup Iteration  23: 23225.870 ops/s
# Warmup Iteration  24: 23170.348 ops/s
# Warmup Iteration  25: 23081.451 ops/s
# Warmup Iteration  26: 23108.293 ops/s
# Warmup Iteration  27: 22178.634 ops/s
# Warmup Iteration  28: 23410.631 ops/s
# Warmup Iteration  29: 23856.749 ops/s
# Warmup Iteration  30: 22690.088 ops/s
Iteration   1: 22977.808 ops/s
Iteration   2: 22996.778 ops/s
Iteration   3: 22473.033 ops/s
Iteration   4: 23599.005 ops/s
Iteration   5: 22934.306 ops/s
Iteration   6: 23800.625 ops/s
Iteration   7: 23275.809 ops/s
Iteration   8: 22553.022 ops/s
Iteration   9: 21615.110 ops/s
Iteration  10: 23635.926 ops/s
Iteration  11: 23298.765 ops/s
Iteration  12: 22982.396 ops/s
Iteration  13: 23870.246 ops/s
Iteration  14: 23168.558 ops/s
Iteration  15: 23534.052 ops/s
Iteration  16: 22659.566 ops/s
Iteration  17: 23433.756 ops/s
Iteration  18: 22885.729 ops/s
Iteration  19: 22849.416 ops/s
Iteration  20: 22919.393 ops/s
Iteration  21: 22964.733 ops/s
Iteration  22: 23144.697 ops/s
Iteration  23: 22669.901 ops/s
Iteration  24: 23434.354 ops/s
Iteration  25: 23208.173 ops/s
Iteration  26: 23035.754 ops/s
Iteration  27: 22758.926 ops/s
Iteration  28: 23547.777 ops/s
Iteration  29: 22060.307 ops/s
Iteration  30: 22997.394 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repetition":
  23042.844 ±(99.9%) 326.786 ops/s [Average]
  (min, avg, max) = (21615.110, 23042.844, 23870.246), stdev = 489.118
  CI (99.9%): [22716.058, 23369.630] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt      Score     Error  Units
ObservableRepeatTest._Benchmark.benchmark_repetition  thrpt   30  23042.844 ± 326.786  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 458040.301 ops/s
# Warmup Iteration   2: 1498798.542 ops/s
# Warmup Iteration   3: 2435918.456 ops/s
# Warmup Iteration   4: 2430834.807 ops/s
# Warmup Iteration   5: 2461177.577 ops/s
# Warmup Iteration   6: 2374903.494 ops/s
# Warmup Iteration   7: 2418895.890 ops/s
# Warmup Iteration   8: 2437740.676 ops/s
# Warmup Iteration   9: 2470705.132 ops/s
# Warmup Iteration  10: 2433052.213 ops/s
# Warmup Iteration  11: 2469771.547 ops/s
# Warmup Iteration  12: 2512711.763 ops/s
# Warmup Iteration  13: 2393977.733 ops/s
# Warmup Iteration  14: 2397436.371 ops/s
# Warmup Iteration  15: 2456528.834 ops/s
# Warmup Iteration  16: 2426384.268 ops/s
# Warmup Iteration  17: 2501715.145 ops/s
# Warmup Iteration  18: 2454577.487 ops/s
# Warmup Iteration  19: 2481686.076 ops/s
# Warmup Iteration  20: 2545049.735 ops/s
# Warmup Iteration  21: 2406995.521 ops/s
# Warmup Iteration  22: 2409560.046 ops/s
# Warmup Iteration  23: 2605804.182 ops/s
# Warmup Iteration  24: 2455713.194 ops/s
# Warmup Iteration  25: 2431891.328 ops/s
# Warmup Iteration  26: 2503968.643 ops/s
# Warmup Iteration  27: 2513014.684 ops/s
# Warmup Iteration  28: 2609163.675 ops/s
# Warmup Iteration  29: 2355858.996 ops/s
# Warmup Iteration  30: 2526649.322 ops/s
Iteration   1: 2440778.443 ops/s
Iteration   2: 2456905.871 ops/s
Iteration   3: 2414489.063 ops/s
Iteration   4: 2432418.681 ops/s
Iteration   5: 2615289.929 ops/s
Iteration   6: 2463659.585 ops/s
Iteration   7: 2555459.236 ops/s
Iteration   8: 2456211.841 ops/s
Iteration   9: 2421098.759 ops/s
Iteration  10: 2566718.661 ops/s
Iteration  11: 2606700.591 ops/s
Iteration  12: 2471942.577 ops/s
Iteration  13: 2506843.240 ops/s
Iteration  14: 2409070.470 ops/s
Iteration  15: 2382443.489 ops/s
Iteration  16: 2528441.465 ops/s
Iteration  17: 2570553.606 ops/s
Iteration  18: 2400841.056 ops/s
Iteration  19: 2523534.107 ops/s
Iteration  20: 2584040.622 ops/s
Iteration  21: 2378379.221 ops/s
Iteration  22: 2486430.717 ops/s
Iteration  23: 2486146.960 ops/s
Iteration  24: 2402517.996 ops/s
Iteration  25: 2569883.299 ops/s
Iteration  26: 2607477.991 ops/s
Iteration  27: 2432112.544 ops/s
Iteration  28: 2423327.544 ops/s
Iteration  29: 2485057.319 ops/s
Iteration  30: 2524834.727 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTimedTest._Benchmark.benchmark_disposed":
  2486786.987 ±(99.9%) 48411.625 ops/s [Average]
  (min, avg, max) = (2378379.221, 2486786.987, 2615289.929), stdev = 72460.246
  CI (99.9%): [2438375.362, 2535198.612] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableTakeLastTimedTest._Benchmark.benchmark_disposed  thrpt   30  2486786.987 ± 48411.625  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.779 ops/s
# Warmup Iteration   2: 18296.927 ops/s
# Warmup Iteration   3: 43204.531 ops/s
# Warmup Iteration   4: 45892.116 ops/s
# Warmup Iteration   5: 44940.416 ops/s
# Warmup Iteration   6: 98313.528 ops/s
# Warmup Iteration   7: 149600.146 ops/s
# Warmup Iteration   8: 139442.192 ops/s
# Warmup Iteration   9: 143524.167 ops/s
# Warmup Iteration  10: 145238.462 ops/s
# Warmup Iteration  11: 142175.682 ops/s
# Warmup Iteration  12: 153098.213 ops/s
# Warmup Iteration  13: 144666.683 ops/s
# Warmup Iteration  14: 130082.477 ops/s
# Warmup Iteration  15: 143810.261 ops/s
# Warmup Iteration  16: 143682.380 ops/s
# Warmup Iteration  17: 150092.343 ops/s
# Warmup Iteration  18: 145882.204 ops/s
# Warmup Iteration  19: 146545.013 ops/s
# Warmup Iteration  20: 145951.181 ops/s
# Warmup Iteration  21: 150815.766 ops/s
# Warmup Iteration  22: 148576.243 ops/s
# Warmup Iteration  23: 145546.290 ops/s
# Warmup Iteration  24: 145835.292 ops/s
# Warmup Iteration  25: 151298.705 ops/s
# Warmup Iteration  26: 142384.966 ops/s
# Warmup Iteration  27: 147672.837 ops/s
# Warmup Iteration  28: 151321.868 ops/s
# Warmup Iteration  29: 146056.612 ops/s
# Warmup Iteration  30: 150343.904 ops/s
Iteration   1: 151963.330 ops/s
Iteration   2: 151373.154 ops/s
Iteration   3: 137963.508 ops/s
Iteration   4: 152493.579 ops/s
Iteration   5: 154123.085 ops/s
Iteration   6: 149254.673 ops/s
Iteration   7: 142947.016 ops/s
Iteration   8: 153005.727 ops/s
Iteration   9: 149075.886 ops/s
Iteration  10: 149215.204 ops/s
Iteration  11: 138536.173 ops/s
Iteration  12: 147843.847 ops/s
Iteration  13: 152969.470 ops/s
Iteration  14: 139486.044 ops/s
Iteration  15: 149445.404 ops/s
Iteration  16: 152328.534 ops/s
Iteration  17: 145670.668 ops/s
Iteration  18: 148357.917 ops/s
Iteration  19: 155907.922 ops/s
Iteration  20: 144698.781 ops/s
Iteration  21: 151155.217 ops/s
Iteration  22: 150623.024 ops/s
Iteration  23: 146996.499 ops/s
Iteration  24: 152823.508 ops/s
Iteration  25: 146214.899 ops/s
Iteration  26: 155471.196 ops/s
Iteration  27: 141380.061 ops/s
Iteration  28: 151026.430 ops/s
Iteration  29: 152842.773 ops/s
Iteration  30: 142638.941 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDelayTest._Benchmark.benchmark_doubleOnSubscribe":
  148594.416 ±(99.9%) 3332.664 ops/s [Average]
  (min, avg, max) = (137963.508, 148594.416, 155907.922), stdev = 4988.175
  CI (99.9%): [145261.752, 151927.080] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
ObservableDelayTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  148594.416 ± 3332.664  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replayTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replayTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71169.902 ops/s
# Warmup Iteration   2: 204726.709 ops/s
# Warmup Iteration   3: 238086.119 ops/s
# Warmup Iteration   4: 228549.853 ops/s
# Warmup Iteration   5: 238516.707 ops/s
# Warmup Iteration   6: 250188.931 ops/s
# Warmup Iteration   7: 232571.988 ops/s
# Warmup Iteration   8: 248862.386 ops/s
# Warmup Iteration   9: 236265.469 ops/s
# Warmup Iteration  10: 235619.213 ops/s
# Warmup Iteration  11: 249146.717 ops/s
# Warmup Iteration  12: 231451.804 ops/s
# Warmup Iteration  13: 239648.069 ops/s
# Warmup Iteration  14: 240708.357 ops/s
# Warmup Iteration  15: 238660.210 ops/s
# Warmup Iteration  16: 243405.485 ops/s
# Warmup Iteration  17: 229378.432 ops/s
# Warmup Iteration  18: 245539.983 ops/s
# Warmup Iteration  19: 232982.140 ops/s
# Warmup Iteration  20: 245640.610 ops/s
# Warmup Iteration  21: 250745.520 ops/s
# Warmup Iteration  22: 231342.672 ops/s
# Warmup Iteration  23: 240531.738 ops/s
# Warmup Iteration  24: 238641.422 ops/s
# Warmup Iteration  25: 227917.104 ops/s
# Warmup Iteration  26: 246774.800 ops/s
# Warmup Iteration  27: 238570.665 ops/s
# Warmup Iteration  28: 237783.430 ops/s
# Warmup Iteration  29: 242111.174 ops/s
# Warmup Iteration  30: 237113.868 ops/s
Iteration   1: 245898.806 ops/s
Iteration   2: 235359.919 ops/s
Iteration   3: 239914.053 ops/s
Iteration   4: 245296.795 ops/s
Iteration   5: 231142.095 ops/s
Iteration   6: 241264.064 ops/s
Iteration   7: 242280.387 ops/s
Iteration   8: 238159.995 ops/s
Iteration   9: 241695.342 ops/s
Iteration  10: 244066.340 ops/s
Iteration  11: 233309.494 ops/s
Iteration  12: 240903.244 ops/s
Iteration  13: 238470.406 ops/s
Iteration  14: 238488.481 ops/s
Iteration  15: 241870.987 ops/s
Iteration  16: 233428.477 ops/s
Iteration  17: 246251.438 ops/s
Iteration  18: 238607.897 ops/s
Iteration  19: 240663.116 ops/s
Iteration  20: 245625.588 ops/s
Iteration  21: 232314.369 ops/s
Iteration  22: 246334.362 ops/s
Iteration  23: 230989.454 ops/s
Iteration  24: 245670.165 ops/s
Iteration  25: 242490.994 ops/s
Iteration  26: 237785.764 ops/s
Iteration  27: 245157.430 ops/s
Iteration  28: 238497.328 ops/s
Iteration  29: 231978.379 ops/s
Iteration  30: 243487.681 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_replayTime":
  239913.428 ±(99.9%) 3261.820 ops/s [Average]
  (min, avg, max) = (230989.454, 239913.428, 246334.362), stdev = 4882.140
  CI (99.9%): [236651.608, 243175.249] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ObservableReplayTest._Benchmark.benchmark_replayTime  thrpt   30  239913.428 ± 3261.820  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23645307.074 ops/s
# Warmup Iteration   2: 36752068.052 ops/s
# Warmup Iteration   3: 39833414.933 ops/s
# Warmup Iteration   4: 39908304.981 ops/s
# Warmup Iteration   5: 41911598.965 ops/s
# Warmup Iteration   6: 38790674.496 ops/s
# Warmup Iteration   7: 41492542.052 ops/s
# Warmup Iteration   8: 39110267.766 ops/s
# Warmup Iteration   9: 31290491.770 ops/s
# Warmup Iteration  10: 41225665.195 ops/s
# Warmup Iteration  11: 39088103.460 ops/s
# Warmup Iteration  12: 40471349.658 ops/s
# Warmup Iteration  13: 41469609.610 ops/s
# Warmup Iteration  14: 39943875.450 ops/s
# Warmup Iteration  15: 41962663.800 ops/s
# Warmup Iteration  16: 39152123.494 ops/s
# Warmup Iteration  17: 41473186.725 ops/s
# Warmup Iteration  18: 41597951.099 ops/s
# Warmup Iteration  19: 42105433.540 ops/s
# Warmup Iteration  20: 41046142.821 ops/s
# Warmup Iteration  21: 42507029.953 ops/s
# Warmup Iteration  22: 40449751.605 ops/s
# Warmup Iteration  23: 40974129.520 ops/s
# Warmup Iteration  24: 40337764.032 ops/s
# Warmup Iteration  25: 40589524.036 ops/s
# Warmup Iteration  26: 43268881.435 ops/s
# Warmup Iteration  27: 39674301.056 ops/s
# Warmup Iteration  28: 42321985.057 ops/s
# Warmup Iteration  29: 40441671.422 ops/s
# Warmup Iteration  30: 42359545.992 ops/s
Iteration   1: 42522593.676 ops/s
Iteration   2: 40526418.670 ops/s
Iteration   3: 42086183.920 ops/s
Iteration   4: 40905660.112 ops/s
Iteration   5: 41751394.304 ops/s
Iteration   6: 43240897.268 ops/s
Iteration   7: 41021728.829 ops/s
Iteration   8: 42461356.122 ops/s
Iteration   9: 40763781.772 ops/s
Iteration  10: 40720635.549 ops/s
Iteration  11: 41683970.692 ops/s
Iteration  12: 42069849.881 ops/s
Iteration  13: 40283577.112 ops/s
Iteration  14: 41426263.789 ops/s
Iteration  15: 41565810.765 ops/s
Iteration  16: 41036804.500 ops/s
Iteration  17: 40531871.445 ops/s
Iteration  18: 43206596.224 ops/s
Iteration  19: 40192509.071 ops/s
Iteration  20: 42870997.192 ops/s
Iteration  21: 40763602.824 ops/s
Iteration  22: 42159777.662 ops/s
Iteration  23: 41783659.871 ops/s
Iteration  24: 41941250.582 ops/s
Iteration  25: 41207304.149 ops/s
Iteration  26: 40719771.038 ops/s
Iteration  27: 41749631.269 ops/s
Iteration  28: 39989384.274 ops/s
Iteration  29: 41114470.776 ops/s
Iteration  30: 41451883.508 ops/s


Result "io.reactivex.rxjava3.internal.schedulers.ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirect":
  41458321.228 ±(99.9%) 581633.915 ops/s [Average]
  (min, avg, max) = (39989384.274, 41458321.228, 43240897.268), stdev = 870562.328
  CI (99.9%): [40876687.314, 42039955.143] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt         Score        Error  Units
ImmediateThinSchedulerTest._Benchmark.benchmark_scheduleDirect  thrpt   30  41458321.228 ± 581633.915  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCanceled$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCanceled

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3071322.106 ops/s
# Warmup Iteration   2: 4570614.075 ops/s
# Warmup Iteration   3: 6529884.278 ops/s
# Warmup Iteration   4: 6504819.259 ops/s
# Warmup Iteration   5: 6246070.754 ops/s
# Warmup Iteration   6: 6455404.177 ops/s
# Warmup Iteration   7: 6209462.910 ops/s
# Warmup Iteration   8: 6476917.932 ops/s
# Warmup Iteration   9: 6295226.018 ops/s
# Warmup Iteration  10: 6446243.189 ops/s
# Warmup Iteration  11: 6237722.894 ops/s
# Warmup Iteration  12: 6363122.394 ops/s
# Warmup Iteration  13: 6627402.693 ops/s
# Warmup Iteration  14: 6140227.172 ops/s
# Warmup Iteration  15: 6483591.322 ops/s
# Warmup Iteration  16: 6480016.845 ops/s
# Warmup Iteration  17: 6418248.460 ops/s
# Warmup Iteration  18: 6349177.224 ops/s
# Warmup Iteration  19: 6559533.567 ops/s
# Warmup Iteration  20: 6618069.745 ops/s
# Warmup Iteration  21: 6174773.863 ops/s
# Warmup Iteration  22: 6508424.354 ops/s
# Warmup Iteration  23: 6369493.993 ops/s
# Warmup Iteration  24: 6394563.702 ops/s
# Warmup Iteration  25: 6561748.876 ops/s
# Warmup Iteration  26: 6292419.528 ops/s
# Warmup Iteration  27: 6261523.032 ops/s
# Warmup Iteration  28: 6648866.686 ops/s
# Warmup Iteration  29: 6275903.313 ops/s
# Warmup Iteration  30: 6646579.021 ops/s
Iteration   1: 6232781.642 ops/s
Iteration   2: 6235786.989 ops/s
Iteration   3: 6185061.941 ops/s
Iteration   4: 6386036.077 ops/s
Iteration   5: 6464007.540 ops/s
Iteration   6: 6114606.890 ops/s
Iteration   7: 6474477.228 ops/s
Iteration   8: 6245652.155 ops/s
Iteration   9: 6191902.702 ops/s
Iteration  10: 6655155.218 ops/s
Iteration  11: 6211293.484 ops/s
Iteration  12: 6274439.863 ops/s
Iteration  13: 6481882.995 ops/s
Iteration  14: 6368097.852 ops/s
Iteration  15: 6441783.145 ops/s
Iteration  16: 6262530.477 ops/s
Iteration  17: 6248696.784 ops/s
Iteration  18: 6536312.952 ops/s
Iteration  19: 6376465.559 ops/s
Iteration  20: 6279390.000 ops/s
Iteration  21: 6671500.698 ops/s
Iteration  22: 6317840.848 ops/s
Iteration  23: 6518985.392 ops/s
Iteration  24: 6375483.184 ops/s
Iteration  25: 6188744.728 ops/s
Iteration  26: 6488134.735 ops/s
Iteration  27: 6231970.592 ops/s
Iteration  28: 6431874.407 ops/s
Iteration  29: 6481679.838 ops/s
Iteration  30: 6459946.726 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCanceled":
  6361084.088 ±(99.9%) 96313.633 ops/s [Average]
  (min, avg, max) = (6114606.890, 6361084.088, 6671500.698), stdev = 144157.723
  CI (99.9%): [6264770.455, 6457397.721] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
CompletableAndThenCompletableTest._Benchmark.benchmark_andThenCanceled  thrpt   30  6361084.088 ± 96313.633  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 338891.198 ops/s
# Warmup Iteration   2: 567780.119 ops/s
# Warmup Iteration   3: 665312.189 ops/s
# Warmup Iteration   4: 550292.191 ops/s
# Warmup Iteration   5: 694330.895 ops/s
# Warmup Iteration   6: 653789.310 ops/s
# Warmup Iteration   7: 644639.042 ops/s
# Warmup Iteration   8: 670361.763 ops/s
# Warmup Iteration   9: 655872.150 ops/s
# Warmup Iteration  10: 681266.485 ops/s
# Warmup Iteration  11: 660697.289 ops/s
# Warmup Iteration  12: 634502.995 ops/s
# Warmup Iteration  13: 680480.282 ops/s
# Warmup Iteration  14: 657332.818 ops/s
# Warmup Iteration  15: 667575.100 ops/s
# Warmup Iteration  16: 660572.084 ops/s
# Warmup Iteration  17: 662927.890 ops/s
# Warmup Iteration  18: 732221.653 ops/s
# Warmup Iteration  19: 692165.723 ops/s
# Warmup Iteration  20: 723632.889 ops/s
# Warmup Iteration  21: 698993.059 ops/s
# Warmup Iteration  22: 719839.276 ops/s
# Warmup Iteration  23: 685396.914 ops/s
# Warmup Iteration  24: 704307.024 ops/s
# Warmup Iteration  25: 699333.871 ops/s
# Warmup Iteration  26: 727350.552 ops/s
# Warmup Iteration  27: 685653.884 ops/s
# Warmup Iteration  28: 715672.018 ops/s
# Warmup Iteration  29: 724903.511 ops/s
# Warmup Iteration  30: 679448.840 ops/s
Iteration   1: 731868.237 ops/s
Iteration   2: 682513.122 ops/s
Iteration   3: 719685.912 ops/s
Iteration   4: 716613.248 ops/s
Iteration   5: 689858.919 ops/s
Iteration   6: 743614.614 ops/s
Iteration   7: 723128.554 ops/s
Iteration   8: 698577.946 ops/s
Iteration   9: 726208.506 ops/s
Iteration  10: 693506.705 ops/s
Iteration  11: 715614.698 ops/s
Iteration  12: 688769.124 ops/s
Iteration  13: 729206.783 ops/s
Iteration  14: 712004.472 ops/s
Iteration  15: 675507.643 ops/s
Iteration  16: 720940.898 ops/s
Iteration  17: 688778.712 ops/s
Iteration  18: 722397.491 ops/s
Iteration  19: 669105.507 ops/s
Iteration  20: 708250.731 ops/s
Iteration  21: 736664.819 ops/s
Iteration  22: 690187.340 ops/s
Iteration  23: 714996.013 ops/s
Iteration  24: 680364.396 ops/s
Iteration  25: 726295.132 ops/s
Iteration  26: 699550.597 ops/s
Iteration  27: 721992.480 ops/s
Iteration  28: 694168.013 ops/s
Iteration  29: 706571.846 ops/s
Iteration  30: 712533.079 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierThrows":
  707982.518 ±(99.9%) 12929.376 ops/s [Average]
  (min, avg, max) = (669105.507, 707982.518, 743614.614), stdev = 19352.082
  CI (99.9%): [695053.142, 720911.893] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
CompletableFromSupplierTest._Benchmark.benchmark_fromSupplierThrows  thrpt   30  707982.518 ± 12929.376  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_afterDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_afterDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6785388.872 ops/s
# Warmup Iteration   2: 9902471.606 ops/s
# Warmup Iteration   3: 11440453.278 ops/s
# Warmup Iteration   4: 12266816.102 ops/s
# Warmup Iteration   5: 13185062.311 ops/s
# Warmup Iteration   6: 13238014.961 ops/s
# Warmup Iteration   7: 13241323.090 ops/s
# Warmup Iteration   8: 12763625.715 ops/s
# Warmup Iteration   9: 12878484.913 ops/s
# Warmup Iteration  10: 12686069.948 ops/s
# Warmup Iteration  11: 12901803.483 ops/s
# Warmup Iteration  12: 13276617.375 ops/s
# Warmup Iteration  13: 12567030.781 ops/s
# Warmup Iteration  14: 12855654.721 ops/s
# Warmup Iteration  15: 13303776.390 ops/s
# Warmup Iteration  16: 12742993.024 ops/s
# Warmup Iteration  17: 13128305.597 ops/s
# Warmup Iteration  18: 12906052.525 ops/s
# Warmup Iteration  19: 12983876.301 ops/s
# Warmup Iteration  20: 13194067.638 ops/s
# Warmup Iteration  21: 12707296.354 ops/s
# Warmup Iteration  22: 13362730.259 ops/s
# Warmup Iteration  23: 12715524.316 ops/s
# Warmup Iteration  24: 13113869.387 ops/s
# Warmup Iteration  25: 13021578.368 ops/s
# Warmup Iteration  26: 12405883.735 ops/s
# Warmup Iteration  27: 13044854.386 ops/s
# Warmup Iteration  28: 12474239.221 ops/s
# Warmup Iteration  29: 12838163.680 ops/s
# Warmup Iteration  30: 13243957.479 ops/s
Iteration   1: 12374228.324 ops/s
Iteration   2: 12818892.030 ops/s
Iteration   3: 13474552.349 ops/s
Iteration   4: 12565940.612 ops/s
Iteration   5: 13480795.360 ops/s
Iteration   6: 13300389.738 ops/s
Iteration   7: 12614560.637 ops/s
Iteration   8: 13082498.511 ops/s
Iteration   9: 12808479.079 ops/s
Iteration  10: 13140876.251 ops/s
Iteration  11: 13552306.468 ops/s
Iteration  12: 12315717.847 ops/s
Iteration  13: 12992243.821 ops/s
Iteration  14: 12628794.694 ops/s
Iteration  15: 12659913.956 ops/s
Iteration  16: 13582408.674 ops/s
Iteration  17: 12759607.202 ops/s
Iteration  18: 12582308.605 ops/s
Iteration  19: 13161219.570 ops/s
Iteration  20: 12746454.873 ops/s
Iteration  21: 12922991.021 ops/s
Iteration  22: 13120548.435 ops/s
Iteration  23: 13161814.891 ops/s
Iteration  24: 12830569.615 ops/s
Iteration  25: 13080087.815 ops/s
Iteration  26: 13136158.393 ops/s
Iteration  27: 12735222.227 ops/s
Iteration  28: 13286614.998 ops/s
Iteration  29: 12435811.329 ops/s
Iteration  30: 12496358.152 ops/s


Result "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_afterDispose":
  12928278.849 ±(99.9%) 239611.075 ops/s [Average]
  (min, avg, max) = (12315717.847, 12928278.849, 13582408.674), stdev = 358638.604
  CI (99.9%): [12688667.774, 13167889.924] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
ListCompositeDisposableTest._Benchmark.benchmark_afterDispose  thrpt   30  12928278.849 ± 239611.075  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 317169.549 ops/s
# Warmup Iteration   2: 536922.558 ops/s
# Warmup Iteration   3: 657734.358 ops/s
# Warmup Iteration   4: 618465.665 ops/s
# Warmup Iteration   5: 646835.654 ops/s
# Warmup Iteration   6: 618121.738 ops/s
# Warmup Iteration   7: 645671.711 ops/s
# Warmup Iteration   8: 652596.245 ops/s
# Warmup Iteration   9: 594089.954 ops/s
# Warmup Iteration  10: 640274.564 ops/s
# Warmup Iteration  11: 630314.951 ops/s
# Warmup Iteration  12: 636835.161 ops/s
# Warmup Iteration  13: 642640.260 ops/s
# Warmup Iteration  14: 625672.429 ops/s
# Warmup Iteration  15: 654915.459 ops/s
# Warmup Iteration  16: 604959.088 ops/s
# Warmup Iteration  17: 671894.609 ops/s
# Warmup Iteration  18: 672676.669 ops/s
# Warmup Iteration  19: 660929.118 ops/s
# Warmup Iteration  20: 686915.507 ops/s
# Warmup Iteration  21: 664352.366 ops/s
# Warmup Iteration  22: 683100.283 ops/s
# Warmup Iteration  23: 661346.128 ops/s
# Warmup Iteration  24: 647812.752 ops/s
# Warmup Iteration  25: 682139.943 ops/s
# Warmup Iteration  26: 661727.864 ops/s
# Warmup Iteration  27: 689240.681 ops/s
# Warmup Iteration  28: 657920.862 ops/s
# Warmup Iteration  29: 637876.990 ops/s
# Warmup Iteration  30: 696454.960 ops/s
Iteration   1: 640265.869 ops/s
Iteration   2: 695698.792 ops/s
Iteration   3: 665725.781 ops/s
Iteration   4: 671518.089 ops/s
Iteration   5: 673692.413 ops/s
Iteration   6: 669491.418 ops/s
Iteration   7: 682822.158 ops/s
Iteration   8: 646109.674 ops/s
Iteration   9: 676021.276 ops/s
Iteration  10: 687464.326 ops/s
Iteration  11: 673312.399 ops/s
Iteration  12: 693392.614 ops/s
Iteration  13: 633566.591 ops/s
Iteration  14: 672526.466 ops/s
Iteration  15: 677700.486 ops/s
Iteration  16: 687111.933 ops/s
Iteration  17: 667685.978 ops/s
Iteration  18: 675886.686 ops/s
Iteration  19: 676936.639 ops/s
Iteration  20: 693783.411 ops/s
Iteration  21: 653267.518 ops/s
Iteration  22: 676944.670 ops/s
Iteration  23: 691305.786 ops/s
Iteration  24: 652816.022 ops/s
Iteration  25: 674372.942 ops/s
Iteration  26: 671138.758 ops/s
Iteration  27: 665761.575 ops/s
Iteration  28: 663066.001 ops/s
Iteration  29: 668692.359 ops/s
Iteration  30: 669895.765 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows":
  671599.147 ±(99.9%) 10111.279 ops/s [Average]
  (min, avg, max) = (633566.591, 671599.147, 695698.792), stdev = 15134.087
  CI (99.9%): [661487.868, 681710.425] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
CompletableFromRunnableTest._Benchmark.benchmark_fromRunnableThrows  thrpt   30  671599.147 ± 10111.279  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19869367.369 ops/s
# Warmup Iteration   2: 34853450.353 ops/s
# Warmup Iteration   3: 40645932.917 ops/s
# Warmup Iteration   4: 39429996.288 ops/s
# Warmup Iteration   5: 41900247.807 ops/s
# Warmup Iteration   6: 41257408.691 ops/s
# Warmup Iteration   7: 39689181.414 ops/s
# Warmup Iteration   8: 41207133.713 ops/s
# Warmup Iteration   9: 40380571.607 ops/s
# Warmup Iteration  10: 40462750.639 ops/s
# Warmup Iteration  11: 41484780.477 ops/s
# Warmup Iteration  12: 40292202.014 ops/s
# Warmup Iteration  13: 41740780.695 ops/s
# Warmup Iteration  14: 42186846.074 ops/s
# Warmup Iteration  15: 39652725.996 ops/s
# Warmup Iteration  16: 40489984.530 ops/s
# Warmup Iteration  17: 41022263.212 ops/s
# Warmup Iteration  18: 39952137.679 ops/s
# Warmup Iteration  19: 42054486.215 ops/s
# Warmup Iteration  20: 39868068.359 ops/s
# Warmup Iteration  21: 41863500.554 ops/s
# Warmup Iteration  22: 41236065.510 ops/s
# Warmup Iteration  23: 39398194.939 ops/s
# Warmup Iteration  24: 39899168.672 ops/s
# Warmup Iteration  25: 40876765.412 ops/s
# Warmup Iteration  26: 40313706.180 ops/s
# Warmup Iteration  27: 41616246.277 ops/s
# Warmup Iteration  28: 40587655.439 ops/s
# Warmup Iteration  29: 39820382.136 ops/s
# Warmup Iteration  30: 41937425.242 ops/s
Iteration   1: 39416361.363 ops/s
Iteration   2: 40351108.087 ops/s
Iteration   3: 42391962.141 ops/s
Iteration   4: 38960673.999 ops/s
Iteration   5: 41500429.993 ops/s
Iteration   6: 42512642.968 ops/s
Iteration   7: 39553797.443 ops/s
Iteration   8: 41528307.238 ops/s
Iteration   9: 40201146.098 ops/s
Iteration  10: 41652282.779 ops/s
Iteration  11: 40338332.166 ops/s
Iteration  12: 40415416.743 ops/s
Iteration  13: 40845891.730 ops/s
Iteration  14: 41332141.476 ops/s
Iteration  15: 39266843.467 ops/s
Iteration  16: 40116449.247 ops/s
Iteration  17: 42300829.984 ops/s
Iteration  18: 40192650.954 ops/s
Iteration  19: 41423262.041 ops/s
Iteration  20: 39974488.523 ops/s
Iteration  21: 41555568.102 ops/s
Iteration  22: 40366098.657 ops/s
Iteration  23: 41134961.816 ops/s
Iteration  24: 40130072.445 ops/s
Iteration  25: 32857635.605 ops/s
Iteration  26: 38444863.838 ops/s
Iteration  27: 41896469.941 ops/s
Iteration  28: 39889665.301 ops/s
Iteration  29: 41912531.529 ops/s
Iteration  30: 41649587.857 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorEmpty":
  40470415.784 ±(99.9%) 1192970.036 ops/s [Average]
  (min, avg, max) = (32857635.605, 40470415.784, 42512642.968), stdev = 1785581.523
  CI (99.9%): [39277445.749, 41663385.820] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt         Score         Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorEmpty  thrpt   30  40470415.784 ± 1192970.036  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.NotificationLiteTest._Benchmark.benchmark_acceptFullObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.NotificationLiteTest._Benchmark.benchmark_acceptFullObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4564078.042 ops/s
# Warmup Iteration   2: 6249335.681 ops/s
# Warmup Iteration   3: 9368932.065 ops/s
# Warmup Iteration   4: 8972598.836 ops/s
# Warmup Iteration   5: 8973731.078 ops/s
# Warmup Iteration   6: 9141349.640 ops/s
# Warmup Iteration   7: 8863554.952 ops/s
# Warmup Iteration   8: 9026127.531 ops/s
# Warmup Iteration   9: 9482798.346 ops/s
# Warmup Iteration  10: 8853933.177 ops/s
# Warmup Iteration  11: 9142465.530 ops/s
# Warmup Iteration  12: 8685229.536 ops/s
# Warmup Iteration  13: 8949240.466 ops/s
# Warmup Iteration  14: 9195090.500 ops/s
# Warmup Iteration  15: 8827881.275 ops/s
# Warmup Iteration  16: 9281949.875 ops/s
# Warmup Iteration  17: 8985452.251 ops/s
# Warmup Iteration  18: 8690502.709 ops/s
# Warmup Iteration  19: 9350097.136 ops/s
# Warmup Iteration  20: 8908843.598 ops/s
# Warmup Iteration  21: 8798927.167 ops/s
# Warmup Iteration  22: 9286115.050 ops/s
# Warmup Iteration  23: 8814883.033 ops/s
# Warmup Iteration  24: 8805278.208 ops/s
# Warmup Iteration  25: 9300123.442 ops/s
# Warmup Iteration  26: 8612753.707 ops/s
# Warmup Iteration  27: 9408832.221 ops/s
# Warmup Iteration  28: 8943600.803 ops/s
# Warmup Iteration  29: 8993722.079 ops/s
# Warmup Iteration  30: 9280131.881 ops/s
Iteration   1: 8756178.496 ops/s
Iteration   2: 8928411.095 ops/s
Iteration   3: 9374450.857 ops/s
Iteration   4: 9070869.585 ops/s
Iteration   5: 8942640.411 ops/s
Iteration   6: 9297097.834 ops/s
Iteration   7: 8701178.852 ops/s
Iteration   8: 9130821.261 ops/s
Iteration   9: 9009030.934 ops/s
Iteration  10: 8847779.552 ops/s
Iteration  11: 9375116.311 ops/s
Iteration  12: 8734526.988 ops/s
Iteration  13: 9421285.454 ops/s
Iteration  14: 9328774.823 ops/s
Iteration  15: 9111576.650 ops/s
Iteration  16: 9487798.484 ops/s
Iteration  17: 8931093.313 ops/s
Iteration  18: 9118861.245 ops/s
Iteration  19: 9211896.672 ops/s
Iteration  20: 8816932.514 ops/s
Iteration  21: 9196809.226 ops/s
Iteration  22: 8944224.230 ops/s
Iteration  23: 9267587.329 ops/s
Iteration  24: 8728966.453 ops/s
Iteration  25: 9156676.481 ops/s
Iteration  26: 9177074.243 ops/s
Iteration  27: 8656356.655 ops/s
Iteration  28: 9291922.177 ops/s
Iteration  29: 8788489.656 ops/s
Iteration  30: 9253790.624 ops/s


Result "io.reactivex.rxjava3.internal.util.NotificationLiteTest._Benchmark.benchmark_acceptFullObserver":
  9068607.280 ±(99.9%) 161262.839 ops/s [Average]
  (min, avg, max) = (8656356.655, 9068607.280, 9487798.484), stdev = 241370.643
  CI (99.9%): [8907344.442, 9229870.119] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
NotificationLiteTest._Benchmark.benchmark_acceptFullObserver  thrpt   30  9068607.280 ± 161262.839  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_booleanSupplierPredicateReverse$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_booleanSupplierPredicateReverse

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22252869.726 ops/s
# Warmup Iteration   2: 29000910.971 ops/s
# Warmup Iteration   3: 36771001.573 ops/s
# Warmup Iteration   4: 35964046.859 ops/s
# Warmup Iteration   5: 37685579.220 ops/s
# Warmup Iteration   6: 36748647.002 ops/s
# Warmup Iteration   7: 35403652.690 ops/s
# Warmup Iteration   8: 38180580.611 ops/s
# Warmup Iteration   9: 36868403.500 ops/s
# Warmup Iteration  10: 36620378.477 ops/s
# Warmup Iteration  11: 35881031.454 ops/s
# Warmup Iteration  12: 37686559.843 ops/s
# Warmup Iteration  13: 35674523.312 ops/s
# Warmup Iteration  14: 36990316.199 ops/s
# Warmup Iteration  15: 36362353.748 ops/s
# Warmup Iteration  16: 36541195.349 ops/s
# Warmup Iteration  17: 37351701.896 ops/s
# Warmup Iteration  18: 35451477.074 ops/s
# Warmup Iteration  19: 37112109.801 ops/s
# Warmup Iteration  20: 37510857.983 ops/s
# Warmup Iteration  21: 34967554.076 ops/s
# Warmup Iteration  22: 36500686.140 ops/s
# Warmup Iteration  23: 35977025.900 ops/s
# Warmup Iteration  24: 36273813.916 ops/s
# Warmup Iteration  25: 36856559.342 ops/s
# Warmup Iteration  26: 35142310.955 ops/s
# Warmup Iteration  27: 37516349.450 ops/s
# Warmup Iteration  28: 35557214.821 ops/s
# Warmup Iteration  29: 36724848.413 ops/s
# Warmup Iteration  30: 37799436.293 ops/s
Iteration   1: 35494942.970 ops/s
Iteration   2: 37492949.918 ops/s
Iteration   3: 36143787.124 ops/s
Iteration   4: 36188720.361 ops/s
Iteration   5: 37569083.685 ops/s
Iteration   6: 35861620.085 ops/s
Iteration   7: 36645902.138 ops/s
Iteration   8: 36759708.386 ops/s
Iteration   9: 35567230.467 ops/s
Iteration  10: 36794039.573 ops/s
Iteration  11: 37522709.601 ops/s
Iteration  12: 36095912.111 ops/s
Iteration  13: 35934015.428 ops/s
Iteration  14: 37037695.903 ops/s
Iteration  15: 35672122.582 ops/s
Iteration  16: 37421271.843 ops/s
Iteration  17: 36046011.244 ops/s
Iteration  18: 36267194.813 ops/s
Iteration  19: 37592965.032 ops/s
Iteration  20: 29738343.186 ops/s
Iteration  21: 38539340.744 ops/s
Iteration  22: 37921285.418 ops/s
Iteration  23: 36082908.533 ops/s
Iteration  24: 35712115.437 ops/s
Iteration  25: 37844826.526 ops/s
Iteration  26: 35959961.546 ops/s
Iteration  27: 38117105.326 ops/s
Iteration  28: 36413714.214 ops/s
Iteration  29: 35252315.973 ops/s
Iteration  30: 37343667.695 ops/s


Result "io.reactivex.rxjava3.internal.functions.FunctionsTest._Benchmark.benchmark_booleanSupplierPredicateReverse":
  36434448.929 ±(99.9%) 1031902.559 ops/s [Average]
  (min, avg, max) = (29738343.186, 36434448.929, 38539340.744), stdev = 1544503.289
  CI (99.9%): [35402546.370, 37466351.488] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt         Score         Error  Units
FunctionsTest._Benchmark.benchmark_booleanSupplierPredicateReverse  thrpt   30  36434448.929 ± 1031902.559  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposableTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposableTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1132475.664 ops/s
# Warmup Iteration   2: 2720079.215 ops/s
# Warmup Iteration   3: 3332605.333 ops/s
# Warmup Iteration   4: 3388732.081 ops/s
# Warmup Iteration   5: 3044988.968 ops/s
# Warmup Iteration   6: 3674464.233 ops/s
# Warmup Iteration   7: 3445539.765 ops/s
# Warmup Iteration   8: 3609863.806 ops/s
# Warmup Iteration   9: 3481538.060 ops/s
# Warmup Iteration  10: 3612106.627 ops/s
# Warmup Iteration  11: 3649910.824 ops/s
# Warmup Iteration  12: 3348039.704 ops/s
# Warmup Iteration  13: 3653958.786 ops/s
# Warmup Iteration  14: 3603956.529 ops/s
# Warmup Iteration  15: 3463548.081 ops/s
# Warmup Iteration  16: 3612668.645 ops/s
# Warmup Iteration  17: 3471282.588 ops/s
# Warmup Iteration  18: 3363459.437 ops/s
# Warmup Iteration  19: 3685341.955 ops/s
# Warmup Iteration  20: 3575598.492 ops/s
# Warmup Iteration  21: 3445683.697 ops/s
# Warmup Iteration  22: 3551116.943 ops/s
# Warmup Iteration  23: 3501006.356 ops/s
# Warmup Iteration  24: 3421636.424 ops/s
# Warmup Iteration  25: 3617637.324 ops/s
# Warmup Iteration  26: 3422763.475 ops/s
# Warmup Iteration  27: 3681184.762 ops/s
# Warmup Iteration  28: 3580483.087 ops/s
# Warmup Iteration  29: 3417103.117 ops/s
# Warmup Iteration  30: 3664816.184 ops/s
Iteration   1: 3404880.524 ops/s
Iteration   2: 3483463.093 ops/s
Iteration   3: 3536169.603 ops/s
Iteration   4: 3616608.701 ops/s
Iteration   5: 3452042.048 ops/s
Iteration   6: 3487490.057 ops/s
Iteration   7: 3633748.015 ops/s
Iteration   8: 3363526.028 ops/s
Iteration   9: 3607384.751 ops/s
Iteration  10: 3519490.654 ops/s
Iteration  11: 3492113.861 ops/s
Iteration  12: 3504589.583 ops/s
Iteration  13: 3479882.279 ops/s
Iteration  14: 3408474.075 ops/s
Iteration  15: 3248976.950 ops/s
Iteration  16: 3563380.285 ops/s
Iteration  17: 3583157.139 ops/s
Iteration  18: 3484845.235 ops/s
Iteration  19: 3589600.618 ops/s
Iteration  20: 3520134.220 ops/s
Iteration  21: 3441844.271 ops/s
Iteration  22: 3509462.807 ops/s
Iteration  23: 3627043.261 ops/s
Iteration  24: 3482325.343 ops/s
Iteration  25: 3597831.812 ops/s
Iteration  26: 3463924.468 ops/s
Iteration  27: 3557807.504 ops/s
Iteration  28: 3493424.077 ops/s
Iteration  29: 3443821.468 ops/s
Iteration  30: 3594778.698 ops/s


Result "io.reactivex.rxjava3.internal.disposables.ArrayCompositeDisposableTest._Benchmark.benchmark_normal":
  3506407.381 ±(99.9%) 57079.604 ops/s [Average]
  (min, avg, max) = (3248976.950, 3506407.381, 3633748.015), stdev = 85434.070
  CI (99.9%): [3449327.777, 3563486.985] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
ArrayCompositeDisposableTest._Benchmark.benchmark_normal  thrpt   30  3506407.381 ± 57079.604  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_arrayFirstCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_arrayFirstCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 936253.459 ops/s
# Warmup Iteration   2: 3554645.989 ops/s
# Warmup Iteration   3: 4552031.030 ops/s
# Warmup Iteration   4: 5100732.486 ops/s
# Warmup Iteration   5: 5320533.255 ops/s
# Warmup Iteration   6: 4932632.752 ops/s
# Warmup Iteration   7: 5035438.590 ops/s
# Warmup Iteration   8: 5151850.317 ops/s
# Warmup Iteration   9: 5110649.791 ops/s
# Warmup Iteration  10: 4972842.457 ops/s
# Warmup Iteration  11: 5154818.345 ops/s
# Warmup Iteration  12: 5086245.343 ops/s
# Warmup Iteration  13: 5229375.553 ops/s
# Warmup Iteration  14: 5023903.221 ops/s
# Warmup Iteration  15: 5241345.229 ops/s
# Warmup Iteration  16: 5188762.433 ops/s
# Warmup Iteration  17: 5133753.471 ops/s
# Warmup Iteration  18: 5168444.174 ops/s
# Warmup Iteration  19: 4973777.815 ops/s
# Warmup Iteration  20: 5106125.372 ops/s
# Warmup Iteration  21: 5254722.641 ops/s
# Warmup Iteration  22: 4938848.298 ops/s
# Warmup Iteration  23: 5152496.891 ops/s
# Warmup Iteration  24: 5083101.639 ops/s
# Warmup Iteration  25: 4976518.868 ops/s
# Warmup Iteration  26: 4950122.133 ops/s
# Warmup Iteration  27: 5235790.021 ops/s
# Warmup Iteration  28: 5006831.884 ops/s
# Warmup Iteration  29: 5115908.212 ops/s
# Warmup Iteration  30: 5324462.472 ops/s
Iteration   1: 4842772.954 ops/s
Iteration   2: 5156133.509 ops/s
Iteration   3: 5284928.075 ops/s
Iteration   4: 5028907.867 ops/s
Iteration   5: 4904516.316 ops/s
Iteration   6: 5330683.952 ops/s
Iteration   7: 4988970.246 ops/s
Iteration   8: 5227115.296 ops/s
Iteration   9: 4951764.205 ops/s
Iteration  10: 5093265.854 ops/s
Iteration  11: 4940553.415 ops/s
Iteration  12: 5012562.643 ops/s
Iteration  13: 5227091.779 ops/s
Iteration  14: 4897718.799 ops/s
Iteration  15: 4092466.334 ops/s
Iteration  16: 5169436.823 ops/s
Iteration  17: 4851109.252 ops/s
Iteration  18: 5175467.316 ops/s
Iteration  19: 5470574.124 ops/s
Iteration  20: 5226148.796 ops/s
Iteration  21: 5016351.080 ops/s
Iteration  22: 5162331.788 ops/s
Iteration  23: 5001303.644 ops/s
Iteration  24: 5289342.614 ops/s
Iteration  25: 4956102.918 ops/s
Iteration  26: 5283332.393 ops/s
Iteration  27: 5036909.949 ops/s
Iteration  28: 5115891.024 ops/s
Iteration  29: 5114566.729 ops/s
Iteration  30: 5073218.592 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_arrayFirstCancels":
  5064051.276 ±(99.9%) 159782.239 ops/s [Average]
  (min, avg, max) = (4092466.334, 5064051.276, 5470574.124), stdev = 239154.551
  CI (99.9%): [4904269.038, 5223833.515] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score        Error  Units
CompletableConcatTest._Benchmark.benchmark_arrayFirstCancels  thrpt   30  5064051.276 ± 159782.239  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_iterableFirstCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_iterableFirstCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1463554.642 ops/s
# Warmup Iteration   2: 3506250.059 ops/s
# Warmup Iteration   3: 4610005.256 ops/s
# Warmup Iteration   4: 4646452.962 ops/s
# Warmup Iteration   5: 5023840.318 ops/s
# Warmup Iteration   6: 4718169.035 ops/s
# Warmup Iteration   7: 4883362.152 ops/s
# Warmup Iteration   8: 4815283.252 ops/s
# Warmup Iteration   9: 4753054.955 ops/s
# Warmup Iteration  10: 4867389.295 ops/s
# Warmup Iteration  11: 4629896.802 ops/s
# Warmup Iteration  12: 4917163.522 ops/s
# Warmup Iteration  13: 4980046.949 ops/s
# Warmup Iteration  14: 4726883.910 ops/s
# Warmup Iteration  15: 4961091.511 ops/s
# Warmup Iteration  16: 4702525.208 ops/s
# Warmup Iteration  17: 4980015.606 ops/s
# Warmup Iteration  18: 4916820.608 ops/s
# Warmup Iteration  19: 4698668.509 ops/s
# Warmup Iteration  20: 4881155.903 ops/s
# Warmup Iteration  21: 4911357.017 ops/s
# Warmup Iteration  22: 4919987.855 ops/s
# Warmup Iteration  23: 4711867.505 ops/s
# Warmup Iteration  24: 4874388.693 ops/s
# Warmup Iteration  25: 4951514.490 ops/s
# Warmup Iteration  26: 4764848.232 ops/s
# Warmup Iteration  27: 4879204.516 ops/s
# Warmup Iteration  28: 4903555.604 ops/s
# Warmup Iteration  29: 4779488.223 ops/s
# Warmup Iteration  30: 4985028.308 ops/s
Iteration   1: 4732968.680 ops/s
Iteration   2: 4833239.438 ops/s
Iteration   3: 4933046.467 ops/s
Iteration   4: 4770009.732 ops/s
Iteration   5: 4970336.103 ops/s
Iteration   6: 4758192.840 ops/s
Iteration   7: 4805460.959 ops/s
Iteration   8: 4977013.918 ops/s
Iteration   9: 4728188.308 ops/s
Iteration  10: 4907651.702 ops/s
Iteration  11: 4751777.186 ops/s
Iteration  12: 4764556.249 ops/s
Iteration  13: 4719785.396 ops/s
Iteration  14: 5014364.241 ops/s
Iteration  15: 4723596.867 ops/s
Iteration  16: 4902455.942 ops/s
Iteration  17: 4786030.677 ops/s
Iteration  18: 4754134.059 ops/s
Iteration  19: 4814831.637 ops/s
Iteration  20: 4781105.337 ops/s
Iteration  21: 4915591.414 ops/s
Iteration  22: 4790124.523 ops/s
Iteration  23: 5054214.495 ops/s
Iteration  24: 4654534.126 ops/s
Iteration  25: 4848955.352 ops/s
Iteration  26: 4760686.040 ops/s
Iteration  27: 4896961.795 ops/s
Iteration  28: 4833582.873 ops/s
Iteration  29: 4815613.714 ops/s
Iteration  30: 4831883.216 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableConcatTest._Benchmark.benchmark_iterableFirstCancels":
  4827696.443 ±(99.9%) 64491.672 ops/s [Average]
  (min, avg, max) = (4654534.126, 4827696.443, 5054214.495), stdev = 96528.106
  CI (99.9%): [4763204.771, 4892188.115] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
CompletableConcatTest._Benchmark.benchmark_iterableFirstCancels  thrpt   30  4827696.443 ± 64491.672  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_remove$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_remove

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6758656.877 ops/s
# Warmup Iteration   2: 10520278.324 ops/s
# Warmup Iteration   3: 14403515.101 ops/s
# Warmup Iteration   4: 14668949.617 ops/s
# Warmup Iteration   5: 13820679.753 ops/s
# Warmup Iteration   6: 13640454.936 ops/s
# Warmup Iteration   7: 14151866.904 ops/s
# Warmup Iteration   8: 13906303.662 ops/s
# Warmup Iteration   9: 13972165.044 ops/s
# Warmup Iteration  10: 14760028.304 ops/s
# Warmup Iteration  11: 13466346.907 ops/s
# Warmup Iteration  12: 14241592.449 ops/s
# Warmup Iteration  13: 14495839.774 ops/s
# Warmup Iteration  14: 14093809.266 ops/s
# Warmup Iteration  15: 14644118.578 ops/s
# Warmup Iteration  16: 13356809.233 ops/s
# Warmup Iteration  17: 14000392.227 ops/s
# Warmup Iteration  18: 14783191.770 ops/s
# Warmup Iteration  19: 13453663.424 ops/s
# Warmup Iteration  20: 14123473.166 ops/s
# Warmup Iteration  21: 14848209.564 ops/s
# Warmup Iteration  22: 13940774.161 ops/s
# Warmup Iteration  23: 14916668.449 ops/s
# Warmup Iteration  24: 13984940.910 ops/s
# Warmup Iteration  25: 14180228.914 ops/s
# Warmup Iteration  26: 14224699.828 ops/s
# Warmup Iteration  27: 14183560.242 ops/s
# Warmup Iteration  28: 14142415.281 ops/s
# Warmup Iteration  29: 14587074.886 ops/s
# Warmup Iteration  30: 13651485.557 ops/s
Iteration   1: 14623254.670 ops/s
Iteration   2: 14512838.228 ops/s
Iteration   3: 13840299.134 ops/s
Iteration   4: 14464971.225 ops/s
Iteration   5: 13839967.999 ops/s
Iteration   6: 13910786.892 ops/s
Iteration   7: 14305046.343 ops/s
Iteration   8: 13888698.428 ops/s
Iteration   9: 11733573.035 ops/s
Iteration  10: 14728058.478 ops/s
Iteration  11: 14499330.865 ops/s
Iteration  12: 14009004.149 ops/s
Iteration  13: 14375720.837 ops/s
Iteration  14: 13521920.713 ops/s
Iteration  15: 14361006.339 ops/s
Iteration  16: 13741120.222 ops/s
Iteration  17: 14366315.947 ops/s
Iteration  18: 14168090.279 ops/s
Iteration  19: 13794558.656 ops/s
Iteration  20: 14496319.877 ops/s
Iteration  21: 13911852.833 ops/s
Iteration  22: 14599480.345 ops/s
Iteration  23: 13768377.000 ops/s
Iteration  24: 14129832.471 ops/s
Iteration  25: 14085106.920 ops/s
Iteration  26: 13705695.735 ops/s
Iteration  27: 14418688.219 ops/s
Iteration  28: 13968286.215 ops/s
Iteration  29: 14223428.549 ops/s
Iteration  30: 14001770.076 ops/s


Result "io.reactivex.rxjava3.internal.disposables.ListCompositeDisposableTest._Benchmark.benchmark_remove":
  14066446.689 ±(99.9%) 363655.102 ops/s [Average]
  (min, avg, max) = (11733573.035, 14066446.689, 14728058.478), stdev = 544301.878
  CI (99.9%): [13702791.588, 14430101.791] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt         Score        Error  Units
ListCompositeDisposableTest._Benchmark.benchmark_remove  thrpt   30  14066446.689 ± 363655.102  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_timeoutResetsSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_timeoutResetsSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4743621.826 ops/s
# Warmup Iteration   2: 8587173.137 ops/s
# Warmup Iteration   3: 11793028.803 ops/s
# Warmup Iteration   4: 11743931.418 ops/s
# Warmup Iteration   5: 11636992.492 ops/s
# Warmup Iteration   6: 12025136.276 ops/s
# Warmup Iteration   7: 11642495.240 ops/s
# Warmup Iteration   8: 11371220.524 ops/s
# Warmup Iteration   9: 11705532.269 ops/s
# Warmup Iteration  10: 11426163.854 ops/s
# Warmup Iteration  11: 11360508.837 ops/s
# Warmup Iteration  12: 11712025.412 ops/s
# Warmup Iteration  13: 11405002.176 ops/s
# Warmup Iteration  14: 11891895.887 ops/s
# Warmup Iteration  15: 12019663.996 ops/s
# Warmup Iteration  16: 11656270.080 ops/s
# Warmup Iteration  17: 11835622.133 ops/s
# Warmup Iteration  18: 11358996.673 ops/s
# Warmup Iteration  19: 11634241.045 ops/s
# Warmup Iteration  20: 11410042.455 ops/s
# Warmup Iteration  21: 11594577.304 ops/s
# Warmup Iteration  22: 12148196.370 ops/s
# Warmup Iteration  23: 11957845.701 ops/s
# Warmup Iteration  24: 11724507.847 ops/s
# Warmup Iteration  25: 11736467.797 ops/s
# Warmup Iteration  26: 11624999.088 ops/s
# Warmup Iteration  27: 11708820.045 ops/s
# Warmup Iteration  28: 11615537.182 ops/s
# Warmup Iteration  29: 12076134.649 ops/s
# Warmup Iteration  30: 12069131.440 ops/s
Iteration   1: 11476384.186 ops/s
Iteration   2: 12039374.045 ops/s
Iteration   3: 11573131.537 ops/s
Iteration   4: 11761733.063 ops/s
Iteration   5: 11977257.647 ops/s
Iteration   6: 11668824.584 ops/s
Iteration   7: 11699387.705 ops/s
Iteration   8: 11568502.756 ops/s
Iteration   9: 11973783.174 ops/s
Iteration  10: 11164618.100 ops/s
Iteration  11: 11389407.682 ops/s
Iteration  12: 12306207.261 ops/s
Iteration  13: 11505861.124 ops/s
Iteration  14: 11278192.133 ops/s
Iteration  15: 11859443.596 ops/s
Iteration  16: 11672830.523 ops/s
Iteration  17: 11112679.247 ops/s
Iteration  18: 12001071.929 ops/s
Iteration  19: 11951311.528 ops/s
Iteration  20: 11361942.954 ops/s
Iteration  21: 12139752.492 ops/s
Iteration  22: 11185778.013 ops/s
Iteration  23: 12116445.409 ops/s
Iteration  24: 11436838.309 ops/s
Iteration  25: 11937703.184 ops/s
Iteration  26: 11595800.883 ops/s
Iteration  27: 11809501.949 ops/s
Iteration  28: 11865668.759 ops/s
Iteration  29: 11421215.107 ops/s
Iteration  30: 11884306.227 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRefCountTest._Benchmark.benchmark_timeoutResetsSource":
  11691165.170 ±(99.9%) 210443.736 ops/s [Average]
  (min, avg, max) = (11112679.247, 11691165.170, 12306207.261), stdev = 314982.301
  CI (99.9%): [11480721.434, 11901608.906] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt         Score        Error  Units
FlowableRefCountTest._Benchmark.benchmark_timeoutResetsSource  thrpt   30  11691165.170 ± 210443.736  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_observerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_observerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 367710.282 ops/s
# Warmup Iteration   2: 611536.762 ops/s
# Warmup Iteration   3: 762460.879 ops/s
# Warmup Iteration   4: 739359.541 ops/s
# Warmup Iteration   5: 739760.722 ops/s
# Warmup Iteration   6: 761409.370 ops/s
# Warmup Iteration   7: 685814.712 ops/s
# Warmup Iteration   8: 746058.410 ops/s
# Warmup Iteration   9: 755772.796 ops/s
# Warmup Iteration  10: 733118.031 ops/s
# Warmup Iteration  11: 748032.314 ops/s
# Warmup Iteration  12: 759207.005 ops/s
# Warmup Iteration  13: 740553.019 ops/s
# Warmup Iteration  14: 775368.641 ops/s
# Warmup Iteration  15: 728463.217 ops/s
# Warmup Iteration  16: 750566.278 ops/s
# Warmup Iteration  17: 823978.147 ops/s
# Warmup Iteration  18: 762360.055 ops/s
# Warmup Iteration  19: 812958.913 ops/s
# Warmup Iteration  20: 811128.809 ops/s
# Warmup Iteration  21: 770698.710 ops/s
# Warmup Iteration  22: 800214.983 ops/s
# Warmup Iteration  23: 793154.356 ops/s
# Warmup Iteration  24: 777365.696 ops/s
# Warmup Iteration  25: 819003.363 ops/s
# Warmup Iteration  26: 789377.093 ops/s
# Warmup Iteration  27: 792356.918 ops/s
# Warmup Iteration  28: 772632.999 ops/s
# Warmup Iteration  29: 802591.188 ops/s
# Warmup Iteration  30: 809802.486 ops/s
Iteration   1: 777520.272 ops/s
Iteration   2: 791766.736 ops/s
Iteration   3: 820513.008 ops/s
Iteration   4: 650757.108 ops/s
Iteration   5: 813648.162 ops/s
Iteration   6: 808324.343 ops/s
Iteration   7: 815964.724 ops/s
Iteration   8: 836154.649 ops/s
Iteration   9: 778528.134 ops/s
Iteration  10: 807419.662 ops/s
Iteration  11: 778884.165 ops/s
Iteration  12: 815780.574 ops/s
Iteration  13: 778128.914 ops/s
Iteration  14: 804952.664 ops/s
Iteration  15: 800353.191 ops/s
Iteration  16: 771286.588 ops/s
Iteration  17: 803838.738 ops/s
Iteration  18: 804686.338 ops/s
Iteration  19: 795818.593 ops/s
Iteration  20: 780582.620 ops/s
Iteration  21: 800872.994 ops/s
Iteration  22: 807654.182 ops/s
Iteration  23: 788021.728 ops/s
Iteration  24: 818708.877 ops/s
Iteration  25: 747715.871 ops/s
Iteration  26: 812752.520 ops/s
Iteration  27: 796365.199 ops/s
Iteration  28: 812069.212 ops/s
Iteration  29: 783658.549 ops/s
Iteration  30: 810830.885 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableBlockingSubscribeTest._Benchmark.benchmark_observerError":
  793785.307 ±(99.9%) 21804.580 ops/s [Average]
  (min, avg, max) = (650757.108, 793785.307, 836154.649), stdev = 32636.072
  CI (99.9%): [771980.726, 815589.887] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
CompletableBlockingSubscribeTest._Benchmark.benchmark_observerError  thrpt   30  793785.307 ± 21804.580  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedLateEmit$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedLateEmit

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.841 ops/s
# Warmup Iteration   2: 63116.315 ops/s
# Warmup Iteration   3: 164677.835 ops/s
# Warmup Iteration   4: 230652.142 ops/s
# Warmup Iteration   5: 239843.929 ops/s
# Warmup Iteration   6: 263815.953 ops/s
# Warmup Iteration   7: 691467.077 ops/s
# Warmup Iteration   8: 845354.403 ops/s
# Warmup Iteration   9: 863550.236 ops/s
# Warmup Iteration  10: 851882.392 ops/s
# Warmup Iteration  11: 847802.236 ops/s
# Warmup Iteration  12: 886168.580 ops/s
# Warmup Iteration  13: 837552.025 ops/s
# Warmup Iteration  14: 871261.198 ops/s
# Warmup Iteration  15: 883710.681 ops/s
# Warmup Iteration  16: 838960.776 ops/s
# Warmup Iteration  17: 856433.005 ops/s
# Warmup Iteration  18: 903214.916 ops/s
# Warmup Iteration  19: 844307.002 ops/s
# Warmup Iteration  20: 888906.148 ops/s
# Warmup Iteration  21: 843848.467 ops/s
# Warmup Iteration  22: 861804.956 ops/s
# Warmup Iteration  23: 845804.946 ops/s
# Warmup Iteration  24: 855019.597 ops/s
# Warmup Iteration  25: 892645.342 ops/s
# Warmup Iteration  26: 845486.400 ops/s
# Warmup Iteration  27: 886353.795 ops/s
# Warmup Iteration  28: 861146.048 ops/s
# Warmup Iteration  29: 851356.413 ops/s
# Warmup Iteration  30: 865704.390 ops/s
Iteration   1: 889142.587 ops/s
Iteration   2: 845898.288 ops/s
Iteration   3: 830007.863 ops/s
Iteration   4: 866090.789 ops/s
Iteration   5: 838726.765 ops/s
Iteration   6: 880360.962 ops/s
Iteration   7: 866590.324 ops/s
Iteration   8: 874098.021 ops/s
Iteration   9: 881954.148 ops/s
Iteration  10: 844531.410 ops/s
Iteration  11: 877550.542 ops/s
Iteration  12: 842284.079 ops/s
Iteration  13: 850106.283 ops/s
Iteration  14: 863606.984 ops/s
Iteration  15: 843965.722 ops/s
Iteration  16: 859067.185 ops/s
Iteration  17: 875040.462 ops/s
Iteration  18: 847387.951 ops/s
Iteration  19: 845206.367 ops/s
Iteration  20: 874433.190 ops/s
Iteration  21: 828595.570 ops/s
Iteration  22: 879672.512 ops/s
Iteration  23: 897694.471 ops/s
Iteration  24: 853199.523 ops/s
Iteration  25: 862245.122 ops/s
Iteration  26: 838199.434 ops/s
Iteration  27: 881880.811 ops/s
Iteration  28: 848593.663 ops/s
Iteration  29: 853631.547 ops/s
Iteration  30: 876416.752 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableDebounceTest._Benchmark.benchmark_timedLateEmit":
  860539.311 ±(99.9%) 12312.779 ops/s [Average]
  (min, avg, max) = (828595.570, 860539.311, 897694.471), stdev = 18429.190
  CI (99.9%): [848226.531, 872852.090] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
ObservableDebounceTest._Benchmark.benchmark_timedLateEmit  thrpt   30  860539.311 ± 12312.779  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestArrayEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestArrayEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15772377.225 ops/s
# Warmup Iteration   2: 34432732.306 ops/s
# Warmup Iteration   3: 42403057.755 ops/s
# Warmup Iteration   4: 39386062.865 ops/s
# Warmup Iteration   5: 40864323.073 ops/s
# Warmup Iteration   6: 39674134.910 ops/s
# Warmup Iteration   7: 41919404.631 ops/s
# Warmup Iteration   8: 40214602.230 ops/s
# Warmup Iteration   9: 40592645.823 ops/s
# Warmup Iteration  10: 42195526.956 ops/s
# Warmup Iteration  11: 43811397.942 ops/s
# Warmup Iteration  12: 42257716.859 ops/s
# Warmup Iteration  13: 39579358.938 ops/s
# Warmup Iteration  14: 40880692.279 ops/s
# Warmup Iteration  15: 40405392.157 ops/s
# Warmup Iteration  16: 41310962.849 ops/s
# Warmup Iteration  17: 41436599.054 ops/s
# Warmup Iteration  18: 40563457.099 ops/s
# Warmup Iteration  19: 41769299.644 ops/s
# Warmup Iteration  20: 40726124.643 ops/s
# Warmup Iteration  21: 41047572.931 ops/s
# Warmup Iteration  22: 41746304.343 ops/s
# Warmup Iteration  23: 39806157.233 ops/s
# Warmup Iteration  24: 40006812.665 ops/s
# Warmup Iteration  25: 42668719.008 ops/s
# Warmup Iteration  26: 39288117.811 ops/s
# Warmup Iteration  27: 40645046.328 ops/s
# Warmup Iteration  28: 32879898.570 ops/s
# Warmup Iteration  29: 41680047.531 ops/s
# Warmup Iteration  30: 39742377.992 ops/s
Iteration   1: 41539305.748 ops/s
Iteration   2: 40767118.553 ops/s
Iteration   3: 39896589.177 ops/s
Iteration   4: 41241438.041 ops/s
Iteration   5: 41649609.480 ops/s
Iteration   6: 39815958.022 ops/s
Iteration   7: 43411783.886 ops/s
Iteration   8: 40678193.172 ops/s
Iteration   9: 41433715.117 ops/s
Iteration  10: 40258616.240 ops/s
Iteration  11: 40694402.952 ops/s
Iteration  12: 42214205.760 ops/s
Iteration  13: 40566391.462 ops/s
Iteration  14: 40338235.380 ops/s
Iteration  15: 42011998.103 ops/s
Iteration  16: 39137341.576 ops/s
Iteration  17: 41489202.409 ops/s
Iteration  18: 40499996.682 ops/s
Iteration  19: 39934197.996 ops/s
Iteration  20: 41872005.771 ops/s
Iteration  21: 39372131.075 ops/s
Iteration  22: 42122092.742 ops/s
Iteration  23: 40259105.680 ops/s
Iteration  24: 41128486.137 ops/s
Iteration  25: 41576045.089 ops/s
Iteration  26: 40383692.889 ops/s
Iteration  27: 42328187.896 ops/s
Iteration  28: 38839277.889 ops/s
Iteration  29: 41992026.471 ops/s
Iteration  30: 40181806.995 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_combineLatestArrayEmpty":
  40921105.280 ±(99.9%) 704682.510 ops/s [Average]
  (min, avg, max) = (38839277.889, 40921105.280, 43411783.886), stdev = 1054735.687
  CI (99.9%): [40216422.769, 41625787.790] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt         Score        Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_combineLatestArrayEmpty  thrpt   30  40921105.280 ± 704682.510  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_timeoutResetsSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_timeoutResetsSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5039140.353 ops/s
# Warmup Iteration   2: 8590155.419 ops/s
# Warmup Iteration   3: 11321550.264 ops/s
# Warmup Iteration   4: 11720591.227 ops/s
# Warmup Iteration   5: 11637995.291 ops/s
# Warmup Iteration   6: 11824459.348 ops/s
# Warmup Iteration   7: 11578655.641 ops/s
# Warmup Iteration   8: 11211856.924 ops/s
# Warmup Iteration   9: 12276365.840 ops/s
# Warmup Iteration  10: 11601453.093 ops/s
# Warmup Iteration  11: 11714608.085 ops/s
# Warmup Iteration  12: 11875326.987 ops/s
# Warmup Iteration  13: 11635932.498 ops/s
# Warmup Iteration  14: 11526496.618 ops/s
# Warmup Iteration  15: 11904517.161 ops/s
# Warmup Iteration  16: 11710026.724 ops/s
# Warmup Iteration  17: 12058467.767 ops/s
# Warmup Iteration  18: 12182629.265 ops/s
# Warmup Iteration  19: 11365110.051 ops/s
# Warmup Iteration  20: 11924191.382 ops/s
# Warmup Iteration  21: 11436069.270 ops/s
# Warmup Iteration  22: 11784216.533 ops/s
# Warmup Iteration  23: 11634778.415 ops/s
# Warmup Iteration  24: 11702390.126 ops/s
# Warmup Iteration  25: 11531392.673 ops/s
# Warmup Iteration  26: 11722089.522 ops/s
# Warmup Iteration  27: 11771590.723 ops/s
# Warmup Iteration  28: 12009658.223 ops/s
# Warmup Iteration  29: 11293189.017 ops/s
# Warmup Iteration  30: 12444621.800 ops/s
Iteration   1: 12079343.611 ops/s
Iteration   2: 11518326.288 ops/s
Iteration   3: 12090461.883 ops/s
Iteration   4: 12297600.863 ops/s
Iteration   5: 11407564.086 ops/s
Iteration   6: 11974534.955 ops/s
Iteration   7: 11168457.138 ops/s
Iteration   8: 11917987.706 ops/s
Iteration   9: 11390392.508 ops/s
Iteration  10: 11532053.440 ops/s
Iteration  11: 12408474.082 ops/s
Iteration  12: 11418491.680 ops/s
Iteration  13: 11917298.959 ops/s
Iteration  14: 11418867.309 ops/s
Iteration  15: 11541687.997 ops/s
Iteration  16: 12154987.560 ops/s
Iteration  17: 11516693.582 ops/s
Iteration  18: 11466081.484 ops/s
Iteration  19: 12251316.776 ops/s
Iteration  20: 11012591.582 ops/s
Iteration  21: 12019432.873 ops/s
Iteration  22: 11440287.218 ops/s
Iteration  23: 12101210.856 ops/s
Iteration  24: 11506337.252 ops/s
Iteration  25: 11599131.234 ops/s
Iteration  26: 11930109.748 ops/s
Iteration  27: 11685489.205 ops/s
Iteration  28: 11685902.370 ops/s
Iteration  29: 11799710.012 ops/s
Iteration  30: 11534988.225 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_timeoutResetsSource":
  11726193.749 ±(99.9%) 233885.584 ops/s [Average]
  (min, avg, max) = (11012591.582, 11726193.749, 12408474.082), stdev = 350068.958
  CI (99.9%): [11492308.165, 11960079.334] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt         Score        Error  Units
ObservableRefCountTest._Benchmark.benchmark_timeoutResetsSource  thrpt   30  11726193.749 ± 233885.584  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_disposedOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_disposedOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2987571.557 ops/s
# Warmup Iteration   2: 5959221.312 ops/s
# Warmup Iteration   3: 8565668.391 ops/s
# Warmup Iteration   4: 8290138.238 ops/s
# Warmup Iteration   5: 8661737.860 ops/s
# Warmup Iteration   6: 8045878.779 ops/s
# Warmup Iteration   7: 8413759.527 ops/s
# Warmup Iteration   8: 8509877.208 ops/s
# Warmup Iteration   9: 8147793.155 ops/s
# Warmup Iteration  10: 8376587.223 ops/s
# Warmup Iteration  11: 8244912.085 ops/s
# Warmup Iteration  12: 8300573.390 ops/s
# Warmup Iteration  13: 8751166.397 ops/s
# Warmup Iteration  14: 8224655.096 ops/s
# Warmup Iteration  15: 8601174.189 ops/s
# Warmup Iteration  16: 8289672.843 ops/s
# Warmup Iteration  17: 8376375.014 ops/s
# Warmup Iteration  18: 8482459.964 ops/s
# Warmup Iteration  19: 8143689.060 ops/s
# Warmup Iteration  20: 8718259.681 ops/s
# Warmup Iteration  21: 8492139.045 ops/s
# Warmup Iteration  22: 8025402.442 ops/s
# Warmup Iteration  23: 6664293.977 ops/s
# Warmup Iteration  24: 8003550.621 ops/s
# Warmup Iteration  25: 8395633.277 ops/s
# Warmup Iteration  26: 8475888.016 ops/s
# Warmup Iteration  27: 8372671.463 ops/s
# Warmup Iteration  28: 8666231.891 ops/s
# Warmup Iteration  29: 8302724.401 ops/s
# Warmup Iteration  30: 8397184.307 ops/s
Iteration   1: 8355140.125 ops/s
Iteration   2: 8188653.162 ops/s
Iteration   3: 8588145.701 ops/s
Iteration   4: 8487611.896 ops/s
Iteration   5: 8430612.726 ops/s
Iteration   6: 8641569.036 ops/s
Iteration   7: 8349269.309 ops/s
Iteration   8: 8780809.054 ops/s
Iteration   9: 8056868.802 ops/s
Iteration  10: 8602149.770 ops/s
Iteration  11: 8164800.107 ops/s
Iteration  12: 8351740.787 ops/s
Iteration  13: 8777838.760 ops/s
Iteration  14: 8538242.299 ops/s
Iteration  15: 8171124.050 ops/s
Iteration  16: 8470823.474 ops/s
Iteration  17: 8174637.735 ops/s
Iteration  18: 8613892.666 ops/s
Iteration  19: 8307972.360 ops/s
Iteration  20: 8783761.307 ops/s
Iteration  21: 8403291.622 ops/s
Iteration  22: 8089618.999 ops/s
Iteration  23: 8873143.414 ops/s
Iteration  24: 8258759.387 ops/s
Iteration  25: 8693026.816 ops/s
Iteration  26: 8261894.309 ops/s
Iteration  27: 8481047.436 ops/s
Iteration  28: 8389757.455 ops/s
Iteration  29: 8312666.516 ops/s
Iteration  30: 8199322.112 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_disposedOnArrival":
  8426606.373 ±(99.9%) 150056.392 ops/s [Average]
  (min, avg, max) = (8056868.802, 8426606.373, 8873143.414), stdev = 224597.361
  CI (99.9%): [8276549.981, 8576662.765] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
SingleFromSupplierTest._Benchmark.benchmark_disposedOnArrival  thrpt   30  8426606.373 ± 150056.392  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1122375.451 ops/s
# Warmup Iteration   2: 4083196.190 ops/s
# Warmup Iteration   3: 5729767.239 ops/s
# Warmup Iteration   4: 5578701.110 ops/s
# Warmup Iteration   5: 5672562.806 ops/s
# Warmup Iteration   6: 4864627.376 ops/s
# Warmup Iteration   7: 5726547.886 ops/s
# Warmup Iteration   8: 5641900.209 ops/s
# Warmup Iteration   9: 5745615.486 ops/s
# Warmup Iteration  10: 5775179.518 ops/s
# Warmup Iteration  11: 5492051.508 ops/s
# Warmup Iteration  12: 5988173.604 ops/s
# Warmup Iteration  13: 5597275.942 ops/s
# Warmup Iteration  14: 5827584.293 ops/s
# Warmup Iteration  15: 5685277.003 ops/s
# Warmup Iteration  16: 5551209.929 ops/s
# Warmup Iteration  17: 5522196.524 ops/s
# Warmup Iteration  18: 5853738.382 ops/s
# Warmup Iteration  19: 5625326.302 ops/s
# Warmup Iteration  20: 5755709.210 ops/s
# Warmup Iteration  21: 5917627.375 ops/s
# Warmup Iteration  22: 5924565.241 ops/s
# Warmup Iteration  23: 5920483.113 ops/s
# Warmup Iteration  24: 5459621.976 ops/s
# Warmup Iteration  25: 5522179.443 ops/s
# Warmup Iteration  26: 5700128.812 ops/s
# Warmup Iteration  27: 5545030.762 ops/s
# Warmup Iteration  28: 5686148.174 ops/s
# Warmup Iteration  29: 5908727.129 ops/s
# Warmup Iteration  30: 5662268.282 ops/s
Iteration   1: 5751943.759 ops/s
Iteration   2: 5553205.895 ops/s
Iteration   3: 5716841.400 ops/s
Iteration   4: 5811830.269 ops/s
Iteration   5: 5622278.691 ops/s
Iteration   6: 5788170.876 ops/s
Iteration   7: 5740424.632 ops/s
Iteration   8: 5863161.786 ops/s
Iteration   9: 5517830.602 ops/s
Iteration  10: 5887961.028 ops/s
Iteration  11: 5576393.490 ops/s
Iteration  12: 5686617.858 ops/s
Iteration  13: 5523401.696 ops/s
Iteration  14: 5752429.674 ops/s
Iteration  15: 5912244.684 ops/s
Iteration  16: 5653971.345 ops/s
Iteration  17: 5829942.182 ops/s
Iteration  18: 5535491.223 ops/s
Iteration  19: 5890829.495 ops/s
Iteration  20: 5647536.272 ops/s
Iteration  21: 5879022.560 ops/s
Iteration  22: 5641030.281 ops/s
Iteration  23: 5620812.785 ops/s
Iteration  24: 5858472.871 ops/s
Iteration  25: 5646348.592 ops/s
Iteration  26: 5783852.591 ops/s
Iteration  27: 5611615.945 ops/s
Iteration  28: 5699837.706 ops/s
Iteration  29: 5821838.004 ops/s
Iteration  30: 5642431.149 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnDispose":
  5715592.311 ±(99.9%) 80670.755 ops/s [Average]
  (min, avg, max) = (5517830.602, 5715592.311, 5912244.684), stdev = 120744.198
  CI (99.9%): [5634921.556, 5796263.066] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnDispose  thrpt   30  5715592.311 ± 80670.755  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_disposedOnCall$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_disposedOnCall

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1933053.714 ops/s
# Warmup Iteration   2: 5389098.757 ops/s
# Warmup Iteration   3: 6194514.410 ops/s
# Warmup Iteration   4: 7065519.585 ops/s
# Warmup Iteration   5: 6520999.020 ops/s
# Warmup Iteration   6: 6874401.568 ops/s
# Warmup Iteration   7: 6968485.455 ops/s
# Warmup Iteration   8: 6594736.576 ops/s
# Warmup Iteration   9: 6864582.258 ops/s
# Warmup Iteration  10: 6642787.335 ops/s
# Warmup Iteration  11: 6639213.783 ops/s
# Warmup Iteration  12: 6901292.713 ops/s
# Warmup Iteration  13: 6605785.588 ops/s
# Warmup Iteration  14: 6890020.096 ops/s
# Warmup Iteration  15: 6758636.190 ops/s
# Warmup Iteration  16: 6825539.679 ops/s
# Warmup Iteration  17: 6466956.213 ops/s
# Warmup Iteration  18: 5666363.914 ops/s
# Warmup Iteration  19: 6978962.252 ops/s
# Warmup Iteration  20: 6771001.092 ops/s
# Warmup Iteration  21: 6701189.475 ops/s
# Warmup Iteration  22: 6855885.508 ops/s
# Warmup Iteration  23: 6961177.104 ops/s
# Warmup Iteration  24: 6657169.139 ops/s
# Warmup Iteration  25: 6643567.250 ops/s
# Warmup Iteration  26: 6654988.321 ops/s
# Warmup Iteration  27: 6785670.961 ops/s
# Warmup Iteration  28: 6594449.767 ops/s
# Warmup Iteration  29: 6805811.618 ops/s
# Warmup Iteration  30: 6653301.760 ops/s
Iteration   1: 6506466.180 ops/s
Iteration   2: 7073838.820 ops/s
Iteration   3: 6720173.111 ops/s
Iteration   4: 6754350.985 ops/s
Iteration   5: 6712845.969 ops/s
Iteration   6: 6822647.490 ops/s
Iteration   7: 6990003.931 ops/s
Iteration   8: 6579018.006 ops/s
Iteration   9: 6929430.228 ops/s
Iteration  10: 6792998.242 ops/s
Iteration  11: 6731375.217 ops/s
Iteration  12: 6819779.201 ops/s
Iteration  13: 6779103.178 ops/s
Iteration  14: 7032784.951 ops/s
Iteration  15: 6988445.813 ops/s
Iteration  16: 6749828.454 ops/s
Iteration  17: 6602381.095 ops/s
Iteration  18: 6875776.020 ops/s
Iteration  19: 6579478.925 ops/s
Iteration  20: 6891945.914 ops/s
Iteration  21: 6656317.144 ops/s
Iteration  22: 6452971.243 ops/s
Iteration  23: 7048061.350 ops/s
Iteration  24: 6700915.387 ops/s
Iteration  25: 6907754.058 ops/s
Iteration  26: 6636115.864 ops/s
Iteration  27: 6901722.772 ops/s
Iteration  28: 6543837.662 ops/s
Iteration  29: 7035287.509 ops/s
Iteration  30: 6598224.445 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFromSupplierTest._Benchmark.benchmark_disposedOnCall":
  6780462.639 ±(99.9%) 117080.469 ops/s [Average]
  (min, avg, max) = (6452971.243, 6780462.639, 7073838.820), stdev = 175240.548
  CI (99.9%): [6663382.170, 6897543.108] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
SingleFromSupplierTest._Benchmark.benchmark_disposedOnCall  thrpt   30  6780462.639 ± 117080.469  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15856450.265 ops/s
# Warmup Iteration   2: 31741027.599 ops/s
# Warmup Iteration   3: 42114378.408 ops/s
# Warmup Iteration   4: 39028357.058 ops/s
# Warmup Iteration   5: 41537305.934 ops/s
# Warmup Iteration   6: 39480532.600 ops/s
# Warmup Iteration   7: 41998718.318 ops/s
# Warmup Iteration   8: 41364065.868 ops/s
# Warmup Iteration   9: 39137831.306 ops/s
# Warmup Iteration  10: 40637601.273 ops/s
# Warmup Iteration  11: 40720802.090 ops/s
# Warmup Iteration  12: 41249035.596 ops/s
# Warmup Iteration  13: 41881303.163 ops/s
# Warmup Iteration  14: 40725691.518 ops/s
# Warmup Iteration  15: 41248526.373 ops/s
# Warmup Iteration  16: 39448766.102 ops/s
# Warmup Iteration  17: 41644845.657 ops/s
# Warmup Iteration  18: 41484274.806 ops/s
# Warmup Iteration  19: 39967483.016 ops/s
# Warmup Iteration  20: 41695193.426 ops/s
# Warmup Iteration  21: 39271449.769 ops/s
# Warmup Iteration  22: 41639167.260 ops/s
# Warmup Iteration  23: 39772182.852 ops/s
# Warmup Iteration  24: 39523576.555 ops/s
# Warmup Iteration  25: 41475149.821 ops/s
# Warmup Iteration  26: 39909287.517 ops/s
# Warmup Iteration  27: 41764238.319 ops/s
# Warmup Iteration  28: 39160405.252 ops/s
# Warmup Iteration  29: 40961365.731 ops/s
# Warmup Iteration  30: 42330490.220 ops/s
Iteration   1: 38009024.270 ops/s
Iteration   2: 41150658.705 ops/s
Iteration   3: 40575154.913 ops/s
Iteration   4: 40612243.486 ops/s
Iteration   5: 41784298.936 ops/s
Iteration   6: 39770622.935 ops/s
Iteration   7: 39980648.471 ops/s
Iteration   8: 41546753.403 ops/s
Iteration   9: 40470109.944 ops/s
Iteration  10: 39406731.920 ops/s
Iteration  11: 41230220.255 ops/s
Iteration  12: 40222991.146 ops/s
Iteration  13: 41166608.397 ops/s
Iteration  14: 39329463.889 ops/s
Iteration  15: 39233537.954 ops/s
Iteration  16: 41948961.586 ops/s
Iteration  17: 39772578.705 ops/s
Iteration  18: 40897991.666 ops/s
Iteration  19: 42329601.268 ops/s
Iteration  20: 40294130.756 ops/s
Iteration  21: 42025195.468 ops/s
Iteration  22: 39864971.220 ops/s
Iteration  23: 42053266.230 ops/s
Iteration  24: 39383311.978 ops/s
Iteration  25: 41307989.318 ops/s
Iteration  26: 39594505.058 ops/s
Iteration  27: 41222533.367 ops/s
Iteration  28: 41574778.504 ops/s
Iteration  29: 40064410.400 ops/s
Iteration  30: 42684953.952 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorEmpty":
  40650274.937 ±(99.9%) 738373.392 ops/s [Average]
  (min, avg, max) = (38009024.270, 40650274.937, 42684953.952), stdev = 1105162.617
  CI (99.9%): [39911901.545, 41388648.329] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt         Score        Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_combineLatestDelayErrorEmpty  thrpt   30  40650274.937 ± 738373.392  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_timestepError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_timestepError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 104125.333 ops/s
# Warmup Iteration   2: 390798.648 ops/s
# Warmup Iteration   3: 435343.985 ops/s
# Warmup Iteration   4: 465818.385 ops/s
# Warmup Iteration   5: 436468.631 ops/s
# Warmup Iteration   6: 481386.876 ops/s
# Warmup Iteration   7: 463386.366 ops/s
# Warmup Iteration   8: 514559.085 ops/s
# Warmup Iteration   9: 469661.874 ops/s
# Warmup Iteration  10: 475473.862 ops/s
# Warmup Iteration  11: 491678.467 ops/s
# Warmup Iteration  12: 430914.108 ops/s
# Warmup Iteration  13: 455728.796 ops/s
# Warmup Iteration  14: 473124.955 ops/s
# Warmup Iteration  15: 480125.604 ops/s
# Warmup Iteration  16: 451594.967 ops/s
# Warmup Iteration  17: 498620.035 ops/s
# Warmup Iteration  18: 512908.852 ops/s
# Warmup Iteration  19: 510730.732 ops/s
# Warmup Iteration  20: 509134.121 ops/s
# Warmup Iteration  21: 513803.055 ops/s
# Warmup Iteration  22: 497991.501 ops/s
# Warmup Iteration  23: 505946.193 ops/s
# Warmup Iteration  24: 500164.523 ops/s
# Warmup Iteration  25: 519161.071 ops/s
# Warmup Iteration  26: 490440.670 ops/s
# Warmup Iteration  27: 513805.331 ops/s
# Warmup Iteration  28: 495381.842 ops/s
# Warmup Iteration  29: 503912.980 ops/s
# Warmup Iteration  30: 528269.354 ops/s
Iteration   1: 491217.661 ops/s
Iteration   2: 491229.571 ops/s
Iteration   3: 496030.144 ops/s
Iteration   4: 498487.896 ops/s
Iteration   5: 500037.795 ops/s
Iteration   6: 484078.442 ops/s
Iteration   7: 517694.147 ops/s
Iteration   8: 492138.515 ops/s
Iteration   9: 504581.916 ops/s
Iteration  10: 519142.936 ops/s
Iteration  11: 494029.379 ops/s
Iteration  12: 509541.822 ops/s
Iteration  13: 511318.927 ops/s
Iteration  14: 484600.364 ops/s
Iteration  15: 505854.954 ops/s
Iteration  16: 515031.151 ops/s
Iteration  17: 484831.197 ops/s
Iteration  18: 510387.676 ops/s
Iteration  19: 490237.209 ops/s
Iteration  20: 500207.716 ops/s
Iteration  21: 519676.879 ops/s
Iteration  22: 500281.766 ops/s
Iteration  23: 509264.673 ops/s
Iteration  24: 499404.257 ops/s
Iteration  25: 506269.769 ops/s
Iteration  26: 497829.897 ops/s
Iteration  27: 507155.459 ops/s
Iteration  28: 510146.805 ops/s
Iteration  29: 492605.437 ops/s
Iteration  30: 521225.009 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDelaySubscriptionTest._Benchmark.benchmark_timestepError":
  502151.312 ±(99.9%) 7246.332 ops/s [Average]
  (min, avg, max) = (484078.442, 502151.312, 521225.009), stdev = 10845.969
  CI (99.9%): [494904.981, 509397.644] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
CompletableDelaySubscriptionTest._Benchmark.benchmark_timestepError  thrpt   30  502151.312 ± 7246.332  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51010.578 ops/s
# Warmup Iteration   2: 350495.666 ops/s
# Warmup Iteration   3: 423173.241 ops/s
# Warmup Iteration   4: 412742.450 ops/s
# Warmup Iteration   5: 407652.560 ops/s
# Warmup Iteration   6: 459005.338 ops/s
# Warmup Iteration   7: 428646.546 ops/s
# Warmup Iteration   8: 461570.611 ops/s
# Warmup Iteration   9: 468700.551 ops/s
# Warmup Iteration  10: 452561.269 ops/s
# Warmup Iteration  11: 448209.554 ops/s
# Warmup Iteration  12: 480310.315 ops/s
# Warmup Iteration  13: 456108.255 ops/s
# Warmup Iteration  14: 472407.012 ops/s
# Warmup Iteration  15: 455007.177 ops/s
# Warmup Iteration  16: 456417.122 ops/s
# Warmup Iteration  17: 496120.826 ops/s
# Warmup Iteration  18: 472667.456 ops/s
# Warmup Iteration  19: 472117.579 ops/s
# Warmup Iteration  20: 499189.070 ops/s
# Warmup Iteration  21: 498135.403 ops/s
# Warmup Iteration  22: 474038.228 ops/s
# Warmup Iteration  23: 463596.920 ops/s
# Warmup Iteration  24: 478902.249 ops/s
# Warmup Iteration  25: 478726.150 ops/s
# Warmup Iteration  26: 482734.861 ops/s
# Warmup Iteration  27: 476182.181 ops/s
# Warmup Iteration  28: 462619.442 ops/s
# Warmup Iteration  29: 470598.723 ops/s
# Warmup Iteration  30: 490269.148 ops/s
Iteration   1: 464143.980 ops/s
Iteration   2: 463295.466 ops/s
Iteration   3: 476462.124 ops/s
Iteration   4: 490219.024 ops/s
Iteration   5: 471958.556 ops/s
Iteration   6: 482663.253 ops/s
Iteration   7: 478867.441 ops/s
Iteration   8: 473000.374 ops/s
Iteration   9: 494120.605 ops/s
Iteration  10: 469317.274 ops/s
Iteration  11: 496826.199 ops/s
Iteration  12: 496117.175 ops/s
Iteration  13: 470437.479 ops/s
Iteration  14: 492576.157 ops/s
Iteration  15: 483521.422 ops/s
Iteration  16: 474402.982 ops/s
Iteration  17: 494529.408 ops/s
Iteration  18: 495744.558 ops/s
Iteration  19: 467052.047 ops/s
Iteration  20: 503074.382 ops/s
Iteration  21: 484815.766 ops/s
Iteration  22: 472702.099 ops/s
Iteration  23: 492042.049 ops/s
Iteration  24: 477995.976 ops/s
Iteration  25: 473671.978 ops/s
Iteration  26: 499925.098 ops/s
Iteration  27: 460249.463 ops/s
Iteration  28: 470909.644 ops/s
Iteration  29: 497340.881 ops/s
Iteration  30: 465493.782 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_doubleOnSubscribe":
  481115.888 ±(99.9%) 8493.965 ops/s [Average]
  (min, avg, max) = (460249.463, 481115.888, 503074.382), stdev = 12713.367
  CI (99.9%): [472621.924, 489609.853] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  481115.888 ± 8493.965  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 399477.865 ops/s
# Warmup Iteration   2: 611002.296 ops/s
# Warmup Iteration   3: 598621.021 ops/s
# Warmup Iteration   4: 694056.245 ops/s
# Warmup Iteration   5: 710643.334 ops/s
# Warmup Iteration   6: 691107.028 ops/s
# Warmup Iteration   7: 558866.192 ops/s
# Warmup Iteration   8: 711011.660 ops/s
# Warmup Iteration   9: 682074.344 ops/s
# Warmup Iteration  10: 717650.100 ops/s
# Warmup Iteration  11: 704405.862 ops/s
# Warmup Iteration  12: 676621.185 ops/s
# Warmup Iteration  13: 722108.094 ops/s
# Warmup Iteration  14: 681730.471 ops/s
# Warmup Iteration  15: 721144.342 ops/s
# Warmup Iteration  16: 718523.327 ops/s
# Warmup Iteration  17: 670793.276 ops/s
# Warmup Iteration  18: 746879.945 ops/s
# Warmup Iteration  19: 759566.091 ops/s
# Warmup Iteration  20: 723413.167 ops/s
# Warmup Iteration  21: 744817.978 ops/s
# Warmup Iteration  22: 751684.468 ops/s
# Warmup Iteration  23: 732923.394 ops/s
# Warmup Iteration  24: 727834.343 ops/s
# Warmup Iteration  25: 743420.124 ops/s
# Warmup Iteration  26: 746964.667 ops/s
# Warmup Iteration  27: 741160.646 ops/s
# Warmup Iteration  28: 736036.456 ops/s
# Warmup Iteration  29: 739449.896 ops/s
# Warmup Iteration  30: 748968.675 ops/s
Iteration   1: 741050.640 ops/s
Iteration   2: 714440.951 ops/s
Iteration   3: 760176.112 ops/s
Iteration   4: 700748.866 ops/s
Iteration   5: 737869.578 ops/s
Iteration   6: 751119.438 ops/s
Iteration   7: 721178.844 ops/s
Iteration   8: 755565.339 ops/s
Iteration   9: 719978.397 ops/s
Iteration  10: 719416.189 ops/s
Iteration  11: 760561.677 ops/s
Iteration  12: 730509.835 ops/s
Iteration  13: 747341.940 ops/s
Iteration  14: 730543.787 ops/s
Iteration  15: 695962.696 ops/s
Iteration  16: 726537.951 ops/s
Iteration  17: 731768.298 ops/s
Iteration  18: 745844.995 ops/s
Iteration  19: 742295.769 ops/s
Iteration  20: 693728.591 ops/s
Iteration  21: 738148.229 ops/s
Iteration  22: 757175.787 ops/s
Iteration  23: 723422.609 ops/s
Iteration  24: 711609.664 ops/s
Iteration  25: 740652.441 ops/s
Iteration  26: 711859.763 ops/s
Iteration  27: 741075.352 ops/s
Iteration  28: 758107.971 ops/s
Iteration  29: 709538.410 ops/s
Iteration  30: 769975.194 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_error":
  732940.177 ±(99.9%) 13595.257 ops/s [Average]
  (min, avg, max) = (693728.591, 732940.177, 769975.194), stdev = 20348.743
  CI (99.9%): [719344.920, 746535.434] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_error  thrpt   30  732940.177 ± 13595.257  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 115016.360 ops/s
# Warmup Iteration   2: 416963.237 ops/s
# Warmup Iteration   3: 505372.479 ops/s
# Warmup Iteration   4: 522604.032 ops/s
# Warmup Iteration   5: 472559.892 ops/s
# Warmup Iteration   6: 509532.457 ops/s
# Warmup Iteration   7: 518283.432 ops/s
# Warmup Iteration   8: 476946.460 ops/s
# Warmup Iteration   9: 527760.082 ops/s
# Warmup Iteration  10: 510988.073 ops/s
# Warmup Iteration  11: 500386.026 ops/s
# Warmup Iteration  12: 552912.579 ops/s
# Warmup Iteration  13: 521812.577 ops/s
# Warmup Iteration  14: 532229.695 ops/s
# Warmup Iteration  15: 515827.842 ops/s
# Warmup Iteration  16: 527778.995 ops/s
# Warmup Iteration  17: 538578.654 ops/s
# Warmup Iteration  18: 554751.104 ops/s
# Warmup Iteration  19: 536485.523 ops/s
# Warmup Iteration  20: 553248.743 ops/s
# Warmup Iteration  21: 534178.583 ops/s
# Warmup Iteration  22: 545542.062 ops/s
# Warmup Iteration  23: 556712.363 ops/s
# Warmup Iteration  24: 541135.521 ops/s
# Warmup Iteration  25: 560005.638 ops/s
# Warmup Iteration  26: 540718.815 ops/s
# Warmup Iteration  27: 534115.823 ops/s
# Warmup Iteration  28: 571086.355 ops/s
# Warmup Iteration  29: 553673.769 ops/s
# Warmup Iteration  30: 540153.027 ops/s
Iteration   1: 551268.352 ops/s
Iteration   2: 545049.449 ops/s
Iteration   3: 536806.066 ops/s
Iteration   4: 556389.866 ops/s
Iteration   5: 538958.341 ops/s
Iteration   6: 547473.052 ops/s
Iteration   7: 558820.235 ops/s
Iteration   8: 515888.697 ops/s
Iteration   9: 557279.518 ops/s
Iteration  10: 534815.092 ops/s
Iteration  11: 539687.593 ops/s
Iteration  12: 556827.228 ops/s
Iteration  13: 534405.905 ops/s
Iteration  14: 557584.709 ops/s
Iteration  15: 552284.879 ops/s
Iteration  16: 523322.584 ops/s
Iteration  17: 567834.011 ops/s
Iteration  18: 526935.166 ops/s
Iteration  19: 541109.655 ops/s
Iteration  20: 564719.814 ops/s
Iteration  21: 532173.116 ops/s
Iteration  22: 536980.975 ops/s
Iteration  23: 568918.377 ops/s
Iteration  24: 532224.099 ops/s
Iteration  25: 540256.404 ops/s
Iteration  26: 537704.261 ops/s
Iteration  27: 555360.397 ops/s
Iteration  28: 551844.369 ops/s
Iteration  29: 529883.165 ops/s
Iteration  30: 565375.501 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe":
  545272.696 ±(99.9%) 9301.357 ops/s [Average]
  (min, avg, max) = (515888.697, 545272.696, 568918.377), stdev = 13921.834
  CI (99.9%): [535971.339, 554574.052] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableUnsubscribeOnTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  545272.696 ± 9301.357  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_unsafe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_unsafe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1046487.622 ops/s
# Warmup Iteration   2: 2887489.281 ops/s
# Warmup Iteration   3: 4432384.825 ops/s
# Warmup Iteration   4: 4816001.475 ops/s
# Warmup Iteration   5: 5163088.793 ops/s
# Warmup Iteration   6: 4888827.236 ops/s
# Warmup Iteration   7: 5027993.778 ops/s
# Warmup Iteration   8: 5154632.168 ops/s
# Warmup Iteration   9: 4826927.845 ops/s
# Warmup Iteration  10: 5044114.448 ops/s
# Warmup Iteration  11: 4923431.910 ops/s
# Warmup Iteration  12: 5214770.192 ops/s
# Warmup Iteration  13: 4897019.424 ops/s
# Warmup Iteration  14: 5098929.755 ops/s
# Warmup Iteration  15: 4990100.890 ops/s
# Warmup Iteration  16: 4970446.247 ops/s
# Warmup Iteration  17: 5184390.302 ops/s
# Warmup Iteration  18: 5090694.029 ops/s
# Warmup Iteration  19: 4943815.384 ops/s
# Warmup Iteration  20: 5291232.429 ops/s
# Warmup Iteration  21: 4936234.407 ops/s
# Warmup Iteration  22: 5057616.804 ops/s
# Warmup Iteration  23: 5170279.029 ops/s
# Warmup Iteration  24: 5179262.330 ops/s
# Warmup Iteration  25: 4968301.720 ops/s
# Warmup Iteration  26: 5144120.179 ops/s
# Warmup Iteration  27: 5048879.575 ops/s
# Warmup Iteration  28: 5255078.906 ops/s
# Warmup Iteration  29: 4997795.716 ops/s
# Warmup Iteration  30: 4978229.285 ops/s
Iteration   1: 5228760.145 ops/s
Iteration   2: 4827216.255 ops/s
Iteration   3: 5132126.749 ops/s
Iteration   4: 4995625.709 ops/s
Iteration   5: 5103416.315 ops/s
Iteration   6: 5100399.867 ops/s
Iteration   7: 4973216.988 ops/s
Iteration   8: 5270191.180 ops/s
Iteration   9: 4975800.081 ops/s
Iteration  10: 5148219.525 ops/s
Iteration  11: 5005711.427 ops/s
Iteration  12: 5040134.333 ops/s
Iteration  13: 5144928.786 ops/s
Iteration  14: 5089811.107 ops/s
Iteration  15: 5067873.256 ops/s
Iteration  16: 5054940.401 ops/s
Iteration  17: 4904115.571 ops/s
Iteration  18: 5271913.927 ops/s
Iteration  19: 5095155.675 ops/s
Iteration  20: 4868748.901 ops/s
Iteration  21: 5226118.939 ops/s
Iteration  22: 5006204.174 ops/s
Iteration  23: 4980200.505 ops/s
Iteration  24: 5283423.924 ops/s
Iteration  25: 5066014.212 ops/s
Iteration  26: 5166954.097 ops/s
Iteration  27: 4923570.413 ops/s
Iteration  28: 5087733.559 ops/s
Iteration  29: 5331474.014 ops/s
Iteration  30: 5047824.573 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_unsafe":
  5080594.154 ±(99.9%) 84092.503 ops/s [Average]
  (min, avg, max) = (4827216.255, 5080594.154, 5331474.014), stdev = 125865.710
  CI (99.9%): [4996501.650, 5164686.657] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
ObservableCreateTest._Benchmark.benchmark_unsafe  thrpt   30  5080594.154 ± 84092.503  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_wrap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_wrap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 736504.672 ops/s
# Warmup Iteration   2: 2904961.559 ops/s
# Warmup Iteration   3: 6165265.488 ops/s
# Warmup Iteration   4: 5954220.922 ops/s
# Warmup Iteration   5: 6425444.888 ops/s
# Warmup Iteration   6: 5981596.067 ops/s
# Warmup Iteration   7: 5839028.245 ops/s
# Warmup Iteration   8: 5813708.639 ops/s
# Warmup Iteration   9: 6297919.234 ops/s
# Warmup Iteration  10: 6170846.495 ops/s
# Warmup Iteration  11: 5974267.937 ops/s
# Warmup Iteration  12: 5713117.229 ops/s
# Warmup Iteration  13: 6256321.131 ops/s
# Warmup Iteration  14: 6256761.898 ops/s
# Warmup Iteration  15: 6194261.191 ops/s
# Warmup Iteration  16: 6282331.309 ops/s
# Warmup Iteration  17: 6070776.915 ops/s
# Warmup Iteration  18: 6206815.355 ops/s
# Warmup Iteration  19: 6114708.331 ops/s
# Warmup Iteration  20: 6254857.075 ops/s
# Warmup Iteration  21: 6335305.250 ops/s
# Warmup Iteration  22: 6074579.992 ops/s
# Warmup Iteration  23: 6299930.499 ops/s
# Warmup Iteration  24: 6270934.825 ops/s
# Warmup Iteration  25: 6054223.399 ops/s
# Warmup Iteration  26: 6074271.651 ops/s
# Warmup Iteration  27: 6109054.806 ops/s
# Warmup Iteration  28: 6365015.215 ops/s
# Warmup Iteration  29: 6116772.193 ops/s
# Warmup Iteration  30: 6320161.636 ops/s
Iteration   1: 6092849.633 ops/s
Iteration   2: 6540701.042 ops/s
Iteration   3: 6307914.947 ops/s
Iteration   4: 6129810.110 ops/s
Iteration   5: 6278692.076 ops/s
Iteration   6: 5950817.637 ops/s
Iteration   7: 6453161.905 ops/s
Iteration   8: 6104449.304 ops/s
Iteration   9: 6346225.632 ops/s
Iteration  10: 6272931.998 ops/s
Iteration  11: 6192422.769 ops/s
Iteration  12: 6295991.141 ops/s
Iteration  13: 6163584.330 ops/s
Iteration  14: 6109571.571 ops/s
Iteration  15: 6205004.852 ops/s
Iteration  16: 6163396.702 ops/s
Iteration  17: 6280581.420 ops/s
Iteration  18: 6423259.450 ops/s
Iteration  19: 6140768.942 ops/s
Iteration  20: 6307781.993 ops/s
Iteration  21: 6126845.555 ops/s
Iteration  22: 6182832.571 ops/s
Iteration  23: 6022291.204 ops/s
Iteration  24: 6350851.248 ops/s
Iteration  25: 6086870.627 ops/s
Iteration  26: 6177898.453 ops/s
Iteration  27: 6259434.993 ops/s
Iteration  28: 6058070.094 ops/s
Iteration  29: 5323361.921 ops/s
Iteration  30: 6274814.520 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_wrap":
  6187439.621 ±(99.9%) 139828.148 ops/s [Average]
  (min, avg, max) = (5323361.921, 6187439.621, 6540701.042), stdev = 209288.206
  CI (99.9%): [6047611.473, 6327267.770] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
ObservableCreateTest._Benchmark.benchmark_wrap  thrpt   30  6187439.621 ± 139828.148  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamCompletesDoesNotResultInTwoTerminalEvents$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamCompletesDoesNotResultInTwoTerminalEvents

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147375.724 ops/s
# Warmup Iteration   2: 548709.998 ops/s
# Warmup Iteration   3: 620424.398 ops/s
# Warmup Iteration   4: 638417.300 ops/s
# Warmup Iteration   5: 571857.371 ops/s
# Warmup Iteration   6: 672433.241 ops/s
# Warmup Iteration   7: 682430.080 ops/s
# Warmup Iteration   8: 666893.415 ops/s
# Warmup Iteration   9: 690303.835 ops/s
# Warmup Iteration  10: 676099.149 ops/s
# Warmup Iteration  11: 658263.077 ops/s
# Warmup Iteration  12: 672699.442 ops/s
# Warmup Iteration  13: 676547.705 ops/s
# Warmup Iteration  14: 700261.806 ops/s
# Warmup Iteration  15: 658320.315 ops/s
# Warmup Iteration  16: 660067.197 ops/s
# Warmup Iteration  17: 711723.981 ops/s
# Warmup Iteration  18: 704345.855 ops/s
# Warmup Iteration  19: 704298.396 ops/s
# Warmup Iteration  20: 741918.892 ops/s
# Warmup Iteration  21: 695316.470 ops/s
# Warmup Iteration  22: 726579.525 ops/s
# Warmup Iteration  23: 698630.549 ops/s
# Warmup Iteration  24: 698253.371 ops/s
# Warmup Iteration  25: 734619.821 ops/s
# Warmup Iteration  26: 683106.294 ops/s
# Warmup Iteration  27: 703119.198 ops/s
# Warmup Iteration  28: 725116.821 ops/s
# Warmup Iteration  29: 709797.798 ops/s
# Warmup Iteration  30: 710095.540 ops/s
Iteration   1: 691797.293 ops/s
Iteration   2: 702293.432 ops/s
Iteration   3: 725974.535 ops/s
Iteration   4: 683814.934 ops/s
Iteration   5: 717341.560 ops/s
Iteration   6: 739600.890 ops/s
Iteration   7: 683813.931 ops/s
Iteration   8: 722495.679 ops/s
Iteration   9: 726069.693 ops/s
Iteration  10: 699123.797 ops/s
Iteration  11: 724679.117 ops/s
Iteration  12: 698882.775 ops/s
Iteration  13: 738699.054 ops/s
Iteration  14: 704932.017 ops/s
Iteration  15: 700369.590 ops/s
Iteration  16: 724779.279 ops/s
Iteration  17: 705161.687 ops/s
Iteration  18: 718087.000 ops/s
Iteration  19: 723420.861 ops/s
Iteration  20: 714754.701 ops/s
Iteration  21: 734212.816 ops/s
Iteration  22: 710423.684 ops/s
Iteration  23: 709718.034 ops/s
Iteration  24: 747050.499 ops/s
Iteration  25: 689854.169 ops/s
Iteration  26: 742099.517 ops/s
Iteration  27: 698119.204 ops/s
Iteration  28: 719415.952 ops/s
Iteration  29: 710892.130 ops/s
Iteration  30: 721918.771 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamCompletesDoesNotResultInTwoTerminalEvents":
  714326.553 ±(99.9%) 11423.287 ops/s [Average]
  (min, avg, max) = (683813.931, 714326.553, 747050.499), stdev = 17097.839
  CI (99.9%): [702903.267, 725749.840] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                        Mode  Cnt       Score       Error  Units
ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamCompletesDoesNotResultInTwoTerminalEvents  thrpt   30  714326.553 ± 11423.287  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withCompletableDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withCompletableDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 121265.856 ops/s
# Warmup Iteration   2: 421637.634 ops/s
# Warmup Iteration   3: 465200.103 ops/s
# Warmup Iteration   4: 494502.871 ops/s
# Warmup Iteration   5: 483481.595 ops/s
# Warmup Iteration   6: 501069.430 ops/s
# Warmup Iteration   7: 447584.208 ops/s
# Warmup Iteration   8: 503474.742 ops/s
# Warmup Iteration   9: 524552.845 ops/s
# Warmup Iteration  10: 506851.600 ops/s
# Warmup Iteration  11: 523857.289 ops/s
# Warmup Iteration  12: 495684.464 ops/s
# Warmup Iteration  13: 510555.677 ops/s
# Warmup Iteration  14: 508103.645 ops/s
# Warmup Iteration  15: 515867.182 ops/s
# Warmup Iteration  16: 532228.273 ops/s
# Warmup Iteration  17: 529251.399 ops/s
# Warmup Iteration  18: 542356.656 ops/s
# Warmup Iteration  19: 552808.085 ops/s
# Warmup Iteration  20: 520819.242 ops/s
# Warmup Iteration  21: 549490.181 ops/s
# Warmup Iteration  22: 531096.976 ops/s
# Warmup Iteration  23: 516888.076 ops/s
# Warmup Iteration  24: 545705.993 ops/s
# Warmup Iteration  25: 528588.994 ops/s
# Warmup Iteration  26: 513525.321 ops/s
# Warmup Iteration  27: 532858.715 ops/s
# Warmup Iteration  28: 538306.548 ops/s
# Warmup Iteration  29: 533953.249 ops/s
# Warmup Iteration  30: 518883.202 ops/s
Iteration   1: 529439.781 ops/s
Iteration   2: 549882.652 ops/s
Iteration   3: 511440.823 ops/s
Iteration   4: 539923.513 ops/s
Iteration   5: 525368.514 ops/s
Iteration   6: 529662.500 ops/s
Iteration   7: 528339.113 ops/s
Iteration   8: 517573.290 ops/s
Iteration   9: 543706.484 ops/s
Iteration  10: 516845.025 ops/s
Iteration  11: 530808.064 ops/s
Iteration  12: 542888.066 ops/s
Iteration  13: 514266.973 ops/s
Iteration  14: 517498.580 ops/s
Iteration  15: 534211.327 ops/s
Iteration  16: 514165.742 ops/s
Iteration  17: 532108.399 ops/s
Iteration  18: 545289.048 ops/s
Iteration  19: 517659.374 ops/s
Iteration  20: 547405.646 ops/s
Iteration  21: 542679.358 ops/s
Iteration  22: 512015.166 ops/s
Iteration  23: 444735.364 ops/s
Iteration  24: 529157.913 ops/s
Iteration  25: 537393.838 ops/s
Iteration  26: 521648.105 ops/s
Iteration  27: 526418.453 ops/s
Iteration  28: 526972.493 ops/s
Iteration  29: 536520.063 ops/s
Iteration  30: 520186.232 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDelayTest._Benchmark.benchmark_withCompletableDoubleOnSubscribe":
  526206.997 ±(99.9%) 12724.613 ops/s [Average]
  (min, avg, max) = (444735.364, 526206.997, 549882.652), stdev = 19045.603
  CI (99.9%): [513482.384, 538931.610] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
SingleDelayTest._Benchmark.benchmark_withCompletableDoubleOnSubscribe  thrpt   30  526206.997 ± 12724.613  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamEmitsOnNextResultsInScanFunctionBeingCalledOnlyOnce$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamEmitsOnNextResultsInScanFunctionBeingCalledOnlyOnce

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 266579.363 ops/s
# Warmup Iteration   2: 537541.376 ops/s
# Warmup Iteration   3: 605651.680 ops/s
# Warmup Iteration   4: 653290.148 ops/s
# Warmup Iteration   5: 577034.407 ops/s
# Warmup Iteration   6: 663967.679 ops/s
# Warmup Iteration   7: 640619.540 ops/s
# Warmup Iteration   8: 685439.923 ops/s
# Warmup Iteration   9: 651576.484 ops/s
# Warmup Iteration  10: 675864.585 ops/s
# Warmup Iteration  11: 671928.776 ops/s
# Warmup Iteration  12: 646488.416 ops/s
# Warmup Iteration  13: 686620.701 ops/s
# Warmup Iteration  14: 650381.627 ops/s
# Warmup Iteration  15: 657558.212 ops/s
# Warmup Iteration  16: 686689.966 ops/s
# Warmup Iteration  17: 705086.444 ops/s
# Warmup Iteration  18: 693373.144 ops/s
# Warmup Iteration  19: 717633.218 ops/s
# Warmup Iteration  20: 678377.087 ops/s
# Warmup Iteration  21: 715896.668 ops/s
# Warmup Iteration  22: 693449.695 ops/s
# Warmup Iteration  23: 715232.606 ops/s
# Warmup Iteration  24: 696385.245 ops/s
# Warmup Iteration  25: 704651.851 ops/s
# Warmup Iteration  26: 687220.061 ops/s
# Warmup Iteration  27: 718847.710 ops/s
# Warmup Iteration  28: 697631.260 ops/s
# Warmup Iteration  29: 714740.311 ops/s
# Warmup Iteration  30: 693445.794 ops/s
Iteration   1: 707670.488 ops/s
Iteration   2: 696602.607 ops/s
Iteration   3: 713919.266 ops/s
Iteration   4: 685398.316 ops/s
Iteration   5: 722037.931 ops/s
Iteration   6: 677511.983 ops/s
Iteration   7: 717767.297 ops/s
Iteration   8: 686791.172 ops/s
Iteration   9: 708493.590 ops/s
Iteration  10: 692472.499 ops/s
Iteration  11: 700853.099 ops/s
Iteration  12: 704729.854 ops/s
Iteration  13: 712668.581 ops/s
Iteration  14: 730548.137 ops/s
Iteration  15: 708560.327 ops/s
Iteration  16: 687148.502 ops/s
Iteration  17: 731373.542 ops/s
Iteration  18: 696543.314 ops/s
Iteration  19: 726339.679 ops/s
Iteration  20: 687636.128 ops/s
Iteration  21: 716961.185 ops/s
Iteration  22: 721865.585 ops/s
Iteration  23: 683412.882 ops/s
Iteration  24: 713136.389 ops/s
Iteration  25: 725945.757 ops/s
Iteration  26: 684631.299 ops/s
Iteration  27: 727925.546 ops/s
Iteration  28: 683752.669 ops/s
Iteration  29: 718546.904 ops/s
Iteration  30: 695684.926 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamEmitsOnNextResultsInScanFunctionBeingCalledOnlyOnce":
  705564.315 ±(99.9%) 11017.554 ops/s [Average]
  (min, avg, max) = (677511.983, 705564.315, 731373.542), stdev = 16490.557
  CI (99.9%): [694546.761, 716581.869] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                                  Mode  Cnt       Score       Error  Units
ObservableScanTest._Benchmark.benchmark_scanFunctionThrowsAndUpstreamEmitsOnNextResultsInScanFunctionBeingCalledOnlyOnce  thrpt   30  705564.315 ± 11017.554  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 103028.145 ops/s
# Warmup Iteration   2: 434721.242 ops/s
# Warmup Iteration   3: 472908.698 ops/s
# Warmup Iteration   4: 535857.458 ops/s
# Warmup Iteration   5: 492722.958 ops/s
# Warmup Iteration   6: 517623.008 ops/s
# Warmup Iteration   7: 529904.878 ops/s
# Warmup Iteration   8: 497070.551 ops/s
# Warmup Iteration   9: 522042.782 ops/s
# Warmup Iteration  10: 506375.319 ops/s
# Warmup Iteration  11: 470279.801 ops/s
# Warmup Iteration  12: 491531.755 ops/s
# Warmup Iteration  13: 491470.487 ops/s
# Warmup Iteration  14: 526702.322 ops/s
# Warmup Iteration  15: 475260.214 ops/s
# Warmup Iteration  16: 515815.301 ops/s
# Warmup Iteration  17: 548047.133 ops/s
# Warmup Iteration  18: 529462.598 ops/s
# Warmup Iteration  19: 540496.573 ops/s
# Warmup Iteration  20: 548721.740 ops/s
# Warmup Iteration  21: 509954.654 ops/s
# Warmup Iteration  22: 549804.446 ops/s
# Warmup Iteration  23: 540812.469 ops/s
# Warmup Iteration  24: 522866.484 ops/s
# Warmup Iteration  25: 548428.984 ops/s
# Warmup Iteration  26: 521498.496 ops/s
# Warmup Iteration  27: 557539.468 ops/s
# Warmup Iteration  28: 517370.234 ops/s
# Warmup Iteration  29: 522465.141 ops/s
# Warmup Iteration  30: 557023.896 ops/s
Iteration   1: 519723.793 ops/s
Iteration   2: 543717.136 ops/s
Iteration   3: 532113.738 ops/s
Iteration   4: 546624.142 ops/s
Iteration   5: 559392.280 ops/s
Iteration   6: 519983.680 ops/s
Iteration   7: 553634.988 ops/s
Iteration   8: 533507.350 ops/s
Iteration   9: 547504.039 ops/s
Iteration  10: 519919.868 ops/s
Iteration  11: 538308.884 ops/s
Iteration  12: 547679.317 ops/s
Iteration  13: 523226.486 ops/s
Iteration  14: 526565.299 ops/s
Iteration  15: 552922.477 ops/s
Iteration  16: 522789.156 ops/s
Iteration  17: 563049.667 ops/s
Iteration  18: 371179.628 ops/s
Iteration  19: 556516.103 ops/s
Iteration  20: 525729.975 ops/s
Iteration  21: 548217.774 ops/s
Iteration  22: 520814.244 ops/s
Iteration  23: 558515.802 ops/s
Iteration  24: 532989.176 ops/s
Iteration  25: 522348.971 ops/s
Iteration  26: 550566.175 ops/s
Iteration  27: 551103.938 ops/s
Iteration  28: 558874.483 ops/s
Iteration  29: 557561.775 ops/s
Iteration  30: 530593.002 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnDoubleOnSubscribe":
  534522.445 ±(99.9%) 22781.259 ops/s [Average]
  (min, avg, max) = (371179.628, 534522.445, 563049.667), stdev = 34097.918
  CI (99.9%): [511741.186, 557303.704] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
CompletableOnErrorXTest._Benchmark.benchmark_onErrorReturnDoubleOnSubscribe  thrpt   30  534522.445 ± 22781.259  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_disposeWhileRunningError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_disposeWhileRunningError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 68717.486 ops/s
# Warmup Iteration   2: 195101.651 ops/s
# Warmup Iteration   3: 236174.287 ops/s
# Warmup Iteration   4: 220574.716 ops/s
# Warmup Iteration   5: 224415.147 ops/s
# Warmup Iteration   6: 210024.709 ops/s
# Warmup Iteration   7: 235150.394 ops/s
# Warmup Iteration   8: 232289.912 ops/s
# Warmup Iteration   9: 238605.151 ops/s
# Warmup Iteration  10: 225219.230 ops/s
# Warmup Iteration  11: 223187.141 ops/s
# Warmup Iteration  12: 235410.687 ops/s
# Warmup Iteration  13: 228096.520 ops/s
# Warmup Iteration  14: 236560.088 ops/s
# Warmup Iteration  15: 221649.879 ops/s
# Warmup Iteration  16: 233442.824 ops/s
# Warmup Iteration  17: 238785.676 ops/s
# Warmup Iteration  18: 236704.596 ops/s
# Warmup Iteration  19: 243545.694 ops/s
# Warmup Iteration  20: 237015.521 ops/s
# Warmup Iteration  21: 249079.519 ops/s
# Warmup Iteration  22: 226756.951 ops/s
# Warmup Iteration  23: 239664.017 ops/s
# Warmup Iteration  24: 235623.087 ops/s
# Warmup Iteration  25: 246327.569 ops/s
# Warmup Iteration  26: 235359.522 ops/s
# Warmup Iteration  27: 244352.611 ops/s
# Warmup Iteration  28: 233083.909 ops/s
# Warmup Iteration  29: 243522.381 ops/s
# Warmup Iteration  30: 238368.394 ops/s
Iteration   1: 238349.125 ops/s
Iteration   2: 243851.707 ops/s
Iteration   3: 231530.804 ops/s
Iteration   4: 244781.791 ops/s
Iteration   5: 240143.524 ops/s
Iteration   6: 242629.258 ops/s
Iteration   7: 248720.547 ops/s
Iteration   8: 236601.215 ops/s
Iteration   9: 240074.233 ops/s
Iteration  10: 251416.205 ops/s
Iteration  11: 230717.770 ops/s
Iteration  12: 234058.178 ops/s
Iteration  13: 250893.154 ops/s
Iteration  14: 235409.866 ops/s
Iteration  15: 232692.682 ops/s
Iteration  16: 242215.652 ops/s
Iteration  17: 241469.249 ops/s
Iteration  18: 246713.325 ops/s
Iteration  19: 232984.725 ops/s
Iteration  20: 243413.988 ops/s
Iteration  21: 243360.239 ops/s
Iteration  22: 236027.974 ops/s
Iteration  23: 244925.309 ops/s
Iteration  24: 240130.169 ops/s
Iteration  25: 241812.084 ops/s
Iteration  26: 251238.209 ops/s
Iteration  27: 234494.587 ops/s
Iteration  28: 244057.593 ops/s
Iteration  29: 247997.751 ops/s
Iteration  30: 234243.010 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromRunnableTest._Benchmark.benchmark_disposeWhileRunningError":
  240898.464 ±(99.9%) 4049.190 ops/s [Average]
  (min, avg, max) = (230717.770, 240898.464, 251416.205), stdev = 6060.638
  CI (99.9%): [236849.274, 244947.654] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
CompletableFromRunnableTest._Benchmark.benchmark_disposeWhileRunningError  thrpt   30  240898.464 ± 4049.190  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_doubleOnSubscribeObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_doubleOnSubscribeObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.733 ops/s
# Warmup Iteration   2: 25096.147 ops/s
# Warmup Iteration   3: 64052.168 ops/s
# Warmup Iteration   4: 83396.616 ops/s
# Warmup Iteration   5: 91379.958 ops/s
# Warmup Iteration   6: 210350.689 ops/s
# Warmup Iteration   7: 233460.441 ops/s
# Warmup Iteration   8: 253767.921 ops/s
# Warmup Iteration   9: 243092.336 ops/s
# Warmup Iteration  10: 240465.303 ops/s
# Warmup Iteration  11: 249742.611 ops/s
# Warmup Iteration  12: 236100.843 ops/s
# Warmup Iteration  13: 249407.186 ops/s
# Warmup Iteration  14: 248448.849 ops/s
# Warmup Iteration  15: 243381.435 ops/s
# Warmup Iteration  16: 242679.266 ops/s
# Warmup Iteration  17: 259779.316 ops/s
# Warmup Iteration  18: 256514.194 ops/s
# Warmup Iteration  19: 245546.649 ops/s
# Warmup Iteration  20: 251619.413 ops/s
# Warmup Iteration  21: 252725.514 ops/s
# Warmup Iteration  22: 258174.581 ops/s
# Warmup Iteration  23: 251580.107 ops/s
# Warmup Iteration  24: 247189.498 ops/s
# Warmup Iteration  25: 241966.424 ops/s
# Warmup Iteration  26: 252582.585 ops/s
# Warmup Iteration  27: 241023.331 ops/s
# Warmup Iteration  28: 243808.850 ops/s
# Warmup Iteration  29: 252021.697 ops/s
# Warmup Iteration  30: 240404.237 ops/s
Iteration   1: 261501.639 ops/s
Iteration   2: 258087.428 ops/s
Iteration   3: 243864.127 ops/s
Iteration   4: 257350.514 ops/s
Iteration   5: 243291.876 ops/s
Iteration   6: 251052.800 ops/s
Iteration   7: 246729.318 ops/s
Iteration   8: 245657.821 ops/s
Iteration   9: 244336.169 ops/s
Iteration  10: 246298.264 ops/s
Iteration  11: 249508.212 ops/s
Iteration  12: 199918.097 ops/s
Iteration  13: 257356.170 ops/s
Iteration  14: 254558.276 ops/s
Iteration  15: 245728.844 ops/s
Iteration  16: 255282.444 ops/s
Iteration  17: 235927.209 ops/s
Iteration  18: 251847.457 ops/s
Iteration  19: 258822.652 ops/s
Iteration  20: 256803.208 ops/s
Iteration  21: 241354.312 ops/s
Iteration  22: 263373.289 ops/s
Iteration  23: 258509.007 ops/s
Iteration  24: 244092.641 ops/s
Iteration  25: 253849.412 ops/s
Iteration  26: 248310.917 ops/s
Iteration  27: 246774.836 ops/s
Iteration  28: 257076.603 ops/s
Iteration  29: 249359.534 ops/s
Iteration  30: 241793.276 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSampleTest._Benchmark.benchmark_doubleOnSubscribeObservable":
  248947.212 ±(99.9%) 7687.478 ops/s [Average]
  (min, avg, max) = (199918.097, 248947.212, 263373.289), stdev = 11506.256
  CI (99.9%): [241259.734, 256634.690] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableSampleTest._Benchmark.benchmark_doubleOnSubscribeObservable  thrpt   30  248947.212 ± 7687.478  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102797.646 ops/s
# Warmup Iteration   2: 442655.972 ops/s
# Warmup Iteration   3: 448484.881 ops/s
# Warmup Iteration   4: 455924.440 ops/s
# Warmup Iteration   5: 497862.029 ops/s
# Warmup Iteration   6: 425348.815 ops/s
# Warmup Iteration   7: 512413.643 ops/s
# Warmup Iteration   8: 505126.343 ops/s
# Warmup Iteration   9: 504504.037 ops/s
# Warmup Iteration  10: 512400.757 ops/s
# Warmup Iteration  11: 490619.238 ops/s
# Warmup Iteration  12: 528245.234 ops/s
# Warmup Iteration  13: 490611.860 ops/s
# Warmup Iteration  14: 509004.565 ops/s
# Warmup Iteration  15: 505221.439 ops/s
# Warmup Iteration  16: 509252.367 ops/s
# Warmup Iteration  17: 553084.958 ops/s
# Warmup Iteration  18: 505420.444 ops/s
# Warmup Iteration  19: 525545.397 ops/s
# Warmup Iteration  20: 555618.738 ops/s
# Warmup Iteration  21: 495499.762 ops/s
# Warmup Iteration  22: 533128.824 ops/s
# Warmup Iteration  23: 522492.665 ops/s
# Warmup Iteration  24: 519150.189 ops/s
# Warmup Iteration  25: 535889.095 ops/s
# Warmup Iteration  26: 508617.071 ops/s
# Warmup Iteration  27: 541409.463 ops/s
# Warmup Iteration  28: 520129.716 ops/s
# Warmup Iteration  29: 529087.550 ops/s
# Warmup Iteration  30: 516113.893 ops/s
Iteration   1: 526671.725 ops/s
Iteration   2: 513648.392 ops/s
Iteration   3: 495658.815 ops/s
Iteration   4: 532333.393 ops/s
Iteration   5: 507162.136 ops/s
Iteration   6: 540521.162 ops/s
Iteration   7: 529759.706 ops/s
Iteration   8: 535301.567 ops/s
Iteration   9: 524134.738 ops/s
Iteration  10: 536590.546 ops/s
Iteration  11: 530760.149 ops/s
Iteration  12: 512604.938 ops/s
Iteration  13: 513287.496 ops/s
Iteration  14: 528459.211 ops/s
Iteration  15: 533963.272 ops/s
Iteration  16: 521439.957 ops/s
Iteration  17: 535505.244 ops/s
Iteration  18: 534749.132 ops/s
Iteration  19: 515625.945 ops/s
Iteration  20: 534843.708 ops/s
Iteration  21: 506784.147 ops/s
Iteration  22: 538588.453 ops/s
Iteration  23: 513908.444 ops/s
Iteration  24: 534229.263 ops/s
Iteration  25: 529708.990 ops/s
Iteration  26: 539912.721 ops/s
Iteration  27: 517371.964 ops/s
Iteration  28: 543117.211 ops/s
Iteration  29: 495819.276 ops/s
Iteration  30: 524062.416 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableUsingTest._Benchmark.benchmark_doubleOnSubscribe":
  524884.137 ±(99.9%) 8681.122 ops/s [Average]
  (min, avg, max) = (495658.815, 524884.137, 543117.211), stdev = 12993.496
  CI (99.9%): [516203.015, 533565.260] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
CompletableUsingTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  524884.137 ± 8681.122  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21166.978 ops/s
# Warmup Iteration   2: 126919.131 ops/s
# Warmup Iteration   3: 138038.108 ops/s
# Warmup Iteration   4: 151002.125 ops/s
# Warmup Iteration   5: 156110.224 ops/s
# Warmup Iteration   6: 154871.943 ops/s
# Warmup Iteration   7: 150504.331 ops/s
# Warmup Iteration   8: 152581.216 ops/s
# Warmup Iteration   9: 165118.670 ops/s
# Warmup Iteration  10: 155607.051 ops/s
# Warmup Iteration  11: 156749.523 ops/s
# Warmup Iteration  12: 159777.320 ops/s
# Warmup Iteration  13: 159383.626 ops/s
# Warmup Iteration  14: 158326.789 ops/s
# Warmup Iteration  15: 161002.336 ops/s
# Warmup Iteration  16: 157059.362 ops/s
# Warmup Iteration  17: 166366.315 ops/s
# Warmup Iteration  18: 165845.637 ops/s
# Warmup Iteration  19: 167383.304 ops/s
# Warmup Iteration  20: 160818.131 ops/s
# Warmup Iteration  21: 163626.904 ops/s
# Warmup Iteration  22: 170712.628 ops/s
# Warmup Iteration  23: 158665.212 ops/s
# Warmup Iteration  24: 158446.252 ops/s
# Warmup Iteration  25: 172937.975 ops/s
# Warmup Iteration  26: 160925.488 ops/s
# Warmup Iteration  27: 164305.259 ops/s
# Warmup Iteration  28: 165170.796 ops/s
# Warmup Iteration  29: 158672.388 ops/s
# Warmup Iteration  30: 163213.285 ops/s
Iteration   1: 167556.553 ops/s
Iteration   2: 165300.864 ops/s
Iteration   3: 169672.907 ops/s
Iteration   4: 161075.667 ops/s
Iteration   5: 167343.273 ops/s
Iteration   6: 162344.021 ops/s
Iteration   7: 139973.709 ops/s
Iteration   8: 158619.958 ops/s
Iteration   9: 166080.067 ops/s
Iteration  10: 166285.157 ops/s
Iteration  11: 159938.896 ops/s
Iteration  12: 166327.659 ops/s
Iteration  13: 162856.362 ops/s
Iteration  14: 168178.322 ops/s
Iteration  15: 155301.199 ops/s
Iteration  16: 167958.172 ops/s
Iteration  17: 161984.491 ops/s
Iteration  18: 163864.754 ops/s
Iteration  19: 168330.754 ops/s
Iteration  20: 164960.195 ops/s
Iteration  21: 165932.328 ops/s
Iteration  22: 167213.121 ops/s
Iteration  23: 162938.410 ops/s
Iteration  24: 159437.088 ops/s
Iteration  25: 163780.801 ops/s
Iteration  26: 168532.019 ops/s
Iteration  27: 161762.581 ops/s
Iteration  28: 168815.120 ops/s
Iteration  29: 167089.614 ops/s
Iteration  30: 160774.733 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_doubleOnSubscribe":
  163674.293 ±(99.9%) 3807.963 ops/s [Average]
  (min, avg, max) = (139973.709, 163674.293, 169672.907), stdev = 5699.580
  CI (99.9%): [159866.330, 167482.256] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  163674.293 ± 3807.963  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_basicWithError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_basicWithError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46574.331 ops/s
# Warmup Iteration   2: 146042.184 ops/s
# Warmup Iteration   3: 164272.779 ops/s
# Warmup Iteration   4: 165220.457 ops/s
# Warmup Iteration   5: 165026.021 ops/s
# Warmup Iteration   6: 175874.082 ops/s
# Warmup Iteration   7: 178861.071 ops/s
# Warmup Iteration   8: 183272.024 ops/s
# Warmup Iteration   9: 179951.890 ops/s
# Warmup Iteration  10: 173565.539 ops/s
# Warmup Iteration  11: 178502.560 ops/s
# Warmup Iteration  12: 176993.901 ops/s
# Warmup Iteration  13: 180059.616 ops/s
# Warmup Iteration  14: 174394.887 ops/s
# Warmup Iteration  15: 180121.805 ops/s
# Warmup Iteration  16: 184148.911 ops/s
# Warmup Iteration  17: 185500.290 ops/s
# Warmup Iteration  18: 178327.502 ops/s
# Warmup Iteration  19: 192222.996 ops/s
# Warmup Iteration  20: 190126.940 ops/s
# Warmup Iteration  21: 182137.541 ops/s
# Warmup Iteration  22: 191089.615 ops/s
# Warmup Iteration  23: 189615.837 ops/s
# Warmup Iteration  24: 181248.472 ops/s
# Warmup Iteration  25: 191995.107 ops/s
# Warmup Iteration  26: 183306.110 ops/s
# Warmup Iteration  27: 188431.814 ops/s
# Warmup Iteration  28: 189738.347 ops/s
# Warmup Iteration  29: 186312.951 ops/s
# Warmup Iteration  30: 189471.518 ops/s
Iteration   1: 185836.030 ops/s
Iteration   2: 184530.671 ops/s
Iteration   3: 191671.684 ops/s
Iteration   4: 190877.298 ops/s
Iteration   5: 182636.790 ops/s
Iteration   6: 190519.067 ops/s
Iteration   7: 184224.103 ops/s
Iteration   8: 189715.547 ops/s
Iteration   9: 185187.771 ops/s
Iteration  10: 192202.356 ops/s
Iteration  11: 185110.493 ops/s
Iteration  12: 184677.765 ops/s
Iteration  13: 190062.382 ops/s
Iteration  14: 180775.093 ops/s
Iteration  15: 190606.117 ops/s
Iteration  16: 183168.865 ops/s
Iteration  17: 185997.135 ops/s
Iteration  18: 188384.615 ops/s
Iteration  19: 181636.625 ops/s
Iteration  20: 191590.961 ops/s
Iteration  21: 185919.860 ops/s
Iteration  22: 185484.007 ops/s
Iteration  23: 193162.224 ops/s
Iteration  24: 191403.622 ops/s
Iteration  25: 184299.348 ops/s
Iteration  26: 189527.966 ops/s
Iteration  27: 185207.743 ops/s
Iteration  28: 189211.801 ops/s
Iteration  29: 183568.005 ops/s
Iteration  30: 187152.288 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableCreateTest._Benchmark.benchmark_basicWithError":
  187144.941 ±(99.9%) 2329.287 ops/s [Average]
  (min, avg, max) = (180775.093, 187144.941, 193162.224), stdev = 3486.368
  CI (99.9%): [184815.654, 189474.228] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
CompletableCreateTest._Benchmark.benchmark_basicWithError  thrpt   30  187144.941 ± 2329.287  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableSingleObserver$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableSingleObserver

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73737.550 ops/s
# Warmup Iteration   2: 243533.379 ops/s
# Warmup Iteration   3: 262655.557 ops/s
# Warmup Iteration   4: 320018.857 ops/s
# Warmup Iteration   5: 325008.675 ops/s
# Warmup Iteration   6: 305091.645 ops/s
# Warmup Iteration   7: 323508.348 ops/s
# Warmup Iteration   8: 326834.454 ops/s
# Warmup Iteration   9: 307518.682 ops/s
# Warmup Iteration  10: 319809.691 ops/s
# Warmup Iteration  11: 321081.658 ops/s
# Warmup Iteration  12: 311661.773 ops/s
# Warmup Iteration  13: 328191.266 ops/s
# Warmup Iteration  14: 315671.475 ops/s
# Warmup Iteration  15: 316476.495 ops/s
# Warmup Iteration  16: 329186.010 ops/s
# Warmup Iteration  17: 323130.406 ops/s
# Warmup Iteration  18: 326005.629 ops/s
# Warmup Iteration  19: 340129.021 ops/s
# Warmup Iteration  20: 320264.207 ops/s
# Warmup Iteration  21: 337874.417 ops/s
# Warmup Iteration  22: 328579.613 ops/s
# Warmup Iteration  23: 335135.264 ops/s
# Warmup Iteration  24: 332083.747 ops/s
# Warmup Iteration  25: 317091.764 ops/s
# Warmup Iteration  26: 321486.062 ops/s
# Warmup Iteration  27: 317121.496 ops/s
# Warmup Iteration  28: 331513.679 ops/s
# Warmup Iteration  29: 327138.697 ops/s
# Warmup Iteration  30: 330762.370 ops/s
Iteration   1: 270027.786 ops/s
Iteration   2: 324891.027 ops/s
Iteration   3: 335116.837 ops/s
Iteration   4: 327359.444 ops/s
Iteration   5: 319999.809 ops/s
Iteration   6: 328784.168 ops/s
Iteration   7: 326681.588 ops/s
Iteration   8: 332769.750 ops/s
Iteration   9: 319054.257 ops/s
Iteration  10: 330095.810 ops/s
Iteration  11: 336434.284 ops/s
Iteration  12: 342111.489 ops/s
Iteration  13: 321065.287 ops/s
Iteration  14: 334121.600 ops/s
Iteration  15: 329246.542 ops/s
Iteration  16: 330255.827 ops/s
Iteration  17: 321113.937 ops/s
Iteration  18: 335648.414 ops/s
Iteration  19: 330370.866 ops/s
Iteration  20: 340936.595 ops/s
Iteration  21: 320399.500 ops/s
Iteration  22: 334556.427 ops/s
Iteration  23: 329122.400 ops/s
Iteration  24: 323099.512 ops/s
Iteration  25: 343014.082 ops/s
Iteration  26: 327919.480 ops/s
Iteration  27: 335333.509 ops/s
Iteration  28: 334877.900 ops/s
Iteration  29: 325746.929 ops/s
Iteration  30: 325743.033 ops/s


Result "io.reactivex.rxjava3.internal.util.EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableSingleObserver":
  327863.270 ±(99.9%) 8504.189 ops/s [Average]
  (min, avg, max) = (270027.786, 327863.270, 343014.082), stdev = 12728.670
  CI (99.9%): [319359.081, 336367.458] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
EndConsumerHelperTest._Benchmark.benchmark_checkDoubleDisposableSingleObserver  thrpt   30  327863.270 ± 8504.189  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastSourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastSourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61153.526 ops/s
# Warmup Iteration   2: 162446.308 ops/s
# Warmup Iteration   3: 208734.102 ops/s
# Warmup Iteration   4: 253375.967 ops/s
# Warmup Iteration   5: 230007.666 ops/s
# Warmup Iteration   6: 235586.653 ops/s
# Warmup Iteration   7: 242060.909 ops/s
# Warmup Iteration   8: 243198.479 ops/s
# Warmup Iteration   9: 245607.781 ops/s
# Warmup Iteration  10: 229286.193 ops/s
# Warmup Iteration  11: 243964.840 ops/s
# Warmup Iteration  12: 248798.450 ops/s
# Warmup Iteration  13: 232527.316 ops/s
# Warmup Iteration  14: 252240.014 ops/s
# Warmup Iteration  15: 245796.249 ops/s
# Warmup Iteration  16: 234589.651 ops/s
# Warmup Iteration  17: 255398.526 ops/s
# Warmup Iteration  18: 252062.975 ops/s
# Warmup Iteration  19: 252409.034 ops/s
# Warmup Iteration  20: 258313.101 ops/s
# Warmup Iteration  21: 253784.300 ops/s
# Warmup Iteration  22: 244338.666 ops/s
# Warmup Iteration  23: 251162.630 ops/s
# Warmup Iteration  24: 238290.403 ops/s
# Warmup Iteration  25: 250296.944 ops/s
# Warmup Iteration  26: 254327.238 ops/s
# Warmup Iteration  27: 247125.759 ops/s
# Warmup Iteration  28: 257904.718 ops/s
# Warmup Iteration  29: 249573.001 ops/s
# Warmup Iteration  30: 250854.077 ops/s
Iteration   1: 250444.528 ops/s
Iteration   2: 248760.992 ops/s
Iteration   3: 255120.116 ops/s
Iteration   4: 257784.373 ops/s
Iteration   5: 246120.456 ops/s
Iteration   6: 249709.988 ops/s
Iteration   7: 258927.202 ops/s
Iteration   8: 246901.153 ops/s
Iteration   9: 259119.391 ops/s
Iteration  10: 252260.383 ops/s
Iteration  11: 248389.703 ops/s
Iteration  12: 256181.372 ops/s
Iteration  13: 259338.862 ops/s
Iteration  14: 248655.419 ops/s
Iteration  15: 250971.104 ops/s
Iteration  16: 258554.649 ops/s
Iteration  17: 241293.150 ops/s
Iteration  18: 259958.242 ops/s
Iteration  19: 247672.584 ops/s
Iteration  20: 263332.100 ops/s
Iteration  21: 251435.662 ops/s
Iteration  22: 248730.905 ops/s
Iteration  23: 262047.701 ops/s
Iteration  24: 247605.519 ops/s
Iteration  25: 259075.679 ops/s
Iteration  26: 248820.100 ops/s
Iteration  27: 256969.301 ops/s
Iteration  28: 254693.067 ops/s
Iteration  29: 245920.473 ops/s
Iteration  30: 241326.765 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastSourceIgnoresCancel":
  252537.365 ±(99.9%) 4022.031 ops/s [Average]
  (min, avg, max) = (241293.150, 252537.365, 263332.100), stdev = 6019.987
  CI (99.9%): [248515.334, 256559.395] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastSourceIgnoresCancel  thrpt   30  252537.365 ± 4022.031  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 151792.481 ops/s
# Warmup Iteration   2: 437127.482 ops/s
# Warmup Iteration   3: 509689.034 ops/s
# Warmup Iteration   4: 500088.160 ops/s
# Warmup Iteration   5: 521962.045 ops/s
# Warmup Iteration   6: 513112.333 ops/s
# Warmup Iteration   7: 495633.027 ops/s
# Warmup Iteration   8: 478841.112 ops/s
# Warmup Iteration   9: 509176.942 ops/s
# Warmup Iteration  10: 490597.131 ops/s
# Warmup Iteration  11: 503464.203 ops/s
# Warmup Iteration  12: 520644.866 ops/s
# Warmup Iteration  13: 506668.191 ops/s
# Warmup Iteration  14: 505478.254 ops/s
# Warmup Iteration  15: 518770.176 ops/s
# Warmup Iteration  16: 504882.877 ops/s
# Warmup Iteration  17: 532359.361 ops/s
# Warmup Iteration  18: 539500.149 ops/s
# Warmup Iteration  19: 539339.539 ops/s
# Warmup Iteration  20: 518438.291 ops/s
# Warmup Iteration  21: 551500.699 ops/s
# Warmup Iteration  22: 528765.533 ops/s
# Warmup Iteration  23: 520721.164 ops/s
# Warmup Iteration  24: 532843.327 ops/s
# Warmup Iteration  25: 433936.909 ops/s
# Warmup Iteration  26: 527426.758 ops/s
# Warmup Iteration  27: 509831.271 ops/s
# Warmup Iteration  28: 534322.545 ops/s
# Warmup Iteration  29: 539810.724 ops/s
# Warmup Iteration  30: 541495.241 ops/s
Iteration   1: 541549.141 ops/s
Iteration   2: 554910.870 ops/s
Iteration   3: 512189.328 ops/s
Iteration   4: 545997.665 ops/s
Iteration   5: 515224.252 ops/s
Iteration   6: 535629.835 ops/s
Iteration   7: 541414.426 ops/s
Iteration   8: 536019.615 ops/s
Iteration   9: 521356.599 ops/s
Iteration  10: 537353.365 ops/s
Iteration  11: 517978.615 ops/s
Iteration  12: 522242.695 ops/s
Iteration  13: 558823.851 ops/s
Iteration  14: 512111.646 ops/s
Iteration  15: 522347.636 ops/s
Iteration  16: 550494.058 ops/s
Iteration  17: 508867.954 ops/s
Iteration  18: 544358.523 ops/s
Iteration  19: 526384.597 ops/s
Iteration  20: 532981.381 ops/s
Iteration  21: 537034.825 ops/s
Iteration  22: 532994.676 ops/s
Iteration  23: 544133.609 ops/s
Iteration  24: 535416.916 ops/s
Iteration  25: 533958.129 ops/s
Iteration  26: 524403.564 ops/s
Iteration  27: 547455.236 ops/s
Iteration  28: 523183.798 ops/s
Iteration  29: 527659.888 ops/s
Iteration  30: 545430.056 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleDoubleOnSubscribe":
  532996.892 ±(99.9%) 8808.619 ops/s [Average]
  (min, avg, max) = (508867.954, 532996.892, 558823.851), stdev = 13184.328
  CI (99.9%): [524188.272, 541805.511] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleDoubleOnSubscribe  thrpt   30  532996.892 ± 8808.619  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleSourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleSourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63031.662 ops/s
# Warmup Iteration   2: 200906.732 ops/s
# Warmup Iteration   3: 214008.649 ops/s
# Warmup Iteration   4: 240430.353 ops/s
# Warmup Iteration   5: 236069.782 ops/s
# Warmup Iteration   6: 236654.658 ops/s
# Warmup Iteration   7: 250465.634 ops/s
# Warmup Iteration   8: 252488.175 ops/s
# Warmup Iteration   9: 240138.533 ops/s
# Warmup Iteration  10: 235769.948 ops/s
# Warmup Iteration  11: 237943.509 ops/s
# Warmup Iteration  12: 250649.934 ops/s
# Warmup Iteration  13: 231385.766 ops/s
# Warmup Iteration  14: 243109.418 ops/s
# Warmup Iteration  15: 236577.772 ops/s
# Warmup Iteration  16: 249415.436 ops/s
# Warmup Iteration  17: 246439.379 ops/s
# Warmup Iteration  18: 250241.600 ops/s
# Warmup Iteration  19: 258219.661 ops/s
# Warmup Iteration  20: 247485.107 ops/s
# Warmup Iteration  21: 250823.233 ops/s
# Warmup Iteration  22: 245709.419 ops/s
# Warmup Iteration  23: 253102.865 ops/s
# Warmup Iteration  24: 249822.893 ops/s
# Warmup Iteration  25: 250254.258 ops/s
# Warmup Iteration  26: 249164.507 ops/s
# Warmup Iteration  27: 253476.028 ops/s
# Warmup Iteration  28: 247847.283 ops/s
# Warmup Iteration  29: 259456.819 ops/s
# Warmup Iteration  30: 246668.062 ops/s
Iteration   1: 259660.868 ops/s
Iteration   2: 246377.981 ops/s
Iteration   3: 246333.279 ops/s
Iteration   4: 253183.785 ops/s
Iteration   5: 244073.587 ops/s
Iteration   6: 255497.123 ops/s
Iteration   7: 246636.289 ops/s
Iteration   8: 240945.557 ops/s
Iteration   9: 255116.060 ops/s
Iteration  10: 239057.940 ops/s
Iteration  11: 254488.157 ops/s
Iteration  12: 258316.487 ops/s
Iteration  13: 248661.395 ops/s
Iteration  14: 255758.726 ops/s
Iteration  15: 253460.398 ops/s
Iteration  16: 248498.824 ops/s
Iteration  17: 253888.789 ops/s
Iteration  18: 246050.120 ops/s
Iteration  19: 244158.469 ops/s
Iteration  20: 255275.994 ops/s
Iteration  21: 242781.476 ops/s
Iteration  22: 248580.185 ops/s
Iteration  23: 256608.907 ops/s
Iteration  24: 248987.596 ops/s
Iteration  25: 253432.699 ops/s
Iteration  26: 250272.727 ops/s
Iteration  27: 253567.370 ops/s
Iteration  28: 244655.566 ops/s
Iteration  29: 247595.193 ops/s
Iteration  30: 254949.995 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleSourceIgnoresCancel":
  250229.051 ±(99.9%) 3609.498 ops/s [Average]
  (min, avg, max) = (239057.940, 250229.051, 259660.868), stdev = 5402.527
  CI (99.9%): [246619.553, 253838.550] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleSourceIgnoresCancel  thrpt   30  250229.051 ± 3609.498  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 18275.917 ops/s
# Warmup Iteration   2: 99076.650 ops/s
# Warmup Iteration   3: 194202.012 ops/s
# Warmup Iteration   4: 206689.428 ops/s
# Warmup Iteration   5: 204328.989 ops/s
# Warmup Iteration   6: 230756.609 ops/s
# Warmup Iteration   7: 231253.290 ops/s
# Warmup Iteration   8: 222466.124 ops/s
# Warmup Iteration   9: 226349.120 ops/s
# Warmup Iteration  10: 230178.962 ops/s
# Warmup Iteration  11: 225774.379 ops/s
# Warmup Iteration  12: 220017.119 ops/s
# Warmup Iteration  13: 230788.040 ops/s
# Warmup Iteration  14: 223531.094 ops/s
# Warmup Iteration  15: 223957.619 ops/s
# Warmup Iteration  16: 222871.996 ops/s
# Warmup Iteration  17: 232085.339 ops/s
# Warmup Iteration  18: 238675.365 ops/s
# Warmup Iteration  19: 234085.394 ops/s
# Warmup Iteration  20: 198705.011 ops/s
# Warmup Iteration  21: 227617.227 ops/s
# Warmup Iteration  22: 237540.768 ops/s
# Warmup Iteration  23: 241458.791 ops/s
# Warmup Iteration  24: 225798.865 ops/s
# Warmup Iteration  25: 232910.392 ops/s
# Warmup Iteration  26: 244384.676 ops/s
# Warmup Iteration  27: 229797.280 ops/s
# Warmup Iteration  28: 226342.482 ops/s
# Warmup Iteration  29: 237638.146 ops/s
# Warmup Iteration  30: 231196.464 ops/s
Iteration   1: 234260.175 ops/s
Iteration   2: 237264.014 ops/s
Iteration   3: 236674.146 ops/s
Iteration   4: 236321.153 ops/s
Iteration   5: 227394.824 ops/s
Iteration   6: 233060.203 ops/s
Iteration   7: 242363.833 ops/s
Iteration   8: 236216.717 ops/s
Iteration   9: 236313.846 ops/s
Iteration  10: 232171.263 ops/s
Iteration  11: 237567.336 ops/s
Iteration  12: 240614.414 ops/s
Iteration  13: 236880.644 ops/s
Iteration  14: 240223.821 ops/s
Iteration  15: 238493.865 ops/s
Iteration  16: 234226.038 ops/s
Iteration  17: 239229.446 ops/s
Iteration  18: 232615.058 ops/s
Iteration  19: 235526.082 ops/s
Iteration  20: 239211.449 ops/s
Iteration  21: 230258.229 ops/s
Iteration  22: 238219.057 ops/s
Iteration  23: 231118.061 ops/s
Iteration  24: 241664.772 ops/s
Iteration  25: 232670.405 ops/s
Iteration  26: 236975.700 ops/s
Iteration  27: 244574.545 ops/s
Iteration  28: 229634.672 ops/s
Iteration  29: 242774.035 ops/s
Iteration  30: 225838.516 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCollectTest._Benchmark.benchmark_badSource":
  236011.877 ±(99.9%) 3029.755 ops/s [Average]
  (min, avg, max) = (225838.516, 236011.877, 244574.545), stdev = 4534.795
  CI (99.9%): [232982.123, 239041.632] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ObservableCollectTest._Benchmark.benchmark_badSource  thrpt   30  236011.877 ± 3029.755  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryDirectDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryDirectDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38379.354 ops/s
# Warmup Iteration   2: 293136.752 ops/s
# Warmup Iteration   3: 330823.474 ops/s
# Warmup Iteration   4: 352173.753 ops/s
# Warmup Iteration   5: 322384.974 ops/s
# Warmup Iteration   6: 383851.897 ops/s
# Warmup Iteration   7: 368154.577 ops/s
# Warmup Iteration   8: 371041.471 ops/s
# Warmup Iteration   9: 385888.901 ops/s
# Warmup Iteration  10: 370944.354 ops/s
# Warmup Iteration  11: 361311.259 ops/s
# Warmup Iteration  12: 394104.640 ops/s
# Warmup Iteration  13: 362382.383 ops/s
# Warmup Iteration  14: 381436.533 ops/s
# Warmup Iteration  15: 382726.472 ops/s
# Warmup Iteration  16: 373490.057 ops/s
# Warmup Iteration  17: 388107.052 ops/s
# Warmup Iteration  18: 379037.937 ops/s
# Warmup Iteration  19: 393484.783 ops/s
# Warmup Iteration  20: 380602.059 ops/s
# Warmup Iteration  21: 395312.010 ops/s
# Warmup Iteration  22: 375729.973 ops/s
# Warmup Iteration  23: 390642.652 ops/s
# Warmup Iteration  24: 387198.426 ops/s
# Warmup Iteration  25: 381203.220 ops/s
# Warmup Iteration  26: 384942.056 ops/s
# Warmup Iteration  27: 394797.844 ops/s
# Warmup Iteration  28: 376921.766 ops/s
# Warmup Iteration  29: 399303.985 ops/s
# Warmup Iteration  30: 385721.826 ops/s
Iteration   1: 385576.737 ops/s
Iteration   2: 388971.672 ops/s
Iteration   3: 376808.485 ops/s
Iteration   4: 400900.530 ops/s
Iteration   5: 392789.670 ops/s
Iteration   6: 384221.427 ops/s
Iteration   7: 386610.569 ops/s
Iteration   8: 380504.995 ops/s
Iteration   9: 383588.360 ops/s
Iteration  10: 399142.409 ops/s
Iteration  11: 375493.675 ops/s
Iteration  12: 388420.375 ops/s
Iteration  13: 384455.377 ops/s
Iteration  14: 380259.656 ops/s
Iteration  15: 382969.234 ops/s
Iteration  16: 387110.647 ops/s
Iteration  17: 380775.754 ops/s
Iteration  18: 397630.908 ops/s
Iteration  19: 401833.361 ops/s
Iteration  20: 379745.137 ops/s
Iteration  21: 388466.105 ops/s
Iteration  22: 381220.918 ops/s
Iteration  23: 395169.994 ops/s
Iteration  24: 383300.322 ops/s
Iteration  25: 397128.949 ops/s
Iteration  26: 376041.686 ops/s
Iteration  27: 387740.753 ops/s
Iteration  28: 380054.553 ops/s
Iteration  29: 378972.465 ops/s
Iteration  30: 396581.425 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryDirectDoubleOnSubscribe":
  386749.538 ±(99.9%) 5137.079 ops/s [Average]
  (min, avg, max) = (375493.675, 386749.538, 401833.361), stdev = 7688.938
  CI (99.9%): [381612.459, 391886.617] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryDirectDoubleOnSubscribe  thrpt   30  386749.538 ± 5137.079  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarInnerQueueEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarInnerQueueEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 173232.744 ops/s
# Warmup Iteration   2: 843115.329 ops/s
# Warmup Iteration   3: 1459617.477 ops/s
# Warmup Iteration   4: 1590484.436 ops/s
# Warmup Iteration   5: 1693019.311 ops/s
# Warmup Iteration   6: 1739726.332 ops/s
# Warmup Iteration   7: 1761395.909 ops/s
# Warmup Iteration   8: 1702049.154 ops/s
# Warmup Iteration   9: 1794505.207 ops/s
# Warmup Iteration  10: 1701995.067 ops/s
# Warmup Iteration  11: 1727492.214 ops/s
# Warmup Iteration  12: 1786428.773 ops/s
# Warmup Iteration  13: 1720432.119 ops/s
# Warmup Iteration  14: 1733356.410 ops/s
# Warmup Iteration  15: 1347242.141 ops/s
# Warmup Iteration  16: 1661572.156 ops/s
# Warmup Iteration  17: 1757371.195 ops/s
# Warmup Iteration  18: 1797868.367 ops/s
# Warmup Iteration  19: 1707908.382 ops/s
# Warmup Iteration  20: 1780382.949 ops/s
# Warmup Iteration  21: 1810038.178 ops/s
# Warmup Iteration  22: 1691725.254 ops/s
# Warmup Iteration  23: 1793175.755 ops/s
# Warmup Iteration  24: 1728356.756 ops/s
# Warmup Iteration  25: 1716837.691 ops/s
# Warmup Iteration  26: 1812706.481 ops/s
# Warmup Iteration  27: 1713583.468 ops/s
# Warmup Iteration  28: 1743555.381 ops/s
# Warmup Iteration  29: 1805774.154 ops/s
# Warmup Iteration  30: 1698316.033 ops/s
Iteration   1: 1801473.660 ops/s
Iteration   2: 1696566.098 ops/s
Iteration   3: 1767671.722 ops/s
Iteration   4: 1737393.099 ops/s
Iteration   5: 1682139.649 ops/s
Iteration   6: 1784010.203 ops/s
Iteration   7: 1732945.423 ops/s
Iteration   8: 1740275.949 ops/s
Iteration   9: 1814623.175 ops/s
Iteration  10: 1678694.076 ops/s
Iteration  11: 1705029.285 ops/s
Iteration  12: 1724287.023 ops/s
Iteration  13: 1809250.214 ops/s
Iteration  14: 1738676.387 ops/s
Iteration  15: 1736099.779 ops/s
Iteration  16: 1733168.103 ops/s
Iteration  17: 1744242.785 ops/s
Iteration  18: 1800895.556 ops/s
Iteration  19: 1733675.143 ops/s
Iteration  20: 1801903.130 ops/s
Iteration  21: 1690656.824 ops/s
Iteration  22: 1761057.263 ops/s
Iteration  23: 1801250.603 ops/s
Iteration  24: 1691391.365 ops/s
Iteration  25: 1763575.817 ops/s
Iteration  26: 1753161.367 ops/s
Iteration  27: 1701541.002 ops/s
Iteration  28: 1783253.087 ops/s
Iteration  29: 1738939.826 ops/s
Iteration  30: 1764991.522 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarInnerQueueEmpty":
  1747094.638 ±(99.9%) 26957.975 ops/s [Average]
  (min, avg, max) = (1678694.076, 1747094.638, 1814623.175), stdev = 40349.432
  CI (99.9%): [1720136.662, 1774052.613] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_scalarInnerQueueEmpty  thrpt   30  1747094.638 ± 26957.975  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 328532.535 ops/s
# Warmup Iteration   2: 1682532.384 ops/s
# Warmup Iteration   3: 2327261.046 ops/s
# Warmup Iteration   4: 2522537.390 ops/s
# Warmup Iteration   5: 2396316.318 ops/s
# Warmup Iteration   6: 2423815.400 ops/s
# Warmup Iteration   7: 2495157.489 ops/s
# Warmup Iteration   8: 2335604.373 ops/s
# Warmup Iteration   9: 2474384.214 ops/s
# Warmup Iteration  10: 2504559.778 ops/s
# Warmup Iteration  11: 2372881.410 ops/s
# Warmup Iteration  12: 2491920.048 ops/s
# Warmup Iteration  13: 2453545.714 ops/s
# Warmup Iteration  14: 2380818.125 ops/s
# Warmup Iteration  15: 2570717.192 ops/s
# Warmup Iteration  16: 2397723.745 ops/s
# Warmup Iteration  17: 2458231.621 ops/s
# Warmup Iteration  18: 2500159.601 ops/s
# Warmup Iteration  19: 2448170.115 ops/s
# Warmup Iteration  20: 2570983.930 ops/s
# Warmup Iteration  21: 2407749.661 ops/s
# Warmup Iteration  22: 2474629.043 ops/s
# Warmup Iteration  23: 2551942.932 ops/s
# Warmup Iteration  24: 2265320.834 ops/s
# Warmup Iteration  25: 2267942.196 ops/s
# Warmup Iteration  26: 2557974.390 ops/s
# Warmup Iteration  27: 2462967.818 ops/s
# Warmup Iteration  28: 2524301.364 ops/s
# Warmup Iteration  29: 2458388.689 ops/s
# Warmup Iteration  30: 2516986.034 ops/s
Iteration   1: 2474039.435 ops/s
Iteration   2: 2488948.542 ops/s
Iteration   3: 2565659.059 ops/s
Iteration   4: 2472162.802 ops/s
Iteration   5: 2482082.626 ops/s
Iteration   6: 2505243.873 ops/s
Iteration   7: 2499736.244 ops/s
Iteration   8: 2549563.856 ops/s
Iteration   9: 2463514.766 ops/s
Iteration  10: 2550739.955 ops/s
Iteration  11: 2482192.024 ops/s
Iteration  12: 2516611.778 ops/s
Iteration  13: 2624213.486 ops/s
Iteration  14: 2530290.830 ops/s
Iteration  15: 2449625.229 ops/s
Iteration  16: 2469315.547 ops/s
Iteration  17: 2580231.847 ops/s
Iteration  18: 2465815.980 ops/s
Iteration  19: 2424111.416 ops/s
Iteration  20: 2498966.250 ops/s
Iteration  21: 2437320.454 ops/s
Iteration  22: 2531565.007 ops/s
Iteration  23: 2464356.846 ops/s
Iteration  24: 2554793.904 ops/s
Iteration  25: 2482843.571 ops/s
Iteration  26: 2596032.718 ops/s
Iteration  27: 2485425.059 ops/s
Iteration  28: 2471062.531 ops/s
Iteration  29: 2446271.750 ops/s
Iteration  30: 2614571.078 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_backpressure":
  2505910.282 ±(99.9%) 35333.008 ops/s [Average]
  (min, avg, max) = (2424111.416, 2505910.282, 2624213.486), stdev = 52884.787
  CI (99.9%): [2470577.274, 2541243.290] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableConcatWithSingleTest._Benchmark.benchmark_backpressure  thrpt   30  2505910.282 ± 35333.008  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_disposedFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_disposedFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1075950.403 ops/s
# Warmup Iteration   2: 2515613.520 ops/s
# Warmup Iteration   3: 2972137.256 ops/s
# Warmup Iteration   4: 3306632.416 ops/s
# Warmup Iteration   5: 3369193.821 ops/s
# Warmup Iteration   6: 3470292.107 ops/s
# Warmup Iteration   7: 3412731.670 ops/s
# Warmup Iteration   8: 3402388.559 ops/s
# Warmup Iteration   9: 3469353.633 ops/s
# Warmup Iteration  10: 2611800.951 ops/s
# Warmup Iteration  11: 3250756.335 ops/s
# Warmup Iteration  12: 3500621.793 ops/s
# Warmup Iteration  13: 3311067.222 ops/s
# Warmup Iteration  14: 3341053.709 ops/s
# Warmup Iteration  15: 3507288.707 ops/s
# Warmup Iteration  16: 3346572.594 ops/s
# Warmup Iteration  17: 3475021.780 ops/s
# Warmup Iteration  18: 3437013.316 ops/s
# Warmup Iteration  19: 3506820.015 ops/s
# Warmup Iteration  20: 3373975.214 ops/s
# Warmup Iteration  21: 3492773.737 ops/s
# Warmup Iteration  22: 3511436.990 ops/s
# Warmup Iteration  23: 3339820.198 ops/s
# Warmup Iteration  24: 3476839.016 ops/s
# Warmup Iteration  25: 3352371.434 ops/s
# Warmup Iteration  26: 3417255.385 ops/s
# Warmup Iteration  27: 3372300.491 ops/s
# Warmup Iteration  28: 3468476.485 ops/s
# Warmup Iteration  29: 3374003.346 ops/s
# Warmup Iteration  30: 3224043.959 ops/s
Iteration   1: 3527852.717 ops/s
Iteration   2: 3342485.857 ops/s
Iteration   3: 3288129.143 ops/s
Iteration   4: 3563605.301 ops/s
Iteration   5: 3381809.890 ops/s
Iteration   6: 3374501.225 ops/s
Iteration   7: 3405538.005 ops/s
Iteration   8: 3422055.013 ops/s
Iteration   9: 3493418.348 ops/s
Iteration  10: 3311858.793 ops/s
Iteration  11: 3542058.823 ops/s
Iteration  12: 3437662.805 ops/s
Iteration  13: 3343632.184 ops/s
Iteration  14: 3446153.402 ops/s
Iteration  15: 3439587.179 ops/s
Iteration  16: 3360165.093 ops/s
Iteration  17: 3479722.436 ops/s
Iteration  18: 3465453.578 ops/s
Iteration  19: 3370412.104 ops/s
Iteration  20: 3530693.739 ops/s
Iteration  21: 3336482.457 ops/s
Iteration  22: 3435093.294 ops/s
Iteration  23: 3492096.653 ops/s
Iteration  24: 3345429.436 ops/s
Iteration  25: 3446634.262 ops/s
Iteration  26: 3373568.211 ops/s
Iteration  27: 3455017.552 ops/s
Iteration  28: 3289800.761 ops/s
Iteration  29: 3426737.208 ops/s
Iteration  30: 3532803.484 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapCompletableTest._Benchmark.benchmark_disposedFlowable":
  3422015.298 ±(99.9%) 51776.803 ops/s [Average]
  (min, avg, max) = (3288129.143, 3422015.298, 3563605.301), stdev = 77497.087
  CI (99.9%): [3370238.495, 3473792.102] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableFlatMapCompletableTest._Benchmark.benchmark_disposedFlowable  thrpt   30  3422015.298 ± 51776.803  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 407817.511 ops/s
# Warmup Iteration   2: 2319314.888 ops/s
# Warmup Iteration   3: 2433126.705 ops/s
# Warmup Iteration   4: 2401268.387 ops/s
# Warmup Iteration   5: 2792903.535 ops/s
# Warmup Iteration   6: 2896540.459 ops/s
# Warmup Iteration   7: 2925236.265 ops/s
# Warmup Iteration   8: 2916826.701 ops/s
# Warmup Iteration   9: 2810743.471 ops/s
# Warmup Iteration  10: 2898567.435 ops/s
# Warmup Iteration  11: 2831540.700 ops/s
# Warmup Iteration  12: 2835051.480 ops/s
# Warmup Iteration  13: 2960259.896 ops/s
# Warmup Iteration  14: 2857341.157 ops/s
# Warmup Iteration  15: 2782295.162 ops/s
# Warmup Iteration  16: 2872084.024 ops/s
# Warmup Iteration  17: 2809359.818 ops/s
# Warmup Iteration  18: 2849555.568 ops/s
# Warmup Iteration  19: 2932779.058 ops/s
# Warmup Iteration  20: 2746600.301 ops/s
# Warmup Iteration  21: 2882234.240 ops/s
# Warmup Iteration  22: 2865429.665 ops/s
# Warmup Iteration  23: 2808154.390 ops/s
# Warmup Iteration  24: 2811896.971 ops/s
# Warmup Iteration  25: 2941301.161 ops/s
# Warmup Iteration  26: 2771071.028 ops/s
# Warmup Iteration  27: 3000596.026 ops/s
# Warmup Iteration  28: 2889283.222 ops/s
# Warmup Iteration  29: 2735582.515 ops/s
# Warmup Iteration  30: 2920845.055 ops/s
Iteration   1: 2747256.145 ops/s
Iteration   2: 2814479.133 ops/s
Iteration   3: 2902929.135 ops/s
Iteration   4: 2768596.568 ops/s
Iteration   5: 2827430.184 ops/s
Iteration   6: 2919843.196 ops/s
Iteration   7: 2854800.322 ops/s
Iteration   8: 2925767.956 ops/s
Iteration   9: 2763843.576 ops/s
Iteration  10: 2831234.868 ops/s
Iteration  11: 2985818.650 ops/s
Iteration  12: 2915175.190 ops/s
Iteration  13: 2826984.461 ops/s
Iteration  14: 2841827.968 ops/s
Iteration  15: 2954255.638 ops/s
Iteration  16: 2810587.285 ops/s
Iteration  17: 2938984.420 ops/s
Iteration  18: 2767423.906 ops/s
Iteration  19: 2919600.400 ops/s
Iteration  20: 2813716.879 ops/s
Iteration  21: 2823346.311 ops/s
Iteration  22: 2988728.510 ops/s
Iteration  23: 2736643.239 ops/s
Iteration  24: 2987002.749 ops/s
Iteration  25: 2941459.898 ops/s
Iteration  26: 2819829.204 ops/s
Iteration  27: 2919907.792 ops/s
Iteration  28: 2854534.697 ops/s
Iteration  29: 2915825.388 ops/s
Iteration  30: 2914112.656 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressure":
  2867731.544 ±(99.9%) 49866.485 ops/s [Average]
  (min, avg, max) = (2736643.239, 2867731.544, 2988728.510), stdev = 74637.813
  CI (99.9%): [2817865.059, 2917598.029] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableMaterializeTest._Benchmark.benchmark_backpressure  thrpt   30  2867731.544 ± 49866.485  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 555587.879 ops/s
# Warmup Iteration   2: 2136729.645 ops/s
# Warmup Iteration   3: 2550052.000 ops/s
# Warmup Iteration   4: 2465969.429 ops/s
# Warmup Iteration   5: 3040385.561 ops/s
# Warmup Iteration   6: 2974761.821 ops/s
# Warmup Iteration   7: 2974049.786 ops/s
# Warmup Iteration   8: 3095389.103 ops/s
# Warmup Iteration   9: 2957075.134 ops/s
# Warmup Iteration  10: 3061788.278 ops/s
# Warmup Iteration  11: 2973385.738 ops/s
# Warmup Iteration  12: 2970527.137 ops/s
# Warmup Iteration  13: 3093015.867 ops/s
# Warmup Iteration  14: 2963728.337 ops/s
# Warmup Iteration  15: 2954003.545 ops/s
# Warmup Iteration  16: 3136959.559 ops/s
# Warmup Iteration  17: 2930248.579 ops/s
# Warmup Iteration  18: 3032073.632 ops/s
# Warmup Iteration  19: 3045389.235 ops/s
# Warmup Iteration  20: 3073567.844 ops/s
# Warmup Iteration  21: 2977685.001 ops/s
# Warmup Iteration  22: 2979003.550 ops/s
# Warmup Iteration  23: 3012573.822 ops/s
# Warmup Iteration  24: 2977108.129 ops/s
# Warmup Iteration  25: 3124511.820 ops/s
# Warmup Iteration  26: 2981675.423 ops/s
# Warmup Iteration  27: 2994009.175 ops/s
# Warmup Iteration  28: 3113227.042 ops/s
# Warmup Iteration  29: 3009968.260 ops/s
# Warmup Iteration  30: 3006499.084 ops/s
Iteration   1: 2917247.615 ops/s
Iteration   2: 3093865.065 ops/s
Iteration   3: 3095781.127 ops/s
Iteration   4: 3040498.639 ops/s
Iteration   5: 2966190.735 ops/s
Iteration   6: 3055575.113 ops/s
Iteration   7: 2925813.763 ops/s
Iteration   8: 3034682.352 ops/s
Iteration   9: 3143495.514 ops/s
Iteration  10: 2975680.749 ops/s
Iteration  11: 3103145.457 ops/s
Iteration  12: 2962087.785 ops/s
Iteration  13: 3094341.483 ops/s
Iteration  14: 3036273.187 ops/s
Iteration  15: 2968937.874 ops/s
Iteration  16: 3108497.594 ops/s
Iteration  17: 3072344.848 ops/s
Iteration  18: 2968186.827 ops/s
Iteration  19: 3058326.024 ops/s
Iteration  20: 3057637.264 ops/s
Iteration  21: 3066438.347 ops/s
Iteration  22: 2976818.774 ops/s
Iteration  23: 3043737.701 ops/s
Iteration  24: 3159786.776 ops/s
Iteration  25: 3050625.479 ops/s
Iteration  26: 3006124.910 ops/s
Iteration  27: 3094838.600 ops/s
Iteration  28: 2954621.778 ops/s
Iteration  29: 2980833.114 ops/s
Iteration  30: 3155654.397 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMapNotificationTest._Benchmark.benchmark_backpressure":
  3038936.296 ±(99.9%) 45033.692 ops/s [Average]
  (min, avg, max) = (2917247.615, 3038936.296, 3159786.776), stdev = 67404.315
  CI (99.9%): [2993902.605, 3083969.988] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableMapNotificationTest._Benchmark.benchmark_backpressure  thrpt   30  3038936.296 ± 45033.692  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_backpressureViaRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_backpressureViaRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 90189.522 ops/s
# Warmup Iteration   2: 357017.576 ops/s
# Warmup Iteration   3: 424362.342 ops/s
# Warmup Iteration   4: 431327.856 ops/s
# Warmup Iteration   5: 466640.239 ops/s
# Warmup Iteration   6: 438129.415 ops/s
# Warmup Iteration   7: 436418.583 ops/s
# Warmup Iteration   8: 412679.924 ops/s
# Warmup Iteration   9: 457320.623 ops/s
# Warmup Iteration  10: 456571.683 ops/s
# Warmup Iteration  11: 464248.023 ops/s
# Warmup Iteration  12: 436184.637 ops/s
# Warmup Iteration  13: 452435.407 ops/s
# Warmup Iteration  14: 446449.787 ops/s
# Warmup Iteration  15: 464916.709 ops/s
# Warmup Iteration  16: 444507.022 ops/s
# Warmup Iteration  17: 444237.201 ops/s
# Warmup Iteration  18: 457898.719 ops/s
# Warmup Iteration  19: 455539.945 ops/s
# Warmup Iteration  20: 457225.431 ops/s
# Warmup Iteration  21: 452354.068 ops/s
# Warmup Iteration  22: 448589.767 ops/s
# Warmup Iteration  23: 462174.790 ops/s
# Warmup Iteration  24: 445660.758 ops/s
# Warmup Iteration  25: 449503.778 ops/s
# Warmup Iteration  26: 448620.429 ops/s
# Warmup Iteration  27: 463998.231 ops/s
# Warmup Iteration  28: 448847.496 ops/s
# Warmup Iteration  29: 458038.842 ops/s
# Warmup Iteration  30: 450066.903 ops/s
Iteration   1: 444425.233 ops/s
Iteration   2: 470082.375 ops/s
Iteration   3: 455291.206 ops/s
Iteration   4: 430571.124 ops/s
Iteration   5: 445270.389 ops/s
Iteration   6: 451316.886 ops/s
Iteration   7: 439649.406 ops/s
Iteration   8: 473064.414 ops/s
Iteration   9: 447153.678 ops/s
Iteration  10: 457091.331 ops/s
Iteration  11: 444660.962 ops/s
Iteration  12: 448338.321 ops/s
Iteration  13: 457751.259 ops/s
Iteration  14: 450032.855 ops/s
Iteration  15: 442232.714 ops/s
Iteration  16: 462407.326 ops/s
Iteration  17: 451391.011 ops/s
Iteration  18: 436835.977 ops/s
Iteration  19: 460075.107 ops/s
Iteration  20: 442169.821 ops/s
Iteration  21: 453306.566 ops/s
Iteration  22: 438944.727 ops/s
Iteration  23: 459857.466 ops/s
Iteration  24: 437927.465 ops/s
Iteration  25: 445924.243 ops/s
Iteration  26: 461289.405 ops/s
Iteration  27: 450720.971 ops/s
Iteration  28: 461828.973 ops/s
Iteration  29: 438836.355 ops/s
Iteration  30: 443889.641 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_backpressureViaRequest":
  450077.907 ±(99.9%) 6826.392 ops/s [Average]
  (min, avg, max) = (430571.124, 450077.907, 473064.414), stdev = 10217.423
  CI (99.9%): [443251.515, 456904.299] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableRangeTest._Benchmark.benchmark_backpressureViaRequest  thrpt   30  450077.907 ± 6826.392  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_withBackpressureRequestWayMore$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_withBackpressureRequestWayMore

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51079.986 ops/s
# Warmup Iteration   2: 281031.453 ops/s
# Warmup Iteration   3: 283359.788 ops/s
# Warmup Iteration   4: 300765.385 ops/s
# Warmup Iteration   5: 350410.279 ops/s
# Warmup Iteration   6: 320615.537 ops/s
# Warmup Iteration   7: 346392.204 ops/s
# Warmup Iteration   8: 325248.337 ops/s
# Warmup Iteration   9: 332934.048 ops/s
# Warmup Iteration  10: 356650.809 ops/s
# Warmup Iteration  11: 324450.525 ops/s
# Warmup Iteration  12: 342172.984 ops/s
# Warmup Iteration  13: 346392.996 ops/s
# Warmup Iteration  14: 330338.372 ops/s
# Warmup Iteration  15: 349581.520 ops/s
# Warmup Iteration  16: 338687.467 ops/s
# Warmup Iteration  17: 326080.194 ops/s
# Warmup Iteration  18: 325943.303 ops/s
# Warmup Iteration  19: 338924.517 ops/s
# Warmup Iteration  20: 337300.734 ops/s
# Warmup Iteration  21: 332481.914 ops/s
# Warmup Iteration  22: 338785.860 ops/s
# Warmup Iteration  23: 326968.741 ops/s
# Warmup Iteration  24: 321224.866 ops/s
# Warmup Iteration  25: 330747.082 ops/s
# Warmup Iteration  26: 324420.049 ops/s
# Warmup Iteration  27: 329793.663 ops/s
# Warmup Iteration  28: 347420.356 ops/s
# Warmup Iteration  29: 330661.601 ops/s
# Warmup Iteration  30: 336720.615 ops/s
Iteration   1: 345158.893 ops/s
Iteration   2: 320481.617 ops/s
Iteration   3: 341393.039 ops/s
Iteration   4: 333295.188 ops/s
Iteration   5: 327689.818 ops/s
Iteration   6: 335348.473 ops/s
Iteration   7: 328143.295 ops/s
Iteration   8: 334618.401 ops/s
Iteration   9: 343474.774 ops/s
Iteration  10: 329046.752 ops/s
Iteration  11: 336770.214 ops/s
Iteration  12: 330898.109 ops/s
Iteration  13: 342892.282 ops/s
Iteration  14: 327553.428 ops/s
Iteration  15: 335653.893 ops/s
Iteration  16: 323657.555 ops/s
Iteration  17: 325394.605 ops/s
Iteration  18: 341306.479 ops/s
Iteration  19: 321013.602 ops/s
Iteration  20: 330756.716 ops/s
Iteration  21: 332869.576 ops/s
Iteration  22: 338561.299 ops/s
Iteration  23: 340273.588 ops/s
Iteration  24: 332516.796 ops/s
Iteration  25: 337024.833 ops/s
Iteration  26: 332415.430 ops/s
Iteration  27: 338847.927 ops/s
Iteration  28: 331071.135 ops/s
Iteration  29: 339980.111 ops/s
Iteration  30: 347861.484 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_withBackpressureRequestWayMore":
  334198.977 ±(99.9%) 4710.201 ops/s [Average]
  (min, avg, max) = (320481.617, 334198.977, 347861.484), stdev = 7050.008
  CI (99.9%): [329488.776, 338909.178] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableRangeTest._Benchmark.benchmark_withBackpressureRequestWayMore  thrpt   30  334198.977 ± 4710.201  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathCancelBeforeComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathCancelBeforeComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 962993.158 ops/s
# Warmup Iteration   2: 2976218.049 ops/s
# Warmup Iteration   3: 3216781.862 ops/s
# Warmup Iteration   4: 3758018.834 ops/s
# Warmup Iteration   5: 3662915.461 ops/s
# Warmup Iteration   6: 3721187.068 ops/s
# Warmup Iteration   7: 3693222.388 ops/s
# Warmup Iteration   8: 3735816.504 ops/s
# Warmup Iteration   9: 3692621.467 ops/s
# Warmup Iteration  10: 3812258.593 ops/s
# Warmup Iteration  11: 3738741.216 ops/s
# Warmup Iteration  12: 3689042.021 ops/s
# Warmup Iteration  13: 3773188.396 ops/s
# Warmup Iteration  14: 3621893.422 ops/s
# Warmup Iteration  15: 3775863.882 ops/s
# Warmup Iteration  16: 3787582.997 ops/s
# Warmup Iteration  17: 3760972.415 ops/s
# Warmup Iteration  18: 3692340.233 ops/s
# Warmup Iteration  19: 3628870.256 ops/s
# Warmup Iteration  20: 3781817.694 ops/s
# Warmup Iteration  21: 3686381.307 ops/s
# Warmup Iteration  22: 3778436.521 ops/s
# Warmup Iteration  23: 3629042.236 ops/s
# Warmup Iteration  24: 3713787.740 ops/s
# Warmup Iteration  25: 3797024.693 ops/s
# Warmup Iteration  26: 3656369.858 ops/s
# Warmup Iteration  27: 3712129.113 ops/s
# Warmup Iteration  28: 3881839.015 ops/s
# Warmup Iteration  29: 3646151.299 ops/s
# Warmup Iteration  30: 3898662.810 ops/s
Iteration   1: 3704858.961 ops/s
Iteration   2: 3777844.033 ops/s
Iteration   3: 3630478.571 ops/s
Iteration   4: 3728020.300 ops/s
Iteration   5: 3781290.237 ops/s
Iteration   6: 3667304.526 ops/s
Iteration   7: 3832504.931 ops/s
Iteration   8: 3710299.270 ops/s
Iteration   9: 3718432.619 ops/s
Iteration  10: 3747011.304 ops/s
Iteration  11: 3679923.238 ops/s
Iteration  12: 3890293.145 ops/s
Iteration  13: 3811768.748 ops/s
Iteration  14: 3678171.713 ops/s
Iteration  15: 3757738.559 ops/s
Iteration  16: 3903426.110 ops/s
Iteration  17: 3601796.796 ops/s
Iteration  18: 3881281.272 ops/s
Iteration  19: 3678789.163 ops/s
Iteration  20: 3741048.507 ops/s
Iteration  21: 3754272.317 ops/s
Iteration  22: 3937290.134 ops/s
Iteration  23: 3816440.465 ops/s
Iteration  24: 3704414.586 ops/s
Iteration  25: 3199876.961 ops/s
Iteration  26: 3602382.946 ops/s
Iteration  27: 3849870.951 ops/s
Iteration  28: 3828730.098 ops/s
Iteration  29: 3701209.762 ops/s
Iteration  30: 3852406.916 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathCancelBeforeComplete":
  3738972.571 ±(99.9%) 90125.793 ops/s [Average]
  (min, avg, max) = (3199876.961, 3738972.571, 3937290.134), stdev = 134896.054
  CI (99.9%): [3648846.778, 3829098.364] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_slowPathCancelBeforeComplete  thrpt   30  3738972.571 ± 90125.793  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_errorSingle$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_errorSingle

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 192779.710 ops/s
# Warmup Iteration   2: 553214.879 ops/s
# Warmup Iteration   3: 719189.417 ops/s
# Warmup Iteration   4: 675248.231 ops/s
# Warmup Iteration   5: 701258.881 ops/s
# Warmup Iteration   6: 698756.857 ops/s
# Warmup Iteration   7: 682350.502 ops/s
# Warmup Iteration   8: 699134.199 ops/s
# Warmup Iteration   9: 694301.200 ops/s
# Warmup Iteration  10: 697449.479 ops/s
# Warmup Iteration  11: 681031.571 ops/s
# Warmup Iteration  12: 693744.461 ops/s
# Warmup Iteration  13: 670366.371 ops/s
# Warmup Iteration  14: 682961.068 ops/s
# Warmup Iteration  15: 693645.381 ops/s
# Warmup Iteration  16: 694114.233 ops/s
# Warmup Iteration  17: 734829.022 ops/s
# Warmup Iteration  18: 746746.184 ops/s
# Warmup Iteration  19: 747019.707 ops/s
# Warmup Iteration  20: 734165.435 ops/s
# Warmup Iteration  21: 746176.431 ops/s
# Warmup Iteration  22: 739944.446 ops/s
# Warmup Iteration  23: 738051.790 ops/s
# Warmup Iteration  24: 711654.148 ops/s
# Warmup Iteration  25: 729016.253 ops/s
# Warmup Iteration  26: 752273.442 ops/s
# Warmup Iteration  27: 712186.342 ops/s
# Warmup Iteration  28: 743507.936 ops/s
# Warmup Iteration  29: 759617.276 ops/s
# Warmup Iteration  30: 726684.719 ops/s
Iteration   1: 725006.935 ops/s
Iteration   2: 719694.688 ops/s
Iteration   3: 763574.047 ops/s
Iteration   4: 689232.408 ops/s
Iteration   5: 723974.788 ops/s
Iteration   6: 777713.017 ops/s
Iteration   7: 746910.678 ops/s
Iteration   8: 731266.689 ops/s
Iteration   9: 764214.283 ops/s
Iteration  10: 717218.060 ops/s
Iteration  11: 723949.063 ops/s
Iteration  12: 752851.227 ops/s
Iteration  13: 720564.107 ops/s
Iteration  14: 765185.416 ops/s
Iteration  15: 721359.775 ops/s
Iteration  16: 737368.409 ops/s
Iteration  17: 732175.533 ops/s
Iteration  18: 765124.923 ops/s
Iteration  19: 737249.094 ops/s
Iteration  20: 725960.605 ops/s
Iteration  21: 750348.117 ops/s
Iteration  22: 714569.773 ops/s
Iteration  23: 749164.459 ops/s
Iteration  24: 746889.901 ops/s
Iteration  25: 721658.485 ops/s
Iteration  26: 764094.038 ops/s
Iteration  27: 715092.862 ops/s
Iteration  28: 767863.153 ops/s
Iteration  29: 728346.837 ops/s
Iteration  30: 714360.825 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_errorSingle":
  737099.407 ±(99.9%) 14202.473 ops/s [Average]
  (min, avg, max) = (689232.408, 737099.407, 777713.017), stdev = 21257.595
  CI (99.9%): [722896.933, 751301.880] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
FlowableToListTest._Benchmark.benchmark_errorSingle  thrpt   30  737099.407 ± 14202.473  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_takeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_takeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 459842.127 ops/s
# Warmup Iteration   2: 2120283.655 ops/s
# Warmup Iteration   3: 2860514.949 ops/s
# Warmup Iteration   4: 3243081.408 ops/s
# Warmup Iteration   5: 3381619.073 ops/s
# Warmup Iteration   6: 3352601.833 ops/s
# Warmup Iteration   7: 3377420.685 ops/s
# Warmup Iteration   8: 3469852.113 ops/s
# Warmup Iteration   9: 3328050.041 ops/s
# Warmup Iteration  10: 3373394.699 ops/s
# Warmup Iteration  11: 3270742.859 ops/s
# Warmup Iteration  12: 3340589.268 ops/s
# Warmup Iteration  13: 3480772.392 ops/s
# Warmup Iteration  14: 3328519.781 ops/s
# Warmup Iteration  15: 3507489.873 ops/s
# Warmup Iteration  16: 3396912.225 ops/s
# Warmup Iteration  17: 3306168.134 ops/s
# Warmup Iteration  18: 3492472.613 ops/s
# Warmup Iteration  19: 3262884.106 ops/s
# Warmup Iteration  20: 3393433.755 ops/s
# Warmup Iteration  21: 3481651.020 ops/s
# Warmup Iteration  22: 3277058.342 ops/s
# Warmup Iteration  23: 3407994.358 ops/s
# Warmup Iteration  24: 3462967.960 ops/s
# Warmup Iteration  25: 3452047.302 ops/s
# Warmup Iteration  26: 3323068.671 ops/s
# Warmup Iteration  27: 3394671.828 ops/s
# Warmup Iteration  28: 3343329.524 ops/s
# Warmup Iteration  29: 3431240.743 ops/s
# Warmup Iteration  30: 3534896.509 ops/s
Iteration   1: 3418122.383 ops/s
Iteration   2: 3357662.811 ops/s
Iteration   3: 3407766.894 ops/s
Iteration   4: 3262507.379 ops/s
Iteration   5: 3430372.346 ops/s
Iteration   6: 3417219.174 ops/s
Iteration   7: 3291091.151 ops/s
Iteration   8: 3509312.281 ops/s
Iteration   9: 3233109.415 ops/s
Iteration  10: 3481141.801 ops/s
Iteration  11: 3247175.291 ops/s
Iteration  12: 3406001.741 ops/s
Iteration  13: 3335790.751 ops/s
Iteration  14: 3283109.696 ops/s
Iteration  15: 3345287.794 ops/s
Iteration  16: 3381184.419 ops/s
Iteration  17: 3363721.933 ops/s
Iteration  18: 3512285.956 ops/s
Iteration  19: 2948927.821 ops/s
Iteration  20: 3311452.114 ops/s
Iteration  21: 3317057.424 ops/s
Iteration  22: 3395835.333 ops/s
Iteration  23: 3312376.997 ops/s
Iteration  24: 3312022.104 ops/s
Iteration  25: 3396314.553 ops/s
Iteration  26: 3312220.344 ops/s
Iteration  27: 3276927.975 ops/s
Iteration  28: 3379404.729 ops/s
Iteration  29: 3329952.865 ops/s
Iteration  30: 3396611.423 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_takeMain":
  3345732.230 ±(99.9%) 69352.484 ops/s [Average]
  (min, avg, max) = (2948927.821, 3345732.230, 3512285.956), stdev = 103803.541
  CI (99.9%): [3276379.746, 3415084.714] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
FlowableConcatWithCompletableTest._Benchmark.benchmark_takeMain  thrpt   30  3345732.230 ± 69352.484  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 768232.456 ops/s
# Warmup Iteration   2: 3137230.151 ops/s
# Warmup Iteration   3: 3679032.706 ops/s
# Warmup Iteration   4: 4200890.747 ops/s
# Warmup Iteration   5: 4211289.754 ops/s
# Warmup Iteration   6: 4307507.689 ops/s
# Warmup Iteration   7: 4041782.132 ops/s
# Warmup Iteration   8: 4224711.646 ops/s
# Warmup Iteration   9: 4059179.666 ops/s
# Warmup Iteration  10: 4186849.352 ops/s
# Warmup Iteration  11: 4175858.333 ops/s
# Warmup Iteration  12: 4157752.719 ops/s
# Warmup Iteration  13: 4202412.030 ops/s
# Warmup Iteration  14: 4310728.263 ops/s
# Warmup Iteration  15: 4074157.056 ops/s
# Warmup Iteration  16: 4190640.232 ops/s
# Warmup Iteration  17: 4076703.507 ops/s
# Warmup Iteration  18: 4452928.297 ops/s
# Warmup Iteration  19: 4236638.580 ops/s
# Warmup Iteration  20: 4066498.312 ops/s
# Warmup Iteration  21: 4343225.434 ops/s
# Warmup Iteration  22: 4101486.495 ops/s
# Warmup Iteration  23: 4312897.247 ops/s
# Warmup Iteration  24: 4150992.315 ops/s
# Warmup Iteration  25: 4141863.455 ops/s
# Warmup Iteration  26: 4189006.588 ops/s
# Warmup Iteration  27: 4237808.099 ops/s
# Warmup Iteration  28: 4249725.439 ops/s
# Warmup Iteration  29: 4092979.306 ops/s
# Warmup Iteration  30: 4304619.938 ops/s
Iteration   1: 4093746.065 ops/s
Iteration   2: 4157809.008 ops/s
Iteration   3: 4361156.284 ops/s
Iteration   4: 4139029.225 ops/s
Iteration   5: 4070932.850 ops/s
Iteration   6: 4338059.459 ops/s
Iteration   7: 4175520.234 ops/s
Iteration   8: 4077979.850 ops/s
Iteration   9: 4245171.300 ops/s
Iteration  10: 4212724.073 ops/s
Iteration  11: 4331481.121 ops/s
Iteration  12: 4304181.407 ops/s
Iteration  13: 4103425.985 ops/s
Iteration  14: 4331477.368 ops/s
Iteration  15: 4237684.795 ops/s
Iteration  16: 4161598.903 ops/s
Iteration  17: 4248484.648 ops/s
Iteration  18: 4030736.144 ops/s
Iteration  19: 4123753.185 ops/s
Iteration  20: 4319249.396 ops/s
Iteration  21: 4432949.795 ops/s
Iteration  22: 4237876.359 ops/s
Iteration  23: 4035864.956 ops/s
Iteration  24: 4272099.681 ops/s
Iteration  25: 4294330.577 ops/s
Iteration  26: 4108982.622 ops/s
Iteration  27: 4347371.988 ops/s
Iteration  28: 4187813.442 ops/s
Iteration  29: 4058690.465 ops/s
Iteration  30: 4372374.972 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_slowPathCancel":
  4213751.872 ±(99.9%) 76050.011 ops/s [Average]
  (min, avg, max) = (4030736.144, 4213751.872, 4432949.795), stdev = 113828.084
  CI (99.9%): [4137701.861, 4289801.883] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableRangeTest._Benchmark.benchmark_slowPathCancel  thrpt   30  4213751.872 ± 76050.011  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 259057.801 ops/s
# Warmup Iteration   2: 1226715.276 ops/s
# Warmup Iteration   3: 1469964.340 ops/s
# Warmup Iteration   4: 1731997.323 ops/s
# Warmup Iteration   5: 1597312.703 ops/s
# Warmup Iteration   6: 1482803.546 ops/s
# Warmup Iteration   7: 1655590.342 ops/s
# Warmup Iteration   8: 1678196.335 ops/s
# Warmup Iteration   9: 1716835.508 ops/s
# Warmup Iteration  10: 1660740.842 ops/s
# Warmup Iteration  11: 1688601.900 ops/s
# Warmup Iteration  12: 1687013.561 ops/s
# Warmup Iteration  13: 1649522.894 ops/s
# Warmup Iteration  14: 1714365.194 ops/s
# Warmup Iteration  15: 1669794.418 ops/s
# Warmup Iteration  16: 1685521.836 ops/s
# Warmup Iteration  17: 1729867.518 ops/s
# Warmup Iteration  18: 1642750.847 ops/s
# Warmup Iteration  19: 1753265.865 ops/s
# Warmup Iteration  20: 1627816.438 ops/s
# Warmup Iteration  21: 1696416.703 ops/s
# Warmup Iteration  22: 1726042.213 ops/s
# Warmup Iteration  23: 1684376.921 ops/s
# Warmup Iteration  24: 1699197.524 ops/s
# Warmup Iteration  25: 1663109.210 ops/s
# Warmup Iteration  26: 1695908.824 ops/s
# Warmup Iteration  27: 1720600.842 ops/s
# Warmup Iteration  28: 1656991.645 ops/s
# Warmup Iteration  29: 1727014.427 ops/s
# Warmup Iteration  30: 1678179.138 ops/s
Iteration   1: 1667532.801 ops/s
Iteration   2: 1759002.361 ops/s
Iteration   3: 1663536.912 ops/s
Iteration   4: 1714878.906 ops/s
Iteration   5: 1767954.664 ops/s
Iteration   6: 1693378.936 ops/s
Iteration   7: 1655285.715 ops/s
Iteration   8: 1704450.253 ops/s
Iteration   9: 1653756.088 ops/s
Iteration  10: 1728429.014 ops/s
Iteration  11: 1653109.683 ops/s
Iteration  12: 1712410.533 ops/s
Iteration  13: 1748481.505 ops/s
Iteration  14: 1344014.468 ops/s
Iteration  15: 1635474.420 ops/s
Iteration  16: 1761678.260 ops/s
Iteration  17: 1674816.847 ops/s
Iteration  18: 1741511.710 ops/s
Iteration  19: 1684345.223 ops/s
Iteration  20: 1667438.482 ops/s
Iteration  21: 1704281.143 ops/s
Iteration  22: 1685416.183 ops/s
Iteration  23: 1743479.875 ops/s
Iteration  24: 1771386.334 ops/s
Iteration  25: 1650038.598 ops/s
Iteration  26: 1705361.894 ops/s
Iteration  27: 1669287.085 ops/s
Iteration  28: 1707637.037 ops/s
Iteration  29: 1708029.412 ops/s
Iteration  30: 1632239.060 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_normal":
  1686954.780 ±(99.9%) 51013.078 ops/s [Average]
  (min, avg, max) = (1344014.468, 1686954.780, 1771386.334), stdev = 76353.979
  CI (99.9%): [1635941.702, 1737967.858] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_normal  thrpt   30  1686954.780 ± 51013.078  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 606883.730 ops/s
# Warmup Iteration   2: 2443909.799 ops/s
# Warmup Iteration   3: 3861713.402 ops/s
# Warmup Iteration   4: 5024771.699 ops/s
# Warmup Iteration   5: 5132867.571 ops/s
# Warmup Iteration   6: 5149349.787 ops/s
# Warmup Iteration   7: 4903109.795 ops/s
# Warmup Iteration   8: 4937296.277 ops/s
# Warmup Iteration   9: 5060069.256 ops/s
# Warmup Iteration  10: 4876414.022 ops/s
# Warmup Iteration  11: 5015278.535 ops/s
# Warmup Iteration  12: 5068943.911 ops/s
# Warmup Iteration  13: 4931674.200 ops/s
# Warmup Iteration  14: 4926423.635 ops/s
# Warmup Iteration  15: 4873316.099 ops/s
# Warmup Iteration  16: 5063671.585 ops/s
# Warmup Iteration  17: 4957044.571 ops/s
# Warmup Iteration  18: 4836464.306 ops/s
# Warmup Iteration  19: 5225980.651 ops/s
# Warmup Iteration  20: 4878329.643 ops/s
# Warmup Iteration  21: 5003173.589 ops/s
# Warmup Iteration  22: 4930935.905 ops/s
# Warmup Iteration  23: 4900348.290 ops/s
# Warmup Iteration  24: 4973293.675 ops/s
# Warmup Iteration  25: 5116084.658 ops/s
# Warmup Iteration  26: 5020242.774 ops/s
# Warmup Iteration  27: 5170559.921 ops/s
# Warmup Iteration  28: 4877307.545 ops/s
# Warmup Iteration  29: 4943511.989 ops/s
# Warmup Iteration  30: 5057624.247 ops/s
Iteration   1: 4862060.258 ops/s
Iteration   2: 4937439.280 ops/s
Iteration   3: 5261700.576 ops/s
Iteration   4: 4918040.217 ops/s
Iteration   5: 4865814.070 ops/s
Iteration   6: 5144607.705 ops/s
Iteration   7: 4838372.728 ops/s
Iteration   8: 4944805.363 ops/s
Iteration   9: 4887831.263 ops/s
Iteration  10: 5037174.330 ops/s
Iteration  11: 5086387.565 ops/s
Iteration  12: 4805993.364 ops/s
Iteration  13: 5024827.656 ops/s
Iteration  14: 5159873.137 ops/s
Iteration  15: 4888777.457 ops/s
Iteration  16: 4977517.147 ops/s
Iteration  17: 5093009.405 ops/s
Iteration  18: 4849272.507 ops/s
Iteration  19: 5096713.765 ops/s
Iteration  20: 4951636.003 ops/s
Iteration  21: 5028133.172 ops/s
Iteration  22: 4912626.875 ops/s
Iteration  23: 5006579.841 ops/s
Iteration  24: 5065372.503 ops/s
Iteration  25: 4918183.516 ops/s
Iteration  26: 4993439.921 ops/s
Iteration  27: 4921552.879 ops/s
Iteration  28: 4826711.104 ops/s
Iteration  29: 5154501.980 ops/s
Iteration  30: 4958403.581 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSequenceEqualTest._Benchmark.benchmark_disposed":
  4980578.639 ±(99.9%) 76212.928 ops/s [Average]
  (min, avg, max) = (4805993.364, 4980578.639, 5261700.576), stdev = 114071.931
  CI (99.9%): [4904365.711, 5056791.567] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
FlowableSequenceEqualTest._Benchmark.benchmark_disposed  thrpt   30  4980578.639 ± 76212.928  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_normalBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_normalBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 254358.101 ops/s
# Warmup Iteration   2: 1320246.684 ops/s
# Warmup Iteration   3: 1639116.247 ops/s
# Warmup Iteration   4: 1781933.103 ops/s
# Warmup Iteration   5: 1669824.274 ops/s
# Warmup Iteration   6: 1642670.173 ops/s
# Warmup Iteration   7: 1654642.175 ops/s
# Warmup Iteration   8: 1795003.991 ops/s
# Warmup Iteration   9: 1794818.672 ops/s
# Warmup Iteration  10: 1757697.323 ops/s
# Warmup Iteration  11: 1769506.090 ops/s
# Warmup Iteration  12: 1802395.111 ops/s
# Warmup Iteration  13: 1730266.767 ops/s
# Warmup Iteration  14: 1834258.693 ops/s
# Warmup Iteration  15: 1733372.490 ops/s
# Warmup Iteration  16: 1813178.246 ops/s
# Warmup Iteration  17: 1755642.724 ops/s
# Warmup Iteration  18: 1756258.414 ops/s
# Warmup Iteration  19: 1799528.536 ops/s
# Warmup Iteration  20: 1779018.573 ops/s
# Warmup Iteration  21: 1836856.044 ops/s
# Warmup Iteration  22: 1829372.196 ops/s
# Warmup Iteration  23: 1847986.584 ops/s
# Warmup Iteration  24: 1796832.825 ops/s
# Warmup Iteration  25: 1714572.762 ops/s
# Warmup Iteration  26: 1846996.956 ops/s
# Warmup Iteration  27: 1817596.972 ops/s
# Warmup Iteration  28: 1775715.233 ops/s
# Warmup Iteration  29: 1790415.877 ops/s
# Warmup Iteration  30: 1796190.323 ops/s
Iteration   1: 1784868.834 ops/s
Iteration   2: 1756205.818 ops/s
Iteration   3: 1790169.745 ops/s
Iteration   4: 1735207.106 ops/s
Iteration   5: 1785725.986 ops/s
Iteration   6: 1719142.746 ops/s
Iteration   7: 1818724.798 ops/s
Iteration   8: 1539624.007 ops/s
Iteration   9: 1443986.067 ops/s
Iteration  10: 1753120.452 ops/s
Iteration  11: 1796443.842 ops/s
Iteration  12: 1820915.402 ops/s
Iteration  13: 1739451.824 ops/s
Iteration  14: 1774768.660 ops/s
Iteration  15: 1794316.155 ops/s
Iteration  16: 1738140.483 ops/s
Iteration  17: 1810281.492 ops/s
Iteration  18: 1733103.070 ops/s
Iteration  19: 1825176.587 ops/s
Iteration  20: 1848841.481 ops/s
Iteration  21: 1787434.990 ops/s
Iteration  22: 1832337.986 ops/s
Iteration  23: 1709585.902 ops/s
Iteration  24: 1871888.876 ops/s
Iteration  25: 1712054.879 ops/s
Iteration  26: 1795241.554 ops/s
Iteration  27: 1842423.679 ops/s
Iteration  28: 1720482.458 ops/s
Iteration  29: 1736940.423 ops/s
Iteration  30: 1766686.422 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithCompletableTest._Benchmark.benchmark_normalBackpressured":
  1759443.057 ±(99.9%) 57211.745 ops/s [Average]
  (min, avg, max) = (1443986.067, 1759443.057, 1871888.876), stdev = 85631.853
  CI (99.9%): [1702231.313, 1816654.802] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
FlowableMergeWithCompletableTest._Benchmark.benchmark_normalBackpressured  thrpt   30  1759443.057 ± 57211.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_takeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_takeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 522886.863 ops/s
# Warmup Iteration   2: 2435851.115 ops/s
# Warmup Iteration   3: 2663310.508 ops/s
# Warmup Iteration   4: 3218240.143 ops/s
# Warmup Iteration   5: 3316311.805 ops/s
# Warmup Iteration   6: 3151300.076 ops/s
# Warmup Iteration   7: 3322140.813 ops/s
# Warmup Iteration   8: 3199277.487 ops/s
# Warmup Iteration   9: 3138074.657 ops/s
# Warmup Iteration  10: 3168325.976 ops/s
# Warmup Iteration  11: 3181135.948 ops/s
# Warmup Iteration  12: 3329846.249 ops/s
# Warmup Iteration  13: 3175265.061 ops/s
# Warmup Iteration  14: 3300474.567 ops/s
# Warmup Iteration  15: 3157610.162 ops/s
# Warmup Iteration  16: 3327788.588 ops/s
# Warmup Iteration  17: 3120378.904 ops/s
# Warmup Iteration  18: 3236160.519 ops/s
# Warmup Iteration  19: 3246700.222 ops/s
# Warmup Iteration  20: 3068775.903 ops/s
# Warmup Iteration  21: 3183781.238 ops/s
# Warmup Iteration  22: 3320741.403 ops/s
# Warmup Iteration  23: 3106422.971 ops/s
# Warmup Iteration  24: 3185709.961 ops/s
# Warmup Iteration  25: 3228755.176 ops/s
# Warmup Iteration  26: 3155093.280 ops/s
# Warmup Iteration  27: 3289523.209 ops/s
# Warmup Iteration  28: 3196166.822 ops/s
# Warmup Iteration  29: 3291754.137 ops/s
# Warmup Iteration  30: 3245529.764 ops/s
Iteration   1: 3189060.798 ops/s
Iteration   2: 3343816.950 ops/s
Iteration   3: 3119517.743 ops/s
Iteration   4: 3218587.876 ops/s
Iteration   5: 3297994.945 ops/s
Iteration   6: 3076601.210 ops/s
Iteration   7: 3290697.530 ops/s
Iteration   8: 3331719.702 ops/s
Iteration   9: 3098494.632 ops/s
Iteration  10: 3396121.595 ops/s
Iteration  11: 3165265.181 ops/s
Iteration  12: 3186100.538 ops/s
Iteration  13: 3288420.164 ops/s
Iteration  14: 3210445.941 ops/s
Iteration  15: 3076375.719 ops/s
Iteration  16: 3217787.059 ops/s
Iteration  17: 3338773.241 ops/s
Iteration  18: 3150584.196 ops/s
Iteration  19: 3312188.126 ops/s
Iteration  20: 3192868.268 ops/s
Iteration  21: 3288168.227 ops/s
Iteration  22: 3230900.863 ops/s
Iteration  23: 3285768.485 ops/s
Iteration  24: 3207610.285 ops/s
Iteration  25: 3234143.234 ops/s
Iteration  26: 3315116.316 ops/s
Iteration  27: 3150135.163 ops/s
Iteration  28: 3221868.775 ops/s
Iteration  29: 3287109.775 ops/s
Iteration  30: 3050613.918 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_takeMain":
  3225761.882 ±(99.9%) 59445.550 ops/s [Average]
  (min, avg, max) = (3050613.918, 3225761.882, 3396121.595), stdev = 88975.307
  CI (99.9%): [3166316.332, 3285207.432] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableConcatWithMaybeTest._Benchmark.benchmark_takeMain  thrpt   30  3225761.882 ± 59445.550  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 523739.077 ops/s
# Warmup Iteration   2: 1840374.498 ops/s
# Warmup Iteration   3: 2756746.703 ops/s
# Warmup Iteration   4: 2648432.902 ops/s
# Warmup Iteration   5: 2791443.804 ops/s
# Warmup Iteration   6: 2580203.881 ops/s
# Warmup Iteration   7: 2634080.909 ops/s
# Warmup Iteration   8: 2650423.030 ops/s
# Warmup Iteration   9: 2500356.308 ops/s
# Warmup Iteration  10: 2560802.139 ops/s
# Warmup Iteration  11: 2835631.613 ops/s
# Warmup Iteration  12: 2646292.466 ops/s
# Warmup Iteration  13: 2767940.756 ops/s
# Warmup Iteration  14: 2694560.035 ops/s
# Warmup Iteration  15: 2802771.743 ops/s
# Warmup Iteration  16: 2756681.352 ops/s
# Warmup Iteration  17: 2692997.172 ops/s
# Warmup Iteration  18: 2796566.888 ops/s
# Warmup Iteration  19: 2760836.314 ops/s
# Warmup Iteration  20: 2706124.052 ops/s
# Warmup Iteration  21: 2790131.166 ops/s
# Warmup Iteration  22: 2725478.996 ops/s
# Warmup Iteration  23: 2758899.596 ops/s
# Warmup Iteration  24: 2658613.273 ops/s
# Warmup Iteration  25: 2698875.618 ops/s
# Warmup Iteration  26: 2714941.531 ops/s
# Warmup Iteration  27: 2706537.371 ops/s
# Warmup Iteration  28: 2779771.130 ops/s
# Warmup Iteration  29: 2734054.726 ops/s
# Warmup Iteration  30: 2696867.488 ops/s
Iteration   1: 2864750.225 ops/s
Iteration   2: 2700985.820 ops/s
Iteration   3: 2635646.745 ops/s
Iteration   4: 2369040.565 ops/s
Iteration   5: 2711642.506 ops/s
Iteration   6: 2756411.778 ops/s
Iteration   7: 2689619.936 ops/s
Iteration   8: 2653854.382 ops/s
Iteration   9: 2838242.900 ops/s
Iteration  10: 2708084.756 ops/s
Iteration  11: 2831135.835 ops/s
Iteration  12: 2706898.140 ops/s
Iteration  13: 2712688.965 ops/s
Iteration  14: 2783221.869 ops/s
Iteration  15: 2677046.261 ops/s
Iteration  16: 2682196.767 ops/s
Iteration  17: 2797308.597 ops/s
Iteration  18: 2722919.234 ops/s
Iteration  19: 2780139.415 ops/s
Iteration  20: 2710660.670 ops/s
Iteration  21: 2617667.695 ops/s
Iteration  22: 2754763.050 ops/s
Iteration  23: 2679303.972 ops/s
Iteration  24: 2748598.798 ops/s
Iteration  25: 2653375.281 ops/s
Iteration  26: 2793664.790 ops/s
Iteration  27: 2758362.424 ops/s
Iteration  28: 2678948.274 ops/s
Iteration  29: 2800520.275 ops/s
Iteration  30: 2645809.006 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalTake":
  2715450.298 ±(99.9%) 60842.614 ops/s [Average]
  (min, avg, max) = (2369040.565, 2715450.298, 2864750.225), stdev = 91066.367
  CI (99.9%): [2654607.684, 2776292.912] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_normalTake  thrpt   30  2715450.298 ± 60842.614  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 221600.679 ops/s
# Warmup Iteration   2: 902469.786 ops/s
# Warmup Iteration   3: 1760052.677 ops/s
# Warmup Iteration   4: 1502334.994 ops/s
# Warmup Iteration   5: 1897925.546 ops/s
# Warmup Iteration   6: 1872080.507 ops/s
# Warmup Iteration   7: 1825658.911 ops/s
# Warmup Iteration   8: 1926410.381 ops/s
# Warmup Iteration   9: 1792115.896 ops/s
# Warmup Iteration  10: 1867536.993 ops/s
# Warmup Iteration  11: 1930317.117 ops/s
# Warmup Iteration  12: 1810548.299 ops/s
# Warmup Iteration  13: 1932094.764 ops/s
# Warmup Iteration  14: 1856117.978 ops/s
# Warmup Iteration  15: 1906533.858 ops/s
# Warmup Iteration  16: 1825866.360 ops/s
# Warmup Iteration  17: 1866239.784 ops/s
# Warmup Iteration  18: 1884360.765 ops/s
# Warmup Iteration  19: 1935427.975 ops/s
# Warmup Iteration  20: 1823380.852 ops/s
# Warmup Iteration  21: 1936292.931 ops/s
# Warmup Iteration  22: 1867564.940 ops/s
# Warmup Iteration  23: 1843793.521 ops/s
# Warmup Iteration  24: 1862251.675 ops/s
# Warmup Iteration  25: 1972725.810 ops/s
# Warmup Iteration  26: 1828170.549 ops/s
# Warmup Iteration  27: 1883708.628 ops/s
# Warmup Iteration  28: 1914126.025 ops/s
# Warmup Iteration  29: 1838844.269 ops/s
# Warmup Iteration  30: 1938038.232 ops/s
Iteration   1: 1939707.676 ops/s
Iteration   2: 1855347.707 ops/s
Iteration   3: 1856561.648 ops/s
Iteration   4: 1911383.300 ops/s
Iteration   5: 1840641.027 ops/s
Iteration   6: 1928119.158 ops/s
Iteration   7: 1801297.238 ops/s
Iteration   8: 1885558.005 ops/s
Iteration   9: 1871041.762 ops/s
Iteration  10: 1823845.482 ops/s
Iteration  11: 1883494.319 ops/s
Iteration  12: 1846680.032 ops/s
Iteration  13: 1890073.707 ops/s
Iteration  14: 1900873.127 ops/s
Iteration  15: 1842382.557 ops/s
Iteration  16: 1902196.711 ops/s
Iteration  17: 1939116.475 ops/s
Iteration  18: 1872235.062 ops/s
Iteration  19: 1887825.770 ops/s
Iteration  20: 1913354.405 ops/s
Iteration  21: 1862466.058 ops/s
Iteration  22: 1915382.194 ops/s
Iteration  23: 1841639.760 ops/s
Iteration  24: 1926316.353 ops/s
Iteration  25: 1849988.052 ops/s
Iteration  26: 1863733.233 ops/s
Iteration  27: 1948927.839 ops/s
Iteration  28: 1787226.861 ops/s
Iteration  29: 1886694.186 ops/s
Iteration  30: 1934071.963 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_take":
  1880272.722 ±(99.9%) 27739.658 ops/s [Average]
  (min, avg, max) = (1787226.861, 1880272.722, 1948927.839), stdev = 41519.418
  CI (99.9%): [1852533.064, 1908012.380] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_take  thrpt   30  1880272.722 ± 27739.658  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_takeStep$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_takeStep

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 175497.769 ops/s
# Warmup Iteration   2: 740796.504 ops/s
# Warmup Iteration   3: 2016673.321 ops/s
# Warmup Iteration   4: 1899855.101 ops/s
# Warmup Iteration   5: 1957239.012 ops/s
# Warmup Iteration   6: 1748073.786 ops/s
# Warmup Iteration   7: 1883442.683 ops/s
# Warmup Iteration   8: 1912050.435 ops/s
# Warmup Iteration   9: 2044102.397 ops/s
# Warmup Iteration  10: 1883203.977 ops/s
# Warmup Iteration  11: 1963678.317 ops/s
# Warmup Iteration  12: 1968409.780 ops/s
# Warmup Iteration  13: 1978315.933 ops/s
# Warmup Iteration  14: 2009536.067 ops/s
# Warmup Iteration  15: 1764170.713 ops/s
# Warmup Iteration  16: 1927580.065 ops/s
# Warmup Iteration  17: 1941568.672 ops/s
# Warmup Iteration  18: 1970095.788 ops/s
# Warmup Iteration  19: 2024651.798 ops/s
# Warmup Iteration  20: 1907346.175 ops/s
# Warmup Iteration  21: 2038506.189 ops/s
# Warmup Iteration  22: 1987225.341 ops/s
# Warmup Iteration  23: 1973893.337 ops/s
# Warmup Iteration  24: 1982751.255 ops/s
# Warmup Iteration  25: 1993998.146 ops/s
# Warmup Iteration  26: 2010350.613 ops/s
# Warmup Iteration  27: 1946462.041 ops/s
# Warmup Iteration  28: 1442625.324 ops/s
# Warmup Iteration  29: 1998152.856 ops/s
# Warmup Iteration  30: 1951055.319 ops/s
Iteration   1: 1989911.548 ops/s
Iteration   2: 1925479.974 ops/s
Iteration   3: 1979232.694 ops/s
Iteration   4: 1933437.745 ops/s
Iteration   5: 1919991.987 ops/s
Iteration   6: 2042438.222 ops/s
Iteration   7: 1942913.580 ops/s
Iteration   8: 1925376.093 ops/s
Iteration   9: 2081023.486 ops/s
Iteration  10: 1918340.810 ops/s
Iteration  11: 1978328.002 ops/s
Iteration  12: 1944998.919 ops/s
Iteration  13: 1992906.175 ops/s
Iteration  14: 1963529.656 ops/s
Iteration  15: 1974047.111 ops/s
Iteration  16: 1949396.194 ops/s
Iteration  17: 1988021.672 ops/s
Iteration  18: 2025088.535 ops/s
Iteration  19: 1927613.130 ops/s
Iteration  20: 1982653.934 ops/s
Iteration  21: 1966679.019 ops/s
Iteration  22: 1977456.056 ops/s
Iteration  23: 1929596.926 ops/s
Iteration  24: 1928816.084 ops/s
Iteration  25: 1922677.074 ops/s
Iteration  26: 1953269.871 ops/s
Iteration  27: 1931000.420 ops/s
Iteration  28: 2020630.385 ops/s
Iteration  29: 2018734.409 ops/s
Iteration  30: 1937874.566 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_takeStep":
  1965715.476 ±(99.9%) 27502.803 ops/s [Average]
  (min, avg, max) = (1918340.810, 1965715.476, 2081023.486), stdev = 41164.904
  CI (99.9%): [1938212.673, 1993218.279] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FlowableTakeTest2._Benchmark.benchmark_takeStep  thrpt   30  1965715.476 ± 27502.803  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38950.399 ops/s
# Warmup Iteration   2: 174028.425 ops/s
# Warmup Iteration   3: 345288.271 ops/s
# Warmup Iteration   4: 370652.814 ops/s
# Warmup Iteration   5: 336043.991 ops/s
# Warmup Iteration   6: 374235.400 ops/s
# Warmup Iteration   7: 399851.562 ops/s
# Warmup Iteration   8: 377400.966 ops/s
# Warmup Iteration   9: 382122.624 ops/s
# Warmup Iteration  10: 391485.510 ops/s
# Warmup Iteration  11: 394239.292 ops/s
# Warmup Iteration  12: 358463.668 ops/s
# Warmup Iteration  13: 396897.749 ops/s
# Warmup Iteration  14: 377739.346 ops/s
# Warmup Iteration  15: 385916.336 ops/s
# Warmup Iteration  16: 393924.525 ops/s
# Warmup Iteration  17: 360245.786 ops/s
# Warmup Iteration  18: 391377.172 ops/s
# Warmup Iteration  19: 368863.393 ops/s
# Warmup Iteration  20: 382227.529 ops/s
# Warmup Iteration  21: 401038.725 ops/s
# Warmup Iteration  22: 372701.353 ops/s
# Warmup Iteration  23: 375028.442 ops/s
# Warmup Iteration  24: 377095.214 ops/s
# Warmup Iteration  25: 396469.010 ops/s
# Warmup Iteration  26: 380227.379 ops/s
# Warmup Iteration  27: 388118.383 ops/s
# Warmup Iteration  28: 390744.687 ops/s
# Warmup Iteration  29: 388673.175 ops/s
# Warmup Iteration  30: 382659.364 ops/s
Iteration   1: 382791.310 ops/s
Iteration   2: 382410.805 ops/s
Iteration   3: 382097.360 ops/s
Iteration   4: 382233.644 ops/s
Iteration   5: 390791.894 ops/s
Iteration   6: 376802.186 ops/s
Iteration   7: 394089.844 ops/s
Iteration   8: 383539.286 ops/s
Iteration   9: 379796.020 ops/s
Iteration  10: 399446.697 ops/s
Iteration  11: 368846.363 ops/s
Iteration  12: 389499.239 ops/s
Iteration  13: 371645.096 ops/s
Iteration  14: 377948.652 ops/s
Iteration  15: 376397.026 ops/s
Iteration  16: 379601.279 ops/s
Iteration  17: 377411.358 ops/s
Iteration  18: 394289.641 ops/s
Iteration  19: 393239.566 ops/s
Iteration  20: 381372.161 ops/s
Iteration  21: 385291.711 ops/s
Iteration  22: 383502.546 ops/s
Iteration  23: 379431.641 ops/s
Iteration  24: 390193.784 ops/s
Iteration  25: 369251.226 ops/s
Iteration  26: 380275.431 ops/s
Iteration  27: 388312.632 ops/s
Iteration  28: 366031.699 ops/s
Iteration  29: 380575.927 ops/s
Iteration  30: 401043.454 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeHidden":
  382938.649 ±(99.9%) 5735.561 ops/s [Average]
  (min, avg, max) = (366031.699, 382938.649, 401043.454), stdev = 8584.719
  CI (99.9%): [377203.088, 388674.211] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_rangeHidden  thrpt   30  382938.649 ± 5735.561  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_normalBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_normalBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 216130.327 ops/s
# Warmup Iteration   2: 975552.693 ops/s
# Warmup Iteration   3: 1154831.312 ops/s
# Warmup Iteration   4: 1320144.449 ops/s
# Warmup Iteration   5: 1385477.569 ops/s
# Warmup Iteration   6: 1353589.125 ops/s
# Warmup Iteration   7: 1342524.374 ops/s
# Warmup Iteration   8: 1401414.791 ops/s
# Warmup Iteration   9: 1329215.546 ops/s
# Warmup Iteration  10: 1364979.136 ops/s
# Warmup Iteration  11: 1406191.651 ops/s
# Warmup Iteration  12: 1369418.333 ops/s
# Warmup Iteration  13: 1335953.149 ops/s
# Warmup Iteration  14: 1397261.432 ops/s
# Warmup Iteration  15: 1350732.297 ops/s
# Warmup Iteration  16: 1392125.374 ops/s
# Warmup Iteration  17: 1373560.682 ops/s
# Warmup Iteration  18: 1424498.727 ops/s
# Warmup Iteration  19: 1323536.015 ops/s
# Warmup Iteration  20: 1433049.705 ops/s
# Warmup Iteration  21: 1382714.286 ops/s
# Warmup Iteration  22: 1187841.923 ops/s
# Warmup Iteration  23: 1297306.284 ops/s
# Warmup Iteration  24: 1364323.096 ops/s
# Warmup Iteration  25: 1372431.398 ops/s
# Warmup Iteration  26: 1385246.112 ops/s
# Warmup Iteration  27: 1351234.180 ops/s
# Warmup Iteration  28: 1384108.860 ops/s
# Warmup Iteration  29: 1415378.790 ops/s
# Warmup Iteration  30: 1333667.932 ops/s
Iteration   1: 1375952.443 ops/s
Iteration   2: 1338079.851 ops/s
Iteration   3: 1385259.252 ops/s
Iteration   4: 1404247.335 ops/s
Iteration   5: 1362293.009 ops/s
Iteration   6: 1404525.368 ops/s
Iteration   7: 1344004.539 ops/s
Iteration   8: 1377946.384 ops/s
Iteration   9: 1413596.296 ops/s
Iteration  10: 1356759.863 ops/s
Iteration  11: 1409325.307 ops/s
Iteration  12: 1309696.552 ops/s
Iteration  13: 1376676.954 ops/s
Iteration  14: 1370883.276 ops/s
Iteration  15: 1321674.001 ops/s
Iteration  16: 1363974.870 ops/s
Iteration  17: 1350106.900 ops/s
Iteration  18: 1389685.981 ops/s
Iteration  19: 1339704.529 ops/s
Iteration  20: 1358604.061 ops/s
Iteration  21: 1420449.520 ops/s
Iteration  22: 1348703.208 ops/s
Iteration  23: 1410705.125 ops/s
Iteration  24: 1338381.688 ops/s
Iteration  25: 1402379.857 ops/s
Iteration  26: 1360344.298 ops/s
Iteration  27: 1374424.971 ops/s
Iteration  28: 1397278.741 ops/s
Iteration  29: 1342153.028 ops/s
Iteration  30: 1390062.368 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_normalBackpressured":
  1371262.652 ±(99.9%) 19477.944 ops/s [Average]
  (min, avg, max) = (1309696.552, 1371262.652, 1420449.520), stdev = 29153.671
  CI (99.9%): [1351784.709, 1390740.596] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_normalBackpressured  thrpt   30  1371262.652 ± 19477.944  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_independentlyMapped$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_independentlyMapped

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 271802.346 ops/s
# Warmup Iteration   2: 917571.938 ops/s
# Warmup Iteration   3: 1398399.498 ops/s
# Warmup Iteration   4: 1623397.268 ops/s
# Warmup Iteration   5: 1665649.461 ops/s
# Warmup Iteration   6: 1634445.624 ops/s
# Warmup Iteration   7: 1656004.344 ops/s
# Warmup Iteration   8: 1673058.922 ops/s
# Warmup Iteration   9: 1634748.725 ops/s
# Warmup Iteration  10: 1636876.854 ops/s
# Warmup Iteration  11: 1700156.553 ops/s
# Warmup Iteration  12: 1607903.928 ops/s
# Warmup Iteration  13: 1624644.396 ops/s
# Warmup Iteration  14: 1706561.224 ops/s
# Warmup Iteration  15: 1591997.192 ops/s
# Warmup Iteration  16: 1671337.328 ops/s
# Warmup Iteration  17: 1686642.559 ops/s
# Warmup Iteration  18: 1555078.773 ops/s
# Warmup Iteration  19: 1675658.004 ops/s
# Warmup Iteration  20: 1536519.352 ops/s
# Warmup Iteration  21: 1606606.526 ops/s
# Warmup Iteration  22: 1682527.122 ops/s
# Warmup Iteration  23: 1599673.249 ops/s
# Warmup Iteration  24: 1625074.146 ops/s
# Warmup Iteration  25: 1709251.130 ops/s
# Warmup Iteration  26: 1584897.795 ops/s
# Warmup Iteration  27: 1632671.147 ops/s
# Warmup Iteration  28: 1662293.751 ops/s
# Warmup Iteration  29: 1595794.255 ops/s
# Warmup Iteration  30: 1711243.154 ops/s
Iteration   1: 1573411.146 ops/s
Iteration   2: 1683994.554 ops/s
Iteration   3: 1713871.756 ops/s
Iteration   4: 1573706.088 ops/s
Iteration   5: 1652635.189 ops/s
Iteration   6: 1663538.100 ops/s
Iteration   7: 1522417.409 ops/s
Iteration   8: 1628690.579 ops/s
Iteration   9: 1630780.970 ops/s
Iteration  10: 1601067.834 ops/s
Iteration  11: 1690053.217 ops/s
Iteration  12: 1626808.284 ops/s
Iteration  13: 1647058.732 ops/s
Iteration  14: 1594332.733 ops/s
Iteration  15: 1596859.108 ops/s
Iteration  16: 1578709.510 ops/s
Iteration  17: 1652002.892 ops/s
Iteration  18: 1627983.198 ops/s
Iteration  19: 1711223.278 ops/s
Iteration  20: 1642792.838 ops/s
Iteration  21: 1655880.639 ops/s
Iteration  22: 1633816.883 ops/s
Iteration  23: 1639271.799 ops/s
Iteration  24: 1683110.718 ops/s
Iteration  25: 1612752.832 ops/s
Iteration  26: 1698570.583 ops/s
Iteration  27: 1676360.684 ops/s
Iteration  28: 1624366.139 ops/s
Iteration  29: 1662617.985 ops/s
Iteration  30: 1655886.995 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_independentlyMapped":
  1638485.756 ±(99.9%) 29587.710 ops/s [Average]
  (min, avg, max) = (1522417.409, 1638485.756, 1713871.756), stdev = 44285.495
  CI (99.9%): [1608898.045, 1668073.466] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_independentlyMapped  thrpt   30  1638485.756 ± 29587.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_drainMoreWorkBeforeCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_drainMoreWorkBeforeCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 169215.379 ops/s
# Warmup Iteration   2: 786007.529 ops/s
# Warmup Iteration   3: 1551230.869 ops/s
# Warmup Iteration   4: 1568612.826 ops/s
# Warmup Iteration   5: 1808101.395 ops/s
# Warmup Iteration   6: 1758092.788 ops/s
# Warmup Iteration   7: 1781219.435 ops/s
# Warmup Iteration   8: 1834133.512 ops/s
# Warmup Iteration   9: 1769270.396 ops/s
# Warmup Iteration  10: 1726534.303 ops/s
# Warmup Iteration  11: 1790787.133 ops/s
# Warmup Iteration  12: 1784116.574 ops/s
# Warmup Iteration  13: 1732973.879 ops/s
# Warmup Iteration  14: 1794076.279 ops/s
# Warmup Iteration  15: 1745929.916 ops/s
# Warmup Iteration  16: 1818078.527 ops/s
# Warmup Iteration  17: 1291335.241 ops/s
# Warmup Iteration  18: 1761473.700 ops/s
# Warmup Iteration  19: 1765003.862 ops/s
# Warmup Iteration  20: 1754196.777 ops/s
# Warmup Iteration  21: 1781024.631 ops/s
# Warmup Iteration  22: 1734249.082 ops/s
# Warmup Iteration  23: 1825965.927 ops/s
# Warmup Iteration  24: 1755734.909 ops/s
# Warmup Iteration  25: 1734606.580 ops/s
# Warmup Iteration  26: 1821315.494 ops/s
# Warmup Iteration  27: 1739925.569 ops/s
# Warmup Iteration  28: 1768984.793 ops/s
# Warmup Iteration  29: 1773474.886 ops/s
# Warmup Iteration  30: 1732971.794 ops/s
Iteration   1: 1824087.774 ops/s
Iteration   2: 1694804.076 ops/s
Iteration   3: 1837048.448 ops/s
Iteration   4: 1830063.096 ops/s
Iteration   5: 1772120.245 ops/s
Iteration   6: 1745054.447 ops/s
Iteration   7: 1803482.834 ops/s
Iteration   8: 1737473.797 ops/s
Iteration   9: 1758115.922 ops/s
Iteration  10: 1818143.191 ops/s
Iteration  11: 1745662.847 ops/s
Iteration  12: 1838403.581 ops/s
Iteration  13: 1719145.236 ops/s
Iteration  14: 1732299.367 ops/s
Iteration  15: 1776871.428 ops/s
Iteration  16: 1747239.461 ops/s
Iteration  17: 1739152.507 ops/s
Iteration  18: 1784080.066 ops/s
Iteration  19: 1733605.018 ops/s
Iteration  20: 1831312.159 ops/s
Iteration  21: 1807594.153 ops/s
Iteration  22: 1764760.838 ops/s
Iteration  23: 1772822.168 ops/s
Iteration  24: 1816219.434 ops/s
Iteration  25: 1763841.222 ops/s
Iteration  26: 1777945.928 ops/s
Iteration  27: 1736776.013 ops/s
Iteration  28: 1735679.246 ops/s
Iteration  29: 1820786.481 ops/s
Iteration  30: 1694018.890 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_drainMoreWorkBeforeCancel":
  1771953.662 ±(99.9%) 28354.108 ops/s [Average]
  (min, avg, max) = (1694018.890, 1771953.662, 1838403.581), stdev = 42439.097
  CI (99.9%): [1743599.555, 1800307.770] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_drainMoreWorkBeforeCancel  thrpt   30  1771953.662 ± 28354.108  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33810.904 ops/s
# Warmup Iteration   2: 137449.644 ops/s
# Warmup Iteration   3: 230601.632 ops/s
# Warmup Iteration   4: 249990.350 ops/s
# Warmup Iteration   5: 239138.380 ops/s
# Warmup Iteration   6: 243058.381 ops/s
# Warmup Iteration   7: 239450.054 ops/s
# Warmup Iteration   8: 240654.308 ops/s
# Warmup Iteration   9: 247230.893 ops/s
# Warmup Iteration  10: 246466.594 ops/s
# Warmup Iteration  11: 241989.914 ops/s
# Warmup Iteration  12: 243561.511 ops/s
# Warmup Iteration  13: 245280.848 ops/s
# Warmup Iteration  14: 239742.573 ops/s
# Warmup Iteration  15: 252034.952 ops/s
# Warmup Iteration  16: 237241.808 ops/s
# Warmup Iteration  17: 263447.107 ops/s
# Warmup Iteration  18: 256552.658 ops/s
# Warmup Iteration  19: 249284.711 ops/s
# Warmup Iteration  20: 266204.808 ops/s
# Warmup Iteration  21: 244122.912 ops/s
# Warmup Iteration  22: 253826.090 ops/s
# Warmup Iteration  23: 260727.941 ops/s
# Warmup Iteration  24: 257654.369 ops/s
# Warmup Iteration  25: 245522.425 ops/s
# Warmup Iteration  26: 265906.150 ops/s
# Warmup Iteration  27: 247335.709 ops/s
# Warmup Iteration  28: 255895.939 ops/s
# Warmup Iteration  29: 264875.012 ops/s
# Warmup Iteration  30: 250781.207 ops/s
Iteration   1: 258932.116 ops/s
Iteration   2: 247169.736 ops/s
Iteration   3: 253393.108 ops/s
Iteration   4: 266370.256 ops/s
Iteration   5: 253269.715 ops/s
Iteration   6: 263799.368 ops/s
Iteration   7: 250729.658 ops/s
Iteration   8: 266043.844 ops/s
Iteration   9: 258139.570 ops/s
Iteration  10: 251260.724 ops/s
Iteration  11: 252967.469 ops/s
Iteration  12: 269229.285 ops/s
Iteration  13: 260623.419 ops/s
Iteration  14: 258056.997 ops/s
Iteration  15: 260051.906 ops/s
Iteration  16: 249804.293 ops/s
Iteration  17: 257616.769 ops/s
Iteration  18: 253964.871 ops/s
Iteration  19: 256946.095 ops/s
Iteration  20: 263342.999 ops/s
Iteration  21: 257537.516 ops/s
Iteration  22: 264855.614 ops/s
Iteration  23: 250234.138 ops/s
Iteration  24: 270838.027 ops/s
Iteration  25: 249682.579 ops/s
Iteration  26: 255362.607 ops/s
Iteration  27: 257687.399 ops/s
Iteration  28: 264917.042 ops/s
Iteration  29: 251312.993 ops/s
Iteration  30: 260922.283 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToListTest._Benchmark.benchmark_doubleOnSubscribe":
  257835.413 ±(99.9%) 4212.912 ops/s [Average]
  (min, avg, max) = (247169.736, 257835.413, 270838.027), stdev = 6305.689
  CI (99.9%): [253622.501, 262048.325] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableToListTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  257835.413 ± 4212.912  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 220247.208 ops/s
# Warmup Iteration   2: 962567.287 ops/s
# Warmup Iteration   3: 1686527.122 ops/s
# Warmup Iteration   4: 1959665.612 ops/s
# Warmup Iteration   5: 1983416.297 ops/s
# Warmup Iteration   6: 1830855.521 ops/s
# Warmup Iteration   7: 1692579.970 ops/s
# Warmup Iteration   8: 2007843.342 ops/s
# Warmup Iteration   9: 1925882.426 ops/s
# Warmup Iteration  10: 1938155.816 ops/s
# Warmup Iteration  11: 1796150.413 ops/s
# Warmup Iteration  12: 1800017.434 ops/s
# Warmup Iteration  13: 1902205.949 ops/s
# Warmup Iteration  14: 1945722.765 ops/s
# Warmup Iteration  15: 1953699.666 ops/s
# Warmup Iteration  16: 1956278.708 ops/s
# Warmup Iteration  17: 1941818.272 ops/s
# Warmup Iteration  18: 1928360.219 ops/s
# Warmup Iteration  19: 2021185.953 ops/s
# Warmup Iteration  20: 1886322.858 ops/s
# Warmup Iteration  21: 1988632.628 ops/s
# Warmup Iteration  22: 1922773.273 ops/s
# Warmup Iteration  23: 1939753.597 ops/s
# Warmup Iteration  24: 1952354.199 ops/s
# Warmup Iteration  25: 1943386.001 ops/s
# Warmup Iteration  26: 1995707.326 ops/s
# Warmup Iteration  27: 1939484.321 ops/s
# Warmup Iteration  28: 1874166.323 ops/s
# Warmup Iteration  29: 2014711.809 ops/s
# Warmup Iteration  30: 1895450.381 ops/s
Iteration   1: 1990574.188 ops/s
Iteration   2: 1907515.012 ops/s
Iteration   3: 1957104.466 ops/s
Iteration   4: 1985307.500 ops/s
Iteration   5: 1896401.341 ops/s
Iteration   6: 1927764.896 ops/s
Iteration   7: 2006792.294 ops/s
Iteration   8: 1905718.800 ops/s
Iteration   9: 1951966.132 ops/s
Iteration  10: 1903550.988 ops/s
Iteration  11: 1895938.021 ops/s
Iteration  12: 1973305.389 ops/s
Iteration  13: 1886793.223 ops/s
Iteration  14: 1904900.327 ops/s
Iteration  15: 1977583.619 ops/s
Iteration  16: 1896400.123 ops/s
Iteration  17: 1920984.817 ops/s
Iteration  18: 1986282.198 ops/s
Iteration  19: 1927083.964 ops/s
Iteration  20: 1925343.012 ops/s
Iteration  21: 1986387.827 ops/s
Iteration  22: 2038019.669 ops/s
Iteration  23: 1902170.300 ops/s
Iteration  24: 1978293.400 ops/s
Iteration  25: 1935622.284 ops/s
Iteration  26: 1953859.618 ops/s
Iteration  27: 2018873.534 ops/s
Iteration  28: 1894097.966 ops/s
Iteration  29: 1943124.223 ops/s
Iteration  30: 1974799.973 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_take":
  1945085.303 ±(99.9%) 28310.545 ops/s [Average]
  (min, avg, max) = (1886793.223, 1945085.303, 2038019.669), stdev = 42373.894
  CI (99.9%): [1916774.758, 1973395.848] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_take  thrpt   30  1945085.303 ± 28310.545  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 131642.045 ops/s
# Warmup Iteration   2: 595528.796 ops/s
# Warmup Iteration   3: 1036549.961 ops/s
# Warmup Iteration   4: 1146752.514 ops/s
# Warmup Iteration   5: 1185436.015 ops/s
# Warmup Iteration   6: 1140706.830 ops/s
# Warmup Iteration   7: 1145645.349 ops/s
# Warmup Iteration   8: 1124549.139 ops/s
# Warmup Iteration   9: 1143646.982 ops/s
# Warmup Iteration  10: 1139425.221 ops/s
# Warmup Iteration  11: 1070700.472 ops/s
# Warmup Iteration  12: 1176461.619 ops/s
# Warmup Iteration  13: 1155612.571 ops/s
# Warmup Iteration  14: 1146307.072 ops/s
# Warmup Iteration  15: 1093327.304 ops/s
# Warmup Iteration  16: 1153633.563 ops/s
# Warmup Iteration  17: 1174487.554 ops/s
# Warmup Iteration  18: 1114996.961 ops/s
# Warmup Iteration  19: 1186685.155 ops/s
# Warmup Iteration  20: 1148039.230 ops/s
# Warmup Iteration  21: 1141816.073 ops/s
# Warmup Iteration  22: 1154512.854 ops/s
# Warmup Iteration  23: 1131604.977 ops/s
# Warmup Iteration  24: 1136516.048 ops/s
# Warmup Iteration  25: 1178695.671 ops/s
# Warmup Iteration  26: 1118703.852 ops/s
# Warmup Iteration  27: 1193463.565 ops/s
# Warmup Iteration  28: 1218644.404 ops/s
# Warmup Iteration  29: 1084222.718 ops/s
# Warmup Iteration  30: 1171683.704 ops/s
Iteration   1: 1126575.755 ops/s
Iteration   2: 1163856.317 ops/s
Iteration   3: 1182827.163 ops/s
Iteration   4: 1123014.964 ops/s
Iteration   5: 1202758.275 ops/s
Iteration   6: 1123327.239 ops/s
Iteration   7: 1158456.295 ops/s
Iteration   8: 1176340.674 ops/s
Iteration   9: 1112976.048 ops/s
Iteration  10: 1155442.710 ops/s
Iteration  11: 1179177.973 ops/s
Iteration  12: 1156852.785 ops/s
Iteration  13: 1176948.274 ops/s
Iteration  14: 1165268.576 ops/s
Iteration  15: 1167451.933 ops/s
Iteration  16: 1151640.335 ops/s
Iteration  17: 1150300.521 ops/s
Iteration  18: 1210122.466 ops/s
Iteration  19: 1174590.603 ops/s
Iteration  20: 1129267.529 ops/s
Iteration  21: 1212700.728 ops/s
Iteration  22: 1119418.179 ops/s
Iteration  23: 1175510.252 ops/s
Iteration  24: 1168396.581 ops/s
Iteration  25: 1181209.583 ops/s
Iteration  26: 1126599.419 ops/s
Iteration  27: 1115368.095 ops/s
Iteration  28: 1182226.242 ops/s
Iteration  29: 1150894.293 ops/s
Iteration  30: 1163695.961 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeBackpressured":
  1159440.526 ±(99.9%) 18465.090 ops/s [Average]
  (min, avg, max) = (1112976.048, 1159440.526, 1212700.728), stdev = 27637.680
  CI (99.9%): [1140975.436, 1177905.616] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_rangeBackpressured  thrpt   30  1159440.526 ± 18465.090  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_mapperThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_mapperThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 136895.868 ops/s
# Warmup Iteration   2: 468578.103 ops/s
# Warmup Iteration   3: 487789.214 ops/s
# Warmup Iteration   4: 515924.846 ops/s
# Warmup Iteration   5: 506468.906 ops/s
# Warmup Iteration   6: 389793.475 ops/s
# Warmup Iteration   7: 512041.553 ops/s
# Warmup Iteration   8: 514643.770 ops/s
# Warmup Iteration   9: 517729.872 ops/s
# Warmup Iteration  10: 519431.945 ops/s
# Warmup Iteration  11: 504564.050 ops/s
# Warmup Iteration  12: 535226.830 ops/s
# Warmup Iteration  13: 496432.721 ops/s
# Warmup Iteration  14: 515096.887 ops/s
# Warmup Iteration  15: 521342.441 ops/s
# Warmup Iteration  16: 504750.781 ops/s
# Warmup Iteration  17: 533332.820 ops/s
# Warmup Iteration  18: 528303.104 ops/s
# Warmup Iteration  19: 545924.952 ops/s
# Warmup Iteration  20: 508590.687 ops/s
# Warmup Iteration  21: 518529.000 ops/s
# Warmup Iteration  22: 553862.672 ops/s
# Warmup Iteration  23: 565187.789 ops/s
# Warmup Iteration  24: 516298.418 ops/s
# Warmup Iteration  25: 506486.839 ops/s
# Warmup Iteration  26: 555073.207 ops/s
# Warmup Iteration  27: 533614.943 ops/s
# Warmup Iteration  28: 538664.195 ops/s
# Warmup Iteration  29: 557313.624 ops/s
# Warmup Iteration  30: 517454.244 ops/s
Iteration   1: 541913.162 ops/s
Iteration   2: 544029.721 ops/s
Iteration   3: 540721.209 ops/s
Iteration   4: 553227.178 ops/s
Iteration   5: 525814.363 ops/s
Iteration   6: 547505.821 ops/s
Iteration   7: 519545.337 ops/s
Iteration   8: 552920.466 ops/s
Iteration   9: 526449.636 ops/s
Iteration  10: 544054.513 ops/s
Iteration  11: 533642.693 ops/s
Iteration  12: 525508.886 ops/s
Iteration  13: 545882.626 ops/s
Iteration  14: 527709.180 ops/s
Iteration  15: 538700.516 ops/s
Iteration  16: 538101.540 ops/s
Iteration  17: 510347.496 ops/s
Iteration  18: 542623.780 ops/s
Iteration  19: 497125.550 ops/s
Iteration  20: 544375.975 ops/s
Iteration  21: 550504.800 ops/s
Iteration  22: 520000.474 ops/s
Iteration  23: 558027.068 ops/s
Iteration  24: 530426.426 ops/s
Iteration  25: 529958.630 ops/s
Iteration  26: 524055.604 ops/s
Iteration  27: 563755.850 ops/s
Iteration  28: 519763.566 ops/s
Iteration  29: 554612.863 ops/s
Iteration  30: 523270.307 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_mapperThrows":
  535819.175 ±(99.9%) 10115.808 ops/s [Average]
  (min, avg, max) = (497125.550, 535819.175, 563755.850), stdev = 15140.866
  CI (99.9%): [525703.367, 545934.982] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_mapperThrows  thrpt   30  535819.175 ± 10115.808  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 239700.938 ops/s
# Warmup Iteration   2: 975005.041 ops/s
# Warmup Iteration   3: 1477374.494 ops/s
# Warmup Iteration   4: 1747763.010 ops/s
# Warmup Iteration   5: 1783141.081 ops/s
# Warmup Iteration   6: 1681178.834 ops/s
# Warmup Iteration   7: 1797123.986 ops/s
# Warmup Iteration   8: 1796900.669 ops/s
# Warmup Iteration   9: 1739297.268 ops/s
# Warmup Iteration  10: 1739445.050 ops/s
# Warmup Iteration  11: 1799913.981 ops/s
# Warmup Iteration  12: 1811994.420 ops/s
# Warmup Iteration  13: 1684189.327 ops/s
# Warmup Iteration  14: 1855771.809 ops/s
# Warmup Iteration  15: 1717777.460 ops/s
# Warmup Iteration  16: 1788821.302 ops/s
# Warmup Iteration  17: 1772470.405 ops/s
# Warmup Iteration  18: 1764783.515 ops/s
# Warmup Iteration  19: 1714895.295 ops/s
# Warmup Iteration  20: 1737715.221 ops/s
# Warmup Iteration  21: 1786729.294 ops/s
# Warmup Iteration  22: 1745001.123 ops/s
# Warmup Iteration  23: 1821090.639 ops/s
# Warmup Iteration  24: 1768008.193 ops/s
# Warmup Iteration  25: 1720911.129 ops/s
# Warmup Iteration  26: 1720032.289 ops/s
# Warmup Iteration  27: 1742808.320 ops/s
# Warmup Iteration  28: 1781698.866 ops/s
# Warmup Iteration  29: 1819300.519 ops/s
# Warmup Iteration  30: 1816305.770 ops/s
Iteration   1: 1750436.145 ops/s
Iteration   2: 1721218.868 ops/s
Iteration   3: 1766253.382 ops/s
Iteration   4: 1743867.160 ops/s
Iteration   5: 1826614.533 ops/s
Iteration   6: 1713262.876 ops/s
Iteration   7: 1799712.134 ops/s
Iteration   8: 1748941.036 ops/s
Iteration   9: 1768534.539 ops/s
Iteration  10: 1816796.127 ops/s
Iteration  11: 1820524.098 ops/s
Iteration  12: 1772324.845 ops/s
Iteration  13: 1756712.600 ops/s
Iteration  14: 1784325.445 ops/s
Iteration  15: 1712111.524 ops/s
Iteration  16: 1739099.075 ops/s
Iteration  17: 1791267.986 ops/s
Iteration  18: 1782365.762 ops/s
Iteration  19: 1765509.619 ops/s
Iteration  20: 1808581.534 ops/s
Iteration  21: 1687738.958 ops/s
Iteration  22: 1834078.935 ops/s
Iteration  23: 1711012.916 ops/s
Iteration  24: 1791592.613 ops/s
Iteration  25: 1828103.687 ops/s
Iteration  26: 1750364.347 ops/s
Iteration  27: 1716429.439 ops/s
Iteration  28: 1795546.662 ops/s
Iteration  29: 1725327.065 ops/s
Iteration  30: 1807396.129 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_dispose":
  1767868.335 ±(99.9%) 27215.965 ops/s [Average]
  (min, avg, max) = (1687738.958, 1767868.335, 1834078.935), stdev = 40735.579
  CI (99.9%): [1740652.369, 1795084.300] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_dispose  thrpt   30  1767868.335 ± 27215.965  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 169860.178 ops/s
# Warmup Iteration   2: 580599.702 ops/s
# Warmup Iteration   3: 686700.452 ops/s
# Warmup Iteration   4: 710450.731 ops/s
# Warmup Iteration   5: 611412.188 ops/s
# Warmup Iteration   6: 712475.841 ops/s
# Warmup Iteration   7: 625907.628 ops/s
# Warmup Iteration   8: 712200.345 ops/s
# Warmup Iteration   9: 700004.058 ops/s
# Warmup Iteration  10: 682582.123 ops/s
# Warmup Iteration  11: 720751.563 ops/s
# Warmup Iteration  12: 722093.117 ops/s
# Warmup Iteration  13: 690829.998 ops/s
# Warmup Iteration  14: 671300.452 ops/s
# Warmup Iteration  15: 664574.418 ops/s
# Warmup Iteration  16: 711585.201 ops/s
# Warmup Iteration  17: 722557.099 ops/s
# Warmup Iteration  18: 738086.738 ops/s
# Warmup Iteration  19: 767675.507 ops/s
# Warmup Iteration  20: 713413.034 ops/s
# Warmup Iteration  21: 765021.800 ops/s
# Warmup Iteration  22: 774249.131 ops/s
# Warmup Iteration  23: 714552.442 ops/s
# Warmup Iteration  24: 738408.793 ops/s
# Warmup Iteration  25: 764900.264 ops/s
# Warmup Iteration  26: 724197.430 ops/s
# Warmup Iteration  27: 743350.251 ops/s
# Warmup Iteration  28: 737720.670 ops/s
# Warmup Iteration  29: 749762.406 ops/s
# Warmup Iteration  30: 752256.072 ops/s
Iteration   1: 765015.185 ops/s
Iteration   2: 726110.751 ops/s
Iteration   3: 754434.613 ops/s
Iteration   4: 718620.575 ops/s
Iteration   5: 735513.451 ops/s
Iteration   6: 714238.666 ops/s
Iteration   7: 721262.525 ops/s
Iteration   8: 749723.045 ops/s
Iteration   9: 721148.782 ops/s
Iteration  10: 733880.601 ops/s
Iteration  11: 714056.304 ops/s
Iteration  12: 772851.692 ops/s
Iteration  13: 754370.249 ops/s
Iteration  14: 760760.799 ops/s
Iteration  15: 752955.825 ops/s
Iteration  16: 725079.605 ops/s
Iteration  17: 767653.004 ops/s
Iteration  18: 725113.093 ops/s
Iteration  19: 758660.579 ops/s
Iteration  20: 725126.400 ops/s
Iteration  21: 753004.381 ops/s
Iteration  22: 764488.832 ops/s
Iteration  23: 728191.016 ops/s
Iteration  24: 754515.242 ops/s
Iteration  25: 749405.817 ops/s
Iteration  26: 754708.044 ops/s
Iteration  27: 730485.907 ops/s
Iteration  28: 734055.088 ops/s
Iteration  29: 770073.534 ops/s
Iteration  30: 761085.768 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorError":
  743219.646 ±(99.9%) 12363.068 ops/s [Average]
  (min, avg, max) = (714056.304, 743219.646, 772851.692), stdev = 18504.460
  CI (99.9%): [730856.578, 755582.714] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableElementAtTest._Benchmark.benchmark_elementAtOrErrorError  thrpt   30  743219.646 ± 12363.068  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_noRequestOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_noRequestOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102747.023 ops/s
# Warmup Iteration   2: 534903.684 ops/s
# Warmup Iteration   3: 609667.048 ops/s
# Warmup Iteration   4: 637453.889 ops/s
# Warmup Iteration   5: 661795.383 ops/s
# Warmup Iteration   6: 653923.074 ops/s
# Warmup Iteration   7: 635541.610 ops/s
# Warmup Iteration   8: 637282.253 ops/s
# Warmup Iteration   9: 615640.710 ops/s
# Warmup Iteration  10: 632119.420 ops/s
# Warmup Iteration  11: 636541.032 ops/s
# Warmup Iteration  12: 621966.559 ops/s
# Warmup Iteration  13: 645706.314 ops/s
# Warmup Iteration  14: 623938.838 ops/s
# Warmup Iteration  15: 637097.693 ops/s
# Warmup Iteration  16: 654236.365 ops/s
# Warmup Iteration  17: 654274.696 ops/s
# Warmup Iteration  18: 667014.143 ops/s
# Warmup Iteration  19: 664977.766 ops/s
# Warmup Iteration  20: 632603.862 ops/s
# Warmup Iteration  21: 712269.125 ops/s
# Warmup Iteration  22: 638976.659 ops/s
# Warmup Iteration  23: 703235.163 ops/s
# Warmup Iteration  24: 686653.133 ops/s
# Warmup Iteration  25: 675446.725 ops/s
# Warmup Iteration  26: 676781.396 ops/s
# Warmup Iteration  27: 670892.198 ops/s
# Warmup Iteration  28: 692861.745 ops/s
# Warmup Iteration  29: 669391.869 ops/s
# Warmup Iteration  30: 681018.821 ops/s
Iteration   1: 708115.043 ops/s
Iteration   2: 680398.877 ops/s
Iteration   3: 684289.735 ops/s
Iteration   4: 667856.891 ops/s
Iteration   5: 689965.373 ops/s
Iteration   6: 672159.307 ops/s
Iteration   7: 680306.070 ops/s
Iteration   8: 674923.651 ops/s
Iteration   9: 672010.840 ops/s
Iteration  10: 671090.582 ops/s
Iteration  11: 621465.041 ops/s
Iteration  12: 683801.194 ops/s
Iteration  13: 679232.064 ops/s
Iteration  14: 668514.473 ops/s
Iteration  15: 702476.667 ops/s
Iteration  16: 662914.663 ops/s
Iteration  17: 676299.859 ops/s
Iteration  18: 693052.664 ops/s
Iteration  19: 675188.431 ops/s
Iteration  20: 678143.951 ops/s
Iteration  21: 697667.082 ops/s
Iteration  22: 655675.184 ops/s
Iteration  23: 691970.704 ops/s
Iteration  24: 674843.464 ops/s
Iteration  25: 683026.795 ops/s
Iteration  26: 611955.167 ops/s
Iteration  27: 622682.935 ops/s
Iteration  28: 702500.486 ops/s
Iteration  29: 657167.447 ops/s
Iteration  30: 691740.758 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithSingleTest._Benchmark.benchmark_noRequestOnError":
  674381.180 ±(99.9%) 15237.296 ops/s [Average]
  (min, avg, max) = (611955.167, 674381.180, 708115.043), stdev = 22806.469
  CI (99.9%): [659143.884, 689618.476] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableMergeWithSingleTest._Benchmark.benchmark_noRequestOnError  thrpt   30  674381.180 ± 15237.296  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112589.934 ops/s
# Warmup Iteration   2: 559767.892 ops/s
# Warmup Iteration   3: 654541.802 ops/s
# Warmup Iteration   4: 691068.174 ops/s
# Warmup Iteration   5: 712589.283 ops/s
# Warmup Iteration   6: 672117.189 ops/s
# Warmup Iteration   7: 692621.275 ops/s
# Warmup Iteration   8: 691526.457 ops/s
# Warmup Iteration   9: 666185.820 ops/s
# Warmup Iteration  10: 706174.019 ops/s
# Warmup Iteration  11: 700446.425 ops/s
# Warmup Iteration  12: 680679.769 ops/s
# Warmup Iteration  13: 666823.093 ops/s
# Warmup Iteration  14: 652886.653 ops/s
# Warmup Iteration  15: 644684.147 ops/s
# Warmup Iteration  16: 717477.919 ops/s
# Warmup Iteration  17: 701700.014 ops/s
# Warmup Iteration  18: 719309.795 ops/s
# Warmup Iteration  19: 725595.343 ops/s
# Warmup Iteration  20: 729825.241 ops/s
# Warmup Iteration  21: 745397.204 ops/s
# Warmup Iteration  22: 760887.924 ops/s
# Warmup Iteration  23: 735147.205 ops/s
# Warmup Iteration  24: 745685.512 ops/s
# Warmup Iteration  25: 708700.087 ops/s
# Warmup Iteration  26: 755693.519 ops/s
# Warmup Iteration  27: 763588.292 ops/s
# Warmup Iteration  28: 729130.913 ops/s
# Warmup Iteration  29: 742184.094 ops/s
# Warmup Iteration  30: 767069.607 ops/s
Iteration   1: 706586.188 ops/s
Iteration   2: 742396.423 ops/s
Iteration   3: 739887.713 ops/s
Iteration   4: 758016.642 ops/s
Iteration   5: 748728.195 ops/s
Iteration   6: 726646.322 ops/s
Iteration   7: 746942.574 ops/s
Iteration   8: 725200.658 ops/s
Iteration   9: 768476.803 ops/s
Iteration  10: 750102.346 ops/s
Iteration  11: 730669.593 ops/s
Iteration  12: 743520.500 ops/s
Iteration  13: 763384.116 ops/s
Iteration  14: 724466.002 ops/s
Iteration  15: 737970.805 ops/s
Iteration  16: 740080.043 ops/s
Iteration  17: 762355.321 ops/s
Iteration  18: 723202.029 ops/s
Iteration  19: 747952.558 ops/s
Iteration  20: 741898.973 ops/s
Iteration  21: 740239.088 ops/s
Iteration  22: 741114.288 ops/s
Iteration  23: 752528.861 ops/s
Iteration  24: 735257.224 ops/s
Iteration  25: 739709.693 ops/s
Iteration  26: 763042.600 ops/s
Iteration  27: 734207.424 ops/s
Iteration  28: 762524.018 ops/s
Iteration  29: 719796.859 ops/s
Iteration  30: 726597.765 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrErrorError":
  741450.054 ±(99.9%) 9924.791 ops/s [Average]
  (min, avg, max) = (706586.188, 741450.054, 768476.803), stdev = 14854.961
  CI (99.9%): [731525.263, 751374.845] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableSingleTest._Benchmark.benchmark_singleOrErrorError  thrpt   30  741450.054 ± 9924.791  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_backpressureBounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_backpressureBounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 10369.291 ops/s
# Warmup Iteration   2: 37320.661 ops/s
# Warmup Iteration   3: 43830.081 ops/s
# Warmup Iteration   4: 102205.319 ops/s
# Warmup Iteration   5: 113371.162 ops/s
# Warmup Iteration   6: 104387.559 ops/s
# Warmup Iteration   7: 122111.698 ops/s
# Warmup Iteration   8: 113837.913 ops/s
# Warmup Iteration   9: 121521.502 ops/s
# Warmup Iteration  10: 115534.026 ops/s
# Warmup Iteration  11: 118494.696 ops/s
# Warmup Iteration  12: 114759.911 ops/s
# Warmup Iteration  13: 122429.314 ops/s
# Warmup Iteration  14: 122793.957 ops/s
# Warmup Iteration  15: 114200.223 ops/s
# Warmup Iteration  16: 120293.216 ops/s
# Warmup Iteration  17: 114004.536 ops/s
# Warmup Iteration  18: 118578.478 ops/s
# Warmup Iteration  19: 118514.216 ops/s
# Warmup Iteration  20: 117708.538 ops/s
# Warmup Iteration  21: 121794.289 ops/s
# Warmup Iteration  22: 116628.517 ops/s
# Warmup Iteration  23: 123032.698 ops/s
# Warmup Iteration  24: 120121.137 ops/s
# Warmup Iteration  25: 116734.147 ops/s
# Warmup Iteration  26: 122216.617 ops/s
# Warmup Iteration  27: 116537.881 ops/s
# Warmup Iteration  28: 117370.838 ops/s
# Warmup Iteration  29: 117741.823 ops/s
# Warmup Iteration  30: 118395.612 ops/s
Iteration   1: 115257.081 ops/s
Iteration   2: 120195.204 ops/s
Iteration   3: 114979.675 ops/s
Iteration   4: 122110.119 ops/s
Iteration   5: 114740.952 ops/s
Iteration   6: 119439.032 ops/s
Iteration   7: 117614.131 ops/s
Iteration   8: 120042.040 ops/s
Iteration   9: 122091.603 ops/s
Iteration  10: 115940.624 ops/s
Iteration  11: 120501.602 ops/s
Iteration  12: 116817.955 ops/s
Iteration  13: 118604.100 ops/s
Iteration  14: 117202.225 ops/s
Iteration  15: 116200.961 ops/s
Iteration  16: 122438.145 ops/s
Iteration  17: 116772.044 ops/s
Iteration  18: 117935.443 ops/s
Iteration  19: 120111.046 ops/s
Iteration  20: 116395.453 ops/s
Iteration  21: 107246.396 ops/s
Iteration  22: 113689.091 ops/s
Iteration  23: 119449.167 ops/s
Iteration  24: 120042.945 ops/s
Iteration  25: 118863.831 ops/s
Iteration  26: 119457.238 ops/s
Iteration  27: 117981.625 ops/s
Iteration  28: 116771.139 ops/s
Iteration  29: 119072.705 ops/s
Iteration  30: 118022.482 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_backpressureBounded":
  117866.202 ±(99.9%) 2008.085 ops/s [Average]
  (min, avg, max) = (107246.396, 117866.202, 122438.145), stdev = 3005.608
  CI (99.9%): [115858.117, 119874.287] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_backpressureBounded  thrpt   30  117866.202 ± 2008.085  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapCancelAfterWindow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapCancelAfterWindow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 78544.798 ops/s
# Warmup Iteration   2: 193540.522 ops/s
# Warmup Iteration   3: 543793.811 ops/s
# Warmup Iteration   4: 610514.282 ops/s
# Warmup Iteration   5: 797340.303 ops/s
# Warmup Iteration   6: 792462.243 ops/s
# Warmup Iteration   7: 743896.105 ops/s
# Warmup Iteration   8: 786508.698 ops/s
# Warmup Iteration   9: 735004.280 ops/s
# Warmup Iteration  10: 720361.810 ops/s
# Warmup Iteration  11: 782489.798 ops/s
# Warmup Iteration  12: 745940.300 ops/s
# Warmup Iteration  13: 777200.378 ops/s
# Warmup Iteration  14: 732376.327 ops/s
# Warmup Iteration  15: 748223.359 ops/s
# Warmup Iteration  16: 805647.330 ops/s
# Warmup Iteration  17: 739648.484 ops/s
# Warmup Iteration  18: 748599.933 ops/s
# Warmup Iteration  19: 779407.820 ops/s
# Warmup Iteration  20: 776037.600 ops/s
# Warmup Iteration  21: 760821.681 ops/s
# Warmup Iteration  22: 811567.888 ops/s
# Warmup Iteration  23: 747544.340 ops/s
# Warmup Iteration  24: 755360.859 ops/s
# Warmup Iteration  25: 730363.286 ops/s
# Warmup Iteration  26: 786134.160 ops/s
# Warmup Iteration  27: 790623.827 ops/s
# Warmup Iteration  28: 741694.577 ops/s
# Warmup Iteration  29: 775384.967 ops/s
# Warmup Iteration  30: 757692.106 ops/s
Iteration   1: 801990.740 ops/s
Iteration   2: 770240.730 ops/s
Iteration   3: 762208.339 ops/s
Iteration   4: 781560.605 ops/s
Iteration   5: 793481.766 ops/s
Iteration   6: 753173.510 ops/s
Iteration   7: 765970.289 ops/s
Iteration   8: 783207.460 ops/s
Iteration   9: 740111.964 ops/s
Iteration  10: 768782.073 ops/s
Iteration  11: 748583.259 ops/s
Iteration  12: 770990.896 ops/s
Iteration  13: 746592.712 ops/s
Iteration  14: 751131.485 ops/s
Iteration  15: 756130.370 ops/s
Iteration  16: 792497.945 ops/s
Iteration  17: 759332.352 ops/s
Iteration  18: 764096.203 ops/s
Iteration  19: 772176.175 ops/s
Iteration  20: 744611.025 ops/s
Iteration  21: 786858.062 ops/s
Iteration  22: 756376.329 ops/s
Iteration  23: 778379.216 ops/s
Iteration  24: 750490.766 ops/s
Iteration  25: 784793.461 ops/s
Iteration  26: 751501.547 ops/s
Iteration  27: 750015.611 ops/s
Iteration  28: 783274.545 ops/s
Iteration  29: 738129.010 ops/s
Iteration  30: 752780.394 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapCancelAfterWindow":
  765315.628 ±(99.9%) 11578.117 ops/s [Average]
  (min, avg, max) = (738129.010, 765315.628, 801990.740), stdev = 17329.582
  CI (99.9%): [753737.511, 776893.745] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_overlapCancelAfterWindow  thrpt   30  765315.628 ± 11578.117  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46581.811 ops/s
# Warmup Iteration   2: 350971.484 ops/s
# Warmup Iteration   3: 542365.293 ops/s
# Warmup Iteration   4: 777718.549 ops/s
# Warmup Iteration   5: 769222.297 ops/s
# Warmup Iteration   6: 843655.296 ops/s
# Warmup Iteration   7: 850526.369 ops/s
# Warmup Iteration   8: 910838.960 ops/s
# Warmup Iteration   9: 880513.906 ops/s
# Warmup Iteration  10: 886276.823 ops/s
# Warmup Iteration  11: 843359.468 ops/s
# Warmup Iteration  12: 871280.353 ops/s
# Warmup Iteration  13: 913753.219 ops/s
# Warmup Iteration  14: 847509.052 ops/s
# Warmup Iteration  15: 901984.060 ops/s
# Warmup Iteration  16: 860047.026 ops/s
# Warmup Iteration  17: 883855.922 ops/s
# Warmup Iteration  18: 868695.591 ops/s
# Warmup Iteration  19: 886566.278 ops/s
# Warmup Iteration  20: 921211.734 ops/s
# Warmup Iteration  21: 844007.814 ops/s
# Warmup Iteration  22: 885658.662 ops/s
# Warmup Iteration  23: 870301.536 ops/s
# Warmup Iteration  24: 844573.750 ops/s
# Warmup Iteration  25: 909981.630 ops/s
# Warmup Iteration  26: 872809.186 ops/s
# Warmup Iteration  27: 893270.427 ops/s
# Warmup Iteration  28: 860490.994 ops/s
# Warmup Iteration  29: 863602.226 ops/s
# Warmup Iteration  30: 878921.797 ops/s
Iteration   1: 866679.051 ops/s
Iteration   2: 900945.520 ops/s
Iteration   3: 876147.765 ops/s
Iteration   4: 858639.676 ops/s
Iteration   5: 891174.713 ops/s
Iteration   6: 858740.936 ops/s
Iteration   7: 887495.546 ops/s
Iteration   8: 860210.694 ops/s
Iteration   9: 901105.511 ops/s
Iteration  10: 871220.361 ops/s
Iteration  11: 868268.752 ops/s
Iteration  12: 890714.361 ops/s
Iteration  13: 839659.725 ops/s
Iteration  14: 838659.063 ops/s
Iteration  15: 854496.563 ops/s
Iteration  16: 739626.907 ops/s
Iteration  17: 864275.562 ops/s
Iteration  18: 893409.345 ops/s
Iteration  19: 864827.586 ops/s
Iteration  20: 875256.020 ops/s
Iteration  21: 861090.385 ops/s
Iteration  22: 877888.469 ops/s
Iteration  23: 876308.219 ops/s
Iteration  24: 859842.821 ops/s
Iteration  25: 891702.426 ops/s
Iteration  26: 876217.203 ops/s
Iteration  27: 877761.121 ops/s
Iteration  28: 871838.321 ops/s
Iteration  29: 867712.418 ops/s
Iteration  30: 893566.796 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_take":
  868516.061 ±(99.9%) 19475.320 ops/s [Average]
  (min, avg, max) = (739626.907, 868516.061, 901105.511), stdev = 29149.745
  CI (99.9%): [849040.741, 887991.382] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_take  thrpt   30  868516.061 ± 19475.320  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_take$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_take

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70610.882 ops/s
# Warmup Iteration   2: 416653.303 ops/s
# Warmup Iteration   3: 544752.353 ops/s
# Warmup Iteration   4: 795450.209 ops/s
# Warmup Iteration   5: 780653.291 ops/s
# Warmup Iteration   6: 805838.617 ops/s
# Warmup Iteration   7: 864845.013 ops/s
# Warmup Iteration   8: 904141.737 ops/s
# Warmup Iteration   9: 843314.840 ops/s
# Warmup Iteration  10: 878713.463 ops/s
# Warmup Iteration  11: 877632.922 ops/s
# Warmup Iteration  12: 873703.674 ops/s
# Warmup Iteration  13: 864095.906 ops/s
# Warmup Iteration  14: 903672.089 ops/s
# Warmup Iteration  15: 876702.066 ops/s
# Warmup Iteration  16: 864924.007 ops/s
# Warmup Iteration  17: 883859.654 ops/s
# Warmup Iteration  18: 898516.832 ops/s
# Warmup Iteration  19: 881794.610 ops/s
# Warmup Iteration  20: 894911.272 ops/s
# Warmup Iteration  21: 883181.935 ops/s
# Warmup Iteration  22: 888847.159 ops/s
# Warmup Iteration  23: 889027.710 ops/s
# Warmup Iteration  24: 861379.736 ops/s
# Warmup Iteration  25: 895416.894 ops/s
# Warmup Iteration  26: 892621.991 ops/s
# Warmup Iteration  27: 910210.923 ops/s
# Warmup Iteration  28: 887860.135 ops/s
# Warmup Iteration  29: 870230.729 ops/s
# Warmup Iteration  30: 891384.960 ops/s
Iteration   1: 885516.681 ops/s
Iteration   2: 886881.634 ops/s
Iteration   3: 892108.649 ops/s
Iteration   4: 862803.300 ops/s
Iteration   5: 918400.682 ops/s
Iteration   6: 862082.831 ops/s
Iteration   7: 877497.222 ops/s
Iteration   8: 930800.561 ops/s
Iteration   9: 911046.536 ops/s
Iteration  10: 878214.624 ops/s
Iteration  11: 890320.785 ops/s
Iteration  12: 864829.284 ops/s
Iteration  13: 887701.198 ops/s
Iteration  14: 869504.996 ops/s
Iteration  15: 859152.789 ops/s
Iteration  16: 907675.316 ops/s
Iteration  17: 869124.413 ops/s
Iteration  18: 895084.307 ops/s
Iteration  19: 874415.842 ops/s
Iteration  20: 884247.205 ops/s
Iteration  21: 904185.867 ops/s
Iteration  22: 866401.313 ops/s
Iteration  23: 913348.146 ops/s
Iteration  24: 905462.358 ops/s
Iteration  25: 898299.862 ops/s
Iteration  26: 877127.925 ops/s
Iteration  27: 898978.541 ops/s
Iteration  28: 877218.247 ops/s
Iteration  29: 898319.154 ops/s
Iteration  30: 884593.531 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_take":
  887711.460 ±(99.9%) 12272.801 ops/s [Average]
  (min, avg, max) = (859152.789, 887711.460, 930800.561), stdev = 18369.352
  CI (99.9%): [875438.659, 899984.261] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_take  thrpt   30  887711.460 ± 12272.801  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 179749.867 ops/s
# Warmup Iteration   2: 400070.059 ops/s
# Warmup Iteration   3: 530701.209 ops/s
# Warmup Iteration   4: 561830.041 ops/s
# Warmup Iteration   5: 541945.521 ops/s
# Warmup Iteration   6: 612364.157 ops/s
# Warmup Iteration   7: 570037.585 ops/s
# Warmup Iteration   8: 594467.743 ops/s
# Warmup Iteration   9: 602031.384 ops/s
# Warmup Iteration  10: 594854.380 ops/s
# Warmup Iteration  11: 601665.723 ops/s
# Warmup Iteration  12: 613261.357 ops/s
# Warmup Iteration  13: 591825.691 ops/s
# Warmup Iteration  14: 600137.429 ops/s
# Warmup Iteration  15: 603322.808 ops/s
# Warmup Iteration  16: 606685.700 ops/s
# Warmup Iteration  17: 609852.371 ops/s
# Warmup Iteration  18: 630205.786 ops/s
# Warmup Iteration  19: 652118.014 ops/s
# Warmup Iteration  20: 607235.249 ops/s
# Warmup Iteration  21: 650250.048 ops/s
# Warmup Iteration  22: 626006.653 ops/s
# Warmup Iteration  23: 626272.901 ops/s
# Warmup Iteration  24: 643376.490 ops/s
# Warmup Iteration  25: 632608.357 ops/s
# Warmup Iteration  26: 628586.552 ops/s
# Warmup Iteration  27: 621518.608 ops/s
# Warmup Iteration  28: 647551.758 ops/s
# Warmup Iteration  29: 627556.306 ops/s
# Warmup Iteration  30: 635053.028 ops/s
Iteration   1: 616658.389 ops/s
Iteration   2: 638389.132 ops/s
Iteration   3: 650345.609 ops/s
Iteration   4: 623555.995 ops/s
Iteration   5: 642245.395 ops/s
Iteration   6: 622306.319 ops/s
Iteration   7: 629885.508 ops/s
Iteration   8: 641825.418 ops/s
Iteration   9: 623325.365 ops/s
Iteration  10: 629736.590 ops/s
Iteration  11: 543777.677 ops/s
Iteration  12: 619278.987 ops/s
Iteration  13: 656115.868 ops/s
Iteration  14: 591435.164 ops/s
Iteration  15: 627492.385 ops/s
Iteration  16: 649072.642 ops/s
Iteration  17: 620737.746 ops/s
Iteration  18: 657854.983 ops/s
Iteration  19: 645070.736 ops/s
Iteration  20: 620369.956 ops/s
Iteration  21: 645924.844 ops/s
Iteration  22: 609754.212 ops/s
Iteration  23: 640738.237 ops/s
Iteration  24: 652130.410 ops/s
Iteration  25: 649863.524 ops/s
Iteration  26: 638947.681 ops/s
Iteration  27: 628526.801 ops/s
Iteration  28: 649073.121 ops/s
Iteration  29: 649829.583 ops/s
Iteration  30: 611556.322 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_error":
  630860.820 ±(99.9%) 15289.710 ops/s [Average]
  (min, avg, max) = (543777.677, 630860.820, 657854.983), stdev = 22884.920
  CI (99.9%): [615571.110, 646150.530] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
FlowableThrottleLatestTest._Benchmark.benchmark_error  thrpt   30  630860.820 ± 15289.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_just$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_just

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 14641.535 ops/s
# Warmup Iteration   2: 71907.407 ops/s
# Warmup Iteration   3: 105466.674 ops/s
# Warmup Iteration   4: 120272.859 ops/s
# Warmup Iteration   5: 113145.621 ops/s
# Warmup Iteration   6: 138925.408 ops/s
# Warmup Iteration   7: 143987.197 ops/s
# Warmup Iteration   8: 125602.546 ops/s
# Warmup Iteration   9: 123721.587 ops/s
# Warmup Iteration  10: 112729.560 ops/s
# Warmup Iteration  11: 127292.065 ops/s
# Warmup Iteration  12: 148994.746 ops/s
# Warmup Iteration  13: 112136.552 ops/s
# Warmup Iteration  14: 107485.092 ops/s
# Warmup Iteration  15: 121162.210 ops/s
# Warmup Iteration  16: 107049.110 ops/s
# Warmup Iteration  17: 116930.194 ops/s
# Warmup Iteration  18: 115780.580 ops/s
# Warmup Iteration  19: 109980.740 ops/s
# Warmup Iteration  20: 113434.021 ops/s
# Warmup Iteration  21: 110326.393 ops/s
# Warmup Iteration  22: 120445.854 ops/s
# Warmup Iteration  23: 121901.216 ops/s
# Warmup Iteration  24: 104642.823 ops/s
# Warmup Iteration  25: 103361.348 ops/s
# Warmup Iteration  26: 116273.040 ops/s
# Warmup Iteration  27: 104263.552 ops/s
# Warmup Iteration  28: 101134.912 ops/s
# Warmup Iteration  29: 122785.089 ops/s
# Warmup Iteration  30: 122701.685 ops/s
Iteration   1: 115248.989 ops/s
Iteration   2: 122108.777 ops/s
Iteration   3: 113541.279 ops/s
Iteration   4: 114570.188 ops/s
Iteration   5: 117711.388 ops/s
Iteration   6: 122158.656 ops/s
Iteration   7: 108793.458 ops/s
Iteration   8: 128180.198 ops/s
Iteration   9: 112244.313 ops/s
Iteration  10: 105863.712 ops/s
Iteration  11: 115585.360 ops/s
Iteration  12: 128236.374 ops/s
Iteration  13: 120236.970 ops/s
Iteration  14: 119256.987 ops/s
Iteration  15: 106254.746 ops/s
Iteration  16: 108877.652 ops/s
Iteration  17: 112289.404 ops/s
Iteration  18: 123728.078 ops/s
Iteration  19: 99546.464 ops/s
Iteration  20: 128906.574 ops/s
Iteration  21: 103097.718 ops/s
Iteration  22: 107609.367 ops/s
Iteration  23: 116040.641 ops/s
Iteration  24: 105908.380 ops/s
Iteration  25: 114504.539 ops/s
Iteration  26: 117265.540 ops/s
Iteration  27: 107993.668 ops/s
Iteration  28: 112813.164 ops/s
Iteration  29: 132936.530 ops/s
Iteration  30: 126181.997 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_just":
  115589.704 ±(99.9%) 5605.228 ops/s [Average]
  (min, avg, max) = (99546.464, 115589.704, 132936.530), stdev = 8389.642
  CI (99.9%): [109984.476, 121194.931] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
FlowableThrottleLatestTest._Benchmark.benchmark_just  thrpt   30  115589.704 ± 5605.228  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_range$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_range

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20643.668 ops/s
# Warmup Iteration   2: 59046.881 ops/s
# Warmup Iteration   3: 104846.410 ops/s
# Warmup Iteration   4: 92563.089 ops/s
# Warmup Iteration   5: 103646.253 ops/s
# Warmup Iteration   6: 118007.486 ops/s
# Warmup Iteration   7: 109849.397 ops/s
# Warmup Iteration   8: 123878.154 ops/s
# Warmup Iteration   9: 128059.954 ops/s
# Warmup Iteration  10: 115898.293 ops/s
# Warmup Iteration  11: 126022.341 ops/s
# Warmup Iteration  12: 104214.161 ops/s
# Warmup Iteration  13: 116461.502 ops/s
# Warmup Iteration  14: 111807.833 ops/s
# Warmup Iteration  15: 121924.163 ops/s
# Warmup Iteration  16: 110891.891 ops/s
# Warmup Iteration  17: 113347.850 ops/s
# Warmup Iteration  18: 111448.609 ops/s
# Warmup Iteration  19: 103592.651 ops/s
# Warmup Iteration  20: 131658.077 ops/s
# Warmup Iteration  21: 117221.025 ops/s
# Warmup Iteration  22: 108208.320 ops/s
# Warmup Iteration  23: 93628.206 ops/s
# Warmup Iteration  24: 109252.541 ops/s
# Warmup Iteration  25: 120053.846 ops/s
# Warmup Iteration  26: 110579.073 ops/s
# Warmup Iteration  27: 116801.654 ops/s
# Warmup Iteration  28: 112143.376 ops/s
# Warmup Iteration  29: 103537.204 ops/s
# Warmup Iteration  30: 115557.482 ops/s
Iteration   1: 117643.212 ops/s
Iteration   2: 112313.226 ops/s
Iteration   3: 102375.696 ops/s
Iteration   4: 98053.422 ops/s
Iteration   5: 101630.347 ops/s
Iteration   6: 111508.458 ops/s
Iteration   7: 116318.484 ops/s
Iteration   8: 105113.638 ops/s
Iteration   9: 107007.818 ops/s
Iteration  10: 130636.885 ops/s
Iteration  11: 103261.221 ops/s
Iteration  12: 118600.143 ops/s
Iteration  13: 109221.828 ops/s
Iteration  14: 121367.828 ops/s
Iteration  15: 102981.344 ops/s
Iteration  16: 111020.525 ops/s
Iteration  17: 112922.311 ops/s
Iteration  18: 110372.998 ops/s
Iteration  19: 107677.567 ops/s
Iteration  20: 121112.571 ops/s
Iteration  21: 123451.092 ops/s
Iteration  22: 108014.286 ops/s
Iteration  23: 110188.769 ops/s
Iteration  24: 109042.612 ops/s
Iteration  25: 103713.019 ops/s
Iteration  26: 112905.122 ops/s
Iteration  27: 107775.476 ops/s
Iteration  28: 100641.814 ops/s
Iteration  29: 97046.029 ops/s
Iteration  30: 138155.366 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableThrottleLatestTest._Benchmark.benchmark_range":
  111069.104 ±(99.9%) 6234.471 ops/s [Average]
  (min, avg, max) = (97046.029, 111069.104, 138155.366), stdev = 9331.464
  CI (99.9%): [104834.632, 117303.575] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
FlowableThrottleLatestTest._Benchmark.benchmark_range  thrpt   30  111069.104 ± 6234.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomSchedulerBufferSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomSchedulerBufferSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4178.103 ops/s
# Warmup Iteration   2: 27038.807 ops/s
# Warmup Iteration   3: 34782.293 ops/s
# Warmup Iteration   4: 68823.006 ops/s
# Warmup Iteration   5: 77292.491 ops/s
# Warmup Iteration   6: 87873.579 ops/s
# Warmup Iteration   7: 91128.758 ops/s
# Warmup Iteration   8: 88671.056 ops/s
# Warmup Iteration   9: 93068.776 ops/s
# Warmup Iteration  10: 94396.126 ops/s
# Warmup Iteration  11: 100728.579 ops/s
# Warmup Iteration  12: 93341.253 ops/s
# Warmup Iteration  13: 95051.781 ops/s
# Warmup Iteration  14: 86396.177 ops/s
# Warmup Iteration  15: 93830.267 ops/s
# Warmup Iteration  16: 103393.361 ops/s
# Warmup Iteration  17: 92565.301 ops/s
# Warmup Iteration  18: 89196.370 ops/s
# Warmup Iteration  19: 88629.400 ops/s
# Warmup Iteration  20: 80699.527 ops/s
# Warmup Iteration  21: 98528.623 ops/s
# Warmup Iteration  22: 96850.151 ops/s
# Warmup Iteration  23: 99176.411 ops/s
# Warmup Iteration  24: 95252.944 ops/s
# Warmup Iteration  25: 97262.625 ops/s
# Warmup Iteration  26: 86313.804 ops/s
# Warmup Iteration  27: 99927.119 ops/s
# Warmup Iteration  28: 99707.834 ops/s
# Warmup Iteration  29: 96394.477 ops/s
# Warmup Iteration  30: 94296.254 ops/s
Iteration   1: 99886.908 ops/s
Iteration   2: 90338.549 ops/s
Iteration   3: 87737.957 ops/s
Iteration   4: 84389.819 ops/s
Iteration   5: 96615.681 ops/s
Iteration   6: 99583.549 ops/s
Iteration   7: 92323.181 ops/s
Iteration   8: 94442.137 ops/s
Iteration   9: 97737.219 ops/s
Iteration  10: 99779.810 ops/s
Iteration  11: 98164.234 ops/s
Iteration  12: 94218.057 ops/s
Iteration  13: 97829.996 ops/s
Iteration  14: 89485.458 ops/s
Iteration  15: 96850.999 ops/s
Iteration  16: 97143.747 ops/s
Iteration  17: 91136.410 ops/s
Iteration  18: 102356.592 ops/s
Iteration  19: 101153.923 ops/s
Iteration  20: 92846.556 ops/s
Iteration  21: 92959.136 ops/s
Iteration  22: 98672.210 ops/s
Iteration  23: 97960.116 ops/s
Iteration  24: 96994.149 ops/s
Iteration  25: 102730.252 ops/s
Iteration  26: 93893.174 ops/s
Iteration  27: 99254.464 ops/s
Iteration  28: 95295.044 ops/s
Iteration  29: 98611.693 ops/s
Iteration  30: 87007.949 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomSchedulerBufferSize":
  95579.965 ±(99.9%) 3082.630 ops/s [Average]
  (min, avg, max) = (84389.819, 95579.965, 102730.252), stdev = 4613.935
  CI (99.9%): [92497.336, 98662.595] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt      Score      Error  Units
FlowableWindowWithTimeTest._Benchmark.benchmark_timespanTimeskipCustomSchedulerBufferSize  thrpt   30  95579.965 ± 3082.630  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatWhen$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatWhen

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83630.172 ops/s
# Warmup Iteration   2: 162390.714 ops/s
# Warmup Iteration   3: 477214.074 ops/s
# Warmup Iteration   4: 491738.885 ops/s
# Warmup Iteration   5: 536204.881 ops/s
# Warmup Iteration   6: 496296.384 ops/s
# Warmup Iteration   7: 511073.890 ops/s
# Warmup Iteration   8: 524083.810 ops/s
# Warmup Iteration   9: 529491.193 ops/s
# Warmup Iteration  10: 533096.365 ops/s
# Warmup Iteration  11: 508745.159 ops/s
# Warmup Iteration  12: 518295.143 ops/s
# Warmup Iteration  13: 536533.295 ops/s
# Warmup Iteration  14: 508921.037 ops/s
# Warmup Iteration  15: 523752.580 ops/s
# Warmup Iteration  16: 508783.663 ops/s
# Warmup Iteration  17: 560825.911 ops/s
# Warmup Iteration  18: 570196.393 ops/s
# Warmup Iteration  19: 548190.551 ops/s
# Warmup Iteration  20: 568112.709 ops/s
# Warmup Iteration  21: 551524.871 ops/s
# Warmup Iteration  22: 555899.150 ops/s
# Warmup Iteration  23: 568244.046 ops/s
# Warmup Iteration  24: 533499.141 ops/s
# Warmup Iteration  25: 450072.039 ops/s
# Warmup Iteration  26: 542885.202 ops/s
# Warmup Iteration  27: 554786.313 ops/s
# Warmup Iteration  28: 580699.057 ops/s
# Warmup Iteration  29: 521200.264 ops/s
# Warmup Iteration  30: 565528.757 ops/s
Iteration   1: 563225.787 ops/s
Iteration   2: 553881.603 ops/s
Iteration   3: 586605.386 ops/s
Iteration   4: 551907.430 ops/s
Iteration   5: 550368.305 ops/s
Iteration   6: 558517.612 ops/s
Iteration   7: 558767.072 ops/s
Iteration   8: 551791.267 ops/s
Iteration   9: 571668.226 ops/s
Iteration  10: 572220.713 ops/s
Iteration  11: 546353.794 ops/s
Iteration  12: 549580.022 ops/s
Iteration  13: 576788.096 ops/s
Iteration  14: 558571.934 ops/s
Iteration  15: 565717.473 ops/s
Iteration  16: 571385.494 ops/s
Iteration  17: 542860.341 ops/s
Iteration  18: 571925.458 ops/s
Iteration  19: 544387.328 ops/s
Iteration  20: 565133.297 ops/s
Iteration  21: 542264.409 ops/s
Iteration  22: 577142.850 ops/s
Iteration  23: 524701.539 ops/s
Iteration  24: 547232.031 ops/s
Iteration  25: 577989.292 ops/s
Iteration  26: 563791.327 ops/s
Iteration  27: 547309.621 ops/s
Iteration  28: 563845.660 ops/s
Iteration  29: 551671.237 ops/s
Iteration  30: 574727.407 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatWhen":
  559411.067 ±(99.9%) 9221.609 ops/s [Average]
  (min, avg, max) = (524701.539, 559411.067, 586605.386), stdev = 13802.472
  CI (99.9%): [550189.458, 568632.676] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ObservableRepeatTest._Benchmark.benchmark_repeatWhen  thrpt   30  559411.067 ± 9221.609  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatWhen$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatWhen

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58709.435 ops/s
# Warmup Iteration   2: 196578.074 ops/s
# Warmup Iteration   3: 433084.965 ops/s
# Warmup Iteration   4: 475729.396 ops/s
# Warmup Iteration   5: 491949.106 ops/s
# Warmup Iteration   6: 512546.794 ops/s
# Warmup Iteration   7: 454420.524 ops/s
# Warmup Iteration   8: 479373.899 ops/s
# Warmup Iteration   9: 452906.960 ops/s
# Warmup Iteration  10: 443613.671 ops/s
# Warmup Iteration  11: 484743.502 ops/s
# Warmup Iteration  12: 493545.780 ops/s
# Warmup Iteration  13: 477590.363 ops/s
# Warmup Iteration  14: 512267.803 ops/s
# Warmup Iteration  15: 479681.996 ops/s
# Warmup Iteration  16: 491183.886 ops/s
# Warmup Iteration  17: 523319.052 ops/s
# Warmup Iteration  18: 491798.548 ops/s
# Warmup Iteration  19: 520321.363 ops/s
# Warmup Iteration  20: 510993.651 ops/s
# Warmup Iteration  21: 513126.451 ops/s
# Warmup Iteration  22: 513427.634 ops/s
# Warmup Iteration  23: 495496.001 ops/s
# Warmup Iteration  24: 506342.645 ops/s
# Warmup Iteration  25: 518627.549 ops/s
# Warmup Iteration  26: 506581.177 ops/s
# Warmup Iteration  27: 520680.004 ops/s
# Warmup Iteration  28: 499278.616 ops/s
# Warmup Iteration  29: 520579.747 ops/s
# Warmup Iteration  30: 523284.393 ops/s
Iteration   1: 507301.896 ops/s
Iteration   2: 512061.791 ops/s
Iteration   3: 507277.769 ops/s
Iteration   4: 514376.034 ops/s
Iteration   5: 503182.459 ops/s
Iteration   6: 509937.671 ops/s
Iteration   7: 514108.088 ops/s
Iteration   8: 504436.412 ops/s
Iteration   9: 508435.974 ops/s
Iteration  10: 507488.580 ops/s
Iteration  11: 518988.507 ops/s
Iteration  12: 508958.631 ops/s
Iteration  13: 521192.477 ops/s
Iteration  14: 493757.757 ops/s
Iteration  15: 507787.234 ops/s
Iteration  16: 529321.643 ops/s
Iteration  17: 516523.360 ops/s
Iteration  18: 526911.596 ops/s
Iteration  19: 499027.706 ops/s
Iteration  20: 502317.351 ops/s
Iteration  21: 524838.448 ops/s
Iteration  22: 509427.971 ops/s
Iteration  23: 532526.494 ops/s
Iteration  24: 537891.826 ops/s
Iteration  25: 492602.540 ops/s
Iteration  26: 515709.412 ops/s
Iteration  27: 515474.647 ops/s
Iteration  28: 497073.289 ops/s
Iteration  29: 521972.531 ops/s
Iteration  30: 502649.034 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRepeatTest._Benchmark.benchmark_repeatWhen":
  512118.638 ±(99.9%) 7443.176 ops/s [Average]
  (min, avg, max) = (492602.540, 512118.638, 537891.826), stdev = 11140.596
  CI (99.9%): [504675.462, 519561.813] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
FlowableRepeatTest._Benchmark.benchmark_repeatWhen  thrpt   30  512118.638 ± 7443.176  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 50466.630 ops/s
# Warmup Iteration   2: 160908.088 ops/s
# Warmup Iteration   3: 198263.366 ops/s
# Warmup Iteration   4: 223186.472 ops/s
# Warmup Iteration   5: 211288.458 ops/s
# Warmup Iteration   6: 212857.557 ops/s
# Warmup Iteration   7: 213406.715 ops/s
# Warmup Iteration   8: 212691.706 ops/s
# Warmup Iteration   9: 216287.627 ops/s
# Warmup Iteration  10: 207137.815 ops/s
# Warmup Iteration  11: 208392.453 ops/s
# Warmup Iteration  12: 226408.981 ops/s
# Warmup Iteration  13: 199033.139 ops/s
# Warmup Iteration  14: 213149.100 ops/s
# Warmup Iteration  15: 203342.812 ops/s
# Warmup Iteration  16: 219685.735 ops/s
# Warmup Iteration  17: 216018.898 ops/s
# Warmup Iteration  18: 208643.511 ops/s
# Warmup Iteration  19: 168733.084 ops/s
# Warmup Iteration  20: 216721.805 ops/s
# Warmup Iteration  21: 211555.873 ops/s
# Warmup Iteration  22: 220322.108 ops/s
# Warmup Iteration  23: 214245.434 ops/s
# Warmup Iteration  24: 204629.602 ops/s
# Warmup Iteration  25: 222290.881 ops/s
# Warmup Iteration  26: 212207.042 ops/s
# Warmup Iteration  27: 213038.601 ops/s
# Warmup Iteration  28: 218983.195 ops/s
# Warmup Iteration  29: 211766.496 ops/s
# Warmup Iteration  30: 213346.188 ops/s
Iteration   1: 215955.528 ops/s
Iteration   2: 217776.482 ops/s
Iteration   3: 214961.459 ops/s
Iteration   4: 218881.760 ops/s
Iteration   5: 214285.279 ops/s
Iteration   6: 216331.964 ops/s
Iteration   7: 220697.671 ops/s
Iteration   8: 208923.848 ops/s
Iteration   9: 218285.480 ops/s
Iteration  10: 204707.429 ops/s
Iteration  11: 218999.144 ops/s
Iteration  12: 211416.546 ops/s
Iteration  13: 215058.060 ops/s
Iteration  14: 216155.434 ops/s
Iteration  15: 202854.321 ops/s
Iteration  16: 218645.150 ops/s
Iteration  17: 212103.585 ops/s
Iteration  18: 215713.456 ops/s
Iteration  19: 211960.724 ops/s
Iteration  20: 216429.982 ops/s
Iteration  21: 214334.267 ops/s
Iteration  22: 211011.566 ops/s
Iteration  23: 219755.723 ops/s
Iteration  24: 211503.668 ops/s
Iteration  25: 217680.347 ops/s
Iteration  26: 212891.386 ops/s
Iteration  27: 214640.975 ops/s
Iteration  28: 219169.117 ops/s
Iteration  29: 208168.494 ops/s
Iteration  30: 217311.004 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_backFusedConditional":
  214553.662 ±(99.9%) 2908.575 ops/s [Average]
  (min, avg, max) = (202854.321, 214553.662, 220697.671), stdev = 4353.418
  CI (99.9%): [211645.087, 217462.236] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_backFusedConditional  thrpt   30  214553.662 ± 2908.575  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOutConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOutConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 254400.507 ops/s
# Warmup Iteration   2: 1191204.174 ops/s
# Warmup Iteration   3: 1434218.743 ops/s
# Warmup Iteration   4: 1817424.459 ops/s
# Warmup Iteration   5: 1810851.504 ops/s
# Warmup Iteration   6: 1767746.573 ops/s
# Warmup Iteration   7: 1777938.899 ops/s
# Warmup Iteration   8: 1720458.493 ops/s
# Warmup Iteration   9: 1766608.329 ops/s
# Warmup Iteration  10: 1737722.001 ops/s
# Warmup Iteration  11: 1721739.570 ops/s
# Warmup Iteration  12: 1782763.877 ops/s
# Warmup Iteration  13: 1745241.150 ops/s
# Warmup Iteration  14: 1755562.166 ops/s
# Warmup Iteration  15: 1745250.091 ops/s
# Warmup Iteration  16: 1750034.229 ops/s
# Warmup Iteration  17: 1814759.430 ops/s
# Warmup Iteration  18: 1733065.195 ops/s
# Warmup Iteration  19: 1769349.396 ops/s
# Warmup Iteration  20: 1846670.772 ops/s
# Warmup Iteration  21: 1704493.743 ops/s
# Warmup Iteration  22: 1779983.493 ops/s
# Warmup Iteration  23: 1849063.370 ops/s
# Warmup Iteration  24: 1715593.787 ops/s
# Warmup Iteration  25: 1869948.771 ops/s
# Warmup Iteration  26: 1752279.405 ops/s
# Warmup Iteration  27: 1795003.226 ops/s
# Warmup Iteration  28: 1786310.750 ops/s
# Warmup Iteration  29: 1792817.975 ops/s
# Warmup Iteration  30: 1782061.208 ops/s
Iteration   1: 1763600.610 ops/s
Iteration   2: 1761442.845 ops/s
Iteration   3: 1798130.960 ops/s
Iteration   4: 1772379.317 ops/s
Iteration   5: 1859302.089 ops/s
Iteration   6: 1746133.359 ops/s
Iteration   7: 1844899.963 ops/s
Iteration   8: 1782321.501 ops/s
Iteration   9: 1852879.270 ops/s
Iteration  10: 1733207.783 ops/s
Iteration  11: 1796997.594 ops/s
Iteration  12: 1846212.632 ops/s
Iteration  13: 1695180.306 ops/s
Iteration  14: 1806571.636 ops/s
Iteration  15: 1776932.628 ops/s
Iteration  16: 1738732.427 ops/s
Iteration  17: 1813524.172 ops/s
Iteration  18: 1809241.483 ops/s
Iteration  19: 1701339.583 ops/s
Iteration  20: 1823897.726 ops/s
Iteration  21: 1831553.658 ops/s
Iteration  22: 1701564.724 ops/s
Iteration  23: 1797077.148 ops/s
Iteration  24: 1796485.534 ops/s
Iteration  25: 1757076.846 ops/s
Iteration  26: 1818020.985 ops/s
Iteration  27: 1742333.896 ops/s
Iteration  28: 1811786.413 ops/s
Iteration  29: 1758423.038 ops/s
Iteration  30: 1813575.916 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOutConditional":
  1785027.535 ±(99.9%) 30171.520 ops/s [Average]
  (min, avg, max) = (1695180.306, 1785027.535, 1859302.089), stdev = 45159.314
  CI (99.9%): [1754856.015, 1815199.055] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt        Score       Error  Units
FlowableObserveOnTest._Benchmark.benchmark_workerNotDisposedPrematurelyNormalInAsyncOutConditional  thrpt   30  1785027.535 ± 30171.520  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.QueueDrainObserverTest._Benchmark.benchmark_orderedSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.QueueDrainObserverTest._Benchmark.benchmark_orderedSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2842332.521 ops/s
# Warmup Iteration   2: 4899817.517 ops/s
# Warmup Iteration   3: 6620541.149 ops/s
# Warmup Iteration   4: 6786886.139 ops/s
# Warmup Iteration   5: 6804821.657 ops/s
# Warmup Iteration   6: 6646044.525 ops/s
# Warmup Iteration   7: 6772342.466 ops/s
# Warmup Iteration   8: 6578109.459 ops/s
# Warmup Iteration   9: 6635944.918 ops/s
# Warmup Iteration  10: 6755965.073 ops/s
# Warmup Iteration  11: 6634873.740 ops/s
# Warmup Iteration  12: 6798025.535 ops/s
# Warmup Iteration  13: 6464055.084 ops/s
# Warmup Iteration  14: 5884835.173 ops/s
# Warmup Iteration  15: 6512329.416 ops/s
# Warmup Iteration  16: 6742348.372 ops/s
# Warmup Iteration  17: 6632886.630 ops/s
# Warmup Iteration  18: 6565294.614 ops/s
# Warmup Iteration  19: 6868010.461 ops/s
# Warmup Iteration  20: 6299826.655 ops/s
# Warmup Iteration  21: 6937471.646 ops/s
# Warmup Iteration  22: 6519946.190 ops/s
# Warmup Iteration  23: 6998175.064 ops/s
# Warmup Iteration  24: 6542646.949 ops/s
# Warmup Iteration  25: 6540726.308 ops/s
# Warmup Iteration  26: 6970259.176 ops/s
# Warmup Iteration  27: 6407174.556 ops/s
# Warmup Iteration  28: 6835056.111 ops/s
# Warmup Iteration  29: 6522990.052 ops/s
# Warmup Iteration  30: 6719291.987 ops/s
Iteration   1: 6966201.596 ops/s
Iteration   2: 6515218.243 ops/s
Iteration   3: 6914983.070 ops/s
Iteration   4: 6655272.193 ops/s
Iteration   5: 6688651.980 ops/s
Iteration   6: 6748472.615 ops/s
Iteration   7: 6712797.734 ops/s
Iteration   8: 6683998.305 ops/s
Iteration   9: 6815566.214 ops/s
Iteration  10: 6921421.797 ops/s
Iteration  11: 6692202.056 ops/s
Iteration  12: 6746613.811 ops/s
Iteration  13: 6906902.305 ops/s
Iteration  14: 6460558.907 ops/s
Iteration  15: 6915033.330 ops/s
Iteration  16: 6404463.947 ops/s
Iteration  17: 6759279.156 ops/s
Iteration  18: 6463017.862 ops/s
Iteration  19: 6855260.761 ops/s
Iteration  20: 6994793.848 ops/s
Iteration  21: 6639319.132 ops/s
Iteration  22: 6570962.138 ops/s
Iteration  23: 7006899.415 ops/s
Iteration  24: 6964829.765 ops/s
Iteration  25: 6500696.706 ops/s
Iteration  26: 6992953.239 ops/s
Iteration  27: 6451686.975 ops/s
Iteration  28: 6628757.123 ops/s
Iteration  29: 6790237.816 ops/s
Iteration  30: 6532233.524 ops/s


Result "io.reactivex.rxjava3.internal.observers.QueueDrainObserverTest._Benchmark.benchmark_orderedSlowPath":
  6729976.185 ±(99.9%) 124771.289 ops/s [Average]
  (min, avg, max) = (6404463.947, 6729976.185, 7006899.415), stdev = 186751.806
  CI (99.9%): [6605204.896, 6854747.475] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score        Error  Units
QueueDrainObserverTest._Benchmark.benchmark_orderedSlowPath  thrpt   30  6729976.185 ± 124771.289  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.QueueDrainObserverTest._Benchmark.benchmark_unorderedSlowPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.QueueDrainObserverTest._Benchmark.benchmark_unorderedSlowPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1660185.114 ops/s
# Warmup Iteration   2: 4124550.406 ops/s
# Warmup Iteration   3: 5860857.887 ops/s
# Warmup Iteration   4: 5372571.521 ops/s
# Warmup Iteration   5: 5752251.959 ops/s
# Warmup Iteration   6: 5796717.355 ops/s
# Warmup Iteration   7: 5717907.444 ops/s
# Warmup Iteration   8: 5715033.644 ops/s
# Warmup Iteration   9: 5583268.393 ops/s
# Warmup Iteration  10: 5730925.370 ops/s
# Warmup Iteration  11: 5401824.434 ops/s
# Warmup Iteration  12: 5924512.404 ops/s
# Warmup Iteration  13: 5474613.424 ops/s
# Warmup Iteration  14: 5824654.593 ops/s
# Warmup Iteration  15: 5550752.291 ops/s
# Warmup Iteration  16: 5610834.131 ops/s
# Warmup Iteration  17: 5952005.451 ops/s
# Warmup Iteration  18: 5591837.199 ops/s
# Warmup Iteration  19: 5701268.545 ops/s
# Warmup Iteration  20: 5766051.120 ops/s
# Warmup Iteration  21: 5780080.924 ops/s
# Warmup Iteration  22: 5813958.712 ops/s
# Warmup Iteration  23: 5641003.114 ops/s
# Warmup Iteration  24: 5712061.127 ops/s
# Warmup Iteration  25: 5840236.148 ops/s
# Warmup Iteration  26: 5436710.260 ops/s
# Warmup Iteration  27: 5849549.839 ops/s
# Warmup Iteration  28: 5707904.057 ops/s
# Warmup Iteration  29: 5554991.027 ops/s
# Warmup Iteration  30: 5894194.262 ops/s
Iteration   1: 5556278.069 ops/s
Iteration   2: 5672395.534 ops/s
Iteration   3: 5943641.187 ops/s
Iteration   4: 5536428.427 ops/s
Iteration   5: 5749739.550 ops/s
Iteration   6: 5620325.458 ops/s
Iteration   7: 5648861.712 ops/s
Iteration   8: 5836365.380 ops/s
Iteration   9: 5627523.000 ops/s
Iteration  10: 5914939.259 ops/s
Iteration  11: 5573036.254 ops/s
Iteration  12: 5819243.782 ops/s
Iteration  13: 5969353.105 ops/s
Iteration  14: 5469516.261 ops/s
Iteration  15: 5663981.243 ops/s
Iteration  16: 5903129.234 ops/s
Iteration  17: 5407969.958 ops/s
Iteration  18: 5921325.872 ops/s
Iteration  19: 5676281.886 ops/s
Iteration  20: 5679067.203 ops/s
Iteration  21: 5845265.761 ops/s
Iteration  22: 5672945.582 ops/s
Iteration  23: 5794116.661 ops/s
Iteration  24: 5679149.609 ops/s
Iteration  25: 5685613.897 ops/s
Iteration  26: 5805598.990 ops/s
Iteration  27: 5590014.258 ops/s
Iteration  28: 5829027.795 ops/s
Iteration  29: 5957928.678 ops/s
Iteration  30: 5541827.913 ops/s


Result "io.reactivex.rxjava3.internal.observers.QueueDrainObserverTest._Benchmark.benchmark_unorderedSlowPath":
  5719696.384 ±(99.9%) 101854.278 ops/s [Average]
  (min, avg, max) = (5407969.958, 5719696.384, 5969353.105), stdev = 152450.699
  CI (99.9%): [5617842.106, 5821550.662] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
QueueDrainObserverTest._Benchmark.benchmark_unorderedSlowPath  thrpt   30  5719696.384 ± 101854.278  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_drainMoreWork$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_drainMoreWork

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 122930.166 ops/s
# Warmup Iteration   2: 634924.276 ops/s
# Warmup Iteration   3: 1417375.564 ops/s
# Warmup Iteration   4: 1276441.442 ops/s
# Warmup Iteration   5: 1462647.473 ops/s
# Warmup Iteration   6: 1566476.080 ops/s
# Warmup Iteration   7: 1468410.378 ops/s
# Warmup Iteration   8: 1274414.606 ops/s
# Warmup Iteration   9: 1499994.951 ops/s
# Warmup Iteration  10: 1563669.633 ops/s
# Warmup Iteration  11: 1519407.691 ops/s
# Warmup Iteration  12: 1560261.794 ops/s
# Warmup Iteration  13: 1461193.707 ops/s
# Warmup Iteration  14: 1510452.463 ops/s
# Warmup Iteration  15: 1575501.517 ops/s
# Warmup Iteration  16: 1572728.002 ops/s
# Warmup Iteration  17: 1552905.947 ops/s
# Warmup Iteration  18: 1477908.116 ops/s
# Warmup Iteration  19: 1541346.180 ops/s
# Warmup Iteration  20: 1492786.415 ops/s
# Warmup Iteration  21: 1602510.988 ops/s
# Warmup Iteration  22: 1494751.839 ops/s
# Warmup Iteration  23: 1494483.887 ops/s
# Warmup Iteration  24: 1507102.542 ops/s
# Warmup Iteration  25: 1556768.408 ops/s
# Warmup Iteration  26: 1479206.006 ops/s
# Warmup Iteration  27: 1582098.282 ops/s
# Warmup Iteration  28: 1546502.941 ops/s
# Warmup Iteration  29: 1517561.612 ops/s
# Warmup Iteration  30: 1604399.602 ops/s
Iteration   1: 1512379.670 ops/s
Iteration   2: 1533397.049 ops/s
Iteration   3: 1535942.765 ops/s
Iteration   4: 1498684.528 ops/s
Iteration   5: 1563027.563 ops/s
Iteration   6: 1529220.073 ops/s
Iteration   7: 1444955.614 ops/s
Iteration   8: 1553123.369 ops/s
Iteration   9: 1460050.890 ops/s
Iteration  10: 1458409.088 ops/s
Iteration  11: 1554596.703 ops/s
Iteration  12: 1485079.706 ops/s
Iteration  13: 1525872.575 ops/s
Iteration  14: 1584886.477 ops/s
Iteration  15: 1545210.257 ops/s
Iteration  16: 1490707.139 ops/s
Iteration  17: 1539651.852 ops/s
Iteration  18: 1523394.636 ops/s
Iteration  19: 1577479.814 ops/s
Iteration  20: 1526808.554 ops/s
Iteration  21: 1490100.304 ops/s
Iteration  22: 1546480.778 ops/s
Iteration  23: 1526799.673 ops/s
Iteration  24: 1522671.656 ops/s
Iteration  25: 1462062.448 ops/s
Iteration  26: 1547648.199 ops/s
Iteration  27: 1504567.511 ops/s
Iteration  28: 1493871.101 ops/s
Iteration  29: 1589288.610 ops/s
Iteration  30: 1479236.259 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_drainMoreWork":
  1520186.829 ±(99.9%) 25442.054 ops/s [Average]
  (min, avg, max) = (1444955.614, 1520186.829, 1589288.610), stdev = 38080.472
  CI (99.9%): [1494744.775, 1545628.883] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowableScanTest._Benchmark.benchmark_drainMoreWork  thrpt   30  1520186.829 ± 25442.054  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_frontOverflow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_frontOverflow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 109959.445 ops/s
# Warmup Iteration   2: 408174.306 ops/s
# Warmup Iteration   3: 468352.182 ops/s
# Warmup Iteration   4: 433757.651 ops/s
# Warmup Iteration   5: 480394.783 ops/s
# Warmup Iteration   6: 434489.699 ops/s
# Warmup Iteration   7: 463700.053 ops/s
# Warmup Iteration   8: 465285.221 ops/s
# Warmup Iteration   9: 483095.856 ops/s
# Warmup Iteration  10: 464042.045 ops/s
# Warmup Iteration  11: 461375.895 ops/s
# Warmup Iteration  12: 487488.606 ops/s
# Warmup Iteration  13: 454728.604 ops/s
# Warmup Iteration  14: 475803.521 ops/s
# Warmup Iteration  15: 458706.730 ops/s
# Warmup Iteration  16: 485922.838 ops/s
# Warmup Iteration  17: 478632.730 ops/s
# Warmup Iteration  18: 479882.531 ops/s
# Warmup Iteration  19: 495009.929 ops/s
# Warmup Iteration  20: 449093.459 ops/s
# Warmup Iteration  21: 481195.140 ops/s
# Warmup Iteration  22: 489240.552 ops/s
# Warmup Iteration  23: 504096.771 ops/s
# Warmup Iteration  24: 485111.711 ops/s
# Warmup Iteration  25: 477441.207 ops/s
# Warmup Iteration  26: 482300.991 ops/s
# Warmup Iteration  27: 458944.261 ops/s
# Warmup Iteration  28: 491872.805 ops/s
# Warmup Iteration  29: 500847.594 ops/s
# Warmup Iteration  30: 488923.961 ops/s
Iteration   1: 501423.037 ops/s
Iteration   2: 476321.841 ops/s
Iteration   3: 482664.914 ops/s
Iteration   4: 498758.652 ops/s
Iteration   5: 488328.314 ops/s
Iteration   6: 482087.884 ops/s
Iteration   7: 501481.028 ops/s
Iteration   8: 486210.228 ops/s
Iteration   9: 500252.037 ops/s
Iteration  10: 470612.095 ops/s
Iteration  11: 498893.833 ops/s
Iteration  12: 499307.055 ops/s
Iteration  13: 482285.365 ops/s
Iteration  14: 498021.854 ops/s
Iteration  15: 480480.205 ops/s
Iteration  16: 503606.117 ops/s
Iteration  17: 496142.477 ops/s
Iteration  18: 476833.017 ops/s
Iteration  19: 485924.431 ops/s
Iteration  20: 505613.315 ops/s
Iteration  21: 479154.429 ops/s
Iteration  22: 494975.676 ops/s
Iteration  23: 483823.669 ops/s
Iteration  24: 487968.426 ops/s
Iteration  25: 507261.273 ops/s
Iteration  26: 473631.475 ops/s
Iteration  27: 500605.607 ops/s
Iteration  28: 484466.183 ops/s
Iteration  29: 483702.672 ops/s
Iteration  30: 499472.332 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_frontOverflow":
  490343.648 ±(99.9%) 7014.875 ops/s [Average]
  (min, avg, max) = (470612.095, 490343.648, 507261.273), stdev = 10499.536
  CI (99.9%): [483328.773, 497358.523] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_frontOverflow  thrpt   30  490343.648 ± 7014.875  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_ignoreBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_ignoreBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 56121.116 ops/s
# Warmup Iteration   2: 269561.858 ops/s
# Warmup Iteration   3: 341259.808 ops/s
# Warmup Iteration   4: 378482.849 ops/s
# Warmup Iteration   5: 480730.533 ops/s
# Warmup Iteration   6: 410304.207 ops/s
# Warmup Iteration   7: 461715.355 ops/s
# Warmup Iteration   8: 451863.542 ops/s
# Warmup Iteration   9: 475913.787 ops/s
# Warmup Iteration  10: 466565.233 ops/s
# Warmup Iteration  11: 447486.835 ops/s
# Warmup Iteration  12: 476425.194 ops/s
# Warmup Iteration  13: 453264.941 ops/s
# Warmup Iteration  14: 469892.576 ops/s
# Warmup Iteration  15: 455697.180 ops/s
# Warmup Iteration  16: 457427.118 ops/s
# Warmup Iteration  17: 486777.739 ops/s
# Warmup Iteration  18: 473237.198 ops/s
# Warmup Iteration  19: 465849.514 ops/s
# Warmup Iteration  20: 505537.352 ops/s
# Warmup Iteration  21: 463348.699 ops/s
# Warmup Iteration  22: 483666.007 ops/s
# Warmup Iteration  23: 462884.990 ops/s
# Warmup Iteration  24: 472549.875 ops/s
# Warmup Iteration  25: 471413.535 ops/s
# Warmup Iteration  26: 471947.306 ops/s
# Warmup Iteration  27: 483614.212 ops/s
# Warmup Iteration  28: 501763.841 ops/s
# Warmup Iteration  29: 468160.989 ops/s
# Warmup Iteration  30: 501034.552 ops/s
Iteration   1: 463951.709 ops/s
Iteration   2: 496025.431 ops/s
Iteration   3: 466547.319 ops/s
Iteration   4: 474219.449 ops/s
Iteration   5: 490133.111 ops/s
Iteration   6: 478727.359 ops/s
Iteration   7: 483259.173 ops/s
Iteration   8: 486832.607 ops/s
Iteration   9: 471758.076 ops/s
Iteration  10: 491358.243 ops/s
Iteration  11: 472878.257 ops/s
Iteration  12: 490439.621 ops/s
Iteration  13: 464842.016 ops/s
Iteration  14: 475491.154 ops/s
Iteration  15: 486216.372 ops/s
Iteration  16: 471629.777 ops/s
Iteration  17: 466624.438 ops/s
Iteration  18: 501759.332 ops/s
Iteration  19: 472404.348 ops/s
Iteration  20: 487353.410 ops/s
Iteration  21: 466664.037 ops/s
Iteration  22: 507301.554 ops/s
Iteration  23: 466533.558 ops/s
Iteration  24: 475156.517 ops/s
Iteration  25: 477839.172 ops/s
Iteration  26: 481962.454 ops/s
Iteration  27: 479609.431 ops/s
Iteration  28: 471020.886 ops/s
Iteration  29: 461578.186 ops/s
Iteration  30: 479951.455 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_ignoreBackpressure":
  478668.948 ±(99.9%) 7721.497 ops/s [Average]
  (min, avg, max) = (461578.186, 478668.948, 507301.554), stdev = 11557.174
  CI (99.9%): [470947.452, 486390.445] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_ignoreBackpressure  thrpt   30  478668.948 ± 7721.497  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_mainErrorInnerNextIgnoreCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_mainErrorInnerNextIgnoreCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61491.544 ops/s
# Warmup Iteration   2: 284752.066 ops/s
# Warmup Iteration   3: 438365.461 ops/s
# Warmup Iteration   4: 439054.433 ops/s
# Warmup Iteration   5: 404046.089 ops/s
# Warmup Iteration   6: 498066.247 ops/s
# Warmup Iteration   7: 477710.711 ops/s
# Warmup Iteration   8: 479098.149 ops/s
# Warmup Iteration   9: 478035.953 ops/s
# Warmup Iteration  10: 480160.452 ops/s
# Warmup Iteration  11: 486121.896 ops/s
# Warmup Iteration  12: 476844.425 ops/s
# Warmup Iteration  13: 483662.647 ops/s
# Warmup Iteration  14: 487441.430 ops/s
# Warmup Iteration  15: 474155.510 ops/s
# Warmup Iteration  16: 476615.776 ops/s
# Warmup Iteration  17: 498273.203 ops/s
# Warmup Iteration  18: 520929.512 ops/s
# Warmup Iteration  19: 496062.312 ops/s
# Warmup Iteration  20: 518970.498 ops/s
# Warmup Iteration  21: 515188.954 ops/s
# Warmup Iteration  22: 482055.944 ops/s
# Warmup Iteration  23: 507320.068 ops/s
# Warmup Iteration  24: 495227.162 ops/s
# Warmup Iteration  25: 485097.900 ops/s
# Warmup Iteration  26: 513449.697 ops/s
# Warmup Iteration  27: 491898.490 ops/s
# Warmup Iteration  28: 488464.034 ops/s
# Warmup Iteration  29: 509725.749 ops/s
# Warmup Iteration  30: 505940.383 ops/s
Iteration   1: 526503.164 ops/s
Iteration   2: 515258.636 ops/s
Iteration   3: 504467.835 ops/s
Iteration   4: 487788.786 ops/s
Iteration   5: 500482.709 ops/s
Iteration   6: 499175.360 ops/s
Iteration   7: 519977.143 ops/s
Iteration   8: 496944.875 ops/s
Iteration   9: 497096.799 ops/s
Iteration  10: 512695.325 ops/s
Iteration  11: 485808.863 ops/s
Iteration  12: 505131.218 ops/s
Iteration  13: 492075.127 ops/s
Iteration  14: 515528.887 ops/s
Iteration  15: 501169.863 ops/s
Iteration  16: 488289.150 ops/s
Iteration  17: 512354.128 ops/s
Iteration  18: 483057.108 ops/s
Iteration  19: 510765.563 ops/s
Iteration  20: 503851.782 ops/s
Iteration  21: 473219.309 ops/s
Iteration  22: 499083.929 ops/s
Iteration  23: 485590.055 ops/s
Iteration  24: 501657.964 ops/s
Iteration  25: 487015.242 ops/s
Iteration  26: 497428.286 ops/s
Iteration  27: 502206.469 ops/s
Iteration  28: 495408.899 ops/s
Iteration  29: 454457.256 ops/s
Iteration  30: 472754.393 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_mainErrorInnerNextIgnoreCancel":
  497574.804 ±(99.9%) 10150.247 ops/s [Average]
  (min, avg, max) = (454457.256, 497574.804, 526503.164), stdev = 15192.414
  CI (99.9%): [487424.557, 507725.051] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_mainErrorInnerNextIgnoreCancel  thrpt   30  497574.804 ± 10150.247  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_directCompletesUnsafe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_directCompletesUnsafe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 245520.992 ops/s
# Warmup Iteration   2: 740600.738 ops/s
# Warmup Iteration   3: 1086991.592 ops/s
# Warmup Iteration   4: 1485476.620 ops/s
# Warmup Iteration   5: 1434090.581 ops/s
# Warmup Iteration   6: 1421235.945 ops/s
# Warmup Iteration   7: 1448307.410 ops/s
# Warmup Iteration   8: 1451968.836 ops/s
# Warmup Iteration   9: 1474106.573 ops/s
# Warmup Iteration  10: 1416041.130 ops/s
# Warmup Iteration  11: 1462703.701 ops/s
# Warmup Iteration  12: 1493882.597 ops/s
# Warmup Iteration  13: 1390580.721 ops/s
# Warmup Iteration  14: 1494067.997 ops/s
# Warmup Iteration  15: 1405084.727 ops/s
# Warmup Iteration  16: 1440013.435 ops/s
# Warmup Iteration  17: 1444867.120 ops/s
# Warmup Iteration  18: 1476690.779 ops/s
# Warmup Iteration  19: 1416549.178 ops/s
# Warmup Iteration  20: 1520957.404 ops/s
# Warmup Iteration  21: 1434629.790 ops/s
# Warmup Iteration  22: 1441756.129 ops/s
# Warmup Iteration  23: 1426812.889 ops/s
# Warmup Iteration  24: 1433169.926 ops/s
# Warmup Iteration  25: 1479190.052 ops/s
# Warmup Iteration  26: 1442681.393 ops/s
# Warmup Iteration  27: 1463764.746 ops/s
# Warmup Iteration  28: 1468484.616 ops/s
# Warmup Iteration  29: 1438437.445 ops/s
# Warmup Iteration  30: 1497977.387 ops/s
Iteration   1: 1439722.246 ops/s
Iteration   2: 1505499.011 ops/s
Iteration   3: 1504166.199 ops/s
Iteration   4: 1438368.584 ops/s
Iteration   5: 1427304.579 ops/s
Iteration   6: 1547689.290 ops/s
Iteration   7: 1398403.349 ops/s
Iteration   8: 1420674.875 ops/s
Iteration   9: 1512224.834 ops/s
Iteration  10: 1388434.283 ops/s
Iteration  11: 1485031.042 ops/s
Iteration  12: 1442547.019 ops/s
Iteration  13: 1402489.232 ops/s
Iteration  14: 1453503.218 ops/s
Iteration  15: 1444551.698 ops/s
Iteration  16: 1393278.223 ops/s
Iteration  17: 1444149.770 ops/s
Iteration  18: 1433181.347 ops/s
Iteration  19: 1446316.514 ops/s
Iteration  20: 1419560.969 ops/s
Iteration  21: 1456873.265 ops/s
Iteration  22: 1478873.414 ops/s
Iteration  23: 1445057.537 ops/s
Iteration  24: 1449128.642 ops/s
Iteration  25: 1485367.847 ops/s
Iteration  26: 1430481.270 ops/s
Iteration  27: 1518761.642 ops/s
Iteration  28: 1485942.789 ops/s
Iteration  29: 1421341.386 ops/s
Iteration  30: 1452137.137 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_directCompletesUnsafe":
  1452368.707 ±(99.9%) 26250.867 ops/s [Average]
  (min, avg, max) = (1388434.283, 1452368.707, 1547689.290), stdev = 39291.065
  CI (99.9%): [1426117.840, 1478619.574] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_directCompletesUnsafe  thrpt   30  1452368.707 ± 26250.867  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFusionBoundary$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFusionBoundary

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 83415.015 ops/s
# Warmup Iteration   2: 347540.195 ops/s
# Warmup Iteration   3: 955400.909 ops/s
# Warmup Iteration   4: 944289.999 ops/s
# Warmup Iteration   5: 1029648.644 ops/s
# Warmup Iteration   6: 920710.956 ops/s
# Warmup Iteration   7: 953707.702 ops/s
# Warmup Iteration   8: 1046670.841 ops/s
# Warmup Iteration   9: 989817.596 ops/s
# Warmup Iteration  10: 1027712.432 ops/s
# Warmup Iteration  11: 1046436.770 ops/s
# Warmup Iteration  12: 982082.375 ops/s
# Warmup Iteration  13: 1048616.299 ops/s
# Warmup Iteration  14: 1076486.368 ops/s
# Warmup Iteration  15: 976362.152 ops/s
# Warmup Iteration  16: 1052931.900 ops/s
# Warmup Iteration  17: 1039031.492 ops/s
# Warmup Iteration  18: 1006269.733 ops/s
# Warmup Iteration  19: 1050571.673 ops/s
# Warmup Iteration  20: 987410.435 ops/s
# Warmup Iteration  21: 1029359.663 ops/s
# Warmup Iteration  22: 1029651.470 ops/s
# Warmup Iteration  23: 1030110.724 ops/s
# Warmup Iteration  24: 1002802.230 ops/s
# Warmup Iteration  25: 1055425.489 ops/s
# Warmup Iteration  26: 1014943.735 ops/s
# Warmup Iteration  27: 1019808.167 ops/s
# Warmup Iteration  28: 1074134.317 ops/s
# Warmup Iteration  29: 1005004.405 ops/s
# Warmup Iteration  30: 1021899.949 ops/s
Iteration   1: 1062289.914 ops/s
Iteration   2: 1020707.851 ops/s
Iteration   3: 994338.586 ops/s
Iteration   4: 1043152.632 ops/s
Iteration   5: 972728.372 ops/s
Iteration   6: 1041185.616 ops/s
Iteration   7: 1003204.172 ops/s
Iteration   8: 1030400.008 ops/s
Iteration   9: 1046959.801 ops/s
Iteration  10: 1037099.209 ops/s
Iteration  11: 1024411.439 ops/s
Iteration  12: 1020071.071 ops/s
Iteration  13: 1054367.560 ops/s
Iteration  14: 1018234.873 ops/s
Iteration  15: 1035294.526 ops/s
Iteration  16: 1017575.891 ops/s
Iteration  17: 984827.740 ops/s
Iteration  18: 1003663.880 ops/s
Iteration  19: 1043895.226 ops/s
Iteration  20: 1006910.730 ops/s
Iteration  21: 1062377.214 ops/s
Iteration  22: 1016385.195 ops/s
Iteration  23: 994453.949 ops/s
Iteration  24: 871589.773 ops/s
Iteration  25: 981093.284 ops/s
Iteration  26: 1060394.919 ops/s
Iteration  27: 1048839.251 ops/s
Iteration  28: 1003910.250 ops/s
Iteration  29: 1026874.453 ops/s
Iteration  30: 977385.088 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFusionBoundary":
  1016820.749 ±(99.9%) 25136.466 ops/s [Average]
  (min, avg, max) = (871589.773, 1016820.749, 1062377.214), stdev = 37623.083
  CI (99.9%): [991684.283, 1041957.216] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_asyncUpstreamFusionBoundary  thrpt   30  1016820.749 ± 25136.466  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_checkTerminatedNonDelayErrorError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_checkTerminatedNonDelayErrorError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 293954.037 ops/s
# Warmup Iteration   2: 564003.356 ops/s
# Warmup Iteration   3: 629291.804 ops/s
# Warmup Iteration   4: 661656.600 ops/s
# Warmup Iteration   5: 656674.536 ops/s
# Warmup Iteration   6: 650989.571 ops/s
# Warmup Iteration   7: 623208.110 ops/s
# Warmup Iteration   8: 667504.818 ops/s
# Warmup Iteration   9: 632760.075 ops/s
# Warmup Iteration  10: 658146.051 ops/s
# Warmup Iteration  11: 592824.739 ops/s
# Warmup Iteration  12: 656119.275 ops/s
# Warmup Iteration  13: 671174.936 ops/s
# Warmup Iteration  14: 651320.672 ops/s
# Warmup Iteration  15: 662349.104 ops/s
# Warmup Iteration  16: 642026.191 ops/s
# Warmup Iteration  17: 695868.030 ops/s
# Warmup Iteration  18: 682323.084 ops/s
# Warmup Iteration  19: 697558.121 ops/s
# Warmup Iteration  20: 683899.794 ops/s
# Warmup Iteration  21: 676685.739 ops/s
# Warmup Iteration  22: 707090.136 ops/s
# Warmup Iteration  23: 695241.121 ops/s
# Warmup Iteration  24: 696425.473 ops/s
# Warmup Iteration  25: 677385.674 ops/s
# Warmup Iteration  26: 720656.927 ops/s
# Warmup Iteration  27: 696924.265 ops/s
# Warmup Iteration  28: 676150.576 ops/s
# Warmup Iteration  29: 716750.697 ops/s
# Warmup Iteration  30: 668678.763 ops/s
Iteration   1: 702476.322 ops/s
Iteration   2: 694105.302 ops/s
Iteration   3: 681624.319 ops/s
Iteration   4: 707842.023 ops/s
Iteration   5: 715806.412 ops/s
Iteration   6: 678054.624 ops/s
Iteration   7: 713629.760 ops/s
Iteration   8: 672324.801 ops/s
Iteration   9: 689873.434 ops/s
Iteration  10: 696390.662 ops/s
Iteration  11: 672741.384 ops/s
Iteration  12: 701029.673 ops/s
Iteration  13: 660041.389 ops/s
Iteration  14: 702747.877 ops/s
Iteration  15: 693083.707 ops/s
Iteration  16: 680252.931 ops/s
Iteration  17: 729604.236 ops/s
Iteration  18: 678029.753 ops/s
Iteration  19: 696098.484 ops/s
Iteration  20: 715525.319 ops/s
Iteration  21: 654218.460 ops/s
Iteration  22: 698264.953 ops/s
Iteration  23: 642916.463 ops/s
Iteration  24: 705673.150 ops/s
Iteration  25: 692920.085 ops/s
Iteration  26: 684825.251 ops/s
Iteration  27: 706784.052 ops/s
Iteration  28: 686502.829 ops/s
Iteration  29: 696378.234 ops/s
Iteration  30: 689837.795 ops/s


Result "io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_checkTerminatedNonDelayErrorError":
  691320.123 ±(99.9%) 12649.001 ops/s [Average]
  (min, avg, max) = (642916.463, 691320.123, 729604.236), stdev = 18932.431
  CI (99.9%): [678671.122, 703969.124] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
QueueDrainHelperTest._Benchmark.benchmark_checkTerminatedNonDelayErrorError  thrpt   30  691320.123 ± 12649.001  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28693.454 ops/s
# Warmup Iteration   2: 118929.853 ops/s
# Warmup Iteration   3: 156757.321 ops/s
# Warmup Iteration   4: 173975.406 ops/s
# Warmup Iteration   5: 172322.685 ops/s
# Warmup Iteration   6: 167824.039 ops/s
# Warmup Iteration   7: 168912.006 ops/s
# Warmup Iteration   8: 158950.729 ops/s
# Warmup Iteration   9: 177684.429 ops/s
# Warmup Iteration  10: 160679.300 ops/s
# Warmup Iteration  11: 176539.214 ops/s
# Warmup Iteration  12: 160102.942 ops/s
# Warmup Iteration  13: 184667.746 ops/s
# Warmup Iteration  14: 170764.420 ops/s
# Warmup Iteration  15: 173320.661 ops/s
# Warmup Iteration  16: 178295.952 ops/s
# Warmup Iteration  17: 185194.657 ops/s
# Warmup Iteration  18: 193014.905 ops/s
# Warmup Iteration  19: 184743.754 ops/s
# Warmup Iteration  20: 187074.268 ops/s
# Warmup Iteration  21: 185853.025 ops/s
# Warmup Iteration  22: 191467.323 ops/s
# Warmup Iteration  23: 189024.930 ops/s
# Warmup Iteration  24: 191975.906 ops/s
# Warmup Iteration  25: 182533.089 ops/s
# Warmup Iteration  26: 193536.843 ops/s
# Warmup Iteration  27: 184525.073 ops/s
# Warmup Iteration  28: 193516.490 ops/s
# Warmup Iteration  29: 183909.837 ops/s
# Warmup Iteration  30: 192910.797 ops/s
Iteration   1: 182577.336 ops/s
Iteration   2: 190683.281 ops/s
Iteration   3: 186362.711 ops/s
Iteration   4: 185383.599 ops/s
Iteration   5: 192130.934 ops/s
Iteration   6: 194674.316 ops/s
Iteration   7: 186595.983 ops/s
Iteration   8: 190823.246 ops/s
Iteration   9: 183110.125 ops/s
Iteration  10: 193626.813 ops/s
Iteration  11: 186729.894 ops/s
Iteration  12: 180782.264 ops/s
Iteration  13: 190947.842 ops/s
Iteration  14: 186518.226 ops/s
Iteration  15: 189807.653 ops/s
Iteration  16: 189982.365 ops/s
Iteration  17: 180204.175 ops/s
Iteration  18: 195273.713 ops/s
Iteration  19: 149061.493 ops/s
Iteration  20: 190913.670 ops/s
Iteration  21: 178758.243 ops/s
Iteration  22: 189658.835 ops/s
Iteration  23: 190705.854 ops/s
Iteration  24: 177510.732 ops/s
Iteration  25: 187350.866 ops/s
Iteration  26: 179334.683 ops/s
Iteration  27: 187298.849 ops/s
Iteration  28: 191600.482 ops/s
Iteration  29: 185876.802 ops/s
Iteration  30: 188736.040 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd":
  186100.701 ±(99.9%) 5651.081 ops/s [Average]
  (min, avg, max) = (149061.493, 186100.701, 195273.713), stdev = 8458.272
  CI (99.9%): [180449.620, 191751.782] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt       Score      Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd  thrpt   30  186100.701 ± 5651.081  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedNonDelayErrorError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedNonDelayErrorError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 273110.665 ops/s
# Warmup Iteration   2: 551121.695 ops/s
# Warmup Iteration   3: 674090.544 ops/s
# Warmup Iteration   4: 676356.444 ops/s
# Warmup Iteration   5: 668710.855 ops/s
# Warmup Iteration   6: 684527.719 ops/s
# Warmup Iteration   7: 713956.221 ops/s
# Warmup Iteration   8: 672344.394 ops/s
# Warmup Iteration   9: 714042.686 ops/s
# Warmup Iteration  10: 683899.228 ops/s
# Warmup Iteration  11: 609528.269 ops/s
# Warmup Iteration  12: 695668.008 ops/s
# Warmup Iteration  13: 687566.427 ops/s
# Warmup Iteration  14: 705977.410 ops/s
# Warmup Iteration  15: 674509.885 ops/s
# Warmup Iteration  16: 717112.201 ops/s
# Warmup Iteration  17: 736013.652 ops/s
# Warmup Iteration  18: 712152.760 ops/s
# Warmup Iteration  19: 733939.974 ops/s
# Warmup Iteration  20: 706944.902 ops/s
# Warmup Iteration  21: 726632.350 ops/s
# Warmup Iteration  22: 727312.249 ops/s
# Warmup Iteration  23: 743308.216 ops/s
# Warmup Iteration  24: 751584.416 ops/s
# Warmup Iteration  25: 704685.072 ops/s
# Warmup Iteration  26: 721850.241 ops/s
# Warmup Iteration  27: 749914.902 ops/s
# Warmup Iteration  28: 713512.669 ops/s
# Warmup Iteration  29: 739296.975 ops/s
# Warmup Iteration  30: 737339.917 ops/s
Iteration   1: 715407.024 ops/s
Iteration   2: 730982.929 ops/s
Iteration   3: 712245.959 ops/s
Iteration   4: 737539.993 ops/s
Iteration   5: 702045.193 ops/s
Iteration   6: 725396.979 ops/s
Iteration   7: 754277.189 ops/s
Iteration   8: 719544.286 ops/s
Iteration   9: 728243.994 ops/s
Iteration  10: 704886.714 ops/s
Iteration  11: 725747.112 ops/s
Iteration  12: 740200.665 ops/s
Iteration  13: 717394.584 ops/s
Iteration  14: 758117.856 ops/s
Iteration  15: 690953.386 ops/s
Iteration  16: 727801.521 ops/s
Iteration  17: 727345.163 ops/s
Iteration  18: 724631.901 ops/s
Iteration  19: 736504.404 ops/s
Iteration  20: 713811.034 ops/s
Iteration  21: 745862.847 ops/s
Iteration  22: 712087.644 ops/s
Iteration  23: 715562.097 ops/s
Iteration  24: 737810.107 ops/s
Iteration  25: 713384.859 ops/s
Iteration  26: 740440.828 ops/s
Iteration  27: 711002.598 ops/s
Iteration  28: 733750.385 ops/s
Iteration  29: 739667.500 ops/s
Iteration  30: 735181.867 ops/s


Result "io.reactivex.rxjava3.internal.util.QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedNonDelayErrorError":
  725927.621 ±(99.9%) 10296.114 ops/s [Average]
  (min, avg, max) = (690953.386, 725927.621, 758117.856), stdev = 15410.741
  CI (99.9%): [715631.506, 736223.735] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score       Error  Units
QueueDrainHelperTest._Benchmark.benchmark_observerCheckTerminatedNonDelayErrorError  thrpt   30  725927.621 ± 10296.114  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31778.404 ops/s
# Warmup Iteration   2: 94670.506 ops/s
# Warmup Iteration   3: 160904.881 ops/s
# Warmup Iteration   4: 344421.055 ops/s
# Warmup Iteration   5: 328616.251 ops/s
# Warmup Iteration   6: 341119.965 ops/s
# Warmup Iteration   7: 324162.233 ops/s
# Warmup Iteration   8: 318975.706 ops/s
# Warmup Iteration   9: 340320.700 ops/s
# Warmup Iteration  10: 320387.613 ops/s
# Warmup Iteration  11: 331529.151 ops/s
# Warmup Iteration  12: 324592.074 ops/s
# Warmup Iteration  13: 343278.646 ops/s
# Warmup Iteration  14: 348219.319 ops/s
# Warmup Iteration  15: 313404.973 ops/s
# Warmup Iteration  16: 352038.699 ops/s
# Warmup Iteration  17: 327985.778 ops/s
# Warmup Iteration  18: 336101.921 ops/s
# Warmup Iteration  19: 361580.108 ops/s
# Warmup Iteration  20: 363410.171 ops/s
# Warmup Iteration  21: 330524.173 ops/s
# Warmup Iteration  22: 339467.627 ops/s
# Warmup Iteration  23: 359284.104 ops/s
# Warmup Iteration  24: 340067.655 ops/s
# Warmup Iteration  25: 328025.013 ops/s
# Warmup Iteration  26: 326141.773 ops/s
# Warmup Iteration  27: 350595.538 ops/s
# Warmup Iteration  28: 344088.683 ops/s
# Warmup Iteration  29: 341493.771 ops/s
# Warmup Iteration  30: 358201.701 ops/s
Iteration   1: 334015.054 ops/s
Iteration   2: 344659.054 ops/s
Iteration   3: 342366.916 ops/s
Iteration   4: 339140.682 ops/s
Iteration   5: 353197.783 ops/s
Iteration   6: 332429.094 ops/s
Iteration   7: 352799.538 ops/s
Iteration   8: 340790.742 ops/s
Iteration   9: 347534.409 ops/s
Iteration  10: 360513.685 ops/s
Iteration  11: 337546.246 ops/s
Iteration  12: 350009.378 ops/s
Iteration  13: 282206.855 ops/s
Iteration  14: 335261.834 ops/s
Iteration  15: 334992.271 ops/s
Iteration  16: 340122.293 ops/s
Iteration  17: 352106.783 ops/s
Iteration  18: 336519.736 ops/s
Iteration  19: 347152.032 ops/s
Iteration  20: 362616.551 ops/s
Iteration  21: 336956.245 ops/s
Iteration  22: 342388.715 ops/s
Iteration  23: 356024.802 ops/s
Iteration  24: 341563.462 ops/s
Iteration  25: 355259.199 ops/s
Iteration  26: 347252.621 ops/s
Iteration  27: 348514.413 ops/s
Iteration  28: 347152.633 ops/s
Iteration  29: 339280.897 ops/s
Iteration  30: 353311.623 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenMainError":
  343122.852 ±(99.9%) 9383.977 ops/s [Average]
  (min, avg, max) = (282206.855, 343122.852, 362616.551), stdev = 14045.496
  CI (99.9%): [333738.875, 352506.829] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_windowOpenMainError  thrpt   30  343122.852 ± 9383.977  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancelConditional2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancelConditional2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28779.971 ops/s
# Warmup Iteration   2: 119910.924 ops/s
# Warmup Iteration   3: 148094.489 ops/s
# Warmup Iteration   4: 148015.093 ops/s
# Warmup Iteration   5: 139873.797 ops/s
# Warmup Iteration   6: 166287.307 ops/s
# Warmup Iteration   7: 159440.245 ops/s
# Warmup Iteration   8: 159921.431 ops/s
# Warmup Iteration   9: 161899.199 ops/s
# Warmup Iteration  10: 165875.626 ops/s
# Warmup Iteration  11: 160706.000 ops/s
# Warmup Iteration  12: 159497.044 ops/s
# Warmup Iteration  13: 167192.680 ops/s
# Warmup Iteration  14: 157850.391 ops/s
# Warmup Iteration  15: 161397.176 ops/s
# Warmup Iteration  16: 163277.066 ops/s
# Warmup Iteration  17: 173368.944 ops/s
# Warmup Iteration  18: 165645.072 ops/s
# Warmup Iteration  19: 170340.654 ops/s
# Warmup Iteration  20: 168460.563 ops/s
# Warmup Iteration  21: 174655.083 ops/s
# Warmup Iteration  22: 177269.611 ops/s
# Warmup Iteration  23: 170288.741 ops/s
# Warmup Iteration  24: 157145.012 ops/s
# Warmup Iteration  25: 173276.624 ops/s
# Warmup Iteration  26: 166211.760 ops/s
# Warmup Iteration  27: 173775.606 ops/s
# Warmup Iteration  28: 161380.153 ops/s
# Warmup Iteration  29: 173453.131 ops/s
# Warmup Iteration  30: 163834.535 ops/s
Iteration   1: 169089.364 ops/s
Iteration   2: 166840.256 ops/s
Iteration   3: 170618.900 ops/s
Iteration   4: 173086.635 ops/s
Iteration   5: 163943.563 ops/s
Iteration   6: 171788.298 ops/s
Iteration   7: 169345.904 ops/s
Iteration   8: 168878.049 ops/s
Iteration   9: 170851.188 ops/s
Iteration  10: 165442.357 ops/s
Iteration  11: 166716.465 ops/s
Iteration  12: 176529.218 ops/s
Iteration  13: 166265.567 ops/s
Iteration  14: 168009.971 ops/s
Iteration  15: 168760.005 ops/s
Iteration  16: 169349.373 ops/s
Iteration  17: 168054.100 ops/s
Iteration  18: 173589.435 ops/s
Iteration  19: 161242.310 ops/s
Iteration  20: 174217.698 ops/s
Iteration  21: 164703.431 ops/s
Iteration  22: 171081.635 ops/s
Iteration  23: 168215.498 ops/s
Iteration  24: 168058.633 ops/s
Iteration  25: 169964.986 ops/s
Iteration  26: 168893.971 ops/s
Iteration  27: 168146.409 ops/s
Iteration  28: 161915.427 ops/s
Iteration  29: 174694.521 ops/s
Iteration  30: 167139.482 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancelConditional2":
  168847.755 ±(99.9%) 2369.650 ops/s [Average]
  (min, avg, max) = (161242.310, 168847.755, 176529.218), stdev = 3546.781
  CI (99.9%): [166478.105, 171217.405] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableFilterTest._Benchmark.benchmark_sourceIgnoresCancelConditional2  thrpt   30  168847.755 ± 2369.650  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46885.885 ops/s
# Warmup Iteration   2: 171773.023 ops/s
# Warmup Iteration   3: 420385.713 ops/s
# Warmup Iteration   4: 445247.652 ops/s
# Warmup Iteration   5: 482801.108 ops/s
# Warmup Iteration   6: 447351.820 ops/s
# Warmup Iteration   7: 454317.993 ops/s
# Warmup Iteration   8: 476080.653 ops/s
# Warmup Iteration   9: 442918.947 ops/s
# Warmup Iteration  10: 450179.608 ops/s
# Warmup Iteration  11: 473186.317 ops/s
# Warmup Iteration  12: 461973.852 ops/s
# Warmup Iteration  13: 462127.722 ops/s
# Warmup Iteration  14: 472672.307 ops/s
# Warmup Iteration  15: 438854.373 ops/s
# Warmup Iteration  16: 479312.735 ops/s
# Warmup Iteration  17: 465191.254 ops/s
# Warmup Iteration  18: 468371.991 ops/s
# Warmup Iteration  19: 511924.484 ops/s
# Warmup Iteration  20: 445225.850 ops/s
# Warmup Iteration  21: 488627.996 ops/s
# Warmup Iteration  22: 489305.197 ops/s
# Warmup Iteration  23: 503965.928 ops/s
# Warmup Iteration  24: 474301.804 ops/s
# Warmup Iteration  25: 478395.561 ops/s
# Warmup Iteration  26: 475813.983 ops/s
# Warmup Iteration  27: 496985.958 ops/s
# Warmup Iteration  28: 466864.678 ops/s
# Warmup Iteration  29: 488912.726 ops/s
# Warmup Iteration  30: 503280.298 ops/s
Iteration   1: 478644.985 ops/s
Iteration   2: 473132.573 ops/s
Iteration   3: 506841.279 ops/s
Iteration   4: 475919.020 ops/s
Iteration   5: 493168.262 ops/s
Iteration   6: 480282.005 ops/s
Iteration   7: 489727.070 ops/s
Iteration   8: 421252.419 ops/s
Iteration   9: 483740.688 ops/s
Iteration  10: 478113.819 ops/s
Iteration  11: 493522.125 ops/s
Iteration  12: 460128.266 ops/s
Iteration  13: 473093.624 ops/s
Iteration  14: 494039.914 ops/s
Iteration  15: 499573.523 ops/s
Iteration  16: 489709.675 ops/s
Iteration  17: 489168.691 ops/s
Iteration  18: 484119.339 ops/s
Iteration  19: 491580.889 ops/s
Iteration  20: 487838.183 ops/s
Iteration  21: 461218.327 ops/s
Iteration  22: 496730.227 ops/s
Iteration  23: 488825.348 ops/s
Iteration  24: 493028.539 ops/s
Iteration  25: 503239.909 ops/s
Iteration  26: 485462.148 ops/s
Iteration  27: 502454.813 ops/s
Iteration  28: 479706.139 ops/s
Iteration  29: 502411.947 ops/s
Iteration  30: 490746.747 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_badRequest":
  484914.016 ±(99.9%) 11074.152 ops/s [Average]
  (min, avg, max) = (421252.419, 484914.016, 506841.279), stdev = 16575.271
  CI (99.9%): [473839.864, 495988.169] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_badRequest  thrpt   30  484914.016 ± 11074.152  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 30517.445 ops/s
# Warmup Iteration   2: 148542.645 ops/s
# Warmup Iteration   3: 182919.686 ops/s
# Warmup Iteration   4: 197894.501 ops/s
# Warmup Iteration   5: 190195.348 ops/s
# Warmup Iteration   6: 197597.191 ops/s
# Warmup Iteration   7: 207378.916 ops/s
# Warmup Iteration   8: 208369.662 ops/s
# Warmup Iteration   9: 214570.836 ops/s
# Warmup Iteration  10: 214200.170 ops/s
# Warmup Iteration  11: 204211.483 ops/s
# Warmup Iteration  12: 205092.788 ops/s
# Warmup Iteration  13: 205410.165 ops/s
# Warmup Iteration  14: 215730.849 ops/s
# Warmup Iteration  15: 205564.755 ops/s
# Warmup Iteration  16: 204622.856 ops/s
# Warmup Iteration  17: 217698.986 ops/s
# Warmup Iteration  18: 217483.097 ops/s
# Warmup Iteration  19: 202004.209 ops/s
# Warmup Iteration  20: 215508.542 ops/s
# Warmup Iteration  21: 209634.558 ops/s
# Warmup Iteration  22: 211185.698 ops/s
# Warmup Iteration  23: 219530.791 ops/s
# Warmup Iteration  24: 217286.014 ops/s
# Warmup Iteration  25: 211559.114 ops/s
# Warmup Iteration  26: 214437.504 ops/s
# Warmup Iteration  27: 219625.865 ops/s
# Warmup Iteration  28: 212289.399 ops/s
# Warmup Iteration  29: 213569.706 ops/s
# Warmup Iteration  30: 212198.820 ops/s
Iteration   1: 211289.717 ops/s
Iteration   2: 218356.385 ops/s
Iteration   3: 212129.909 ops/s
Iteration   4: 213570.515 ops/s
Iteration   5: 216451.159 ops/s
Iteration   6: 212620.867 ops/s
Iteration   7: 218541.759 ops/s
Iteration   8: 204805.580 ops/s
Iteration   9: 218972.991 ops/s
Iteration  10: 216845.993 ops/s
Iteration  11: 215301.569 ops/s
Iteration  12: 207872.217 ops/s
Iteration  13: 208577.544 ops/s
Iteration  14: 213899.849 ops/s
Iteration  15: 216085.665 ops/s
Iteration  16: 207242.830 ops/s
Iteration  17: 217626.900 ops/s
Iteration  18: 203457.389 ops/s
Iteration  19: 217460.488 ops/s
Iteration  20: 208230.470 ops/s
Iteration  21: 214192.970 ops/s
Iteration  22: 218565.081 ops/s
Iteration  23: 212107.465 ops/s
Iteration  24: 216643.800 ops/s
Iteration  25: 215636.053 ops/s
Iteration  26: 213674.438 ops/s
Iteration  27: 212333.633 ops/s
Iteration  28: 209528.186 ops/s
Iteration  29: 218065.802 ops/s
Iteration  30: 205650.792 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_badSource":
  213191.267 ±(99.9%) 3007.824 ops/s [Average]
  (min, avg, max) = (203457.389, 213191.267, 218972.991), stdev = 4501.970
  CI (99.9%): [210183.443, 216199.091] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_badSource  thrpt   30  213191.267 ± 3007.824  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_overflowSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_overflowSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72353.636 ops/s
# Warmup Iteration   2: 353713.708 ops/s
# Warmup Iteration   3: 497977.400 ops/s
# Warmup Iteration   4: 463330.155 ops/s
# Warmup Iteration   5: 526969.592 ops/s
# Warmup Iteration   6: 515209.042 ops/s
# Warmup Iteration   7: 504199.538 ops/s
# Warmup Iteration   8: 511516.141 ops/s
# Warmup Iteration   9: 527034.045 ops/s
# Warmup Iteration  10: 539459.641 ops/s
# Warmup Iteration  11: 514841.973 ops/s
# Warmup Iteration  12: 501317.480 ops/s
# Warmup Iteration  13: 532996.000 ops/s
# Warmup Iteration  14: 508081.813 ops/s
# Warmup Iteration  15: 513604.985 ops/s
# Warmup Iteration  16: 533997.014 ops/s
# Warmup Iteration  17: 526010.136 ops/s
# Warmup Iteration  18: 540504.904 ops/s
# Warmup Iteration  19: 527233.119 ops/s
# Warmup Iteration  20: 564866.161 ops/s
# Warmup Iteration  21: 513729.310 ops/s
# Warmup Iteration  22: 515279.884 ops/s
# Warmup Iteration  23: 528347.850 ops/s
# Warmup Iteration  24: 531310.297 ops/s
# Warmup Iteration  25: 502181.646 ops/s
# Warmup Iteration  26: 547929.155 ops/s
# Warmup Iteration  27: 532737.984 ops/s
# Warmup Iteration  28: 544869.819 ops/s
# Warmup Iteration  29: 553598.074 ops/s
# Warmup Iteration  30: 528716.385 ops/s
Iteration   1: 550881.034 ops/s
Iteration   2: 480546.834 ops/s
Iteration   3: 494999.507 ops/s
Iteration   4: 529352.755 ops/s
Iteration   5: 545839.001 ops/s
Iteration   6: 556499.120 ops/s
Iteration   7: 522032.730 ops/s
Iteration   8: 568428.198 ops/s
Iteration   9: 528744.955 ops/s
Iteration  10: 531243.895 ops/s
Iteration  11: 541360.292 ops/s
Iteration  12: 524887.981 ops/s
Iteration  13: 536860.243 ops/s
Iteration  14: 548424.933 ops/s
Iteration  15: 532225.607 ops/s
Iteration  16: 549965.185 ops/s
Iteration  17: 527461.078 ops/s
Iteration  18: 547539.635 ops/s
Iteration  19: 535471.271 ops/s
Iteration  20: 531224.253 ops/s
Iteration  21: 552376.319 ops/s
Iteration  22: 568158.460 ops/s
Iteration  23: 533507.036 ops/s
Iteration  24: 561390.832 ops/s
Iteration  25: 527028.294 ops/s
Iteration  26: 553622.971 ops/s
Iteration  27: 541568.919 ops/s
Iteration  28: 552608.285 ops/s
Iteration  29: 530123.844 ops/s
Iteration  30: 541727.871 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_overflowSource":
  538203.378 ±(99.9%) 12517.274 ops/s [Average]
  (min, avg, max) = (480546.834, 538203.378, 568428.198), stdev = 18735.269
  CI (99.9%): [525686.103, 550720.652] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score       Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_overflowSource  thrpt   30  538203.378 ± 12517.274  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 148215.989 ops/s
# Warmup Iteration   2: 319165.728 ops/s
# Warmup Iteration   3: 413379.183 ops/s
# Warmup Iteration   4: 427328.530 ops/s
# Warmup Iteration   5: 394129.247 ops/s
# Warmup Iteration   6: 437229.818 ops/s
# Warmup Iteration   7: 429560.270 ops/s
# Warmup Iteration   8: 450279.367 ops/s
# Warmup Iteration   9: 447559.833 ops/s
# Warmup Iteration  10: 432421.473 ops/s
# Warmup Iteration  11: 441140.492 ops/s
# Warmup Iteration  12: 439716.465 ops/s
# Warmup Iteration  13: 447869.584 ops/s
# Warmup Iteration  14: 431812.163 ops/s
# Warmup Iteration  15: 450810.461 ops/s
# Warmup Iteration  16: 445582.003 ops/s
# Warmup Iteration  17: 445606.441 ops/s
# Warmup Iteration  18: 472995.060 ops/s
# Warmup Iteration  19: 446991.074 ops/s
# Warmup Iteration  20: 461494.361 ops/s
# Warmup Iteration  21: 465619.919 ops/s
# Warmup Iteration  22: 459133.654 ops/s
# Warmup Iteration  23: 445986.407 ops/s
# Warmup Iteration  24: 448056.283 ops/s
# Warmup Iteration  25: 480264.988 ops/s
# Warmup Iteration  26: 444204.486 ops/s
# Warmup Iteration  27: 442236.231 ops/s
# Warmup Iteration  28: 468850.549 ops/s
# Warmup Iteration  29: 453966.900 ops/s
# Warmup Iteration  30: 458158.292 ops/s
Iteration   1: 440405.759 ops/s
Iteration   2: 447755.704 ops/s
Iteration   3: 461152.000 ops/s
Iteration   4: 441300.107 ops/s
Iteration   5: 460011.161 ops/s
Iteration   6: 437068.403 ops/s
Iteration   7: 464987.988 ops/s
Iteration   8: 448173.625 ops/s
Iteration   9: 444311.150 ops/s
Iteration  10: 470449.374 ops/s
Iteration  11: 435343.351 ops/s
Iteration  12: 458199.221 ops/s
Iteration  13: 445435.655 ops/s
Iteration  14: 459124.256 ops/s
Iteration  15: 463900.743 ops/s
Iteration  16: 454783.633 ops/s
Iteration  17: 452154.737 ops/s
Iteration  18: 454521.057 ops/s
Iteration  19: 464068.391 ops/s
Iteration  20: 457292.326 ops/s
Iteration  21: 464431.584 ops/s
Iteration  22: 442157.036 ops/s
Iteration  23: 456424.854 ops/s
Iteration  24: 472108.027 ops/s
Iteration  25: 453156.037 ops/s
Iteration  26: 465393.791 ops/s
Iteration  27: 453695.861 ops/s
Iteration  28: 449580.783 ops/s
Iteration  29: 478374.209 ops/s
Iteration  30: 451261.515 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_doubleOnSubscribe":
  454900.745 ±(99.9%) 7092.692 ops/s [Average]
  (min, avg, max) = (435343.351, 454900.745, 478374.209), stdev = 10616.009
  CI (99.9%): [447808.052, 461993.437] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  454900.745 ± 7092.692  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestExact$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestExact

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102598.867 ops/s
# Warmup Iteration   2: 382213.734 ops/s
# Warmup Iteration   3: 465418.909 ops/s
# Warmup Iteration   4: 456423.812 ops/s
# Warmup Iteration   5: 483105.675 ops/s
# Warmup Iteration   6: 464536.992 ops/s
# Warmup Iteration   7: 456803.750 ops/s
# Warmup Iteration   8: 472141.618 ops/s
# Warmup Iteration   9: 438553.275 ops/s
# Warmup Iteration  10: 502893.706 ops/s
# Warmup Iteration  11: 495608.424 ops/s
# Warmup Iteration  12: 495601.185 ops/s
# Warmup Iteration  13: 470778.276 ops/s
# Warmup Iteration  14: 504154.504 ops/s
# Warmup Iteration  15: 468855.478 ops/s
# Warmup Iteration  16: 475776.179 ops/s
# Warmup Iteration  17: 480925.208 ops/s
# Warmup Iteration  18: 485113.017 ops/s
# Warmup Iteration  19: 497895.901 ops/s
# Warmup Iteration  20: 506945.481 ops/s
# Warmup Iteration  21: 493686.203 ops/s
# Warmup Iteration  22: 517107.543 ops/s
# Warmup Iteration  23: 500603.173 ops/s
# Warmup Iteration  24: 493080.782 ops/s
# Warmup Iteration  25: 493995.607 ops/s
# Warmup Iteration  26: 491707.070 ops/s
# Warmup Iteration  27: 384402.270 ops/s
# Warmup Iteration  28: 499552.186 ops/s
# Warmup Iteration  29: 492618.225 ops/s
# Warmup Iteration  30: 509445.019 ops/s
Iteration   1: 486382.605 ops/s
Iteration   2: 492446.481 ops/s
Iteration   3: 508875.207 ops/s
Iteration   4: 499036.722 ops/s
Iteration   5: 492044.360 ops/s
Iteration   6: 505349.630 ops/s
Iteration   7: 491549.834 ops/s
Iteration   8: 497484.099 ops/s
Iteration   9: 496824.785 ops/s
Iteration  10: 499636.015 ops/s
Iteration  11: 502243.341 ops/s
Iteration  12: 493383.440 ops/s
Iteration  13: 507508.128 ops/s
Iteration  14: 477005.781 ops/s
Iteration  15: 490776.302 ops/s
Iteration  16: 480625.272 ops/s
Iteration  17: 487787.458 ops/s
Iteration  18: 481757.950 ops/s
Iteration  19: 483357.449 ops/s
Iteration  20: 498823.492 ops/s
Iteration  21: 486532.655 ops/s
Iteration  22: 486160.909 ops/s
Iteration  23: 492923.469 ops/s
Iteration  24: 484905.017 ops/s
Iteration  25: 498201.121 ops/s
Iteration  26: 472944.655 ops/s
Iteration  27: 500390.271 ops/s
Iteration  28: 482368.578 ops/s
Iteration  29: 506191.357 ops/s
Iteration  30: 490804.217 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestExact":
  492477.353 ±(99.9%) 6177.113 ops/s [Average]
  (min, avg, max) = (472944.655, 492477.353, 508875.207), stdev = 9245.613
  CI (99.9%): [486300.240, 498654.467] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestExact  thrpt   30  492477.353 ± 6177.113  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76805.800 ops/s
# Warmup Iteration   2: 363773.601 ops/s
# Warmup Iteration   3: 410898.414 ops/s
# Warmup Iteration   4: 406998.438 ops/s
# Warmup Iteration   5: 499779.082 ops/s
# Warmup Iteration   6: 466096.658 ops/s
# Warmup Iteration   7: 510457.075 ops/s
# Warmup Iteration   8: 494928.731 ops/s
# Warmup Iteration   9: 477951.820 ops/s
# Warmup Iteration  10: 495308.214 ops/s
# Warmup Iteration  11: 481549.434 ops/s
# Warmup Iteration  12: 497176.088 ops/s
# Warmup Iteration  13: 467120.218 ops/s
# Warmup Iteration  14: 482057.478 ops/s
# Warmup Iteration  15: 490848.469 ops/s
# Warmup Iteration  16: 472494.650 ops/s
# Warmup Iteration  17: 486956.115 ops/s
# Warmup Iteration  18: 513947.355 ops/s
# Warmup Iteration  19: 492657.058 ops/s
# Warmup Iteration  20: 514703.994 ops/s
# Warmup Iteration  21: 488031.282 ops/s
# Warmup Iteration  22: 504833.921 ops/s
# Warmup Iteration  23: 526969.275 ops/s
# Warmup Iteration  24: 507574.960 ops/s
# Warmup Iteration  25: 477622.831 ops/s
# Warmup Iteration  26: 497204.162 ops/s
# Warmup Iteration  27: 517120.535 ops/s
# Warmup Iteration  28: 482308.264 ops/s
# Warmup Iteration  29: 503624.744 ops/s
# Warmup Iteration  30: 519999.238 ops/s
Iteration   1: 496306.982 ops/s
Iteration   2: 503325.313 ops/s
Iteration   3: 521965.572 ops/s
Iteration   4: 480088.492 ops/s
Iteration   5: 511968.097 ops/s
Iteration   6: 487031.575 ops/s
Iteration   7: 518526.279 ops/s
Iteration   8: 490261.037 ops/s
Iteration   9: 502880.868 ops/s
Iteration  10: 521994.272 ops/s
Iteration  11: 493982.756 ops/s
Iteration  12: 501525.891 ops/s
Iteration  13: 511222.883 ops/s
Iteration  14: 495578.780 ops/s
Iteration  15: 506024.785 ops/s
Iteration  16: 513716.696 ops/s
Iteration  17: 486184.217 ops/s
Iteration  18: 527153.722 ops/s
Iteration  19: 489144.904 ops/s
Iteration  20: 525737.257 ops/s
Iteration  21: 496556.546 ops/s
Iteration  22: 495917.077 ops/s
Iteration  23: 509409.544 ops/s
Iteration  24: 499479.712 ops/s
Iteration  25: 524197.575 ops/s
Iteration  26: 492067.724 ops/s
Iteration  27: 512647.193 ops/s
Iteration  28: 490821.478 ops/s
Iteration  29: 507959.651 ops/s
Iteration  30: 507484.269 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestSkip":
  504038.705 ±(99.9%) 8686.460 ops/s [Average]
  (min, avg, max) = (480088.492, 504038.705, 527153.722), stdev = 13001.485
  CI (99.9%): [495352.245, 512725.165] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_badRequestSkip  thrpt   30  504038.705 ± 8686.460  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_callableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_callableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 157608.844 ops/s
# Warmup Iteration   2: 544935.386 ops/s
# Warmup Iteration   3: 596263.580 ops/s
# Warmup Iteration   4: 551251.574 ops/s
# Warmup Iteration   5: 605456.181 ops/s
# Warmup Iteration   6: 567466.876 ops/s
# Warmup Iteration   7: 635116.677 ops/s
# Warmup Iteration   8: 628915.004 ops/s
# Warmup Iteration   9: 617735.005 ops/s
# Warmup Iteration  10: 661917.982 ops/s
# Warmup Iteration  11: 629236.537 ops/s
# Warmup Iteration  12: 641796.369 ops/s
# Warmup Iteration  13: 640994.355 ops/s
# Warmup Iteration  14: 626236.677 ops/s
# Warmup Iteration  15: 633234.282 ops/s
# Warmup Iteration  16: 638434.999 ops/s
# Warmup Iteration  17: 670486.609 ops/s
# Warmup Iteration  18: 660005.435 ops/s
# Warmup Iteration  19: 663560.640 ops/s
# Warmup Iteration  20: 684552.984 ops/s
# Warmup Iteration  21: 644110.917 ops/s
# Warmup Iteration  22: 532953.290 ops/s
# Warmup Iteration  23: 649553.996 ops/s
# Warmup Iteration  24: 684988.347 ops/s
# Warmup Iteration  25: 670847.845 ops/s
# Warmup Iteration  26: 684945.688 ops/s
# Warmup Iteration  27: 656471.418 ops/s
# Warmup Iteration  28: 684732.986 ops/s
# Warmup Iteration  29: 653109.828 ops/s
# Warmup Iteration  30: 660511.918 ops/s
Iteration   1: 684113.689 ops/s
Iteration   2: 657779.872 ops/s
Iteration   3: 669753.006 ops/s
Iteration   4: 690149.321 ops/s
Iteration   5: 646640.200 ops/s
Iteration   6: 677168.241 ops/s
Iteration   7: 671514.858 ops/s
Iteration   8: 662225.837 ops/s
Iteration   9: 679141.162 ops/s
Iteration  10: 666251.546 ops/s
Iteration  11: 665369.097 ops/s
Iteration  12: 660461.647 ops/s
Iteration  13: 677798.996 ops/s
Iteration  14: 659513.014 ops/s
Iteration  15: 652182.345 ops/s
Iteration  16: 697948.612 ops/s
Iteration  17: 648681.948 ops/s
Iteration  18: 670655.914 ops/s
Iteration  19: 660644.362 ops/s
Iteration  20: 689221.776 ops/s
Iteration  21: 649037.921 ops/s
Iteration  22: 649906.280 ops/s
Iteration  23: 665973.254 ops/s
Iteration  24: 661601.816 ops/s
Iteration  25: 673493.412 ops/s
Iteration  26: 650824.686 ops/s
Iteration  27: 671822.810 ops/s
Iteration  28: 657653.722 ops/s
Iteration  29: 663877.467 ops/s
Iteration  30: 686436.745 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlattenIterableTest._Benchmark.benchmark_callableThrows":
  667261.452 ±(99.9%) 9077.937 ops/s [Average]
  (min, avg, max) = (646640.200, 667261.452, 697948.612), stdev = 13587.430
  CI (99.9%): [658183.515, 676339.389] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
FlowableFlattenIterableTest._Benchmark.benchmark_callableThrows  thrpt   30  667261.452 ± 9077.937  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureWithBufferDropOldest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureWithBufferDropOldest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 15450.778 ops/s
# Warmup Iteration   2: 36881.062 ops/s
# Warmup Iteration   3: 38032.333 ops/s
# Warmup Iteration   4: 69735.354 ops/s
# Warmup Iteration   5: 89957.860 ops/s
# Warmup Iteration   6: 90239.261 ops/s
# Warmup Iteration   7: 100801.760 ops/s
# Warmup Iteration   8: 101404.711 ops/s
# Warmup Iteration   9: 97008.335 ops/s
# Warmup Iteration  10: 100683.722 ops/s
# Warmup Iteration  11: 95106.290 ops/s
# Warmup Iteration  12: 101849.002 ops/s
# Warmup Iteration  13: 96822.830 ops/s
# Warmup Iteration  14: 97983.224 ops/s
# Warmup Iteration  15: 102020.107 ops/s
# Warmup Iteration  16: 98436.557 ops/s
# Warmup Iteration  17: 99188.478 ops/s
# Warmup Iteration  18: 95151.868 ops/s
# Warmup Iteration  19: 98335.549 ops/s
# Warmup Iteration  20: 100463.654 ops/s
# Warmup Iteration  21: 95015.319 ops/s
# Warmup Iteration  22: 103495.841 ops/s
# Warmup Iteration  23: 100444.477 ops/s
# Warmup Iteration  24: 97796.851 ops/s
# Warmup Iteration  25: 96068.948 ops/s
# Warmup Iteration  26: 101759.441 ops/s
# Warmup Iteration  27: 97915.736 ops/s
# Warmup Iteration  28: 96376.423 ops/s
# Warmup Iteration  29: 102393.377 ops/s
# Warmup Iteration  30: 96890.920 ops/s
Iteration   1: 98038.192 ops/s
Iteration   2: 100665.700 ops/s
Iteration   3: 96226.962 ops/s
Iteration   4: 98748.660 ops/s
Iteration   5: 99067.783 ops/s
Iteration   6: 94684.032 ops/s
Iteration   7: 103270.681 ops/s
Iteration   8: 94947.850 ops/s
Iteration   9: 99965.346 ops/s
Iteration  10: 97527.884 ops/s
Iteration  11: 96429.267 ops/s
Iteration  12: 101937.142 ops/s
Iteration  13: 97820.588 ops/s
Iteration  14: 98195.189 ops/s
Iteration  15: 96720.905 ops/s
Iteration  16: 96790.814 ops/s
Iteration  17: 104584.895 ops/s
Iteration  18: 97452.369 ops/s
Iteration  19: 95648.717 ops/s
Iteration  20: 102634.831 ops/s
Iteration  21: 97465.022 ops/s
Iteration  22: 103156.731 ops/s
Iteration  23: 95755.933 ops/s
Iteration  24: 97336.236 ops/s
Iteration  25: 103104.568 ops/s
Iteration  26: 101648.309 ops/s
Iteration  27: 95745.610 ops/s
Iteration  28: 100354.484 ops/s
Iteration  29: 101632.430 ops/s
Iteration  30: 96322.311 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureWithBufferDropOldest":
  98795.982 ±(99.9%) 1903.040 ops/s [Average]
  (min, avg, max) = (94684.032, 98795.982, 104584.895), stdev = 2848.381
  CI (99.9%): [96892.941, 100699.022] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt      Score      Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_backpressureWithBufferDropOldest  thrpt   30  98795.982 ± 1903.040  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalNormalSlowpath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalNormalSlowpath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 561540.764 ops/s
# Warmup Iteration   2: 2420850.370 ops/s
# Warmup Iteration   3: 2920258.944 ops/s
# Warmup Iteration   4: 3403827.120 ops/s
# Warmup Iteration   5: 3553039.003 ops/s
# Warmup Iteration   6: 3517569.118 ops/s
# Warmup Iteration   7: 3452368.595 ops/s
# Warmup Iteration   8: 3539524.032 ops/s
# Warmup Iteration   9: 3544779.928 ops/s
# Warmup Iteration  10: 3415420.305 ops/s
# Warmup Iteration  11: 3547937.201 ops/s
# Warmup Iteration  12: 3412214.887 ops/s
# Warmup Iteration  13: 3462268.263 ops/s
# Warmup Iteration  14: 3561320.304 ops/s
# Warmup Iteration  15: 3333286.433 ops/s
# Warmup Iteration  16: 3336636.144 ops/s
# Warmup Iteration  17: 3053756.090 ops/s
# Warmup Iteration  18: 3596565.076 ops/s
# Warmup Iteration  19: 3444323.363 ops/s
# Warmup Iteration  20: 3581947.315 ops/s
# Warmup Iteration  21: 3429621.878 ops/s
# Warmup Iteration  22: 3567089.665 ops/s
# Warmup Iteration  23: 3448254.607 ops/s
# Warmup Iteration  24: 3477205.262 ops/s
# Warmup Iteration  25: 3401236.126 ops/s
# Warmup Iteration  26: 3435595.070 ops/s
# Warmup Iteration  27: 3498506.965 ops/s
# Warmup Iteration  28: 3432203.482 ops/s
# Warmup Iteration  29: 3508413.464 ops/s
# Warmup Iteration  30: 3556916.581 ops/s
Iteration   1: 3452547.950 ops/s
Iteration   2: 3482663.663 ops/s
Iteration   3: 3602027.391 ops/s
Iteration   4: 3365923.617 ops/s
Iteration   5: 3593186.366 ops/s
Iteration   6: 3553292.872 ops/s
Iteration   7: 3445804.302 ops/s
Iteration   8: 3547214.027 ops/s
Iteration   9: 3408367.367 ops/s
Iteration  10: 3527501.800 ops/s
Iteration  11: 3580993.490 ops/s
Iteration  12: 3467994.099 ops/s
Iteration  13: 3528713.927 ops/s
Iteration  14: 3476682.251 ops/s
Iteration  15: 3388403.295 ops/s
Iteration  16: 3507953.874 ops/s
Iteration  17: 3411486.062 ops/s
Iteration  18: 3489191.173 ops/s
Iteration  19: 3394646.227 ops/s
Iteration  20: 3489974.447 ops/s
Iteration  21: 3399700.074 ops/s
Iteration  22: 3536395.495 ops/s
Iteration  23: 3500303.847 ops/s
Iteration  24: 3663585.937 ops/s
Iteration  25: 3350130.314 ops/s
Iteration  26: 3582448.440 ops/s
Iteration  27: 3640821.360 ops/s
Iteration  28: 3385414.132 ops/s
Iteration  29: 3498742.098 ops/s
Iteration  30: 3505061.878 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalNormalSlowpath":
  3492572.393 ±(99.9%) 54945.587 ops/s [Average]
  (min, avg, max) = (3350130.314, 3492572.393, 3663585.937), stdev = 82239.975
  CI (99.9%): [3437626.805, 3547517.980] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_conditionalNormalSlowpath  thrpt   30  3492572.393 ± 54945.587  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 736552.326 ops/s
# Warmup Iteration   2: 2951095.644 ops/s
# Warmup Iteration   3: 3377441.433 ops/s
# Warmup Iteration   4: 3909295.111 ops/s
# Warmup Iteration   5: 3686356.406 ops/s
# Warmup Iteration   6: 3760623.683 ops/s
# Warmup Iteration   7: 3747145.041 ops/s
# Warmup Iteration   8: 3858734.505 ops/s
# Warmup Iteration   9: 3602679.749 ops/s
# Warmup Iteration  10: 3759501.490 ops/s
# Warmup Iteration  11: 3860250.105 ops/s
# Warmup Iteration  12: 3674608.183 ops/s
# Warmup Iteration  13: 3883205.567 ops/s
# Warmup Iteration  14: 3865086.028 ops/s
# Warmup Iteration  15: 3801822.963 ops/s
# Warmup Iteration  16: 3750836.598 ops/s
# Warmup Iteration  17: 3833371.854 ops/s
# Warmup Iteration  18: 3694437.351 ops/s
# Warmup Iteration  19: 3852695.464 ops/s
# Warmup Iteration  20: 3800803.239 ops/s
# Warmup Iteration  21: 3761625.498 ops/s
# Warmup Iteration  22: 3714629.262 ops/s
# Warmup Iteration  23: 3905790.120 ops/s
# Warmup Iteration  24: 3728397.551 ops/s
# Warmup Iteration  25: 3817493.740 ops/s
# Warmup Iteration  26: 3877524.826 ops/s
# Warmup Iteration  27: 3828736.584 ops/s
# Warmup Iteration  28: 3948183.978 ops/s
# Warmup Iteration  29: 3654454.820 ops/s
# Warmup Iteration  30: 3832822.711 ops/s
Iteration   1: 3829592.304 ops/s
Iteration   2: 3775462.818 ops/s
Iteration   3: 3796472.578 ops/s
Iteration   4: 3699318.113 ops/s
Iteration   5: 3825622.029 ops/s
Iteration   6: 3769467.435 ops/s
Iteration   7: 3794359.214 ops/s
Iteration   8: 4007898.447 ops/s
Iteration   9: 3966657.117 ops/s
Iteration  10: 3682380.656 ops/s
Iteration  11: 3882106.598 ops/s
Iteration  12: 3764821.036 ops/s
Iteration  13: 3722222.123 ops/s
Iteration  14: 3944856.726 ops/s
Iteration  15: 3796334.301 ops/s
Iteration  16: 3709447.518 ops/s
Iteration  17: 3898468.044 ops/s
Iteration  18: 3679838.914 ops/s
Iteration  19: 3850141.277 ops/s
Iteration  20: 3768176.580 ops/s
Iteration  21: 3760225.494 ops/s
Iteration  22: 3938947.116 ops/s
Iteration  23: 3632318.957 ops/s
Iteration  24: 3955666.614 ops/s
Iteration  25: 3817390.049 ops/s
Iteration  26: 3751062.129 ops/s
Iteration  27: 3927175.894 ops/s
Iteration  28: 3686452.228 ops/s
Iteration  29: 3892212.330 ops/s
Iteration  30: 3785190.602 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableHideTest._Benchmark.benchmark_dispose":
  3810342.841 ±(99.9%) 65588.228 ops/s [Average]
  (min, avg, max) = (3632318.957, 3810342.841, 4007898.447), stdev = 98169.379
  CI (99.9%): [3744754.614, 3875931.069] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score       Error  Units
CompletableHideTest._Benchmark.benchmark_dispose  thrpt   30  3810342.841 ± 65588.228  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_fromPublisherEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_fromPublisherEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2205538.374 ops/s
# Warmup Iteration   2: 5620192.209 ops/s
# Warmup Iteration   3: 7983712.907 ops/s
# Warmup Iteration   4: 7573094.631 ops/s
# Warmup Iteration   5: 8180591.450 ops/s
# Warmup Iteration   6: 8234624.687 ops/s
# Warmup Iteration   7: 7781109.867 ops/s
# Warmup Iteration   8: 8069779.884 ops/s
# Warmup Iteration   9: 8219028.914 ops/s
# Warmup Iteration  10: 7783923.667 ops/s
# Warmup Iteration  11: 6394024.861 ops/s
# Warmup Iteration  12: 7967952.699 ops/s
# Warmup Iteration  13: 7754364.091 ops/s
# Warmup Iteration  14: 8012925.903 ops/s
# Warmup Iteration  15: 7870039.189 ops/s
# Warmup Iteration  16: 7679158.093 ops/s
# Warmup Iteration  17: 8085717.964 ops/s
# Warmup Iteration  18: 7887471.191 ops/s
# Warmup Iteration  19: 7794169.461 ops/s
# Warmup Iteration  20: 8221265.639 ops/s
# Warmup Iteration  21: 7783396.170 ops/s
# Warmup Iteration  22: 7944534.712 ops/s
# Warmup Iteration  23: 7583557.553 ops/s
# Warmup Iteration  24: 7725446.061 ops/s
# Warmup Iteration  25: 8149234.078 ops/s
# Warmup Iteration  26: 7695673.187 ops/s
# Warmup Iteration  27: 7959805.355 ops/s
# Warmup Iteration  28: 7802971.460 ops/s
# Warmup Iteration  29: 7972109.415 ops/s
# Warmup Iteration  30: 8232203.618 ops/s
Iteration   1: 7746357.361 ops/s
Iteration   2: 7966020.207 ops/s
Iteration   3: 7698171.570 ops/s
Iteration   4: 7784752.175 ops/s
Iteration   5: 8148100.446 ops/s
Iteration   6: 7766797.978 ops/s
Iteration   7: 7790287.041 ops/s
Iteration   8: 8088421.640 ops/s
Iteration   9: 7689529.153 ops/s
Iteration  10: 8148740.929 ops/s
Iteration  11: 8017466.911 ops/s
Iteration  12: 8038468.873 ops/s
Iteration  13: 7799047.539 ops/s
Iteration  14: 8079543.875 ops/s
Iteration  15: 7980648.853 ops/s
Iteration  16: 7980158.555 ops/s
Iteration  17: 7854673.192 ops/s
Iteration  18: 7879209.923 ops/s
Iteration  19: 7807249.641 ops/s
Iteration  20: 7942690.703 ops/s
Iteration  21: 7961595.577 ops/s
Iteration  22: 8084278.138 ops/s
Iteration  23: 7876591.716 ops/s
Iteration  24: 7599580.774 ops/s
Iteration  25: 8366269.897 ops/s
Iteration  26: 7833203.777 ops/s
Iteration  27: 7921734.615 ops/s
Iteration  28: 7722424.055 ops/s
Iteration  29: 8057257.505 ops/s
Iteration  30: 8134748.887 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_fromPublisherEmpty":
  7925467.383 ±(99.9%) 114989.010 ops/s [Average]
  (min, avg, max) = (7599580.774, 7925467.383, 8366269.897), stdev = 172110.149
  CI (99.9%): [7810478.374, 8040456.393] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score        Error  Units
CompletableFromPublisherTest._Benchmark.benchmark_fromPublisherEmpty  thrpt   30  7925467.383 ± 114989.010  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_disposeInMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_disposeInMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 446640.725 ops/s
# Warmup Iteration   2: 2324879.791 ops/s
# Warmup Iteration   3: 2852362.148 ops/s
# Warmup Iteration   4: 3512792.917 ops/s
# Warmup Iteration   5: 3308363.313 ops/s
# Warmup Iteration   6: 3417438.965 ops/s
# Warmup Iteration   7: 3541216.274 ops/s
# Warmup Iteration   8: 3389563.562 ops/s
# Warmup Iteration   9: 3528701.961 ops/s
# Warmup Iteration  10: 3597804.607 ops/s
# Warmup Iteration  11: 3335085.927 ops/s
# Warmup Iteration  12: 3354306.422 ops/s
# Warmup Iteration  13: 3602916.977 ops/s
# Warmup Iteration  14: 3375918.766 ops/s
# Warmup Iteration  15: 3472541.054 ops/s
# Warmup Iteration  16: 3408236.427 ops/s
# Warmup Iteration  17: 3467575.075 ops/s
# Warmup Iteration  18: 3507048.111 ops/s
# Warmup Iteration  19: 3449593.676 ops/s
# Warmup Iteration  20: 3352283.043 ops/s
# Warmup Iteration  21: 3562983.961 ops/s
# Warmup Iteration  22: 3359047.685 ops/s
# Warmup Iteration  23: 3437395.546 ops/s
# Warmup Iteration  24: 3519132.939 ops/s
# Warmup Iteration  25: 3406903.945 ops/s
# Warmup Iteration  26: 3469197.509 ops/s
# Warmup Iteration  27: 3483427.868 ops/s
# Warmup Iteration  28: 3290799.630 ops/s
# Warmup Iteration  29: 3549361.150 ops/s
# Warmup Iteration  30: 3469511.260 ops/s
Iteration   1: 3413696.668 ops/s
Iteration   2: 3621514.870 ops/s
Iteration   3: 3553422.069 ops/s
Iteration   4: 3359966.327 ops/s
Iteration   5: 3634539.508 ops/s
Iteration   6: 3312218.552 ops/s
Iteration   7: 3498588.184 ops/s
Iteration   8: 3527472.908 ops/s
Iteration   9: 3389842.222 ops/s
Iteration  10: 3578686.375 ops/s
Iteration  11: 3451737.216 ops/s
Iteration  12: 3520522.650 ops/s
Iteration  13: 3451438.776 ops/s
Iteration  14: 3439156.671 ops/s
Iteration  15: 3462448.621 ops/s
Iteration  16: 3440397.475 ops/s
Iteration  17: 3460874.439 ops/s
Iteration  18: 3670019.799 ops/s
Iteration  19: 3403970.245 ops/s
Iteration  20: 3428982.058 ops/s
Iteration  21: 3593558.454 ops/s
Iteration  22: 3380794.820 ops/s
Iteration  23: 3483321.105 ops/s
Iteration  24: 3459140.576 ops/s
Iteration  25: 3447281.308 ops/s
Iteration  26: 3561551.888 ops/s
Iteration  27: 3371624.238 ops/s
Iteration  28: 3645705.831 ops/s
Iteration  29: 3339687.488 ops/s
Iteration  30: 3541881.198 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_disposeInMain":
  3481468.085 ±(99.9%) 63496.735 ops/s [Average]
  (min, avg, max) = (3312218.552, 3481468.085, 3670019.799), stdev = 95038.930
  CI (99.9%): [3417971.350, 3544964.819] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
CompletableResumeNextTest._Benchmark.benchmark_disposeInMain  thrpt   30  3481468.085 ± 63496.735  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 331210.093 ops/s
# Warmup Iteration   2: 1302527.743 ops/s
# Warmup Iteration   3: 2329513.439 ops/s
# Warmup Iteration   4: 2882651.208 ops/s
# Warmup Iteration   5: 2506700.482 ops/s
# Warmup Iteration   6: 2560750.949 ops/s
# Warmup Iteration   7: 2820243.184 ops/s
# Warmup Iteration   8: 2803115.196 ops/s
# Warmup Iteration   9: 2885586.362 ops/s
# Warmup Iteration  10: 2731116.525 ops/s
# Warmup Iteration  11: 2801885.508 ops/s
# Warmup Iteration  12: 2780910.442 ops/s
# Warmup Iteration  13: 2827854.652 ops/s
# Warmup Iteration  14: 2826507.925 ops/s
# Warmup Iteration  15: 2816597.425 ops/s
# Warmup Iteration  16: 2878457.248 ops/s
# Warmup Iteration  17: 2842600.821 ops/s
# Warmup Iteration  18: 2818025.804 ops/s
# Warmup Iteration  19: 2848008.735 ops/s
# Warmup Iteration  20: 2775109.045 ops/s
# Warmup Iteration  21: 2913690.595 ops/s
# Warmup Iteration  22: 2761310.920 ops/s
# Warmup Iteration  23: 2839958.816 ops/s
# Warmup Iteration  24: 2857347.499 ops/s
# Warmup Iteration  25: 2887832.851 ops/s
# Warmup Iteration  26: 2771270.291 ops/s
# Warmup Iteration  27: 2887142.356 ops/s
# Warmup Iteration  28: 2836740.564 ops/s
# Warmup Iteration  29: 2819447.149 ops/s
# Warmup Iteration  30: 2836007.277 ops/s
Iteration   1: 2787572.178 ops/s
Iteration   2: 2887341.471 ops/s
Iteration   3: 2850869.408 ops/s
Iteration   4: 2798664.521 ops/s
Iteration   5: 2889445.961 ops/s
Iteration   6: 2772737.723 ops/s
Iteration   7: 2893858.843 ops/s
Iteration   8: 2838037.803 ops/s
Iteration   9: 2906199.956 ops/s
Iteration  10: 2847051.599 ops/s
Iteration  11: 2723238.368 ops/s
Iteration  12: 2955485.721 ops/s
Iteration  13: 2797482.676 ops/s
Iteration  14: 2778838.654 ops/s
Iteration  15: 2831372.150 ops/s
Iteration  16: 2836416.777 ops/s
Iteration  17: 2799331.853 ops/s
Iteration  18: 2872735.360 ops/s
Iteration  19: 2773992.059 ops/s
Iteration  20: 2838351.143 ops/s
Iteration  21: 2755447.643 ops/s
Iteration  22: 2851247.062 ops/s
Iteration  23: 2799247.290 ops/s
Iteration  24: 2863033.085 ops/s
Iteration  25: 2853487.935 ops/s
Iteration  26: 2781580.228 ops/s
Iteration  27: 2885090.084 ops/s
Iteration  28: 2780593.646 ops/s
Iteration  29: 2896850.765 ops/s
Iteration  30: 2882810.497 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableBlockingStreamTest._Benchmark.benchmark_empty":
  2834280.415 ±(99.9%) 35854.923 ops/s [Average]
  (min, avg, max) = (2723238.368, 2834280.415, 2955485.721), stdev = 53665.965
  CI (99.9%): [2798425.492, 2870135.338] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
FlowableBlockingStreamTest._Benchmark.benchmark_empty  thrpt   30  2834280.415 ± 35854.923  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5611687.314 ops/s
# Warmup Iteration   2: 12765315.810 ops/s
# Warmup Iteration   3: 15489974.866 ops/s
# Warmup Iteration   4: 16570577.414 ops/s
# Warmup Iteration   5: 17405789.718 ops/s
# Warmup Iteration   6: 16417284.850 ops/s
# Warmup Iteration   7: 17165936.644 ops/s
# Warmup Iteration   8: 17099003.861 ops/s
# Warmup Iteration   9: 17190919.368 ops/s
# Warmup Iteration  10: 16874708.857 ops/s
# Warmup Iteration  11: 17345916.265 ops/s
# Warmup Iteration  12: 17151843.474 ops/s
# Warmup Iteration  13: 16705922.679 ops/s
# Warmup Iteration  14: 17694039.445 ops/s
# Warmup Iteration  15: 16606583.417 ops/s
# Warmup Iteration  16: 17085980.696 ops/s
# Warmup Iteration  17: 17552228.267 ops/s
# Warmup Iteration  18: 17567958.743 ops/s
# Warmup Iteration  19: 17206156.198 ops/s
# Warmup Iteration  20: 17628324.098 ops/s
# Warmup Iteration  21: 16638435.748 ops/s
# Warmup Iteration  22: 16927788.130 ops/s
# Warmup Iteration  23: 17657038.977 ops/s
# Warmup Iteration  24: 17923949.452 ops/s
# Warmup Iteration  25: 16289055.319 ops/s
# Warmup Iteration  26: 17478533.875 ops/s
# Warmup Iteration  27: 16912542.363 ops/s
# Warmup Iteration  28: 17785847.616 ops/s
# Warmup Iteration  29: 16723098.514 ops/s
# Warmup Iteration  30: 17647088.272 ops/s
Iteration   1: 17536015.906 ops/s
Iteration   2: 16532815.959 ops/s
Iteration   3: 17037826.931 ops/s
Iteration   4: 17256262.477 ops/s
Iteration   5: 17264581.392 ops/s
Iteration   6: 16837344.537 ops/s
Iteration   7: 17266337.274 ops/s
Iteration   8: 17074435.454 ops/s
Iteration   9: 16772413.367 ops/s
Iteration  10: 17409586.405 ops/s
Iteration  11: 16717309.451 ops/s
Iteration  12: 16931862.427 ops/s
Iteration  13: 16959940.334 ops/s
Iteration  14: 16586118.298 ops/s
Iteration  15: 16628050.593 ops/s
Iteration  16: 17251904.946 ops/s
Iteration  17: 16452603.579 ops/s
Iteration  18: 17780395.846 ops/s
Iteration  19: 16804264.799 ops/s
Iteration  20: 17317910.449 ops/s
Iteration  21: 16994829.982 ops/s
Iteration  22: 17087729.234 ops/s
Iteration  23: 17543256.448 ops/s
Iteration  24: 16520220.607 ops/s
Iteration  25: 17961212.885 ops/s
Iteration  26: 16575964.675 ops/s
Iteration  27: 17239802.613 ops/s
Iteration  28: 16674229.266 ops/s
Iteration  29: 16932478.710 ops/s
Iteration  30: 17773775.592 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastEmpty":
  17057382.681 ±(99.9%) 271172.614 ops/s [Average]
  (min, avg, max) = (16452603.579, 17057382.681, 17961212.885), stdev = 405878.433
  CI (99.9%): [16786210.067, 17328555.295] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt         Score        Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastEmpty  thrpt   30  17057382.681 ± 271172.614  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6384521.420 ops/s
# Warmup Iteration   2: 12053903.850 ops/s
# Warmup Iteration   3: 16256826.377 ops/s
# Warmup Iteration   4: 16882294.225 ops/s
# Warmup Iteration   5: 17493856.461 ops/s
# Warmup Iteration   6: 17375315.267 ops/s
# Warmup Iteration   7: 17070440.634 ops/s
# Warmup Iteration   8: 17062222.175 ops/s
# Warmup Iteration   9: 16522954.271 ops/s
# Warmup Iteration  10: 17108935.462 ops/s
# Warmup Iteration  11: 17047731.362 ops/s
# Warmup Iteration  12: 16934878.507 ops/s
# Warmup Iteration  13: 17106099.929 ops/s
# Warmup Iteration  14: 17081486.939 ops/s
# Warmup Iteration  15: 17801881.082 ops/s
# Warmup Iteration  16: 16482246.843 ops/s
# Warmup Iteration  17: 16778798.066 ops/s
# Warmup Iteration  18: 17745431.814 ops/s
# Warmup Iteration  19: 16657000.544 ops/s
# Warmup Iteration  20: 17118438.682 ops/s
# Warmup Iteration  21: 16721298.141 ops/s
# Warmup Iteration  22: 16898670.855 ops/s
# Warmup Iteration  23: 17710979.398 ops/s
# Warmup Iteration  24: 17300959.699 ops/s
# Warmup Iteration  25: 16918054.287 ops/s
# Warmup Iteration  26: 17021176.715 ops/s
# Warmup Iteration  27: 16264486.605 ops/s
# Warmup Iteration  28: 16973445.756 ops/s
# Warmup Iteration  29: 18017527.493 ops/s
# Warmup Iteration  30: 16967918.377 ops/s
Iteration   1: 17116648.095 ops/s
Iteration   2: 17632216.103 ops/s
Iteration   3: 16673398.393 ops/s
Iteration   4: 16882295.905 ops/s
Iteration   5: 17423932.084 ops/s
Iteration   6: 16922329.182 ops/s
Iteration   7: 17033639.311 ops/s
Iteration   8: 16888160.883 ops/s
Iteration   9: 17609544.192 ops/s
Iteration  10: 16710305.927 ops/s
Iteration  11: 16914074.072 ops/s
Iteration  12: 18142663.724 ops/s
Iteration  13: 16421754.026 ops/s
Iteration  14: 17064889.615 ops/s
Iteration  15: 17379530.483 ops/s
Iteration  16: 17120751.892 ops/s
Iteration  17: 16798572.344 ops/s
Iteration  18: 17910121.269 ops/s
Iteration  19: 17519812.653 ops/s
Iteration  20: 17075096.607 ops/s
Iteration  21: 17505264.168 ops/s
Iteration  22: 16770425.743 ops/s
Iteration  23: 16975155.990 ops/s
Iteration  24: 16935657.834 ops/s
Iteration  25: 17627983.643 ops/s
Iteration  26: 17076134.865 ops/s
Iteration  27: 16750422.657 ops/s
Iteration  28: 17314518.274 ops/s
Iteration  29: 16852994.319 ops/s
Iteration  30: 17295521.812 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleEmpty":
  17144793.869 ±(99.9%) 263118.215 ops/s [Average]
  (min, avg, max) = (16421754.026, 17144793.869, 18142663.724), stdev = 393822.988
  CI (99.9%): [16881675.653, 17407912.084] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt         Score        Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleEmpty  thrpt   30  17144793.869 ± 263118.215  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 135223.281 ops/s
# Warmup Iteration   2: 312763.815 ops/s
# Warmup Iteration   3: 313053.879 ops/s
# Warmup Iteration   4: 338109.879 ops/s
# Warmup Iteration   5: 358970.682 ops/s
# Warmup Iteration   6: 310319.525 ops/s
# Warmup Iteration   7: 354615.817 ops/s
# Warmup Iteration   8: 357235.195 ops/s
# Warmup Iteration   9: 305038.891 ops/s
# Warmup Iteration  10: 356703.333 ops/s
# Warmup Iteration  11: 328623.381 ops/s
# Warmup Iteration  12: 348526.044 ops/s
# Warmup Iteration  13: 355472.702 ops/s
# Warmup Iteration  14: 338338.636 ops/s
# Warmup Iteration  15: 353564.137 ops/s
# Warmup Iteration  16: 359069.826 ops/s
# Warmup Iteration  17: 358583.216 ops/s
# Warmup Iteration  18: 361769.639 ops/s
# Warmup Iteration  19: 361853.859 ops/s
# Warmup Iteration  20: 368977.542 ops/s
# Warmup Iteration  21: 371510.384 ops/s
# Warmup Iteration  22: 351835.253 ops/s
# Warmup Iteration  23: 366810.455 ops/s
# Warmup Iteration  24: 377798.170 ops/s
# Warmup Iteration  25: 352106.023 ops/s
# Warmup Iteration  26: 370938.177 ops/s
# Warmup Iteration  27: 351392.646 ops/s
# Warmup Iteration  28: 360977.864 ops/s
# Warmup Iteration  29: 360983.054 ops/s
# Warmup Iteration  30: 372824.604 ops/s
Iteration   1: 354003.410 ops/s
Iteration   2: 367572.217 ops/s
Iteration   3: 354249.705 ops/s
Iteration   4: 352858.069 ops/s
Iteration   5: 370693.117 ops/s
Iteration   6: 359016.780 ops/s
Iteration   7: 365343.226 ops/s
Iteration   8: 357353.808 ops/s
Iteration   9: 371096.463 ops/s
Iteration  10: 354683.930 ops/s
Iteration  11: 353415.790 ops/s
Iteration  12: 359186.806 ops/s
Iteration  13: 356280.931 ops/s
Iteration  14: 359076.533 ops/s
Iteration  15: 360057.502 ops/s
Iteration  16: 350532.398 ops/s
Iteration  17: 359136.488 ops/s
Iteration  18: 351316.608 ops/s
Iteration  19: 359368.642 ops/s
Iteration  20: 363649.132 ops/s
Iteration  21: 361251.266 ops/s
Iteration  22: 373069.448 ops/s
Iteration  23: 367186.854 ops/s
Iteration  24: 360525.170 ops/s
Iteration  25: 377762.995 ops/s
Iteration  26: 310841.531 ops/s
Iteration  27: 346866.376 ops/s
Iteration  28: 355814.048 ops/s
Iteration  29: 360399.694 ops/s
Iteration  30: 368181.283 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstEmpty":
  358693.007 ±(99.9%) 7728.058 ops/s [Average]
  (min, avg, max) = (310841.531, 358693.007, 377762.995), stdev = 11566.994
  CI (99.9%): [350964.950, 366421.065] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstEmpty  thrpt   30  358693.007 ± 7728.058  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_disposeInResume$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_disposeInResume

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 101059.711 ops/s
# Warmup Iteration   2: 486351.713 ops/s
# Warmup Iteration   3: 563375.680 ops/s
# Warmup Iteration   4: 519869.645 ops/s
# Warmup Iteration   5: 601931.603 ops/s
# Warmup Iteration   6: 604459.215 ops/s
# Warmup Iteration   7: 560220.333 ops/s
# Warmup Iteration   8: 591185.384 ops/s
# Warmup Iteration   9: 603434.200 ops/s
# Warmup Iteration  10: 579214.754 ops/s
# Warmup Iteration  11: 606910.207 ops/s
# Warmup Iteration  12: 596786.620 ops/s
# Warmup Iteration  13: 610558.214 ops/s
# Warmup Iteration  14: 607785.912 ops/s
# Warmup Iteration  15: 592323.435 ops/s
# Warmup Iteration  16: 627370.342 ops/s
# Warmup Iteration  17: 615234.150 ops/s
# Warmup Iteration  18: 577332.550 ops/s
# Warmup Iteration  19: 639231.485 ops/s
# Warmup Iteration  20: 623387.301 ops/s
# Warmup Iteration  21: 639047.345 ops/s
# Warmup Iteration  22: 640419.154 ops/s
# Warmup Iteration  23: 610060.628 ops/s
# Warmup Iteration  24: 645911.790 ops/s
# Warmup Iteration  25: 640781.615 ops/s
# Warmup Iteration  26: 645703.024 ops/s
# Warmup Iteration  27: 626465.915 ops/s
# Warmup Iteration  28: 614047.166 ops/s
# Warmup Iteration  29: 651963.457 ops/s
# Warmup Iteration  30: 632912.276 ops/s
Iteration   1: 634277.830 ops/s
Iteration   2: 629873.106 ops/s
Iteration   3: 648596.789 ops/s
Iteration   4: 614709.205 ops/s
Iteration   5: 625391.006 ops/s
Iteration   6: 641427.237 ops/s
Iteration   7: 651671.553 ops/s
Iteration   8: 621837.104 ops/s
Iteration   9: 632643.644 ops/s
Iteration  10: 629662.133 ops/s
Iteration  11: 634291.418 ops/s
Iteration  12: 650209.588 ops/s
Iteration  13: 604391.352 ops/s
Iteration  14: 623973.512 ops/s
Iteration  15: 651447.357 ops/s
Iteration  16: 624341.837 ops/s
Iteration  17: 632432.780 ops/s
Iteration  18: 642832.571 ops/s
Iteration  19: 615508.048 ops/s
Iteration  20: 649727.707 ops/s
Iteration  21: 653227.025 ops/s
Iteration  22: 621741.838 ops/s
Iteration  23: 652699.333 ops/s
Iteration  24: 599586.058 ops/s
Iteration  25: 631876.560 ops/s
Iteration  26: 647468.274 ops/s
Iteration  27: 619936.807 ops/s
Iteration  28: 618951.014 ops/s
Iteration  29: 634864.293 ops/s
Iteration  30: 641101.057 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableResumeNextTest._Benchmark.benchmark_disposeInResume":
  632689.934 ±(99.9%) 9756.101 ops/s [Average]
  (min, avg, max) = (599586.058, 632689.934, 653227.025), stdev = 14602.474
  CI (99.9%): [622933.834, 642446.035] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
CompletableResumeNextTest._Benchmark.benchmark_disposeInResume  thrpt   30  632689.934 ± 9756.101  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithNotMatchingRetryAmount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithNotMatchingRetryAmount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51793.951 ops/s
# Warmup Iteration   2: 207673.016 ops/s
# Warmup Iteration   3: 215438.410 ops/s
# Warmup Iteration   4: 225078.317 ops/s
# Warmup Iteration   5: 237127.089 ops/s
# Warmup Iteration   6: 224495.385 ops/s
# Warmup Iteration   7: 232690.758 ops/s
# Warmup Iteration   8: 226006.241 ops/s
# Warmup Iteration   9: 237245.616 ops/s
# Warmup Iteration  10: 236356.616 ops/s
# Warmup Iteration  11: 217153.623 ops/s
# Warmup Iteration  12: 231161.838 ops/s
# Warmup Iteration  13: 224869.719 ops/s
# Warmup Iteration  14: 217834.761 ops/s
# Warmup Iteration  15: 237391.564 ops/s
# Warmup Iteration  16: 237861.572 ops/s
# Warmup Iteration  17: 225952.784 ops/s
# Warmup Iteration  18: 231761.853 ops/s
# Warmup Iteration  19: 241081.017 ops/s
# Warmup Iteration  20: 228598.792 ops/s
# Warmup Iteration  21: 249104.895 ops/s
# Warmup Iteration  22: 247021.971 ops/s
# Warmup Iteration  23: 239115.892 ops/s
# Warmup Iteration  24: 235372.753 ops/s
# Warmup Iteration  25: 229228.333 ops/s
# Warmup Iteration  26: 243609.542 ops/s
# Warmup Iteration  27: 231681.222 ops/s
# Warmup Iteration  28: 237294.031 ops/s
# Warmup Iteration  29: 235245.763 ops/s
# Warmup Iteration  30: 231987.328 ops/s
Iteration   1: 245314.449 ops/s
Iteration   2: 226381.781 ops/s
Iteration   3: 237860.583 ops/s
Iteration   4: 231528.628 ops/s
Iteration   5: 239087.249 ops/s
Iteration   6: 235744.239 ops/s
Iteration   7: 236152.030 ops/s
Iteration   8: 243186.919 ops/s
Iteration   9: 233658.252 ops/s
Iteration  10: 239999.650 ops/s
Iteration  11: 230566.773 ops/s
Iteration  12: 241125.218 ops/s
Iteration  13: 245405.905 ops/s
Iteration  14: 230709.492 ops/s
Iteration  15: 235130.242 ops/s
Iteration  16: 239651.706 ops/s
Iteration  17: 229448.017 ops/s
Iteration  18: 243244.231 ops/s
Iteration  19: 245976.477 ops/s
Iteration  20: 229440.106 ops/s
Iteration  21: 196788.685 ops/s
Iteration  22: 228161.059 ops/s
Iteration  23: 249289.287 ops/s
Iteration  24: 239976.748 ops/s
Iteration  25: 239209.440 ops/s
Iteration  26: 243156.882 ops/s
Iteration  27: 239026.509 ops/s
Iteration  28: 241571.828 ops/s
Iteration  29: 240019.975 ops/s
Iteration  30: 230102.070 ops/s


Result "io.reactivex.rxjava3.completable.CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithNotMatchingRetryAmount":
  236230.481 ±(99.9%) 6389.383 ops/s [Average]
  (min, avg, max) = (196788.685, 236230.481, 249289.287), stdev = 9563.329
  CI (99.9%): [229841.098, 242619.864] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
CompletableRetryTest._Benchmark.benchmark_retryTimesPredicateWithNotMatchingRetryAmount  thrpt   30  236230.481 ± 6389.383  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_cancelOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_cancelOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 634151.877 ops/s
# Warmup Iteration   2: 2935549.894 ops/s
# Warmup Iteration   3: 3653974.255 ops/s
# Warmup Iteration   4: 3801963.857 ops/s
# Warmup Iteration   5: 3739022.848 ops/s
# Warmup Iteration   6: 3737204.654 ops/s
# Warmup Iteration   7: 3756471.532 ops/s
# Warmup Iteration   8: 3683606.529 ops/s
# Warmup Iteration   9: 3916489.399 ops/s
# Warmup Iteration  10: 3701276.336 ops/s
# Warmup Iteration  11: 3587386.520 ops/s
# Warmup Iteration  12: 3812793.734 ops/s
# Warmup Iteration  13: 3985752.975 ops/s
# Warmup Iteration  14: 3409456.041 ops/s
# Warmup Iteration  15: 3604715.212 ops/s
# Warmup Iteration  16: 3629774.972 ops/s
# Warmup Iteration  17: 3803339.358 ops/s
# Warmup Iteration  18: 3941817.795 ops/s
# Warmup Iteration  19: 3776522.765 ops/s
# Warmup Iteration  20: 3933428.850 ops/s
# Warmup Iteration  21: 3724191.256 ops/s
# Warmup Iteration  22: 3880142.590 ops/s
# Warmup Iteration  23: 3806606.191 ops/s
# Warmup Iteration  24: 3728042.620 ops/s
# Warmup Iteration  25: 3913359.536 ops/s
# Warmup Iteration  26: 3759713.288 ops/s
# Warmup Iteration  27: 3907473.241 ops/s
# Warmup Iteration  28: 3934772.158 ops/s
# Warmup Iteration  29: 3808788.657 ops/s
# Warmup Iteration  30: 3925800.340 ops/s
Iteration   1: 3935830.874 ops/s
Iteration   2: 3642004.118 ops/s
Iteration   3: 3937751.606 ops/s
Iteration   4: 3830074.102 ops/s
Iteration   5: 3680908.511 ops/s
Iteration   6: 3980421.838 ops/s
Iteration   7: 3729862.721 ops/s
Iteration   8: 3955303.631 ops/s
Iteration   9: 3683297.032 ops/s
Iteration  10: 3850885.975 ops/s
Iteration  11: 3835076.542 ops/s
Iteration  12: 3801209.815 ops/s
Iteration  13: 3958957.432 ops/s
Iteration  14: 3769426.381 ops/s
Iteration  15: 3757300.737 ops/s
Iteration  16: 3821828.309 ops/s
Iteration  17: 3844077.711 ops/s
Iteration  18: 3770495.234 ops/s
Iteration  19: 3935010.575 ops/s
Iteration  20: 3660571.753 ops/s
Iteration  21: 3942298.259 ops/s
Iteration  22: 3709751.113 ops/s
Iteration  23: 3814807.837 ops/s
Iteration  24: 3742533.261 ops/s
Iteration  25: 3794572.410 ops/s
Iteration  26: 3769393.111 ops/s
Iteration  27: 3827915.673 ops/s
Iteration  28: 3928566.846 ops/s
Iteration  29: 3771896.434 ops/s
Iteration  30: 3732256.017 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithCompletableTest._Benchmark.benchmark_cancelOther":
  3813809.529 ±(99.9%) 65100.490 ops/s [Average]
  (min, avg, max) = (3642004.118, 3813809.529, 3980421.838), stdev = 97439.355
  CI (99.9%): [3748709.039, 3878910.018] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
FlowableConcatWithCompletableTest._Benchmark.benchmark_cancelOther  thrpt   30  3813809.529 ± 65100.490  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 150545.451 ops/s
# Warmup Iteration   2: 442377.662 ops/s
# Warmup Iteration   3: 562319.991 ops/s
# Warmup Iteration   4: 527476.911 ops/s
# Warmup Iteration   5: 613793.287 ops/s
# Warmup Iteration   6: 519721.557 ops/s
# Warmup Iteration   7: 597378.126 ops/s
# Warmup Iteration   8: 597071.262 ops/s
# Warmup Iteration   9: 628244.089 ops/s
# Warmup Iteration  10: 619861.791 ops/s
# Warmup Iteration  11: 584850.857 ops/s
# Warmup Iteration  12: 599845.116 ops/s
# Warmup Iteration  13: 636662.807 ops/s
# Warmup Iteration  14: 578991.681 ops/s
# Warmup Iteration  15: 626853.497 ops/s
# Warmup Iteration  16: 592037.557 ops/s
# Warmup Iteration  17: 623155.664 ops/s
# Warmup Iteration  18: 650223.201 ops/s
# Warmup Iteration  19: 623971.628 ops/s
# Warmup Iteration  20: 646984.426 ops/s
# Warmup Iteration  21: 633397.152 ops/s
# Warmup Iteration  22: 630512.959 ops/s
# Warmup Iteration  23: 648221.678 ops/s
# Warmup Iteration  24: 622310.444 ops/s
# Warmup Iteration  25: 632527.344 ops/s
# Warmup Iteration  26: 630448.392 ops/s
# Warmup Iteration  27: 623595.820 ops/s
# Warmup Iteration  28: 643639.862 ops/s
# Warmup Iteration  29: 647707.060 ops/s
# Warmup Iteration  30: 672796.795 ops/s
Iteration   1: 613055.319 ops/s
Iteration   2: 637068.864 ops/s
Iteration   3: 656276.853 ops/s
Iteration   4: 618944.387 ops/s
Iteration   5: 617491.703 ops/s
Iteration   6: 647483.174 ops/s
Iteration   7: 615359.292 ops/s
Iteration   8: 644564.443 ops/s
Iteration   9: 622946.410 ops/s
Iteration  10: 615431.580 ops/s
Iteration  11: 646852.697 ops/s
Iteration  12: 630587.976 ops/s
Iteration  13: 603798.592 ops/s
Iteration  14: 648904.478 ops/s
Iteration  15: 637077.784 ops/s
Iteration  16: 529322.466 ops/s
Iteration  17: 638673.956 ops/s
Iteration  18: 633865.833 ops/s
Iteration  19: 658270.574 ops/s
Iteration  20: 640790.623 ops/s
Iteration  21: 621500.117 ops/s
Iteration  22: 635685.431 ops/s
Iteration  23: 623678.762 ops/s
Iteration  24: 624079.076 ops/s
Iteration  25: 645493.221 ops/s
Iteration  26: 610503.849 ops/s
Iteration  27: 623984.924 ops/s
Iteration  28: 642664.842 ops/s
Iteration  29: 618404.055 ops/s
Iteration  30: 637153.342 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableThrows":
  627997.154 ±(99.9%) 15635.266 ops/s [Average]
  (min, avg, max) = (529322.466, 627997.154, 658270.574), stdev = 23402.132
  CI (99.9%): [612361.888, 643632.420] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
FlowableFromCompletableTest._Benchmark.benchmark_fromCompletableThrows  thrpt   30  627997.154 ± 15635.266  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_fromPublisherThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_fromPublisherThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106041.086 ops/s
# Warmup Iteration   2: 505668.538 ops/s
# Warmup Iteration   3: 735803.276 ops/s
# Warmup Iteration   4: 671801.915 ops/s
# Warmup Iteration   5: 712423.404 ops/s
# Warmup Iteration   6: 692924.655 ops/s
# Warmup Iteration   7: 674561.416 ops/s
# Warmup Iteration   8: 720404.773 ops/s
# Warmup Iteration   9: 699358.056 ops/s
# Warmup Iteration  10: 699613.924 ops/s
# Warmup Iteration  11: 713589.053 ops/s
# Warmup Iteration  12: 718868.952 ops/s
# Warmup Iteration  13: 656729.115 ops/s
# Warmup Iteration  14: 685005.879 ops/s
# Warmup Iteration  15: 701076.842 ops/s
# Warmup Iteration  16: 723535.850 ops/s
# Warmup Iteration  17: 751752.409 ops/s
# Warmup Iteration  18: 743450.266 ops/s
# Warmup Iteration  19: 747897.431 ops/s
# Warmup Iteration  20: 741836.021 ops/s
# Warmup Iteration  21: 765161.975 ops/s
# Warmup Iteration  22: 782525.827 ops/s
# Warmup Iteration  23: 749865.610 ops/s
# Warmup Iteration  24: 764834.577 ops/s
# Warmup Iteration  25: 792637.227 ops/s
# Warmup Iteration  26: 792029.574 ops/s
# Warmup Iteration  27: 743642.680 ops/s
# Warmup Iteration  28: 778928.360 ops/s
# Warmup Iteration  29: 756022.610 ops/s
# Warmup Iteration  30: 761327.156 ops/s
Iteration   1: 765197.544 ops/s
Iteration   2: 747279.755 ops/s
Iteration   3: 748553.380 ops/s
Iteration   4: 779289.669 ops/s
Iteration   5: 741115.232 ops/s
Iteration   6: 756158.387 ops/s
Iteration   7: 754908.555 ops/s
Iteration   8: 734848.175 ops/s
Iteration   9: 770814.747 ops/s
Iteration  10: 728334.954 ops/s
Iteration  11: 767962.214 ops/s
Iteration  12: 754188.525 ops/s
Iteration  13: 733949.792 ops/s
Iteration  14: 765082.862 ops/s
Iteration  15: 795187.528 ops/s
Iteration  16: 762880.660 ops/s
Iteration  17: 763082.311 ops/s
Iteration  18: 772917.264 ops/s
Iteration  19: 736328.203 ops/s
Iteration  20: 753604.903 ops/s
Iteration  21: 743864.716 ops/s
Iteration  22: 756878.425 ops/s
Iteration  23: 782450.470 ops/s
Iteration  24: 739683.570 ops/s
Iteration  25: 776084.852 ops/s
Iteration  26: 738199.400 ops/s
Iteration  27: 764781.804 ops/s
Iteration  28: 764702.389 ops/s
Iteration  29: 732722.844 ops/s
Iteration  30: 756263.833 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_fromPublisherThrows":
  756243.899 ±(99.9%) 11074.381 ops/s [Average]
  (min, avg, max) = (728334.954, 756243.899, 795187.528), stdev = 16575.614
  CI (99.9%): [745169.517, 767318.280] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
CompletableFromPublisherTest._Benchmark.benchmark_fromPublisherThrows  thrpt   30  756243.899 ± 11074.381  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainSuccessCompletable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainSuccessCompletable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 192275.090 ops/s
# Warmup Iteration   2: 692439.284 ops/s
# Warmup Iteration   3: 2140026.629 ops/s
# Warmup Iteration   4: 2075146.600 ops/s
# Warmup Iteration   5: 2491780.958 ops/s
# Warmup Iteration   6: 2428878.636 ops/s
# Warmup Iteration   7: 2419199.291 ops/s
# Warmup Iteration   8: 2508595.288 ops/s
# Warmup Iteration   9: 2446706.693 ops/s
# Warmup Iteration  10: 2449821.321 ops/s
# Warmup Iteration  11: 2470954.029 ops/s
# Warmup Iteration  12: 2371331.310 ops/s
# Warmup Iteration  13: 2464625.883 ops/s
# Warmup Iteration  14: 2480076.926 ops/s
# Warmup Iteration  15: 2371533.813 ops/s
# Warmup Iteration  16: 2439713.074 ops/s
# Warmup Iteration  17: 2538741.939 ops/s
# Warmup Iteration  18: 2423910.400 ops/s
# Warmup Iteration  19: 2560539.496 ops/s
# Warmup Iteration  20: 2431106.576 ops/s
# Warmup Iteration  21: 2440344.938 ops/s
# Warmup Iteration  22: 2418646.295 ops/s
# Warmup Iteration  23: 2440589.608 ops/s
# Warmup Iteration  24: 2537138.041 ops/s
# Warmup Iteration  25: 2518232.560 ops/s
# Warmup Iteration  26: 2411998.897 ops/s
# Warmup Iteration  27: 2484437.238 ops/s
# Warmup Iteration  28: 2408155.800 ops/s
# Warmup Iteration  29: 2480248.942 ops/s
# Warmup Iteration  30: 2560771.388 ops/s
Iteration   1: 2439528.600 ops/s
Iteration   2: 2514036.134 ops/s
Iteration   3: 2476264.507 ops/s
Iteration   4: 2451899.504 ops/s
Iteration   5: 2402689.279 ops/s
Iteration   6: 2568748.822 ops/s
Iteration   7: 2513953.055 ops/s
Iteration   8: 2385662.066 ops/s
Iteration   9: 2551383.341 ops/s
Iteration  10: 1812523.958 ops/s
Iteration  11: 2457681.220 ops/s
Iteration  12: 2440323.403 ops/s
Iteration  13: 2484967.144 ops/s
Iteration  14: 2450787.930 ops/s
Iteration  15: 2378173.675 ops/s
Iteration  16: 2453645.192 ops/s
Iteration  17: 2533780.618 ops/s
Iteration  18: 2439915.673 ops/s
Iteration  19: 2554700.144 ops/s
Iteration  20: 2437541.594 ops/s
Iteration  21: 2539180.391 ops/s
Iteration  22: 2434903.947 ops/s
Iteration  23: 2417323.432 ops/s
Iteration  24: 2545677.243 ops/s
Iteration  25: 2401415.349 ops/s
Iteration  26: 2543688.657 ops/s
Iteration  27: 2374895.874 ops/s
Iteration  28: 2532305.159 ops/s
Iteration  29: 2447288.802 ops/s
Iteration  30: 2450009.834 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_mainSuccessCompletable":
  2447829.818 ±(99.9%) 88837.725 ops/s [Average]
  (min, avg, max) = (1812523.958, 2447829.818, 2568748.822), stdev = 132968.134
  CI (99.9%): [2358992.093, 2536667.543] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_mainSuccessCompletable  thrpt   30  2447829.818 ± 88837.725  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 412771.822 ops/s
# Warmup Iteration   2: 1456660.580 ops/s
# Warmup Iteration   3: 2242606.009 ops/s
# Warmup Iteration   4: 2653143.597 ops/s
# Warmup Iteration   5: 2816771.721 ops/s
# Warmup Iteration   6: 2889243.300 ops/s
# Warmup Iteration   7: 2775936.880 ops/s
# Warmup Iteration   8: 2755024.577 ops/s
# Warmup Iteration   9: 2870932.944 ops/s
# Warmup Iteration  10: 2695822.887 ops/s
# Warmup Iteration  11: 2719253.814 ops/s
# Warmup Iteration  12: 2967282.453 ops/s
# Warmup Iteration  13: 2672074.635 ops/s
# Warmup Iteration  14: 2824063.532 ops/s
# Warmup Iteration  15: 2736471.470 ops/s
# Warmup Iteration  16: 2797817.319 ops/s
# Warmup Iteration  17: 2895652.047 ops/s
# Warmup Iteration  18: 2705240.814 ops/s
# Warmup Iteration  19: 2813883.552 ops/s
# Warmup Iteration  20: 2772331.538 ops/s
# Warmup Iteration  21: 2785105.076 ops/s
# Warmup Iteration  22: 2834995.423 ops/s
# Warmup Iteration  23: 2783874.201 ops/s
# Warmup Iteration  24: 2767239.667 ops/s
# Warmup Iteration  25: 2829955.780 ops/s
# Warmup Iteration  26: 2747886.427 ops/s
# Warmup Iteration  27: 2799196.486 ops/s
# Warmup Iteration  28: 2871858.431 ops/s
# Warmup Iteration  29: 2813077.706 ops/s
# Warmup Iteration  30: 2870179.209 ops/s
Iteration   1: 2896685.876 ops/s
Iteration   2: 2668039.886 ops/s
Iteration   3: 2863318.748 ops/s
Iteration   4: 2823562.791 ops/s
Iteration   5: 2689854.502 ops/s
Iteration   6: 2905765.116 ops/s
Iteration   7: 2741368.551 ops/s
Iteration   8: 2803676.273 ops/s
Iteration   9: 2760833.534 ops/s
Iteration  10: 2792408.130 ops/s
Iteration  11: 2799499.947 ops/s
Iteration  12: 2801773.223 ops/s
Iteration  13: 2874895.299 ops/s
Iteration  14: 2733352.102 ops/s
Iteration  15: 2843088.576 ops/s
Iteration  16: 2733630.135 ops/s
Iteration  17: 2828885.819 ops/s
Iteration  18: 2885194.974 ops/s
Iteration  19: 2716001.051 ops/s
Iteration  20: 2933054.500 ops/s
Iteration  21: 2752377.266 ops/s
Iteration  22: 2788936.759 ops/s
Iteration  23: 2812281.754 ops/s
Iteration  24: 2803112.258 ops/s
Iteration  25: 2815589.728 ops/s
Iteration  26: 2770668.141 ops/s
Iteration  27: 2864607.360 ops/s
Iteration  28: 2889634.071 ops/s
Iteration  29: 2751434.745 ops/s
Iteration  30: 2789122.882 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableDispose":
  2804421.800 ±(99.9%) 44145.038 ops/s [Average]
  (min, avg, max) = (2668039.886, 2804421.800, 2933054.500), stdev = 66074.220
  CI (99.9%): [2760276.762, 2848566.838] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilCompletableDispose  thrpt   30  2804421.800 ± 44145.038  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39298.314 ops/s
# Warmup Iteration   2: 499928.102 ops/s
# Warmup Iteration   3: 532829.970 ops/s
# Warmup Iteration   4: 545193.522 ops/s
# Warmup Iteration   5: 529101.507 ops/s
# Warmup Iteration   6: 611338.467 ops/s
# Warmup Iteration   7: 613279.544 ops/s
# Warmup Iteration   8: 603398.662 ops/s
# Warmup Iteration   9: 611177.462 ops/s
# Warmup Iteration  10: 633720.027 ops/s
# Warmup Iteration  11: 596007.679 ops/s
# Warmup Iteration  12: 619226.691 ops/s
# Warmup Iteration  13: 605853.636 ops/s
# Warmup Iteration  14: 619075.177 ops/s
# Warmup Iteration  15: 639371.739 ops/s
# Warmup Iteration  16: 592906.145 ops/s
# Warmup Iteration  17: 644750.776 ops/s
# Warmup Iteration  18: 646292.653 ops/s
# Warmup Iteration  19: 641066.035 ops/s
# Warmup Iteration  20: 661072.855 ops/s
# Warmup Iteration  21: 629630.884 ops/s
# Warmup Iteration  22: 658371.562 ops/s
# Warmup Iteration  23: 628501.437 ops/s
# Warmup Iteration  24: 639909.986 ops/s
# Warmup Iteration  25: 662614.231 ops/s
# Warmup Iteration  26: 641712.632 ops/s
# Warmup Iteration  27: 650297.893 ops/s
# Warmup Iteration  28: 638735.292 ops/s
# Warmup Iteration  29: 639771.806 ops/s
# Warmup Iteration  30: 651214.042 ops/s
Iteration   1: 628817.322 ops/s
Iteration   2: 670585.135 ops/s
Iteration   3: 630284.827 ops/s
Iteration   4: 637192.539 ops/s
Iteration   5: 519252.051 ops/s
Iteration   6: 614741.579 ops/s
Iteration   7: 668797.258 ops/s
Iteration   8: 615654.454 ops/s
Iteration   9: 647504.717 ops/s
Iteration  10: 625961.370 ops/s
Iteration  11: 632648.152 ops/s
Iteration  12: 679573.534 ops/s
Iteration  13: 659289.674 ops/s
Iteration  14: 621821.475 ops/s
Iteration  15: 643372.695 ops/s
Iteration  16: 651090.782 ops/s
Iteration  17: 632228.330 ops/s
Iteration  18: 659894.369 ops/s
Iteration  19: 641933.675 ops/s
Iteration  20: 623912.023 ops/s
Iteration  21: 651437.583 ops/s
Iteration  22: 640916.302 ops/s
Iteration  23: 653805.849 ops/s
Iteration  24: 641069.623 ops/s
Iteration  25: 636871.690 ops/s
Iteration  26: 651197.137 ops/s
Iteration  27: 629719.059 ops/s
Iteration  28: 651213.705 ops/s
Iteration  29: 649283.235 ops/s
Iteration  30: 630625.138 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableMainError":
  638023.176 ±(99.9%) 18393.032 ops/s [Average]
  (min, avg, max) = (519252.051, 638023.176, 679573.534), stdev = 27529.827
  CI (99.9%): [619630.144, 656416.208] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilCompletableMainError  thrpt   30  638023.176 ± 18393.032  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableOtherOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableOtherOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94628.784 ops/s
# Warmup Iteration   2: 412170.608 ops/s
# Warmup Iteration   3: 572760.628 ops/s
# Warmup Iteration   4: 531435.157 ops/s
# Warmup Iteration   5: 535047.168 ops/s
# Warmup Iteration   6: 552981.448 ops/s
# Warmup Iteration   7: 497297.985 ops/s
# Warmup Iteration   8: 568841.382 ops/s
# Warmup Iteration   9: 591877.955 ops/s
# Warmup Iteration  10: 558340.377 ops/s
# Warmup Iteration  11: 577113.588 ops/s
# Warmup Iteration  12: 557566.823 ops/s
# Warmup Iteration  13: 574681.316 ops/s
# Warmup Iteration  14: 563758.500 ops/s
# Warmup Iteration  15: 580017.585 ops/s
# Warmup Iteration  16: 589599.128 ops/s
# Warmup Iteration  17: 571084.779 ops/s
# Warmup Iteration  18: 594526.577 ops/s
# Warmup Iteration  19: 607253.297 ops/s
# Warmup Iteration  20: 573764.930 ops/s
# Warmup Iteration  21: 598630.079 ops/s
# Warmup Iteration  22: 594639.288 ops/s
# Warmup Iteration  23: 604421.873 ops/s
# Warmup Iteration  24: 602745.284 ops/s
# Warmup Iteration  25: 604655.154 ops/s
# Warmup Iteration  26: 581004.692 ops/s
# Warmup Iteration  27: 606787.991 ops/s
# Warmup Iteration  28: 586911.464 ops/s
# Warmup Iteration  29: 611943.911 ops/s
# Warmup Iteration  30: 583872.154 ops/s
Iteration   1: 605617.550 ops/s
Iteration   2: 589954.646 ops/s
Iteration   3: 598252.691 ops/s
Iteration   4: 602498.079 ops/s
Iteration   5: 602175.279 ops/s
Iteration   6: 567055.448 ops/s
Iteration   7: 610057.555 ops/s
Iteration   8: 591254.118 ops/s
Iteration   9: 586733.787 ops/s
Iteration  10: 604929.848 ops/s
Iteration  11: 586805.309 ops/s
Iteration  12: 594841.603 ops/s
Iteration  13: 583411.429 ops/s
Iteration  14: 597568.337 ops/s
Iteration  15: 592791.062 ops/s
Iteration  16: 622033.104 ops/s
Iteration  17: 586246.624 ops/s
Iteration  18: 610337.544 ops/s
Iteration  19: 583318.595 ops/s
Iteration  20: 600047.760 ops/s
Iteration  21: 610622.391 ops/s
Iteration  22: 586419.648 ops/s
Iteration  23: 612592.341 ops/s
Iteration  24: 582068.618 ops/s
Iteration  25: 591632.494 ops/s
Iteration  26: 598070.952 ops/s
Iteration  27: 613926.525 ops/s
Iteration  28: 604327.353 ops/s
Iteration  29: 591536.332 ops/s
Iteration  30: 567938.114 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableOtherOnComplete":
  595835.505 ±(99.9%) 8636.931 ops/s [Average]
  (min, avg, max) = (567055.448, 595835.505, 622033.104), stdev = 12927.353
  CI (99.9%): [587198.574, 604472.436] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilCompletableOtherOnComplete  thrpt   30  595835.505 ± 8636.931  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_serializedCancelOnNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_serializedCancelOnNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 520496.019 ops/s
# Warmup Iteration   2: 2533936.503 ops/s
# Warmup Iteration   3: 3528233.717 ops/s
# Warmup Iteration   4: 3966649.313 ops/s
# Warmup Iteration   5: 4218237.088 ops/s
# Warmup Iteration   6: 4059370.395 ops/s
# Warmup Iteration   7: 3957458.762 ops/s
# Warmup Iteration   8: 4165521.247 ops/s
# Warmup Iteration   9: 4279491.433 ops/s
# Warmup Iteration  10: 3974346.481 ops/s
# Warmup Iteration  11: 4035343.934 ops/s
# Warmup Iteration  12: 4214580.644 ops/s
# Warmup Iteration  13: 3986721.172 ops/s
# Warmup Iteration  14: 4117034.124 ops/s
# Warmup Iteration  15: 4006374.997 ops/s
# Warmup Iteration  16: 4150129.252 ops/s
# Warmup Iteration  17: 4052731.558 ops/s
# Warmup Iteration  18: 4017397.303 ops/s
# Warmup Iteration  19: 4068915.155 ops/s
# Warmup Iteration  20: 4197361.516 ops/s
# Warmup Iteration  21: 4084539.198 ops/s
# Warmup Iteration  22: 4058313.472 ops/s
# Warmup Iteration  23: 4245419.241 ops/s
# Warmup Iteration  24: 4005391.456 ops/s
# Warmup Iteration  25: 4043751.030 ops/s
# Warmup Iteration  26: 4128458.454 ops/s
# Warmup Iteration  27: 4106336.331 ops/s
# Warmup Iteration  28: 4211852.759 ops/s
# Warmup Iteration  29: 4085368.321 ops/s
# Warmup Iteration  30: 2984376.998 ops/s
Iteration   1: 4201258.089 ops/s
Iteration   2: 3966901.433 ops/s
Iteration   3: 4100618.038 ops/s
Iteration   4: 4012756.106 ops/s
Iteration   5: 4091176.902 ops/s
Iteration   6: 4177761.320 ops/s
Iteration   7: 3964486.155 ops/s
Iteration   8: 4268373.298 ops/s
Iteration   9: 4084769.916 ops/s
Iteration  10: 4011184.541 ops/s
Iteration  11: 3992954.033 ops/s
Iteration  12: 4136816.285 ops/s
Iteration  13: 3976245.337 ops/s
Iteration  14: 4009398.389 ops/s
Iteration  15: 4038076.005 ops/s
Iteration  16: 3998059.853 ops/s
Iteration  17: 4122122.962 ops/s
Iteration  18: 4223970.102 ops/s
Iteration  19: 4152373.898 ops/s
Iteration  20: 3928305.638 ops/s
Iteration  21: 4169551.536 ops/s
Iteration  22: 3951424.562 ops/s
Iteration  23: 4237510.033 ops/s
Iteration  24: 4191382.510 ops/s
Iteration  25: 3997366.767 ops/s
Iteration  26: 4057223.611 ops/s
Iteration  27: 4018364.667 ops/s
Iteration  28: 3975576.453 ops/s
Iteration  29: 4002871.857 ops/s
Iteration  30: 4134125.421 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCreateTest._Benchmark.benchmark_serializedCancelOnNext":
  4073100.191 ±(99.9%) 64794.293 ops/s [Average]
  (min, avg, max) = (3928305.638, 4073100.191, 4268373.298), stdev = 96981.055
  CI (99.9%): [4008305.898, 4137894.483] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableCreateTest._Benchmark.benchmark_serializedCancelOnNext  thrpt   30  4073100.191 ± 64794.293  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 910732.412 ops/s
# Warmup Iteration   2: 3018106.345 ops/s
# Warmup Iteration   3: 3204286.108 ops/s
# Warmup Iteration   4: 3588538.932 ops/s
# Warmup Iteration   5: 3768957.679 ops/s
# Warmup Iteration   6: 3754240.993 ops/s
# Warmup Iteration   7: 3585633.383 ops/s
# Warmup Iteration   8: 3873094.162 ops/s
# Warmup Iteration   9: 3675990.980 ops/s
# Warmup Iteration  10: 3535228.055 ops/s
# Warmup Iteration  11: 3748014.707 ops/s
# Warmup Iteration  12: 3534835.473 ops/s
# Warmup Iteration  13: 3673622.997 ops/s
# Warmup Iteration  14: 3752852.945 ops/s
# Warmup Iteration  15: 3819921.554 ops/s
# Warmup Iteration  16: 3607041.863 ops/s
# Warmup Iteration  17: 3713069.576 ops/s
# Warmup Iteration  18: 3686933.541 ops/s
# Warmup Iteration  19: 3840756.623 ops/s
# Warmup Iteration  20: 3655523.029 ops/s
# Warmup Iteration  21: 3749195.703 ops/s
# Warmup Iteration  22: 3802157.653 ops/s
# Warmup Iteration  23: 3635787.080 ops/s
# Warmup Iteration  24: 3795358.046 ops/s
# Warmup Iteration  25: 3611570.728 ops/s
# Warmup Iteration  26: 3678970.066 ops/s
# Warmup Iteration  27: 3827355.686 ops/s
# Warmup Iteration  28: 3709047.017 ops/s
# Warmup Iteration  29: 3757961.324 ops/s
# Warmup Iteration  30: 3735025.231 ops/s
Iteration   1: 3717874.530 ops/s
Iteration   2: 3722815.514 ops/s
Iteration   3: 3687248.183 ops/s
Iteration   4: 3747793.328 ops/s
Iteration   5: 3609161.573 ops/s
Iteration   6: 3800587.920 ops/s
Iteration   7: 3736183.552 ops/s
Iteration   8: 3637539.628 ops/s
Iteration   9: 3816415.554 ops/s
Iteration  10: 3658332.118 ops/s
Iteration  11: 3813636.841 ops/s
Iteration  12: 3897775.517 ops/s
Iteration  13: 3662479.682 ops/s
Iteration  14: 3774298.856 ops/s
Iteration  15: 3817094.813 ops/s
Iteration  16: 3688575.980 ops/s
Iteration  17: 3759026.973 ops/s
Iteration  18: 3750982.167 ops/s
Iteration  19: 3720119.028 ops/s
Iteration  20: 3844054.063 ops/s
Iteration  21: 3610651.714 ops/s
Iteration  22: 3803456.226 ops/s
Iteration  23: 3505541.639 ops/s
Iteration  24: 3834573.237 ops/s
Iteration  25: 3807517.973 ops/s
Iteration  26: 3647382.983 ops/s
Iteration  27: 3864447.513 ops/s
Iteration  28: 3622982.735 ops/s
Iteration  29: 3752752.209 ops/s
Iteration  30: 3628823.674 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilTest._Benchmark.benchmark_dispose":
  3731337.524 ±(99.9%) 61094.522 ops/s [Average]
  (min, avg, max) = (3505541.639, 3731337.524, 3897775.517), stdev = 91443.411
  CI (99.9%): [3670243.002, 3792432.046] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FlowableTakeUntilTest._Benchmark.benchmark_dispose  thrpt   30  3731337.524 ± 61094.522  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 493812.469 ops/s
# Warmup Iteration   2: 2130900.767 ops/s
# Warmup Iteration   3: 2821441.141 ops/s
# Warmup Iteration   4: 3228195.153 ops/s
# Warmup Iteration   5: 3137970.342 ops/s
# Warmup Iteration   6: 3157213.220 ops/s
# Warmup Iteration   7: 3245256.335 ops/s
# Warmup Iteration   8: 3080643.008 ops/s
# Warmup Iteration   9: 3166034.726 ops/s
# Warmup Iteration  10: 3337858.585 ops/s
# Warmup Iteration  11: 3227845.172 ops/s
# Warmup Iteration  12: 3062330.894 ops/s
# Warmup Iteration  13: 3259713.823 ops/s
# Warmup Iteration  14: 3222934.974 ops/s
# Warmup Iteration  15: 3343461.141 ops/s
# Warmup Iteration  16: 3298918.922 ops/s
# Warmup Iteration  17: 3197622.597 ops/s
# Warmup Iteration  18: 3157760.699 ops/s
# Warmup Iteration  19: 3200741.265 ops/s
# Warmup Iteration  20: 3160074.920 ops/s
# Warmup Iteration  21: 3212487.764 ops/s
# Warmup Iteration  22: 3203328.059 ops/s
# Warmup Iteration  23: 3244535.516 ops/s
# Warmup Iteration  24: 2634345.201 ops/s
# Warmup Iteration  25: 3165856.359 ops/s
# Warmup Iteration  26: 3136862.303 ops/s
# Warmup Iteration  27: 3183595.552 ops/s
# Warmup Iteration  28: 3361329.153 ops/s
# Warmup Iteration  29: 3158932.744 ops/s
# Warmup Iteration  30: 3289428.870 ops/s
Iteration   1: 3191456.409 ops/s
Iteration   2: 3164200.850 ops/s
Iteration   3: 3326589.401 ops/s
Iteration   4: 3149429.420 ops/s
Iteration   5: 3157330.521 ops/s
Iteration   6: 3373550.157 ops/s
Iteration   7: 3174414.129 ops/s
Iteration   8: 3299351.319 ops/s
Iteration   9: 3141722.924 ops/s
Iteration  10: 3337191.777 ops/s
Iteration  11: 3072468.447 ops/s
Iteration  12: 3143771.352 ops/s
Iteration  13: 3283049.939 ops/s
Iteration  14: 3196295.409 ops/s
Iteration  15: 3147312.797 ops/s
Iteration  16: 3332682.933 ops/s
Iteration  17: 3198500.940 ops/s
Iteration  18: 3178490.002 ops/s
Iteration  19: 3219072.719 ops/s
Iteration  20: 3226935.537 ops/s
Iteration  21: 3304760.533 ops/s
Iteration  22: 3105485.701 ops/s
Iteration  23: 3181426.175 ops/s
Iteration  24: 3296074.682 ops/s
Iteration  25: 3160883.246 ops/s
Iteration  26: 3344347.014 ops/s
Iteration  27: 3301674.895 ops/s
Iteration  28: 3169132.917 ops/s
Iteration  29: 3214693.054 ops/s
Iteration  30: 3210838.849 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDispose":
  3220104.468 ±(99.9%) 53252.797 ops/s [Average]
  (min, avg, max) = (3072468.447, 3220104.468, 3373550.157), stdev = 79706.285
  CI (99.9%): [3166851.672, 3273357.265] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableWindowWithFlowableTest._Benchmark.benchmark_boundaryDispose  thrpt   30  3220104.468 ± 53252.797  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerDisposedOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerDisposedOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1937901.656 ops/s
# Warmup Iteration   2: 3797976.878 ops/s
# Warmup Iteration   3: 5374692.911 ops/s
# Warmup Iteration   4: 5685437.767 ops/s
# Warmup Iteration   5: 5457691.788 ops/s
# Warmup Iteration   6: 5619905.974 ops/s
# Warmup Iteration   7: 5579003.639 ops/s
# Warmup Iteration   8: 5497968.985 ops/s
# Warmup Iteration   9: 5445307.657 ops/s
# Warmup Iteration  10: 5614005.744 ops/s
# Warmup Iteration  11: 5316702.537 ops/s
# Warmup Iteration  12: 5649431.626 ops/s
# Warmup Iteration  13: 5708838.506 ops/s
# Warmup Iteration  14: 5405079.790 ops/s
# Warmup Iteration  15: 5712375.400 ops/s
# Warmup Iteration  16: 5394817.597 ops/s
# Warmup Iteration  17: 5392898.871 ops/s
# Warmup Iteration  18: 5570462.733 ops/s
# Warmup Iteration  19: 5561526.555 ops/s
# Warmup Iteration  20: 5598709.401 ops/s
# Warmup Iteration  21: 5448010.028 ops/s
# Warmup Iteration  22: 5482019.363 ops/s
# Warmup Iteration  23: 5625907.881 ops/s
# Warmup Iteration  24: 5428265.579 ops/s
# Warmup Iteration  25: 5532862.466 ops/s
# Warmup Iteration  26: 5371903.258 ops/s
# Warmup Iteration  27: 5573316.890 ops/s
# Warmup Iteration  28: 5505518.230 ops/s
# Warmup Iteration  29: 5742300.259 ops/s
# Warmup Iteration  30: 5337332.243 ops/s
Iteration   1: 5762640.904 ops/s
Iteration   2: 5633879.914 ops/s
Iteration   3: 5484155.752 ops/s
Iteration   4: 5649943.616 ops/s
Iteration   5: 5326200.378 ops/s
Iteration   6: 5364387.886 ops/s
Iteration   7: 5781428.653 ops/s
Iteration   8: 5352201.970 ops/s
Iteration   9: 5580919.970 ops/s
Iteration  10: 5501587.415 ops/s
Iteration  11: 5533101.346 ops/s
Iteration  12: 5704154.480 ops/s
Iteration  13: 5382079.806 ops/s
Iteration  14: 5483841.108 ops/s
Iteration  15: 5767255.800 ops/s
Iteration  16: 5414097.898 ops/s
Iteration  17: 5597214.627 ops/s
Iteration  18: 5550409.635 ops/s
Iteration  19: 5468115.659 ops/s
Iteration  20: 5795167.305 ops/s
Iteration  21: 5427077.416 ops/s
Iteration  22: 5730193.502 ops/s
Iteration  23: 5480629.856 ops/s
Iteration  24: 5573282.724 ops/s
Iteration  25: 5456723.878 ops/s
Iteration  26: 5569994.402 ops/s
Iteration  27: 5642184.460 ops/s
Iteration  28: 5267930.644 ops/s
Iteration  29: 5639775.487 ops/s
Iteration  30: 5485516.030 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerDisposedOnComplete":
  5546869.751 ±(99.9%) 96136.780 ops/s [Average]
  (min, avg, max) = (5267930.644, 5546869.751, 5795167.305), stdev = 143893.018
  CI (99.9%): [5450732.970, 5643006.531] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableUsingTest._Benchmark.benchmark_eagerDisposedOnComplete  thrpt   30  5546869.751 ± 96136.780  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126758.021 ops/s
# Warmup Iteration   2: 462372.823 ops/s
# Warmup Iteration   3: 475016.754 ops/s
# Warmup Iteration   4: 487599.515 ops/s
# Warmup Iteration   5: 510145.061 ops/s
# Warmup Iteration   6: 542409.221 ops/s
# Warmup Iteration   7: 508597.170 ops/s
# Warmup Iteration   8: 535926.556 ops/s
# Warmup Iteration   9: 516770.983 ops/s
# Warmup Iteration  10: 537240.672 ops/s
# Warmup Iteration  11: 515957.933 ops/s
# Warmup Iteration  12: 510929.211 ops/s
# Warmup Iteration  13: 537452.356 ops/s
# Warmup Iteration  14: 523677.242 ops/s
# Warmup Iteration  15: 536880.324 ops/s
# Warmup Iteration  16: 515482.527 ops/s
# Warmup Iteration  17: 552352.735 ops/s
# Warmup Iteration  18: 555505.556 ops/s
# Warmup Iteration  19: 447616.913 ops/s
# Warmup Iteration  20: 555305.410 ops/s
# Warmup Iteration  21: 535787.454 ops/s
# Warmup Iteration  22: 549807.330 ops/s
# Warmup Iteration  23: 559142.029 ops/s
# Warmup Iteration  24: 536351.881 ops/s
# Warmup Iteration  25: 560742.591 ops/s
# Warmup Iteration  26: 534587.388 ops/s
# Warmup Iteration  27: 559813.181 ops/s
# Warmup Iteration  28: 528833.980 ops/s
# Warmup Iteration  29: 555770.511 ops/s
# Warmup Iteration  30: 581359.885 ops/s
Iteration   1: 530920.269 ops/s
Iteration   2: 545053.910 ops/s
Iteration   3: 565667.833 ops/s
Iteration   4: 536293.297 ops/s
Iteration   5: 541131.406 ops/s
Iteration   6: 544896.451 ops/s
Iteration   7: 544217.770 ops/s
Iteration   8: 563713.401 ops/s
Iteration   9: 537999.177 ops/s
Iteration  10: 556133.137 ops/s
Iteration  11: 539156.287 ops/s
Iteration  12: 560352.740 ops/s
Iteration  13: 555694.009 ops/s
Iteration  14: 534537.622 ops/s
Iteration  15: 535256.107 ops/s
Iteration  16: 574488.946 ops/s
Iteration  17: 523082.849 ops/s
Iteration  18: 563044.693 ops/s
Iteration  19: 562163.350 ops/s
Iteration  20: 535142.825 ops/s
Iteration  21: 567599.615 ops/s
Iteration  22: 538873.774 ops/s
Iteration  23: 559602.373 ops/s
Iteration  24: 537929.948 ops/s
Iteration  25: 541398.141 ops/s
Iteration  26: 569472.231 ops/s
Iteration  27: 561422.613 ops/s
Iteration  28: 530894.128 ops/s
Iteration  29: 569496.166 ops/s
Iteration  30: 533078.521 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableFromPublisherTest._Benchmark.benchmark_doubleOnSubscribe":
  548623.786 ±(99.9%) 9718.484 ops/s [Average]
  (min, avg, max) = (523082.849, 548623.786, 574488.946), stdev = 14546.171
  CI (99.9%): [538905.302, 558342.271] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
CompletableFromPublisherTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  548623.786 ± 9718.484  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118149.075 ops/s
# Warmup Iteration   2: 483147.836 ops/s
# Warmup Iteration   3: 626846.328 ops/s
# Warmup Iteration   4: 613083.522 ops/s
# Warmup Iteration   5: 589563.941 ops/s
# Warmup Iteration   6: 519431.825 ops/s
# Warmup Iteration   7: 619631.217 ops/s
# Warmup Iteration   8: 657217.563 ops/s
# Warmup Iteration   9: 625547.661 ops/s
# Warmup Iteration  10: 613544.602 ops/s
# Warmup Iteration  11: 645544.676 ops/s
# Warmup Iteration  12: 612636.289 ops/s
# Warmup Iteration  13: 643684.599 ops/s
# Warmup Iteration  14: 614387.517 ops/s
# Warmup Iteration  15: 634196.959 ops/s
# Warmup Iteration  16: 628083.033 ops/s
# Warmup Iteration  17: 648022.995 ops/s
# Warmup Iteration  18: 681368.636 ops/s
# Warmup Iteration  19: 650844.320 ops/s
# Warmup Iteration  20: 667226.776 ops/s
# Warmup Iteration  21: 654755.567 ops/s
# Warmup Iteration  22: 661805.883 ops/s
# Warmup Iteration  23: 658930.148 ops/s
# Warmup Iteration  24: 638057.206 ops/s
# Warmup Iteration  25: 675348.497 ops/s
# Warmup Iteration  26: 647889.045 ops/s
# Warmup Iteration  27: 669188.585 ops/s
# Warmup Iteration  28: 654752.949 ops/s
# Warmup Iteration  29: 654672.058 ops/s
# Warmup Iteration  30: 673569.772 ops/s
Iteration   1: 656152.584 ops/s
Iteration   2: 652028.596 ops/s
Iteration   3: 678127.606 ops/s
Iteration   4: 660651.980 ops/s
Iteration   5: 637370.608 ops/s
Iteration   6: 690836.099 ops/s
Iteration   7: 635404.548 ops/s
Iteration   8: 659208.526 ops/s
Iteration   9: 645579.613 ops/s
Iteration  10: 672020.593 ops/s
Iteration  11: 654195.529 ops/s
Iteration  12: 657380.353 ops/s
Iteration  13: 657974.115 ops/s
Iteration  14: 654533.999 ops/s
Iteration  15: 668338.884 ops/s
Iteration  16: 647769.074 ops/s
Iteration  17: 654090.110 ops/s
Iteration  18: 668561.875 ops/s
Iteration  19: 641583.636 ops/s
Iteration  20: 684714.729 ops/s
Iteration  21: 644492.694 ops/s
Iteration  22: 681588.055 ops/s
Iteration  23: 668500.053 ops/s
Iteration  24: 630929.082 ops/s
Iteration  25: 699148.583 ops/s
Iteration  26: 644832.032 ops/s
Iteration  27: 656397.070 ops/s
Iteration  28: 677228.130 ops/s
Iteration  29: 645709.943 ops/s
Iteration  30: 681072.805 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilCompletableOtherError":
  660214.050 ±(99.9%) 11454.053 ops/s [Average]
  (min, avg, max) = (630929.082, 660214.050, 699148.583), stdev = 17143.888
  CI (99.9%): [648759.997, 671668.103] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilCompletableOtherError  thrpt   30  660214.050 ± 11454.053  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 577008.604 ops/s
# Warmup Iteration   2: 2615755.441 ops/s
# Warmup Iteration   3: 2770758.793 ops/s
# Warmup Iteration   4: 3318116.706 ops/s
# Warmup Iteration   5: 3514141.758 ops/s
# Warmup Iteration   6: 3325224.462 ops/s
# Warmup Iteration   7: 3495662.831 ops/s
# Warmup Iteration   8: 3286654.340 ops/s
# Warmup Iteration   9: 3396524.657 ops/s
# Warmup Iteration  10: 3492574.592 ops/s
# Warmup Iteration  11: 3288217.964 ops/s
# Warmup Iteration  12: 3372304.439 ops/s
# Warmup Iteration  13: 2815837.561 ops/s
# Warmup Iteration  14: 3306868.672 ops/s
# Warmup Iteration  15: 3505538.332 ops/s
# Warmup Iteration  16: 3339427.457 ops/s
# Warmup Iteration  17: 3479197.756 ops/s
# Warmup Iteration  18: 3369838.144 ops/s
# Warmup Iteration  19: 3440530.890 ops/s
# Warmup Iteration  20: 3479742.149 ops/s
# Warmup Iteration  21: 3336928.675 ops/s
# Warmup Iteration  22: 3442584.726 ops/s
# Warmup Iteration  23: 3387575.708 ops/s
# Warmup Iteration  24: 3427261.189 ops/s
# Warmup Iteration  25: 3477699.578 ops/s
# Warmup Iteration  26: 3384966.692 ops/s
# Warmup Iteration  27: 3374920.136 ops/s
# Warmup Iteration  28: 3399870.675 ops/s
# Warmup Iteration  29: 3328371.393 ops/s
# Warmup Iteration  30: 3428375.933 ops/s
Iteration   1: 3410267.800 ops/s
Iteration   2: 3495020.569 ops/s
Iteration   3: 3332301.459 ops/s
Iteration   4: 3369836.930 ops/s
Iteration   5: 3505953.175 ops/s
Iteration   6: 3334907.178 ops/s
Iteration   7: 3344040.023 ops/s
Iteration   8: 3394745.587 ops/s
Iteration   9: 3354451.179 ops/s
Iteration  10: 3373575.382 ops/s
Iteration  11: 3324825.294 ops/s
Iteration  12: 3569389.789 ops/s
Iteration  13: 3390452.075 ops/s
Iteration  14: 3468313.531 ops/s
Iteration  15: 3349520.642 ops/s
Iteration  16: 3483474.965 ops/s
Iteration  17: 3430963.230 ops/s
Iteration  18: 3385080.478 ops/s
Iteration  19: 3382309.351 ops/s
Iteration  20: 3539119.836 ops/s
Iteration  21: 3329463.522 ops/s
Iteration  22: 3438091.850 ops/s
Iteration  23: 3456869.396 ops/s
Iteration  24: 3361651.079 ops/s
Iteration  25: 3500958.256 ops/s
Iteration  26: 3520998.740 ops/s
Iteration  27: 3441948.228 ops/s
Iteration  28: 3278534.377 ops/s
Iteration  29: 3317249.633 ops/s
Iteration  30: 3416468.367 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancel":
  3410026.064 ±(99.9%) 49946.243 ops/s [Average]
  (min, avg, max) = (3278534.377, 3410026.064, 3569389.789), stdev = 74757.191
  CI (99.9%): [3360079.821, 3459972.307] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableRangeLongTest._Benchmark.benchmark_conditionalFastPathCancel  thrpt   30  3410026.064 ± 49946.243  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_cancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_cancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7229867.263 ops/s
# Warmup Iteration   2: 12181650.377 ops/s
# Warmup Iteration   3: 14829203.092 ops/s
# Warmup Iteration   4: 14783273.428 ops/s
# Warmup Iteration   5: 14379052.399 ops/s
# Warmup Iteration   6: 15608613.355 ops/s
# Warmup Iteration   7: 14615750.797 ops/s
# Warmup Iteration   8: 14972919.752 ops/s
# Warmup Iteration   9: 14876625.236 ops/s
# Warmup Iteration  10: 14884439.511 ops/s
# Warmup Iteration  11: 14415292.156 ops/s
# Warmup Iteration  12: 15216864.216 ops/s
# Warmup Iteration  13: 14779072.128 ops/s
# Warmup Iteration  14: 14646677.031 ops/s
# Warmup Iteration  15: 15195727.174 ops/s
# Warmup Iteration  16: 14192846.202 ops/s
# Warmup Iteration  17: 14639853.378 ops/s
# Warmup Iteration  18: 14933099.815 ops/s
# Warmup Iteration  19: 14816156.656 ops/s
# Warmup Iteration  20: 14635037.396 ops/s
# Warmup Iteration  21: 14444918.369 ops/s
# Warmup Iteration  22: 15150744.365 ops/s
# Warmup Iteration  23: 14678610.273 ops/s
# Warmup Iteration  24: 15071228.337 ops/s
# Warmup Iteration  25: 13836484.734 ops/s
# Warmup Iteration  26: 14644038.612 ops/s
# Warmup Iteration  27: 15127661.052 ops/s
# Warmup Iteration  28: 14536759.669 ops/s
# Warmup Iteration  29: 14567499.771 ops/s
# Warmup Iteration  30: 15154686.629 ops/s
Iteration   1: 13866183.980 ops/s
Iteration   2: 14696215.585 ops/s
Iteration   3: 14475928.828 ops/s
Iteration   4: 15329503.280 ops/s
Iteration   5: 14629818.433 ops/s
Iteration   6: 14641491.209 ops/s
Iteration   7: 15566199.123 ops/s
Iteration   8: 13985655.681 ops/s
Iteration   9: 14962127.271 ops/s
Iteration  10: 14715046.995 ops/s
Iteration  11: 14815756.258 ops/s
Iteration  12: 15531752.272 ops/s
Iteration  13: 15054977.524 ops/s
Iteration  14: 14298743.671 ops/s
Iteration  15: 14171809.087 ops/s
Iteration  16: 14427990.977 ops/s
Iteration  17: 15110699.806 ops/s
Iteration  18: 15174054.336 ops/s
Iteration  19: 14433380.947 ops/s
Iteration  20: 15300015.567 ops/s
Iteration  21: 14414406.171 ops/s
Iteration  22: 14738840.672 ops/s
Iteration  23: 14739008.467 ops/s
Iteration  24: 14616075.444 ops/s
Iteration  25: 14868443.630 ops/s
Iteration  26: 14630847.066 ops/s
Iteration  27: 14992027.254 ops/s
Iteration  28: 14620199.956 ops/s
Iteration  29: 14474687.189 ops/s
Iteration  30: 15176524.941 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BlockingSubscriberTest._Benchmark.benchmark_cancel":
  14748613.721 ±(99.9%) 279428.665 ops/s [Average]
  (min, avg, max) = (13866183.980, 14748613.721, 15566199.123), stdev = 418235.703
  CI (99.9%): [14469185.056, 15028042.386] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt         Score        Error  Units
BlockingSubscriberTest._Benchmark.benchmark_cancel  thrpt   30  14748613.721 ± 279428.665  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 173569.392 ops/s
# Warmup Iteration   2: 437147.492 ops/s
# Warmup Iteration   3: 445495.851 ops/s
# Warmup Iteration   4: 492566.007 ops/s
# Warmup Iteration   5: 457321.919 ops/s
# Warmup Iteration   6: 499319.411 ops/s
# Warmup Iteration   7: 450102.405 ops/s
# Warmup Iteration   8: 390165.294 ops/s
# Warmup Iteration   9: 500177.179 ops/s
# Warmup Iteration  10: 525898.522 ops/s
# Warmup Iteration  11: 489544.498 ops/s
# Warmup Iteration  12: 507825.670 ops/s
# Warmup Iteration  13: 498497.622 ops/s
# Warmup Iteration  14: 528138.583 ops/s
# Warmup Iteration  15: 523852.171 ops/s
# Warmup Iteration  16: 522950.743 ops/s
# Warmup Iteration  17: 522893.352 ops/s
# Warmup Iteration  18: 527515.673 ops/s
# Warmup Iteration  19: 552984.543 ops/s
# Warmup Iteration  20: 514678.937 ops/s
# Warmup Iteration  21: 518635.180 ops/s
# Warmup Iteration  22: 543587.503 ops/s
# Warmup Iteration  23: 524097.579 ops/s
# Warmup Iteration  24: 529398.539 ops/s
# Warmup Iteration  25: 513178.105 ops/s
# Warmup Iteration  26: 547622.233 ops/s
# Warmup Iteration  27: 543019.762 ops/s
# Warmup Iteration  28: 506919.157 ops/s
# Warmup Iteration  29: 549819.937 ops/s
# Warmup Iteration  30: 534718.566 ops/s
Iteration   1: 531893.290 ops/s
Iteration   2: 540249.338 ops/s
Iteration   3: 541609.074 ops/s
Iteration   4: 533004.250 ops/s
Iteration   5: 509013.373 ops/s
Iteration   6: 529657.491 ops/s
Iteration   7: 544518.595 ops/s
Iteration   8: 520986.605 ops/s
Iteration   9: 540375.976 ops/s
Iteration  10: 517481.470 ops/s
Iteration  11: 535933.342 ops/s
Iteration  12: 514411.595 ops/s
Iteration  13: 533195.410 ops/s
Iteration  14: 526166.391 ops/s
Iteration  15: 513849.558 ops/s
Iteration  16: 539272.626 ops/s
Iteration  17: 521570.854 ops/s
Iteration  18: 511749.210 ops/s
Iteration  19: 538866.121 ops/s
Iteration  20: 529263.510 ops/s
Iteration  21: 528571.039 ops/s
Iteration  22: 550556.302 ops/s
Iteration  23: 513066.236 ops/s
Iteration  24: 526240.057 ops/s
Iteration  25: 523466.094 ops/s
Iteration  26: 538456.924 ops/s
Iteration  27: 552748.851 ops/s
Iteration  28: 526683.573 ops/s
Iteration  29: 534076.315 ops/s
Iteration  30: 526299.991 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstDoubleOnSubscribe":
  529774.449 ±(99.9%) 7627.357 ops/s [Average]
  (min, avg, max) = (509013.373, 529774.449, 552748.851), stdev = 11416.270
  CI (99.9%): [522147.092, 537401.806] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_firstDoubleOnSubscribe  thrpt   30  529774.449 ± 7627.357  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstDoubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstDoubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 196732.929 ops/s
# Warmup Iteration   2: 445300.396 ops/s
# Warmup Iteration   3: 473728.378 ops/s
# Warmup Iteration   4: 473834.113 ops/s
# Warmup Iteration   5: 515186.338 ops/s
# Warmup Iteration   6: 497266.390 ops/s
# Warmup Iteration   7: 492321.837 ops/s
# Warmup Iteration   8: 514985.087 ops/s
# Warmup Iteration   9: 483457.221 ops/s
# Warmup Iteration  10: 473738.680 ops/s
# Warmup Iteration  11: 484668.764 ops/s
# Warmup Iteration  12: 506885.911 ops/s
# Warmup Iteration  13: 486030.995 ops/s
# Warmup Iteration  14: 507211.870 ops/s
# Warmup Iteration  15: 484747.022 ops/s
# Warmup Iteration  16: 507261.530 ops/s
# Warmup Iteration  17: 504005.354 ops/s
# Warmup Iteration  18: 502722.645 ops/s
# Warmup Iteration  19: 521414.778 ops/s
# Warmup Iteration  20: 527926.363 ops/s
# Warmup Iteration  21: 496463.714 ops/s
# Warmup Iteration  22: 527690.100 ops/s
# Warmup Iteration  23: 502728.387 ops/s
# Warmup Iteration  24: 507674.670 ops/s
# Warmup Iteration  25: 503119.488 ops/s
# Warmup Iteration  26: 511452.599 ops/s
# Warmup Iteration  27: 523831.782 ops/s
# Warmup Iteration  28: 494481.815 ops/s
# Warmup Iteration  29: 518913.953 ops/s
# Warmup Iteration  30: 503508.184 ops/s
Iteration   1: 524637.396 ops/s
Iteration   2: 487359.268 ops/s
Iteration   3: 508270.500 ops/s
Iteration   4: 532119.665 ops/s
Iteration   5: 524558.476 ops/s
Iteration   6: 499909.382 ops/s
Iteration   7: 526397.482 ops/s
Iteration   8: 521894.449 ops/s
Iteration   9: 505354.407 ops/s
Iteration  10: 522119.921 ops/s
Iteration  11: 494673.818 ops/s
Iteration  12: 496893.120 ops/s
Iteration  13: 523492.187 ops/s
Iteration  14: 502044.651 ops/s
Iteration  15: 513639.385 ops/s
Iteration  16: 520750.592 ops/s
Iteration  17: 498217.689 ops/s
Iteration  18: 533969.960 ops/s
Iteration  19: 552107.602 ops/s
Iteration  20: 498354.281 ops/s
Iteration  21: 526307.666 ops/s
Iteration  22: 526818.484 ops/s
Iteration  23: 516954.795 ops/s
Iteration  24: 503993.520 ops/s
Iteration  25: 515382.492 ops/s
Iteration  26: 510948.422 ops/s
Iteration  27: 514703.111 ops/s
Iteration  28: 524613.616 ops/s
Iteration  29: 491640.979 ops/s
Iteration  30: 523262.309 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstDoubleOnSubscribe":
  514712.988 ±(99.9%) 9816.064 ops/s [Average]
  (min, avg, max) = (487359.268, 514712.988, 552107.602), stdev = 14692.223
  CI (99.9%): [504896.924, 524529.051] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstDoubleOnSubscribe  thrpt   30  514712.988 ± 9816.064  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_bounderyFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_bounderyFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 645969.589 ops/s
# Warmup Iteration   2: 1216515.897 ops/s
# Warmup Iteration   3: 2354162.960 ops/s
# Warmup Iteration   4: 2183745.715 ops/s
# Warmup Iteration   5: 2408166.245 ops/s
# Warmup Iteration   6: 2211816.503 ops/s
# Warmup Iteration   7: 2118445.334 ops/s
# Warmup Iteration   8: 2190417.707 ops/s
# Warmup Iteration   9: 2234970.527 ops/s
# Warmup Iteration  10: 2238607.839 ops/s
# Warmup Iteration  11: 2237444.663 ops/s
# Warmup Iteration  12: 2278640.983 ops/s
# Warmup Iteration  13: 2289866.834 ops/s
# Warmup Iteration  14: 2432212.908 ops/s
# Warmup Iteration  15: 2272968.010 ops/s
# Warmup Iteration  16: 2261413.033 ops/s
# Warmup Iteration  17: 2488630.934 ops/s
# Warmup Iteration  18: 2353385.095 ops/s
# Warmup Iteration  19: 2340737.767 ops/s
# Warmup Iteration  20: 2414779.068 ops/s
# Warmup Iteration  21: 2198137.071 ops/s
# Warmup Iteration  22: 2333745.011 ops/s
# Warmup Iteration  23: 2225055.179 ops/s
# Warmup Iteration  24: 2185900.067 ops/s
# Warmup Iteration  25: 2743164.459 ops/s
# Warmup Iteration  26: 2280341.222 ops/s
# Warmup Iteration  27: 2391531.150 ops/s
# Warmup Iteration  28: 2469951.512 ops/s
# Warmup Iteration  29: 2435674.671 ops/s
# Warmup Iteration  30: 2470797.975 ops/s
Iteration   1: 2495013.393 ops/s
Iteration   2: 2475586.910 ops/s
Iteration   3: 2485692.374 ops/s
Iteration   4: 2628274.215 ops/s
Iteration   5: 2503782.039 ops/s
Iteration   6: 2552776.538 ops/s
Iteration   7: 2497453.445 ops/s
Iteration   8: 2561233.803 ops/s
Iteration   9: 2265380.429 ops/s
Iteration  10: 2593855.759 ops/s
Iteration  11: 2597176.144 ops/s
Iteration  12: 2448593.082 ops/s
Iteration  13: 2504420.059 ops/s
Iteration  14: 2659960.066 ops/s
Iteration  15: 2203269.744 ops/s
Iteration  16: 2162814.038 ops/s
Iteration  17: 2254399.447 ops/s
Iteration  18: 2107392.987 ops/s
Iteration  19: 2257610.067 ops/s
Iteration  20: 2174404.756 ops/s
Iteration  21: 2260113.526 ops/s
Iteration  22: 2185103.445 ops/s
Iteration  23: 2290980.761 ops/s
Iteration  24: 2240170.286 ops/s
Iteration  25: 2122539.549 ops/s
Iteration  26: 2270830.021 ops/s
Iteration  27: 2194932.022 ops/s
Iteration  28: 2210225.428 ops/s
Iteration  29: 2230984.593 ops/s
Iteration  30: 2267945.931 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_bounderyFusionRejected":
  2356763.829 ±(99.9%) 114853.318 ops/s [Average]
  (min, avg, max) = (2107392.987, 2356763.829, 2659960.066), stdev = 171907.052
  CI (99.9%): [2241910.511, 2471617.146] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score        Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_bounderyFusionRejected  thrpt   30  2356763.829 ± 114853.318  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_syncFusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_syncFusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 415007.684 ops/s
# Warmup Iteration   2: 1508688.861 ops/s
# Warmup Iteration   3: 2197069.454 ops/s
# Warmup Iteration   4: 2291456.384 ops/s
# Warmup Iteration   5: 2184808.058 ops/s
# Warmup Iteration   6: 2263176.788 ops/s
# Warmup Iteration   7: 2191282.632 ops/s
# Warmup Iteration   8: 2223253.332 ops/s
# Warmup Iteration   9: 2237676.140 ops/s
# Warmup Iteration  10: 2283886.457 ops/s
# Warmup Iteration  11: 2266115.817 ops/s
# Warmup Iteration  12: 2181926.539 ops/s
# Warmup Iteration  13: 2312283.334 ops/s
# Warmup Iteration  14: 2206087.568 ops/s
# Warmup Iteration  15: 2287646.989 ops/s
# Warmup Iteration  16: 2268430.960 ops/s
# Warmup Iteration  17: 2216513.819 ops/s
# Warmup Iteration  18: 2163232.288 ops/s
# Warmup Iteration  19: 2354290.219 ops/s
# Warmup Iteration  20: 2193787.010 ops/s
# Warmup Iteration  21: 2316922.652 ops/s
# Warmup Iteration  22: 2245726.040 ops/s
# Warmup Iteration  23: 2303274.175 ops/s
# Warmup Iteration  24: 2262358.026 ops/s
# Warmup Iteration  25: 2170256.058 ops/s
# Warmup Iteration  26: 2280322.381 ops/s
# Warmup Iteration  27: 2220468.089 ops/s
# Warmup Iteration  28: 2231587.514 ops/s
# Warmup Iteration  29: 2283266.830 ops/s
# Warmup Iteration  30: 2256775.620 ops/s
Iteration   1: 2313382.954 ops/s
Iteration   2: 2208606.712 ops/s
Iteration   3: 2238934.475 ops/s
Iteration   4: 2348987.826 ops/s
Iteration   5: 2203895.888 ops/s
Iteration   6: 2279405.935 ops/s
Iteration   7: 2198136.923 ops/s
Iteration   8: 2293859.080 ops/s
Iteration   9: 2270791.407 ops/s
Iteration  10: 2205579.018 ops/s
Iteration  11: 2334385.720 ops/s
Iteration  12: 2179770.121 ops/s
Iteration  13: 2312357.513 ops/s
Iteration  14: 2285159.049 ops/s
Iteration  15: 2195584.499 ops/s
Iteration  16: 2248857.183 ops/s
Iteration  17: 2333305.352 ops/s
Iteration  18: 2206040.718 ops/s
Iteration  19: 2240103.153 ops/s
Iteration  20: 2280506.949 ops/s
Iteration  21: 2227238.505 ops/s
Iteration  22: 2322333.113 ops/s
Iteration  23: 2200092.795 ops/s
Iteration  24: 2346570.303 ops/s
Iteration  25: 2209238.621 ops/s
Iteration  26: 2239225.572 ops/s
Iteration  27: 2304890.062 ops/s
Iteration  28: 2286248.753 ops/s
Iteration  29: 1752177.186 ops/s
Iteration  30: 2346518.702 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_syncFusionRejected":
  2247072.803 ±(99.9%) 71942.939 ops/s [Average]
  (min, avg, max) = (1752177.186, 2247072.803, 2348987.826), stdev = 107680.813
  CI (99.9%): [2175129.864, 2319015.742] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_syncFusionRejected  thrpt   30  2247072.803 ± 71942.939  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87323.504 ops/s
# Warmup Iteration   2: 411227.205 ops/s
# Warmup Iteration   3: 458947.407 ops/s
# Warmup Iteration   4: 519306.016 ops/s
# Warmup Iteration   5: 526399.420 ops/s
# Warmup Iteration   6: 515611.935 ops/s
# Warmup Iteration   7: 503634.038 ops/s
# Warmup Iteration   8: 508385.065 ops/s
# Warmup Iteration   9: 537337.452 ops/s
# Warmup Iteration  10: 500466.020 ops/s
# Warmup Iteration  11: 502480.968 ops/s
# Warmup Iteration  12: 527102.403 ops/s
# Warmup Iteration  13: 507100.433 ops/s
# Warmup Iteration  14: 528304.674 ops/s
# Warmup Iteration  15: 501527.548 ops/s
# Warmup Iteration  16: 527908.566 ops/s
# Warmup Iteration  17: 534399.321 ops/s
# Warmup Iteration  18: 533642.769 ops/s
# Warmup Iteration  19: 562293.585 ops/s
# Warmup Iteration  20: 519249.831 ops/s
# Warmup Iteration  21: 556015.085 ops/s
# Warmup Iteration  22: 537269.443 ops/s
# Warmup Iteration  23: 522295.223 ops/s
# Warmup Iteration  24: 543396.985 ops/s
# Warmup Iteration  25: 508947.897 ops/s
# Warmup Iteration  26: 541114.472 ops/s
# Warmup Iteration  27: 551711.869 ops/s
# Warmup Iteration  28: 531055.784 ops/s
# Warmup Iteration  29: 545524.891 ops/s
# Warmup Iteration  30: 524818.164 ops/s
Iteration   1: 543612.892 ops/s
Iteration   2: 539865.312 ops/s
Iteration   3: 532741.640 ops/s
Iteration   4: 553907.006 ops/s
Iteration   5: 540465.228 ops/s
Iteration   6: 529090.793 ops/s
Iteration   7: 568971.973 ops/s
Iteration   8: 542927.280 ops/s
Iteration   9: 526759.564 ops/s
Iteration  10: 557263.478 ops/s
Iteration  11: 530625.394 ops/s
Iteration  12: 545161.316 ops/s
Iteration  13: 547363.199 ops/s
Iteration  14: 516620.295 ops/s
Iteration  15: 546678.159 ops/s
Iteration  16: 566205.527 ops/s
Iteration  17: 522839.383 ops/s
Iteration  18: 533150.988 ops/s
Iteration  19: 531327.640 ops/s
Iteration  20: 540940.555 ops/s
Iteration  21: 565121.204 ops/s
Iteration  22: 531247.160 ops/s
Iteration  23: 519735.272 ops/s
Iteration  24: 543063.296 ops/s
Iteration  25: 553052.355 ops/s
Iteration  26: 535373.543 ops/s
Iteration  27: 563084.483 ops/s
Iteration  28: 533597.904 ops/s
Iteration  29: 528796.992 ops/s
Iteration  30: 558310.122 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureLatestTest._Benchmark.benchmark_doubleOnSubscribe":
  541596.665 ±(99.9%) 9482.287 ops/s [Average]
  (min, avg, max) = (516620.295, 541596.665, 568971.973), stdev = 14192.642
  CI (99.9%): [532114.378, 551078.952] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableOnBackpressureLatestTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  541596.665 ± 9482.287  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_removeNotPresent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_removeNotPresent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 369938.465 ops/s
# Warmup Iteration   2: 1506405.951 ops/s
# Warmup Iteration   3: 1920853.747 ops/s
# Warmup Iteration   4: 2074117.360 ops/s
# Warmup Iteration   5: 2088099.694 ops/s
# Warmup Iteration   6: 2078626.903 ops/s
# Warmup Iteration   7: 2065422.421 ops/s
# Warmup Iteration   8: 2124790.018 ops/s
# Warmup Iteration   9: 2029980.023 ops/s
# Warmup Iteration  10: 2203478.814 ops/s
# Warmup Iteration  11: 2135225.447 ops/s
# Warmup Iteration  12: 1992190.262 ops/s
# Warmup Iteration  13: 2149802.602 ops/s
# Warmup Iteration  14: 2055549.129 ops/s
# Warmup Iteration  15: 2214266.584 ops/s
# Warmup Iteration  16: 2035690.603 ops/s
# Warmup Iteration  17: 2195837.994 ops/s
# Warmup Iteration  18: 2176793.956 ops/s
# Warmup Iteration  19: 1988396.600 ops/s
# Warmup Iteration  20: 2193802.991 ops/s
# Warmup Iteration  21: 2070791.897 ops/s
# Warmup Iteration  22: 2081712.639 ops/s
# Warmup Iteration  23: 2109550.114 ops/s
# Warmup Iteration  24: 2077863.231 ops/s
# Warmup Iteration  25: 2149421.818 ops/s
# Warmup Iteration  26: 2071734.457 ops/s
# Warmup Iteration  27: 2147174.816 ops/s
# Warmup Iteration  28: 2086062.411 ops/s
# Warmup Iteration  29: 2130940.271 ops/s
# Warmup Iteration  30: 2136424.979 ops/s
Iteration   1: 2102823.479 ops/s
Iteration   2: 2072536.551 ops/s
Iteration   3: 2136843.436 ops/s
Iteration   4: 2090273.872 ops/s
Iteration   5: 2142449.018 ops/s
Iteration   6: 2085366.848 ops/s
Iteration   7: 2029585.439 ops/s
Iteration   8: 2114322.309 ops/s
Iteration   9: 2134144.727 ops/s
Iteration  10: 2097244.995 ops/s
Iteration  11: 2055850.611 ops/s
Iteration  12: 2107911.780 ops/s
Iteration  13: 2093869.991 ops/s
Iteration  14: 2045879.814 ops/s
Iteration  15: 2103763.732 ops/s
Iteration  16: 2238489.302 ops/s
Iteration  17: 2184129.076 ops/s
Iteration  18: 2040004.267 ops/s
Iteration  19: 2153238.330 ops/s
Iteration  20: 2146330.005 ops/s
Iteration  21: 2099081.363 ops/s
Iteration  22: 2103663.357 ops/s
Iteration  23: 1853344.095 ops/s
Iteration  24: 1881502.554 ops/s
Iteration  25: 2104181.474 ops/s
Iteration  26: 2090702.796 ops/s
Iteration  27: 2188178.700 ops/s
Iteration  28: 1993606.406 ops/s
Iteration  29: 2095527.549 ops/s
Iteration  30: 2097630.448 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_removeNotPresent":
  2089415.877 ±(99.9%) 51878.840 ops/s [Average]
  (min, avg, max) = (1853344.095, 2089415.877, 2238489.302), stdev = 77649.811
  CI (99.9%): [2037537.038, 2141294.717] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_removeNotPresent  thrpt   30  2089415.877 ± 51878.840  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 175131.767 ops/s
# Warmup Iteration   2: 458512.405 ops/s
# Warmup Iteration   3: 469769.131 ops/s
# Warmup Iteration   4: 504399.213 ops/s
# Warmup Iteration   5: 529347.066 ops/s
# Warmup Iteration   6: 495285.277 ops/s
# Warmup Iteration   7: 507600.115 ops/s
# Warmup Iteration   8: 525818.208 ops/s
# Warmup Iteration   9: 468056.120 ops/s
# Warmup Iteration  10: 526266.292 ops/s
# Warmup Iteration  11: 480792.628 ops/s
# Warmup Iteration  12: 496822.314 ops/s
# Warmup Iteration  13: 472243.765 ops/s
# Warmup Iteration  14: 505535.901 ops/s
# Warmup Iteration  15: 499007.748 ops/s
# Warmup Iteration  16: 524113.683 ops/s
# Warmup Iteration  17: 541101.205 ops/s
# Warmup Iteration  18: 560880.871 ops/s
# Warmup Iteration  19: 530411.155 ops/s
# Warmup Iteration  20: 524583.708 ops/s
# Warmup Iteration  21: 555339.511 ops/s
# Warmup Iteration  22: 542721.329 ops/s
# Warmup Iteration  23: 529094.024 ops/s
# Warmup Iteration  24: 547955.340 ops/s
# Warmup Iteration  25: 537784.151 ops/s
# Warmup Iteration  26: 558037.340 ops/s
# Warmup Iteration  27: 537966.695 ops/s
# Warmup Iteration  28: 533566.364 ops/s
# Warmup Iteration  29: 556955.821 ops/s
# Warmup Iteration  30: 517365.497 ops/s
Iteration   1: 548405.630 ops/s
Iteration   2: 563913.463 ops/s
Iteration   3: 532985.429 ops/s
Iteration   4: 522867.129 ops/s
Iteration   5: 551802.187 ops/s
Iteration   6: 544964.375 ops/s
Iteration   7: 554342.512 ops/s
Iteration   8: 533097.216 ops/s
Iteration   9: 552926.222 ops/s
Iteration  10: 534531.890 ops/s
Iteration  11: 551666.337 ops/s
Iteration  12: 524588.742 ops/s
Iteration  13: 544439.457 ops/s
Iteration  14: 534731.352 ops/s
Iteration  15: 559023.984 ops/s
Iteration  16: 523088.587 ops/s
Iteration  17: 539021.579 ops/s
Iteration  18: 543282.595 ops/s
Iteration  19: 534685.598 ops/s
Iteration  20: 538824.798 ops/s
Iteration  21: 559333.796 ops/s
Iteration  22: 521745.026 ops/s
Iteration  23: 570971.078 ops/s
Iteration  24: 553337.893 ops/s
Iteration  25: 521578.683 ops/s
Iteration  26: 562665.073 ops/s
Iteration  27: 524497.114 ops/s
Iteration  28: 551821.288 ops/s
Iteration  29: 548887.427 ops/s
Iteration  30: 546968.513 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastOneTest._Benchmark.benchmark_doubleOnSubscribe":
  543166.499 ±(99.9%) 9295.719 ops/s [Average]
  (min, avg, max) = (521578.683, 543166.499, 570971.078), stdev = 13913.396
  CI (99.9%): [533870.780, 552462.218] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
FlowableTakeLastOneTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  543166.499 ± 9295.719  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 189744.700 ops/s
# Warmup Iteration   2: 310161.665 ops/s
# Warmup Iteration   3: 335103.706 ops/s
# Warmup Iteration   4: 343688.808 ops/s
# Warmup Iteration   5: 327401.876 ops/s
# Warmup Iteration   6: 338144.912 ops/s
# Warmup Iteration   7: 347989.548 ops/s
# Warmup Iteration   8: 321244.655 ops/s
# Warmup Iteration   9: 353038.519 ops/s
# Warmup Iteration  10: 350221.665 ops/s
# Warmup Iteration  11: 334018.631 ops/s
# Warmup Iteration  12: 329877.214 ops/s
# Warmup Iteration  13: 344501.734 ops/s
# Warmup Iteration  14: 327835.043 ops/s
# Warmup Iteration  15: 344353.538 ops/s
# Warmup Iteration  16: 345789.696 ops/s
# Warmup Iteration  17: 352492.404 ops/s
# Warmup Iteration  18: 378768.719 ops/s
# Warmup Iteration  19: 354945.773 ops/s
# Warmup Iteration  20: 361500.535 ops/s
# Warmup Iteration  21: 368138.806 ops/s
# Warmup Iteration  22: 356732.626 ops/s
# Warmup Iteration  23: 365432.595 ops/s
# Warmup Iteration  24: 357676.008 ops/s
# Warmup Iteration  25: 349241.074 ops/s
# Warmup Iteration  26: 366360.528 ops/s
# Warmup Iteration  27: 371941.155 ops/s
# Warmup Iteration  28: 384651.046 ops/s
# Warmup Iteration  29: 344699.674 ops/s
# Warmup Iteration  30: 375216.702 ops/s
Iteration   1: 350843.100 ops/s
Iteration   2: 359268.537 ops/s
Iteration   3: 355685.203 ops/s
Iteration   4: 362410.639 ops/s
Iteration   5: 372400.569 ops/s
Iteration   6: 347669.350 ops/s
Iteration   7: 357448.236 ops/s
Iteration   8: 369274.295 ops/s
Iteration   9: 355826.713 ops/s
Iteration  10: 359162.162 ops/s
Iteration  11: 358503.227 ops/s
Iteration  12: 367705.569 ops/s
Iteration  13: 358684.273 ops/s
Iteration  14: 349208.641 ops/s
Iteration  15: 362877.354 ops/s
Iteration  16: 367196.770 ops/s
Iteration  17: 357355.990 ops/s
Iteration  18: 282029.724 ops/s
Iteration  19: 354986.842 ops/s
Iteration  20: 363277.968 ops/s
Iteration  21: 376433.145 ops/s
Iteration  22: 346382.015 ops/s
Iteration  23: 372109.853 ops/s
Iteration  24: 358368.526 ops/s
Iteration  25: 371680.831 ops/s
Iteration  26: 361010.743 ops/s
Iteration  27: 362148.133 ops/s
Iteration  28: 357929.098 ops/s
Iteration  29: 382182.586 ops/s
Iteration  30: 349408.591 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleEmpty":
  358315.623 ±(99.9%) 11205.579 ops/s [Average]
  (min, avg, max) = (282029.724, 358315.623, 382182.586), stdev = 16771.985
  CI (99.9%): [347110.044, 369521.202] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_singleEmpty  thrpt   30  358315.623 ± 11205.579  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 154424.398 ops/s
# Warmup Iteration   2: 301462.045 ops/s
# Warmup Iteration   3: 311549.324 ops/s
# Warmup Iteration   4: 325371.372 ops/s
# Warmup Iteration   5: 315938.584 ops/s
# Warmup Iteration   6: 331242.818 ops/s
# Warmup Iteration   7: 348435.037 ops/s
# Warmup Iteration   8: 330050.294 ops/s
# Warmup Iteration   9: 347282.936 ops/s
# Warmup Iteration  10: 337514.305 ops/s
# Warmup Iteration  11: 331971.369 ops/s
# Warmup Iteration  12: 346210.910 ops/s
# Warmup Iteration  13: 325039.205 ops/s
# Warmup Iteration  14: 346490.224 ops/s
# Warmup Iteration  15: 326341.454 ops/s
# Warmup Iteration  16: 334396.525 ops/s
# Warmup Iteration  17: 361330.477 ops/s
# Warmup Iteration  18: 347361.341 ops/s
# Warmup Iteration  19: 361262.616 ops/s
# Warmup Iteration  20: 353087.002 ops/s
# Warmup Iteration  21: 357338.179 ops/s
# Warmup Iteration  22: 351910.187 ops/s
# Warmup Iteration  23: 352903.293 ops/s
# Warmup Iteration  24: 361778.697 ops/s
# Warmup Iteration  25: 354818.268 ops/s
# Warmup Iteration  26: 365658.913 ops/s
# Warmup Iteration  27: 361207.464 ops/s
# Warmup Iteration  28: 341192.698 ops/s
# Warmup Iteration  29: 361790.415 ops/s
# Warmup Iteration  30: 353761.795 ops/s
Iteration   1: 365416.330 ops/s
Iteration   2: 361654.798 ops/s
Iteration   3: 347564.126 ops/s
Iteration   4: 364293.835 ops/s
Iteration   5: 344830.663 ops/s
Iteration   6: 365372.781 ops/s
Iteration   7: 349860.732 ops/s
Iteration   8: 360875.250 ops/s
Iteration   9: 364756.906 ops/s
Iteration  10: 352380.279 ops/s
Iteration  11: 351637.296 ops/s
Iteration  12: 360850.882 ops/s
Iteration  13: 349062.453 ops/s
Iteration  14: 357653.839 ops/s
Iteration  15: 349497.975 ops/s
Iteration  16: 354219.829 ops/s
Iteration  17: 361696.175 ops/s
Iteration  18: 355938.284 ops/s
Iteration  19: 349355.766 ops/s
Iteration  20: 363987.845 ops/s
Iteration  21: 343925.815 ops/s
Iteration  22: 358905.008 ops/s
Iteration  23: 340094.383 ops/s
Iteration  24: 350661.561 ops/s
Iteration  25: 350991.833 ops/s
Iteration  26: 362235.277 ops/s
Iteration  27: 360102.412 ops/s
Iteration  28: 353771.678 ops/s
Iteration  29: 368741.595 ops/s
Iteration  30: 352844.126 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastEmpty":
  355772.658 ±(99.9%) 4956.325 ops/s [Average]
  (min, avg, max) = (340094.383, 355772.658, 368741.595), stdev = 7418.395
  CI (99.9%): [350816.333, 360728.983] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrErrorTest._Benchmark.benchmark_lastEmpty  thrpt   30  355772.658 ± 4956.325  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_cancelOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_cancelOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1154846.829 ops/s
# Warmup Iteration   2: 2826174.187 ops/s
# Warmup Iteration   3: 3099138.035 ops/s
# Warmup Iteration   4: 3433884.008 ops/s
# Warmup Iteration   5: 3515923.404 ops/s
# Warmup Iteration   6: 3635761.815 ops/s
# Warmup Iteration   7: 3455345.875 ops/s
# Warmup Iteration   8: 3665185.442 ops/s
# Warmup Iteration   9: 3433379.839 ops/s
# Warmup Iteration  10: 3536754.089 ops/s
# Warmup Iteration  11: 3463266.472 ops/s
# Warmup Iteration  12: 3432931.772 ops/s
# Warmup Iteration  13: 3648345.404 ops/s
# Warmup Iteration  14: 3460763.434 ops/s
# Warmup Iteration  15: 3661417.970 ops/s
# Warmup Iteration  16: 3493927.104 ops/s
# Warmup Iteration  17: 3706549.636 ops/s
# Warmup Iteration  18: 3606818.312 ops/s
# Warmup Iteration  19: 3461356.556 ops/s
# Warmup Iteration  20: 3706982.078 ops/s
# Warmup Iteration  21: 3624286.248 ops/s
# Warmup Iteration  22: 3494474.498 ops/s
# Warmup Iteration  23: 3565507.669 ops/s
# Warmup Iteration  24: 3611437.399 ops/s
# Warmup Iteration  25: 3427132.304 ops/s
# Warmup Iteration  26: 3514312.703 ops/s
# Warmup Iteration  27: 3601246.498 ops/s
# Warmup Iteration  28: 3551250.686 ops/s
# Warmup Iteration  29: 3575247.817 ops/s
# Warmup Iteration  30: 3645565.178 ops/s
Iteration   1: 3448450.443 ops/s
Iteration   2: 3643851.823 ops/s
Iteration   3: 3466375.396 ops/s
Iteration   4: 3529197.196 ops/s
Iteration   5: 3518366.949 ops/s
Iteration   6: 3552177.876 ops/s
Iteration   7: 3602219.394 ops/s
Iteration   8: 3447086.057 ops/s
Iteration   9: 3567411.675 ops/s
Iteration  10: 3646875.507 ops/s
Iteration  11: 3478039.641 ops/s
Iteration  12: 3615627.561 ops/s
Iteration  13: 2728418.831 ops/s
Iteration  14: 3381733.245 ops/s
Iteration  15: 3585485.605 ops/s
Iteration  16: 3532438.262 ops/s
Iteration  17: 3537023.818 ops/s
Iteration  18: 3529166.628 ops/s
Iteration  19: 3550445.753 ops/s
Iteration  20: 3569412.225 ops/s
Iteration  21: 3548124.916 ops/s
Iteration  22: 3540429.720 ops/s
Iteration  23: 3624519.996 ops/s
Iteration  24: 3507256.484 ops/s
Iteration  25: 3541565.129 ops/s
Iteration  26: 3725418.085 ops/s
Iteration  27: 3414276.351 ops/s
Iteration  28: 3482538.338 ops/s
Iteration  29: 3652251.306 ops/s
Iteration  30: 3477514.133 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithSingleTest._Benchmark.benchmark_cancelOther":
  3514789.945 ±(99.9%) 111362.589 ops/s [Average]
  (min, avg, max) = (2728418.831, 3514789.945, 3725418.085), stdev = 166682.294
  CI (99.9%): [3403427.355, 3626152.534] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score        Error  Units
FlowableConcatWithSingleTest._Benchmark.benchmark_cancelOther  thrpt   30  3514789.945 ± 111362.589  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 9215114.306 ops/s
# Warmup Iteration   2: 15456322.401 ops/s
# Warmup Iteration   3: 18984660.536 ops/s
# Warmup Iteration   4: 19766151.533 ops/s
# Warmup Iteration   5: 20889218.952 ops/s
# Warmup Iteration   6: 20241798.703 ops/s
# Warmup Iteration   7: 20096475.202 ops/s
# Warmup Iteration   8: 20802518.131 ops/s
# Warmup Iteration   9: 20920387.204 ops/s
# Warmup Iteration  10: 19983523.290 ops/s
# Warmup Iteration  11: 20896111.524 ops/s
# Warmup Iteration  12: 19834903.005 ops/s
# Warmup Iteration  13: 21291093.212 ops/s
# Warmup Iteration  14: 20463079.836 ops/s
# Warmup Iteration  15: 20627051.683 ops/s
# Warmup Iteration  16: 20390498.411 ops/s
# Warmup Iteration  17: 20157210.395 ops/s
# Warmup Iteration  18: 19759890.764 ops/s
# Warmup Iteration  19: 20826910.228 ops/s
# Warmup Iteration  20: 21177936.896 ops/s
# Warmup Iteration  21: 20875922.092 ops/s
# Warmup Iteration  22: 20037791.456 ops/s
# Warmup Iteration  23: 20352531.879 ops/s
# Warmup Iteration  24: 20524681.087 ops/s
# Warmup Iteration  25: 21038179.928 ops/s
# Warmup Iteration  26: 19882802.000 ops/s
# Warmup Iteration  27: 20995536.351 ops/s
# Warmup Iteration  28: 19976741.667 ops/s
# Warmup Iteration  29: 21036858.883 ops/s
# Warmup Iteration  30: 20294126.558 ops/s
Iteration   1: 20118649.219 ops/s
Iteration   2: 21125471.024 ops/s
Iteration   3: 19866345.333 ops/s
Iteration   4: 20867474.743 ops/s
Iteration   5: 20023393.026 ops/s
Iteration   6: 20888135.223 ops/s
Iteration   7: 20824181.276 ops/s
Iteration   8: 19727114.878 ops/s
Iteration   9: 21292177.462 ops/s
Iteration  10: 20483921.335 ops/s
Iteration  11: 19602209.920 ops/s
Iteration  12: 20779530.909 ops/s
Iteration  13: 20593081.512 ops/s
Iteration  14: 20291649.455 ops/s
Iteration  15: 20177448.621 ops/s
Iteration  16: 21157068.136 ops/s
Iteration  17: 19792289.313 ops/s
Iteration  18: 21111776.288 ops/s
Iteration  19: 19578647.950 ops/s
Iteration  20: 21007522.066 ops/s
Iteration  21: 20388815.927 ops/s
Iteration  22: 20580894.257 ops/s
Iteration  23: 20277537.378 ops/s
Iteration  24: 20283856.877 ops/s
Iteration  25: 21193631.444 ops/s
Iteration  26: 20166949.265 ops/s
Iteration  27: 21004981.377 ops/s
Iteration  28: 20845705.814 ops/s
Iteration  29: 19916080.854 ops/s
Iteration  30: 20580970.152 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableRangeTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero":
  20484917.034 ±(99.9%) 343310.233 ops/s [Average]
  (min, avg, max) = (19578647.950, 20484917.034, 21292177.462), stdev = 513850.634
  CI (99.9%): [20141606.801, 20828227.267] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt         Score        Error  Units
FlowableRangeTest._Benchmark.benchmark_emptyRangeSendsOnCompleteEagerlyWithRequestZero  thrpt   30  20484917.034 ± 343310.233  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_cancelOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_cancelOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 866674.860 ops/s
# Warmup Iteration   2: 2568230.393 ops/s
# Warmup Iteration   3: 2692041.802 ops/s
# Warmup Iteration   4: 3202042.110 ops/s
# Warmup Iteration   5: 3229944.251 ops/s
# Warmup Iteration   6: 3325497.450 ops/s
# Warmup Iteration   7: 3342098.317 ops/s
# Warmup Iteration   8: 3223865.314 ops/s
# Warmup Iteration   9: 3331381.361 ops/s
# Warmup Iteration  10: 3120207.095 ops/s
# Warmup Iteration  11: 3266590.001 ops/s
# Warmup Iteration  12: 3276196.062 ops/s
# Warmup Iteration  13: 3216714.499 ops/s
# Warmup Iteration  14: 3187021.539 ops/s
# Warmup Iteration  15: 3209068.476 ops/s
# Warmup Iteration  16: 3317763.938 ops/s
# Warmup Iteration  17: 3330950.655 ops/s
# Warmup Iteration  18: 3242518.970 ops/s
# Warmup Iteration  19: 3300538.297 ops/s
# Warmup Iteration  20: 3261962.618 ops/s
# Warmup Iteration  21: 3189328.249 ops/s
# Warmup Iteration  22: 3239934.150 ops/s
# Warmup Iteration  23: 3252887.148 ops/s
# Warmup Iteration  24: 3296988.817 ops/s
# Warmup Iteration  25: 3276226.886 ops/s
# Warmup Iteration  26: 3216213.804 ops/s
# Warmup Iteration  27: 3277734.894 ops/s
# Warmup Iteration  28: 3191318.359 ops/s
# Warmup Iteration  29: 3317457.465 ops/s
# Warmup Iteration  30: 3251870.806 ops/s
Iteration   1: 3346637.736 ops/s
Iteration   2: 3242200.473 ops/s
Iteration   3: 3239269.514 ops/s
Iteration   4: 3397034.976 ops/s
Iteration   5: 3116860.310 ops/s
Iteration   6: 3339560.825 ops/s
Iteration   7: 3245755.771 ops/s
Iteration   8: 2614666.767 ops/s
Iteration   9: 3241099.883 ops/s
Iteration  10: 3230968.300 ops/s
Iteration  11: 3302095.489 ops/s
Iteration  12: 3279299.339 ops/s
Iteration  13: 3116825.219 ops/s
Iteration  14: 3282335.175 ops/s
Iteration  15: 3334533.048 ops/s
Iteration  16: 3225817.671 ops/s
Iteration  17: 3304219.733 ops/s
Iteration  18: 3234886.217 ops/s
Iteration  19: 3245466.095 ops/s
Iteration  20: 3305695.231 ops/s
Iteration  21: 3301118.525 ops/s
Iteration  22: 3299832.511 ops/s
Iteration  23: 3285710.165 ops/s
Iteration  24: 3330776.448 ops/s
Iteration  25: 3179156.150 ops/s
Iteration  26: 3382338.716 ops/s
Iteration  27: 3225893.278 ops/s
Iteration  28: 3245156.733 ops/s
Iteration  29: 3303594.313 ops/s
Iteration  30: 3203829.214 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_cancelOther":
  3246754.461 ±(99.9%) 91007.356 ops/s [Average]
  (min, avg, max) = (2614666.767, 3246754.461, 3397034.976), stdev = 136215.536
  CI (99.9%): [3155747.105, 3337761.817] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableConcatWithMaybeTest._Benchmark.benchmark_cancelOther  thrpt   30  3246754.461 ± 91007.356  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1680238.059 ops/s
# Warmup Iteration   2: 4305646.306 ops/s
# Warmup Iteration   3: 5257788.993 ops/s
# Warmup Iteration   4: 5543193.103 ops/s
# Warmup Iteration   5: 5714159.961 ops/s
# Warmup Iteration   6: 5335613.840 ops/s
# Warmup Iteration   7: 5862755.528 ops/s
# Warmup Iteration   8: 5627733.801 ops/s
# Warmup Iteration   9: 5609879.602 ops/s
# Warmup Iteration  10: 5832378.066 ops/s
# Warmup Iteration  11: 5508305.390 ops/s
# Warmup Iteration  12: 5789094.076 ops/s
# Warmup Iteration  13: 5454482.787 ops/s
# Warmup Iteration  14: 5693473.868 ops/s
# Warmup Iteration  15: 5767550.152 ops/s
# Warmup Iteration  16: 5541580.207 ops/s
# Warmup Iteration  17: 5771434.939 ops/s
# Warmup Iteration  18: 5583853.862 ops/s
# Warmup Iteration  19: 5766823.821 ops/s
# Warmup Iteration  20: 5667835.478 ops/s
# Warmup Iteration  21: 5616112.177 ops/s
# Warmup Iteration  22: 5855127.498 ops/s
# Warmup Iteration  23: 5917653.463 ops/s
# Warmup Iteration  24: 5805994.521 ops/s
# Warmup Iteration  25: 5552284.318 ops/s
# Warmup Iteration  26: 5590428.869 ops/s
# Warmup Iteration  27: 5671045.163 ops/s
# Warmup Iteration  28: 5679941.213 ops/s
# Warmup Iteration  29: 5893814.570 ops/s
# Warmup Iteration  30: 5615892.727 ops/s
Iteration   1: 5663748.820 ops/s
Iteration   2: 5878294.908 ops/s
Iteration   3: 5799410.425 ops/s
Iteration   4: 5628492.400 ops/s
Iteration   5: 5535286.112 ops/s
Iteration   6: 5838172.041 ops/s
Iteration   7: 5510753.982 ops/s
Iteration   8: 5773453.133 ops/s
Iteration   9: 5695887.475 ops/s
Iteration  10: 5675165.388 ops/s
Iteration  11: 5632633.185 ops/s
Iteration  12: 5582863.562 ops/s
Iteration  13: 5597980.111 ops/s
Iteration  14: 5662515.522 ops/s
Iteration  15: 5557934.442 ops/s
Iteration  16: 5689599.035 ops/s
Iteration  17: 5611086.342 ops/s
Iteration  18: 5615414.958 ops/s
Iteration  19: 5766273.031 ops/s
Iteration  20: 5652564.374 ops/s
Iteration  21: 5537258.970 ops/s
Iteration  22: 5684790.622 ops/s
Iteration  23: 5787502.488 ops/s
Iteration  24: 5526012.672 ops/s
Iteration  25: 5478572.766 ops/s
Iteration  26: 5867982.897 ops/s
Iteration  27: 5426667.957 ops/s
Iteration  28: 5807645.613 ops/s
Iteration  29: 5819608.609 ops/s
Iteration  30: 5485846.664 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDoFinallyTest._Benchmark.benchmark_normalEmpty":
  5659647.283 ±(99.9%) 83016.204 ops/s [Average]
  (min, avg, max) = (5426667.957, 5659647.283, 5878294.908), stdev = 124254.755
  CI (99.9%): [5576631.080, 5742663.487] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableDoFinallyTest._Benchmark.benchmark_normalEmpty  thrpt   30  5659647.283 ± 83016.204  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_noRequestEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_noRequestEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1736868.587 ops/s
# Warmup Iteration   2: 4129973.287 ops/s
# Warmup Iteration   3: 5095556.359 ops/s
# Warmup Iteration   4: 5416668.003 ops/s
# Warmup Iteration   5: 5108282.902 ops/s
# Warmup Iteration   6: 5242328.720 ops/s
# Warmup Iteration   7: 5108849.196 ops/s
# Warmup Iteration   8: 5218067.695 ops/s
# Warmup Iteration   9: 5607444.187 ops/s
# Warmup Iteration  10: 5330328.165 ops/s
# Warmup Iteration  11: 5202326.314 ops/s
# Warmup Iteration  12: 5443989.670 ops/s
# Warmup Iteration  13: 5235983.485 ops/s
# Warmup Iteration  14: 5419931.108 ops/s
# Warmup Iteration  15: 5327348.833 ops/s
# Warmup Iteration  16: 5334972.208 ops/s
# Warmup Iteration  17: 5398222.793 ops/s
# Warmup Iteration  18: 5240917.727 ops/s
# Warmup Iteration  19: 5516919.809 ops/s
# Warmup Iteration  20: 5319201.932 ops/s
# Warmup Iteration  21: 5268104.067 ops/s
# Warmup Iteration  22: 5228476.208 ops/s
# Warmup Iteration  23: 5144229.614 ops/s
# Warmup Iteration  24: 5240365.579 ops/s
# Warmup Iteration  25: 5319511.434 ops/s
# Warmup Iteration  26: 5383511.130 ops/s
# Warmup Iteration  27: 5488904.571 ops/s
# Warmup Iteration  28: 5567887.839 ops/s
# Warmup Iteration  29: 5405212.456 ops/s
# Warmup Iteration  30: 5130173.660 ops/s
Iteration   1: 5521949.942 ops/s
Iteration   2: 4449200.815 ops/s
Iteration   3: 5439088.534 ops/s
Iteration   4: 5201011.009 ops/s
Iteration   5: 5400795.427 ops/s
Iteration   6: 5445711.005 ops/s
Iteration   7: 5203510.974 ops/s
Iteration   8: 5175161.502 ops/s
Iteration   9: 5440124.388 ops/s
Iteration  10: 4972402.373 ops/s
Iteration  11: 5464476.078 ops/s
Iteration  12: 5341493.209 ops/s
Iteration  13: 5234073.676 ops/s
Iteration  14: 5206607.871 ops/s
Iteration  15: 5381844.319 ops/s
Iteration  16: 5415072.462 ops/s
Iteration  17: 5294995.766 ops/s
Iteration  18: 5366345.640 ops/s
Iteration  19: 5153527.093 ops/s
Iteration  20: 5466633.641 ops/s
Iteration  21: 5420667.880 ops/s
Iteration  22: 5328487.484 ops/s
Iteration  23: 5497281.287 ops/s
Iteration  24: 5034933.482 ops/s
Iteration  25: 5351176.818 ops/s
Iteration  26: 5417412.772 ops/s
Iteration  27: 5135663.241 ops/s
Iteration  28: 5457137.580 ops/s
Iteration  29: 5417404.861 ops/s
Iteration  30: 5151343.849 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeLastTest._Benchmark.benchmark_noRequestEmpty":
  5292851.166 ±(99.9%) 142968.548 ops/s [Average]
  (min, avg, max) = (4449200.815, 5292851.166, 5521949.942), stdev = 213988.609
  CI (99.9%): [5149882.617, 5435819.714] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
FlowableTakeLastTest._Benchmark.benchmark_noRequestEmpty  thrpt   30  5292851.166 ± 142968.548  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_exactEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_exactEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2631527.473 ops/s
# Warmup Iteration   2: 4194860.287 ops/s
# Warmup Iteration   3: 5763927.929 ops/s
# Warmup Iteration   4: 5979970.087 ops/s
# Warmup Iteration   5: 6069514.560 ops/s
# Warmup Iteration   6: 5913774.834 ops/s
# Warmup Iteration   7: 5745487.655 ops/s
# Warmup Iteration   8: 5903885.881 ops/s
# Warmup Iteration   9: 6059886.698 ops/s
# Warmup Iteration  10: 5635283.608 ops/s
# Warmup Iteration  11: 5943244.186 ops/s
# Warmup Iteration  12: 5909967.201 ops/s
# Warmup Iteration  13: 5789120.282 ops/s
# Warmup Iteration  14: 6144825.943 ops/s
# Warmup Iteration  15: 5775466.874 ops/s
# Warmup Iteration  16: 5991519.503 ops/s
# Warmup Iteration  17: 5837663.845 ops/s
# Warmup Iteration  18: 5693800.949 ops/s
# Warmup Iteration  19: 5876360.014 ops/s
# Warmup Iteration  20: 6122039.570 ops/s
# Warmup Iteration  21: 5759008.312 ops/s
# Warmup Iteration  22: 5787015.724 ops/s
# Warmup Iteration  23: 6148258.609 ops/s
# Warmup Iteration  24: 5688761.138 ops/s
# Warmup Iteration  25: 5782907.791 ops/s
# Warmup Iteration  26: 5988153.397 ops/s
# Warmup Iteration  27: 5736525.503 ops/s
# Warmup Iteration  28: 5862459.715 ops/s
# Warmup Iteration  29: 6003967.783 ops/s
# Warmup Iteration  30: 5792865.670 ops/s
Iteration   1: 6032495.680 ops/s
Iteration   2: 6004069.189 ops/s
Iteration   3: 5753838.810 ops/s
Iteration   4: 5940963.747 ops/s
Iteration   5: 5637564.674 ops/s
Iteration   6: 5751567.010 ops/s
Iteration   7: 5965774.895 ops/s
Iteration   8: 6055346.010 ops/s
Iteration   9: 5641389.740 ops/s
Iteration  10: 6103509.720 ops/s
Iteration  11: 5745897.368 ops/s
Iteration  12: 6056035.492 ops/s
Iteration  13: 6001963.599 ops/s
Iteration  14: 5854891.219 ops/s
Iteration  15: 5939175.381 ops/s
Iteration  16: 5755985.924 ops/s
Iteration  17: 6084821.680 ops/s
Iteration  18: 5752869.089 ops/s
Iteration  19: 5817799.950 ops/s
Iteration  20: 5994686.869 ops/s
Iteration  21: 5760093.734 ops/s
Iteration  22: 5941301.970 ops/s
Iteration  23: 5797855.196 ops/s
Iteration  24: 5830013.432 ops/s
Iteration  25: 5725831.284 ops/s
Iteration  26: 6007359.943 ops/s
Iteration  27: 5766435.375 ops/s
Iteration  28: 6088164.223 ops/s
Iteration  29: 5827156.364 ops/s
Iteration  30: 5771299.945 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_exactEmpty":
  5880205.250 ±(99.9%) 94097.549 ops/s [Average]
  (min, avg, max) = (5637564.674, 5880205.250, 6103509.720), stdev = 140840.792
  CI (99.9%): [5786107.702, 5974302.799] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_exactEmpty  thrpt   30  5880205.250 ± 94097.549  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 170672.936 ops/s
# Warmup Iteration   2: 307583.292 ops/s
# Warmup Iteration   3: 333118.805 ops/s
# Warmup Iteration   4: 345401.555 ops/s
# Warmup Iteration   5: 348975.842 ops/s
# Warmup Iteration   6: 365814.241 ops/s
# Warmup Iteration   7: 351545.991 ops/s
# Warmup Iteration   8: 362325.201 ops/s
# Warmup Iteration   9: 362832.685 ops/s
# Warmup Iteration  10: 362267.621 ops/s
# Warmup Iteration  11: 356336.152 ops/s
# Warmup Iteration  12: 376882.110 ops/s
# Warmup Iteration  13: 371159.600 ops/s
# Warmup Iteration  14: 352732.648 ops/s
# Warmup Iteration  15: 378249.254 ops/s
# Warmup Iteration  16: 350121.000 ops/s
# Warmup Iteration  17: 381270.304 ops/s
# Warmup Iteration  18: 390392.891 ops/s
# Warmup Iteration  19: 376346.763 ops/s
# Warmup Iteration  20: 374155.544 ops/s
# Warmup Iteration  21: 376754.900 ops/s
# Warmup Iteration  22: 380616.995 ops/s
# Warmup Iteration  23: 391057.753 ops/s
# Warmup Iteration  24: 376047.303 ops/s
# Warmup Iteration  25: 381519.621 ops/s
# Warmup Iteration  26: 344967.865 ops/s
# Warmup Iteration  27: 355125.272 ops/s
# Warmup Iteration  28: 392558.153 ops/s
# Warmup Iteration  29: 384063.644 ops/s
# Warmup Iteration  30: 384507.497 ops/s
Iteration   1: 393426.214 ops/s
Iteration   2: 378198.055 ops/s
Iteration   3: 370494.406 ops/s
Iteration   4: 391094.948 ops/s
Iteration   5: 365306.532 ops/s
Iteration   6: 391458.055 ops/s
Iteration   7: 391212.707 ops/s
Iteration   8: 396804.847 ops/s
Iteration   9: 372859.868 ops/s
Iteration  10: 391306.749 ops/s
Iteration  11: 372637.365 ops/s
Iteration  12: 391204.410 ops/s
Iteration  13: 382179.525 ops/s
Iteration  14: 370949.193 ops/s
Iteration  15: 384081.103 ops/s
Iteration  16: 395609.013 ops/s
Iteration  17: 369939.886 ops/s
Iteration  18: 388502.513 ops/s
Iteration  19: 372030.447 ops/s
Iteration  20: 376351.491 ops/s
Iteration  21: 389357.294 ops/s
Iteration  22: 367890.055 ops/s
Iteration  23: 384841.100 ops/s
Iteration  24: 376950.674 ops/s
Iteration  25: 383066.603 ops/s
Iteration  26: 358767.161 ops/s
Iteration  27: 377216.316 ops/s
Iteration  28: 379732.462 ops/s
Iteration  29: 365588.198 ops/s
Iteration  30: 374904.086 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleError":
  380132.042 ±(99.9%) 6881.198 ops/s [Average]
  (min, avg, max) = (358767.161, 380132.042, 396804.847), stdev = 10299.455
  CI (99.9%): [373250.844, 387013.241] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
FlowableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleError  thrpt   30  380132.042 ± 6881.198  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_switchMapFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_switchMapFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 289099.538 ops/s
# Warmup Iteration   2: 596132.279 ops/s
# Warmup Iteration   3: 570801.137 ops/s
# Warmup Iteration   4: 576949.644 ops/s
# Warmup Iteration   5: 665261.829 ops/s
# Warmup Iteration   6: 622510.492 ops/s
# Warmup Iteration   7: 683733.756 ops/s
# Warmup Iteration   8: 643709.162 ops/s
# Warmup Iteration   9: 644304.704 ops/s
# Warmup Iteration  10: 655599.041 ops/s
# Warmup Iteration  11: 643695.746 ops/s
# Warmup Iteration  12: 630878.365 ops/s
# Warmup Iteration  13: 648242.217 ops/s
# Warmup Iteration  14: 674339.687 ops/s
# Warmup Iteration  15: 628223.928 ops/s
# Warmup Iteration  16: 670355.217 ops/s
# Warmup Iteration  17: 697179.633 ops/s
# Warmup Iteration  18: 671969.166 ops/s
# Warmup Iteration  19: 688836.814 ops/s
# Warmup Iteration  20: 700528.847 ops/s
# Warmup Iteration  21: 694529.676 ops/s
# Warmup Iteration  22: 701217.012 ops/s
# Warmup Iteration  23: 662331.092 ops/s
# Warmup Iteration  24: 691169.522 ops/s
# Warmup Iteration  25: 691304.448 ops/s
# Warmup Iteration  26: 682098.197 ops/s
# Warmup Iteration  27: 710052.249 ops/s
# Warmup Iteration  28: 670714.396 ops/s
# Warmup Iteration  29: 686154.673 ops/s
# Warmup Iteration  30: 678656.537 ops/s
Iteration   1: 683519.192 ops/s
Iteration   2: 694484.022 ops/s
Iteration   3: 674998.987 ops/s
Iteration   4: 708423.327 ops/s
Iteration   5: 691655.963 ops/s
Iteration   6: 672282.579 ops/s
Iteration   7: 724331.333 ops/s
Iteration   8: 671490.515 ops/s
Iteration   9: 712116.982 ops/s
Iteration  10: 669909.271 ops/s
Iteration  11: 706348.811 ops/s
Iteration  12: 693431.441 ops/s
Iteration  13: 687751.399 ops/s
Iteration  14: 687653.131 ops/s
Iteration  15: 685901.636 ops/s
Iteration  16: 696336.920 ops/s
Iteration  17: 688064.759 ops/s
Iteration  18: 678755.507 ops/s
Iteration  19: 709251.444 ops/s
Iteration  20: 680931.790 ops/s
Iteration  21: 682318.034 ops/s
Iteration  22: 708177.633 ops/s
Iteration  23: 670742.090 ops/s
Iteration  24: 702598.658 ops/s
Iteration  25: 695833.260 ops/s
Iteration  26: 680802.623 ops/s
Iteration  27: 707558.775 ops/s
Iteration  28: 685354.957 ops/s
Iteration  29: 676376.362 ops/s
Iteration  30: 698646.498 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_switchMapFunctionReturnsNull":
  690868.263 ±(99.9%) 9523.300 ops/s [Average]
  (min, avg, max) = (669909.271, 690868.263, 724331.333), stdev = 14254.028
  CI (99.9%): [681344.963, 700391.563] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_switchMapFunctionReturnsNull  thrpt   30  690868.263 ± 9523.300  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_noDisconnectSomeoneElse$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_noDisconnectSomeoneElse

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1163438.507 ops/s
# Warmup Iteration   2: 3346393.254 ops/s
# Warmup Iteration   3: 4043075.082 ops/s
# Warmup Iteration   4: 4701304.634 ops/s
# Warmup Iteration   5: 4861471.742 ops/s
# Warmup Iteration   6: 4693807.822 ops/s
# Warmup Iteration   7: 4800266.566 ops/s
# Warmup Iteration   8: 4689028.838 ops/s
# Warmup Iteration   9: 4822918.767 ops/s
# Warmup Iteration  10: 4773915.918 ops/s
# Warmup Iteration  11: 4763744.401 ops/s
# Warmup Iteration  12: 4674091.644 ops/s
# Warmup Iteration  13: 4964697.909 ops/s
# Warmup Iteration  14: 4872612.266 ops/s
# Warmup Iteration  15: 4642538.471 ops/s
# Warmup Iteration  16: 5007569.420 ops/s
# Warmup Iteration  17: 4447195.295 ops/s
# Warmup Iteration  18: 4824004.720 ops/s
# Warmup Iteration  19: 4669518.639 ops/s
# Warmup Iteration  20: 4498160.691 ops/s
# Warmup Iteration  21: 3728638.137 ops/s
# Warmup Iteration  22: 4565759.364 ops/s
# Warmup Iteration  23: 4689593.883 ops/s
# Warmup Iteration  24: 4581624.533 ops/s
# Warmup Iteration  25: 4541205.417 ops/s
# Warmup Iteration  26: 4747077.540 ops/s
# Warmup Iteration  27: 4459851.630 ops/s
# Warmup Iteration  28: 4745829.589 ops/s
# Warmup Iteration  29: 4591052.795 ops/s
# Warmup Iteration  30: 4611718.274 ops/s
Iteration   1: 4679881.369 ops/s
Iteration   2: 4635246.474 ops/s
Iteration   3: 4600305.267 ops/s
Iteration   4: 4787856.939 ops/s
Iteration   5: 4409590.267 ops/s
Iteration   6: 4839570.481 ops/s
Iteration   7: 4699666.856 ops/s
Iteration   8: 4568334.762 ops/s
Iteration   9: 4838265.687 ops/s
Iteration  10: 4578647.644 ops/s
Iteration  11: 4581180.086 ops/s
Iteration  12: 4809749.005 ops/s
Iteration  13: 4619867.921 ops/s
Iteration  14: 4530757.374 ops/s
Iteration  15: 4529262.203 ops/s
Iteration  16: 4799092.802 ops/s
Iteration  17: 4670738.401 ops/s
Iteration  18: 4628952.365 ops/s
Iteration  19: 4761870.624 ops/s
Iteration  20: 4510947.541 ops/s
Iteration  21: 4687564.065 ops/s
Iteration  22: 4674884.819 ops/s
Iteration  23: 4655269.897 ops/s
Iteration  24: 4805998.356 ops/s
Iteration  25: 4617484.621 ops/s
Iteration  26: 4608754.795 ops/s
Iteration  27: 4841216.155 ops/s
Iteration  28: 4490485.629 ops/s
Iteration  29: 4736300.083 ops/s
Iteration  30: 4706905.233 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_noDisconnectSomeoneElse":
  4663488.257 ±(99.9%) 76205.946 ops/s [Average]
  (min, avg, max) = (4409590.267, 4663488.257, 4841216.155), stdev = 114061.481
  CI (99.9%): [4587282.311, 4739694.204] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_noDisconnectSomeoneElse  thrpt   30  4663488.257 ± 76205.946  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3675220.341 ops/s
# Warmup Iteration   2: 7079553.996 ops/s
# Warmup Iteration   3: 6823746.452 ops/s
# Warmup Iteration   4: 8002028.662 ops/s
# Warmup Iteration   5: 8291460.058 ops/s
# Warmup Iteration   6: 8253037.663 ops/s
# Warmup Iteration   7: 7941988.668 ops/s
# Warmup Iteration   8: 8527678.772 ops/s
# Warmup Iteration   9: 7818478.149 ops/s
# Warmup Iteration  10: 8281074.340 ops/s
# Warmup Iteration  11: 8361731.635 ops/s
# Warmup Iteration  12: 8211638.527 ops/s
# Warmup Iteration  13: 8137435.630 ops/s
# Warmup Iteration  14: 8078491.612 ops/s
# Warmup Iteration  15: 8293452.657 ops/s
# Warmup Iteration  16: 8445433.576 ops/s
# Warmup Iteration  17: 8198980.708 ops/s
# Warmup Iteration  18: 8418607.486 ops/s
# Warmup Iteration  19: 8417105.808 ops/s
# Warmup Iteration  20: 8386599.208 ops/s
# Warmup Iteration  21: 8533993.213 ops/s
# Warmup Iteration  22: 8377902.972 ops/s
# Warmup Iteration  23: 8500081.585 ops/s
# Warmup Iteration  24: 8671933.739 ops/s
# Warmup Iteration  25: 8598303.115 ops/s
# Warmup Iteration  26: 8130779.358 ops/s
# Warmup Iteration  27: 8509603.628 ops/s
# Warmup Iteration  28: 8615423.300 ops/s
# Warmup Iteration  29: 8195308.390 ops/s
# Warmup Iteration  30: 8470957.565 ops/s
Iteration   1: 8187564.478 ops/s
Iteration   2: 8263893.202 ops/s
Iteration   3: 8564494.769 ops/s
Iteration   4: 8420249.851 ops/s
Iteration   5: 8646196.795 ops/s
Iteration   6: 8256871.517 ops/s
Iteration   7: 8417783.171 ops/s
Iteration   8: 8765588.855 ops/s
Iteration   9: 8237794.605 ops/s
Iteration  10: 8634271.996 ops/s
Iteration  11: 8370367.850 ops/s
Iteration  12: 8035760.260 ops/s
Iteration  13: 8757756.433 ops/s
Iteration  14: 8214728.654 ops/s
Iteration  15: 8437560.464 ops/s
Iteration  16: 8703189.965 ops/s
Iteration  17: 8224214.450 ops/s
Iteration  18: 8655189.230 ops/s
Iteration  19: 8240471.905 ops/s
Iteration  20: 8485072.999 ops/s
Iteration  21: 8202527.068 ops/s
Iteration  22: 8224001.912 ops/s
Iteration  23: 8702101.117 ops/s
Iteration  24: 8596756.559 ops/s
Iteration  25: 8263452.902 ops/s
Iteration  26: 8287595.185 ops/s
Iteration  27: 8701182.682 ops/s
Iteration  28: 8431928.247 ops/s
Iteration  29: 8671036.788 ops/s
Iteration  30: 8316013.964 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_empty":
  8430520.596 ±(99.9%) 140409.144 ops/s [Average]
  (min, avg, max) = (8035760.260, 8430520.596, 8765588.855), stdev = 210157.812
  CI (99.9%): [8290111.452, 8570929.740] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score        Error  Units
FlowablePublishTest._Benchmark.benchmark_empty  thrpt   30  8430520.596 ± 140409.144  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 100890.889 ops/s
# Warmup Iteration   2: 378291.558 ops/s
# Warmup Iteration   3: 429184.906 ops/s
# Warmup Iteration   4: 384844.956 ops/s
# Warmup Iteration   5: 476957.994 ops/s
# Warmup Iteration   6: 486497.426 ops/s
# Warmup Iteration   7: 468054.902 ops/s
# Warmup Iteration   8: 481604.896 ops/s
# Warmup Iteration   9: 480892.420 ops/s
# Warmup Iteration  10: 496067.146 ops/s
# Warmup Iteration  11: 475042.239 ops/s
# Warmup Iteration  12: 455332.180 ops/s
# Warmup Iteration  13: 485024.241 ops/s
# Warmup Iteration  14: 468006.148 ops/s
# Warmup Iteration  15: 336373.536 ops/s
# Warmup Iteration  16: 499851.614 ops/s
# Warmup Iteration  17: 485702.179 ops/s
# Warmup Iteration  18: 501635.148 ops/s
# Warmup Iteration  19: 498207.472 ops/s
# Warmup Iteration  20: 497107.148 ops/s
# Warmup Iteration  21: 522116.100 ops/s
# Warmup Iteration  22: 492835.366 ops/s
# Warmup Iteration  23: 519544.217 ops/s
# Warmup Iteration  24: 499408.442 ops/s
# Warmup Iteration  25: 489365.885 ops/s
# Warmup Iteration  26: 508456.537 ops/s
# Warmup Iteration  27: 491051.285 ops/s
# Warmup Iteration  28: 502647.901 ops/s
# Warmup Iteration  29: 496927.683 ops/s
# Warmup Iteration  30: 514963.812 ops/s
Iteration   1: 496392.693 ops/s
Iteration   2: 517962.751 ops/s
Iteration   3: 478762.819 ops/s
Iteration   4: 504421.146 ops/s
Iteration   5: 519854.629 ops/s
Iteration   6: 481556.730 ops/s
Iteration   7: 503050.444 ops/s
Iteration   8: 487427.362 ops/s
Iteration   9: 511709.994 ops/s
Iteration  10: 525045.209 ops/s
Iteration  11: 496311.505 ops/s
Iteration  12: 518275.266 ops/s
Iteration  13: 489318.758 ops/s
Iteration  14: 498719.957 ops/s
Iteration  15: 511535.788 ops/s
Iteration  16: 499068.960 ops/s
Iteration  17: 492526.686 ops/s
Iteration  18: 526205.910 ops/s
Iteration  19: 479618.584 ops/s
Iteration  20: 515175.754 ops/s
Iteration  21: 487340.607 ops/s
Iteration  22: 502623.462 ops/s
Iteration  23: 487576.366 ops/s
Iteration  24: 502071.101 ops/s
Iteration  25: 520917.454 ops/s
Iteration  26: 492192.790 ops/s
Iteration  27: 500344.761 ops/s
Iteration  28: 507561.170 ops/s
Iteration  29: 514141.959 ops/s
Iteration  30: 498834.581 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCacheTest._Benchmark.benchmark_badRequest":
  502218.173 ±(99.9%) 9111.196 ops/s [Average]
  (min, avg, max) = (478762.819, 502218.173, 526205.910), stdev = 13637.210
  CI (99.9%): [493106.977, 511329.369] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score      Error  Units
FlowableCacheTest._Benchmark.benchmark_badRequest  thrpt   30  502218.173 ± 9111.196  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureOnEmptyStream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureOnEmptyStream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 835809.219 ops/s
# Warmup Iteration   2: 3763573.076 ops/s
# Warmup Iteration   3: 4708341.555 ops/s
# Warmup Iteration   4: 4573572.562 ops/s
# Warmup Iteration   5: 4914548.268 ops/s
# Warmup Iteration   6: 4566069.119 ops/s
# Warmup Iteration   7: 4612509.963 ops/s
# Warmup Iteration   8: 4917556.203 ops/s
# Warmup Iteration   9: 4567162.932 ops/s
# Warmup Iteration  10: 4332907.307 ops/s
# Warmup Iteration  11: 4389940.218 ops/s
# Warmup Iteration  12: 4662998.794 ops/s
# Warmup Iteration  13: 4903772.459 ops/s
# Warmup Iteration  14: 4709177.235 ops/s
# Warmup Iteration  15: 4759031.708 ops/s
# Warmup Iteration  16: 4610983.548 ops/s
# Warmup Iteration  17: 4654985.128 ops/s
# Warmup Iteration  18: 4795275.799 ops/s
# Warmup Iteration  19: 4680909.704 ops/s
# Warmup Iteration  20: 4875292.805 ops/s
# Warmup Iteration  21: 4723507.246 ops/s
# Warmup Iteration  22: 4890795.753 ops/s
# Warmup Iteration  23: 4863262.784 ops/s
# Warmup Iteration  24: 4735620.610 ops/s
# Warmup Iteration  25: 4709370.199 ops/s
# Warmup Iteration  26: 4828952.507 ops/s
# Warmup Iteration  27: 4807722.826 ops/s
# Warmup Iteration  28: 4666342.744 ops/s
# Warmup Iteration  29: 4540555.635 ops/s
# Warmup Iteration  30: 4665695.136 ops/s
Iteration   1: 4826955.824 ops/s
Iteration   2: 4677803.990 ops/s
Iteration   3: 4788347.607 ops/s
Iteration   4: 4660851.381 ops/s
Iteration   5: 4721356.733 ops/s
Iteration   6: 4848980.271 ops/s
Iteration   7: 4621713.648 ops/s
Iteration   8: 5016941.839 ops/s
Iteration   9: 4562654.538 ops/s
Iteration  10: 4968181.426 ops/s
Iteration  11: 4942748.083 ops/s
Iteration  12: 4691763.774 ops/s
Iteration  13: 4614901.714 ops/s
Iteration  14: 4758975.057 ops/s
Iteration  15: 4952691.817 ops/s
Iteration  16: 4874124.113 ops/s
Iteration  17: 4631631.588 ops/s
Iteration  18: 4958498.286 ops/s
Iteration  19: 4573230.574 ops/s
Iteration  20: 4818823.088 ops/s
Iteration  21: 4651914.157 ops/s
Iteration  22: 4643604.740 ops/s
Iteration  23: 4946089.733 ops/s
Iteration  24: 4693225.059 ops/s
Iteration  25: 4993872.633 ops/s
Iteration  26: 4612376.067 ops/s
Iteration  27: 4806195.066 ops/s
Iteration  28: 4792233.907 ops/s
Iteration  29: 4809986.097 ops/s
Iteration  30: 4708919.614 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMaterializeTest._Benchmark.benchmark_backpressureOnEmptyStream":
  4772319.747 ±(99.9%) 91735.605 ops/s [Average]
  (min, avg, max) = (4562654.538, 4772319.747, 5016941.839), stdev = 137305.545
  CI (99.9%): [4680584.143, 4864055.352] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
FlowableMaterializeTest._Benchmark.benchmark_backpressureOnEmptyStream  thrpt   30  4772319.747 ± 91735.605  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_empty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_empty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 675434.345 ops/s
# Warmup Iteration   2: 3087630.684 ops/s
# Warmup Iteration   3: 3499364.429 ops/s
# Warmup Iteration   4: 4162142.178 ops/s
# Warmup Iteration   5: 4365517.540 ops/s
# Warmup Iteration   6: 4312500.081 ops/s
# Warmup Iteration   7: 4214731.805 ops/s
# Warmup Iteration   8: 4106902.555 ops/s
# Warmup Iteration   9: 4320773.731 ops/s
# Warmup Iteration  10: 3402930.214 ops/s
# Warmup Iteration  11: 4077941.461 ops/s
# Warmup Iteration  12: 4104660.887 ops/s
# Warmup Iteration  13: 4180788.681 ops/s
# Warmup Iteration  14: 4042622.191 ops/s
# Warmup Iteration  15: 4277782.986 ops/s
# Warmup Iteration  16: 4072130.542 ops/s
# Warmup Iteration  17: 4287140.427 ops/s
# Warmup Iteration  18: 4129393.715 ops/s
# Warmup Iteration  19: 4300563.700 ops/s
# Warmup Iteration  20: 4363015.099 ops/s
# Warmup Iteration  21: 4074709.162 ops/s
# Warmup Iteration  22: 4146790.389 ops/s
# Warmup Iteration  23: 4304972.643 ops/s
# Warmup Iteration  24: 4076016.758 ops/s
# Warmup Iteration  25: 4037398.076 ops/s
# Warmup Iteration  26: 4277249.817 ops/s
# Warmup Iteration  27: 4142706.639 ops/s
# Warmup Iteration  28: 4269146.521 ops/s
# Warmup Iteration  29: 4354194.060 ops/s
# Warmup Iteration  30: 4008602.613 ops/s
Iteration   1: 4155027.163 ops/s
Iteration   2: 4363041.440 ops/s
Iteration   3: 4097636.984 ops/s
Iteration   4: 4170172.521 ops/s
Iteration   5: 4262544.087 ops/s
Iteration   6: 3982675.139 ops/s
Iteration   7: 4271354.503 ops/s
Iteration   8: 4312470.817 ops/s
Iteration   9: 4066909.059 ops/s
Iteration  10: 4323913.662 ops/s
Iteration  11: 4097532.187 ops/s
Iteration  12: 4296664.917 ops/s
Iteration  13: 4192545.581 ops/s
Iteration  14: 4065131.182 ops/s
Iteration  15: 4310779.644 ops/s
Iteration  16: 4125267.225 ops/s
Iteration  17: 4264386.400 ops/s
Iteration  18: 4314596.433 ops/s
Iteration  19: 4081430.492 ops/s
Iteration  20: 4269253.652 ops/s
Iteration  21: 4081942.101 ops/s
Iteration  22: 4157756.632 ops/s
Iteration  23: 4102375.512 ops/s
Iteration  24: 4583112.431 ops/s
Iteration  25: 4360883.967 ops/s
Iteration  26: 4045745.524 ops/s
Iteration  27: 4288390.840 ops/s
Iteration  28: 4212688.960 ops/s
Iteration  29: 4048926.492 ops/s
Iteration  30: 4196358.807 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableGroupByTest._Benchmark.benchmark_empty":
  4203383.812 ±(99.9%) 86506.219 ops/s [Average]
  (min, avg, max) = (3982675.139, 4203383.812, 4583112.431), stdev = 129478.446
  CI (99.9%): [4116877.593, 4289890.031] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
FlowableGroupByTest._Benchmark.benchmark_empty  thrpt   30  4203383.812 ± 86506.219  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_emptyIdentityMapped$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_emptyIdentityMapped

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 598836.455 ops/s
# Warmup Iteration   2: 2366619.721 ops/s
# Warmup Iteration   3: 2440507.485 ops/s
# Warmup Iteration   4: 3007847.889 ops/s
# Warmup Iteration   5: 2976904.955 ops/s
# Warmup Iteration   6: 2987889.075 ops/s
# Warmup Iteration   7: 2971643.200 ops/s
# Warmup Iteration   8: 2998335.428 ops/s
# Warmup Iteration   9: 2966569.221 ops/s
# Warmup Iteration  10: 2929694.265 ops/s
# Warmup Iteration  11: 3037026.738 ops/s
# Warmup Iteration  12: 3034498.300 ops/s
# Warmup Iteration  13: 2964026.344 ops/s
# Warmup Iteration  14: 2957393.899 ops/s
# Warmup Iteration  15: 3025074.239 ops/s
# Warmup Iteration  16: 3100877.454 ops/s
# Warmup Iteration  17: 3030323.362 ops/s
# Warmup Iteration  18: 3034750.101 ops/s
# Warmup Iteration  19: 2942960.163 ops/s
# Warmup Iteration  20: 3070126.716 ops/s
# Warmup Iteration  21: 2958004.544 ops/s
# Warmup Iteration  22: 3056726.107 ops/s
# Warmup Iteration  23: 3039711.379 ops/s
# Warmup Iteration  24: 2907129.949 ops/s
# Warmup Iteration  25: 3044311.298 ops/s
# Warmup Iteration  26: 2849641.839 ops/s
# Warmup Iteration  27: 3016219.973 ops/s
# Warmup Iteration  28: 3001225.130 ops/s
# Warmup Iteration  29: 2991715.556 ops/s
# Warmup Iteration  30: 3096528.193 ops/s
Iteration   1: 2972512.434 ops/s
Iteration   2: 3043998.863 ops/s
Iteration   3: 3034209.018 ops/s
Iteration   4: 2958588.361 ops/s
Iteration   5: 3117308.681 ops/s
Iteration   6: 2967947.937 ops/s
Iteration   7: 3106377.030 ops/s
Iteration   8: 3006275.957 ops/s
Iteration   9: 3084148.089 ops/s
Iteration  10: 2986901.364 ops/s
Iteration  11: 3120035.270 ops/s
Iteration  12: 3011768.610 ops/s
Iteration  13: 3029122.926 ops/s
Iteration  14: 3042653.503 ops/s
Iteration  15: 3103141.893 ops/s
Iteration  16: 2965275.494 ops/s
Iteration  17: 2892533.861 ops/s
Iteration  18: 3095720.345 ops/s
Iteration  19: 2948436.040 ops/s
Iteration  20: 3020568.312 ops/s
Iteration  21: 3082291.370 ops/s
Iteration  22: 2968993.455 ops/s
Iteration  23: 3075022.959 ops/s
Iteration  24: 2925149.759 ops/s
Iteration  25: 3027273.318 ops/s
Iteration  26: 2940848.308 ops/s
Iteration  27: 2982255.629 ops/s
Iteration  28: 3096908.981 ops/s
Iteration  29: 3007638.129 ops/s
Iteration  30: 2970540.803 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_emptyIdentityMapped":
  3019481.557 ±(99.9%) 41940.448 ops/s [Average]
  (min, avg, max) = (2892533.861, 3019481.557, 3120035.270), stdev = 62774.493
  CI (99.9%): [2977541.109, 3061422.005] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_emptyIdentityMapped  thrpt   30  3019481.557 ± 41940.448  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_backpressuredEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_backpressuredEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1290425.942 ops/s
# Warmup Iteration   2: 2632156.454 ops/s
# Warmup Iteration   3: 2864791.846 ops/s
# Warmup Iteration   4: 2574395.233 ops/s
# Warmup Iteration   5: 3151301.432 ops/s
# Warmup Iteration   6: 3160356.447 ops/s
# Warmup Iteration   7: 3358728.742 ops/s
# Warmup Iteration   8: 3245784.907 ops/s
# Warmup Iteration   9: 3240367.460 ops/s
# Warmup Iteration  10: 3317500.826 ops/s
# Warmup Iteration  11: 3157857.490 ops/s
# Warmup Iteration  12: 3284773.217 ops/s
# Warmup Iteration  13: 3385028.369 ops/s
# Warmup Iteration  14: 3157213.313 ops/s
# Warmup Iteration  15: 3408257.709 ops/s
# Warmup Iteration  16: 3194311.208 ops/s
# Warmup Iteration  17: 3244292.846 ops/s
# Warmup Iteration  18: 3225625.724 ops/s
# Warmup Iteration  19: 3296264.797 ops/s
# Warmup Iteration  20: 3161658.046 ops/s
# Warmup Iteration  21: 3236827.167 ops/s
# Warmup Iteration  22: 3290950.307 ops/s
# Warmup Iteration  23: 3199606.126 ops/s
# Warmup Iteration  24: 3170462.984 ops/s
# Warmup Iteration  25: 3199315.813 ops/s
# Warmup Iteration  26: 3234666.318 ops/s
# Warmup Iteration  27: 3241514.216 ops/s
# Warmup Iteration  28: 3196911.621 ops/s
# Warmup Iteration  29: 3188875.766 ops/s
# Warmup Iteration  30: 3257804.407 ops/s
Iteration   1: 3403048.259 ops/s
Iteration   2: 3274013.005 ops/s
Iteration   3: 3132765.022 ops/s
Iteration   4: 3328429.285 ops/s
Iteration   5: 3110640.098 ops/s
Iteration   6: 3291366.409 ops/s
Iteration   7: 3158520.587 ops/s
Iteration   8: 3154901.472 ops/s
Iteration   9: 3318816.684 ops/s
Iteration  10: 3112413.637 ops/s
Iteration  11: 3318637.026 ops/s
Iteration  12: 3221871.665 ops/s
Iteration  13: 3247788.142 ops/s
Iteration  14: 3192244.538 ops/s
Iteration  15: 3218265.996 ops/s
Iteration  16: 3279667.019 ops/s
Iteration  17: 3168320.504 ops/s
Iteration  18: 3237557.515 ops/s
Iteration  19: 3325935.010 ops/s
Iteration  20: 3301438.802 ops/s
Iteration  21: 3180304.913 ops/s
Iteration  22: 3360433.771 ops/s
Iteration  23: 3220157.835 ops/s
Iteration  24: 3279338.511 ops/s
Iteration  25: 3171299.216 ops/s
Iteration  26: 3311775.277 ops/s
Iteration  27: 3218044.253 ops/s
Iteration  28: 3300893.576 ops/s
Iteration  29: 3250271.212 ops/s
Iteration  30: 3208329.696 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_backpressuredEmpty":
  3243249.631 ±(99.9%) 50375.684 ops/s [Average]
  (min, avg, max) = (3110640.098, 3243249.631, 3403048.259), stdev = 75399.959
  CI (99.9%): [3192873.947, 3293625.316] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_backpressuredEmpty  thrpt   30  3243249.631 ± 50375.684  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapEmptyNoRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapEmptyNoRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 482629.289 ops/s
# Warmup Iteration   2: 1583759.927 ops/s
# Warmup Iteration   3: 2496260.652 ops/s
# Warmup Iteration   4: 2430969.344 ops/s
# Warmup Iteration   5: 2403525.641 ops/s
# Warmup Iteration   6: 2387096.520 ops/s
# Warmup Iteration   7: 2448390.831 ops/s
# Warmup Iteration   8: 2423615.752 ops/s
# Warmup Iteration   9: 2467460.782 ops/s
# Warmup Iteration  10: 2347570.033 ops/s
# Warmup Iteration  11: 2380183.024 ops/s
# Warmup Iteration  12: 2624439.272 ops/s
# Warmup Iteration  13: 2286574.197 ops/s
# Warmup Iteration  14: 2458196.275 ops/s
# Warmup Iteration  15: 2483082.229 ops/s
# Warmup Iteration  16: 2339473.964 ops/s
# Warmup Iteration  17: 2514959.872 ops/s
# Warmup Iteration  18: 2401321.852 ops/s
# Warmup Iteration  19: 2365621.087 ops/s
# Warmup Iteration  20: 2554069.120 ops/s
# Warmup Iteration  21: 2323906.247 ops/s
# Warmup Iteration  22: 2419641.821 ops/s
# Warmup Iteration  23: 2534218.970 ops/s
# Warmup Iteration  24: 2366292.337 ops/s
# Warmup Iteration  25: 2479574.331 ops/s
# Warmup Iteration  26: 2423094.657 ops/s
# Warmup Iteration  27: 2349752.716 ops/s
# Warmup Iteration  28: 2390566.252 ops/s
# Warmup Iteration  29: 2446279.871 ops/s
# Warmup Iteration  30: 2378319.494 ops/s
Iteration   1: 2501003.604 ops/s
Iteration   2: 2359682.747 ops/s
Iteration   3: 2517386.707 ops/s
Iteration   4: 2349322.498 ops/s
Iteration   5: 2364316.283 ops/s
Iteration   6: 2436124.486 ops/s
Iteration   7: 2400930.968 ops/s
Iteration   8: 2402298.759 ops/s
Iteration   9: 2504806.757 ops/s
Iteration  10: 2362515.308 ops/s
Iteration  11: 2413705.481 ops/s
Iteration  12: 2501642.739 ops/s
Iteration  13: 2349143.471 ops/s
Iteration  14: 2455312.733 ops/s
Iteration  15: 2391334.979 ops/s
Iteration  16: 2438683.884 ops/s
Iteration  17: 2437162.855 ops/s
Iteration  18: 2339544.145 ops/s
Iteration  19: 2538238.532 ops/s
Iteration  20: 2477594.032 ops/s
Iteration  21: 2344854.093 ops/s
Iteration  22: 2462316.912 ops/s
Iteration  23: 2414562.197 ops/s
Iteration  24: 2444174.426 ops/s
Iteration  25: 2424032.451 ops/s
Iteration  26: 2502969.895 ops/s
Iteration  27: 2390248.208 ops/s
Iteration  28: 2409630.246 ops/s
Iteration  29: 2518400.729 ops/s
Iteration  30: 2341396.895 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_overlapEmptyNoRequest":
  2426444.567 ±(99.9%) 40768.667 ops/s [Average]
  (min, avg, max) = (2339544.145, 2426444.567, 2538238.532), stdev = 61020.627
  CI (99.9%): [2385675.900, 2467213.235] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_overlapEmptyNoRequest  thrpt   30  2426444.567 ± 40768.667  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperToEmpty$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperToEmpty

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3945997.843 ops/s
# Warmup Iteration   2: 7385011.654 ops/s
# Warmup Iteration   3: 10159356.570 ops/s
# Warmup Iteration   4: 10346852.392 ops/s
# Warmup Iteration   5: 10639769.456 ops/s
# Warmup Iteration   6: 10103065.924 ops/s
# Warmup Iteration   7: 10617983.668 ops/s
# Warmup Iteration   8: 10295940.118 ops/s
# Warmup Iteration   9: 10290522.558 ops/s
# Warmup Iteration  10: 10521891.225 ops/s
# Warmup Iteration  11: 10255602.574 ops/s
# Warmup Iteration  12: 10307689.999 ops/s
# Warmup Iteration  13: 10483075.342 ops/s
# Warmup Iteration  14: 10098924.571 ops/s
# Warmup Iteration  15: 10410893.081 ops/s
# Warmup Iteration  16: 10884367.091 ops/s
# Warmup Iteration  17: 10210997.375 ops/s
# Warmup Iteration  18: 10560270.410 ops/s
# Warmup Iteration  19: 10558382.483 ops/s
# Warmup Iteration  20: 10385922.129 ops/s
# Warmup Iteration  21: 10479614.103 ops/s
# Warmup Iteration  22: 10208136.057 ops/s
# Warmup Iteration  23: 10604163.938 ops/s
# Warmup Iteration  24: 10511518.792 ops/s
# Warmup Iteration  25: 10330172.863 ops/s
# Warmup Iteration  26: 10654976.792 ops/s
# Warmup Iteration  27: 9988180.987 ops/s
# Warmup Iteration  28: 10550843.598 ops/s
# Warmup Iteration  29: 10741168.312 ops/s
# Warmup Iteration  30: 10115758.504 ops/s
Iteration   1: 10527606.489 ops/s
Iteration   2: 10197200.992 ops/s
Iteration   3: 10541773.699 ops/s
Iteration   4: 10182656.642 ops/s
Iteration   5: 10152840.493 ops/s
Iteration   6: 10918213.860 ops/s
Iteration   7: 10407182.251 ops/s
Iteration   8: 10428697.197 ops/s
Iteration   9: 10565932.118 ops/s
Iteration  10: 10607042.121 ops/s
Iteration  11: 10433170.728 ops/s
Iteration  12: 10565421.919 ops/s
Iteration  13: 10307769.968 ops/s
Iteration  14: 10683924.908 ops/s
Iteration  15: 10630981.734 ops/s
Iteration  16: 10623557.750 ops/s
Iteration  17: 10423747.850 ops/s
Iteration  18: 10672402.892 ops/s
Iteration  19: 10961292.606 ops/s
Iteration  20: 10121608.422 ops/s
Iteration  21: 10770202.278 ops/s
Iteration  22: 10374437.046 ops/s
Iteration  23: 10425981.851 ops/s
Iteration  24: 10460767.488 ops/s
Iteration  25: 10238655.279 ops/s
Iteration  26: 10834940.351 ops/s
Iteration  27: 10198709.331 ops/s
Iteration  28: 10437046.714 ops/s
Iteration  29: 10650544.331 ops/s
Iteration  30: 10275486.415 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScalarXMapTest._Benchmark.benchmark_mapperToEmpty":
  10487326.524 ±(99.9%) 150040.009 ops/s [Average]
  (min, avg, max) = (10121608.422, 10487326.524, 10961292.606), stdev = 224572.839
  CI (99.9%): [10337286.515, 10637366.533] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt         Score        Error  Units
FlowableScalarXMapTest._Benchmark.benchmark_mapperToEmpty  thrpt   30  10487326.524 ± 150040.009  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 106415.066 ops/s
# Warmup Iteration   2: 520805.845 ops/s
# Warmup Iteration   3: 615914.143 ops/s
# Warmup Iteration   4: 616350.902 ops/s
# Warmup Iteration   5: 645832.912 ops/s
# Warmup Iteration   6: 633851.151 ops/s
# Warmup Iteration   7: 653853.094 ops/s
# Warmup Iteration   8: 623416.178 ops/s
# Warmup Iteration   9: 592436.832 ops/s
# Warmup Iteration  10: 650237.748 ops/s
# Warmup Iteration  11: 595559.535 ops/s
# Warmup Iteration  12: 627597.863 ops/s
# Warmup Iteration  13: 608963.334 ops/s
# Warmup Iteration  14: 602512.199 ops/s
# Warmup Iteration  15: 629356.108 ops/s
# Warmup Iteration  16: 636563.092 ops/s
# Warmup Iteration  17: 631977.026 ops/s
# Warmup Iteration  18: 637624.494 ops/s
# Warmup Iteration  19: 662397.620 ops/s
# Warmup Iteration  20: 636297.740 ops/s
# Warmup Iteration  21: 668579.164 ops/s
# Warmup Iteration  22: 663529.132 ops/s
# Warmup Iteration  23: 631321.382 ops/s
# Warmup Iteration  24: 648689.482 ops/s
# Warmup Iteration  25: 670945.707 ops/s
# Warmup Iteration  26: 621633.310 ops/s
# Warmup Iteration  27: 673295.942 ops/s
# Warmup Iteration  28: 673542.488 ops/s
# Warmup Iteration  29: 651785.849 ops/s
# Warmup Iteration  30: 638844.588 ops/s
Iteration   1: 669696.284 ops/s
Iteration   2: 630828.654 ops/s
Iteration   3: 661040.215 ops/s
Iteration   4: 660674.931 ops/s
Iteration   5: 635915.605 ops/s
Iteration   6: 667290.514 ops/s
Iteration   7: 644740.527 ops/s
Iteration   8: 651903.975 ops/s
Iteration   9: 632731.502 ops/s
Iteration  10: 666998.342 ops/s
Iteration  11: 671723.869 ops/s
Iteration  12: 625304.052 ops/s
Iteration  13: 668157.271 ops/s
Iteration  14: 654128.315 ops/s
Iteration  15: 650040.261 ops/s
Iteration  16: 661429.589 ops/s
Iteration  17: 651391.451 ops/s
Iteration  18: 675042.094 ops/s
Iteration  19: 648363.660 ops/s
Iteration  20: 645565.689 ops/s
Iteration  21: 680806.768 ops/s
Iteration  22: 631756.247 ops/s
Iteration  23: 652733.275 ops/s
Iteration  24: 651201.314 ops/s
Iteration  25: 656185.543 ops/s
Iteration  26: 570981.224 ops/s
Iteration  27: 638481.306 ops/s
Iteration  28: 666579.212 ops/s
Iteration  29: 635463.521 ops/s
Iteration  30: 646667.231 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_error":
  650127.415 ±(99.9%) 13882.124 ops/s [Average]
  (min, avg, max) = (570981.224, 650127.415, 680806.768), stdev = 20778.112
  CI (99.9%): [636245.290, 664009.539] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_error  thrpt   30  650127.415 ± 13882.124  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_upstreamFailsBeforeFirstWindow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_upstreamFailsBeforeFirstWindow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 79969.581 ops/s
# Warmup Iteration   2: 440169.816 ops/s
# Warmup Iteration   3: 574932.182 ops/s
# Warmup Iteration   4: 528690.411 ops/s
# Warmup Iteration   5: 569337.714 ops/s
# Warmup Iteration   6: 548643.409 ops/s
# Warmup Iteration   7: 523070.091 ops/s
# Warmup Iteration   8: 565878.820 ops/s
# Warmup Iteration   9: 552663.792 ops/s
# Warmup Iteration  10: 566210.530 ops/s
# Warmup Iteration  11: 544981.641 ops/s
# Warmup Iteration  12: 553314.283 ops/s
# Warmup Iteration  13: 571735.682 ops/s
# Warmup Iteration  14: 568719.638 ops/s
# Warmup Iteration  15: 505201.435 ops/s
# Warmup Iteration  16: 539294.655 ops/s
# Warmup Iteration  17: 571450.930 ops/s
# Warmup Iteration  18: 584260.470 ops/s
# Warmup Iteration  19: 613667.861 ops/s
# Warmup Iteration  20: 601501.357 ops/s
# Warmup Iteration  21: 573114.074 ops/s
# Warmup Iteration  22: 600445.845 ops/s
# Warmup Iteration  23: 572899.730 ops/s
# Warmup Iteration  24: 570505.344 ops/s
# Warmup Iteration  25: 577266.294 ops/s
# Warmup Iteration  26: 600569.883 ops/s
# Warmup Iteration  27: 600586.406 ops/s
# Warmup Iteration  28: 607517.108 ops/s
# Warmup Iteration  29: 578110.742 ops/s
# Warmup Iteration  30: 582877.240 ops/s
Iteration   1: 612370.626 ops/s
Iteration   2: 557363.634 ops/s
Iteration   3: 574157.525 ops/s
Iteration   4: 587255.564 ops/s
Iteration   5: 569223.806 ops/s
Iteration   6: 578397.375 ops/s
Iteration   7: 605278.940 ops/s
Iteration   8: 577831.734 ops/s
Iteration   9: 599144.242 ops/s
Iteration  10: 576440.941 ops/s
Iteration  11: 608278.856 ops/s
Iteration  12: 586521.041 ops/s
Iteration  13: 577217.355 ops/s
Iteration  14: 591319.397 ops/s
Iteration  15: 598732.931 ops/s
Iteration  16: 559690.240 ops/s
Iteration  17: 584072.096 ops/s
Iteration  18: 570511.084 ops/s
Iteration  19: 600806.813 ops/s
Iteration  20: 582352.968 ops/s
Iteration  21: 590820.581 ops/s
Iteration  22: 615236.377 ops/s
Iteration  23: 578374.564 ops/s
Iteration  24: 569615.304 ops/s
Iteration  25: 598918.584 ops/s
Iteration  26: 592939.121 ops/s
Iteration  27: 598069.044 ops/s
Iteration  28: 604079.552 ops/s
Iteration  29: 585614.997 ops/s
Iteration  30: 574627.224 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_upstreamFailsBeforeFirstWindow":
  586842.084 ±(99.9%) 10103.531 ops/s [Average]
  (min, avg, max) = (557363.634, 586842.084, 615236.377), stdev = 15122.490
  CI (99.9%): [576738.553, 596945.615] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score       Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_upstreamFailsBeforeFirstWindow  thrpt   30  586842.084 ± 10103.531  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_publishFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_publishFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 288885.756 ops/s
# Warmup Iteration   2: 546429.161 ops/s
# Warmup Iteration   3: 607771.579 ops/s
# Warmup Iteration   4: 584549.910 ops/s
# Warmup Iteration   5: 658336.750 ops/s
# Warmup Iteration   6: 515347.968 ops/s
# Warmup Iteration   7: 653389.196 ops/s
# Warmup Iteration   8: 659518.950 ops/s
# Warmup Iteration   9: 613319.793 ops/s
# Warmup Iteration  10: 644276.742 ops/s
# Warmup Iteration  11: 659268.013 ops/s
# Warmup Iteration  12: 618963.407 ops/s
# Warmup Iteration  13: 656495.421 ops/s
# Warmup Iteration  14: 654648.084 ops/s
# Warmup Iteration  15: 630467.768 ops/s
# Warmup Iteration  16: 655589.372 ops/s
# Warmup Iteration  17: 656011.294 ops/s
# Warmup Iteration  18: 671123.023 ops/s
# Warmup Iteration  19: 708478.329 ops/s
# Warmup Iteration  20: 644814.943 ops/s
# Warmup Iteration  21: 685948.018 ops/s
# Warmup Iteration  22: 676518.812 ops/s
# Warmup Iteration  23: 643625.836 ops/s
# Warmup Iteration  24: 673997.099 ops/s
# Warmup Iteration  25: 691472.829 ops/s
# Warmup Iteration  26: 655756.563 ops/s
# Warmup Iteration  27: 692680.897 ops/s
# Warmup Iteration  28: 652908.250 ops/s
# Warmup Iteration  29: 675283.305 ops/s
# Warmup Iteration  30: 698724.872 ops/s
Iteration   1: 635237.412 ops/s
Iteration   2: 691886.387 ops/s
Iteration   3: 650263.228 ops/s
Iteration   4: 676924.318 ops/s
Iteration   5: 673321.952 ops/s
Iteration   6: 690774.578 ops/s
Iteration   7: 683171.879 ops/s
Iteration   8: 656287.963 ops/s
Iteration   9: 684045.247 ops/s
Iteration  10: 662278.746 ops/s
Iteration  11: 658843.187 ops/s
Iteration  12: 680869.381 ops/s
Iteration  13: 644896.920 ops/s
Iteration  14: 655562.925 ops/s
Iteration  15: 649432.911 ops/s
Iteration  16: 679209.118 ops/s
Iteration  17: 657374.245 ops/s
Iteration  18: 649474.135 ops/s
Iteration  19: 684134.039 ops/s
Iteration  20: 576313.076 ops/s
Iteration  21: 657649.590 ops/s
Iteration  22: 676875.590 ops/s
Iteration  23: 686541.591 ops/s
Iteration  24: 659479.199 ops/s
Iteration  25: 690198.176 ops/s
Iteration  26: 665462.472 ops/s
Iteration  27: 690586.533 ops/s
Iteration  28: 666739.036 ops/s
Iteration  29: 648282.062 ops/s
Iteration  30: 697718.318 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_publishFunctionReturnsNull":
  665994.474 ±(99.9%) 15955.066 ops/s [Average]
  (min, avg, max) = (576313.076, 665994.474, 697718.318), stdev = 23880.794
  CI (99.9%): [650039.408, 681949.540] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_publishFunctionReturnsNull  thrpt   30  665994.474 ± 15955.066  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerOnCompleteDisposerCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerOnCompleteDisposerCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 137307.080 ops/s
# Warmup Iteration   2: 483174.287 ops/s
# Warmup Iteration   3: 491092.174 ops/s
# Warmup Iteration   4: 526062.332 ops/s
# Warmup Iteration   5: 560046.225 ops/s
# Warmup Iteration   6: 543977.047 ops/s
# Warmup Iteration   7: 530984.776 ops/s
# Warmup Iteration   8: 547951.537 ops/s
# Warmup Iteration   9: 535801.828 ops/s
# Warmup Iteration  10: 519065.658 ops/s
# Warmup Iteration  11: 541002.091 ops/s
# Warmup Iteration  12: 515633.932 ops/s
# Warmup Iteration  13: 532572.408 ops/s
# Warmup Iteration  14: 535775.079 ops/s
# Warmup Iteration  15: 523569.822 ops/s
# Warmup Iteration  16: 545228.988 ops/s
# Warmup Iteration  17: 559956.934 ops/s
# Warmup Iteration  18: 542158.665 ops/s
# Warmup Iteration  19: 584684.596 ops/s
# Warmup Iteration  20: 566748.635 ops/s
# Warmup Iteration  21: 551837.218 ops/s
# Warmup Iteration  22: 555078.785 ops/s
# Warmup Iteration  23: 581199.524 ops/s
# Warmup Iteration  24: 549125.252 ops/s
# Warmup Iteration  25: 552809.700 ops/s
# Warmup Iteration  26: 565181.581 ops/s
# Warmup Iteration  27: 532290.686 ops/s
# Warmup Iteration  28: 582719.719 ops/s
# Warmup Iteration  29: 542350.216 ops/s
# Warmup Iteration  30: 569016.744 ops/s
Iteration   1: 578809.756 ops/s
Iteration   2: 573544.736 ops/s
Iteration   3: 547835.327 ops/s
Iteration   4: 586396.064 ops/s
Iteration   5: 569558.430 ops/s
Iteration   6: 568073.989 ops/s
Iteration   7: 559337.199 ops/s
Iteration   8: 573812.288 ops/s
Iteration   9: 548540.700 ops/s
Iteration  10: 575936.733 ops/s
Iteration  11: 556710.827 ops/s
Iteration  12: 578301.243 ops/s
Iteration  13: 553879.591 ops/s
Iteration  14: 570312.197 ops/s
Iteration  15: 558508.847 ops/s
Iteration  16: 547571.455 ops/s
Iteration  17: 563852.546 ops/s
Iteration  18: 572445.089 ops/s
Iteration  19: 569293.200 ops/s
Iteration  20: 569016.241 ops/s
Iteration  21: 562262.732 ops/s
Iteration  22: 575636.282 ops/s
Iteration  23: 561045.930 ops/s
Iteration  24: 582326.035 ops/s
Iteration  25: 552613.928 ops/s
Iteration  26: 567978.069 ops/s
Iteration  27: 584336.968 ops/s
Iteration  28: 545715.499 ops/s
Iteration  29: 573879.307 ops/s
Iteration  30: 575804.578 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerOnCompleteDisposerCrash":
  566777.860 ±(99.9%) 7674.656 ops/s [Average]
  (min, avg, max) = (545715.499, 566777.860, 586396.064), stdev = 11487.064
  CI (99.9%): [559103.204, 574452.515] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableUsingTest._Benchmark.benchmark_eagerOnCompleteDisposerCrash  thrpt   30  566777.860 ± 7674.656  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onCompleteThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onCompleteThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 86409.290 ops/s
# Warmup Iteration   2: 195498.867 ops/s
# Warmup Iteration   3: 260945.433 ops/s
# Warmup Iteration   4: 246003.351 ops/s
# Warmup Iteration   5: 240557.148 ops/s
# Warmup Iteration   6: 250209.530 ops/s
# Warmup Iteration   7: 241719.484 ops/s
# Warmup Iteration   8: 244642.991 ops/s
# Warmup Iteration   9: 253403.329 ops/s
# Warmup Iteration  10: 252298.018 ops/s
# Warmup Iteration  11: 254088.072 ops/s
# Warmup Iteration  12: 253812.221 ops/s
# Warmup Iteration  13: 263380.547 ops/s
# Warmup Iteration  14: 248505.471 ops/s
# Warmup Iteration  15: 255729.313 ops/s
# Warmup Iteration  16: 249996.525 ops/s
# Warmup Iteration  17: 266522.137 ops/s
# Warmup Iteration  18: 268734.160 ops/s
# Warmup Iteration  19: 263914.121 ops/s
# Warmup Iteration  20: 265682.826 ops/s
# Warmup Iteration  21: 262998.069 ops/s
# Warmup Iteration  22: 276257.479 ops/s
# Warmup Iteration  23: 261708.024 ops/s
# Warmup Iteration  24: 264510.268 ops/s
# Warmup Iteration  25: 274765.940 ops/s
# Warmup Iteration  26: 265012.513 ops/s
# Warmup Iteration  27: 267448.603 ops/s
# Warmup Iteration  28: 273020.981 ops/s
# Warmup Iteration  29: 259623.447 ops/s
# Warmup Iteration  30: 275132.732 ops/s
Iteration   1: 264369.580 ops/s
Iteration   2: 268350.207 ops/s
Iteration   3: 278630.706 ops/s
Iteration   4: 259972.836 ops/s
Iteration   5: 267423.642 ops/s
Iteration   6: 265276.342 ops/s
Iteration   7: 271931.957 ops/s
Iteration   8: 255631.595 ops/s
Iteration   9: 265793.375 ops/s
Iteration  10: 259186.420 ops/s
Iteration  11: 270001.521 ops/s
Iteration  12: 273711.302 ops/s
Iteration  13: 276454.958 ops/s
Iteration  14: 262987.841 ops/s
Iteration  15: 193334.732 ops/s
Iteration  16: 271623.475 ops/s
Iteration  17: 259724.897 ops/s
Iteration  18: 266266.962 ops/s
Iteration  19: 277680.266 ops/s
Iteration  20: 253423.456 ops/s
Iteration  21: 267469.762 ops/s
Iteration  22: 266156.210 ops/s
Iteration  23: 262396.327 ops/s
Iteration  24: 270431.168 ops/s
Iteration  25: 253573.458 ops/s
Iteration  26: 274611.335 ops/s
Iteration  27: 262883.193 ops/s
Iteration  28: 264702.704 ops/s
Iteration  29: 277346.491 ops/s
Iteration  30: 263166.958 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BoundedSubscriberTest._Benchmark.benchmark_onCompleteThrows":
  264150.456 ±(99.9%) 10036.613 ops/s [Average]
  (min, avg, max) = (193334.732, 264150.456, 278630.706), stdev = 15022.330
  CI (99.9%): [254113.843, 274187.069] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
BoundedSubscriberTest._Benchmark.benchmark_onCompleteThrows  thrpt   30  264150.456 ± 10036.613  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_doubleOnSubscribeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_doubleOnSubscribeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112070.138 ops/s
# Warmup Iteration   2: 348003.826 ops/s
# Warmup Iteration   3: 391998.095 ops/s
# Warmup Iteration   4: 358479.360 ops/s
# Warmup Iteration   5: 394863.170 ops/s
# Warmup Iteration   6: 362959.397 ops/s
# Warmup Iteration   7: 391119.926 ops/s
# Warmup Iteration   8: 413277.653 ops/s
# Warmup Iteration   9: 344600.864 ops/s
# Warmup Iteration  10: 395582.919 ops/s
# Warmup Iteration  11: 399871.403 ops/s
# Warmup Iteration  12: 389540.203 ops/s
# Warmup Iteration  13: 392957.955 ops/s
# Warmup Iteration  14: 409386.898 ops/s
# Warmup Iteration  15: 393878.418 ops/s
# Warmup Iteration  16: 405407.779 ops/s
# Warmup Iteration  17: 426568.745 ops/s
# Warmup Iteration  18: 399909.374 ops/s
# Warmup Iteration  19: 425205.139 ops/s
# Warmup Iteration  20: 402219.560 ops/s
# Warmup Iteration  21: 417992.271 ops/s
# Warmup Iteration  22: 404428.502 ops/s
# Warmup Iteration  23: 418886.420 ops/s
# Warmup Iteration  24: 409743.288 ops/s
# Warmup Iteration  25: 399508.680 ops/s
# Warmup Iteration  26: 407283.031 ops/s
# Warmup Iteration  27: 425477.605 ops/s
# Warmup Iteration  28: 396709.550 ops/s
# Warmup Iteration  29: 427785.469 ops/s
# Warmup Iteration  30: 408089.649 ops/s
Iteration   1: 398374.691 ops/s
Iteration   2: 425432.411 ops/s
Iteration   3: 418917.576 ops/s
Iteration   4: 401736.492 ops/s
Iteration   5: 416233.718 ops/s
Iteration   6: 401492.169 ops/s
Iteration   7: 414351.612 ops/s
Iteration   8: 413445.637 ops/s
Iteration   9: 402370.020 ops/s
Iteration  10: 420019.543 ops/s
Iteration  11: 401241.938 ops/s
Iteration  12: 418024.604 ops/s
Iteration  13: 412973.914 ops/s
Iteration  14: 409666.393 ops/s
Iteration  15: 418246.929 ops/s
Iteration  16: 424956.861 ops/s
Iteration  17: 396587.191 ops/s
Iteration  18: 417915.800 ops/s
Iteration  19: 421159.222 ops/s
Iteration  20: 406742.545 ops/s
Iteration  21: 421188.177 ops/s
Iteration  22: 406397.495 ops/s
Iteration  23: 425164.769 ops/s
Iteration  24: 404416.651 ops/s
Iteration  25: 425659.577 ops/s
Iteration  26: 411055.372 ops/s
Iteration  27: 409542.042 ops/s
Iteration  28: 417894.021 ops/s
Iteration  29: 395942.189 ops/s
Iteration  30: 425613.131 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_doubleOnSubscribeMain":
  412758.756 ±(99.9%) 6280.309 ops/s [Average]
  (min, avg, max) = (395942.189, 412758.756, 425659.577), stdev = 9400.072
  CI (99.9%): [406478.447, 419039.065] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_doubleOnSubscribeMain  thrpt   30  412758.756 ± 6280.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 81101.515 ops/s
# Warmup Iteration   2: 345104.641 ops/s
# Warmup Iteration   3: 444636.320 ops/s
# Warmup Iteration   4: 454560.287 ops/s
# Warmup Iteration   5: 433247.579 ops/s
# Warmup Iteration   6: 433492.191 ops/s
# Warmup Iteration   7: 458721.949 ops/s
# Warmup Iteration   8: 456256.310 ops/s
# Warmup Iteration   9: 441821.552 ops/s
# Warmup Iteration  10: 457473.558 ops/s
# Warmup Iteration  11: 453502.084 ops/s
# Warmup Iteration  12: 447123.971 ops/s
# Warmup Iteration  13: 476575.742 ops/s
# Warmup Iteration  14: 451778.184 ops/s
# Warmup Iteration  15: 476688.317 ops/s
# Warmup Iteration  16: 469811.872 ops/s
# Warmup Iteration  17: 457595.939 ops/s
# Warmup Iteration  18: 473983.607 ops/s
# Warmup Iteration  19: 499199.887 ops/s
# Warmup Iteration  20: 452769.003 ops/s
# Warmup Iteration  21: 462954.369 ops/s
# Warmup Iteration  22: 498248.511 ops/s
# Warmup Iteration  23: 453440.780 ops/s
# Warmup Iteration  24: 478666.341 ops/s
# Warmup Iteration  25: 464430.080 ops/s
# Warmup Iteration  26: 469235.156 ops/s
# Warmup Iteration  27: 480776.814 ops/s
# Warmup Iteration  28: 478426.462 ops/s
# Warmup Iteration  29: 472258.051 ops/s
# Warmup Iteration  30: 502934.801 ops/s
Iteration   1: 458530.347 ops/s
Iteration   2: 470008.001 ops/s
Iteration   3: 490322.322 ops/s
Iteration   4: 459385.066 ops/s
Iteration   5: 481159.600 ops/s
Iteration   6: 488417.890 ops/s
Iteration   7: 458336.095 ops/s
Iteration   8: 476091.081 ops/s
Iteration   9: 460671.411 ops/s
Iteration  10: 402553.305 ops/s
Iteration  11: 487039.562 ops/s
Iteration  12: 455652.280 ops/s
Iteration  13: 455244.021 ops/s
Iteration  14: 464164.275 ops/s
Iteration  15: 492950.042 ops/s
Iteration  16: 469606.617 ops/s
Iteration  17: 481186.102 ops/s
Iteration  18: 491777.664 ops/s
Iteration  19: 482929.821 ops/s
Iteration  20: 468952.513 ops/s
Iteration  21: 488657.815 ops/s
Iteration  22: 473170.590 ops/s
Iteration  23: 477416.236 ops/s
Iteration  24: 474018.126 ops/s
Iteration  25: 477604.766 ops/s
Iteration  26: 477427.425 ops/s
Iteration  27: 465010.347 ops/s
Iteration  28: 487097.160 ops/s
Iteration  29: 445452.455 ops/s
Iteration  30: 466453.830 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_doubleOnSubscribe":
  470909.559 ±(99.9%) 12043.042 ops/s [Average]
  (min, avg, max) = (402553.305, 470909.559, 492950.042), stdev = 18025.460
  CI (99.9%): [458866.516, 482952.601] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score       Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  470909.559 ± 12043.042  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_emptyFused$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_emptyFused

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 462141.863 ops/s
# Warmup Iteration   2: 1579368.750 ops/s
# Warmup Iteration   3: 1926053.596 ops/s
# Warmup Iteration   4: 2148450.484 ops/s
# Warmup Iteration   5: 2302655.739 ops/s
# Warmup Iteration   6: 2310326.103 ops/s
# Warmup Iteration   7: 2174851.824 ops/s
# Warmup Iteration   8: 2304896.768 ops/s
# Warmup Iteration   9: 2222633.518 ops/s
# Warmup Iteration  10: 2209766.389 ops/s
# Warmup Iteration  11: 2295958.162 ops/s
# Warmup Iteration  12: 2181855.248 ops/s
# Warmup Iteration  13: 2358224.503 ops/s
# Warmup Iteration  14: 2317170.268 ops/s
# Warmup Iteration  15: 2180845.405 ops/s
# Warmup Iteration  16: 2241905.800 ops/s
# Warmup Iteration  17: 2233428.177 ops/s
# Warmup Iteration  18: 2305890.286 ops/s
# Warmup Iteration  19: 2348601.534 ops/s
# Warmup Iteration  20: 2214910.223 ops/s
# Warmup Iteration  21: 2245318.721 ops/s
# Warmup Iteration  22: 2241016.572 ops/s
# Warmup Iteration  23: 2333797.435 ops/s
# Warmup Iteration  24: 2307703.925 ops/s
# Warmup Iteration  25: 2352516.310 ops/s
# Warmup Iteration  26: 2219099.562 ops/s
# Warmup Iteration  27: 2266392.910 ops/s
# Warmup Iteration  28: 2402421.605 ops/s
# Warmup Iteration  29: 2207444.116 ops/s
# Warmup Iteration  30: 2345800.622 ops/s
Iteration   1: 2321336.157 ops/s
Iteration   2: 2249506.532 ops/s
Iteration   3: 2295426.130 ops/s
Iteration   4: 2397950.019 ops/s
Iteration   5: 2351486.035 ops/s
Iteration   6: 2253041.500 ops/s
Iteration   7: 2338528.660 ops/s
Iteration   8: 2368360.323 ops/s
Iteration   9: 2238263.915 ops/s
Iteration  10: 2349131.058 ops/s
Iteration  11: 2415134.117 ops/s
Iteration  12: 2286820.020 ops/s
Iteration  13: 2288176.196 ops/s
Iteration  14: 2284876.806 ops/s
Iteration  15: 2303814.460 ops/s
Iteration  16: 2387406.032 ops/s
Iteration  17: 2267520.003 ops/s
Iteration  18: 2336618.065 ops/s
Iteration  19: 2351975.343 ops/s
Iteration  20: 2211632.632 ops/s
Iteration  21: 2319310.248 ops/s
Iteration  22: 2282644.078 ops/s
Iteration  23: 2308768.290 ops/s
Iteration  24: 2351253.940 ops/s
Iteration  25: 2287630.346 ops/s
Iteration  26: 2349991.709 ops/s
Iteration  27: 2307805.517 ops/s
Iteration  28: 2284301.634 ops/s
Iteration  29: 2264257.805 ops/s
Iteration  30: 2336779.735 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_emptyFused":
  2312991.577 ±(99.9%) 32381.201 ops/s [Average]
  (min, avg, max) = (2211632.632, 2312991.577, 2415134.117), stdev = 48466.662
  CI (99.9%): [2280610.375, 2345372.778] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_emptyFused  thrpt   30  2312991.577 ± 32381.201  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeOnArrival2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeOnArrival2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 691944.606 ops/s
# Warmup Iteration   2: 2367148.675 ops/s
# Warmup Iteration   3: 2846274.391 ops/s
# Warmup Iteration   4: 3063499.134 ops/s
# Warmup Iteration   5: 3318653.108 ops/s
# Warmup Iteration   6: 3164912.106 ops/s
# Warmup Iteration   7: 3139977.558 ops/s
# Warmup Iteration   8: 3169534.276 ops/s
# Warmup Iteration   9: 3294550.260 ops/s
# Warmup Iteration  10: 3197097.995 ops/s
# Warmup Iteration  11: 3309066.164 ops/s
# Warmup Iteration  12: 3102825.437 ops/s
# Warmup Iteration  13: 3248852.109 ops/s
# Warmup Iteration  14: 3193306.573 ops/s
# Warmup Iteration  15: 3180495.542 ops/s
# Warmup Iteration  16: 3267830.444 ops/s
# Warmup Iteration  17: 3210750.598 ops/s
# Warmup Iteration  18: 3331467.221 ops/s
# Warmup Iteration  19: 3155165.283 ops/s
# Warmup Iteration  20: 3273080.452 ops/s
# Warmup Iteration  21: 3207351.967 ops/s
# Warmup Iteration  22: 3221478.297 ops/s
# Warmup Iteration  23: 3245979.078 ops/s
# Warmup Iteration  24: 3090948.402 ops/s
# Warmup Iteration  25: 3201243.071 ops/s
# Warmup Iteration  26: 3264070.261 ops/s
# Warmup Iteration  27: 3138441.581 ops/s
# Warmup Iteration  28: 3263916.590 ops/s
# Warmup Iteration  29: 3263934.282 ops/s
# Warmup Iteration  30: 3161196.766 ops/s
Iteration   1: 3319849.839 ops/s
Iteration   2: 3274434.246 ops/s
Iteration   3: 3151637.092 ops/s
Iteration   4: 2226870.342 ops/s
Iteration   5: 3314909.230 ops/s
Iteration   6: 3311018.809 ops/s
Iteration   7: 3123539.927 ops/s
Iteration   8: 3251698.821 ops/s
Iteration   9: 3203121.322 ops/s
Iteration  10: 3120414.858 ops/s
Iteration  11: 3214719.857 ops/s
Iteration  12: 3259704.589 ops/s
Iteration  13: 3176318.113 ops/s
Iteration  14: 3237258.718 ops/s
Iteration  15: 3204639.349 ops/s
Iteration  16: 3176415.128 ops/s
Iteration  17: 3299365.471 ops/s
Iteration  18: 3111714.769 ops/s
Iteration  19: 3230408.188 ops/s
Iteration  20: 3356451.272 ops/s
Iteration  21: 3129880.281 ops/s
Iteration  22: 3258052.824 ops/s
Iteration  23: 3106121.593 ops/s
Iteration  24: 3285002.949 ops/s
Iteration  25: 3247561.506 ops/s
Iteration  26: 3185527.673 ops/s
Iteration  27: 3286687.129 ops/s
Iteration  28: 3223226.560 ops/s
Iteration  29: 3253503.418 ops/s
Iteration  30: 3362538.469 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeOnArrival2":
  3196753.078 ±(99.9%) 131463.159 ops/s [Average]
  (min, avg, max) = (2226870.342, 3196753.078, 3362538.469), stdev = 196767.883
  CI (99.9%): [3065289.919, 3328216.238] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score        Error  Units
FlowablePublishTest._Benchmark.benchmark_disposeOnArrival2  thrpt   30  3196753.078 ± 131463.159  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapErrorNoError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapErrorNoError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22945.892 ops/s
# Warmup Iteration   2: 100537.353 ops/s
# Warmup Iteration   3: 128533.678 ops/s
# Warmup Iteration   4: 129753.468 ops/s
# Warmup Iteration   5: 133973.467 ops/s
# Warmup Iteration   6: 136141.185 ops/s
# Warmup Iteration   7: 139125.716 ops/s
# Warmup Iteration   8: 136040.573 ops/s
# Warmup Iteration   9: 119507.632 ops/s
# Warmup Iteration  10: 127560.722 ops/s
# Warmup Iteration  11: 137341.393 ops/s
# Warmup Iteration  12: 120495.288 ops/s
# Warmup Iteration  13: 140339.501 ops/s
# Warmup Iteration  14: 130348.690 ops/s
# Warmup Iteration  15: 137629.099 ops/s
# Warmup Iteration  16: 133879.112 ops/s
# Warmup Iteration  17: 141430.359 ops/s
# Warmup Iteration  18: 144732.682 ops/s
# Warmup Iteration  19: 134060.885 ops/s
# Warmup Iteration  20: 141949.419 ops/s
# Warmup Iteration  21: 147837.033 ops/s
# Warmup Iteration  22: 138198.574 ops/s
# Warmup Iteration  23: 137641.400 ops/s
# Warmup Iteration  24: 139929.201 ops/s
# Warmup Iteration  25: 138839.434 ops/s
# Warmup Iteration  26: 141300.477 ops/s
# Warmup Iteration  27: 133308.640 ops/s
# Warmup Iteration  28: 137289.294 ops/s
# Warmup Iteration  29: 144801.632 ops/s
# Warmup Iteration  30: 141050.191 ops/s
Iteration   1: 142496.387 ops/s
Iteration   2: 138858.277 ops/s
Iteration   3: 140240.778 ops/s
Iteration   4: 137079.197 ops/s
Iteration   5: 142712.395 ops/s
Iteration   6: 142601.603 ops/s
Iteration   7: 137599.295 ops/s
Iteration   8: 137160.928 ops/s
Iteration   9: 144532.927 ops/s
Iteration  10: 139005.419 ops/s
Iteration  11: 139022.883 ops/s
Iteration  12: 136547.655 ops/s
Iteration  13: 147419.642 ops/s
Iteration  14: 137397.696 ops/s
Iteration  15: 138453.853 ops/s
Iteration  16: 136894.143 ops/s
Iteration  17: 142522.779 ops/s
Iteration  18: 134104.426 ops/s
Iteration  19: 142367.285 ops/s
Iteration  20: 144872.589 ops/s
Iteration  21: 134051.146 ops/s
Iteration  22: 137361.890 ops/s
Iteration  23: 145785.081 ops/s
Iteration  24: 141697.013 ops/s
Iteration  25: 134314.906 ops/s
Iteration  26: 143248.331 ops/s
Iteration  27: 142332.341 ops/s
Iteration  28: 140239.609 ops/s
Iteration  29: 142964.619 ops/s
Iteration  30: 138319.348 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ParallelMapTryOptionalTest._Benchmark.benchmark_mapErrorNoError":
  140073.481 ±(99.9%) 2358.315 ops/s [Average]
  (min, avg, max) = (134051.146, 140073.481, 147419.642), stdev = 3529.816
  CI (99.9%): [137715.166, 142431.797] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ParallelMapTryOptionalTest._Benchmark.benchmark_mapErrorNoError  thrpt   30  140073.481 ± 2358.315  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeOnArrival$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeOnArrival

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 795027.143 ops/s
# Warmup Iteration   2: 3345877.748 ops/s
# Warmup Iteration   3: 3503596.504 ops/s
# Warmup Iteration   4: 4271318.565 ops/s
# Warmup Iteration   5: 4392123.999 ops/s
# Warmup Iteration   6: 4235711.916 ops/s
# Warmup Iteration   7: 4345159.339 ops/s
# Warmup Iteration   8: 4396210.970 ops/s
# Warmup Iteration   9: 4308189.441 ops/s
# Warmup Iteration  10: 4159907.596 ops/s
# Warmup Iteration  11: 4307149.708 ops/s
# Warmup Iteration  12: 4241825.300 ops/s
# Warmup Iteration  13: 4564818.417 ops/s
# Warmup Iteration  14: 4408316.001 ops/s
# Warmup Iteration  15: 4191999.915 ops/s
# Warmup Iteration  16: 4313805.673 ops/s
# Warmup Iteration  17: 4212692.901 ops/s
# Warmup Iteration  18: 4357507.557 ops/s
# Warmup Iteration  19: 4409392.548 ops/s
# Warmup Iteration  20: 4147978.260 ops/s
# Warmup Iteration  21: 4345666.122 ops/s
# Warmup Iteration  22: 4143591.688 ops/s
# Warmup Iteration  23: 4317154.851 ops/s
# Warmup Iteration  24: 4410794.138 ops/s
# Warmup Iteration  25: 4482035.135 ops/s
# Warmup Iteration  26: 4202244.224 ops/s
# Warmup Iteration  27: 4479275.322 ops/s
# Warmup Iteration  28: 3526819.071 ops/s
# Warmup Iteration  29: 4399723.555 ops/s
# Warmup Iteration  30: 4178160.086 ops/s
Iteration   1: 4208598.026 ops/s
Iteration   2: 4431059.966 ops/s
Iteration   3: 4202322.328 ops/s
Iteration   4: 4272064.634 ops/s
Iteration   5: 4221777.550 ops/s
Iteration   6: 4247321.431 ops/s
Iteration   7: 4276404.803 ops/s
Iteration   8: 4323001.988 ops/s
Iteration   9: 4334585.089 ops/s
Iteration  10: 4463421.354 ops/s
Iteration  11: 4189614.054 ops/s
Iteration  12: 4319169.375 ops/s
Iteration  13: 4473571.752 ops/s
Iteration  14: 4187384.279 ops/s
Iteration  15: 4440065.136 ops/s
Iteration  16: 4160921.192 ops/s
Iteration  17: 4360221.288 ops/s
Iteration  18: 4130722.446 ops/s
Iteration  19: 4496113.515 ops/s
Iteration  20: 4493187.143 ops/s
Iteration  21: 4189918.898 ops/s
Iteration  22: 4361407.040 ops/s
Iteration  23: 4410774.786 ops/s
Iteration  24: 4146380.331 ops/s
Iteration  25: 4463054.416 ops/s
Iteration  26: 4391100.735 ops/s
Iteration  27: 4447810.817 ops/s
Iteration  28: 4244133.368 ops/s
Iteration  29: 4231752.582 ops/s
Iteration  30: 4353296.233 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeOnArrival":
  4315705.219 ±(99.9%) 77263.351 ops/s [Average]
  (min, avg, max) = (4130722.446, 4315705.219, 4496113.515), stdev = 115644.155
  CI (99.9%): [4238441.867, 4392968.570] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_disposeOnArrival  thrpt   30  4315705.219 ± 77263.351  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_transitiveBoundaryFusionAsync$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_transitiveBoundaryFusionAsync

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.830 ops/s
# Warmup Iteration   2: 97107.187 ops/s
# Warmup Iteration   3: 236147.924 ops/s
# Warmup Iteration   4: 342700.439 ops/s
# Warmup Iteration   5: 354858.969 ops/s
# Warmup Iteration   6: 269651.893 ops/s
# Warmup Iteration   7: 495058.508 ops/s
# Warmup Iteration   8: 1186052.080 ops/s
# Warmup Iteration   9: 1120667.401 ops/s
# Warmup Iteration  10: 1188159.662 ops/s
# Warmup Iteration  11: 1118495.262 ops/s
# Warmup Iteration  12: 1116381.420 ops/s
# Warmup Iteration  13: 1176739.172 ops/s
# Warmup Iteration  14: 1117960.962 ops/s
# Warmup Iteration  15: 1135377.307 ops/s
# Warmup Iteration  16: 1170125.764 ops/s
# Warmup Iteration  17: 1121497.715 ops/s
# Warmup Iteration  18: 1179949.651 ops/s
# Warmup Iteration  19: 1171579.271 ops/s
# Warmup Iteration  20: 1117995.490 ops/s
# Warmup Iteration  21: 1204705.229 ops/s
# Warmup Iteration  22: 1168519.207 ops/s
# Warmup Iteration  23: 1092028.186 ops/s
# Warmup Iteration  24: 1163201.389 ops/s
# Warmup Iteration  25: 1136863.975 ops/s
# Warmup Iteration  26: 1121946.454 ops/s
# Warmup Iteration  27: 1128124.541 ops/s
# Warmup Iteration  28: 1160464.395 ops/s
# Warmup Iteration  29: 1107810.154 ops/s
# Warmup Iteration  30: 1144071.811 ops/s
Iteration   1: 1182912.901 ops/s
Iteration   2: 1108886.084 ops/s
Iteration   3: 1172865.436 ops/s
Iteration   4: 1137758.827 ops/s
Iteration   5: 1144290.348 ops/s
Iteration   6: 1148050.025 ops/s
Iteration   7: 1114067.672 ops/s
Iteration   8: 1152661.320 ops/s
Iteration   9: 1130904.196 ops/s
Iteration  10: 1149622.539 ops/s
Iteration  11: 1119694.345 ops/s
Iteration  12: 1187748.139 ops/s
Iteration  13: 1114691.836 ops/s
Iteration  14: 1120767.831 ops/s
Iteration  15: 1185368.865 ops/s
Iteration  16: 1133387.850 ops/s
Iteration  17: 1184921.801 ops/s
Iteration  18: 1083006.035 ops/s
Iteration  19: 1123002.585 ops/s
Iteration  20: 1170234.021 ops/s
Iteration  21: 1152813.122 ops/s
Iteration  22: 1079841.342 ops/s
Iteration  23: 1160528.284 ops/s
Iteration  24: 1097448.278 ops/s
Iteration  25: 1172131.037 ops/s
Iteration  26: 1119428.000 ops/s
Iteration  27: 1146611.900 ops/s
Iteration  28: 1184946.233 ops/s
Iteration  29: 1104729.771 ops/s
Iteration  30: 1163623.803 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_transitiveBoundaryFusionAsync":
  1141564.814 ±(99.9%) 20953.261 ops/s [Average]
  (min, avg, max) = (1079841.342, 1141564.814, 1187748.139), stdev = 31361.857
  CI (99.9%): [1120611.553, 1162518.075] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                   Mode  Cnt        Score       Error  Units
BasicFuseableConditionalSubscriberTest._Benchmark.benchmark_transitiveBoundaryFusionAsync  thrpt   30  1141564.814 ± 20953.261  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredFastPath$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredFastPath

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 7003942.532 ops/s
# Warmup Iteration   2: 12591908.091 ops/s
# Warmup Iteration   3: 16276075.226 ops/s
# Warmup Iteration   4: 17291944.046 ops/s
# Warmup Iteration   5: 17103236.084 ops/s
# Warmup Iteration   6: 16282000.281 ops/s
# Warmup Iteration   7: 17404587.267 ops/s
# Warmup Iteration   8: 16860219.964 ops/s
# Warmup Iteration   9: 17177136.375 ops/s
# Warmup Iteration  10: 17512660.710 ops/s
# Warmup Iteration  11: 17387529.003 ops/s
# Warmup Iteration  12: 16876376.151 ops/s
# Warmup Iteration  13: 16829595.610 ops/s
# Warmup Iteration  14: 17657247.974 ops/s
# Warmup Iteration  15: 16087604.080 ops/s
# Warmup Iteration  16: 17755303.052 ops/s
# Warmup Iteration  17: 16858084.759 ops/s
# Warmup Iteration  18: 16220766.881 ops/s
# Warmup Iteration  19: 17008015.347 ops/s
# Warmup Iteration  20: 17668527.556 ops/s
# Warmup Iteration  21: 16854887.039 ops/s
# Warmup Iteration  22: 14188854.440 ops/s
# Warmup Iteration  23: 16937559.374 ops/s
# Warmup Iteration  24: 16979616.127 ops/s
# Warmup Iteration  25: 17507090.988 ops/s
# Warmup Iteration  26: 17406220.239 ops/s
# Warmup Iteration  27: 17036566.087 ops/s
# Warmup Iteration  28: 16448160.070 ops/s
# Warmup Iteration  29: 17683087.321 ops/s
# Warmup Iteration  30: 17301863.864 ops/s
Iteration   1: 16564270.165 ops/s
Iteration   2: 17925213.010 ops/s
Iteration   3: 16649993.082 ops/s
Iteration   4: 16762405.803 ops/s
Iteration   5: 16816071.153 ops/s
Iteration   6: 17391593.366 ops/s
Iteration   7: 16550079.506 ops/s
Iteration   8: 17996396.908 ops/s
Iteration   9: 16545221.467 ops/s
Iteration  10: 17042311.553 ops/s
Iteration  11: 17561929.251 ops/s
Iteration  12: 16567008.080 ops/s
Iteration  13: 16937992.351 ops/s
Iteration  14: 17358192.793 ops/s
Iteration  15: 16992954.173 ops/s
Iteration  16: 17209661.441 ops/s
Iteration  17: 17026050.082 ops/s
Iteration  18: 17401952.729 ops/s
Iteration  19: 16754823.644 ops/s
Iteration  20: 17244734.840 ops/s
Iteration  21: 17114566.035 ops/s
Iteration  22: 17443128.494 ops/s
Iteration  23: 16751651.922 ops/s
Iteration  24: 16817533.247 ops/s
Iteration  25: 17337239.538 ops/s
Iteration  26: 17359530.479 ops/s
Iteration  27: 16625751.062 ops/s
Iteration  28: 17485667.178 ops/s
Iteration  29: 17542464.905 ops/s
Iteration  30: 16666677.879 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredFastPath":
  17081435.538 ±(99.9%) 274835.579 ops/s [Average]
  (min, avg, max) = (16545221.467, 17081435.538, 17996396.908), stdev = 411360.988
  CI (99.9%): [16806599.959, 17356271.117] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt         Score        Error  Units
ObservableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredFastPath  thrpt   30  17081435.538 ± 274835.579  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_listWithBlockingFirst$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_listWithBlockingFirst

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 320063.261 ops/s
# Warmup Iteration   2: 3510234.025 ops/s
# Warmup Iteration   3: 5538442.349 ops/s
# Warmup Iteration   4: 6133122.591 ops/s
# Warmup Iteration   5: 6638121.541 ops/s
# Warmup Iteration   6: 6165103.124 ops/s
# Warmup Iteration   7: 6404166.504 ops/s
# Warmup Iteration   8: 6495448.575 ops/s
# Warmup Iteration   9: 6207651.481 ops/s
# Warmup Iteration  10: 6340949.863 ops/s
# Warmup Iteration  11: 6292247.430 ops/s
# Warmup Iteration  12: 6249677.784 ops/s
# Warmup Iteration  13: 6496863.390 ops/s
# Warmup Iteration  14: 6134634.963 ops/s
# Warmup Iteration  15: 6473696.582 ops/s
# Warmup Iteration  16: 6421707.690 ops/s
# Warmup Iteration  17: 6238741.737 ops/s
# Warmup Iteration  18: 6536409.796 ops/s
# Warmup Iteration  19: 6399369.508 ops/s
# Warmup Iteration  20: 6296702.861 ops/s
# Warmup Iteration  21: 6560881.985 ops/s
# Warmup Iteration  22: 6120886.494 ops/s
# Warmup Iteration  23: 6312914.772 ops/s
# Warmup Iteration  24: 6412498.759 ops/s
# Warmup Iteration  25: 6323653.590 ops/s
# Warmup Iteration  26: 6499313.783 ops/s
# Warmup Iteration  27: 6437963.732 ops/s
# Warmup Iteration  28: 6344511.065 ops/s
# Warmup Iteration  29: 6464716.728 ops/s
# Warmup Iteration  30: 6232637.678 ops/s
Iteration   1: 6426682.362 ops/s
Iteration   2: 6543564.976 ops/s
Iteration   3: 6242023.211 ops/s
Iteration   4: 6351756.671 ops/s
Iteration   5: 6396809.445 ops/s
Iteration   6: 6377312.178 ops/s
Iteration   7: 6239638.463 ops/s
Iteration   8: 6650582.220 ops/s
Iteration   9: 6401202.302 ops/s
Iteration  10: 6273230.983 ops/s
Iteration  11: 6588573.562 ops/s
Iteration  12: 6250015.900 ops/s
Iteration  13: 6371170.825 ops/s
Iteration  14: 6535147.961 ops/s
Iteration  15: 6226970.825 ops/s
Iteration  16: 6482888.896 ops/s
Iteration  17: 6655569.271 ops/s
Iteration  18: 6219569.714 ops/s
Iteration  19: 6674090.429 ops/s
Iteration  20: 6475703.266 ops/s
Iteration  21: 6322019.594 ops/s
Iteration  22: 6383705.124 ops/s
Iteration  23: 6381180.723 ops/s
Iteration  24: 6375382.329 ops/s
Iteration  25: 6558055.057 ops/s
Iteration  26: 6295682.862 ops/s
Iteration  27: 6611511.929 ops/s
Iteration  28: 6564909.228 ops/s
Iteration  29: 6017436.272 ops/s
Iteration  30: 6468107.094 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableToListTest._Benchmark.benchmark_listWithBlockingFirst":
  6412016.456 ±(99.9%) 104404.111 ops/s [Average]
  (min, avg, max) = (6017436.272, 6412016.456, 6674090.429), stdev = 156267.170
  CI (99.9%): [6307612.345, 6516420.566] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score        Error  Units
ObservableToListTest._Benchmark.benchmark_listWithBlockingFirst  thrpt   30  6412016.456 ± 104404.111  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_subscribeMultipleTimes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_subscribeMultipleTimes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 249668.642 ops/s
# Warmup Iteration   2: 483950.678 ops/s
# Warmup Iteration   3: 723121.200 ops/s
# Warmup Iteration   4: 732032.051 ops/s
# Warmup Iteration   5: 727372.624 ops/s
# Warmup Iteration   6: 666503.866 ops/s
# Warmup Iteration   7: 725208.587 ops/s
# Warmup Iteration   8: 673880.712 ops/s
# Warmup Iteration   9: 697533.350 ops/s
# Warmup Iteration  10: 716631.828 ops/s
# Warmup Iteration  11: 651846.345 ops/s
# Warmup Iteration  12: 738526.763 ops/s
# Warmup Iteration  13: 686022.866 ops/s
# Warmup Iteration  14: 695519.420 ops/s
# Warmup Iteration  15: 720159.532 ops/s
# Warmup Iteration  16: 595368.300 ops/s
# Warmup Iteration  17: 647034.267 ops/s
# Warmup Iteration  18: 700051.687 ops/s
# Warmup Iteration  19: 699664.881 ops/s
# Warmup Iteration  20: 721443.521 ops/s
# Warmup Iteration  21: 674811.056 ops/s
# Warmup Iteration  22: 725020.967 ops/s
# Warmup Iteration  23: 702693.671 ops/s
# Warmup Iteration  24: 694997.111 ops/s
# Warmup Iteration  25: 714122.632 ops/s
# Warmup Iteration  26: 704187.148 ops/s
# Warmup Iteration  27: 712373.732 ops/s
# Warmup Iteration  28: 704626.423 ops/s
# Warmup Iteration  29: 703695.444 ops/s
# Warmup Iteration  30: 737997.307 ops/s
Iteration   1: 688283.657 ops/s
Iteration   2: 705322.245 ops/s
Iteration   3: 725922.256 ops/s
Iteration   4: 687068.553 ops/s
Iteration   5: 707179.440 ops/s
Iteration   6: 711558.795 ops/s
Iteration   7: 700875.655 ops/s
Iteration   8: 724234.659 ops/s
Iteration   9: 705222.887 ops/s
Iteration  10: 720003.025 ops/s
Iteration  11: 710690.730 ops/s
Iteration  12: 687918.825 ops/s
Iteration  13: 727958.554 ops/s
Iteration  14: 692363.812 ops/s
Iteration  15: 702169.596 ops/s
Iteration  16: 703453.916 ops/s
Iteration  17: 668383.081 ops/s
Iteration  18: 731690.839 ops/s
Iteration  19: 708228.407 ops/s
Iteration  20: 723216.792 ops/s
Iteration  21: 686650.011 ops/s
Iteration  22: 701893.280 ops/s
Iteration  23: 683567.511 ops/s
Iteration  24: 719394.300 ops/s
Iteration  25: 690702.086 ops/s
Iteration  26: 711373.719 ops/s
Iteration  27: 704091.280 ops/s
Iteration  28: 680722.236 ops/s
Iteration  29: 717207.716 ops/s
Iteration  30: 723170.144 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_subscribeMultipleTimes":
  705017.267 ±(99.9%) 10703.396 ops/s [Average]
  (min, avg, max) = (668383.081, 705017.267, 731690.839), stdev = 16020.340
  CI (99.9%): [694313.871, 715720.663] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableFromIterableTest._Benchmark.benchmark_subscribeMultipleTimes  thrpt   30  705017.267 ± 10703.396  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_noBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_noBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1240577.840 ops/s
# Warmup Iteration   2: 3340630.128 ops/s
# Warmup Iteration   3: 4371173.402 ops/s
# Warmup Iteration   4: 4657965.079 ops/s
# Warmup Iteration   5: 4692707.952 ops/s
# Warmup Iteration   6: 4529231.519 ops/s
# Warmup Iteration   7: 4701674.653 ops/s
# Warmup Iteration   8: 4784359.277 ops/s
# Warmup Iteration   9: 4749863.793 ops/s
# Warmup Iteration  10: 4667043.243 ops/s
# Warmup Iteration  11: 4545615.852 ops/s
# Warmup Iteration  12: 4726385.972 ops/s
# Warmup Iteration  13: 4459581.096 ops/s
# Warmup Iteration  14: 4794768.573 ops/s
# Warmup Iteration  15: 4709067.124 ops/s
# Warmup Iteration  16: 4551215.594 ops/s
# Warmup Iteration  17: 4702019.123 ops/s
# Warmup Iteration  18: 4505340.324 ops/s
# Warmup Iteration  19: 4601074.026 ops/s
# Warmup Iteration  20: 4641764.104 ops/s
# Warmup Iteration  21: 4646822.548 ops/s
# Warmup Iteration  22: 4819250.219 ops/s
# Warmup Iteration  23: 4613201.902 ops/s
# Warmup Iteration  24: 4681399.119 ops/s
# Warmup Iteration  25: 4611707.479 ops/s
# Warmup Iteration  26: 4444663.265 ops/s
# Warmup Iteration  27: 4821920.798 ops/s
# Warmup Iteration  28: 4705056.842 ops/s
# Warmup Iteration  29: 4565414.810 ops/s
# Warmup Iteration  30: 4840909.582 ops/s
Iteration   1: 4817715.152 ops/s
Iteration   2: 4614211.612 ops/s
Iteration   3: 4650669.723 ops/s
Iteration   4: 4787707.641 ops/s
Iteration   5: 4492574.939 ops/s
Iteration   6: 4637009.299 ops/s
Iteration   7: 4831483.014 ops/s
Iteration   8: 4607116.673 ops/s
Iteration   9: 4697916.458 ops/s
Iteration  10: 4664722.760 ops/s
Iteration  11: 4754432.786 ops/s
Iteration  12: 4652001.534 ops/s
Iteration  13: 4640366.170 ops/s
Iteration  14: 4537277.224 ops/s
Iteration  15: 4837961.326 ops/s
Iteration  16: 4656744.052 ops/s
Iteration  17: 4843457.909 ops/s
Iteration  18: 4818588.155 ops/s
Iteration  19: 4607376.844 ops/s
Iteration  20: 4770844.981 ops/s
Iteration  21: 4731143.064 ops/s
Iteration  22: 4723687.143 ops/s
Iteration  23: 4670620.887 ops/s
Iteration  24: 4642545.379 ops/s
Iteration  25: 4723906.466 ops/s
Iteration  26: 4815668.720 ops/s
Iteration  27: 4644392.649 ops/s
Iteration  28: 4767910.667 ops/s
Iteration  29: 4572153.042 ops/s
Iteration  30: 4848311.512 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_noBackpressure":
  4702017.259 ±(99.9%) 65121.480 ops/s [Average]
  (min, avg, max) = (4492574.939, 4702017.259, 4848311.512), stdev = 97470.773
  CI (99.9%): [4636895.780, 4767138.739] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableFromIterableTest._Benchmark.benchmark_noBackpressure  thrpt   30  4702017.259 ± 65121.480  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_hasNextCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_hasNextCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 817749.529 ops/s
# Warmup Iteration   2: 4551720.238 ops/s
# Warmup Iteration   3: 5432027.428 ops/s
# Warmup Iteration   4: 5975011.527 ops/s
# Warmup Iteration   5: 6357032.341 ops/s
# Warmup Iteration   6: 6080513.894 ops/s
# Warmup Iteration   7: 5884393.275 ops/s
# Warmup Iteration   8: 6061989.745 ops/s
# Warmup Iteration   9: 6077137.376 ops/s
# Warmup Iteration  10: 6078182.069 ops/s
# Warmup Iteration  11: 4972072.496 ops/s
# Warmup Iteration  12: 6382903.280 ops/s
# Warmup Iteration  13: 5959422.358 ops/s
# Warmup Iteration  14: 5953301.592 ops/s
# Warmup Iteration  15: 6287827.901 ops/s
# Warmup Iteration  16: 5956466.287 ops/s
# Warmup Iteration  17: 6040956.438 ops/s
# Warmup Iteration  18: 6225995.677 ops/s
# Warmup Iteration  19: 5915797.862 ops/s
# Warmup Iteration  20: 6334188.779 ops/s
# Warmup Iteration  21: 6026629.596 ops/s
# Warmup Iteration  22: 6227833.074 ops/s
# Warmup Iteration  23: 6194306.258 ops/s
# Warmup Iteration  24: 6096200.513 ops/s
# Warmup Iteration  25: 6191788.194 ops/s
# Warmup Iteration  26: 5989616.713 ops/s
# Warmup Iteration  27: 5979119.556 ops/s
# Warmup Iteration  28: 6192567.794 ops/s
# Warmup Iteration  29: 6206220.948 ops/s
# Warmup Iteration  30: 6060348.948 ops/s
Iteration   1: 6319422.075 ops/s
Iteration   2: 5897015.432 ops/s
Iteration   3: 6067913.416 ops/s
Iteration   4: 6165135.259 ops/s
Iteration   5: 5995188.236 ops/s
Iteration   6: 6230684.110 ops/s
Iteration   7: 6027032.073 ops/s
Iteration   8: 6178079.341 ops/s
Iteration   9: 6065447.901 ops/s
Iteration  10: 6018865.632 ops/s
Iteration  11: 5967888.924 ops/s
Iteration  12: 6049875.985 ops/s
Iteration  13: 6329063.327 ops/s
Iteration  14: 6032030.647 ops/s
Iteration  15: 6122390.847 ops/s
Iteration  16: 6230500.805 ops/s
Iteration  17: 6288651.321 ops/s
Iteration  18: 5916015.010 ops/s
Iteration  19: 5996384.909 ops/s
Iteration  20: 6413626.860 ops/s
Iteration  21: 5950169.675 ops/s
Iteration  22: 6297382.481 ops/s
Iteration  23: 6376091.108 ops/s
Iteration  24: 6043290.602 ops/s
Iteration  25: 6319755.411 ops/s
Iteration  26: 6030935.422 ops/s
Iteration  27: 5849163.349 ops/s
Iteration  28: 6206536.189 ops/s
Iteration  29: 6056423.067 ops/s
Iteration  30: 6235949.415 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_hasNextCancels":
  6122563.628 ±(99.9%) 102929.279 ops/s [Average]
  (min, avg, max) = (5849163.349, 6122563.628, 6413626.860), stdev = 154059.712
  CI (99.9%): [6019634.348, 6225492.907] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score        Error  Units
ObservableFromIterableTest._Benchmark.benchmark_hasNextCancels  thrpt   30  6122563.628 ± 102929.279  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_disposeAfterHasNext$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_disposeAfterHasNext

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1233690.503 ops/s
# Warmup Iteration   2: 4190196.271 ops/s
# Warmup Iteration   3: 5327486.609 ops/s
# Warmup Iteration   4: 5895750.205 ops/s
# Warmup Iteration   5: 5959826.658 ops/s
# Warmup Iteration   6: 5832270.896 ops/s
# Warmup Iteration   7: 5953396.710 ops/s
# Warmup Iteration   8: 5921668.985 ops/s
# Warmup Iteration   9: 5886774.766 ops/s
# Warmup Iteration  10: 6046055.115 ops/s
# Warmup Iteration  11: 5764497.314 ops/s
# Warmup Iteration  12: 5919022.913 ops/s
# Warmup Iteration  13: 5916061.594 ops/s
# Warmup Iteration  14: 6022088.740 ops/s
# Warmup Iteration  15: 6180509.236 ops/s
# Warmup Iteration  16: 5843760.240 ops/s
# Warmup Iteration  17: 5976518.019 ops/s
# Warmup Iteration  18: 6068490.077 ops/s
# Warmup Iteration  19: 6058619.270 ops/s
# Warmup Iteration  20: 5899777.840 ops/s
# Warmup Iteration  21: 6085825.721 ops/s
# Warmup Iteration  22: 6164261.172 ops/s
# Warmup Iteration  23: 5789516.630 ops/s
# Warmup Iteration  24: 6025133.872 ops/s
# Warmup Iteration  25: 6070994.775 ops/s
# Warmup Iteration  26: 5780727.673 ops/s
# Warmup Iteration  27: 6123524.526 ops/s
# Warmup Iteration  28: 5970047.703 ops/s
# Warmup Iteration  29: 5981261.625 ops/s
# Warmup Iteration  30: 6106352.513 ops/s
Iteration   1: 6290536.224 ops/s
Iteration   2: 5708422.178 ops/s
Iteration   3: 6271633.187 ops/s
Iteration   4: 5853203.188 ops/s
Iteration   5: 6201811.200 ops/s
Iteration   6: 5810206.125 ops/s
Iteration   7: 6207234.816 ops/s
Iteration   8: 5858419.933 ops/s
Iteration   9: 5988848.787 ops/s
Iteration  10: 6105958.028 ops/s
Iteration  11: 5871792.262 ops/s
Iteration  12: 6145076.733 ops/s
Iteration  13: 6168702.705 ops/s
Iteration  14: 5669959.462 ops/s
Iteration  15: 5855342.068 ops/s
Iteration  16: 6248024.219 ops/s
Iteration  17: 5854503.528 ops/s
Iteration  18: 6073232.097 ops/s
Iteration  19: 6212405.905 ops/s
Iteration  20: 6261790.154 ops/s
Iteration  21: 6078563.618 ops/s
Iteration  22: 5869358.204 ops/s
Iteration  23: 6092541.703 ops/s
Iteration  24: 5862724.594 ops/s
Iteration  25: 5892897.773 ops/s
Iteration  26: 6126182.808 ops/s
Iteration  27: 5921333.414 ops/s
Iteration  28: 5745028.159 ops/s
Iteration  29: 6132727.583 ops/s
Iteration  30: 5905954.871 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_disposeAfterHasNext":
  6009480.518 ±(99.9%) 123216.168 ops/s [Average]
  (min, avg, max) = (5669959.462, 6009480.518, 6290536.224), stdev = 184424.173
  CI (99.9%): [5886264.350, 6132696.685] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score        Error  Units
ObservableFromIterableTest._Benchmark.benchmark_disposeAfterHasNext  thrpt   30  6009480.518 ± 123216.168  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredWithBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredWithBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3149845.114 ops/s
# Warmup Iteration   2: 6982313.078 ops/s
# Warmup Iteration   3: 10635647.202 ops/s
# Warmup Iteration   4: 11290183.826 ops/s
# Warmup Iteration   5: 9146903.729 ops/s
# Warmup Iteration   6: 10193527.208 ops/s
# Warmup Iteration   7: 11253954.721 ops/s
# Warmup Iteration   8: 11135201.937 ops/s
# Warmup Iteration   9: 10702375.373 ops/s
# Warmup Iteration  10: 11007968.347 ops/s
# Warmup Iteration  11: 10563113.283 ops/s
# Warmup Iteration  12: 10964284.623 ops/s
# Warmup Iteration  13: 11233810.266 ops/s
# Warmup Iteration  14: 10560077.027 ops/s
# Warmup Iteration  15: 11059376.279 ops/s
# Warmup Iteration  16: 10731748.218 ops/s
# Warmup Iteration  17: 11043961.127 ops/s
# Warmup Iteration  18: 11502446.919 ops/s
# Warmup Iteration  19: 10646499.310 ops/s
# Warmup Iteration  20: 11304360.506 ops/s
# Warmup Iteration  21: 11190064.480 ops/s
# Warmup Iteration  22: 10763612.906 ops/s
# Warmup Iteration  23: 11058600.589 ops/s
# Warmup Iteration  24: 10897251.393 ops/s
# Warmup Iteration  25: 11409199.480 ops/s
# Warmup Iteration  26: 10834173.464 ops/s
# Warmup Iteration  27: 10894670.158 ops/s
# Warmup Iteration  28: 11160316.966 ops/s
# Warmup Iteration  29: 10889877.691 ops/s
# Warmup Iteration  30: 11387896.513 ops/s
Iteration   1: 10856045.611 ops/s
Iteration   2: 11213774.212 ops/s
Iteration   3: 10682350.943 ops/s
Iteration   4: 11102729.840 ops/s
Iteration   5: 11238284.296 ops/s
Iteration   6: 10997824.834 ops/s
Iteration   7: 11188761.522 ops/s
Iteration   8: 10821877.931 ops/s
Iteration   9: 11152819.962 ops/s
Iteration  10: 11296843.485 ops/s
Iteration  11: 10694751.513 ops/s
Iteration  12: 10882146.704 ops/s
Iteration  13: 10837483.009 ops/s
Iteration  14: 10876182.457 ops/s
Iteration  15: 10988003.740 ops/s
Iteration  16: 10825523.495 ops/s
Iteration  17: 11506993.068 ops/s
Iteration  18: 10663432.640 ops/s
Iteration  19: 11219049.081 ops/s
Iteration  20: 10892966.421 ops/s
Iteration  21: 11361446.454 ops/s
Iteration  22: 11162265.559 ops/s
Iteration  23: 11287710.295 ops/s
Iteration  24: 10809961.150 ops/s
Iteration  25: 11186485.251 ops/s
Iteration  26: 10745725.565 ops/s
Iteration  27: 11042654.220 ops/s
Iteration  28: 11372839.225 ops/s
Iteration  29: 10860995.135 ops/s
Iteration  30: 11245165.648 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredWithBackpressure":
  11033769.776 ±(99.9%) 156144.385 ops/s [Average]
  (min, avg, max) = (10663432.640, 11033769.776, 11506993.068), stdev = 233709.582
  CI (99.9%): [10877625.391, 11189914.160] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                                    Mode  Cnt         Score        Error  Units
ObservableFromIterableTest._Benchmark.benchmark_doesNotCallIteratorHasNextMoreThanRequiredWithBackpressure  thrpt   30  11033769.776 ± 156144.385  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_fusionRejected$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_fusionRejected

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1309275.090 ops/s
# Warmup Iteration   2: 3883189.310 ops/s
# Warmup Iteration   3: 5681269.605 ops/s
# Warmup Iteration   4: 5487815.789 ops/s
# Warmup Iteration   5: 5618173.591 ops/s
# Warmup Iteration   6: 5631299.881 ops/s
# Warmup Iteration   7: 5478610.002 ops/s
# Warmup Iteration   8: 5597680.871 ops/s
# Warmup Iteration   9: 5397170.202 ops/s
# Warmup Iteration  10: 5539707.419 ops/s
# Warmup Iteration  11: 5433801.206 ops/s
# Warmup Iteration  12: 5432770.906 ops/s
# Warmup Iteration  13: 5487997.184 ops/s
# Warmup Iteration  14: 5694761.304 ops/s
# Warmup Iteration  15: 5696472.677 ops/s
# Warmup Iteration  16: 5407007.129 ops/s
# Warmup Iteration  17: 5727261.358 ops/s
# Warmup Iteration  18: 5344980.396 ops/s
# Warmup Iteration  19: 5376391.604 ops/s
# Warmup Iteration  20: 5880048.072 ops/s
# Warmup Iteration  21: 5391048.017 ops/s
# Warmup Iteration  22: 5443652.268 ops/s
# Warmup Iteration  23: 5781622.546 ops/s
# Warmup Iteration  24: 5371524.506 ops/s
# Warmup Iteration  25: 5610937.698 ops/s
# Warmup Iteration  26: 5596953.164 ops/s
# Warmup Iteration  27: 5472090.195 ops/s
# Warmup Iteration  28: 5675942.164 ops/s
# Warmup Iteration  29: 5677833.162 ops/s
# Warmup Iteration  30: 5300104.987 ops/s
Iteration   1: 5697500.757 ops/s
Iteration   2: 5312236.519 ops/s
Iteration   3: 5539709.601 ops/s
Iteration   4: 5526494.982 ops/s
Iteration   5: 5559346.934 ops/s
Iteration   6: 5744234.072 ops/s
Iteration   7: 5204617.592 ops/s
Iteration   8: 5521605.285 ops/s
Iteration   9: 5518168.857 ops/s
Iteration  10: 5506242.766 ops/s
Iteration  11: 5351099.931 ops/s
Iteration  12: 5716675.495 ops/s
Iteration  13: 5359316.317 ops/s
Iteration  14: 5474362.998 ops/s
Iteration  15: 5650064.723 ops/s
Iteration  16: 5688707.658 ops/s
Iteration  17: 5493124.246 ops/s
Iteration  18: 5660800.280 ops/s
Iteration  19: 5477190.063 ops/s
Iteration  20: 5721250.599 ops/s
Iteration  21: 5357073.253 ops/s
Iteration  22: 5596958.151 ops/s
Iteration  23: 5742301.903 ops/s
Iteration  24: 5487035.373 ops/s
Iteration  25: 5682987.051 ops/s
Iteration  26: 5511086.645 ops/s
Iteration  27: 5584752.430 ops/s
Iteration  28: 5638574.541 ops/s
Iteration  29: 5633058.749 ops/s
Iteration  30: 5399250.544 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromIterableTest._Benchmark.benchmark_fusionRejected":
  5545194.277 ±(99.9%) 93350.818 ops/s [Average]
  (min, avg, max) = (5204617.592, 5545194.277, 5744234.072), stdev = 139723.120
  CI (99.9%): [5451843.459, 5638545.095] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableFromIterableTest._Benchmark.benchmark_fusionRejected  thrpt   30  5545194.277 ± 93350.818  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatIterableDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatIterableDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 273958.028 ops/s
# Warmup Iteration   2: 1843111.262 ops/s
# Warmup Iteration   3: 2402249.996 ops/s
# Warmup Iteration   4: 2950503.990 ops/s
# Warmup Iteration   5: 3042623.302 ops/s
# Warmup Iteration   6: 2952648.890 ops/s
# Warmup Iteration   7: 3050362.407 ops/s
# Warmup Iteration   8: 2903289.595 ops/s
# Warmup Iteration   9: 3043740.685 ops/s
# Warmup Iteration  10: 2918999.877 ops/s
# Warmup Iteration  11: 2893649.077 ops/s
# Warmup Iteration  12: 3015416.221 ops/s
# Warmup Iteration  13: 2958288.855 ops/s
# Warmup Iteration  14: 2941953.933 ops/s
# Warmup Iteration  15: 3043670.240 ops/s
# Warmup Iteration  16: 2906935.607 ops/s
# Warmup Iteration  17: 3031403.340 ops/s
# Warmup Iteration  18: 2978445.167 ops/s
# Warmup Iteration  19: 2899411.587 ops/s
# Warmup Iteration  20: 3021175.465 ops/s
# Warmup Iteration  21: 2958879.733 ops/s
# Warmup Iteration  22: 3007189.135 ops/s
# Warmup Iteration  23: 3009310.194 ops/s
# Warmup Iteration  24: 2914258.561 ops/s
# Warmup Iteration  25: 3028641.624 ops/s
# Warmup Iteration  26: 2977873.436 ops/s
# Warmup Iteration  27: 3128472.237 ops/s
# Warmup Iteration  28: 2911276.437 ops/s
# Warmup Iteration  29: 3010501.412 ops/s
# Warmup Iteration  30: 3067887.151 ops/s
Iteration   1: 2962802.338 ops/s
Iteration   2: 3064662.145 ops/s
Iteration   3: 2997757.145 ops/s
Iteration   4: 2963191.032 ops/s
Iteration   5: 3020923.036 ops/s
Iteration   6: 3036029.291 ops/s
Iteration   7: 2993583.599 ops/s
Iteration   8: 3030672.374 ops/s
Iteration   9: 2937957.992 ops/s
Iteration  10: 3134545.162 ops/s
Iteration  11: 2933855.428 ops/s
Iteration  12: 2974885.392 ops/s
Iteration  13: 2985013.132 ops/s
Iteration  14: 2855678.096 ops/s
Iteration  15: 3132369.546 ops/s
Iteration  16: 2929153.257 ops/s
Iteration  17: 3025623.597 ops/s
Iteration  18: 3029361.005 ops/s
Iteration  19: 2915181.888 ops/s
Iteration  20: 3065805.648 ops/s
Iteration  21: 2878331.940 ops/s
Iteration  22: 3074077.961 ops/s
Iteration  23: 2908835.057 ops/s
Iteration  24: 2986058.377 ops/s
Iteration  25: 3023393.550 ops/s
Iteration  26: 3080422.904 ops/s
Iteration  27: 2947388.397 ops/s
Iteration  28: 3048816.964 ops/s
Iteration  29: 2984968.208 ops/s
Iteration  30: 2953793.118 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_concatIterableDelayError":
  2995837.919 ±(99.9%) 45760.007 ops/s [Average]
  (min, avg, max) = (2855678.096, 2995837.919, 3134545.162), stdev = 68491.430
  CI (99.9%): [2950077.912, 3041597.927] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_concatIterableDelayError  thrpt   30  2995837.919 ± 45760.007  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapIterableCombinerReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapIterableCombinerReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 133751.904 ops/s
# Warmup Iteration   2: 491165.743 ops/s
# Warmup Iteration   3: 538895.883 ops/s
# Warmup Iteration   4: 544465.727 ops/s
# Warmup Iteration   5: 523202.999 ops/s
# Warmup Iteration   6: 537892.258 ops/s
# Warmup Iteration   7: 512926.743 ops/s
# Warmup Iteration   8: 524842.442 ops/s
# Warmup Iteration   9: 513740.242 ops/s
# Warmup Iteration  10: 527239.347 ops/s
# Warmup Iteration  11: 558219.154 ops/s
# Warmup Iteration  12: 540411.678 ops/s
# Warmup Iteration  13: 547308.417 ops/s
# Warmup Iteration  14: 543762.882 ops/s
# Warmup Iteration  15: 566956.507 ops/s
# Warmup Iteration  16: 548411.757 ops/s
# Warmup Iteration  17: 557754.720 ops/s
# Warmup Iteration  18: 568471.548 ops/s
# Warmup Iteration  19: 560975.404 ops/s
# Warmup Iteration  20: 573490.925 ops/s
# Warmup Iteration  21: 582425.658 ops/s
# Warmup Iteration  22: 564408.203 ops/s
# Warmup Iteration  23: 562142.258 ops/s
# Warmup Iteration  24: 594372.520 ops/s
# Warmup Iteration  25: 557183.224 ops/s
# Warmup Iteration  26: 567580.164 ops/s
# Warmup Iteration  27: 589388.871 ops/s
# Warmup Iteration  28: 541150.392 ops/s
# Warmup Iteration  29: 572077.748 ops/s
# Warmup Iteration  30: 556418.125 ops/s
Iteration   1: 588168.092 ops/s
Iteration   2: 538861.035 ops/s
Iteration   3: 560254.054 ops/s
Iteration   4: 577412.207 ops/s
Iteration   5: 596158.072 ops/s
Iteration   6: 573444.222 ops/s
Iteration   7: 550885.508 ops/s
Iteration   8: 590482.567 ops/s
Iteration   9: 562800.304 ops/s
Iteration  10: 578461.450 ops/s
Iteration  11: 563251.416 ops/s
Iteration  12: 566788.840 ops/s
Iteration  13: 566123.960 ops/s
Iteration  14: 581752.075 ops/s
Iteration  15: 582435.246 ops/s
Iteration  16: 565910.240 ops/s
Iteration  17: 582187.177 ops/s
Iteration  18: 562488.117 ops/s
Iteration  19: 563288.024 ops/s
Iteration  20: 592301.556 ops/s
Iteration  21: 547201.645 ops/s
Iteration  22: 595380.874 ops/s
Iteration  23: 574058.071 ops/s
Iteration  24: 557744.294 ops/s
Iteration  25: 566995.651 ops/s
Iteration  26: 542582.805 ops/s
Iteration  27: 504070.230 ops/s
Iteration  28: 597489.669 ops/s
Iteration  29: 547044.617 ops/s
Iteration  30: 582686.222 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_flatMapIterableCombinerReturnsNull":
  568623.608 ±(99.9%) 13594.437 ops/s [Average]
  (min, avg, max) = (504070.230, 568623.608, 597489.669), stdev = 20347.515
  CI (99.9%): [555029.171, 582218.045] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_flatMapIterableCombinerReturnsNull  thrpt   30  568623.608 ± 13594.437  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_innerBadSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_innerBadSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6592.790 ops/s
# Warmup Iteration   2: 93486.030 ops/s
# Warmup Iteration   3: 169886.872 ops/s
# Warmup Iteration   4: 175460.059 ops/s
# Warmup Iteration   5: 184289.745 ops/s
# Warmup Iteration   6: 173988.482 ops/s
# Warmup Iteration   7: 188972.796 ops/s
# Warmup Iteration   8: 164699.306 ops/s
# Warmup Iteration   9: 196853.042 ops/s
# Warmup Iteration  10: 192013.317 ops/s
# Warmup Iteration  11: 182330.991 ops/s
# Warmup Iteration  12: 187127.481 ops/s
# Warmup Iteration  13: 191872.740 ops/s
# Warmup Iteration  14: 180749.870 ops/s
# Warmup Iteration  15: 186343.503 ops/s
# Warmup Iteration  16: 189266.789 ops/s
# Warmup Iteration  17: 188181.716 ops/s
# Warmup Iteration  18: 193642.331 ops/s
# Warmup Iteration  19: 184302.331 ops/s
# Warmup Iteration  20: 193930.250 ops/s
# Warmup Iteration  21: 193214.455 ops/s
# Warmup Iteration  22: 190088.286 ops/s
# Warmup Iteration  23: 196902.339 ops/s
# Warmup Iteration  24: 188350.894 ops/s
# Warmup Iteration  25: 191074.009 ops/s
# Warmup Iteration  26: 198456.822 ops/s
# Warmup Iteration  27: 189984.126 ops/s
# Warmup Iteration  28: 191002.241 ops/s
# Warmup Iteration  29: 197863.465 ops/s
# Warmup Iteration  30: 188052.027 ops/s
Iteration   1: 194833.910 ops/s
Iteration   2: 199013.089 ops/s
Iteration   3: 187285.059 ops/s
Iteration   4: 196057.646 ops/s
Iteration   5: 191934.290 ops/s
Iteration   6: 193153.574 ops/s
Iteration   7: 195836.705 ops/s
Iteration   8: 194602.470 ops/s
Iteration   9: 196272.428 ops/s
Iteration  10: 191814.327 ops/s
Iteration  11: 194444.388 ops/s
Iteration  12: 188243.787 ops/s
Iteration  13: 201069.533 ops/s
Iteration  14: 194519.384 ops/s
Iteration  15: 186430.665 ops/s
Iteration  16: 198347.455 ops/s
Iteration  17: 198084.297 ops/s
Iteration  18: 190944.870 ops/s
Iteration  19: 198144.085 ops/s
Iteration  20: 187539.153 ops/s
Iteration  21: 195501.306 ops/s
Iteration  22: 193216.317 ops/s
Iteration  23: 190670.757 ops/s
Iteration  24: 193689.240 ops/s
Iteration  25: 197712.634 ops/s
Iteration  26: 186751.169 ops/s
Iteration  27: 201034.983 ops/s
Iteration  28: 188488.383 ops/s
Iteration  29: 193422.152 ops/s
Iteration  30: 194032.426 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_innerBadSource":
  193769.683 ±(99.9%) 2767.266 ops/s [Average]
  (min, avg, max) = (186430.665, 193769.683, 201069.533), stdev = 4141.914
  CI (99.9%): [191002.416, 196536.949] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
ObservableWindowWithObservableTest._Benchmark.benchmark_innerBadSource  thrpt   30  193769.683 ± 2767.266  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_concatEagerIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_concatEagerIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126282.933 ops/s
# Warmup Iteration   2: 893750.179 ops/s
# Warmup Iteration   3: 1753978.513 ops/s
# Warmup Iteration   4: 2221173.863 ops/s
# Warmup Iteration   5: 2340597.250 ops/s
# Warmup Iteration   6: 2251919.919 ops/s
# Warmup Iteration   7: 2320503.356 ops/s
# Warmup Iteration   8: 2266567.455 ops/s
# Warmup Iteration   9: 2296632.610 ops/s
# Warmup Iteration  10: 2344021.752 ops/s
# Warmup Iteration  11: 2173162.093 ops/s
# Warmup Iteration  12: 2391858.744 ops/s
# Warmup Iteration  13: 2276981.694 ops/s
# Warmup Iteration  14: 2341149.873 ops/s
# Warmup Iteration  15: 2266706.078 ops/s
# Warmup Iteration  16: 2320892.401 ops/s
# Warmup Iteration  17: 2310306.904 ops/s
# Warmup Iteration  18: 2262846.840 ops/s
# Warmup Iteration  19: 2354917.050 ops/s
# Warmup Iteration  20: 2224857.521 ops/s
# Warmup Iteration  21: 2210303.124 ops/s
# Warmup Iteration  22: 2352772.825 ops/s
# Warmup Iteration  23: 2247675.335 ops/s
# Warmup Iteration  24: 2253674.969 ops/s
# Warmup Iteration  25: 2301749.052 ops/s
# Warmup Iteration  26: 2253645.929 ops/s
# Warmup Iteration  27: 2335693.378 ops/s
# Warmup Iteration  28: 2309224.751 ops/s
# Warmup Iteration  29: 2350156.512 ops/s
# Warmup Iteration  30: 2237777.039 ops/s
Iteration   1: 2364714.322 ops/s
Iteration   2: 2271202.718 ops/s
Iteration   3: 2334750.762 ops/s
Iteration   4: 2257537.443 ops/s
Iteration   5: 2325931.431 ops/s
Iteration   6: 2323165.246 ops/s
Iteration   7: 2162818.997 ops/s
Iteration   8: 2299982.546 ops/s
Iteration   9: 2325348.945 ops/s
Iteration  10: 2209926.411 ops/s
Iteration  11: 2397851.314 ops/s
Iteration  12: 2237002.621 ops/s
Iteration  13: 2347488.949 ops/s
Iteration  14: 2269511.541 ops/s
Iteration  15: 2281783.827 ops/s
Iteration  16: 2321087.697 ops/s
Iteration  17: 2271405.613 ops/s
Iteration  18: 2259503.696 ops/s
Iteration  19: 2335821.782 ops/s
Iteration  20: 2216263.575 ops/s
Iteration  21: 1923440.669 ops/s
Iteration  22: 2216606.863 ops/s
Iteration  23: 2292705.443 ops/s
Iteration  24: 2347767.807 ops/s
Iteration  25: 2246431.470 ops/s
Iteration  26: 2339769.890 ops/s
Iteration  27: 2241278.211 ops/s
Iteration  28: 2268421.324 ops/s
Iteration  29: 2357714.071 ops/s
Iteration  30: 2191683.374 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_concatEagerIterable":
  2274630.619 ±(99.9%) 58298.495 ops/s [Average]
  (min, avg, max) = (1923440.669, 2274630.619, 2397851.314), stdev = 87258.450
  CI (99.9%): [2216332.123, 2332929.114] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_concatEagerIterable  thrpt   30  2274630.619 ± 58298.495  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayErrorIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayErrorIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 226463.674 ops/s
# Warmup Iteration   2: 1920432.198 ops/s
# Warmup Iteration   3: 2497278.105 ops/s
# Warmup Iteration   4: 2851951.467 ops/s
# Warmup Iteration   5: 2971879.677 ops/s
# Warmup Iteration   6: 2905714.628 ops/s
# Warmup Iteration   7: 2801293.239 ops/s
# Warmup Iteration   8: 2944216.948 ops/s
# Warmup Iteration   9: 2911371.497 ops/s
# Warmup Iteration  10: 2904382.343 ops/s
# Warmup Iteration  11: 2852147.078 ops/s
# Warmup Iteration  12: 2874297.807 ops/s
# Warmup Iteration  13: 3011329.446 ops/s
# Warmup Iteration  14: 2854247.914 ops/s
# Warmup Iteration  15: 2957570.333 ops/s
# Warmup Iteration  16: 2999491.322 ops/s
# Warmup Iteration  17: 2898115.636 ops/s
# Warmup Iteration  18: 3015889.064 ops/s
# Warmup Iteration  19: 2825288.361 ops/s
# Warmup Iteration  20: 2925245.364 ops/s
# Warmup Iteration  21: 3042989.449 ops/s
# Warmup Iteration  22: 2920923.629 ops/s
# Warmup Iteration  23: 2929934.905 ops/s
# Warmup Iteration  24: 2879890.097 ops/s
# Warmup Iteration  25: 3030813.132 ops/s
# Warmup Iteration  26: 2818021.639 ops/s
# Warmup Iteration  27: 2958804.136 ops/s
# Warmup Iteration  28: 3048291.160 ops/s
# Warmup Iteration  29: 2856315.594 ops/s
# Warmup Iteration  30: 2987030.552 ops/s
Iteration   1: 2923412.758 ops/s
Iteration   2: 2984394.703 ops/s
Iteration   3: 3036514.101 ops/s
Iteration   4: 2833582.702 ops/s
Iteration   5: 2869786.161 ops/s
Iteration   6: 2972863.887 ops/s
Iteration   7: 2800506.154 ops/s
Iteration   8: 3127572.996 ops/s
Iteration   9: 2819874.029 ops/s
Iteration  10: 2933753.447 ops/s
Iteration  11: 3002148.018 ops/s
Iteration  12: 2907409.868 ops/s
Iteration  13: 2968301.786 ops/s
Iteration  14: 2891764.595 ops/s
Iteration  15: 2938547.604 ops/s
Iteration  16: 2949803.521 ops/s
Iteration  17: 2923538.157 ops/s
Iteration  18: 3038230.194 ops/s
Iteration  19: 2913646.373 ops/s
Iteration  20: 2968681.580 ops/s
Iteration  21: 3030315.298 ops/s
Iteration  22: 2885627.772 ops/s
Iteration  23: 3023289.995 ops/s
Iteration  24: 2841006.292 ops/s
Iteration  25: 3018442.428 ops/s
Iteration  26: 2891806.474 ops/s
Iteration  27: 2848778.413 ops/s
Iteration  28: 3047630.474 ops/s
Iteration  29: 2893456.023 ops/s
Iteration  30: 2893768.948 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayErrorIterable":
  2939281.825 ±(99.9%) 52360.122 ops/s [Average]
  (min, avg, max) = (2800506.154, 2939281.825, 3127572.996), stdev = 78370.172
  CI (99.9%): [2886921.703, 2991641.947] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionDelayErrorIterable  thrpt   30  2939281.825 ± 52360.122  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 141031.151 ops/s
# Warmup Iteration   2: 749186.384 ops/s
# Warmup Iteration   3: 1911180.094 ops/s
# Warmup Iteration   4: 2465242.570 ops/s
# Warmup Iteration   5: 2371995.546 ops/s
# Warmup Iteration   6: 2425758.808 ops/s
# Warmup Iteration   7: 2395494.705 ops/s
# Warmup Iteration   8: 2307968.184 ops/s
# Warmup Iteration   9: 2443101.382 ops/s
# Warmup Iteration  10: 2419013.395 ops/s
# Warmup Iteration  11: 2330629.376 ops/s
# Warmup Iteration  12: 2432187.426 ops/s
# Warmup Iteration  13: 2423361.783 ops/s
# Warmup Iteration  14: 2343259.474 ops/s
# Warmup Iteration  15: 2377460.574 ops/s
# Warmup Iteration  16: 2400087.842 ops/s
# Warmup Iteration  17: 2384310.175 ops/s
# Warmup Iteration  18: 2557393.536 ops/s
# Warmup Iteration  19: 2411798.836 ops/s
# Warmup Iteration  20: 2453389.979 ops/s
# Warmup Iteration  21: 2502534.387 ops/s
# Warmup Iteration  22: 2400581.240 ops/s
# Warmup Iteration  23: 2388926.450 ops/s
# Warmup Iteration  24: 2372539.744 ops/s
# Warmup Iteration  25: 2492082.878 ops/s
# Warmup Iteration  26: 2385382.366 ops/s
# Warmup Iteration  27: 2472776.011 ops/s
# Warmup Iteration  28: 2368892.653 ops/s
# Warmup Iteration  29: 2435420.517 ops/s
# Warmup Iteration  30: 2415820.034 ops/s
Iteration   1: 2383551.985 ops/s
Iteration   2: 2430633.159 ops/s
Iteration   3: 2403530.765 ops/s
Iteration   4: 2508809.004 ops/s
Iteration   5: 2385873.125 ops/s
Iteration   6: 2534259.605 ops/s
Iteration   7: 2533726.741 ops/s
Iteration   8: 2392098.741 ops/s
Iteration   9: 2539500.755 ops/s
Iteration  10: 2367636.456 ops/s
Iteration  11: 2484030.127 ops/s
Iteration  12: 2342944.052 ops/s
Iteration  13: 2429744.310 ops/s
Iteration  14: 2341096.467 ops/s
Iteration  15: 2325616.762 ops/s
Iteration  16: 1951709.625 ops/s
Iteration  17: 2402387.419 ops/s
Iteration  18: 2589243.625 ops/s
Iteration  19: 2387858.830 ops/s
Iteration  20: 2426325.363 ops/s
Iteration  21: 2507579.640 ops/s
Iteration  22: 2407170.871 ops/s
Iteration  23: 2474752.984 ops/s
Iteration  24: 2497429.874 ops/s
Iteration  25: 2430574.790 ops/s
Iteration  26: 2578194.081 ops/s
Iteration  27: 2372015.896 ops/s
Iteration  28: 2449724.370 ops/s
Iteration  29: 2569058.733 ops/s
Iteration  30: 2391444.812 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable":
  2427950.766 ±(99.9%) 78016.552 ops/s [Average]
  (min, avg, max) = (1951709.625, 2427950.766, 2589243.625), stdev = 116771.510
  CI (99.9%): [2349934.214, 2505967.317] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableConcatTest._Benchmark.benchmark_noSubsequentSubscriptionIterable  thrpt   30  2427950.766 ± 78016.552  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_capacityHint$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_capacityHint

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 297001.224 ops/s
# Warmup Iteration   2: 1040311.675 ops/s
# Warmup Iteration   3: 1774356.027 ops/s
# Warmup Iteration   4: 2016470.229 ops/s
# Warmup Iteration   5: 1896700.731 ops/s
# Warmup Iteration   6: 1924856.478 ops/s
# Warmup Iteration   7: 1981160.599 ops/s
# Warmup Iteration   8: 1962227.310 ops/s
# Warmup Iteration   9: 1960349.069 ops/s
# Warmup Iteration  10: 1899399.699 ops/s
# Warmup Iteration  11: 1966862.540 ops/s
# Warmup Iteration  12: 1994490.365 ops/s
# Warmup Iteration  13: 1866056.734 ops/s
# Warmup Iteration  14: 1965755.894 ops/s
# Warmup Iteration  15: 1923555.979 ops/s
# Warmup Iteration  16: 1933289.175 ops/s
# Warmup Iteration  17: 1992618.151 ops/s
# Warmup Iteration  18: 1945002.059 ops/s
# Warmup Iteration  19: 2019236.378 ops/s
# Warmup Iteration  20: 1912329.224 ops/s
# Warmup Iteration  21: 1932966.481 ops/s
# Warmup Iteration  22: 2001498.839 ops/s
# Warmup Iteration  23: 1960036.835 ops/s
# Warmup Iteration  24: 1930889.359 ops/s
# Warmup Iteration  25: 1970119.284 ops/s
# Warmup Iteration  26: 1968839.448 ops/s
# Warmup Iteration  27: 1991411.305 ops/s
# Warmup Iteration  28: 2004000.488 ops/s
# Warmup Iteration  29: 1902531.692 ops/s
# Warmup Iteration  30: 2008031.886 ops/s
Iteration   1: 1901956.791 ops/s
Iteration   2: 1998310.656 ops/s
Iteration   3: 1923872.106 ops/s
Iteration   4: 1980484.269 ops/s
Iteration   5: 1996640.900 ops/s
Iteration   6: 1964071.331 ops/s
Iteration   7: 1980403.438 ops/s
Iteration   8: 2017314.970 ops/s
Iteration   9: 1905603.599 ops/s
Iteration  10: 2004300.380 ops/s
Iteration  11: 1921048.645 ops/s
Iteration  12: 1984346.048 ops/s
Iteration  13: 1923549.400 ops/s
Iteration  14: 1918352.545 ops/s
Iteration  15: 1916880.657 ops/s
Iteration  16: 2012541.345 ops/s
Iteration  17: 1944033.556 ops/s
Iteration  18: 1989607.810 ops/s
Iteration  19: 1966857.260 ops/s
Iteration  20: 2018953.950 ops/s
Iteration  21: 2024626.072 ops/s
Iteration  22: 1940278.130 ops/s
Iteration  23: 2008347.564 ops/s
Iteration  24: 1926599.610 ops/s
Iteration  25: 2018376.320 ops/s
Iteration  26: 1925938.919 ops/s
Iteration  27: 1937555.955 ops/s
Iteration  28: 1983215.857 ops/s
Iteration  29: 1944073.081 ops/s
Iteration  30: 1970578.813 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_capacityHint":
  1964957.333 ±(99.9%) 26097.463 ops/s [Average]
  (min, avg, max) = (1901956.791, 1964957.333, 2024626.072), stdev = 39061.458
  CI (99.9%): [1938859.869, 1991054.796] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_capacityHint  thrpt   30  1964957.333 ± 26097.463  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatAndDistinctUnbounded$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatAndDistinctUnbounded

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 158755.653 ops/s
# Warmup Iteration   2: 924383.692 ops/s
# Warmup Iteration   3: 1408119.104 ops/s
# Warmup Iteration   4: 1426377.219 ops/s
# Warmup Iteration   5: 1524227.854 ops/s
# Warmup Iteration   6: 1437590.645 ops/s
# Warmup Iteration   7: 1479075.827 ops/s
# Warmup Iteration   8: 1464931.296 ops/s
# Warmup Iteration   9: 1455959.787 ops/s
# Warmup Iteration  10: 1411785.319 ops/s
# Warmup Iteration  11: 1377411.644 ops/s
# Warmup Iteration  12: 1473741.741 ops/s
# Warmup Iteration  13: 1486861.989 ops/s
# Warmup Iteration  14: 1484460.965 ops/s
# Warmup Iteration  15: 1555507.880 ops/s
# Warmup Iteration  16: 1466646.684 ops/s
# Warmup Iteration  17: 1524268.649 ops/s
# Warmup Iteration  18: 1516590.343 ops/s
# Warmup Iteration  19: 1525176.234 ops/s
# Warmup Iteration  20: 1494648.957 ops/s
# Warmup Iteration  21: 1529051.416 ops/s
# Warmup Iteration  22: 1500611.992 ops/s
# Warmup Iteration  23: 1502983.510 ops/s
# Warmup Iteration  24: 1462816.897 ops/s
# Warmup Iteration  25: 1557511.333 ops/s
# Warmup Iteration  26: 1448477.364 ops/s
# Warmup Iteration  27: 1538571.328 ops/s
# Warmup Iteration  28: 1465321.498 ops/s
# Warmup Iteration  29: 1483688.577 ops/s
# Warmup Iteration  30: 1572623.674 ops/s
Iteration   1: 1413563.233 ops/s
Iteration   2: 1505029.764 ops/s
Iteration   3: 1440289.065 ops/s
Iteration   4: 1560845.893 ops/s
Iteration   5: 1446685.454 ops/s
Iteration   6: 1496359.074 ops/s
Iteration   7: 1518302.823 ops/s
Iteration   8: 1504737.596 ops/s
Iteration   9: 1528322.154 ops/s
Iteration  10: 1462680.706 ops/s
Iteration  11: 1194660.755 ops/s
Iteration  12: 1430292.970 ops/s
Iteration  13: 1514773.445 ops/s
Iteration  14: 1508016.690 ops/s
Iteration  15: 1477632.544 ops/s
Iteration  16: 1458271.377 ops/s
Iteration  17: 1574080.870 ops/s
Iteration  18: 1409721.615 ops/s
Iteration  19: 1478209.432 ops/s
Iteration  20: 1448621.787 ops/s
Iteration  21: 1480747.879 ops/s
Iteration  22: 1530408.361 ops/s
Iteration  23: 1463566.574 ops/s
Iteration  24: 1540280.474 ops/s
Iteration  25: 1550927.291 ops/s
Iteration  26: 1453215.737 ops/s
Iteration  27: 1497171.815 ops/s
Iteration  28: 1527002.246 ops/s
Iteration  29: 1498197.376 ops/s
Iteration  30: 1545388.675 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRepeatTest._Benchmark.benchmark_repeatAndDistinctUnbounded":
  1481933.456 ±(99.9%) 46350.736 ops/s [Average]
  (min, avg, max) = (1194660.755, 1481933.456, 1574080.870), stdev = 69375.605
  CI (99.9%): [1435582.720, 1528284.192] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableRepeatTest._Benchmark.benchmark_repeatAndDistinctUnbounded  thrpt   30  1481933.456 ± 46350.736  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeSkip$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeSkip

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 4474.962 ops/s
# Warmup Iteration   2: 22928.910 ops/s
# Warmup Iteration   3: 31595.739 ops/s
# Warmup Iteration   4: 32332.249 ops/s
# Warmup Iteration   5: 46432.655 ops/s
# Warmup Iteration   6: 74955.238 ops/s
# Warmup Iteration   7: 78222.400 ops/s
# Warmup Iteration   8: 85301.202 ops/s
# Warmup Iteration   9: 78048.508 ops/s
# Warmup Iteration  10: 84243.556 ops/s
# Warmup Iteration  11: 80063.587 ops/s
# Warmup Iteration  12: 88905.545 ops/s
# Warmup Iteration  13: 82380.130 ops/s
# Warmup Iteration  14: 70681.716 ops/s
# Warmup Iteration  15: 79913.222 ops/s
# Warmup Iteration  16: 87932.942 ops/s
# Warmup Iteration  17: 71468.509 ops/s
# Warmup Iteration  18: 82551.165 ops/s
# Warmup Iteration  19: 80754.294 ops/s
# Warmup Iteration  20: 92124.887 ops/s
# Warmup Iteration  21: 83119.733 ops/s
# Warmup Iteration  22: 88416.665 ops/s
# Warmup Iteration  23: 87040.628 ops/s
# Warmup Iteration  24: 90369.471 ops/s
# Warmup Iteration  25: 80852.279 ops/s
# Warmup Iteration  26: 86187.284 ops/s
# Warmup Iteration  27: 94685.249 ops/s
# Warmup Iteration  28: 85926.226 ops/s
# Warmup Iteration  29: 89627.631 ops/s
# Warmup Iteration  30: 76106.330 ops/s
Iteration   1: 81900.533 ops/s
Iteration   2: 82827.264 ops/s
Iteration   3: 79313.118 ops/s
Iteration   4: 88516.920 ops/s
Iteration   5: 90482.683 ops/s
Iteration   6: 78314.974 ops/s
Iteration   7: 89532.319 ops/s
Iteration   8: 72149.214 ops/s
Iteration   9: 82239.302 ops/s
Iteration  10: 85466.532 ops/s
Iteration  11: 82914.582 ops/s
Iteration  12: 90845.694 ops/s
Iteration  13: 79722.366 ops/s
Iteration  14: 79610.910 ops/s
Iteration  15: 87678.942 ops/s
Iteration  16: 83775.694 ops/s
Iteration  17: 79177.749 ops/s
Iteration  18: 80984.370 ops/s
Iteration  19: 84398.990 ops/s
Iteration  20: 90886.552 ops/s
Iteration  21: 74390.839 ops/s
Iteration  22: 74346.812 ops/s
Iteration  23: 76505.361 ops/s
Iteration  24: 88970.500 ops/s
Iteration  25: 84023.442 ops/s
Iteration  26: 80602.373 ops/s
Iteration  27: 92357.526 ops/s
Iteration  28: 77959.571 ops/s
Iteration  29: 88188.564 ops/s
Iteration  30: 91268.002 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeSkip":
  83311.723 ±(99.9%) 3759.710 ops/s [Average]
  (min, avg, max) = (72149.214, 83311.723, 92357.526), stdev = 5627.358
  CI (99.9%): [79552.013, 87071.434] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt      Score      Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_cancellingWindowCancelsUpstreamExactTimeSkip  thrpt   30  83311.723 ± 3759.710  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_iterableDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_iterableDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 37611.539 ops/s
# Warmup Iteration   2: 154886.006 ops/s
# Warmup Iteration   3: 439072.158 ops/s
# Warmup Iteration   4: 431233.971 ops/s
# Warmup Iteration   5: 429203.292 ops/s
# Warmup Iteration   6: 480662.912 ops/s
# Warmup Iteration   7: 503181.247 ops/s
# Warmup Iteration   8: 502514.859 ops/s
# Warmup Iteration   9: 480250.097 ops/s
# Warmup Iteration  10: 489859.486 ops/s
# Warmup Iteration  11: 480384.980 ops/s
# Warmup Iteration  12: 484221.966 ops/s
# Warmup Iteration  13: 509304.581 ops/s
# Warmup Iteration  14: 481817.436 ops/s
# Warmup Iteration  15: 480556.390 ops/s
# Warmup Iteration  16: 495845.575 ops/s
# Warmup Iteration  17: 496202.834 ops/s
# Warmup Iteration  18: 514212.458 ops/s
# Warmup Iteration  19: 507794.747 ops/s
# Warmup Iteration  20: 497845.294 ops/s
# Warmup Iteration  21: 511041.036 ops/s
# Warmup Iteration  22: 489779.234 ops/s
# Warmup Iteration  23: 508354.886 ops/s
# Warmup Iteration  24: 505503.560 ops/s
# Warmup Iteration  25: 498598.742 ops/s
# Warmup Iteration  26: 501669.901 ops/s
# Warmup Iteration  27: 524334.110 ops/s
# Warmup Iteration  28: 479390.410 ops/s
# Warmup Iteration  29: 529280.377 ops/s
# Warmup Iteration  30: 518453.102 ops/s
Iteration   1: 495089.504 ops/s
Iteration   2: 509872.007 ops/s
Iteration   3: 509755.640 ops/s
Iteration   4: 351115.522 ops/s
Iteration   5: 495132.022 ops/s
Iteration   6: 509514.060 ops/s
Iteration   7: 513702.972 ops/s
Iteration   8: 507929.665 ops/s
Iteration   9: 511103.289 ops/s
Iteration  10: 506519.109 ops/s
Iteration  11: 524893.534 ops/s
Iteration  12: 501495.690 ops/s
Iteration  13: 505584.374 ops/s
Iteration  14: 533363.083 ops/s
Iteration  15: 485209.809 ops/s
Iteration  16: 511856.888 ops/s
Iteration  17: 504443.414 ops/s
Iteration  18: 511224.836 ops/s
Iteration  19: 501814.844 ops/s
Iteration  20: 502197.857 ops/s
Iteration  21: 492852.390 ops/s
Iteration  22: 491111.093 ops/s
Iteration  23: 516572.061 ops/s
Iteration  24: 491760.956 ops/s
Iteration  25: 507923.514 ops/s
Iteration  26: 504965.204 ops/s
Iteration  27: 518039.066 ops/s
Iteration  28: 499127.746 ops/s
Iteration  29: 515888.426 ops/s
Iteration  30: 504940.053 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_iterableDelayError":
  501166.621 ±(99.9%) 20126.009 ops/s [Average]
  (min, avg, max) = (351115.522, 501166.621, 533363.083), stdev = 30123.664
  CI (99.9%): [481040.612, 521292.629] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_iterableDelayError  thrpt   30  501166.621 ± 20126.009  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 57864.938 ops/s
# Warmup Iteration   2: 332564.473 ops/s
# Warmup Iteration   3: 433111.007 ops/s
# Warmup Iteration   4: 443296.645 ops/s
# Warmup Iteration   5: 459175.388 ops/s
# Warmup Iteration   6: 490680.546 ops/s
# Warmup Iteration   7: 496999.710 ops/s
# Warmup Iteration   8: 514010.614 ops/s
# Warmup Iteration   9: 493324.837 ops/s
# Warmup Iteration  10: 505813.597 ops/s
# Warmup Iteration  11: 515092.156 ops/s
# Warmup Iteration  12: 486647.432 ops/s
# Warmup Iteration  13: 500420.285 ops/s
# Warmup Iteration  14: 494649.912 ops/s
# Warmup Iteration  15: 506747.829 ops/s
# Warmup Iteration  16: 489478.352 ops/s
# Warmup Iteration  17: 509345.203 ops/s
# Warmup Iteration  18: 506512.799 ops/s
# Warmup Iteration  19: 547077.290 ops/s
# Warmup Iteration  20: 487173.460 ops/s
# Warmup Iteration  21: 500705.253 ops/s
# Warmup Iteration  22: 527087.982 ops/s
# Warmup Iteration  23: 514456.677 ops/s
# Warmup Iteration  24: 508012.339 ops/s
# Warmup Iteration  25: 529481.503 ops/s
# Warmup Iteration  26: 512611.531 ops/s
# Warmup Iteration  27: 532443.314 ops/s
# Warmup Iteration  28: 534366.779 ops/s
# Warmup Iteration  29: 503846.738 ops/s
# Warmup Iteration  30: 544521.385 ops/s
Iteration   1: 536746.289 ops/s
Iteration   2: 507214.352 ops/s
Iteration   3: 527222.176 ops/s
Iteration   4: 515772.210 ops/s
Iteration   5: 529079.269 ops/s
Iteration   6: 496695.407 ops/s
Iteration   7: 535213.149 ops/s
Iteration   8: 530345.374 ops/s
Iteration   9: 502069.567 ops/s
Iteration  10: 535446.059 ops/s
Iteration  11: 514411.462 ops/s
Iteration  12: 516852.473 ops/s
Iteration  13: 522706.496 ops/s
Iteration  14: 512450.790 ops/s
Iteration  15: 515524.925 ops/s
Iteration  16: 530397.375 ops/s
Iteration  17: 511672.192 ops/s
Iteration  18: 516323.965 ops/s
Iteration  19: 510501.315 ops/s
Iteration  20: 516330.002 ops/s
Iteration  21: 536642.414 ops/s
Iteration  22: 537540.522 ops/s
Iteration  23: 496479.878 ops/s
Iteration  24: 523691.020 ops/s
Iteration  25: 507494.609 ops/s
Iteration  26: 517097.723 ops/s
Iteration  27: 525306.922 ops/s
Iteration  28: 517768.407 ops/s
Iteration  29: 513525.447 ops/s
Iteration  30: 537069.138 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency":
  519853.031 ±(99.9%) 7982.929 ops/s [Average]
  (min, avg, max) = (496479.878, 519853.031, 537540.522), stdev = 11948.473
  CI (99.9%): [511870.102, 527835.960] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_iterableDelayErrorMaxConcurrency  thrpt   30  519853.031 ± 7982.929  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 380951.758 ops/s
# Warmup Iteration   2: 1165874.834 ops/s
# Warmup Iteration   3: 2001983.590 ops/s
# Warmup Iteration   4: 2016603.633 ops/s
# Warmup Iteration   5: 2076800.234 ops/s
# Warmup Iteration   6: 1984087.171 ops/s
# Warmup Iteration   7: 2131145.275 ops/s
# Warmup Iteration   8: 2046453.351 ops/s
# Warmup Iteration   9: 2072546.227 ops/s
# Warmup Iteration  10: 2129560.549 ops/s
# Warmup Iteration  11: 2054612.334 ops/s
# Warmup Iteration  12: 2134139.584 ops/s
# Warmup Iteration  13: 2000415.824 ops/s
# Warmup Iteration  14: 2173034.368 ops/s
# Warmup Iteration  15: 2077926.865 ops/s
# Warmup Iteration  16: 2086612.364 ops/s
# Warmup Iteration  17: 2073823.323 ops/s
# Warmup Iteration  18: 2137540.461 ops/s
# Warmup Iteration  19: 1977499.481 ops/s
# Warmup Iteration  20: 2181816.273 ops/s
# Warmup Iteration  21: 1965587.987 ops/s
# Warmup Iteration  22: 2094540.246 ops/s
# Warmup Iteration  23: 2141555.385 ops/s
# Warmup Iteration  24: 2112262.776 ops/s
# Warmup Iteration  25: 2023920.822 ops/s
# Warmup Iteration  26: 2060269.748 ops/s
# Warmup Iteration  27: 2122480.104 ops/s
# Warmup Iteration  28: 1668629.532 ops/s
# Warmup Iteration  29: 2099051.315 ops/s
# Warmup Iteration  30: 2067190.805 ops/s
Iteration   1: 2119942.470 ops/s
Iteration   2: 2094298.931 ops/s
Iteration   3: 2063292.709 ops/s
Iteration   4: 2156267.787 ops/s
Iteration   5: 2084987.063 ops/s
Iteration   6: 2069442.563 ops/s
Iteration   7: 2005735.882 ops/s
Iteration   8: 1986151.390 ops/s
Iteration   9: 2084899.106 ops/s
Iteration  10: 2091244.783 ops/s
Iteration  11: 2036844.599 ops/s
Iteration  12: 2089504.910 ops/s
Iteration  13: 2068215.980 ops/s
Iteration  14: 2080133.314 ops/s
Iteration  15: 2080026.944 ops/s
Iteration  16: 2033916.969 ops/s
Iteration  17: 2142275.675 ops/s
Iteration  18: 2005475.096 ops/s
Iteration  19: 2041661.768 ops/s
Iteration  20: 2097283.570 ops/s
Iteration  21: 2172986.982 ops/s
Iteration  22: 1976015.695 ops/s
Iteration  23: 2137402.205 ops/s
Iteration  24: 2011690.718 ops/s
Iteration  25: 2151818.252 ops/s
Iteration  26: 1993270.809 ops/s
Iteration  27: 2072300.703 ops/s
Iteration  28: 2065638.330 ops/s
Iteration  29: 2065503.553 ops/s
Iteration  30: 2137903.842 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCombineLatestTest._Benchmark.benchmark_disposed":
  2073871.086 ±(99.9%) 35249.267 ops/s [Average]
  (min, avg, max) = (1976015.695, 2073871.086, 2172986.982), stdev = 52759.448
  CI (99.9%): [2038621.819, 2109120.354] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
ObservableCombineLatestTest._Benchmark.benchmark_disposed  thrpt   30  2073871.086 ± 35249.267  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_multiTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_multiTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 158478.524 ops/s
# Warmup Iteration   2: 1117989.136 ops/s
# Warmup Iteration   3: 2423989.457 ops/s
# Warmup Iteration   4: 2993007.418 ops/s
# Warmup Iteration   5: 2835372.055 ops/s
# Warmup Iteration   6: 2828141.853 ops/s
# Warmup Iteration   7: 2908350.926 ops/s
# Warmup Iteration   8: 2945679.492 ops/s
# Warmup Iteration   9: 2770901.163 ops/s
# Warmup Iteration  10: 2805137.257 ops/s
# Warmup Iteration  11: 2902375.380 ops/s
# Warmup Iteration  12: 3016406.017 ops/s
# Warmup Iteration  13: 2970992.995 ops/s
# Warmup Iteration  14: 2975883.089 ops/s
# Warmup Iteration  15: 2833519.995 ops/s
# Warmup Iteration  16: 2871156.586 ops/s
# Warmup Iteration  17: 3009169.367 ops/s
# Warmup Iteration  18: 2843565.916 ops/s
# Warmup Iteration  19: 2962785.887 ops/s
# Warmup Iteration  20: 2945095.146 ops/s
# Warmup Iteration  21: 2790735.393 ops/s
# Warmup Iteration  22: 2934077.510 ops/s
# Warmup Iteration  23: 2865260.726 ops/s
# Warmup Iteration  24: 2838420.597 ops/s
# Warmup Iteration  25: 3053448.708 ops/s
# Warmup Iteration  26: 2818262.782 ops/s
# Warmup Iteration  27: 2997359.010 ops/s
# Warmup Iteration  28: 2910686.307 ops/s
# Warmup Iteration  29: 2886373.144 ops/s
# Warmup Iteration  30: 2952884.083 ops/s
Iteration   1: 2821497.569 ops/s
Iteration   2: 2861760.620 ops/s
Iteration   3: 2946677.224 ops/s
Iteration   4: 2989040.082 ops/s
Iteration   5: 2810588.435 ops/s
Iteration   6: 3019658.330 ops/s
Iteration   7: 2834140.955 ops/s
Iteration   8: 2917180.830 ops/s
Iteration   9: 2901528.622 ops/s
Iteration  10: 2983169.320 ops/s
Iteration  11: 2867060.880 ops/s
Iteration  12: 3027577.914 ops/s
Iteration  13: 2858108.911 ops/s
Iteration  14: 2925494.277 ops/s
Iteration  15: 2975676.879 ops/s
Iteration  16: 2875080.667 ops/s
Iteration  17: 2822029.198 ops/s
Iteration  18: 2962086.301 ops/s
Iteration  19: 2881796.196 ops/s
Iteration  20: 2891390.178 ops/s
Iteration  21: 2999630.008 ops/s
Iteration  22: 2819634.651 ops/s
Iteration  23: 2905248.616 ops/s
Iteration  24: 3024441.870 ops/s
Iteration  25: 2826726.042 ops/s
Iteration  26: 2989830.866 ops/s
Iteration  27: 2845933.129 ops/s
Iteration  28: 2959868.355 ops/s
Iteration  29: 2823154.922 ops/s
Iteration  30: 2945095.111 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_multiTake":
  2910370.232 ±(99.9%) 47178.584 ops/s [Average]
  (min, avg, max) = (2810588.435, 2910370.232, 3027577.914), stdev = 70614.688
  CI (99.9%): [2863191.648, 2957548.815] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score       Error  Units
ObservableTakeTest._Benchmark.benchmark_multiTake  thrpt   30  2910370.232 ± 47178.584  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_cancelNoInnerYet$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_cancelNoInnerYet

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 296124.262 ops/s
# Warmup Iteration   2: 1208377.246 ops/s
# Warmup Iteration   3: 1771536.069 ops/s
# Warmup Iteration   4: 1888311.875 ops/s
# Warmup Iteration   5: 1857531.558 ops/s
# Warmup Iteration   6: 1867814.045 ops/s
# Warmup Iteration   7: 1903075.046 ops/s
# Warmup Iteration   8: 1887417.569 ops/s
# Warmup Iteration   9: 1872903.425 ops/s
# Warmup Iteration  10: 1972212.773 ops/s
# Warmup Iteration  11: 1896471.416 ops/s
# Warmup Iteration  12: 1835873.385 ops/s
# Warmup Iteration  13: 1892029.025 ops/s
# Warmup Iteration  14: 1882209.296 ops/s
# Warmup Iteration  15: 1880114.246 ops/s
# Warmup Iteration  16: 1938533.891 ops/s
# Warmup Iteration  17: 1863644.748 ops/s
# Warmup Iteration  18: 1983737.962 ops/s
# Warmup Iteration  19: 1849464.750 ops/s
# Warmup Iteration  20: 1891320.231 ops/s
# Warmup Iteration  21: 1972866.836 ops/s
# Warmup Iteration  22: 1631176.642 ops/s
# Warmup Iteration  23: 1878752.360 ops/s
# Warmup Iteration  24: 1926748.914 ops/s
# Warmup Iteration  25: 1889881.436 ops/s
# Warmup Iteration  26: 1886295.103 ops/s
# Warmup Iteration  27: 1936647.443 ops/s
# Warmup Iteration  28: 1996518.346 ops/s
# Warmup Iteration  29: 1879491.169 ops/s
# Warmup Iteration  30: 1909026.467 ops/s
Iteration   1: 2001161.674 ops/s
Iteration   2: 1925870.721 ops/s
Iteration   3: 1893070.846 ops/s
Iteration   4: 1928676.130 ops/s
Iteration   5: 1959463.575 ops/s
Iteration   6: 1845634.976 ops/s
Iteration   7: 1959469.442 ops/s
Iteration   8: 1839236.200 ops/s
Iteration   9: 1988781.146 ops/s
Iteration  10: 1790797.205 ops/s
Iteration  11: 1889391.464 ops/s
Iteration  12: 1970010.805 ops/s
Iteration  13: 1894013.700 ops/s
Iteration  14: 1846790.819 ops/s
Iteration  15: 1936055.003 ops/s
Iteration  16: 1884483.173 ops/s
Iteration  17: 1934377.692 ops/s
Iteration  18: 1942962.093 ops/s
Iteration  19: 1884300.018 ops/s
Iteration  20: 1952840.357 ops/s
Iteration  21: 1867948.909 ops/s
Iteration  22: 1910439.441 ops/s
Iteration  23: 1884282.463 ops/s
Iteration  24: 1893408.136 ops/s
Iteration  25: 1960148.395 ops/s
Iteration  26: 1869371.408 ops/s
Iteration  27: 1955272.401 ops/s
Iteration  28: 1870135.905 ops/s
Iteration  29: 1923978.390 ops/s
Iteration  30: 1946204.572 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_cancelNoInnerYet":
  1911619.235 ±(99.9%) 32678.519 ops/s [Average]
  (min, avg, max) = (1790797.205, 1911619.235, 2001161.674), stdev = 48911.673
  CI (99.9%): [1878940.716, 1944297.754] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_cancelNoInnerYet  thrpt   30  1911619.235 ± 32678.519  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_upstreamFailsBeforeFirstWindow$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_upstreamFailsBeforeFirstWindow

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49665.545 ops/s
# Warmup Iteration   2: 303377.620 ops/s
# Warmup Iteration   3: 499739.738 ops/s
# Warmup Iteration   4: 554268.335 ops/s
# Warmup Iteration   5: 584977.217 ops/s
# Warmup Iteration   6: 566681.442 ops/s
# Warmup Iteration   7: 578354.685 ops/s
# Warmup Iteration   8: 562884.493 ops/s
# Warmup Iteration   9: 559756.521 ops/s
# Warmup Iteration  10: 557000.214 ops/s
# Warmup Iteration  11: 546335.778 ops/s
# Warmup Iteration  12: 557240.554 ops/s
# Warmup Iteration  13: 565316.787 ops/s
# Warmup Iteration  14: 597203.599 ops/s
# Warmup Iteration  15: 566158.554 ops/s
# Warmup Iteration  16: 587458.878 ops/s
# Warmup Iteration  17: 626252.933 ops/s
# Warmup Iteration  18: 599110.109 ops/s
# Warmup Iteration  19: 615772.153 ops/s
# Warmup Iteration  20: 603963.618 ops/s
# Warmup Iteration  21: 614245.469 ops/s
# Warmup Iteration  22: 624621.574 ops/s
# Warmup Iteration  23: 594843.593 ops/s
# Warmup Iteration  24: 634817.254 ops/s
# Warmup Iteration  25: 615882.505 ops/s
# Warmup Iteration  26: 602878.199 ops/s
# Warmup Iteration  27: 623028.285 ops/s
# Warmup Iteration  28: 633596.887 ops/s
# Warmup Iteration  29: 606010.629 ops/s
# Warmup Iteration  30: 595379.462 ops/s
Iteration   1: 617496.149 ops/s
Iteration   2: 637629.910 ops/s
Iteration   3: 643310.206 ops/s
Iteration   4: 589632.013 ops/s
Iteration   5: 627815.797 ops/s
Iteration   6: 645381.110 ops/s
Iteration   7: 586247.533 ops/s
Iteration   8: 622016.108 ops/s
Iteration   9: 601522.411 ops/s
Iteration  10: 602982.194 ops/s
Iteration  11: 610074.448 ops/s
Iteration  12: 597033.839 ops/s
Iteration  13: 632045.020 ops/s
Iteration  14: 614627.853 ops/s
Iteration  15: 603901.593 ops/s
Iteration  16: 632279.051 ops/s
Iteration  17: 606040.918 ops/s
Iteration  18: 640443.743 ops/s
Iteration  19: 621494.866 ops/s
Iteration  20: 600486.095 ops/s
Iteration  21: 633103.135 ops/s
Iteration  22: 614068.010 ops/s
Iteration  23: 625319.140 ops/s
Iteration  24: 600678.123 ops/s
Iteration  25: 625025.880 ops/s
Iteration  26: 602672.451 ops/s
Iteration  27: 605500.140 ops/s
Iteration  28: 631297.899 ops/s
Iteration  29: 608352.432 ops/s
Iteration  30: 625802.866 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_upstreamFailsBeforeFirstWindow":
  616809.364 ±(99.9%) 10818.460 ops/s [Average]
  (min, avg, max) = (586247.533, 616809.364, 645381.110), stdev = 16192.563
  CI (99.9%): [605990.904, 627627.825] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score       Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_upstreamFailsBeforeFirstWindow  thrpt   30  616809.364 ± 10818.460  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 69562.961 ops/s
# Warmup Iteration   2: 226860.605 ops/s
# Warmup Iteration   3: 491950.353 ops/s
# Warmup Iteration   4: 571148.956 ops/s
# Warmup Iteration   5: 497733.987 ops/s
# Warmup Iteration   6: 494066.958 ops/s
# Warmup Iteration   7: 557288.208 ops/s
# Warmup Iteration   8: 532957.172 ops/s
# Warmup Iteration   9: 562199.250 ops/s
# Warmup Iteration  10: 567090.465 ops/s
# Warmup Iteration  11: 548028.741 ops/s
# Warmup Iteration  12: 552774.971 ops/s
# Warmup Iteration  13: 566411.953 ops/s
# Warmup Iteration  14: 560550.287 ops/s
# Warmup Iteration  15: 550681.623 ops/s
# Warmup Iteration  16: 544208.058 ops/s
# Warmup Iteration  17: 512102.137 ops/s
# Warmup Iteration  18: 601456.764 ops/s
# Warmup Iteration  19: 608185.767 ops/s
# Warmup Iteration  20: 578530.244 ops/s
# Warmup Iteration  21: 593893.322 ops/s
# Warmup Iteration  22: 603198.811 ops/s
# Warmup Iteration  23: 590802.238 ops/s
# Warmup Iteration  24: 580327.744 ops/s
# Warmup Iteration  25: 610763.640 ops/s
# Warmup Iteration  26: 582106.187 ops/s
# Warmup Iteration  27: 570808.550 ops/s
# Warmup Iteration  28: 608362.025 ops/s
# Warmup Iteration  29: 582508.772 ops/s
# Warmup Iteration  30: 595390.617 ops/s
Iteration   1: 605593.548 ops/s
Iteration   2: 583357.194 ops/s
Iteration   3: 596675.239 ops/s
Iteration   4: 604118.973 ops/s
Iteration   5: 574180.049 ops/s
Iteration   6: 605555.291 ops/s
Iteration   7: 561419.136 ops/s
Iteration   8: 599000.291 ops/s
Iteration   9: 573774.152 ops/s
Iteration  10: 595111.281 ops/s
Iteration  11: 587572.394 ops/s
Iteration  12: 578740.610 ops/s
Iteration  13: 572159.656 ops/s
Iteration  14: 587960.828 ops/s
Iteration  15: 594325.244 ops/s
Iteration  16: 576896.018 ops/s
Iteration  17: 578499.272 ops/s
Iteration  18: 596669.547 ops/s
Iteration  19: 583769.465 ops/s
Iteration  20: 601276.472 ops/s
Iteration  21: 586295.953 ops/s
Iteration  22: 583040.270 ops/s
Iteration  23: 607714.806 ops/s
Iteration  24: 602031.291 ops/s
Iteration  25: 575502.691 ops/s
Iteration  26: 609895.153 ops/s
Iteration  27: 582096.848 ops/s
Iteration  28: 608377.042 ops/s
Iteration  29: 605080.490 ops/s
Iteration  30: 585027.181 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainError":
  590057.213 ±(99.9%) 8753.339 ops/s [Average]
  (min, avg, max) = (561419.136, 590057.213, 609895.153), stdev = 13101.587
  CI (99.9%): [581303.874, 598810.552] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_mainError  thrpt   30  590057.213 ± 8753.339  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_invalidMaxConcurrent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_invalidMaxConcurrent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 287543.557 ops/s
# Warmup Iteration   2: 592026.867 ops/s
# Warmup Iteration   3: 609746.570 ops/s
# Warmup Iteration   4: 672991.539 ops/s
# Warmup Iteration   5: 659870.498 ops/s
# Warmup Iteration   6: 674707.845 ops/s
# Warmup Iteration   7: 686680.705 ops/s
# Warmup Iteration   8: 728083.725 ops/s
# Warmup Iteration   9: 698512.114 ops/s
# Warmup Iteration  10: 675310.304 ops/s
# Warmup Iteration  11: 720155.746 ops/s
# Warmup Iteration  12: 689161.826 ops/s
# Warmup Iteration  13: 691150.865 ops/s
# Warmup Iteration  14: 722369.295 ops/s
# Warmup Iteration  15: 693263.659 ops/s
# Warmup Iteration  16: 710146.440 ops/s
# Warmup Iteration  17: 729264.725 ops/s
# Warmup Iteration  18: 734778.674 ops/s
# Warmup Iteration  19: 739316.724 ops/s
# Warmup Iteration  20: 741282.005 ops/s
# Warmup Iteration  21: 759951.683 ops/s
# Warmup Iteration  22: 739159.569 ops/s
# Warmup Iteration  23: 729585.999 ops/s
# Warmup Iteration  24: 721540.774 ops/s
# Warmup Iteration  25: 751321.478 ops/s
# Warmup Iteration  26: 732419.489 ops/s
# Warmup Iteration  27: 727254.881 ops/s
# Warmup Iteration  28: 740437.636 ops/s
# Warmup Iteration  29: 752918.305 ops/s
# Warmup Iteration  30: 716778.642 ops/s
Iteration   1: 761389.507 ops/s
Iteration   2: 735777.967 ops/s
Iteration   3: 724816.026 ops/s
Iteration   4: 774875.161 ops/s
Iteration   5: 714554.675 ops/s
Iteration   6: 747741.023 ops/s
Iteration   7: 762906.224 ops/s
Iteration   8: 726074.347 ops/s
Iteration   9: 751201.673 ops/s
Iteration  10: 722436.487 ops/s
Iteration  11: 739162.715 ops/s
Iteration  12: 764268.889 ops/s
Iteration  13: 728734.982 ops/s
Iteration  14: 722650.810 ops/s
Iteration  15: 720134.192 ops/s
Iteration  16: 732364.263 ops/s
Iteration  17: 746540.378 ops/s
Iteration  18: 757154.770 ops/s
Iteration  19: 728743.458 ops/s
Iteration  20: 765897.346 ops/s
Iteration  21: 762583.969 ops/s
Iteration  22: 705143.985 ops/s
Iteration  23: 760143.957 ops/s
Iteration  24: 706810.732 ops/s
Iteration  25: 742568.270 ops/s
Iteration  26: 759817.373 ops/s
Iteration  27: 719757.028 ops/s
Iteration  28: 729443.567 ops/s
Iteration  29: 733865.065 ops/s
Iteration  30: 720877.814 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_invalidMaxConcurrent":
  738947.889 ±(99.9%) 12958.762 ops/s [Average]
  (min, avg, max) = (705143.985, 738947.889, 774875.161), stdev = 19396.066
  CI (99.9%): [725989.126, 751906.651] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_invalidMaxConcurrent  thrpt   30  738947.889 ± 12958.762  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_startError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_startError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 33011.596 ops/s
# Warmup Iteration   2: 301272.698 ops/s
# Warmup Iteration   3: 370561.823 ops/s
# Warmup Iteration   4: 435466.171 ops/s
# Warmup Iteration   5: 448212.882 ops/s
# Warmup Iteration   6: 459517.637 ops/s
# Warmup Iteration   7: 445141.648 ops/s
# Warmup Iteration   8: 459741.551 ops/s
# Warmup Iteration   9: 445325.963 ops/s
# Warmup Iteration  10: 462855.110 ops/s
# Warmup Iteration  11: 373873.396 ops/s
# Warmup Iteration  12: 454276.404 ops/s
# Warmup Iteration  13: 452498.052 ops/s
# Warmup Iteration  14: 449971.862 ops/s
# Warmup Iteration  15: 448566.033 ops/s
# Warmup Iteration  16: 464455.184 ops/s
# Warmup Iteration  17: 462708.506 ops/s
# Warmup Iteration  18: 468083.193 ops/s
# Warmup Iteration  19: 496355.920 ops/s
# Warmup Iteration  20: 454051.493 ops/s
# Warmup Iteration  21: 479282.840 ops/s
# Warmup Iteration  22: 486537.965 ops/s
# Warmup Iteration  23: 461482.427 ops/s
# Warmup Iteration  24: 464820.410 ops/s
# Warmup Iteration  25: 464096.548 ops/s
# Warmup Iteration  26: 469817.471 ops/s
# Warmup Iteration  27: 481165.965 ops/s
# Warmup Iteration  28: 448215.187 ops/s
# Warmup Iteration  29: 470359.653 ops/s
# Warmup Iteration  30: 487762.871 ops/s
Iteration   1: 455296.455 ops/s
Iteration   2: 472301.333 ops/s
Iteration   3: 461554.783 ops/s
Iteration   4: 465086.357 ops/s
Iteration   5: 483117.275 ops/s
Iteration   6: 461237.868 ops/s
Iteration   7: 484137.367 ops/s
Iteration   8: 489825.070 ops/s
Iteration   9: 454151.192 ops/s
Iteration  10: 484315.325 ops/s
Iteration  11: 462837.704 ops/s
Iteration  12: 481053.308 ops/s
Iteration  13: 453913.591 ops/s
Iteration  14: 444530.247 ops/s
Iteration  15: 475082.966 ops/s
Iteration  16: 472449.244 ops/s
Iteration  17: 469723.328 ops/s
Iteration  18: 481062.357 ops/s
Iteration  19: 463423.139 ops/s
Iteration  20: 469302.262 ops/s
Iteration  21: 495342.106 ops/s
Iteration  22: 457729.516 ops/s
Iteration  23: 481858.261 ops/s
Iteration  24: 489868.485 ops/s
Iteration  25: 468818.955 ops/s
Iteration  26: 487186.878 ops/s
Iteration  27: 460836.286 ops/s
Iteration  28: 484847.221 ops/s
Iteration  29: 460314.486 ops/s
Iteration  30: 477343.336 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_startError":
  471618.223 ±(99.9%) 8677.776 ops/s [Average]
  (min, avg, max) = (444530.247, 471618.223, 495342.106), stdev = 12988.488
  CI (99.9%): [462940.447, 480296.000] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
FlowableWindowWithStartEndFlowableTest._Benchmark.benchmark_startError  thrpt   30  471618.223 ± 8677.776  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_signalsAfterMapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_signalsAfterMapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 27026.471 ops/s
# Warmup Iteration   2: 119793.468 ops/s
# Warmup Iteration   3: 151229.246 ops/s
# Warmup Iteration   4: 153544.315 ops/s
# Warmup Iteration   5: 157225.104 ops/s
# Warmup Iteration   6: 151541.730 ops/s
# Warmup Iteration   7: 152873.901 ops/s
# Warmup Iteration   8: 161049.185 ops/s
# Warmup Iteration   9: 161051.477 ops/s
# Warmup Iteration  10: 168945.247 ops/s
# Warmup Iteration  11: 160302.031 ops/s
# Warmup Iteration  12: 166652.007 ops/s
# Warmup Iteration  13: 159943.539 ops/s
# Warmup Iteration  14: 163355.746 ops/s
# Warmup Iteration  15: 167969.965 ops/s
# Warmup Iteration  16: 160067.320 ops/s
# Warmup Iteration  17: 172325.333 ops/s
# Warmup Iteration  18: 167287.639 ops/s
# Warmup Iteration  19: 168284.827 ops/s
# Warmup Iteration  20: 171823.267 ops/s
# Warmup Iteration  21: 166732.378 ops/s
# Warmup Iteration  22: 171479.078 ops/s
# Warmup Iteration  23: 165699.949 ops/s
# Warmup Iteration  24: 164286.688 ops/s
# Warmup Iteration  25: 171851.311 ops/s
# Warmup Iteration  26: 162379.702 ops/s
# Warmup Iteration  27: 166873.160 ops/s
# Warmup Iteration  28: 174253.298 ops/s
# Warmup Iteration  29: 165456.653 ops/s
# Warmup Iteration  30: 175276.986 ops/s
Iteration   1: 167371.806 ops/s
Iteration   2: 165101.424 ops/s
Iteration   3: 173951.585 ops/s
Iteration   4: 167320.466 ops/s
Iteration   5: 171746.728 ops/s
Iteration   6: 166796.508 ops/s
Iteration   7: 169908.744 ops/s
Iteration   8: 173981.117 ops/s
Iteration   9: 167621.952 ops/s
Iteration  10: 169174.690 ops/s
Iteration  11: 167045.465 ops/s
Iteration  12: 169717.500 ops/s
Iteration  13: 174317.596 ops/s
Iteration  14: 165231.424 ops/s
Iteration  15: 175623.154 ops/s
Iteration  16: 165220.207 ops/s
Iteration  17: 175768.387 ops/s
Iteration  18: 161056.836 ops/s
Iteration  19: 173417.124 ops/s
Iteration  20: 170834.504 ops/s
Iteration  21: 167759.761 ops/s
Iteration  22: 172582.138 ops/s
Iteration  23: 169768.056 ops/s
Iteration  24: 172670.298 ops/s
Iteration  25: 167545.310 ops/s
Iteration  26: 173844.785 ops/s
Iteration  27: 166211.592 ops/s
Iteration  28: 167383.053 ops/s
Iteration  29: 174126.157 ops/s
Iteration  30: 166440.492 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_signalsAfterMapperCrash":
  169651.295 ±(99.9%) 2501.129 ops/s [Average]
  (min, avg, max) = (161056.836, 169651.295, 175768.387), stdev = 3743.573
  CI (99.9%): [167150.166, 172152.424] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_signalsAfterMapperCrash  thrpt   30  169651.295 ± 2501.129  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_emptyObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_emptyObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2026627.906 ops/s
# Warmup Iteration   2: 4769904.963 ops/s
# Warmup Iteration   3: 6064899.041 ops/s
# Warmup Iteration   4: 6203085.700 ops/s
# Warmup Iteration   5: 6452306.509 ops/s
# Warmup Iteration   6: 4939322.522 ops/s
# Warmup Iteration   7: 6302762.551 ops/s
# Warmup Iteration   8: 6495711.416 ops/s
# Warmup Iteration   9: 6168470.427 ops/s
# Warmup Iteration  10: 6487203.616 ops/s
# Warmup Iteration  11: 6371200.280 ops/s
# Warmup Iteration  12: 6457591.843 ops/s
# Warmup Iteration  13: 6681126.723 ops/s
# Warmup Iteration  14: 6040199.362 ops/s
# Warmup Iteration  15: 6647719.832 ops/s
# Warmup Iteration  16: 6205222.091 ops/s
# Warmup Iteration  17: 6303612.536 ops/s
# Warmup Iteration  18: 6374283.504 ops/s
# Warmup Iteration  19: 6393273.825 ops/s
# Warmup Iteration  20: 6616415.392 ops/s
# Warmup Iteration  21: 6172106.261 ops/s
# Warmup Iteration  22: 6214024.115 ops/s
# Warmup Iteration  23: 6688976.697 ops/s
# Warmup Iteration  24: 6184029.169 ops/s
# Warmup Iteration  25: 6564475.227 ops/s
# Warmup Iteration  26: 6270220.814 ops/s
# Warmup Iteration  27: 6391717.545 ops/s
# Warmup Iteration  28: 6434424.839 ops/s
# Warmup Iteration  29: 6422940.322 ops/s
# Warmup Iteration  30: 6443701.958 ops/s
Iteration   1: 6288266.804 ops/s
Iteration   2: 6339918.640 ops/s
Iteration   3: 6267798.019 ops/s
Iteration   4: 6554301.464 ops/s
Iteration   5: 6370822.389 ops/s
Iteration   6: 6431779.404 ops/s
Iteration   7: 6533551.572 ops/s
Iteration   8: 6106946.433 ops/s
Iteration   9: 6432141.037 ops/s
Iteration  10: 6209445.354 ops/s
Iteration  11: 6255774.773 ops/s
Iteration  12: 6428314.278 ops/s
Iteration  13: 6225993.540 ops/s
Iteration  14: 6413535.925 ops/s
Iteration  15: 6647249.767 ops/s
Iteration  16: 6178390.929 ops/s
Iteration  17: 6437815.866 ops/s
Iteration  18: 6294916.517 ops/s
Iteration  19: 6517854.991 ops/s
Iteration  20: 6257499.514 ops/s
Iteration  21: 6413522.365 ops/s
Iteration  22: 6257554.778 ops/s
Iteration  23: 6342350.108 ops/s
Iteration  24: 6610526.539 ops/s
Iteration  25: 6399497.119 ops/s
Iteration  26: 6221895.138 ops/s
Iteration  27: 6301265.526 ops/s
Iteration  28: 6406413.306 ops/s
Iteration  29: 6428677.120 ops/s
Iteration  30: 6242632.468 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_emptyObservable":
  6360555.056 ±(99.9%) 87535.848 ops/s [Average]
  (min, avg, max) = (6106946.433, 6360555.056, 6647249.767), stdev = 131019.546
  CI (99.9%): [6273019.208, 6448090.904] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowableToCompletableTest._Benchmark.benchmark_emptyObservable  thrpt   30  6360555.056 ± 87535.848  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapCombinerMapperReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapCombinerMapperReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 188374.669 ops/s
# Warmup Iteration   2: 506068.612 ops/s
# Warmup Iteration   3: 565128.239 ops/s
# Warmup Iteration   4: 557435.655 ops/s
# Warmup Iteration   5: 580099.671 ops/s
# Warmup Iteration   6: 564012.838 ops/s
# Warmup Iteration   7: 539659.030 ops/s
# Warmup Iteration   8: 570983.847 ops/s
# Warmup Iteration   9: 541899.175 ops/s
# Warmup Iteration  10: 548665.670 ops/s
# Warmup Iteration  11: 557060.734 ops/s
# Warmup Iteration  12: 564402.978 ops/s
# Warmup Iteration  13: 533107.132 ops/s
# Warmup Iteration  14: 567318.360 ops/s
# Warmup Iteration  15: 533469.371 ops/s
# Warmup Iteration  16: 576658.157 ops/s
# Warmup Iteration  17: 586491.443 ops/s
# Warmup Iteration  18: 578386.426 ops/s
# Warmup Iteration  19: 603510.317 ops/s
# Warmup Iteration  20: 588126.639 ops/s
# Warmup Iteration  21: 604989.355 ops/s
# Warmup Iteration  22: 589070.590 ops/s
# Warmup Iteration  23: 587373.176 ops/s
# Warmup Iteration  24: 590269.304 ops/s
# Warmup Iteration  25: 594118.885 ops/s
# Warmup Iteration  26: 583112.395 ops/s
# Warmup Iteration  27: 611515.961 ops/s
# Warmup Iteration  28: 580045.873 ops/s
# Warmup Iteration  29: 590235.336 ops/s
# Warmup Iteration  30: 587570.605 ops/s
Iteration   1: 587488.767 ops/s
Iteration   2: 595412.196 ops/s
Iteration   3: 610333.334 ops/s
Iteration   4: 568192.935 ops/s
Iteration   5: 597158.507 ops/s
Iteration   6: 582629.921 ops/s
Iteration   7: 559980.346 ops/s
Iteration   8: 616532.870 ops/s
Iteration   9: 604565.829 ops/s
Iteration  10: 597377.337 ops/s
Iteration  11: 566123.142 ops/s
Iteration  12: 601490.524 ops/s
Iteration  13: 597560.704 ops/s
Iteration  14: 588582.238 ops/s
Iteration  15: 586479.234 ops/s
Iteration  16: 608607.184 ops/s
Iteration  17: 590616.971 ops/s
Iteration  18: 583631.505 ops/s
Iteration  19: 606046.384 ops/s
Iteration  20: 593596.384 ops/s
Iteration  21: 597699.061 ops/s
Iteration  22: 586707.624 ops/s
Iteration  23: 600317.673 ops/s
Iteration  24: 577312.988 ops/s
Iteration  25: 579845.805 ops/s
Iteration  26: 606835.802 ops/s
Iteration  27: 580250.598 ops/s
Iteration  28: 589846.500 ops/s
Iteration  29: 600666.754 ops/s
Iteration  30: 596026.743 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_flatMapCombinerMapperReturnsNull":
  591930.529 ±(99.9%) 8938.445 ops/s [Average]
  (min, avg, max) = (559980.346, 591930.529, 616532.870), stdev = 13378.645
  CI (99.9%): [582992.083, 600868.974] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
FlowableNullTests._Benchmark.benchmark_flatMapCombinerMapperReturnsNull  thrpt   30  591930.529 ± 8938.445  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_badRequest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_badRequest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58998.062 ops/s
# Warmup Iteration   2: 282278.635 ops/s
# Warmup Iteration   3: 397488.741 ops/s
# Warmup Iteration   4: 439572.530 ops/s
# Warmup Iteration   5: 445659.306 ops/s
# Warmup Iteration   6: 478248.093 ops/s
# Warmup Iteration   7: 469049.175 ops/s
# Warmup Iteration   8: 508680.629 ops/s
# Warmup Iteration   9: 474077.252 ops/s
# Warmup Iteration  10: 492459.400 ops/s
# Warmup Iteration  11: 482819.689 ops/s
# Warmup Iteration  12: 487378.948 ops/s
# Warmup Iteration  13: 487300.109 ops/s
# Warmup Iteration  14: 496460.313 ops/s
# Warmup Iteration  15: 464838.007 ops/s
# Warmup Iteration  16: 476360.654 ops/s
# Warmup Iteration  17: 499929.861 ops/s
# Warmup Iteration  18: 508266.013 ops/s
# Warmup Iteration  19: 504714.423 ops/s
# Warmup Iteration  20: 521397.200 ops/s
# Warmup Iteration  21: 491883.998 ops/s
# Warmup Iteration  22: 528123.916 ops/s
# Warmup Iteration  23: 485277.671 ops/s
# Warmup Iteration  24: 497843.390 ops/s
# Warmup Iteration  25: 488149.392 ops/s
# Warmup Iteration  26: 511248.610 ops/s
# Warmup Iteration  27: 503470.957 ops/s
# Warmup Iteration  28: 492999.189 ops/s
# Warmup Iteration  29: 511454.083 ops/s
# Warmup Iteration  30: 483858.466 ops/s
Iteration   1: 480654.474 ops/s
Iteration   2: 513191.505 ops/s
Iteration   3: 470519.973 ops/s
Iteration   4: 510705.209 ops/s
Iteration   5: 493278.841 ops/s
Iteration   6: 515578.771 ops/s
Iteration   7: 492560.124 ops/s
Iteration   8: 495854.553 ops/s
Iteration   9: 519975.211 ops/s
Iteration  10: 492289.493 ops/s
Iteration  11: 515490.641 ops/s
Iteration  12: 485552.797 ops/s
Iteration  13: 505908.889 ops/s
Iteration  14: 493258.426 ops/s
Iteration  15: 498174.235 ops/s
Iteration  16: 518317.964 ops/s
Iteration  17: 505692.396 ops/s
Iteration  18: 521515.026 ops/s
Iteration  19: 513437.578 ops/s
Iteration  20: 497490.114 ops/s
Iteration  21: 511446.200 ops/s
Iteration  22: 497539.281 ops/s
Iteration  23: 528544.038 ops/s
Iteration  24: 508813.804 ops/s
Iteration  25: 497208.685 ops/s
Iteration  26: 521705.566 ops/s
Iteration  27: 502473.736 ops/s
Iteration  28: 516012.847 ops/s
Iteration  29: 487593.176 ops/s
Iteration  30: 526749.762 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest._Benchmark.benchmark_badRequest":
  504584.444 ±(99.9%) 9538.396 ops/s [Average]
  (min, avg, max) = (470519.973, 504584.444, 528544.038), stdev = 14276.624
  CI (99.9%): [495046.048, 514122.840] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
FlowableTakeTest._Benchmark.benchmark_badRequest  thrpt   30  504584.444 ± 9538.396  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_errorObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_errorObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 321724.523 ops/s
# Warmup Iteration   2: 534309.017 ops/s
# Warmup Iteration   3: 655099.834 ops/s
# Warmup Iteration   4: 689259.259 ops/s
# Warmup Iteration   5: 641011.874 ops/s
# Warmup Iteration   6: 679414.617 ops/s
# Warmup Iteration   7: 659084.880 ops/s
# Warmup Iteration   8: 658504.742 ops/s
# Warmup Iteration   9: 670829.760 ops/s
# Warmup Iteration  10: 641904.975 ops/s
# Warmup Iteration  11: 637901.148 ops/s
# Warmup Iteration  12: 666555.264 ops/s
# Warmup Iteration  13: 657654.965 ops/s
# Warmup Iteration  14: 635644.173 ops/s
# Warmup Iteration  15: 680388.638 ops/s
# Warmup Iteration  16: 635229.127 ops/s
# Warmup Iteration  17: 691720.939 ops/s
# Warmup Iteration  18: 698216.395 ops/s
# Warmup Iteration  19: 718560.745 ops/s
# Warmup Iteration  20: 728547.796 ops/s
# Warmup Iteration  21: 696894.426 ops/s
# Warmup Iteration  22: 712957.176 ops/s
# Warmup Iteration  23: 723136.305 ops/s
# Warmup Iteration  24: 696183.431 ops/s
# Warmup Iteration  25: 714373.399 ops/s
# Warmup Iteration  26: 714893.209 ops/s
# Warmup Iteration  27: 712273.542 ops/s
# Warmup Iteration  28: 714946.264 ops/s
# Warmup Iteration  29: 718020.965 ops/s
# Warmup Iteration  30: 700185.041 ops/s
Iteration   1: 706881.154 ops/s
Iteration   2: 717068.256 ops/s
Iteration   3: 707369.253 ops/s
Iteration   4: 721506.737 ops/s
Iteration   5: 714705.257 ops/s
Iteration   6: 712672.779 ops/s
Iteration   7: 704800.700 ops/s
Iteration   8: 703181.990 ops/s
Iteration   9: 736630.383 ops/s
Iteration  10: 701505.486 ops/s
Iteration  11: 737399.845 ops/s
Iteration  12: 688025.244 ops/s
Iteration  13: 730370.731 ops/s
Iteration  14: 703147.021 ops/s
Iteration  15: 694209.422 ops/s
Iteration  16: 730811.557 ops/s
Iteration  17: 693350.175 ops/s
Iteration  18: 720790.842 ops/s
Iteration  19: 738585.710 ops/s
Iteration  20: 714102.092 ops/s
Iteration  21: 699443.722 ops/s
Iteration  22: 735346.269 ops/s
Iteration  23: 701857.816 ops/s
Iteration  24: 735846.767 ops/s
Iteration  25: 714035.898 ops/s
Iteration  26: 700507.598 ops/s
Iteration  27: 546446.525 ops/s
Iteration  28: 650274.820 ops/s
Iteration  29: 713531.995 ops/s
Iteration  30: 706762.513 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableToCompletableTest._Benchmark.benchmark_errorObservable":
  706038.952 ±(99.9%) 23589.577 ops/s [Average]
  (min, avg, max) = (546446.525, 706038.952, 738585.710), stdev = 35307.770
  CI (99.9%): [682449.375, 729628.528] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableToCompletableTest._Benchmark.benchmark_errorObservable  thrpt   30  706038.952 ± 23589.577  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_combinerMapperFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_combinerMapperFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 200816.352 ops/s
# Warmup Iteration   2: 508223.626 ops/s
# Warmup Iteration   3: 553703.654 ops/s
# Warmup Iteration   4: 532736.500 ops/s
# Warmup Iteration   5: 606639.982 ops/s
# Warmup Iteration   6: 585324.508 ops/s
# Warmup Iteration   7: 591170.903 ops/s
# Warmup Iteration   8: 588879.908 ops/s
# Warmup Iteration   9: 586556.000 ops/s
# Warmup Iteration  10: 607871.982 ops/s
# Warmup Iteration  11: 583193.522 ops/s
# Warmup Iteration  12: 597300.256 ops/s
# Warmup Iteration  13: 595465.485 ops/s
# Warmup Iteration  14: 596291.990 ops/s
# Warmup Iteration  15: 586499.399 ops/s
# Warmup Iteration  16: 597891.593 ops/s
# Warmup Iteration  17: 582834.212 ops/s
# Warmup Iteration  18: 648085.285 ops/s
# Warmup Iteration  19: 607027.942 ops/s
# Warmup Iteration  20: 605740.835 ops/s
# Warmup Iteration  21: 607894.420 ops/s
# Warmup Iteration  22: 632198.313 ops/s
# Warmup Iteration  23: 621210.499 ops/s
# Warmup Iteration  24: 614383.360 ops/s
# Warmup Iteration  25: 646731.724 ops/s
# Warmup Iteration  26: 620991.970 ops/s
# Warmup Iteration  27: 634627.239 ops/s
# Warmup Iteration  28: 626254.220 ops/s
# Warmup Iteration  29: 617006.885 ops/s
# Warmup Iteration  30: 649683.423 ops/s
Iteration   1: 628124.752 ops/s
Iteration   2: 596318.722 ops/s
Iteration   3: 640963.676 ops/s
Iteration   4: 631805.432 ops/s
Iteration   5: 618128.791 ops/s
Iteration   6: 623093.876 ops/s
Iteration   7: 659813.343 ops/s
Iteration   8: 621957.426 ops/s
Iteration   9: 644894.641 ops/s
Iteration  10: 627411.421 ops/s
Iteration  11: 618890.015 ops/s
Iteration  12: 649426.818 ops/s
Iteration  13: 604757.276 ops/s
Iteration  14: 638252.636 ops/s
Iteration  15: 632196.303 ops/s
Iteration  16: 611716.887 ops/s
Iteration  17: 644612.028 ops/s
Iteration  18: 615671.911 ops/s
Iteration  19: 620318.494 ops/s
Iteration  20: 652002.967 ops/s
Iteration  21: 619124.230 ops/s
Iteration  22: 613613.446 ops/s
Iteration  23: 646370.776 ops/s
Iteration  24: 620035.070 ops/s
Iteration  25: 644371.402 ops/s
Iteration  26: 616128.062 ops/s
Iteration  27: 637454.537 ops/s
Iteration  28: 624407.871 ops/s
Iteration  29: 620733.719 ops/s
Iteration  30: 619047.654 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_combinerMapperFunctionReturnsNull":
  628054.806 ±(99.9%) 10007.255 ops/s [Average]
  (min, avg, max) = (596318.722, 628054.806, 659813.343), stdev = 14978.389
  CI (99.9%): [618047.551, 638062.061] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_combinerMapperFunctionReturnsNull  thrpt   30  628054.806 ± 10007.255  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_badRequestDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_badRequestDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 67480.905 ops/s
# Warmup Iteration   2: 364336.094 ops/s
# Warmup Iteration   3: 439773.437 ops/s
# Warmup Iteration   4: 512834.284 ops/s
# Warmup Iteration   5: 478658.413 ops/s
# Warmup Iteration   6: 492369.457 ops/s
# Warmup Iteration   7: 477674.881 ops/s
# Warmup Iteration   8: 454589.082 ops/s
# Warmup Iteration   9: 458817.120 ops/s
# Warmup Iteration  10: 484967.374 ops/s
# Warmup Iteration  11: 493027.233 ops/s
# Warmup Iteration  12: 494233.927 ops/s
# Warmup Iteration  13: 497569.103 ops/s
# Warmup Iteration  14: 491155.663 ops/s
# Warmup Iteration  15: 491628.909 ops/s
# Warmup Iteration  16: 501065.180 ops/s
# Warmup Iteration  17: 506927.323 ops/s
# Warmup Iteration  18: 515449.372 ops/s
# Warmup Iteration  19: 500996.320 ops/s
# Warmup Iteration  20: 524470.205 ops/s
# Warmup Iteration  21: 498247.712 ops/s
# Warmup Iteration  22: 532485.996 ops/s
# Warmup Iteration  23: 521039.654 ops/s
# Warmup Iteration  24: 492160.478 ops/s
# Warmup Iteration  25: 527220.928 ops/s
# Warmup Iteration  26: 517570.533 ops/s
# Warmup Iteration  27: 512563.225 ops/s
# Warmup Iteration  28: 514859.640 ops/s
# Warmup Iteration  29: 510393.958 ops/s
# Warmup Iteration  30: 530623.393 ops/s
Iteration   1: 505827.712 ops/s
Iteration   2: 517311.913 ops/s
Iteration   3: 498370.164 ops/s
Iteration   4: 512901.412 ops/s
Iteration   5: 515855.301 ops/s
Iteration   6: 496384.244 ops/s
Iteration   7: 521611.320 ops/s
Iteration   8: 519862.078 ops/s
Iteration   9: 498395.752 ops/s
Iteration  10: 526405.392 ops/s
Iteration  11: 503853.696 ops/s
Iteration  12: 513036.492 ops/s
Iteration  13: 512834.318 ops/s
Iteration  14: 494092.531 ops/s
Iteration  15: 531301.131 ops/s
Iteration  16: 499947.136 ops/s
Iteration  17: 500857.297 ops/s
Iteration  18: 537950.888 ops/s
Iteration  19: 487836.092 ops/s
Iteration  20: 523501.353 ops/s
Iteration  21: 499270.537 ops/s
Iteration  22: 368097.761 ops/s
Iteration  23: 509965.941 ops/s
Iteration  24: 495212.682 ops/s
Iteration  25: 530776.784 ops/s
Iteration  26: 488596.160 ops/s
Iteration  27: 508517.987 ops/s
Iteration  28: 504042.609 ops/s
Iteration  29: 509741.001 ops/s
Iteration  30: 489732.318 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatArrayTest._Benchmark.benchmark_badRequestDelayError":
  504069.667 ±(99.9%) 19309.877 ops/s [Average]
  (min, avg, max) = (368097.761, 504069.667, 537950.888), stdev = 28902.116
  CI (99.9%): [484759.790, 523379.543] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
MaybeConcatArrayTest._Benchmark.benchmark_badRequestDelayError  thrpt   30  504069.667 ± 19309.877  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_errorReceivedFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_errorReceivedFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 316600.320 ops/s
# Warmup Iteration   2: 556061.081 ops/s
# Warmup Iteration   3: 630099.197 ops/s
# Warmup Iteration   4: 666860.050 ops/s
# Warmup Iteration   5: 710475.101 ops/s
# Warmup Iteration   6: 666383.606 ops/s
# Warmup Iteration   7: 696892.112 ops/s
# Warmup Iteration   8: 670692.235 ops/s
# Warmup Iteration   9: 681534.462 ops/s
# Warmup Iteration  10: 692819.052 ops/s
# Warmup Iteration  11: 689180.055 ops/s
# Warmup Iteration  12: 664446.475 ops/s
# Warmup Iteration  13: 708186.144 ops/s
# Warmup Iteration  14: 712943.132 ops/s
# Warmup Iteration  15: 654415.470 ops/s
# Warmup Iteration  16: 694545.846 ops/s
# Warmup Iteration  17: 737174.447 ops/s
# Warmup Iteration  18: 700314.852 ops/s
# Warmup Iteration  19: 717092.235 ops/s
# Warmup Iteration  20: 736396.250 ops/s
# Warmup Iteration  21: 708020.628 ops/s
# Warmup Iteration  22: 726189.041 ops/s
# Warmup Iteration  23: 735448.915 ops/s
# Warmup Iteration  24: 697778.748 ops/s
# Warmup Iteration  25: 741694.527 ops/s
# Warmup Iteration  26: 705352.580 ops/s
# Warmup Iteration  27: 740713.333 ops/s
# Warmup Iteration  28: 712446.051 ops/s
# Warmup Iteration  29: 751414.392 ops/s
# Warmup Iteration  30: 705982.784 ops/s
Iteration   1: 743273.906 ops/s
Iteration   2: 697594.811 ops/s
Iteration   3: 722346.503 ops/s
Iteration   4: 749715.598 ops/s
Iteration   5: 700679.398 ops/s
Iteration   6: 728344.481 ops/s
Iteration   7: 719848.323 ops/s
Iteration   8: 713488.373 ops/s
Iteration   9: 748571.484 ops/s
Iteration  10: 738406.634 ops/s
Iteration  11: 723785.942 ops/s
Iteration  12: 706394.011 ops/s
Iteration  13: 741747.046 ops/s
Iteration  14: 728572.951 ops/s
Iteration  15: 709771.283 ops/s
Iteration  16: 712353.080 ops/s
Iteration  17: 737770.769 ops/s
Iteration  18: 710654.256 ops/s
Iteration  19: 747781.413 ops/s
Iteration  20: 718362.055 ops/s
Iteration  21: 731066.869 ops/s
Iteration  22: 723516.678 ops/s
Iteration  23: 714867.347 ops/s
Iteration  24: 751812.228 ops/s
Iteration  25: 706484.010 ops/s
Iteration  26: 732121.529 ops/s
Iteration  27: 714158.410 ops/s
Iteration  28: 730677.348 ops/s
Iteration  29: 695863.625 ops/s
Iteration  30: 721800.727 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableIgnoreElementsTest._Benchmark.benchmark_errorReceivedFlowable":
  724061.036 ±(99.9%) 10673.436 ops/s [Average]
  (min, avg, max) = (695863.625, 724061.036, 751812.228), stdev = 15975.498
  CI (99.9%): [713387.600, 734734.473] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
FlowableIgnoreElementsTest._Benchmark.benchmark_errorReceivedFlowable  thrpt   30  724061.036 ± 10673.436  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 134923.887 ops/s
# Warmup Iteration   2: 489016.808 ops/s
# Warmup Iteration   3: 575650.762 ops/s
# Warmup Iteration   4: 619600.743 ops/s
# Warmup Iteration   5: 642056.955 ops/s
# Warmup Iteration   6: 638991.649 ops/s
# Warmup Iteration   7: 653030.368 ops/s
# Warmup Iteration   8: 643668.881 ops/s
# Warmup Iteration   9: 644017.726 ops/s
# Warmup Iteration  10: 641271.762 ops/s
# Warmup Iteration  11: 642884.427 ops/s
# Warmup Iteration  12: 654461.465 ops/s
# Warmup Iteration  13: 631532.249 ops/s
# Warmup Iteration  14: 631912.787 ops/s
# Warmup Iteration  15: 659121.530 ops/s
# Warmup Iteration  16: 630889.494 ops/s
# Warmup Iteration  17: 683589.260 ops/s
# Warmup Iteration  18: 703036.318 ops/s
# Warmup Iteration  19: 666824.100 ops/s
# Warmup Iteration  20: 664884.861 ops/s
# Warmup Iteration  21: 687198.081 ops/s
# Warmup Iteration  22: 668161.865 ops/s
# Warmup Iteration  23: 721435.858 ops/s
# Warmup Iteration  24: 664230.908 ops/s
# Warmup Iteration  25: 676865.409 ops/s
# Warmup Iteration  26: 695935.553 ops/s
# Warmup Iteration  27: 698189.807 ops/s
# Warmup Iteration  28: 669958.840 ops/s
# Warmup Iteration  29: 697457.310 ops/s
# Warmup Iteration  30: 662050.148 ops/s
Iteration   1: 693355.714 ops/s
Iteration   2: 648316.621 ops/s
Iteration   3: 670415.390 ops/s
Iteration   4: 698274.240 ops/s
Iteration   5: 675058.617 ops/s
Iteration   6: 678537.415 ops/s
Iteration   7: 703796.769 ops/s
Iteration   8: 655552.613 ops/s
Iteration   9: 707427.283 ops/s
Iteration  10: 654108.724 ops/s
Iteration  11: 715832.648 ops/s
Iteration  12: 679027.162 ops/s
Iteration  13: 693843.011 ops/s
Iteration  14: 652872.528 ops/s
Iteration  15: 696631.907 ops/s
Iteration  16: 646757.201 ops/s
Iteration  17: 509896.017 ops/s
Iteration  18: 671400.571 ops/s
Iteration  19: 681381.331 ops/s
Iteration  20: 694589.938 ops/s
Iteration  21: 651448.969 ops/s
Iteration  22: 701324.283 ops/s
Iteration  23: 672218.500 ops/s
Iteration  24: 681145.720 ops/s
Iteration  25: 680968.750 ops/s
Iteration  26: 688800.712 ops/s
Iteration  27: 706282.557 ops/s
Iteration  28: 668360.909 ops/s
Iteration  29: 649126.084 ops/s
Iteration  30: 682043.830 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_error":
  673626.534 ±(99.9%) 24505.527 ops/s [Average]
  (min, avg, max) = (509896.017, 673626.534, 715832.648), stdev = 36678.722
  CI (99.9%): [649121.007, 698132.061] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
FlowableOnBackpressureBufferStrategyTest._Benchmark.benchmark_error  thrpt   30  673626.534 ± 24505.527  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_errorHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_errorHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 121982.474 ops/s
# Warmup Iteration   2: 437987.724 ops/s
# Warmup Iteration   3: 534828.428 ops/s
# Warmup Iteration   4: 524542.883 ops/s
# Warmup Iteration   5: 495286.512 ops/s
# Warmup Iteration   6: 505724.540 ops/s
# Warmup Iteration   7: 486121.360 ops/s
# Warmup Iteration   8: 533918.424 ops/s
# Warmup Iteration   9: 548156.544 ops/s
# Warmup Iteration  10: 532059.739 ops/s
# Warmup Iteration  11: 528398.970 ops/s
# Warmup Iteration  12: 534721.232 ops/s
# Warmup Iteration  13: 525778.068 ops/s
# Warmup Iteration  14: 549990.214 ops/s
# Warmup Iteration  15: 544704.891 ops/s
# Warmup Iteration  16: 529541.532 ops/s
# Warmup Iteration  17: 573276.026 ops/s
# Warmup Iteration  18: 561070.324 ops/s
# Warmup Iteration  19: 570314.563 ops/s
# Warmup Iteration  20: 547677.893 ops/s
# Warmup Iteration  21: 546122.070 ops/s
# Warmup Iteration  22: 542403.818 ops/s
# Warmup Iteration  23: 562536.668 ops/s
# Warmup Iteration  24: 547663.453 ops/s
# Warmup Iteration  25: 553454.112 ops/s
# Warmup Iteration  26: 578213.881 ops/s
# Warmup Iteration  27: 556549.922 ops/s
# Warmup Iteration  28: 543284.194 ops/s
# Warmup Iteration  29: 553403.667 ops/s
# Warmup Iteration  30: 549865.961 ops/s
Iteration   1: 566906.622 ops/s
Iteration   2: 543307.029 ops/s
Iteration   3: 543662.781 ops/s
Iteration   4: 550095.689 ops/s
Iteration   5: 572265.291 ops/s
Iteration   6: 545683.476 ops/s
Iteration   7: 582597.244 ops/s
Iteration   8: 539341.791 ops/s
Iteration   9: 573072.405 ops/s
Iteration  10: 573193.622 ops/s
Iteration  11: 534340.095 ops/s
Iteration  12: 570351.845 ops/s
Iteration  13: 538850.329 ops/s
Iteration  14: 563088.999 ops/s
Iteration  15: 566617.937 ops/s
Iteration  16: 576744.948 ops/s
Iteration  17: 560186.150 ops/s
Iteration  18: 563360.427 ops/s
Iteration  19: 578023.191 ops/s
Iteration  20: 543022.295 ops/s
Iteration  21: 573497.058 ops/s
Iteration  22: 560556.217 ops/s
Iteration  23: 566157.536 ops/s
Iteration  24: 556575.223 ops/s
Iteration  25: 566265.001 ops/s
Iteration  26: 555033.947 ops/s
Iteration  27: 549812.714 ops/s
Iteration  28: 561806.446 ops/s
Iteration  29: 562644.787 ops/s
Iteration  30: 571348.629 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_errorHidden":
  560280.324 ±(99.9%) 8804.854 ops/s [Average]
  (min, avg, max) = (534340.095, 560280.324, 582597.244), stdev = 13178.692
  CI (99.9%): [551475.470, 569085.178] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score      Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_errorHidden  thrpt   30  560280.324 ± 8804.854  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_errorDelayed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_errorDelayed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29721.513 ops/s
# Warmup Iteration   2: 111845.661 ops/s
# Warmup Iteration   3: 170113.993 ops/s
# Warmup Iteration   4: 194270.917 ops/s
# Warmup Iteration   5: 323799.450 ops/s
# Warmup Iteration   6: 329480.190 ops/s
# Warmup Iteration   7: 337372.547 ops/s
# Warmup Iteration   8: 340216.381 ops/s
# Warmup Iteration   9: 342322.725 ops/s
# Warmup Iteration  10: 328411.204 ops/s
# Warmup Iteration  11: 333785.722 ops/s
# Warmup Iteration  12: 337328.360 ops/s
# Warmup Iteration  13: 331937.092 ops/s
# Warmup Iteration  14: 343386.893 ops/s
# Warmup Iteration  15: 336614.772 ops/s
# Warmup Iteration  16: 354824.810 ops/s
# Warmup Iteration  17: 349847.097 ops/s
# Warmup Iteration  18: 344718.936 ops/s
# Warmup Iteration  19: 350788.795 ops/s
# Warmup Iteration  20: 349084.442 ops/s
# Warmup Iteration  21: 352605.938 ops/s
# Warmup Iteration  22: 359727.634 ops/s
# Warmup Iteration  23: 368970.931 ops/s
# Warmup Iteration  24: 340768.687 ops/s
# Warmup Iteration  25: 338200.891 ops/s
# Warmup Iteration  26: 346919.713 ops/s
# Warmup Iteration  27: 363094.156 ops/s
# Warmup Iteration  28: 345583.830 ops/s
# Warmup Iteration  29: 338728.566 ops/s
# Warmup Iteration  30: 356701.348 ops/s
Iteration   1: 350865.661 ops/s
Iteration   2: 355480.911 ops/s
Iteration   3: 355647.820 ops/s
Iteration   4: 338402.080 ops/s
Iteration   5: 340444.208 ops/s
Iteration   6: 349731.102 ops/s
Iteration   7: 365801.634 ops/s
Iteration   8: 343067.103 ops/s
Iteration   9: 367429.683 ops/s
Iteration  10: 346904.320 ops/s
Iteration  11: 359964.338 ops/s
Iteration  12: 294280.431 ops/s
Iteration  13: 349185.987 ops/s
Iteration  14: 364610.801 ops/s
Iteration  15: 362084.304 ops/s
Iteration  16: 349194.950 ops/s
Iteration  17: 363853.514 ops/s
Iteration  18: 339995.468 ops/s
Iteration  19: 370213.922 ops/s
Iteration  20: 344574.834 ops/s
Iteration  21: 360427.651 ops/s
Iteration  22: 353450.506 ops/s
Iteration  23: 355309.702 ops/s
Iteration  24: 369555.775 ops/s
Iteration  25: 341712.414 ops/s
Iteration  26: 360017.644 ops/s
Iteration  27: 351848.705 ops/s
Iteration  28: 359450.412 ops/s
Iteration  29: 350416.090 ops/s
Iteration  30: 357885.130 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_errorDelayed":
  352393.570 ±(99.9%) 9511.897 ops/s [Average]
  (min, avg, max) = (294280.431, 352393.570, 370213.922), stdev = 14236.961
  CI (99.9%): [342881.673, 361905.467] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_errorDelayed  thrpt   30  352393.570 ± 9511.897  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 179790.470 ops/s
# Warmup Iteration   2: 553219.586 ops/s
# Warmup Iteration   3: 648804.002 ops/s
# Warmup Iteration   4: 658048.898 ops/s
# Warmup Iteration   5: 661213.329 ops/s
# Warmup Iteration   6: 626394.893 ops/s
# Warmup Iteration   7: 706757.169 ops/s
# Warmup Iteration   8: 710433.032 ops/s
# Warmup Iteration   9: 701679.751 ops/s
# Warmup Iteration  10: 697641.265 ops/s
# Warmup Iteration  11: 729297.942 ops/s
# Warmup Iteration  12: 740833.704 ops/s
# Warmup Iteration  13: 687966.354 ops/s
# Warmup Iteration  14: 694783.719 ops/s
# Warmup Iteration  15: 741052.020 ops/s
# Warmup Iteration  16: 688826.668 ops/s
# Warmup Iteration  17: 745395.890 ops/s
# Warmup Iteration  18: 759680.144 ops/s
# Warmup Iteration  19: 731329.810 ops/s
# Warmup Iteration  20: 755203.895 ops/s
# Warmup Iteration  21: 730864.369 ops/s
# Warmup Iteration  22: 755624.370 ops/s
# Warmup Iteration  23: 725549.945 ops/s
# Warmup Iteration  24: 727732.028 ops/s
# Warmup Iteration  25: 770380.645 ops/s
# Warmup Iteration  26: 735970.377 ops/s
# Warmup Iteration  27: 747707.765 ops/s
# Warmup Iteration  28: 739290.941 ops/s
# Warmup Iteration  29: 752301.761 ops/s
# Warmup Iteration  30: 747283.058 ops/s
Iteration   1: 768187.759 ops/s
Iteration   2: 755255.680 ops/s
Iteration   3: 764733.327 ops/s
Iteration   4: 731709.862 ops/s
Iteration   5: 769350.019 ops/s
Iteration   6: 770335.768 ops/s
Iteration   7: 740004.096 ops/s
Iteration   8: 755187.937 ops/s
Iteration   9: 738456.284 ops/s
Iteration  10: 748202.091 ops/s
Iteration  11: 722428.643 ops/s
Iteration  12: 755906.493 ops/s
Iteration  13: 745403.169 ops/s
Iteration  14: 709465.976 ops/s
Iteration  15: 730748.401 ops/s
Iteration  16: 766278.559 ops/s
Iteration  17: 766463.297 ops/s
Iteration  18: 722014.839 ops/s
Iteration  19: 766798.052 ops/s
Iteration  20: 735021.641 ops/s
Iteration  21: 744306.246 ops/s
Iteration  22: 734663.188 ops/s
Iteration  23: 743467.666 ops/s
Iteration  24: 752511.363 ops/s
Iteration  25: 717214.706 ops/s
Iteration  26: 759150.069 ops/s
Iteration  27: 714254.156 ops/s
Iteration  28: 745982.778 ops/s
Iteration  29: 767263.116 ops/s
Iteration  30: 725331.108 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_error":
  745536.543 ±(99.9%) 12215.801 ops/s [Average]
  (min, avg, max) = (709465.976, 745536.543, 770335.768), stdev = 18284.038
  CI (99.9%): [733320.742, 757752.344] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt       Score       Error  Units
FlowableTakeTest2._Benchmark.benchmark_error  thrpt   30  745536.543 ± 12215.801  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorEmptySource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorEmptySource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 102171433.709 ops/s
# Warmup Iteration   2: 167423841.281 ops/s
# Warmup Iteration   3: 187705814.989 ops/s
# Warmup Iteration   4: 191918040.998 ops/s
# Warmup Iteration   5: 196921770.208 ops/s
# Warmup Iteration   6: 192523129.341 ops/s
# Warmup Iteration   7: 192941097.850 ops/s
# Warmup Iteration   8: 198788923.310 ops/s
# Warmup Iteration   9: 199968082.149 ops/s
# Warmup Iteration  10: 196170265.977 ops/s
# Warmup Iteration  11: 196682967.788 ops/s
# Warmup Iteration  12: 195008764.073 ops/s
# Warmup Iteration  13: 195369523.653 ops/s
# Warmup Iteration  14: 199160155.979 ops/s
# Warmup Iteration  15: 187774502.716 ops/s
# Warmup Iteration  16: 197461713.757 ops/s
# Warmup Iteration  17: 188616816.219 ops/s
# Warmup Iteration  18: 192387212.302 ops/s
# Warmup Iteration  19: 199122339.063 ops/s
# Warmup Iteration  20: 192041951.753 ops/s
# Warmup Iteration  21: 193949931.001 ops/s
# Warmup Iteration  22: 199189242.361 ops/s
# Warmup Iteration  23: 198722901.360 ops/s
# Warmup Iteration  24: 188164911.843 ops/s
# Warmup Iteration  25: 203489459.135 ops/s
# Warmup Iteration  26: 192556055.397 ops/s
# Warmup Iteration  27: 192078122.224 ops/s
# Warmup Iteration  28: 195294811.752 ops/s
# Warmup Iteration  29: 187474975.947 ops/s
# Warmup Iteration  30: 198629671.515 ops/s
Iteration   1: 188986022.634 ops/s
Iteration   2: 199507155.843 ops/s
Iteration   3: 200777524.241 ops/s
Iteration   4: 188576603.309 ops/s
Iteration   5: 188736633.424 ops/s
Iteration   6: 160991353.865 ops/s
Iteration   7: 181466002.449 ops/s
Iteration   8: 197028904.647 ops/s
Iteration   9: 194843799.643 ops/s
Iteration  10: 193728075.778 ops/s
Iteration  11: 189876174.039 ops/s
Iteration  12: 187962498.082 ops/s
Iteration  13: 197791066.706 ops/s
Iteration  14: 188026588.641 ops/s
Iteration  15: 193374777.234 ops/s
Iteration  16: 189041697.683 ops/s
Iteration  17: 201517461.504 ops/s
Iteration  18: 190706876.229 ops/s
Iteration  19: 190881276.994 ops/s
Iteration  20: 196895884.000 ops/s
Iteration  21: 190907208.671 ops/s
Iteration  22: 188235440.237 ops/s
Iteration  23: 190057070.529 ops/s
Iteration  24: 200077662.929 ops/s
Iteration  25: 187527218.440 ops/s
Iteration  26: 187206288.850 ops/s
Iteration  27: 196325181.283 ops/s
Iteration  28: 189886557.554 ops/s
Iteration  29: 196946033.996 ops/s
Iteration  30: 193580046.935 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorEmptySource":
  191382169.546 ±(99.9%) 5021250.841 ops/s [Average]
  (min, avg, max) = (160991353.865, 191382169.546, 201517461.504), stdev = 7515572.444
  CI (99.9%): [186360918.705, 196403420.387] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt          Score         Error  Units
FlowableConcatTest._Benchmark.benchmark_concatMapDelayErrorEmptySource  thrpt   30  191382169.546 ± 5021250.841  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_errorMatches$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_errorMatches

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 185451.022 ops/s
# Warmup Iteration   2: 433882.491 ops/s
# Warmup Iteration   3: 526449.909 ops/s
# Warmup Iteration   4: 539567.226 ops/s
# Warmup Iteration   5: 589650.924 ops/s
# Warmup Iteration   6: 572237.813 ops/s
# Warmup Iteration   7: 552950.729 ops/s
# Warmup Iteration   8: 582818.037 ops/s
# Warmup Iteration   9: 545791.318 ops/s
# Warmup Iteration  10: 564125.129 ops/s
# Warmup Iteration  11: 568274.849 ops/s
# Warmup Iteration  12: 543619.993 ops/s
# Warmup Iteration  13: 553526.312 ops/s
# Warmup Iteration  14: 571633.803 ops/s
# Warmup Iteration  15: 574545.735 ops/s
# Warmup Iteration  16: 557242.329 ops/s
# Warmup Iteration  17: 581573.062 ops/s
# Warmup Iteration  18: 575121.388 ops/s
# Warmup Iteration  19: 569181.416 ops/s
# Warmup Iteration  20: 591403.163 ops/s
# Warmup Iteration  21: 581389.962 ops/s
# Warmup Iteration  22: 611868.985 ops/s
# Warmup Iteration  23: 592312.636 ops/s
# Warmup Iteration  24: 578714.071 ops/s
# Warmup Iteration  25: 593072.935 ops/s
# Warmup Iteration  26: 580295.023 ops/s
# Warmup Iteration  27: 605739.736 ops/s
# Warmup Iteration  28: 584833.232 ops/s
# Warmup Iteration  29: 605952.599 ops/s
# Warmup Iteration  30: 579705.706 ops/s
Iteration   1: 587520.339 ops/s
Iteration   2: 588838.225 ops/s
Iteration   3: 572415.759 ops/s
Iteration   4: 592382.718 ops/s
Iteration   5: 604870.256 ops/s
Iteration   6: 599479.355 ops/s
Iteration   7: 565847.044 ops/s
Iteration   8: 592675.392 ops/s
Iteration   9: 600524.362 ops/s
Iteration  10: 585544.017 ops/s
Iteration  11: 578827.974 ops/s
Iteration  12: 593060.562 ops/s
Iteration  13: 620954.272 ops/s
Iteration  14: 586454.776 ops/s
Iteration  15: 589933.971 ops/s
Iteration  16: 593602.740 ops/s
Iteration  17: 570438.407 ops/s
Iteration  18: 612416.414 ops/s
Iteration  19: 578068.440 ops/s
Iteration  20: 592759.125 ops/s
Iteration  21: 584396.254 ops/s
Iteration  22: 615645.300 ops/s
Iteration  23: 589976.345 ops/s
Iteration  24: 598702.418 ops/s
Iteration  25: 598987.256 ops/s
Iteration  26: 580626.757 ops/s
Iteration  27: 596200.448 ops/s
Iteration  28: 591486.455 ops/s
Iteration  29: 595637.653 ops/s
Iteration  30: 611908.769 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_errorMatches":
  592339.393 ±(99.9%) 8621.635 ops/s [Average]
  (min, avg, max) = (565847.044, 592339.393, 620954.272), stdev = 12904.458
  CI (99.9%): [583717.759, 600961.028] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableOnErrorCompleteTest._Benchmark.benchmark_errorMatches  thrpt   30  592339.393 ± 8621.635  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 40402.917 ops/s
# Warmup Iteration   2: 120199.590 ops/s
# Warmup Iteration   3: 383866.110 ops/s
# Warmup Iteration   4: 382515.137 ops/s
# Warmup Iteration   5: 378847.702 ops/s
# Warmup Iteration   6: 422519.733 ops/s
# Warmup Iteration   7: 437952.964 ops/s
# Warmup Iteration   8: 431469.387 ops/s
# Warmup Iteration   9: 441392.994 ops/s
# Warmup Iteration  10: 442790.407 ops/s
# Warmup Iteration  11: 439824.812 ops/s
# Warmup Iteration  12: 429910.377 ops/s
# Warmup Iteration  13: 445554.649 ops/s
# Warmup Iteration  14: 412331.614 ops/s
# Warmup Iteration  15: 456893.878 ops/s
# Warmup Iteration  16: 450930.943 ops/s
# Warmup Iteration  17: 440221.817 ops/s
# Warmup Iteration  18: 441093.839 ops/s
# Warmup Iteration  19: 462099.334 ops/s
# Warmup Iteration  20: 445213.039 ops/s
# Warmup Iteration  21: 452814.240 ops/s
# Warmup Iteration  22: 454754.203 ops/s
# Warmup Iteration  23: 461325.822 ops/s
# Warmup Iteration  24: 441447.417 ops/s
# Warmup Iteration  25: 444185.539 ops/s
# Warmup Iteration  26: 455559.064 ops/s
# Warmup Iteration  27: 451565.919 ops/s
# Warmup Iteration  28: 439386.376 ops/s
# Warmup Iteration  29: 458492.285 ops/s
# Warmup Iteration  30: 420259.256 ops/s
Iteration   1: 411757.815 ops/s
Iteration   2: 433012.948 ops/s
Iteration   3: 459754.643 ops/s
Iteration   4: 461457.764 ops/s
Iteration   5: 432384.621 ops/s
Iteration   6: 451309.987 ops/s
Iteration   7: 452334.376 ops/s
Iteration   8: 444949.198 ops/s
Iteration   9: 465557.760 ops/s
Iteration  10: 441097.678 ops/s
Iteration  11: 477100.703 ops/s
Iteration  12: 436100.417 ops/s
Iteration  13: 456968.859 ops/s
Iteration  14: 439127.996 ops/s
Iteration  15: 452957.689 ops/s
Iteration  16: 475539.036 ops/s
Iteration  17: 440072.757 ops/s
Iteration  18: 465206.287 ops/s
Iteration  19: 458716.563 ops/s
Iteration  20: 442362.136 ops/s
Iteration  21: 445282.550 ops/s
Iteration  22: 458282.920 ops/s
Iteration  23: 462061.815 ops/s
Iteration  24: 443617.299 ops/s
Iteration  25: 460469.808 ops/s
Iteration  26: 437478.043 ops/s
Iteration  27: 460246.035 ops/s
Iteration  28: 459475.857 ops/s
Iteration  29: 435093.469 ops/s
Iteration  30: 456959.959 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone2":
  450557.900 ±(99.9%) 9497.949 ops/s [Average]
  (min, avg, max) = (411757.815, 450557.900, 477100.703), stdev = 14216.085
  CI (99.9%): [441059.950, 460055.849] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score      Error  Units
FlowableCombineLatestTest._Benchmark.benchmark_dontSubscribeIfDone2  thrpt   30  450557.900 ± 9497.949  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_replaySelectorReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_replaySelectorReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 258559.034 ops/s
# Warmup Iteration   2: 500398.826 ops/s
# Warmup Iteration   3: 545420.350 ops/s
# Warmup Iteration   4: 611788.698 ops/s
# Warmup Iteration   5: 507772.108 ops/s
# Warmup Iteration   6: 588734.032 ops/s
# Warmup Iteration   7: 615065.223 ops/s
# Warmup Iteration   8: 602221.533 ops/s
# Warmup Iteration   9: 622926.163 ops/s
# Warmup Iteration  10: 626930.803 ops/s
# Warmup Iteration  11: 609563.706 ops/s
# Warmup Iteration  12: 624991.673 ops/s
# Warmup Iteration  13: 593136.200 ops/s
# Warmup Iteration  14: 619800.178 ops/s
# Warmup Iteration  15: 599271.472 ops/s
# Warmup Iteration  16: 626949.447 ops/s
# Warmup Iteration  17: 628335.647 ops/s
# Warmup Iteration  18: 634142.324 ops/s
# Warmup Iteration  19: 647683.272 ops/s
# Warmup Iteration  20: 667083.770 ops/s
# Warmup Iteration  21: 619454.380 ops/s
# Warmup Iteration  22: 637479.944 ops/s
# Warmup Iteration  23: 633322.732 ops/s
# Warmup Iteration  24: 640596.075 ops/s
# Warmup Iteration  25: 647025.926 ops/s
# Warmup Iteration  26: 642820.508 ops/s
# Warmup Iteration  27: 632638.933 ops/s
# Warmup Iteration  28: 629304.331 ops/s
# Warmup Iteration  29: 662308.119 ops/s
# Warmup Iteration  30: 627883.889 ops/s
Iteration   1: 646284.012 ops/s
Iteration   2: 651723.883 ops/s
Iteration   3: 620929.684 ops/s
Iteration   4: 647860.507 ops/s
Iteration   5: 629836.447 ops/s
Iteration   6: 641208.022 ops/s
Iteration   7: 622604.595 ops/s
Iteration   8: 633723.627 ops/s
Iteration   9: 641509.239 ops/s
Iteration  10: 614248.896 ops/s
Iteration  11: 631882.611 ops/s
Iteration  12: 627628.355 ops/s
Iteration  13: 637858.828 ops/s
Iteration  14: 654204.341 ops/s
Iteration  15: 631420.371 ops/s
Iteration  16: 619810.489 ops/s
Iteration  17: 653392.262 ops/s
Iteration  18: 648145.753 ops/s
Iteration  19: 609071.090 ops/s
Iteration  20: 637546.790 ops/s
Iteration  21: 634587.514 ops/s
Iteration  22: 647552.961 ops/s
Iteration  23: 632490.549 ops/s
Iteration  24: 623157.425 ops/s
Iteration  25: 652593.889 ops/s
Iteration  26: 614919.179 ops/s
Iteration  27: 680031.366 ops/s
Iteration  28: 645068.053 ops/s
Iteration  29: 606733.941 ops/s
Iteration  30: 658362.118 ops/s


Result "io.reactivex.rxjava3.flowable.FlowableNullTests._Benchmark.benchmark_replaySelectorReturnsNull":
  636546.227 ±(99.9%) 10927.337 ops/s [Average]
  (min, avg, max) = (606733.941, 636546.227, 680031.366), stdev = 16355.525
  CI (99.9%): [625618.890, 647473.564] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
FlowableNullTests._Benchmark.benchmark_replaySelectorReturnsNull  thrpt   30  636546.227 ± 10927.337  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 127375.393 ops/s
# Warmup Iteration   2: 457023.266 ops/s
# Warmup Iteration   3: 526699.052 ops/s
# Warmup Iteration   4: 449714.588 ops/s
# Warmup Iteration   5: 560285.140 ops/s
# Warmup Iteration   6: 519176.688 ops/s
# Warmup Iteration   7: 557074.335 ops/s
# Warmup Iteration   8: 569800.927 ops/s
# Warmup Iteration   9: 556594.149 ops/s
# Warmup Iteration  10: 558297.435 ops/s
# Warmup Iteration  11: 545238.550 ops/s
# Warmup Iteration  12: 588882.863 ops/s
# Warmup Iteration  13: 543419.107 ops/s
# Warmup Iteration  14: 569917.954 ops/s
# Warmup Iteration  15: 565511.625 ops/s
# Warmup Iteration  16: 583361.614 ops/s
# Warmup Iteration  17: 596124.858 ops/s
# Warmup Iteration  18: 559492.992 ops/s
# Warmup Iteration  19: 619961.726 ops/s
# Warmup Iteration  20: 565662.893 ops/s
# Warmup Iteration  21: 601375.632 ops/s
# Warmup Iteration  22: 617773.528 ops/s
# Warmup Iteration  23: 573338.440 ops/s
# Warmup Iteration  24: 571711.672 ops/s
# Warmup Iteration  25: 504563.995 ops/s
# Warmup Iteration  26: 589042.297 ops/s
# Warmup Iteration  27: 596037.332 ops/s
# Warmup Iteration  28: 591502.557 ops/s
# Warmup Iteration  29: 610787.758 ops/s
# Warmup Iteration  30: 557485.216 ops/s
Iteration   1: 596714.865 ops/s
Iteration   2: 604206.783 ops/s
Iteration   3: 578451.682 ops/s
Iteration   4: 606634.178 ops/s
Iteration   5: 576053.425 ops/s
Iteration   6: 615627.995 ops/s
Iteration   7: 598942.710 ops/s
Iteration   8: 584157.326 ops/s
Iteration   9: 599848.511 ops/s
Iteration  10: 584970.944 ops/s
Iteration  11: 596187.644 ops/s
Iteration  12: 589817.378 ops/s
Iteration  13: 605879.625 ops/s
Iteration  14: 585086.422 ops/s
Iteration  15: 579397.134 ops/s
Iteration  16: 596945.502 ops/s
Iteration  17: 578377.195 ops/s
Iteration  18: 581358.690 ops/s
Iteration  19: 621925.507 ops/s
Iteration  20: 569812.961 ops/s
Iteration  21: 596732.589 ops/s
Iteration  22: 577407.352 ops/s
Iteration  23: 588608.274 ops/s
Iteration  24: 591734.410 ops/s
Iteration  25: 575493.841 ops/s
Iteration  26: 559607.680 ops/s
Iteration  27: 609785.038 ops/s
Iteration  28: 584227.579 ops/s
Iteration  29: 550455.403 ops/s
Iteration  30: 588856.162 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnErrorCompleteTest._Benchmark.benchmark_error":
  589110.160 ±(99.9%) 10502.084 ops/s [Average]
  (min, avg, max) = (550455.403, 589110.160, 621925.507), stdev = 15719.027
  CI (99.9%): [578608.076, 599612.245] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
FlowableOnErrorCompleteTest._Benchmark.benchmark_error  thrpt   30  589110.160 ± 10502.084  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_range$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_range

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21857.447 ops/s
# Warmup Iteration   2: 75103.963 ops/s
# Warmup Iteration   3: 119240.337 ops/s
# Warmup Iteration   4: 108335.775 ops/s
# Warmup Iteration   5: 139738.732 ops/s
# Warmup Iteration   6: 114795.120 ops/s
# Warmup Iteration   7: 143837.166 ops/s
# Warmup Iteration   8: 81058.905 ops/s
# Warmup Iteration   9: 110399.929 ops/s
# Warmup Iteration  10: 121174.179 ops/s
# Warmup Iteration  11: 107737.421 ops/s
# Warmup Iteration  12: 126770.851 ops/s
# Warmup Iteration  13: 133365.467 ops/s
# Warmup Iteration  14: 126992.842 ops/s
# Warmup Iteration  15: 128456.570 ops/s
# Warmup Iteration  16: 106083.194 ops/s
# Warmup Iteration  17: 101182.513 ops/s
# Warmup Iteration  18: 103570.736 ops/s
# Warmup Iteration  19: 128279.995 ops/s
# Warmup Iteration  20: 102465.171 ops/s
# Warmup Iteration  21: 134034.374 ops/s
# Warmup Iteration  22: 158670.971 ops/s
# Warmup Iteration  23: 118481.627 ops/s
# Warmup Iteration  24: 118638.156 ops/s
# Warmup Iteration  25: 116039.390 ops/s
# Warmup Iteration  26: 115214.864 ops/s
# Warmup Iteration  27: 123323.947 ops/s
# Warmup Iteration  28: 115281.541 ops/s
# Warmup Iteration  29: 113153.305 ops/s
# Warmup Iteration  30: 131101.322 ops/s
Iteration   1: 109496.135 ops/s
Iteration   2: 110572.702 ops/s
Iteration   3: 141007.994 ops/s
Iteration   4: 114798.610 ops/s
Iteration   5: 125758.852 ops/s
Iteration   6: 121688.728 ops/s
Iteration   7: 131975.640 ops/s
Iteration   8: 99467.063 ops/s
Iteration   9: 117831.068 ops/s
Iteration  10: 117400.323 ops/s
Iteration  11: 103280.668 ops/s
Iteration  12: 117587.391 ops/s
Iteration  13: 137461.405 ops/s
Iteration  14: 113605.465 ops/s
Iteration  15: 110303.721 ops/s
Iteration  16: 120225.137 ops/s
Iteration  17: 106751.667 ops/s
Iteration  18: 103976.581 ops/s
Iteration  19: 110266.053 ops/s
Iteration  20: 109864.713 ops/s
Iteration  21: 121196.032 ops/s
Iteration  22: 109187.545 ops/s
Iteration  23: 101588.469 ops/s
Iteration  24: 117013.193 ops/s
Iteration  25: 125634.732 ops/s
Iteration  26: 107570.469 ops/s
Iteration  27: 112696.808 ops/s
Iteration  28: 130896.869 ops/s
Iteration  29: 120340.695 ops/s
Iteration  30: 114953.708 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_range":
  116146.615 ±(99.9%) 6840.205 ops/s [Average]
  (min, avg, max) = (99467.063, 116146.615, 141007.994), stdev = 10238.097
  CI (99.9%): [109306.410, 122986.819] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
ObservableThrottleLatestTest._Benchmark.benchmark_range  thrpt   30  116146.615 ± 6840.205  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_rangeEmitLatest$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_rangeEmitLatest

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 46806.276 ops/s
# Warmup Iteration   2: 102421.492 ops/s
# Warmup Iteration   3: 111408.155 ops/s
# Warmup Iteration   4: 121055.631 ops/s
# Warmup Iteration   5: 145892.493 ops/s
# Warmup Iteration   6: 131635.420 ops/s
# Warmup Iteration   7: 121530.623 ops/s
# Warmup Iteration   8: 125903.885 ops/s
# Warmup Iteration   9: 115575.511 ops/s
# Warmup Iteration  10: 114925.944 ops/s
# Warmup Iteration  11: 110529.119 ops/s
# Warmup Iteration  12: 95601.196 ops/s
# Warmup Iteration  13: 103614.897 ops/s
# Warmup Iteration  14: 128060.662 ops/s
# Warmup Iteration  15: 127190.481 ops/s
# Warmup Iteration  16: 139315.600 ops/s
# Warmup Iteration  17: 121415.449 ops/s
# Warmup Iteration  18: 88547.132 ops/s
# Warmup Iteration  19: 98734.403 ops/s
# Warmup Iteration  20: 114769.744 ops/s
# Warmup Iteration  21: 112002.298 ops/s
# Warmup Iteration  22: 130795.263 ops/s
# Warmup Iteration  23: 113274.773 ops/s
# Warmup Iteration  24: 107632.013 ops/s
# Warmup Iteration  25: 111435.403 ops/s
# Warmup Iteration  26: 111374.187 ops/s
# Warmup Iteration  27: 123285.730 ops/s
# Warmup Iteration  28: 124121.240 ops/s
# Warmup Iteration  29: 116194.591 ops/s
# Warmup Iteration  30: 132432.774 ops/s
Iteration   1: 117503.591 ops/s
Iteration   2: 122738.276 ops/s
Iteration   3: 122432.700 ops/s
Iteration   4: 116637.419 ops/s
Iteration   5: 103927.273 ops/s
Iteration   6: 106670.329 ops/s
Iteration   7: 101139.671 ops/s
Iteration   8: 126767.448 ops/s
Iteration   9: 126427.022 ops/s
Iteration  10: 121397.946 ops/s
Iteration  11: 110833.682 ops/s
Iteration  12: 109014.328 ops/s
Iteration  13: 108567.088 ops/s
Iteration  14: 119128.967 ops/s
Iteration  15: 111325.786 ops/s
Iteration  16: 109063.889 ops/s
Iteration  17: 114858.866 ops/s
Iteration  18: 131901.153 ops/s
Iteration  19: 117298.068 ops/s
Iteration  20: 119035.660 ops/s
Iteration  21: 120013.304 ops/s
Iteration  22: 134655.912 ops/s
Iteration  23: 113556.397 ops/s
Iteration  24: 112192.210 ops/s
Iteration  25: 133091.947 ops/s
Iteration  26: 109553.297 ops/s
Iteration  27: 114803.597 ops/s
Iteration  28: 116344.893 ops/s
Iteration  29: 108194.351 ops/s
Iteration  30: 108955.600 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_rangeEmitLatest":
  116267.689 ±(99.9%) 5686.308 ops/s [Average]
  (min, avg, max) = (101139.671, 116267.689, 134655.912), stdev = 8510.998
  CI (99.9%): [110581.381, 121953.997] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableThrottleLatestTest._Benchmark.benchmark_rangeEmitLatest  thrpt   30  116267.689 ± 5686.308  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_restartTimer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_restartTimer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.873 ops/s
# Warmup Iteration   2: 4621.777 ops/s
# Warmup Iteration   3: 9845.789 ops/s
# Warmup Iteration   4: 27726.675 ops/s
# Warmup Iteration   5: 14688.990 ops/s
# Warmup Iteration   6: 22109.615 ops/s
# Warmup Iteration   7: 26118.576 ops/s
# Warmup Iteration   8: 28674.137 ops/s
# Warmup Iteration   9: 53536.507 ops/s
# Warmup Iteration  10: 48720.453 ops/s
# Warmup Iteration  11: 60889.480 ops/s
# Warmup Iteration  12: 58438.155 ops/s
# Warmup Iteration  13: 57905.470 ops/s
# Warmup Iteration  14: 61211.369 ops/s
# Warmup Iteration  15: 62017.724 ops/s
# Warmup Iteration  16: 62637.227 ops/s
# Warmup Iteration  17: 63426.319 ops/s
# Warmup Iteration  18: 57444.027 ops/s
# Warmup Iteration  19: 66034.600 ops/s
# Warmup Iteration  20: 63464.456 ops/s
# Warmup Iteration  21: 66300.409 ops/s
# Warmup Iteration  22: 67097.779 ops/s
# Warmup Iteration  23: 60354.213 ops/s
# Warmup Iteration  24: 65674.760 ops/s
# Warmup Iteration  25: 63824.149 ops/s
# Warmup Iteration  26: 62138.359 ops/s
# Warmup Iteration  27: 64687.482 ops/s
# Warmup Iteration  28: 63726.549 ops/s
# Warmup Iteration  29: 56794.177 ops/s
# Warmup Iteration  30: 59182.425 ops/s
Iteration   1: 61897.383 ops/s
Iteration   2: 62650.514 ops/s
Iteration   3: 59990.440 ops/s
Iteration   4: 60283.991 ops/s
Iteration   5: 63951.317 ops/s
Iteration   6: 60506.756 ops/s
Iteration   7: 68416.890 ops/s
Iteration   8: 64647.041 ops/s
Iteration   9: 65750.135 ops/s
Iteration  10: 66060.583 ops/s
Iteration  11: 66226.708 ops/s
Iteration  12: 59076.637 ops/s
Iteration  13: 66648.672 ops/s
Iteration  14: 66463.286 ops/s
Iteration  15: 66889.888 ops/s
Iteration  16: 67500.471 ops/s
Iteration  17: 59598.939 ops/s
Iteration  18: 65487.584 ops/s
Iteration  19: 62696.117 ops/s
Iteration  20: 65368.455 ops/s
Iteration  21: 58915.963 ops/s
Iteration  22: 56838.750 ops/s
Iteration  23: 62312.421 ops/s
Iteration  24: 59470.794 ops/s
Iteration  25: 61838.337 ops/s
Iteration  26: 62722.863 ops/s
Iteration  27: 68038.414 ops/s
Iteration  28: 65707.136 ops/s
Iteration  29: 62664.965 ops/s
Iteration  30: 63725.926 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_restartTimer":
  63411.579 ±(99.9%) 2080.085 ops/s [Average]
  (min, avg, max) = (56838.750, 63411.579, 68416.890), stdev = 3113.373
  CI (99.9%): [61331.495, 65491.664] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt      Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_restartTimer  thrpt   30  63411.579 ± 2080.085  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replayTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replayTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 39985.204 ops/s
# Warmup Iteration   2: 175200.959 ops/s
# Warmup Iteration   3: 219992.720 ops/s
# Warmup Iteration   4: 232604.212 ops/s
# Warmup Iteration   5: 224879.945 ops/s
# Warmup Iteration   6: 237508.779 ops/s
# Warmup Iteration   7: 246115.536 ops/s
# Warmup Iteration   8: 228518.482 ops/s
# Warmup Iteration   9: 190636.374 ops/s
# Warmup Iteration  10: 209703.997 ops/s
# Warmup Iteration  11: 238228.071 ops/s
# Warmup Iteration  12: 248122.569 ops/s
# Warmup Iteration  13: 236482.179 ops/s
# Warmup Iteration  14: 219039.331 ops/s
# Warmup Iteration  15: 232283.057 ops/s
# Warmup Iteration  16: 237619.991 ops/s
# Warmup Iteration  17: 245339.023 ops/s
# Warmup Iteration  18: 236158.661 ops/s
# Warmup Iteration  19: 239663.382 ops/s
# Warmup Iteration  20: 256602.542 ops/s
# Warmup Iteration  21: 229820.512 ops/s
# Warmup Iteration  22: 251876.439 ops/s
# Warmup Iteration  23: 238343.860 ops/s
# Warmup Iteration  24: 237795.052 ops/s
# Warmup Iteration  25: 244733.179 ops/s
# Warmup Iteration  26: 243484.197 ops/s
# Warmup Iteration  27: 248864.119 ops/s
# Warmup Iteration  28: 240784.299 ops/s
# Warmup Iteration  29: 238695.131 ops/s
# Warmup Iteration  30: 249121.359 ops/s
Iteration   1: 235460.417 ops/s
Iteration   2: 236081.354 ops/s
Iteration   3: 249693.856 ops/s
Iteration   4: 235553.829 ops/s
Iteration   5: 241990.175 ops/s
Iteration   6: 239837.299 ops/s
Iteration   7: 243288.719 ops/s
Iteration   8: 248190.667 ops/s
Iteration   9: 229763.737 ops/s
Iteration  10: 253468.082 ops/s
Iteration  11: 239485.372 ops/s
Iteration  12: 235557.451 ops/s
Iteration  13: 247062.485 ops/s
Iteration  14: 233218.728 ops/s
Iteration  15: 248120.750 ops/s
Iteration  16: 242568.128 ops/s
Iteration  17: 234207.321 ops/s
Iteration  18: 239970.947 ops/s
Iteration  19: 245810.638 ops/s
Iteration  20: 240734.907 ops/s
Iteration  21: 241291.652 ops/s
Iteration  22: 246762.922 ops/s
Iteration  23: 232353.811 ops/s
Iteration  24: 253794.198 ops/s
Iteration  25: 244831.758 ops/s
Iteration  26: 236807.457 ops/s
Iteration  27: 249610.771 ops/s
Iteration  28: 233502.404 ops/s
Iteration  29: 251470.412 ops/s
Iteration  30: 237967.316 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replayTime":
  241615.252 ±(99.9%) 4465.899 ops/s [Average]
  (min, avg, max) = (229763.737, 241615.252, 253794.198), stdev = 6684.347
  CI (99.9%): [237149.354, 246081.151] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_replayTime  thrpt   30  241615.252 ± 4465.899  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySizeAndTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySizeAndTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42106.805 ops/s
# Warmup Iteration   2: 218282.834 ops/s
# Warmup Iteration   3: 226136.431 ops/s
# Warmup Iteration   4: 248516.377 ops/s
# Warmup Iteration   5: 223265.265 ops/s
# Warmup Iteration   6: 239444.335 ops/s
# Warmup Iteration   7: 229027.967 ops/s
# Warmup Iteration   8: 233318.395 ops/s
# Warmup Iteration   9: 234386.058 ops/s
# Warmup Iteration  10: 253396.516 ops/s
# Warmup Iteration  11: 228183.832 ops/s
# Warmup Iteration  12: 243866.763 ops/s
# Warmup Iteration  13: 237000.894 ops/s
# Warmup Iteration  14: 245146.755 ops/s
# Warmup Iteration  15: 239294.975 ops/s
# Warmup Iteration  16: 241576.238 ops/s
# Warmup Iteration  17: 248173.278 ops/s
# Warmup Iteration  18: 234804.863 ops/s
# Warmup Iteration  19: 244510.418 ops/s
# Warmup Iteration  20: 247776.120 ops/s
# Warmup Iteration  21: 237092.497 ops/s
# Warmup Iteration  22: 249099.758 ops/s
# Warmup Iteration  23: 244696.732 ops/s
# Warmup Iteration  24: 235956.226 ops/s
# Warmup Iteration  25: 240579.273 ops/s
# Warmup Iteration  26: 248829.437 ops/s
# Warmup Iteration  27: 235418.696 ops/s
# Warmup Iteration  28: 245504.725 ops/s
# Warmup Iteration  29: 237402.579 ops/s
# Warmup Iteration  30: 241999.651 ops/s
Iteration   1: 247761.132 ops/s
Iteration   2: 245904.989 ops/s
Iteration   3: 242479.441 ops/s
Iteration   4: 237391.535 ops/s
Iteration   5: 249566.706 ops/s
Iteration   6: 239253.546 ops/s
Iteration   7: 245877.236 ops/s
Iteration   8: 235901.571 ops/s
Iteration   9: 236504.800 ops/s
Iteration  10: 252290.553 ops/s
Iteration  11: 229933.249 ops/s
Iteration  12: 247543.680 ops/s
Iteration  13: 235467.789 ops/s
Iteration  14: 246833.164 ops/s
Iteration  15: 240478.010 ops/s
Iteration  16: 245545.063 ops/s
Iteration  17: 239832.190 ops/s
Iteration  18: 240865.532 ops/s
Iteration  19: 248488.208 ops/s
Iteration  20: 234204.462 ops/s
Iteration  21: 249465.515 ops/s
Iteration  22: 240923.422 ops/s
Iteration  23: 237876.285 ops/s
Iteration  24: 243848.162 ops/s
Iteration  25: 235713.900 ops/s
Iteration  26: 248229.821 ops/s
Iteration  27: 236028.406 ops/s
Iteration  28: 246256.335 ops/s
Iteration  29: 244244.064 ops/s
Iteration  30: 240722.540 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySizeAndTime":
  242181.043 ±(99.9%) 3730.695 ops/s [Average]
  (min, avg, max) = (229933.249, 242181.043, 252290.553), stdev = 5583.929
  CI (99.9%): [238450.348, 245911.739] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_replaySizeAndTime  thrpt   30  242181.043 ± 3730.695  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_badSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_badSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 38299.512 ops/s
# Warmup Iteration   2: 103242.264 ops/s
# Warmup Iteration   3: 158799.315 ops/s
# Warmup Iteration   4: 170333.742 ops/s
# Warmup Iteration   5: 211109.621 ops/s
# Warmup Iteration   6: 197158.630 ops/s
# Warmup Iteration   7: 212432.074 ops/s
# Warmup Iteration   8: 216115.410 ops/s
# Warmup Iteration   9: 213659.518 ops/s
# Warmup Iteration  10: 217327.468 ops/s
# Warmup Iteration  11: 212718.740 ops/s
# Warmup Iteration  12: 205378.926 ops/s
# Warmup Iteration  13: 217342.446 ops/s
# Warmup Iteration  14: 207021.140 ops/s
# Warmup Iteration  15: 224573.166 ops/s
# Warmup Iteration  16: 209735.187 ops/s
# Warmup Iteration  17: 220795.173 ops/s
# Warmup Iteration  18: 219997.571 ops/s
# Warmup Iteration  19: 218496.572 ops/s
# Warmup Iteration  20: 226483.377 ops/s
# Warmup Iteration  21: 217053.850 ops/s
# Warmup Iteration  22: 228992.208 ops/s
# Warmup Iteration  23: 216874.485 ops/s
# Warmup Iteration  24: 205653.395 ops/s
# Warmup Iteration  25: 228745.781 ops/s
# Warmup Iteration  26: 216848.802 ops/s
# Warmup Iteration  27: 217997.561 ops/s
# Warmup Iteration  28: 229701.166 ops/s
# Warmup Iteration  29: 216881.538 ops/s
# Warmup Iteration  30: 228628.371 ops/s
Iteration   1: 214822.247 ops/s
Iteration   2: 218572.523 ops/s
Iteration   3: 214542.007 ops/s
Iteration   4: 222541.924 ops/s
Iteration   5: 223738.307 ops/s
Iteration   6: 218001.969 ops/s
Iteration   7: 217103.080 ops/s
Iteration   8: 219382.891 ops/s
Iteration   9: 222323.367 ops/s
Iteration  10: 222673.554 ops/s
Iteration  11: 220452.246 ops/s
Iteration  12: 227250.132 ops/s
Iteration  13: 222949.612 ops/s
Iteration  14: 214343.418 ops/s
Iteration  15: 226415.750 ops/s
Iteration  16: 217439.976 ops/s
Iteration  17: 221962.453 ops/s
Iteration  18: 215143.448 ops/s
Iteration  19: 221512.078 ops/s
Iteration  20: 216108.276 ops/s
Iteration  21: 218543.387 ops/s
Iteration  22: 218328.095 ops/s
Iteration  23: 215201.500 ops/s
Iteration  24: 224657.860 ops/s
Iteration  25: 214302.153 ops/s
Iteration  26: 217365.757 ops/s
Iteration  27: 226121.460 ops/s
Iteration  28: 221636.260 ops/s
Iteration  29: 213644.897 ops/s
Iteration  30: 228272.111 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableObserveOnTest._Benchmark.benchmark_badSource":
  219845.091 ±(99.9%) 2850.058 ops/s [Average]
  (min, avg, max) = (213644.897, 219845.091, 228272.111), stdev = 4265.833
  CI (99.9%): [216995.033, 222695.149] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
ObservableObserveOnTest._Benchmark.benchmark_badSource  thrpt   30  219845.091 ± 2850.058  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openClosemainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openClosemainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.836 ops/s
# Warmup Iteration   2: 20013.224 ops/s
# Warmup Iteration   3: 74233.883 ops/s
# Warmup Iteration   4: 107152.468 ops/s
# Warmup Iteration   5: 124317.782 ops/s
# Warmup Iteration   6: 160203.506 ops/s
# Warmup Iteration   7: 169884.483 ops/s
# Warmup Iteration   8: 314968.941 ops/s
# Warmup Iteration   9: 330073.322 ops/s
# Warmup Iteration  10: 334231.275 ops/s
# Warmup Iteration  11: 322286.802 ops/s
# Warmup Iteration  12: 308986.686 ops/s
# Warmup Iteration  13: 328787.912 ops/s
# Warmup Iteration  14: 315196.464 ops/s
# Warmup Iteration  15: 334504.847 ops/s
# Warmup Iteration  16: 338456.726 ops/s
# Warmup Iteration  17: 305414.194 ops/s
# Warmup Iteration  18: 338008.649 ops/s
# Warmup Iteration  19: 323847.875 ops/s
# Warmup Iteration  20: 335644.976 ops/s
# Warmup Iteration  21: 339314.269 ops/s
# Warmup Iteration  22: 318283.150 ops/s
# Warmup Iteration  23: 332830.030 ops/s
# Warmup Iteration  24: 338433.057 ops/s
# Warmup Iteration  25: 319815.669 ops/s
# Warmup Iteration  26: 336371.410 ops/s
# Warmup Iteration  27: 313803.337 ops/s
# Warmup Iteration  28: 330529.031 ops/s
# Warmup Iteration  29: 338688.315 ops/s
# Warmup Iteration  30: 323868.022 ops/s
Iteration   1: 331268.196 ops/s
Iteration   2: 325989.774 ops/s
Iteration   3: 336944.632 ops/s
Iteration   4: 323339.318 ops/s
Iteration   5: 325549.537 ops/s
Iteration   6: 334308.794 ops/s
Iteration   7: 332273.569 ops/s
Iteration   8: 316024.221 ops/s
Iteration   9: 325259.796 ops/s
Iteration  10: 329782.293 ops/s
Iteration  11: 332493.630 ops/s
Iteration  12: 318828.818 ops/s
Iteration  13: 330155.106 ops/s
Iteration  14: 320975.936 ops/s
Iteration  15: 327041.089 ops/s
Iteration  16: 330852.425 ops/s
Iteration  17: 324236.972 ops/s
Iteration  18: 328894.626 ops/s
Iteration  19: 325267.784 ops/s
Iteration  20: 335068.317 ops/s
Iteration  21: 340416.225 ops/s
Iteration  22: 319473.700 ops/s
Iteration  23: 337829.321 ops/s
Iteration  24: 315965.660 ops/s
Iteration  25: 332254.478 ops/s
Iteration  26: 318555.603 ops/s
Iteration  27: 336420.501 ops/s
Iteration  28: 314314.426 ops/s
Iteration  29: 309979.845 ops/s
Iteration  30: 273182.668 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_openClosemainError":
  325098.242 ±(99.9%) 8308.876 ops/s [Average]
  (min, avg, max) = (273182.668, 325098.242, 340416.225), stdev = 12436.335
  CI (99.9%): [316789.366, 333407.118] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_openClosemainError  thrpt   30  325098.242 ± 8308.876  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_closingIndicatorFunctionCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_closingIndicatorFunctionCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 28659.896 ops/s
# Warmup Iteration   2: 297617.869 ops/s
# Warmup Iteration   3: 444134.893 ops/s
# Warmup Iteration   4: 448262.260 ops/s
# Warmup Iteration   5: 395069.310 ops/s
# Warmup Iteration   6: 489076.863 ops/s
# Warmup Iteration   7: 499148.244 ops/s
# Warmup Iteration   8: 488490.978 ops/s
# Warmup Iteration   9: 473982.899 ops/s
# Warmup Iteration  10: 488481.524 ops/s
# Warmup Iteration  11: 479689.712 ops/s
# Warmup Iteration  12: 495081.410 ops/s
# Warmup Iteration  13: 474667.905 ops/s
# Warmup Iteration  14: 485491.340 ops/s
# Warmup Iteration  15: 498984.799 ops/s
# Warmup Iteration  16: 473063.535 ops/s
# Warmup Iteration  17: 507486.057 ops/s
# Warmup Iteration  18: 520337.532 ops/s
# Warmup Iteration  19: 496527.380 ops/s
# Warmup Iteration  20: 524012.898 ops/s
# Warmup Iteration  21: 494844.915 ops/s
# Warmup Iteration  22: 499873.934 ops/s
# Warmup Iteration  23: 527693.234 ops/s
# Warmup Iteration  24: 494176.588 ops/s
# Warmup Iteration  25: 500405.564 ops/s
# Warmup Iteration  26: 519989.538 ops/s
# Warmup Iteration  27: 512783.989 ops/s
# Warmup Iteration  28: 499363.735 ops/s
# Warmup Iteration  29: 529411.580 ops/s
# Warmup Iteration  30: 475148.107 ops/s
Iteration   1: 509668.527 ops/s
Iteration   2: 507941.522 ops/s
Iteration   3: 505869.244 ops/s
Iteration   4: 523865.113 ops/s
Iteration   5: 504755.279 ops/s
Iteration   6: 489739.810 ops/s
Iteration   7: 529957.073 ops/s
Iteration   8: 500977.982 ops/s
Iteration   9: 511849.749 ops/s
Iteration  10: 510421.505 ops/s
Iteration  11: 507075.487 ops/s
Iteration  12: 504461.451 ops/s
Iteration  13: 515299.843 ops/s
Iteration  14: 495390.758 ops/s
Iteration  15: 504849.557 ops/s
Iteration  16: 513300.662 ops/s
Iteration  17: 488669.352 ops/s
Iteration  18: 518670.779 ops/s
Iteration  19: 488867.565 ops/s
Iteration  20: 508975.864 ops/s
Iteration  21: 494838.400 ops/s
Iteration  22: 509893.446 ops/s
Iteration  23: 497825.699 ops/s
Iteration  24: 496010.824 ops/s
Iteration  25: 514305.589 ops/s
Iteration  26: 508867.785 ops/s
Iteration  27: 528783.237 ops/s
Iteration  28: 495900.404 ops/s
Iteration  29: 502930.720 ops/s
Iteration  30: 519669.149 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_closingIndicatorFunctionCrash":
  506987.746 ±(99.9%) 7284.419 ops/s [Average]
  (min, avg, max) = (488669.352, 506987.746, 529957.073), stdev = 10902.977
  CI (99.9%): [499703.327, 514272.165] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt       Score      Error  Units
ObservableWindowWithStartEndObservableTest._Benchmark.benchmark_closingIndicatorFunctionCrash  thrpt   30  506987.746 ± 7284.419  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 16067.979 ops/s
# Warmup Iteration   2: 148906.172 ops/s
# Warmup Iteration   3: 176809.478 ops/s
# Warmup Iteration   4: 206380.918 ops/s
# Warmup Iteration   5: 192462.609 ops/s
# Warmup Iteration   6: 204702.717 ops/s
# Warmup Iteration   7: 199556.948 ops/s
# Warmup Iteration   8: 208460.571 ops/s
# Warmup Iteration   9: 205961.919 ops/s
# Warmup Iteration  10: 192232.505 ops/s
# Warmup Iteration  11: 206988.607 ops/s
# Warmup Iteration  12: 209586.110 ops/s
# Warmup Iteration  13: 193858.984 ops/s
# Warmup Iteration  14: 206490.360 ops/s
# Warmup Iteration  15: 193478.834 ops/s
# Warmup Iteration  16: 204373.718 ops/s
# Warmup Iteration  17: 196680.805 ops/s
# Warmup Iteration  18: 205107.072 ops/s
# Warmup Iteration  19: 211729.696 ops/s
# Warmup Iteration  20: 207652.854 ops/s
# Warmup Iteration  21: 206813.274 ops/s
# Warmup Iteration  22: 208409.942 ops/s
# Warmup Iteration  23: 217801.930 ops/s
# Warmup Iteration  24: 212783.768 ops/s
# Warmup Iteration  25: 204205.652 ops/s
# Warmup Iteration  26: 218935.122 ops/s
# Warmup Iteration  27: 220792.852 ops/s
# Warmup Iteration  28: 201835.303 ops/s
# Warmup Iteration  29: 210822.164 ops/s
# Warmup Iteration  30: 208019.264 ops/s
Iteration   1: 208133.582 ops/s
Iteration   2: 214873.343 ops/s
Iteration   3: 209460.008 ops/s
Iteration   4: 208293.705 ops/s
Iteration   5: 218454.464 ops/s
Iteration   6: 207384.146 ops/s
Iteration   7: 219180.785 ops/s
Iteration   8: 212129.865 ops/s
Iteration   9: 206755.224 ops/s
Iteration  10: 216632.480 ops/s
Iteration  11: 208887.646 ops/s
Iteration  12: 208447.885 ops/s
Iteration  13: 207677.765 ops/s
Iteration  14: 206941.053 ops/s
Iteration  15: 206553.593 ops/s
Iteration  16: 210373.593 ops/s
Iteration  17: 207271.884 ops/s
Iteration  18: 214503.422 ops/s
Iteration  19: 206571.504 ops/s
Iteration  20: 221356.070 ops/s
Iteration  21: 214418.134 ops/s
Iteration  22: 194296.262 ops/s
Iteration  23: 222508.981 ops/s
Iteration  24: 184664.288 ops/s
Iteration  25: 201544.651 ops/s
Iteration  26: 208951.296 ops/s
Iteration  27: 215146.825 ops/s
Iteration  28: 219068.831 ops/s
Iteration  29: 202917.143 ops/s
Iteration  30: 218187.046 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancel":
  210052.849 ±(99.9%) 5283.917 ops/s [Average]
  (min, avg, max) = (184664.288, 210052.849, 222508.981), stdev = 7908.719
  CI (99.9%): [204768.932, 215336.766] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  210052.849 ± 5283.917  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_reentrantWork$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_reentrantWork

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 108405.184 ops/s
# Warmup Iteration   2: 741276.069 ops/s
# Warmup Iteration   3: 1299706.878 ops/s
# Warmup Iteration   4: 1454551.093 ops/s
# Warmup Iteration   5: 1500822.086 ops/s
# Warmup Iteration   6: 1447894.116 ops/s
# Warmup Iteration   7: 1489268.184 ops/s
# Warmup Iteration   8: 1458959.796 ops/s
# Warmup Iteration   9: 1468274.224 ops/s
# Warmup Iteration  10: 1515416.906 ops/s
# Warmup Iteration  11: 1400480.977 ops/s
# Warmup Iteration  12: 1435497.073 ops/s
# Warmup Iteration  13: 1558404.296 ops/s
# Warmup Iteration  14: 1527697.434 ops/s
# Warmup Iteration  15: 1473071.583 ops/s
# Warmup Iteration  16: 1469231.506 ops/s
# Warmup Iteration  17: 1476690.944 ops/s
# Warmup Iteration  18: 1440997.111 ops/s
# Warmup Iteration  19: 1464470.816 ops/s
# Warmup Iteration  20: 1551464.151 ops/s
# Warmup Iteration  21: 1466799.547 ops/s
# Warmup Iteration  22: 1443102.661 ops/s
# Warmup Iteration  23: 1537373.536 ops/s
# Warmup Iteration  24: 1503419.521 ops/s
# Warmup Iteration  25: 1504535.340 ops/s
# Warmup Iteration  26: 1444900.027 ops/s
# Warmup Iteration  27: 1450312.511 ops/s
# Warmup Iteration  28: 1461712.214 ops/s
# Warmup Iteration  29: 1514513.485 ops/s
# Warmup Iteration  30: 1448688.907 ops/s
Iteration   1: 1489066.881 ops/s
Iteration   2: 1442544.176 ops/s
Iteration   3: 1478845.258 ops/s
Iteration   4: 1459082.656 ops/s
Iteration   5: 1454065.153 ops/s
Iteration   6: 1542433.439 ops/s
Iteration   7: 1530687.837 ops/s
Iteration   8: 1437794.774 ops/s
Iteration   9: 1509948.331 ops/s
Iteration  10: 1454745.488 ops/s
Iteration  11: 1497094.364 ops/s
Iteration  12: 1517843.864 ops/s
Iteration  13: 1460664.688 ops/s
Iteration  14: 1503015.890 ops/s
Iteration  15: 1510080.974 ops/s
Iteration  16: 1486895.800 ops/s
Iteration  17: 1480738.640 ops/s
Iteration  18: 1481047.843 ops/s
Iteration  19: 1499748.500 ops/s
Iteration  20: 1462704.505 ops/s
Iteration  21: 1557639.303 ops/s
Iteration  22: 1526708.483 ops/s
Iteration  23: 1414904.713 ops/s
Iteration  24: 1499455.384 ops/s
Iteration  25: 1525046.829 ops/s
Iteration  26: 1480582.800 ops/s
Iteration  27: 1442486.858 ops/s
Iteration  28: 1515458.804 ops/s
Iteration  29: 1523652.213 ops/s
Iteration  30: 1439581.258 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapEagerTest._Benchmark.benchmark_reentrantWork":
  1487485.524 ±(99.9%) 23549.154 ops/s [Average]
  (min, avg, max) = (1414904.713, 1487485.524, 1557639.303), stdev = 35247.267
  CI (99.9%): [1463936.370, 1511034.677] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableConcatMapEagerTest._Benchmark.benchmark_reentrantWork  thrpt   30  1487485.524 ± 23549.154  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31179.746 ops/s
# Warmup Iteration   2: 159516.957 ops/s
# Warmup Iteration   3: 179809.554 ops/s
# Warmup Iteration   4: 202069.720 ops/s
# Warmup Iteration   5: 183429.038 ops/s
# Warmup Iteration   6: 207353.423 ops/s
# Warmup Iteration   7: 206370.417 ops/s
# Warmup Iteration   8: 209840.720 ops/s
# Warmup Iteration   9: 199829.786 ops/s
# Warmup Iteration  10: 210981.325 ops/s
# Warmup Iteration  11: 202820.773 ops/s
# Warmup Iteration  12: 203948.520 ops/s
# Warmup Iteration  13: 208942.507 ops/s
# Warmup Iteration  14: 199758.971 ops/s
# Warmup Iteration  15: 214866.570 ops/s
# Warmup Iteration  16: 213845.896 ops/s
# Warmup Iteration  17: 201295.469 ops/s
# Warmup Iteration  18: 221185.221 ops/s
# Warmup Iteration  19: 217674.322 ops/s
# Warmup Iteration  20: 203337.367 ops/s
# Warmup Iteration  21: 215677.330 ops/s
# Warmup Iteration  22: 210392.266 ops/s
# Warmup Iteration  23: 209978.224 ops/s
# Warmup Iteration  24: 214236.515 ops/s
# Warmup Iteration  25: 203102.543 ops/s
# Warmup Iteration  26: 210874.796 ops/s
# Warmup Iteration  27: 212720.530 ops/s
# Warmup Iteration  28: 203114.323 ops/s
# Warmup Iteration  29: 211779.039 ops/s
# Warmup Iteration  30: 215952.677 ops/s
Iteration   1: 204045.283 ops/s
Iteration   2: 214327.602 ops/s
Iteration   3: 209310.855 ops/s
Iteration   4: 210272.586 ops/s
Iteration   5: 208798.015 ops/s
Iteration   6: 206534.384 ops/s
Iteration   7: 205107.273 ops/s
Iteration   8: 214773.436 ops/s
Iteration   9: 203316.055 ops/s
Iteration  10: 209565.641 ops/s
Iteration  11: 217145.176 ops/s
Iteration  12: 210066.051 ops/s
Iteration  13: 210333.587 ops/s
Iteration  14: 205515.928 ops/s
Iteration  15: 208004.828 ops/s
Iteration  16: 216900.049 ops/s
Iteration  17: 202427.917 ops/s
Iteration  18: 216945.781 ops/s
Iteration  19: 161070.715 ops/s
Iteration  20: 201146.284 ops/s
Iteration  21: 215454.011 ops/s
Iteration  22: 207974.719 ops/s
Iteration  23: 198551.833 ops/s
Iteration  24: 207682.273 ops/s
Iteration  25: 215962.658 ops/s
Iteration  26: 198803.454 ops/s
Iteration  27: 209797.505 ops/s
Iteration  28: 213020.652 ops/s
Iteration  29: 209128.127 ops/s
Iteration  30: 218441.240 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd":
  207680.797 ±(99.9%) 6920.702 ops/s [Average]
  (min, avg, max) = (161070.715, 207680.797, 218441.240), stdev = 10358.581
  CI (99.9%): [200760.096, 214601.499] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayErrorTillEnd  thrpt   30  207680.797 ± 6920.702  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48410.611 ops/s
# Warmup Iteration   2: 162275.324 ops/s
# Warmup Iteration   3: 197177.143 ops/s
# Warmup Iteration   4: 196859.289 ops/s
# Warmup Iteration   5: 204399.865 ops/s
# Warmup Iteration   6: 198153.631 ops/s
# Warmup Iteration   7: 201678.358 ops/s
# Warmup Iteration   8: 205052.811 ops/s
# Warmup Iteration   9: 193462.073 ops/s
# Warmup Iteration  10: 200845.952 ops/s
# Warmup Iteration  11: 202860.058 ops/s
# Warmup Iteration  12: 212547.646 ops/s
# Warmup Iteration  13: 209273.640 ops/s
# Warmup Iteration  14: 196980.597 ops/s
# Warmup Iteration  15: 201935.461 ops/s
# Warmup Iteration  16: 209057.112 ops/s
# Warmup Iteration  17: 206941.826 ops/s
# Warmup Iteration  18: 199394.975 ops/s
# Warmup Iteration  19: 201387.000 ops/s
# Warmup Iteration  20: 218854.854 ops/s
# Warmup Iteration  21: 203733.785 ops/s
# Warmup Iteration  22: 211110.683 ops/s
# Warmup Iteration  23: 199639.132 ops/s
# Warmup Iteration  24: 206048.279 ops/s
# Warmup Iteration  25: 211518.261 ops/s
# Warmup Iteration  26: 206167.212 ops/s
# Warmup Iteration  27: 209063.491 ops/s
# Warmup Iteration  28: 215600.139 ops/s
# Warmup Iteration  29: 207048.054 ops/s
# Warmup Iteration  30: 216526.465 ops/s
Iteration   1: 206211.608 ops/s
Iteration   2: 214455.193 ops/s
Iteration   3: 207488.071 ops/s
Iteration   4: 212369.372 ops/s
Iteration   5: 210182.523 ops/s
Iteration   6: 210264.242 ops/s
Iteration   7: 211220.916 ops/s
Iteration   8: 206721.023 ops/s
Iteration   9: 215990.525 ops/s
Iteration  10: 217023.242 ops/s
Iteration  11: 199984.812 ops/s
Iteration  12: 208699.469 ops/s
Iteration  13: 208420.919 ops/s
Iteration  14: 205652.710 ops/s
Iteration  15: 213741.783 ops/s
Iteration  16: 206700.661 ops/s
Iteration  17: 214428.431 ops/s
Iteration  18: 214975.784 ops/s
Iteration  19: 206992.062 ops/s
Iteration  20: 216131.340 ops/s
Iteration  21: 205042.366 ops/s
Iteration  22: 218289.465 ops/s
Iteration  23: 206890.612 ops/s
Iteration  24: 205714.164 ops/s
Iteration  25: 218388.694 ops/s
Iteration  26: 207754.270 ops/s
Iteration  27: 206536.995 ops/s
Iteration  28: 218652.401 ops/s
Iteration  29: 202838.775 ops/s
Iteration  30: 215450.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayError":
  210440.436 ±(99.9%) 3378.911 ops/s [Average]
  (min, avg, max) = (199984.812, 210440.436, 218652.401), stdev = 5057.395
  CI (99.9%): [207061.525, 213819.347] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                 Mode  Cnt       Score      Error  Units
ObservableConcatMapSchedulerTest._Benchmark.benchmark_undeliverableUponCancelDelayError  thrpt   30  210440.436 ± 3378.911  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 295675.730 ops/s
# Warmup Iteration   2: 596751.267 ops/s
# Warmup Iteration   3: 684938.398 ops/s
# Warmup Iteration   4: 686946.093 ops/s
# Warmup Iteration   5: 719518.782 ops/s
# Warmup Iteration   6: 712176.062 ops/s
# Warmup Iteration   7: 701693.957 ops/s
# Warmup Iteration   8: 712794.402 ops/s
# Warmup Iteration   9: 667865.092 ops/s
# Warmup Iteration  10: 671871.990 ops/s
# Warmup Iteration  11: 679178.046 ops/s
# Warmup Iteration  12: 691894.881 ops/s
# Warmup Iteration  13: 627479.790 ops/s
# Warmup Iteration  14: 733994.978 ops/s
# Warmup Iteration  15: 681558.810 ops/s
# Warmup Iteration  16: 705023.284 ops/s
# Warmup Iteration  17: 767396.777 ops/s
# Warmup Iteration  18: 730742.562 ops/s
# Warmup Iteration  19: 767971.187 ops/s
# Warmup Iteration  20: 765619.491 ops/s
# Warmup Iteration  21: 748120.056 ops/s
# Warmup Iteration  22: 763356.207 ops/s
# Warmup Iteration  23: 773834.132 ops/s
# Warmup Iteration  24: 756974.736 ops/s
# Warmup Iteration  25: 730321.547 ops/s
# Warmup Iteration  26: 769007.313 ops/s
# Warmup Iteration  27: 742464.207 ops/s
# Warmup Iteration  28: 789287.583 ops/s
# Warmup Iteration  29: 776373.013 ops/s
# Warmup Iteration  30: 730744.855 ops/s
Iteration   1: 784111.859 ops/s
Iteration   2: 743035.114 ops/s
Iteration   3: 795482.423 ops/s
Iteration   4: 736937.710 ops/s
Iteration   5: 742538.993 ops/s
Iteration   6: 793409.162 ops/s
Iteration   7: 728704.617 ops/s
Iteration   8: 773606.112 ops/s
Iteration   9: 737738.717 ops/s
Iteration  10: 769880.995 ops/s
Iteration  11: 775368.136 ops/s
Iteration  12: 734466.869 ops/s
Iteration  13: 708263.438 ops/s
Iteration  14: 648546.087 ops/s
Iteration  15: 729129.970 ops/s
Iteration  16: 716320.749 ops/s
Iteration  17: 750616.557 ops/s
Iteration  18: 755791.191 ops/s
Iteration  19: 739314.003 ops/s
Iteration  20: 783339.541 ops/s
Iteration  21: 773216.787 ops/s
Iteration  22: 720823.509 ops/s
Iteration  23: 790238.866 ops/s
Iteration  24: 739222.202 ops/s
Iteration  25: 776054.039 ops/s
Iteration  26: 738342.569 ops/s
Iteration  27: 745591.927 ops/s
Iteration  28: 782882.499 ops/s
Iteration  29: 772166.938 ops/s
Iteration  30: 737843.538 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableFutureCancels":
  750766.171 ±(99.9%) 20892.952 ops/s [Average]
  (min, avg, max) = (648546.087, 750766.171, 795482.423), stdev = 31271.589
  CI (99.9%): [729873.219, 771659.122] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt       Score       Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableFutureCancels  thrpt   30  750766.171 ± 20892.952  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 335765.657 ops/s
# Warmup Iteration   2: 616227.190 ops/s
# Warmup Iteration   3: 683305.862 ops/s
# Warmup Iteration   4: 716682.953 ops/s
# Warmup Iteration   5: 684645.485 ops/s
# Warmup Iteration   6: 677425.213 ops/s
# Warmup Iteration   7: 717680.893 ops/s
# Warmup Iteration   8: 739276.564 ops/s
# Warmup Iteration   9: 695043.110 ops/s
# Warmup Iteration  10: 696224.332 ops/s
# Warmup Iteration  11: 703329.904 ops/s
# Warmup Iteration  12: 703511.614 ops/s
# Warmup Iteration  13: 741569.853 ops/s
# Warmup Iteration  14: 702192.968 ops/s
# Warmup Iteration  15: 735203.409 ops/s
# Warmup Iteration  16: 737069.943 ops/s
# Warmup Iteration  17: 744511.250 ops/s
# Warmup Iteration  18: 774299.923 ops/s
# Warmup Iteration  19: 747938.904 ops/s
# Warmup Iteration  20: 775947.619 ops/s
# Warmup Iteration  21: 750125.855 ops/s
# Warmup Iteration  22: 758908.243 ops/s
# Warmup Iteration  23: 771266.895 ops/s
# Warmup Iteration  24: 753536.325 ops/s
# Warmup Iteration  25: 731913.459 ops/s
# Warmup Iteration  26: 773170.556 ops/s
# Warmup Iteration  27: 746325.021 ops/s
# Warmup Iteration  28: 787604.169 ops/s
# Warmup Iteration  29: 758570.790 ops/s
# Warmup Iteration  30: 759636.061 ops/s
Iteration   1: 756248.815 ops/s
Iteration   2: 765690.152 ops/s
Iteration   3: 746889.206 ops/s
Iteration   4: 758660.067 ops/s
Iteration   5: 778781.035 ops/s
Iteration   6: 747186.029 ops/s
Iteration   7: 761709.027 ops/s
Iteration   8: 740246.530 ops/s
Iteration   9: 772782.365 ops/s
Iteration  10: 770146.311 ops/s
Iteration  11: 757934.240 ops/s
Iteration  12: 771298.369 ops/s
Iteration  13: 745105.354 ops/s
Iteration  14: 762741.307 ops/s
Iteration  15: 777810.959 ops/s
Iteration  16: 762961.938 ops/s
Iteration  17: 755423.073 ops/s
Iteration  18: 786123.607 ops/s
Iteration  19: 744023.063 ops/s
Iteration  20: 794072.204 ops/s
Iteration  21: 737813.412 ops/s
Iteration  22: 757782.003 ops/s
Iteration  23: 753579.261 ops/s
Iteration  24: 728350.246 ops/s
Iteration  25: 782633.613 ops/s
Iteration  26: 744567.560 ops/s
Iteration  27: 774338.704 ops/s
Iteration  28: 740809.955 ops/s
Iteration  29: 763401.261 ops/s
Iteration  30: 789105.512 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableFutureCancels":
  760940.506 ±(99.9%) 11027.132 ops/s [Average]
  (min, avg, max) = (728350.246, 760940.506, 794072.204), stdev = 16504.894
  CI (99.9%): [749913.374, 771967.638] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                    Mode  Cnt       Score       Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableFutureCancels  thrpt   30  760940.506 ± 11027.132  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1120785.050 ops/s
# Warmup Iteration   2: 4721798.652 ops/s
# Warmup Iteration   3: 5343290.909 ops/s
# Warmup Iteration   4: 6372411.561 ops/s
# Warmup Iteration   5: 6526296.603 ops/s
# Warmup Iteration   6: 6356188.007 ops/s
# Warmup Iteration   7: 6547463.789 ops/s
# Warmup Iteration   8: 6349359.969 ops/s
# Warmup Iteration   9: 6551503.908 ops/s
# Warmup Iteration  10: 6554890.161 ops/s
# Warmup Iteration  11: 6371398.997 ops/s
# Warmup Iteration  12: 6267297.413 ops/s
# Warmup Iteration  13: 6401503.038 ops/s
# Warmup Iteration  14: 6584415.071 ops/s
# Warmup Iteration  15: 6443028.959 ops/s
# Warmup Iteration  16: 6491195.704 ops/s
# Warmup Iteration  17: 6737767.218 ops/s
# Warmup Iteration  18: 6677262.072 ops/s
# Warmup Iteration  19: 6343390.137 ops/s
# Warmup Iteration  20: 6618108.509 ops/s
# Warmup Iteration  21: 6388163.730 ops/s
# Warmup Iteration  22: 6243365.819 ops/s
# Warmup Iteration  23: 6586049.099 ops/s
# Warmup Iteration  24: 6432500.524 ops/s
# Warmup Iteration  25: 6431023.080 ops/s
# Warmup Iteration  26: 6517427.124 ops/s
# Warmup Iteration  27: 6442480.372 ops/s
# Warmup Iteration  28: 6602203.736 ops/s
# Warmup Iteration  29: 6365327.675 ops/s
# Warmup Iteration  30: 6433852.431 ops/s
Iteration   1: 6622421.741 ops/s
Iteration   2: 6393393.074 ops/s
Iteration   3: 6714183.757 ops/s
Iteration   4: 6584806.690 ops/s
Iteration   5: 6606730.941 ops/s
Iteration   6: 6368272.043 ops/s
Iteration   7: 6567587.303 ops/s
Iteration   8: 5337204.047 ops/s
Iteration   9: 6182846.254 ops/s
Iteration  10: 6505354.991 ops/s
Iteration  11: 6320897.295 ops/s
Iteration  12: 6560442.804 ops/s
Iteration  13: 6486964.744 ops/s
Iteration  14: 6577601.190 ops/s
Iteration  15: 6503055.738 ops/s
Iteration  16: 6303599.345 ops/s
Iteration  17: 6624925.755 ops/s
Iteration  18: 6416506.367 ops/s
Iteration  19: 6396349.403 ops/s
Iteration  20: 6720559.943 ops/s
Iteration  21: 6316067.169 ops/s
Iteration  22: 6548788.140 ops/s
Iteration  23: 6431976.112 ops/s
Iteration  24: 6630807.513 ops/s
Iteration  25: 6434054.538 ops/s
Iteration  26: 6458242.946 ops/s
Iteration  27: 6528561.755 ops/s
Iteration  28: 6323810.703 ops/s
Iteration  29: 6691213.176 ops/s
Iteration  30: 6552927.341 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_dispose":
  6457005.094 ±(99.9%) 166807.873 ops/s [Average]
  (min, avg, max) = (5337204.047, 6457005.094, 6720559.943), stdev = 249670.190
  CI (99.9%): [6290197.221, 6623812.967] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
FlowableSingleTest._Benchmark.benchmark_dispose  thrpt   30  6457005.094 ± 166807.873  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_unsubscribeComposes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_unsubscribeComposes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 549966.089 ops/s
# Warmup Iteration   2: 2623987.770 ops/s
# Warmup Iteration   3: 4072468.170 ops/s
# Warmup Iteration   4: 4048266.679 ops/s
# Warmup Iteration   5: 4305850.503 ops/s
# Warmup Iteration   6: 4151189.926 ops/s
# Warmup Iteration   7: 3710534.767 ops/s
# Warmup Iteration   8: 3782901.215 ops/s
# Warmup Iteration   9: 4166167.345 ops/s
# Warmup Iteration  10: 4038864.646 ops/s
# Warmup Iteration  11: 4045897.606 ops/s
# Warmup Iteration  12: 4288654.654 ops/s
# Warmup Iteration  13: 4089050.894 ops/s
# Warmup Iteration  14: 4254717.988 ops/s
# Warmup Iteration  15: 4074248.408 ops/s
# Warmup Iteration  16: 4324913.512 ops/s
# Warmup Iteration  17: 4101444.547 ops/s
# Warmup Iteration  18: 4051756.782 ops/s
# Warmup Iteration  19: 4258541.451 ops/s
# Warmup Iteration  20: 4026280.713 ops/s
# Warmup Iteration  21: 4101329.888 ops/s
# Warmup Iteration  22: 4118802.500 ops/s
# Warmup Iteration  23: 4045283.960 ops/s
# Warmup Iteration  24: 4078513.128 ops/s
# Warmup Iteration  25: 4141648.786 ops/s
# Warmup Iteration  26: 4036479.180 ops/s
# Warmup Iteration  27: 3965845.701 ops/s
# Warmup Iteration  28: 4191414.631 ops/s
# Warmup Iteration  29: 3951707.308 ops/s
# Warmup Iteration  30: 4207646.664 ops/s
Iteration   1: 4003840.004 ops/s
Iteration   2: 4068704.617 ops/s
Iteration   3: 4299504.931 ops/s
Iteration   4: 3992543.916 ops/s
Iteration   5: 4121661.080 ops/s
Iteration   6: 4380866.089 ops/s
Iteration   7: 4021292.477 ops/s
Iteration   8: 4290346.863 ops/s
Iteration   9: 4195312.525 ops/s
Iteration  10: 4019072.471 ops/s
Iteration  11: 4208575.706 ops/s
Iteration  12: 4055381.261 ops/s
Iteration  13: 4030453.952 ops/s
Iteration  14: 4194076.052 ops/s
Iteration  15: 4210282.548 ops/s
Iteration  16: 4085480.667 ops/s
Iteration  17: 4291796.015 ops/s
Iteration  18: 3975244.245 ops/s
Iteration  19: 4271006.711 ops/s
Iteration  20: 4109857.844 ops/s
Iteration  21: 4148683.629 ops/s
Iteration  22: 4190594.859 ops/s
Iteration  23: 4124870.745 ops/s
Iteration  24: 4278353.299 ops/s
Iteration  25: 3988833.446 ops/s
Iteration  26: 4026359.182 ops/s
Iteration  27: 4146423.028 ops/s
Iteration  28: 3950420.145 ops/s
Iteration  29: 4241272.877 ops/s
Iteration  30: 4009500.620 ops/s


Result "io.reactivex.rxjava3.internal.subscribers.DeferredScalarSubscriberTest._Benchmark.benchmark_unsubscribeComposes":
  4131020.393 ±(99.9%) 78966.151 ops/s [Average]
  (min, avg, max) = (3950420.145, 4131020.393, 4380866.089), stdev = 118192.827
  CI (99.9%): [4052054.242, 4209986.545] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt        Score       Error  Units
DeferredScalarSubscriberTest._Benchmark.benchmark_unsubscribeComposes  thrpt   30  4131020.393 ± 78966.151  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_isDisposedToMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_isDisposedToMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 776214.011 ops/s
# Warmup Iteration   2: 4196989.983 ops/s
# Warmup Iteration   3: 5251791.864 ops/s
# Warmup Iteration   4: 5667450.956 ops/s
# Warmup Iteration   5: 6109768.055 ops/s
# Warmup Iteration   6: 5814423.772 ops/s
# Warmup Iteration   7: 5677626.825 ops/s
# Warmup Iteration   8: 6077418.293 ops/s
# Warmup Iteration   9: 5678322.156 ops/s
# Warmup Iteration  10: 5821320.347 ops/s
# Warmup Iteration  11: 5752035.765 ops/s
# Warmup Iteration  12: 6060931.325 ops/s
# Warmup Iteration  13: 5737829.127 ops/s
# Warmup Iteration  14: 5796705.823 ops/s
# Warmup Iteration  15: 6159353.087 ops/s
# Warmup Iteration  16: 5707041.019 ops/s
# Warmup Iteration  17: 6093640.065 ops/s
# Warmup Iteration  18: 6063041.448 ops/s
# Warmup Iteration  19: 5746721.303 ops/s
# Warmup Iteration  20: 5984901.636 ops/s
# Warmup Iteration  21: 5760376.385 ops/s
# Warmup Iteration  22: 6145100.069 ops/s
# Warmup Iteration  23: 5926153.486 ops/s
# Warmup Iteration  24: 5674131.448 ops/s
# Warmup Iteration  25: 5854446.639 ops/s
# Warmup Iteration  26: 6058442.392 ops/s
# Warmup Iteration  27: 5742155.702 ops/s
# Warmup Iteration  28: 6091242.437 ops/s
# Warmup Iteration  29: 5769715.528 ops/s
# Warmup Iteration  30: 5926412.300 ops/s
Iteration   1: 6074134.724 ops/s
Iteration   2: 5746185.447 ops/s
Iteration   3: 5124402.243 ops/s
Iteration   4: 5929834.049 ops/s
Iteration   5: 5749091.390 ops/s
Iteration   6: 6006154.280 ops/s
Iteration   7: 5892909.984 ops/s
Iteration   8: 5745105.733 ops/s
Iteration   9: 6031889.812 ops/s
Iteration  10: 5941216.359 ops/s
Iteration  11: 6017449.276 ops/s
Iteration  12: 5791253.358 ops/s
Iteration  13: 6029319.788 ops/s
Iteration  14: 5760314.553 ops/s
Iteration  15: 5791748.459 ops/s
Iteration  16: 5827601.329 ops/s
Iteration  17: 5972453.218 ops/s
Iteration  18: 5887168.880 ops/s
Iteration  19: 6157002.021 ops/s
Iteration  20: 5752134.979 ops/s
Iteration  21: 6137225.565 ops/s
Iteration  22: 5914082.702 ops/s
Iteration  23: 5698669.971 ops/s
Iteration  24: 5895822.229 ops/s
Iteration  25: 5798762.597 ops/s
Iteration  26: 6109503.609 ops/s
Iteration  27: 5948277.811 ops/s
Iteration  28: 5938365.332 ops/s
Iteration  29: 5719519.324 ops/s
Iteration  30: 6033469.762 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_isDisposedToMaybe":
  5880702.293 ±(99.9%) 130116.827 ops/s [Average]
  (min, avg, max) = (5124402.243, 5880702.293, 6157002.021), stdev = 194752.756
  CI (99.9%): [5750585.466, 6010819.120] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_isDisposedToMaybe  thrpt   30  5880702.293 ± 130116.827  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 608281.012 ops/s
# Warmup Iteration   2: 4281895.401 ops/s
# Warmup Iteration   3: 5735374.856 ops/s
# Warmup Iteration   4: 6143468.914 ops/s
# Warmup Iteration   5: 6666117.812 ops/s
# Warmup Iteration   6: 6529897.707 ops/s
# Warmup Iteration   7: 6327408.327 ops/s
# Warmup Iteration   8: 6780778.015 ops/s
# Warmup Iteration   9: 6499411.339 ops/s
# Warmup Iteration  10: 6386477.033 ops/s
# Warmup Iteration  11: 6690316.971 ops/s
# Warmup Iteration  12: 6425889.176 ops/s
# Warmup Iteration  13: 6666182.732 ops/s
# Warmup Iteration  14: 6549768.302 ops/s
# Warmup Iteration  15: 6268563.292 ops/s
# Warmup Iteration  16: 6545734.673 ops/s
# Warmup Iteration  17: 6546903.479 ops/s
# Warmup Iteration  18: 6559821.454 ops/s
# Warmup Iteration  19: 6491497.466 ops/s
# Warmup Iteration  20: 6529401.015 ops/s
# Warmup Iteration  21: 6692714.558 ops/s
# Warmup Iteration  22: 6477398.770 ops/s
# Warmup Iteration  23: 6467948.015 ops/s
# Warmup Iteration  24: 6802859.014 ops/s
# Warmup Iteration  25: 6760056.133 ops/s
# Warmup Iteration  26: 6231386.760 ops/s
# Warmup Iteration  27: 6721824.468 ops/s
# Warmup Iteration  28: 6550199.864 ops/s
# Warmup Iteration  29: 6595776.389 ops/s
# Warmup Iteration  30: 6420877.943 ops/s
Iteration   1: 6587295.624 ops/s
Iteration   2: 6747018.907 ops/s
Iteration   3: 6388003.738 ops/s
Iteration   4: 6512181.189 ops/s
Iteration   5: 6704915.448 ops/s
Iteration   6: 6209882.689 ops/s
Iteration   7: 6647121.892 ops/s
Iteration   8: 6504381.268 ops/s
Iteration   9: 6706955.166 ops/s
Iteration  10: 6745482.759 ops/s
Iteration  11: 6342916.024 ops/s
Iteration  12: 6659405.172 ops/s
Iteration  13: 6317431.578 ops/s
Iteration  14: 6577923.944 ops/s
Iteration  15: 6666824.217 ops/s
Iteration  16: 6347385.098 ops/s
Iteration  17: 6679527.591 ops/s
Iteration  18: 6387525.741 ops/s
Iteration  19: 6554187.094 ops/s
Iteration  20: 6708163.645 ops/s
Iteration  21: 6336755.072 ops/s
Iteration  22: 6736225.703 ops/s
Iteration  23: 6633029.406 ops/s
Iteration  24: 6395806.786 ops/s
Iteration  25: 6562639.200 ops/s
Iteration  26: 6619119.419 ops/s
Iteration  27: 6452497.101 ops/s
Iteration  28: 6515827.336 ops/s
Iteration  29: 6519831.200 ops/s
Iteration  30: 6746299.299 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeContainsTest._Benchmark.benchmark_isDisposed":
  6550418.643 ±(99.9%) 102338.921 ops/s [Average]
  (min, avg, max) = (6209882.689, 6550418.643, 6747018.907), stdev = 153176.090
  CI (99.9%): [6448079.723, 6652757.564] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt        Score        Error  Units
MaybeContainsTest._Benchmark.benchmark_isDisposed  thrpt   30  6550418.643 ± 102338.921  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1775265.909 ops/s
# Warmup Iteration   2: 5524102.878 ops/s
# Warmup Iteration   3: 5570580.802 ops/s
# Warmup Iteration   4: 6772893.037 ops/s
# Warmup Iteration   5: 6843552.706 ops/s
# Warmup Iteration   6: 6774673.110 ops/s
# Warmup Iteration   7: 6955798.402 ops/s
# Warmup Iteration   8: 6818526.248 ops/s
# Warmup Iteration   9: 6927739.383 ops/s
# Warmup Iteration  10: 6872441.935 ops/s
# Warmup Iteration  11: 6795190.952 ops/s
# Warmup Iteration  12: 6894140.329 ops/s
# Warmup Iteration  13: 6655108.970 ops/s
# Warmup Iteration  14: 7191039.514 ops/s
# Warmup Iteration  15: 6748426.900 ops/s
# Warmup Iteration  16: 7113905.436 ops/s
# Warmup Iteration  17: 6979708.861 ops/s
# Warmup Iteration  18: 6591986.682 ops/s
# Warmup Iteration  19: 7032722.249 ops/s
# Warmup Iteration  20: 6948779.764 ops/s
# Warmup Iteration  21: 6845013.279 ops/s
# Warmup Iteration  22: 7150672.192 ops/s
# Warmup Iteration  23: 6571363.140 ops/s
# Warmup Iteration  24: 6804372.810 ops/s
# Warmup Iteration  25: 7198959.180 ops/s
# Warmup Iteration  26: 6827479.209 ops/s
# Warmup Iteration  27: 6864440.711 ops/s
# Warmup Iteration  28: 5881397.909 ops/s
# Warmup Iteration  29: 7167470.874 ops/s
# Warmup Iteration  30: 6770624.697 ops/s
Iteration   1: 6859883.208 ops/s
Iteration   2: 6825950.971 ops/s
Iteration   3: 6941821.147 ops/s
Iteration   4: 6901310.065 ops/s
Iteration   5: 6674941.310 ops/s
Iteration   6: 7182212.349 ops/s
Iteration   7: 6823984.705 ops/s
Iteration   8: 6922973.217 ops/s
Iteration   9: 7148573.754 ops/s
Iteration  10: 6711642.027 ops/s
Iteration  11: 7188030.412 ops/s
Iteration  12: 7086178.906 ops/s
Iteration  13: 6695579.581 ops/s
Iteration  14: 6848101.927 ops/s
Iteration  15: 6968661.868 ops/s
Iteration  16: 6809685.794 ops/s
Iteration  17: 7091245.339 ops/s
Iteration  18: 6713276.185 ops/s
Iteration  19: 6855517.165 ops/s
Iteration  20: 7092541.171 ops/s
Iteration  21: 6774563.693 ops/s
Iteration  22: 7096792.877 ops/s
Iteration  23: 6820974.291 ops/s
Iteration  24: 7041906.653 ops/s
Iteration  25: 6761581.000 ops/s
Iteration  26: 6854314.766 ops/s
Iteration  27: 7102053.401 ops/s
Iteration  28: 6879264.143 ops/s
Iteration  29: 6986374.325 ops/s
Iteration  30: 7128668.428 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteCancels":
  6926286.823 ±(99.9%) 104579.642 ops/s [Average]
  (min, avg, max) = (6674941.310, 6926286.823, 7188030.412), stdev = 156529.897
  CI (99.9%): [6821707.180, 7030866.465] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                         Mode  Cnt        Score        Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstCompletableManualCompleteCancels  thrpt   30  6926286.823 ± 104579.642  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2053439.620 ops/s
# Warmup Iteration   2: 5317877.258 ops/s
# Warmup Iteration   3: 5741947.605 ops/s
# Warmup Iteration   4: 6894991.431 ops/s
# Warmup Iteration   5: 6757086.609 ops/s
# Warmup Iteration   6: 6873203.259 ops/s
# Warmup Iteration   7: 7096576.474 ops/s
# Warmup Iteration   8: 6632844.628 ops/s
# Warmup Iteration   9: 7119361.318 ops/s
# Warmup Iteration  10: 6696049.022 ops/s
# Warmup Iteration  11: 6825028.389 ops/s
# Warmup Iteration  12: 7051696.425 ops/s
# Warmup Iteration  13: 6772727.499 ops/s
# Warmup Iteration  14: 6895352.517 ops/s
# Warmup Iteration  15: 7299183.164 ops/s
# Warmup Iteration  16: 6636616.857 ops/s
# Warmup Iteration  17: 7082051.319 ops/s
# Warmup Iteration  18: 6862504.604 ops/s
# Warmup Iteration  19: 6804167.658 ops/s
# Warmup Iteration  20: 6910078.700 ops/s
# Warmup Iteration  21: 6852161.979 ops/s
# Warmup Iteration  22: 7085036.689 ops/s
# Warmup Iteration  23: 6899921.425 ops/s
# Warmup Iteration  24: 6733588.158 ops/s
# Warmup Iteration  25: 7109962.032 ops/s
# Warmup Iteration  26: 6771680.719 ops/s
# Warmup Iteration  27: 6971284.994 ops/s
# Warmup Iteration  28: 6649614.302 ops/s
# Warmup Iteration  29: 6978302.958 ops/s
# Warmup Iteration  30: 6856437.880 ops/s
Iteration   1: 6942847.045 ops/s
Iteration   2: 6909386.742 ops/s
Iteration   3: 6930608.066 ops/s
Iteration   4: 6910519.625 ops/s
Iteration   5: 6913987.014 ops/s
Iteration   6: 6926908.119 ops/s
Iteration   7: 6765238.238 ops/s
Iteration   8: 6949960.597 ops/s
Iteration   9: 6894575.084 ops/s
Iteration  10: 7128141.734 ops/s
Iteration  11: 6720540.698 ops/s
Iteration  12: 7036029.511 ops/s
Iteration  13: 6829502.706 ops/s
Iteration  14: 6739521.703 ops/s
Iteration  15: 7096080.408 ops/s
Iteration  16: 6689462.453 ops/s
Iteration  17: 6839275.667 ops/s
Iteration  18: 7258455.196 ops/s
Iteration  19: 6650906.543 ops/s
Iteration  20: 6942801.144 ops/s
Iteration  21: 6850924.800 ops/s
Iteration  22: 6931097.403 ops/s
Iteration  23: 6710446.909 ops/s
Iteration  24: 6862610.936 ops/s
Iteration  25: 7041899.251 ops/s
Iteration  26: 6633418.771 ops/s
Iteration  27: 6946431.822 ops/s
Iteration  28: 6712962.322 ops/s
Iteration  29: 6842181.641 ops/s
Iteration  30: 6811367.841 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteCancels":
  6880603.000 ±(99.9%) 96567.602 ops/s [Average]
  (min, avg, max) = (6633418.771, 6880603.000, 7258455.196), stdev = 144537.852
  CI (99.9%): [6784035.397, 6977170.602] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt        Score       Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_lastCompletableManualCompleteCancels  thrpt   30  6880603.000 ± 96567.602  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2445480.969 ops/s
# Warmup Iteration   2: 5168723.163 ops/s
# Warmup Iteration   3: 5813129.864 ops/s
# Warmup Iteration   4: 6614601.023 ops/s
# Warmup Iteration   5: 7001515.217 ops/s
# Warmup Iteration   6: 6751604.788 ops/s
# Warmup Iteration   7: 6936116.404 ops/s
# Warmup Iteration   8: 6865324.498 ops/s
# Warmup Iteration   9: 6681190.489 ops/s
# Warmup Iteration  10: 6974853.771 ops/s
# Warmup Iteration  11: 6864184.487 ops/s
# Warmup Iteration  12: 6987324.870 ops/s
# Warmup Iteration  13: 6716408.178 ops/s
# Warmup Iteration  14: 6750701.218 ops/s
# Warmup Iteration  15: 7131097.480 ops/s
# Warmup Iteration  16: 6884305.595 ops/s
# Warmup Iteration  17: 6932167.519 ops/s
# Warmup Iteration  18: 6749328.435 ops/s
# Warmup Iteration  19: 7014960.915 ops/s
# Warmup Iteration  20: 6867419.041 ops/s
# Warmup Iteration  21: 6880577.451 ops/s
# Warmup Iteration  22: 5456972.527 ops/s
# Warmup Iteration  23: 7006867.943 ops/s
# Warmup Iteration  24: 6658225.256 ops/s
# Warmup Iteration  25: 6875813.667 ops/s
# Warmup Iteration  26: 7177546.437 ops/s
# Warmup Iteration  27: 6758200.068 ops/s
# Warmup Iteration  28: 7098693.742 ops/s
# Warmup Iteration  29: 6717077.868 ops/s
# Warmup Iteration  30: 6906788.589 ops/s
Iteration   1: 7106155.468 ops/s
Iteration   2: 6906247.424 ops/s
Iteration   3: 7047896.982 ops/s
Iteration   4: 6918745.840 ops/s
Iteration   5: 6635813.278 ops/s
Iteration   6: 7202300.170 ops/s
Iteration   7: 6791518.974 ops/s
Iteration   8: 6828805.703 ops/s
Iteration   9: 6910391.430 ops/s
Iteration  10: 6796757.140 ops/s
Iteration  11: 6703868.351 ops/s
Iteration  12: 6732144.401 ops/s
Iteration  13: 6998835.832 ops/s
Iteration  14: 6815617.154 ops/s
Iteration  15: 6985884.314 ops/s
Iteration  16: 6740158.939 ops/s
Iteration  17: 7058117.692 ops/s
Iteration  18: 6800632.386 ops/s
Iteration  19: 7017874.862 ops/s
Iteration  20: 6719583.233 ops/s
Iteration  21: 6899174.391 ops/s
Iteration  22: 6785535.303 ops/s
Iteration  23: 6942123.933 ops/s
Iteration  24: 6955137.145 ops/s
Iteration  25: 6640386.922 ops/s
Iteration  26: 6789847.776 ops/s
Iteration  27: 6799108.302 ops/s
Iteration  28: 6617728.555 ops/s
Iteration  29: 7012029.583 ops/s
Iteration  30: 6791855.945 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteCancels":
  6865009.248 ±(99.9%) 98172.263 ops/s [Average]
  (min, avg, max) = (6617728.555, 6865009.248, 7202300.170), stdev = 146939.633
  CI (99.9%): [6766836.984, 6963181.511] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                            Mode  Cnt        Score       Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_singleCompletableManualCompleteCancels  thrpt   30  6865009.248 ± 98172.263  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2058676.416 ops/s
# Warmup Iteration   2: 5478603.402 ops/s
# Warmup Iteration   3: 7046947.153 ops/s
# Warmup Iteration   4: 6483742.316 ops/s
# Warmup Iteration   5: 7045980.766 ops/s
# Warmup Iteration   6: 6726967.249 ops/s
# Warmup Iteration   7: 6876659.646 ops/s
# Warmup Iteration   8: 6920806.954 ops/s
# Warmup Iteration   9: 5821153.529 ops/s
# Warmup Iteration  10: 6909433.849 ops/s
# Warmup Iteration  11: 6795911.530 ops/s
# Warmup Iteration  12: 7123653.951 ops/s
# Warmup Iteration  13: 7158076.970 ops/s
# Warmup Iteration  14: 6639524.859 ops/s
# Warmup Iteration  15: 7213519.805 ops/s
# Warmup Iteration  16: 6633078.165 ops/s
# Warmup Iteration  17: 6841043.915 ops/s
# Warmup Iteration  18: 6902330.496 ops/s
# Warmup Iteration  19: 6755756.197 ops/s
# Warmup Iteration  20: 6845771.685 ops/s
# Warmup Iteration  21: 6802583.298 ops/s
# Warmup Iteration  22: 6821479.064 ops/s
# Warmup Iteration  23: 7128531.703 ops/s
# Warmup Iteration  24: 7011315.900 ops/s
# Warmup Iteration  25: 6679863.985 ops/s
# Warmup Iteration  26: 7061706.239 ops/s
# Warmup Iteration  27: 6779830.421 ops/s
# Warmup Iteration  28: 6911784.225 ops/s
# Warmup Iteration  29: 7056447.564 ops/s
# Warmup Iteration  30: 6768979.635 ops/s
Iteration   1: 6955730.280 ops/s
Iteration   2: 6834002.658 ops/s
Iteration   3: 6835635.942 ops/s
Iteration   4: 7112775.489 ops/s
Iteration   5: 6811443.117 ops/s
Iteration   6: 7005291.147 ops/s
Iteration   7: 7103194.454 ops/s
Iteration   8: 6887450.142 ops/s
Iteration   9: 6775856.736 ops/s
Iteration  10: 7063747.649 ops/s
Iteration  11: 6678487.739 ops/s
Iteration  12: 7170542.524 ops/s
Iteration  13: 7031213.865 ops/s
Iteration  14: 6763792.156 ops/s
Iteration  15: 6925084.057 ops/s
Iteration  16: 7091790.889 ops/s
Iteration  17: 6846383.755 ops/s
Iteration  18: 6937219.200 ops/s
Iteration  19: 6673006.924 ops/s
Iteration  20: 6694594.516 ops/s
Iteration  21: 6995565.300 ops/s
Iteration  22: 6717977.286 ops/s
Iteration  23: 6793802.253 ops/s
Iteration  24: 6938123.127 ops/s
Iteration  25: 7269759.495 ops/s
Iteration  26: 6758382.972 ops/s
Iteration  27: 7160185.183 ops/s
Iteration  28: 6649786.876 ops/s
Iteration  29: 6964819.158 ops/s
Iteration  30: 6934047.793 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteCancels":
  6912656.423 ±(99.9%) 110657.011 ops/s [Average]
  (min, avg, max) = (6649786.876, 6912656.423, 7269759.495), stdev = 165626.218
  CI (99.9%): [6801999.411, 7023313.434] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt        Score        Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_lastCompletableManualCompleteCancels  thrpt   30  6912656.423 ± 110657.011  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2070746.554 ops/s
# Warmup Iteration   2: 5392748.383 ops/s
# Warmup Iteration   3: 5663517.787 ops/s
# Warmup Iteration   4: 6848668.463 ops/s
# Warmup Iteration   5: 7045472.030 ops/s
# Warmup Iteration   6: 6704032.899 ops/s
# Warmup Iteration   7: 6709959.223 ops/s
# Warmup Iteration   8: 6852772.036 ops/s
# Warmup Iteration   9: 7035634.865 ops/s
# Warmup Iteration  10: 6565098.395 ops/s
# Warmup Iteration  11: 6705692.098 ops/s
# Warmup Iteration  12: 6980741.776 ops/s
# Warmup Iteration  13: 6812516.574 ops/s
# Warmup Iteration  14: 6869126.162 ops/s
# Warmup Iteration  15: 6683716.842 ops/s
# Warmup Iteration  16: 6858005.722 ops/s
# Warmup Iteration  17: 5337009.818 ops/s
# Warmup Iteration  18: 6756818.382 ops/s
# Warmup Iteration  19: 6655135.261 ops/s
# Warmup Iteration  20: 7212817.505 ops/s
# Warmup Iteration  21: 6732743.622 ops/s
# Warmup Iteration  22: 6764076.967 ops/s
# Warmup Iteration  23: 6738592.453 ops/s
# Warmup Iteration  24: 6785757.783 ops/s
# Warmup Iteration  25: 7088337.751 ops/s
# Warmup Iteration  26: 6806851.863 ops/s
# Warmup Iteration  27: 6830081.471 ops/s
# Warmup Iteration  28: 6808090.377 ops/s
# Warmup Iteration  29: 6776730.341 ops/s
# Warmup Iteration  30: 7155998.176 ops/s
Iteration   1: 6740436.276 ops/s
Iteration   2: 7011238.735 ops/s
Iteration   3: 6822692.430 ops/s
Iteration   4: 6947453.412 ops/s
Iteration   5: 6953380.037 ops/s
Iteration   6: 6766719.997 ops/s
Iteration   7: 7029211.684 ops/s
Iteration   8: 6670981.391 ops/s
Iteration   9: 7035583.787 ops/s
Iteration  10: 6826180.214 ops/s
Iteration  11: 7042605.297 ops/s
Iteration  12: 6755037.440 ops/s
Iteration  13: 6798662.705 ops/s
Iteration  14: 6905426.548 ops/s
Iteration  15: 6772155.584 ops/s
Iteration  16: 7137410.783 ops/s
Iteration  17: 6771782.272 ops/s
Iteration  18: 6804956.423 ops/s
Iteration  19: 7034017.856 ops/s
Iteration  20: 6728402.882 ops/s
Iteration  21: 7074017.297 ops/s
Iteration  22: 7080574.291 ops/s
Iteration  23: 6733664.303 ops/s
Iteration  24: 7154124.932 ops/s
Iteration  25: 6696854.127 ops/s
Iteration  26: 7268012.944 ops/s
Iteration  27: 7023714.664 ops/s
Iteration  28: 6813575.139 ops/s
Iteration  29: 6832845.877 ops/s
Iteration  30: 7094762.942 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteCancels":
  6910882.742 ±(99.9%) 107471.889 ops/s [Average]
  (min, avg, max) = (6670981.391, 6910882.742, 7268012.944), stdev = 160858.877
  CI (99.9%): [6803410.853, 7018354.632] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                           Mode  Cnt        Score        Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstCompletableManualCompleteCancels  thrpt   30  6910882.742 ± 107471.889  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2392324.317 ops/s
# Warmup Iteration   2: 5341820.531 ops/s
# Warmup Iteration   3: 5876655.834 ops/s
# Warmup Iteration   4: 6600846.473 ops/s
# Warmup Iteration   5: 7024806.520 ops/s
# Warmup Iteration   6: 7123062.733 ops/s
# Warmup Iteration   7: 7146573.919 ops/s
# Warmup Iteration   8: 6752281.014 ops/s
# Warmup Iteration   9: 6886440.657 ops/s
# Warmup Iteration  10: 6736765.514 ops/s
# Warmup Iteration  11: 6689300.372 ops/s
# Warmup Iteration  12: 6951050.516 ops/s
# Warmup Iteration  13: 6719994.035 ops/s
# Warmup Iteration  14: 6972435.122 ops/s
# Warmup Iteration  15: 7187104.338 ops/s
# Warmup Iteration  16: 6681762.420 ops/s
# Warmup Iteration  17: 6910643.961 ops/s
# Warmup Iteration  18: 6738381.851 ops/s
# Warmup Iteration  19: 6806385.888 ops/s
# Warmup Iteration  20: 7189891.223 ops/s
# Warmup Iteration  21: 7025608.096 ops/s
# Warmup Iteration  22: 6820863.536 ops/s
# Warmup Iteration  23: 6815360.639 ops/s
# Warmup Iteration  24: 7005138.077 ops/s
# Warmup Iteration  25: 7080168.095 ops/s
# Warmup Iteration  26: 6798964.016 ops/s
# Warmup Iteration  27: 7026738.248 ops/s
# Warmup Iteration  28: 6588743.039 ops/s
# Warmup Iteration  29: 7112818.513 ops/s
# Warmup Iteration  30: 6709086.315 ops/s
Iteration   1: 6735252.690 ops/s
Iteration   2: 6884745.680 ops/s
Iteration   3: 6678965.641 ops/s
Iteration   4: 6707664.839 ops/s
Iteration   5: 6995447.397 ops/s
Iteration   6: 6565993.283 ops/s
Iteration   7: 7020075.771 ops/s
Iteration   8: 7055419.020 ops/s
Iteration   9: 6757368.114 ops/s
Iteration  10: 6968587.874 ops/s
Iteration  11: 6991648.339 ops/s
Iteration  12: 6851956.669 ops/s
Iteration  13: 7145747.815 ops/s
Iteration  14: 6624228.883 ops/s
Iteration  15: 6756062.422 ops/s
Iteration  16: 7031014.915 ops/s
Iteration  17: 6439825.404 ops/s
Iteration  18: 7079574.987 ops/s
Iteration  19: 6577222.667 ops/s
Iteration  20: 6698600.409 ops/s
Iteration  21: 7067355.143 ops/s
Iteration  22: 6451033.189 ops/s
Iteration  23: 7245872.254 ops/s
Iteration  24: 7112155.383 ops/s
Iteration  25: 6713333.271 ops/s
Iteration  26: 7027147.127 ops/s
Iteration  27: 7016389.092 ops/s
Iteration  28: 7048267.654 ops/s
Iteration  29: 6796299.018 ops/s
Iteration  30: 6885108.618 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteCancels":
  6864278.786 ±(99.9%) 142796.856 ops/s [Average]
  (min, avg, max) = (6439825.404, 6864278.786, 7245872.254), stdev = 213731.628
  CI (99.9%): [6721481.929, 7007075.642] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                          Mode  Cnt        Score        Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_singleCompletableManualCompleteCancels  thrpt   30  6864278.786 ± 142796.856  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 977282.815 ops/s
# Warmup Iteration   2: 4425597.293 ops/s
# Warmup Iteration   3: 5380434.086 ops/s
# Warmup Iteration   4: 6128876.530 ops/s
# Warmup Iteration   5: 6433641.349 ops/s
# Warmup Iteration   6: 6464070.154 ops/s
# Warmup Iteration   7: 5998960.268 ops/s
# Warmup Iteration   8: 6268295.428 ops/s
# Warmup Iteration   9: 6019048.358 ops/s
# Warmup Iteration  10: 6213833.583 ops/s
# Warmup Iteration  11: 6203642.941 ops/s
# Warmup Iteration  12: 4942634.920 ops/s
# Warmup Iteration  13: 6295937.633 ops/s
# Warmup Iteration  14: 6284069.512 ops/s
# Warmup Iteration  15: 6241158.601 ops/s
# Warmup Iteration  16: 6199597.501 ops/s
# Warmup Iteration  17: 6102527.799 ops/s
# Warmup Iteration  18: 6296875.133 ops/s
# Warmup Iteration  19: 6156628.548 ops/s
# Warmup Iteration  20: 6149837.503 ops/s
# Warmup Iteration  21: 6437923.111 ops/s
# Warmup Iteration  22: 6099380.321 ops/s
# Warmup Iteration  23: 6442139.344 ops/s
# Warmup Iteration  24: 6216323.966 ops/s
# Warmup Iteration  25: 6039504.120 ops/s
# Warmup Iteration  26: 6391751.932 ops/s
# Warmup Iteration  27: 6107671.710 ops/s
# Warmup Iteration  28: 6098870.865 ops/s
# Warmup Iteration  29: 6138143.471 ops/s
# Warmup Iteration  30: 6349906.928 ops/s
Iteration   1: 6430308.611 ops/s
Iteration   2: 5855297.961 ops/s
Iteration   3: 6312513.364 ops/s
Iteration   4: 6108270.049 ops/s
Iteration   5: 6212617.750 ops/s
Iteration   6: 6423006.002 ops/s
Iteration   7: 6031975.117 ops/s
Iteration   8: 6345886.151 ops/s
Iteration   9: 6226205.320 ops/s
Iteration  10: 6436063.357 ops/s
Iteration  11: 5757804.729 ops/s
Iteration  12: 6544490.567 ops/s
Iteration  13: 6312209.239 ops/s
Iteration  14: 5927945.193 ops/s
Iteration  15: 6165300.095 ops/s
Iteration  16: 6198345.135 ops/s
Iteration  17: 6374364.182 ops/s
Iteration  18: 6498959.374 ops/s
Iteration  19: 6511447.532 ops/s
Iteration  20: 6154670.163 ops/s
Iteration  21: 6432430.721 ops/s
Iteration  22: 6079053.034 ops/s
Iteration  23: 5996111.353 ops/s
Iteration  24: 6275288.970 ops/s
Iteration  25: 6188652.201 ops/s
Iteration  26: 6435403.919 ops/s
Iteration  27: 6234823.667 ops/s
Iteration  28: 6386161.526 ops/s
Iteration  29: 6466889.759 ops/s
Iteration  30: 6060181.614 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_isDisposed":
  6246089.222 ±(99.9%) 136131.312 ops/s [Average]
  (min, avg, max) = (5757804.729, 6246089.222, 6544490.567), stdev = 203754.954
  CI (99.9%): [6109957.910, 6382220.534] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score        Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_isDisposed  thrpt   30  6246089.222 ± 136131.312  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 792732.127 ops/s
# Warmup Iteration   2: 3381271.314 ops/s
# Warmup Iteration   3: 4808977.305 ops/s
# Warmup Iteration   4: 4778661.866 ops/s
# Warmup Iteration   5: 4555435.844 ops/s
# Warmup Iteration   6: 4665741.957 ops/s
# Warmup Iteration   7: 3972206.167 ops/s
# Warmup Iteration   8: 4545565.445 ops/s
# Warmup Iteration   9: 4706449.340 ops/s
# Warmup Iteration  10: 4582352.421 ops/s
# Warmup Iteration  11: 4788753.863 ops/s
# Warmup Iteration  12: 4805307.608 ops/s
# Warmup Iteration  13: 4664679.990 ops/s
# Warmup Iteration  14: 4832883.090 ops/s
# Warmup Iteration  15: 4789486.002 ops/s
# Warmup Iteration  16: 4590007.155 ops/s
# Warmup Iteration  17: 4750728.465 ops/s
# Warmup Iteration  18: 4790201.319 ops/s
# Warmup Iteration  19: 4544406.374 ops/s
# Warmup Iteration  20: 4894143.004 ops/s
# Warmup Iteration  21: 4654715.270 ops/s
# Warmup Iteration  22: 4602585.390 ops/s
# Warmup Iteration  23: 4849254.341 ops/s
# Warmup Iteration  24: 4751495.318 ops/s
# Warmup Iteration  25: 4819885.767 ops/s
# Warmup Iteration  26: 4585704.604 ops/s
# Warmup Iteration  27: 4774771.117 ops/s
# Warmup Iteration  28: 4523784.930 ops/s
# Warmup Iteration  29: 4635419.304 ops/s
# Warmup Iteration  30: 4777057.658 ops/s
Iteration   1: 4331700.077 ops/s
Iteration   2: 4559910.363 ops/s
Iteration   3: 4845364.583 ops/s
Iteration   4: 4434745.312 ops/s
Iteration   5: 4774461.569 ops/s
Iteration   6: 4625057.699 ops/s
Iteration   7: 4665617.050 ops/s
Iteration   8: 4730734.745 ops/s
Iteration   9: 4550261.162 ops/s
Iteration  10: 4715271.334 ops/s
Iteration  11: 4775723.213 ops/s
Iteration  12: 4741911.988 ops/s
Iteration  13: 4771794.998 ops/s
Iteration  14: 4661701.092 ops/s
Iteration  15: 4506391.543 ops/s
Iteration  16: 4702340.021 ops/s
Iteration  17: 4794294.485 ops/s
Iteration  18: 4675740.916 ops/s
Iteration  19: 4729385.025 ops/s
Iteration  20: 4610046.292 ops/s
Iteration  21: 4890833.705 ops/s
Iteration  22: 4804510.990 ops/s
Iteration  23: 4611938.295 ops/s
Iteration  24: 4717089.897 ops/s
Iteration  25: 4649588.264 ops/s
Iteration  26: 4842998.604 ops/s
Iteration  27: 4748431.387 ops/s
Iteration  28: 4529754.786 ops/s
Iteration  29: 4814159.258 ops/s
Iteration  30: 4715515.943 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeSwitchIfEmptyTest._Benchmark.benchmark_isDisposed":
  4684242.487 ±(99.9%) 84898.331 ops/s [Average]
  (min, avg, max) = (4331700.077, 4684242.487, 4890833.705), stdev = 127071.835
  CI (99.9%): [4599344.155, 4769140.818] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeSwitchIfEmptyTest._Benchmark.benchmark_isDisposed  thrpt   30  4684242.487 ± 84898.331  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 3554021.902 ops/s
# Warmup Iteration   2: 7428282.089 ops/s
# Warmup Iteration   3: 7547855.833 ops/s
# Warmup Iteration   4: 8584952.396 ops/s
# Warmup Iteration   5: 8817440.392 ops/s
# Warmup Iteration   6: 7377016.259 ops/s
# Warmup Iteration   7: 8679104.740 ops/s
# Warmup Iteration   8: 8948716.684 ops/s
# Warmup Iteration   9: 9055770.981 ops/s
# Warmup Iteration  10: 8811837.060 ops/s
# Warmup Iteration  11: 8662725.633 ops/s
# Warmup Iteration  12: 9015157.286 ops/s
# Warmup Iteration  13: 8766753.120 ops/s
# Warmup Iteration  14: 8796923.512 ops/s
# Warmup Iteration  15: 8912827.427 ops/s
# Warmup Iteration  16: 9173923.716 ops/s
# Warmup Iteration  17: 8711180.145 ops/s
# Warmup Iteration  18: 9214447.053 ops/s
# Warmup Iteration  19: 8565284.190 ops/s
# Warmup Iteration  20: 9106612.960 ops/s
# Warmup Iteration  21: 8699836.111 ops/s
# Warmup Iteration  22: 8982759.820 ops/s
# Warmup Iteration  23: 8828155.641 ops/s
# Warmup Iteration  24: 8660282.352 ops/s
# Warmup Iteration  25: 9160053.230 ops/s
# Warmup Iteration  26: 8767951.715 ops/s
# Warmup Iteration  27: 8875059.657 ops/s
# Warmup Iteration  28: 9181029.126 ops/s
# Warmup Iteration  29: 8624916.749 ops/s
# Warmup Iteration  30: 8985541.731 ops/s
Iteration   1: 8982891.641 ops/s
Iteration   2: 8914685.352 ops/s
Iteration   3: 8814608.214 ops/s
Iteration   4: 9143222.401 ops/s
Iteration   5: 9262053.805 ops/s
Iteration   6: 8515135.943 ops/s
Iteration   7: 8728509.982 ops/s
Iteration   8: 9138750.874 ops/s
Iteration   9: 8774190.448 ops/s
Iteration  10: 8949562.271 ops/s
Iteration  11: 8724659.866 ops/s
Iteration  12: 8830902.102 ops/s
Iteration  13: 8814755.283 ops/s
Iteration  14: 8971896.701 ops/s
Iteration  15: 9054633.549 ops/s
Iteration  16: 8705444.524 ops/s
Iteration  17: 8975667.068 ops/s
Iteration  18: 8834666.411 ops/s
Iteration  19: 8986975.555 ops/s
Iteration  20: 8737320.833 ops/s
Iteration  21: 8832037.485 ops/s
Iteration  22: 8517895.633 ops/s
Iteration  23: 8801135.370 ops/s
Iteration  24: 8996868.313 ops/s
Iteration  25: 8895146.262 ops/s
Iteration  26: 8997460.784 ops/s
Iteration  27: 8834480.854 ops/s
Iteration  28: 8924437.612 ops/s
Iteration  29: 8874416.752 ops/s
Iteration  30: 8832960.591 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableForEachTest._Benchmark.benchmark_dispose":
  8878912.416 ±(99.9%) 110074.506 ops/s [Average]
  (min, avg, max) = (8515135.943, 8878912.416, 9262053.805), stdev = 164754.351
  CI (99.9%): [8768837.910, 8988986.922] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score        Error  Units
ObservableForEachTest._Benchmark.benchmark_dispose  thrpt   30  8878912.416 ± 110074.506  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_fasterSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_fasterSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 504082.987 ops/s
# Warmup Iteration   2: 866005.339 ops/s
# Warmup Iteration   3: 2032410.105 ops/s
# Warmup Iteration   4: 2150325.136 ops/s
# Warmup Iteration   5: 1854893.290 ops/s
# Warmup Iteration   6: 2238302.109 ops/s
# Warmup Iteration   7: 2143681.910 ops/s
# Warmup Iteration   8: 2244244.387 ops/s
# Warmup Iteration   9: 2339379.432 ops/s
# Warmup Iteration  10: 2201994.022 ops/s
# Warmup Iteration  11: 2273272.719 ops/s
# Warmup Iteration  12: 2249985.422 ops/s
# Warmup Iteration  13: 2293479.379 ops/s
# Warmup Iteration  14: 2284772.191 ops/s
# Warmup Iteration  15: 2181047.945 ops/s
# Warmup Iteration  16: 2242420.041 ops/s
# Warmup Iteration  17: 2334434.754 ops/s
# Warmup Iteration  18: 2214395.962 ops/s
# Warmup Iteration  19: 2276798.779 ops/s
# Warmup Iteration  20: 2250650.653 ops/s
# Warmup Iteration  21: 2227462.570 ops/s
# Warmup Iteration  22: 2258715.276 ops/s
# Warmup Iteration  23: 2279177.274 ops/s
# Warmup Iteration  24: 2249082.338 ops/s
# Warmup Iteration  25: 2247655.999 ops/s
# Warmup Iteration  26: 2211917.012 ops/s
# Warmup Iteration  27: 2277465.561 ops/s
# Warmup Iteration  28: 2279358.175 ops/s
# Warmup Iteration  29: 2271968.298 ops/s
# Warmup Iteration  30: 2331058.609 ops/s
Iteration   1: 2193968.745 ops/s
Iteration   2: 2292007.327 ops/s
Iteration   3: 2260263.962 ops/s
Iteration   4: 2208284.823 ops/s
Iteration   5: 2279165.595 ops/s
Iteration   6: 2177176.450 ops/s
Iteration   7: 2328207.486 ops/s
Iteration   8: 2188832.368 ops/s
Iteration   9: 2256451.840 ops/s
Iteration  10: 2319430.020 ops/s
Iteration  11: 2211438.032 ops/s
Iteration  12: 2268163.272 ops/s
Iteration  13: 2182462.358 ops/s
Iteration  14: 2246911.500 ops/s
Iteration  15: 2272872.100 ops/s
Iteration  16: 2225778.260 ops/s
Iteration  17: 2241893.414 ops/s
Iteration  18: 2278304.195 ops/s
Iteration  19: 2250544.752 ops/s
Iteration  20: 2298687.755 ops/s
Iteration  21: 2201463.016 ops/s
Iteration  22: 2335071.333 ops/s
Iteration  23: 2226655.328 ops/s
Iteration  24: 2206840.232 ops/s
Iteration  25: 2327581.070 ops/s
Iteration  26: 2173285.667 ops/s
Iteration  27: 2268008.415 ops/s
Iteration  28: 2169433.404 ops/s
Iteration  29: 2345074.141 ops/s
Iteration  30: 2233451.043 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_fasterSource":
  2248923.597 ±(99.9%) 34728.784 ops/s [Average]
  (min, avg, max) = (2169433.404, 2248923.597, 2345074.141), stdev = 51980.412
  CI (99.9%): [2214194.813, 2283652.380] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_fasterSource  thrpt   30  2248923.597 ± 34728.784  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 246332.164 ops/s
# Warmup Iteration   2: 2150093.676 ops/s
# Warmup Iteration   3: 3675373.887 ops/s
# Warmup Iteration   4: 4352956.242 ops/s
# Warmup Iteration   5: 4819854.592 ops/s
# Warmup Iteration   6: 4550976.026 ops/s
# Warmup Iteration   7: 4464837.572 ops/s
# Warmup Iteration   8: 4582349.079 ops/s
# Warmup Iteration   9: 4614850.948 ops/s
# Warmup Iteration  10: 4544415.118 ops/s
# Warmup Iteration  11: 4535977.262 ops/s
# Warmup Iteration  12: 4478692.617 ops/s
# Warmup Iteration  13: 4768313.304 ops/s
# Warmup Iteration  14: 4620609.212 ops/s
# Warmup Iteration  15: 4651467.132 ops/s
# Warmup Iteration  16: 4610538.196 ops/s
# Warmup Iteration  17: 4784920.254 ops/s
# Warmup Iteration  18: 4616502.103 ops/s
# Warmup Iteration  19: 4644527.468 ops/s
# Warmup Iteration  20: 4728350.721 ops/s
# Warmup Iteration  21: 4832704.243 ops/s
# Warmup Iteration  22: 4560179.617 ops/s
# Warmup Iteration  23: 4571899.284 ops/s
# Warmup Iteration  24: 4636587.514 ops/s
# Warmup Iteration  25: 4653854.507 ops/s
# Warmup Iteration  26: 4526080.513 ops/s
# Warmup Iteration  27: 4759450.933 ops/s
# Warmup Iteration  28: 4598388.036 ops/s
# Warmup Iteration  29: 4683690.809 ops/s
# Warmup Iteration  30: 4757292.517 ops/s
Iteration   1: 4535815.842 ops/s
Iteration   2: 4656061.124 ops/s
Iteration   3: 4682307.297 ops/s
Iteration   4: 4605559.587 ops/s
Iteration   5: 4496598.356 ops/s
Iteration   6: 4629794.992 ops/s
Iteration   7: 4776725.434 ops/s
Iteration   8: 4585353.460 ops/s
Iteration   9: 4777090.534 ops/s
Iteration  10: 4513190.604 ops/s
Iteration  11: 4853710.514 ops/s
Iteration  12: 4575911.907 ops/s
Iteration  13: 4782531.877 ops/s
Iteration  14: 4733367.039 ops/s
Iteration  15: 4611385.851 ops/s
Iteration  16: 4594100.400 ops/s
Iteration  17: 4682639.258 ops/s
Iteration  18: 4838747.496 ops/s
Iteration  19: 4555466.908 ops/s
Iteration  20: 4821115.737 ops/s
Iteration  21: 4743716.576 ops/s
Iteration  22: 4584225.998 ops/s
Iteration  23: 4840895.229 ops/s
Iteration  24: 4526955.418 ops/s
Iteration  25: 4718413.291 ops/s
Iteration  26: 4667857.256 ops/s
Iteration  27: 4671428.306 ops/s
Iteration  28: 4776016.860 ops/s
Iteration  29: 4698132.241 ops/s
Iteration  30: 4554449.417 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapBiSelectorTest._Benchmark.benchmark_dispose":
  4669652.160 ±(99.9%) 71491.826 ops/s [Average]
  (min, avg, max) = (4496598.356, 4669652.160, 4853710.514), stdev = 107005.607
  CI (99.9%): [4598160.335, 4741143.986] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
MaybeFlatMapBiSelectorTest._Benchmark.benchmark_dispose  thrpt   30  4669652.160 ± 71491.826  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_unsubscriptionPropagatesAfterSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_unsubscriptionPropagatesAfterSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 857756.153 ops/s
# Warmup Iteration   2: 1760992.642 ops/s
# Warmup Iteration   3: 2136577.023 ops/s
# Warmup Iteration   4: 2395827.642 ops/s
# Warmup Iteration   5: 2363389.594 ops/s
# Warmup Iteration   6: 2410592.643 ops/s
# Warmup Iteration   7: 2489722.204 ops/s
# Warmup Iteration   8: 2364097.947 ops/s
# Warmup Iteration   9: 2476265.359 ops/s
# Warmup Iteration  10: 2353036.192 ops/s
# Warmup Iteration  11: 2343170.673 ops/s
# Warmup Iteration  12: 2537340.273 ops/s
# Warmup Iteration  13: 2374412.789 ops/s
# Warmup Iteration  14: 2428619.566 ops/s
# Warmup Iteration  15: 2507115.124 ops/s
# Warmup Iteration  16: 2554312.599 ops/s
# Warmup Iteration  17: 2314647.357 ops/s
# Warmup Iteration  18: 2456795.956 ops/s
# Warmup Iteration  19: 2413281.650 ops/s
# Warmup Iteration  20: 2463748.190 ops/s
# Warmup Iteration  21: 2397156.915 ops/s
# Warmup Iteration  22: 2455989.911 ops/s
# Warmup Iteration  23: 2362647.134 ops/s
# Warmup Iteration  24: 2453702.451 ops/s
# Warmup Iteration  25: 2430144.559 ops/s
# Warmup Iteration  26: 2335905.549 ops/s
# Warmup Iteration  27: 2461968.350 ops/s
# Warmup Iteration  28: 2348482.042 ops/s
# Warmup Iteration  29: 2431715.292 ops/s
# Warmup Iteration  30: 2419085.318 ops/s
Iteration   1: 2371103.095 ops/s
Iteration   2: 2518376.173 ops/s
Iteration   3: 2385883.898 ops/s
Iteration   4: 2409631.182 ops/s
Iteration   5: 2478255.297 ops/s
Iteration   6: 2357422.768 ops/s
Iteration   7: 2422514.509 ops/s
Iteration   8: 2383931.467 ops/s
Iteration   9: 2443524.407 ops/s
Iteration  10: 2391785.848 ops/s
Iteration  11: 2399101.821 ops/s
Iteration  12: 2420359.880 ops/s
Iteration  13: 2309454.206 ops/s
Iteration  14: 2342427.411 ops/s
Iteration  15: 2359311.793 ops/s
Iteration  16: 2522474.004 ops/s
Iteration  17: 2341770.888 ops/s
Iteration  18: 2526153.289 ops/s
Iteration  19: 2496591.494 ops/s
Iteration  20: 2339216.040 ops/s
Iteration  21: 2480411.751 ops/s
Iteration  22: 2425591.369 ops/s
Iteration  23: 2381937.203 ops/s
Iteration  24: 2537402.430 ops/s
Iteration  25: 2338086.235 ops/s
Iteration  26: 2499121.976 ops/s
Iteration  27: 2390425.388 ops/s
Iteration  28: 2152085.784 ops/s
Iteration  29: 2477551.006 ops/s
Iteration  30: 2380393.927 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_unsubscriptionPropagatesAfterSubscribe":
  2409409.885 ±(99.9%) 54362.453 ops/s [Average]
  (min, avg, max) = (2152085.784, 2409409.885, 2537402.430), stdev = 81367.167
  CI (99.9%): [2355047.432, 2463772.338] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt        Score       Error  Units
FlowableDelaySubscriptionOtherTest._Benchmark.benchmark_unsubscriptionPropagatesAfterSubscribe  thrpt   30  2409409.885 ± 54362.453  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_overflowCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_overflowCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58106.050 ops/s
# Warmup Iteration   2: 308139.111 ops/s
# Warmup Iteration   3: 556146.721 ops/s
# Warmup Iteration   4: 534506.082 ops/s
# Warmup Iteration   5: 610506.800 ops/s
# Warmup Iteration   6: 579857.518 ops/s
# Warmup Iteration   7: 571744.614 ops/s
# Warmup Iteration   8: 598440.362 ops/s
# Warmup Iteration   9: 606327.590 ops/s
# Warmup Iteration  10: 560567.132 ops/s
# Warmup Iteration  11: 594407.588 ops/s
# Warmup Iteration  12: 564240.147 ops/s
# Warmup Iteration  13: 607506.435 ops/s
# Warmup Iteration  14: 567817.367 ops/s
# Warmup Iteration  15: 572162.323 ops/s
# Warmup Iteration  16: 594440.703 ops/s
# Warmup Iteration  17: 604539.425 ops/s
# Warmup Iteration  18: 611548.684 ops/s
# Warmup Iteration  19: 607948.572 ops/s
# Warmup Iteration  20: 566972.606 ops/s
# Warmup Iteration  21: 645992.442 ops/s
# Warmup Iteration  22: 630077.696 ops/s
# Warmup Iteration  23: 609754.464 ops/s
# Warmup Iteration  24: 618070.771 ops/s
# Warmup Iteration  25: 603737.893 ops/s
# Warmup Iteration  26: 626912.769 ops/s
# Warmup Iteration  27: 641632.344 ops/s
# Warmup Iteration  28: 637069.561 ops/s
# Warmup Iteration  29: 621927.701 ops/s
# Warmup Iteration  30: 611911.464 ops/s
Iteration   1: 635454.082 ops/s
Iteration   2: 601446.560 ops/s
Iteration   3: 614297.050 ops/s
Iteration   4: 642432.414 ops/s
Iteration   5: 633327.858 ops/s
Iteration   6: 609602.958 ops/s
Iteration   7: 611947.903 ops/s
Iteration   8: 632439.665 ops/s
Iteration   9: 606039.644 ops/s
Iteration  10: 629505.699 ops/s
Iteration  11: 626427.924 ops/s
Iteration  12: 606568.012 ops/s
Iteration  13: 643774.866 ops/s
Iteration  14: 608855.664 ops/s
Iteration  15: 599731.293 ops/s
Iteration  16: 634076.329 ops/s
Iteration  17: 614692.996 ops/s
Iteration  18: 613965.500 ops/s
Iteration  19: 623291.526 ops/s
Iteration  20: 616442.678 ops/s
Iteration  21: 636388.838 ops/s
Iteration  22: 587694.469 ops/s
Iteration  23: 623798.354 ops/s
Iteration  24: 622767.720 ops/s
Iteration  25: 614922.792 ops/s
Iteration  26: 638791.694 ops/s
Iteration  27: 604322.580 ops/s
Iteration  28: 622595.345 ops/s
Iteration  29: 629958.064 ops/s
Iteration  30: 603390.055 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableOnBackpressureErrorTest._Benchmark.benchmark_overflowCancels":
  619631.684 ±(99.9%) 9492.671 ops/s [Average]
  (min, avg, max) = (587694.469, 619631.684, 643774.866), stdev = 14208.183
  CI (99.9%): [610139.014, 629124.355] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
FlowableOnBackpressureErrorTest._Benchmark.benchmark_overflowCancels  thrpt   30  619631.684 ± 9492.671  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_isDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_isDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 652643.027 ops/s
# Warmup Iteration   2: 4057639.946 ops/s
# Warmup Iteration   3: 5154672.198 ops/s
# Warmup Iteration   4: 6090697.872 ops/s
# Warmup Iteration   5: 5842355.864 ops/s
# Warmup Iteration   6: 5967900.933 ops/s
# Warmup Iteration   7: 5965603.418 ops/s
# Warmup Iteration   8: 5836957.166 ops/s
# Warmup Iteration   9: 6030159.440 ops/s
# Warmup Iteration  10: 5727010.580 ops/s
# Warmup Iteration  11: 6002870.152 ops/s
# Warmup Iteration  12: 6107705.513 ops/s
# Warmup Iteration  13: 5715102.568 ops/s
# Warmup Iteration  14: 5999238.118 ops/s
# Warmup Iteration  15: 5909769.916 ops/s
# Warmup Iteration  16: 5826015.743 ops/s
# Warmup Iteration  17: 6040955.174 ops/s
# Warmup Iteration  18: 5777832.568 ops/s
# Warmup Iteration  19: 6030410.967 ops/s
# Warmup Iteration  20: 5754560.769 ops/s
# Warmup Iteration  21: 5665403.758 ops/s
# Warmup Iteration  22: 6119318.292 ops/s
# Warmup Iteration  23: 5831504.368 ops/s
# Warmup Iteration  24: 5922686.335 ops/s
# Warmup Iteration  25: 6002737.164 ops/s
# Warmup Iteration  26: 5751597.265 ops/s
# Warmup Iteration  27: 5970203.118 ops/s
# Warmup Iteration  28: 5760302.712 ops/s
# Warmup Iteration  29: 5988393.744 ops/s
# Warmup Iteration  30: 6005925.669 ops/s
Iteration   1: 5835623.606 ops/s
Iteration   2: 6089228.600 ops/s
Iteration   3: 5793651.869 ops/s
Iteration   4: 6096591.362 ops/s
Iteration   5: 5811567.826 ops/s
Iteration   6: 5903693.049 ops/s
Iteration   7: 6042442.447 ops/s
Iteration   8: 5866425.640 ops/s
Iteration   9: 5854373.071 ops/s
Iteration  10: 6040316.271 ops/s
Iteration  11: 5841823.201 ops/s
Iteration  12: 5781952.202 ops/s
Iteration  13: 6030556.588 ops/s
Iteration  14: 5841747.572 ops/s
Iteration  15: 5846881.903 ops/s
Iteration  16: 6121288.050 ops/s
Iteration  17: 5845271.433 ops/s
Iteration  18: 5935770.685 ops/s
Iteration  19: 5961815.109 ops/s
Iteration  20: 5978335.835 ops/s
Iteration  21: 5797460.039 ops/s
Iteration  22: 4823965.307 ops/s
Iteration  23: 6014855.722 ops/s
Iteration  24: 5869263.167 ops/s
Iteration  25: 5852326.871 ops/s
Iteration  26: 6005691.411 ops/s
Iteration  27: 5680594.815 ops/s
Iteration  28: 5813493.804 ops/s
Iteration  29: 5993979.952 ops/s
Iteration  30: 5684075.468 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_isDisposed":
  5868502.096 ±(99.9%) 153057.296 ops/s [Average]
  (min, avg, max) = (4823965.307, 5868502.096, 6121288.050), stdev = 229088.972
  CI (99.9%): [5715444.800, 6021559.392] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt        Score        Error  Units
SingleOfTypeTest._Benchmark.benchmark_isDisposed  thrpt   30  5868502.096 ± 153057.296  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_mainCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_mainCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 496643.018 ops/s
# Warmup Iteration   2: 1906226.278 ops/s
# Warmup Iteration   3: 2348536.658 ops/s
# Warmup Iteration   4: 2999952.615 ops/s
# Warmup Iteration   5: 2835553.108 ops/s
# Warmup Iteration   6: 2897428.954 ops/s
# Warmup Iteration   7: 2986394.806 ops/s
# Warmup Iteration   8: 2908437.549 ops/s
# Warmup Iteration   9: 2831237.765 ops/s
# Warmup Iteration  10: 2993617.986 ops/s
# Warmup Iteration  11: 2944554.930 ops/s
# Warmup Iteration  12: 2825253.409 ops/s
# Warmup Iteration  13: 3031054.632 ops/s
# Warmup Iteration  14: 2857237.303 ops/s
# Warmup Iteration  15: 2876862.557 ops/s
# Warmup Iteration  16: 2929091.584 ops/s
# Warmup Iteration  17: 2975958.733 ops/s
# Warmup Iteration  18: 2852935.529 ops/s
# Warmup Iteration  19: 2987505.393 ops/s
# Warmup Iteration  20: 2968377.101 ops/s
# Warmup Iteration  21: 2894916.185 ops/s
# Warmup Iteration  22: 3002565.288 ops/s
# Warmup Iteration  23: 3039499.429 ops/s
# Warmup Iteration  24: 2801614.909 ops/s
# Warmup Iteration  25: 2921999.688 ops/s
# Warmup Iteration  26: 2884118.229 ops/s
# Warmup Iteration  27: 2983808.185 ops/s
# Warmup Iteration  28: 3010165.706 ops/s
# Warmup Iteration  29: 2850652.794 ops/s
# Warmup Iteration  30: 2925793.078 ops/s
Iteration   1: 2908935.989 ops/s
Iteration   2: 2969555.038 ops/s
Iteration   3: 2855540.645 ops/s
Iteration   4: 2845099.989 ops/s
Iteration   5: 2928673.619 ops/s
Iteration   6: 2847952.022 ops/s
Iteration   7: 2836992.417 ops/s
Iteration   8: 2939279.072 ops/s
Iteration   9: 2853255.284 ops/s
Iteration  10: 2896671.323 ops/s
Iteration  11: 2874559.238 ops/s
Iteration  12: 2953437.639 ops/s
Iteration  13: 2939929.457 ops/s
Iteration  14: 2814864.466 ops/s
Iteration  15: 2928426.593 ops/s
Iteration  16: 2943666.265 ops/s
Iteration  17: 2767386.211 ops/s
Iteration  18: 2826407.729 ops/s
Iteration  19: 2873680.177 ops/s
Iteration  20: 2851229.043 ops/s
Iteration  21: 3005087.452 ops/s
Iteration  22: 2846350.407 ops/s
Iteration  23: 2959370.086 ops/s
Iteration  24: 2946449.067 ops/s
Iteration  25: 2864227.817 ops/s
Iteration  26: 2896684.270 ops/s
Iteration  27: 2996998.306 ops/s
Iteration  28: 2857857.087 ops/s
Iteration  29: 2925656.769 ops/s
Iteration  30: 2876546.028 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_mainCompletes":
  2894358.983 ±(99.9%) 38162.013 ops/s [Average]
  (min, avg, max) = (2767386.211, 2894358.983, 3005087.452), stdev = 57119.109
  CI (99.9%): [2856196.970, 2932520.997] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_mainCompletes  thrpt   30  2894358.983 ± 38162.013  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_otherCompletes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_otherCompletes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 434160.908 ops/s
# Warmup Iteration   2: 1711914.967 ops/s
# Warmup Iteration   3: 2545548.448 ops/s
# Warmup Iteration   4: 2929649.067 ops/s
# Warmup Iteration   5: 3037288.590 ops/s
# Warmup Iteration   6: 2915844.193 ops/s
# Warmup Iteration   7: 2955122.381 ops/s
# Warmup Iteration   8: 3079906.790 ops/s
# Warmup Iteration   9: 2906663.357 ops/s
# Warmup Iteration  10: 3015909.326 ops/s
# Warmup Iteration  11: 2968600.362 ops/s
# Warmup Iteration  12: 2954744.486 ops/s
# Warmup Iteration  13: 3028782.061 ops/s
# Warmup Iteration  14: 3018043.901 ops/s
# Warmup Iteration  15: 3047791.320 ops/s
# Warmup Iteration  16: 2891000.949 ops/s
# Warmup Iteration  17: 3033770.403 ops/s
# Warmup Iteration  18: 2973722.601 ops/s
# Warmup Iteration  19: 2996735.071 ops/s
# Warmup Iteration  20: 3006014.126 ops/s
# Warmup Iteration  21: 3012814.040 ops/s
# Warmup Iteration  22: 2939637.478 ops/s
# Warmup Iteration  23: 2998595.352 ops/s
# Warmup Iteration  24: 3040838.324 ops/s
# Warmup Iteration  25: 3053971.389 ops/s
# Warmup Iteration  26: 2968286.523 ops/s
# Warmup Iteration  27: 2914345.182 ops/s
# Warmup Iteration  28: 2830786.694 ops/s
# Warmup Iteration  29: 2900096.544 ops/s
# Warmup Iteration  30: 3135435.630 ops/s
Iteration   1: 2963605.974 ops/s
Iteration   2: 3101537.903 ops/s
Iteration   3: 2918708.213 ops/s
Iteration   4: 2938537.737 ops/s
Iteration   5: 2979601.577 ops/s
Iteration   6: 3089943.860 ops/s
Iteration   7: 2871845.175 ops/s
Iteration   8: 3032747.079 ops/s
Iteration   9: 2921170.174 ops/s
Iteration  10: 2981040.734 ops/s
Iteration  11: 3080656.659 ops/s
Iteration  12: 2915520.020 ops/s
Iteration  13: 3034178.648 ops/s
Iteration  14: 2990548.925 ops/s
Iteration  15: 2982021.913 ops/s
Iteration  16: 3029531.001 ops/s
Iteration  17: 2914885.905 ops/s
Iteration  18: 3061167.380 ops/s
Iteration  19: 2990458.238 ops/s
Iteration  20: 3050904.954 ops/s
Iteration  21: 3061895.503 ops/s
Iteration  22: 2929117.841 ops/s
Iteration  23: 3141349.088 ops/s
Iteration  24: 3006740.070 ops/s
Iteration  25: 2950092.784 ops/s
Iteration  26: 3032664.171 ops/s
Iteration  27: 2978547.295 ops/s
Iteration  28: 2893497.362 ops/s
Iteration  29: 3004390.416 ops/s
Iteration  30: 3046078.336 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_otherCompletes":
  2996432.831 ±(99.9%) 44794.537 ops/s [Average]
  (min, avg, max) = (2871845.175, 2996432.831, 3141349.088), stdev = 67046.359
  CI (99.9%): [2951638.294, 3041227.368] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_otherCompletes  thrpt   30  2996432.831 ± 44794.537  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 423228.669 ops/s
# Warmup Iteration   2: 1448843.739 ops/s
# Warmup Iteration   3: 2194553.915 ops/s
# Warmup Iteration   4: 2075051.799 ops/s
# Warmup Iteration   5: 2156926.525 ops/s
# Warmup Iteration   6: 2161180.825 ops/s
# Warmup Iteration   7: 2068973.925 ops/s
# Warmup Iteration   8: 2211346.317 ops/s
# Warmup Iteration   9: 2067606.893 ops/s
# Warmup Iteration  10: 2144083.059 ops/s
# Warmup Iteration  11: 2060412.013 ops/s
# Warmup Iteration  12: 1749711.544 ops/s
# Warmup Iteration  13: 2236468.955 ops/s
# Warmup Iteration  14: 2107371.202 ops/s
# Warmup Iteration  15: 2174199.643 ops/s
# Warmup Iteration  16: 2087485.541 ops/s
# Warmup Iteration  17: 1723365.450 ops/s
# Warmup Iteration  18: 2209676.222 ops/s
# Warmup Iteration  19: 2094889.429 ops/s
# Warmup Iteration  20: 2168586.774 ops/s
# Warmup Iteration  21: 2146543.655 ops/s
# Warmup Iteration  22: 2126078.372 ops/s
# Warmup Iteration  23: 2226165.355 ops/s
# Warmup Iteration  24: 2202315.981 ops/s
# Warmup Iteration  25: 2188843.324 ops/s
# Warmup Iteration  26: 2124587.003 ops/s
# Warmup Iteration  27: 2206838.419 ops/s
# Warmup Iteration  28: 2113279.467 ops/s
# Warmup Iteration  29: 2159714.169 ops/s
# Warmup Iteration  30: 2144379.506 ops/s
Iteration   1: 2137460.703 ops/s
Iteration   2: 2200358.399 ops/s
Iteration   3: 2107361.521 ops/s
Iteration   4: 2181558.718 ops/s
Iteration   5: 2060280.126 ops/s
Iteration   6: 2022262.995 ops/s
Iteration   7: 2154182.683 ops/s
Iteration   8: 2209195.767 ops/s
Iteration   9: 2060933.268 ops/s
Iteration  10: 2222498.862 ops/s
Iteration  11: 2146784.988 ops/s
Iteration  12: 2210038.071 ops/s
Iteration  13: 2103939.504 ops/s
Iteration  14: 2095243.071 ops/s
Iteration  15: 2206892.697 ops/s
Iteration  16: 2092471.013 ops/s
Iteration  17: 2136933.882 ops/s
Iteration  18: 2206812.168 ops/s
Iteration  19: 2154935.668 ops/s
Iteration  20: 2194753.689 ops/s
Iteration  21: 2172732.287 ops/s
Iteration  22: 2095485.677 ops/s
Iteration  23: 2181396.410 ops/s
Iteration  24: 2098653.209 ops/s
Iteration  25: 2088873.665 ops/s
Iteration  26: 2187688.983 ops/s
Iteration  27: 2065244.659 ops/s
Iteration  28: 2189186.158 ops/s
Iteration  29: 2185646.750 ops/s
Iteration  30: 2101666.964 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_dispose":
  2142382.418 ±(99.9%) 37249.318 ops/s [Average]
  (min, avg, max) = (2022262.995, 2142382.418, 2222498.862), stdev = 55753.029
  CI (99.9%): [2105133.101, 2179631.736] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
SingleZipArrayTest._Benchmark.benchmark_dispose  thrpt   30  2142382.418 ± 37249.318  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_mainComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_mainComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 253634.965 ops/s
# Warmup Iteration   2: 1842152.897 ops/s
# Warmup Iteration   3: 2499866.212 ops/s
# Warmup Iteration   4: 2751860.154 ops/s
# Warmup Iteration   5: 2915558.919 ops/s
# Warmup Iteration   6: 2805682.605 ops/s
# Warmup Iteration   7: 2882793.185 ops/s
# Warmup Iteration   8: 2921428.987 ops/s
# Warmup Iteration   9: 2838513.347 ops/s
# Warmup Iteration  10: 2843399.445 ops/s
# Warmup Iteration  11: 2879247.487 ops/s
# Warmup Iteration  12: 2794351.303 ops/s
# Warmup Iteration  13: 2966023.164 ops/s
# Warmup Iteration  14: 2919054.966 ops/s
# Warmup Iteration  15: 2818138.477 ops/s
# Warmup Iteration  16: 2966390.618 ops/s
# Warmup Iteration  17: 2877704.315 ops/s
# Warmup Iteration  18: 2839905.207 ops/s
# Warmup Iteration  19: 2895033.360 ops/s
# Warmup Iteration  20: 2904093.620 ops/s
# Warmup Iteration  21: 2581936.292 ops/s
# Warmup Iteration  22: 2543567.785 ops/s
# Warmup Iteration  23: 2792648.776 ops/s
# Warmup Iteration  24: 2985994.819 ops/s
# Warmup Iteration  25: 2969486.492 ops/s
# Warmup Iteration  26: 2860107.443 ops/s
# Warmup Iteration  27: 2939052.227 ops/s
# Warmup Iteration  28: 2908534.378 ops/s
# Warmup Iteration  29: 2831017.388 ops/s
# Warmup Iteration  30: 2876868.651 ops/s
Iteration   1: 2809070.970 ops/s
Iteration   2: 2942941.400 ops/s
Iteration   3: 2890862.930 ops/s
Iteration   4: 2798552.430 ops/s
Iteration   5: 2910298.221 ops/s
Iteration   6: 2799125.017 ops/s
Iteration   7: 2891963.652 ops/s
Iteration   8: 3047047.018 ops/s
Iteration   9: 2761360.793 ops/s
Iteration  10: 2971134.372 ops/s
Iteration  11: 2825859.707 ops/s
Iteration  12: 2952002.465 ops/s
Iteration  13: 2842426.442 ops/s
Iteration  14: 2860193.414 ops/s
Iteration  15: 3013686.320 ops/s
Iteration  16: 2851853.944 ops/s
Iteration  17: 2845476.798 ops/s
Iteration  18: 2733151.227 ops/s
Iteration  19: 2871880.212 ops/s
Iteration  20: 2863741.117 ops/s
Iteration  21: 2959785.546 ops/s
Iteration  22: 2794636.160 ops/s
Iteration  23: 2810528.796 ops/s
Iteration  24: 2951852.975 ops/s
Iteration  25: 2873714.312 ops/s
Iteration  26: 2936657.039 ops/s
Iteration  27: 2845498.597 ops/s
Iteration  28: 2879510.556 ops/s
Iteration  29: 3082364.450 ops/s
Iteration  30: 2796380.107 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_mainComplete":
  2880451.900 ±(99.9%) 55666.767 ops/s [Average]
  (min, avg, max) = (2733151.227, 2880451.900, 3082364.450), stdev = 83319.403
  CI (99.9%): [2824785.132, 2936118.667] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
MaybeTimeoutTest._Benchmark.benchmark_mainComplete  thrpt   30  2880451.900 ± 55666.767  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1034034.039 ops/s
# Warmup Iteration   2: 2774171.579 ops/s
# Warmup Iteration   3: 4136738.960 ops/s
# Warmup Iteration   4: 4198553.919 ops/s
# Warmup Iteration   5: 4465705.893 ops/s
# Warmup Iteration   6: 4257305.120 ops/s
# Warmup Iteration   7: 4339474.143 ops/s
# Warmup Iteration   8: 4372661.590 ops/s
# Warmup Iteration   9: 4251407.239 ops/s
# Warmup Iteration  10: 4393052.064 ops/s
# Warmup Iteration  11: 4161702.467 ops/s
# Warmup Iteration  12: 4312710.280 ops/s
# Warmup Iteration  13: 4342395.890 ops/s
# Warmup Iteration  14: 4247962.823 ops/s
# Warmup Iteration  15: 4422260.929 ops/s
# Warmup Iteration  16: 4265261.445 ops/s
# Warmup Iteration  17: 4212626.689 ops/s
# Warmup Iteration  18: 4377390.156 ops/s
# Warmup Iteration  19: 4218624.060 ops/s
# Warmup Iteration  20: 4235254.651 ops/s
# Warmup Iteration  21: 4090796.766 ops/s
# Warmup Iteration  22: 4252041.373 ops/s
# Warmup Iteration  23: 4388679.698 ops/s
# Warmup Iteration  24: 4316575.075 ops/s
# Warmup Iteration  25: 4441280.787 ops/s
# Warmup Iteration  26: 4223022.843 ops/s
# Warmup Iteration  27: 4360614.817 ops/s
# Warmup Iteration  28: 4318217.116 ops/s
# Warmup Iteration  29: 4364257.665 ops/s
# Warmup Iteration  30: 4250625.356 ops/s
Iteration   1: 4245975.891 ops/s
Iteration   2: 4452401.419 ops/s
Iteration   3: 4157872.404 ops/s
Iteration   4: 4298485.270 ops/s
Iteration   5: 4240104.016 ops/s
Iteration   6: 3456196.472 ops/s
Iteration   7: 3804047.292 ops/s
Iteration   8: 4180178.727 ops/s
Iteration   9: 4215124.634 ops/s
Iteration  10: 4431990.048 ops/s
Iteration  11: 4078533.685 ops/s
Iteration  12: 4203117.667 ops/s
Iteration  13: 4366363.795 ops/s
Iteration  14: 4155256.833 ops/s
Iteration  15: 4342867.988 ops/s
Iteration  16: 4433702.919 ops/s
Iteration  17: 4290253.262 ops/s
Iteration  18: 4260693.857 ops/s
Iteration  19: 4365403.540 ops/s
Iteration  20: 4254008.130 ops/s
Iteration  21: 4258701.249 ops/s
Iteration  22: 4415244.892 ops/s
Iteration  23: 4192420.915 ops/s
Iteration  24: 4369669.938 ops/s
Iteration  25: 4130173.183 ops/s
Iteration  26: 4375862.437 ops/s
Iteration  27: 4426348.668 ops/s
Iteration  28: 4248695.367 ops/s
Iteration  29: 4384061.723 ops/s
Iteration  30: 4151473.494 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterTerminateTest._Benchmark.benchmark_dispose":
  4239507.657 ±(99.9%) 133759.544 ops/s [Average]
  (min, avg, max) = (3456196.472, 4239507.657, 4452401.419), stdev = 200205.003
  CI (99.9%): [4105748.113, 4373267.201] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
SingleDoAfterTerminateTest._Benchmark.benchmark_dispose  thrpt   30  4239507.657 ± 133759.544  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 485949.609 ops/s
# Warmup Iteration   2: 3087532.806 ops/s
# Warmup Iteration   3: 3666423.295 ops/s
# Warmup Iteration   4: 4225636.560 ops/s
# Warmup Iteration   5: 4279815.579 ops/s
# Warmup Iteration   6: 4348027.620 ops/s
# Warmup Iteration   7: 4247435.187 ops/s
# Warmup Iteration   8: 4330393.401 ops/s
# Warmup Iteration   9: 4443068.974 ops/s
# Warmup Iteration  10: 4121606.611 ops/s
# Warmup Iteration  11: 4321295.404 ops/s
# Warmup Iteration  12: 4371264.570 ops/s
# Warmup Iteration  13: 4303028.396 ops/s
# Warmup Iteration  14: 4406774.469 ops/s
# Warmup Iteration  15: 4296785.472 ops/s
# Warmup Iteration  16: 4201148.258 ops/s
# Warmup Iteration  17: 4128054.889 ops/s
# Warmup Iteration  18: 4123207.252 ops/s
# Warmup Iteration  19: 4437840.003 ops/s
# Warmup Iteration  20: 4192606.761 ops/s
# Warmup Iteration  21: 4233464.813 ops/s
# Warmup Iteration  22: 4218662.286 ops/s
# Warmup Iteration  23: 4294752.000 ops/s
# Warmup Iteration  24: 4251936.267 ops/s
# Warmup Iteration  25: 4143753.906 ops/s
# Warmup Iteration  26: 4414768.240 ops/s
# Warmup Iteration  27: 4309480.277 ops/s
# Warmup Iteration  28: 4374230.817 ops/s
# Warmup Iteration  29: 4301794.594 ops/s
# Warmup Iteration  30: 4221009.761 ops/s
Iteration   1: 4342198.762 ops/s
Iteration   2: 4092800.363 ops/s
Iteration   3: 4212081.286 ops/s
Iteration   4: 4533086.327 ops/s
Iteration   5: 4165715.434 ops/s
Iteration   6: 4189319.114 ops/s
Iteration   7: 4502912.156 ops/s
Iteration   8: 4083109.792 ops/s
Iteration   9: 4391471.517 ops/s
Iteration  10: 4229816.664 ops/s
Iteration  11: 4407394.037 ops/s
Iteration  12: 4290952.869 ops/s
Iteration  13: 4305335.764 ops/s
Iteration  14: 4366222.581 ops/s
Iteration  15: 4216066.076 ops/s
Iteration  16: 3267599.115 ops/s
Iteration  17: 4271434.328 ops/s
Iteration  18: 4239170.032 ops/s
Iteration  19: 4480225.721 ops/s
Iteration  20: 4240058.408 ops/s
Iteration  21: 4190695.410 ops/s
Iteration  22: 4455091.533 ops/s
Iteration  23: 4213564.736 ops/s
Iteration  24: 4395847.995 ops/s
Iteration  25: 4239642.469 ops/s
Iteration  26: 4301580.803 ops/s
Iteration  27: 4350737.448 ops/s
Iteration  28: 4294192.169 ops/s
Iteration  29: 4313308.786 ops/s
Iteration  30: 4167996.473 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoAfterSuccessTest._Benchmark.benchmark_dispose":
  4258320.939 ±(99.9%) 146401.319 ops/s [Average]
  (min, avg, max) = (3267599.115, 4258320.939, 4533086.327), stdev = 219126.618
  CI (99.9%): [4111919.620, 4404722.258] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score        Error  Units
SingleDoAfterSuccessTest._Benchmark.benchmark_dispose  thrpt   30  4258320.939 ± 146401.319  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_mainErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_mainErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 130314.225 ops/s
# Warmup Iteration   2: 433146.494 ops/s
# Warmup Iteration   3: 583801.014 ops/s
# Warmup Iteration   4: 597124.315 ops/s
# Warmup Iteration   5: 613885.778 ops/s
# Warmup Iteration   6: 595322.145 ops/s
# Warmup Iteration   7: 568749.839 ops/s
# Warmup Iteration   8: 602933.987 ops/s
# Warmup Iteration   9: 647562.009 ops/s
# Warmup Iteration  10: 589208.405 ops/s
# Warmup Iteration  11: 602868.452 ops/s
# Warmup Iteration  12: 623345.424 ops/s
# Warmup Iteration  13: 598095.745 ops/s
# Warmup Iteration  14: 645382.432 ops/s
# Warmup Iteration  15: 595042.399 ops/s
# Warmup Iteration  16: 638047.381 ops/s
# Warmup Iteration  17: 656747.918 ops/s
# Warmup Iteration  18: 647544.628 ops/s
# Warmup Iteration  19: 652481.500 ops/s
# Warmup Iteration  20: 647143.587 ops/s
# Warmup Iteration  21: 673768.494 ops/s
# Warmup Iteration  22: 636997.460 ops/s
# Warmup Iteration  23: 650862.900 ops/s
# Warmup Iteration  24: 637681.682 ops/s
# Warmup Iteration  25: 672299.304 ops/s
# Warmup Iteration  26: 637961.340 ops/s
# Warmup Iteration  27: 633026.723 ops/s
# Warmup Iteration  28: 612315.031 ops/s
# Warmup Iteration  29: 674464.923 ops/s
# Warmup Iteration  30: 638682.233 ops/s
Iteration   1: 666768.558 ops/s
Iteration   2: 647431.011 ops/s
Iteration   3: 656570.031 ops/s
Iteration   4: 672998.829 ops/s
Iteration   5: 630295.470 ops/s
Iteration   6: 657326.519 ops/s
Iteration   7: 681069.116 ops/s
Iteration   8: 625727.694 ops/s
Iteration   9: 685007.472 ops/s
Iteration  10: 633104.495 ops/s
Iteration  11: 653481.226 ops/s
Iteration  12: 641560.798 ops/s
Iteration  13: 642142.298 ops/s
Iteration  14: 644079.554 ops/s
Iteration  15: 655579.419 ops/s
Iteration  16: 629656.228 ops/s
Iteration  17: 663714.879 ops/s
Iteration  18: 639700.712 ops/s
Iteration  19: 662225.693 ops/s
Iteration  20: 658509.764 ops/s
Iteration  21: 650658.001 ops/s
Iteration  22: 651842.146 ops/s
Iteration  23: 647065.646 ops/s
Iteration  24: 676690.691 ops/s
Iteration  25: 638075.113 ops/s
Iteration  26: 648614.442 ops/s
Iteration  27: 653434.260 ops/s
Iteration  28: 637629.781 ops/s
Iteration  29: 668031.322 ops/s
Iteration  30: 643048.225 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_mainErrors":
  652067.980 ±(99.9%) 10221.199 ops/s [Average]
  (min, avg, max) = (625727.694, 652067.980, 685007.472), stdev = 15298.610
  CI (99.9%): [641846.781, 662289.178] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score       Error  Units
MaybeTakeUntilPublisherTest._Benchmark.benchmark_mainErrors  thrpt   30  652067.980 ± 10221.199  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherErrors$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherErrors

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 62730.788 ops/s
# Warmup Iteration   2: 425014.354 ops/s
# Warmup Iteration   3: 579284.310 ops/s
# Warmup Iteration   4: 591533.075 ops/s
# Warmup Iteration   5: 559380.073 ops/s
# Warmup Iteration   6: 597035.034 ops/s
# Warmup Iteration   7: 598184.622 ops/s
# Warmup Iteration   8: 598051.310 ops/s
# Warmup Iteration   9: 610364.798 ops/s
# Warmup Iteration  10: 580670.032 ops/s
# Warmup Iteration  11: 580592.113 ops/s
# Warmup Iteration  12: 586107.585 ops/s
# Warmup Iteration  13: 639033.449 ops/s
# Warmup Iteration  14: 564227.107 ops/s
# Warmup Iteration  15: 621341.369 ops/s
# Warmup Iteration  16: 609049.536 ops/s
# Warmup Iteration  17: 637622.315 ops/s
# Warmup Iteration  18: 655292.061 ops/s
# Warmup Iteration  19: 604775.077 ops/s
# Warmup Iteration  20: 648645.380 ops/s
# Warmup Iteration  21: 620645.012 ops/s
# Warmup Iteration  22: 617000.325 ops/s
# Warmup Iteration  23: 659887.702 ops/s
# Warmup Iteration  24: 639523.276 ops/s
# Warmup Iteration  25: 645336.099 ops/s
# Warmup Iteration  26: 643584.647 ops/s
# Warmup Iteration  27: 645242.527 ops/s
# Warmup Iteration  28: 616126.916 ops/s
# Warmup Iteration  29: 661991.157 ops/s
# Warmup Iteration  30: 649222.720 ops/s
Iteration   1: 447652.537 ops/s
Iteration   2: 651493.457 ops/s
Iteration   3: 635933.960 ops/s
Iteration   4: 624655.430 ops/s
Iteration   5: 646315.603 ops/s
Iteration   6: 624919.055 ops/s
Iteration   7: 628692.556 ops/s
Iteration   8: 592284.359 ops/s
Iteration   9: 654071.515 ops/s
Iteration  10: 646782.837 ops/s
Iteration  11: 625390.282 ops/s
Iteration  12: 667180.614 ops/s
Iteration  13: 582976.726 ops/s
Iteration  14: 619162.108 ops/s
Iteration  15: 612350.628 ops/s
Iteration  16: 640154.699 ops/s
Iteration  17: 650796.330 ops/s
Iteration  18: 622679.616 ops/s
Iteration  19: 661719.985 ops/s
Iteration  20: 622917.972 ops/s
Iteration  21: 656849.738 ops/s
Iteration  22: 630746.307 ops/s
Iteration  23: 645069.009 ops/s
Iteration  24: 638166.991 ops/s
Iteration  25: 627743.888 ops/s
Iteration  26: 659546.969 ops/s
Iteration  27: 624371.706 ops/s
Iteration  28: 656282.280 ops/s
Iteration  29: 618114.956 ops/s
Iteration  30: 654775.870 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherErrors":
  628993.266 ±(99.9%) 26430.140 ops/s [Average]
  (min, avg, max) = (447652.537, 628993.266, 667180.614), stdev = 39559.393
  CI (99.9%): [602563.126, 655423.407] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
MaybeTakeUntilPublisherTest._Benchmark.benchmark_otherErrors  thrpt   30  628993.266 ± 26430.140  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 901002.615 ops/s
# Warmup Iteration   2: 2288852.273 ops/s
# Warmup Iteration   3: 2503228.376 ops/s
# Warmup Iteration   4: 2980973.365 ops/s
# Warmup Iteration   5: 2964567.787 ops/s
# Warmup Iteration   6: 2977254.052 ops/s
# Warmup Iteration   7: 2921813.004 ops/s
# Warmup Iteration   8: 2960021.447 ops/s
# Warmup Iteration   9: 2917871.419 ops/s
# Warmup Iteration  10: 3039467.885 ops/s
# Warmup Iteration  11: 2916733.378 ops/s
# Warmup Iteration  12: 2967413.618 ops/s
# Warmup Iteration  13: 2863158.631 ops/s
# Warmup Iteration  14: 3026391.918 ops/s
# Warmup Iteration  15: 3000473.235 ops/s
# Warmup Iteration  16: 3022619.175 ops/s
# Warmup Iteration  17: 3059563.675 ops/s
# Warmup Iteration  18: 2951879.229 ops/s
# Warmup Iteration  19: 2964739.913 ops/s
# Warmup Iteration  20: 3072745.103 ops/s
# Warmup Iteration  21: 2860806.195 ops/s
# Warmup Iteration  22: 2959973.941 ops/s
# Warmup Iteration  23: 3033266.651 ops/s
# Warmup Iteration  24: 3000222.615 ops/s
# Warmup Iteration  25: 3005736.427 ops/s
# Warmup Iteration  26: 2937150.016 ops/s
# Warmup Iteration  27: 3063775.423 ops/s
# Warmup Iteration  28: 3006334.912 ops/s
# Warmup Iteration  29: 2964046.162 ops/s
# Warmup Iteration  30: 3059214.032 ops/s
Iteration   1: 2925275.284 ops/s
Iteration   2: 2889259.297 ops/s
Iteration   3: 3074768.207 ops/s
Iteration   4: 2976602.907 ops/s
Iteration   5: 2922676.608 ops/s
Iteration   6: 2925778.445 ops/s
Iteration   7: 2962569.156 ops/s
Iteration   8: 2956971.077 ops/s
Iteration   9: 3100602.321 ops/s
Iteration  10: 3039541.033 ops/s
Iteration  11: 2944985.787 ops/s
Iteration  12: 3005008.023 ops/s
Iteration  13: 2956014.907 ops/s
Iteration  14: 3016944.885 ops/s
Iteration  15: 2924949.372 ops/s
Iteration  16: 2935222.537 ops/s
Iteration  17: 3061309.604 ops/s
Iteration  18: 3033000.331 ops/s
Iteration  19: 2886281.865 ops/s
Iteration  20: 2946430.029 ops/s
Iteration  21: 2989996.817 ops/s
Iteration  22: 3027744.972 ops/s
Iteration  23: 3092440.811 ops/s
Iteration  24: 2893733.547 ops/s
Iteration  25: 3048054.100 ops/s
Iteration  26: 2972561.256 ops/s
Iteration  27: 2924176.827 ops/s
Iteration  28: 3070588.492 ops/s
Iteration  29: 2920478.195 ops/s
Iteration  30: 3093843.853 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete":
  2983927.018 ±(99.9%) 44394.474 ops/s [Average]
  (min, avg, max) = (2886281.865, 2983927.018, 3100602.321), stdev = 66447.564
  CI (99.9%): [2939532.544, 3028321.492] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
MaybeTakeUntilTest._Benchmark.benchmark_untilPublisherMainComplete  thrpt   30  2983927.018 ± 44394.474  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 215885.423 ops/s
# Warmup Iteration   2: 967278.312 ops/s
# Warmup Iteration   3: 1648571.369 ops/s
# Warmup Iteration   4: 1736729.284 ops/s
# Warmup Iteration   5: 1776801.084 ops/s
# Warmup Iteration   6: 1494613.626 ops/s
# Warmup Iteration   7: 1773445.977 ops/s
# Warmup Iteration   8: 1746160.079 ops/s
# Warmup Iteration   9: 1820456.392 ops/s
# Warmup Iteration  10: 1738595.110 ops/s
# Warmup Iteration  11: 1718106.041 ops/s
# Warmup Iteration  12: 1772829.339 ops/s
# Warmup Iteration  13: 1714941.383 ops/s
# Warmup Iteration  14: 1771277.551 ops/s
# Warmup Iteration  15: 1747979.321 ops/s
# Warmup Iteration  16: 1709620.814 ops/s
# Warmup Iteration  17: 1742812.233 ops/s
# Warmup Iteration  18: 1795860.975 ops/s
# Warmup Iteration  19: 1764989.728 ops/s
# Warmup Iteration  20: 1753089.435 ops/s
# Warmup Iteration  21: 1847278.188 ops/s
# Warmup Iteration  22: 1702341.188 ops/s
# Warmup Iteration  23: 1826158.634 ops/s
# Warmup Iteration  24: 1775438.565 ops/s
# Warmup Iteration  25: 1299042.563 ops/s
# Warmup Iteration  26: 1724023.092 ops/s
# Warmup Iteration  27: 1761151.012 ops/s
# Warmup Iteration  28: 1789625.629 ops/s
# Warmup Iteration  29: 1758724.070 ops/s
# Warmup Iteration  30: 1784869.255 ops/s
Iteration   1: 1803808.341 ops/s
Iteration   2: 1694787.972 ops/s
Iteration   3: 1786320.441 ops/s
Iteration   4: 1715367.707 ops/s
Iteration   5: 1784629.721 ops/s
Iteration   6: 1739785.201 ops/s
Iteration   7: 1759143.779 ops/s
Iteration   8: 1810915.802 ops/s
Iteration   9: 1704356.600 ops/s
Iteration  10: 1812279.761 ops/s
Iteration  11: 1696461.130 ops/s
Iteration  12: 1751188.185 ops/s
Iteration  13: 1749714.515 ops/s
Iteration  14: 1711445.263 ops/s
Iteration  15: 1719979.996 ops/s
Iteration  16: 1796140.054 ops/s
Iteration  17: 1753327.620 ops/s
Iteration  18: 1768103.981 ops/s
Iteration  19: 1807344.758 ops/s
Iteration  20: 1706832.164 ops/s
Iteration  21: 1785985.416 ops/s
Iteration  22: 1838283.373 ops/s
Iteration  23: 1801563.686 ops/s
Iteration  24: 1758639.397 ops/s
Iteration  25: 1802368.867 ops/s
Iteration  26: 1728186.007 ops/s
Iteration  27: 1750432.625 ops/s
Iteration  28: 1731417.452 ops/s
Iteration  29: 1764090.442 ops/s
Iteration  30: 1761897.379 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableAmbTest._Benchmark.benchmark_dispose":
  1759826.588 ±(99.9%) 26384.522 ops/s [Average]
  (min, avg, max) = (1694787.972, 1759826.588, 1838283.373), stdev = 39491.113
  CI (99.9%): [1733442.066, 1786211.110] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
CompletableAmbTest._Benchmark.benchmark_dispose  thrpt   30  1759826.588 ± 26384.522  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 288681.724 ops/s
# Warmup Iteration   2: 1800165.246 ops/s
# Warmup Iteration   3: 2197671.279 ops/s
# Warmup Iteration   4: 2863673.086 ops/s
# Warmup Iteration   5: 2680765.914 ops/s
# Warmup Iteration   6: 2727167.465 ops/s
# Warmup Iteration   7: 2818519.445 ops/s
# Warmup Iteration   8: 2764773.337 ops/s
# Warmup Iteration   9: 2760686.290 ops/s
# Warmup Iteration  10: 2699693.446 ops/s
# Warmup Iteration  11: 2663664.948 ops/s
# Warmup Iteration  12: 2838134.994 ops/s
# Warmup Iteration  13: 2713799.324 ops/s
# Warmup Iteration  14: 2736967.026 ops/s
# Warmup Iteration  15: 2723727.238 ops/s
# Warmup Iteration  16: 2736133.074 ops/s
# Warmup Iteration  17: 2769331.347 ops/s
# Warmup Iteration  18: 2798594.359 ops/s
# Warmup Iteration  19: 2708880.282 ops/s
# Warmup Iteration  20: 2890723.348 ops/s
# Warmup Iteration  21: 2669598.434 ops/s
# Warmup Iteration  22: 2734888.109 ops/s
# Warmup Iteration  23: 2778738.279 ops/s
# Warmup Iteration  24: 2762808.942 ops/s
# Warmup Iteration  25: 2725938.999 ops/s
# Warmup Iteration  26: 2882314.525 ops/s
# Warmup Iteration  27: 2602098.176 ops/s
# Warmup Iteration  28: 2829158.877 ops/s
# Warmup Iteration  29: 2799075.401 ops/s
# Warmup Iteration  30: 2681816.335 ops/s
Iteration   1: 2804554.478 ops/s
Iteration   2: 2681902.941 ops/s
Iteration   3: 2822877.935 ops/s
Iteration   4: 2827398.500 ops/s
Iteration   5: 2683761.464 ops/s
Iteration   6: 2757904.926 ops/s
Iteration   7: 2777945.156 ops/s
Iteration   8: 2870094.969 ops/s
Iteration   9: 2772991.125 ops/s
Iteration  10: 2692303.642 ops/s
Iteration  11: 2667818.003 ops/s
Iteration  12: 2794914.168 ops/s
Iteration  13: 2687489.334 ops/s
Iteration  14: 2808382.471 ops/s
Iteration  15: 2713250.829 ops/s
Iteration  16: 2732889.445 ops/s
Iteration  17: 2822613.146 ops/s
Iteration  18: 2728881.856 ops/s
Iteration  19: 2823215.529 ops/s
Iteration  20: 2726799.227 ops/s
Iteration  21: 2841409.957 ops/s
Iteration  22: 2796666.670 ops/s
Iteration  23: 2704922.938 ops/s
Iteration  24: 2809668.475 ops/s
Iteration  25: 2768320.006 ops/s
Iteration  26: 2782846.109 ops/s
Iteration  27: 2664970.965 ops/s
Iteration  28: 2840319.595 ops/s
Iteration  29: 2753981.990 ops/s
Iteration  30: 2635327.225 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess":
  2759880.769 ±(99.9%) 42061.483 ops/s [Average]
  (min, avg, max) = (2635327.225, 2759880.769, 2870094.969), stdev = 62955.652
  CI (99.9%): [2717819.286, 2801942.252] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilPublisherMainSuccess  thrpt   30  2759880.769 ± 42061.483  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilFires$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilFires

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 440953.588 ops/s
# Warmup Iteration   2: 1606001.632 ops/s
# Warmup Iteration   3: 2005634.457 ops/s
# Warmup Iteration   4: 2361634.892 ops/s
# Warmup Iteration   5: 2538265.701 ops/s
# Warmup Iteration   6: 2375658.832 ops/s
# Warmup Iteration   7: 2395737.305 ops/s
# Warmup Iteration   8: 2484163.419 ops/s
# Warmup Iteration   9: 2485705.776 ops/s
# Warmup Iteration  10: 2405256.267 ops/s
# Warmup Iteration  11: 2441482.798 ops/s
# Warmup Iteration  12: 2351770.244 ops/s
# Warmup Iteration  13: 2542079.158 ops/s
# Warmup Iteration  14: 2382514.370 ops/s
# Warmup Iteration  15: 2439963.496 ops/s
# Warmup Iteration  16: 2474523.438 ops/s
# Warmup Iteration  17: 2430233.402 ops/s
# Warmup Iteration  18: 2555669.087 ops/s
# Warmup Iteration  19: 2334984.763 ops/s
# Warmup Iteration  20: 1837661.000 ops/s
# Warmup Iteration  21: 2378228.468 ops/s
# Warmup Iteration  22: 2435951.223 ops/s
# Warmup Iteration  23: 2612363.167 ops/s
# Warmup Iteration  24: 2367735.092 ops/s
# Warmup Iteration  25: 2435147.565 ops/s
# Warmup Iteration  26: 2492879.070 ops/s
# Warmup Iteration  27: 2391820.901 ops/s
# Warmup Iteration  28: 2514456.143 ops/s
# Warmup Iteration  29: 2436952.917 ops/s
# Warmup Iteration  30: 2469573.823 ops/s
Iteration   1: 2507699.855 ops/s
Iteration   2: 2412442.279 ops/s
Iteration   3: 2438607.279 ops/s
Iteration   4: 2462691.067 ops/s
Iteration   5: 2471506.043 ops/s
Iteration   6: 2409132.444 ops/s
Iteration   7: 2506294.416 ops/s
Iteration   8: 2337544.260 ops/s
Iteration   9: 2440574.954 ops/s
Iteration  10: 2317126.505 ops/s
Iteration  11: 2459158.372 ops/s
Iteration  12: 2371716.373 ops/s
Iteration  13: 2442695.828 ops/s
Iteration  14: 2388844.047 ops/s
Iteration  15: 2382678.377 ops/s
Iteration  16: 2489490.716 ops/s
Iteration  17: 2343312.389 ops/s
Iteration  18: 2403965.156 ops/s
Iteration  19: 2524965.006 ops/s
Iteration  20: 2439236.153 ops/s
Iteration  21: 2483236.036 ops/s
Iteration  22: 2425845.287 ops/s
Iteration  23: 2431200.044 ops/s
Iteration  24: 2508712.478 ops/s
Iteration  25: 2520596.584 ops/s
Iteration  26: 2456107.996 ops/s
Iteration  27: 2339734.460 ops/s
Iteration  28: 2492393.258 ops/s
Iteration  29: 2427518.278 ops/s
Iteration  30: 2406156.849 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_untilFires":
  2434706.093 ±(99.9%) 38426.938 ops/s [Average]
  (min, avg, max) = (2317126.505, 2434706.093, 2524965.006), stdev = 57515.635
  CI (99.9%): [2396279.156, 2473133.031] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score       Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_untilFires  thrpt   30  2434706.093 ± 38426.938  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1158077.925 ops/s
# Warmup Iteration   2: 3348293.514 ops/s
# Warmup Iteration   3: 3975755.304 ops/s
# Warmup Iteration   4: 4663968.206 ops/s
# Warmup Iteration   5: 4382673.954 ops/s
# Warmup Iteration   6: 4482268.926 ops/s
# Warmup Iteration   7: 4664805.574 ops/s
# Warmup Iteration   8: 4409809.919 ops/s
# Warmup Iteration   9: 4428040.521 ops/s
# Warmup Iteration  10: 4651237.965 ops/s
# Warmup Iteration  11: 4504476.938 ops/s
# Warmup Iteration  12: 4553552.451 ops/s
# Warmup Iteration  13: 4463484.676 ops/s
# Warmup Iteration  14: 4707104.562 ops/s
# Warmup Iteration  15: 4381282.853 ops/s
# Warmup Iteration  16: 4601040.473 ops/s
# Warmup Iteration  17: 4536174.870 ops/s
# Warmup Iteration  18: 4395701.356 ops/s
# Warmup Iteration  19: 4588913.108 ops/s
# Warmup Iteration  20: 4562461.131 ops/s
# Warmup Iteration  21: 4724013.616 ops/s
# Warmup Iteration  22: 4645130.153 ops/s
# Warmup Iteration  23: 4482376.466 ops/s
# Warmup Iteration  24: 4715164.037 ops/s
# Warmup Iteration  25: 4415293.756 ops/s
# Warmup Iteration  26: 4678279.287 ops/s
# Warmup Iteration  27: 4497178.740 ops/s
# Warmup Iteration  28: 4543571.612 ops/s
# Warmup Iteration  29: 4755067.198 ops/s
# Warmup Iteration  30: 4401150.940 ops/s
Iteration   1: 4568927.515 ops/s
Iteration   2: 4644817.952 ops/s
Iteration   3: 4493435.025 ops/s
Iteration   4: 4685102.452 ops/s
Iteration   5: 4588111.723 ops/s
Iteration   6: 4561230.499 ops/s
Iteration   7: 4670230.223 ops/s
Iteration   8: 4620074.789 ops/s
Iteration   9: 4449938.543 ops/s
Iteration  10: 4707416.195 ops/s
Iteration  11: 4392766.302 ops/s
Iteration  12: 4542313.603 ops/s
Iteration  13: 4624371.455 ops/s
Iteration  14: 4383418.412 ops/s
Iteration  15: 4615223.409 ops/s
Iteration  16: 4674053.398 ops/s
Iteration  17: 4547623.351 ops/s
Iteration  18: 4501235.586 ops/s
Iteration  19: 4740343.480 ops/s
Iteration  20: 4507025.903 ops/s
Iteration  21: 4633276.045 ops/s
Iteration  22: 4711919.609 ops/s
Iteration  23: 4663828.079 ops/s
Iteration  24: 4589666.785 ops/s
Iteration  25: 4603806.967 ops/s
Iteration  26: 4725530.484 ops/s
Iteration  27: 4402274.532 ops/s
Iteration  28: 4554233.180 ops/s
Iteration  29: 4579016.780 ops/s
Iteration  30: 4494633.448 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeUntilPredicateTest._Benchmark.benchmark_dispose":
  4582528.191 ±(99.9%) 65660.859 ops/s [Average]
  (min, avg, max) = (4383418.412, 4582528.191, 4740343.480), stdev = 98278.089
  CI (99.9%): [4516867.332, 4648189.049] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableTakeUntilPredicateTest._Benchmark.benchmark_dispose  thrpt   30  4582528.191 ± 65660.859  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 866221.853 ops/s
# Warmup Iteration   2: 3852344.005 ops/s
# Warmup Iteration   3: 3995838.355 ops/s
# Warmup Iteration   4: 4949439.047 ops/s
# Warmup Iteration   5: 4698179.149 ops/s
# Warmup Iteration   6: 4754372.449 ops/s
# Warmup Iteration   7: 4959897.648 ops/s
# Warmup Iteration   8: 4836129.856 ops/s
# Warmup Iteration   9: 4861386.136 ops/s
# Warmup Iteration  10: 5098646.394 ops/s
# Warmup Iteration  11: 4686727.885 ops/s
# Warmup Iteration  12: 4935260.954 ops/s
# Warmup Iteration  13: 4746292.883 ops/s
# Warmup Iteration  14: 3836686.946 ops/s
# Warmup Iteration  15: 5113268.270 ops/s
# Warmup Iteration  16: 4986727.393 ops/s
# Warmup Iteration  17: 4783046.619 ops/s
# Warmup Iteration  18: 5025363.241 ops/s
# Warmup Iteration  19: 4859241.158 ops/s
# Warmup Iteration  20: 4970182.947 ops/s
# Warmup Iteration  21: 4863778.349 ops/s
# Warmup Iteration  22: 4924994.561 ops/s
# Warmup Iteration  23: 5009734.231 ops/s
# Warmup Iteration  24: 4633338.297 ops/s
# Warmup Iteration  25: 5138709.344 ops/s
# Warmup Iteration  26: 5033391.670 ops/s
# Warmup Iteration  27: 5132983.146 ops/s
# Warmup Iteration  28: 4683944.955 ops/s
# Warmup Iteration  29: 5033156.659 ops/s
# Warmup Iteration  30: 4799339.729 ops/s
Iteration   1: 4795547.745 ops/s
Iteration   2: 4905599.419 ops/s
Iteration   3: 4974358.887 ops/s
Iteration   4: 4996383.327 ops/s
Iteration   5: 4742630.342 ops/s
Iteration   6: 4878921.632 ops/s
Iteration   7: 4977203.481 ops/s
Iteration   8: 4787996.723 ops/s
Iteration   9: 5089399.982 ops/s
Iteration  10: 4860863.280 ops/s
Iteration  11: 4942938.062 ops/s
Iteration  12: 4845865.713 ops/s
Iteration  13: 5008197.292 ops/s
Iteration  14: 4870449.219 ops/s
Iteration  15: 4769846.422 ops/s
Iteration  16: 5122744.840 ops/s
Iteration  17: 4864295.313 ops/s
Iteration  18: 4995907.202 ops/s
Iteration  19: 4834034.285 ops/s
Iteration  20: 4858068.109 ops/s
Iteration  21: 5128218.208 ops/s
Iteration  22: 4613884.341 ops/s
Iteration  23: 5038293.386 ops/s
Iteration  24: 4737472.694 ops/s
Iteration  25: 4773734.239 ops/s
Iteration  26: 4943159.186 ops/s
Iteration  27: 4870038.185 ops/s
Iteration  28: 5025019.214 ops/s
Iteration  29: 4804002.364 ops/s
Iteration  30: 4948975.465 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDisposeDispose":
  4900134.952 ±(99.9%) 81619.994 ops/s [Average]
  (min, avg, max) = (4613884.341, 4900134.952, 5128218.208), stdev = 122164.973
  CI (99.9%): [4818514.958, 4981754.945] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnDisposeDispose  thrpt   30  4900134.952 ± 81619.994  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 524463.916 ops/s
# Warmup Iteration   2: 1944562.840 ops/s
# Warmup Iteration   3: 2285810.234 ops/s
# Warmup Iteration   4: 2861239.275 ops/s
# Warmup Iteration   5: 2735594.471 ops/s
# Warmup Iteration   6: 2950006.517 ops/s
# Warmup Iteration   7: 2762417.140 ops/s
# Warmup Iteration   8: 2790298.385 ops/s
# Warmup Iteration   9: 2873175.494 ops/s
# Warmup Iteration  10: 2744937.906 ops/s
# Warmup Iteration  11: 2837601.290 ops/s
# Warmup Iteration  12: 2738767.832 ops/s
# Warmup Iteration  13: 2875862.775 ops/s
# Warmup Iteration  14: 2879961.484 ops/s
# Warmup Iteration  15: 2691585.334 ops/s
# Warmup Iteration  16: 2917146.959 ops/s
# Warmup Iteration  17: 2761822.211 ops/s
# Warmup Iteration  18: 2800587.398 ops/s
# Warmup Iteration  19: 2968464.260 ops/s
# Warmup Iteration  20: 2764867.947 ops/s
# Warmup Iteration  21: 2889565.031 ops/s
# Warmup Iteration  22: 2797574.815 ops/s
# Warmup Iteration  23: 2863646.153 ops/s
# Warmup Iteration  24: 2866668.212 ops/s
# Warmup Iteration  25: 2825613.081 ops/s
# Warmup Iteration  26: 2866950.617 ops/s
# Warmup Iteration  27: 2893009.012 ops/s
# Warmup Iteration  28: 2821428.066 ops/s
# Warmup Iteration  29: 2858016.223 ops/s
# Warmup Iteration  30: 2834931.529 ops/s
Iteration   1: 2864962.071 ops/s
Iteration   2: 2798960.172 ops/s
Iteration   3: 2853081.823 ops/s
Iteration   4: 2899889.585 ops/s
Iteration   5: 2840915.402 ops/s
Iteration   6: 2918048.282 ops/s
Iteration   7: 2768194.104 ops/s
Iteration   8: 2822471.124 ops/s
Iteration   9: 2957360.672 ops/s
Iteration  10: 2805481.136 ops/s
Iteration  11: 2909277.835 ops/s
Iteration  12: 2757396.596 ops/s
Iteration  13: 2850076.475 ops/s
Iteration  14: 2911930.848 ops/s
Iteration  15: 2716254.887 ops/s
Iteration  16: 2889464.517 ops/s
Iteration  17: 2827257.610 ops/s
Iteration  18: 2827703.667 ops/s
Iteration  19: 2885631.071 ops/s
Iteration  20: 2812077.746 ops/s
Iteration  21: 2887977.882 ops/s
Iteration  22: 2836488.049 ops/s
Iteration  23: 2842688.323 ops/s
Iteration  24: 2834551.009 ops/s
Iteration  25: 2769209.747 ops/s
Iteration  26: 2908956.910 ops/s
Iteration  27: 2765326.499 ops/s
Iteration  28: 2857842.887 ops/s
Iteration  29: 2794438.317 ops/s
Iteration  30: 2747032.297 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapMaybeTest._Benchmark.benchmark_disposed":
  2838698.251 ±(99.9%) 39055.868 ops/s [Average]
  (min, avg, max) = (2716254.887, 2838698.251, 2957360.672), stdev = 58456.989
  CI (99.9%): [2799642.383, 2877754.120] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableFlatMapMaybeTest._Benchmark.benchmark_disposed  thrpt   30  2838698.251 ± 39055.868  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 668116.172 ops/s
# Warmup Iteration   2: 3611260.378 ops/s
# Warmup Iteration   3: 3872696.689 ops/s
# Warmup Iteration   4: 4528073.609 ops/s
# Warmup Iteration   5: 4631656.698 ops/s
# Warmup Iteration   6: 4497566.482 ops/s
# Warmup Iteration   7: 4564504.910 ops/s
# Warmup Iteration   8: 4471713.158 ops/s
# Warmup Iteration   9: 3821584.458 ops/s
# Warmup Iteration  10: 4620545.772 ops/s
# Warmup Iteration  11: 4404321.795 ops/s
# Warmup Iteration  12: 4485165.117 ops/s
# Warmup Iteration  13: 4694712.102 ops/s
# Warmup Iteration  14: 4497856.186 ops/s
# Warmup Iteration  15: 4741617.964 ops/s
# Warmup Iteration  16: 4700228.497 ops/s
# Warmup Iteration  17: 4496981.667 ops/s
# Warmup Iteration  18: 4735401.140 ops/s
# Warmup Iteration  19: 4478362.231 ops/s
# Warmup Iteration  20: 4539550.564 ops/s
# Warmup Iteration  21: 4556450.983 ops/s
# Warmup Iteration  22: 4490240.849 ops/s
# Warmup Iteration  23: 4572411.635 ops/s
# Warmup Iteration  24: 4407802.256 ops/s
# Warmup Iteration  25: 4698269.666 ops/s
# Warmup Iteration  26: 4595421.968 ops/s
# Warmup Iteration  27: 4501526.143 ops/s
# Warmup Iteration  28: 4603485.624 ops/s
# Warmup Iteration  29: 4371997.426 ops/s
# Warmup Iteration  30: 4536602.775 ops/s
Iteration   1: 4570232.068 ops/s
Iteration   2: 4462777.474 ops/s
Iteration   3: 4628628.197 ops/s
Iteration   4: 4651843.331 ops/s
Iteration   5: 4444832.582 ops/s
Iteration   6: 4704889.546 ops/s
Iteration   7: 4470143.713 ops/s
Iteration   8: 4628124.433 ops/s
Iteration   9: 4718114.760 ops/s
Iteration  10: 4452754.588 ops/s
Iteration  11: 4816350.760 ops/s
Iteration  12: 4466690.326 ops/s
Iteration  13: 4472515.370 ops/s
Iteration  14: 4686763.007 ops/s
Iteration  15: 4620494.951 ops/s
Iteration  16: 4439266.308 ops/s
Iteration  17: 4688146.144 ops/s
Iteration  18: 4661009.384 ops/s
Iteration  19: 4454989.212 ops/s
Iteration  20: 4621434.930 ops/s
Iteration  21: 4530320.290 ops/s
Iteration  22: 4675531.738 ops/s
Iteration  23: 4576242.271 ops/s
Iteration  24: 4490673.515 ops/s
Iteration  25: 4769436.885 ops/s
Iteration  26: 4507152.734 ops/s
Iteration  27: 4487617.731 ops/s
Iteration  28: 4536936.925 ops/s
Iteration  29: 4656532.955 ops/s
Iteration  30: 4437629.271 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeWhileTest._Benchmark.benchmark_dispose":
  4577602.513 ±(99.9%) 73472.128 ops/s [Average]
  (min, avg, max) = (4437629.271, 4577602.513, 4816350.760), stdev = 109969.631
  CI (99.9%): [4504130.385, 4651074.642] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt        Score       Error  Units
FlowableTakeWhileTest._Benchmark.benchmark_dispose  thrpt   30  4577602.513 ± 73472.128  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 132668.413 ops/s
# Warmup Iteration   2: 418387.460 ops/s
# Warmup Iteration   3: 594126.489 ops/s
# Warmup Iteration   4: 598440.386 ops/s
# Warmup Iteration   5: 578788.317 ops/s
# Warmup Iteration   6: 657363.019 ops/s
# Warmup Iteration   7: 568740.111 ops/s
# Warmup Iteration   8: 665463.543 ops/s
# Warmup Iteration   9: 635507.564 ops/s
# Warmup Iteration  10: 649278.550 ops/s
# Warmup Iteration  11: 652976.825 ops/s
# Warmup Iteration  12: 659769.867 ops/s
# Warmup Iteration  13: 628778.805 ops/s
# Warmup Iteration  14: 672214.044 ops/s
# Warmup Iteration  15: 637293.535 ops/s
# Warmup Iteration  16: 667146.416 ops/s
# Warmup Iteration  17: 675056.729 ops/s
# Warmup Iteration  18: 682698.083 ops/s
# Warmup Iteration  19: 672133.861 ops/s
# Warmup Iteration  20: 702289.976 ops/s
# Warmup Iteration  21: 677499.148 ops/s
# Warmup Iteration  22: 692053.053 ops/s
# Warmup Iteration  23: 667320.694 ops/s
# Warmup Iteration  24: 683752.754 ops/s
# Warmup Iteration  25: 689686.533 ops/s
# Warmup Iteration  26: 656769.013 ops/s
# Warmup Iteration  27: 682457.504 ops/s
# Warmup Iteration  28: 695540.055 ops/s
# Warmup Iteration  29: 690486.119 ops/s
# Warmup Iteration  30: 665195.070 ops/s
Iteration   1: 714357.715 ops/s
Iteration   2: 680312.278 ops/s
Iteration   3: 686969.615 ops/s
Iteration   4: 668828.130 ops/s
Iteration   5: 685469.065 ops/s
Iteration   6: 674911.331 ops/s
Iteration   7: 688691.524 ops/s
Iteration   8: 685850.735 ops/s
Iteration   9: 676640.713 ops/s
Iteration  10: 690877.823 ops/s
Iteration  11: 673639.574 ops/s
Iteration  12: 677554.192 ops/s
Iteration  13: 703174.111 ops/s
Iteration  14: 686497.465 ops/s
Iteration  15: 669043.660 ops/s
Iteration  16: 675583.001 ops/s
Iteration  17: 669386.606 ops/s
Iteration  18: 696833.097 ops/s
Iteration  19: 677494.196 ops/s
Iteration  20: 689570.370 ops/s
Iteration  21: 673396.608 ops/s
Iteration  22: 699689.149 ops/s
Iteration  23: 670156.004 ops/s
Iteration  24: 671411.248 ops/s
Iteration  25: 690096.104 ops/s
Iteration  26: 655469.136 ops/s
Iteration  27: 691187.791 ops/s
Iteration  28: 662028.997 ops/s
Iteration  29: 705487.819 ops/s
Iteration  30: 700533.553 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnError":
  683038.054 ±(99.9%) 9164.364 ops/s [Average]
  (min, avg, max) = (655469.136, 683038.054, 714357.715), stdev = 13716.790
  CI (99.9%): [673873.690, 692202.418] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_emptyWithOnError  thrpt   30  683038.054 ± 9164.364  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_completeAfterMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_completeAfterMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 485105.717 ops/s
# Warmup Iteration   2: 1856803.750 ops/s
# Warmup Iteration   3: 2010205.252 ops/s
# Warmup Iteration   4: 2907735.946 ops/s
# Warmup Iteration   5: 2962534.320 ops/s
# Warmup Iteration   6: 3029732.076 ops/s
# Warmup Iteration   7: 3126606.094 ops/s
# Warmup Iteration   8: 2959646.943 ops/s
# Warmup Iteration   9: 3135156.277 ops/s
# Warmup Iteration  10: 2941987.487 ops/s
# Warmup Iteration  11: 3047617.924 ops/s
# Warmup Iteration  12: 3128452.019 ops/s
# Warmup Iteration  13: 2999926.683 ops/s
# Warmup Iteration  14: 2958104.704 ops/s
# Warmup Iteration  15: 3069438.845 ops/s
# Warmup Iteration  16: 2969398.153 ops/s
# Warmup Iteration  17: 3045257.215 ops/s
# Warmup Iteration  18: 3143111.897 ops/s
# Warmup Iteration  19: 2959606.658 ops/s
# Warmup Iteration  20: 3115639.629 ops/s
# Warmup Iteration  21: 3064524.018 ops/s
# Warmup Iteration  22: 3081085.021 ops/s
# Warmup Iteration  23: 2980562.812 ops/s
# Warmup Iteration  24: 3013560.306 ops/s
# Warmup Iteration  25: 3148592.920 ops/s
# Warmup Iteration  26: 3043100.406 ops/s
# Warmup Iteration  27: 3005912.096 ops/s
# Warmup Iteration  28: 2998253.030 ops/s
# Warmup Iteration  29: 3164593.819 ops/s
# Warmup Iteration  30: 3003511.747 ops/s
Iteration   1: 3113416.384 ops/s
Iteration   2: 2925668.519 ops/s
Iteration   3: 3053726.507 ops/s
Iteration   4: 3135817.467 ops/s
Iteration   5: 2940388.815 ops/s
Iteration   6: 3075218.080 ops/s
Iteration   7: 3143489.299 ops/s
Iteration   8: 2958302.763 ops/s
Iteration   9: 3059761.664 ops/s
Iteration  10: 3148586.220 ops/s
Iteration  11: 2945476.291 ops/s
Iteration  12: 3122087.622 ops/s
Iteration  13: 2964709.397 ops/s
Iteration  14: 2999965.579 ops/s
Iteration  15: 3107696.249 ops/s
Iteration  16: 3094407.934 ops/s
Iteration  17: 2989137.856 ops/s
Iteration  18: 2982997.604 ops/s
Iteration  19: 3103045.601 ops/s
Iteration  20: 2989724.505 ops/s
Iteration  21: 3078064.882 ops/s
Iteration  22: 2944351.416 ops/s
Iteration  23: 2987121.691 ops/s
Iteration  24: 3077703.110 ops/s
Iteration  25: 3012433.441 ops/s
Iteration  26: 3077941.860 ops/s
Iteration  27: 3060888.061 ops/s
Iteration  28: 2938613.774 ops/s
Iteration  29: 3153566.197 ops/s
Iteration  30: 2957600.405 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableMergeTest._Benchmark.benchmark_completeAfterMain":
  3038063.640 ±(99.9%) 49422.693 ops/s [Average]
  (min, avg, max) = (2925668.519, 3038063.640, 3153566.197), stdev = 73973.566
  CI (99.9%): [2988640.947, 3087486.333] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
CompletableMergeTest._Benchmark.benchmark_completeAfterMain  thrpt   30  3038063.640 ± 49422.693  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 80406.849 ops/s
# Warmup Iteration   2: 437426.638 ops/s
# Warmup Iteration   3: 568770.540 ops/s
# Warmup Iteration   4: 514985.188 ops/s
# Warmup Iteration   5: 629458.298 ops/s
# Warmup Iteration   6: 606904.972 ops/s
# Warmup Iteration   7: 605876.976 ops/s
# Warmup Iteration   8: 614592.611 ops/s
# Warmup Iteration   9: 622751.526 ops/s
# Warmup Iteration  10: 621458.573 ops/s
# Warmup Iteration  11: 589940.862 ops/s
# Warmup Iteration  12: 609831.943 ops/s
# Warmup Iteration  13: 612120.646 ops/s
# Warmup Iteration  14: 615176.439 ops/s
# Warmup Iteration  15: 621080.414 ops/s
# Warmup Iteration  16: 632462.784 ops/s
# Warmup Iteration  17: 658107.234 ops/s
# Warmup Iteration  18: 611849.381 ops/s
# Warmup Iteration  19: 672907.026 ops/s
# Warmup Iteration  20: 657052.298 ops/s
# Warmup Iteration  21: 641541.523 ops/s
# Warmup Iteration  22: 659117.742 ops/s
# Warmup Iteration  23: 633314.925 ops/s
# Warmup Iteration  24: 636047.785 ops/s
# Warmup Iteration  25: 644387.025 ops/s
# Warmup Iteration  26: 626205.252 ops/s
# Warmup Iteration  27: 650908.640 ops/s
# Warmup Iteration  28: 659200.252 ops/s
# Warmup Iteration  29: 645295.614 ops/s
# Warmup Iteration  30: 646566.666 ops/s
Iteration   1: 631939.815 ops/s
Iteration   2: 649993.092 ops/s
Iteration   3: 650263.157 ops/s
Iteration   4: 635539.502 ops/s
Iteration   5: 679988.400 ops/s
Iteration   6: 654210.301 ops/s
Iteration   7: 637828.802 ops/s
Iteration   8: 645470.586 ops/s
Iteration   9: 672444.260 ops/s
Iteration  10: 637301.307 ops/s
Iteration  11: 661743.350 ops/s
Iteration  12: 647865.631 ops/s
Iteration  13: 630788.637 ops/s
Iteration  14: 638710.993 ops/s
Iteration  15: 639058.624 ops/s
Iteration  16: 667036.964 ops/s
Iteration  17: 641203.953 ops/s
Iteration  18: 659932.357 ops/s
Iteration  19: 627784.757 ops/s
Iteration  20: 657817.622 ops/s
Iteration  21: 670668.559 ops/s
Iteration  22: 621495.504 ops/s
Iteration  23: 665023.736 ops/s
Iteration  24: 649171.600 ops/s
Iteration  25: 639178.391 ops/s
Iteration  26: 659579.344 ops/s
Iteration  27: 627171.659 ops/s
Iteration  28: 655134.641 ops/s
Iteration  29: 668224.504 ops/s
Iteration  30: 529999.841 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError":
  645085.663 ±(99.9%) 17674.755 ops/s [Average]
  (min, avg, max) = (529999.841, 645085.663, 679988.400), stdev = 26454.744
  CI (99.9%): [627410.908, 662760.418] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherError  thrpt   30  645085.663 ± 17674.755  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107454.699 ops/s
# Warmup Iteration   2: 509987.885 ops/s
# Warmup Iteration   3: 524012.007 ops/s
# Warmup Iteration   4: 592626.023 ops/s
# Warmup Iteration   5: 517564.963 ops/s
# Warmup Iteration   6: 617052.011 ops/s
# Warmup Iteration   7: 632120.578 ops/s
# Warmup Iteration   8: 623342.839 ops/s
# Warmup Iteration   9: 610073.479 ops/s
# Warmup Iteration  10: 619846.879 ops/s
# Warmup Iteration  11: 611573.430 ops/s
# Warmup Iteration  12: 607088.892 ops/s
# Warmup Iteration  13: 603922.696 ops/s
# Warmup Iteration  14: 629229.143 ops/s
# Warmup Iteration  15: 611199.330 ops/s
# Warmup Iteration  16: 631257.005 ops/s
# Warmup Iteration  17: 639501.654 ops/s
# Warmup Iteration  18: 640646.437 ops/s
# Warmup Iteration  19: 663457.907 ops/s
# Warmup Iteration  20: 641966.048 ops/s
# Warmup Iteration  21: 657028.913 ops/s
# Warmup Iteration  22: 649948.647 ops/s
# Warmup Iteration  23: 652406.372 ops/s
# Warmup Iteration  24: 633547.639 ops/s
# Warmup Iteration  25: 635246.174 ops/s
# Warmup Iteration  26: 643471.764 ops/s
# Warmup Iteration  27: 667133.207 ops/s
# Warmup Iteration  28: 627328.590 ops/s
# Warmup Iteration  29: 648509.475 ops/s
# Warmup Iteration  30: 665219.932 ops/s
Iteration   1: 640144.485 ops/s
Iteration   2: 669632.830 ops/s
Iteration   3: 657553.005 ops/s
Iteration   4: 603114.786 ops/s
Iteration   5: 671837.613 ops/s
Iteration   6: 628512.081 ops/s
Iteration   7: 665070.167 ops/s
Iteration   8: 637770.298 ops/s
Iteration   9: 651994.429 ops/s
Iteration  10: 657079.309 ops/s
Iteration  11: 630877.921 ops/s
Iteration  12: 676622.381 ops/s
Iteration  13: 623455.977 ops/s
Iteration  14: 647783.781 ops/s
Iteration  15: 665194.203 ops/s
Iteration  16: 624168.491 ops/s
Iteration  17: 680009.542 ops/s
Iteration  18: 674243.727 ops/s
Iteration  19: 627751.547 ops/s
Iteration  20: 667078.988 ops/s
Iteration  21: 619670.310 ops/s
Iteration  22: 641212.114 ops/s
Iteration  23: 667869.837 ops/s
Iteration  24: 640078.937 ops/s
Iteration  25: 662444.746 ops/s
Iteration  26: 618282.705 ops/s
Iteration  27: 668875.845 ops/s
Iteration  28: 655344.437 ops/s
Iteration  29: 620640.099 ops/s
Iteration  30: 661591.117 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherMainError":
  648530.190 ±(99.9%) 14121.909 ops/s [Average]
  (min, avg, max) = (603114.786, 648530.190, 680009.542), stdev = 21137.011
  CI (99.9%): [634408.281, 662652.100] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilPublisherMainError  thrpt   30  648530.190 ± 14121.909  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22663.639 ops/s
# Warmup Iteration   2: 148706.266 ops/s
# Warmup Iteration   3: 195177.766 ops/s
# Warmup Iteration   4: 188955.255 ops/s
# Warmup Iteration   5: 215320.052 ops/s
# Warmup Iteration   6: 173458.417 ops/s
# Warmup Iteration   7: 217494.984 ops/s
# Warmup Iteration   8: 207922.549 ops/s
# Warmup Iteration   9: 214829.366 ops/s
# Warmup Iteration  10: 220610.004 ops/s
# Warmup Iteration  11: 203970.777 ops/s
# Warmup Iteration  12: 217769.574 ops/s
# Warmup Iteration  13: 215586.873 ops/s
# Warmup Iteration  14: 211207.877 ops/s
# Warmup Iteration  15: 218493.744 ops/s
# Warmup Iteration  16: 211630.814 ops/s
# Warmup Iteration  17: 223696.387 ops/s
# Warmup Iteration  18: 227394.588 ops/s
# Warmup Iteration  19: 226095.217 ops/s
# Warmup Iteration  20: 227608.483 ops/s
# Warmup Iteration  21: 228426.792 ops/s
# Warmup Iteration  22: 228987.324 ops/s
# Warmup Iteration  23: 215588.853 ops/s
# Warmup Iteration  24: 232228.265 ops/s
# Warmup Iteration  25: 222564.565 ops/s
# Warmup Iteration  26: 221143.923 ops/s
# Warmup Iteration  27: 234534.910 ops/s
# Warmup Iteration  28: 236162.564 ops/s
# Warmup Iteration  29: 221494.142 ops/s
# Warmup Iteration  30: 222105.859 ops/s
Iteration   1: 229593.293 ops/s
Iteration   2: 223276.299 ops/s
Iteration   3: 220751.706 ops/s
Iteration   4: 226963.226 ops/s
Iteration   5: 220027.713 ops/s
Iteration   6: 231656.519 ops/s
Iteration   7: 228526.970 ops/s
Iteration   8: 220082.359 ops/s
Iteration   9: 237924.816 ops/s
Iteration  10: 218039.228 ops/s
Iteration  11: 229980.091 ops/s
Iteration  12: 225751.807 ops/s
Iteration  13: 226063.667 ops/s
Iteration  14: 233282.466 ops/s
Iteration  15: 229042.759 ops/s
Iteration  16: 218576.468 ops/s
Iteration  17: 232442.141 ops/s
Iteration  18: 234995.956 ops/s
Iteration  19: 219191.623 ops/s
Iteration  20: 225763.458 ops/s
Iteration  21: 223860.302 ops/s
Iteration  22: 230732.135 ops/s
Iteration  23: 227195.192 ops/s
Iteration  24: 214330.482 ops/s
Iteration  25: 199493.787 ops/s
Iteration  26: 225863.489 ops/s
Iteration  27: 226617.566 ops/s
Iteration  28: 222960.737 ops/s
Iteration  29: 219350.911 ops/s
Iteration  30: 236550.254 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnError":
  225296.247 ±(99.9%) 5089.780 ops/s [Average]
  (min, avg, max) = (199493.787, 225296.247, 237924.816), stdev = 7618.143
  CI (99.9%): [220206.467, 230386.027] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
MaybeDelayOtherTest._Benchmark.benchmark_errorWithOnError  thrpt   30  225296.247 ± 5089.780  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 543094.310 ops/s
# Warmup Iteration   2: 1896262.108 ops/s
# Warmup Iteration   3: 2493820.872 ops/s
# Warmup Iteration   4: 2846365.830 ops/s
# Warmup Iteration   5: 2784743.194 ops/s
# Warmup Iteration   6: 2889113.546 ops/s
# Warmup Iteration   7: 2832100.288 ops/s
# Warmup Iteration   8: 2848986.999 ops/s
# Warmup Iteration   9: 2798883.323 ops/s
# Warmup Iteration  10: 2937144.115 ops/s
# Warmup Iteration  11: 2811075.383 ops/s
# Warmup Iteration  12: 2839475.404 ops/s
# Warmup Iteration  13: 2823006.028 ops/s
# Warmup Iteration  14: 2745259.262 ops/s
# Warmup Iteration  15: 2801320.823 ops/s
# Warmup Iteration  16: 2935757.056 ops/s
# Warmup Iteration  17: 2744214.744 ops/s
# Warmup Iteration  18: 2877465.003 ops/s
# Warmup Iteration  19: 2846340.485 ops/s
# Warmup Iteration  20: 2864353.204 ops/s
# Warmup Iteration  21: 2926915.598 ops/s
# Warmup Iteration  22: 2858127.880 ops/s
# Warmup Iteration  23: 2804151.338 ops/s
# Warmup Iteration  24: 2891793.367 ops/s
# Warmup Iteration  25: 2901132.399 ops/s
# Warmup Iteration  26: 2774224.611 ops/s
# Warmup Iteration  27: 2822893.530 ops/s
# Warmup Iteration  28: 2932521.949 ops/s
# Warmup Iteration  29: 2787811.114 ops/s
# Warmup Iteration  30: 2900797.522 ops/s
Iteration   1: 2832048.486 ops/s
Iteration   2: 2870929.179 ops/s
Iteration   3: 2975260.256 ops/s
Iteration   4: 2739532.256 ops/s
Iteration   5: 2800479.642 ops/s
Iteration   6: 2916874.819 ops/s
Iteration   7: 2810509.981 ops/s
Iteration   8: 2890154.831 ops/s
Iteration   9: 2777948.551 ops/s
Iteration  10: 2948332.825 ops/s
Iteration  11: 2903868.881 ops/s
Iteration  12: 2813713.405 ops/s
Iteration  13: 2886975.648 ops/s
Iteration  14: 2767439.578 ops/s
Iteration  15: 2909619.243 ops/s
Iteration  16: 2845155.924 ops/s
Iteration  17: 2775162.540 ops/s
Iteration  18: 2903417.749 ops/s
Iteration  19: 2771069.967 ops/s
Iteration  20: 2942209.164 ops/s
Iteration  21: 2753912.209 ops/s
Iteration  22: 2829736.190 ops/s
Iteration  23: 2768989.129 ops/s
Iteration  24: 2750389.291 ops/s
Iteration  25: 2938096.665 ops/s
Iteration  26: 2720921.476 ops/s
Iteration  27: 2786410.262 ops/s
Iteration  28: 2823936.808 ops/s
Iteration  29: 2868647.154 ops/s
Iteration  30: 2835525.422 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableScanTest._Benchmark.benchmark_dispose":
  2838575.584 ±(99.9%) 47192.621 ops/s [Average]
  (min, avg, max) = (2720921.476, 2838575.584, 2975260.256), stdev = 70635.699
  CI (99.9%): [2791382.963, 2885768.205] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
ObservableScanTest._Benchmark.benchmark_dispose  thrpt   30  2838575.584 ± 47192.621  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 161470.404 ops/s
# Warmup Iteration   2: 458206.026 ops/s
# Warmup Iteration   3: 587172.888 ops/s
# Warmup Iteration   4: 575382.697 ops/s
# Warmup Iteration   5: 577376.613 ops/s
# Warmup Iteration   6: 577583.969 ops/s
# Warmup Iteration   7: 577365.991 ops/s
# Warmup Iteration   8: 572287.028 ops/s
# Warmup Iteration   9: 585227.786 ops/s
# Warmup Iteration  10: 553135.138 ops/s
# Warmup Iteration  11: 576571.761 ops/s
# Warmup Iteration  12: 538775.647 ops/s
# Warmup Iteration  13: 566583.513 ops/s
# Warmup Iteration  14: 582076.281 ops/s
# Warmup Iteration  15: 586353.145 ops/s
# Warmup Iteration  16: 553398.710 ops/s
# Warmup Iteration  17: 607602.083 ops/s
# Warmup Iteration  18: 645189.880 ops/s
# Warmup Iteration  19: 595875.745 ops/s
# Warmup Iteration  20: 638018.600 ops/s
# Warmup Iteration  21: 606561.340 ops/s
# Warmup Iteration  22: 610104.850 ops/s
# Warmup Iteration  23: 630367.590 ops/s
# Warmup Iteration  24: 614928.779 ops/s
# Warmup Iteration  25: 630199.178 ops/s
# Warmup Iteration  26: 618822.568 ops/s
# Warmup Iteration  27: 606028.283 ops/s
# Warmup Iteration  28: 610976.585 ops/s
# Warmup Iteration  29: 611125.505 ops/s
# Warmup Iteration  30: 619870.782 ops/s
Iteration   1: 609388.263 ops/s
Iteration   2: 605367.095 ops/s
Iteration   3: 630580.644 ops/s
Iteration   4: 583328.852 ops/s
Iteration   5: 612509.396 ops/s
Iteration   6: 623316.660 ops/s
Iteration   7: 632120.494 ops/s
Iteration   8: 602459.120 ops/s
Iteration   9: 624405.700 ops/s
Iteration  10: 589472.201 ops/s
Iteration  11: 610287.809 ops/s
Iteration  12: 606545.537 ops/s
Iteration  13: 604298.554 ops/s
Iteration  14: 627908.961 ops/s
Iteration  15: 602124.512 ops/s
Iteration  16: 606730.319 ops/s
Iteration  17: 624728.921 ops/s
Iteration  18: 595531.780 ops/s
Iteration  19: 488926.348 ops/s
Iteration  20: 615625.578 ops/s
Iteration  21: 598459.304 ops/s
Iteration  22: 637836.473 ops/s
Iteration  23: 601900.141 ops/s
Iteration  24: 608042.331 ops/s
Iteration  25: 603275.184 ops/s
Iteration  26: 616534.101 ops/s
Iteration  27: 633768.663 ops/s
Iteration  28: 605198.237 ops/s
Iteration  29: 614660.049 ops/s
Iteration  30: 616511.379 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete":
  607728.087 ±(99.9%) 17383.725 ops/s [Average]
  (min, avg, max) = (488926.348, 607728.087, 637836.473), stdev = 26019.144
  CI (99.9%): [590344.361, 625111.812] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
SingleTakeUntilTest._Benchmark.benchmark_untilPublisherOtherOnComplete  thrpt   30  607728.087 ± 17383.725  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 97805.774 ops/s
# Warmup Iteration   2: 245469.731 ops/s
# Warmup Iteration   3: 520552.413 ops/s
# Warmup Iteration   4: 564783.988 ops/s
# Warmup Iteration   5: 624016.608 ops/s
# Warmup Iteration   6: 622262.233 ops/s
# Warmup Iteration   7: 637072.390 ops/s
# Warmup Iteration   8: 624133.007 ops/s
# Warmup Iteration   9: 636474.630 ops/s
# Warmup Iteration  10: 657068.335 ops/s
# Warmup Iteration  11: 641247.528 ops/s
# Warmup Iteration  12: 608359.831 ops/s
# Warmup Iteration  13: 586135.277 ops/s
# Warmup Iteration  14: 600443.299 ops/s
# Warmup Iteration  15: 645181.026 ops/s
# Warmup Iteration  16: 627313.251 ops/s
# Warmup Iteration  17: 644774.494 ops/s
# Warmup Iteration  18: 692463.615 ops/s
# Warmup Iteration  19: 642955.463 ops/s
# Warmup Iteration  20: 685403.628 ops/s
# Warmup Iteration  21: 698646.059 ops/s
# Warmup Iteration  22: 649261.047 ops/s
# Warmup Iteration  23: 655453.554 ops/s
# Warmup Iteration  24: 658651.123 ops/s
# Warmup Iteration  25: 672880.573 ops/s
# Warmup Iteration  26: 656144.441 ops/s
# Warmup Iteration  27: 661755.349 ops/s
# Warmup Iteration  28: 694899.322 ops/s
# Warmup Iteration  29: 659343.204 ops/s
# Warmup Iteration  30: 646904.253 ops/s
Iteration   1: 673925.581 ops/s
Iteration   2: 646067.221 ops/s
Iteration   3: 671331.075 ops/s
Iteration   4: 695208.949 ops/s
Iteration   5: 646077.855 ops/s
Iteration   6: 662687.899 ops/s
Iteration   7: 681976.139 ops/s
Iteration   8: 656205.638 ops/s
Iteration   9: 667845.231 ops/s
Iteration  10: 676395.335 ops/s
Iteration  11: 646302.976 ops/s
Iteration  12: 656471.922 ops/s
Iteration  13: 671477.348 ops/s
Iteration  14: 657610.927 ops/s
Iteration  15: 672288.634 ops/s
Iteration  16: 648069.496 ops/s
Iteration  17: 665145.849 ops/s
Iteration  18: 674643.359 ops/s
Iteration  19: 646241.801 ops/s
Iteration  20: 672534.767 ops/s
Iteration  21: 679944.809 ops/s
Iteration  22: 662453.702 ops/s
Iteration  23: 688370.353 ops/s
Iteration  24: 660977.633 ops/s
Iteration  25: 669742.058 ops/s
Iteration  26: 669683.447 ops/s
Iteration  27: 657797.326 ops/s
Iteration  28: 675014.195 ops/s
Iteration  29: 657259.745 ops/s
Iteration  30: 683563.530 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorSize":
  666443.827 ±(99.9%) 8727.617 ops/s [Average]
  (min, avg, max) = (646067.221, 666443.827, 695208.949), stdev = 13063.087
  CI (99.9%): [657716.210, 675171.443] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionErrorSize  thrpt   30  666443.827 ± 8727.617  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedBuffer$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedBuffer

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87626.762 ops/s
# Warmup Iteration   2: 398719.295 ops/s
# Warmup Iteration   3: 430033.575 ops/s
# Warmup Iteration   4: 437681.849 ops/s
# Warmup Iteration   5: 473683.621 ops/s
# Warmup Iteration   6: 482875.922 ops/s
# Warmup Iteration   7: 471187.538 ops/s
# Warmup Iteration   8: 491007.845 ops/s
# Warmup Iteration   9: 487653.179 ops/s
# Warmup Iteration  10: 459814.900 ops/s
# Warmup Iteration  11: 481960.547 ops/s
# Warmup Iteration  12: 463481.877 ops/s
# Warmup Iteration  13: 499214.232 ops/s
# Warmup Iteration  14: 487273.349 ops/s
# Warmup Iteration  15: 462566.627 ops/s
# Warmup Iteration  16: 479429.077 ops/s
# Warmup Iteration  17: 509756.217 ops/s
# Warmup Iteration  18: 529310.354 ops/s
# Warmup Iteration  19: 475090.252 ops/s
# Warmup Iteration  20: 509659.734 ops/s
# Warmup Iteration  21: 489718.328 ops/s
# Warmup Iteration  22: 509519.782 ops/s
# Warmup Iteration  23: 486883.054 ops/s
# Warmup Iteration  24: 490782.392 ops/s
# Warmup Iteration  25: 521261.519 ops/s
# Warmup Iteration  26: 499059.514 ops/s
# Warmup Iteration  27: 491224.043 ops/s
# Warmup Iteration  28: 513399.604 ops/s
# Warmup Iteration  29: 486931.657 ops/s
# Warmup Iteration  30: 509330.503 ops/s
Iteration   1: 490382.979 ops/s
Iteration   2: 497272.906 ops/s
Iteration   3: 511887.618 ops/s
Iteration   4: 501672.286 ops/s
Iteration   5: 507936.847 ops/s
Iteration   6: 486048.061 ops/s
Iteration   7: 502234.096 ops/s
Iteration   8: 495993.437 ops/s
Iteration   9: 522431.395 ops/s
Iteration  10: 484534.867 ops/s
Iteration  11: 491299.400 ops/s
Iteration  12: 507175.579 ops/s
Iteration  13: 452855.446 ops/s
Iteration  14: 402280.950 ops/s
Iteration  15: 497514.051 ops/s
Iteration  16: 509192.964 ops/s
Iteration  17: 489914.224 ops/s
Iteration  18: 512898.803 ops/s
Iteration  19: 472040.231 ops/s
Iteration  20: 496711.484 ops/s
Iteration  21: 484943.695 ops/s
Iteration  22: 509319.706 ops/s
Iteration  23: 510104.727 ops/s
Iteration  24: 481165.441 ops/s
Iteration  25: 515704.255 ops/s
Iteration  26: 497452.708 ops/s
Iteration  27: 508614.937 ops/s
Iteration  28: 508542.025 ops/s
Iteration  29: 507745.197 ops/s
Iteration  30: 493871.605 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_unsubscribedBuffer":
  494991.397 ±(99.9%) 15108.955 ops/s [Average]
  (min, avg, max) = (402280.950, 494991.397, 522431.395), stdev = 22614.374
  CI (99.9%): [479882.442, 510100.352] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_unsubscribedBuffer  thrpt   30  494991.397 ± 15108.955  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 645933.133 ops/s
# Warmup Iteration   2: 2042089.743 ops/s
# Warmup Iteration   3: 2359927.438 ops/s
# Warmup Iteration   4: 2829417.702 ops/s
# Warmup Iteration   5: 3065401.001 ops/s
# Warmup Iteration   6: 2831613.002 ops/s
# Warmup Iteration   7: 2974376.394 ops/s
# Warmup Iteration   8: 2868324.682 ops/s
# Warmup Iteration   9: 2943141.239 ops/s
# Warmup Iteration  10: 2927260.105 ops/s
# Warmup Iteration  11: 2862941.263 ops/s
# Warmup Iteration  12: 2932153.337 ops/s
# Warmup Iteration  13: 2944181.547 ops/s
# Warmup Iteration  14: 2982950.886 ops/s
# Warmup Iteration  15: 2882162.143 ops/s
# Warmup Iteration  16: 2965039.359 ops/s
# Warmup Iteration  17: 2783818.988 ops/s
# Warmup Iteration  18: 2908132.432 ops/s
# Warmup Iteration  19: 2938744.772 ops/s
# Warmup Iteration  20: 2867770.472 ops/s
# Warmup Iteration  21: 2903892.048 ops/s
# Warmup Iteration  22: 2819211.963 ops/s
# Warmup Iteration  23: 2956278.381 ops/s
# Warmup Iteration  24: 2899616.101 ops/s
# Warmup Iteration  25: 2842024.841 ops/s
# Warmup Iteration  26: 3028869.771 ops/s
# Warmup Iteration  27: 2847085.728 ops/s
# Warmup Iteration  28: 2969989.645 ops/s
# Warmup Iteration  29: 2894969.520 ops/s
# Warmup Iteration  30: 3003800.923 ops/s
Iteration   1: 2840902.859 ops/s
Iteration   2: 2875214.957 ops/s
Iteration   3: 3015519.945 ops/s
Iteration   4: 2921649.858 ops/s
Iteration   5: 3011237.700 ops/s
Iteration   6: 2932313.982 ops/s
Iteration   7: 2942782.213 ops/s
Iteration   8: 2913778.752 ops/s
Iteration   9: 2876720.361 ops/s
Iteration  10: 3003945.311 ops/s
Iteration  11: 2916916.756 ops/s
Iteration  12: 2955398.812 ops/s
Iteration  13: 2919270.814 ops/s
Iteration  14: 2894583.611 ops/s
Iteration  15: 2903658.220 ops/s
Iteration  16: 2957719.549 ops/s
Iteration  17: 2975889.979 ops/s
Iteration  18: 2987961.427 ops/s
Iteration  19: 2850655.587 ops/s
Iteration  20: 3071340.941 ops/s
Iteration  21: 2909032.456 ops/s
Iteration  22: 2842173.695 ops/s
Iteration  23: 2977179.249 ops/s
Iteration  24: 2888338.895 ops/s
Iteration  25: 2984044.080 ops/s
Iteration  26: 2967559.032 ops/s
Iteration  27: 2865423.988 ops/s
Iteration  28: 2974813.471 ops/s
Iteration  29: 2905508.924 ops/s
Iteration  30: 2977701.847 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_noHeadRetentionTime":
  2935307.909 ±(99.9%) 37977.359 ops/s [Average]
  (min, avg, max) = (2840902.859, 2935307.909, 3071340.941), stdev = 56842.727
  CI (99.9%): [2897330.550, 2973285.268] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_noHeadRetentionTime  thrpt   30  2935307.909 ± 37977.359  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionTime$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionTime

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 397824.573 ops/s
# Warmup Iteration   2: 2351903.732 ops/s
# Warmup Iteration   3: 2512361.898 ops/s
# Warmup Iteration   4: 3089289.598 ops/s
# Warmup Iteration   5: 3104997.143 ops/s
# Warmup Iteration   6: 2931340.655 ops/s
# Warmup Iteration   7: 3135694.460 ops/s
# Warmup Iteration   8: 2947136.792 ops/s
# Warmup Iteration   9: 3136602.366 ops/s
# Warmup Iteration  10: 3136382.143 ops/s
# Warmup Iteration  11: 2937147.937 ops/s
# Warmup Iteration  12: 3167189.210 ops/s
# Warmup Iteration  13: 3097029.133 ops/s
# Warmup Iteration  14: 2947495.864 ops/s
# Warmup Iteration  15: 3013620.690 ops/s
# Warmup Iteration  16: 2974804.525 ops/s
# Warmup Iteration  17: 3004912.129 ops/s
# Warmup Iteration  18: 3055080.218 ops/s
# Warmup Iteration  19: 3164096.060 ops/s
# Warmup Iteration  20: 3032239.820 ops/s
# Warmup Iteration  21: 2969574.892 ops/s
# Warmup Iteration  22: 3160837.913 ops/s
# Warmup Iteration  23: 3135379.059 ops/s
# Warmup Iteration  24: 3012949.554 ops/s
# Warmup Iteration  25: 3116016.852 ops/s
# Warmup Iteration  26: 3030926.626 ops/s
# Warmup Iteration  27: 3035932.931 ops/s
# Warmup Iteration  28: 3162515.131 ops/s
# Warmup Iteration  29: 3010381.522 ops/s
# Warmup Iteration  30: 3090176.180 ops/s
Iteration   1: 3016167.601 ops/s
Iteration   2: 3047842.321 ops/s
Iteration   3: 3088700.050 ops/s
Iteration   4: 2873388.221 ops/s
Iteration   5: 3258016.739 ops/s
Iteration   6: 3088294.426 ops/s
Iteration   7: 2973807.166 ops/s
Iteration   8: 2585929.590 ops/s
Iteration   9: 2939566.187 ops/s
Iteration  10: 2956249.707 ops/s
Iteration  11: 3146385.412 ops/s
Iteration  12: 3141533.721 ops/s
Iteration  13: 2879815.231 ops/s
Iteration  14: 3033099.325 ops/s
Iteration  15: 3043533.381 ops/s
Iteration  16: 2961036.338 ops/s
Iteration  17: 3138611.406 ops/s
Iteration  18: 3090786.278 ops/s
Iteration  19: 2999603.066 ops/s
Iteration  20: 3071710.283 ops/s
Iteration  21: 2959145.674 ops/s
Iteration  22: 3217160.212 ops/s
Iteration  23: 3160862.111 ops/s
Iteration  24: 2922187.126 ops/s
Iteration  25: 3081795.410 ops/s
Iteration  26: 3134019.113 ops/s
Iteration  27: 3041373.465 ops/s
Iteration  28: 3091712.751 ops/s
Iteration  29: 2942855.981 ops/s
Iteration  30: 3166543.255 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionTime":
  3035057.718 ±(99.9%) 86062.423 ops/s [Average]
  (min, avg, max) = (2585929.590, 3035057.718, 3258016.739), stdev = 128814.193
  CI (99.9%): [2948995.295, 3121120.141] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionTime  thrpt   30  3035057.718 ± 86062.423  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_normalEmitLast$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_normalEmitLast

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 117566.353 ops/s
# Warmup Iteration   2: 443701.568 ops/s
# Warmup Iteration   3: 607671.317 ops/s
# Warmup Iteration   4: 615464.762 ops/s
# Warmup Iteration   5: 585651.480 ops/s
# Warmup Iteration   6: 646091.119 ops/s
# Warmup Iteration   7: 661357.611 ops/s
# Warmup Iteration   8: 670697.925 ops/s
# Warmup Iteration   9: 649239.247 ops/s
# Warmup Iteration  10: 698201.951 ops/s
# Warmup Iteration  11: 667449.945 ops/s
# Warmup Iteration  12: 646332.627 ops/s
# Warmup Iteration  13: 669510.757 ops/s
# Warmup Iteration  14: 669553.754 ops/s
# Warmup Iteration  15: 675594.897 ops/s
# Warmup Iteration  16: 658170.623 ops/s
# Warmup Iteration  17: 664129.578 ops/s
# Warmup Iteration  18: 643508.802 ops/s
# Warmup Iteration  19: 654162.334 ops/s
# Warmup Iteration  20: 673282.365 ops/s
# Warmup Iteration  21: 656851.477 ops/s
# Warmup Iteration  22: 660433.276 ops/s
# Warmup Iteration  23: 646993.341 ops/s
# Warmup Iteration  24: 658422.464 ops/s
# Warmup Iteration  25: 653679.856 ops/s
# Warmup Iteration  26: 659186.510 ops/s
# Warmup Iteration  27: 645267.592 ops/s
# Warmup Iteration  28: 684033.762 ops/s
# Warmup Iteration  29: 648393.415 ops/s
# Warmup Iteration  30: 651701.767 ops/s
Iteration   1: 668517.630 ops/s
Iteration   2: 654762.264 ops/s
Iteration   3: 660054.651 ops/s
Iteration   4: 641858.442 ops/s
Iteration   5: 658832.395 ops/s
Iteration   6: 660533.648 ops/s
Iteration   7: 633660.509 ops/s
Iteration   8: 676907.865 ops/s
Iteration   9: 625979.298 ops/s
Iteration  10: 688769.418 ops/s
Iteration  11: 678699.799 ops/s
Iteration  12: 638145.635 ops/s
Iteration  13: 687304.379 ops/s
Iteration  14: 676577.389 ops/s
Iteration  15: 645203.412 ops/s
Iteration  16: 642540.191 ops/s
Iteration  17: 671333.769 ops/s
Iteration  18: 649425.557 ops/s
Iteration  19: 655817.247 ops/s
Iteration  20: 663601.547 ops/s
Iteration  21: 658542.629 ops/s
Iteration  22: 670346.257 ops/s
Iteration  23: 638518.541 ops/s
Iteration  24: 674201.743 ops/s
Iteration  25: 636804.247 ops/s
Iteration  26: 661207.824 ops/s
Iteration  27: 660541.879 ops/s
Iteration  28: 650722.159 ops/s
Iteration  29: 672597.793 ops/s
Iteration  30: 645706.441 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_normalEmitLast":
  658257.152 ±(99.9%) 10892.149 ops/s [Average]
  (min, avg, max) = (625979.298, 658257.152, 688769.418), stdev = 16302.857
  CI (99.9%): [647365.003, 669149.301] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score       Error  Units
ObservableThrottleLatestTest._Benchmark.benchmark_normalEmitLast  thrpt   30  658257.152 ± 10892.149  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_normal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_normal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71075.557 ops/s
# Warmup Iteration   2: 460194.022 ops/s
# Warmup Iteration   3: 623851.766 ops/s
# Warmup Iteration   4: 658232.113 ops/s
# Warmup Iteration   5: 671188.368 ops/s
# Warmup Iteration   6: 644796.503 ops/s
# Warmup Iteration   7: 668309.078 ops/s
# Warmup Iteration   8: 673027.677 ops/s
# Warmup Iteration   9: 646755.401 ops/s
# Warmup Iteration  10: 681934.810 ops/s
# Warmup Iteration  11: 667733.518 ops/s
# Warmup Iteration  12: 669589.001 ops/s
# Warmup Iteration  13: 608318.461 ops/s
# Warmup Iteration  14: 651811.575 ops/s
# Warmup Iteration  15: 615422.466 ops/s
# Warmup Iteration  16: 651855.607 ops/s
# Warmup Iteration  17: 666479.348 ops/s
# Warmup Iteration  18: 654019.350 ops/s
# Warmup Iteration  19: 667284.200 ops/s
# Warmup Iteration  20: 676807.454 ops/s
# Warmup Iteration  21: 644941.863 ops/s
# Warmup Iteration  22: 669177.898 ops/s
# Warmup Iteration  23: 642765.168 ops/s
# Warmup Iteration  24: 653690.587 ops/s
# Warmup Iteration  25: 643269.810 ops/s
# Warmup Iteration  26: 664887.546 ops/s
# Warmup Iteration  27: 674460.136 ops/s
# Warmup Iteration  28: 655293.314 ops/s
# Warmup Iteration  29: 637546.931 ops/s
# Warmup Iteration  30: 680832.775 ops/s
Iteration   1: 642371.231 ops/s
Iteration   2: 668846.306 ops/s
Iteration   3: 521055.816 ops/s
Iteration   4: 664173.175 ops/s
Iteration   5: 659020.518 ops/s
Iteration   6: 660861.133 ops/s
Iteration   7: 670012.051 ops/s
Iteration   8: 598511.149 ops/s
Iteration   9: 681345.265 ops/s
Iteration  10: 649507.009 ops/s
Iteration  11: 667169.025 ops/s
Iteration  12: 650656.834 ops/s
Iteration  13: 673833.110 ops/s
Iteration  14: 651723.495 ops/s
Iteration  15: 638495.375 ops/s
Iteration  16: 694006.839 ops/s
Iteration  17: 634696.146 ops/s
Iteration  18: 684772.009 ops/s
Iteration  19: 661182.085 ops/s
Iteration  20: 644816.956 ops/s
Iteration  21: 681015.054 ops/s
Iteration  22: 641176.153 ops/s
Iteration  23: 658509.348 ops/s
Iteration  24: 655870.535 ops/s
Iteration  25: 671060.170 ops/s
Iteration  26: 651907.226 ops/s
Iteration  27: 646085.890 ops/s
Iteration  28: 675162.662 ops/s
Iteration  29: 644296.356 ops/s
Iteration  30: 644326.206 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableThrottleLatestTest._Benchmark.benchmark_normal":
  652882.171 ±(99.9%) 20783.365 ops/s [Average]
  (min, avg, max) = (521055.816, 652882.171, 694006.839), stdev = 31107.564
  CI (99.9%): [632098.806, 673665.536] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt       Score       Error  Units
ObservableThrottleLatestTest._Benchmark.benchmark_normal  thrpt   30  652882.171 ± 20783.365  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 111824.972 ops/s
# Warmup Iteration   2: 459931.090 ops/s
# Warmup Iteration   3: 903453.898 ops/s
# Warmup Iteration   4: 1033262.776 ops/s
# Warmup Iteration   5: 1070281.294 ops/s
# Warmup Iteration   6: 1088632.722 ops/s
# Warmup Iteration   7: 1038007.882 ops/s
# Warmup Iteration   8: 1076977.395 ops/s
# Warmup Iteration   9: 1138572.687 ops/s
# Warmup Iteration  10: 1122484.433 ops/s
# Warmup Iteration  11: 1053659.494 ops/s
# Warmup Iteration  12: 1042128.822 ops/s
# Warmup Iteration  13: 1059346.072 ops/s
# Warmup Iteration  14: 1104749.560 ops/s
# Warmup Iteration  15: 1041052.075 ops/s
# Warmup Iteration  16: 1066713.340 ops/s
# Warmup Iteration  17: 1071270.290 ops/s
# Warmup Iteration  18: 1086975.586 ops/s
# Warmup Iteration  19: 1034735.672 ops/s
# Warmup Iteration  20: 1081405.632 ops/s
# Warmup Iteration  21: 1076503.003 ops/s
# Warmup Iteration  22: 1067575.752 ops/s
# Warmup Iteration  23: 1069884.639 ops/s
# Warmup Iteration  24: 1059350.908 ops/s
# Warmup Iteration  25: 1052467.967 ops/s
# Warmup Iteration  26: 1092815.129 ops/s
# Warmup Iteration  27: 1069773.278 ops/s
# Warmup Iteration  28: 1058835.557 ops/s
# Warmup Iteration  29: 1080500.363 ops/s
# Warmup Iteration  30: 1132891.044 ops/s
Iteration   1: 1132301.908 ops/s
Iteration   2: 1026821.566 ops/s
Iteration   3: 1092818.212 ops/s
Iteration   4: 1094158.369 ops/s
Iteration   5: 1059472.240 ops/s
Iteration   6: 1120464.598 ops/s
Iteration   7: 1089085.352 ops/s
Iteration   8: 1045831.111 ops/s
Iteration   9: 1061162.358 ops/s
Iteration  10: 1049703.968 ops/s
Iteration  11: 1077855.265 ops/s
Iteration  12: 1072553.532 ops/s
Iteration  13: 1078274.699 ops/s
Iteration  14: 1069049.898 ops/s
Iteration  15: 1026577.800 ops/s
Iteration  16: 1082201.774 ops/s
Iteration  17: 1074103.765 ops/s
Iteration  18: 1057041.539 ops/s
Iteration  19: 1116800.201 ops/s
Iteration  20: 1040373.378 ops/s
Iteration  21: 1104207.421 ops/s
Iteration  22: 1060253.870 ops/s
Iteration  23: 1065907.326 ops/s
Iteration  24: 1113290.653 ops/s
Iteration  25: 1091637.341 ops/s
Iteration  26: 1072210.994 ops/s
Iteration  27: 1110140.432 ops/s
Iteration  28: 1048137.918 ops/s
Iteration  29: 1109709.089 ops/s
Iteration  30: 1070190.490 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentOverlap":
  1077077.902 ±(99.9%) 18469.941 ops/s [Average]
  (min, avg, max) = (1026577.800, 1077077.902, 1132301.908), stdev = 27644.940
  CI (99.9%): [1058607.961, 1095547.843] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt        Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_cancelAfterAbandonmentOverlap  thrpt   30  1077077.902 ± 18469.941  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_takeOneNoCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_takeOneNoCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 113557.749 ops/s
# Warmup Iteration   2: 596039.671 ops/s
# Warmup Iteration   3: 1330381.298 ops/s
# Warmup Iteration   4: 1672869.191 ops/s
# Warmup Iteration   5: 1768591.537 ops/s
# Warmup Iteration   6: 1673476.971 ops/s
# Warmup Iteration   7: 1643866.541 ops/s
# Warmup Iteration   8: 1688125.890 ops/s
# Warmup Iteration   9: 1686648.051 ops/s
# Warmup Iteration  10: 1663547.559 ops/s
# Warmup Iteration  11: 1675218.022 ops/s
# Warmup Iteration  12: 1692200.885 ops/s
# Warmup Iteration  13: 1750749.234 ops/s
# Warmup Iteration  14: 1676170.141 ops/s
# Warmup Iteration  15: 1651600.381 ops/s
# Warmup Iteration  16: 1750199.583 ops/s
# Warmup Iteration  17: 1770703.189 ops/s
# Warmup Iteration  18: 1644970.355 ops/s
# Warmup Iteration  19: 1729975.858 ops/s
# Warmup Iteration  20: 1683051.486 ops/s
# Warmup Iteration  21: 1659319.776 ops/s
# Warmup Iteration  22: 1741478.074 ops/s
# Warmup Iteration  23: 1686243.296 ops/s
# Warmup Iteration  24: 1689525.024 ops/s
# Warmup Iteration  25: 1763710.552 ops/s
# Warmup Iteration  26: 1610689.869 ops/s
# Warmup Iteration  27: 1398257.108 ops/s
# Warmup Iteration  28: 1748881.902 ops/s
# Warmup Iteration  29: 1664422.517 ops/s
# Warmup Iteration  30: 1604082.661 ops/s
Iteration   1: 1717618.277 ops/s
Iteration   2: 1721464.764 ops/s
Iteration   3: 1708421.913 ops/s
Iteration   4: 1609208.934 ops/s
Iteration   5: 1713247.020 ops/s
Iteration   6: 1739508.605 ops/s
Iteration   7: 1673035.238 ops/s
Iteration   8: 1769820.690 ops/s
Iteration   9: 1731426.747 ops/s
Iteration  10: 1737431.016 ops/s
Iteration  11: 1679627.426 ops/s
Iteration  12: 1709659.399 ops/s
Iteration  13: 1705252.200 ops/s
Iteration  14: 1676041.922 ops/s
Iteration  15: 1695426.346 ops/s
Iteration  16: 1727412.899 ops/s
Iteration  17: 1588248.202 ops/s
Iteration  18: 1637736.543 ops/s
Iteration  19: 1758835.417 ops/s
Iteration  20: 1715018.070 ops/s
Iteration  21: 1687364.407 ops/s
Iteration  22: 1712771.182 ops/s
Iteration  23: 1779991.945 ops/s
Iteration  24: 1628945.296 ops/s
Iteration  25: 1791406.236 ops/s
Iteration  26: 1684171.514 ops/s
Iteration  27: 1710901.995 ops/s
Iteration  28: 1682262.773 ops/s
Iteration  29: 1659043.116 ops/s
Iteration  30: 1751683.024 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_takeOneNoCancel":
  1703432.771 ±(99.9%) 31764.471 ops/s [Average]
  (min, avg, max) = (1588248.202, 1703432.771, 1791406.236), stdev = 47543.569
  CI (99.9%): [1671668.299, 1735197.242] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_takeOneNoCancel  thrpt   30  1703432.771 ± 31764.471  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_takeNoCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_takeNoCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 218739.853 ops/s
# Warmup Iteration   2: 462051.402 ops/s
# Warmup Iteration   3: 1252728.207 ops/s
# Warmup Iteration   4: 1405450.142 ops/s
# Warmup Iteration   5: 1304895.726 ops/s
# Warmup Iteration   6: 1428782.702 ops/s
# Warmup Iteration   7: 1436849.803 ops/s
# Warmup Iteration   8: 1477307.819 ops/s
# Warmup Iteration   9: 1498200.340 ops/s
# Warmup Iteration  10: 1499293.842 ops/s
# Warmup Iteration  11: 1384913.487 ops/s
# Warmup Iteration  12: 1500229.831 ops/s
# Warmup Iteration  13: 1450914.268 ops/s
# Warmup Iteration  14: 1446553.005 ops/s
# Warmup Iteration  15: 1475149.628 ops/s
# Warmup Iteration  16: 1489246.017 ops/s
# Warmup Iteration  17: 1428655.319 ops/s
# Warmup Iteration  18: 1442203.872 ops/s
# Warmup Iteration  19: 1508902.226 ops/s
# Warmup Iteration  20: 1447094.849 ops/s
# Warmup Iteration  21: 1451745.661 ops/s
# Warmup Iteration  22: 1424827.778 ops/s
# Warmup Iteration  23: 1431529.583 ops/s
# Warmup Iteration  24: 1409410.082 ops/s
# Warmup Iteration  25: 1475893.651 ops/s
# Warmup Iteration  26: 1409078.502 ops/s
# Warmup Iteration  27: 1439649.067 ops/s
# Warmup Iteration  28: 1433229.459 ops/s
# Warmup Iteration  29: 1460029.660 ops/s
# Warmup Iteration  30: 1442707.078 ops/s
Iteration   1: 1471390.968 ops/s
Iteration   2: 1489360.085 ops/s
Iteration   3: 1445832.662 ops/s
Iteration   4: 1474207.343 ops/s
Iteration   5: 1434798.209 ops/s
Iteration   6: 1495466.812 ops/s
Iteration   7: 1449731.889 ops/s
Iteration   8: 1407645.237 ops/s
Iteration   9: 1505164.767 ops/s
Iteration  10: 1438546.699 ops/s
Iteration  11: 1475709.892 ops/s
Iteration  12: 1510257.345 ops/s
Iteration  13: 1407592.963 ops/s
Iteration  14: 1485113.207 ops/s
Iteration  15: 1485324.975 ops/s
Iteration  16: 1407039.000 ops/s
Iteration  17: 1490223.129 ops/s
Iteration  18: 1535723.942 ops/s
Iteration  19: 1426386.105 ops/s
Iteration  20: 1510232.044 ops/s
Iteration  21: 1503034.439 ops/s
Iteration  22: 1435855.466 ops/s
Iteration  23: 1458119.405 ops/s
Iteration  24: 1460915.801 ops/s
Iteration  25: 1482324.077 ops/s
Iteration  26: 1486510.901 ops/s
Iteration  27: 1456474.359 ops/s
Iteration  28: 1447255.472 ops/s
Iteration  29: 1481233.313 ops/s
Iteration  30: 1433156.477 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_takeNoCancel":
  1466354.233 ±(99.9%) 22299.395 ops/s [Average]
  (min, avg, max) = (1407039.000, 1466354.233, 1535723.942), stdev = 33376.687
  CI (99.9%): [1444054.838, 1488653.627] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
FlowableFromSourceTest._Benchmark.benchmark_takeNoCancel  thrpt   30  1466354.233 ± 22299.395  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 232820.418 ops/s
# Warmup Iteration   2: 691481.863 ops/s
# Warmup Iteration   3: 1025142.256 ops/s
# Warmup Iteration   4: 1369561.910 ops/s
# Warmup Iteration   5: 1732250.370 ops/s
# Warmup Iteration   6: 1633191.676 ops/s
# Warmup Iteration   7: 1694885.930 ops/s
# Warmup Iteration   8: 1724732.956 ops/s
# Warmup Iteration   9: 1674752.060 ops/s
# Warmup Iteration  10: 1728867.081 ops/s
# Warmup Iteration  11: 1653284.072 ops/s
# Warmup Iteration  12: 1661499.715 ops/s
# Warmup Iteration  13: 1790025.957 ops/s
# Warmup Iteration  14: 1660400.835 ops/s
# Warmup Iteration  15: 1670336.224 ops/s
# Warmup Iteration  16: 1648599.196 ops/s
# Warmup Iteration  17: 1753413.798 ops/s
# Warmup Iteration  18: 1738128.106 ops/s
# Warmup Iteration  19: 1635046.894 ops/s
# Warmup Iteration  20: 1754548.250 ops/s
# Warmup Iteration  21: 1567127.258 ops/s
# Warmup Iteration  22: 1373598.775 ops/s
# Warmup Iteration  23: 1655243.236 ops/s
# Warmup Iteration  24: 1653270.830 ops/s
# Warmup Iteration  25: 1725140.351 ops/s
# Warmup Iteration  26: 1571946.400 ops/s
# Warmup Iteration  27: 1731698.314 ops/s
# Warmup Iteration  28: 1653810.078 ops/s
# Warmup Iteration  29: 1705181.428 ops/s
# Warmup Iteration  30: 1671579.446 ops/s
Iteration   1: 1663747.579 ops/s
Iteration   2: 1769502.088 ops/s
Iteration   3: 1609449.702 ops/s
Iteration   4: 1721222.530 ops/s
Iteration   5: 1663936.213 ops/s
Iteration   6: 1653101.323 ops/s
Iteration   7: 1674999.045 ops/s
Iteration   8: 1730463.078 ops/s
Iteration   9: 1662427.643 ops/s
Iteration  10: 1701917.103 ops/s
Iteration  11: 1719713.351 ops/s
Iteration  12: 1650786.191 ops/s
Iteration  13: 1722627.341 ops/s
Iteration  14: 1626458.267 ops/s
Iteration  15: 1680505.360 ops/s
Iteration  16: 1740128.350 ops/s
Iteration  17: 1645582.378 ops/s
Iteration  18: 1702485.244 ops/s
Iteration  19: 1671145.007 ops/s
Iteration  20: 1707453.559 ops/s
Iteration  21: 1700674.345 ops/s
Iteration  22: 1696369.491 ops/s
Iteration  23: 1671043.333 ops/s
Iteration  24: 1699015.152 ops/s
Iteration  25: 1693189.504 ops/s
Iteration  26: 1664488.039 ops/s
Iteration  27: 1744702.987 ops/s
Iteration  28: 1639192.244 ops/s
Iteration  29: 1654638.946 ops/s
Iteration  30: 1753331.266 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionSize":
  1687809.889 ±(99.9%) 26065.664 ops/s [Average]
  (min, avg, max) = (1609449.702, 1687809.889, 1769502.088), stdev = 39013.862
  CI (99.9%): [1661744.224, 1713875.553] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt        Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_noHeadRetentionSize  thrpt   30  1687809.889 ± 26065.664  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorInline$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorInline

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 61167.744 ops/s
# Warmup Iteration   2: 396384.771 ops/s
# Warmup Iteration   3: 464415.249 ops/s
# Warmup Iteration   4: 433214.324 ops/s
# Warmup Iteration   5: 459577.644 ops/s
# Warmup Iteration   6: 479948.107 ops/s
# Warmup Iteration   7: 505479.390 ops/s
# Warmup Iteration   8: 489705.924 ops/s
# Warmup Iteration   9: 486647.338 ops/s
# Warmup Iteration  10: 488229.600 ops/s
# Warmup Iteration  11: 495551.104 ops/s
# Warmup Iteration  12: 488988.871 ops/s
# Warmup Iteration  13: 486615.129 ops/s
# Warmup Iteration  14: 510828.651 ops/s
# Warmup Iteration  15: 479608.786 ops/s
# Warmup Iteration  16: 486109.046 ops/s
# Warmup Iteration  17: 519048.222 ops/s
# Warmup Iteration  18: 509178.347 ops/s
# Warmup Iteration  19: 531062.458 ops/s
# Warmup Iteration  20: 513564.360 ops/s
# Warmup Iteration  21: 515775.569 ops/s
# Warmup Iteration  22: 522749.299 ops/s
# Warmup Iteration  23: 504621.267 ops/s
# Warmup Iteration  24: 511541.235 ops/s
# Warmup Iteration  25: 513895.843 ops/s
# Warmup Iteration  26: 511921.606 ops/s
# Warmup Iteration  27: 520178.143 ops/s
# Warmup Iteration  28: 495765.843 ops/s
# Warmup Iteration  29: 508800.052 ops/s
# Warmup Iteration  30: 511220.147 ops/s
Iteration   1: 496424.118 ops/s
Iteration   2: 514992.939 ops/s
Iteration   3: 507108.384 ops/s
Iteration   4: 515233.509 ops/s
Iteration   5: 515208.071 ops/s
Iteration   6: 509932.781 ops/s
Iteration   7: 520313.123 ops/s
Iteration   8: 497592.299 ops/s
Iteration   9: 529991.050 ops/s
Iteration  10: 490935.531 ops/s
Iteration  11: 514901.683 ops/s
Iteration  12: 528510.983 ops/s
Iteration  13: 496483.030 ops/s
Iteration  14: 518899.245 ops/s
Iteration  15: 499819.436 ops/s
Iteration  16: 515567.529 ops/s
Iteration  17: 534619.212 ops/s
Iteration  18: 495911.927 ops/s
Iteration  19: 510878.953 ops/s
Iteration  20: 532556.184 ops/s
Iteration  21: 499367.743 ops/s
Iteration  22: 525011.739 ops/s
Iteration  23: 502798.282 ops/s
Iteration  24: 502898.945 ops/s
Iteration  25: 516096.849 ops/s
Iteration  26: 525784.017 ops/s
Iteration  27: 500603.961 ops/s
Iteration  28: 528010.538 ops/s
Iteration  29: 501520.363 ops/s
Iteration  30: 506293.895 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSourceTest._Benchmark.benchmark_errorInline":
  511808.877 ±(99.9%) 8322.583 ops/s [Average]
  (min, avg, max) = (490935.531, 511808.877, 534619.212), stdev = 12456.851
  CI (99.9%): [503486.295, 520131.460] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
FlowableFromSourceTest._Benchmark.benchmark_errorInline  thrpt   30  511808.877 ± 8322.583  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableDisposeComposesThrough$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableDisposeComposesThrough

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 532257.542 ops/s
# Warmup Iteration   2: 3554619.876 ops/s
# Warmup Iteration   3: 4260171.347 ops/s
# Warmup Iteration   4: 4705468.775 ops/s
# Warmup Iteration   5: 4970824.893 ops/s
# Warmup Iteration   6: 4857469.647 ops/s
# Warmup Iteration   7: 4867231.249 ops/s
# Warmup Iteration   8: 4961529.752 ops/s
# Warmup Iteration   9: 4818651.799 ops/s
# Warmup Iteration  10: 4843393.658 ops/s
# Warmup Iteration  11: 4808962.409 ops/s
# Warmup Iteration  12: 4785010.002 ops/s
# Warmup Iteration  13: 5184868.986 ops/s
# Warmup Iteration  14: 4702554.477 ops/s
# Warmup Iteration  15: 5072113.778 ops/s
# Warmup Iteration  16: 3915628.982 ops/s
# Warmup Iteration  17: 4807699.675 ops/s
# Warmup Iteration  18: 4987054.207 ops/s
# Warmup Iteration  19: 4650218.133 ops/s
# Warmup Iteration  20: 5029524.042 ops/s
# Warmup Iteration  21: 4771331.836 ops/s
# Warmup Iteration  22: 4744759.053 ops/s
# Warmup Iteration  23: 4835348.062 ops/s
# Warmup Iteration  24: 4874529.635 ops/s
# Warmup Iteration  25: 4678665.705 ops/s
# Warmup Iteration  26: 4911812.463 ops/s
# Warmup Iteration  27: 5028231.444 ops/s
# Warmup Iteration  28: 4721917.080 ops/s
# Warmup Iteration  29: 5009973.684 ops/s
# Warmup Iteration  30: 4755454.121 ops/s
Iteration   1: 5031858.208 ops/s
Iteration   2: 4899683.736 ops/s
Iteration   3: 4883023.244 ops/s
Iteration   4: 4719609.338 ops/s
Iteration   5: 4944783.188 ops/s
Iteration   6: 5036378.700 ops/s
Iteration   7: 4709856.044 ops/s
Iteration   8: 4832674.346 ops/s
Iteration   9: 4944476.545 ops/s
Iteration  10: 4702629.587 ops/s
Iteration  11: 4840013.976 ops/s
Iteration  12: 4831631.984 ops/s
Iteration  13: 4904432.027 ops/s
Iteration  14: 4852632.917 ops/s
Iteration  15: 4933614.591 ops/s
Iteration  16: 4675909.527 ops/s
Iteration  17: 4900656.932 ops/s
Iteration  18: 4778253.512 ops/s
Iteration  19: 4989038.681 ops/s
Iteration  20: 4833712.280 ops/s
Iteration  21: 4822837.535 ops/s
Iteration  22: 4960156.742 ops/s
Iteration  23: 4819068.009 ops/s
Iteration  24: 4985075.056 ops/s
Iteration  25: 4763771.049 ops/s
Iteration  26: 4759916.471 ops/s
Iteration  27: 4929961.830 ops/s
Iteration  28: 4738712.877 ops/s
Iteration  29: 4714395.018 ops/s
Iteration  30: 4744460.861 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_fromFlowableDisposeComposesThrough":
  4849440.827 ±(99.9%) 69285.447 ops/s [Average]
  (min, avg, max) = (4675909.527, 4849440.827, 5036378.700), stdev = 103703.204
  CI (99.9%): [4780155.380, 4918726.274] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_fromFlowableDisposeComposesThrough  thrpt   30  4849440.827 ± 69285.447  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 317529.834 ops/s
# Warmup Iteration   2: 910417.723 ops/s
# Warmup Iteration   3: 1107774.454 ops/s
# Warmup Iteration   4: 1537284.425 ops/s
# Warmup Iteration   5: 1464554.430 ops/s
# Warmup Iteration   6: 1798880.245 ops/s
# Warmup Iteration   7: 1745671.474 ops/s
# Warmup Iteration   8: 1675611.934 ops/s
# Warmup Iteration   9: 1709880.229 ops/s
# Warmup Iteration  10: 1797106.116 ops/s
# Warmup Iteration  11: 1703814.262 ops/s
# Warmup Iteration  12: 1799767.621 ops/s
# Warmup Iteration  13: 1686397.179 ops/s
# Warmup Iteration  14: 1731407.016 ops/s
# Warmup Iteration  15: 1710964.035 ops/s
# Warmup Iteration  16: 1790128.005 ops/s
# Warmup Iteration  17: 1716005.983 ops/s
# Warmup Iteration  18: 1724385.580 ops/s
# Warmup Iteration  19: 1763062.557 ops/s
# Warmup Iteration  20: 1687504.622 ops/s
# Warmup Iteration  21: 1781272.007 ops/s
# Warmup Iteration  22: 1760843.129 ops/s
# Warmup Iteration  23: 1711622.473 ops/s
# Warmup Iteration  24: 1703523.718 ops/s
# Warmup Iteration  25: 1740497.536 ops/s
# Warmup Iteration  26: 1754326.852 ops/s
# Warmup Iteration  27: 1769851.998 ops/s
# Warmup Iteration  28: 1646202.134 ops/s
# Warmup Iteration  29: 1802169.391 ops/s
# Warmup Iteration  30: 1704369.936 ops/s
Iteration   1: 1784830.389 ops/s
Iteration   2: 1785617.506 ops/s
Iteration   3: 1658892.589 ops/s
Iteration   4: 1789627.143 ops/s
Iteration   5: 1687171.819 ops/s
Iteration   6: 1762443.000 ops/s
Iteration   7: 1689857.915 ops/s
Iteration   8: 1693402.192 ops/s
Iteration   9: 1768016.681 ops/s
Iteration  10: 1667537.006 ops/s
Iteration  11: 1729948.194 ops/s
Iteration  12: 1783288.598 ops/s
Iteration  13: 1710084.600 ops/s
Iteration  14: 1751475.416 ops/s
Iteration  15: 1778734.974 ops/s
Iteration  16: 1710731.102 ops/s
Iteration  17: 1727910.717 ops/s
Iteration  18: 1804854.781 ops/s
Iteration  19: 1683035.839 ops/s
Iteration  20: 1757983.018 ops/s
Iteration  21: 1725015.989 ops/s
Iteration  22: 1709401.945 ops/s
Iteration  23: 1798409.495 ops/s
Iteration  24: 1723008.455 ops/s
Iteration  25: 1762292.755 ops/s
Iteration  26: 1696446.614 ops/s
Iteration  27: 1728699.730 ops/s
Iteration  28: 1797530.205 ops/s
Iteration  29: 1791159.363 ops/s
Iteration  30: 1727806.090 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_noHeadRetentionSize":
  1739507.137 ±(99.9%) 28797.681 ops/s [Average]
  (min, avg, max) = (1658892.589, 1739507.137, 1804854.781), stdev = 43103.016
  CI (99.9%): [1710709.456, 1768304.818] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt        Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_noHeadRetentionSize  thrpt   30  1739507.137 ± 28797.681  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfront$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfront

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 587553.249 ops/s
# Warmup Iteration   2: 2810247.218 ops/s
# Warmup Iteration   3: 3270151.226 ops/s
# Warmup Iteration   4: 3780847.944 ops/s
# Warmup Iteration   5: 3971915.786 ops/s
# Warmup Iteration   6: 3915064.786 ops/s
# Warmup Iteration   7: 3711705.834 ops/s
# Warmup Iteration   8: 3897228.005 ops/s
# Warmup Iteration   9: 3812265.587 ops/s
# Warmup Iteration  10: 3451572.066 ops/s
# Warmup Iteration  11: 3277047.535 ops/s
# Warmup Iteration  12: 3946389.337 ops/s
# Warmup Iteration  13: 3649574.768 ops/s
# Warmup Iteration  14: 3893523.093 ops/s
# Warmup Iteration  15: 3734372.286 ops/s
# Warmup Iteration  16: 3798349.575 ops/s
# Warmup Iteration  17: 4006332.600 ops/s
# Warmup Iteration  18: 3653929.661 ops/s
# Warmup Iteration  19: 3800795.356 ops/s
# Warmup Iteration  20: 3872944.444 ops/s
# Warmup Iteration  21: 3839798.423 ops/s
# Warmup Iteration  22: 3928020.515 ops/s
# Warmup Iteration  23: 3660135.362 ops/s
# Warmup Iteration  24: 3784839.861 ops/s
# Warmup Iteration  25: 3925617.386 ops/s
# Warmup Iteration  26: 3686646.449 ops/s
# Warmup Iteration  27: 3754365.468 ops/s
# Warmup Iteration  28: 3771703.378 ops/s
# Warmup Iteration  29: 3748376.728 ops/s
# Warmup Iteration  30: 3921388.251 ops/s
Iteration   1: 3792604.318 ops/s
Iteration   2: 3806825.055 ops/s
Iteration   3: 3770417.268 ops/s
Iteration   4: 3861466.332 ops/s
Iteration   5: 3817285.745 ops/s
Iteration   6: 3716406.603 ops/s
Iteration   7: 3966730.054 ops/s
Iteration   8: 3833602.452 ops/s
Iteration   9: 3813915.661 ops/s
Iteration  10: 3727977.226 ops/s
Iteration  11: 3835691.306 ops/s
Iteration  12: 3855242.013 ops/s
Iteration  13: 3811378.219 ops/s
Iteration  14: 3994372.197 ops/s
Iteration  15: 3911758.486 ops/s
Iteration  16: 3703114.190 ops/s
Iteration  17: 3806170.430 ops/s
Iteration  18: 3753838.327 ops/s
Iteration  19: 3803889.730 ops/s
Iteration  20: 3661575.845 ops/s
Iteration  21: 3815865.335 ops/s
Iteration  22: 3907123.978 ops/s
Iteration  23: 3582426.581 ops/s
Iteration  24: 3911780.612 ops/s
Iteration  25: 3633652.091 ops/s
Iteration  26: 3853966.987 ops/s
Iteration  27: 3733838.952 ops/s
Iteration  28: 3807787.508 ops/s
Iteration  29: 3938759.830 ops/s
Iteration  30: 3893458.379 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfront":
  3810764.057 ±(99.9%) 63613.406 ops/s [Average]
  (min, avg, max) = (3582426.581, 3810764.057, 3994372.197), stdev = 95213.559
  CI (99.9%): [3747150.651, 3874377.463] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfront  thrpt   30  3810764.057 ± 63613.406  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_disposeNoNeedForReset$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_disposeNoNeedForReset

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 183004.411 ops/s
# Warmup Iteration   2: 841977.542 ops/s
# Warmup Iteration   3: 1044191.596 ops/s
# Warmup Iteration   4: 1259891.600 ops/s
# Warmup Iteration   5: 1331632.488 ops/s
# Warmup Iteration   6: 1261077.090 ops/s
# Warmup Iteration   7: 1360247.029 ops/s
# Warmup Iteration   8: 1266689.886 ops/s
# Warmup Iteration   9: 1290278.100 ops/s
# Warmup Iteration  10: 1289442.853 ops/s
# Warmup Iteration  11: 1330482.560 ops/s
# Warmup Iteration  12: 1259919.355 ops/s
# Warmup Iteration  13: 1346200.604 ops/s
# Warmup Iteration  14: 1245650.366 ops/s
# Warmup Iteration  15: 1336948.970 ops/s
# Warmup Iteration  16: 1332565.622 ops/s
# Warmup Iteration  17: 1288259.043 ops/s
# Warmup Iteration  18: 1259110.904 ops/s
# Warmup Iteration  19: 1290457.471 ops/s
# Warmup Iteration  20: 1346428.078 ops/s
# Warmup Iteration  21: 1272255.874 ops/s
# Warmup Iteration  22: 1355734.093 ops/s
# Warmup Iteration  23: 1343450.072 ops/s
# Warmup Iteration  24: 1315595.078 ops/s
# Warmup Iteration  25: 1256856.414 ops/s
# Warmup Iteration  26: 1298208.627 ops/s
# Warmup Iteration  27: 1337955.778 ops/s
# Warmup Iteration  28: 1260620.709 ops/s
# Warmup Iteration  29: 1330216.963 ops/s
# Warmup Iteration  30: 1338678.690 ops/s
Iteration   1: 1274753.558 ops/s
Iteration   2: 1321562.470 ops/s
Iteration   3: 1298951.353 ops/s
Iteration   4: 1255090.956 ops/s
Iteration   5: 1338611.606 ops/s
Iteration   6: 1252417.148 ops/s
Iteration   7: 1342080.270 ops/s
Iteration   8: 1276958.903 ops/s
Iteration   9: 1344483.311 ops/s
Iteration  10: 1341926.925 ops/s
Iteration  11: 1232738.579 ops/s
Iteration  12: 1367568.327 ops/s
Iteration  13: 1302447.908 ops/s
Iteration  14: 1317661.109 ops/s
Iteration  15: 1302906.806 ops/s
Iteration  16: 1296117.462 ops/s
Iteration  17: 1323866.794 ops/s
Iteration  18: 1239236.292 ops/s
Iteration  19: 1309191.004 ops/s
Iteration  20: 1316201.849 ops/s
Iteration  21: 1348467.587 ops/s
Iteration  22: 1284280.629 ops/s
Iteration  23: 1306362.749 ops/s
Iteration  24: 1303595.304 ops/s
Iteration  25: 1260450.101 ops/s
Iteration  26: 1331104.855 ops/s
Iteration  27: 1300626.782 ops/s
Iteration  28: 1330210.739 ops/s
Iteration  29: 1282271.871 ops/s
Iteration  30: 1255598.392 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_disposeNoNeedForReset":
  1301924.721 ±(99.9%) 23284.145 ops/s [Average]
  (min, avg, max) = (1232738.579, 1301924.721, 1367568.327), stdev = 34850.614
  CI (99.9%): [1278640.577, 1325208.866] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_disposeNoNeedForReset  thrpt   30  1301924.721 ± 23284.145  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_crossCancelOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_crossCancelOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 191844.048 ops/s
# Warmup Iteration   2: 745759.726 ops/s
# Warmup Iteration   3: 999241.329 ops/s
# Warmup Iteration   4: 1172518.734 ops/s
# Warmup Iteration   5: 925312.230 ops/s
# Warmup Iteration   6: 1139489.738 ops/s
# Warmup Iteration   7: 1230062.176 ops/s
# Warmup Iteration   8: 1228572.271 ops/s
# Warmup Iteration   9: 1156769.832 ops/s
# Warmup Iteration  10: 1186214.687 ops/s
# Warmup Iteration  11: 1228417.180 ops/s
# Warmup Iteration  12: 1220676.889 ops/s
# Warmup Iteration  13: 1157377.132 ops/s
# Warmup Iteration  14: 1207889.282 ops/s
# Warmup Iteration  15: 1236581.417 ops/s
# Warmup Iteration  16: 1183909.017 ops/s
# Warmup Iteration  17: 1191596.989 ops/s
# Warmup Iteration  18: 1224210.177 ops/s
# Warmup Iteration  19: 1180901.146 ops/s
# Warmup Iteration  20: 1214712.628 ops/s
# Warmup Iteration  21: 1238093.013 ops/s
# Warmup Iteration  22: 1161977.031 ops/s
# Warmup Iteration  23: 1211632.109 ops/s
# Warmup Iteration  24: 1223833.386 ops/s
# Warmup Iteration  25: 1201332.120 ops/s
# Warmup Iteration  26: 1178671.892 ops/s
# Warmup Iteration  27: 1222657.956 ops/s
# Warmup Iteration  28: 1138043.567 ops/s
# Warmup Iteration  29: 1222962.109 ops/s
# Warmup Iteration  30: 1223912.780 ops/s
Iteration   1: 1181562.460 ops/s
Iteration   2: 1188770.088 ops/s
Iteration   3: 1192814.301 ops/s
Iteration   4: 1176028.884 ops/s
Iteration   5: 1238504.617 ops/s
Iteration   6: 1148722.513 ops/s
Iteration   7: 1244332.017 ops/s
Iteration   8: 1176601.096 ops/s
Iteration   9: 1227756.498 ops/s
Iteration  10: 1190793.021 ops/s
Iteration  11: 1163832.780 ops/s
Iteration  12: 1247603.572 ops/s
Iteration  13: 1164116.405 ops/s
Iteration  14: 1179156.243 ops/s
Iteration  15: 1182573.639 ops/s
Iteration  16: 1219307.531 ops/s
Iteration  17: 1116210.791 ops/s
Iteration  18: 1201564.448 ops/s
Iteration  19: 1203847.355 ops/s
Iteration  20: 1172968.863 ops/s
Iteration  21: 1214775.215 ops/s
Iteration  22: 1148099.862 ops/s
Iteration  23: 1191101.518 ops/s
Iteration  24: 1231295.635 ops/s
Iteration  25: 1155528.123 ops/s
Iteration  26: 1208124.043 ops/s
Iteration  27: 1218518.440 ops/s
Iteration  28: 1197435.198 ops/s
Iteration  29: 1185484.494 ops/s
Iteration  30: 1178345.600 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_crossCancelOnComplete":
  1191525.842 ±(99.9%) 20462.400 ops/s [Average]
  (min, avg, max) = (1116210.791, 1191525.842, 1247603.572), stdev = 30627.159
  CI (99.9%): [1171063.442, 1211988.242] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_crossCancelOnComplete  thrpt   30  1191525.842 ± 20462.400  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForReset$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForReset

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 125736.289 ops/s
# Warmup Iteration   2: 392690.694 ops/s
# Warmup Iteration   3: 667642.375 ops/s
# Warmup Iteration   4: 860952.076 ops/s
# Warmup Iteration   5: 827412.038 ops/s
# Warmup Iteration   6: 795360.861 ops/s
# Warmup Iteration   7: 929676.759 ops/s
# Warmup Iteration   8: 952497.964 ops/s
# Warmup Iteration   9: 927914.048 ops/s
# Warmup Iteration  10: 920939.929 ops/s
# Warmup Iteration  11: 938717.313 ops/s
# Warmup Iteration  12: 918619.613 ops/s
# Warmup Iteration  13: 944492.393 ops/s
# Warmup Iteration  14: 924710.590 ops/s
# Warmup Iteration  15: 932162.987 ops/s
# Warmup Iteration  16: 929839.760 ops/s
# Warmup Iteration  17: 927407.980 ops/s
# Warmup Iteration  18: 937780.304 ops/s
# Warmup Iteration  19: 896464.958 ops/s
# Warmup Iteration  20: 969397.682 ops/s
# Warmup Iteration  21: 922150.384 ops/s
# Warmup Iteration  22: 920714.069 ops/s
# Warmup Iteration  23: 935724.594 ops/s
# Warmup Iteration  24: 898806.093 ops/s
# Warmup Iteration  25: 916904.057 ops/s
# Warmup Iteration  26: 941296.140 ops/s
# Warmup Iteration  27: 900790.640 ops/s
# Warmup Iteration  28: 960661.195 ops/s
# Warmup Iteration  29: 911554.547 ops/s
# Warmup Iteration  30: 928618.195 ops/s
Iteration   1: 927395.327 ops/s
Iteration   2: 939134.697 ops/s
Iteration   3: 920530.471 ops/s
Iteration   4: 900008.855 ops/s
Iteration   5: 955788.419 ops/s
Iteration   6: 905735.179 ops/s
Iteration   7: 907846.416 ops/s
Iteration   8: 938895.926 ops/s
Iteration   9: 914269.803 ops/s
Iteration  10: 945406.085 ops/s
Iteration  11: 896972.155 ops/s
Iteration  12: 970339.441 ops/s
Iteration  13: 918302.909 ops/s
Iteration  14: 931397.132 ops/s
Iteration  15: 890688.539 ops/s
Iteration  16: 933754.219 ops/s
Iteration  17: 919488.699 ops/s
Iteration  18: 941370.104 ops/s
Iteration  19: 963428.345 ops/s
Iteration  20: 898138.678 ops/s
Iteration  21: 955299.491 ops/s
Iteration  22: 900217.317 ops/s
Iteration  23: 946203.605 ops/s
Iteration  24: 915681.201 ops/s
Iteration  25: 906189.306 ops/s
Iteration  26: 964915.203 ops/s
Iteration  27: 904115.874 ops/s
Iteration  28: 955775.903 ops/s
Iteration  29: 910091.289 ops/s
Iteration  30: 906014.830 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForReset":
  926113.181 ±(99.9%) 15599.777 ops/s [Average]
  (min, avg, max) = (890688.539, 926113.181, 970339.441), stdev = 23349.014
  CI (99.9%): [910513.403, 941712.958] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_disposeNoNeedForReset  thrpt   30  926113.181 ± 15599.777  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeResets$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeResets

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 173970.072 ops/s
# Warmup Iteration   2: 470833.562 ops/s
# Warmup Iteration   3: 838233.460 ops/s
# Warmup Iteration   4: 974535.934 ops/s
# Warmup Iteration   5: 1020000.398 ops/s
# Warmup Iteration   6: 1022326.277 ops/s
# Warmup Iteration   7: 965023.311 ops/s
# Warmup Iteration   8: 1015753.738 ops/s
# Warmup Iteration   9: 971518.528 ops/s
# Warmup Iteration  10: 956974.129 ops/s
# Warmup Iteration  11: 990134.905 ops/s
# Warmup Iteration  12: 973541.072 ops/s
# Warmup Iteration  13: 981448.661 ops/s
# Warmup Iteration  14: 998012.746 ops/s
# Warmup Iteration  15: 980448.812 ops/s
# Warmup Iteration  16: 1017769.674 ops/s
# Warmup Iteration  17: 964397.616 ops/s
# Warmup Iteration  18: 1012641.113 ops/s
# Warmup Iteration  19: 946901.325 ops/s
# Warmup Iteration  20: 965553.913 ops/s
# Warmup Iteration  21: 1008799.875 ops/s
# Warmup Iteration  22: 978454.871 ops/s
# Warmup Iteration  23: 977412.732 ops/s
# Warmup Iteration  24: 958244.926 ops/s
# Warmup Iteration  25: 971168.787 ops/s
# Warmup Iteration  26: 1003340.645 ops/s
# Warmup Iteration  27: 969505.800 ops/s
# Warmup Iteration  28: 981161.343 ops/s
# Warmup Iteration  29: 1014005.577 ops/s
# Warmup Iteration  30: 986360.155 ops/s
Iteration   1: 996789.701 ops/s
Iteration   2: 988975.094 ops/s
Iteration   3: 989598.530 ops/s
Iteration   4: 969736.413 ops/s
Iteration   5: 960232.733 ops/s
Iteration   6: 1022681.398 ops/s
Iteration   7: 1008069.478 ops/s
Iteration   8: 982685.450 ops/s
Iteration   9: 1011960.068 ops/s
Iteration  10: 996498.983 ops/s
Iteration  11: 978453.403 ops/s
Iteration  12: 985386.310 ops/s
Iteration  13: 957910.370 ops/s
Iteration  14: 939785.367 ops/s
Iteration  15: 976318.483 ops/s
Iteration  16: 1008159.086 ops/s
Iteration  17: 974703.647 ops/s
Iteration  18: 978237.412 ops/s
Iteration  19: 988375.476 ops/s
Iteration  20: 982716.767 ops/s
Iteration  21: 999339.079 ops/s
Iteration  22: 1021970.688 ops/s
Iteration  23: 971234.857 ops/s
Iteration  24: 1010315.985 ops/s
Iteration  25: 998495.908 ops/s
Iteration  26: 993354.409 ops/s
Iteration  27: 979211.948 ops/s
Iteration  28: 932311.533 ops/s
Iteration  29: 1004026.409 ops/s
Iteration  30: 967187.443 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_disposeResets":
  985824.081 ±(99.9%) 14448.907 ops/s [Average]
  (min, avg, max) = (932311.533, 985824.081, 1022681.398), stdev = 21626.445
  CI (99.9%): [971375.174, 1000272.988] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_disposeResets  thrpt   30  985824.081 ± 14448.907  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfrontFallback$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfrontFallback

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 683954.932 ops/s
# Warmup Iteration   2: 2639196.983 ops/s
# Warmup Iteration   3: 3117384.047 ops/s
# Warmup Iteration   4: 3553101.727 ops/s
# Warmup Iteration   5: 3581874.612 ops/s
# Warmup Iteration   6: 3506281.330 ops/s
# Warmup Iteration   7: 3641652.880 ops/s
# Warmup Iteration   8: 3605622.351 ops/s
# Warmup Iteration   9: 3491542.881 ops/s
# Warmup Iteration  10: 3650668.696 ops/s
# Warmup Iteration  11: 3601861.799 ops/s
# Warmup Iteration  12: 3398968.164 ops/s
# Warmup Iteration  13: 3662007.429 ops/s
# Warmup Iteration  14: 3471344.959 ops/s
# Warmup Iteration  15: 3631924.321 ops/s
# Warmup Iteration  16: 3571763.893 ops/s
# Warmup Iteration  17: 3589037.381 ops/s
# Warmup Iteration  18: 3646175.960 ops/s
# Warmup Iteration  19: 3551054.440 ops/s
# Warmup Iteration  20: 3679484.207 ops/s
# Warmup Iteration  21: 3530183.931 ops/s
# Warmup Iteration  22: 3599819.695 ops/s
# Warmup Iteration  23: 3471054.521 ops/s
# Warmup Iteration  24: 3485005.811 ops/s
# Warmup Iteration  25: 3712869.298 ops/s
# Warmup Iteration  26: 3507693.699 ops/s
# Warmup Iteration  27: 3661515.280 ops/s
# Warmup Iteration  28: 3514638.465 ops/s
# Warmup Iteration  29: 3665039.369 ops/s
# Warmup Iteration  30: 3452813.892 ops/s
Iteration   1: 3587457.345 ops/s
Iteration   2: 3588077.080 ops/s
Iteration   3: 3612649.986 ops/s
Iteration   4: 3504893.628 ops/s
Iteration   5: 3719216.151 ops/s
Iteration   6: 3628774.975 ops/s
Iteration   7: 3511776.790 ops/s
Iteration   8: 3677252.345 ops/s
Iteration   9: 3497899.160 ops/s
Iteration  10: 3616204.899 ops/s
Iteration  11: 3526270.783 ops/s
Iteration  12: 3621314.597 ops/s
Iteration  13: 3466039.166 ops/s
Iteration  14: 3474182.032 ops/s
Iteration  15: 3470343.008 ops/s
Iteration  16: 3648205.591 ops/s
Iteration  17: 3528328.596 ops/s
Iteration  18: 3534836.274 ops/s
Iteration  19: 3737196.926 ops/s
Iteration  20: 3456026.854 ops/s
Iteration  21: 3633767.973 ops/s
Iteration  22: 3452140.836 ops/s
Iteration  23: 3604194.326 ops/s
Iteration  24: 3556127.040 ops/s
Iteration  25: 3270482.146 ops/s
Iteration  26: 2843140.693 ops/s
Iteration  27: 3443266.032 ops/s
Iteration  28: 3593526.078 ops/s
Iteration  29: 3611209.488 ops/s
Iteration  30: 3687414.833 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfrontFallback":
  3536740.521 ±(99.9%) 109248.302 ops/s [Average]
  (min, avg, max) = (2843140.693, 3536740.521, 3737196.926), stdev = 163517.728
  CI (99.9%): [3427492.219, 3645988.823] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score        Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_disposedUpfrontFallback  thrpt   30  3536740.521 ± 109248.302  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_crossCancelOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_crossCancelOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 96265.076 ops/s
# Warmup Iteration   2: 290730.897 ops/s
# Warmup Iteration   3: 446999.583 ops/s
# Warmup Iteration   4: 405552.252 ops/s
# Warmup Iteration   5: 461880.570 ops/s
# Warmup Iteration   6: 432470.359 ops/s
# Warmup Iteration   7: 444644.218 ops/s
# Warmup Iteration   8: 404334.656 ops/s
# Warmup Iteration   9: 426670.181 ops/s
# Warmup Iteration  10: 445764.541 ops/s
# Warmup Iteration  11: 464573.723 ops/s
# Warmup Iteration  12: 437434.732 ops/s
# Warmup Iteration  13: 467769.626 ops/s
# Warmup Iteration  14: 464500.209 ops/s
# Warmup Iteration  15: 440789.895 ops/s
# Warmup Iteration  16: 458379.865 ops/s
# Warmup Iteration  17: 462096.379 ops/s
# Warmup Iteration  18: 472278.698 ops/s
# Warmup Iteration  19: 482545.528 ops/s
# Warmup Iteration  20: 488654.574 ops/s
# Warmup Iteration  21: 457934.642 ops/s
# Warmup Iteration  22: 486543.062 ops/s
# Warmup Iteration  23: 470144.355 ops/s
# Warmup Iteration  24: 456851.940 ops/s
# Warmup Iteration  25: 458873.969 ops/s
# Warmup Iteration  26: 470200.022 ops/s
# Warmup Iteration  27: 454830.307 ops/s
# Warmup Iteration  28: 472290.701 ops/s
# Warmup Iteration  29: 459950.480 ops/s
# Warmup Iteration  30: 472116.074 ops/s
Iteration   1: 459056.847 ops/s
Iteration   2: 466069.848 ops/s
Iteration   3: 486671.236 ops/s
Iteration   4: 462340.803 ops/s
Iteration   5: 478663.456 ops/s
Iteration   6: 464123.227 ops/s
Iteration   7: 470334.430 ops/s
Iteration   8: 479453.359 ops/s
Iteration   9: 464726.153 ops/s
Iteration  10: 482928.661 ops/s
Iteration  11: 447191.938 ops/s
Iteration  12: 470067.138 ops/s
Iteration  13: 468578.840 ops/s
Iteration  14: 451319.338 ops/s
Iteration  15: 480844.561 ops/s
Iteration  16: 481307.327 ops/s
Iteration  17: 463683.809 ops/s
Iteration  18: 481588.239 ops/s
Iteration  19: 486785.188 ops/s
Iteration  20: 453551.516 ops/s
Iteration  21: 485006.214 ops/s
Iteration  22: 477294.001 ops/s
Iteration  23: 470545.217 ops/s
Iteration  24: 479318.613 ops/s
Iteration  25: 467759.205 ops/s
Iteration  26: 474949.408 ops/s
Iteration  27: 485017.973 ops/s
Iteration  28: 459612.205 ops/s
Iteration  29: 479117.317 ops/s
Iteration  30: 461794.957 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_crossCancelOnError":
  471323.367 ±(99.9%) 7376.791 ops/s [Average]
  (min, avg, max) = (447191.938, 471323.367, 486785.188), stdev = 11041.235
  CI (99.9%): [463946.576, 478700.159] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                     Mode  Cnt       Score      Error  Units
FlowablePublishTest._Benchmark.benchmark_crossCancelOnError  thrpt   30  471323.367 ± 7376.791  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactBoundarySecondBufferCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactBoundarySecondBufferCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.651 ops/s
# Warmup Iteration   2: 14262.899 ops/s
# Warmup Iteration   3: 73171.639 ops/s
# Warmup Iteration   4: 78340.950 ops/s
# Warmup Iteration   5: 63019.302 ops/s
# Warmup Iteration   6: 92770.142 ops/s
# Warmup Iteration   7: 105082.698 ops/s
# Warmup Iteration   8: 96417.635 ops/s
# Warmup Iteration   9: 289278.638 ops/s
# Warmup Iteration  10: 264867.594 ops/s
# Warmup Iteration  11: 303032.173 ops/s
# Warmup Iteration  12: 290411.899 ops/s
# Warmup Iteration  13: 298315.194 ops/s
# Warmup Iteration  14: 300997.127 ops/s
# Warmup Iteration  15: 293618.311 ops/s
# Warmup Iteration  16: 299053.548 ops/s
# Warmup Iteration  17: 287166.667 ops/s
# Warmup Iteration  18: 310759.734 ops/s
# Warmup Iteration  19: 299133.479 ops/s
# Warmup Iteration  20: 289881.560 ops/s
# Warmup Iteration  21: 304374.371 ops/s
# Warmup Iteration  22: 293923.051 ops/s
# Warmup Iteration  23: 294441.341 ops/s
# Warmup Iteration  24: 298294.408 ops/s
# Warmup Iteration  25: 298506.924 ops/s
# Warmup Iteration  26: 295410.722 ops/s
# Warmup Iteration  27: 308086.029 ops/s
# Warmup Iteration  28: 295921.347 ops/s
# Warmup Iteration  29: 295017.361 ops/s
# Warmup Iteration  30: 302947.442 ops/s
Iteration   1: 294549.984 ops/s
Iteration   2: 290944.382 ops/s
Iteration   3: 284206.055 ops/s
Iteration   4: 307370.493 ops/s
Iteration   5: 303038.779 ops/s
Iteration   6: 287380.242 ops/s
Iteration   7: 301553.197 ops/s
Iteration   8: 290987.199 ops/s
Iteration   9: 305605.130 ops/s
Iteration  10: 297183.363 ops/s
Iteration  11: 296384.817 ops/s
Iteration  12: 306379.668 ops/s
Iteration  13: 291211.679 ops/s
Iteration  14: 299878.878 ops/s
Iteration  15: 301699.857 ops/s
Iteration  16: 291544.673 ops/s
Iteration  17: 302583.535 ops/s
Iteration  18: 301753.000 ops/s
Iteration  19: 301284.236 ops/s
Iteration  20: 234108.448 ops/s
Iteration  21: 300270.634 ops/s
Iteration  22: 307250.640 ops/s
Iteration  23: 296858.503 ops/s
Iteration  24: 308489.168 ops/s
Iteration  25: 306044.298 ops/s
Iteration  26: 295674.422 ops/s
Iteration  27: 302001.436 ops/s
Iteration  28: 290092.937 ops/s
Iteration  29: 304726.736 ops/s
Iteration  30: 309769.611 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactBoundarySecondBufferCrash":
  297027.533 ±(99.9%) 9125.485 ops/s [Average]
  (min, avg, max) = (234108.448, 297027.533, 309769.611), stdev = 13658.597
  CI (99.9%): [287902.048, 306153.018] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferExactBoundarySecondBufferCrash  thrpt   30  297027.533 ± 9125.485  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_errorAfterCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_errorAfterCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 41396.807 ops/s
# Warmup Iteration   2: 102256.862 ops/s
# Warmup Iteration   3: 193520.092 ops/s
# Warmup Iteration   4: 215844.883 ops/s
# Warmup Iteration   5: 220181.534 ops/s
# Warmup Iteration   6: 230915.275 ops/s
# Warmup Iteration   7: 232734.784 ops/s
# Warmup Iteration   8: 246899.292 ops/s
# Warmup Iteration   9: 228144.400 ops/s
# Warmup Iteration  10: 240853.063 ops/s
# Warmup Iteration  11: 232558.968 ops/s
# Warmup Iteration  12: 242522.928 ops/s
# Warmup Iteration  13: 242257.802 ops/s
# Warmup Iteration  14: 243230.893 ops/s
# Warmup Iteration  15: 233871.719 ops/s
# Warmup Iteration  16: 240884.224 ops/s
# Warmup Iteration  17: 236966.184 ops/s
# Warmup Iteration  18: 245500.152 ops/s
# Warmup Iteration  19: 255460.688 ops/s
# Warmup Iteration  20: 250071.325 ops/s
# Warmup Iteration  21: 244933.708 ops/s
# Warmup Iteration  22: 248141.861 ops/s
# Warmup Iteration  23: 242817.662 ops/s
# Warmup Iteration  24: 251710.470 ops/s
# Warmup Iteration  25: 241664.621 ops/s
# Warmup Iteration  26: 245255.371 ops/s
# Warmup Iteration  27: 252353.076 ops/s
# Warmup Iteration  28: 242826.153 ops/s
# Warmup Iteration  29: 255479.069 ops/s
# Warmup Iteration  30: 257958.660 ops/s
Iteration   1: 236070.750 ops/s
Iteration   2: 252739.997 ops/s
Iteration   3: 239891.732 ops/s
Iteration   4: 242275.822 ops/s
Iteration   5: 255861.482 ops/s
Iteration   6: 235794.425 ops/s
Iteration   7: 254964.727 ops/s
Iteration   8: 239718.747 ops/s
Iteration   9: 243578.295 ops/s
Iteration  10: 257452.121 ops/s
Iteration  11: 242146.884 ops/s
Iteration  12: 239009.130 ops/s
Iteration  13: 250914.342 ops/s
Iteration  14: 239557.198 ops/s
Iteration  15: 247662.421 ops/s
Iteration  16: 252184.483 ops/s
Iteration  17: 242002.953 ops/s
Iteration  18: 246571.587 ops/s
Iteration  19: 249107.656 ops/s
Iteration  20: 243760.750 ops/s
Iteration  21: 245485.090 ops/s
Iteration  22: 242323.384 ops/s
Iteration  23: 249279.227 ops/s
Iteration  24: 241209.034 ops/s
Iteration  25: 247290.568 ops/s
Iteration  26: 251223.055 ops/s
Iteration  27: 239357.478 ops/s
Iteration  28: 250735.361 ops/s
Iteration  29: 244183.064 ops/s
Iteration  30: 241777.510 ops/s


Result "io.reactivex.rxjava3.internal.operators.completable.CompletableDisposeOnTest._Benchmark.benchmark_errorAfterCancel":
  245470.976 ±(99.9%) 3943.875 ops/s [Average]
  (min, avg, max) = (235794.425, 245470.976, 257452.121), stdev = 5903.006
  CI (99.9%): [241527.101, 249414.850] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
CompletableDisposeOnTest._Benchmark.benchmark_errorAfterCancel  thrpt   30  245470.976 ± 3943.875  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_cancelComposes$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_cancelComposes

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 497312.468 ops/s
# Warmup Iteration   2: 2523275.884 ops/s
# Warmup Iteration   3: 3190410.418 ops/s
# Warmup Iteration   4: 3820747.148 ops/s
# Warmup Iteration   5: 3820777.670 ops/s
# Warmup Iteration   6: 3945016.711 ops/s
# Warmup Iteration   7: 3814998.158 ops/s
# Warmup Iteration   8: 4023798.867 ops/s
# Warmup Iteration   9: 3983749.559 ops/s
# Warmup Iteration  10: 3756177.586 ops/s
# Warmup Iteration  11: 3766172.795 ops/s
# Warmup Iteration  12: 3963434.682 ops/s
# Warmup Iteration  13: 3695506.171 ops/s
# Warmup Iteration  14: 3743974.756 ops/s
# Warmup Iteration  15: 4049308.657 ops/s
# Warmup Iteration  16: 3814545.229 ops/s
# Warmup Iteration  17: 3803221.264 ops/s
# Warmup Iteration  18: 3862167.432 ops/s
# Warmup Iteration  19: 3802054.662 ops/s
# Warmup Iteration  20: 3986558.343 ops/s
# Warmup Iteration  21: 3709917.237 ops/s
# Warmup Iteration  22: 3882963.964 ops/s
# Warmup Iteration  23: 3865837.073 ops/s
# Warmup Iteration  24: 3710797.656 ops/s
# Warmup Iteration  25: 3932102.731 ops/s
# Warmup Iteration  26: 3728089.489 ops/s
# Warmup Iteration  27: 3809712.656 ops/s
# Warmup Iteration  28: 3965229.791 ops/s
# Warmup Iteration  29: 3657195.609 ops/s
# Warmup Iteration  30: 3837042.232 ops/s
Iteration   1: 3792599.171 ops/s
Iteration   2: 3801758.717 ops/s
Iteration   3: 3876551.455 ops/s
Iteration   4: 3754606.047 ops/s
Iteration   5: 3943716.855 ops/s
Iteration   6: 3757334.733 ops/s
Iteration   7: 3871796.096 ops/s
Iteration   8: 3813264.073 ops/s
Iteration   9: 3824857.762 ops/s
Iteration  10: 3802432.915 ops/s
Iteration  11: 3988609.410 ops/s
Iteration  12: 3925067.436 ops/s
Iteration  13: 3668790.027 ops/s
Iteration  14: 3460540.206 ops/s
Iteration  15: 3453538.653 ops/s
Iteration  16: 3913174.623 ops/s
Iteration  17: 3814076.374 ops/s
Iteration  18: 3791404.828 ops/s
Iteration  19: 4000003.203 ops/s
Iteration  20: 3673197.297 ops/s
Iteration  21: 3953677.557 ops/s
Iteration  22: 3576264.258 ops/s
Iteration  23: 3922472.244 ops/s
Iteration  24: 3984842.346 ops/s
Iteration  25: 3836981.485 ops/s
Iteration  26: 3824905.773 ops/s
Iteration  27: 3902221.142 ops/s
Iteration  28: 3743438.541 ops/s
Iteration  29: 3879448.432 ops/s
Iteration  30: 3893750.447 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_cancelComposes":
  3814844.070 ±(99.9%) 92529.555 ops/s [Average]
  (min, avg, max) = (3453538.653, 3814844.070, 4000003.203), stdev = 138493.892
  CI (99.9%): [3722314.515, 3907373.625] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
FlowableFromMaybeTest._Benchmark.benchmark_cancelComposes  thrpt   30  3814844.070 ± 92529.555  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 583853.528 ops/s
# Warmup Iteration   2: 2494520.137 ops/s
# Warmup Iteration   3: 2987574.001 ops/s
# Warmup Iteration   4: 3428621.809 ops/s
# Warmup Iteration   5: 3646131.664 ops/s
# Warmup Iteration   6: 3453316.687 ops/s
# Warmup Iteration   7: 3494035.952 ops/s
# Warmup Iteration   8: 3649816.676 ops/s
# Warmup Iteration   9: 3377610.888 ops/s
# Warmup Iteration  10: 3529957.152 ops/s
# Warmup Iteration  11: 3399673.213 ops/s
# Warmup Iteration  12: 3440118.476 ops/s
# Warmup Iteration  13: 3472064.561 ops/s
# Warmup Iteration  14: 3448814.584 ops/s
# Warmup Iteration  15: 3600172.353 ops/s
# Warmup Iteration  16: 3417587.258 ops/s
# Warmup Iteration  17: 3539757.734 ops/s
# Warmup Iteration  18: 3640114.642 ops/s
# Warmup Iteration  19: 3368467.044 ops/s
# Warmup Iteration  20: 3583858.476 ops/s
# Warmup Iteration  21: 3433373.785 ops/s
# Warmup Iteration  22: 3459829.186 ops/s
# Warmup Iteration  23: 3492436.230 ops/s
# Warmup Iteration  24: 3523933.805 ops/s
# Warmup Iteration  25: 3496091.938 ops/s
# Warmup Iteration  26: 3407055.576 ops/s
# Warmup Iteration  27: 3428089.404 ops/s
# Warmup Iteration  28: 3550144.090 ops/s
# Warmup Iteration  29: 3444553.464 ops/s
# Warmup Iteration  30: 3452688.112 ops/s
Iteration   1: 3542086.640 ops/s
Iteration   2: 3440587.408 ops/s
Iteration   3: 3486548.570 ops/s
Iteration   4: 3437496.611 ops/s
Iteration   5: 3558808.396 ops/s
Iteration   6: 3309212.031 ops/s
Iteration   7: 3634149.870 ops/s
Iteration   8: 3342060.185 ops/s
Iteration   9: 3540084.633 ops/s
Iteration  10: 3387522.325 ops/s
Iteration  11: 3482541.945 ops/s
Iteration  12: 3511286.212 ops/s
Iteration  13: 3487656.868 ops/s
Iteration  14: 3501386.738 ops/s
Iteration  15: 3436470.681 ops/s
Iteration  16: 3583474.009 ops/s
Iteration  17: 3433312.539 ops/s
Iteration  18: 3419693.408 ops/s
Iteration  19: 3498640.689 ops/s
Iteration  20: 3576730.482 ops/s
Iteration  21: 3382099.324 ops/s
Iteration  22: 3537674.748 ops/s
Iteration  23: 3405325.677 ops/s
Iteration  24: 3582970.034 ops/s
Iteration  25: 3392584.342 ops/s
Iteration  26: 3479112.516 ops/s
Iteration  27: 3521108.662 ops/s
Iteration  28: 3434548.853 ops/s
Iteration  29: 3541912.154 ops/s
Iteration  30: 3436931.396 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_dispose":
  3477467.265 ±(99.9%) 51632.116 ops/s [Average]
  (min, avg, max) = (3309212.031, 3477467.265, 3634149.870), stdev = 77280.527
  CI (99.9%): [3425835.149, 3529099.381] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                    Mode  Cnt        Score       Error  Units
MaybeHideTest._Benchmark.benchmark_dispose  thrpt   30  3477467.265 ± 51632.116  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 169066.805 ops/s
# Warmup Iteration   2: 556991.393 ops/s
# Warmup Iteration   3: 700047.848 ops/s
# Warmup Iteration   4: 666793.175 ops/s
# Warmup Iteration   5: 689706.980 ops/s
# Warmup Iteration   6: 675572.980 ops/s
# Warmup Iteration   7: 683304.911 ops/s
# Warmup Iteration   8: 647701.066 ops/s
# Warmup Iteration   9: 669887.346 ops/s
# Warmup Iteration  10: 671038.209 ops/s
# Warmup Iteration  11: 689533.480 ops/s
# Warmup Iteration  12: 697816.826 ops/s
# Warmup Iteration  13: 699836.034 ops/s
# Warmup Iteration  14: 706832.099 ops/s
# Warmup Iteration  15: 678228.835 ops/s
# Warmup Iteration  16: 693000.168 ops/s
# Warmup Iteration  17: 743623.688 ops/s
# Warmup Iteration  18: 714211.686 ops/s
# Warmup Iteration  19: 744787.630 ops/s
# Warmup Iteration  20: 739180.052 ops/s
# Warmup Iteration  21: 721990.158 ops/s
# Warmup Iteration  22: 752353.592 ops/s
# Warmup Iteration  23: 746638.581 ops/s
# Warmup Iteration  24: 706966.930 ops/s
# Warmup Iteration  25: 700398.380 ops/s
# Warmup Iteration  26: 743292.671 ops/s
# Warmup Iteration  27: 717644.810 ops/s
# Warmup Iteration  28: 755475.737 ops/s
# Warmup Iteration  29: 709847.081 ops/s
# Warmup Iteration  30: 729220.733 ops/s
Iteration   1: 763810.264 ops/s
Iteration   2: 744410.832 ops/s
Iteration   3: 709793.493 ops/s
Iteration   4: 728526.508 ops/s
Iteration   5: 735116.858 ops/s
Iteration   6: 746028.701 ops/s
Iteration   7: 724836.214 ops/s
Iteration   8: 748981.375 ops/s
Iteration   9: 564665.175 ops/s
Iteration  10: 712243.054 ops/s
Iteration  11: 749359.889 ops/s
Iteration  12: 736966.328 ops/s
Iteration  13: 754747.168 ops/s
Iteration  14: 743343.683 ops/s
Iteration  15: 748069.494 ops/s
Iteration  16: 705754.762 ops/s
Iteration  17: 751098.438 ops/s
Iteration  18: 725601.134 ops/s
Iteration  19: 730254.599 ops/s
Iteration  20: 746812.445 ops/s
Iteration  21: 732491.883 ops/s
Iteration  22: 735070.357 ops/s
Iteration  23: 727961.916 ops/s
Iteration  24: 750373.773 ops/s
Iteration  25: 721133.039 ops/s
Iteration  26: 721094.291 ops/s
Iteration  27: 766899.596 ops/s
Iteration  28: 721129.299 ops/s
Iteration  29: 706275.873 ops/s
Iteration  30: 746109.654 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromMaybeTest._Benchmark.benchmark_error":
  729965.337 ±(99.9%) 23483.890 ops/s [Average]
  (min, avg, max) = (564665.175, 729965.337, 766899.596), stdev = 35149.584
  CI (99.9%): [706481.446, 753449.227] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score       Error  Units
FlowableFromMaybeTest._Benchmark.benchmark_error  thrpt   30  729965.337 ± 23483.890  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_disposeToMaybe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_disposeToMaybe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147515.640 ops/s
# Warmup Iteration   2: 2219014.506 ops/s
# Warmup Iteration   3: 2673007.749 ops/s
# Warmup Iteration   4: 3462754.778 ops/s
# Warmup Iteration   5: 3482105.131 ops/s
# Warmup Iteration   6: 3394225.446 ops/s
# Warmup Iteration   7: 3415519.352 ops/s
# Warmup Iteration   8: 3570252.388 ops/s
# Warmup Iteration   9: 3567243.102 ops/s
# Warmup Iteration  10: 3496457.907 ops/s
# Warmup Iteration  11: 3437700.622 ops/s
# Warmup Iteration  12: 3355769.445 ops/s
# Warmup Iteration  13: 3574306.320 ops/s
# Warmup Iteration  14: 3365503.845 ops/s
# Warmup Iteration  15: 3567955.005 ops/s
# Warmup Iteration  16: 3514582.151 ops/s
# Warmup Iteration  17: 3378297.704 ops/s
# Warmup Iteration  18: 3566764.900 ops/s
# Warmup Iteration  19: 3420143.549 ops/s
# Warmup Iteration  20: 3479306.313 ops/s
# Warmup Iteration  21: 3551036.742 ops/s
# Warmup Iteration  22: 3493128.747 ops/s
# Warmup Iteration  23: 3352223.633 ops/s
# Warmup Iteration  24: 3298303.403 ops/s
# Warmup Iteration  25: 3471415.395 ops/s
# Warmup Iteration  26: 3450465.954 ops/s
# Warmup Iteration  27: 3605506.681 ops/s
# Warmup Iteration  28: 3421372.953 ops/s
# Warmup Iteration  29: 3449605.004 ops/s
# Warmup Iteration  30: 3609888.345 ops/s
Iteration   1: 3495061.772 ops/s
Iteration   2: 3457615.558 ops/s
Iteration   3: 3553795.559 ops/s
Iteration   4: 3449018.642 ops/s
Iteration   5: 3470368.214 ops/s
Iteration   6: 3432466.591 ops/s
Iteration   7: 3480354.485 ops/s
Iteration   8: 3447712.448 ops/s
Iteration   9: 3549032.610 ops/s
Iteration  10: 3528292.800 ops/s
Iteration  11: 3452273.170 ops/s
Iteration  12: 3496463.791 ops/s
Iteration  13: 3398741.841 ops/s
Iteration  14: 3529705.754 ops/s
Iteration  15: 3436836.038 ops/s
Iteration  16: 3371371.476 ops/s
Iteration  17: 3482175.948 ops/s
Iteration  18: 3465880.071 ops/s
Iteration  19: 3435095.395 ops/s
Iteration  20: 3643291.998 ops/s
Iteration  21: 3342009.018 ops/s
Iteration  22: 3639708.504 ops/s
Iteration  23: 3460491.727 ops/s
Iteration  24: 3546490.343 ops/s
Iteration  25: 3440808.774 ops/s
Iteration  26: 3440732.224 ops/s
Iteration  27: 3580276.176 ops/s
Iteration  28: 3551682.494 ops/s
Iteration  29: 3408648.198 ops/s
Iteration  30: 3578215.427 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeIsEmptyTest._Benchmark.benchmark_disposeToMaybe":
  3485487.235 ±(99.9%) 48328.715 ops/s [Average]
  (min, avg, max) = (3342009.018, 3485487.235, 3643291.998), stdev = 72336.151
  CI (99.9%): [3437158.520, 3533815.950] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt        Score       Error  Units
MaybeIsEmptyTest._Benchmark.benchmark_disposeToMaybe  thrpt   30  3485487.235 ± 48328.715  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justMaybeError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justMaybeError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 126228.740 ops/s
# Warmup Iteration   2: 506849.385 ops/s
# Warmup Iteration   3: 611804.964 ops/s
# Warmup Iteration   4: 630252.170 ops/s
# Warmup Iteration   5: 632783.176 ops/s
# Warmup Iteration   6: 638360.958 ops/s
# Warmup Iteration   7: 619058.015 ops/s
# Warmup Iteration   8: 647906.427 ops/s
# Warmup Iteration   9: 621069.247 ops/s
# Warmup Iteration  10: 597455.109 ops/s
# Warmup Iteration  11: 628072.862 ops/s
# Warmup Iteration  12: 630925.605 ops/s
# Warmup Iteration  13: 619883.026 ops/s
# Warmup Iteration  14: 625162.946 ops/s
# Warmup Iteration  15: 650288.797 ops/s
# Warmup Iteration  16: 617210.042 ops/s
# Warmup Iteration  17: 653344.302 ops/s
# Warmup Iteration  18: 663920.792 ops/s
# Warmup Iteration  19: 705607.452 ops/s
# Warmup Iteration  20: 621864.777 ops/s
# Warmup Iteration  21: 670927.009 ops/s
# Warmup Iteration  22: 694824.961 ops/s
# Warmup Iteration  23: 657093.046 ops/s
# Warmup Iteration  24: 688235.153 ops/s
# Warmup Iteration  25: 703870.686 ops/s
# Warmup Iteration  26: 647529.125 ops/s
# Warmup Iteration  27: 707712.083 ops/s
# Warmup Iteration  28: 681259.684 ops/s
# Warmup Iteration  29: 654357.255 ops/s
# Warmup Iteration  30: 697550.377 ops/s
Iteration   1: 701443.493 ops/s
Iteration   2: 647026.027 ops/s
Iteration   3: 546302.536 ops/s
Iteration   4: 655385.402 ops/s
Iteration   5: 691297.312 ops/s
Iteration   6: 645533.553 ops/s
Iteration   7: 692736.761 ops/s
Iteration   8: 667712.817 ops/s
Iteration   9: 668572.478 ops/s
Iteration  10: 685129.354 ops/s
Iteration  11: 665499.678 ops/s
Iteration  12: 706696.487 ops/s
Iteration  13: 662217.837 ops/s
Iteration  14: 666528.088 ops/s
Iteration  15: 694098.878 ops/s
Iteration  16: 671777.053 ops/s
Iteration  17: 670778.877 ops/s
Iteration  18: 686714.912 ops/s
Iteration  19: 659730.142 ops/s
Iteration  20: 689064.447 ops/s
Iteration  21: 646102.773 ops/s
Iteration  22: 671978.247 ops/s
Iteration  23: 696831.315 ops/s
Iteration  24: 629017.918 ops/s
Iteration  25: 675591.947 ops/s
Iteration  26: 667638.152 ops/s
Iteration  27: 673984.513 ops/s
Iteration  28: 667294.666 ops/s
Iteration  29: 638185.760 ops/s
Iteration  30: 675296.047 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleStartWithTest._Benchmark.benchmark_justMaybeError":
  667205.582 ±(99.9%) 19791.921 ops/s [Average]
  (min, avg, max) = (546302.536, 667205.582, 706696.487), stdev = 29623.618
  CI (99.9%): [647413.661, 686997.503] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
SingleStartWithTest._Benchmark.benchmark_justMaybeError  thrpt   30  667205.582 ± 19791.921  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilTrueError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilTrueError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 138723.301 ops/s
# Warmup Iteration   2: 499419.285 ops/s
# Warmup Iteration   3: 576410.278 ops/s
# Warmup Iteration   4: 631867.830 ops/s
# Warmup Iteration   5: 541229.544 ops/s
# Warmup Iteration   6: 621488.427 ops/s
# Warmup Iteration   7: 617443.284 ops/s
# Warmup Iteration   8: 649846.233 ops/s
# Warmup Iteration   9: 614469.463 ops/s
# Warmup Iteration  10: 650838.944 ops/s
# Warmup Iteration  11: 620411.303 ops/s
# Warmup Iteration  12: 619774.648 ops/s
# Warmup Iteration  13: 649475.617 ops/s
# Warmup Iteration  14: 624313.200 ops/s
# Warmup Iteration  15: 625308.133 ops/s
# Warmup Iteration  16: 646697.800 ops/s
# Warmup Iteration  17: 671873.436 ops/s
# Warmup Iteration  18: 643674.997 ops/s
# Warmup Iteration  19: 691992.380 ops/s
# Warmup Iteration  20: 678431.242 ops/s
# Warmup Iteration  21: 659757.137 ops/s
# Warmup Iteration  22: 642998.661 ops/s
# Warmup Iteration  23: 692167.196 ops/s
# Warmup Iteration  24: 626803.187 ops/s
# Warmup Iteration  25: 661595.342 ops/s
# Warmup Iteration  26: 687769.883 ops/s
# Warmup Iteration  27: 650756.589 ops/s
# Warmup Iteration  28: 657514.558 ops/s
# Warmup Iteration  29: 670556.211 ops/s
# Warmup Iteration  30: 657443.642 ops/s
Iteration   1: 681399.404 ops/s
Iteration   2: 646700.783 ops/s
Iteration   3: 674961.847 ops/s
Iteration   4: 668902.988 ops/s
Iteration   5: 651791.737 ops/s
Iteration   6: 658435.681 ops/s
Iteration   7: 672184.178 ops/s
Iteration   8: 654594.751 ops/s
Iteration   9: 690925.940 ops/s
Iteration  10: 670409.304 ops/s
Iteration  11: 664622.824 ops/s
Iteration  12: 694750.625 ops/s
Iteration  13: 667883.984 ops/s
Iteration  14: 647832.916 ops/s
Iteration  15: 665538.868 ops/s
Iteration  16: 649672.141 ops/s
Iteration  17: 662336.752 ops/s
Iteration  18: 690528.587 ops/s
Iteration  19: 646843.921 ops/s
Iteration  20: 681967.230 ops/s
Iteration  21: 663664.887 ops/s
Iteration  22: 652586.853 ops/s
Iteration  23: 681004.445 ops/s
Iteration  24: 651171.327 ops/s
Iteration  25: 691225.135 ops/s
Iteration  26: 669580.778 ops/s
Iteration  27: 654448.026 ops/s
Iteration  28: 655759.076 ops/s
Iteration  29: 684700.875 ops/s
Iteration  30: 664253.950 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_untilTrueError":
  667022.660 ±(99.9%) 9825.186 ops/s [Average]
  (min, avg, max) = (646700.783, 667022.660, 694750.625), stdev = 14705.877
  CI (99.9%): [657197.474, 676847.846] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score      Error  Units
MaybeRetryTest._Benchmark.benchmark_untilTrueError  thrpt   30  667022.660 ± 9825.186  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableNormal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableNormal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 124285.544 ops/s
# Warmup Iteration   2: 608569.865 ops/s
# Warmup Iteration   3: 892587.530 ops/s
# Warmup Iteration   4: 1099073.440 ops/s
# Warmup Iteration   5: 1051719.618 ops/s
# Warmup Iteration   6: 1084360.379 ops/s
# Warmup Iteration   7: 1108960.704 ops/s
# Warmup Iteration   8: 1077880.880 ops/s
# Warmup Iteration   9: 1118289.110 ops/s
# Warmup Iteration  10: 1042751.852 ops/s
# Warmup Iteration  11: 1045551.080 ops/s
# Warmup Iteration  12: 1091794.591 ops/s
# Warmup Iteration  13: 1072067.194 ops/s
# Warmup Iteration  14: 1087006.872 ops/s
# Warmup Iteration  15: 1066556.079 ops/s
# Warmup Iteration  16: 1085876.054 ops/s
# Warmup Iteration  17: 1118442.975 ops/s
# Warmup Iteration  18: 1067343.481 ops/s
# Warmup Iteration  19: 1078323.828 ops/s
# Warmup Iteration  20: 1079878.782 ops/s
# Warmup Iteration  21: 1061901.388 ops/s
# Warmup Iteration  22: 1117529.604 ops/s
# Warmup Iteration  23: 1057556.853 ops/s
# Warmup Iteration  24: 1067301.410 ops/s
# Warmup Iteration  25: 1072317.270 ops/s
# Warmup Iteration  26: 1051642.395 ops/s
# Warmup Iteration  27: 1100302.665 ops/s
# Warmup Iteration  28: 770563.128 ops/s
# Warmup Iteration  29: 1104614.860 ops/s
# Warmup Iteration  30: 1117761.699 ops/s
Iteration   1: 1055049.054 ops/s
Iteration   2: 1086354.614 ops/s
Iteration   3: 1016146.358 ops/s
Iteration   4: 1047818.897 ops/s
Iteration   5: 1121879.978 ops/s
Iteration   6: 1029430.257 ops/s
Iteration   7: 1056542.331 ops/s
Iteration   8: 1122702.744 ops/s
Iteration   9: 1057280.179 ops/s
Iteration  10: 1142053.154 ops/s
Iteration  11: 1036732.985 ops/s
Iteration  12: 1081229.964 ops/s
Iteration  13: 1108652.713 ops/s
Iteration  14: 1051091.405 ops/s
Iteration  15: 1105822.041 ops/s
Iteration  16: 1087466.982 ops/s
Iteration  17: 1099599.486 ops/s
Iteration  18: 1097321.012 ops/s
Iteration  19: 1074208.826 ops/s
Iteration  20: 1060459.351 ops/s
Iteration  21: 1113540.380 ops/s
Iteration  22: 1020254.111 ops/s
Iteration  23: 1123390.217 ops/s
Iteration  24: 1076907.872 ops/s
Iteration  25: 1078916.570 ops/s
Iteration  26: 1107012.665 ops/s
Iteration  27: 1098931.101 ops/s
Iteration  28: 1090776.365 ops/s
Iteration  29: 1101034.128 ops/s
Iteration  30: 1107397.284 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableNormal":
  1081866.767 ±(99.9%) 21865.323 ops/s [Average]
  (min, avg, max) = (1016146.358, 1081866.767, 1142053.154), stdev = 32726.989
  CI (99.9%): [1060001.444, 1103732.091] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
MaybeConcatEagerTest._Benchmark.benchmark_iterableNormal  thrpt   30  1081866.767 ± 21865.323  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 878732.446 ops/s
# Warmup Iteration   2: 2300537.318 ops/s
# Warmup Iteration   3: 2825675.451 ops/s
# Warmup Iteration   4: 3149767.171 ops/s
# Warmup Iteration   5: 3274744.639 ops/s
# Warmup Iteration   6: 3301860.463 ops/s
# Warmup Iteration   7: 3180383.646 ops/s
# Warmup Iteration   8: 3169747.509 ops/s
# Warmup Iteration   9: 3190762.997 ops/s
# Warmup Iteration  10: 3226716.412 ops/s
# Warmup Iteration  11: 3315996.469 ops/s
# Warmup Iteration  12: 3186799.037 ops/s
# Warmup Iteration  13: 3190550.406 ops/s
# Warmup Iteration  14: 3322906.133 ops/s
# Warmup Iteration  15: 3144316.334 ops/s
# Warmup Iteration  16: 3178213.820 ops/s
# Warmup Iteration  17: 3288232.406 ops/s
# Warmup Iteration  18: 3207281.266 ops/s
# Warmup Iteration  19: 3317675.198 ops/s
# Warmup Iteration  20: 3211053.278 ops/s
# Warmup Iteration  21: 3172836.448 ops/s
# Warmup Iteration  22: 3221368.020 ops/s
# Warmup Iteration  23: 3316602.763 ops/s
# Warmup Iteration  24: 3192580.437 ops/s
# Warmup Iteration  25: 3310842.033 ops/s
# Warmup Iteration  26: 3178128.040 ops/s
# Warmup Iteration  27: 3242334.062 ops/s
# Warmup Iteration  28: 3297999.907 ops/s
# Warmup Iteration  29: 3081613.665 ops/s
# Warmup Iteration  30: 3273909.979 ops/s
Iteration   1: 3174122.670 ops/s
Iteration   2: 3156115.810 ops/s
Iteration   3: 3259871.328 ops/s
Iteration   4: 3081973.678 ops/s
Iteration   5: 3376549.585 ops/s
Iteration   6: 3309474.058 ops/s
Iteration   7: 3293566.402 ops/s
Iteration   8: 3279499.940 ops/s
Iteration   9: 3279122.208 ops/s
Iteration  10: 3295566.561 ops/s
Iteration  11: 3152398.267 ops/s
Iteration  12: 3351950.187 ops/s
Iteration  13: 3206549.818 ops/s
Iteration  14: 3109334.083 ops/s
Iteration  15: 3266146.431 ops/s
Iteration  16: 3291450.936 ops/s
Iteration  17: 3294956.151 ops/s
Iteration  18: 3268589.174 ops/s
Iteration  19: 3214110.270 ops/s
Iteration  20: 3408625.405 ops/s
Iteration  21: 3144343.877 ops/s
Iteration  22: 3307459.511 ops/s
Iteration  23: 3255585.402 ops/s
Iteration  24: 3328475.429 ops/s
Iteration  25: 3158897.808 ops/s
Iteration  26: 3212188.511 ops/s
Iteration  27: 3307003.158 ops/s
Iteration  28: 3246548.864 ops/s
Iteration  29: 3304687.120 ops/s
Iteration  30: 3333577.539 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOfTypeTest._Benchmark.benchmark_dispose":
  3255624.673 ±(99.9%) 53103.588 ops/s [Average]
  (min, avg, max) = (3081973.678, 3255624.673, 3408625.405), stdev = 79482.956
  CI (99.9%): [3202521.085, 3308728.260] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score       Error  Units
MaybeOfTypeTest._Benchmark.benchmark_dispose  thrpt   30  3255624.673 ± 53103.588  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableNormalMaxConcurrency$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableNormalMaxConcurrency

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 87772.917 ops/s
# Warmup Iteration   2: 744805.370 ops/s
# Warmup Iteration   3: 1140986.229 ops/s
# Warmup Iteration   4: 1214427.281 ops/s
# Warmup Iteration   5: 1334907.201 ops/s
# Warmup Iteration   6: 1331843.030 ops/s
# Warmup Iteration   7: 1318301.413 ops/s
# Warmup Iteration   8: 1325750.812 ops/s
# Warmup Iteration   9: 1381359.708 ops/s
# Warmup Iteration  10: 1321637.709 ops/s
# Warmup Iteration  11: 1310266.680 ops/s
# Warmup Iteration  12: 1368995.851 ops/s
# Warmup Iteration  13: 1337393.850 ops/s
# Warmup Iteration  14: 1359717.887 ops/s
# Warmup Iteration  15: 1363319.981 ops/s
# Warmup Iteration  16: 1340336.070 ops/s
# Warmup Iteration  17: 1330587.321 ops/s
# Warmup Iteration  18: 1342356.123 ops/s
# Warmup Iteration  19: 1320687.655 ops/s
# Warmup Iteration  20: 1375512.230 ops/s
# Warmup Iteration  21: 1344139.396 ops/s
# Warmup Iteration  22: 1361952.274 ops/s
# Warmup Iteration  23: 1134347.815 ops/s
# Warmup Iteration  24: 1304087.377 ops/s
# Warmup Iteration  25: 1330116.777 ops/s
# Warmup Iteration  26: 1369175.865 ops/s
# Warmup Iteration  27: 1372019.713 ops/s
# Warmup Iteration  28: 1341759.425 ops/s
# Warmup Iteration  29: 1340661.828 ops/s
# Warmup Iteration  30: 1329795.712 ops/s
Iteration   1: 1344263.954 ops/s
Iteration   2: 1328525.514 ops/s
Iteration   3: 1327970.403 ops/s
Iteration   4: 1388117.341 ops/s
Iteration   5: 1316138.299 ops/s
Iteration   6: 1358599.562 ops/s
Iteration   7: 1323241.019 ops/s
Iteration   8: 1364502.462 ops/s
Iteration   9: 1355177.336 ops/s
Iteration  10: 1307675.507 ops/s
Iteration  11: 1343741.263 ops/s
Iteration  12: 1293431.396 ops/s
Iteration  13: 1366226.145 ops/s
Iteration  14: 1316436.388 ops/s
Iteration  15: 1354070.779 ops/s
Iteration  16: 1414418.440 ops/s
Iteration  17: 1298855.315 ops/s
Iteration  18: 1365011.918 ops/s
Iteration  19: 1367757.764 ops/s
Iteration  20: 1319622.594 ops/s
Iteration  21: 1355117.702 ops/s
Iteration  22: 1384906.833 ops/s
Iteration  23: 1296119.101 ops/s
Iteration  24: 1334283.917 ops/s
Iteration  25: 1378179.637 ops/s
Iteration  26: 1331052.396 ops/s
Iteration  27: 1403965.946 ops/s
Iteration  28: 1334547.112 ops/s
Iteration  29: 1316099.341 ops/s
Iteration  30: 1335088.329 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatEagerTest._Benchmark.benchmark_iterableNormalMaxConcurrency":
  1344104.790 ±(99.9%) 20871.036 ops/s [Average]
  (min, avg, max) = (1293431.396, 1344104.790, 1414418.440), stdev = 31238.786
  CI (99.9%): [1323233.755, 1364975.826] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt        Score       Error  Units
MaybeConcatEagerTest._Benchmark.benchmark_iterableNormalMaxConcurrency  thrpt   30  1344104.790 ± 20871.036  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_crossCancelOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_crossCancelOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 221738.239 ops/s
# Warmup Iteration   2: 1495362.895 ops/s
# Warmup Iteration   3: 1815048.029 ops/s
# Warmup Iteration   4: 1944917.599 ops/s
# Warmup Iteration   5: 2067554.186 ops/s
# Warmup Iteration   6: 1967036.585 ops/s
# Warmup Iteration   7: 1949945.279 ops/s
# Warmup Iteration   8: 1991770.643 ops/s
# Warmup Iteration   9: 2049376.193 ops/s
# Warmup Iteration  10: 1862608.488 ops/s
# Warmup Iteration  11: 1872693.625 ops/s
# Warmup Iteration  12: 2053300.772 ops/s
# Warmup Iteration  13: 1952322.870 ops/s
# Warmup Iteration  14: 2073495.847 ops/s
# Warmup Iteration  15: 2010214.856 ops/s
# Warmup Iteration  16: 1814722.825 ops/s
# Warmup Iteration  17: 2015277.630 ops/s
# Warmup Iteration  18: 2009675.235 ops/s
# Warmup Iteration  19: 2006328.614 ops/s
# Warmup Iteration  20: 1966137.618 ops/s
# Warmup Iteration  21: 1965240.461 ops/s
# Warmup Iteration  22: 2038076.512 ops/s
# Warmup Iteration  23: 1932773.885 ops/s
# Warmup Iteration  24: 1919638.210 ops/s
# Warmup Iteration  25: 2052044.893 ops/s
# Warmup Iteration  26: 1998940.885 ops/s
# Warmup Iteration  27: 1951993.082 ops/s
# Warmup Iteration  28: 2044981.052 ops/s
# Warmup Iteration  29: 2005336.417 ops/s
# Warmup Iteration  30: 1989822.496 ops/s
Iteration   1: 1967581.069 ops/s
Iteration   2: 2023394.201 ops/s
Iteration   3: 2005783.883 ops/s
Iteration   4: 1940458.771 ops/s
Iteration   5: 2031544.592 ops/s
Iteration   6: 1926090.315 ops/s
Iteration   7: 2019199.444 ops/s
Iteration   8: 1923562.220 ops/s
Iteration   9: 1987491.707 ops/s
Iteration  10: 2037399.973 ops/s
Iteration  11: 1995348.394 ops/s
Iteration  12: 2023433.474 ops/s
Iteration  13: 1942653.540 ops/s
Iteration  14: 1975225.641 ops/s
Iteration  15: 2067753.577 ops/s
Iteration  16: 1944450.056 ops/s
Iteration  17: 2052695.253 ops/s
Iteration  18: 1951101.376 ops/s
Iteration  19: 2031880.536 ops/s
Iteration  20: 1976599.995 ops/s
Iteration  21: 2019949.315 ops/s
Iteration  22: 2057806.567 ops/s
Iteration  23: 1959558.586 ops/s
Iteration  24: 2051735.374 ops/s
Iteration  25: 1953773.016 ops/s
Iteration  26: 1981817.462 ops/s
Iteration  27: 2065245.795 ops/s
Iteration  28: 2091798.458 ops/s
Iteration  29: 2045415.401 ops/s
Iteration  30: 1957941.146 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_crossCancelOnComplete":
  2000289.638 ±(99.9%) 31707.055 ops/s [Average]
  (min, avg, max) = (1923562.220, 2000289.638, 2091798.458), stdev = 47457.631
  CI (99.9%): [1968582.583, 2031996.693] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt        Score       Error  Units
MaybeCacheTest._Benchmark.benchmark_crossCancelOnComplete  thrpt   30  2000289.638 ± 31707.055  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithZeroRetries$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithZeroRetries

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 75426.484 ops/s
# Warmup Iteration   2: 409590.310 ops/s
# Warmup Iteration   3: 447569.163 ops/s
# Warmup Iteration   4: 432955.396 ops/s
# Warmup Iteration   5: 470097.622 ops/s
# Warmup Iteration   6: 418530.496 ops/s
# Warmup Iteration   7: 496245.791 ops/s
# Warmup Iteration   8: 480612.433 ops/s
# Warmup Iteration   9: 483470.763 ops/s
# Warmup Iteration  10: 495313.019 ops/s
# Warmup Iteration  11: 480166.289 ops/s
# Warmup Iteration  12: 478969.387 ops/s
# Warmup Iteration  13: 497547.675 ops/s
# Warmup Iteration  14: 495600.304 ops/s
# Warmup Iteration  15: 467144.549 ops/s
# Warmup Iteration  16: 492851.121 ops/s
# Warmup Iteration  17: 421405.411 ops/s
# Warmup Iteration  18: 502181.426 ops/s
# Warmup Iteration  19: 522445.275 ops/s
# Warmup Iteration  20: 496620.645 ops/s
# Warmup Iteration  21: 521434.374 ops/s
# Warmup Iteration  22: 497539.726 ops/s
# Warmup Iteration  23: 495727.109 ops/s
# Warmup Iteration  24: 494807.603 ops/s
# Warmup Iteration  25: 503531.082 ops/s
# Warmup Iteration  26: 501199.582 ops/s
# Warmup Iteration  27: 502646.188 ops/s
# Warmup Iteration  28: 512135.077 ops/s
# Warmup Iteration  29: 503960.910 ops/s
# Warmup Iteration  30: 521775.713 ops/s
Iteration   1: 497519.355 ops/s
Iteration   2: 503364.729 ops/s
Iteration   3: 501184.402 ops/s
Iteration   4: 507209.123 ops/s
Iteration   5: 495410.635 ops/s
Iteration   6: 495733.019 ops/s
Iteration   7: 506648.193 ops/s
Iteration   8: 511499.370 ops/s
Iteration   9: 493741.495 ops/s
Iteration  10: 518925.544 ops/s
Iteration  11: 484841.759 ops/s
Iteration  12: 502145.915 ops/s
Iteration  13: 511737.994 ops/s
Iteration  14: 487614.996 ops/s
Iteration  15: 510174.911 ops/s
Iteration  16: 516751.751 ops/s
Iteration  17: 499439.013 ops/s
Iteration  18: 509146.779 ops/s
Iteration  19: 502479.099 ops/s
Iteration  20: 491543.987 ops/s
Iteration  21: 515696.181 ops/s
Iteration  22: 494053.612 ops/s
Iteration  23: 492700.954 ops/s
Iteration  24: 505690.329 ops/s
Iteration  25: 504113.346 ops/s
Iteration  26: 513364.177 ops/s
Iteration  27: 506622.301 ops/s
Iteration  28: 502118.560 ops/s
Iteration  29: 525233.216 ops/s
Iteration  30: 492963.542 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithZeroRetries":
  503322.276 ±(99.9%) 6472.333 ops/s [Average]
  (min, avg, max) = (484841.759, 503322.276, 525233.216), stdev = 9687.484
  CI (99.9%): [496849.943, 509794.609] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithZeroRetries  thrpt   30  503322.276 ± 6472.333  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingPredicate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingPredicate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20758.640 ops/s
# Warmup Iteration   2: 123275.874 ops/s
# Warmup Iteration   3: 163612.755 ops/s
# Warmup Iteration   4: 168556.327 ops/s
# Warmup Iteration   5: 174968.203 ops/s
# Warmup Iteration   6: 167642.010 ops/s
# Warmup Iteration   7: 174710.755 ops/s
# Warmup Iteration   8: 164314.727 ops/s
# Warmup Iteration   9: 175627.903 ops/s
# Warmup Iteration  10: 172643.871 ops/s
# Warmup Iteration  11: 167441.362 ops/s
# Warmup Iteration  12: 171610.761 ops/s
# Warmup Iteration  13: 174020.379 ops/s
# Warmup Iteration  14: 167311.641 ops/s
# Warmup Iteration  15: 178100.695 ops/s
# Warmup Iteration  16: 170097.020 ops/s
# Warmup Iteration  17: 178607.563 ops/s
# Warmup Iteration  18: 183419.269 ops/s
# Warmup Iteration  19: 176048.895 ops/s
# Warmup Iteration  20: 179771.152 ops/s
# Warmup Iteration  21: 177742.070 ops/s
# Warmup Iteration  22: 175882.404 ops/s
# Warmup Iteration  23: 186864.510 ops/s
# Warmup Iteration  24: 184090.205 ops/s
# Warmup Iteration  25: 174402.548 ops/s
# Warmup Iteration  26: 182128.791 ops/s
# Warmup Iteration  27: 183479.524 ops/s
# Warmup Iteration  28: 173638.262 ops/s
# Warmup Iteration  29: 181100.227 ops/s
# Warmup Iteration  30: 175702.692 ops/s
Iteration   1: 181531.640 ops/s
Iteration   2: 186821.762 ops/s
Iteration   3: 176067.551 ops/s
Iteration   4: 177007.619 ops/s
Iteration   5: 178644.384 ops/s
Iteration   6: 177805.638 ops/s
Iteration   7: 182311.154 ops/s
Iteration   8: 173523.230 ops/s
Iteration   9: 181437.042 ops/s
Iteration  10: 175456.476 ops/s
Iteration  11: 182385.286 ops/s
Iteration  12: 181711.607 ops/s
Iteration  13: 179231.427 ops/s
Iteration  14: 179923.936 ops/s
Iteration  15: 183138.193 ops/s
Iteration  16: 175079.762 ops/s
Iteration  17: 182367.238 ops/s
Iteration  18: 177420.889 ops/s
Iteration  19: 183162.905 ops/s
Iteration  20: 179231.830 ops/s
Iteration  21: 177184.250 ops/s
Iteration  22: 185588.028 ops/s
Iteration  23: 173657.191 ops/s
Iteration  24: 178299.989 ops/s
Iteration  25: 185196.713 ops/s
Iteration  26: 172163.902 ops/s
Iteration  27: 186841.876 ops/s
Iteration  28: 176417.504 ops/s
Iteration  29: 179906.204 ops/s
Iteration  30: 184887.040 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingPredicate":
  179813.409 ±(99.9%) 2687.539 ops/s [Average]
  (min, avg, max) = (172163.902, 179813.409, 186841.876), stdev = 4022.582
  CI (99.9%): [177125.870, 182500.948] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
MaybeRetryTest._Benchmark.benchmark_retryTimesPredicateWithMatchingPredicate  thrpt   30  179813.409 ± 2687.539  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_crossCancelOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_crossCancelOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 103651.257 ops/s
# Warmup Iteration   2: 348785.330 ops/s
# Warmup Iteration   3: 497217.568 ops/s
# Warmup Iteration   4: 540248.094 ops/s
# Warmup Iteration   5: 481538.352 ops/s
# Warmup Iteration   6: 508924.580 ops/s
# Warmup Iteration   7: 563334.993 ops/s
# Warmup Iteration   8: 536873.638 ops/s
# Warmup Iteration   9: 538484.417 ops/s
# Warmup Iteration  10: 557478.189 ops/s
# Warmup Iteration  11: 547931.140 ops/s
# Warmup Iteration  12: 386570.623 ops/s
# Warmup Iteration  13: 567811.501 ops/s
# Warmup Iteration  14: 531324.309 ops/s
# Warmup Iteration  15: 539206.234 ops/s
# Warmup Iteration  16: 566221.742 ops/s
# Warmup Iteration  17: 548756.126 ops/s
# Warmup Iteration  18: 572575.093 ops/s
# Warmup Iteration  19: 587678.326 ops/s
# Warmup Iteration  20: 585212.825 ops/s
# Warmup Iteration  21: 577132.667 ops/s
# Warmup Iteration  22: 558320.083 ops/s
# Warmup Iteration  23: 583493.166 ops/s
# Warmup Iteration  24: 555454.572 ops/s
# Warmup Iteration  25: 575733.934 ops/s
# Warmup Iteration  26: 587227.736 ops/s
# Warmup Iteration  27: 557272.334 ops/s
# Warmup Iteration  28: 583223.046 ops/s
# Warmup Iteration  29: 563229.456 ops/s
# Warmup Iteration  30: 573846.673 ops/s
Iteration   1: 596176.368 ops/s
Iteration   2: 556992.841 ops/s
Iteration   3: 578998.443 ops/s
Iteration   4: 566371.499 ops/s
Iteration   5: 571395.004 ops/s
Iteration   6: 570744.456 ops/s
Iteration   7: 578547.485 ops/s
Iteration   8: 581858.357 ops/s
Iteration   9: 572726.051 ops/s
Iteration  10: 570561.406 ops/s
Iteration  11: 588195.496 ops/s
Iteration  12: 553475.719 ops/s
Iteration  13: 611456.639 ops/s
Iteration  14: 573605.707 ops/s
Iteration  15: 598587.600 ops/s
Iteration  16: 578020.558 ops/s
Iteration  17: 580077.188 ops/s
Iteration  18: 577178.744 ops/s
Iteration  19: 568950.935 ops/s
Iteration  20: 596990.082 ops/s
Iteration  21: 590174.103 ops/s
Iteration  22: 557686.854 ops/s
Iteration  23: 568468.111 ops/s
Iteration  24: 567574.205 ops/s
Iteration  25: 585352.901 ops/s
Iteration  26: 587302.589 ops/s
Iteration  27: 550464.638 ops/s
Iteration  28: 579363.165 ops/s
Iteration  29: 560471.549 ops/s
Iteration  30: 571732.988 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeCacheTest._Benchmark.benchmark_crossCancelOnError":
  576316.723 ±(99.9%) 9399.920 ops/s [Average]
  (min, avg, max) = (550464.638, 576316.723, 611456.639), stdev = 14069.359
  CI (99.9%): [566916.802, 585716.643] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
MaybeCacheTest._Benchmark.benchmark_crossCancelOnError  thrpt   30  576316.723 ± 9399.920  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 363109.158 ops/s
# Warmup Iteration   2: 1769250.737 ops/s
# Warmup Iteration   3: 2951562.320 ops/s
# Warmup Iteration   4: 3039796.972 ops/s
# Warmup Iteration   5: 3304966.498 ops/s
# Warmup Iteration   6: 3386319.431 ops/s
# Warmup Iteration   7: 3307348.195 ops/s
# Warmup Iteration   8: 3139731.847 ops/s
# Warmup Iteration   9: 3302996.001 ops/s
# Warmup Iteration  10: 3132037.258 ops/s
# Warmup Iteration  11: 3042266.752 ops/s
# Warmup Iteration  12: 3394054.355 ops/s
# Warmup Iteration  13: 3168603.816 ops/s
# Warmup Iteration  14: 3370126.024 ops/s
# Warmup Iteration  15: 3284041.225 ops/s
# Warmup Iteration  16: 3216813.516 ops/s
# Warmup Iteration  17: 3386051.141 ops/s
# Warmup Iteration  18: 3334755.943 ops/s
# Warmup Iteration  19: 3285904.300 ops/s
# Warmup Iteration  20: 3299121.580 ops/s
# Warmup Iteration  21: 3197316.401 ops/s
# Warmup Iteration  22: 3233198.393 ops/s
# Warmup Iteration  23: 3399587.371 ops/s
# Warmup Iteration  24: 3246988.968 ops/s
# Warmup Iteration  25: 3418308.010 ops/s
# Warmup Iteration  26: 3332393.855 ops/s
# Warmup Iteration  27: 3245748.097 ops/s
# Warmup Iteration  28: 3123666.060 ops/s
# Warmup Iteration  29: 3385275.563 ops/s
# Warmup Iteration  30: 3324575.325 ops/s
Iteration   1: 3173106.663 ops/s
Iteration   2: 3404205.476 ops/s
Iteration   3: 3210727.094 ops/s
Iteration   4: 3224687.039 ops/s
Iteration   5: 3283091.068 ops/s
Iteration   6: 3373893.164 ops/s
Iteration   7: 3211482.035 ops/s
Iteration   8: 3263753.698 ops/s
Iteration   9: 3215449.319 ops/s
Iteration  10: 3253761.609 ops/s
Iteration  11: 3253805.629 ops/s
Iteration  12: 3192583.726 ops/s
Iteration  13: 3321755.555 ops/s
Iteration  14: 3179807.772 ops/s
Iteration  15: 3259335.661 ops/s
Iteration  16: 3325113.716 ops/s
Iteration  17: 3230191.655 ops/s
Iteration  18: 3355732.291 ops/s
Iteration  19: 3162215.261 ops/s
Iteration  20: 3237227.786 ops/s
Iteration  21: 3347589.232 ops/s
Iteration  22: 3105136.055 ops/s
Iteration  23: 3373310.503 ops/s
Iteration  24: 3385884.128 ops/s
Iteration  25: 3169012.717 ops/s
Iteration  26: 3388753.586 ops/s
Iteration  27: 3190334.304 ops/s
Iteration  28: 3382669.978 ops/s
Iteration  29: 3158008.437 ops/s
Iteration  30: 3257034.585 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleOfTypeTest._Benchmark.benchmark_dispose":
  3262988.658 ±(99.9%) 56085.291 ops/s [Average]
  (min, avg, max) = (3105136.055, 3262988.658, 3404205.476), stdev = 83945.829
  CI (99.9%): [3206903.367, 3319073.949] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                       Mode  Cnt        Score       Error  Units
SingleOfTypeTest._Benchmark.benchmark_dispose  thrpt   30  3262988.658 ± 56085.291  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_syncNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_syncNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 199894.434 ops/s
# Warmup Iteration   2: 496795.482 ops/s
# Warmup Iteration   3: 572514.298 ops/s
# Warmup Iteration   4: 558927.427 ops/s
# Warmup Iteration   5: 559946.755 ops/s
# Warmup Iteration   6: 504555.161 ops/s
# Warmup Iteration   7: 499905.943 ops/s
# Warmup Iteration   8: 564200.938 ops/s
# Warmup Iteration   9: 551895.136 ops/s
# Warmup Iteration  10: 565791.391 ops/s
# Warmup Iteration  11: 566488.078 ops/s
# Warmup Iteration  12: 552627.940 ops/s
# Warmup Iteration  13: 556257.681 ops/s
# Warmup Iteration  14: 541793.570 ops/s
# Warmup Iteration  15: 574772.792 ops/s
# Warmup Iteration  16: 570258.913 ops/s
# Warmup Iteration  17: 598847.409 ops/s
# Warmup Iteration  18: 599037.467 ops/s
# Warmup Iteration  19: 586887.211 ops/s
# Warmup Iteration  20: 604443.925 ops/s
# Warmup Iteration  21: 575281.794 ops/s
# Warmup Iteration  22: 600086.598 ops/s
# Warmup Iteration  23: 610390.257 ops/s
# Warmup Iteration  24: 579881.385 ops/s
# Warmup Iteration  25: 599067.690 ops/s
# Warmup Iteration  26: 572849.662 ops/s
# Warmup Iteration  27: 589934.716 ops/s
# Warmup Iteration  28: 595536.281 ops/s
# Warmup Iteration  29: 619865.332 ops/s
# Warmup Iteration  30: 602388.736 ops/s
Iteration   1: 581728.486 ops/s
Iteration   2: 605346.958 ops/s
Iteration   3: 580179.730 ops/s
Iteration   4: 598986.769 ops/s
Iteration   5: 590952.931 ops/s
Iteration   6: 595087.107 ops/s
Iteration   7: 590332.868 ops/s
Iteration   8: 592528.655 ops/s
Iteration   9: 607421.778 ops/s
Iteration  10: 570506.947 ops/s
Iteration  11: 604293.280 ops/s
Iteration  12: 582914.216 ops/s
Iteration  13: 598864.133 ops/s
Iteration  14: 607618.260 ops/s
Iteration  15: 572636.504 ops/s
Iteration  16: 617962.292 ops/s
Iteration  17: 585760.548 ops/s
Iteration  18: 600455.756 ops/s
Iteration  19: 586810.164 ops/s
Iteration  20: 582646.785 ops/s
Iteration  21: 623396.700 ops/s
Iteration  22: 581615.603 ops/s
Iteration  23: 627088.851 ops/s
Iteration  24: 581804.460 ops/s
Iteration  25: 612654.370 ops/s
Iteration  26: 603357.427 ops/s
Iteration  27: 592632.966 ops/s
Iteration  28: 594054.149 ops/s
Iteration  29: 620142.446 ops/s
Iteration  30: 587484.267 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_syncNull":
  595908.847 ±(99.9%) 9868.624 ops/s [Average]
  (min, avg, max) = (570506.947, 595908.847, 627088.851), stdev = 14770.892
  CI (99.9%): [586040.223, 605777.471] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score      Error  Units
FlowableFromCompletionStageTest._Benchmark.benchmark_syncNull  thrpt   30  595908.847 ± 9868.624  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_syncFailure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_syncFailure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107092.140 ops/s
# Warmup Iteration   2: 294848.948 ops/s
# Warmup Iteration   3: 332581.457 ops/s
# Warmup Iteration   4: 326496.798 ops/s
# Warmup Iteration   5: 307547.686 ops/s
# Warmup Iteration   6: 328454.857 ops/s
# Warmup Iteration   7: 302211.717 ops/s
# Warmup Iteration   8: 323477.524 ops/s
# Warmup Iteration   9: 327327.974 ops/s
# Warmup Iteration  10: 333071.985 ops/s
# Warmup Iteration  11: 324478.679 ops/s
# Warmup Iteration  12: 327150.093 ops/s
# Warmup Iteration  13: 326549.935 ops/s
# Warmup Iteration  14: 327107.784 ops/s
# Warmup Iteration  15: 328390.719 ops/s
# Warmup Iteration  16: 346023.374 ops/s
# Warmup Iteration  17: 339081.771 ops/s
# Warmup Iteration  18: 343491.655 ops/s
# Warmup Iteration  19: 355869.121 ops/s
# Warmup Iteration  20: 339641.848 ops/s
# Warmup Iteration  21: 357969.554 ops/s
# Warmup Iteration  22: 352451.674 ops/s
# Warmup Iteration  23: 329274.914 ops/s
# Warmup Iteration  24: 344614.599 ops/s
# Warmup Iteration  25: 352028.187 ops/s
# Warmup Iteration  26: 347450.595 ops/s
# Warmup Iteration  27: 340394.031 ops/s
# Warmup Iteration  28: 355818.893 ops/s
# Warmup Iteration  29: 357016.417 ops/s
# Warmup Iteration  30: 339452.834 ops/s
Iteration   1: 356933.478 ops/s
Iteration   2: 350286.579 ops/s
Iteration   3: 347378.498 ops/s
Iteration   4: 355538.181 ops/s
Iteration   5: 363163.474 ops/s
Iteration   6: 337511.500 ops/s
Iteration   7: 357182.831 ops/s
Iteration   8: 347019.313 ops/s
Iteration   9: 348564.676 ops/s
Iteration  10: 351197.087 ops/s
Iteration  11: 348959.946 ops/s
Iteration  12: 367408.280 ops/s
Iteration  13: 352017.827 ops/s
Iteration  14: 341155.135 ops/s
Iteration  15: 345273.999 ops/s
Iteration  16: 357502.465 ops/s
Iteration  17: 339145.776 ops/s
Iteration  18: 354948.526 ops/s
Iteration  19: 348373.082 ops/s
Iteration  20: 355498.046 ops/s
Iteration  21: 330169.800 ops/s
Iteration  22: 357566.813 ops/s
Iteration  23: 348440.427 ops/s
Iteration  24: 335336.263 ops/s
Iteration  25: 356346.294 ops/s
Iteration  26: 344115.169 ops/s
Iteration  27: 344085.175 ops/s
Iteration  28: 351821.942 ops/s
Iteration  29: 349143.674 ops/s
Iteration  30: 347186.077 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFromCompletionStageTest._Benchmark.benchmark_syncFailure":
  349642.344 ±(99.9%) 5415.167 ops/s [Average]
  (min, avg, max) = (330169.800, 349642.344, 367408.280), stdev = 8105.167
  CI (99.9%): [344227.178, 355057.511] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableFromCompletionStageTest._Benchmark.benchmark_syncFailure  thrpt   30  349642.344 ± 5415.167  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_otherComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_otherComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 89628.543 ops/s
# Warmup Iteration   2: 274926.744 ops/s
# Warmup Iteration   3: 524368.577 ops/s
# Warmup Iteration   4: 562770.248 ops/s
# Warmup Iteration   5: 572369.197 ops/s
# Warmup Iteration   6: 564141.292 ops/s
# Warmup Iteration   7: 535606.891 ops/s
# Warmup Iteration   8: 559219.612 ops/s
# Warmup Iteration   9: 550536.360 ops/s
# Warmup Iteration  10: 554945.785 ops/s
# Warmup Iteration  11: 565152.553 ops/s
# Warmup Iteration  12: 551432.419 ops/s
# Warmup Iteration  13: 554614.735 ops/s
# Warmup Iteration  14: 552350.920 ops/s
# Warmup Iteration  15: 561132.305 ops/s
# Warmup Iteration  16: 579404.178 ops/s
# Warmup Iteration  17: 608437.512 ops/s
# Warmup Iteration  18: 589484.540 ops/s
# Warmup Iteration  19: 612633.825 ops/s
# Warmup Iteration  20: 571436.371 ops/s
# Warmup Iteration  21: 599641.536 ops/s
# Warmup Iteration  22: 583563.709 ops/s
# Warmup Iteration  23: 597361.505 ops/s
# Warmup Iteration  24: 589487.513 ops/s
# Warmup Iteration  25: 579465.908 ops/s
# Warmup Iteration  26: 579025.694 ops/s
# Warmup Iteration  27: 606281.708 ops/s
# Warmup Iteration  28: 611755.152 ops/s
# Warmup Iteration  29: 570956.669 ops/s
# Warmup Iteration  30: 608803.441 ops/s
Iteration   1: 580459.675 ops/s
Iteration   2: 586350.582 ops/s
Iteration   3: 596981.592 ops/s
Iteration   4: 606990.419 ops/s
Iteration   5: 579296.718 ops/s
Iteration   6: 592610.933 ops/s
Iteration   7: 611149.363 ops/s
Iteration   8: 615626.896 ops/s
Iteration   9: 588345.437 ops/s
Iteration  10: 581875.245 ops/s
Iteration  11: 581412.467 ops/s
Iteration  12: 598901.208 ops/s
Iteration  13: 584631.118 ops/s
Iteration  14: 586780.080 ops/s
Iteration  15: 609786.595 ops/s
Iteration  16: 593701.686 ops/s
Iteration  17: 606797.962 ops/s
Iteration  18: 567703.165 ops/s
Iteration  19: 612044.856 ops/s
Iteration  20: 597580.042 ops/s
Iteration  21: 585470.747 ops/s
Iteration  22: 594630.950 ops/s
Iteration  23: 585635.732 ops/s
Iteration  24: 563179.570 ops/s
Iteration  25: 616968.872 ops/s
Iteration  26: 573393.845 ops/s
Iteration  27: 608217.046 ops/s
Iteration  28: 583777.347 ops/s
Iteration  29: 606879.030 ops/s
Iteration  30: 591833.118 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutPublisherTest._Benchmark.benchmark_otherComplete":
  592967.077 ±(99.9%) 9476.369 ops/s [Average]
  (min, avg, max) = (563179.570, 592967.077, 616968.872), stdev = 14183.784
  CI (99.9%): [583490.708, 602443.446] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MaybeTimeoutPublisherTest._Benchmark.benchmark_otherComplete  thrpt   30  592967.077 ± 9476.369  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112113.607 ops/s
# Warmup Iteration   2: 505919.036 ops/s
# Warmup Iteration   3: 552416.238 ops/s
# Warmup Iteration   4: 588795.904 ops/s
# Warmup Iteration   5: 598796.492 ops/s
# Warmup Iteration   6: 567031.809 ops/s
# Warmup Iteration   7: 531677.234 ops/s
# Warmup Iteration   8: 581959.095 ops/s
# Warmup Iteration   9: 603597.333 ops/s
# Warmup Iteration  10: 576319.766 ops/s
# Warmup Iteration  11: 589727.088 ops/s
# Warmup Iteration  12: 595614.395 ops/s
# Warmup Iteration  13: 593319.062 ops/s
# Warmup Iteration  14: 622652.052 ops/s
# Warmup Iteration  15: 588577.529 ops/s
# Warmup Iteration  16: 619121.172 ops/s
# Warmup Iteration  17: 614883.259 ops/s
# Warmup Iteration  18: 623408.508 ops/s
# Warmup Iteration  19: 637321.831 ops/s
# Warmup Iteration  20: 611939.388 ops/s
# Warmup Iteration  21: 644878.995 ops/s
# Warmup Iteration  22: 636427.021 ops/s
# Warmup Iteration  23: 609177.911 ops/s
# Warmup Iteration  24: 628382.923 ops/s
# Warmup Iteration  25: 615132.687 ops/s
# Warmup Iteration  26: 622483.081 ops/s
# Warmup Iteration  27: 652172.028 ops/s
# Warmup Iteration  28: 640198.635 ops/s
# Warmup Iteration  29: 603158.327 ops/s
# Warmup Iteration  30: 633308.549 ops/s
Iteration   1: 643610.492 ops/s
Iteration   2: 611212.934 ops/s
Iteration   3: 618126.451 ops/s
Iteration   4: 640487.745 ops/s
Iteration   5: 607876.194 ops/s
Iteration   6: 643086.287 ops/s
Iteration   7: 617019.794 ops/s
Iteration   8: 629645.934 ops/s
Iteration   9: 646443.892 ops/s
Iteration  10: 601711.312 ops/s
Iteration  11: 650273.236 ops/s
Iteration  12: 617191.375 ops/s
Iteration  13: 605615.207 ops/s
Iteration  14: 615597.445 ops/s
Iteration  15: 647894.119 ops/s
Iteration  16: 619946.710 ops/s
Iteration  17: 624506.406 ops/s
Iteration  18: 636010.330 ops/s
Iteration  19: 623381.452 ops/s
Iteration  20: 638778.779 ops/s
Iteration  21: 617422.978 ops/s
Iteration  22: 642254.633 ops/s
Iteration  23: 632196.812 ops/s
Iteration  24: 618985.936 ops/s
Iteration  25: 626182.081 ops/s
Iteration  26: 625393.903 ops/s
Iteration  27: 622784.788 ops/s
Iteration  28: 528138.382 ops/s
Iteration  29: 626062.639 ops/s
Iteration  30: 638698.664 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableSingleTest._Benchmark.benchmark_singleOrError":
  623884.564 ±(99.9%) 14961.109 ops/s [Average]
  (min, avg, max) = (528138.382, 623884.564, 650273.236), stdev = 22393.085
  CI (99.9%): [608923.455, 638845.672] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
FlowableSingleTest._Benchmark.benchmark_singleOrError  thrpt   30  623884.564 ± 14961.109  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowOverlap$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowOverlap

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 283789.486 ops/s
# Warmup Iteration   2: 910699.695 ops/s
# Warmup Iteration   3: 1533965.072 ops/s
# Warmup Iteration   4: 1634404.857 ops/s
# Warmup Iteration   5: 1788326.165 ops/s
# Warmup Iteration   6: 1676561.693 ops/s
# Warmup Iteration   7: 1644963.233 ops/s
# Warmup Iteration   8: 1731449.039 ops/s
# Warmup Iteration   9: 1653454.893 ops/s
# Warmup Iteration  10: 1748528.487 ops/s
# Warmup Iteration  11: 1754669.060 ops/s
# Warmup Iteration  12: 1703158.225 ops/s
# Warmup Iteration  13: 1762808.142 ops/s
# Warmup Iteration  14: 1649536.196 ops/s
# Warmup Iteration  15: 1697955.631 ops/s
# Warmup Iteration  16: 1675676.350 ops/s
# Warmup Iteration  17: 1669147.294 ops/s
# Warmup Iteration  18: 1777092.146 ops/s
# Warmup Iteration  19: 1735385.875 ops/s
# Warmup Iteration  20: 1647672.731 ops/s
# Warmup Iteration  21: 1744872.818 ops/s
# Warmup Iteration  22: 1653153.189 ops/s
# Warmup Iteration  23: 1719360.745 ops/s
# Warmup Iteration  24: 1783176.605 ops/s
# Warmup Iteration  25: 1756298.619 ops/s
# Warmup Iteration  26: 1656193.911 ops/s
# Warmup Iteration  27: 1762127.561 ops/s
# Warmup Iteration  28: 1724110.412 ops/s
# Warmup Iteration  29: 1681365.629 ops/s
# Warmup Iteration  30: 1771823.173 ops/s
Iteration   1: 1679865.617 ops/s
Iteration   2: 1716027.005 ops/s
Iteration   3: 1784676.077 ops/s
Iteration   4: 1673961.619 ops/s
Iteration   5: 1715550.168 ops/s
Iteration   6: 1632308.205 ops/s
Iteration   7: 1707296.128 ops/s
Iteration   8: 1775388.850 ops/s
Iteration   9: 1671174.175 ops/s
Iteration  10: 1723779.951 ops/s
Iteration  11: 1735744.266 ops/s
Iteration  12: 1682248.090 ops/s
Iteration  13: 1701346.134 ops/s
Iteration  14: 1662304.714 ops/s
Iteration  15: 1723418.575 ops/s
Iteration  16: 1802179.474 ops/s
Iteration  17: 1725491.155 ops/s
Iteration  18: 1692991.020 ops/s
Iteration  19: 1669927.267 ops/s
Iteration  20: 1757201.509 ops/s
Iteration  21: 1660152.458 ops/s
Iteration  22: 1704485.977 ops/s
Iteration  23: 1765066.403 ops/s
Iteration  24: 1736334.740 ops/s
Iteration  25: 1733196.674 ops/s
Iteration  26: 1661051.569 ops/s
Iteration  27: 1758521.976 ops/s
Iteration  28: 1767840.769 ops/s
Iteration  29: 1752836.027 ops/s
Iteration  30: 1706538.903 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowOverlap":
  1715963.517 ±(99.9%) 28384.889 ops/s [Average]
  (min, avg, max) = (1632308.205, 1715963.517, 1802179.474), stdev = 42485.169
  CI (99.9%): [1687578.628, 1744348.405] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt        Score       Error  Units
FlowableWindowWithSizeTest._Benchmark.benchmark_cancelWithoutWindowOverlap  thrpt   30  1715963.517 ± 28384.889  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_undeliverableUponCancellation$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_undeliverableUponCancellation

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 82671.494 ops/s
# Warmup Iteration   2: 208725.368 ops/s
# Warmup Iteration   3: 225043.239 ops/s
# Warmup Iteration   4: 206677.623 ops/s
# Warmup Iteration   5: 249129.172 ops/s
# Warmup Iteration   6: 240073.907 ops/s
# Warmup Iteration   7: 252472.278 ops/s
# Warmup Iteration   8: 248830.743 ops/s
# Warmup Iteration   9: 240807.997 ops/s
# Warmup Iteration  10: 251701.529 ops/s
# Warmup Iteration  11: 242293.462 ops/s
# Warmup Iteration  12: 242581.695 ops/s
# Warmup Iteration  13: 251772.714 ops/s
# Warmup Iteration  14: 245543.543 ops/s
# Warmup Iteration  15: 251053.214 ops/s
# Warmup Iteration  16: 244717.499 ops/s
# Warmup Iteration  17: 266571.664 ops/s
# Warmup Iteration  18: 264882.739 ops/s
# Warmup Iteration  19: 257136.571 ops/s
# Warmup Iteration  20: 269888.563 ops/s
# Warmup Iteration  21: 249352.065 ops/s
# Warmup Iteration  22: 273559.967 ops/s
# Warmup Iteration  23: 250439.114 ops/s
# Warmup Iteration  24: 260541.115 ops/s
# Warmup Iteration  25: 256102.561 ops/s
# Warmup Iteration  26: 270704.649 ops/s
# Warmup Iteration  27: 262682.446 ops/s
# Warmup Iteration  28: 257698.937 ops/s
# Warmup Iteration  29: 271928.329 ops/s
# Warmup Iteration  30: 256725.510 ops/s
Iteration   1: 257895.625 ops/s
Iteration   2: 272894.988 ops/s
Iteration   3: 258642.892 ops/s
Iteration   4: 256253.305 ops/s
Iteration   5: 268407.522 ops/s
Iteration   6: 258087.895 ops/s
Iteration   7: 269490.818 ops/s
Iteration   8: 260301.575 ops/s
Iteration   9: 259841.817 ops/s
Iteration  10: 270114.077 ops/s
Iteration  11: 258946.582 ops/s
Iteration  12: 260525.586 ops/s
Iteration  13: 271330.164 ops/s
Iteration  14: 263823.001 ops/s
Iteration  15: 259888.573 ops/s
Iteration  16: 260721.361 ops/s
Iteration  17: 256246.156 ops/s
Iteration  18: 272704.491 ops/s
Iteration  19: 252873.293 ops/s
Iteration  20: 267232.914 ops/s
Iteration  21: 259424.931 ops/s
Iteration  22: 210534.116 ops/s
Iteration  23: 264771.435 ops/s
Iteration  24: 259189.255 ops/s
Iteration  25: 258537.501 ops/s
Iteration  26: 270275.943 ops/s
Iteration  27: 252800.948 ops/s
Iteration  28: 260048.928 ops/s
Iteration  29: 269830.071 ops/s
Iteration  30: 257089.509 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromCallableTest._Benchmark.benchmark_undeliverableUponCancellation":
  260624.176 ±(99.9%) 7444.474 ops/s [Average]
  (min, avg, max) = (210534.116, 260624.176, 272894.988), stdev = 11142.538
  CI (99.9%): [253179.702, 268068.649] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableFromCallableTest._Benchmark.benchmark_undeliverableUponCancellation  thrpt   30  260624.176 ± 7444.474  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_undeliverableUponCancellation$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_undeliverableUponCancellation

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 66317.979 ops/s
# Warmup Iteration   2: 204543.612 ops/s
# Warmup Iteration   3: 223646.587 ops/s
# Warmup Iteration   4: 224184.915 ops/s
# Warmup Iteration   5: 259130.663 ops/s
# Warmup Iteration   6: 246215.122 ops/s
# Warmup Iteration   7: 254905.048 ops/s
# Warmup Iteration   8: 260084.133 ops/s
# Warmup Iteration   9: 251447.853 ops/s
# Warmup Iteration  10: 246531.060 ops/s
# Warmup Iteration  11: 259099.031 ops/s
# Warmup Iteration  12: 249245.845 ops/s
# Warmup Iteration  13: 260285.033 ops/s
# Warmup Iteration  14: 263072.405 ops/s
# Warmup Iteration  15: 246169.488 ops/s
# Warmup Iteration  16: 264174.071 ops/s
# Warmup Iteration  17: 261650.324 ops/s
# Warmup Iteration  18: 262562.936 ops/s
# Warmup Iteration  19: 273435.369 ops/s
# Warmup Iteration  20: 258444.982 ops/s
# Warmup Iteration  21: 269260.862 ops/s
# Warmup Iteration  22: 260038.025 ops/s
# Warmup Iteration  23: 274141.184 ops/s
# Warmup Iteration  24: 261717.460 ops/s
# Warmup Iteration  25: 254905.734 ops/s
# Warmup Iteration  26: 277644.678 ops/s
# Warmup Iteration  27: 272778.479 ops/s
# Warmup Iteration  28: 257010.722 ops/s
# Warmup Iteration  29: 274077.469 ops/s
# Warmup Iteration  30: 265674.931 ops/s
Iteration   1: 265321.817 ops/s
Iteration   2: 264145.325 ops/s
Iteration   3: 263458.163 ops/s
Iteration   4: 256470.455 ops/s
Iteration   5: 270819.006 ops/s
Iteration   6: 262017.619 ops/s
Iteration   7: 271748.022 ops/s
Iteration   8: 261582.695 ops/s
Iteration   9: 271871.179 ops/s
Iteration  10: 266535.865 ops/s
Iteration  11: 267547.222 ops/s
Iteration  12: 272782.773 ops/s
Iteration  13: 260258.934 ops/s
Iteration  14: 274349.233 ops/s
Iteration  15: 271226.414 ops/s
Iteration  16: 257261.782 ops/s
Iteration  17: 265662.541 ops/s
Iteration  18: 272879.232 ops/s
Iteration  19: 263637.605 ops/s
Iteration  20: 267499.682 ops/s
Iteration  21: 261887.911 ops/s
Iteration  22: 269907.199 ops/s
Iteration  23: 271258.471 ops/s
Iteration  24: 261867.165 ops/s
Iteration  25: 265624.520 ops/s
Iteration  26: 263257.311 ops/s
Iteration  27: 272493.951 ops/s
Iteration  28: 273079.772 ops/s
Iteration  29: 259063.184 ops/s
Iteration  30: 267437.903 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFromSupplierTest._Benchmark.benchmark_undeliverableUponCancellation":
  266431.765 ±(99.9%) 3418.074 ops/s [Average]
  (min, avg, max) = (256470.455, 266431.765, 274349.233), stdev = 5116.012
  CI (99.9%): [263013.691, 269849.839] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score      Error  Units
FlowableFromSupplierTest._Benchmark.benchmark_undeliverableUponCancellation  thrpt   30  266431.765 ± 3418.074  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPathBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPathBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 118565.250 ops/s
# Warmup Iteration   2: 434216.687 ops/s
# Warmup Iteration   3: 1151802.055 ops/s
# Warmup Iteration   4: 1275579.069 ops/s
# Warmup Iteration   5: 1402887.676 ops/s
# Warmup Iteration   6: 1373020.547 ops/s
# Warmup Iteration   7: 1455235.324 ops/s
# Warmup Iteration   8: 1344996.909 ops/s
# Warmup Iteration   9: 1363801.975 ops/s
# Warmup Iteration  10: 1462013.880 ops/s
# Warmup Iteration  11: 1390746.663 ops/s
# Warmup Iteration  12: 1426839.301 ops/s
# Warmup Iteration  13: 1355576.093 ops/s
# Warmup Iteration  14: 1428603.973 ops/s
# Warmup Iteration  15: 1383223.359 ops/s
# Warmup Iteration  16: 1406374.119 ops/s
# Warmup Iteration  17: 1383481.414 ops/s
# Warmup Iteration  18: 1423407.784 ops/s
# Warmup Iteration  19: 1391331.457 ops/s
# Warmup Iteration  20: 1406786.028 ops/s
# Warmup Iteration  21: 1435109.173 ops/s
# Warmup Iteration  22: 1390797.670 ops/s
# Warmup Iteration  23: 1408993.673 ops/s
# Warmup Iteration  24: 1371612.957 ops/s
# Warmup Iteration  25: 1359994.072 ops/s
# Warmup Iteration  26: 1392690.283 ops/s
# Warmup Iteration  27: 1437875.936 ops/s
# Warmup Iteration  28: 1366505.105 ops/s
# Warmup Iteration  29: 1442584.299 ops/s
# Warmup Iteration  30: 1403879.559 ops/s
Iteration   1: 1391028.499 ops/s
Iteration   2: 1434105.269 ops/s
Iteration   3: 1383470.674 ops/s
Iteration   4: 1389203.422 ops/s
Iteration   5: 1427460.610 ops/s
Iteration   6: 1386005.341 ops/s
Iteration   7: 1426187.230 ops/s
Iteration   8: 1354955.300 ops/s
Iteration   9: 1415123.703 ops/s
Iteration  10: 1403776.044 ops/s
Iteration  11: 1410994.748 ops/s
Iteration  12: 1395538.526 ops/s
Iteration  13: 1383048.178 ops/s
Iteration  14: 1423527.883 ops/s
Iteration  15: 1360469.696 ops/s
Iteration  16: 1261574.488 ops/s
Iteration  17: 1294628.640 ops/s
Iteration  18: 1348306.557 ops/s
Iteration  19: 1424026.984 ops/s
Iteration  20: 1414569.171 ops/s
Iteration  21: 1397308.914 ops/s
Iteration  22: 1440314.769 ops/s
Iteration  23: 1359012.295 ops/s
Iteration  24: 1427815.271 ops/s
Iteration  25: 1373528.098 ops/s
Iteration  26: 1388381.444 ops/s
Iteration  27: 1343733.129 ops/s
Iteration  28: 1416253.174 ops/s
Iteration  29: 1401515.674 ops/s
Iteration  30: 1412250.258 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPathBackpressured":
  1389603.800 ±(99.9%) 26917.929 ops/s [Average]
  (min, avg, max) = (1261574.488, 1389603.800, 1440314.769), stdev = 40289.492
  CI (99.9%): [1362685.871, 1416521.729] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
FlowableMergeWithMaybeTest._Benchmark.benchmark_onSuccessSlowPathBackpressured  thrpt   30  1389603.800 ± 26917.929  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTimedTest._Benchmark.benchmark_timedDefaultScheduler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTimedTest._Benchmark.benchmark_timedDefaultScheduler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32990.261 ops/s
# Warmup Iteration   2: 128880.466 ops/s
# Warmup Iteration   3: 147153.600 ops/s
# Warmup Iteration   4: 128828.043 ops/s
# Warmup Iteration   5: 147723.311 ops/s
# Warmup Iteration   6: 121861.905 ops/s
# Warmup Iteration   7: 138092.027 ops/s
# Warmup Iteration   8: 125429.786 ops/s
# Warmup Iteration   9: 133577.590 ops/s
# Warmup Iteration  10: 126000.182 ops/s
# Warmup Iteration  11: 123061.468 ops/s
# Warmup Iteration  12: 123557.123 ops/s
# Warmup Iteration  13: 112344.183 ops/s
# Warmup Iteration  14: 117570.167 ops/s
# Warmup Iteration  15: 126177.100 ops/s
# Warmup Iteration  16: 123854.394 ops/s
# Warmup Iteration  17: 134736.632 ops/s
# Warmup Iteration  18: 133951.895 ops/s
# Warmup Iteration  19: 126062.466 ops/s
# Warmup Iteration  20: 123933.681 ops/s
# Warmup Iteration  21: 122071.696 ops/s
# Warmup Iteration  22: 150737.422 ops/s
# Warmup Iteration  23: 129328.609 ops/s
# Warmup Iteration  24: 147069.712 ops/s
# Warmup Iteration  25: 122569.056 ops/s
# Warmup Iteration  26: 124315.688 ops/s
# Warmup Iteration  27: 150737.734 ops/s
# Warmup Iteration  28: 131916.932 ops/s
# Warmup Iteration  29: 124225.667 ops/s
# Warmup Iteration  30: 131105.987 ops/s
Iteration   1: 123997.920 ops/s
Iteration   2: 105674.290 ops/s
Iteration   3: 122700.131 ops/s
Iteration   4: 125563.550 ops/s
Iteration   5: 133381.881 ops/s
Iteration   6: 115316.792 ops/s
Iteration   7: 132054.836 ops/s
Iteration   8: 113598.153 ops/s
Iteration   9: 135069.824 ops/s
Iteration  10: 116856.327 ops/s
Iteration  11: 119211.059 ops/s
Iteration  12: 115011.079 ops/s
Iteration  13: 135921.534 ops/s
Iteration  14: 120172.809 ops/s
Iteration  15: 124104.245 ops/s
Iteration  16: 121536.584 ops/s
Iteration  17: 134052.305 ops/s
Iteration  18: 120335.676 ops/s
Iteration  19: 126987.496 ops/s
Iteration  20: 136029.424 ops/s
Iteration  21: 121487.295 ops/s
Iteration  22: 123696.325 ops/s
Iteration  23: 124165.552 ops/s
Iteration  24: 124179.223 ops/s
Iteration  25: 115034.991 ops/s
Iteration  26: 124358.267 ops/s
Iteration  27: 128145.926 ops/s
Iteration  28: 132456.857 ops/s
Iteration  29: 148391.438 ops/s
Iteration  30: 129232.724 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTimedTest._Benchmark.benchmark_timedDefaultScheduler":
  124957.484 ±(99.9%) 5759.659 ops/s [Average]
  (min, avg, max) = (105674.290, 124957.484, 148391.438), stdev = 8620.787
  CI (99.9%): [119197.825, 130717.142] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableTakeTimedTest._Benchmark.benchmark_timedDefaultScheduler  thrpt   30  124957.484 ± 5759.659  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 168946.964 ops/s
# Warmup Iteration   2: 570247.498 ops/s
# Warmup Iteration   3: 661091.984 ops/s
# Warmup Iteration   4: 682958.015 ops/s
# Warmup Iteration   5: 614811.311 ops/s
# Warmup Iteration   6: 720062.710 ops/s
# Warmup Iteration   7: 698956.550 ops/s
# Warmup Iteration   8: 734652.325 ops/s
# Warmup Iteration   9: 720902.853 ops/s
# Warmup Iteration  10: 705213.098 ops/s
# Warmup Iteration  11: 699394.219 ops/s
# Warmup Iteration  12: 747595.951 ops/s
# Warmup Iteration  13: 693627.138 ops/s
# Warmup Iteration  14: 720097.079 ops/s
# Warmup Iteration  15: 704045.939 ops/s
# Warmup Iteration  16: 713800.215 ops/s
# Warmup Iteration  17: 733379.789 ops/s
# Warmup Iteration  18: 751416.111 ops/s
# Warmup Iteration  19: 765037.770 ops/s
# Warmup Iteration  20: 789562.491 ops/s
# Warmup Iteration  21: 725728.123 ops/s
# Warmup Iteration  22: 762519.125 ops/s
# Warmup Iteration  23: 792930.362 ops/s
# Warmup Iteration  24: 724303.250 ops/s
# Warmup Iteration  25: 772609.776 ops/s
# Warmup Iteration  26: 775934.109 ops/s
# Warmup Iteration  27: 741791.030 ops/s
# Warmup Iteration  28: 736993.631 ops/s
# Warmup Iteration  29: 777206.613 ops/s
# Warmup Iteration  30: 763918.781 ops/s
Iteration   1: 741552.492 ops/s
Iteration   2: 771593.307 ops/s
Iteration   3: 742996.195 ops/s
Iteration   4: 759192.700 ops/s
Iteration   5: 783242.135 ops/s
Iteration   6: 717892.079 ops/s
Iteration   7: 787890.067 ops/s
Iteration   8: 735121.069 ops/s
Iteration   9: 738764.573 ops/s
Iteration  10: 655693.749 ops/s
Iteration  11: 734676.578 ops/s
Iteration  12: 750652.668 ops/s
Iteration  13: 772111.654 ops/s
Iteration  14: 746248.250 ops/s
Iteration  15: 721908.672 ops/s
Iteration  16: 772388.776 ops/s
Iteration  17: 745407.197 ops/s
Iteration  18: 743898.178 ops/s
Iteration  19: 755017.039 ops/s
Iteration  20: 780485.854 ops/s
Iteration  21: 739110.588 ops/s
Iteration  22: 747914.204 ops/s
Iteration  23: 786089.821 ops/s
Iteration  24: 720716.246 ops/s
Iteration  25: 796908.547 ops/s
Iteration  26: 736013.465 ops/s
Iteration  27: 760925.314 ops/s
Iteration  28: 754635.227 ops/s
Iteration  29: 782316.924 ops/s
Iteration  30: 714853.097 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableUnsubscribeOnTest._Benchmark.benchmark_error":
  749873.889 ±(99.9%) 19069.238 ops/s [Average]
  (min, avg, max) = (655693.749, 749873.889, 796908.547), stdev = 28541.940
  CI (99.9%): [730804.651, 768943.127] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
ObservableUnsubscribeOnTest._Benchmark.benchmark_error  thrpt   30  749873.889 ± 19069.238  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_mainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_mainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 11553.147 ops/s
# Warmup Iteration   2: 34569.479 ops/s
# Warmup Iteration   3: 110462.266 ops/s
# Warmup Iteration   4: 109011.334 ops/s
# Warmup Iteration   5: 100340.807 ops/s
# Warmup Iteration   6: 109239.341 ops/s
# Warmup Iteration   7: 111008.765 ops/s
# Warmup Iteration   8: 114252.376 ops/s
# Warmup Iteration   9: 101277.581 ops/s
# Warmup Iteration  10: 132446.215 ops/s
# Warmup Iteration  11: 115990.641 ops/s
# Warmup Iteration  12: 118692.658 ops/s
# Warmup Iteration  13: 109510.500 ops/s
# Warmup Iteration  14: 114565.037 ops/s
# Warmup Iteration  15: 111377.739 ops/s
# Warmup Iteration  16: 105284.147 ops/s
# Warmup Iteration  17: 122807.098 ops/s
# Warmup Iteration  18: 126230.663 ops/s
# Warmup Iteration  19: 110638.122 ops/s
# Warmup Iteration  20: 129478.597 ops/s
# Warmup Iteration  21: 115849.843 ops/s
# Warmup Iteration  22: 113093.296 ops/s
# Warmup Iteration  23: 131364.704 ops/s
# Warmup Iteration  24: 94440.899 ops/s
# Warmup Iteration  25: 119608.207 ops/s
# Warmup Iteration  26: 120414.148 ops/s
# Warmup Iteration  27: 98565.371 ops/s
# Warmup Iteration  28: 112086.245 ops/s
# Warmup Iteration  29: 123267.813 ops/s
# Warmup Iteration  30: 110297.479 ops/s
Iteration   1: 114276.662 ops/s
Iteration   2: 116136.625 ops/s
Iteration   3: 119775.884 ops/s
Iteration   4: 126816.491 ops/s
Iteration   5: 123173.979 ops/s
Iteration   6: 116804.460 ops/s
Iteration   7: 125553.264 ops/s
Iteration   8: 117256.606 ops/s
Iteration   9: 118843.763 ops/s
Iteration  10: 114795.179 ops/s
Iteration  11: 109615.217 ops/s
Iteration  12: 119741.020 ops/s
Iteration  13: 135711.704 ops/s
Iteration  14: 135392.676 ops/s
Iteration  15: 118864.845 ops/s
Iteration  16: 107218.845 ops/s
Iteration  17: 108562.779 ops/s
Iteration  18: 105163.639 ops/s
Iteration  19: 114158.521 ops/s
Iteration  20: 100873.463 ops/s
Iteration  21: 113184.473 ops/s
Iteration  22: 110360.186 ops/s
Iteration  23: 117185.279 ops/s
Iteration  24: 121130.988 ops/s
Iteration  25: 125408.178 ops/s
Iteration  26: 99580.547 ops/s
Iteration  27: 110938.110 ops/s
Iteration  28: 116484.956 ops/s
Iteration  29: 134816.760 ops/s
Iteration  30: 108214.370 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_mainError":
  116867.982 ±(99.9%) 6130.774 ops/s [Average]
  (min, avg, max) = (99580.547, 116867.982, 135711.704), stdev = 9176.254
  CI (99.9%): [110737.209, 122998.756] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                          Mode  Cnt       Score      Error  Units
SingleTimeoutTest._Benchmark.benchmark_mainError  thrpt   30  116867.982 ± 6130.774  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimeSkipDefault$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimeSkipDefault

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.693 ops/s
# Warmup Iteration   2: 7788.314 ops/s
# Warmup Iteration   3: 32114.401 ops/s
# Warmup Iteration   4: 33503.883 ops/s
# Warmup Iteration   5: 55218.945 ops/s
# Warmup Iteration   6: 52907.536 ops/s
# Warmup Iteration   7: 45719.730 ops/s
# Warmup Iteration   8: 89941.825 ops/s
# Warmup Iteration   9: 103278.815 ops/s
# Warmup Iteration  10: 106156.182 ops/s
# Warmup Iteration  11: 116971.499 ops/s
# Warmup Iteration  12: 110790.150 ops/s
# Warmup Iteration  13: 118032.719 ops/s
# Warmup Iteration  14: 111161.392 ops/s
# Warmup Iteration  15: 102607.435 ops/s
# Warmup Iteration  16: 111000.494 ops/s
# Warmup Iteration  17: 122290.383 ops/s
# Warmup Iteration  18: 118357.382 ops/s
# Warmup Iteration  19: 107570.546 ops/s
# Warmup Iteration  20: 113185.561 ops/s
# Warmup Iteration  21: 106082.571 ops/s
# Warmup Iteration  22: 109283.007 ops/s
# Warmup Iteration  23: 102828.709 ops/s
# Warmup Iteration  24: 114832.561 ops/s
# Warmup Iteration  25: 105221.711 ops/s
# Warmup Iteration  26: 130901.552 ops/s
# Warmup Iteration  27: 115087.662 ops/s
# Warmup Iteration  28: 121823.289 ops/s
# Warmup Iteration  29: 116762.621 ops/s
# Warmup Iteration  30: 112237.355 ops/s
Iteration   1: 111249.270 ops/s
Iteration   2: 87976.782 ops/s
Iteration   3: 119724.526 ops/s
Iteration   4: 110567.486 ops/s
Iteration   5: 103061.421 ops/s
Iteration   6: 119133.146 ops/s
Iteration   7: 131003.094 ops/s
Iteration   8: 117295.142 ops/s
Iteration   9: 120299.866 ops/s
Iteration  10: 106681.666 ops/s
Iteration  11: 107290.305 ops/s
Iteration  12: 112813.076 ops/s
Iteration  13: 116448.842 ops/s
Iteration  14: 105508.878 ops/s
Iteration  15: 137453.253 ops/s
Iteration  16: 125781.825 ops/s
Iteration  17: 110714.061 ops/s
Iteration  18: 132282.734 ops/s
Iteration  19: 133076.896 ops/s
Iteration  20: 117641.781 ops/s
Iteration  21: 124289.078 ops/s
Iteration  22: 123373.113 ops/s
Iteration  23: 128083.118 ops/s
Iteration  24: 115556.171 ops/s
Iteration  25: 113015.560 ops/s
Iteration  26: 115189.727 ops/s
Iteration  27: 117655.303 ops/s
Iteration  28: 116140.001 ops/s
Iteration  29: 107870.383 ops/s
Iteration  30: 128238.493 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferTimeSkipDefault":
  117180.500 ±(99.9%) 6969.582 ops/s [Average]
  (min, avg, max) = (87976.782, 117180.500, 137453.253), stdev = 10431.743
  CI (99.9%): [110210.918, 124150.082] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferTimeSkipDefault  thrpt   30  117180.500 ± 6969.582  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72475.160 ops/s
# Warmup Iteration   2: 122216.041 ops/s
# Warmup Iteration   3: 187544.187 ops/s
# Warmup Iteration   4: 174618.226 ops/s
# Warmup Iteration   5: 188360.119 ops/s
# Warmup Iteration   6: 194860.385 ops/s
# Warmup Iteration   7: 191412.628 ops/s
# Warmup Iteration   8: 185907.528 ops/s
# Warmup Iteration   9: 194111.020 ops/s
# Warmup Iteration  10: 182920.149 ops/s
# Warmup Iteration  11: 182935.582 ops/s
# Warmup Iteration  12: 194915.319 ops/s
# Warmup Iteration  13: 183177.501 ops/s
# Warmup Iteration  14: 192886.584 ops/s
# Warmup Iteration  15: 185324.444 ops/s
# Warmup Iteration  16: 189218.198 ops/s
# Warmup Iteration  17: 188832.670 ops/s
# Warmup Iteration  18: 192742.845 ops/s
# Warmup Iteration  19: 188239.941 ops/s
# Warmup Iteration  20: 185519.806 ops/s
# Warmup Iteration  21: 195057.491 ops/s
# Warmup Iteration  22: 181674.442 ops/s
# Warmup Iteration  23: 191725.565 ops/s
# Warmup Iteration  24: 184256.934 ops/s
# Warmup Iteration  25: 184962.878 ops/s
# Warmup Iteration  26: 195466.084 ops/s
# Warmup Iteration  27: 182770.166 ops/s
# Warmup Iteration  28: 182676.828 ops/s
# Warmup Iteration  29: 191784.274 ops/s
# Warmup Iteration  30: 180904.863 ops/s
Iteration   1: 193598.482 ops/s
Iteration   2: 190138.367 ops/s
Iteration   3: 183690.071 ops/s
Iteration   4: 187296.929 ops/s
Iteration   5: 183972.498 ops/s
Iteration   6: 186643.874 ops/s
Iteration   7: 188887.261 ops/s
Iteration   8: 187271.436 ops/s
Iteration   9: 193979.989 ops/s
Iteration  10: 182697.652 ops/s
Iteration  11: 192378.450 ops/s
Iteration  12: 184399.412 ops/s
Iteration  13: 187772.212 ops/s
Iteration  14: 188933.261 ops/s
Iteration  15: 181310.455 ops/s
Iteration  16: 184582.918 ops/s
Iteration  17: 190538.038 ops/s
Iteration  18: 187318.209 ops/s
Iteration  19: 195401.565 ops/s
Iteration  20: 191334.643 ops/s
Iteration  21: 184535.012 ops/s
Iteration  22: 191886.822 ops/s
Iteration  23: 186328.795 ops/s
Iteration  24: 193307.547 ops/s
Iteration  25: 184785.391 ops/s
Iteration  26: 187492.690 ops/s
Iteration  27: 188986.871 ops/s
Iteration  28: 186567.939 ops/s
Iteration  29: 192482.840 ops/s
Iteration  30: 187334.331 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound":
  188195.132 ±(99.9%) 2455.184 ops/s [Average]
  (min, avg, max) = (181310.455, 188195.132, 195401.565), stdev = 3674.804
  CI (99.9%): [185739.948, 190650.316] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                               Mode  Cnt       Score      Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_disposeNoNeedForResetTimeBound  thrpt   30  188195.132 ± 2455.184  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_nextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_nextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 71888.758 ops/s
# Warmup Iteration   2: 305752.330 ops/s
# Warmup Iteration   3: 557611.178 ops/s
# Warmup Iteration   4: 516981.883 ops/s
# Warmup Iteration   5: 525782.432 ops/s
# Warmup Iteration   6: 558667.866 ops/s
# Warmup Iteration   7: 574588.688 ops/s
# Warmup Iteration   8: 581584.170 ops/s
# Warmup Iteration   9: 591012.663 ops/s
# Warmup Iteration  10: 563321.192 ops/s
# Warmup Iteration  11: 539524.602 ops/s
# Warmup Iteration  12: 556293.331 ops/s
# Warmup Iteration  13: 580848.543 ops/s
# Warmup Iteration  14: 591173.465 ops/s
# Warmup Iteration  15: 564534.033 ops/s
# Warmup Iteration  16: 600161.294 ops/s
# Warmup Iteration  17: 593295.411 ops/s
# Warmup Iteration  18: 600798.276 ops/s
# Warmup Iteration  19: 618631.344 ops/s
# Warmup Iteration  20: 590514.067 ops/s
# Warmup Iteration  21: 623183.229 ops/s
# Warmup Iteration  22: 586870.919 ops/s
# Warmup Iteration  23: 595506.885 ops/s
# Warmup Iteration  24: 617084.348 ops/s
# Warmup Iteration  25: 551191.299 ops/s
# Warmup Iteration  26: 441494.744 ops/s
# Warmup Iteration  27: 622002.083 ops/s
# Warmup Iteration  28: 590816.895 ops/s
# Warmup Iteration  29: 619315.882 ops/s
# Warmup Iteration  30: 618294.764 ops/s
Iteration   1: 637008.470 ops/s
Iteration   2: 590333.757 ops/s
Iteration   3: 607178.905 ops/s
Iteration   4: 593056.735 ops/s
Iteration   5: 603449.400 ops/s
Iteration   6: 588125.473 ops/s
Iteration   7: 624472.409 ops/s
Iteration   8: 594656.952 ops/s
Iteration   9: 627784.633 ops/s
Iteration  10: 587803.415 ops/s
Iteration  11: 610690.519 ops/s
Iteration  12: 618148.719 ops/s
Iteration  13: 604707.617 ops/s
Iteration  14: 598426.984 ops/s
Iteration  15: 597046.597 ops/s
Iteration  16: 613127.471 ops/s
Iteration  17: 632259.004 ops/s
Iteration  18: 591087.550 ops/s
Iteration  19: 630328.497 ops/s
Iteration  20: 591889.419 ops/s
Iteration  21: 630179.531 ops/s
Iteration  22: 591580.363 ops/s
Iteration  23: 594391.237 ops/s
Iteration  24: 617445.280 ops/s
Iteration  25: 589329.646 ops/s
Iteration  26: 614438.564 ops/s
Iteration  27: 593707.534 ops/s
Iteration  28: 595592.577 ops/s
Iteration  29: 619506.530 ops/s
Iteration  30: 590202.279 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_nextThrows":
  605931.869 ±(99.9%) 10482.360 ops/s [Average]
  (min, avg, max) = (587803.415, 605931.869, 637008.470), stdev = 15689.504
  CI (99.9%): [595449.509, 616414.229] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_nextThrows  thrpt   30  605931.869 ± 10482.360  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_hasNextThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_hasNextThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 70276.105 ops/s
# Warmup Iteration   2: 312051.389 ops/s
# Warmup Iteration   3: 592388.457 ops/s
# Warmup Iteration   4: 561571.683 ops/s
# Warmup Iteration   5: 583232.286 ops/s
# Warmup Iteration   6: 573051.831 ops/s
# Warmup Iteration   7: 583796.610 ops/s
# Warmup Iteration   8: 559772.712 ops/s
# Warmup Iteration   9: 594903.242 ops/s
# Warmup Iteration  10: 576119.089 ops/s
# Warmup Iteration  11: 569786.012 ops/s
# Warmup Iteration  12: 558307.500 ops/s
# Warmup Iteration  13: 606252.713 ops/s
# Warmup Iteration  14: 577797.629 ops/s
# Warmup Iteration  15: 593068.237 ops/s
# Warmup Iteration  16: 583591.959 ops/s
# Warmup Iteration  17: 610031.350 ops/s
# Warmup Iteration  18: 610765.141 ops/s
# Warmup Iteration  19: 603679.576 ops/s
# Warmup Iteration  20: 606197.171 ops/s
# Warmup Iteration  21: 617661.676 ops/s
# Warmup Iteration  22: 578871.597 ops/s
# Warmup Iteration  23: 602975.649 ops/s
# Warmup Iteration  24: 591763.325 ops/s
# Warmup Iteration  25: 621848.031 ops/s
# Warmup Iteration  26: 620431.231 ops/s
# Warmup Iteration  27: 598060.429 ops/s
# Warmup Iteration  28: 625427.309 ops/s
# Warmup Iteration  29: 609120.473 ops/s
# Warmup Iteration  30: 612461.074 ops/s
Iteration   1: 595428.250 ops/s
Iteration   2: 612191.789 ops/s
Iteration   3: 600683.396 ops/s
Iteration   4: 628595.936 ops/s
Iteration   5: 639941.991 ops/s
Iteration   6: 593497.432 ops/s
Iteration   7: 622562.003 ops/s
Iteration   8: 612218.667 ops/s
Iteration   9: 609320.174 ops/s
Iteration  10: 639161.624 ops/s
Iteration  11: 605935.774 ops/s
Iteration  12: 624438.444 ops/s
Iteration  13: 625939.148 ops/s
Iteration  14: 597070.233 ops/s
Iteration  15: 619399.925 ops/s
Iteration  16: 606872.394 ops/s
Iteration  17: 624474.312 ops/s
Iteration  18: 625226.841 ops/s
Iteration  19: 591839.935 ops/s
Iteration  20: 636571.455 ops/s
Iteration  21: 626406.462 ops/s
Iteration  22: 608964.811 ops/s
Iteration  23: 615307.988 ops/s
Iteration  24: 614712.584 ops/s
Iteration  25: 612656.910 ops/s
Iteration  26: 627909.091 ops/s
Iteration  27: 591461.434 ops/s
Iteration  28: 633022.605 ops/s
Iteration  29: 617042.053 ops/s
Iteration  30: 597504.254 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_hasNextThrows":
  615211.930 ±(99.9%) 9583.361 ops/s [Average]
  (min, avg, max) = (591461.434, 615211.930, 639941.991), stdev = 14343.925
  CI (99.9%): [605628.569, 624795.291] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_hasNextThrows  thrpt   30  615211.930 ± 9583.361  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5176580.950 ops/s
# Warmup Iteration   2: 10325406.164 ops/s
# Warmup Iteration   3: 15050519.201 ops/s
# Warmup Iteration   4: 14427068.664 ops/s
# Warmup Iteration   5: 15003526.739 ops/s
# Warmup Iteration   6: 14406853.391 ops/s
# Warmup Iteration   7: 14530616.277 ops/s
# Warmup Iteration   8: 14712824.661 ops/s
# Warmup Iteration   9: 15255291.093 ops/s
# Warmup Iteration  10: 14085228.136 ops/s
# Warmup Iteration  11: 14842965.387 ops/s
# Warmup Iteration  12: 14108975.622 ops/s
# Warmup Iteration  13: 15095127.884 ops/s
# Warmup Iteration  14: 14181973.112 ops/s
# Warmup Iteration  15: 14820514.720 ops/s
# Warmup Iteration  16: 14423998.161 ops/s
# Warmup Iteration  17: 13812873.328 ops/s
# Warmup Iteration  18: 14964753.692 ops/s
# Warmup Iteration  19: 14130723.562 ops/s
# Warmup Iteration  20: 12168739.330 ops/s
# Warmup Iteration  21: 14351824.134 ops/s
# Warmup Iteration  22: 14492339.408 ops/s
# Warmup Iteration  23: 15203469.189 ops/s
# Warmup Iteration  24: 14385894.017 ops/s
# Warmup Iteration  25: 14092841.222 ops/s
# Warmup Iteration  26: 14832665.346 ops/s
# Warmup Iteration  27: 15215430.214 ops/s
# Warmup Iteration  28: 13976891.649 ops/s
# Warmup Iteration  29: 15215941.821 ops/s
# Warmup Iteration  30: 14158446.055 ops/s
Iteration   1: 14653678.387 ops/s
Iteration   2: 14698748.946 ops/s
Iteration   3: 14397586.061 ops/s
Iteration   4: 14860465.280 ops/s
Iteration   5: 14216420.273 ops/s
Iteration   6: 14827670.746 ops/s
Iteration   7: 14421203.006 ops/s
Iteration   8: 14419281.569 ops/s
Iteration   9: 14906166.560 ops/s
Iteration  10: 13999250.312 ops/s
Iteration  11: 14897176.215 ops/s
Iteration  12: 14148375.565 ops/s
Iteration  13: 14511011.204 ops/s
Iteration  14: 14669217.560 ops/s
Iteration  15: 14168861.600 ops/s
Iteration  16: 14886451.049 ops/s
Iteration  17: 14795234.934 ops/s
Iteration  18: 14009534.799 ops/s
Iteration  19: 15230010.033 ops/s
Iteration  20: 14041043.694 ops/s
Iteration  21: 14842364.253 ops/s
Iteration  22: 14745452.840 ops/s
Iteration  23: 14523613.838 ops/s
Iteration  24: 14954136.417 ops/s
Iteration  25: 14148909.820 ops/s
Iteration  26: 14613923.385 ops/s
Iteration  27: 14841804.527 ops/s
Iteration  28: 14486286.220 ops/s
Iteration  29: 15066107.381 ops/s
Iteration  30: 14679703.524 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableGenerateTest._Benchmark.benchmark_dispose":
  14588656.333 ±(99.9%) 222443.578 ops/s [Average]
  (min, avg, max) = (13999250.312, 14588656.333, 15230010.033), stdev = 332943.101
  CI (99.9%): [14366212.755, 14811099.911] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt         Score        Error  Units
ObservableGenerateTest._Benchmark.benchmark_dispose  thrpt   30  14588656.333 ± 222443.578  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2140946.165 ops/s
# Warmup Iteration   2: 4990273.943 ops/s
# Warmup Iteration   3: 5829302.654 ops/s
# Warmup Iteration   4: 5969528.765 ops/s
# Warmup Iteration   5: 6192526.140 ops/s
# Warmup Iteration   6: 6033666.670 ops/s
# Warmup Iteration   7: 6137081.741 ops/s
# Warmup Iteration   8: 6247264.529 ops/s
# Warmup Iteration   9: 6092458.657 ops/s
# Warmup Iteration  10: 6279435.338 ops/s
# Warmup Iteration  11: 6149195.242 ops/s
# Warmup Iteration  12: 6010607.551 ops/s
# Warmup Iteration  13: 6394096.796 ops/s
# Warmup Iteration  14: 6052283.451 ops/s
# Warmup Iteration  15: 6199687.352 ops/s
# Warmup Iteration  16: 5994456.577 ops/s
# Warmup Iteration  17: 6195955.531 ops/s
# Warmup Iteration  18: 6184273.679 ops/s
# Warmup Iteration  19: 5977149.677 ops/s
# Warmup Iteration  20: 6402793.842 ops/s
# Warmup Iteration  21: 5977637.260 ops/s
# Warmup Iteration  22: 6114540.596 ops/s
# Warmup Iteration  23: 6240437.515 ops/s
# Warmup Iteration  24: 6165030.144 ops/s
# Warmup Iteration  25: 5959572.167 ops/s
# Warmup Iteration  26: 6210598.055 ops/s
# Warmup Iteration  27: 5998301.381 ops/s
# Warmup Iteration  28: 6166963.505 ops/s
# Warmup Iteration  29: 6080096.467 ops/s
# Warmup Iteration  30: 6105013.716 ops/s
Iteration   1: 6375587.617 ops/s
Iteration   2: 6206748.814 ops/s
Iteration   3: 6112150.355 ops/s
Iteration   4: 6154521.141 ops/s
Iteration   5: 6228862.858 ops/s
Iteration   6: 6066252.729 ops/s
Iteration   7: 6334767.419 ops/s
Iteration   8: 5992631.447 ops/s
Iteration   9: 6320265.658 ops/s
Iteration  10: 6363010.425 ops/s
Iteration  11: 6062677.507 ops/s
Iteration  12: 6286504.852 ops/s
Iteration  13: 5981821.681 ops/s
Iteration  14: 6033016.334 ops/s
Iteration  15: 6072375.369 ops/s
Iteration  16: 6262295.004 ops/s
Iteration  17: 6016901.042 ops/s
Iteration  18: 6153953.640 ops/s
Iteration  19: 6378085.795 ops/s
Iteration  20: 6202740.906 ops/s
Iteration  21: 5965242.976 ops/s
Iteration  22: 6291875.248 ops/s
Iteration  23: 5881979.169 ops/s
Iteration  24: 6088588.309 ops/s
Iteration  25: 6220704.251 ops/s
Iteration  26: 6003873.469 ops/s
Iteration  27: 6440002.138 ops/s
Iteration  28: 6279675.768 ops/s
Iteration  29: 5894605.277 ops/s
Iteration  30: 6415936.974 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_dispose":
  6169588.472 ±(99.9%) 106944.155 ops/s [Average]
  (min, avg, max) = (5881979.169, 6169588.472, 6440002.138), stdev = 160068.988
  CI (99.9%): [6062644.318, 6276532.627] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt        Score        Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_dispose  thrpt   30  6169588.472 ± 106944.155  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.util.HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnComplete$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.util.HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnComplete

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1292778.697 ops/s
# Warmup Iteration   2: 3728620.130 ops/s
# Warmup Iteration   3: 4729126.016 ops/s
# Warmup Iteration   4: 5136504.191 ops/s
# Warmup Iteration   5: 5359631.439 ops/s
# Warmup Iteration   6: 5122280.286 ops/s
# Warmup Iteration   7: 5274493.044 ops/s
# Warmup Iteration   8: 5362859.859 ops/s
# Warmup Iteration   9: 5073122.344 ops/s
# Warmup Iteration  10: 5141582.881 ops/s
# Warmup Iteration  11: 5135075.610 ops/s
# Warmup Iteration  12: 5290256.351 ops/s
# Warmup Iteration  13: 5037658.562 ops/s
# Warmup Iteration  14: 4562423.828 ops/s
# Warmup Iteration  15: 5238958.617 ops/s
# Warmup Iteration  16: 5045179.868 ops/s
# Warmup Iteration  17: 5267141.153 ops/s
# Warmup Iteration  18: 5220218.512 ops/s
# Warmup Iteration  19: 5302836.091 ops/s
# Warmup Iteration  20: 5251276.403 ops/s
# Warmup Iteration  21: 5194589.040 ops/s
# Warmup Iteration  22: 5214665.994 ops/s
# Warmup Iteration  23: 5237128.357 ops/s
# Warmup Iteration  24: 5224399.456 ops/s
# Warmup Iteration  25: 5305290.612 ops/s
# Warmup Iteration  26: 5156986.354 ops/s
# Warmup Iteration  27: 5368016.289 ops/s
# Warmup Iteration  28: 5194797.715 ops/s
# Warmup Iteration  29: 5169123.001 ops/s
# Warmup Iteration  30: 5272621.969 ops/s
Iteration   1: 5174312.581 ops/s
Iteration   2: 5273921.834 ops/s
Iteration   3: 4905317.093 ops/s
Iteration   4: 5301074.053 ops/s
Iteration   5: 5141179.655 ops/s
Iteration   6: 5035520.806 ops/s
Iteration   7: 5361021.734 ops/s
Iteration   8: 5148804.793 ops/s
Iteration   9: 5100350.838 ops/s
Iteration  10: 5130727.992 ops/s
Iteration  11: 5301790.102 ops/s
Iteration  12: 5201073.559 ops/s
Iteration  13: 5143437.251 ops/s
Iteration  14: 5346397.492 ops/s
Iteration  15: 5121905.973 ops/s
Iteration  16: 5183606.147 ops/s
Iteration  17: 5131955.869 ops/s
Iteration  18: 5350973.157 ops/s
Iteration  19: 5138317.684 ops/s
Iteration  20: 5227476.406 ops/s
Iteration  21: 5386566.308 ops/s
Iteration  22: 5126009.992 ops/s
Iteration  23: 5291933.720 ops/s
Iteration  24: 5161800.891 ops/s
Iteration  25: 5266235.061 ops/s
Iteration  26: 5249166.112 ops/s
Iteration  27: 5180198.428 ops/s
Iteration  28: 5339198.145 ops/s
Iteration  29: 5222865.158 ops/s
Iteration  30: 5128493.200 ops/s


Result "io.reactivex.rxjava3.internal.util.HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnComplete":
  5202387.735 ±(99.9%) 71544.260 ops/s [Average]
  (min, avg, max) = (4905317.093, 5202387.735, 5386566.308), stdev = 107084.089
  CI (99.9%): [5130843.474, 5273931.995] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score       Error  Units
HalfSerializerObserverTest._Benchmark.benchmark_reentrantOnNextOnComplete  thrpt   30  5202387.735 ± 71544.260  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_errorFunctionReturnsNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_errorFunctionReturnsNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 317090.348 ops/s
# Warmup Iteration   2: 552767.529 ops/s
# Warmup Iteration   3: 577624.327 ops/s
# Warmup Iteration   4: 600037.438 ops/s
# Warmup Iteration   5: 552735.656 ops/s
# Warmup Iteration   6: 593174.722 ops/s
# Warmup Iteration   7: 616903.085 ops/s
# Warmup Iteration   8: 633090.470 ops/s
# Warmup Iteration   9: 603221.055 ops/s
# Warmup Iteration  10: 644718.925 ops/s
# Warmup Iteration  11: 619928.384 ops/s
# Warmup Iteration  12: 620046.036 ops/s
# Warmup Iteration  13: 634116.543 ops/s
# Warmup Iteration  14: 619594.694 ops/s
# Warmup Iteration  15: 630241.531 ops/s
# Warmup Iteration  16: 635190.096 ops/s
# Warmup Iteration  17: 663731.011 ops/s
# Warmup Iteration  18: 639528.555 ops/s
# Warmup Iteration  19: 678366.898 ops/s
# Warmup Iteration  20: 650360.236 ops/s
# Warmup Iteration  21: 662519.936 ops/s
# Warmup Iteration  22: 650882.037 ops/s
# Warmup Iteration  23: 655977.594 ops/s
# Warmup Iteration  24: 642002.311 ops/s
# Warmup Iteration  25: 642503.652 ops/s
# Warmup Iteration  26: 666759.585 ops/s
# Warmup Iteration  27: 643903.848 ops/s
# Warmup Iteration  28: 669333.302 ops/s
# Warmup Iteration  29: 632412.287 ops/s
# Warmup Iteration  30: 681266.206 ops/s
Iteration   1: 662670.958 ops/s
Iteration   2: 627325.609 ops/s
Iteration   3: 670975.751 ops/s
Iteration   4: 647418.879 ops/s
Iteration   5: 636247.884 ops/s
Iteration   6: 670473.234 ops/s
Iteration   7: 653651.545 ops/s
Iteration   8: 652898.456 ops/s
Iteration   9: 655481.245 ops/s
Iteration  10: 673912.574 ops/s
Iteration  11: 646408.529 ops/s
Iteration  12: 656090.621 ops/s
Iteration  13: 661268.287 ops/s
Iteration  14: 655624.510 ops/s
Iteration  15: 653448.316 ops/s
Iteration  16: 659799.370 ops/s
Iteration  17: 651311.766 ops/s
Iteration  18: 657810.625 ops/s
Iteration  19: 684626.312 ops/s
Iteration  20: 643040.427 ops/s
Iteration  21: 666704.979 ops/s
Iteration  22: 634377.105 ops/s
Iteration  23: 693290.813 ops/s
Iteration  24: 656272.766 ops/s
Iteration  25: 663643.846 ops/s
Iteration  26: 644655.002 ops/s
Iteration  27: 659253.707 ops/s
Iteration  28: 669648.062 ops/s
Iteration  29: 648504.256 ops/s
Iteration  30: 684381.801 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_errorFunctionReturnsNull":
  658040.575 ±(99.9%) 9884.560 ops/s [Average]
  (min, avg, max) = (627325.609, 658040.575, 693290.813), stdev = 14794.745
  CI (99.9%): [648156.014, 667925.135] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score      Error  Units
ObservableNullTests._Benchmark.benchmark_errorFunctionReturnsNull  thrpt   30  658040.575 ± 9884.560  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithIterableIteratorNull$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithIterableIteratorNull

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 393143.071 ops/s
# Warmup Iteration   2: 539897.422 ops/s
# Warmup Iteration   3: 647358.165 ops/s
# Warmup Iteration   4: 649955.567 ops/s
# Warmup Iteration   5: 640178.878 ops/s
# Warmup Iteration   6: 672286.607 ops/s
# Warmup Iteration   7: 587385.281 ops/s
# Warmup Iteration   8: 651140.103 ops/s
# Warmup Iteration   9: 556473.077 ops/s
# Warmup Iteration  10: 613453.305 ops/s
# Warmup Iteration  11: 621224.636 ops/s
# Warmup Iteration  12: 684225.761 ops/s
# Warmup Iteration  13: 653101.482 ops/s
# Warmup Iteration  14: 650199.206 ops/s
# Warmup Iteration  15: 657145.401 ops/s
# Warmup Iteration  16: 692063.313 ops/s
# Warmup Iteration  17: 691711.846 ops/s
# Warmup Iteration  18: 671210.956 ops/s
# Warmup Iteration  19: 715131.797 ops/s
# Warmup Iteration  20: 684353.637 ops/s
# Warmup Iteration  21: 700643.814 ops/s
# Warmup Iteration  22: 684407.763 ops/s
# Warmup Iteration  23: 677839.214 ops/s
# Warmup Iteration  24: 707668.971 ops/s
# Warmup Iteration  25: 689019.098 ops/s
# Warmup Iteration  26: 686352.188 ops/s
# Warmup Iteration  27: 696118.582 ops/s
# Warmup Iteration  28: 675410.172 ops/s
# Warmup Iteration  29: 690419.376 ops/s
# Warmup Iteration  30: 702233.154 ops/s
Iteration   1: 706890.950 ops/s
Iteration   2: 675451.163 ops/s
Iteration   3: 700277.197 ops/s
Iteration   4: 685109.374 ops/s
Iteration   5: 673912.200 ops/s
Iteration   6: 712094.017 ops/s
Iteration   7: 681472.334 ops/s
Iteration   8: 700607.158 ops/s
Iteration   9: 694411.663 ops/s
Iteration  10: 698632.901 ops/s
Iteration  11: 691883.004 ops/s
Iteration  12: 684766.507 ops/s
Iteration  13: 713886.206 ops/s
Iteration  14: 672554.066 ops/s
Iteration  15: 689109.027 ops/s
Iteration  16: 717890.767 ops/s
Iteration  17: 680195.475 ops/s
Iteration  18: 717697.940 ops/s
Iteration  19: 667387.876 ops/s
Iteration  20: 721786.715 ops/s
Iteration  21: 679854.091 ops/s
Iteration  22: 706997.135 ops/s
Iteration  23: 682970.143 ops/s
Iteration  24: 693391.942 ops/s
Iteration  25: 696627.315 ops/s
Iteration  26: 679687.774 ops/s
Iteration  27: 710960.456 ops/s
Iteration  28: 691448.661 ops/s
Iteration  29: 699871.152 ops/s
Iteration  30: 723153.257 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_zipWithIterableIteratorNull":
  695032.615 ±(99.9%) 10529.840 ops/s [Average]
  (min, avg, max) = (667387.876, 695032.615, 723153.257), stdev = 15760.570
  CI (99.9%): [684502.776, 705562.455] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableNullTests._Benchmark.benchmark_zipWithIterableIteratorNull  thrpt   30  695032.615 ± 10529.840  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_connectIsIdempotent$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_connectIsIdempotent

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 618641.438 ops/s
# Warmup Iteration   2: 2632011.722 ops/s
# Warmup Iteration   3: 4080028.962 ops/s
# Warmup Iteration   4: 3499279.913 ops/s
# Warmup Iteration   5: 3945183.945 ops/s
# Warmup Iteration   6: 4190650.922 ops/s
# Warmup Iteration   7: 4047153.123 ops/s
# Warmup Iteration   8: 4247463.590 ops/s
# Warmup Iteration   9: 4081846.773 ops/s
# Warmup Iteration  10: 4255376.628 ops/s
# Warmup Iteration  11: 4143074.710 ops/s
# Warmup Iteration  12: 4189315.823 ops/s
# Warmup Iteration  13: 4046938.018 ops/s
# Warmup Iteration  14: 4211104.141 ops/s
# Warmup Iteration  15: 4127658.632 ops/s
# Warmup Iteration  16: 4132835.596 ops/s
# Warmup Iteration  17: 4190842.994 ops/s
# Warmup Iteration  18: 4107632.481 ops/s
# Warmup Iteration  19: 4145295.541 ops/s
# Warmup Iteration  20: 4048512.759 ops/s
# Warmup Iteration  21: 4154189.534 ops/s
# Warmup Iteration  22: 4123523.866 ops/s
# Warmup Iteration  23: 4116875.427 ops/s
# Warmup Iteration  24: 4226680.481 ops/s
# Warmup Iteration  25: 4266265.804 ops/s
# Warmup Iteration  26: 4204413.984 ops/s
# Warmup Iteration  27: 3980840.166 ops/s
# Warmup Iteration  28: 4187275.203 ops/s
# Warmup Iteration  29: 4204842.064 ops/s
# Warmup Iteration  30: 4173694.427 ops/s
Iteration   1: 4321296.273 ops/s
Iteration   2: 4087073.802 ops/s
Iteration   3: 4308543.503 ops/s
Iteration   4: 4103270.849 ops/s
Iteration   5: 4040051.041 ops/s
Iteration   6: 4205822.245 ops/s
Iteration   7: 4092748.677 ops/s
Iteration   8: 4246734.303 ops/s
Iteration   9: 4110687.240 ops/s
Iteration  10: 4265412.334 ops/s
Iteration  11: 4215560.325 ops/s
Iteration  12: 4074357.774 ops/s
Iteration  13: 4349144.317 ops/s
Iteration  14: 4064624.650 ops/s
Iteration  15: 4174120.320 ops/s
Iteration  16: 4190092.038 ops/s
Iteration  17: 4141753.508 ops/s
Iteration  18: 4201915.926 ops/s
Iteration  19: 4120818.401 ops/s
Iteration  20: 4013181.487 ops/s
Iteration  21: 4230238.737 ops/s
Iteration  22: 4037477.465 ops/s
Iteration  23: 4289895.691 ops/s
Iteration  24: 3967964.613 ops/s
Iteration  25: 4122584.557 ops/s
Iteration  26: 4375716.307 ops/s
Iteration  27: 4323813.426 ops/s
Iteration  28: 4149089.253 ops/s
Iteration  29: 4155888.402 ops/s
Iteration  30: 4110090.952 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_connectIsIdempotent":
  4169665.614 ±(99.9%) 71114.722 ops/s [Average]
  (min, avg, max) = (3967964.613, 4169665.614, 4375716.307), stdev = 106441.176
  CI (99.9%): [4098550.892, 4240780.336] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_connectIsIdempotent  thrpt   30  4169665.614 ± 71114.722  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableSubscribe0$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableSubscribe0

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45478.998 ops/s
# Warmup Iteration   2: 141652.317 ops/s
# Warmup Iteration   3: 124636.867 ops/s
# Warmup Iteration   4: 192923.968 ops/s
# Warmup Iteration   5: 199243.544 ops/s
# Warmup Iteration   6: 207251.043 ops/s
# Warmup Iteration   7: 211509.067 ops/s
# Warmup Iteration   8: 206094.854 ops/s
# Warmup Iteration   9: 214666.999 ops/s
# Warmup Iteration  10: 213170.472 ops/s
# Warmup Iteration  11: 207123.963 ops/s
# Warmup Iteration  12: 208406.048 ops/s
# Warmup Iteration  13: 219137.082 ops/s
# Warmup Iteration  14: 202772.959 ops/s
# Warmup Iteration  15: 211368.567 ops/s
# Warmup Iteration  16: 204012.828 ops/s
# Warmup Iteration  17: 211513.010 ops/s
# Warmup Iteration  18: 216500.661 ops/s
# Warmup Iteration  19: 209154.285 ops/s
# Warmup Iteration  20: 223016.045 ops/s
# Warmup Iteration  21: 220748.541 ops/s
# Warmup Iteration  22: 224743.690 ops/s
# Warmup Iteration  23: 214198.299 ops/s
# Warmup Iteration  24: 216204.855 ops/s
# Warmup Iteration  25: 223990.714 ops/s
# Warmup Iteration  26: 212570.570 ops/s
# Warmup Iteration  27: 219432.086 ops/s
# Warmup Iteration  28: 221159.729 ops/s
# Warmup Iteration  29: 208083.563 ops/s
# Warmup Iteration  30: 223001.732 ops/s
Iteration   1: 224893.569 ops/s
Iteration   2: 206860.420 ops/s
Iteration   3: 212937.098 ops/s
Iteration   4: 228718.962 ops/s
Iteration   5: 206992.576 ops/s
Iteration   6: 217769.740 ops/s
Iteration   7: 217697.436 ops/s
Iteration   8: 216194.098 ops/s
Iteration   9: 215190.791 ops/s
Iteration  10: 216443.738 ops/s
Iteration  11: 225222.987 ops/s
Iteration  12: 212463.884 ops/s
Iteration  13: 221067.137 ops/s
Iteration  14: 222416.278 ops/s
Iteration  15: 211917.486 ops/s
Iteration  16: 213319.181 ops/s
Iteration  17: 213291.395 ops/s
Iteration  18: 220389.179 ops/s
Iteration  19: 222217.997 ops/s
Iteration  20: 209290.793 ops/s
Iteration  21: 222458.254 ops/s
Iteration  22: 211089.478 ops/s
Iteration  23: 225295.431 ops/s
Iteration  24: 220736.914 ops/s
Iteration  25: 209173.790 ops/s
Iteration  26: 216293.799 ops/s
Iteration  27: 217424.837 ops/s
Iteration  28: 215869.496 ops/s
Iteration  29: 203567.051 ops/s
Iteration  30: 212183.115 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableSubscribe0":
  216312.897 ±(99.9%) 4133.386 ops/s [Average]
  (min, avg, max) = (203567.051, 216312.897, 228718.962), stdev = 6186.658
  CI (99.9%): [212179.511, 220446.283] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableSubscribe0  thrpt   30  216312.897 ± 4133.386  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableSubscribe1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableSubscribe1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 62571.735 ops/s
# Warmup Iteration   2: 131410.769 ops/s
# Warmup Iteration   3: 204525.244 ops/s
# Warmup Iteration   4: 196103.383 ops/s
# Warmup Iteration   5: 205578.758 ops/s
# Warmup Iteration   6: 195779.843 ops/s
# Warmup Iteration   7: 197613.306 ops/s
# Warmup Iteration   8: 201331.763 ops/s
# Warmup Iteration   9: 179031.978 ops/s
# Warmup Iteration  10: 207886.441 ops/s
# Warmup Iteration  11: 207370.425 ops/s
# Warmup Iteration  12: 205073.722 ops/s
# Warmup Iteration  13: 199809.706 ops/s
# Warmup Iteration  14: 204617.715 ops/s
# Warmup Iteration  15: 196746.377 ops/s
# Warmup Iteration  16: 206223.118 ops/s
# Warmup Iteration  17: 204352.138 ops/s
# Warmup Iteration  18: 210259.846 ops/s
# Warmup Iteration  19: 203043.433 ops/s
# Warmup Iteration  20: 206580.912 ops/s
# Warmup Iteration  21: 219714.972 ops/s
# Warmup Iteration  22: 203846.897 ops/s
# Warmup Iteration  23: 208554.814 ops/s
# Warmup Iteration  24: 207398.754 ops/s
# Warmup Iteration  25: 211741.362 ops/s
# Warmup Iteration  26: 207275.340 ops/s
# Warmup Iteration  27: 202160.987 ops/s
# Warmup Iteration  28: 203843.833 ops/s
# Warmup Iteration  29: 208198.294 ops/s
# Warmup Iteration  30: 210028.230 ops/s
Iteration   1: 201213.284 ops/s
Iteration   2: 206643.957 ops/s
Iteration   3: 206815.567 ops/s
Iteration   4: 202593.435 ops/s
Iteration   5: 212272.486 ops/s
Iteration   6: 203417.348 ops/s
Iteration   7: 221020.488 ops/s
Iteration   8: 208103.418 ops/s
Iteration   9: 202976.231 ops/s
Iteration  10: 202228.509 ops/s
Iteration  11: 213034.791 ops/s
Iteration  12: 204665.228 ops/s
Iteration  13: 208184.197 ops/s
Iteration  14: 202847.925 ops/s
Iteration  15: 209248.004 ops/s
Iteration  16: 206563.693 ops/s
Iteration  17: 206653.521 ops/s
Iteration  18: 217355.719 ops/s
Iteration  19: 202848.662 ops/s
Iteration  20: 210433.875 ops/s
Iteration  21: 216464.324 ops/s
Iteration  22: 217336.051 ops/s
Iteration  23: 196161.866 ops/s
Iteration  24: 208385.744 ops/s
Iteration  25: 209864.270 ops/s
Iteration  26: 204517.708 ops/s
Iteration  27: 216809.555 ops/s
Iteration  28: 200241.507 ops/s
Iteration  29: 183508.553 ops/s
Iteration  30: 203578.738 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableSubscribe1":
  206866.288 ±(99.9%) 4912.225 ops/s [Average]
  (min, avg, max) = (183508.553, 206866.288, 221020.488), stdev = 7352.388
  CI (99.9%): [201954.064, 211778.513] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableSubscribe1  thrpt   30  206866.288 ± 4912.225  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_generateFunctionStateNullAllowed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_generateFunctionStateNullAllowed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2899639.489 ops/s
# Warmup Iteration   2: 7003452.874 ops/s
# Warmup Iteration   3: 8328181.493 ops/s
# Warmup Iteration   4: 9145771.857 ops/s
# Warmup Iteration   5: 8947939.858 ops/s
# Warmup Iteration   6: 8763152.878 ops/s
# Warmup Iteration   7: 8940845.371 ops/s
# Warmup Iteration   8: 8855540.549 ops/s
# Warmup Iteration   9: 8595804.586 ops/s
# Warmup Iteration  10: 9209961.912 ops/s
# Warmup Iteration  11: 8589387.101 ops/s
# Warmup Iteration  12: 9170422.452 ops/s
# Warmup Iteration  13: 8726470.660 ops/s
# Warmup Iteration  14: 8879985.259 ops/s
# Warmup Iteration  15: 8870032.660 ops/s
# Warmup Iteration  16: 8774988.946 ops/s
# Warmup Iteration  17: 9135182.798 ops/s
# Warmup Iteration  18: 8787514.594 ops/s
# Warmup Iteration  19: 9094056.140 ops/s
# Warmup Iteration  20: 9200987.895 ops/s
# Warmup Iteration  21: 8550440.818 ops/s
# Warmup Iteration  22: 9371084.167 ops/s
# Warmup Iteration  23: 9126891.650 ops/s
# Warmup Iteration  24: 8805564.595 ops/s
# Warmup Iteration  25: 8888942.635 ops/s
# Warmup Iteration  26: 9214269.933 ops/s
# Warmup Iteration  27: 8448809.480 ops/s
# Warmup Iteration  28: 9041292.855 ops/s
# Warmup Iteration  29: 8785066.086 ops/s
# Warmup Iteration  30: 8727929.286 ops/s
Iteration   1: 8909469.432 ops/s
Iteration   2: 8651125.913 ops/s
Iteration   3: 8996465.401 ops/s
Iteration   4: 8754819.833 ops/s
Iteration   5: 8824748.441 ops/s
Iteration   6: 8923482.264 ops/s
Iteration   7: 8742150.535 ops/s
Iteration   8: 9198044.198 ops/s
Iteration   9: 8860100.440 ops/s
Iteration  10: 9203168.008 ops/s
Iteration  11: 8765908.007 ops/s
Iteration  12: 8975899.327 ops/s
Iteration  13: 8608435.465 ops/s
Iteration  14: 8875238.484 ops/s
Iteration  15: 8897458.401 ops/s
Iteration  16: 8810554.385 ops/s
Iteration  17: 8904471.276 ops/s
Iteration  18: 9154042.779 ops/s
Iteration  19: 8746591.447 ops/s
Iteration  20: 8926414.671 ops/s
Iteration  21: 9145832.066 ops/s
Iteration  22: 8741877.054 ops/s
Iteration  23: 8916487.375 ops/s
Iteration  24: 9166494.581 ops/s
Iteration  25: 9010761.528 ops/s
Iteration  26: 8727572.335 ops/s
Iteration  27: 9291534.549 ops/s
Iteration  28: 8965314.835 ops/s
Iteration  29: 8605681.051 ops/s
Iteration  30: 9249525.960 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_generateFunctionStateNullAllowed":
  8918322.335 ±(99.9%) 128157.188 ops/s [Average]
  (min, avg, max) = (8605681.051, 8918322.335, 9291534.549), stdev = 191819.660
  CI (99.9%): [8790165.147, 9046479.523] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ObservableNullTests._Benchmark.benchmark_generateFunctionStateNullAllowed  thrpt   30  8918322.335 ± 128157.188  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_disposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_disposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2598210.497 ops/s
# Warmup Iteration   2: 4951175.678 ops/s
# Warmup Iteration   3: 6939208.368 ops/s
# Warmup Iteration   4: 6722411.337 ops/s
# Warmup Iteration   5: 6720883.307 ops/s
# Warmup Iteration   6: 6742701.616 ops/s
# Warmup Iteration   7: 6644504.461 ops/s
# Warmup Iteration   8: 6714610.910 ops/s
# Warmup Iteration   9: 6681830.852 ops/s
# Warmup Iteration  10: 6538400.773 ops/s
# Warmup Iteration  11: 6663928.725 ops/s
# Warmup Iteration  12: 6555445.580 ops/s
# Warmup Iteration  13: 6661145.643 ops/s
# Warmup Iteration  14: 6586699.157 ops/s
# Warmup Iteration  15: 6890932.063 ops/s
# Warmup Iteration  16: 6478202.452 ops/s
# Warmup Iteration  17: 6604109.056 ops/s
# Warmup Iteration  18: 7042306.519 ops/s
# Warmup Iteration  19: 6522062.108 ops/s
# Warmup Iteration  20: 6909755.833 ops/s
# Warmup Iteration  21: 6612932.962 ops/s
# Warmup Iteration  22: 6578783.704 ops/s
# Warmup Iteration  23: 6908959.774 ops/s
# Warmup Iteration  24: 6945539.819 ops/s
# Warmup Iteration  25: 6488282.955 ops/s
# Warmup Iteration  26: 6838738.064 ops/s
# Warmup Iteration  27: 6670291.742 ops/s
# Warmup Iteration  28: 6725220.323 ops/s
# Warmup Iteration  29: 6889341.220 ops/s
# Warmup Iteration  30: 6493064.163 ops/s
Iteration   1: 6860952.151 ops/s
Iteration   2: 6629303.011 ops/s
Iteration   3: 6848939.514 ops/s
Iteration   4: 6580831.831 ops/s
Iteration   5: 6713499.275 ops/s
Iteration   6: 6731902.403 ops/s
Iteration   7: 6663895.305 ops/s
Iteration   8: 6681279.490 ops/s
Iteration   9: 6541873.427 ops/s
Iteration  10: 6962197.103 ops/s
Iteration  11: 6873367.945 ops/s
Iteration  12: 6497370.881 ops/s
Iteration  13: 6913938.804 ops/s
Iteration  14: 6782479.803 ops/s
Iteration  15: 6415211.869 ops/s
Iteration  16: 6649488.476 ops/s
Iteration  17: 6895184.725 ops/s
Iteration  18: 6662925.365 ops/s
Iteration  19: 6947986.063 ops/s
Iteration  20: 6521639.020 ops/s
Iteration  21: 6845553.603 ops/s
Iteration  22: 6568107.421 ops/s
Iteration  23: 6639927.166 ops/s
Iteration  24: 5698395.241 ops/s
Iteration  25: 6594768.582 ops/s
Iteration  26: 6807904.825 ops/s
Iteration  27: 6634973.690 ops/s
Iteration  28: 6735741.754 ops/s
Iteration  29: 6675611.589 ops/s
Iteration  30: 6422810.735 ops/s


Result "io.reactivex.rxjava3.internal.observers.DeferredScalarObserverTest._Benchmark.benchmark_disposed":
  6666602.036 ±(99.9%) 157987.940 ops/s [Average]
  (min, avg, max) = (5698395.241, 6666602.036, 6962197.103), stdev = 236468.930
  CI (99.9%): [6508614.095, 6824589.976] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score        Error  Units
DeferredScalarObserverTest._Benchmark.benchmark_disposed  thrpt   30  6666602.036 ± 157987.940  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_generateConsumerStateNullAllowed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_generateConsumerStateNullAllowed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1737233.640 ops/s
# Warmup Iteration   2: 6824638.579 ops/s
# Warmup Iteration   3: 7259525.391 ops/s
# Warmup Iteration   4: 8663886.569 ops/s
# Warmup Iteration   5: 8866435.394 ops/s
# Warmup Iteration   6: 8654924.567 ops/s
# Warmup Iteration   7: 8760226.405 ops/s
# Warmup Iteration   8: 8412703.482 ops/s
# Warmup Iteration   9: 8655502.618 ops/s
# Warmup Iteration  10: 8914473.227 ops/s
# Warmup Iteration  11: 8343772.085 ops/s
# Warmup Iteration  12: 8993609.546 ops/s
# Warmup Iteration  13: 8434593.354 ops/s
# Warmup Iteration  14: 8794363.757 ops/s
# Warmup Iteration  15: 8885257.755 ops/s
# Warmup Iteration  16: 8535007.084 ops/s
# Warmup Iteration  17: 8991000.803 ops/s
# Warmup Iteration  18: 8404103.836 ops/s
# Warmup Iteration  19: 8590027.016 ops/s
# Warmup Iteration  20: 8917496.677 ops/s
# Warmup Iteration  21: 8478363.528 ops/s
# Warmup Iteration  22: 8837023.957 ops/s
# Warmup Iteration  23: 8631670.687 ops/s
# Warmup Iteration  24: 8590117.269 ops/s
# Warmup Iteration  25: 8559288.652 ops/s
# Warmup Iteration  26: 8592196.354 ops/s
# Warmup Iteration  27: 8897686.058 ops/s
# Warmup Iteration  28: 8909477.771 ops/s
# Warmup Iteration  29: 8441493.273 ops/s
# Warmup Iteration  30: 9033850.714 ops/s
Iteration   1: 8615345.316 ops/s
Iteration   2: 8467683.394 ops/s
Iteration   3: 9022718.085 ops/s
Iteration   4: 8457212.323 ops/s
Iteration   5: 8687828.847 ops/s
Iteration   6: 8961856.373 ops/s
Iteration   7: 8403185.648 ops/s
Iteration   8: 8722729.822 ops/s
Iteration   9: 8746747.804 ops/s
Iteration  10: 8485681.794 ops/s
Iteration  11: 9027121.531 ops/s
Iteration  12: 8642800.328 ops/s
Iteration  13: 8513063.658 ops/s
Iteration  14: 8774249.527 ops/s
Iteration  15: 8760062.937 ops/s
Iteration  16: 8683938.202 ops/s
Iteration  17: 8898873.750 ops/s
Iteration  18: 8897282.111 ops/s
Iteration  19: 8504479.082 ops/s
Iteration  20: 8619421.800 ops/s
Iteration  21: 8665638.439 ops/s
Iteration  22: 8882530.749 ops/s
Iteration  23: 8550801.118 ops/s
Iteration  24: 8602001.375 ops/s
Iteration  25: 8929617.341 ops/s
Iteration  26: 8566662.653 ops/s
Iteration  27: 8960802.088 ops/s
Iteration  28: 8585929.783 ops/s
Iteration  29: 8715127.935 ops/s
Iteration  30: 8614444.171 ops/s


Result "io.reactivex.rxjava3.observable.ObservableNullTests._Benchmark.benchmark_generateConsumerStateNullAllowed":
  8698861.266 ±(99.9%) 119829.575 ops/s [Average]
  (min, avg, max) = (8403185.648, 8698861.266, 9027121.531), stdev = 179355.281
  CI (99.9%): [8579031.691, 8818690.842] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt        Score        Error  Units
ObservableNullTests._Benchmark.benchmark_generateConsumerStateNullAllowed  thrpt   30  8698861.266 ± 119829.575  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullThrowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullThrowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 195846.810 ops/s
# Warmup Iteration   2: 514832.815 ops/s
# Warmup Iteration   3: 595948.893 ops/s
# Warmup Iteration   4: 595730.866 ops/s
# Warmup Iteration   5: 613530.106 ops/s
# Warmup Iteration   6: 579855.030 ops/s
# Warmup Iteration   7: 614476.964 ops/s
# Warmup Iteration   8: 595334.308 ops/s
# Warmup Iteration   9: 601475.328 ops/s
# Warmup Iteration  10: 615477.970 ops/s
# Warmup Iteration  11: 579514.597 ops/s
# Warmup Iteration  12: 601859.134 ops/s
# Warmup Iteration  13: 588815.522 ops/s
# Warmup Iteration  14: 584305.081 ops/s
# Warmup Iteration  15: 607031.305 ops/s
# Warmup Iteration  16: 619615.115 ops/s
# Warmup Iteration  17: 621604.700 ops/s
# Warmup Iteration  18: 639606.167 ops/s
# Warmup Iteration  19: 628339.855 ops/s
# Warmup Iteration  20: 610603.966 ops/s
# Warmup Iteration  21: 646929.181 ops/s
# Warmup Iteration  22: 620541.196 ops/s
# Warmup Iteration  23: 650929.130 ops/s
# Warmup Iteration  24: 647271.631 ops/s
# Warmup Iteration  25: 616906.655 ops/s
# Warmup Iteration  26: 639383.174 ops/s
# Warmup Iteration  27: 625975.553 ops/s
# Warmup Iteration  28: 640484.604 ops/s
# Warmup Iteration  29: 618745.153 ops/s
# Warmup Iteration  30: 636962.621 ops/s
Iteration   1: 655943.775 ops/s
Iteration   2: 596023.772 ops/s
Iteration   3: 631687.394 ops/s
Iteration   4: 676760.766 ops/s
Iteration   5: 648836.973 ops/s
Iteration   6: 628219.995 ops/s
Iteration   7: 654069.083 ops/s
Iteration   8: 624739.254 ops/s
Iteration   9: 628742.877 ops/s
Iteration  10: 641786.010 ops/s
Iteration  11: 631562.138 ops/s
Iteration  12: 658424.859 ops/s
Iteration  13: 629515.352 ops/s
Iteration  14: 632412.532 ops/s
Iteration  15: 631729.644 ops/s
Iteration  16: 627144.323 ops/s
Iteration  17: 630038.848 ops/s
Iteration  18: 643618.119 ops/s
Iteration  19: 503349.428 ops/s
Iteration  20: 627929.620 ops/s
Iteration  21: 657595.297 ops/s
Iteration  22: 613212.642 ops/s
Iteration  23: 642033.590 ops/s
Iteration  24: 630966.520 ops/s
Iteration  25: 645103.468 ops/s
Iteration  26: 652696.556 ops/s
Iteration  27: 631510.612 ops/s
Iteration  28: 643421.646 ops/s
Iteration  29: 631537.948 ops/s
Iteration  30: 644032.821 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullThrowable":
  633154.862 ±(99.9%) 19298.263 ops/s [Average]
  (min, avg, max) = (503349.428, 633154.862, 676760.766), stdev = 28884.734
  CI (99.9%): [613856.599, 652453.126] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
ObservableCreateTest._Benchmark.benchmark_nullThrowable  thrpt   30  633154.862 ± 19298.263  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 89991.506 ops/s
# Warmup Iteration   2: 383352.787 ops/s
# Warmup Iteration   3: 512016.735 ops/s
# Warmup Iteration   4: 506133.943 ops/s
# Warmup Iteration   5: 479550.725 ops/s
# Warmup Iteration   6: 499544.897 ops/s
# Warmup Iteration   7: 506120.441 ops/s
# Warmup Iteration   8: 500995.161 ops/s
# Warmup Iteration   9: 522000.809 ops/s
# Warmup Iteration  10: 497376.125 ops/s
# Warmup Iteration  11: 503682.601 ops/s
# Warmup Iteration  12: 520824.083 ops/s
# Warmup Iteration  13: 507637.888 ops/s
# Warmup Iteration  14: 495587.693 ops/s
# Warmup Iteration  15: 512281.934 ops/s
# Warmup Iteration  16: 503818.870 ops/s
# Warmup Iteration  17: 522229.952 ops/s
# Warmup Iteration  18: 536329.811 ops/s
# Warmup Iteration  19: 515820.188 ops/s
# Warmup Iteration  20: 536806.130 ops/s
# Warmup Iteration  21: 520538.079 ops/s
# Warmup Iteration  22: 550361.910 ops/s
# Warmup Iteration  23: 523533.097 ops/s
# Warmup Iteration  24: 510661.961 ops/s
# Warmup Iteration  25: 542185.735 ops/s
# Warmup Iteration  26: 523080.606 ops/s
# Warmup Iteration  27: 539693.171 ops/s
# Warmup Iteration  28: 520414.850 ops/s
# Warmup Iteration  29: 540699.783 ops/s
# Warmup Iteration  30: 526200.949 ops/s
Iteration   1: 538295.943 ops/s
Iteration   2: 546998.886 ops/s
Iteration   3: 509064.922 ops/s
Iteration   4: 544610.103 ops/s
Iteration   5: 515443.158 ops/s
Iteration   6: 541921.076 ops/s
Iteration   7: 549480.647 ops/s
Iteration   8: 512826.357 ops/s
Iteration   9: 555320.395 ops/s
Iteration  10: 529236.671 ops/s
Iteration  11: 515695.402 ops/s
Iteration  12: 552738.411 ops/s
Iteration  13: 512866.224 ops/s
Iteration  14: 524777.109 ops/s
Iteration  15: 528210.194 ops/s
Iteration  16: 534003.835 ops/s
Iteration  17: 517645.197 ops/s
Iteration  18: 537847.656 ops/s
Iteration  19: 523442.438 ops/s
Iteration  20: 534742.722 ops/s
Iteration  21: 529254.942 ops/s
Iteration  22: 531002.530 ops/s
Iteration  23: 550430.759 ops/s
Iteration  24: 523955.200 ops/s
Iteration  25: 531036.936 ops/s
Iteration  26: 532052.804 ops/s
Iteration  27: 537717.617 ops/s
Iteration  28: 514956.725 ops/s
Iteration  29: 529694.208 ops/s
Iteration  30: 537552.287 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe":
  531427.379 ±(99.9%) 8563.032 ops/s [Average]
  (min, avg, max) = (509064.922, 531427.379, 555320.395), stdev = 12816.743
  CI (99.9%): [522864.347, 539990.410] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableTakeUntilTest._Benchmark.benchmark_doubleOnSubscribe  thrpt   30  531427.379 ± 8563.032  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 189320.394 ops/s
# Warmup Iteration   2: 490412.238 ops/s
# Warmup Iteration   3: 559617.573 ops/s
# Warmup Iteration   4: 576901.747 ops/s
# Warmup Iteration   5: 522544.877 ops/s
# Warmup Iteration   6: 602999.044 ops/s
# Warmup Iteration   7: 583966.681 ops/s
# Warmup Iteration   8: 610126.650 ops/s
# Warmup Iteration   9: 592024.795 ops/s
# Warmup Iteration  10: 600771.779 ops/s
# Warmup Iteration  11: 621266.278 ops/s
# Warmup Iteration  12: 611032.758 ops/s
# Warmup Iteration  13: 583854.699 ops/s
# Warmup Iteration  14: 617363.103 ops/s
# Warmup Iteration  15: 590122.493 ops/s
# Warmup Iteration  16: 620008.547 ops/s
# Warmup Iteration  17: 640206.517 ops/s
# Warmup Iteration  18: 629807.804 ops/s
# Warmup Iteration  19: 624122.335 ops/s
# Warmup Iteration  20: 619232.954 ops/s
# Warmup Iteration  21: 646000.126 ops/s
# Warmup Iteration  22: 643819.356 ops/s
# Warmup Iteration  23: 601538.241 ops/s
# Warmup Iteration  24: 606817.503 ops/s
# Warmup Iteration  25: 648503.453 ops/s
# Warmup Iteration  26: 603069.827 ops/s
# Warmup Iteration  27: 616424.660 ops/s
# Warmup Iteration  28: 631466.840 ops/s
# Warmup Iteration  29: 600751.825 ops/s
# Warmup Iteration  30: 641137.643 ops/s
Iteration   1: 649154.074 ops/s
Iteration   2: 600047.388 ops/s
Iteration   3: 629140.536 ops/s
Iteration   4: 640059.003 ops/s
Iteration   5: 634215.733 ops/s
Iteration   6: 638382.739 ops/s
Iteration   7: 622814.560 ops/s
Iteration   8: 643080.261 ops/s
Iteration   9: 607449.422 ops/s
Iteration  10: 650130.685 ops/s
Iteration  11: 633766.735 ops/s
Iteration  12: 614617.972 ops/s
Iteration  13: 630668.199 ops/s
Iteration  14: 534843.304 ops/s
Iteration  15: 614832.649 ops/s
Iteration  16: 617565.798 ops/s
Iteration  17: 651907.215 ops/s
Iteration  18: 611510.613 ops/s
Iteration  19: 634789.870 ops/s
Iteration  20: 621660.723 ops/s
Iteration  21: 619527.142 ops/s
Iteration  22: 641900.379 ops/s
Iteration  23: 616127.913 ops/s
Iteration  24: 606211.605 ops/s
Iteration  25: 643393.146 ops/s
Iteration  26: 603500.045 ops/s
Iteration  27: 632891.766 ops/s
Iteration  28: 607125.198 ops/s
Iteration  29: 635975.537 ops/s
Iteration  30: 624932.599 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableCreateTest._Benchmark.benchmark_nullValue":
  623740.760 ±(99.9%) 14941.711 ops/s [Average]
  (min, avg, max) = (534843.304, 623740.760, 651907.215), stdev = 22364.052
  CI (99.9%): [608799.049, 638682.472] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt       Score       Error  Units
ObservableCreateTest._Benchmark.benchmark_nullValue  thrpt   30  623740.760 ± 14941.711  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_badSourceEmitAfterDone$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_badSourceEmitAfterDone

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 58499.805 ops/s
# Warmup Iteration   2: 202813.757 ops/s
# Warmup Iteration   3: 226314.279 ops/s
# Warmup Iteration   4: 213324.002 ops/s
# Warmup Iteration   5: 256942.072 ops/s
# Warmup Iteration   6: 242820.980 ops/s
# Warmup Iteration   7: 252309.895 ops/s
# Warmup Iteration   8: 260181.137 ops/s
# Warmup Iteration   9: 248598.600 ops/s
# Warmup Iteration  10: 253604.219 ops/s
# Warmup Iteration  11: 245307.864 ops/s
# Warmup Iteration  12: 253962.373 ops/s
# Warmup Iteration  13: 255028.341 ops/s
# Warmup Iteration  14: 249226.624 ops/s
# Warmup Iteration  15: 253423.065 ops/s
# Warmup Iteration  16: 246080.077 ops/s
# Warmup Iteration  17: 267250.647 ops/s
# Warmup Iteration  18: 261949.417 ops/s
# Warmup Iteration  19: 259818.521 ops/s
# Warmup Iteration  20: 268427.198 ops/s
# Warmup Iteration  21: 259941.509 ops/s
# Warmup Iteration  22: 262839.903 ops/s
# Warmup Iteration  23: 259122.443 ops/s
# Warmup Iteration  24: 255161.028 ops/s
# Warmup Iteration  25: 262875.699 ops/s
# Warmup Iteration  26: 256214.638 ops/s
# Warmup Iteration  27: 273499.685 ops/s
# Warmup Iteration  28: 256437.920 ops/s
# Warmup Iteration  29: 264736.251 ops/s
# Warmup Iteration  30: 267006.989 ops/s
Iteration   1: 264193.628 ops/s
Iteration   2: 267487.041 ops/s
Iteration   3: 260010.653 ops/s
Iteration   4: 260703.443 ops/s
Iteration   5: 265526.113 ops/s
Iteration   6: 250938.132 ops/s
Iteration   7: 275115.890 ops/s
Iteration   8: 256708.140 ops/s
Iteration   9: 267443.406 ops/s
Iteration  10: 258301.427 ops/s
Iteration  11: 260399.355 ops/s
Iteration  12: 259701.770 ops/s
Iteration  13: 258620.543 ops/s
Iteration  14: 268999.520 ops/s
Iteration  15: 268176.818 ops/s
Iteration  16: 256824.594 ops/s
Iteration  17: 271962.719 ops/s
Iteration  18: 254586.757 ops/s
Iteration  19: 270297.782 ops/s
Iteration  20: 266141.206 ops/s
Iteration  21: 256850.746 ops/s
Iteration  22: 271205.063 ops/s
Iteration  23: 256246.407 ops/s
Iteration  24: 258549.509 ops/s
Iteration  25: 264590.121 ops/s
Iteration  26: 260287.137 ops/s
Iteration  27: 268249.745 ops/s
Iteration  28: 257263.589 ops/s
Iteration  29: 264144.835 ops/s
Iteration  30: 261380.776 ops/s


Result "io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_badSourceEmitAfterDone":
  262696.896 ±(99.9%) 3942.695 ops/s [Average]
  (min, avg, max) = (250938.132, 262696.896, 275115.890), stdev = 5901.241
  CI (99.9%): [258754.200, 266639.591] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
LambdaObserverTest._Benchmark.benchmark_badSourceEmitAfterDone  thrpt   30  262696.896 ± 3942.695  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactWindowSize$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactWindowSize

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20393.316 ops/s
# Warmup Iteration   2: 146168.758 ops/s
# Warmup Iteration   3: 299043.756 ops/s
# Warmup Iteration   4: 332170.668 ops/s
# Warmup Iteration   5: 384001.142 ops/s
# Warmup Iteration   6: 367578.638 ops/s
# Warmup Iteration   7: 362836.743 ops/s
# Warmup Iteration   8: 374411.961 ops/s
# Warmup Iteration   9: 379892.247 ops/s
# Warmup Iteration  10: 359449.939 ops/s
# Warmup Iteration  11: 354268.799 ops/s
# Warmup Iteration  12: 376496.045 ops/s
# Warmup Iteration  13: 362566.652 ops/s
# Warmup Iteration  14: 382707.942 ops/s
# Warmup Iteration  15: 369789.657 ops/s
# Warmup Iteration  16: 359083.366 ops/s
# Warmup Iteration  17: 366712.169 ops/s
# Warmup Iteration  18: 367507.476 ops/s
# Warmup Iteration  19: 371291.114 ops/s
# Warmup Iteration  20: 372388.276 ops/s
# Warmup Iteration  21: 361964.960 ops/s
# Warmup Iteration  22: 382775.131 ops/s
# Warmup Iteration  23: 359113.272 ops/s
# Warmup Iteration  24: 373954.325 ops/s
# Warmup Iteration  25: 382364.180 ops/s
# Warmup Iteration  26: 361760.014 ops/s
# Warmup Iteration  27: 368981.730 ops/s
# Warmup Iteration  28: 387450.333 ops/s
# Warmup Iteration  29: 369825.212 ops/s
# Warmup Iteration  30: 370556.221 ops/s
Iteration   1: 376462.146 ops/s
Iteration   2: 357408.772 ops/s
Iteration   3: 380641.685 ops/s
Iteration   4: 363795.144 ops/s
Iteration   5: 361415.990 ops/s
Iteration   6: 377390.859 ops/s
Iteration   7: 361502.949 ops/s
Iteration   8: 352106.111 ops/s
Iteration   9: 292652.228 ops/s
Iteration  10: 364841.395 ops/s
Iteration  11: 381992.306 ops/s
Iteration  12: 370309.063 ops/s
Iteration  13: 355573.206 ops/s
Iteration  14: 375728.465 ops/s
Iteration  15: 369482.882 ops/s
Iteration  16: 362102.715 ops/s
Iteration  17: 375980.484 ops/s
Iteration  18: 359120.891 ops/s
Iteration  19: 385607.023 ops/s
Iteration  20: 361109.939 ops/s
Iteration  21: 360773.953 ops/s
Iteration  22: 383494.272 ops/s
Iteration  23: 355176.258 ops/s
Iteration  24: 367129.896 ops/s
Iteration  25: 355169.953 ops/s
Iteration  26: 375948.473 ops/s
Iteration  27: 367716.057 ops/s
Iteration  28: 369746.762 ops/s
Iteration  29: 373936.191 ops/s
Iteration  30: 366946.447 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithTimeTest._Benchmark.benchmark_exactWindowSize":
  365375.417 ±(99.9%) 11058.726 ops/s [Average]
  (min, avg, max) = (292652.228, 365375.417, 385607.023), stdev = 16552.182
  CI (99.9%): [354316.691, 376434.143] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt       Score       Error  Units
ObservableWindowWithTimeTest._Benchmark.benchmark_exactWindowSize  thrpt   30  365375.417 ± 11058.726  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_badSourceOnSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_badSourceOnSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 113136.652 ops/s
# Warmup Iteration   2: 307113.948 ops/s
# Warmup Iteration   3: 499398.600 ops/s
# Warmup Iteration   4: 485543.481 ops/s
# Warmup Iteration   5: 496879.520 ops/s
# Warmup Iteration   6: 484364.188 ops/s
# Warmup Iteration   7: 491642.960 ops/s
# Warmup Iteration   8: 507809.227 ops/s
# Warmup Iteration   9: 496517.898 ops/s
# Warmup Iteration  10: 511288.184 ops/s
# Warmup Iteration  11: 509685.377 ops/s
# Warmup Iteration  12: 495023.274 ops/s
# Warmup Iteration  13: 517361.959 ops/s
# Warmup Iteration  14: 504585.233 ops/s
# Warmup Iteration  15: 494894.228 ops/s
# Warmup Iteration  16: 510218.977 ops/s
# Warmup Iteration  17: 517757.005 ops/s
# Warmup Iteration  18: 541459.481 ops/s
# Warmup Iteration  19: 513559.558 ops/s
# Warmup Iteration  20: 498415.116 ops/s
# Warmup Iteration  21: 522694.320 ops/s
# Warmup Iteration  22: 525339.031 ops/s
# Warmup Iteration  23: 531369.839 ops/s
# Warmup Iteration  24: 517860.019 ops/s
# Warmup Iteration  25: 523345.296 ops/s
# Warmup Iteration  26: 539486.216 ops/s
# Warmup Iteration  27: 517361.970 ops/s
# Warmup Iteration  28: 525896.260 ops/s
# Warmup Iteration  29: 532575.302 ops/s
# Warmup Iteration  30: 530007.618 ops/s
Iteration   1: 523048.369 ops/s
Iteration   2: 497891.215 ops/s
Iteration   3: 549373.547 ops/s
Iteration   4: 508482.634 ops/s
Iteration   5: 526669.146 ops/s
Iteration   6: 505580.560 ops/s
Iteration   7: 539694.332 ops/s
Iteration   8: 518570.646 ops/s
Iteration   9: 529605.400 ops/s
Iteration  10: 526618.195 ops/s
Iteration  11: 506328.017 ops/s
Iteration  12: 552051.286 ops/s
Iteration  13: 510053.862 ops/s
Iteration  14: 532824.180 ops/s
Iteration  15: 410321.390 ops/s
Iteration  16: 519150.600 ops/s
Iteration  17: 532526.558 ops/s
Iteration  18: 548202.970 ops/s
Iteration  19: 503940.999 ops/s
Iteration  20: 506656.476 ops/s
Iteration  21: 540969.861 ops/s
Iteration  22: 498028.158 ops/s
Iteration  23: 518745.410 ops/s
Iteration  24: 544344.710 ops/s
Iteration  25: 544636.557 ops/s
Iteration  26: 540413.141 ops/s
Iteration  27: 515821.696 ops/s
Iteration  28: 532095.697 ops/s
Iteration  29: 517365.267 ops/s
Iteration  30: 538440.645 ops/s


Result "io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_badSourceOnSubscribe":
  521281.718 ±(99.9%) 17619.812 ops/s [Average]
  (min, avg, max) = (410321.390, 521281.718, 552051.286), stdev = 26372.507
  CI (99.9%): [503661.906, 538901.529] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score       Error  Units
LambdaObserverTest._Benchmark.benchmark_badSourceOnSubscribe  thrpt   30  521281.718 ± 17619.812  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_onlyFirstShouldSubscribeAndLastUnsubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_onlyFirstShouldSubscribeAndLastUnsubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 371195.377 ops/s
# Warmup Iteration   2: 1294950.849 ops/s
# Warmup Iteration   3: 1477697.503 ops/s
# Warmup Iteration   4: 1590139.858 ops/s
# Warmup Iteration   5: 2077309.043 ops/s
# Warmup Iteration   6: 2013665.501 ops/s
# Warmup Iteration   7: 2038773.329 ops/s
# Warmup Iteration   8: 1978481.498 ops/s
# Warmup Iteration   9: 1986423.514 ops/s
# Warmup Iteration  10: 2120439.901 ops/s
# Warmup Iteration  11: 1940945.343 ops/s
# Warmup Iteration  12: 2095058.079 ops/s
# Warmup Iteration  13: 2098839.194 ops/s
# Warmup Iteration  14: 1952567.960 ops/s
# Warmup Iteration  15: 2100901.268 ops/s
# Warmup Iteration  16: 2014043.403 ops/s
# Warmup Iteration  17: 1980782.356 ops/s
# Warmup Iteration  18: 2039620.089 ops/s
# Warmup Iteration  19: 1984562.487 ops/s
# Warmup Iteration  20: 2095870.798 ops/s
# Warmup Iteration  21: 1957079.003 ops/s
# Warmup Iteration  22: 2009915.641 ops/s
# Warmup Iteration  23: 2124010.651 ops/s
# Warmup Iteration  24: 2035409.447 ops/s
# Warmup Iteration  25: 1967248.358 ops/s
# Warmup Iteration  26: 2091534.707 ops/s
# Warmup Iteration  27: 2072547.180 ops/s
# Warmup Iteration  28: 2020179.785 ops/s
# Warmup Iteration  29: 2046903.089 ops/s
# Warmup Iteration  30: 2012145.103 ops/s
Iteration   1: 2092392.763 ops/s
Iteration   2: 1932591.367 ops/s
Iteration   3: 2033220.050 ops/s
Iteration   4: 2010751.896 ops/s
Iteration   5: 1940157.887 ops/s
Iteration   6: 2068345.788 ops/s
Iteration   7: 1906215.433 ops/s
Iteration   8: 2086604.495 ops/s
Iteration   9: 2024355.894 ops/s
Iteration  10: 2018860.784 ops/s
Iteration  11: 1999793.973 ops/s
Iteration  12: 2005748.725 ops/s
Iteration  13: 2064082.316 ops/s
Iteration  14: 2007612.454 ops/s
Iteration  15: 2012181.392 ops/s
Iteration  16: 2117687.211 ops/s
Iteration  17: 1961806.457 ops/s
Iteration  18: 2050203.008 ops/s
Iteration  19: 2027360.650 ops/s
Iteration  20: 2012174.546 ops/s
Iteration  21: 2047652.533 ops/s
Iteration  22: 2015143.099 ops/s
Iteration  23: 2061698.165 ops/s
Iteration  24: 2003269.105 ops/s
Iteration  25: 2061354.399 ops/s
Iteration  26: 2027061.356 ops/s
Iteration  27: 2007316.630 ops/s
Iteration  28: 2077666.845 ops/s
Iteration  29: 1969572.269 ops/s
Iteration  30: 2089053.804 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_onlyFirstShouldSubscribeAndLastUnsubscribe":
  2024397.843 ±(99.9%) 33004.043 ops/s [Average]
  (min, avg, max) = (1906215.433, 2024397.843, 2117687.211), stdev = 49398.902
  CI (99.9%): [1991393.800, 2057401.886] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                Mode  Cnt        Score       Error  Units
ObservableRefCountTest._Benchmark.benchmark_onlyFirstShouldSubscribeAndLastUnsubscribe  thrpt   30  2024397.843 ± 33004.043  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableBlockingSubscribe1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableBlockingSubscribe1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 31757.946 ops/s
# Warmup Iteration   2: 122171.037 ops/s
# Warmup Iteration   3: 170608.640 ops/s
# Warmup Iteration   4: 190491.107 ops/s
# Warmup Iteration   5: 191251.993 ops/s
# Warmup Iteration   6: 180459.090 ops/s
# Warmup Iteration   7: 198611.700 ops/s
# Warmup Iteration   8: 195204.666 ops/s
# Warmup Iteration   9: 205740.768 ops/s
# Warmup Iteration  10: 196121.247 ops/s
# Warmup Iteration  11: 194538.309 ops/s
# Warmup Iteration  12: 202208.880 ops/s
# Warmup Iteration  13: 192280.902 ops/s
# Warmup Iteration  14: 198502.205 ops/s
# Warmup Iteration  15: 195157.666 ops/s
# Warmup Iteration  16: 196060.521 ops/s
# Warmup Iteration  17: 199290.167 ops/s
# Warmup Iteration  18: 207478.633 ops/s
# Warmup Iteration  19: 210225.492 ops/s
# Warmup Iteration  20: 198223.997 ops/s
# Warmup Iteration  21: 204751.518 ops/s
# Warmup Iteration  22: 197815.197 ops/s
# Warmup Iteration  23: 207093.926 ops/s
# Warmup Iteration  24: 199222.591 ops/s
# Warmup Iteration  25: 207677.680 ops/s
# Warmup Iteration  26: 200666.653 ops/s
# Warmup Iteration  27: 196963.743 ops/s
# Warmup Iteration  28: 204890.222 ops/s
# Warmup Iteration  29: 205321.147 ops/s
# Warmup Iteration  30: 161476.508 ops/s
Iteration   1: 203375.257 ops/s
Iteration   2: 200664.821 ops/s
Iteration   3: 211154.982 ops/s
Iteration   4: 197940.717 ops/s
Iteration   5: 192484.412 ops/s
Iteration   6: 208804.413 ops/s
Iteration   7: 199837.534 ops/s
Iteration   8: 203261.512 ops/s
Iteration   9: 194732.969 ops/s
Iteration  10: 201671.539 ops/s
Iteration  11: 202604.694 ops/s
Iteration  12: 194191.610 ops/s
Iteration  13: 207821.435 ops/s
Iteration  14: 203429.689 ops/s
Iteration  15: 197214.194 ops/s
Iteration  16: 210004.782 ops/s
Iteration  17: 206082.173 ops/s
Iteration  18: 200439.121 ops/s
Iteration  19: 200346.053 ops/s
Iteration  20: 212092.476 ops/s
Iteration  21: 192038.355 ops/s
Iteration  22: 209561.963 ops/s
Iteration  23: 195940.421 ops/s
Iteration  24: 201070.854 ops/s
Iteration  25: 209559.149 ops/s
Iteration  26: 197013.586 ops/s
Iteration  27: 213266.221 ops/s
Iteration  28: 197765.559 ops/s
Iteration  29: 202073.390 ops/s
Iteration  30: 210004.341 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableBlockingSubscribe1":
  202548.274 ±(99.9%) 4084.488 ops/s [Average]
  (min, avg, max) = (192038.355, 202548.274, 213266.221), stdev = 6113.470
  CI (99.9%): [198463.786, 206632.762] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_observableBlockingSubscribe1  thrpt   30  202548.274 ± 4084.488  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onErrorThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onErrorThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32568.306 ops/s
# Warmup Iteration   2: 140764.630 ops/s
# Warmup Iteration   3: 179528.122 ops/s
# Warmup Iteration   4: 190800.363 ops/s
# Warmup Iteration   5: 202160.878 ops/s
# Warmup Iteration   6: 196871.401 ops/s
# Warmup Iteration   7: 193134.604 ops/s
# Warmup Iteration   8: 203294.529 ops/s
# Warmup Iteration   9: 194890.359 ops/s
# Warmup Iteration  10: 203195.198 ops/s
# Warmup Iteration  11: 194946.801 ops/s
# Warmup Iteration  12: 204454.529 ops/s
# Warmup Iteration  13: 191227.655 ops/s
# Warmup Iteration  14: 193094.464 ops/s
# Warmup Iteration  15: 207060.145 ops/s
# Warmup Iteration  16: 192676.486 ops/s
# Warmup Iteration  17: 207800.376 ops/s
# Warmup Iteration  18: 213573.900 ops/s
# Warmup Iteration  19: 202759.188 ops/s
# Warmup Iteration  20: 212236.782 ops/s
# Warmup Iteration  21: 204232.249 ops/s
# Warmup Iteration  22: 206821.139 ops/s
# Warmup Iteration  23: 208410.946 ops/s
# Warmup Iteration  24: 208221.015 ops/s
# Warmup Iteration  25: 209282.083 ops/s
# Warmup Iteration  26: 206951.737 ops/s
# Warmup Iteration  27: 217646.956 ops/s
# Warmup Iteration  28: 204440.127 ops/s
# Warmup Iteration  29: 215620.478 ops/s
# Warmup Iteration  30: 206803.856 ops/s
Iteration   1: 212399.574 ops/s
Iteration   2: 207581.102 ops/s
Iteration   3: 199485.721 ops/s
Iteration   4: 210540.216 ops/s
Iteration   5: 208546.397 ops/s
Iteration   6: 207578.738 ops/s
Iteration   7: 215432.939 ops/s
Iteration   8: 202913.192 ops/s
Iteration   9: 209114.797 ops/s
Iteration  10: 204124.183 ops/s
Iteration  11: 213694.406 ops/s
Iteration  12: 205392.864 ops/s
Iteration  13: 211467.354 ops/s
Iteration  14: 202970.746 ops/s
Iteration  15: 207355.746 ops/s
Iteration  16: 217662.489 ops/s
Iteration  17: 203541.925 ops/s
Iteration  18: 213530.729 ops/s
Iteration  19: 201466.298 ops/s
Iteration  20: 216648.450 ops/s
Iteration  21: 207819.164 ops/s
Iteration  22: 206630.558 ops/s
Iteration  23: 213474.421 ops/s
Iteration  24: 207691.297 ops/s
Iteration  25: 214877.852 ops/s
Iteration  26: 199839.589 ops/s
Iteration  27: 211552.473 ops/s
Iteration  28: 215576.539 ops/s
Iteration  29: 204554.042 ops/s
Iteration  30: 217656.684 ops/s


Result "io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_onErrorThrows":
  209037.349 ±(99.9%) 3559.935 ops/s [Average]
  (min, avg, max) = (199485.721, 209037.349, 217662.489), stdev = 5328.343
  CI (99.9%): [205477.415, 212597.284] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score      Error  Units
LambdaObserverTest._Benchmark.benchmark_onErrorThrows  thrpt   30  209037.349 ± 3559.935  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_refCount$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_refCount

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49333.438 ops/s
# Warmup Iteration   2: 216239.853 ops/s
# Warmup Iteration   3: 294815.694 ops/s
# Warmup Iteration   4: 331195.880 ops/s
# Warmup Iteration   5: 366766.153 ops/s
# Warmup Iteration   6: 345786.855 ops/s
# Warmup Iteration   7: 361647.638 ops/s
# Warmup Iteration   8: 360814.074 ops/s
# Warmup Iteration   9: 351943.231 ops/s
# Warmup Iteration  10: 370403.242 ops/s
# Warmup Iteration  11: 366180.285 ops/s
# Warmup Iteration  12: 340759.910 ops/s
# Warmup Iteration  13: 370087.739 ops/s
# Warmup Iteration  14: 361810.114 ops/s
# Warmup Iteration  15: 336905.809 ops/s
# Warmup Iteration  16: 364196.071 ops/s
# Warmup Iteration  17: 354957.609 ops/s
# Warmup Iteration  18: 370663.791 ops/s
# Warmup Iteration  19: 352411.624 ops/s
# Warmup Iteration  20: 366768.910 ops/s
# Warmup Iteration  21: 371247.085 ops/s
# Warmup Iteration  22: 353062.814 ops/s
# Warmup Iteration  23: 370857.675 ops/s
# Warmup Iteration  24: 335699.566 ops/s
# Warmup Iteration  25: 315305.180 ops/s
# Warmup Iteration  26: 347495.376 ops/s
# Warmup Iteration  27: 364000.235 ops/s
# Warmup Iteration  28: 369186.846 ops/s
# Warmup Iteration  29: 366663.878 ops/s
# Warmup Iteration  30: 343639.248 ops/s
Iteration   1: 347078.367 ops/s
Iteration   2: 347112.863 ops/s
Iteration   3: 360742.759 ops/s
Iteration   4: 363203.107 ops/s
Iteration   5: 364146.060 ops/s
Iteration   6: 358784.560 ops/s
Iteration   7: 360911.069 ops/s
Iteration   8: 361054.542 ops/s
Iteration   9: 353289.136 ops/s
Iteration  10: 371688.800 ops/s
Iteration  11: 356581.971 ops/s
Iteration  12: 362181.666 ops/s
Iteration  13: 365108.236 ops/s
Iteration  14: 356905.150 ops/s
Iteration  15: 364550.064 ops/s
Iteration  16: 358848.958 ops/s
Iteration  17: 352953.041 ops/s
Iteration  18: 371739.401 ops/s
Iteration  19: 354639.053 ops/s
Iteration  20: 370659.565 ops/s
Iteration  21: 352914.143 ops/s
Iteration  22: 353573.119 ops/s
Iteration  23: 373659.602 ops/s
Iteration  24: 355634.848 ops/s
Iteration  25: 352715.329 ops/s
Iteration  26: 371066.757 ops/s
Iteration  27: 370504.031 ops/s
Iteration  28: 361751.962 ops/s
Iteration  29: 357696.423 ops/s
Iteration  30: 366662.132 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_refCount":
  360611.890 ±(99.9%) 4923.177 ops/s [Average]
  (min, avg, max) = (347078.367, 360611.890, 373659.602), stdev = 7368.780
  CI (99.9%): [355688.714, 365535.067] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
ObservableRefCountTest._Benchmark.benchmark_refCount  thrpt   30  360611.890 ± 4923.177  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_disposedObserverShouldReportErrorOnGlobalErrorHandler$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_disposedObserverShouldReportErrorOnGlobalErrorHandler

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 66454.995 ops/s
# Warmup Iteration   2: 113847.425 ops/s
# Warmup Iteration   3: 123383.217 ops/s
# Warmup Iteration   4: 121234.208 ops/s
# Warmup Iteration   5: 135897.785 ops/s
# Warmup Iteration   6: 143431.818 ops/s
# Warmup Iteration   7: 136306.231 ops/s
# Warmup Iteration   8: 141691.619 ops/s
# Warmup Iteration   9: 133908.637 ops/s
# Warmup Iteration  10: 140773.641 ops/s
# Warmup Iteration  11: 135190.541 ops/s
# Warmup Iteration  12: 137292.625 ops/s
# Warmup Iteration  13: 141058.706 ops/s
# Warmup Iteration  14: 134855.949 ops/s
# Warmup Iteration  15: 135647.807 ops/s
# Warmup Iteration  16: 142510.178 ops/s
# Warmup Iteration  17: 142612.368 ops/s
# Warmup Iteration  18: 146928.608 ops/s
# Warmup Iteration  19: 138543.188 ops/s
# Warmup Iteration  20: 143244.607 ops/s
# Warmup Iteration  21: 148570.001 ops/s
# Warmup Iteration  22: 145219.954 ops/s
# Warmup Iteration  23: 144154.278 ops/s
# Warmup Iteration  24: 146448.447 ops/s
# Warmup Iteration  25: 147315.917 ops/s
# Warmup Iteration  26: 145918.231 ops/s
# Warmup Iteration  27: 149516.613 ops/s
# Warmup Iteration  28: 142955.290 ops/s
# Warmup Iteration  29: 144656.233 ops/s
# Warmup Iteration  30: 147500.584 ops/s
Iteration   1: 141099.116 ops/s
Iteration   2: 149843.081 ops/s
Iteration   3: 140905.129 ops/s
Iteration   4: 145331.863 ops/s
Iteration   5: 151549.824 ops/s
Iteration   6: 142771.449 ops/s
Iteration   7: 148591.947 ops/s
Iteration   8: 141298.289 ops/s
Iteration   9: 143039.399 ops/s
Iteration  10: 154053.361 ops/s
Iteration  11: 141654.955 ops/s
Iteration  12: 149955.309 ops/s
Iteration  13: 140290.573 ops/s
Iteration  14: 141960.775 ops/s
Iteration  15: 145223.218 ops/s
Iteration  16: 150366.761 ops/s
Iteration  17: 140316.092 ops/s
Iteration  18: 148429.442 ops/s
Iteration  19: 143993.566 ops/s
Iteration  20: 146139.609 ops/s
Iteration  21: 143122.937 ops/s
Iteration  22: 148224.189 ops/s
Iteration  23: 150374.220 ops/s
Iteration  24: 140944.972 ops/s
Iteration  25: 152032.817 ops/s
Iteration  26: 143095.133 ops/s
Iteration  27: 148991.121 ops/s
Iteration  28: 145042.820 ops/s
Iteration  29: 149311.305 ops/s
Iteration  30: 144336.279 ops/s


Result "io.reactivex.rxjava3.internal.observers.LambdaObserverTest._Benchmark.benchmark_disposedObserverShouldReportErrorOnGlobalErrorHandler":
  145742.985 ±(99.9%) 2714.126 ops/s [Average]
  (min, avg, max) = (140290.573, 145742.985, 154053.361), stdev = 4062.376
  CI (99.9%): [143028.859, 148457.111] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt       Score      Error  Units
LambdaObserverTest._Benchmark.benchmark_disposedObserverShouldReportErrorOnGlobalErrorHandler  thrpt   30  145742.985 ± 2714.126  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_backpressureTwoConsumers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_backpressureTwoConsumers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42472.827 ops/s
# Warmup Iteration   2: 210596.552 ops/s
# Warmup Iteration   3: 364383.297 ops/s
# Warmup Iteration   4: 789935.674 ops/s
# Warmup Iteration   5: 763988.192 ops/s
# Warmup Iteration   6: 751147.946 ops/s
# Warmup Iteration   7: 738738.469 ops/s
# Warmup Iteration   8: 765940.802 ops/s
# Warmup Iteration   9: 816751.192 ops/s
# Warmup Iteration  10: 769905.000 ops/s
# Warmup Iteration  11: 772678.967 ops/s
# Warmup Iteration  12: 772240.074 ops/s
# Warmup Iteration  13: 744842.927 ops/s
# Warmup Iteration  14: 834367.462 ops/s
# Warmup Iteration  15: 781364.825 ops/s
# Warmup Iteration  16: 741614.751 ops/s
# Warmup Iteration  17: 798247.199 ops/s
# Warmup Iteration  18: 813858.153 ops/s
# Warmup Iteration  19: 643878.707 ops/s
# Warmup Iteration  20: 788027.044 ops/s
# Warmup Iteration  21: 789365.977 ops/s
# Warmup Iteration  22: 793595.333 ops/s
# Warmup Iteration  23: 806520.860 ops/s
# Warmup Iteration  24: 798386.293 ops/s
# Warmup Iteration  25: 819259.552 ops/s
# Warmup Iteration  26: 788378.830 ops/s
# Warmup Iteration  27: 772912.715 ops/s
# Warmup Iteration  28: 781311.050 ops/s
# Warmup Iteration  29: 749748.872 ops/s
# Warmup Iteration  30: 824162.243 ops/s
Iteration   1: 830990.066 ops/s
Iteration   2: 807062.305 ops/s
Iteration   3: 812795.955 ops/s
Iteration   4: 835955.654 ops/s
Iteration   5: 778237.150 ops/s
Iteration   6: 846304.523 ops/s
Iteration   7: 784633.365 ops/s
Iteration   8: 821426.583 ops/s
Iteration   9: 825592.321 ops/s
Iteration  10: 806272.779 ops/s
Iteration  11: 828042.307 ops/s
Iteration  12: 821847.118 ops/s
Iteration  13: 773308.790 ops/s
Iteration  14: 794656.402 ops/s
Iteration  15: 813974.544 ops/s
Iteration  16: 796688.396 ops/s
Iteration  17: 827172.337 ops/s
Iteration  18: 806959.687 ops/s
Iteration  19: 769071.553 ops/s
Iteration  20: 815583.125 ops/s
Iteration  21: 804449.686 ops/s
Iteration  22: 825170.189 ops/s
Iteration  23: 820535.063 ops/s
Iteration  24: 807858.252 ops/s
Iteration  25: 804583.574 ops/s
Iteration  26: 797076.180 ops/s
Iteration  27: 838354.468 ops/s
Iteration  28: 790658.236 ops/s
Iteration  29: 787983.053 ops/s
Iteration  30: 853473.334 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_backpressureTwoConsumers":
  810890.566 ±(99.9%) 14059.138 ops/s [Average]
  (min, avg, max) = (769071.553, 810890.566, 853473.334), stdev = 21043.057
  CI (99.9%): [796831.429, 824949.704] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_backpressureTwoConsumers  thrpt   30  810890.566 ± 14059.138  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstSourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstSourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 43699.396 ops/s
# Warmup Iteration   2: 194716.555 ops/s
# Warmup Iteration   3: 218290.427 ops/s
# Warmup Iteration   4: 235890.654 ops/s
# Warmup Iteration   5: 235006.922 ops/s
# Warmup Iteration   6: 230491.623 ops/s
# Warmup Iteration   7: 225526.991 ops/s
# Warmup Iteration   8: 224098.711 ops/s
# Warmup Iteration   9: 223738.026 ops/s
# Warmup Iteration  10: 235461.413 ops/s
# Warmup Iteration  11: 230473.807 ops/s
# Warmup Iteration  12: 244052.940 ops/s
# Warmup Iteration  13: 230723.443 ops/s
# Warmup Iteration  14: 237988.732 ops/s
# Warmup Iteration  15: 241257.523 ops/s
# Warmup Iteration  16: 230428.801 ops/s
# Warmup Iteration  17: 252183.163 ops/s
# Warmup Iteration  18: 246835.824 ops/s
# Warmup Iteration  19: 239004.817 ops/s
# Warmup Iteration  20: 249952.092 ops/s
# Warmup Iteration  21: 241529.779 ops/s
# Warmup Iteration  22: 250180.895 ops/s
# Warmup Iteration  23: 238330.574 ops/s
# Warmup Iteration  24: 242991.179 ops/s
# Warmup Iteration  25: 248336.523 ops/s
# Warmup Iteration  26: 241082.172 ops/s
# Warmup Iteration  27: 243965.129 ops/s
# Warmup Iteration  28: 255929.049 ops/s
# Warmup Iteration  29: 238433.082 ops/s
# Warmup Iteration  30: 240686.236 ops/s
Iteration   1: 253631.469 ops/s
Iteration   2: 238114.774 ops/s
Iteration   3: 250625.180 ops/s
Iteration   4: 241781.152 ops/s
Iteration   5: 242729.292 ops/s
Iteration   6: 250570.494 ops/s
Iteration   7: 193716.625 ops/s
Iteration   8: 242840.285 ops/s
Iteration   9: 249732.593 ops/s
Iteration  10: 246707.328 ops/s
Iteration  11: 245911.277 ops/s
Iteration  12: 254007.126 ops/s
Iteration  13: 239590.972 ops/s
Iteration  14: 245370.967 ops/s
Iteration  15: 242181.146 ops/s
Iteration  16: 245776.850 ops/s
Iteration  17: 245357.515 ops/s
Iteration  18: 240919.315 ops/s
Iteration  19: 252820.076 ops/s
Iteration  20: 238511.021 ops/s
Iteration  21: 249161.208 ops/s
Iteration  22: 258551.570 ops/s
Iteration  23: 224864.819 ops/s
Iteration  24: 253372.990 ops/s
Iteration  25: 249459.100 ops/s
Iteration  26: 250062.759 ops/s
Iteration  27: 246685.502 ops/s
Iteration  28: 239627.985 ops/s
Iteration  29: 245194.304 ops/s
Iteration  30: 244435.387 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstSourceIgnoresCancel":
  244077.036 ±(99.9%) 7676.546 ops/s [Average]
  (min, avg, max) = (193716.625, 244077.036, 258551.570), stdev = 11489.894
  CI (99.9%): [236400.490, 251753.582] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                              Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrDefaultTest._Benchmark.benchmark_firstSourceIgnoresCancel  thrpt   30  244077.036 ± 7676.546  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstSourceIgnoresCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstSourceIgnoresCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51258.588 ops/s
# Warmup Iteration   2: 184144.221 ops/s
# Warmup Iteration   3: 202825.718 ops/s
# Warmup Iteration   4: 232834.231 ops/s
# Warmup Iteration   5: 239826.502 ops/s
# Warmup Iteration   6: 238030.768 ops/s
# Warmup Iteration   7: 237310.569 ops/s
# Warmup Iteration   8: 242819.528 ops/s
# Warmup Iteration   9: 232159.761 ops/s
# Warmup Iteration  10: 236293.355 ops/s
# Warmup Iteration  11: 249587.671 ops/s
# Warmup Iteration  12: 227668.010 ops/s
# Warmup Iteration  13: 249259.268 ops/s
# Warmup Iteration  14: 227994.130 ops/s
# Warmup Iteration  15: 237235.238 ops/s
# Warmup Iteration  16: 236528.048 ops/s
# Warmup Iteration  17: 249988.350 ops/s
# Warmup Iteration  18: 250325.199 ops/s
# Warmup Iteration  19: 235485.988 ops/s
# Warmup Iteration  20: 254643.284 ops/s
# Warmup Iteration  21: 245792.460 ops/s
# Warmup Iteration  22: 244210.897 ops/s
# Warmup Iteration  23: 257618.198 ops/s
# Warmup Iteration  24: 248077.142 ops/s
# Warmup Iteration  25: 242972.815 ops/s
# Warmup Iteration  26: 257719.315 ops/s
# Warmup Iteration  27: 253634.138 ops/s
# Warmup Iteration  28: 247165.344 ops/s
# Warmup Iteration  29: 251415.210 ops/s
# Warmup Iteration  30: 247913.650 ops/s
Iteration   1: 255505.279 ops/s
Iteration   2: 252947.645 ops/s
Iteration   3: 248914.445 ops/s
Iteration   4: 255112.867 ops/s
Iteration   5: 248289.545 ops/s
Iteration   6: 247957.067 ops/s
Iteration   7: 242782.365 ops/s
Iteration   8: 254773.021 ops/s
Iteration   9: 245913.750 ops/s
Iteration  10: 258174.422 ops/s
Iteration  11: 240644.985 ops/s
Iteration  12: 258348.012 ops/s
Iteration  13: 256256.491 ops/s
Iteration  14: 247406.895 ops/s
Iteration  15: 246895.583 ops/s
Iteration  16: 248232.794 ops/s
Iteration  17: 255004.364 ops/s
Iteration  18: 242744.066 ops/s
Iteration  19: 256068.734 ops/s
Iteration  20: 245886.354 ops/s
Iteration  21: 246723.401 ops/s
Iteration  22: 260748.634 ops/s
Iteration  23: 240657.995 ops/s
Iteration  24: 251971.661 ops/s
Iteration  25: 247435.182 ops/s
Iteration  26: 256787.226 ops/s
Iteration  27: 257751.961 ops/s
Iteration  28: 244343.947 ops/s
Iteration  29: 252250.935 ops/s
Iteration  30: 247129.913 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstSourceIgnoresCancel":
  250455.318 ±(99.9%) 3820.594 ops/s [Average]
  (min, avg, max) = (240644.985, 250455.318, 260748.634), stdev = 5718.485
  CI (99.9%): [246634.724, 254275.912] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                            Mode  Cnt       Score      Error  Units
ObservableStageSubscriberOrErrorTest._Benchmark.benchmark_firstSourceIgnoresCancel  thrpt   30  250455.318 ± 3820.594  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_disposedOnCallThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_disposedOnCallThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 76678.231 ops/s
# Warmup Iteration   2: 205169.225 ops/s
# Warmup Iteration   3: 251254.031 ops/s
# Warmup Iteration   4: 243416.181 ops/s
# Warmup Iteration   5: 251438.625 ops/s
# Warmup Iteration   6: 241791.505 ops/s
# Warmup Iteration   7: 242172.896 ops/s
# Warmup Iteration   8: 254228.504 ops/s
# Warmup Iteration   9: 239315.767 ops/s
# Warmup Iteration  10: 245848.940 ops/s
# Warmup Iteration  11: 187297.365 ops/s
# Warmup Iteration  12: 251243.015 ops/s
# Warmup Iteration  13: 250711.855 ops/s
# Warmup Iteration  14: 259268.637 ops/s
# Warmup Iteration  15: 250212.126 ops/s
# Warmup Iteration  16: 235526.112 ops/s
# Warmup Iteration  17: 261066.267 ops/s
# Warmup Iteration  18: 257611.217 ops/s
# Warmup Iteration  19: 266432.430 ops/s
# Warmup Iteration  20: 260229.206 ops/s
# Warmup Iteration  21: 254295.466 ops/s
# Warmup Iteration  22: 265463.853 ops/s
# Warmup Iteration  23: 256443.748 ops/s
# Warmup Iteration  24: 259938.960 ops/s
# Warmup Iteration  25: 276078.431 ops/s
# Warmup Iteration  26: 255848.564 ops/s
# Warmup Iteration  27: 265917.760 ops/s
# Warmup Iteration  28: 265561.176 ops/s
# Warmup Iteration  29: 253051.961 ops/s
# Warmup Iteration  30: 263225.773 ops/s
Iteration   1: 273035.578 ops/s
Iteration   2: 265383.717 ops/s
Iteration   3: 257454.692 ops/s
Iteration   4: 261896.292 ops/s
Iteration   5: 270934.933 ops/s
Iteration   6: 259132.807 ops/s
Iteration   7: 251774.850 ops/s
Iteration   8: 271894.371 ops/s
Iteration   9: 240809.923 ops/s
Iteration  10: 267802.226 ops/s
Iteration  11: 257553.024 ops/s
Iteration  12: 262565.931 ops/s
Iteration  13: 264023.860 ops/s
Iteration  14: 256626.940 ops/s
Iteration  15: 270046.100 ops/s
Iteration  16: 251741.127 ops/s
Iteration  17: 271958.889 ops/s
Iteration  18: 269253.771 ops/s
Iteration  19: 258661.994 ops/s
Iteration  20: 269796.634 ops/s
Iteration  21: 252698.075 ops/s
Iteration  22: 268976.942 ops/s
Iteration  23: 266235.403 ops/s
Iteration  24: 261601.316 ops/s
Iteration  25: 264440.123 ops/s
Iteration  26: 263212.745 ops/s
Iteration  27: 251223.799 ops/s
Iteration  28: 256746.229 ops/s
Iteration  29: 276674.275 ops/s
Iteration  30: 261742.984 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromCallableTest._Benchmark.benchmark_disposedOnCallThrows":
  262529.985 ±(99.9%) 5386.922 ops/s [Average]
  (min, avg, max) = (240809.923, 262529.985, 276674.275), stdev = 8062.891
  CI (99.9%): [257143.063, 267916.907] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableFromCallableTest._Benchmark.benchmark_disposedOnCallThrows  thrpt   30  262529.985 ± 5386.922  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_cancelOnArrival2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_cancelOnArrival2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 312540.311 ops/s
# Warmup Iteration   2: 1290623.699 ops/s
# Warmup Iteration   3: 1925436.417 ops/s
# Warmup Iteration   4: 1962967.437 ops/s
# Warmup Iteration   5: 1800690.616 ops/s
# Warmup Iteration   6: 1751564.831 ops/s
# Warmup Iteration   7: 1973164.013 ops/s
# Warmup Iteration   8: 2048546.301 ops/s
# Warmup Iteration   9: 1869346.698 ops/s
# Warmup Iteration  10: 1956233.580 ops/s
# Warmup Iteration  11: 1936439.678 ops/s
# Warmup Iteration  12: 1980115.764 ops/s
# Warmup Iteration  13: 2056980.630 ops/s
# Warmup Iteration  14: 1874103.171 ops/s
# Warmup Iteration  15: 1975949.425 ops/s
# Warmup Iteration  16: 2036675.766 ops/s
# Warmup Iteration  17: 1863921.394 ops/s
# Warmup Iteration  18: 1975390.242 ops/s
# Warmup Iteration  19: 1931050.182 ops/s
# Warmup Iteration  20: 1962967.040 ops/s
# Warmup Iteration  21: 1909114.331 ops/s
# Warmup Iteration  22: 1960683.380 ops/s
# Warmup Iteration  23: 1912117.799 ops/s
# Warmup Iteration  24: 1919463.401 ops/s
# Warmup Iteration  25: 2001345.900 ops/s
# Warmup Iteration  26: 1858486.407 ops/s
# Warmup Iteration  27: 1924043.837 ops/s
# Warmup Iteration  28: 2035237.057 ops/s
# Warmup Iteration  29: 1871679.250 ops/s
# Warmup Iteration  30: 2019210.824 ops/s
Iteration   1: 2026208.846 ops/s
Iteration   2: 1898845.475 ops/s
Iteration   3: 1984610.913 ops/s
Iteration   4: 1894064.503 ops/s
Iteration   5: 2010709.208 ops/s
Iteration   6: 2008851.372 ops/s
Iteration   7: 1924289.198 ops/s
Iteration   8: 2006429.932 ops/s
Iteration   9: 1962463.124 ops/s
Iteration  10: 2027328.414 ops/s
Iteration  11: 1968945.242 ops/s
Iteration  12: 1931618.748 ops/s
Iteration  13: 1994435.806 ops/s
Iteration  14: 1870766.516 ops/s
Iteration  15: 1929252.922 ops/s
Iteration  16: 1980595.632 ops/s
Iteration  17: 1913560.179 ops/s
Iteration  18: 1974505.204 ops/s
Iteration  19: 1921546.127 ops/s
Iteration  20: 1955316.711 ops/s
Iteration  21: 2013487.998 ops/s
Iteration  22: 1964290.819 ops/s
Iteration  23: 2033961.216 ops/s
Iteration  24: 1920192.963 ops/s
Iteration  25: 1976322.447 ops/s
Iteration  26: 1968117.086 ops/s
Iteration  27: 1936148.028 ops/s
Iteration  28: 1971708.135 ops/s
Iteration  29: 1953242.508 ops/s
Iteration  30: 1984894.737 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayTest._Benchmark.benchmark_cancelOnArrival2":
  1963557.000 ±(99.9%) 28436.259 ops/s [Average]
  (min, avg, max) = (1870766.516, 1963557.000, 2033961.216), stdev = 42562.057
  CI (99.9%): [1935120.741, 1991993.259] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
ObservableReplayTest._Benchmark.benchmark_cancelOnArrival2  thrpt   30  1963557.000 ± 28436.259  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 267994.418 ops/s
# Warmup Iteration   2: 897230.272 ops/s
# Warmup Iteration   3: 1475058.291 ops/s
# Warmup Iteration   4: 1978204.639 ops/s
# Warmup Iteration   5: 1772379.961 ops/s
# Warmup Iteration   6: 1906874.343 ops/s
# Warmup Iteration   7: 2049389.881 ops/s
# Warmup Iteration   8: 2006830.624 ops/s
# Warmup Iteration   9: 1935251.554 ops/s
# Warmup Iteration  10: 2019937.844 ops/s
# Warmup Iteration  11: 1970706.894 ops/s
# Warmup Iteration  12: 2051201.460 ops/s
# Warmup Iteration  13: 2082372.768 ops/s
# Warmup Iteration  14: 2059575.772 ops/s
# Warmup Iteration  15: 1957149.406 ops/s
# Warmup Iteration  16: 2087723.379 ops/s
# Warmup Iteration  17: 2004445.573 ops/s
# Warmup Iteration  18: 1963280.732 ops/s
# Warmup Iteration  19: 2041460.267 ops/s
# Warmup Iteration  20: 2057042.038 ops/s
# Warmup Iteration  21: 1994574.362 ops/s
# Warmup Iteration  22: 2050111.994 ops/s
# Warmup Iteration  23: 2018342.901 ops/s
# Warmup Iteration  24: 1970028.055 ops/s
# Warmup Iteration  25: 2112765.310 ops/s
# Warmup Iteration  26: 1898028.026 ops/s
# Warmup Iteration  27: 2068992.660 ops/s
# Warmup Iteration  28: 1995100.799 ops/s
# Warmup Iteration  29: 1992712.008 ops/s
# Warmup Iteration  30: 2041931.356 ops/s
Iteration   1: 1955607.620 ops/s
Iteration   2: 2005003.222 ops/s
Iteration   3: 2057344.762 ops/s
Iteration   4: 2030403.461 ops/s
Iteration   5: 1906032.325 ops/s
Iteration   6: 2089401.055 ops/s
Iteration   7: 1959656.303 ops/s
Iteration   8: 2069226.491 ops/s
Iteration   9: 2043802.387 ops/s
Iteration  10: 1925572.473 ops/s
Iteration  11: 2070367.162 ops/s
Iteration  12: 1955308.033 ops/s
Iteration  13: 2024276.317 ops/s
Iteration  14: 1987022.873 ops/s
Iteration  15: 2067725.744 ops/s
Iteration  16: 1903342.879 ops/s
Iteration  17: 2022604.037 ops/s
Iteration  18: 2015398.810 ops/s
Iteration  19: 1974878.788 ops/s
Iteration  20: 2067652.684 ops/s
Iteration  21: 2000574.256 ops/s
Iteration  22: 2087955.121 ops/s
Iteration  23: 1986159.358 ops/s
Iteration  24: 1996916.312 ops/s
Iteration  25: 2108890.580 ops/s
Iteration  26: 2071643.047 ops/s
Iteration  27: 1988330.869 ops/s
Iteration  28: 1960319.221 ops/s
Iteration  29: 2132279.191 ops/s
Iteration  30: 1996910.223 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival2":
  2015353.520 ±(99.9%) 39540.615 ops/s [Average]
  (min, avg, max) = (1903342.879, 2015353.520, 2132279.191), stdev = 59182.535
  CI (99.9%): [1975812.906, 2054894.135] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableReplayEagerTruncateTest._Benchmark.benchmark_cancelOnArrival2  thrpt   30  2015353.520 ± 39540.615  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_errorAfterLimitReached$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_errorAfterLimitReached

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 64349.255 ops/s
# Warmup Iteration   2: 174101.911 ops/s
# Warmup Iteration   3: 226822.651 ops/s
# Warmup Iteration   4: 207583.742 ops/s
# Warmup Iteration   5: 242331.817 ops/s
# Warmup Iteration   6: 245801.504 ops/s
# Warmup Iteration   7: 243416.344 ops/s
# Warmup Iteration   8: 251319.311 ops/s
# Warmup Iteration   9: 237929.914 ops/s
# Warmup Iteration  10: 252243.367 ops/s
# Warmup Iteration  11: 247953.466 ops/s
# Warmup Iteration  12: 240613.301 ops/s
# Warmup Iteration  13: 257112.961 ops/s
# Warmup Iteration  14: 252886.299 ops/s
# Warmup Iteration  15: 238162.363 ops/s
# Warmup Iteration  16: 248633.763 ops/s
# Warmup Iteration  17: 251502.593 ops/s
# Warmup Iteration  18: 252799.855 ops/s
# Warmup Iteration  19: 266029.049 ops/s
# Warmup Iteration  20: 264227.056 ops/s
# Warmup Iteration  21: 247183.381 ops/s
# Warmup Iteration  22: 250636.134 ops/s
# Warmup Iteration  23: 258388.450 ops/s
# Warmup Iteration  24: 251264.836 ops/s
# Warmup Iteration  25: 257379.927 ops/s
# Warmup Iteration  26: 248791.464 ops/s
# Warmup Iteration  27: 244036.612 ops/s
# Warmup Iteration  28: 256835.217 ops/s
# Warmup Iteration  29: 251094.575 ops/s
# Warmup Iteration  30: 257374.187 ops/s
Iteration   1: 267516.656 ops/s
Iteration   2: 251541.084 ops/s
Iteration   3: 262285.887 ops/s
Iteration   4: 251885.673 ops/s
Iteration   5: 263654.798 ops/s
Iteration   6: 261897.630 ops/s
Iteration   7: 257788.893 ops/s
Iteration   8: 251301.491 ops/s
Iteration   9: 262586.355 ops/s
Iteration  10: 253237.969 ops/s
Iteration  11: 260506.822 ops/s
Iteration  12: 247016.345 ops/s
Iteration  13: 257464.651 ops/s
Iteration  14: 260287.937 ops/s
Iteration  15: 241744.904 ops/s
Iteration  16: 258791.150 ops/s
Iteration  17: 254355.272 ops/s
Iteration  18: 252017.707 ops/s
Iteration  19: 268150.757 ops/s
Iteration  20: 251719.647 ops/s
Iteration  21: 258480.877 ops/s
Iteration  22: 265269.452 ops/s
Iteration  23: 253988.261 ops/s
Iteration  24: 261631.485 ops/s
Iteration  25: 248292.355 ops/s
Iteration  26: 267171.719 ops/s
Iteration  27: 268959.929 ops/s
Iteration  28: 255996.571 ops/s
Iteration  29: 245243.186 ops/s
Iteration  30: 261976.309 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTakeTest._Benchmark.benchmark_errorAfterLimitReached":
  257425.392 ±(99.9%) 4750.553 ops/s [Average]
  (min, avg, max) = (241744.904, 257425.392, 268959.929), stdev = 7110.405
  CI (99.9%): [252674.839, 262175.946] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score      Error  Units
ObservableTakeTest._Benchmark.benchmark_errorAfterLimitReached  thrpt   30  257425.392 ± 4750.553  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_sameSourceMultipleIterators$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_sameSourceMultipleIterators

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 19122.232 ops/s
# Warmup Iteration   2: 82164.236 ops/s
# Warmup Iteration   3: 117305.439 ops/s
# Warmup Iteration   4: 125163.815 ops/s
# Warmup Iteration   5: 127701.075 ops/s
# Warmup Iteration   6: 121451.800 ops/s
# Warmup Iteration   7: 123235.555 ops/s
# Warmup Iteration   8: 127063.397 ops/s
# Warmup Iteration   9: 121287.580 ops/s
# Warmup Iteration  10: 125967.812 ops/s
# Warmup Iteration  11: 124447.869 ops/s
# Warmup Iteration  12: 114721.393 ops/s
# Warmup Iteration  13: 126379.667 ops/s
# Warmup Iteration  14: 124613.988 ops/s
# Warmup Iteration  15: 127631.106 ops/s
# Warmup Iteration  16: 118216.162 ops/s
# Warmup Iteration  17: 127266.167 ops/s
# Warmup Iteration  18: 125968.063 ops/s
# Warmup Iteration  19: 129050.786 ops/s
# Warmup Iteration  20: 116159.547 ops/s
# Warmup Iteration  21: 125027.240 ops/s
# Warmup Iteration  22: 129264.441 ops/s
# Warmup Iteration  23: 121302.164 ops/s
# Warmup Iteration  24: 124972.416 ops/s
# Warmup Iteration  25: 130276.166 ops/s
# Warmup Iteration  26: 122383.645 ops/s
# Warmup Iteration  27: 126911.547 ops/s
# Warmup Iteration  28: 122911.763 ops/s
# Warmup Iteration  29: 122223.026 ops/s
# Warmup Iteration  30: 126939.814 ops/s
Iteration   1: 120943.784 ops/s
Iteration   2: 124017.857 ops/s
Iteration   3: 128749.806 ops/s
Iteration   4: 121469.486 ops/s
Iteration   5: 124457.080 ops/s
Iteration   6: 124972.582 ops/s
Iteration   7: 126614.010 ops/s
Iteration   8: 130414.461 ops/s
Iteration   9: 120810.419 ops/s
Iteration  10: 125973.007 ops/s
Iteration  11: 123649.960 ops/s
Iteration  12: 128327.762 ops/s
Iteration  13: 125675.473 ops/s
Iteration  14: 120756.877 ops/s
Iteration  15: 124558.670 ops/s
Iteration  16: 123968.848 ops/s
Iteration  17: 129389.987 ops/s
Iteration  18: 115107.954 ops/s
Iteration  19: 126382.120 ops/s
Iteration  20: 130284.825 ops/s
Iteration  21: 123739.568 ops/s
Iteration  22: 128859.253 ops/s
Iteration  23: 123182.053 ops/s
Iteration  24: 126596.933 ops/s
Iteration  25: 126934.125 ops/s
Iteration  26: 121936.047 ops/s
Iteration  27: 130919.555 ops/s
Iteration  28: 120689.642 ops/s
Iteration  29: 128770.731 ops/s
Iteration  30: 124278.965 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.BlockingObservableLatestTest._Benchmark.benchmark_sameSourceMultipleIterators":
  125081.061 ±(99.9%) 2411.681 ops/s [Average]
  (min, avg, max) = (115107.954, 125081.061, 130919.555), stdev = 3609.692
  CI (99.9%): [122669.380, 127492.743] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                       Mode  Cnt       Score      Error  Units
BlockingObservableLatestTest._Benchmark.benchmark_sameSourceMultipleIterators  thrpt   30  125081.061 ± 2411.681  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_disconnectBeforeConnect$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_disconnectBeforeConnect

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48357.645 ops/s
# Warmup Iteration   2: 229052.625 ops/s
# Warmup Iteration   3: 354656.409 ops/s
# Warmup Iteration   4: 713816.116 ops/s
# Warmup Iteration   5: 749594.076 ops/s
# Warmup Iteration   6: 727356.588 ops/s
# Warmup Iteration   7: 812712.627 ops/s
# Warmup Iteration   8: 850323.722 ops/s
# Warmup Iteration   9: 782647.709 ops/s
# Warmup Iteration  10: 826272.523 ops/s
# Warmup Iteration  11: 809734.644 ops/s
# Warmup Iteration  12: 822066.467 ops/s
# Warmup Iteration  13: 746848.775 ops/s
# Warmup Iteration  14: 809384.089 ops/s
# Warmup Iteration  15: 829701.014 ops/s
# Warmup Iteration  16: 803666.390 ops/s
# Warmup Iteration  17: 831845.798 ops/s
# Warmup Iteration  18: 754829.420 ops/s
# Warmup Iteration  19: 839284.691 ops/s
# Warmup Iteration  20: 814307.989 ops/s
# Warmup Iteration  21: 816927.725 ops/s
# Warmup Iteration  22: 812845.658 ops/s
# Warmup Iteration  23: 813929.387 ops/s
# Warmup Iteration  24: 805010.180 ops/s
# Warmup Iteration  25: 843900.368 ops/s
# Warmup Iteration  26: 846279.116 ops/s
# Warmup Iteration  27: 796339.676 ops/s
# Warmup Iteration  28: 823033.706 ops/s
# Warmup Iteration  29: 808078.979 ops/s
# Warmup Iteration  30: 820078.024 ops/s
Iteration   1: 833464.057 ops/s
Iteration   2: 775090.532 ops/s
Iteration   3: 847061.088 ops/s
Iteration   4: 820253.343 ops/s
Iteration   5: 801492.299 ops/s
Iteration   6: 850434.438 ops/s
Iteration   7: 855340.332 ops/s
Iteration   8: 787494.255 ops/s
Iteration   9: 840519.034 ops/s
Iteration  10: 788946.207 ops/s
Iteration  11: 810704.922 ops/s
Iteration  12: 796468.507 ops/s
Iteration  13: 788485.586 ops/s
Iteration  14: 820870.861 ops/s
Iteration  15: 808052.817 ops/s
Iteration  16: 785543.162 ops/s
Iteration  17: 822994.149 ops/s
Iteration  18: 801200.370 ops/s
Iteration  19: 836503.425 ops/s
Iteration  20: 794190.449 ops/s
Iteration  21: 814325.313 ops/s
Iteration  22: 845017.162 ops/s
Iteration  23: 774773.558 ops/s
Iteration  24: 836552.651 ops/s
Iteration  25: 790992.802 ops/s
Iteration  26: 785123.780 ops/s
Iteration  27: 648363.931 ops/s
Iteration  28: 832104.631 ops/s
Iteration  29: 785567.839 ops/s
Iteration  30: 841028.853 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRefCountTest._Benchmark.benchmark_disconnectBeforeConnect":
  807298.678 ±(99.9%) 25900.862 ops/s [Average]
  (min, avg, max) = (648363.931, 807298.678, 855340.332), stdev = 38767.193
  CI (99.9%): [781397.817, 833199.540] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt       Score       Error  Units
ObservableRefCountTest._Benchmark.benchmark_disconnectBeforeConnect  thrpt   30  807298.678 ± 25900.862  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_mainAndBoundaryBothError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_mainAndBoundaryBothError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 6413.857 ops/s
# Warmup Iteration   2: 59666.438 ops/s
# Warmup Iteration   3: 154218.708 ops/s
# Warmup Iteration   4: 155692.236 ops/s
# Warmup Iteration   5: 148632.032 ops/s
# Warmup Iteration   6: 151514.178 ops/s
# Warmup Iteration   7: 166126.132 ops/s
# Warmup Iteration   8: 164160.670 ops/s
# Warmup Iteration   9: 174841.526 ops/s
# Warmup Iteration  10: 162763.870 ops/s
# Warmup Iteration  11: 174542.430 ops/s
# Warmup Iteration  12: 170506.465 ops/s
# Warmup Iteration  13: 160208.809 ops/s
# Warmup Iteration  14: 174513.465 ops/s
# Warmup Iteration  15: 168810.063 ops/s
# Warmup Iteration  16: 170285.692 ops/s
# Warmup Iteration  17: 177227.753 ops/s
# Warmup Iteration  18: 169248.944 ops/s
# Warmup Iteration  19: 178922.466 ops/s
# Warmup Iteration  20: 174400.826 ops/s
# Warmup Iteration  21: 177245.277 ops/s
# Warmup Iteration  22: 170223.817 ops/s
# Warmup Iteration  23: 171317.142 ops/s
# Warmup Iteration  24: 172237.481 ops/s
# Warmup Iteration  25: 180465.232 ops/s
# Warmup Iteration  26: 168424.306 ops/s
# Warmup Iteration  27: 182467.664 ops/s
# Warmup Iteration  28: 181567.608 ops/s
# Warmup Iteration  29: 175515.841 ops/s
# Warmup Iteration  30: 180294.157 ops/s
Iteration   1: 171409.923 ops/s
Iteration   2: 178266.051 ops/s
Iteration   3: 178062.682 ops/s
Iteration   4: 172236.277 ops/s
Iteration   5: 176747.044 ops/s
Iteration   6: 180216.376 ops/s
Iteration   7: 175708.661 ops/s
Iteration   8: 174561.218 ops/s
Iteration   9: 173810.019 ops/s
Iteration  10: 178118.077 ops/s
Iteration  11: 171606.691 ops/s
Iteration  12: 177876.339 ops/s
Iteration  13: 180354.552 ops/s
Iteration  14: 171351.275 ops/s
Iteration  15: 177133.683 ops/s
Iteration  16: 171290.666 ops/s
Iteration  17: 179510.448 ops/s
Iteration  18: 182489.152 ops/s
Iteration  19: 169774.222 ops/s
Iteration  20: 183119.904 ops/s
Iteration  21: 170624.960 ops/s
Iteration  22: 176934.843 ops/s
Iteration  23: 179505.658 ops/s
Iteration  24: 170721.293 ops/s
Iteration  25: 175441.342 ops/s
Iteration  26: 180593.168 ops/s
Iteration  27: 172750.121 ops/s
Iteration  28: 177858.200 ops/s
Iteration  29: 173178.417 ops/s
Iteration  30: 178757.331 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_mainAndBoundaryBothError":
  176000.286 ±(99.9%) 2560.826 ops/s [Average]
  (min, avg, max) = (169774.222, 176000.286, 183119.904), stdev = 3832.925
  CI (99.9%): [173439.460, 178561.113] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                          Mode  Cnt       Score      Error  Units
ObservableWindowWithObservableTest._Benchmark.benchmark_mainAndBoundaryBothError  thrpt   30  176000.286 ± 2560.826  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_withMultipleStaggeredSubscribersAndPublish$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_withMultipleStaggeredSubscribersAndPublish

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.743 ops/s
# Warmup Iteration   2: 18948.581 ops/s
# Warmup Iteration   3: 73194.776 ops/s
# Warmup Iteration   4: 89936.006 ops/s
# Warmup Iteration   5: 94766.977 ops/s
# Warmup Iteration   6: 252623.826 ops/s
# Warmup Iteration   7: 320351.414 ops/s
# Warmup Iteration   8: 331404.257 ops/s
# Warmup Iteration   9: 347336.305 ops/s
# Warmup Iteration  10: 298835.832 ops/s
# Warmup Iteration  11: 306473.594 ops/s
# Warmup Iteration  12: 333707.925 ops/s
# Warmup Iteration  13: 328736.732 ops/s
# Warmup Iteration  14: 337303.160 ops/s
# Warmup Iteration  15: 330829.161 ops/s
# Warmup Iteration  16: 340191.525 ops/s
# Warmup Iteration  17: 333200.638 ops/s
# Warmup Iteration  18: 324439.206 ops/s
# Warmup Iteration  19: 348475.926 ops/s
# Warmup Iteration  20: 328862.049 ops/s
# Warmup Iteration  21: 335782.889 ops/s
# Warmup Iteration  22: 329150.988 ops/s
# Warmup Iteration  23: 322953.978 ops/s
# Warmup Iteration  24: 338144.232 ops/s
# Warmup Iteration  25: 330734.815 ops/s
# Warmup Iteration  26: 331975.410 ops/s
# Warmup Iteration  27: 335676.763 ops/s
# Warmup Iteration  28: 329117.825 ops/s
# Warmup Iteration  29: 337937.824 ops/s
# Warmup Iteration  30: 336750.107 ops/s
Iteration   1: 334170.113 ops/s
Iteration   2: 337035.881 ops/s
Iteration   3: 320748.706 ops/s
Iteration   4: 329741.090 ops/s
Iteration   5: 343551.147 ops/s
Iteration   6: 328049.473 ops/s
Iteration   7: 338654.791 ops/s
Iteration   8: 343728.903 ops/s
Iteration   9: 333512.499 ops/s
Iteration  10: 331049.123 ops/s
Iteration  11: 344915.542 ops/s
Iteration  12: 322195.469 ops/s
Iteration  13: 342418.671 ops/s
Iteration  14: 346685.896 ops/s
Iteration  15: 322083.902 ops/s
Iteration  16: 335419.804 ops/s
Iteration  17: 330833.643 ops/s
Iteration  18: 328567.828 ops/s
Iteration  19: 350161.584 ops/s
Iteration  20: 315431.834 ops/s
Iteration  21: 273686.119 ops/s
Iteration  22: 325673.277 ops/s
Iteration  23: 335616.608 ops/s
Iteration  24: 324570.065 ops/s
Iteration  25: 332105.706 ops/s
Iteration  26: 332930.871 ops/s
Iteration  27: 323217.834 ops/s
Iteration  28: 344236.842 ops/s
Iteration  29: 331960.483 ops/s
Iteration  30: 330055.739 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimerTest._Benchmark.benchmark_withMultipleStaggeredSubscribersAndPublish":
  331100.315 ±(99.9%) 9223.149 ops/s [Average]
  (min, avg, max) = (273686.119, 331100.315, 350161.584), stdev = 13804.776
  CI (99.9%): [321877.166, 340323.464] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt       Score      Error  Units
ObservableTimerTest._Benchmark.benchmark_withMultipleStaggeredSubscribersAndPublish  thrpt   30  331100.315 ± 9223.149  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSourceOther$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSourceOther

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 17114.811 ops/s
# Warmup Iteration   2: 79330.061 ops/s
# Warmup Iteration   3: 154775.475 ops/s
# Warmup Iteration   4: 170140.284 ops/s
# Warmup Iteration   5: 163500.289 ops/s
# Warmup Iteration   6: 168034.726 ops/s
# Warmup Iteration   7: 161173.435 ops/s
# Warmup Iteration   8: 165913.664 ops/s
# Warmup Iteration   9: 162584.276 ops/s
# Warmup Iteration  10: 165402.454 ops/s
# Warmup Iteration  11: 160726.288 ops/s
# Warmup Iteration  12: 175335.262 ops/s
# Warmup Iteration  13: 161939.250 ops/s
# Warmup Iteration  14: 163659.081 ops/s
# Warmup Iteration  15: 168433.694 ops/s
# Warmup Iteration  16: 156416.633 ops/s
# Warmup Iteration  17: 179780.981 ops/s
# Warmup Iteration  18: 170252.006 ops/s
# Warmup Iteration  19: 181404.160 ops/s
# Warmup Iteration  20: 172066.277 ops/s
# Warmup Iteration  21: 176044.716 ops/s
# Warmup Iteration  22: 178072.798 ops/s
# Warmup Iteration  23: 176039.130 ops/s
# Warmup Iteration  24: 170254.680 ops/s
# Warmup Iteration  25: 182920.379 ops/s
# Warmup Iteration  26: 175421.037 ops/s
# Warmup Iteration  27: 171518.869 ops/s
# Warmup Iteration  28: 183929.934 ops/s
# Warmup Iteration  29: 169303.909 ops/s
# Warmup Iteration  30: 175792.901 ops/s
Iteration   1: 181408.726 ops/s
Iteration   2: 173146.141 ops/s
Iteration   3: 178764.300 ops/s
Iteration   4: 167181.811 ops/s
Iteration   5: 179370.205 ops/s
Iteration   6: 170914.988 ops/s
Iteration   7: 174983.087 ops/s
Iteration   8: 173560.017 ops/s
Iteration   9: 171395.464 ops/s
Iteration  10: 182101.885 ops/s
Iteration  11: 169379.314 ops/s
Iteration  12: 177632.049 ops/s
Iteration  13: 171490.817 ops/s
Iteration  14: 168262.943 ops/s
Iteration  15: 174075.130 ops/s
Iteration  16: 179710.638 ops/s
Iteration  17: 166041.707 ops/s
Iteration  18: 173294.125 ops/s
Iteration  19: 180065.823 ops/s
Iteration  20: 173035.403 ops/s
Iteration  21: 173383.776 ops/s
Iteration  22: 168436.007 ops/s
Iteration  23: 183765.886 ops/s
Iteration  24: 180222.073 ops/s
Iteration  25: 174086.203 ops/s
Iteration  26: 178420.053 ops/s
Iteration  27: 177587.829 ops/s
Iteration  28: 179423.911 ops/s
Iteration  29: 177943.668 ops/s
Iteration  30: 170582.747 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSourceOther":
  174988.891 ±(99.9%) 3210.935 ops/s [Average]
  (min, avg, max) = (166041.707, 174988.891, 183765.886), stdev = 4805.977
  CI (99.9%): [171777.956, 178199.826] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                    Mode  Cnt       Score      Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSourceOther  thrpt   30  174988.891 ± 3210.935  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_disposedOnCallThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_disposedOnCallThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42655.668 ops/s
# Warmup Iteration   2: 204375.789 ops/s
# Warmup Iteration   3: 221728.259 ops/s
# Warmup Iteration   4: 215450.405 ops/s
# Warmup Iteration   5: 256606.936 ops/s
# Warmup Iteration   6: 246434.930 ops/s
# Warmup Iteration   7: 244191.150 ops/s
# Warmup Iteration   8: 263656.160 ops/s
# Warmup Iteration   9: 250120.732 ops/s
# Warmup Iteration  10: 253118.427 ops/s
# Warmup Iteration  11: 250678.329 ops/s
# Warmup Iteration  12: 247617.496 ops/s
# Warmup Iteration  13: 257992.758 ops/s
# Warmup Iteration  14: 246542.925 ops/s
# Warmup Iteration  15: 261938.173 ops/s
# Warmup Iteration  16: 244919.280 ops/s
# Warmup Iteration  17: 253565.610 ops/s
# Warmup Iteration  18: 266284.733 ops/s
# Warmup Iteration  19: 257308.065 ops/s
# Warmup Iteration  20: 266898.444 ops/s
# Warmup Iteration  21: 253652.999 ops/s
# Warmup Iteration  22: 261790.328 ops/s
# Warmup Iteration  23: 254351.127 ops/s
# Warmup Iteration  24: 255858.628 ops/s
# Warmup Iteration  25: 269168.468 ops/s
# Warmup Iteration  26: 254192.392 ops/s
# Warmup Iteration  27: 254605.283 ops/s
# Warmup Iteration  28: 268564.590 ops/s
# Warmup Iteration  29: 272267.232 ops/s
# Warmup Iteration  30: 252335.224 ops/s
Iteration   1: 267055.559 ops/s
Iteration   2: 259551.923 ops/s
Iteration   3: 261406.751 ops/s
Iteration   4: 264467.493 ops/s
Iteration   5: 255567.023 ops/s
Iteration   6: 258570.072 ops/s
Iteration   7: 255257.734 ops/s
Iteration   8: 259345.197 ops/s
Iteration   9: 269182.291 ops/s
Iteration  10: 250600.252 ops/s
Iteration  11: 264529.007 ops/s
Iteration  12: 258099.463 ops/s
Iteration  13: 267143.695 ops/s
Iteration  14: 257470.533 ops/s
Iteration  15: 217769.677 ops/s
Iteration  16: 251207.107 ops/s
Iteration  17: 262035.516 ops/s
Iteration  18: 268782.239 ops/s
Iteration  19: 255080.993 ops/s
Iteration  20: 264194.528 ops/s
Iteration  21: 266991.864 ops/s
Iteration  22: 255466.293 ops/s
Iteration  23: 261467.169 ops/s
Iteration  24: 254530.624 ops/s
Iteration  25: 260590.310 ops/s
Iteration  26: 263184.330 ops/s
Iteration  27: 258061.521 ops/s
Iteration  28: 264961.204 ops/s
Iteration  29: 252210.881 ops/s
Iteration  30: 256279.900 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableFromSupplierTest._Benchmark.benchmark_disposedOnCallThrows":
  258702.038 ±(99.9%) 6226.639 ops/s [Average]
  (min, avg, max) = (217769.677, 258702.038, 269182.291), stdev = 9319.741
  CI (99.9%): [252475.399, 264928.677] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableFromSupplierTest._Benchmark.benchmark_disposedOnCallThrows  thrpt   30  258702.038 ± 6226.639  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 22520.840 ops/s
# Warmup Iteration   2: 84370.548 ops/s
# Warmup Iteration   3: 172290.218 ops/s
# Warmup Iteration   4: 159086.981 ops/s
# Warmup Iteration   5: 166450.186 ops/s
# Warmup Iteration   6: 169586.889 ops/s
# Warmup Iteration   7: 165731.348 ops/s
# Warmup Iteration   8: 172452.421 ops/s
# Warmup Iteration   9: 165106.985 ops/s
# Warmup Iteration  10: 163033.430 ops/s
# Warmup Iteration  11: 164647.345 ops/s
# Warmup Iteration  12: 170789.117 ops/s
# Warmup Iteration  13: 158089.678 ops/s
# Warmup Iteration  14: 170387.651 ops/s
# Warmup Iteration  15: 161198.925 ops/s
# Warmup Iteration  16: 165162.862 ops/s
# Warmup Iteration  17: 182950.002 ops/s
# Warmup Iteration  18: 176125.819 ops/s
# Warmup Iteration  19: 172382.105 ops/s
# Warmup Iteration  20: 175961.565 ops/s
# Warmup Iteration  21: 171128.140 ops/s
# Warmup Iteration  22: 173828.464 ops/s
# Warmup Iteration  23: 182185.905 ops/s
# Warmup Iteration  24: 172912.303 ops/s
# Warmup Iteration  25: 175122.812 ops/s
# Warmup Iteration  26: 175650.989 ops/s
# Warmup Iteration  27: 178599.404 ops/s
# Warmup Iteration  28: 172054.603 ops/s
# Warmup Iteration  29: 175115.575 ops/s
# Warmup Iteration  30: 182198.233 ops/s
Iteration   1: 176134.087 ops/s
Iteration   2: 178380.320 ops/s
Iteration   3: 184136.242 ops/s
Iteration   4: 177823.563 ops/s
Iteration   5: 165422.879 ops/s
Iteration   6: 183377.684 ops/s
Iteration   7: 174099.690 ops/s
Iteration   8: 177605.340 ops/s
Iteration   9: 176236.879 ops/s
Iteration  10: 176253.676 ops/s
Iteration  11: 181688.451 ops/s
Iteration  12: 184611.820 ops/s
Iteration  13: 178686.073 ops/s
Iteration  14: 179983.567 ops/s
Iteration  15: 171299.571 ops/s
Iteration  16: 175162.156 ops/s
Iteration  17: 181881.476 ops/s
Iteration  18: 173959.229 ops/s
Iteration  19: 181629.116 ops/s
Iteration  20: 183826.275 ops/s
Iteration  21: 170633.514 ops/s
Iteration  22: 182329.388 ops/s
Iteration  23: 171422.013 ops/s
Iteration  24: 184642.557 ops/s
Iteration  25: 166734.231 ops/s
Iteration  26: 174050.028 ops/s
Iteration  27: 184189.241 ops/s
Iteration  28: 176439.245 ops/s
Iteration  29: 178510.683 ops/s
Iteration  30: 176079.440 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSource":
  177574.281 ±(99.9%) 3476.717 ops/s [Average]
  (min, avg, max) = (165422.879, 177574.281, 184642.557), stdev = 5203.787
  CI (99.9%): [174097.564, 181050.998] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableTimeoutWithSelectorTest._Benchmark.benchmark_badInnerSource  thrpt   30  177574.281 ± 3476.717  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_connectWithNoSubscriber$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_connectWithNoSubscriber

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 165057.647 ops/s
# Warmup Iteration   2: 389830.859 ops/s
# Warmup Iteration   3: 906388.538 ops/s
# Warmup Iteration   4: 1005066.284 ops/s
# Warmup Iteration   5: 1177833.142 ops/s
# Warmup Iteration   6: 1115566.770 ops/s
# Warmup Iteration   7: 1141497.831 ops/s
# Warmup Iteration   8: 1137460.271 ops/s
# Warmup Iteration   9: 1181840.624 ops/s
# Warmup Iteration  10: 1114831.308 ops/s
# Warmup Iteration  11: 1125010.085 ops/s
# Warmup Iteration  12: 1181851.292 ops/s
# Warmup Iteration  13: 1164985.166 ops/s
# Warmup Iteration  14: 1157972.900 ops/s
# Warmup Iteration  15: 1111396.101 ops/s
# Warmup Iteration  16: 1175629.033 ops/s
# Warmup Iteration  17: 1151931.429 ops/s
# Warmup Iteration  18: 1166878.805 ops/s
# Warmup Iteration  19: 1129251.568 ops/s
# Warmup Iteration  20: 1150263.616 ops/s
# Warmup Iteration  21: 1127834.926 ops/s
# Warmup Iteration  22: 1153692.904 ops/s
# Warmup Iteration  23: 1141486.386 ops/s
# Warmup Iteration  24: 1148227.299 ops/s
# Warmup Iteration  25: 1163244.105 ops/s
# Warmup Iteration  26: 1136908.022 ops/s
# Warmup Iteration  27: 1131508.329 ops/s
# Warmup Iteration  28: 1119418.350 ops/s
# Warmup Iteration  29: 1175076.223 ops/s
# Warmup Iteration  30: 1132194.119 ops/s
Iteration   1: 1151015.851 ops/s
Iteration   2: 1141880.375 ops/s
Iteration   3: 1114190.032 ops/s
Iteration   4: 1185205.753 ops/s
Iteration   5: 1111531.730 ops/s
Iteration   6: 1141844.604 ops/s
Iteration   7: 1137902.117 ops/s
Iteration   8: 1189510.442 ops/s
Iteration   9: 1090163.682 ops/s
Iteration  10: 980373.503 ops/s
Iteration  11: 1094073.681 ops/s
Iteration  12: 1172882.760 ops/s
Iteration  13: 1142000.833 ops/s
Iteration  14: 1155819.895 ops/s
Iteration  15: 1110416.904 ops/s
Iteration  16: 1109305.897 ops/s
Iteration  17: 1114040.395 ops/s
Iteration  18: 1197029.771 ops/s
Iteration  19: 1106136.413 ops/s
Iteration  20: 1158854.710 ops/s
Iteration  21: 1105803.259 ops/s
Iteration  22: 1154001.716 ops/s
Iteration  23: 1165547.210 ops/s
Iteration  24: 1131632.086 ops/s
Iteration  25: 1136524.862 ops/s
Iteration  26: 1128451.365 ops/s
Iteration  27: 1145624.944 ops/s
Iteration  28: 1139664.830 ops/s
Iteration  29: 1131014.660 ops/s
Iteration  30: 1184895.584 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservablePublishTest._Benchmark.benchmark_connectWithNoSubscriber":
  1134244.662 ±(99.9%) 27217.309 ops/s [Average]
  (min, avg, max) = (980373.503, 1134244.662, 1197029.771), stdev = 40737.590
  CI (99.9%): [1107027.353, 1161461.972] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt        Score       Error  Units
ObservablePublishTest._Benchmark.benchmark_connectWithNoSubscriber  thrpt   30  1134244.662 ± 27217.309  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_shouldDisposeInnerObservable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_shouldDisposeInnerObservable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 45423.199 ops/s
# Warmup Iteration   2: 341823.194 ops/s
# Warmup Iteration   3: 398607.075 ops/s
# Warmup Iteration   4: 467710.126 ops/s
# Warmup Iteration   5: 459457.521 ops/s
# Warmup Iteration   6: 464554.247 ops/s
# Warmup Iteration   7: 478413.639 ops/s
# Warmup Iteration   8: 417845.884 ops/s
# Warmup Iteration   9: 470762.363 ops/s
# Warmup Iteration  10: 461462.043 ops/s
# Warmup Iteration  11: 463896.176 ops/s
# Warmup Iteration  12: 462739.953 ops/s
# Warmup Iteration  13: 476308.348 ops/s
# Warmup Iteration  14: 466824.861 ops/s
# Warmup Iteration  15: 453973.283 ops/s
# Warmup Iteration  16: 492411.444 ops/s
# Warmup Iteration  17: 460413.865 ops/s
# Warmup Iteration  18: 501576.664 ops/s
# Warmup Iteration  19: 474956.141 ops/s
# Warmup Iteration  20: 484425.327 ops/s
# Warmup Iteration  21: 512569.034 ops/s
# Warmup Iteration  22: 479829.318 ops/s
# Warmup Iteration  23: 479405.839 ops/s
# Warmup Iteration  24: 492555.169 ops/s
# Warmup Iteration  25: 476384.718 ops/s
# Warmup Iteration  26: 498074.094 ops/s
# Warmup Iteration  27: 485900.594 ops/s
# Warmup Iteration  28: 480254.591 ops/s
# Warmup Iteration  29: 511660.158 ops/s
# Warmup Iteration  30: 485552.695 ops/s
Iteration   1: 478340.395 ops/s
Iteration   2: 489777.221 ops/s
Iteration   3: 484832.607 ops/s
Iteration   4: 502566.171 ops/s
Iteration   5: 493190.390 ops/s
Iteration   6: 476074.801 ops/s
Iteration   7: 483369.617 ops/s
Iteration   8: 478308.410 ops/s
Iteration   9: 496345.312 ops/s
Iteration  10: 483038.746 ops/s
Iteration  11: 492965.511 ops/s
Iteration  12: 480740.875 ops/s
Iteration  13: 484032.909 ops/s
Iteration  14: 494475.262 ops/s
Iteration  15: 477692.380 ops/s
Iteration  16: 489666.174 ops/s
Iteration  17: 497442.847 ops/s
Iteration  18: 470774.165 ops/s
Iteration  19: 502587.704 ops/s
Iteration  20: 471654.018 ops/s
Iteration  21: 493080.023 ops/s
Iteration  22: 483631.682 ops/s
Iteration  23: 485286.832 ops/s
Iteration  24: 497874.295 ops/s
Iteration  25: 470435.219 ops/s
Iteration  26: 501635.615 ops/s
Iteration  27: 486278.878 ops/s
Iteration  28: 482943.508 ops/s
Iteration  29: 498620.377 ops/s
Iteration  30: 473148.237 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableRetryTest._Benchmark.benchmark_shouldDisposeInnerObservable":
  486693.673 ±(99.9%) 6520.563 ops/s [Average]
  (min, avg, max) = (470435.219, 486693.673, 502587.704), stdev = 9759.672
  CI (99.9%): [480173.110, 493214.236] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score      Error  Units
ObservableRetryTest._Benchmark.benchmark_shouldDisposeInnerObservable  thrpt   30  486693.673 ± 6520.563  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerDisposedOnMainError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerDisposedOnMainError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.738 ops/s
# Warmup Iteration   2: 30631.434 ops/s
# Warmup Iteration   3: 83264.114 ops/s
# Warmup Iteration   4: 114487.171 ops/s
# Warmup Iteration   5: 217937.823 ops/s
# Warmup Iteration   6: 254558.095 ops/s
# Warmup Iteration   7: 296025.180 ops/s
# Warmup Iteration   8: 302482.930 ops/s
# Warmup Iteration   9: 302180.906 ops/s
# Warmup Iteration  10: 300700.626 ops/s
# Warmup Iteration  11: 296865.597 ops/s
# Warmup Iteration  12: 298640.344 ops/s
# Warmup Iteration  13: 304372.896 ops/s
# Warmup Iteration  14: 293135.143 ops/s
# Warmup Iteration  15: 305410.781 ops/s
# Warmup Iteration  16: 294426.832 ops/s
# Warmup Iteration  17: 303753.728 ops/s
# Warmup Iteration  18: 319700.680 ops/s
# Warmup Iteration  19: 283805.384 ops/s
# Warmup Iteration  20: 298443.391 ops/s
# Warmup Iteration  21: 318015.554 ops/s
# Warmup Iteration  22: 292800.440 ops/s
# Warmup Iteration  23: 311833.374 ops/s
# Warmup Iteration  24: 298525.085 ops/s
# Warmup Iteration  25: 310289.842 ops/s
# Warmup Iteration  26: 297283.708 ops/s
# Warmup Iteration  27: 293749.263 ops/s
# Warmup Iteration  28: 312590.196 ops/s
# Warmup Iteration  29: 295450.733 ops/s
# Warmup Iteration  30: 306805.903 ops/s
Iteration   1: 291009.091 ops/s
Iteration   2: 297026.178 ops/s
Iteration   3: 308055.124 ops/s
Iteration   4: 240628.424 ops/s
Iteration   5: 297648.889 ops/s
Iteration   6: 295393.757 ops/s
Iteration   7: 308707.945 ops/s
Iteration   8: 302406.483 ops/s
Iteration   9: 299000.541 ops/s
Iteration  10: 296318.480 ops/s
Iteration  11: 296991.250 ops/s
Iteration  12: 291817.714 ops/s
Iteration  13: 310064.999 ops/s
Iteration  14: 314991.484 ops/s
Iteration  15: 308942.422 ops/s
Iteration  16: 290723.031 ops/s
Iteration  17: 312287.347 ops/s
Iteration  18: 291266.693 ops/s
Iteration  19: 311009.170 ops/s
Iteration  20: 287671.660 ops/s
Iteration  21: 297276.798 ops/s
Iteration  22: 312816.653 ops/s
Iteration  23: 288064.814 ops/s
Iteration  24: 310819.993 ops/s
Iteration  25: 295456.753 ops/s
Iteration  26: 309394.128 ops/s
Iteration  27: 295136.451 ops/s
Iteration  28: 300789.288 ops/s
Iteration  29: 310388.452 ops/s
Iteration  30: 289907.914 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableSwitchTest._Benchmark.benchmark_innerDisposedOnMainError":
  298733.731 ±(99.9%) 9281.741 ops/s [Average]
  (min, avg, max) = (240628.424, 298733.731, 314991.484), stdev = 13892.474
  CI (99.9%): [289451.990, 308015.472] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
ObservableSwitchTest._Benchmark.benchmark_innerDisposedOnMainError  thrpt   30  298733.731 ± 9281.741  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_innerError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_innerError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 158447.371 ops/s
# Warmup Iteration   2: 550544.236 ops/s
# Warmup Iteration   3: 627911.365 ops/s
# Warmup Iteration   4: 628128.406 ops/s
# Warmup Iteration   5: 594305.387 ops/s
# Warmup Iteration   6: 667774.706 ops/s
# Warmup Iteration   7: 673449.938 ops/s
# Warmup Iteration   8: 700821.564 ops/s
# Warmup Iteration   9: 678080.216 ops/s
# Warmup Iteration  10: 675274.441 ops/s
# Warmup Iteration  11: 691950.699 ops/s
# Warmup Iteration  12: 694116.345 ops/s
# Warmup Iteration  13: 660108.775 ops/s
# Warmup Iteration  14: 713963.879 ops/s
# Warmup Iteration  15: 687948.017 ops/s
# Warmup Iteration  16: 673598.827 ops/s
# Warmup Iteration  17: 719472.592 ops/s
# Warmup Iteration  18: 731352.527 ops/s
# Warmup Iteration  19: 707493.425 ops/s
# Warmup Iteration  20: 734204.477 ops/s
# Warmup Iteration  21: 730867.030 ops/s
# Warmup Iteration  22: 708964.519 ops/s
# Warmup Iteration  23: 719837.780 ops/s
# Warmup Iteration  24: 701252.999 ops/s
# Warmup Iteration  25: 731543.686 ops/s
# Warmup Iteration  26: 716730.926 ops/s
# Warmup Iteration  27: 732514.438 ops/s
# Warmup Iteration  28: 706792.894 ops/s
# Warmup Iteration  29: 738134.460 ops/s
# Warmup Iteration  30: 703077.803 ops/s
Iteration   1: 727236.342 ops/s
Iteration   2: 714809.238 ops/s
Iteration   3: 729657.538 ops/s
Iteration   4: 728888.217 ops/s
Iteration   5: 717203.190 ops/s
Iteration   6: 691540.845 ops/s
Iteration   7: 727021.206 ops/s
Iteration   8: 711010.599 ops/s
Iteration   9: 716630.274 ops/s
Iteration  10: 748469.806 ops/s
Iteration  11: 700888.942 ops/s
Iteration  12: 731127.976 ops/s
Iteration  13: 713812.718 ops/s
Iteration  14: 715192.128 ops/s
Iteration  15: 760407.848 ops/s
Iteration  16: 706755.377 ops/s
Iteration  17: 711730.547 ops/s
Iteration  18: 716735.357 ops/s
Iteration  19: 760939.537 ops/s
Iteration  20: 690278.167 ops/s
Iteration  21: 753581.993 ops/s
Iteration  22: 717978.781 ops/s
Iteration  23: 714599.378 ops/s
Iteration  24: 729038.305 ops/s
Iteration  25: 714646.506 ops/s
Iteration  26: 735667.033 ops/s
Iteration  27: 722038.904 ops/s
Iteration  28: 703879.290 ops/s
Iteration  29: 710862.071 ops/s
Iteration  30: 738728.895 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_innerError":
  722045.233 ±(99.9%) 11840.351 ops/s [Average]
  (min, avg, max) = (690278.167, 722045.233, 760939.537), stdev = 17722.082
  CI (99.9%): [710204.882, 733885.585] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_innerError  thrpt   30  722045.233 ± 11840.351  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarSource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarSource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 554945.836 ops/s
# Warmup Iteration   2: 2067834.474 ops/s
# Warmup Iteration   3: 2884876.776 ops/s
# Warmup Iteration   4: 3558923.551 ops/s
# Warmup Iteration   5: 3593028.045 ops/s
# Warmup Iteration   6: 3472890.598 ops/s
# Warmup Iteration   7: 3706478.515 ops/s
# Warmup Iteration   8: 3480238.107 ops/s
# Warmup Iteration   9: 3606809.786 ops/s
# Warmup Iteration  10: 3466264.513 ops/s
# Warmup Iteration  11: 3642463.461 ops/s
# Warmup Iteration  12: 3609183.398 ops/s
# Warmup Iteration  13: 3415695.203 ops/s
# Warmup Iteration  14: 3661947.113 ops/s
# Warmup Iteration  15: 3591015.778 ops/s
# Warmup Iteration  16: 3598941.221 ops/s
# Warmup Iteration  17: 3517754.824 ops/s
# Warmup Iteration  18: 3638669.612 ops/s
# Warmup Iteration  19: 3726154.256 ops/s
# Warmup Iteration  20: 3372790.295 ops/s
# Warmup Iteration  21: 3575284.110 ops/s
# Warmup Iteration  22: 3608768.640 ops/s
# Warmup Iteration  23: 3540685.694 ops/s
# Warmup Iteration  24: 3403314.519 ops/s
# Warmup Iteration  25: 3563400.946 ops/s
# Warmup Iteration  26: 3726823.296 ops/s
# Warmup Iteration  27: 3462999.409 ops/s
# Warmup Iteration  28: 2878858.069 ops/s
# Warmup Iteration  29: 3417750.410 ops/s
# Warmup Iteration  30: 3389277.500 ops/s
Iteration   1: 3554753.057 ops/s
Iteration   2: 3561381.203 ops/s
Iteration   3: 3665566.331 ops/s
Iteration   4: 3528200.981 ops/s
Iteration   5: 3644777.778 ops/s
Iteration   6: 3542871.773 ops/s
Iteration   7: 3527723.135 ops/s
Iteration   8: 3705412.248 ops/s
Iteration   9: 3582752.565 ops/s
Iteration  10: 3533345.907 ops/s
Iteration  11: 3589868.994 ops/s
Iteration  12: 3475248.138 ops/s
Iteration  13: 3772946.032 ops/s
Iteration  14: 3556323.106 ops/s
Iteration  15: 3502722.815 ops/s
Iteration  16: 3719344.428 ops/s
Iteration  17: 3499736.876 ops/s
Iteration  18: 3683197.791 ops/s
Iteration  19: 3490428.193 ops/s
Iteration  20: 3590770.394 ops/s
Iteration  21: 3584469.352 ops/s
Iteration  22: 3444034.980 ops/s
Iteration  23: 3685471.217 ops/s
Iteration  24: 3571915.999 ops/s
Iteration  25: 3489605.500 ops/s
Iteration  26: 3746470.352 ops/s
Iteration  27: 3726608.864 ops/s
Iteration  28: 3446286.491 ops/s
Iteration  29: 3696453.786 ops/s
Iteration  30: 3450890.029 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarSource":
  3585652.611 ±(99.9%) 64575.187 ops/s [Average]
  (min, avg, max) = (3444034.980, 3585652.611, 3772946.032), stdev = 96653.107
  CI (99.9%): [3521077.424, 3650227.797] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt        Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarSource  thrpt   30  3585652.611 ± 64575.187  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1584907.559 ops/s
# Warmup Iteration   2: 4919583.545 ops/s
# Warmup Iteration   3: 5636451.821 ops/s
# Warmup Iteration   4: 5662508.460 ops/s
# Warmup Iteration   5: 5834843.855 ops/s
# Warmup Iteration   6: 5511517.737 ops/s
# Warmup Iteration   7: 5051121.742 ops/s
# Warmup Iteration   8: 5750326.086 ops/s
# Warmup Iteration   9: 5625317.173 ops/s
# Warmup Iteration  10: 5729672.975 ops/s
# Warmup Iteration  11: 5964435.137 ops/s
# Warmup Iteration  12: 5780836.390 ops/s
# Warmup Iteration  13: 5504813.036 ops/s
# Warmup Iteration  14: 5990796.208 ops/s
# Warmup Iteration  15: 5755494.479 ops/s
# Warmup Iteration  16: 5807343.073 ops/s
# Warmup Iteration  17: 5925127.566 ops/s
# Warmup Iteration  18: 5693516.059 ops/s
# Warmup Iteration  19: 5684919.129 ops/s
# Warmup Iteration  20: 5985873.978 ops/s
# Warmup Iteration  21: 5563344.402 ops/s
# Warmup Iteration  22: 6060855.965 ops/s
# Warmup Iteration  23: 6032650.333 ops/s
# Warmup Iteration  24: 5735712.976 ops/s
# Warmup Iteration  25: 5657666.115 ops/s
# Warmup Iteration  26: 5809374.308 ops/s
# Warmup Iteration  27: 5601086.860 ops/s
# Warmup Iteration  28: 5524670.984 ops/s
# Warmup Iteration  29: 5931979.464 ops/s
# Warmup Iteration  30: 5619616.727 ops/s
Iteration   1: 5946114.814 ops/s
Iteration   2: 5720082.409 ops/s
Iteration   3: 5772335.792 ops/s
Iteration   4: 5702437.515 ops/s
Iteration   5: 5656933.180 ops/s
Iteration   6: 5811729.604 ops/s
Iteration   7: 5817191.937 ops/s
Iteration   8: 5863708.935 ops/s
Iteration   9: 5828620.446 ops/s
Iteration  10: 5658439.624 ops/s
Iteration  11: 5691944.261 ops/s
Iteration  12: 5941473.271 ops/s
Iteration  13: 5641905.964 ops/s
Iteration  14: 5860547.365 ops/s
Iteration  15: 5644037.641 ops/s
Iteration  16: 5830647.046 ops/s
Iteration  17: 5515769.098 ops/s
Iteration  18: 5734318.113 ops/s
Iteration  19: 5772287.701 ops/s
Iteration  20: 5865183.908 ops/s
Iteration  21: 5790355.721 ops/s
Iteration  22: 5752112.392 ops/s
Iteration  23: 5820148.971 ops/s
Iteration  24: 5736231.831 ops/s
Iteration  25: 5669641.420 ops/s
Iteration  26: 5948481.085 ops/s
Iteration  27: 5732803.994 ops/s
Iteration  28: 5562792.052 ops/s
Iteration  29: 5800502.076 ops/s
Iteration  30: 5620204.763 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperCancels":
  5756966.098 ±(99.9%) 72662.689 ops/s [Average]
  (min, avg, max) = (5515769.098, 5756966.098, 5948481.085), stdev = 108758.101
  CI (99.9%): [5684303.408, 5829628.787] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt        Score       Error  Units
SingleFlatMapBiSelectorTest._Benchmark.benchmark_mapperCancels  thrpt   30  5756966.098 ± 72662.689  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 707443.042 ops/s
# Warmup Iteration   2: 3054650.748 ops/s
# Warmup Iteration   3: 4660792.261 ops/s
# Warmup Iteration   4: 4609871.227 ops/s
# Warmup Iteration   5: 4567400.135 ops/s
# Warmup Iteration   6: 4092845.272 ops/s
# Warmup Iteration   7: 4199685.232 ops/s
# Warmup Iteration   8: 4781449.899 ops/s
# Warmup Iteration   9: 4590926.546 ops/s
# Warmup Iteration  10: 4436635.529 ops/s
# Warmup Iteration  11: 4743388.982 ops/s
# Warmup Iteration  12: 4458163.552 ops/s
# Warmup Iteration  13: 4501012.029 ops/s
# Warmup Iteration  14: 4802431.258 ops/s
# Warmup Iteration  15: 4529042.530 ops/s
# Warmup Iteration  16: 4616831.753 ops/s
# Warmup Iteration  17: 4464269.983 ops/s
# Warmup Iteration  18: 4716792.035 ops/s
# Warmup Iteration  19: 4682598.940 ops/s
# Warmup Iteration  20: 4522304.623 ops/s
# Warmup Iteration  21: 4722756.839 ops/s
# Warmup Iteration  22: 4530977.029 ops/s
# Warmup Iteration  23: 3936345.070 ops/s
# Warmup Iteration  24: 4598828.705 ops/s
# Warmup Iteration  25: 4434310.465 ops/s
# Warmup Iteration  26: 4704387.997 ops/s
# Warmup Iteration  27: 4511110.857 ops/s
# Warmup Iteration  28: 4483274.438 ops/s
# Warmup Iteration  29: 4854187.246 ops/s
# Warmup Iteration  30: 4440638.492 ops/s
Iteration   1: 4708832.684 ops/s
Iteration   2: 4474455.508 ops/s
Iteration   3: 4497510.345 ops/s
Iteration   4: 4711475.628 ops/s
Iteration   5: 4577254.950 ops/s
Iteration   6: 4588094.789 ops/s
Iteration   7: 4826475.560 ops/s
Iteration   8: 4408299.038 ops/s
Iteration   9: 4566451.135 ops/s
Iteration  10: 4793115.028 ops/s
Iteration  11: 4476686.823 ops/s
Iteration  12: 4490324.689 ops/s
Iteration  13: 4695360.710 ops/s
Iteration  14: 4548615.613 ops/s
Iteration  15: 4581903.174 ops/s
Iteration  16: 4597133.316 ops/s
Iteration  17: 4689896.506 ops/s
Iteration  18: 4625922.313 ops/s
Iteration  19: 4670996.687 ops/s
Iteration  20: 4652716.517 ops/s
Iteration  21: 4718906.836 ops/s
Iteration  22: 4410523.764 ops/s
Iteration  23: 4884866.890 ops/s
Iteration  24: 4542301.910 ops/s
Iteration  25: 4466627.179 ops/s
Iteration  26: 4633509.027 ops/s
Iteration  27: 4727340.303 ops/s
Iteration  28: 4693159.567 ops/s
Iteration  29: 4514508.167 ops/s
Iteration  30: 4804243.590 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryDispose":
  4619250.275 ±(99.9%) 83203.774 ops/s [Average]
  (min, avg, max) = (4408299.038, 4619250.275, 4884866.890), stdev = 124535.502
  CI (99.9%): [4536046.501, 4702454.049] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt        Score       Error  Units
ObservableWindowWithObservableTest._Benchmark.benchmark_boundaryDispose  thrpt   30  4619250.275 ± 83203.774  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2776760.482 ops/s
# Warmup Iteration   2: 5551459.731 ops/s
# Warmup Iteration   3: 7323443.329 ops/s
# Warmup Iteration   4: 7451485.806 ops/s
# Warmup Iteration   5: 7648057.672 ops/s
# Warmup Iteration   6: 7542208.066 ops/s
# Warmup Iteration   7: 7201464.145 ops/s
# Warmup Iteration   8: 7723172.727 ops/s
# Warmup Iteration   9: 7419819.655 ops/s
# Warmup Iteration  10: 7582883.385 ops/s
# Warmup Iteration  11: 7505092.811 ops/s
# Warmup Iteration  12: 7454423.552 ops/s
# Warmup Iteration  13: 7643813.643 ops/s
# Warmup Iteration  14: 7475264.259 ops/s
# Warmup Iteration  15: 7414486.639 ops/s
# Warmup Iteration  16: 7654515.472 ops/s
# Warmup Iteration  17: 7579901.395 ops/s
# Warmup Iteration  18: 7326921.908 ops/s
# Warmup Iteration  19: 7674216.896 ops/s
# Warmup Iteration  20: 7266335.349 ops/s
# Warmup Iteration  21: 7514028.784 ops/s
# Warmup Iteration  22: 7833120.248 ops/s
# Warmup Iteration  23: 7752188.674 ops/s
# Warmup Iteration  24: 7688847.294 ops/s
# Warmup Iteration  25: 7368334.095 ops/s
# Warmup Iteration  26: 7465624.767 ops/s
# Warmup Iteration  27: 7580053.207 ops/s
# Warmup Iteration  28: 7749213.329 ops/s
# Warmup Iteration  29: 7378809.498 ops/s
# Warmup Iteration  30: 7643514.686 ops/s
Iteration   1: 7758783.142 ops/s
Iteration   2: 7407267.605 ops/s
Iteration   3: 7661728.821 ops/s
Iteration   4: 7460926.584 ops/s
Iteration   5: 7475250.150 ops/s
Iteration   6: 7623790.473 ops/s
Iteration   7: 7394264.835 ops/s
Iteration   8: 7727483.364 ops/s
Iteration   9: 7968857.794 ops/s
Iteration  10: 7263618.951 ops/s
Iteration  11: 7664537.871 ops/s
Iteration  12: 7335956.259 ops/s
Iteration  13: 7672507.886 ops/s
Iteration  14: 7599246.508 ops/s
Iteration  15: 7413003.740 ops/s
Iteration  16: 7720076.020 ops/s
Iteration  17: 7679557.699 ops/s
Iteration  18: 7493411.581 ops/s
Iteration  19: 7706792.748 ops/s
Iteration  20: 7583663.984 ops/s
Iteration  21: 7658087.585 ops/s
Iteration  22: 7758268.388 ops/s
Iteration  23: 7237873.726 ops/s
Iteration  24: 7724697.844 ops/s
Iteration  25: 7472182.395 ops/s
Iteration  26: 7580998.564 ops/s
Iteration  27: 7968436.549 ops/s
Iteration  28: 7798175.252 ops/s
Iteration  29: 7725990.279 ops/s
Iteration  30: 7216806.436 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleDoOnTest._Benchmark.benchmark_doOnDispose":
  7591741.434 ±(99.9%) 129813.356 ops/s [Average]
  (min, avg, max) = (7216806.436, 7591741.434, 7968857.794), stdev = 194298.535
  CI (99.9%): [7461928.078, 7721554.791] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
SingleDoOnTest._Benchmark.benchmark_doOnDispose  thrpt   30  7591741.434 ± 129813.356  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_completableFutureCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_completableFutureCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 412253.386 ops/s
# Warmup Iteration   2: 564939.930 ops/s
# Warmup Iteration   3: 707808.733 ops/s
# Warmup Iteration   4: 623293.910 ops/s
# Warmup Iteration   5: 695969.437 ops/s
# Warmup Iteration   6: 621122.476 ops/s
# Warmup Iteration   7: 691863.232 ops/s
# Warmup Iteration   8: 720597.018 ops/s
# Warmup Iteration   9: 695745.891 ops/s
# Warmup Iteration  10: 725202.049 ops/s
# Warmup Iteration  11: 723433.875 ops/s
# Warmup Iteration  12: 679187.767 ops/s
# Warmup Iteration  13: 699527.864 ops/s
# Warmup Iteration  14: 744826.218 ops/s
# Warmup Iteration  15: 716369.267 ops/s
# Warmup Iteration  16: 682091.055 ops/s
# Warmup Iteration  17: 636493.368 ops/s
# Warmup Iteration  18: 766589.604 ops/s
# Warmup Iteration  19: 718754.904 ops/s
# Warmup Iteration  20: 748612.188 ops/s
# Warmup Iteration  21: 741495.245 ops/s
# Warmup Iteration  22: 729507.213 ops/s
# Warmup Iteration  23: 758024.688 ops/s
# Warmup Iteration  24: 745625.904 ops/s
# Warmup Iteration  25: 730402.911 ops/s
# Warmup Iteration  26: 765278.570 ops/s
# Warmup Iteration  27: 729882.373 ops/s
# Warmup Iteration  28: 744039.131 ops/s
# Warmup Iteration  29: 771739.180 ops/s
# Warmup Iteration  30: 718108.327 ops/s
Iteration   1: 783686.499 ops/s
Iteration   2: 727055.584 ops/s
Iteration   3: 743877.216 ops/s
Iteration   4: 768174.721 ops/s
Iteration   5: 729135.352 ops/s
Iteration   6: 766301.474 ops/s
Iteration   7: 738702.023 ops/s
Iteration   8: 750301.594 ops/s
Iteration   9: 764608.401 ops/s
Iteration  10: 750127.677 ops/s
Iteration  11: 766816.187 ops/s
Iteration  12: 695972.869 ops/s
Iteration  13: 749780.695 ops/s
Iteration  14: 751997.609 ops/s
Iteration  15: 735742.924 ops/s
Iteration  16: 772772.189 ops/s
Iteration  17: 719381.130 ops/s
Iteration  18: 779604.516 ops/s
Iteration  19: 765050.874 ops/s
Iteration  20: 740359.101 ops/s
Iteration  21: 777525.004 ops/s
Iteration  22: 772084.683 ops/s
Iteration  23: 734115.423 ops/s
Iteration  24: 751682.933 ops/s
Iteration  25: 722390.223 ops/s
Iteration  26: 749157.749 ops/s
Iteration  27: 748712.118 ops/s
Iteration  28: 698209.269 ops/s
Iteration  29: 751119.351 ops/s
Iteration  30: 727154.590 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_completableFutureCancels":
  747719.999 ±(99.9%) 14912.102 ops/s [Average]
  (min, avg, max) = (695972.869, 747719.999, 783686.499), stdev = 22319.734
  CI (99.9%): [732807.897, 762632.101] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score       Error  Units
SingleToCompletionStageTest._Benchmark.benchmark_completableFutureCancels  thrpt   30  747719.999 ± 14912.102  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2498957.341 ops/s
# Warmup Iteration   2: 4959810.771 ops/s
# Warmup Iteration   3: 5570760.478 ops/s
# Warmup Iteration   4: 6052338.208 ops/s
# Warmup Iteration   5: 6466257.969 ops/s
# Warmup Iteration   6: 6614626.768 ops/s
# Warmup Iteration   7: 6350536.518 ops/s
# Warmup Iteration   8: 6342536.694 ops/s
# Warmup Iteration   9: 6438725.542 ops/s
# Warmup Iteration  10: 6121029.438 ops/s
# Warmup Iteration  11: 6140941.471 ops/s
# Warmup Iteration  12: 6560321.443 ops/s
# Warmup Iteration  13: 6079031.977 ops/s
# Warmup Iteration  14: 6346512.406 ops/s
# Warmup Iteration  15: 6469215.296 ops/s
# Warmup Iteration  16: 6038931.698 ops/s
# Warmup Iteration  17: 6324693.458 ops/s
# Warmup Iteration  18: 6200264.197 ops/s
# Warmup Iteration  19: 6499628.426 ops/s
# Warmup Iteration  20: 6557709.592 ops/s
# Warmup Iteration  21: 5966946.131 ops/s
# Warmup Iteration  22: 6480862.276 ops/s
# Warmup Iteration  23: 6290491.845 ops/s
# Warmup Iteration  24: 6197493.111 ops/s
# Warmup Iteration  25: 6543529.365 ops/s
# Warmup Iteration  26: 6234983.016 ops/s
# Warmup Iteration  27: 6441358.110 ops/s
# Warmup Iteration  28: 6258699.920 ops/s
# Warmup Iteration  29: 6233090.547 ops/s
# Warmup Iteration  30: 6606400.586 ops/s
Iteration   1: 6229217.425 ops/s
Iteration   2: 6222741.456 ops/s
Iteration   3: 6612421.282 ops/s
Iteration   4: 6341423.541 ops/s
Iteration   5: 6266170.227 ops/s
Iteration   6: 6542167.909 ops/s
Iteration   7: 6381026.383 ops/s
Iteration   8: 6365467.715 ops/s
Iteration   9: 6591729.996 ops/s
Iteration  10: 6254963.037 ops/s
Iteration  11: 6313497.746 ops/s
Iteration  12: 6472870.945 ops/s
Iteration  13: 6342673.834 ops/s
Iteration  14: 6202890.578 ops/s
Iteration  15: 6408479.984 ops/s
Iteration  16: 6362311.900 ops/s
Iteration  17: 6338438.070 ops/s
Iteration  18: 6499459.778 ops/s
Iteration  19: 6282390.020 ops/s
Iteration  20: 6462922.437 ops/s
Iteration  21: 6244161.035 ops/s
Iteration  22: 6675491.563 ops/s
Iteration  23: 6311281.166 ops/s
Iteration  24: 6261541.324 ops/s
Iteration  25: 6325924.395 ops/s
Iteration  26: 6456440.202 ops/s
Iteration  27: 6201400.840 ops/s
Iteration  28: 6350858.113 ops/s
Iteration  29: 6181702.973 ops/s
Iteration  30: 6342909.732 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels":
  6361499.187 ±(99.9%) 85839.033 ops/s [Average]
  (min, avg, max) = (6181702.973, 6361499.187, 6675491.563), stdev = 128479.833
  CI (99.9%): [6275660.154, 6447338.220] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
SingleToCompletionStageTest._Benchmark.benchmark_completableManualCompleteCancels  thrpt   30  6361499.187 ± 85839.033  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 175271.074 ops/s
# Warmup Iteration   2: 331673.817 ops/s
# Warmup Iteration   3: 329616.296 ops/s
# Warmup Iteration   4: 337149.108 ops/s
# Warmup Iteration   5: 373279.540 ops/s
# Warmup Iteration   6: 348619.311 ops/s
# Warmup Iteration   7: 367451.542 ops/s
# Warmup Iteration   8: 364898.694 ops/s
# Warmup Iteration   9: 360581.984 ops/s
# Warmup Iteration  10: 354596.294 ops/s
# Warmup Iteration  11: 355198.076 ops/s
# Warmup Iteration  12: 304250.277 ops/s
# Warmup Iteration  13: 354709.944 ops/s
# Warmup Iteration  14: 364209.179 ops/s
# Warmup Iteration  15: 368583.739 ops/s
# Warmup Iteration  16: 355732.347 ops/s
# Warmup Iteration  17: 383972.375 ops/s
# Warmup Iteration  18: 370069.275 ops/s
# Warmup Iteration  19: 398718.077 ops/s
# Warmup Iteration  20: 385938.890 ops/s
# Warmup Iteration  21: 375421.080 ops/s
# Warmup Iteration  22: 387050.911 ops/s
# Warmup Iteration  23: 377929.682 ops/s
# Warmup Iteration  24: 385252.029 ops/s
# Warmup Iteration  25: 383440.560 ops/s
# Warmup Iteration  26: 381815.846 ops/s
# Warmup Iteration  27: 387374.811 ops/s
# Warmup Iteration  28: 378484.126 ops/s
# Warmup Iteration  29: 387176.758 ops/s
# Warmup Iteration  30: 378791.131 ops/s
Iteration   1: 378760.646 ops/s
Iteration   2: 391063.235 ops/s
Iteration   3: 372823.909 ops/s
Iteration   4: 380361.972 ops/s
Iteration   5: 383011.850 ops/s
Iteration   6: 370292.878 ops/s
Iteration   7: 399553.777 ops/s
Iteration   8: 376615.462 ops/s
Iteration   9: 389076.047 ops/s
Iteration  10: 367841.883 ops/s
Iteration  11: 373784.452 ops/s
Iteration  12: 396156.482 ops/s
Iteration  13: 405803.380 ops/s
Iteration  14: 394742.536 ops/s
Iteration  15: 385552.714 ops/s
Iteration  16: 380162.133 ops/s
Iteration  17: 394101.661 ops/s
Iteration  18: 373038.908 ops/s
Iteration  19: 383687.695 ops/s
Iteration  20: 388245.600 ops/s
Iteration  21: 382952.931 ops/s
Iteration  22: 380198.630 ops/s
Iteration  23: 396695.447 ops/s
Iteration  24: 371463.938 ops/s
Iteration  25: 391029.341 ops/s
Iteration  26: 377659.364 ops/s
Iteration  27: 379165.213 ops/s
Iteration  28: 395478.375 ops/s
Iteration  29: 386240.025 ops/s
Iteration  30: 365763.882 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_error":
  383710.812 ±(99.9%) 6797.276 ops/s [Average]
  (min, avg, max) = (365763.882, 383710.812, 405803.380), stdev = 10173.843
  CI (99.9%): [376913.536, 390508.088] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score      Error  Units
SingleToCompletionStageTest._Benchmark.benchmark_error  thrpt   30  383710.812 ± 6797.276  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_consumerDisposed$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_consumerDisposed

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 641454.538 ops/s
# Warmup Iteration   2: 3584075.931 ops/s
# Warmup Iteration   3: 4071275.739 ops/s
# Warmup Iteration   4: 5047742.049 ops/s
# Warmup Iteration   5: 5026735.958 ops/s
# Warmup Iteration   6: 4926641.265 ops/s
# Warmup Iteration   7: 5270274.960 ops/s
# Warmup Iteration   8: 5109135.887 ops/s
# Warmup Iteration   9: 4845753.736 ops/s
# Warmup Iteration  10: 5068580.420 ops/s
# Warmup Iteration  11: 4952202.891 ops/s
# Warmup Iteration  12: 5117098.086 ops/s
# Warmup Iteration  13: 5001302.562 ops/s
# Warmup Iteration  14: 5037131.809 ops/s
# Warmup Iteration  15: 5014191.160 ops/s
# Warmup Iteration  16: 4977486.493 ops/s
# Warmup Iteration  17: 5143392.034 ops/s
# Warmup Iteration  18: 5197444.881 ops/s
# Warmup Iteration  19: 4822781.476 ops/s
# Warmup Iteration  20: 5087328.917 ops/s
# Warmup Iteration  21: 5034676.302 ops/s
# Warmup Iteration  22: 5127962.562 ops/s
# Warmup Iteration  23: 4997763.717 ops/s
# Warmup Iteration  24: 4927924.476 ops/s
# Warmup Iteration  25: 5075182.603 ops/s
# Warmup Iteration  26: 5032902.776 ops/s
# Warmup Iteration  27: 4995279.727 ops/s
# Warmup Iteration  28: 4936649.139 ops/s
# Warmup Iteration  29: 5092746.848 ops/s
# Warmup Iteration  30: 4944269.880 ops/s
Iteration   1: 4973470.606 ops/s
Iteration   2: 5117020.927 ops/s
Iteration   3: 5086849.384 ops/s
Iteration   4: 4976560.169 ops/s
Iteration   5: 5129840.809 ops/s
Iteration   6: 5240916.521 ops/s
Iteration   7: 4988243.731 ops/s
Iteration   8: 5255303.679 ops/s
Iteration   9: 4851816.551 ops/s
Iteration  10: 5038274.228 ops/s
Iteration  11: 5243305.799 ops/s
Iteration  12: 4919167.683 ops/s
Iteration  13: 5000868.216 ops/s
Iteration  14: 5213970.009 ops/s
Iteration  15: 4943895.515 ops/s
Iteration  16: 4835455.253 ops/s
Iteration  17: 4992125.733 ops/s
Iteration  18: 5121509.127 ops/s
Iteration  19: 4789918.613 ops/s
Iteration  20: 5149011.119 ops/s
Iteration  21: 5043005.303 ops/s
Iteration  22: 4904296.937 ops/s
Iteration  23: 5267586.652 ops/s
Iteration  24: 4877667.199 ops/s
Iteration  25: 5234598.543 ops/s
Iteration  26: 4984887.642 ops/s
Iteration  27: 5060968.046 ops/s
Iteration  28: 4922329.295 ops/s
Iteration  29: 5121482.306 ops/s
Iteration  30: 4860675.338 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableConcatWithSingleTest._Benchmark.benchmark_consumerDisposed":
  5038167.364 ±(99.9%) 93015.334 ops/s [Average]
  (min, avg, max) = (4789918.613, 5038167.364, 5267586.652), stdev = 139220.983
  CI (99.9%): [4945152.031, 5131182.698] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
ObservableConcatWithSingleTest._Benchmark.benchmark_consumerDisposed  thrpt   30  5038167.364 ± 93015.334  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_otherError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_otherError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 132436.393 ops/s
# Warmup Iteration   2: 542885.218 ops/s
# Warmup Iteration   3: 647237.321 ops/s
# Warmup Iteration   4: 642710.713 ops/s
# Warmup Iteration   5: 651717.829 ops/s
# Warmup Iteration   6: 377564.472 ops/s
# Warmup Iteration   7: 626150.012 ops/s
# Warmup Iteration   8: 658671.322 ops/s
# Warmup Iteration   9: 657820.045 ops/s
# Warmup Iteration  10: 700803.356 ops/s
# Warmup Iteration  11: 673112.735 ops/s
# Warmup Iteration  12: 658990.509 ops/s
# Warmup Iteration  13: 680796.344 ops/s
# Warmup Iteration  14: 656076.243 ops/s
# Warmup Iteration  15: 685057.235 ops/s
# Warmup Iteration  16: 651987.876 ops/s
# Warmup Iteration  17: 703709.573 ops/s
# Warmup Iteration  18: 700804.632 ops/s
# Warmup Iteration  19: 704238.658 ops/s
# Warmup Iteration  20: 714925.937 ops/s
# Warmup Iteration  21: 677733.010 ops/s
# Warmup Iteration  22: 700817.971 ops/s
# Warmup Iteration  23: 697046.260 ops/s
# Warmup Iteration  24: 671232.448 ops/s
# Warmup Iteration  25: 715057.704 ops/s
# Warmup Iteration  26: 681464.394 ops/s
# Warmup Iteration  27: 711041.173 ops/s
# Warmup Iteration  28: 724101.522 ops/s
# Warmup Iteration  29: 679229.648 ops/s
# Warmup Iteration  30: 716891.760 ops/s
Iteration   1: 664616.097 ops/s
Iteration   2: 706401.291 ops/s
Iteration   3: 710464.173 ops/s
Iteration   4: 689024.404 ops/s
Iteration   5: 718350.377 ops/s
Iteration   6: 654261.348 ops/s
Iteration   7: 699134.043 ops/s
Iteration   8: 723936.100 ops/s
Iteration   9: 732623.563 ops/s
Iteration  10: 682976.256 ops/s
Iteration  11: 732067.077 ops/s
Iteration  12: 699293.093 ops/s
Iteration  13: 696598.614 ops/s
Iteration  14: 715272.861 ops/s
Iteration  15: 697827.651 ops/s
Iteration  16: 719159.708 ops/s
Iteration  17: 716016.990 ops/s
Iteration  18: 690214.399 ops/s
Iteration  19: 731822.993 ops/s
Iteration  20: 693513.677 ops/s
Iteration  21: 706223.971 ops/s
Iteration  22: 718366.314 ops/s
Iteration  23: 681424.752 ops/s
Iteration  24: 715925.031 ops/s
Iteration  25: 698327.692 ops/s
Iteration  26: 694031.034 ops/s
Iteration  27: 730994.766 ops/s
Iteration  28: 690722.847 ops/s
Iteration  29: 729117.471 ops/s
Iteration  30: 681348.901 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_otherError":
  704001.917 ±(99.9%) 13423.820 ops/s [Average]
  (min, avg, max) = (654261.348, 704001.917, 732623.563), stdev = 20092.143
  CI (99.9%): [690578.097, 717425.736] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt       Score       Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_otherError  thrpt   30  704001.917 ± 13423.820  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 843346.049 ops/s
# Warmup Iteration   2: 3767629.351 ops/s
# Warmup Iteration   3: 4987272.492 ops/s
# Warmup Iteration   4: 4608567.194 ops/s
# Warmup Iteration   5: 4479736.014 ops/s
# Warmup Iteration   6: 4869176.542 ops/s
# Warmup Iteration   7: 4761191.988 ops/s
# Warmup Iteration   8: 4920121.069 ops/s
# Warmup Iteration   9: 4886770.020 ops/s
# Warmup Iteration  10: 5086613.398 ops/s
# Warmup Iteration  11: 5002749.908 ops/s
# Warmup Iteration  12: 4749738.372 ops/s
# Warmup Iteration  13: 4989734.079 ops/s
# Warmup Iteration  14: 4913177.627 ops/s
# Warmup Iteration  15: 5178425.121 ops/s
# Warmup Iteration  16: 4952893.707 ops/s
# Warmup Iteration  17: 4735014.542 ops/s
# Warmup Iteration  18: 5112794.922 ops/s
# Warmup Iteration  19: 5134817.718 ops/s
# Warmup Iteration  20: 4803459.052 ops/s
# Warmup Iteration  21: 5119396.328 ops/s
# Warmup Iteration  22: 5067545.903 ops/s
# Warmup Iteration  23: 4897752.792 ops/s
# Warmup Iteration  24: 5074090.187 ops/s
# Warmup Iteration  25: 4917319.729 ops/s
# Warmup Iteration  26: 4925974.748 ops/s
# Warmup Iteration  27: 5106512.632 ops/s
# Warmup Iteration  28: 5058955.714 ops/s
# Warmup Iteration  29: 5068016.713 ops/s
# Warmup Iteration  30: 4997160.388 ops/s
Iteration   1: 5019655.151 ops/s
Iteration   2: 4936441.815 ops/s
Iteration   3: 5069756.287 ops/s
Iteration   4: 5137290.625 ops/s
Iteration   5: 4826812.073 ops/s
Iteration   6: 5005418.994 ops/s
Iteration   7: 4970575.218 ops/s
Iteration   8: 4906671.191 ops/s
Iteration   9: 5004947.664 ops/s
Iteration  10: 4905776.043 ops/s
Iteration  11: 5119977.954 ops/s
Iteration  12: 4906468.245 ops/s
Iteration  13: 5058341.931 ops/s
Iteration  14: 5004402.807 ops/s
Iteration  15: 4930600.295 ops/s
Iteration  16: 4899801.155 ops/s
Iteration  17: 5109018.228 ops/s
Iteration  18: 4882140.107 ops/s
Iteration  19: 4977772.576 ops/s
Iteration  20: 5118329.047 ops/s
Iteration  21: 5056523.103 ops/s
Iteration  22: 4970353.597 ops/s
Iteration  23: 5133379.392 ops/s
Iteration  24: 4894149.213 ops/s
Iteration  25: 4959049.544 ops/s
Iteration  26: 4869080.240 ops/s
Iteration  27: 4846790.280 ops/s
Iteration  28: 5109503.165 ops/s
Iteration  29: 4811064.152 ops/s
Iteration  30: 4896890.547 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleFromCompletionStageTest._Benchmark.benchmark_dispose":
  4977899.355 ±(99.9%) 65339.181 ops/s [Average]
  (min, avg, max) = (4811064.152, 4977899.355, 5137290.625), stdev = 97796.617
  CI (99.9%): [4912560.174, 5043238.535] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SingleFromCompletionStageTest._Benchmark.benchmark_dispose  thrpt   30  4977899.355 ± 65339.181  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorNoElement$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorNoElement

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 231694.348 ops/s
# Warmup Iteration   2: 541416.926 ops/s
# Warmup Iteration   3: 598617.552 ops/s
# Warmup Iteration   4: 582065.268 ops/s
# Warmup Iteration   5: 605666.790 ops/s
# Warmup Iteration   6: 599434.647 ops/s
# Warmup Iteration   7: 611116.046 ops/s
# Warmup Iteration   8: 604600.067 ops/s
# Warmup Iteration   9: 666802.010 ops/s
# Warmup Iteration  10: 618420.636 ops/s
# Warmup Iteration  11: 617910.190 ops/s
# Warmup Iteration  12: 635053.247 ops/s
# Warmup Iteration  13: 620236.889 ops/s
# Warmup Iteration  14: 632544.046 ops/s
# Warmup Iteration  15: 650160.274 ops/s
# Warmup Iteration  16: 630581.112 ops/s
# Warmup Iteration  17: 649397.141 ops/s
# Warmup Iteration  18: 672584.355 ops/s
# Warmup Iteration  19: 675706.040 ops/s
# Warmup Iteration  20: 695783.295 ops/s
# Warmup Iteration  21: 662474.685 ops/s
# Warmup Iteration  22: 645559.739 ops/s
# Warmup Iteration  23: 693279.922 ops/s
# Warmup Iteration  24: 647692.429 ops/s
# Warmup Iteration  25: 687381.537 ops/s
# Warmup Iteration  26: 624349.890 ops/s
# Warmup Iteration  27: 719226.839 ops/s
# Warmup Iteration  28: 711489.327 ops/s
# Warmup Iteration  29: 729942.409 ops/s
# Warmup Iteration  30: 652529.730 ops/s
Iteration   1: 658022.018 ops/s
Iteration   2: 654126.693 ops/s
Iteration   3: 677200.706 ops/s
Iteration   4: 633837.024 ops/s
Iteration   5: 664774.199 ops/s
Iteration   6: 682502.670 ops/s
Iteration   7: 622509.162 ops/s
Iteration   8: 680277.068 ops/s
Iteration   9: 671914.719 ops/s
Iteration  10: 670960.385 ops/s
Iteration  11: 658002.383 ops/s
Iteration  12: 671676.226 ops/s
Iteration  13: 774969.048 ops/s
Iteration  14: 745840.914 ops/s
Iteration  15: 630139.776 ops/s
Iteration  16: 700774.840 ops/s
Iteration  17: 783125.530 ops/s
Iteration  18: 725495.248 ops/s
Iteration  19: 687496.113 ops/s
Iteration  20: 711228.214 ops/s
Iteration  21: 728513.160 ops/s
Iteration  22: 715519.010 ops/s
Iteration  23: 714802.226 ops/s
Iteration  24: 669621.269 ops/s
Iteration  25: 704160.370 ops/s
Iteration  26: 710172.648 ops/s
Iteration  27: 721115.315 ops/s
Iteration  28: 689836.099 ops/s
Iteration  29: 679843.727 ops/s
Iteration  30: 799264.644 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorNoElement":
  694590.713 ±(99.9%) 28722.048 ops/s [Average]
  (min, avg, max) = (622509.162, 694590.713, 799264.644), stdev = 42989.812
  CI (99.9%): [665868.666, 723312.761] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score       Error  Units
ObservableElementAtTest._Benchmark.benchmark_elementAtOrErrorNoElement  thrpt   30  694590.713 ± 28722.048  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 187224.655 ops/s
# Warmup Iteration   2: 318417.458 ops/s
# Warmup Iteration   3: 402890.749 ops/s
# Warmup Iteration   4: 372945.256 ops/s
# Warmup Iteration   5: 423804.895 ops/s
# Warmup Iteration   6: 357032.098 ops/s
# Warmup Iteration   7: 344812.023 ops/s
# Warmup Iteration   8: 374504.038 ops/s
# Warmup Iteration   9: 360370.666 ops/s
# Warmup Iteration  10: 348274.449 ops/s
# Warmup Iteration  11: 347778.285 ops/s
# Warmup Iteration  12: 355768.818 ops/s
# Warmup Iteration  13: 351670.741 ops/s
# Warmup Iteration  14: 360826.408 ops/s
# Warmup Iteration  15: 358217.969 ops/s
# Warmup Iteration  16: 350400.695 ops/s
# Warmup Iteration  17: 384145.452 ops/s
# Warmup Iteration  18: 388058.493 ops/s
# Warmup Iteration  19: 367219.746 ops/s
# Warmup Iteration  20: 387566.016 ops/s
# Warmup Iteration  21: 373087.021 ops/s
# Warmup Iteration  22: 372171.282 ops/s
# Warmup Iteration  23: 386099.116 ops/s
# Warmup Iteration  24: 360522.723 ops/s
# Warmup Iteration  25: 377764.302 ops/s
# Warmup Iteration  26: 379420.713 ops/s
# Warmup Iteration  27: 374116.607 ops/s
# Warmup Iteration  28: 369407.131 ops/s
# Warmup Iteration  29: 378336.567 ops/s
# Warmup Iteration  30: 382670.071 ops/s
Iteration   1: 366708.289 ops/s
Iteration   2: 382029.320 ops/s
Iteration   3: 379258.423 ops/s
Iteration   4: 360607.449 ops/s
Iteration   5: 378708.260 ops/s
Iteration   6: 359748.868 ops/s
Iteration   7: 367881.196 ops/s
Iteration   8: 372281.437 ops/s
Iteration   9: 388700.991 ops/s
Iteration  10: 359502.024 ops/s
Iteration  11: 376810.707 ops/s
Iteration  12: 382038.900 ops/s
Iteration  13: 366569.160 ops/s
Iteration  14: 375459.461 ops/s
Iteration  15: 369279.685 ops/s
Iteration  16: 364930.920 ops/s
Iteration  17: 385984.821 ops/s
Iteration  18: 359018.987 ops/s
Iteration  19: 377404.868 ops/s
Iteration  20: 371156.474 ops/s
Iteration  21: 382520.321 ops/s
Iteration  22: 377743.765 ops/s
Iteration  23: 373949.349 ops/s
Iteration  24: 382010.670 ops/s
Iteration  25: 373721.074 ops/s
Iteration  26: 389252.991 ops/s
Iteration  27: 353420.580 ops/s
Iteration  28: 319266.002 ops/s
Iteration  29: 391900.356 ops/s
Iteration  30: 369150.749 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.SingleToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels":
  371900.537 ±(99.9%) 9328.293 ops/s [Average]
  (min, avg, max) = (319266.002, 371900.537, 391900.356), stdev = 13962.151
  CI (99.9%): [362572.243, 381228.830] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                        Mode  Cnt       Score      Error  Units
SingleToCompletionStageTest._Benchmark.benchmark_completableManualCompleteExceptionallyCancels  thrpt   30  371900.537 ± 9328.293  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1418590.916 ops/s
# Warmup Iteration   2: 3831497.518 ops/s
# Warmup Iteration   3: 4282437.876 ops/s
# Warmup Iteration   4: 4705903.485 ops/s
# Warmup Iteration   5: 5018659.163 ops/s
# Warmup Iteration   6: 4982737.709 ops/s
# Warmup Iteration   7: 4826613.184 ops/s
# Warmup Iteration   8: 4712035.778 ops/s
# Warmup Iteration   9: 4981337.938 ops/s
# Warmup Iteration  10: 4951676.092 ops/s
# Warmup Iteration  11: 4931868.721 ops/s
# Warmup Iteration  12: 4981655.132 ops/s
# Warmup Iteration  13: 4793648.871 ops/s
# Warmup Iteration  14: 5038434.227 ops/s
# Warmup Iteration  15: 5012974.578 ops/s
# Warmup Iteration  16: 4595217.459 ops/s
# Warmup Iteration  17: 4841155.406 ops/s
# Warmup Iteration  18: 4980045.330 ops/s
# Warmup Iteration  19: 4716371.564 ops/s
# Warmup Iteration  20: 4872671.514 ops/s
# Warmup Iteration  21: 4827513.138 ops/s
# Warmup Iteration  22: 4810607.061 ops/s
# Warmup Iteration  23: 4959177.038 ops/s
# Warmup Iteration  24: 4812142.298 ops/s
# Warmup Iteration  25: 4682244.128 ops/s
# Warmup Iteration  26: 4790078.490 ops/s
# Warmup Iteration  27: 4723339.219 ops/s
# Warmup Iteration  28: 5015580.005 ops/s
# Warmup Iteration  29: 4821938.372 ops/s
# Warmup Iteration  30: 4916133.887 ops/s
Iteration   1: 4862488.143 ops/s
Iteration   2: 4925539.755 ops/s
Iteration   3: 4818643.711 ops/s
Iteration   4: 4825410.671 ops/s
Iteration   5: 4960998.764 ops/s
Iteration   6: 4745697.209 ops/s
Iteration   7: 4916874.355 ops/s
Iteration   8: 4897013.899 ops/s
Iteration   9: 4883362.131 ops/s
Iteration  10: 4965636.517 ops/s
Iteration  11: 4672767.084 ops/s
Iteration  12: 5052331.453 ops/s
Iteration  13: 4843242.750 ops/s
Iteration  14: 4838665.868 ops/s
Iteration  15: 5116469.889 ops/s
Iteration  16: 4918717.817 ops/s
Iteration  17: 4743967.994 ops/s
Iteration  18: 4791453.432 ops/s
Iteration  19: 5051099.097 ops/s
Iteration  20: 4792763.402 ops/s
Iteration  21: 4919492.263 ops/s
Iteration  22: 4973776.070 ops/s
Iteration  23: 4708722.950 ops/s
Iteration  24: 4916391.778 ops/s
Iteration  25: 4927531.400 ops/s
Iteration  26: 4778478.944 ops/s
Iteration  27: 5074211.763 ops/s
Iteration  28: 4757821.484 ops/s
Iteration  29: 4952551.988 ops/s
Iteration  30: 5114336.394 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleFlatMapBiSelectorTest._Benchmark.benchmark_dispose":
  4891548.632 ±(99.9%) 78609.874 ops/s [Average]
  (min, avg, max) = (4672767.084, 4891548.632, 5116469.889), stdev = 117659.567
  CI (99.9%): [4812938.759, 4970158.506] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                  Mode  Cnt        Score       Error  Units
SingleFlatMapBiSelectorTest._Benchmark.benchmark_dispose  thrpt   30  4891548.632 ± 78609.874  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1349776.205 ops/s
# Warmup Iteration   2: 3289167.624 ops/s
# Warmup Iteration   3: 4452097.806 ops/s
# Warmup Iteration   4: 4599970.076 ops/s
# Warmup Iteration   5: 4748691.220 ops/s
# Warmup Iteration   6: 4481799.755 ops/s
# Warmup Iteration   7: 4764595.925 ops/s
# Warmup Iteration   8: 4560253.656 ops/s
# Warmup Iteration   9: 4624395.391 ops/s
# Warmup Iteration  10: 4611266.077 ops/s
# Warmup Iteration  11: 4516278.092 ops/s
# Warmup Iteration  12: 4832338.639 ops/s
# Warmup Iteration  13: 4708968.452 ops/s
# Warmup Iteration  14: 4625501.122 ops/s
# Warmup Iteration  15: 4835001.716 ops/s
# Warmup Iteration  16: 4673678.952 ops/s
# Warmup Iteration  17: 4490521.853 ops/s
# Warmup Iteration  18: 4612585.638 ops/s
# Warmup Iteration  19: 4845667.362 ops/s
# Warmup Iteration  20: 4483888.502 ops/s
# Warmup Iteration  21: 4743719.051 ops/s
# Warmup Iteration  22: 4755397.735 ops/s
# Warmup Iteration  23: 4586582.117 ops/s
# Warmup Iteration  24: 4704274.411 ops/s
# Warmup Iteration  25: 4653573.376 ops/s
# Warmup Iteration  26: 4562001.165 ops/s
# Warmup Iteration  27: 4864497.853 ops/s
# Warmup Iteration  28: 4631460.358 ops/s
# Warmup Iteration  29: 4480743.094 ops/s
# Warmup Iteration  30: 4653917.647 ops/s
Iteration   1: 4565748.730 ops/s
Iteration   2: 4642010.087 ops/s
Iteration   3: 4789337.573 ops/s
Iteration   4: 4586320.885 ops/s
Iteration   5: 4786106.535 ops/s
Iteration   6: 4532950.314 ops/s
Iteration   7: 4723943.993 ops/s
Iteration   8: 4803077.749 ops/s
Iteration   9: 4535492.021 ops/s
Iteration  10: 4662991.983 ops/s
Iteration  11: 4567106.552 ops/s
Iteration  12: 4637289.480 ops/s
Iteration  13: 4759928.982 ops/s
Iteration  14: 4724727.765 ops/s
Iteration  15: 4455843.749 ops/s
Iteration  16: 4784140.815 ops/s
Iteration  17: 4592403.464 ops/s
Iteration  18: 4568474.823 ops/s
Iteration  19: 4880889.451 ops/s
Iteration  20: 4539304.499 ops/s
Iteration  21: 4731881.715 ops/s
Iteration  22: 3510567.916 ops/s
Iteration  23: 4473355.658 ops/s
Iteration  24: 4720493.143 ops/s
Iteration  25: 4613099.471 ops/s
Iteration  26: 4704565.416 ops/s
Iteration  27: 4618444.748 ops/s
Iteration  28: 4569842.354 ops/s
Iteration  29: 4657097.826 ops/s
Iteration  30: 4583488.567 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_dispose":
  4610697.542 ±(99.9%) 155554.249 ops/s [Average]
  (min, avg, max) = (3510567.916, 4610697.542, 4880889.451), stdev = 232826.295
  CI (99.9%): [4455143.293, 4766251.791] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                      Mode  Cnt        Score        Error  Units
SingleUsingTest._Benchmark.benchmark_dispose  thrpt   30  4610697.542 ± 155554.249  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 391774.248 ops/s
# Warmup Iteration   2: 1686210.929 ops/s
# Warmup Iteration   3: 2473115.248 ops/s
# Warmup Iteration   4: 2888809.541 ops/s
# Warmup Iteration   5: 3003378.039 ops/s
# Warmup Iteration   6: 3018248.486 ops/s
# Warmup Iteration   7: 2837568.315 ops/s
# Warmup Iteration   8: 2891699.496 ops/s
# Warmup Iteration   9: 2910350.217 ops/s
# Warmup Iteration  10: 2885931.017 ops/s
# Warmup Iteration  11: 3034052.806 ops/s
# Warmup Iteration  12: 2878142.886 ops/s
# Warmup Iteration  13: 3004049.652 ops/s
# Warmup Iteration  14: 2983886.079 ops/s
# Warmup Iteration  15: 2795987.932 ops/s
# Warmup Iteration  16: 2955939.808 ops/s
# Warmup Iteration  17: 2826409.513 ops/s
# Warmup Iteration  18: 2887038.765 ops/s
# Warmup Iteration  19: 3010236.041 ops/s
# Warmup Iteration  20: 2851266.059 ops/s
# Warmup Iteration  21: 2953607.807 ops/s
# Warmup Iteration  22: 2872342.152 ops/s
# Warmup Iteration  23: 2934408.558 ops/s
# Warmup Iteration  24: 2895740.620 ops/s
# Warmup Iteration  25: 2864874.937 ops/s
# Warmup Iteration  26: 3025992.297 ops/s
# Warmup Iteration  27: 3010647.066 ops/s
# Warmup Iteration  28: 2894634.354 ops/s
# Warmup Iteration  29: 3008405.987 ops/s
# Warmup Iteration  30: 2791110.323 ops/s
Iteration   1: 3052851.029 ops/s
Iteration   2: 3022124.589 ops/s
Iteration   3: 2749779.890 ops/s
Iteration   4: 3062717.156 ops/s
Iteration   5: 2954293.722 ops/s
Iteration   6: 2812137.020 ops/s
Iteration   7: 2959701.509 ops/s
Iteration   8: 2840255.586 ops/s
Iteration   9: 2884185.366 ops/s
Iteration  10: 3007763.771 ops/s
Iteration  11: 2957426.623 ops/s
Iteration  12: 2864901.974 ops/s
Iteration  13: 2978325.732 ops/s
Iteration  14: 2858397.398 ops/s
Iteration  15: 2881593.174 ops/s
Iteration  16: 2915991.680 ops/s
Iteration  17: 2946617.291 ops/s
Iteration  18: 2935509.370 ops/s
Iteration  19: 2921169.950 ops/s
Iteration  20: 2962109.227 ops/s
Iteration  21: 2873601.687 ops/s
Iteration  22: 2866735.420 ops/s
Iteration  23: 2966960.042 ops/s
Iteration  24: 2854079.510 ops/s
Iteration  25: 2911278.985 ops/s
Iteration  26: 2923092.642 ops/s
Iteration  27: 2808585.018 ops/s
Iteration  28: 3053092.342 ops/s
Iteration  29: 2830624.468 ops/s
Iteration  30: 2998053.975 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose":
  2921798.538 ±(99.9%) 52451.595 ops/s [Average]
  (min, avg, max) = (2749779.890, 2921798.538, 3062717.156), stdev = 78507.084
  CI (99.9%): [2869346.943, 2974250.133] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                     Mode  Cnt        Score       Error  Units
SingleTimeoutTest._Benchmark.benchmark_shouldUnsubscribeFromUnderlyingSubscriptionOnDispose  thrpt   30  2921798.538 ± 52451.595  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarMapperCrash$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarMapperCrash

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 169789.618 ops/s
# Warmup Iteration   2: 546815.876 ops/s
# Warmup Iteration   3: 584940.061 ops/s
# Warmup Iteration   4: 637763.344 ops/s
# Warmup Iteration   5: 661973.853 ops/s
# Warmup Iteration   6: 636481.412 ops/s
# Warmup Iteration   7: 651650.993 ops/s
# Warmup Iteration   8: 632238.386 ops/s
# Warmup Iteration   9: 604305.402 ops/s
# Warmup Iteration  10: 629964.323 ops/s
# Warmup Iteration  11: 641073.556 ops/s
# Warmup Iteration  12: 626211.356 ops/s
# Warmup Iteration  13: 662409.594 ops/s
# Warmup Iteration  14: 633037.197 ops/s
# Warmup Iteration  15: 663471.789 ops/s
# Warmup Iteration  16: 651573.187 ops/s
# Warmup Iteration  17: 666544.976 ops/s
# Warmup Iteration  18: 683964.176 ops/s
# Warmup Iteration  19: 663864.310 ops/s
# Warmup Iteration  20: 659184.275 ops/s
# Warmup Iteration  21: 694759.617 ops/s
# Warmup Iteration  22: 663732.621 ops/s
# Warmup Iteration  23: 672851.123 ops/s
# Warmup Iteration  24: 663246.497 ops/s
# Warmup Iteration  25: 674403.728 ops/s
# Warmup Iteration  26: 660690.154 ops/s
# Warmup Iteration  27: 670487.469 ops/s
# Warmup Iteration  28: 689943.890 ops/s
# Warmup Iteration  29: 649039.019 ops/s
# Warmup Iteration  30: 668742.719 ops/s
Iteration   1: 667768.519 ops/s
Iteration   2: 672639.789 ops/s
Iteration   3: 728552.670 ops/s
Iteration   4: 653934.636 ops/s
Iteration   5: 660014.221 ops/s
Iteration   6: 697109.300 ops/s
Iteration   7: 647583.853 ops/s
Iteration   8: 706090.649 ops/s
Iteration   9: 673462.576 ops/s
Iteration  10: 660411.000 ops/s
Iteration  11: 691236.849 ops/s
Iteration  12: 640881.914 ops/s
Iteration  13: 684308.201 ops/s
Iteration  14: 619431.194 ops/s
Iteration  15: 671020.193 ops/s
Iteration  16: 639880.762 ops/s
Iteration  17: 541389.876 ops/s
Iteration  18: 672379.466 ops/s
Iteration  19: 671727.554 ops/s
Iteration  20: 693773.134 ops/s
Iteration  21: 662408.896 ops/s
Iteration  22: 662004.453 ops/s
Iteration  23: 688369.531 ops/s
Iteration  24: 660384.155 ops/s
Iteration  25: 699919.252 ops/s
Iteration  26: 684701.316 ops/s
Iteration  27: 655425.516 ops/s
Iteration  28: 703378.612 ops/s
Iteration  29: 657841.699 ops/s
Iteration  30: 666393.910 ops/s


Result "io.reactivex.rxjava3.internal.operators.mixed.ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarMapperCrash":
  667814.123 ±(99.9%) 22030.686 ops/s [Average]
  (min, avg, max) = (541389.876, 667814.123, 728552.670), stdev = 32974.496
  CI (99.9%): [645783.437, 689844.809] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score       Error  Units
ObservableSwitchMapSingleTest._Benchmark.benchmark_scalarMapperCrash  thrpt   30  667814.123 ± 22030.686  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_doubleOnSubscribeMain$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_doubleOnSubscribeMain

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 147687.455 ops/s
# Warmup Iteration   2: 418416.735 ops/s
# Warmup Iteration   3: 471635.640 ops/s
# Warmup Iteration   4: 472980.786 ops/s
# Warmup Iteration   5: 505508.051 ops/s
# Warmup Iteration   6: 466308.568 ops/s
# Warmup Iteration   7: 494367.112 ops/s
# Warmup Iteration   8: 457971.517 ops/s
# Warmup Iteration   9: 467695.519 ops/s
# Warmup Iteration  10: 504611.660 ops/s
# Warmup Iteration  11: 495687.472 ops/s
# Warmup Iteration  12: 487040.289 ops/s
# Warmup Iteration  13: 496795.947 ops/s
# Warmup Iteration  14: 471198.210 ops/s
# Warmup Iteration  15: 493889.158 ops/s
# Warmup Iteration  16: 475490.162 ops/s
# Warmup Iteration  17: 500071.209 ops/s
# Warmup Iteration  18: 520755.884 ops/s
# Warmup Iteration  19: 509627.656 ops/s
# Warmup Iteration  20: 485982.455 ops/s
# Warmup Iteration  21: 485292.474 ops/s
# Warmup Iteration  22: 483756.188 ops/s
# Warmup Iteration  23: 458853.783 ops/s
# Warmup Iteration  24: 464063.129 ops/s
# Warmup Iteration  25: 506149.159 ops/s
# Warmup Iteration  26: 494050.353 ops/s
# Warmup Iteration  27: 510403.568 ops/s
# Warmup Iteration  28: 493677.543 ops/s
# Warmup Iteration  29: 513293.043 ops/s
# Warmup Iteration  30: 511469.165 ops/s
Iteration   1: 504050.817 ops/s
Iteration   2: 501071.630 ops/s
Iteration   3: 501794.857 ops/s
Iteration   4: 507923.264 ops/s
Iteration   5: 520698.476 ops/s
Iteration   6: 488914.074 ops/s
Iteration   7: 517651.534 ops/s
Iteration   8: 495829.716 ops/s
Iteration   9: 521966.481 ops/s
Iteration  10: 501939.911 ops/s
Iteration  11: 518579.539 ops/s
Iteration  12: 508249.452 ops/s
Iteration  13: 493139.187 ops/s
Iteration  14: 508441.022 ops/s
Iteration  15: 495566.186 ops/s
Iteration  16: 504438.526 ops/s
Iteration  17: 517996.239 ops/s
Iteration  18: 505634.202 ops/s
Iteration  19: 492073.162 ops/s
Iteration  20: 520241.392 ops/s
Iteration  21: 486153.705 ops/s
Iteration  22: 506137.937 ops/s
Iteration  23: 493550.595 ops/s
Iteration  24: 516939.024 ops/s
Iteration  25: 497762.937 ops/s
Iteration  26: 506364.288 ops/s
Iteration  27: 519071.271 ops/s
Iteration  28: 503076.779 ops/s
Iteration  29: 518071.360 ops/s
Iteration  30: 496146.691 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableMergeWithSingleTest._Benchmark.benchmark_doubleOnSubscribeMain":
  505649.142 ±(99.9%) 7029.024 ops/s [Average]
  (min, avg, max) = (486153.705, 505649.142, 521966.481), stdev = 10520.713
  CI (99.9%): [498620.118, 512678.166] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                  Mode  Cnt       Score      Error  Units
ObservableMergeWithSingleTest._Benchmark.benchmark_doubleOnSubscribeMain  thrpt   30  505649.142 ± 7029.024  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_secondError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_secondError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 237303.557 ops/s
# Warmup Iteration   2: 517713.447 ops/s
# Warmup Iteration   3: 557452.703 ops/s
# Warmup Iteration   4: 600552.774 ops/s
# Warmup Iteration   5: 575084.901 ops/s
# Warmup Iteration   6: 629878.848 ops/s
# Warmup Iteration   7: 632750.388 ops/s
# Warmup Iteration   8: 647052.825 ops/s
# Warmup Iteration   9: 646590.380 ops/s
# Warmup Iteration  10: 628704.777 ops/s
# Warmup Iteration  11: 635895.274 ops/s
# Warmup Iteration  12: 640034.400 ops/s
# Warmup Iteration  13: 622347.266 ops/s
# Warmup Iteration  14: 663668.057 ops/s
# Warmup Iteration  15: 620655.970 ops/s
# Warmup Iteration  16: 647291.121 ops/s
# Warmup Iteration  17: 676339.500 ops/s
# Warmup Iteration  18: 637714.540 ops/s
# Warmup Iteration  19: 672589.985 ops/s
# Warmup Iteration  20: 648254.681 ops/s
# Warmup Iteration  21: 670905.139 ops/s
# Warmup Iteration  22: 653013.593 ops/s
# Warmup Iteration  23: 653501.540 ops/s
# Warmup Iteration  24: 684276.114 ops/s
# Warmup Iteration  25: 648159.789 ops/s
# Warmup Iteration  26: 687383.006 ops/s
# Warmup Iteration  27: 660698.644 ops/s
# Warmup Iteration  28: 679780.717 ops/s
# Warmup Iteration  29: 656057.780 ops/s
# Warmup Iteration  30: 683956.912 ops/s
Iteration   1: 641528.915 ops/s
Iteration   2: 687688.256 ops/s
Iteration   3: 663314.522 ops/s
Iteration   4: 661941.086 ops/s
Iteration   5: 674212.503 ops/s
Iteration   6: 634931.323 ops/s
Iteration   7: 681376.721 ops/s
Iteration   8: 651541.811 ops/s
Iteration   9: 664560.113 ops/s
Iteration  10: 656716.782 ops/s
Iteration  11: 687909.880 ops/s
Iteration  12: 461865.520 ops/s
Iteration  13: 676723.350 ops/s
Iteration  14: 670407.002 ops/s
Iteration  15: 678350.080 ops/s
Iteration  16: 657082.611 ops/s
Iteration  17: 657587.445 ops/s
Iteration  18: 661637.566 ops/s
Iteration  19: 661442.475 ops/s
Iteration  20: 683669.992 ops/s
Iteration  21: 659379.928 ops/s
Iteration  22: 661324.872 ops/s
Iteration  23: 683527.955 ops/s
Iteration  24: 657016.254 ops/s
Iteration  25: 664156.324 ops/s
Iteration  26: 702617.390 ops/s
Iteration  27: 680135.714 ops/s
Iteration  28: 651041.591 ops/s
Iteration  29: 678156.313 ops/s
Iteration  30: 644770.668 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_secondError":
  659887.165 ±(99.9%) 26982.000 ops/s [Average]
  (min, avg, max) = (461865.520, 659887.165, 702617.390), stdev = 40385.390
  CI (99.9%): [632905.166, 686869.165] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt       Score       Error  Units
SingleZipIterableTest._Benchmark.benchmark_secondError  thrpt   30  659887.165 ± 26982.000  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_firstError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_firstError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 164178.410 ops/s
# Warmup Iteration   2: 540627.385 ops/s
# Warmup Iteration   3: 581823.021 ops/s
# Warmup Iteration   4: 621314.186 ops/s
# Warmup Iteration   5: 560640.210 ops/s
# Warmup Iteration   6: 662364.897 ops/s
# Warmup Iteration   7: 627791.892 ops/s
# Warmup Iteration   8: 634535.010 ops/s
# Warmup Iteration   9: 650447.091 ops/s
# Warmup Iteration  10: 624610.165 ops/s
# Warmup Iteration  11: 642685.500 ops/s
# Warmup Iteration  12: 629607.292 ops/s
# Warmup Iteration  13: 644047.445 ops/s
# Warmup Iteration  14: 664898.839 ops/s
# Warmup Iteration  15: 630784.003 ops/s
# Warmup Iteration  16: 625036.526 ops/s
# Warmup Iteration  17: 695886.982 ops/s
# Warmup Iteration  18: 689373.618 ops/s
# Warmup Iteration  19: 661596.995 ops/s
# Warmup Iteration  20: 662554.874 ops/s
# Warmup Iteration  21: 680947.479 ops/s
# Warmup Iteration  22: 650104.300 ops/s
# Warmup Iteration  23: 684527.516 ops/s
# Warmup Iteration  24: 661610.925 ops/s
# Warmup Iteration  25: 667318.121 ops/s
# Warmup Iteration  26: 685389.419 ops/s
# Warmup Iteration  27: 661371.266 ops/s
# Warmup Iteration  28: 680401.700 ops/s
# Warmup Iteration  29: 671244.126 ops/s
# Warmup Iteration  30: 669955.079 ops/s
Iteration   1: 698845.608 ops/s
Iteration   2: 664612.063 ops/s
Iteration   3: 660862.315 ops/s
Iteration   4: 692999.561 ops/s
Iteration   5: 676822.730 ops/s
Iteration   6: 687273.393 ops/s
Iteration   7: 704440.621 ops/s
Iteration   8: 665764.354 ops/s
Iteration   9: 697745.732 ops/s
Iteration  10: 664953.024 ops/s
Iteration  11: 683934.021 ops/s
Iteration  12: 688756.447 ops/s
Iteration  13: 669911.889 ops/s
Iteration  14: 682541.644 ops/s
Iteration  15: 691537.806 ops/s
Iteration  16: 665371.423 ops/s
Iteration  17: 677298.348 ops/s
Iteration  18: 696996.218 ops/s
Iteration  19: 658562.721 ops/s
Iteration  20: 702537.142 ops/s
Iteration  21: 652919.263 ops/s
Iteration  22: 667145.960 ops/s
Iteration  23: 668967.484 ops/s
Iteration  24: 676865.249 ops/s
Iteration  25: 667401.294 ops/s
Iteration  26: 678916.250 ops/s
Iteration  27: 710045.480 ops/s
Iteration  28: 661171.693 ops/s
Iteration  29: 665110.176 ops/s
Iteration  30: 705221.031 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipIterableTest._Benchmark.benchmark_firstError":
  679517.698 ±(99.9%) 10844.735 ops/s [Average]
  (min, avg, max) = (652919.263, 679517.698, 710045.480), stdev = 16231.890
  CI (99.9%): [668672.963, 690362.433] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt       Score       Error  Units
SingleZipIterableTest._Benchmark.benchmark_firstError  thrpt   30  679517.698 ± 10844.735  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_firstError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_firstError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229231.907 ops/s
# Warmup Iteration   2: 515185.765 ops/s
# Warmup Iteration   3: 669880.912 ops/s
# Warmup Iteration   4: 621868.912 ops/s
# Warmup Iteration   5: 657944.007 ops/s
# Warmup Iteration   6: 651424.685 ops/s
# Warmup Iteration   7: 668561.258 ops/s
# Warmup Iteration   8: 620017.655 ops/s
# Warmup Iteration   9: 669105.093 ops/s
# Warmup Iteration  10: 642910.694 ops/s
# Warmup Iteration  11: 610306.842 ops/s
# Warmup Iteration  12: 678444.546 ops/s
# Warmup Iteration  13: 681894.766 ops/s
# Warmup Iteration  14: 629522.754 ops/s
# Warmup Iteration  15: 667518.999 ops/s
# Warmup Iteration  16: 637372.640 ops/s
# Warmup Iteration  17: 661381.893 ops/s
# Warmup Iteration  18: 671363.760 ops/s
# Warmup Iteration  19: 648546.034 ops/s
# Warmup Iteration  20: 694942.674 ops/s
# Warmup Iteration  21: 650522.016 ops/s
# Warmup Iteration  22: 696560.351 ops/s
# Warmup Iteration  23: 686450.263 ops/s
# Warmup Iteration  24: 648000.179 ops/s
# Warmup Iteration  25: 699134.355 ops/s
# Warmup Iteration  26: 663831.467 ops/s
# Warmup Iteration  27: 691835.909 ops/s
# Warmup Iteration  28: 691209.553 ops/s
# Warmup Iteration  29: 687923.824 ops/s
# Warmup Iteration  30: 708195.695 ops/s
Iteration   1: 664707.306 ops/s
Iteration   2: 698389.216 ops/s
Iteration   3: 691010.846 ops/s
Iteration   4: 686720.769 ops/s
Iteration   5: 681634.107 ops/s
Iteration   6: 558028.968 ops/s
Iteration   7: 702889.641 ops/s
Iteration   8: 672996.911 ops/s
Iteration   9: 702319.907 ops/s
Iteration  10: 669730.019 ops/s
Iteration  11: 685040.699 ops/s
Iteration  12: 702229.066 ops/s
Iteration  13: 659162.057 ops/s
Iteration  14: 697107.252 ops/s
Iteration  15: 708440.297 ops/s
Iteration  16: 689082.778 ops/s
Iteration  17: 677566.611 ops/s
Iteration  18: 711797.804 ops/s
Iteration  19: 673099.526 ops/s
Iteration  20: 707887.495 ops/s
Iteration  21: 687512.480 ops/s
Iteration  22: 706494.738 ops/s
Iteration  23: 678007.645 ops/s
Iteration  24: 683601.988 ops/s
Iteration  25: 709043.340 ops/s
Iteration  26: 671379.569 ops/s
Iteration  27: 719417.242 ops/s
Iteration  28: 663173.799 ops/s
Iteration  29: 677849.650 ops/s
Iteration  30: 719326.246 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleZipArrayTest._Benchmark.benchmark_firstError":
  685188.266 ±(99.9%) 19635.465 ops/s [Average]
  (min, avg, max) = (558028.968, 685188.266, 719417.242), stdev = 29389.442
  CI (99.9%): [665552.800, 704823.731] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
SingleZipArrayTest._Benchmark.benchmark_firstError  thrpt   30  685188.266 ± 19635.465  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 617503.678 ops/s
# Warmup Iteration   2: 2332368.127 ops/s
# Warmup Iteration   3: 3916041.626 ops/s
# Warmup Iteration   4: 4082360.150 ops/s
# Warmup Iteration   5: 3450918.635 ops/s
# Warmup Iteration   6: 3943996.301 ops/s
# Warmup Iteration   7: 4214076.597 ops/s
# Warmup Iteration   8: 3953179.325 ops/s
# Warmup Iteration   9: 4117261.829 ops/s
# Warmup Iteration  10: 4222279.158 ops/s
# Warmup Iteration  11: 3962907.119 ops/s
# Warmup Iteration  12: 4058705.551 ops/s
# Warmup Iteration  13: 4069704.586 ops/s
# Warmup Iteration  14: 4114593.956 ops/s
# Warmup Iteration  15: 4009746.926 ops/s
# Warmup Iteration  16: 4155302.991 ops/s
# Warmup Iteration  17: 4154823.722 ops/s
# Warmup Iteration  18: 3871613.510 ops/s
# Warmup Iteration  19: 4175420.580 ops/s
# Warmup Iteration  20: 3971754.139 ops/s
# Warmup Iteration  21: 4196584.758 ops/s
# Warmup Iteration  22: 4179652.849 ops/s
# Warmup Iteration  23: 3866927.181 ops/s
# Warmup Iteration  24: 4015992.552 ops/s
# Warmup Iteration  25: 4189745.048 ops/s
# Warmup Iteration  26: 3954854.847 ops/s
# Warmup Iteration  27: 4149956.663 ops/s
# Warmup Iteration  28: 4271319.011 ops/s
# Warmup Iteration  29: 3982497.252 ops/s
# Warmup Iteration  30: 4109860.137 ops/s
Iteration   1: 3915490.638 ops/s
Iteration   2: 4036545.087 ops/s
Iteration   3: 4152797.855 ops/s
Iteration   4: 4008368.248 ops/s
Iteration   5: 4080283.033 ops/s
Iteration   6: 4099003.776 ops/s
Iteration   7: 3999790.381 ops/s
Iteration   8: 4020830.961 ops/s
Iteration   9: 3916850.397 ops/s
Iteration  10: 4080274.282 ops/s
Iteration  11: 4200671.573 ops/s
Iteration  12: 3993753.552 ops/s
Iteration  13: 4075340.817 ops/s
Iteration  14: 4033574.141 ops/s
Iteration  15: 3993418.461 ops/s
Iteration  16: 3867954.431 ops/s
Iteration  17: 4102352.578 ops/s
Iteration  18: 4002595.439 ops/s
Iteration  19: 4095803.966 ops/s
Iteration  20: 4015890.113 ops/s
Iteration  21: 4027698.319 ops/s
Iteration  22: 4202059.708 ops/s
Iteration  23: 3980952.551 ops/s
Iteration  24: 4139396.543 ops/s
Iteration  25: 3922027.945 ops/s
Iteration  26: 4117165.721 ops/s
Iteration  27: 4050120.258 ops/s
Iteration  28: 3928127.229 ops/s
Iteration  29: 4180757.529 ops/s
Iteration  30: 4023007.688 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream":
  4042096.774 ±(99.9%) 57573.758 ops/s [Average]
  (min, avg, max) = (3867954.431, 4042096.774, 4202059.708), stdev = 86173.697
  CI (99.9%): [3984523.016, 4099670.532] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                      Mode  Cnt        Score       Error  Units
SingleUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream  thrpt   30  4042096.774 ± 57573.758  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 665464.316 ops/s
# Warmup Iteration   2: 2606778.227 ops/s
# Warmup Iteration   3: 3408608.741 ops/s
# Warmup Iteration   4: 4132829.730 ops/s
# Warmup Iteration   5: 4125360.559 ops/s
# Warmup Iteration   6: 3813587.192 ops/s
# Warmup Iteration   7: 4225275.093 ops/s
# Warmup Iteration   8: 4123716.747 ops/s
# Warmup Iteration   9: 3880318.906 ops/s
# Warmup Iteration  10: 4183489.514 ops/s
# Warmup Iteration  11: 3803320.691 ops/s
# Warmup Iteration  12: 4195729.641 ops/s
# Warmup Iteration  13: 4071261.392 ops/s
# Warmup Iteration  14: 3923481.350 ops/s
# Warmup Iteration  15: 4141914.159 ops/s
# Warmup Iteration  16: 4002948.749 ops/s
# Warmup Iteration  17: 4110013.941 ops/s
# Warmup Iteration  18: 4014535.047 ops/s
# Warmup Iteration  19: 3946113.557 ops/s
# Warmup Iteration  20: 4005470.437 ops/s
# Warmup Iteration  21: 3932271.259 ops/s
# Warmup Iteration  22: 4116955.951 ops/s
# Warmup Iteration  23: 3992890.268 ops/s
# Warmup Iteration  24: 3965432.175 ops/s
# Warmup Iteration  25: 4121793.132 ops/s
# Warmup Iteration  26: 3898928.009 ops/s
# Warmup Iteration  27: 3995178.176 ops/s
# Warmup Iteration  28: 4258471.210 ops/s
# Warmup Iteration  29: 3962765.483 ops/s
# Warmup Iteration  30: 3828972.198 ops/s
Iteration   1: 3542509.327 ops/s
Iteration   2: 3943797.539 ops/s
Iteration   3: 4057247.970 ops/s
Iteration   4: 4178171.656 ops/s
Iteration   5: 3773435.906 ops/s
Iteration   6: 4194088.602 ops/s
Iteration   7: 3995529.159 ops/s
Iteration   8: 4014747.205 ops/s
Iteration   9: 4035696.779 ops/s
Iteration  10: 4058931.284 ops/s
Iteration  11: 4130773.974 ops/s
Iteration  12: 3941060.536 ops/s
Iteration  13: 4155168.139 ops/s
Iteration  14: 4045483.568 ops/s
Iteration  15: 4151376.695 ops/s
Iteration  16: 3875956.165 ops/s
Iteration  17: 4192129.502 ops/s
Iteration  18: 4060063.306 ops/s
Iteration  19: 3939150.736 ops/s
Iteration  20: 4178496.316 ops/s
Iteration  21: 3821494.701 ops/s
Iteration  22: 4040286.422 ops/s
Iteration  23: 4202669.890 ops/s
Iteration  24: 3916199.077 ops/s
Iteration  25: 4252702.361 ops/s
Iteration  26: 4091422.430 ops/s
Iteration  27: 3827800.345 ops/s
Iteration  28: 4218126.907 ops/s
Iteration  29: 3898247.434 ops/s
Iteration  30: 4056320.203 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource":
  4026302.805 ±(99.9%) 105738.221 ops/s [Average]
  (min, avg, max) = (3542509.327, 4026302.805, 4252702.361), stdev = 158264.003
  CI (99.9%): [3920564.584, 4132041.025] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt        Score        Error  Units
SingleUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource  thrpt   30  4026302.805 ± 105738.221  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_disposeWhenFallback$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_disposeWhenFallback

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 625974.139 ops/s
# Warmup Iteration   2: 1762742.646 ops/s
# Warmup Iteration   3: 2492077.788 ops/s
# Warmup Iteration   4: 2780073.428 ops/s
# Warmup Iteration   5: 2827709.903 ops/s
# Warmup Iteration   6: 2779595.393 ops/s
# Warmup Iteration   7: 2828569.371 ops/s
# Warmup Iteration   8: 2740711.540 ops/s
# Warmup Iteration   9: 2851446.227 ops/s
# Warmup Iteration  10: 2728999.353 ops/s
# Warmup Iteration  11: 2853839.107 ops/s
# Warmup Iteration  12: 2733456.438 ops/s
# Warmup Iteration  13: 2850707.182 ops/s
# Warmup Iteration  14: 2817279.617 ops/s
# Warmup Iteration  15: 2745229.731 ops/s
# Warmup Iteration  16: 2824122.062 ops/s
# Warmup Iteration  17: 2783878.716 ops/s
# Warmup Iteration  18: 2738141.877 ops/s
# Warmup Iteration  19: 2864210.691 ops/s
# Warmup Iteration  20: 2734485.858 ops/s
# Warmup Iteration  21: 2849200.181 ops/s
# Warmup Iteration  22: 2871131.650 ops/s
# Warmup Iteration  23: 2717563.485 ops/s
# Warmup Iteration  24: 2840141.259 ops/s
# Warmup Iteration  25: 2762491.310 ops/s
# Warmup Iteration  26: 2717757.636 ops/s
# Warmup Iteration  27: 2807732.898 ops/s
# Warmup Iteration  28: 2813558.588 ops/s
# Warmup Iteration  29: 2750878.919 ops/s
# Warmup Iteration  30: 2890631.291 ops/s
Iteration   1: 2757128.690 ops/s
Iteration   2: 2890762.776 ops/s
Iteration   3: 2707485.282 ops/s
Iteration   4: 2759859.176 ops/s
Iteration   5: 2895869.324 ops/s
Iteration   6: 2758647.975 ops/s
Iteration   7: 2826565.472 ops/s
Iteration   8: 2795055.087 ops/s
Iteration   9: 2827394.519 ops/s
Iteration  10: 2897085.609 ops/s
Iteration  11: 2742205.059 ops/s
Iteration  12: 2846788.873 ops/s
Iteration  13: 2762418.713 ops/s
Iteration  14: 2717895.524 ops/s
Iteration  15: 2711276.664 ops/s
Iteration  16: 2862645.852 ops/s
Iteration  17: 2732014.981 ops/s
Iteration  18: 2892251.017 ops/s
Iteration  19: 2922244.449 ops/s
Iteration  20: 2695024.816 ops/s
Iteration  21: 2927024.435 ops/s
Iteration  22: 2864992.849 ops/s
Iteration  23: 2823199.507 ops/s
Iteration  24: 2896755.246 ops/s
Iteration  25: 2732740.408 ops/s
Iteration  26: 2895863.524 ops/s
Iteration  27: 2734692.370 ops/s
Iteration  28: 2743114.884 ops/s
Iteration  29: 2884747.240 ops/s
Iteration  30: 2784331.012 ops/s


Result "io.reactivex.rxjava3.internal.operators.single.SingleTimeoutTest._Benchmark.benchmark_disposeWhenFallback":
  2809602.711 ±(99.9%) 50052.874 ops/s [Average]
  (min, avg, max) = (2695024.816, 2809602.711, 2927024.435), stdev = 74916.792
  CI (99.9%): [2759549.837, 2859655.585] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt        Score       Error  Units
SingleTimeoutTest._Benchmark.benchmark_disposeWhenFallback  thrpt   30  2809602.711 ± 50052.874  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_overlappingWindows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_overlappingWindows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 5523.291 ops/s
# Warmup Iteration   2: 44413.727 ops/s
# Warmup Iteration   3: 125795.611 ops/s
# Warmup Iteration   4: 132671.346 ops/s
# Warmup Iteration   5: 166169.600 ops/s
# Warmup Iteration   6: 168071.150 ops/s
# Warmup Iteration   7: 158967.174 ops/s
# Warmup Iteration   8: 173324.014 ops/s
# Warmup Iteration   9: 168318.649 ops/s
# Warmup Iteration  10: 161469.229 ops/s
# Warmup Iteration  11: 165500.462 ops/s
# Warmup Iteration  12: 161100.455 ops/s
# Warmup Iteration  13: 163674.353 ops/s
# Warmup Iteration  14: 169689.028 ops/s
# Warmup Iteration  15: 162018.267 ops/s
# Warmup Iteration  16: 170622.649 ops/s
# Warmup Iteration  17: 169786.929 ops/s
# Warmup Iteration  18: 162313.885 ops/s
# Warmup Iteration  19: 165164.371 ops/s
# Warmup Iteration  20: 167936.107 ops/s
# Warmup Iteration  21: 171534.204 ops/s
# Warmup Iteration  22: 167525.792 ops/s
# Warmup Iteration  23: 157376.330 ops/s
# Warmup Iteration  24: 169521.077 ops/s
# Warmup Iteration  25: 127696.260 ops/s
# Warmup Iteration  26: 160579.530 ops/s
# Warmup Iteration  27: 167243.251 ops/s
# Warmup Iteration  28: 172233.587 ops/s
# Warmup Iteration  29: 161621.252 ops/s
# Warmup Iteration  30: 158312.570 ops/s
Iteration   1: 172131.836 ops/s
Iteration   2: 162527.833 ops/s
Iteration   3: 165224.064 ops/s
Iteration   4: 162105.530 ops/s
Iteration   5: 160632.624 ops/s
Iteration   6: 169803.107 ops/s
Iteration   7: 159424.484 ops/s
Iteration   8: 163150.784 ops/s
Iteration   9: 171421.550 ops/s
Iteration  10: 165368.843 ops/s
Iteration  11: 160070.240 ops/s
Iteration  12: 171679.536 ops/s
Iteration  13: 162441.014 ops/s
Iteration  14: 160346.158 ops/s
Iteration  15: 164727.268 ops/s
Iteration  16: 169364.224 ops/s
Iteration  17: 164746.793 ops/s
Iteration  18: 162091.830 ops/s
Iteration  19: 168491.168 ops/s
Iteration  20: 158726.989 ops/s
Iteration  21: 168483.093 ops/s
Iteration  22: 162496.034 ops/s
Iteration  23: 167131.600 ops/s
Iteration  24: 170639.570 ops/s
Iteration  25: 157459.700 ops/s
Iteration  26: 164503.985 ops/s
Iteration  27: 160889.723 ops/s
Iteration  28: 163619.406 ops/s
Iteration  29: 161816.047 ops/s
Iteration  30: 165414.458 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableWindowWithSizeTest._Benchmark.benchmark_overlappingWindows":
  164564.316 ±(99.9%) 2760.280 ops/s [Average]
  (min, avg, max) = (157459.700, 164564.316, 172131.836), stdev = 4131.457
  CI (99.9%): [161804.036, 167324.596] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableWindowWithSizeTest._Benchmark.benchmark_overlappingWindows  thrpt   30  164564.316 ± 2760.280  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarQueueTerminate$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarQueueTerminate

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48455.762 ops/s
# Warmup Iteration   2: 237001.179 ops/s
# Warmup Iteration   3: 522838.217 ops/s
# Warmup Iteration   4: 1126146.236 ops/s
# Warmup Iteration   5: 952446.631 ops/s
# Warmup Iteration   6: 1204090.456 ops/s
# Warmup Iteration   7: 1167475.616 ops/s
# Warmup Iteration   8: 1230031.679 ops/s
# Warmup Iteration   9: 1234903.142 ops/s
# Warmup Iteration  10: 1201120.787 ops/s
# Warmup Iteration  11: 1226071.564 ops/s
# Warmup Iteration  12: 1195312.749 ops/s
# Warmup Iteration  13: 1242674.598 ops/s
# Warmup Iteration  14: 1238420.960 ops/s
# Warmup Iteration  15: 1201642.633 ops/s
# Warmup Iteration  16: 1244240.398 ops/s
# Warmup Iteration  17: 1171554.562 ops/s
# Warmup Iteration  18: 1238138.045 ops/s
# Warmup Iteration  19: 1169801.041 ops/s
# Warmup Iteration  20: 1257090.039 ops/s
# Warmup Iteration  21: 1199626.290 ops/s
# Warmup Iteration  22: 1225670.492 ops/s
# Warmup Iteration  23: 1202405.758 ops/s
# Warmup Iteration  24: 1219961.473 ops/s
# Warmup Iteration  25: 1233850.246 ops/s
# Warmup Iteration  26: 1194872.305 ops/s
# Warmup Iteration  27: 1263946.266 ops/s
# Warmup Iteration  28: 1178967.055 ops/s
# Warmup Iteration  29: 1210399.884 ops/s
# Warmup Iteration  30: 1255982.171 ops/s
Iteration   1: 1218821.357 ops/s
Iteration   2: 1164371.830 ops/s
Iteration   3: 1279999.737 ops/s
Iteration   4: 1291016.507 ops/s
Iteration   5: 1195432.209 ops/s
Iteration   6: 1252077.001 ops/s
Iteration   7: 1216164.459 ops/s
Iteration   8: 1230716.790 ops/s
Iteration   9: 1186675.727 ops/s
Iteration  10: 1209300.087 ops/s
Iteration  11: 1198407.781 ops/s
Iteration  12: 1210365.003 ops/s
Iteration  13: 1245636.913 ops/s
Iteration  14: 1174944.735 ops/s
Iteration  15: 1217388.843 ops/s
Iteration  16: 1271859.799 ops/s
Iteration  17: 1224945.718 ops/s
Iteration  18: 1247045.280 ops/s
Iteration  19: 1225028.751 ops/s
Iteration  20: 1192791.148 ops/s
Iteration  21: 1255416.036 ops/s
Iteration  22: 1270417.159 ops/s
Iteration  23: 1205232.218 ops/s
Iteration  24: 1250688.682 ops/s
Iteration  25: 1268961.339 ops/s
Iteration  26: 1202376.943 ops/s
Iteration  27: 1190732.392 ops/s
Iteration  28: 1258271.704 ops/s
Iteration  29: 1202274.974 ops/s
Iteration  30: 1203576.905 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_scalarQueueTerminate":
  1225364.601 ±(99.9%) 22157.414 ops/s [Average]
  (min, avg, max) = (1164371.830, 1225364.601, 1291016.507), stdev = 33164.177
  CI (99.9%): [1203207.186, 1247522.015] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableFlatMapTest._Benchmark.benchmark_scalarQueueTerminate  thrpt   30  1225364.601 ± 22157.414  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_withBackpressure2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_withBackpressure2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 67223.160 ops/s
# Warmup Iteration   2: 291297.041 ops/s
# Warmup Iteration   3: 327339.128 ops/s
# Warmup Iteration   4: 290425.156 ops/s
# Warmup Iteration   5: 345939.582 ops/s
# Warmup Iteration   6: 356070.199 ops/s
# Warmup Iteration   7: 341168.252 ops/s
# Warmup Iteration   8: 357192.130 ops/s
# Warmup Iteration   9: 341507.999 ops/s
# Warmup Iteration  10: 347913.099 ops/s
# Warmup Iteration  11: 350444.561 ops/s
# Warmup Iteration  12: 341840.707 ops/s
# Warmup Iteration  13: 354468.335 ops/s
# Warmup Iteration  14: 346796.788 ops/s
# Warmup Iteration  15: 349880.073 ops/s
# Warmup Iteration  16: 359063.132 ops/s
# Warmup Iteration  17: 358307.502 ops/s
# Warmup Iteration  18: 332860.403 ops/s
# Warmup Iteration  19: 292430.740 ops/s
# Warmup Iteration  20: 358804.061 ops/s
# Warmup Iteration  21: 341963.865 ops/s
# Warmup Iteration  22: 352783.446 ops/s
# Warmup Iteration  23: 344088.790 ops/s
# Warmup Iteration  24: 342513.380 ops/s
# Warmup Iteration  25: 345052.114 ops/s
# Warmup Iteration  26: 344187.322 ops/s
# Warmup Iteration  27: 364012.421 ops/s
# Warmup Iteration  28: 344356.747 ops/s
# Warmup Iteration  29: 357782.463 ops/s
# Warmup Iteration  30: 341416.258 ops/s
Iteration   1: 347373.882 ops/s
Iteration   2: 352486.188 ops/s
Iteration   3: 340900.648 ops/s
Iteration   4: 356383.407 ops/s
Iteration   5: 351518.807 ops/s
Iteration   6: 331974.430 ops/s
Iteration   7: 352721.089 ops/s
Iteration   8: 341680.900 ops/s
Iteration   9: 341702.972 ops/s
Iteration  10: 351941.572 ops/s
Iteration  11: 337666.802 ops/s
Iteration  12: 334959.139 ops/s
Iteration  13: 350851.945 ops/s
Iteration  14: 332418.741 ops/s
Iteration  15: 343992.443 ops/s
Iteration  16: 346305.145 ops/s
Iteration  17: 336299.076 ops/s
Iteration  18: 347470.870 ops/s
Iteration  19: 356066.765 ops/s
Iteration  20: 357342.856 ops/s
Iteration  21: 343176.334 ops/s
Iteration  22: 362800.678 ops/s
Iteration  23: 337766.433 ops/s
Iteration  24: 345506.832 ops/s
Iteration  25: 360100.360 ops/s
Iteration  26: 344355.455 ops/s
Iteration  27: 336442.469 ops/s
Iteration  28: 352362.155 ops/s
Iteration  29: 341817.729 ops/s
Iteration  30: 353587.976 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFilterTest._Benchmark.benchmark_withBackpressure2":
  346332.470 ±(99.9%) 5570.036 ops/s [Average]
  (min, avg, max) = (331974.430, 346332.470, 362800.678), stdev = 8336.968
  CI (99.9%): [340762.434, 351902.506] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                   Mode  Cnt       Score      Error  Units
FlowableFilterTest._Benchmark.benchmark_withBackpressure2  thrpt   30  346332.470 ± 5570.036  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_shorterSequence$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_shorterSequence

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 390101.438 ops/s
# Warmup Iteration   2: 1701238.026 ops/s
# Warmup Iteration   3: 2156704.528 ops/s
# Warmup Iteration   4: 2827361.031 ops/s
# Warmup Iteration   5: 2702052.797 ops/s
# Warmup Iteration   6: 2772028.998 ops/s
# Warmup Iteration   7: 2736118.744 ops/s
# Warmup Iteration   8: 2763344.749 ops/s
# Warmup Iteration   9: 2867592.501 ops/s
# Warmup Iteration  10: 2672816.824 ops/s
# Warmup Iteration  11: 2782143.137 ops/s
# Warmup Iteration  12: 2892584.827 ops/s
# Warmup Iteration  13: 2893804.094 ops/s
# Warmup Iteration  14: 2675454.272 ops/s
# Warmup Iteration  15: 2857109.320 ops/s
# Warmup Iteration  16: 2713259.519 ops/s
# Warmup Iteration  17: 2845946.503 ops/s
# Warmup Iteration  18: 2628359.328 ops/s
# Warmup Iteration  19: 2774833.553 ops/s
# Warmup Iteration  20: 2726367.472 ops/s
# Warmup Iteration  21: 2710682.851 ops/s
# Warmup Iteration  22: 2821854.439 ops/s
# Warmup Iteration  23: 2713148.984 ops/s
# Warmup Iteration  24: 2749994.115 ops/s
# Warmup Iteration  25: 2803684.091 ops/s
# Warmup Iteration  26: 2678742.296 ops/s
# Warmup Iteration  27: 2866556.651 ops/s
# Warmup Iteration  28: 2741557.078 ops/s
# Warmup Iteration  29: 2771265.772 ops/s
# Warmup Iteration  30: 2745569.168 ops/s
Iteration   1: 2751712.181 ops/s
Iteration   2: 2704404.716 ops/s
Iteration   3: 2676186.251 ops/s
Iteration   4: 2791364.412 ops/s
Iteration   5: 2852860.095 ops/s
Iteration   6: 2698791.074 ops/s
Iteration   7: 2787197.054 ops/s
Iteration   8: 2862620.011 ops/s
Iteration   9: 2735005.440 ops/s
Iteration  10: 2848688.881 ops/s
Iteration  11: 2681305.757 ops/s
Iteration  12: 2826956.452 ops/s
Iteration  13: 2878285.922 ops/s
Iteration  14: 2808703.181 ops/s
Iteration  15: 2704619.287 ops/s
Iteration  16: 2847742.923 ops/s
Iteration  17: 2708170.476 ops/s
Iteration  18: 2734245.452 ops/s
Iteration  19: 2729999.209 ops/s
Iteration  20: 2783482.175 ops/s
Iteration  21: 2689349.764 ops/s
Iteration  22: 2813456.891 ops/s
Iteration  23: 2723419.241 ops/s
Iteration  24: 2717737.880 ops/s
Iteration  25: 2818981.221 ops/s
Iteration  26: 2658625.234 ops/s
Iteration  27: 2856204.786 ops/s
Iteration  28: 2821274.189 ops/s
Iteration  29: 2704527.980 ops/s
Iteration  30: 2817970.034 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_shorterSequence":
  2767796.272 ±(99.9%) 44431.714 ops/s [Average]
  (min, avg, max) = (2658625.234, 2767796.272, 2878285.922), stdev = 66503.303
  CI (99.9%): [2723364.559, 2812227.986] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
FlowableTakeTest2._Benchmark.benchmark_shorterSequence  thrpt   30  2767796.272 ± 44431.714  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 257600.836 ops/s
# Warmup Iteration   2: 1402170.723 ops/s
# Warmup Iteration   3: 2456455.786 ops/s
# Warmup Iteration   4: 2480662.982 ops/s
# Warmup Iteration   5: 2161428.136 ops/s
# Warmup Iteration   6: 2204277.496 ops/s
# Warmup Iteration   7: 2235042.124 ops/s
# Warmup Iteration   8: 2369766.150 ops/s
# Warmup Iteration   9: 2475603.398 ops/s
# Warmup Iteration  10: 2336894.230 ops/s
# Warmup Iteration  11: 2394780.507 ops/s
# Warmup Iteration  12: 2361268.049 ops/s
# Warmup Iteration  13: 2005435.191 ops/s
# Warmup Iteration  14: 2216178.463 ops/s
# Warmup Iteration  15: 2329487.108 ops/s
# Warmup Iteration  16: 2362439.487 ops/s
# Warmup Iteration  17: 2419248.272 ops/s
# Warmup Iteration  18: 2338351.498 ops/s
# Warmup Iteration  19: 2430226.997 ops/s
# Warmup Iteration  20: 2362909.033 ops/s
# Warmup Iteration  21: 2421771.586 ops/s
# Warmup Iteration  22: 2413333.869 ops/s
# Warmup Iteration  23: 2424668.723 ops/s
# Warmup Iteration  24: 2294973.780 ops/s
# Warmup Iteration  25: 2450071.347 ops/s
# Warmup Iteration  26: 2322675.295 ops/s
# Warmup Iteration  27: 2424672.666 ops/s
# Warmup Iteration  28: 2385174.291 ops/s
# Warmup Iteration  29: 2383049.093 ops/s
# Warmup Iteration  30: 2486231.136 ops/s
Iteration   1: 2508448.632 ops/s
Iteration   2: 2304449.288 ops/s
Iteration   3: 2463145.193 ops/s
Iteration   4: 2386200.243 ops/s
Iteration   5: 2483252.992 ops/s
Iteration   6: 2328216.266 ops/s
Iteration   7: 2510913.391 ops/s
Iteration   8: 2393925.527 ops/s
Iteration   9: 2345237.319 ops/s
Iteration  10: 2396599.801 ops/s
Iteration  11: 2374234.001 ops/s
Iteration  12: 2339947.399 ops/s
Iteration  13: 2397056.175 ops/s
Iteration  14: 2317118.630 ops/s
Iteration  15: 2360903.861 ops/s
Iteration  16: 2499054.959 ops/s
Iteration  17: 2374069.568 ops/s
Iteration  18: 2435816.236 ops/s
Iteration  19: 2348799.187 ops/s
Iteration  20: 2452244.553 ops/s
Iteration  21: 2473631.863 ops/s
Iteration  22: 2312633.773 ops/s
Iteration  23: 2426396.278 ops/s
Iteration  24: 2453029.829 ops/s
Iteration  25: 2362988.668 ops/s
Iteration  26: 2439046.730 ops/s
Iteration  27: 2370776.033 ops/s
Iteration  28: 2325541.997 ops/s
Iteration  29: 2400169.409 ops/s
Iteration  30: 2357944.417 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatWithMaybeTest._Benchmark.benchmark_backpressure":
  2398059.741 ±(99.9%) 41112.014 ops/s [Average]
  (min, avg, max) = (2304449.288, 2398059.741, 2510913.391), stdev = 61534.531
  CI (99.9%): [2356947.727, 2439171.754] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                       Mode  Cnt        Score       Error  Units
FlowableConcatWithMaybeTest._Benchmark.benchmark_backpressure  thrpt   30  2398059.741 ± 41112.014  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_undeliverableUponCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_undeliverableUponCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 29705.432 ops/s
# Warmup Iteration   2: 123672.469 ops/s
# Warmup Iteration   3: 166147.293 ops/s
# Warmup Iteration   4: 159528.346 ops/s
# Warmup Iteration   5: 177222.632 ops/s
# Warmup Iteration   6: 147104.062 ops/s
# Warmup Iteration   7: 169299.930 ops/s
# Warmup Iteration   8: 177367.403 ops/s
# Warmup Iteration   9: 176388.459 ops/s
# Warmup Iteration  10: 173416.823 ops/s
# Warmup Iteration  11: 177810.549 ops/s
# Warmup Iteration  12: 178116.269 ops/s
# Warmup Iteration  13: 169152.672 ops/s
# Warmup Iteration  14: 178980.823 ops/s
# Warmup Iteration  15: 171280.038 ops/s
# Warmup Iteration  16: 174561.163 ops/s
# Warmup Iteration  17: 189654.575 ops/s
# Warmup Iteration  18: 185781.963 ops/s
# Warmup Iteration  19: 181675.680 ops/s
# Warmup Iteration  20: 188759.019 ops/s
# Warmup Iteration  21: 188633.836 ops/s
# Warmup Iteration  22: 194261.114 ops/s
# Warmup Iteration  23: 194775.266 ops/s
# Warmup Iteration  24: 189620.989 ops/s
# Warmup Iteration  25: 182389.264 ops/s
# Warmup Iteration  26: 191230.323 ops/s
# Warmup Iteration  27: 190409.705 ops/s
# Warmup Iteration  28: 181066.905 ops/s
# Warmup Iteration  29: 194018.066 ops/s
# Warmup Iteration  30: 185405.960 ops/s
Iteration   1: 190161.541 ops/s
Iteration   2: 190984.095 ops/s
Iteration   3: 185640.021 ops/s
Iteration   4: 183950.251 ops/s
Iteration   5: 193712.150 ops/s
Iteration   6: 193235.311 ops/s
Iteration   7: 178768.424 ops/s
Iteration   8: 189842.205 ops/s
Iteration   9: 180971.343 ops/s
Iteration  10: 194856.466 ops/s
Iteration  11: 190885.826 ops/s
Iteration  12: 184665.869 ops/s
Iteration  13: 193101.092 ops/s
Iteration  14: 190461.838 ops/s
Iteration  15: 186271.898 ops/s
Iteration  16: 185332.368 ops/s
Iteration  17: 191226.731 ops/s
Iteration  18: 183632.290 ops/s
Iteration  19: 190469.773 ops/s
Iteration  20: 175353.029 ops/s
Iteration  21: 188079.493 ops/s
Iteration  22: 189713.208 ops/s
Iteration  23: 179904.543 ops/s
Iteration  24: 192675.339 ops/s
Iteration  25: 192244.536 ops/s
Iteration  26: 184029.978 ops/s
Iteration  27: 191145.518 ops/s
Iteration  28: 190404.117 ops/s
Iteration  29: 184893.799 ops/s
Iteration  30: 183622.880 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableFlatMapTest._Benchmark.benchmark_undeliverableUponCancel":
  187674.531 ±(99.9%) 3289.943 ops/s [Average]
  (min, avg, max) = (175353.029, 187674.531, 194856.466), stdev = 4924.232
  CI (99.9%): [184384.588, 190964.474] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableFlatMapTest._Benchmark.benchmark_undeliverableUponCancel  thrpt   30  187674.531 ± 3289.943  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_scalarAndRangeBackpressured$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_scalarAndRangeBackpressured

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 315860.788 ops/s
# Warmup Iteration   2: 1242360.517 ops/s
# Warmup Iteration   3: 1915852.327 ops/s
# Warmup Iteration   4: 2337981.218 ops/s
# Warmup Iteration   5: 2269845.263 ops/s
# Warmup Iteration   6: 2141788.946 ops/s
# Warmup Iteration   7: 2013312.827 ops/s
# Warmup Iteration   8: 2158575.363 ops/s
# Warmup Iteration   9: 2140558.289 ops/s
# Warmup Iteration  10: 2259027.856 ops/s
# Warmup Iteration  11: 2264218.431 ops/s
# Warmup Iteration  12: 2265308.410 ops/s
# Warmup Iteration  13: 2172518.574 ops/s
# Warmup Iteration  14: 2275475.918 ops/s
# Warmup Iteration  15: 2169886.644 ops/s
# Warmup Iteration  16: 2226610.466 ops/s
# Warmup Iteration  17: 2340466.103 ops/s
# Warmup Iteration  18: 2309303.264 ops/s
# Warmup Iteration  19: 2334747.398 ops/s
# Warmup Iteration  20: 2210588.823 ops/s
# Warmup Iteration  21: 2241594.971 ops/s
# Warmup Iteration  22: 2321039.299 ops/s
# Warmup Iteration  23: 2254855.642 ops/s
# Warmup Iteration  24: 2196509.063 ops/s
# Warmup Iteration  25: 2198463.119 ops/s
# Warmup Iteration  26: 2242932.566 ops/s
# Warmup Iteration  27: 2302732.131 ops/s
# Warmup Iteration  28: 2210467.094 ops/s
# Warmup Iteration  29: 2277630.742 ops/s
# Warmup Iteration  30: 2132889.219 ops/s
Iteration   1: 2140541.354 ops/s
Iteration   2: 2203920.578 ops/s
Iteration   3: 2254742.658 ops/s
Iteration   4: 2267874.570 ops/s
Iteration   5: 2304028.474 ops/s
Iteration   6: 2198979.681 ops/s
Iteration   7: 2233463.293 ops/s
Iteration   8: 2262426.564 ops/s
Iteration   9: 2314893.533 ops/s
Iteration  10: 2244381.381 ops/s
Iteration  11: 2187708.044 ops/s
Iteration  12: 2330481.260 ops/s
Iteration  13: 2177239.850 ops/s
Iteration  14: 2219480.547 ops/s
Iteration  15: 2242543.025 ops/s
Iteration  16: 2144490.698 ops/s
Iteration  17: 2275069.655 ops/s
Iteration  18: 2316574.657 ops/s
Iteration  19: 2172077.655 ops/s
Iteration  20: 2322907.378 ops/s
Iteration  21: 2200941.697 ops/s
Iteration  22: 2336890.705 ops/s
Iteration  23: 2192841.148 ops/s
Iteration  24: 2275877.913 ops/s
Iteration  25: 2198647.480 ops/s
Iteration  26: 2253854.300 ops/s
Iteration  27: 2315800.819 ops/s
Iteration  28: 2204918.792 ops/s
Iteration  29: 2324246.021 ops/s
Iteration  30: 2221968.285 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatTest._Benchmark.benchmark_scalarAndRangeBackpressured":
  2244660.401 ±(99.9%) 38681.482 ops/s [Average]
  (min, avg, max) = (2140541.354, 2244660.401, 2336890.705), stdev = 57896.626
  CI (99.9%): [2205978.918, 2283341.883] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                             Mode  Cnt        Score       Error  Units
FlowableConcatTest._Benchmark.benchmark_scalarAndRangeBackpressured  thrpt   30  2244660.401 ± 38681.482  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 229577.347 ops/s
# Warmup Iteration   2: 1623358.056 ops/s
# Warmup Iteration   3: 2637955.810 ops/s
# Warmup Iteration   4: 2936667.854 ops/s
# Warmup Iteration   5: 3047822.569 ops/s
# Warmup Iteration   6: 3036385.539 ops/s
# Warmup Iteration   7: 2942072.428 ops/s
# Warmup Iteration   8: 3019975.528 ops/s
# Warmup Iteration   9: 2988324.589 ops/s
# Warmup Iteration  10: 3086598.049 ops/s
# Warmup Iteration  11: 3058852.262 ops/s
# Warmup Iteration  12: 2937798.820 ops/s
# Warmup Iteration  13: 3133694.606 ops/s
# Warmup Iteration  14: 3065017.796 ops/s
# Warmup Iteration  15: 2973669.757 ops/s
# Warmup Iteration  16: 3151854.133 ops/s
# Warmup Iteration  17: 2999578.234 ops/s
# Warmup Iteration  18: 2906376.589 ops/s
# Warmup Iteration  19: 3141686.322 ops/s
# Warmup Iteration  20: 3186939.832 ops/s
# Warmup Iteration  21: 2981005.055 ops/s
# Warmup Iteration  22: 3053837.425 ops/s
# Warmup Iteration  23: 3004101.666 ops/s
# Warmup Iteration  24: 3022526.527 ops/s
# Warmup Iteration  25: 3106988.755 ops/s
# Warmup Iteration  26: 2937799.334 ops/s
# Warmup Iteration  27: 2928871.807 ops/s
# Warmup Iteration  28: 3160340.122 ops/s
# Warmup Iteration  29: 2932110.985 ops/s
# Warmup Iteration  30: 3008659.212 ops/s
Iteration   1: 3148908.592 ops/s
Iteration   2: 2951028.250 ops/s
Iteration   3: 3119515.430 ops/s
Iteration   4: 2938667.646 ops/s
Iteration   5: 2918482.302 ops/s
Iteration   6: 3130958.615 ops/s
Iteration   7: 2882963.229 ops/s
Iteration   8: 3088636.488 ops/s
Iteration   9: 3066717.970 ops/s
Iteration  10: 3017969.130 ops/s
Iteration  11: 3054788.277 ops/s
Iteration  12: 3120575.395 ops/s
Iteration  13: 3011607.949 ops/s
Iteration  14: 3143606.692 ops/s
Iteration  15: 2988000.502 ops/s
Iteration  16: 2937524.902 ops/s
Iteration  17: 3038494.570 ops/s
Iteration  18: 3137410.274 ops/s
Iteration  19: 2944415.183 ops/s
Iteration  20: 3071156.038 ops/s
Iteration  21: 2962321.618 ops/s
Iteration  22: 3032611.384 ops/s
Iteration  23: 3112903.100 ops/s
Iteration  24: 3224919.852 ops/s
Iteration  25: 2936494.305 ops/s
Iteration  26: 3198364.728 ops/s
Iteration  27: 3085139.830 ops/s
Iteration  28: 3047872.572 ops/s
Iteration  29: 2970819.468 ops/s
Iteration  30: 2997158.940 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream":
  3042667.774 ±(99.9%) 59316.655 ops/s [Average]
  (min, avg, max) = (2882963.229, 3042667.774, 3224919.852), stdev = 88782.383
  CI (99.9%): [2983351.120, 3101984.429] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                        Mode  Cnt        Score       Error  Units
FlowableUsingTest._Benchmark.benchmark_eagerDisposeResourceThenDisposeUpstream  thrpt   30  3042667.774 ± 59316.655  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 291964.126 ops/s
# Warmup Iteration   2: 835868.622 ops/s
# Warmup Iteration   3: 2666038.657 ops/s
# Warmup Iteration   4: 2562538.281 ops/s
# Warmup Iteration   5: 2830186.697 ops/s
# Warmup Iteration   6: 2887016.280 ops/s
# Warmup Iteration   7: 3035475.731 ops/s
# Warmup Iteration   8: 2802461.568 ops/s
# Warmup Iteration   9: 2952041.277 ops/s
# Warmup Iteration  10: 2913841.037 ops/s
# Warmup Iteration  11: 2942335.619 ops/s
# Warmup Iteration  12: 2999916.279 ops/s
# Warmup Iteration  13: 2829005.181 ops/s
# Warmup Iteration  14: 3009445.165 ops/s
# Warmup Iteration  15: 2934021.036 ops/s
# Warmup Iteration  16: 2968128.991 ops/s
# Warmup Iteration  17: 2967945.825 ops/s
# Warmup Iteration  18: 2882593.216 ops/s
# Warmup Iteration  19: 3027986.443 ops/s
# Warmup Iteration  20: 2891720.862 ops/s
# Warmup Iteration  21: 3024636.757 ops/s
# Warmup Iteration  22: 2882836.039 ops/s
# Warmup Iteration  23: 2954303.801 ops/s
# Warmup Iteration  24: 2974960.604 ops/s
# Warmup Iteration  25: 2811535.984 ops/s
# Warmup Iteration  26: 3030807.347 ops/s
# Warmup Iteration  27: 2864521.197 ops/s
# Warmup Iteration  28: 3068769.460 ops/s
# Warmup Iteration  29: 3007037.791 ops/s
# Warmup Iteration  30: 2874518.394 ops/s
Iteration   1: 3029259.573 ops/s
Iteration   2: 2929359.953 ops/s
Iteration   3: 2921047.387 ops/s
Iteration   4: 3009999.827 ops/s
Iteration   5: 2923464.670 ops/s
Iteration   6: 2992356.964 ops/s
Iteration   7: 2826149.011 ops/s
Iteration   8: 2899401.134 ops/s
Iteration   9: 2907939.455 ops/s
Iteration  10: 2971030.440 ops/s
Iteration  11: 2923026.493 ops/s
Iteration  12: 2966107.737 ops/s
Iteration  13: 2945387.800 ops/s
Iteration  14: 2869180.913 ops/s
Iteration  15: 2941125.208 ops/s
Iteration  16: 2893768.043 ops/s
Iteration  17: 2988526.640 ops/s
Iteration  18: 3031165.723 ops/s
Iteration  19: 2846629.670 ops/s
Iteration  20: 3079563.008 ops/s
Iteration  21: 2880145.542 ops/s
Iteration  22: 2923341.166 ops/s
Iteration  23: 2955301.210 ops/s
Iteration  24: 2970738.048 ops/s
Iteration  25: 3010724.586 ops/s
Iteration  26: 2920141.033 ops/s
Iteration  27: 3019459.639 ops/s
Iteration  28: 2945051.532 ops/s
Iteration  29: 3011875.605 ops/s
Iteration  30: 2942861.647 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource":
  2949137.655 ±(99.9%) 39117.847 ops/s [Average]
  (min, avg, max) = (2826149.011, 2949137.655, 3079563.008), stdev = 58549.757
  CI (99.9%): [2910019.808, 2988255.502] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
FlowableUsingTest._Benchmark.benchmark_nonEagerDisposeUpstreamThenDisposeResource  thrpt   30  2949137.655 ± 39117.847  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_shouldNotEmitUntilAfterSubscription$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_shouldNotEmitUntilAfterSubscription

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21217.824 ops/s
# Warmup Iteration   2: 103473.747 ops/s
# Warmup Iteration   3: 163453.555 ops/s
# Warmup Iteration   4: 179262.035 ops/s
# Warmup Iteration   5: 175093.054 ops/s
# Warmup Iteration   6: 168125.046 ops/s
# Warmup Iteration   7: 170133.947 ops/s
# Warmup Iteration   8: 178934.093 ops/s
# Warmup Iteration   9: 178395.511 ops/s
# Warmup Iteration  10: 177023.731 ops/s
# Warmup Iteration  11: 178983.509 ops/s
# Warmup Iteration  12: 176919.689 ops/s
# Warmup Iteration  13: 176177.395 ops/s
# Warmup Iteration  14: 183559.844 ops/s
# Warmup Iteration  15: 176662.106 ops/s
# Warmup Iteration  16: 177322.289 ops/s
# Warmup Iteration  17: 183960.040 ops/s
# Warmup Iteration  18: 173184.885 ops/s
# Warmup Iteration  19: 181660.236 ops/s
# Warmup Iteration  20: 181235.129 ops/s
# Warmup Iteration  21: 175682.318 ops/s
# Warmup Iteration  22: 175985.973 ops/s
# Warmup Iteration  23: 179733.587 ops/s
# Warmup Iteration  24: 172718.804 ops/s
# Warmup Iteration  25: 177397.968 ops/s
# Warmup Iteration  26: 176930.391 ops/s
# Warmup Iteration  27: 172725.255 ops/s
# Warmup Iteration  28: 173033.526 ops/s
# Warmup Iteration  29: 181404.121 ops/s
# Warmup Iteration  30: 172391.862 ops/s
Iteration   1: 179578.540 ops/s
Iteration   2: 180228.987 ops/s
Iteration   3: 177847.679 ops/s
Iteration   4: 178835.203 ops/s
Iteration   5: 175030.727 ops/s
Iteration   6: 177340.072 ops/s
Iteration   7: 183494.188 ops/s
Iteration   8: 170649.623 ops/s
Iteration   9: 180466.659 ops/s
Iteration  10: 182783.298 ops/s
Iteration  11: 173671.423 ops/s
Iteration  12: 181691.529 ops/s
Iteration  13: 184809.793 ops/s
Iteration  14: 161765.787 ops/s
Iteration  15: 176388.819 ops/s
Iteration  16: 177410.477 ops/s
Iteration  17: 175762.493 ops/s
Iteration  18: 180721.680 ops/s
Iteration  19: 173099.535 ops/s
Iteration  20: 184942.969 ops/s
Iteration  21: 177279.721 ops/s
Iteration  22: 182990.480 ops/s
Iteration  23: 178665.303 ops/s
Iteration  24: 180162.023 ops/s
Iteration  25: 179273.930 ops/s
Iteration  26: 174453.091 ops/s
Iteration  27: 175062.950 ops/s
Iteration  28: 138571.941 ops/s
Iteration  29: 168931.369 ops/s
Iteration  30: 168563.623 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_shouldNotEmitUntilAfterSubscription":
  176015.797 ±(99.9%) 5847.671 ops/s [Average]
  (min, avg, max) = (138571.941, 176015.797, 184942.969), stdev = 8752.519
  CI (99.9%): [170168.126, 181863.468] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                   Mode  Cnt       Score      Error  Units
FlowableScanTest._Benchmark.benchmark_shouldNotEmitUntilAfterSubscription  thrpt   30  176015.797 ± 5847.671  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanTake$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanTake

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 252621.415 ops/s
# Warmup Iteration   2: 893337.403 ops/s
# Warmup Iteration   3: 2183812.366 ops/s
# Warmup Iteration   4: 2106654.536 ops/s
# Warmup Iteration   5: 2212240.265 ops/s
# Warmup Iteration   6: 1869724.384 ops/s
# Warmup Iteration   7: 2095345.215 ops/s
# Warmup Iteration   8: 2230612.376 ops/s
# Warmup Iteration   9: 2134244.092 ops/s
# Warmup Iteration  10: 2209108.705 ops/s
# Warmup Iteration  11: 2130403.685 ops/s
# Warmup Iteration  12: 2136408.339 ops/s
# Warmup Iteration  13: 2223731.000 ops/s
# Warmup Iteration  14: 2216345.407 ops/s
# Warmup Iteration  15: 2181728.050 ops/s
# Warmup Iteration  16: 2240940.536 ops/s
# Warmup Iteration  17: 2129179.888 ops/s
# Warmup Iteration  18: 2222478.910 ops/s
# Warmup Iteration  19: 2091801.223 ops/s
# Warmup Iteration  20: 2164662.481 ops/s
# Warmup Iteration  21: 2186351.464 ops/s
# Warmup Iteration  22: 2125876.367 ops/s
# Warmup Iteration  23: 2219599.105 ops/s
# Warmup Iteration  24: 2212433.031 ops/s
# Warmup Iteration  25: 2191856.983 ops/s
# Warmup Iteration  26: 2172258.840 ops/s
# Warmup Iteration  27: 2159511.283 ops/s
# Warmup Iteration  28: 2127753.383 ops/s
# Warmup Iteration  29: 2278185.452 ops/s
# Warmup Iteration  30: 2244072.996 ops/s
Iteration   1: 2158524.403 ops/s
Iteration   2: 2234739.405 ops/s
Iteration   3: 2238267.495 ops/s
Iteration   4: 2176379.277 ops/s
Iteration   5: 2085056.232 ops/s
Iteration   6: 2259546.791 ops/s
Iteration   7: 2172665.480 ops/s
Iteration   8: 2176137.898 ops/s
Iteration   9: 2252378.562 ops/s
Iteration  10: 2145871.483 ops/s
Iteration  11: 2235221.219 ops/s
Iteration  12: 2285045.134 ops/s
Iteration  13: 2066033.499 ops/s
Iteration  14: 2173726.759 ops/s
Iteration  15: 2225926.715 ops/s
Iteration  16: 2078677.433 ops/s
Iteration  17: 2211757.067 ops/s
Iteration  18: 2213563.722 ops/s
Iteration  19: 2167510.385 ops/s
Iteration  20: 2190147.651 ops/s
Iteration  21: 2218030.730 ops/s
Iteration  22: 2172382.712 ops/s
Iteration  23: 2215755.936 ops/s
Iteration  24: 2164201.542 ops/s
Iteration  25: 2151901.583 ops/s
Iteration  26: 2231705.168 ops/s
Iteration  27: 2098890.187 ops/s
Iteration  28: 2125014.554 ops/s
Iteration  29: 2225144.301 ops/s
Iteration  30: 2122608.914 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableScanTest._Benchmark.benchmark_scanTake":
  2182427.075 ±(99.9%) 37592.786 ops/s [Average]
  (min, avg, max) = (2066033.499, 2182427.075, 2285045.134), stdev = 56267.116
  CI (99.9%): [2144834.289, 2220019.860] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                        Mode  Cnt        Score       Error  Units
FlowableScanTest._Benchmark.benchmark_scanTake  thrpt   30  2182427.075 ± 37592.786  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_backpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_backpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 176452.454 ops/s
# Warmup Iteration   2: 794977.851 ops/s
# Warmup Iteration   3: 1025721.201 ops/s
# Warmup Iteration   4: 1083749.699 ops/s
# Warmup Iteration   5: 1020196.787 ops/s
# Warmup Iteration   6: 963172.148 ops/s
# Warmup Iteration   7: 1012007.495 ops/s
# Warmup Iteration   8: 1056527.184 ops/s
# Warmup Iteration   9: 1060600.876 ops/s
# Warmup Iteration  10: 1045834.254 ops/s
# Warmup Iteration  11: 1033174.203 ops/s
# Warmup Iteration  12: 1077629.849 ops/s
# Warmup Iteration  13: 1065412.072 ops/s
# Warmup Iteration  14: 1071484.051 ops/s
# Warmup Iteration  15: 1021133.804 ops/s
# Warmup Iteration  16: 1053437.416 ops/s
# Warmup Iteration  17: 1049360.747 ops/s
# Warmup Iteration  18: 1070433.759 ops/s
# Warmup Iteration  19: 979562.192 ops/s
# Warmup Iteration  20: 1039160.632 ops/s
# Warmup Iteration  21: 1047348.990 ops/s
# Warmup Iteration  22: 1045140.562 ops/s
# Warmup Iteration  23: 1046377.688 ops/s
# Warmup Iteration  24: 1030775.882 ops/s
# Warmup Iteration  25: 1117125.904 ops/s
# Warmup Iteration  26: 1081356.637 ops/s
# Warmup Iteration  27: 1042181.965 ops/s
# Warmup Iteration  28: 1044487.011 ops/s
# Warmup Iteration  29: 1077182.707 ops/s
# Warmup Iteration  30: 1021560.025 ops/s
Iteration   1: 1058495.851 ops/s
Iteration   2: 1040606.923 ops/s
Iteration   3: 1051876.649 ops/s
Iteration   4: 1095844.236 ops/s
Iteration   5: 1032366.056 ops/s
Iteration   6: 1068538.041 ops/s
Iteration   7: 1088405.414 ops/s
Iteration   8: 1045552.331 ops/s
Iteration   9: 1064420.329 ops/s
Iteration  10: 1049340.630 ops/s
Iteration  11: 1067925.630 ops/s
Iteration  12: 1037818.591 ops/s
Iteration  13: 1040238.752 ops/s
Iteration  14: 1052482.220 ops/s
Iteration  15: 1050808.601 ops/s
Iteration  16: 1063288.721 ops/s
Iteration  17: 1090268.709 ops/s
Iteration  18: 1050291.132 ops/s
Iteration  19: 1105475.484 ops/s
Iteration  20: 1082972.460 ops/s
Iteration  21: 1015742.027 ops/s
Iteration  22: 1060075.091 ops/s
Iteration  23: 904731.093 ops/s
Iteration  24: 1042451.165 ops/s
Iteration  25: 1082244.881 ops/s
Iteration  26: 1070107.347 ops/s
Iteration  27: 1070468.063 ops/s
Iteration  28: 1094364.986 ops/s
Iteration  29: 1027415.166 ops/s
Iteration  30: 1096712.355 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableConcatMapSchedulerTest._Benchmark.benchmark_backpressure":
  1056710.964 ±(99.9%) 24427.205 ops/s [Average]
  (min, avg, max) = (904731.093, 1056710.964, 1105475.484), stdev = 36561.494
  CI (99.9%): [1032283.759, 1081138.170] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt        Score       Error  Units
FlowableConcatMapSchedulerTest._Benchmark.benchmark_backpressure  thrpt   30  1056710.964 ± 24427.205  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_takeZero$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_takeZero

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 492003.629 ops/s
# Warmup Iteration   2: 2742713.374 ops/s
# Warmup Iteration   3: 3387061.060 ops/s
# Warmup Iteration   4: 3807242.380 ops/s
# Warmup Iteration   5: 3958862.710 ops/s
# Warmup Iteration   6: 3805234.617 ops/s
# Warmup Iteration   7: 3760746.928 ops/s
# Warmup Iteration   8: 4104070.844 ops/s
# Warmup Iteration   9: 3766978.856 ops/s
# Warmup Iteration  10: 3941159.930 ops/s
# Warmup Iteration  11: 3896452.688 ops/s
# Warmup Iteration  12: 3913058.001 ops/s
# Warmup Iteration  13: 4028125.898 ops/s
# Warmup Iteration  14: 3775624.602 ops/s
# Warmup Iteration  15: 4082383.166 ops/s
# Warmup Iteration  16: 3839517.001 ops/s
# Warmup Iteration  17: 3818262.067 ops/s
# Warmup Iteration  18: 4074473.768 ops/s
# Warmup Iteration  19: 3992373.722 ops/s
# Warmup Iteration  20: 3931299.118 ops/s
# Warmup Iteration  21: 4090619.248 ops/s
# Warmup Iteration  22: 3934717.769 ops/s
# Warmup Iteration  23: 4041493.427 ops/s
# Warmup Iteration  24: 3833643.969 ops/s
# Warmup Iteration  25: 4054604.049 ops/s
# Warmup Iteration  26: 3928039.101 ops/s
# Warmup Iteration  27: 3936710.399 ops/s
# Warmup Iteration  28: 3983438.520 ops/s
# Warmup Iteration  29: 3762574.637 ops/s
# Warmup Iteration  30: 3999418.933 ops/s
Iteration   1: 3968721.270 ops/s
Iteration   2: 3982019.618 ops/s
Iteration   3: 3825060.297 ops/s
Iteration   4: 4078414.084 ops/s
Iteration   5: 4040369.080 ops/s
Iteration   6: 3894040.907 ops/s
Iteration   7: 3957517.500 ops/s
Iteration   8: 4185375.658 ops/s
Iteration   9: 3871952.508 ops/s
Iteration  10: 4034730.503 ops/s
Iteration  11: 4195327.954 ops/s
Iteration  12: 3790828.094 ops/s
Iteration  13: 3929215.526 ops/s
Iteration  14: 4028325.056 ops/s
Iteration  15: 4015501.572 ops/s
Iteration  16: 3971424.343 ops/s
Iteration  17: 3930211.558 ops/s
Iteration  18: 3979908.764 ops/s
Iteration  19: 4025216.638 ops/s
Iteration  20: 3975393.488 ops/s
Iteration  21: 3847484.301 ops/s
Iteration  22: 4006783.981 ops/s
Iteration  23: 3926461.170 ops/s
Iteration  24: 3899332.094 ops/s
Iteration  25: 3944864.320 ops/s
Iteration  26: 3937876.968 ops/s
Iteration  27: 4041595.395 ops/s
Iteration  28: 3833676.601 ops/s
Iteration  29: 3978506.916 ops/s
Iteration  30: 4051165.686 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableTakeTest2._Benchmark.benchmark_takeZero":
  3971576.728 ±(99.9%) 62521.953 ops/s [Average]
  (min, avg, max) = (3790828.094, 3971576.728, 4195327.954), stdev = 93579.923
  CI (99.9%): [3909054.776, 4034098.681] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score       Error  Units
FlowableTakeTest2._Benchmark.benchmark_takeZero  thrpt   30  3971576.728 ± 62521.953  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_coldSourceConsumedWithoutManyOthers$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_coldSourceConsumedWithoutManyOthers

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 297447.106 ops/s
# Warmup Iteration   2: 1159569.361 ops/s
# Warmup Iteration   3: 1444455.487 ops/s
# Warmup Iteration   4: 1685581.580 ops/s
# Warmup Iteration   5: 1745537.897 ops/s
# Warmup Iteration   6: 1746466.605 ops/s
# Warmup Iteration   7: 1677998.485 ops/s
# Warmup Iteration   8: 1714869.187 ops/s
# Warmup Iteration   9: 1711760.201 ops/s
# Warmup Iteration  10: 1667037.416 ops/s
# Warmup Iteration  11: 1717069.857 ops/s
# Warmup Iteration  12: 1781349.333 ops/s
# Warmup Iteration  13: 1666692.503 ops/s
# Warmup Iteration  14: 1759304.567 ops/s
# Warmup Iteration  15: 1778265.175 ops/s
# Warmup Iteration  16: 1679378.122 ops/s
# Warmup Iteration  17: 1743069.396 ops/s
# Warmup Iteration  18: 1656593.643 ops/s
# Warmup Iteration  19: 1723609.036 ops/s
# Warmup Iteration  20: 1742731.781 ops/s
# Warmup Iteration  21: 1704619.258 ops/s
# Warmup Iteration  22: 1667961.180 ops/s
# Warmup Iteration  23: 1736059.862 ops/s
# Warmup Iteration  24: 1705882.498 ops/s
# Warmup Iteration  25: 1753460.988 ops/s
# Warmup Iteration  26: 1684071.604 ops/s
# Warmup Iteration  27: 1753911.538 ops/s
# Warmup Iteration  28: 1685557.363 ops/s
# Warmup Iteration  29: 1773897.445 ops/s
# Warmup Iteration  30: 1703533.430 ops/s
Iteration   1: 1700121.032 ops/s
Iteration   2: 1768836.086 ops/s
Iteration   3: 1636323.956 ops/s
Iteration   4: 1706499.187 ops/s
Iteration   5: 1773594.052 ops/s
Iteration   6: 1700026.209 ops/s
Iteration   7: 1770099.708 ops/s
Iteration   8: 1658712.031 ops/s
Iteration   9: 1791845.791 ops/s
Iteration  10: 1712447.162 ops/s
Iteration  11: 1733953.613 ops/s
Iteration  12: 1754132.099 ops/s
Iteration  13: 1662111.746 ops/s
Iteration  14: 1666763.875 ops/s
Iteration  15: 1694845.831 ops/s
Iteration  16: 1575177.163 ops/s
Iteration  17: 1551897.033 ops/s
Iteration  18: 1659134.163 ops/s
Iteration  19: 1722627.620 ops/s
Iteration  20: 1711002.436 ops/s
Iteration  21: 1714610.639 ops/s
Iteration  22: 1761610.487 ops/s
Iteration  23: 1671203.012 ops/s
Iteration  24: 1788727.040 ops/s
Iteration  25: 1771816.680 ops/s
Iteration  26: 1645890.542 ops/s
Iteration  27: 1810124.970 ops/s
Iteration  28: 1672235.449 ops/s
Iteration  29: 1754215.313 ops/s
Iteration  30: 1696089.644 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_coldSourceConsumedWithoutManyOthers":
  1707889.152 ±(99.9%) 41280.651 ops/s [Average]
  (min, avg, max) = (1551897.033, 1707889.152, 1810124.970), stdev = 61786.940
  CI (99.9%): [1666608.501, 1749169.803] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                             Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_coldSourceConsumedWithoutManyOthers  thrpt   30  1707889.152 ± 41280.651  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_backpressureNoSignal$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_backpressureNoSignal

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 240677.431 ops/s
# Warmup Iteration   2: 869101.844 ops/s
# Warmup Iteration   3: 1233941.507 ops/s
# Warmup Iteration   4: 1296651.411 ops/s
# Warmup Iteration   5: 1316869.310 ops/s
# Warmup Iteration   6: 1243064.020 ops/s
# Warmup Iteration   7: 1322076.040 ops/s
# Warmup Iteration   8: 1304409.070 ops/s
# Warmup Iteration   9: 1266172.012 ops/s
# Warmup Iteration  10: 1313629.523 ops/s
# Warmup Iteration  11: 1289101.298 ops/s
# Warmup Iteration  12: 1326532.412 ops/s
# Warmup Iteration  13: 1272971.609 ops/s
# Warmup Iteration  14: 1265080.319 ops/s
# Warmup Iteration  15: 1270995.080 ops/s
# Warmup Iteration  16: 1288352.258 ops/s
# Warmup Iteration  17: 1287824.044 ops/s
# Warmup Iteration  18: 1364244.280 ops/s
# Warmup Iteration  19: 1256643.371 ops/s
# Warmup Iteration  20: 1356165.062 ops/s
# Warmup Iteration  21: 1163766.275 ops/s
# Warmup Iteration  22: 1279229.703 ops/s
# Warmup Iteration  23: 1338318.381 ops/s
# Warmup Iteration  24: 1333272.454 ops/s
# Warmup Iteration  25: 1380593.409 ops/s
# Warmup Iteration  26: 1310771.871 ops/s
# Warmup Iteration  27: 1289801.525 ops/s
# Warmup Iteration  28: 1364970.369 ops/s
# Warmup Iteration  29: 1291740.683 ops/s
# Warmup Iteration  30: 1359813.413 ops/s
Iteration   1: 1263780.181 ops/s
Iteration   2: 1273774.535 ops/s
Iteration   3: 1370055.160 ops/s
Iteration   4: 1292113.670 ops/s
Iteration   5: 1322805.279 ops/s
Iteration   6: 1313103.112 ops/s
Iteration   7: 1323399.420 ops/s
Iteration   8: 1350334.039 ops/s
Iteration   9: 1271279.380 ops/s
Iteration  10: 1317041.531 ops/s
Iteration  11: 1354075.719 ops/s
Iteration  12: 1295462.146 ops/s
Iteration  13: 1360847.095 ops/s
Iteration  14: 1317031.146 ops/s
Iteration  15: 1307396.558 ops/s
Iteration  16: 1365675.012 ops/s
Iteration  17: 1294736.820 ops/s
Iteration  18: 1366400.006 ops/s
Iteration  19: 1310714.054 ops/s
Iteration  20: 1361224.306 ops/s
Iteration  21: 1281966.482 ops/s
Iteration  22: 1317833.182 ops/s
Iteration  23: 1355593.459 ops/s
Iteration  24: 1268193.917 ops/s
Iteration  25: 1388787.576 ops/s
Iteration  26: 1265723.029 ops/s
Iteration  27: 1339088.503 ops/s
Iteration  28: 1317060.289 ops/s
Iteration  29: 1344943.633 ops/s
Iteration  30: 1272984.900 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableWithLatestFromTest._Benchmark.benchmark_backpressureNoSignal":
  1319447.471 ±(99.9%) 24339.886 ops/s [Average]
  (min, avg, max) = (1263780.181, 1319447.471, 1388787.576), stdev = 36430.798
  CI (99.9%): [1295107.586, 1343787.357] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt        Score       Error  Units
FlowableWithLatestFromTest._Benchmark.benchmark_backpressureNoSignal  thrpt   30  1319447.471 ± 24339.886  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeTakeHidden$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeTakeHidden

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 73923.662 ops/s
# Warmup Iteration   2: 241418.303 ops/s
# Warmup Iteration   3: 560440.331 ops/s
# Warmup Iteration   4: 538152.489 ops/s
# Warmup Iteration   5: 636698.338 ops/s
# Warmup Iteration   6: 645417.277 ops/s
# Warmup Iteration   7: 609443.707 ops/s
# Warmup Iteration   8: 648133.931 ops/s
# Warmup Iteration   9: 606212.398 ops/s
# Warmup Iteration  10: 614244.349 ops/s
# Warmup Iteration  11: 638949.784 ops/s
# Warmup Iteration  12: 603621.442 ops/s
# Warmup Iteration  13: 629732.545 ops/s
# Warmup Iteration  14: 649170.933 ops/s
# Warmup Iteration  15: 649201.453 ops/s
# Warmup Iteration  16: 609536.159 ops/s
# Warmup Iteration  17: 624651.351 ops/s
# Warmup Iteration  18: 641721.416 ops/s
# Warmup Iteration  19: 602602.282 ops/s
# Warmup Iteration  20: 641170.962 ops/s
# Warmup Iteration  21: 617778.734 ops/s
# Warmup Iteration  22: 621299.438 ops/s
# Warmup Iteration  23: 605787.914 ops/s
# Warmup Iteration  24: 626764.251 ops/s
# Warmup Iteration  25: 629514.840 ops/s
# Warmup Iteration  26: 618483.162 ops/s
# Warmup Iteration  27: 648040.749 ops/s
# Warmup Iteration  28: 609112.272 ops/s
# Warmup Iteration  29: 632524.107 ops/s
# Warmup Iteration  30: 605421.694 ops/s
Iteration   1: 631875.480 ops/s
Iteration   2: 632203.330 ops/s
Iteration   3: 639175.263 ops/s
Iteration   4: 615660.805 ops/s
Iteration   5: 637589.461 ops/s
Iteration   6: 609212.277 ops/s
Iteration   7: 622642.897 ops/s
Iteration   8: 633060.573 ops/s
Iteration   9: 615475.181 ops/s
Iteration  10: 627653.718 ops/s
Iteration  11: 528948.056 ops/s
Iteration  12: 616171.774 ops/s
Iteration  13: 630004.472 ops/s
Iteration  14: 612792.868 ops/s
Iteration  15: 636650.381 ops/s
Iteration  16: 630662.675 ops/s
Iteration  17: 623818.228 ops/s
Iteration  18: 631779.216 ops/s
Iteration  19: 626840.662 ops/s
Iteration  20: 644831.223 ops/s
Iteration  21: 611668.833 ops/s
Iteration  22: 625515.132 ops/s
Iteration  23: 662116.760 ops/s
Iteration  24: 639919.444 ops/s
Iteration  25: 644632.336 ops/s
Iteration  26: 609425.840 ops/s
Iteration  27: 639220.148 ops/s
Iteration  28: 626610.770 ops/s
Iteration  29: 615169.157 ops/s
Iteration  30: 604033.443 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableFlatMapStreamTest._Benchmark.benchmark_rangeTakeHidden":
  624178.680 ±(99.9%) 14773.779 ops/s [Average]
  (min, avg, max) = (528948.056, 624178.680, 662116.760), stdev = 22112.699
  CI (99.9%): [609404.901, 638952.459] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableFlatMapStreamTest._Benchmark.benchmark_rangeTakeHidden  thrpt   30  624178.680 ± 14773.779  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureAll$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureAll

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 267573.975 ops/s
# Warmup Iteration   2: 1810234.927 ops/s
# Warmup Iteration   3: 2147365.044 ops/s
# Warmup Iteration   4: 2714090.699 ops/s
# Warmup Iteration   5: 2776711.017 ops/s
# Warmup Iteration   6: 2810982.515 ops/s
# Warmup Iteration   7: 2809170.954 ops/s
# Warmup Iteration   8: 2709672.370 ops/s
# Warmup Iteration   9: 2772742.331 ops/s
# Warmup Iteration  10: 2754790.627 ops/s
# Warmup Iteration  11: 2797542.053 ops/s
# Warmup Iteration  12: 2788886.390 ops/s
# Warmup Iteration  13: 2805596.878 ops/s
# Warmup Iteration  14: 2703072.854 ops/s
# Warmup Iteration  15: 2873165.999 ops/s
# Warmup Iteration  16: 2783004.416 ops/s
# Warmup Iteration  17: 2743307.881 ops/s
# Warmup Iteration  18: 2861250.130 ops/s
# Warmup Iteration  19: 2724105.851 ops/s
# Warmup Iteration  20: 2731161.760 ops/s
# Warmup Iteration  21: 2794896.971 ops/s
# Warmup Iteration  22: 2729249.263 ops/s
# Warmup Iteration  23: 2774371.243 ops/s
# Warmup Iteration  24: 2804206.305 ops/s
# Warmup Iteration  25: 2791113.869 ops/s
# Warmup Iteration  26: 2802004.418 ops/s
# Warmup Iteration  27: 2818398.193 ops/s
# Warmup Iteration  28: 2787584.159 ops/s
# Warmup Iteration  29: 2914199.807 ops/s
# Warmup Iteration  30: 2759999.280 ops/s
Iteration   1: 2858947.601 ops/s
Iteration   2: 2692774.468 ops/s
Iteration   3: 2858658.288 ops/s
Iteration   4: 2743562.471 ops/s
Iteration   5: 2707761.196 ops/s
Iteration   6: 2767026.607 ops/s
Iteration   7: 2917209.261 ops/s
Iteration   8: 2772401.995 ops/s
Iteration   9: 2880322.498 ops/s
Iteration  10: 2741779.699 ops/s
Iteration  11: 2856645.920 ops/s
Iteration  12: 2779698.193 ops/s
Iteration  13: 2747226.904 ops/s
Iteration  14: 2861941.945 ops/s
Iteration  15: 2743225.505 ops/s
Iteration  16: 2746477.456 ops/s
Iteration  17: 2891754.372 ops/s
Iteration  18: 2708112.125 ops/s
Iteration  19: 2788022.034 ops/s
Iteration  20: 2921278.011 ops/s
Iteration  21: 2886343.734 ops/s
Iteration  22: 2644060.178 ops/s
Iteration  23: 2816124.493 ops/s
Iteration  24: 2777720.532 ops/s
Iteration  25: 2806662.762 ops/s
Iteration  26: 2884110.928 ops/s
Iteration  27: 2729984.506 ops/s
Iteration  28: 2880889.510 ops/s
Iteration  29: 2842403.320 ops/s
Iteration  30: 2740373.355 ops/s


Result "io.reactivex.rxjava3.internal.jdk8.FlowableMapOptionalTest._Benchmark.benchmark_backpressureAll":
  2799783.329 ±(99.9%) 49629.944 ops/s [Average]
  (min, avg, max) = (2644060.178, 2799783.329, 2921278.011), stdev = 74283.770
  CI (99.9%): [2750153.384, 2849413.273] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt        Score       Error  Units
FlowableMapOptionalTest._Benchmark.benchmark_backpressureAll  thrpt   30  2799783.329 ± 49629.944  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_normalBackpressuredPolls$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_normalBackpressuredPolls

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 112872.583 ops/s
# Warmup Iteration   2: 369173.248 ops/s
# Warmup Iteration   3: 784522.271 ops/s
# Warmup Iteration   4: 874559.434 ops/s
# Warmup Iteration   5: 971991.593 ops/s
# Warmup Iteration   6: 1041992.379 ops/s
# Warmup Iteration   7: 1035256.652 ops/s
# Warmup Iteration   8: 1062302.011 ops/s
# Warmup Iteration   9: 1084558.462 ops/s
# Warmup Iteration  10: 1102279.384 ops/s
# Warmup Iteration  11: 1052542.294 ops/s
# Warmup Iteration  12: 1026212.557 ops/s
# Warmup Iteration  13: 1063271.239 ops/s
# Warmup Iteration  14: 1028566.182 ops/s
# Warmup Iteration  15: 1067333.707 ops/s
# Warmup Iteration  16: 1050085.323 ops/s
# Warmup Iteration  17: 1034048.573 ops/s
# Warmup Iteration  18: 1083404.167 ops/s
# Warmup Iteration  19: 1027761.063 ops/s
# Warmup Iteration  20: 1056019.885 ops/s
# Warmup Iteration  21: 1047980.276 ops/s
# Warmup Iteration  22: 1038756.294 ops/s
# Warmup Iteration  23: 1086998.110 ops/s
# Warmup Iteration  24: 1036107.176 ops/s
# Warmup Iteration  25: 1035789.645 ops/s
# Warmup Iteration  26: 1074513.717 ops/s
# Warmup Iteration  27: 1042665.421 ops/s
# Warmup Iteration  28: 1028958.117 ops/s
# Warmup Iteration  29: 1099508.356 ops/s
# Warmup Iteration  30: 1022331.277 ops/s
Iteration   1: 1074181.961 ops/s
Iteration   2: 1026092.953 ops/s
Iteration   3: 1047091.203 ops/s
Iteration   4: 1044547.289 ops/s
Iteration   5: 823520.200 ops/s
Iteration   6: 1029987.243 ops/s
Iteration   7: 1066835.049 ops/s
Iteration   8: 1072698.785 ops/s
Iteration   9: 1035276.069 ops/s
Iteration  10: 1048822.004 ops/s
Iteration  11: 1052323.461 ops/s
Iteration  12: 1021268.619 ops/s
Iteration  13: 1019695.248 ops/s
Iteration  14: 1038783.498 ops/s
Iteration  15: 1081313.172 ops/s
Iteration  16: 987007.958 ops/s
Iteration  17: 1093874.713 ops/s
Iteration  18: 1021133.116 ops/s
Iteration  19: 1061973.908 ops/s
Iteration  20: 1012941.398 ops/s
Iteration  21: 1056384.520 ops/s
Iteration  22: 1081172.041 ops/s
Iteration  23: 1032459.163 ops/s
Iteration  24: 1049683.089 ops/s
Iteration  25: 997941.433 ops/s
Iteration  26: 1069758.311 ops/s
Iteration  27: 1049961.262 ops/s
Iteration  28: 1033818.690 ops/s
Iteration  29: 1065180.136 ops/s
Iteration  30: 1051160.117 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishTest._Benchmark.benchmark_normalBackpressuredPolls":
  1038229.554 ±(99.9%) 31815.371 ops/s [Average]
  (min, avg, max) = (823520.200, 1038229.554, 1093874.713), stdev = 47619.754
  CI (99.9%): [1006414.182, 1070044.925] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                           Mode  Cnt        Score       Error  Units
FlowablePublishTest._Benchmark.benchmark_normalBackpressuredPolls  thrpt   30  1038229.554 ± 31815.371  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_fixedReplenishPattern$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_fixedReplenishPattern

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 24953.214 ops/s
# Warmup Iteration   2: 73398.392 ops/s
# Warmup Iteration   3: 153812.308 ops/s
# Warmup Iteration   4: 172071.366 ops/s
# Warmup Iteration   5: 167094.864 ops/s
# Warmup Iteration   6: 185686.204 ops/s
# Warmup Iteration   7: 179860.105 ops/s
# Warmup Iteration   8: 179136.540 ops/s
# Warmup Iteration   9: 189263.410 ops/s
# Warmup Iteration  10: 178254.421 ops/s
# Warmup Iteration  11: 179161.394 ops/s
# Warmup Iteration  12: 187145.904 ops/s
# Warmup Iteration  13: 175472.748 ops/s
# Warmup Iteration  14: 187313.525 ops/s
# Warmup Iteration  15: 179291.823 ops/s
# Warmup Iteration  16: 181921.637 ops/s
# Warmup Iteration  17: 192807.817 ops/s
# Warmup Iteration  18: 172759.339 ops/s
# Warmup Iteration  19: 167361.411 ops/s
# Warmup Iteration  20: 187854.980 ops/s
# Warmup Iteration  21: 178288.540 ops/s
# Warmup Iteration  22: 183972.153 ops/s
# Warmup Iteration  23: 184192.780 ops/s
# Warmup Iteration  24: 186310.567 ops/s
# Warmup Iteration  25: 182584.937 ops/s
# Warmup Iteration  26: 187504.537 ops/s
# Warmup Iteration  27: 171595.365 ops/s
# Warmup Iteration  28: 187335.197 ops/s
# Warmup Iteration  29: 187264.514 ops/s
# Warmup Iteration  30: 178744.126 ops/s
Iteration   1: 186061.774 ops/s
Iteration   2: 177206.365 ops/s
Iteration   3: 183851.853 ops/s
Iteration   4: 188297.606 ops/s
Iteration   5: 177000.021 ops/s
Iteration   6: 188985.283 ops/s
Iteration   7: 174093.664 ops/s
Iteration   8: 181857.723 ops/s
Iteration   9: 184213.602 ops/s
Iteration  10: 179828.395 ops/s
Iteration  11: 179575.483 ops/s
Iteration  12: 186995.520 ops/s
Iteration  13: 178747.510 ops/s
Iteration  14: 188744.945 ops/s
Iteration  15: 184751.640 ops/s
Iteration  16: 175483.636 ops/s
Iteration  17: 190053.860 ops/s
Iteration  18: 177565.393 ops/s
Iteration  19: 182323.321 ops/s
Iteration  20: 189896.114 ops/s
Iteration  21: 175957.144 ops/s
Iteration  22: 184373.064 ops/s
Iteration  23: 178825.585 ops/s
Iteration  24: 177914.723 ops/s
Iteration  25: 183279.147 ops/s
Iteration  26: 176118.158 ops/s
Iteration  27: 182748.416 ops/s
Iteration  28: 187759.385 ops/s
Iteration  29: 176855.210 ops/s
Iteration  30: 176626.303 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableObserveOnTest._Benchmark.benchmark_fixedReplenishPattern":
  181866.361 ±(99.9%) 3296.775 ops/s [Average]
  (min, avg, max) = (174093.664, 181866.361, 190053.860), stdev = 4934.458
  CI (99.9%): [178569.586, 185163.137] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                          Mode  Cnt       Score      Error  Units
FlowableObserveOnTest._Benchmark.benchmark_fixedReplenishPattern  thrpt   30  181866.361 ± 3296.775  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_upstreamCancelOnDownstreamCancel$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_upstreamCancelOnDownstreamCancel

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 107109.524 ops/s
# Warmup Iteration   2: 594376.636 ops/s
# Warmup Iteration   3: 1320613.691 ops/s
# Warmup Iteration   4: 1445114.145 ops/s
# Warmup Iteration   5: 1479423.415 ops/s
# Warmup Iteration   6: 1410980.647 ops/s
# Warmup Iteration   7: 1424432.384 ops/s
# Warmup Iteration   8: 1321475.042 ops/s
# Warmup Iteration   9: 1385157.643 ops/s
# Warmup Iteration  10: 1531129.531 ops/s
# Warmup Iteration  11: 1469681.144 ops/s
# Warmup Iteration  12: 1451119.707 ops/s
# Warmup Iteration  13: 1527902.834 ops/s
# Warmup Iteration  14: 1464761.545 ops/s
# Warmup Iteration  15: 1440460.002 ops/s
# Warmup Iteration  16: 1486224.412 ops/s
# Warmup Iteration  17: 1457305.080 ops/s
# Warmup Iteration  18: 1509708.134 ops/s
# Warmup Iteration  19: 1457350.998 ops/s
# Warmup Iteration  20: 1450623.453 ops/s
# Warmup Iteration  21: 1472308.326 ops/s
# Warmup Iteration  22: 1434898.744 ops/s
# Warmup Iteration  23: 1467100.134 ops/s
# Warmup Iteration  24: 1504608.503 ops/s
# Warmup Iteration  25: 1479513.884 ops/s
# Warmup Iteration  26: 1468633.946 ops/s
# Warmup Iteration  27: 1476735.294 ops/s
# Warmup Iteration  28: 1472042.653 ops/s
# Warmup Iteration  29: 1302277.116 ops/s
# Warmup Iteration  30: 1424602.253 ops/s
Iteration   1: 1453239.069 ops/s
Iteration   2: 1504238.855 ops/s
Iteration   3: 1447593.139 ops/s
Iteration   4: 1458631.041 ops/s
Iteration   5: 1467551.036 ops/s
Iteration   6: 1485757.897 ops/s
Iteration   7: 1434009.202 ops/s
Iteration   8: 1583220.559 ops/s
Iteration   9: 1502490.439 ops/s
Iteration  10: 1467887.549 ops/s
Iteration  11: 1483476.886 ops/s
Iteration  12: 1452585.081 ops/s
Iteration  13: 1501389.737 ops/s
Iteration  14: 1469384.471 ops/s
Iteration  15: 1470944.964 ops/s
Iteration  16: 1469216.712 ops/s
Iteration  17: 1481005.277 ops/s
Iteration  18: 1440714.543 ops/s
Iteration  19: 1519986.137 ops/s
Iteration  20: 1455691.725 ops/s
Iteration  21: 1470220.231 ops/s
Iteration  22: 1469684.748 ops/s
Iteration  23: 1546213.474 ops/s
Iteration  24: 1454830.874 ops/s
Iteration  25: 1439407.107 ops/s
Iteration  26: 1540296.281 ops/s
Iteration  27: 1417760.862 ops/s
Iteration  28: 1522771.109 ops/s
Iteration  29: 1509147.093 ops/s
Iteration  30: 1425080.404 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowablePublishFunctionTest._Benchmark.benchmark_upstreamCancelOnDownstreamCancel":
  1478147.550 ±(99.9%) 25321.550 ops/s [Average]
  (min, avg, max) = (1417760.862, 1478147.550, 1583220.559), stdev = 37900.106
  CI (99.9%): [1452826.000, 1503469.100] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                           Mode  Cnt        Score       Error  Units
FlowablePublishFunctionTest._Benchmark.benchmark_upstreamCancelOnDownstreamCancel  thrpt   30  1478147.550 ± 25321.550  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_coldReplayBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_coldReplayBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 125234.057 ops/s
# Warmup Iteration   2: 497964.424 ops/s
# Warmup Iteration   3: 499686.506 ops/s
# Warmup Iteration   4: 908071.087 ops/s
# Warmup Iteration   5: 914601.681 ops/s
# Warmup Iteration   6: 806546.795 ops/s
# Warmup Iteration   7: 953285.817 ops/s
# Warmup Iteration   8: 830175.923 ops/s
# Warmup Iteration   9: 930570.327 ops/s
# Warmup Iteration  10: 940068.456 ops/s
# Warmup Iteration  11: 947280.400 ops/s
# Warmup Iteration  12: 931397.150 ops/s
# Warmup Iteration  13: 916763.388 ops/s
# Warmup Iteration  14: 963230.906 ops/s
# Warmup Iteration  15: 927237.774 ops/s
# Warmup Iteration  16: 960149.388 ops/s
# Warmup Iteration  17: 914314.547 ops/s
# Warmup Iteration  18: 964500.310 ops/s
# Warmup Iteration  19: 918595.312 ops/s
# Warmup Iteration  20: 937009.736 ops/s
# Warmup Iteration  21: 998513.779 ops/s
# Warmup Iteration  22: 905436.252 ops/s
# Warmup Iteration  23: 954074.321 ops/s
# Warmup Iteration  24: 938143.427 ops/s
# Warmup Iteration  25: 893930.928 ops/s
# Warmup Iteration  26: 948691.754 ops/s
# Warmup Iteration  27: 930361.989 ops/s
# Warmup Iteration  28: 931314.820 ops/s
# Warmup Iteration  29: 936833.177 ops/s
# Warmup Iteration  30: 924080.279 ops/s
Iteration   1: 940104.360 ops/s
Iteration   2: 931452.339 ops/s
Iteration   3: 985923.796 ops/s
Iteration   4: 902551.287 ops/s
Iteration   5: 984907.706 ops/s
Iteration   6: 916252.208 ops/s
Iteration   7: 940392.273 ops/s
Iteration   8: 919964.998 ops/s
Iteration   9: 945529.847 ops/s
Iteration  10: 961971.118 ops/s
Iteration  11: 920144.444 ops/s
Iteration  12: 951289.228 ops/s
Iteration  13: 929743.973 ops/s
Iteration  14: 938679.869 ops/s
Iteration  15: 953347.687 ops/s
Iteration  16: 974691.751 ops/s
Iteration  17: 924685.137 ops/s
Iteration  18: 942866.355 ops/s
Iteration  19: 967529.887 ops/s
Iteration  20: 904917.003 ops/s
Iteration  21: 963276.329 ops/s
Iteration  22: 931921.258 ops/s
Iteration  23: 940419.836 ops/s
Iteration  24: 979839.793 ops/s
Iteration  25: 915538.500 ops/s
Iteration  26: 973961.368 ops/s
Iteration  27: 910556.817 ops/s
Iteration  28: 938830.465 ops/s
Iteration  29: 970644.103 ops/s
Iteration  30: 924653.205 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_coldReplayBackpressure":
  942886.231 ±(99.9%) 16205.099 ops/s [Average]
  (min, avg, max) = (902551.287, 942886.231, 985923.796), stdev = 24255.032
  CI (99.9%): [926681.132, 959091.331] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                     Mode  Cnt       Score       Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_coldReplayBackpressure  thrpt   30  942886.231 ± 16205.099  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_coldReplayBackpressure$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_coldReplayBackpressure

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 94233.101 ops/s
# Warmup Iteration   2: 442227.067 ops/s
# Warmup Iteration   3: 557369.123 ops/s
# Warmup Iteration   4: 873256.684 ops/s
# Warmup Iteration   5: 924455.135 ops/s
# Warmup Iteration   6: 882853.599 ops/s
# Warmup Iteration   7: 909530.386 ops/s
# Warmup Iteration   8: 950048.170 ops/s
# Warmup Iteration   9: 932311.093 ops/s
# Warmup Iteration  10: 985663.004 ops/s
# Warmup Iteration  11: 912715.119 ops/s
# Warmup Iteration  12: 972422.079 ops/s
# Warmup Iteration  13: 916349.934 ops/s
# Warmup Iteration  14: 946622.467 ops/s
# Warmup Iteration  15: 979893.422 ops/s
# Warmup Iteration  16: 950813.850 ops/s
# Warmup Iteration  17: 930985.749 ops/s
# Warmup Iteration  18: 952626.945 ops/s
# Warmup Iteration  19: 971503.491 ops/s
# Warmup Iteration  20: 920757.005 ops/s
# Warmup Iteration  21: 929726.571 ops/s
# Warmup Iteration  22: 930739.319 ops/s
# Warmup Iteration  23: 959104.493 ops/s
# Warmup Iteration  24: 785464.848 ops/s
# Warmup Iteration  25: 934286.293 ops/s
# Warmup Iteration  26: 964116.821 ops/s
# Warmup Iteration  27: 965023.017 ops/s
# Warmup Iteration  28: 931926.666 ops/s
# Warmup Iteration  29: 943893.339 ops/s
# Warmup Iteration  30: 913170.137 ops/s
Iteration   1: 985981.682 ops/s
Iteration   2: 951362.962 ops/s
Iteration   3: 968807.604 ops/s
Iteration   4: 931266.357 ops/s
Iteration   5: 999066.960 ops/s
Iteration   6: 984476.479 ops/s
Iteration   7: 932005.913 ops/s
Iteration   8: 984300.212 ops/s
Iteration   9: 969930.275 ops/s
Iteration  10: 933228.172 ops/s
Iteration  11: 970334.359 ops/s
Iteration  12: 932891.101 ops/s
Iteration  13: 929421.509 ops/s
Iteration  14: 945747.816 ops/s
Iteration  15: 961962.654 ops/s
Iteration  16: 951196.642 ops/s
Iteration  17: 973032.084 ops/s
Iteration  18: 936717.974 ops/s
Iteration  19: 944344.649 ops/s
Iteration  20: 938390.579 ops/s
Iteration  21: 928399.241 ops/s
Iteration  22: 987846.668 ops/s
Iteration  23: 929266.981 ops/s
Iteration  24: 975302.627 ops/s
Iteration  25: 942603.611 ops/s
Iteration  26: 947314.182 ops/s
Iteration  27: 993594.051 ops/s
Iteration  28: 894174.253 ops/s
Iteration  29: 974408.723 ops/s
Iteration  30: 933905.394 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_coldReplayBackpressure":
  954376.057 ±(99.9%) 16769.684 ops/s [Average]
  (min, avg, max) = (894174.253, 954376.057, 999066.960), stdev = 25100.075
  CI (99.9%): [937606.373, 971145.741] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
FlowableReplayTest._Benchmark.benchmark_coldReplayBackpressure  thrpt   30  954376.057 ± 16769.684  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 48536.219 ops/s
# Warmup Iteration   2: 172412.285 ops/s
# Warmup Iteration   3: 228335.224 ops/s
# Warmup Iteration   4: 319099.059 ops/s
# Warmup Iteration   5: 379648.412 ops/s
# Warmup Iteration   6: 387510.703 ops/s
# Warmup Iteration   7: 384749.848 ops/s
# Warmup Iteration   8: 397597.005 ops/s
# Warmup Iteration   9: 396623.100 ops/s
# Warmup Iteration  10: 380147.895 ops/s
# Warmup Iteration  11: 390168.561 ops/s
# Warmup Iteration  12: 395434.152 ops/s
# Warmup Iteration  13: 411690.406 ops/s
# Warmup Iteration  14: 384419.311 ops/s
# Warmup Iteration  15: 394029.660 ops/s
# Warmup Iteration  16: 387916.736 ops/s
# Warmup Iteration  17: 402748.312 ops/s
# Warmup Iteration  18: 387320.278 ops/s
# Warmup Iteration  19: 397902.471 ops/s
# Warmup Iteration  20: 412141.627 ops/s
# Warmup Iteration  21: 384178.736 ops/s
# Warmup Iteration  22: 396591.379 ops/s
# Warmup Iteration  23: 390369.064 ops/s
# Warmup Iteration  24: 381306.877 ops/s
# Warmup Iteration  25: 407956.031 ops/s
# Warmup Iteration  26: 380996.075 ops/s
# Warmup Iteration  27: 404472.592 ops/s
# Warmup Iteration  28: 389735.964 ops/s
# Warmup Iteration  29: 391225.342 ops/s
# Warmup Iteration  30: 387272.635 ops/s
Iteration   1: 402983.565 ops/s
Iteration   2: 383850.829 ops/s
Iteration   3: 398348.476 ops/s
Iteration   4: 394645.746 ops/s
Iteration   5: 396641.722 ops/s
Iteration   6: 395363.036 ops/s
Iteration   7: 383462.013 ops/s
Iteration   8: 382409.101 ops/s
Iteration   9: 408178.308 ops/s
Iteration  10: 382902.297 ops/s
Iteration  11: 398752.866 ops/s
Iteration  12: 391991.197 ops/s
Iteration  13: 381778.025 ops/s
Iteration  14: 397653.022 ops/s
Iteration  15: 370365.401 ops/s
Iteration  16: 379728.433 ops/s
Iteration  17: 401661.311 ops/s
Iteration  18: 382772.244 ops/s
Iteration  19: 382919.122 ops/s
Iteration  20: 406753.125 ops/s
Iteration  21: 398142.900 ops/s
Iteration  22: 388471.513 ops/s
Iteration  23: 403358.415 ops/s
Iteration  24: 384210.283 ops/s
Iteration  25: 395614.995 ops/s
Iteration  26: 404299.237 ops/s
Iteration  27: 381526.174 ops/s
Iteration  28: 389049.458 ops/s
Iteration  29: 399869.015 ops/s
Iteration  30: 395866.293 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries":
  392118.937 ±(99.9%) 6392.644 ops/s [Average]
  (min, avg, max) = (370365.401, 392118.937, 408178.308), stdev = 9568.209
  CI (99.9%): [385726.293, 398511.581] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                      Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries  thrpt   30  392118.937 ± 6392.644  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 55777.381 ops/s
# Warmup Iteration   2: 115399.416 ops/s
# Warmup Iteration   3: 84744.371 ops/s
# Warmup Iteration   4: 311501.642 ops/s
# Warmup Iteration   5: 313501.316 ops/s
# Warmup Iteration   6: 400423.573 ops/s
# Warmup Iteration   7: 396626.994 ops/s
# Warmup Iteration   8: 389908.629 ops/s
# Warmup Iteration   9: 400243.946 ops/s
# Warmup Iteration  10: 391558.467 ops/s
# Warmup Iteration  11: 384796.939 ops/s
# Warmup Iteration  12: 406390.259 ops/s
# Warmup Iteration  13: 393144.334 ops/s
# Warmup Iteration  14: 386254.010 ops/s
# Warmup Iteration  15: 409762.793 ops/s
# Warmup Iteration  16: 382393.354 ops/s
# Warmup Iteration  17: 391657.054 ops/s
# Warmup Iteration  18: 329871.399 ops/s
# Warmup Iteration  19: 387563.866 ops/s
# Warmup Iteration  20: 405759.490 ops/s
# Warmup Iteration  21: 389398.402 ops/s
# Warmup Iteration  22: 400010.677 ops/s
# Warmup Iteration  23: 407358.276 ops/s
# Warmup Iteration  24: 413875.028 ops/s
# Warmup Iteration  25: 389771.203 ops/s
# Warmup Iteration  26: 382376.442 ops/s
# Warmup Iteration  27: 392709.642 ops/s
# Warmup Iteration  28: 412510.074 ops/s
# Warmup Iteration  29: 385643.791 ops/s
# Warmup Iteration  30: 403319.086 ops/s
Iteration   1: 390127.834 ops/s
Iteration   2: 401138.395 ops/s
Iteration   3: 403207.873 ops/s
Iteration   4: 377411.674 ops/s
Iteration   5: 400938.715 ops/s
Iteration   6: 383401.532 ops/s
Iteration   7: 383840.302 ops/s
Iteration   8: 393727.498 ops/s
Iteration   9: 384690.718 ops/s
Iteration  10: 406072.955 ops/s
Iteration  11: 375043.378 ops/s
Iteration  12: 387791.528 ops/s
Iteration  13: 402431.250 ops/s
Iteration  14: 380650.358 ops/s
Iteration  15: 397130.441 ops/s
Iteration  16: 401985.621 ops/s
Iteration  17: 380163.847 ops/s
Iteration  18: 401178.330 ops/s
Iteration  19: 376374.462 ops/s
Iteration  20: 400170.356 ops/s
Iteration  21: 397041.043 ops/s
Iteration  22: 400836.040 ops/s
Iteration  23: 397825.853 ops/s
Iteration  24: 389806.965 ops/s
Iteration  25: 398598.033 ops/s
Iteration  26: 407035.859 ops/s
Iteration  27: 384013.459 ops/s
Iteration  28: 389732.367 ops/s
Iteration  29: 400534.954 ops/s
Iteration  30: 405001.632 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries":
  393263.442 ±(99.9%) 6540.550 ops/s [Average]
  (min, avg, max) = (375043.378, 393263.442, 407035.859), stdev = 9789.588
  CI (99.9%): [386722.892, 399803.992] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                         Mode  Cnt       Score      Error  Units
FlowableReplayTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries  thrpt   30  393263.442 ± 6540.550  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 42064.133 ops/s
# Warmup Iteration   2: 142715.873 ops/s
# Warmup Iteration   3: 203203.555 ops/s
# Warmup Iteration   4: 277910.844 ops/s
# Warmup Iteration   5: 319853.555 ops/s
# Warmup Iteration   6: 333534.188 ops/s
# Warmup Iteration   7: 333238.764 ops/s
# Warmup Iteration   8: 355849.950 ops/s
# Warmup Iteration   9: 334445.377 ops/s
# Warmup Iteration  10: 350452.384 ops/s
# Warmup Iteration  11: 349137.434 ops/s
# Warmup Iteration  12: 335294.839 ops/s
# Warmup Iteration  13: 346737.961 ops/s
# Warmup Iteration  14: 337703.791 ops/s
# Warmup Iteration  15: 340402.398 ops/s
# Warmup Iteration  16: 340170.241 ops/s
# Warmup Iteration  17: 338998.458 ops/s
# Warmup Iteration  18: 344163.286 ops/s
# Warmup Iteration  19: 331686.860 ops/s
# Warmup Iteration  20: 349991.111 ops/s
# Warmup Iteration  21: 334258.969 ops/s
# Warmup Iteration  22: 343876.205 ops/s
# Warmup Iteration  23: 336185.484 ops/s
# Warmup Iteration  24: 328931.374 ops/s
# Warmup Iteration  25: 348409.927 ops/s
# Warmup Iteration  26: 327429.464 ops/s
# Warmup Iteration  27: 349918.576 ops/s
# Warmup Iteration  28: 333285.436 ops/s
# Warmup Iteration  29: 349220.197 ops/s
# Warmup Iteration  30: 336313.560 ops/s
Iteration   1: 340361.308 ops/s
Iteration   2: 337296.249 ops/s
Iteration   3: 354956.803 ops/s
Iteration   4: 332778.655 ops/s
Iteration   5: 344056.923 ops/s
Iteration   6: 331292.850 ops/s
Iteration   7: 344678.359 ops/s
Iteration   8: 348670.984 ops/s
Iteration   9: 325663.370 ops/s
Iteration  10: 355486.492 ops/s
Iteration  11: 336592.410 ops/s
Iteration  12: 349626.195 ops/s
Iteration  13: 337423.886 ops/s
Iteration  14: 346651.674 ops/s
Iteration  15: 329620.649 ops/s
Iteration  16: 342702.025 ops/s
Iteration  17: 346575.269 ops/s
Iteration  18: 330059.427 ops/s
Iteration  19: 345944.231 ops/s
Iteration  20: 345628.273 ops/s
Iteration  21: 343569.695 ops/s
Iteration  22: 334715.097 ops/s
Iteration  23: 332668.439 ops/s
Iteration  24: 354104.110 ops/s
Iteration  25: 339100.939 ops/s
Iteration  26: 352652.259 ops/s
Iteration  27: 339775.263 ops/s
Iteration  28: 331376.922 ops/s
Iteration  29: 346078.097 ops/s
Iteration  30: 340929.002 ops/s


Result "io.reactivex.rxjava3.internal.operators.flowable.FlowableReplayEagerTruncateTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries2":
  341367.862 ±(99.9%) 5418.666 ops/s [Average]
  (min, avg, max) = (325663.370, 341367.862, 355486.492), stdev = 8110.405
  CI (99.9%): [335949.196, 346786.528] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                                       Mode  Cnt       Score      Error  Units
FlowableReplayEagerTruncateTest._Benchmark.benchmark_subscribersComeAndGoAtRequestBoundaries2  thrpt   30  341367.862 ± 5418.666  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalFallback$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalFallback

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 23010.276 ops/s
# Warmup Iteration   2: 179995.837 ops/s
# Warmup Iteration   3: 152225.207 ops/s
# Warmup Iteration   4: 131297.655 ops/s
# Warmup Iteration   5: 168317.826 ops/s
# Warmup Iteration   6: 120358.977 ops/s
# Warmup Iteration   7: 155367.028 ops/s
# Warmup Iteration   8: 143920.129 ops/s
# Warmup Iteration   9: 150233.144 ops/s
# Warmup Iteration  10: 148061.641 ops/s
# Warmup Iteration  11: 135521.251 ops/s
# Warmup Iteration  12: 146285.116 ops/s
# Warmup Iteration  13: 127096.654 ops/s
# Warmup Iteration  14: 167778.177 ops/s
# Warmup Iteration  15: 125273.600 ops/s
# Warmup Iteration  16: 142412.080 ops/s
# Warmup Iteration  17: 149256.985 ops/s
# Warmup Iteration  18: 152291.561 ops/s
# Warmup Iteration  19: 128111.873 ops/s
# Warmup Iteration  20: 140022.439 ops/s
# Warmup Iteration  21: 139169.142 ops/s
# Warmup Iteration  22: 160104.253 ops/s
# Warmup Iteration  23: 139213.797 ops/s
# Warmup Iteration  24: 154208.207 ops/s
# Warmup Iteration  25: 124883.704 ops/s
# Warmup Iteration  26: 136492.010 ops/s
# Warmup Iteration  27: 116156.491 ops/s
# Warmup Iteration  28: 132028.932 ops/s
# Warmup Iteration  29: 119632.509 ops/s
# Warmup Iteration  30: 133651.936 ops/s
Iteration   1: 141598.258 ops/s
Iteration   2: 127037.654 ops/s
Iteration   3: 152846.290 ops/s
Iteration   4: 158554.650 ops/s
Iteration   5: 168509.309 ops/s
Iteration   6: 130056.940 ops/s
Iteration   7: 122030.262 ops/s
Iteration   8: 130668.578 ops/s
Iteration   9: 114164.361 ops/s
Iteration  10: 118321.384 ops/s
Iteration  11: 143632.064 ops/s
Iteration  12: 126960.844 ops/s
Iteration  13: 142354.580 ops/s
Iteration  14: 154923.037 ops/s
Iteration  15: 157108.818 ops/s
Iteration  16: 146229.403 ops/s
Iteration  17: 138835.666 ops/s
Iteration  18: 150862.562 ops/s
Iteration  19: 143862.550 ops/s
Iteration  20: 129059.629 ops/s
Iteration  21: 130082.103 ops/s
Iteration  22: 134146.732 ops/s
Iteration  23: 128508.301 ops/s
Iteration  24: 122004.404 ops/s
Iteration  25: 136799.014 ops/s
Iteration  26: 128131.010 ops/s
Iteration  27: 138961.254 ops/s
Iteration  28: 150668.416 ops/s
Iteration  29: 137083.759 ops/s
Iteration  30: 124264.070 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalFallback":
  137608.863 ±(99.9%) 8838.323 ops/s [Average]
  (min, avg, max) = (114164.361, 137608.863, 168509.309), stdev = 13228.786
  CI (99.9%): [128770.541, 146447.186] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
MaybeTimeoutTest._Benchmark.benchmark_normalFallback  thrpt   30  137608.863 ± 8838.323  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalFlowable$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalFlowable

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 32805.807 ops/s
# Warmup Iteration   2: 113682.926 ops/s
# Warmup Iteration   3: 129091.631 ops/s
# Warmup Iteration   4: 132614.762 ops/s
# Warmup Iteration   5: 113288.797 ops/s
# Warmup Iteration   6: 134665.694 ops/s
# Warmup Iteration   7: 166950.126 ops/s
# Warmup Iteration   8: 136030.504 ops/s
# Warmup Iteration   9: 141520.342 ops/s
# Warmup Iteration  10: 139792.196 ops/s
# Warmup Iteration  11: 159871.822 ops/s
# Warmup Iteration  12: 120990.878 ops/s
# Warmup Iteration  13: 115432.712 ops/s
# Warmup Iteration  14: 137798.661 ops/s
# Warmup Iteration  15: 157090.488 ops/s
# Warmup Iteration  16: 111353.540 ops/s
# Warmup Iteration  17: 131959.442 ops/s
# Warmup Iteration  18: 120157.685 ops/s
# Warmup Iteration  19: 152131.265 ops/s
# Warmup Iteration  20: 159134.862 ops/s
# Warmup Iteration  21: 118791.842 ops/s
# Warmup Iteration  22: 126497.998 ops/s
# Warmup Iteration  23: 133970.526 ops/s
# Warmup Iteration  24: 122541.510 ops/s
# Warmup Iteration  25: 116306.159 ops/s
# Warmup Iteration  26: 143771.119 ops/s
# Warmup Iteration  27: 146230.325 ops/s
# Warmup Iteration  28: 120252.636 ops/s
# Warmup Iteration  29: 127380.411 ops/s
# Warmup Iteration  30: 111354.711 ops/s
Iteration   1: 139437.353 ops/s
Iteration   2: 151985.800 ops/s
Iteration   3: 148140.856 ops/s
Iteration   4: 141549.141 ops/s
Iteration   5: 152166.826 ops/s
Iteration   6: 131181.024 ops/s
Iteration   7: 137458.763 ops/s
Iteration   8: 114241.638 ops/s
Iteration   9: 138456.351 ops/s
Iteration  10: 140922.648 ops/s
Iteration  11: 162062.610 ops/s
Iteration  12: 116517.395 ops/s
Iteration  13: 121065.304 ops/s
Iteration  14: 134606.831 ops/s
Iteration  15: 146691.044 ops/s
Iteration  16: 136894.947 ops/s
Iteration  17: 127018.289 ops/s
Iteration  18: 121719.190 ops/s
Iteration  19: 120468.899 ops/s
Iteration  20: 122971.601 ops/s
Iteration  21: 120452.097 ops/s
Iteration  22: 141425.468 ops/s
Iteration  23: 130645.002 ops/s
Iteration  24: 117368.836 ops/s
Iteration  25: 131745.966 ops/s
Iteration  26: 131997.568 ops/s
Iteration  27: 141201.544 ops/s
Iteration  28: 143631.119 ops/s
Iteration  29: 154625.484 ops/s
Iteration  30: 145735.046 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalFlowable":
  135479.488 ±(99.9%) 8350.605 ops/s [Average]
  (min, avg, max) = (114241.638, 135479.488, 162062.610), stdev = 12498.793
  CI (99.9%): [127128.883, 143830.093] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                              Mode  Cnt       Score      Error  Units
MaybeTimeoutTest._Benchmark.benchmark_normalFlowable  thrpt   30  135479.488 ± 8350.605  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalFlowableFallback$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalFlowableFallback

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 21504.211 ops/s
# Warmup Iteration   2: 137573.077 ops/s
# Warmup Iteration   3: 148065.086 ops/s
# Warmup Iteration   4: 143850.617 ops/s
# Warmup Iteration   5: 167255.059 ops/s
# Warmup Iteration   6: 128770.581 ops/s
# Warmup Iteration   7: 147176.248 ops/s
# Warmup Iteration   8: 168118.553 ops/s
# Warmup Iteration   9: 150869.839 ops/s
# Warmup Iteration  10: 137144.257 ops/s
# Warmup Iteration  11: 151768.009 ops/s
# Warmup Iteration  12: 138896.507 ops/s
# Warmup Iteration  13: 130700.400 ops/s
# Warmup Iteration  14: 127935.163 ops/s
# Warmup Iteration  15: 193268.204 ops/s
# Warmup Iteration  16: 152595.727 ops/s
# Warmup Iteration  17: 138143.066 ops/s
# Warmup Iteration  18: 128657.806 ops/s
# Warmup Iteration  19: 126646.601 ops/s
# Warmup Iteration  20: 133225.669 ops/s
# Warmup Iteration  21: 159177.381 ops/s
# Warmup Iteration  22: 129160.194 ops/s
# Warmup Iteration  23: 126481.407 ops/s
# Warmup Iteration  24: 151258.617 ops/s
# Warmup Iteration  25: 161946.620 ops/s
# Warmup Iteration  26: 113120.605 ops/s
# Warmup Iteration  27: 141183.811 ops/s
# Warmup Iteration  28: 120855.507 ops/s
# Warmup Iteration  29: 131382.801 ops/s
# Warmup Iteration  30: 176929.813 ops/s
Iteration   1: 125333.833 ops/s
Iteration   2: 127453.317 ops/s
Iteration   3: 160743.330 ops/s
Iteration   4: 141687.281 ops/s
Iteration   5: 103928.899 ops/s
Iteration   6: 140833.443 ops/s
Iteration   7: 164842.866 ops/s
Iteration   8: 123491.619 ops/s
Iteration   9: 130567.396 ops/s
Iteration  10: 138418.037 ops/s
Iteration  11: 132100.606 ops/s
Iteration  12: 127556.016 ops/s
Iteration  13: 124934.747 ops/s
Iteration  14: 113333.278 ops/s
Iteration  15: 162733.419 ops/s
Iteration  16: 133915.176 ops/s
Iteration  17: 141220.598 ops/s
Iteration  18: 136928.401 ops/s
Iteration  19: 133853.302 ops/s
Iteration  20: 144344.502 ops/s
Iteration  21: 134253.928 ops/s
Iteration  22: 151764.567 ops/s
Iteration  23: 123814.785 ops/s
Iteration  24: 161031.499 ops/s
Iteration  25: 142781.979 ops/s
Iteration  26: 132659.840 ops/s
Iteration  27: 123270.113 ops/s
Iteration  28: 135681.542 ops/s
Iteration  29: 151059.734 ops/s
Iteration  30: 138853.433 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeTimeoutTest._Benchmark.benchmark_normalFlowableFallback":
  136779.716 ±(99.9%) 9540.763 ops/s [Average]
  (min, avg, max) = (103928.899, 136779.716, 164842.866), stdev = 14280.166
  CI (99.9%): [127238.953, 146320.479] (assumes normal distribution)


# Run complete. Total time: 00:01:03

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                      Mode  Cnt       Score      Error  Units
MaybeTimeoutTest._Benchmark.benchmark_normalFlowableFallback  thrpt   30  136779.716 ± 9540.763  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactFailingSupplier$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactFailingSupplier

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 0.825 ops/s
# Warmup Iteration   2: 25748.043 ops/s
# Warmup Iteration   3: 58598.285 ops/s
# Warmup Iteration   4: 94863.032 ops/s
# Warmup Iteration   5: 147284.357 ops/s
# Warmup Iteration   6: 125801.439 ops/s
# Warmup Iteration   7: 230963.213 ops/s
# Warmup Iteration   8: 280839.581 ops/s
# Warmup Iteration   9: 310694.454 ops/s
# Warmup Iteration  10: 310449.433 ops/s
# Warmup Iteration  11: 297977.779 ops/s
# Warmup Iteration  12: 310627.603 ops/s
# Warmup Iteration  13: 300886.293 ops/s
# Warmup Iteration  14: 304115.403 ops/s
# Warmup Iteration  15: 308261.502 ops/s
# Warmup Iteration  16: 312917.869 ops/s
# Warmup Iteration  17: 295835.516 ops/s
# Warmup Iteration  18: 302247.713 ops/s
# Warmup Iteration  19: 302368.817 ops/s
# Warmup Iteration  20: 297753.954 ops/s
# Warmup Iteration  21: 304065.229 ops/s
# Warmup Iteration  22: 299855.493 ops/s
# Warmup Iteration  23: 306222.591 ops/s
# Warmup Iteration  24: 302428.958 ops/s
# Warmup Iteration  25: 300413.504 ops/s
# Warmup Iteration  26: 290265.325 ops/s
# Warmup Iteration  27: 311667.054 ops/s
# Warmup Iteration  28: 301376.833 ops/s
# Warmup Iteration  29: 305577.561 ops/s
# Warmup Iteration  30: 308194.919 ops/s
Iteration   1: 304437.343 ops/s
Iteration   2: 303084.947 ops/s
Iteration   3: 311995.799 ops/s
Iteration   4: 299571.314 ops/s
Iteration   5: 308615.376 ops/s
Iteration   6: 299000.849 ops/s
Iteration   7: 313647.275 ops/s
Iteration   8: 309917.266 ops/s
Iteration   9: 311250.620 ops/s
Iteration  10: 298711.679 ops/s
Iteration  11: 311361.256 ops/s
Iteration  12: 304129.008 ops/s
Iteration  13: 314984.360 ops/s
Iteration  14: 304249.749 ops/s
Iteration  15: 291212.106 ops/s
Iteration  16: 312395.709 ops/s
Iteration  17: 296990.998 ops/s
Iteration  18: 317960.883 ops/s
Iteration  19: 292878.519 ops/s
Iteration  20: 309499.704 ops/s
Iteration  21: 309978.039 ops/s
Iteration  22: 299564.349 ops/s
Iteration  23: 313687.198 ops/s
Iteration  24: 298930.282 ops/s
Iteration  25: 307364.664 ops/s
Iteration  26: 301540.027 ops/s
Iteration  27: 303256.852 ops/s
Iteration  28: 275477.250 ops/s
Iteration  29: 289064.626 ops/s
Iteration  30: 310239.384 ops/s


Result "io.reactivex.rxjava3.internal.operators.observable.ObservableBufferTest._Benchmark.benchmark_bufferExactFailingSupplier":
  304166.581 ±(99.9%) 6095.627 ops/s [Average]
  (min, avg, max) = (275477.250, 304166.581, 317960.883), stdev = 9123.649
  CI (99.9%): [298070.954, 310262.209] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                              Mode  Cnt       Score      Error  Units
ObservableBufferTest._Benchmark.benchmark_bufferExactFailingSupplier  thrpt   30  304166.581 ± 6095.627  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnDoubleSubscribe$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnDoubleSubscribe

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 152080.967 ops/s
# Warmup Iteration   2: 450308.398 ops/s
# Warmup Iteration   3: 489358.923 ops/s
# Warmup Iteration   4: 513267.275 ops/s
# Warmup Iteration   5: 504555.947 ops/s
# Warmup Iteration   6: 493179.019 ops/s
# Warmup Iteration   7: 499601.685 ops/s
# Warmup Iteration   8: 495070.577 ops/s
# Warmup Iteration   9: 519348.314 ops/s
# Warmup Iteration  10: 473342.328 ops/s
# Warmup Iteration  11: 501141.063 ops/s
# Warmup Iteration  12: 523156.876 ops/s
# Warmup Iteration  13: 503509.687 ops/s
# Warmup Iteration  14: 499927.464 ops/s
# Warmup Iteration  15: 520884.092 ops/s
# Warmup Iteration  16: 497288.060 ops/s
# Warmup Iteration  17: 515072.800 ops/s
# Warmup Iteration  18: 548239.173 ops/s
# Warmup Iteration  19: 537097.840 ops/s
# Warmup Iteration  20: 530211.977 ops/s
# Warmup Iteration  21: 529730.142 ops/s
# Warmup Iteration  22: 520131.007 ops/s
# Warmup Iteration  23: 535757.552 ops/s
# Warmup Iteration  24: 535976.306 ops/s
# Warmup Iteration  25: 507781.703 ops/s
# Warmup Iteration  26: 531116.973 ops/s
# Warmup Iteration  27: 530911.823 ops/s
# Warmup Iteration  28: 525589.239 ops/s
# Warmup Iteration  29: 543473.412 ops/s
# Warmup Iteration  30: 537032.830 ops/s
Iteration   1: 556279.826 ops/s
Iteration   2: 536751.974 ops/s
Iteration   3: 520027.656 ops/s
Iteration   4: 547443.597 ops/s
Iteration   5: 552495.810 ops/s
Iteration   6: 517837.020 ops/s
Iteration   7: 539580.118 ops/s
Iteration   8: 530722.326 ops/s
Iteration   9: 536955.174 ops/s
Iteration  10: 538521.871 ops/s
Iteration  11: 537287.341 ops/s
Iteration  12: 517733.245 ops/s
Iteration  13: 526496.260 ops/s
Iteration  14: 527554.932 ops/s
Iteration  15: 533160.069 ops/s
Iteration  16: 539420.767 ops/s
Iteration  17: 511102.196 ops/s
Iteration  18: 534592.239 ops/s
Iteration  19: 515528.679 ops/s
Iteration  20: 543142.627 ops/s
Iteration  21: 517867.908 ops/s
Iteration  22: 522507.255 ops/s
Iteration  23: 558267.019 ops/s
Iteration  24: 516509.512 ops/s
Iteration  25: 548563.312 ops/s
Iteration  26: 527738.008 ops/s
Iteration  27: 511811.331 ops/s
Iteration  28: 550685.835 ops/s
Iteration  29: 556393.818 ops/s
Iteration  30: 546502.748 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_observeOnDoubleSubscribe":
  533982.682 ±(99.9%) 9508.699 ops/s [Average]
  (min, avg, max) = (511102.196, 533982.682, 558267.019), stdev = 14232.173
  CI (99.9%): [524473.984, 543491.381] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybeTest._Benchmark.benchmark_observeOnDoubleSubscribe  thrpt   30  533982.682 ± 9508.699  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 358749.710 ops/s
# Warmup Iteration   2: 605222.388 ops/s
# Warmup Iteration   3: 579987.261 ops/s
# Warmup Iteration   4: 687251.281 ops/s
# Warmup Iteration   5: 723655.488 ops/s
# Warmup Iteration   6: 683352.822 ops/s
# Warmup Iteration   7: 696067.651 ops/s
# Warmup Iteration   8: 717934.676 ops/s
# Warmup Iteration   9: 720551.844 ops/s
# Warmup Iteration  10: 682405.363 ops/s
# Warmup Iteration  11: 682991.780 ops/s
# Warmup Iteration  12: 697478.773 ops/s
# Warmup Iteration  13: 693307.064 ops/s
# Warmup Iteration  14: 732235.105 ops/s
# Warmup Iteration  15: 667185.691 ops/s
# Warmup Iteration  16: 661767.616 ops/s
# Warmup Iteration  17: 727570.856 ops/s
# Warmup Iteration  18: 741260.213 ops/s
# Warmup Iteration  19: 746827.409 ops/s
# Warmup Iteration  20: 746544.823 ops/s
# Warmup Iteration  21: 741446.661 ops/s
# Warmup Iteration  22: 760802.299 ops/s
# Warmup Iteration  23: 733962.105 ops/s
# Warmup Iteration  24: 728432.390 ops/s
# Warmup Iteration  25: 762202.140 ops/s
# Warmup Iteration  26: 735433.853 ops/s
# Warmup Iteration  27: 762921.711 ops/s
# Warmup Iteration  28: 778512.742 ops/s
# Warmup Iteration  29: 724858.062 ops/s
# Warmup Iteration  30: 760150.076 ops/s
Iteration   1: 732332.374 ops/s
Iteration   2: 751816.110 ops/s
Iteration   3: 769205.071 ops/s
Iteration   4: 745745.908 ops/s
Iteration   5: 757097.389 ops/s
Iteration   6: 730064.007 ops/s
Iteration   7: 780553.586 ops/s
Iteration   8: 728983.999 ops/s
Iteration   9: 752672.587 ops/s
Iteration  10: 737628.485 ops/s
Iteration  11: 753009.926 ops/s
Iteration  12: 767001.812 ops/s
Iteration  13: 717158.076 ops/s
Iteration  14: 745910.749 ops/s
Iteration  15: 727939.582 ops/s
Iteration  16: 748472.680 ops/s
Iteration  17: 768504.854 ops/s
Iteration  18: 713125.723 ops/s
Iteration  19: 766295.885 ops/s
Iteration  20: 725324.806 ops/s
Iteration  21: 767792.700 ops/s
Iteration  22: 728024.503 ops/s
Iteration  23: 558857.625 ops/s
Iteration  24: 751059.233 ops/s
Iteration  25: 724982.681 ops/s
Iteration  26: 747539.630 ops/s
Iteration  27: 767577.159 ops/s
Iteration  28: 697085.616 ops/s
Iteration  29: 761663.219 ops/s
Iteration  30: 729375.736 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleError":
  738426.724 ±(99.9%) 26249.325 ops/s [Average]
  (min, avg, max) = (558857.625, 738426.724, 780553.586), stdev = 39288.757
  CI (99.9%): [712177.399, 764676.049] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                               Mode  Cnt       Score       Error  Units
MaybeFlatMapSingleElementTest._Benchmark.benchmark_flatMapSingleError  thrpt   30  738426.724 ± 26249.325  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 365756.456 ops/s
# Warmup Iteration   2: 587137.343 ops/s
# Warmup Iteration   3: 665284.883 ops/s
# Warmup Iteration   4: 683730.383 ops/s
# Warmup Iteration   5: 594425.051 ops/s
# Warmup Iteration   6: 707441.762 ops/s
# Warmup Iteration   7: 700846.958 ops/s
# Warmup Iteration   8: 731634.615 ops/s
# Warmup Iteration   9: 685701.298 ops/s
# Warmup Iteration  10: 739768.071 ops/s
# Warmup Iteration  11: 726497.632 ops/s
# Warmup Iteration  12: 693970.617 ops/s
# Warmup Iteration  13: 732947.116 ops/s
# Warmup Iteration  14: 705725.394 ops/s
# Warmup Iteration  15: 691937.743 ops/s
# Warmup Iteration  16: 738604.422 ops/s
# Warmup Iteration  17: 748569.882 ops/s
# Warmup Iteration  18: 736992.352 ops/s
# Warmup Iteration  19: 773006.035 ops/s
# Warmup Iteration  20: 777235.588 ops/s
# Warmup Iteration  21: 720990.607 ops/s
# Warmup Iteration  22: 751540.806 ops/s
# Warmup Iteration  23: 773307.195 ops/s
# Warmup Iteration  24: 733933.317 ops/s
# Warmup Iteration  25: 729923.696 ops/s
# Warmup Iteration  26: 736229.334 ops/s
# Warmup Iteration  27: 778882.412 ops/s
# Warmup Iteration  28: 731124.936 ops/s
# Warmup Iteration  29: 766133.326 ops/s
# Warmup Iteration  30: 727631.360 ops/s
Iteration   1: 765998.601 ops/s
Iteration   2: 768889.464 ops/s
Iteration   3: 724252.762 ops/s
Iteration   4: 737743.445 ops/s
Iteration   5: 755217.719 ops/s
Iteration   6: 743776.307 ops/s
Iteration   7: 766782.341 ops/s
Iteration   8: 730835.163 ops/s
Iteration   9: 756730.241 ops/s
Iteration  10: 745739.980 ops/s
Iteration  11: 746520.566 ops/s
Iteration  12: 767139.867 ops/s
Iteration  13: 734326.851 ops/s
Iteration  14: 759721.507 ops/s
Iteration  15: 776535.670 ops/s
Iteration  16: 731538.211 ops/s
Iteration  17: 759542.210 ops/s
Iteration  18: 762861.786 ops/s
Iteration  19: 733158.527 ops/s
Iteration  20: 775773.317 ops/s
Iteration  21: 718412.695 ops/s
Iteration  22: 751962.399 ops/s
Iteration  23: 757293.385 ops/s
Iteration  24: 737749.465 ops/s
Iteration  25: 757890.270 ops/s
Iteration  26: 740062.840 ops/s
Iteration  27: 761058.666 ops/s
Iteration  28: 759169.582 ops/s
Iteration  29: 737358.136 ops/s
Iteration  30: 774857.398 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementError":
  751296.646 ±(99.9%) 10671.916 ops/s [Average]
  (min, avg, max) = (718412.695, 751296.646, 776535.670), stdev = 15973.222
  CI (99.9%): [740624.730, 761968.561] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score       Error  Units
MaybeConcatMapSingleTest._Benchmark.benchmark_flatMapSingleElementError  thrpt   30  751296.646 ± 10671.916  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_delayedErrorOnError$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_delayedErrorOnError

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 89360.038 ops/s
# Warmup Iteration   2: 438007.153 ops/s
# Warmup Iteration   3: 524334.271 ops/s
# Warmup Iteration   4: 522130.246 ops/s
# Warmup Iteration   5: 494192.695 ops/s
# Warmup Iteration   6: 563915.677 ops/s
# Warmup Iteration   7: 566304.933 ops/s
# Warmup Iteration   8: 582917.355 ops/s
# Warmup Iteration   9: 565347.052 ops/s
# Warmup Iteration  10: 558004.139 ops/s
# Warmup Iteration  11: 564303.241 ops/s
# Warmup Iteration  12: 568454.644 ops/s
# Warmup Iteration  13: 577891.867 ops/s
# Warmup Iteration  14: 556510.731 ops/s
# Warmup Iteration  15: 572478.764 ops/s
# Warmup Iteration  16: 577584.033 ops/s
# Warmup Iteration  17: 584105.003 ops/s
# Warmup Iteration  18: 593103.763 ops/s
# Warmup Iteration  19: 609045.493 ops/s
# Warmup Iteration  20: 592207.768 ops/s
# Warmup Iteration  21: 623062.782 ops/s
# Warmup Iteration  22: 587036.902 ops/s
# Warmup Iteration  23: 600936.178 ops/s
# Warmup Iteration  24: 580201.443 ops/s
# Warmup Iteration  25: 594570.560 ops/s
# Warmup Iteration  26: 622381.612 ops/s
# Warmup Iteration  27: 583002.692 ops/s
# Warmup Iteration  28: 610073.545 ops/s
# Warmup Iteration  29: 582751.830 ops/s
# Warmup Iteration  30: 593244.650 ops/s
Iteration   1: 583612.058 ops/s
Iteration   2: 594475.663 ops/s
Iteration   3: 591568.234 ops/s
Iteration   4: 605012.448 ops/s
Iteration   5: 610960.190 ops/s
Iteration   6: 582385.123 ops/s
Iteration   7: 622487.378 ops/s
Iteration   8: 616197.446 ops/s
Iteration   9: 598597.245 ops/s
Iteration  10: 618004.382 ops/s
Iteration  11: 607724.867 ops/s
Iteration  12: 581993.424 ops/s
Iteration  13: 607022.723 ops/s
Iteration  14: 581028.339 ops/s
Iteration  15: 584008.483 ops/s
Iteration  16: 616371.538 ops/s
Iteration  17: 552085.972 ops/s
Iteration  18: 536425.981 ops/s
Iteration  19: 607159.093 ops/s
Iteration  20: 593370.334 ops/s
Iteration  21: 615529.540 ops/s
Iteration  22: 583910.108 ops/s
Iteration  23: 604371.812 ops/s
Iteration  24: 599615.120 ops/s
Iteration  25: 613334.622 ops/s
Iteration  26: 580477.066 ops/s
Iteration  27: 609639.789 ops/s
Iteration  28: 603654.980 ops/s
Iteration  29: 594699.792 ops/s
Iteration  30: 605641.367 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDelayTest._Benchmark.benchmark_delayedErrorOnError":
  596712.171 ±(99.9%) 12767.038 ops/s [Average]
  (min, avg, max) = (536425.981, 596712.171, 622487.378), stdev = 19109.103
  CI (99.9%): [583945.132, 609479.209] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score       Error  Units
MaybeDelayTest._Benchmark.benchmark_delayedErrorOnError  thrpt   30  596712.171 ± 12767.038  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 197698.181 ops/s
# Warmup Iteration   2: 582947.771 ops/s
# Warmup Iteration   3: 658803.180 ops/s
# Warmup Iteration   4: 663855.018 ops/s
# Warmup Iteration   5: 612203.651 ops/s
# Warmup Iteration   6: 700422.315 ops/s
# Warmup Iteration   7: 640529.523 ops/s
# Warmup Iteration   8: 683722.510 ops/s
# Warmup Iteration   9: 696562.954 ops/s
# Warmup Iteration  10: 703324.527 ops/s
# Warmup Iteration  11: 698704.889 ops/s
# Warmup Iteration  12: 694207.523 ops/s
# Warmup Iteration  13: 726821.620 ops/s
# Warmup Iteration  14: 680126.883 ops/s
# Warmup Iteration  15: 717309.155 ops/s
# Warmup Iteration  16: 667032.461 ops/s
# Warmup Iteration  17: 749680.362 ops/s
# Warmup Iteration  18: 720420.115 ops/s
# Warmup Iteration  19: 744118.479 ops/s
# Warmup Iteration  20: 724926.211 ops/s
# Warmup Iteration  21: 747445.553 ops/s
# Warmup Iteration  22: 764514.213 ops/s
# Warmup Iteration  23: 769281.027 ops/s
# Warmup Iteration  24: 731300.910 ops/s
# Warmup Iteration  25: 703758.141 ops/s
# Warmup Iteration  26: 765837.607 ops/s
# Warmup Iteration  27: 710749.926 ops/s
# Warmup Iteration  28: 753115.968 ops/s
# Warmup Iteration  29: 761333.197 ops/s
# Warmup Iteration  30: 716812.407 ops/s
Iteration   1: 751170.752 ops/s
Iteration   2: 778979.442 ops/s
Iteration   3: 729980.583 ops/s
Iteration   4: 740190.727 ops/s
Iteration   5: 740177.476 ops/s
Iteration   6: 739413.352 ops/s
Iteration   7: 751261.810 ops/s
Iteration   8: 731350.248 ops/s
Iteration   9: 756208.852 ops/s
Iteration  10: 716214.198 ops/s
Iteration  11: 756156.148 ops/s
Iteration  12: 737499.894 ops/s
Iteration  13: 741662.729 ops/s
Iteration  14: 748104.724 ops/s
Iteration  15: 723771.454 ops/s
Iteration  16: 740100.609 ops/s
Iteration  17: 747774.423 ops/s
Iteration  18: 741520.238 ops/s
Iteration  19: 744915.134 ops/s
Iteration  20: 737791.810 ops/s
Iteration  21: 722730.331 ops/s
Iteration  22: 754229.454 ops/s
Iteration  23: 718250.068 ops/s
Iteration  24: 766365.775 ops/s
Iteration  25: 726478.608 ops/s
Iteration  26: 727636.026 ops/s
Iteration  27: 760269.836 ops/s
Iteration  28: 716911.080 ops/s
Iteration  29: 751810.716 ops/s
Iteration  30: 755606.068 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoAfterSuccessTest._Benchmark.benchmark_error":
  741817.752 ±(99.9%) 10154.070 ops/s [Average]
  (min, avg, max) = (716214.198, 741817.752, 778979.442), stdev = 15198.135
  CI (99.9%): [731663.682, 751971.822] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                            Mode  Cnt       Score       Error  Units
MaybeDoAfterSuccessTest._Benchmark.benchmark_error  thrpt   30  741817.752 ± 10154.070  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_error$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_error

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 269088.811 ops/s
# Warmup Iteration   2: 614691.394 ops/s
# Warmup Iteration   3: 645485.589 ops/s
# Warmup Iteration   4: 693738.592 ops/s
# Warmup Iteration   5: 590533.635 ops/s
# Warmup Iteration   6: 722973.140 ops/s
# Warmup Iteration   7: 683958.099 ops/s
# Warmup Iteration   8: 721170.450 ops/s
# Warmup Iteration   9: 714060.093 ops/s
# Warmup Iteration  10: 704415.593 ops/s
# Warmup Iteration  11: 684578.245 ops/s
# Warmup Iteration  12: 745986.517 ops/s
# Warmup Iteration  13: 693119.290 ops/s
# Warmup Iteration  14: 739604.475 ops/s
# Warmup Iteration  15: 686189.698 ops/s
# Warmup Iteration  16: 719482.370 ops/s
# Warmup Iteration  17: 755922.218 ops/s
# Warmup Iteration  18: 734887.246 ops/s
# Warmup Iteration  19: 770411.269 ops/s
# Warmup Iteration  20: 721498.408 ops/s
# Warmup Iteration  21: 760180.306 ops/s
# Warmup Iteration  22: 756744.243 ops/s
# Warmup Iteration  23: 737722.545 ops/s
# Warmup Iteration  24: 755699.830 ops/s
# Warmup Iteration  25: 746691.969 ops/s
# Warmup Iteration  26: 731567.041 ops/s
# Warmup Iteration  27: 768066.602 ops/s
# Warmup Iteration  28: 728214.036 ops/s
# Warmup Iteration  29: 771506.113 ops/s
# Warmup Iteration  30: 755989.635 ops/s
Iteration   1: 739529.094 ops/s
Iteration   2: 767985.100 ops/s
Iteration   3: 755850.919 ops/s
Iteration   4: 745832.778 ops/s
Iteration   5: 783898.587 ops/s
Iteration   6: 741783.859 ops/s
Iteration   7: 754067.399 ops/s
Iteration   8: 739535.510 ops/s
Iteration   9: 746035.316 ops/s
Iteration  10: 758578.810 ops/s
Iteration  11: 747589.853 ops/s
Iteration  12: 663737.930 ops/s
Iteration  13: 598684.052 ops/s
Iteration  14: 743609.617 ops/s
Iteration  15: 724362.646 ops/s
Iteration  16: 766036.084 ops/s
Iteration  17: 745484.974 ops/s
Iteration  18: 733608.417 ops/s
Iteration  19: 778097.532 ops/s
Iteration  20: 743701.090 ops/s
Iteration  21: 745269.554 ops/s
Iteration  22: 748951.097 ops/s
Iteration  23: 754399.833 ops/s
Iteration  24: 752880.997 ops/s
Iteration  25: 766310.017 ops/s
Iteration  26: 771525.045 ops/s
Iteration  27: 744784.991 ops/s
Iteration  28: 717473.214 ops/s
Iteration  29: 769742.284 ops/s
Iteration  30: 732903.349 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeHideTest._Benchmark.benchmark_error":
  742741.665 ±(99.9%) 23310.065 ops/s [Average]
  (min, avg, max) = (598684.052, 742741.665, 783898.587), stdev = 34889.411
  CI (99.9%): [719431.600, 766051.730] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                  Mode  Cnt       Score       Error  Units
MaybeHideTest._Benchmark.benchmark_error  thrpt   30  742741.665 ± 23310.065  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_dispose$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_dispose

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1927041.965 ops/s
# Warmup Iteration   2: 4500482.499 ops/s
# Warmup Iteration   3: 4650460.739 ops/s
# Warmup Iteration   4: 5660346.034 ops/s
# Warmup Iteration   5: 5951871.466 ops/s
# Warmup Iteration   6: 5626278.535 ops/s
# Warmup Iteration   7: 5727678.260 ops/s
# Warmup Iteration   8: 5782731.977 ops/s
# Warmup Iteration   9: 5770954.499 ops/s
# Warmup Iteration  10: 5650673.410 ops/s
# Warmup Iteration  11: 5835415.385 ops/s
# Warmup Iteration  12: 5582689.686 ops/s
# Warmup Iteration  13: 5775357.693 ops/s
# Warmup Iteration  14: 5681333.504 ops/s
# Warmup Iteration  15: 5671302.826 ops/s
# Warmup Iteration  16: 5681595.313 ops/s
# Warmup Iteration  17: 5864046.756 ops/s
# Warmup Iteration  18: 5864731.880 ops/s
# Warmup Iteration  19: 5555398.111 ops/s
# Warmup Iteration  20: 6008568.628 ops/s
# Warmup Iteration  21: 5812167.521 ops/s
# Warmup Iteration  22: 5662226.002 ops/s
# Warmup Iteration  23: 5937078.744 ops/s
# Warmup Iteration  24: 5739471.839 ops/s
# Warmup Iteration  25: 5672569.697 ops/s
# Warmup Iteration  26: 5578407.532 ops/s
# Warmup Iteration  27: 5594336.548 ops/s
# Warmup Iteration  28: 5876510.699 ops/s
# Warmup Iteration  29: 5416230.727 ops/s
# Warmup Iteration  30: 5871524.633 ops/s
Iteration   1: 5597172.626 ops/s
Iteration   2: 5850040.736 ops/s
Iteration   3: 6003630.424 ops/s
Iteration   4: 5525201.245 ops/s
Iteration   5: 5811443.133 ops/s
Iteration   6: 5726276.918 ops/s
Iteration   7: 5803753.385 ops/s
Iteration   8: 5738869.405 ops/s
Iteration   9: 5661196.342 ops/s
Iteration  10: 5731652.687 ops/s
Iteration  11: 5675567.926 ops/s
Iteration  12: 5692158.384 ops/s
Iteration  13: 5842141.738 ops/s
Iteration  14: 5690209.474 ops/s
Iteration  15: 5707417.256 ops/s
Iteration  16: 5615723.548 ops/s
Iteration  17: 5842898.301 ops/s
Iteration  18: 5684155.302 ops/s
Iteration  19: 5593762.803 ops/s
Iteration  20: 5919444.404 ops/s
Iteration  21: 5462221.231 ops/s
Iteration  22: 5783159.657 ops/s
Iteration  23: 5932810.966 ops/s
Iteration  24: 5546299.120 ops/s
Iteration  25: 5782758.652 ops/s
Iteration  26: 5867630.660 ops/s
Iteration  27: 5622418.161 ops/s
Iteration  28: 5785104.301 ops/s
Iteration  29: 5847491.988 ops/s
Iteration  30: 5639064.258 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDematerializeTest._Benchmark.benchmark_dispose":
  5732722.501 ±(99.9%) 85487.156 ops/s [Average]
  (min, avg, max) = (5462221.231, 5732722.501, 6003630.424), stdev = 127953.160
  CI (99.9%): [5647235.345, 5818209.657] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                             Mode  Cnt        Score       Error  Units
MaybeDematerializeTest._Benchmark.benchmark_dispose  thrpt   30  5732722.501 ± 85487.156  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalErrorConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalErrorConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 308115.007 ops/s
# Warmup Iteration   2: 589974.125 ops/s
# Warmup Iteration   3: 626583.484 ops/s
# Warmup Iteration   4: 713369.228 ops/s
# Warmup Iteration   5: 603720.643 ops/s
# Warmup Iteration   6: 702593.834 ops/s
# Warmup Iteration   7: 684559.772 ops/s
# Warmup Iteration   8: 731247.330 ops/s
# Warmup Iteration   9: 695019.926 ops/s
# Warmup Iteration  10: 715549.200 ops/s
# Warmup Iteration  11: 711271.942 ops/s
# Warmup Iteration  12: 710952.187 ops/s
# Warmup Iteration  13: 705237.189 ops/s
# Warmup Iteration  14: 710884.483 ops/s
# Warmup Iteration  15: 693930.319 ops/s
# Warmup Iteration  16: 737055.796 ops/s
# Warmup Iteration  17: 767285.082 ops/s
# Warmup Iteration  18: 731778.205 ops/s
# Warmup Iteration  19: 750096.434 ops/s
# Warmup Iteration  20: 788363.743 ops/s
# Warmup Iteration  21: 722190.047 ops/s
# Warmup Iteration  22: 754768.874 ops/s
# Warmup Iteration  23: 761823.785 ops/s
# Warmup Iteration  24: 748542.297 ops/s
# Warmup Iteration  25: 768845.445 ops/s
# Warmup Iteration  26: 742648.431 ops/s
# Warmup Iteration  27: 763643.249 ops/s
# Warmup Iteration  28: 792801.851 ops/s
# Warmup Iteration  29: 763094.481 ops/s
# Warmup Iteration  30: 729675.189 ops/s
Iteration   1: 788227.080 ops/s
Iteration   2: 768803.794 ops/s
Iteration   3: 734834.613 ops/s
Iteration   4: 774032.758 ops/s
Iteration   5: 726475.541 ops/s
Iteration   6: 780329.342 ops/s
Iteration   7: 540930.739 ops/s
Iteration   8: 685743.511 ops/s
Iteration   9: 789825.207 ops/s
Iteration  10: 718700.937 ops/s
Iteration  11: 752302.678 ops/s
Iteration  12: 787980.414 ops/s
Iteration  13: 739386.220 ops/s
Iteration  14: 771840.584 ops/s
Iteration  15: 766401.482 ops/s
Iteration  16: 736088.197 ops/s
Iteration  17: 754286.595 ops/s
Iteration  18: 758602.231 ops/s
Iteration  19: 761018.684 ops/s
Iteration  20: 737666.430 ops/s
Iteration  21: 755448.201 ops/s
Iteration  22: 734242.356 ops/s
Iteration  23: 747039.520 ops/s
Iteration  24: 782182.342 ops/s
Iteration  25: 728206.328 ops/s
Iteration  26: 765584.536 ops/s
Iteration  27: 733219.916 ops/s
Iteration  28: 717543.432 ops/s
Iteration  29: 766092.531 ops/s
Iteration  30: 741525.944 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_normalErrorConditional":
  744818.738 ±(99.9%) 30457.219 ops/s [Average]
  (min, avg, max) = (540930.739, 744818.738, 789825.207), stdev = 45586.935
  CI (99.9%): [714361.519, 775275.957] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                        Mode  Cnt       Score       Error  Units
MaybeDoFinallyTest._Benchmark.benchmark_normalErrorConditional  thrpt   30  744818.738 ± 30457.219  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorResumeNextFunctionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorResumeNextFunctionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 63129.158 ops/s
# Warmup Iteration   2: 176617.153 ops/s
# Warmup Iteration   3: 200430.471 ops/s
# Warmup Iteration   4: 175240.390 ops/s
# Warmup Iteration   5: 177998.907 ops/s
# Warmup Iteration   6: 195301.802 ops/s
# Warmup Iteration   7: 195364.030 ops/s
# Warmup Iteration   8: 186054.278 ops/s
# Warmup Iteration   9: 197728.416 ops/s
# Warmup Iteration  10: 198042.684 ops/s
# Warmup Iteration  11: 204330.600 ops/s
# Warmup Iteration  12: 198621.094 ops/s
# Warmup Iteration  13: 210799.308 ops/s
# Warmup Iteration  14: 206104.557 ops/s
# Warmup Iteration  15: 194673.179 ops/s
# Warmup Iteration  16: 203558.678 ops/s
# Warmup Iteration  17: 215387.951 ops/s
# Warmup Iteration  18: 218414.076 ops/s
# Warmup Iteration  19: 205264.819 ops/s
# Warmup Iteration  20: 215581.459 ops/s
# Warmup Iteration  21: 207169.159 ops/s
# Warmup Iteration  22: 218033.622 ops/s
# Warmup Iteration  23: 209672.451 ops/s
# Warmup Iteration  24: 202556.121 ops/s
# Warmup Iteration  25: 212246.952 ops/s
# Warmup Iteration  26: 216150.159 ops/s
# Warmup Iteration  27: 206588.523 ops/s
# Warmup Iteration  28: 207488.626 ops/s
# Warmup Iteration  29: 210524.731 ops/s
# Warmup Iteration  30: 205878.024 ops/s
Iteration   1: 216794.175 ops/s
Iteration   2: 206007.828 ops/s
Iteration   3: 212991.182 ops/s
Iteration   4: 205222.996 ops/s
Iteration   5: 209270.383 ops/s
Iteration   6: 218219.489 ops/s
Iteration   7: 198564.819 ops/s
Iteration   8: 213878.978 ops/s
Iteration   9: 205846.828 ops/s
Iteration  10: 210772.147 ops/s
Iteration  11: 215428.199 ops/s
Iteration  12: 204428.518 ops/s
Iteration  13: 214671.497 ops/s
Iteration  14: 210982.656 ops/s
Iteration  15: 197636.425 ops/s
Iteration  16: 214436.672 ops/s
Iteration  17: 204065.602 ops/s
Iteration  18: 207363.867 ops/s
Iteration  19: 215295.060 ops/s
Iteration  20: 209914.100 ops/s
Iteration  21: 206882.940 ops/s
Iteration  22: 214927.611 ops/s
Iteration  23: 204269.318 ops/s
Iteration  24: 216006.146 ops/s
Iteration  25: 211526.320 ops/s
Iteration  26: 205614.211 ops/s
Iteration  27: 220051.512 ops/s
Iteration  28: 210256.798 ops/s
Iteration  29: 204528.007 ops/s
Iteration  30: 214688.697 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorResumeNextFunctionThrows":
  210018.099 ±(99.9%) 3781.765 ops/s [Average]
  (min, avg, max) = (197636.425, 210018.099, 220051.512), stdev = 5660.368
  CI (99.9%): [206236.334, 213799.864] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                Mode  Cnt       Score      Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorResumeNextFunctionThrows  thrpt   30  210018.099 ± 3781.765  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_resourceSupplierThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_resourceSupplierThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 156660.804 ops/s
# Warmup Iteration   2: 574119.306 ops/s
# Warmup Iteration   3: 656363.774 ops/s
# Warmup Iteration   4: 646685.326 ops/s
# Warmup Iteration   5: 641421.275 ops/s
# Warmup Iteration   6: 626338.599 ops/s
# Warmup Iteration   7: 648033.609 ops/s
# Warmup Iteration   8: 669396.554 ops/s
# Warmup Iteration   9: 667173.874 ops/s
# Warmup Iteration  10: 673108.741 ops/s
# Warmup Iteration  11: 640243.433 ops/s
# Warmup Iteration  12: 691192.883 ops/s
# Warmup Iteration  13: 641715.438 ops/s
# Warmup Iteration  14: 657020.651 ops/s
# Warmup Iteration  15: 673114.652 ops/s
# Warmup Iteration  16: 648101.293 ops/s
# Warmup Iteration  17: 710605.564 ops/s
# Warmup Iteration  18: 680221.377 ops/s
# Warmup Iteration  19: 699678.760 ops/s
# Warmup Iteration  20: 717473.474 ops/s
# Warmup Iteration  21: 678759.852 ops/s
# Warmup Iteration  22: 704238.384 ops/s
# Warmup Iteration  23: 688827.220 ops/s
# Warmup Iteration  24: 690940.379 ops/s
# Warmup Iteration  25: 701316.311 ops/s
# Warmup Iteration  26: 681877.526 ops/s
# Warmup Iteration  27: 708869.118 ops/s
# Warmup Iteration  28: 703738.825 ops/s
# Warmup Iteration  29: 695125.931 ops/s
# Warmup Iteration  30: 719724.010 ops/s
Iteration   1: 695950.667 ops/s
Iteration   2: 591056.453 ops/s
Iteration   3: 691767.462 ops/s
Iteration   4: 680172.679 ops/s
Iteration   5: 719885.790 ops/s
Iteration   6: 687477.362 ops/s
Iteration   7: 680391.485 ops/s
Iteration   8: 719721.207 ops/s
Iteration   9: 680445.431 ops/s
Iteration  10: 714926.685 ops/s
Iteration  11: 676171.457 ops/s
Iteration  12: 729823.221 ops/s
Iteration  13: 687280.906 ops/s
Iteration  14: 674088.430 ops/s
Iteration  15: 716819.296 ops/s
Iteration  16: 695776.288 ops/s
Iteration  17: 708101.997 ops/s
Iteration  18: 690277.328 ops/s
Iteration  19: 726473.680 ops/s
Iteration  20: 669959.653 ops/s
Iteration  21: 696378.603 ops/s
Iteration  22: 711058.449 ops/s
Iteration  23: 691849.290 ops/s
Iteration  24: 705017.947 ops/s
Iteration  25: 695079.290 ops/s
Iteration  26: 715118.366 ops/s
Iteration  27: 677625.465 ops/s
Iteration  28: 704724.753 ops/s
Iteration  29: 717347.856 ops/s
Iteration  30: 679089.514 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_resourceSupplierThrows":
  694328.567 ±(99.9%) 17283.626 ops/s [Average]
  (min, avg, max) = (591056.453, 694328.567, 729823.221), stdev = 25869.319
  CI (99.9%): [677044.941, 711612.192] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                    Mode  Cnt       Score       Error  Units
MaybeUsingTest._Benchmark.benchmark_resourceSupplierThrows  thrpt   30  694328.567 ± 17283.626  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnFunctionThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnFunctionThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 20857.530 ops/s
# Warmup Iteration   2: 140941.025 ops/s
# Warmup Iteration   3: 181964.151 ops/s
# Warmup Iteration   4: 193823.607 ops/s
# Warmup Iteration   5: 193664.962 ops/s
# Warmup Iteration   6: 193342.618 ops/s
# Warmup Iteration   7: 192934.643 ops/s
# Warmup Iteration   8: 200442.303 ops/s
# Warmup Iteration   9: 203363.034 ops/s
# Warmup Iteration  10: 193510.505 ops/s
# Warmup Iteration  11: 193881.158 ops/s
# Warmup Iteration  12: 200608.693 ops/s
# Warmup Iteration  13: 187197.035 ops/s
# Warmup Iteration  14: 200576.879 ops/s
# Warmup Iteration  15: 194825.567 ops/s
# Warmup Iteration  16: 199515.065 ops/s
# Warmup Iteration  17: 205280.519 ops/s
# Warmup Iteration  18: 209461.146 ops/s
# Warmup Iteration  19: 199801.789 ops/s
# Warmup Iteration  20: 196692.808 ops/s
# Warmup Iteration  21: 203851.788 ops/s
# Warmup Iteration  22: 201737.422 ops/s
# Warmup Iteration  23: 210390.942 ops/s
# Warmup Iteration  24: 200429.250 ops/s
# Warmup Iteration  25: 209653.093 ops/s
# Warmup Iteration  26: 204038.581 ops/s
# Warmup Iteration  27: 214013.512 ops/s
# Warmup Iteration  28: 211272.724 ops/s
# Warmup Iteration  29: 204992.133 ops/s
# Warmup Iteration  30: 208674.825 ops/s
Iteration   1: 215635.191 ops/s
Iteration   2: 198741.999 ops/s
Iteration   3: 209584.772 ops/s
Iteration   4: 211652.718 ops/s
Iteration   5: 203597.552 ops/s
Iteration   6: 215232.407 ops/s
Iteration   7: 205941.468 ops/s
Iteration   8: 203347.719 ops/s
Iteration   9: 209197.111 ops/s
Iteration  10: 203030.691 ops/s
Iteration  11: 204022.380 ops/s
Iteration  12: 210154.140 ops/s
Iteration  13: 207497.570 ops/s
Iteration  14: 207556.722 ops/s
Iteration  15: 211279.965 ops/s
Iteration  16: 198982.330 ops/s
Iteration  17: 212499.419 ops/s
Iteration  18: 207579.150 ops/s
Iteration  19: 210558.526 ops/s
Iteration  20: 202362.729 ops/s
Iteration  21: 203700.985 ops/s
Iteration  22: 206821.648 ops/s
Iteration  23: 204276.906 ops/s
Iteration  24: 212767.301 ops/s
Iteration  25: 203538.809 ops/s
Iteration  26: 208082.146 ops/s
Iteration  27: 213753.825 ops/s
Iteration  28: 202708.822 ops/s
Iteration  29: 206173.876 ops/s
Iteration  30: 213029.733 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnFunctionThrows":
  207443.620 ±(99.9%) 3069.483 ops/s [Average]
  (min, avg, max) = (198741.999, 207443.620, 215635.191), stdev = 4594.258
  CI (99.9%): [204374.137, 210513.104] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                            Mode  Cnt       Score      Error  Units
MaybeOnErrorXTest._Benchmark.benchmark_onErrorReturnFunctionThrows  thrpt   30  207443.620 ± 3069.483  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_errorNonEager$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_errorNonEager

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 256446.408 ops/s
# Warmup Iteration   2: 514096.867 ops/s
# Warmup Iteration   3: 600432.590 ops/s
# Warmup Iteration   4: 615277.897 ops/s
# Warmup Iteration   5: 650758.077 ops/s
# Warmup Iteration   6: 637323.092 ops/s
# Warmup Iteration   7: 622602.153 ops/s
# Warmup Iteration   8: 634046.073 ops/s
# Warmup Iteration   9: 618467.377 ops/s
# Warmup Iteration  10: 630663.316 ops/s
# Warmup Iteration  11: 639640.845 ops/s
# Warmup Iteration  12: 609568.431 ops/s
# Warmup Iteration  13: 642377.380 ops/s
# Warmup Iteration  14: 608776.828 ops/s
# Warmup Iteration  15: 643767.489 ops/s
# Warmup Iteration  16: 621184.879 ops/s
# Warmup Iteration  17: 676593.226 ops/s
# Warmup Iteration  18: 657121.512 ops/s
# Warmup Iteration  19: 662098.706 ops/s
# Warmup Iteration  20: 667134.084 ops/s
# Warmup Iteration  21: 673782.942 ops/s
# Warmup Iteration  22: 661099.493 ops/s
# Warmup Iteration  23: 659819.559 ops/s
# Warmup Iteration  24: 647692.328 ops/s
# Warmup Iteration  25: 667621.212 ops/s
# Warmup Iteration  26: 648156.055 ops/s
# Warmup Iteration  27: 558804.555 ops/s
# Warmup Iteration  28: 660370.101 ops/s
# Warmup Iteration  29: 670981.325 ops/s
# Warmup Iteration  30: 686414.916 ops/s
Iteration   1: 651608.217 ops/s
Iteration   2: 659893.274 ops/s
Iteration   3: 653373.489 ops/s
Iteration   4: 683779.273 ops/s
Iteration   5: 649498.200 ops/s
Iteration   6: 640808.754 ops/s
Iteration   7: 654879.593 ops/s
Iteration   8: 653504.498 ops/s
Iteration   9: 663163.035 ops/s
Iteration  10: 706708.429 ops/s
Iteration  11: 635397.630 ops/s
Iteration  12: 684013.543 ops/s
Iteration  13: 672337.867 ops/s
Iteration  14: 661434.937 ops/s
Iteration  15: 686059.269 ops/s
Iteration  16: 655312.135 ops/s
Iteration  17: 658039.094 ops/s
Iteration  18: 680707.686 ops/s
Iteration  19: 655116.497 ops/s
Iteration  20: 653264.082 ops/s
Iteration  21: 672399.289 ops/s
Iteration  22: 633233.640 ops/s
Iteration  23: 689107.729 ops/s
Iteration  24: 637597.044 ops/s
Iteration  25: 648087.989 ops/s
Iteration  26: 661705.697 ops/s
Iteration  27: 666909.523 ops/s
Iteration  28: 638101.840 ops/s
Iteration  29: 687764.876 ops/s
Iteration  30: 675302.113 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeUsingTest._Benchmark.benchmark_errorNonEager":
  662303.642 ±(99.9%) 12215.802 ops/s [Average]
  (min, avg, max) = (633233.640, 662303.642, 706708.429), stdev = 18284.039
  CI (99.9%): [650087.840, 674519.443] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                           Mode  Cnt       Score       Error  Units
MaybeUsingTest._Benchmark.benchmark_errorNonEager  thrpt   30  662303.642 ± 12215.802  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_maybeSubscribe0$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_maybeSubscribe0

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 50306.532 ops/s
# Warmup Iteration   2: 142957.121 ops/s
# Warmup Iteration   3: 192350.937 ops/s
# Warmup Iteration   4: 193723.021 ops/s
# Warmup Iteration   5: 193020.816 ops/s
# Warmup Iteration   6: 198395.343 ops/s
# Warmup Iteration   7: 203534.243 ops/s
# Warmup Iteration   8: 198939.246 ops/s
# Warmup Iteration   9: 196973.987 ops/s
# Warmup Iteration  10: 212135.445 ops/s
# Warmup Iteration  11: 209384.799 ops/s
# Warmup Iteration  12: 195891.465 ops/s
# Warmup Iteration  13: 207614.882 ops/s
# Warmup Iteration  14: 199301.076 ops/s
# Warmup Iteration  15: 206765.801 ops/s
# Warmup Iteration  16: 203581.815 ops/s
# Warmup Iteration  17: 209581.764 ops/s
# Warmup Iteration  18: 211340.217 ops/s
# Warmup Iteration  19: 200175.307 ops/s
# Warmup Iteration  20: 216724.264 ops/s
# Warmup Iteration  21: 204007.751 ops/s
# Warmup Iteration  22: 207053.335 ops/s
# Warmup Iteration  23: 202102.324 ops/s
# Warmup Iteration  24: 205294.476 ops/s
# Warmup Iteration  25: 212846.883 ops/s
# Warmup Iteration  26: 207189.589 ops/s
# Warmup Iteration  27: 209704.470 ops/s
# Warmup Iteration  28: 218717.599 ops/s
# Warmup Iteration  29: 215675.656 ops/s
# Warmup Iteration  30: 199813.397 ops/s
Iteration   1: 220085.330 ops/s
Iteration   2: 208974.520 ops/s
Iteration   3: 202590.932 ops/s
Iteration   4: 216734.912 ops/s
Iteration   5: 205577.613 ops/s
Iteration   6: 212504.542 ops/s
Iteration   7: 212537.484 ops/s
Iteration   8: 214383.088 ops/s
Iteration   9: 205316.758 ops/s
Iteration  10: 206400.313 ops/s
Iteration  11: 210944.043 ops/s
Iteration  12: 204894.637 ops/s
Iteration  13: 210345.549 ops/s
Iteration  14: 205119.437 ops/s
Iteration  15: 211256.841 ops/s
Iteration  16: 220380.489 ops/s
Iteration  17: 219000.449 ops/s
Iteration  18: 205862.428 ops/s
Iteration  19: 215402.068 ops/s
Iteration  20: 217860.773 ops/s
Iteration  21: 205445.036 ops/s
Iteration  22: 210655.209 ops/s
Iteration  23: 205509.400 ops/s
Iteration  24: 212194.459 ops/s
Iteration  25: 209263.168 ops/s
Iteration  26: 206517.874 ops/s
Iteration  27: 214306.102 ops/s
Iteration  28: 207991.402 ops/s
Iteration  29: 209853.426 ops/s
Iteration  30: 212736.527 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_maybeSubscribe0":
  210688.160 ±(99.9%) 3313.796 ops/s [Average]
  (min, avg, max) = (202590.932, 210688.160, 220380.489), stdev = 4959.934
  CI (99.9%): [207374.365, 214001.956] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_maybeSubscribe0  thrpt   30  210688.160 ± 3313.796  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_maybeSubscribe1$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_maybeSubscribe1

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 51512.974 ops/s
# Warmup Iteration   2: 131035.874 ops/s
# Warmup Iteration   3: 195921.987 ops/s
# Warmup Iteration   4: 178377.421 ops/s
# Warmup Iteration   5: 196686.186 ops/s
# Warmup Iteration   6: 213485.795 ops/s
# Warmup Iteration   7: 197569.226 ops/s
# Warmup Iteration   8: 213095.672 ops/s
# Warmup Iteration   9: 198488.482 ops/s
# Warmup Iteration  10: 206922.899 ops/s
# Warmup Iteration  11: 203460.867 ops/s
# Warmup Iteration  12: 204777.336 ops/s
# Warmup Iteration  13: 205002.052 ops/s
# Warmup Iteration  14: 209455.645 ops/s
# Warmup Iteration  15: 203319.889 ops/s
# Warmup Iteration  16: 209096.733 ops/s
# Warmup Iteration  17: 208012.004 ops/s
# Warmup Iteration  18: 217501.676 ops/s
# Warmup Iteration  19: 213921.278 ops/s
# Warmup Iteration  20: 208875.712 ops/s
# Warmup Iteration  21: 202293.363 ops/s
# Warmup Iteration  22: 182991.115 ops/s
# Warmup Iteration  23: 220568.756 ops/s
# Warmup Iteration  24: 200068.619 ops/s
# Warmup Iteration  25: 214416.265 ops/s
# Warmup Iteration  26: 217789.429 ops/s
# Warmup Iteration  27: 207031.541 ops/s
# Warmup Iteration  28: 207425.755 ops/s
# Warmup Iteration  29: 214967.796 ops/s
# Warmup Iteration  30: 209977.601 ops/s
Iteration   1: 218524.684 ops/s
Iteration   2: 215535.406 ops/s
Iteration   3: 213916.166 ops/s
Iteration   4: 214450.603 ops/s
Iteration   5: 207732.914 ops/s
Iteration   6: 213839.656 ops/s
Iteration   7: 215330.474 ops/s
Iteration   8: 207435.965 ops/s
Iteration   9: 219240.364 ops/s
Iteration  10: 213707.392 ops/s
Iteration  11: 219030.752 ops/s
Iteration  12: 213133.505 ops/s
Iteration  13: 211557.595 ops/s
Iteration  14: 213324.957 ops/s
Iteration  15: 212280.307 ops/s
Iteration  16: 209051.552 ops/s
Iteration  17: 219800.918 ops/s
Iteration  18: 205643.022 ops/s
Iteration  19: 211950.909 ops/s
Iteration  20: 210534.434 ops/s
Iteration  21: 211256.283 ops/s
Iteration  22: 222973.629 ops/s
Iteration  23: 207160.844 ops/s
Iteration  24: 216874.720 ops/s
Iteration  25: 212415.587 ops/s
Iteration  26: 224115.680 ops/s
Iteration  27: 215229.121 ops/s
Iteration  28: 203836.624 ops/s
Iteration  29: 218032.763 ops/s
Iteration  30: 207724.200 ops/s


Result "io.reactivex.rxjava3.exceptions.OnErrorNotImplementedExceptionTest._Benchmark.benchmark_maybeSubscribe1":
  213521.368 ±(99.9%) 3319.487 ops/s [Average]
  (min, avg, max) = (203836.624, 213521.368, 224115.680), stdev = 4968.453
  CI (99.9%): [210201.880, 216840.855] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                                 Mode  Cnt       Score      Error  Units
OnErrorNotImplementedExceptionTest._Benchmark.benchmark_maybeSubscribe1  thrpt   30  213521.368 ± 3319.487  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnEventSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnEventSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 2253733.330 ops/s
# Warmup Iteration   2: 6087630.269 ops/s
# Warmup Iteration   3: 8809589.325 ops/s
# Warmup Iteration   4: 8373071.396 ops/s
# Warmup Iteration   5: 8914555.830 ops/s
# Warmup Iteration   6: 8742776.639 ops/s
# Warmup Iteration   7: 8323219.471 ops/s
# Warmup Iteration   8: 8485100.417 ops/s
# Warmup Iteration   9: 8427685.633 ops/s
# Warmup Iteration  10: 8408177.291 ops/s
# Warmup Iteration  11: 8665034.199 ops/s
# Warmup Iteration  12: 8815714.221 ops/s
# Warmup Iteration  13: 8322903.484 ops/s
# Warmup Iteration  14: 8776699.005 ops/s
# Warmup Iteration  15: 8576921.057 ops/s
# Warmup Iteration  16: 8205590.745 ops/s
# Warmup Iteration  17: 8517153.995 ops/s
# Warmup Iteration  18: 8125462.557 ops/s
# Warmup Iteration  19: 8548168.438 ops/s
# Warmup Iteration  20: 8110568.788 ops/s
# Warmup Iteration  21: 8302102.874 ops/s
# Warmup Iteration  22: 8534726.366 ops/s
# Warmup Iteration  23: 8264414.123 ops/s
# Warmup Iteration  24: 8012326.569 ops/s
# Warmup Iteration  25: 8566065.764 ops/s
# Warmup Iteration  26: 7901340.146 ops/s
# Warmup Iteration  27: 8411287.802 ops/s
# Warmup Iteration  28: 8068081.734 ops/s
# Warmup Iteration  29: 8042584.292 ops/s
# Warmup Iteration  30: 8165732.412 ops/s
Iteration   1: 8250919.867 ops/s
Iteration   2: 8231075.140 ops/s
Iteration   3: 8105551.498 ops/s
Iteration   4: 8510873.045 ops/s
Iteration   5: 7959257.897 ops/s
Iteration   6: 8413958.177 ops/s
Iteration   7: 8397081.654 ops/s
Iteration   8: 8088977.692 ops/s
Iteration   9: 8257914.483 ops/s
Iteration  10: 8133302.014 ops/s
Iteration  11: 8472423.054 ops/s
Iteration  12: 7946688.289 ops/s
Iteration  13: 7870228.700 ops/s
Iteration  14: 8486666.247 ops/s
Iteration  15: 8159274.818 ops/s
Iteration  16: 8177377.809 ops/s
Iteration  17: 8449284.814 ops/s
Iteration  18: 8392610.564 ops/s
Iteration  19: 7872801.798 ops/s
Iteration  20: 8236880.842 ops/s
Iteration  21: 8092664.347 ops/s
Iteration  22: 8740301.612 ops/s
Iteration  23: 8277550.989 ops/s
Iteration  24: 8145318.667 ops/s
Iteration  25: 8351220.654 ops/s
Iteration  26: 8191056.626 ops/s
Iteration  27: 8086609.925 ops/s
Iteration  28: 8191535.839 ops/s
Iteration  29: 8595016.574 ops/s
Iteration  30: 8519414.715 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doOnEventSuccess":
  8253461.278 ±(99.9%) 143165.974 ops/s [Average]
  (min, avg, max) = (7870228.700, 8253461.278, 8740301.612), stdev = 214284.107
  CI (99.9%): [8110295.304, 8396627.253] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                         Mode  Cnt        Score        Error  Units
MaybeTest._Benchmark.benchmark_doOnEventSuccess  thrpt   30  8253461.278 ± 143165.974  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_afterTerminateThrows$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_afterTerminateThrows

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 72477.525 ops/s
# Warmup Iteration   2: 191685.763 ops/s
# Warmup Iteration   3: 215015.695 ops/s
# Warmup Iteration   4: 192360.428 ops/s
# Warmup Iteration   5: 235387.925 ops/s
# Warmup Iteration   6: 228124.828 ops/s
# Warmup Iteration   7: 231612.845 ops/s
# Warmup Iteration   8: 241646.639 ops/s
# Warmup Iteration   9: 226413.368 ops/s
# Warmup Iteration  10: 231491.286 ops/s
# Warmup Iteration  11: 227478.898 ops/s
# Warmup Iteration  12: 227579.655 ops/s
# Warmup Iteration  13: 233834.255 ops/s
# Warmup Iteration  14: 230555.406 ops/s
# Warmup Iteration  15: 232690.739 ops/s
# Warmup Iteration  16: 194521.364 ops/s
# Warmup Iteration  17: 244325.096 ops/s
# Warmup Iteration  18: 238845.622 ops/s
# Warmup Iteration  19: 246337.145 ops/s
# Warmup Iteration  20: 233410.409 ops/s
# Warmup Iteration  21: 248312.008 ops/s
# Warmup Iteration  22: 238026.828 ops/s
# Warmup Iteration  23: 234968.697 ops/s
# Warmup Iteration  24: 242178.551 ops/s
# Warmup Iteration  25: 236260.644 ops/s
# Warmup Iteration  26: 239493.237 ops/s
# Warmup Iteration  27: 235937.193 ops/s
# Warmup Iteration  28: 243843.819 ops/s
# Warmup Iteration  29: 237180.195 ops/s
# Warmup Iteration  30: 235492.018 ops/s
Iteration   1: 251656.129 ops/s
Iteration   2: 245778.724 ops/s
Iteration   3: 232779.260 ops/s
Iteration   4: 243228.706 ops/s
Iteration   5: 236076.828 ops/s
Iteration   6: 238796.159 ops/s
Iteration   7: 251109.526 ops/s
Iteration   8: 246794.245 ops/s
Iteration   9: 234728.152 ops/s
Iteration  10: 250458.512 ops/s
Iteration  11: 232152.250 ops/s
Iteration  12: 246239.145 ops/s
Iteration  13: 240996.317 ops/s
Iteration  14: 236454.093 ops/s
Iteration  15: 242187.669 ops/s
Iteration  16: 238832.563 ops/s
Iteration  17: 253239.713 ops/s
Iteration  18: 244008.518 ops/s
Iteration  19: 232470.891 ops/s
Iteration  20: 249616.520 ops/s
Iteration  21: 230556.353 ops/s
Iteration  22: 241186.287 ops/s
Iteration  23: 235610.742 ops/s
Iteration  24: 240853.349 ops/s
Iteration  25: 238380.729 ops/s
Iteration  26: 237741.415 ops/s
Iteration  27: 235841.224 ops/s
Iteration  28: 235228.749 ops/s
Iteration  29: 247799.207 ops/s
Iteration  30: 240129.500 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybePeekTest._Benchmark.benchmark_afterTerminateThrows":
  241031.049 ±(99.9%) 4304.000 ops/s [Average]
  (min, avg, max) = (230556.353, 241031.049, 253239.713), stdev = 6442.026
  CI (99.9%): [236727.049, 245335.049] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                 Mode  Cnt       Score      Error  Units
MaybePeekTest._Benchmark.benchmark_afterTerminateThrows  thrpt   30  241031.049 ± 4304.000  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_actionThrowsConditional$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_actionThrowsConditional

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 49606.599 ops/s
# Warmup Iteration   2: 182262.695 ops/s
# Warmup Iteration   3: 170932.280 ops/s
# Warmup Iteration   4: 207954.962 ops/s
# Warmup Iteration   5: 220625.708 ops/s
# Warmup Iteration   6: 218015.982 ops/s
# Warmup Iteration   7: 213646.168 ops/s
# Warmup Iteration   8: 223434.362 ops/s
# Warmup Iteration   9: 212480.907 ops/s
# Warmup Iteration  10: 211984.058 ops/s
# Warmup Iteration  11: 217085.517 ops/s
# Warmup Iteration  12: 214514.344 ops/s
# Warmup Iteration  13: 220684.271 ops/s
# Warmup Iteration  14: 211615.391 ops/s
# Warmup Iteration  15: 210529.996 ops/s
# Warmup Iteration  16: 220441.785 ops/s
# Warmup Iteration  17: 219329.383 ops/s
# Warmup Iteration  18: 212613.723 ops/s
# Warmup Iteration  19: 229526.937 ops/s
# Warmup Iteration  20: 219955.690 ops/s
# Warmup Iteration  21: 223829.697 ops/s
# Warmup Iteration  22: 234471.495 ops/s
# Warmup Iteration  23: 213047.829 ops/s
# Warmup Iteration  24: 229052.632 ops/s
# Warmup Iteration  25: 234450.564 ops/s
# Warmup Iteration  26: 226119.809 ops/s
# Warmup Iteration  27: 224024.203 ops/s
# Warmup Iteration  28: 221536.035 ops/s
# Warmup Iteration  29: 221323.288 ops/s
# Warmup Iteration  30: 221775.355 ops/s
Iteration   1: 220718.775 ops/s
Iteration   2: 221525.645 ops/s
Iteration   3: 227720.657 ops/s
Iteration   4: 218808.385 ops/s
Iteration   5: 223515.435 ops/s
Iteration   6: 224422.637 ops/s
Iteration   7: 218230.445 ops/s
Iteration   8: 222371.848 ops/s
Iteration   9: 228616.164 ops/s
Iteration  10: 221871.187 ops/s
Iteration  11: 218999.254 ops/s
Iteration  12: 218188.953 ops/s
Iteration  13: 221685.159 ops/s
Iteration  14: 228583.011 ops/s
Iteration  15: 234160.811 ops/s
Iteration  16: 231781.188 ops/s
Iteration  17: 217294.502 ops/s
Iteration  18: 228907.941 ops/s
Iteration  19: 230831.052 ops/s
Iteration  20: 222594.226 ops/s
Iteration  21: 216859.906 ops/s
Iteration  22: 231720.593 ops/s
Iteration  23: 221934.228 ops/s
Iteration  24: 226887.006 ops/s
Iteration  25: 217972.084 ops/s
Iteration  26: 230063.879 ops/s
Iteration  27: 231630.728 ops/s
Iteration  28: 222834.480 ops/s
Iteration  29: 223924.166 ops/s
Iteration  30: 222374.245 ops/s


Result "io.reactivex.rxjava3.internal.operators.maybe.MaybeDoFinallyTest._Benchmark.benchmark_actionThrowsConditional":
  224234.286 ±(99.9%) 3382.648 ops/s [Average]
  (min, avg, max) = (216859.906, 224234.286, 234160.811), stdev = 5062.989
  CI (99.9%): [220851.638, 227616.934] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                         Mode  Cnt       Score      Error  Units
MaybeDoFinallyTest._Benchmark.benchmark_actionThrowsConditional  thrpt   30  224234.286 ± 3382.648  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_onErrorResumeWithValue$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_onErrorResumeWithValue

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1867924.940 ops/s
# Warmup Iteration   2: 4192997.535 ops/s
# Warmup Iteration   3: 6293716.873 ops/s
# Warmup Iteration   4: 5897581.083 ops/s
# Warmup Iteration   5: 6179161.605 ops/s
# Warmup Iteration   6: 6102742.863 ops/s
# Warmup Iteration   7: 6006162.681 ops/s
# Warmup Iteration   8: 5990248.753 ops/s
# Warmup Iteration   9: 6005430.708 ops/s
# Warmup Iteration  10: 4880818.410 ops/s
# Warmup Iteration  11: 6224201.779 ops/s
# Warmup Iteration  12: 5840160.703 ops/s
# Warmup Iteration  13: 6197172.429 ops/s
# Warmup Iteration  14: 5921793.114 ops/s
# Warmup Iteration  15: 6253874.022 ops/s
# Warmup Iteration  16: 6079295.651 ops/s
# Warmup Iteration  17: 5943318.920 ops/s
# Warmup Iteration  18: 6284605.664 ops/s
# Warmup Iteration  19: 6046678.844 ops/s
# Warmup Iteration  20: 6122226.357 ops/s
# Warmup Iteration  21: 6274741.904 ops/s
# Warmup Iteration  22: 6047571.507 ops/s
# Warmup Iteration  23: 6164754.898 ops/s
# Warmup Iteration  24: 5980028.288 ops/s
# Warmup Iteration  25: 5864401.782 ops/s
# Warmup Iteration  26: 6124570.817 ops/s
# Warmup Iteration  27: 6026658.332 ops/s
# Warmup Iteration  28: 6151453.276 ops/s
# Warmup Iteration  29: 6164006.302 ops/s
# Warmup Iteration  30: 5790847.902 ops/s
Iteration   1: 6337473.585 ops/s
Iteration   2: 6173450.452 ops/s
Iteration   3: 5981545.773 ops/s
Iteration   4: 6092394.690 ops/s
Iteration   5: 5904719.940 ops/s
Iteration   6: 6186474.741 ops/s
Iteration   7: 6077040.229 ops/s
Iteration   8: 5963810.088 ops/s
Iteration   9: 6183953.541 ops/s
Iteration  10: 5814564.260 ops/s
Iteration  11: 6206697.002 ops/s
Iteration  12: 5949841.007 ops/s
Iteration  13: 5949729.213 ops/s
Iteration  14: 5984619.652 ops/s
Iteration  15: 6200740.405 ops/s
Iteration  16: 6188292.616 ops/s
Iteration  17: 6025199.914 ops/s
Iteration  18: 6288562.125 ops/s
Iteration  19: 5997184.216 ops/s
Iteration  20: 6021746.262 ops/s
Iteration  21: 6197114.508 ops/s
Iteration  22: 5872153.093 ops/s
Iteration  23: 6105089.173 ops/s
Iteration  24: 6196888.197 ops/s
Iteration  25: 5877650.140 ops/s
Iteration  26: 6080073.513 ops/s
Iteration  27: 6141492.029 ops/s
Iteration  28: 6180787.887 ops/s
Iteration  29: 5992167.249 ops/s
Iteration  30: 6130738.967 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_onErrorResumeWithValue":
  6076739.816 ±(99.9%) 87717.646 ops/s [Average]
  (min, avg, max) = (5814564.260, 6076739.816, 6337473.585), stdev = 131291.653
  CI (99.9%): [5989022.170, 6164457.462] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                               Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_onErrorResumeWithValue  thrpt   30  6076739.816 ± 87717.646  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doAfterTerminateSuccess$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doAfterTerminateSuccess

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 1116232.563 ops/s
# Warmup Iteration   2: 3545396.905 ops/s
# Warmup Iteration   3: 5473572.258 ops/s
# Warmup Iteration   4: 5553988.195 ops/s
# Warmup Iteration   5: 5256719.801 ops/s
# Warmup Iteration   6: 5483366.798 ops/s
# Warmup Iteration   7: 5443755.913 ops/s
# Warmup Iteration   8: 5533909.541 ops/s
# Warmup Iteration   9: 5243442.455 ops/s
# Warmup Iteration  10: 5497593.961 ops/s
# Warmup Iteration  11: 5354378.242 ops/s
# Warmup Iteration  12: 5307423.353 ops/s
# Warmup Iteration  13: 5317190.958 ops/s
# Warmup Iteration  14: 5461476.135 ops/s
# Warmup Iteration  15: 5433970.640 ops/s
# Warmup Iteration  16: 5467006.369 ops/s
# Warmup Iteration  17: 5129826.868 ops/s
# Warmup Iteration  18: 5442015.942 ops/s
# Warmup Iteration  19: 5324425.129 ops/s
# Warmup Iteration  20: 5514949.841 ops/s
# Warmup Iteration  21: 5363471.353 ops/s
# Warmup Iteration  22: 5505377.582 ops/s
# Warmup Iteration  23: 5409416.720 ops/s
# Warmup Iteration  24: 5209826.518 ops/s
# Warmup Iteration  25: 5605308.791 ops/s
# Warmup Iteration  26: 5514392.572 ops/s
# Warmup Iteration  27: 5332077.157 ops/s
# Warmup Iteration  28: 5577407.586 ops/s
# Warmup Iteration  29: 5235019.867 ops/s
# Warmup Iteration  30: 5579858.519 ops/s
Iteration   1: 5416804.699 ops/s
Iteration   2: 5440236.115 ops/s
Iteration   3: 5345604.664 ops/s
Iteration   4: 5522967.314 ops/s
Iteration   5: 5302633.766 ops/s
Iteration   6: 5309781.531 ops/s
Iteration   7: 5639193.320 ops/s
Iteration   8: 5237449.111 ops/s
Iteration   9: 5518911.584 ops/s
Iteration  10: 5451171.698 ops/s
Iteration  11: 5253135.734 ops/s
Iteration  12: 5491979.219 ops/s
Iteration  13: 5296969.409 ops/s
Iteration  14: 5639173.907 ops/s
Iteration  15: 5435940.434 ops/s
Iteration  16: 5274913.239 ops/s
Iteration  17: 5545289.835 ops/s
Iteration  18: 5317879.924 ops/s
Iteration  19: 5502980.475 ops/s
Iteration  20: 5307052.927 ops/s
Iteration  21: 5504346.494 ops/s
Iteration  22: 5594104.738 ops/s
Iteration  23: 5305449.443 ops/s
Iteration  24: 5566075.610 ops/s
Iteration  25: 5253325.302 ops/s
Iteration  26: 5618279.805 ops/s
Iteration  27: 5328458.977 ops/s
Iteration  28: 5289543.296 ops/s
Iteration  29: 5563455.640 ops/s
Iteration  30: 5364136.941 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_doAfterTerminateSuccess":
  5421241.505 ±(99.9%) 86482.745 ops/s [Average]
  (min, avg, max) = (5237449.111, 5421241.505, 5639193.320), stdev = 129443.311
  CI (99.9%): [5334758.760, 5507724.250] (assumes normal distribution)


# Run complete. Total time: 00:01:02

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                                Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_doAfterTerminateSuccess  thrpt   30  5421241.505 ± 86482.745  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip2$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip2

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 313077.780 ops/s
# Warmup Iteration   2: 1330303.428 ops/s
# Warmup Iteration   3: 2281245.553 ops/s
# Warmup Iteration   4: 2292832.053 ops/s
# Warmup Iteration   5: 2605817.076 ops/s
# Warmup Iteration   6: 2838666.707 ops/s
# Warmup Iteration   7: 2831780.030 ops/s
# Warmup Iteration   8: 2680842.307 ops/s
# Warmup Iteration   9: 2775899.750 ops/s
# Warmup Iteration  10: 2854183.374 ops/s
# Warmup Iteration  11: 2706110.733 ops/s
# Warmup Iteration  12: 2654692.582 ops/s
# Warmup Iteration  13: 2877765.415 ops/s
# Warmup Iteration  14: 2843337.551 ops/s
# Warmup Iteration  15: 2686750.153 ops/s
# Warmup Iteration  16: 2712887.712 ops/s
# Warmup Iteration  17: 2845564.742 ops/s
# Warmup Iteration  18: 2778780.791 ops/s
# Warmup Iteration  19: 2796725.712 ops/s
# Warmup Iteration  20: 2876532.915 ops/s
# Warmup Iteration  21: 2725447.276 ops/s
# Warmup Iteration  22: 2760721.066 ops/s
# Warmup Iteration  23: 2756899.372 ops/s
# Warmup Iteration  24: 2788673.354 ops/s
# Warmup Iteration  25: 2729459.454 ops/s
# Warmup Iteration  26: 2718108.604 ops/s
# Warmup Iteration  27: 2865351.507 ops/s
# Warmup Iteration  28: 2707963.087 ops/s
# Warmup Iteration  29: 2785432.258 ops/s
# Warmup Iteration  30: 2841088.255 ops/s
Iteration   1: 2668848.993 ops/s
Iteration   2: 2746007.219 ops/s
Iteration   3: 2900944.924 ops/s
Iteration   4: 2813193.776 ops/s
Iteration   5: 2655093.372 ops/s
Iteration   6: 2832168.802 ops/s
Iteration   7: 2756856.095 ops/s
Iteration   8: 2761583.458 ops/s
Iteration   9: 2874721.463 ops/s
Iteration  10: 2772393.805 ops/s
Iteration  11: 2698080.328 ops/s
Iteration  12: 2868344.771 ops/s
Iteration  13: 2747064.899 ops/s
Iteration  14: 2752109.864 ops/s
Iteration  15: 2754570.783 ops/s
Iteration  16: 2709927.485 ops/s
Iteration  17: 2823584.543 ops/s
Iteration  18: 2721757.049 ops/s
Iteration  19: 2689864.023 ops/s
Iteration  20: 2847586.401 ops/s
Iteration  21: 2707332.699 ops/s
Iteration  22: 2907812.457 ops/s
Iteration  23: 2685094.498 ops/s
Iteration  24: 2880776.724 ops/s
Iteration  25: 2725598.345 ops/s
Iteration  26: 2752695.210 ops/s
Iteration  27: 2909091.536 ops/s
Iteration  28: 2657590.347 ops/s
Iteration  29: 2767154.719 ops/s
Iteration  30: 2731097.410 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip2":
  2770631.533 ±(99.9%) 51669.012 ops/s [Average]
  (min, avg, max) = (2655093.372, 2770631.533, 2909091.536), stdev = 77335.751
  CI (99.9%): [2718962.521, 2822300.545] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_zip2  thrpt   30  2770631.533 ± 51669.012  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip3$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip3

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 420055.335 ops/s
# Warmup Iteration   2: 1693686.049 ops/s
# Warmup Iteration   3: 2241507.380 ops/s
# Warmup Iteration   4: 2594746.884 ops/s
# Warmup Iteration   5: 2483920.541 ops/s
# Warmup Iteration   6: 2531608.882 ops/s
# Warmup Iteration   7: 2597741.064 ops/s
# Warmup Iteration   8: 2638923.813 ops/s
# Warmup Iteration   9: 2479614.550 ops/s
# Warmup Iteration  10: 2577025.315 ops/s
# Warmup Iteration  11: 2525627.972 ops/s
# Warmup Iteration  12: 2479942.507 ops/s
# Warmup Iteration  13: 2598146.478 ops/s
# Warmup Iteration  14: 2511853.790 ops/s
# Warmup Iteration  15: 2631499.652 ops/s
# Warmup Iteration  16: 2502107.983 ops/s
# Warmup Iteration  17: 2541809.299 ops/s
# Warmup Iteration  18: 2609686.730 ops/s
# Warmup Iteration  19: 2656277.793 ops/s
# Warmup Iteration  20: 2669205.925 ops/s
# Warmup Iteration  21: 2507634.838 ops/s
# Warmup Iteration  22: 2611779.974 ops/s
# Warmup Iteration  23: 2496916.436 ops/s
# Warmup Iteration  24: 2534141.096 ops/s
# Warmup Iteration  25: 2632332.376 ops/s
# Warmup Iteration  26: 2493415.077 ops/s
# Warmup Iteration  27: 2629614.106 ops/s
# Warmup Iteration  28: 2541293.884 ops/s
# Warmup Iteration  29: 2575635.138 ops/s
# Warmup Iteration  30: 2423026.390 ops/s
Iteration   1: 2573711.619 ops/s
Iteration   2: 2532315.806 ops/s
Iteration   3: 2512160.856 ops/s
Iteration   4: 2559685.154 ops/s
Iteration   5: 2631697.266 ops/s
Iteration   6: 2537295.243 ops/s
Iteration   7: 2503014.361 ops/s
Iteration   8: 2592551.557 ops/s
Iteration   9: 2500374.132 ops/s
Iteration  10: 2623810.745 ops/s
Iteration  11: 2496166.510 ops/s
Iteration  12: 2586788.545 ops/s
Iteration  13: 2643828.317 ops/s
Iteration  14: 2513264.884 ops/s
Iteration  15: 2497354.853 ops/s
Iteration  16: 2547015.921 ops/s
Iteration  17: 2594663.777 ops/s
Iteration  18: 2553997.998 ops/s
Iteration  19: 2550959.904 ops/s
Iteration  20: 2575672.726 ops/s
Iteration  21: 2617631.003 ops/s
Iteration  22: 2491128.930 ops/s
Iteration  23: 2705548.604 ops/s
Iteration  24: 2503010.695 ops/s
Iteration  25: 2623286.229 ops/s
Iteration  26: 2608371.046 ops/s
Iteration  27: 2476091.653 ops/s
Iteration  28: 2615264.252 ops/s
Iteration  29: 2480809.279 ops/s
Iteration  30: 2557199.090 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip3":
  2560155.698 ±(99.9%) 38382.062 ops/s [Average]
  (min, avg, max) = (2476091.653, 2560155.698, 2705548.604), stdev = 57448.467
  CI (99.9%): [2521773.637, 2598537.760] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_zip3  thrpt   30  2560155.698 ± 38382.062  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zipWith$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zipWith

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 408138.590 ops/s
# Warmup Iteration   2: 1217063.276 ops/s
# Warmup Iteration   3: 2554814.582 ops/s
# Warmup Iteration   4: 2551498.476 ops/s
# Warmup Iteration   5: 2642533.685 ops/s
# Warmup Iteration   6: 2406149.692 ops/s
# Warmup Iteration   7: 2384714.945 ops/s
# Warmup Iteration   8: 2765056.228 ops/s
# Warmup Iteration   9: 2522043.629 ops/s
# Warmup Iteration  10: 2694020.409 ops/s
# Warmup Iteration  11: 2567515.100 ops/s
# Warmup Iteration  12: 2632653.588 ops/s
# Warmup Iteration  13: 2552259.436 ops/s
# Warmup Iteration  14: 2646603.107 ops/s
# Warmup Iteration  15: 2694340.180 ops/s
# Warmup Iteration  16: 2625016.023 ops/s
# Warmup Iteration  17: 2668515.540 ops/s
# Warmup Iteration  18: 2622039.564 ops/s
# Warmup Iteration  19: 2618647.193 ops/s
# Warmup Iteration  20: 2685592.587 ops/s
# Warmup Iteration  21: 2665541.062 ops/s
# Warmup Iteration  22: 2570177.197 ops/s
# Warmup Iteration  23: 2707224.825 ops/s
# Warmup Iteration  24: 2535156.076 ops/s
# Warmup Iteration  25: 2708541.038 ops/s
# Warmup Iteration  26: 2703316.404 ops/s
# Warmup Iteration  27: 2768674.338 ops/s
# Warmup Iteration  28: 2516474.730 ops/s
# Warmup Iteration  29: 2690627.073 ops/s
# Warmup Iteration  30: 2573862.245 ops/s
Iteration   1: 2702223.186 ops/s
Iteration   2: 2623847.978 ops/s
Iteration   3: 2742493.750 ops/s
Iteration   4: 2580000.723 ops/s
Iteration   5: 2668047.568 ops/s
Iteration   6: 2710681.774 ops/s
Iteration   7: 2616407.757 ops/s
Iteration   8: 2736132.337 ops/s
Iteration   9: 2606521.041 ops/s
Iteration  10: 2621433.444 ops/s
Iteration  11: 2619843.970 ops/s
Iteration  12: 2673801.517 ops/s
Iteration  13: 2526249.849 ops/s
Iteration  14: 2587058.646 ops/s
Iteration  15: 2635036.710 ops/s
Iteration  16: 2635483.898 ops/s
Iteration  17: 2613931.996 ops/s
Iteration  18: 2773142.376 ops/s
Iteration  19: 2760653.652 ops/s
Iteration  20: 2529430.163 ops/s
Iteration  21: 2676005.555 ops/s
Iteration  22: 2613042.858 ops/s
Iteration  23: 2725175.460 ops/s
Iteration  24: 2690600.967 ops/s
Iteration  25: 2654150.704 ops/s
Iteration  26: 2739413.877 ops/s
Iteration  27: 2563297.945 ops/s
Iteration  28: 2628053.739 ops/s
Iteration  29: 2761589.602 ops/s
Iteration  30: 2552170.018 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zipWith":
  2652197.435 ±(99.9%) 47045.399 ops/s [Average]
  (min, avg, max) = (2526249.849, 2652197.435, 2773142.376), stdev = 70415.343
  CI (99.9%): [2605152.037, 2699242.834] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                                Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_zipWith  thrpt   30  2652197.435 ± 47045.399  ops/s
----------------------------------------
=== Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip4$ ===
# JMH version: 1.21
# VM version: JDK 1.8.0_432, OpenJDK 64-Bit Server VM, 25.432-b06
# VM invoker: /usr/lib/jvm/java-1.8.0-amazon-corretto.x86_64/jre/bin/java
# VM options: <none>
# Warmup: 30 iterations, 1 s each
# Measurement: 30 iterations, 1 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Throughput, ops/time
# Benchmark: io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip4

# Run progress: 0.00% complete, ETA 00:01:00
# Fork: 1 of 1
# Warmup Iteration   1: 281197.735 ops/s
# Warmup Iteration   2: 543082.494 ops/s
# Warmup Iteration   3: 941458.069 ops/s
# Warmup Iteration   4: 1772091.468 ops/s
# Warmup Iteration   5: 2153841.847 ops/s
# Warmup Iteration   6: 1969574.338 ops/s
# Warmup Iteration   7: 1966814.339 ops/s
# Warmup Iteration   8: 2064551.093 ops/s
# Warmup Iteration   9: 2032089.750 ops/s
# Warmup Iteration  10: 2025343.158 ops/s
# Warmup Iteration  11: 2032082.779 ops/s
# Warmup Iteration  12: 1977712.729 ops/s
# Warmup Iteration  13: 2068869.605 ops/s
# Warmup Iteration  14: 1998451.570 ops/s
# Warmup Iteration  15: 2078370.328 ops/s
# Warmup Iteration  16: 2072863.762 ops/s
# Warmup Iteration  17: 2012778.370 ops/s
# Warmup Iteration  18: 2035811.816 ops/s
# Warmup Iteration  19: 2081472.735 ops/s
# Warmup Iteration  20: 1979482.698 ops/s
# Warmup Iteration  21: 2070152.288 ops/s
# Warmup Iteration  22: 2047313.079 ops/s
# Warmup Iteration  23: 2024918.418 ops/s
# Warmup Iteration  24: 2040038.374 ops/s
# Warmup Iteration  25: 2110092.866 ops/s
# Warmup Iteration  26: 1962588.402 ops/s
# Warmup Iteration  27: 2080185.960 ops/s
# Warmup Iteration  28: 1985698.207 ops/s
# Warmup Iteration  29: 2055376.884 ops/s
# Warmup Iteration  30: 1996702.441 ops/s
Iteration   1: 2039004.358 ops/s
Iteration   2: 2043461.032 ops/s
Iteration   3: 1999063.986 ops/s
Iteration   4: 2115791.422 ops/s
Iteration   5: 2011531.829 ops/s
Iteration   6: 2032589.820 ops/s
Iteration   7: 2010121.496 ops/s
Iteration   8: 2017433.931 ops/s
Iteration   9: 2035203.192 ops/s
Iteration  10: 2030981.021 ops/s
Iteration  11: 1997654.046 ops/s
Iteration  12: 2025987.305 ops/s
Iteration  13: 2014831.740 ops/s
Iteration  14: 2022907.747 ops/s
Iteration  15: 2038587.855 ops/s
Iteration  16: 1947082.772 ops/s
Iteration  17: 2105901.254 ops/s
Iteration  18: 1963212.148 ops/s
Iteration  19: 2030533.592 ops/s
Iteration  20: 2076884.618 ops/s
Iteration  21: 2019526.926 ops/s
Iteration  22: 2065138.065 ops/s
Iteration  23: 2056443.131 ops/s
Iteration  24: 2018754.547 ops/s
Iteration  25: 1460883.322 ops/s
Iteration  26: 2048409.471 ops/s
Iteration  27: 1957082.433 ops/s
Iteration  28: 2065909.084 ops/s
Iteration  29: 2108369.090 ops/s
Iteration  30: 1949105.275 ops/s


Result "io.reactivex.rxjava3.maybe.MaybeTest._Benchmark.benchmark_zip4":
  2010279.550 ±(99.9%) 74877.192 ops/s [Average]
  (min, avg, max) = (1460883.322, 2010279.550, 2115791.422), stdev = 112072.664
  CI (99.9%): [1935402.359, 2085156.742] (assumes normal distribution)


# Run complete. Total time: 00:01:01

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             Mode  Cnt        Score       Error  Units
MaybeTest._Benchmark.benchmark_zip4  thrpt   30  2010279.550 ± 74877.192  ops/s
----------------------------------------
